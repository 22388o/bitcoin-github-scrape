[
  {
    "sha": "69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWE2ZjFhZDFmN2NhNTJiMjUyNGFiODMyMmJmYTg5YTliMGVlNjFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-21T18:38:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-21T18:38:39Z"
      },
      "message": "Merge #17513: refactor, qt: Nuke some circular dependencies\n\n5f50599ae7077ae9b9b56edb8892387b6ddc460a refactor: Cleanup headers from walletmodel.h (Hennadii Stepanov)\na53e9895db7617c879858ca27e38e6aaf35f6075 refactor: Nuke walletmodel circular dependency (Hennadii Stepanov)\n49c4211c0435e3b27c8107a332de22e9cad84390 refactor: Nuke walletmodeltransaction circular dep (Hennadii Stepanov)\n567cb44eb95785c8df93a3844207d17f4c390372 refactor: Nuke guiutil circular dependency (Hennadii Stepanov)\n73b5505cfe0a8583718c708f7a99762c29d81274 refactor: Move SendCoinsRecipient in own header (Hennadii Stepanov)\n\nPull request description:\n\n  This PR gets rid of the following circular dependencies:\n  - `qt/guiutil` -> `qt/walletmodel` -> `qt/optionsmodel` -> `qt/guiutil`\n  - `qt/walletmodel` -> `qt/walletmodeltransaction` -> `qt/walletmodel`\n  - `qt/paymentserver` -> `qt/walletmodel` -> `qt/paymentserver`\n\nACKs for top commit:\n  Sjors:\n    ACK 5f50599ae7077ae9b9b56edb8892387b6ddc460a\n  instagibbs:\n    code review ACK 5f50599ae7077ae9b9b56edb8892387b6ddc460a\n  practicalswift:\n    ACK 5f50599ae7077ae9b9b56edb8892387b6ddc460a -- diff looks correct\n  promag:\n    ACK 5f50599ae7077ae9b9b56edb8892387b6ddc460a.\n\nTree-SHA512: 070686ac82b5c68c3ef1b8b4c16b4b916b84d80d1e92e42287fdd9454671bea54779c0d2db4db623750aaaf180beaba212137190d6a427113905e2c4be5c60c5",
      "tree": {
        "sha": "22d052fe7a7d9ec5f6ec8f9ae9e119b1cbba8dcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22d052fe7a7d9ec5f6ec8f9ae9e119b1cbba8dcc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3W2a8ACgkQHkrtYphs\n0l1FIwf+K0/4fPn9FXLecu/xrvHIasooKTpYw+aOW7c8DCEPE9UTHQDnaFZMoX8L\ngcnCXEWNz+PDeDXmySqjaqsK8EbhyNoq30U/dAfoS8ITV+zgML6GGsZhUL0mG2dc\nkiyVwd4j/APShkQkzBXNt4gGoDsYUB8EU+JeJnfzc0uFuWk4AUwiM96fFcuuR7hM\nHCROYbZ7wIR+eJfZ3EJkbh4MAYKzfIcaMk6LHQHo6mP8qvB15tQLNTIwTj/aw7kH\n1S0pG3woumTSmkK6iNcNOuhmWI45wEN/tBBk+dIDQnF2LmWtwcFAwS4kx8uDddMM\nlXAKNvLNvYhheHSZY4BQPEk5NSyDXg==\n=EUJj\n-----END PGP SIGNATURE-----",
        "payload": "tree 22d052fe7a7d9ec5f6ec8f9ae9e119b1cbba8dcc\nparent ae6943620ab369e8e0865c3ec2d2848ba9389325\nparent 5f50599ae7077ae9b9b56edb8892387b6ddc460a\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1574361502 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1574361519 +0100\n\nMerge #17513: refactor, qt: Nuke some circular dependencies\n\n5f50599ae7077ae9b9b56edb8892387b6ddc460a refactor: Cleanup headers from walletmodel.h (Hennadii Stepanov)\na53e9895db7617c879858ca27e38e6aaf35f6075 refactor: Nuke walletmodel circular dependency (Hennadii Stepanov)\n49c4211c0435e3b27c8107a332de22e9cad84390 refactor: Nuke walletmodeltransaction circular dep (Hennadii Stepanov)\n567cb44eb95785c8df93a3844207d17f4c390372 refactor: Nuke guiutil circular dependency (Hennadii Stepanov)\n73b5505cfe0a8583718c708f7a99762c29d81274 refactor: Move SendCoinsRecipient in own header (Hennadii Stepanov)\n\nPull request description:\n\n  This PR gets rid of the following circular dependencies:\n  - `qt/guiutil` -> `qt/walletmodel` -> `qt/optionsmodel` -> `qt/guiutil`\n  - `qt/walletmodel` -> `qt/walletmodeltransaction` -> `qt/walletmodel`\n  - `qt/paymentserver` -> `qt/walletmodel` -> `qt/paymentserver`\n\nACKs for top commit:\n  Sjors:\n    ACK 5f50599ae7077ae9b9b56edb8892387b6ddc460a\n  instagibbs:\n    code review ACK 5f50599ae7077ae9b9b56edb8892387b6ddc460a\n  practicalswift:\n    ACK 5f50599ae7077ae9b9b56edb8892387b6ddc460a -- diff looks correct\n  promag:\n    ACK 5f50599ae7077ae9b9b56edb8892387b6ddc460a.\n\nTree-SHA512: 070686ac82b5c68c3ef1b8b4c16b4b916b84d80d1e92e42287fdd9454671bea54779c0d2db4db623750aaaf180beaba212137190d6a427113905e2c4be5c60c5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae6943620ab369e8e0865c3ec2d2848ba9389325",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae6943620ab369e8e0865c3ec2d2848ba9389325",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae6943620ab369e8e0865c3ec2d2848ba9389325"
      },
      {
        "sha": "5f50599ae7077ae9b9b56edb8892387b6ddc460a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f50599ae7077ae9b9b56edb8892387b6ddc460a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f50599ae7077ae9b9b56edb8892387b6ddc460a"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 109,
      "deletions": 73
    },
    "files": [
      {
        "sha": "cf09eee2cbdfbdc21c14df801c0d17080bdd9df5",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -136,6 +136,7 @@ BITCOIN_QT_H = \\\n   qt/rpcconsole.h \\\n   qt/sendcoinsdialog.h \\\n   qt/sendcoinsentry.h \\\n+  qt/sendcoinsrecipient.h \\\n   qt/signverifymessagedialog.h \\\n   qt/splashscreen.h \\\n   qt/trafficgraphwidget.h \\"
      },
      {
        "sha": "31e62ab63da8df930e768c2ca2fb7314db04146c",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -7,7 +7,7 @@\n #include <qt/bitcoinaddressvalidator.h>\n #include <qt/bitcoinunits.h>\n #include <qt/qvalidatedlineedit.h>\n-#include <qt/walletmodel.h>\n+#include <qt/sendcoinsrecipient.h>\n \n #include <base58.h>\n #include <chainparams.h>"
      },
      {
        "sha": "6a0143ac7e2b7f42c2ca8f040f3df290b5a72247",
        "filename": "src/qt/openuridialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/openuridialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/openuridialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.cpp?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -6,7 +6,7 @@\n #include <qt/forms/ui_openuridialog.h>\n \n #include <qt/guiutil.h>\n-#include <qt/walletmodel.h>\n+#include <qt/sendcoinsrecipient.h>\n \n #include <QUrl>\n "
      },
      {
        "sha": "6d4ce4a7e43ecf1757060820de420477aafb841c",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -36,13 +36,17 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <qt/walletmodel.h>\n+#include <qt/sendcoinsrecipient.h>\n \n #include <QObject>\n #include <QString>\n \n class OptionsModel;\n \n+namespace interfaces {\n+class Node;\n+} // namespace interfaces\n+\n QT_BEGIN_NAMESPACE\n class QApplication;\n class QByteArray;"
      },
      {
        "sha": "2674c9b953276501d0adf3f7cfbb544cdff7e3b0",
        "filename": "src/qt/receiverequestdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/receiverequestdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/receiverequestdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.cpp?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -8,6 +8,7 @@\n #include <qt/bitcoinunits.h>\n #include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n+#include <qt/walletmodel.h>\n \n #include <QClipboard>\n #include <QPixmap>"
      },
      {
        "sha": "1bb43ce6d18d7115afea8db9dbb3729616940187",
        "filename": "src/qt/receiverequestdialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/receiverequestdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/receiverequestdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.h?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -5,10 +5,12 @@\n #ifndef BITCOIN_QT_RECEIVEREQUESTDIALOG_H\n #define BITCOIN_QT_RECEIVEREQUESTDIALOG_H\n \n-#include <qt/walletmodel.h>\n+#include <qt/sendcoinsrecipient.h>\n \n #include <QDialog>\n \n+class WalletModel;\n+\n namespace Ui {\n     class ReceiveRequestDialog;\n }"
      },
      {
        "sha": "6d933f46d6e24a924992ced3b30a180e363e156e",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -7,6 +7,7 @@\n #include <qt/bitcoinunits.h>\n #include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n+#include <qt/walletmodel.h>\n \n #include <clientversion.h>\n #include <streams.h>"
      },
      {
        "sha": "30578b7a03cea8decca11e5ec38b2446f82660d6",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -5,12 +5,14 @@\n #ifndef BITCOIN_QT_RECENTREQUESTSTABLEMODEL_H\n #define BITCOIN_QT_RECENTREQUESTSTABLEMODEL_H\n \n-#include <qt/walletmodel.h>\n+#include <qt/sendcoinsrecipient.h>\n \n #include <QAbstractTableModel>\n #include <QStringList>\n #include <QDateTime>\n \n+class WalletModel;\n+\n class RecentRequestEntry\n {\n public:"
      },
      {
        "sha": "ad37e091142348594f47bd9cfd82d1c062d1c2ff",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -14,6 +14,7 @@\n #include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n #include <qt/platformstyle.h>\n+#include <qt/walletmodel.h>\n \n #include <QApplication>\n #include <QClipboard>"
      },
      {
        "sha": "aa69d30f9974e956b740121377d07ee0c26ffb29",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -5,13 +5,17 @@\n #ifndef BITCOIN_QT_SENDCOINSENTRY_H\n #define BITCOIN_QT_SENDCOINSENTRY_H\n \n-#include <qt/walletmodel.h>\n+#include <qt/sendcoinsrecipient.h>\n \n #include <QStackedWidget>\n \n class WalletModel;\n class PlatformStyle;\n \n+namespace interfaces {\n+class Node;\n+} // namespace interfaces\n+\n namespace Ui {\n     class SendCoinsEntry;\n }"
      },
      {
        "sha": "12279fab64f88bf3e55c7b8595a62c9bb006d312",
        "filename": "src/qt/sendcoinsrecipient.h",
        "status": "added",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/sendcoinsrecipient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/sendcoinsrecipient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsrecipient.h?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_SENDCOINSRECIPIENT_H\n+#define BITCOIN_QT_SENDCOINSRECIPIENT_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <amount.h>\n+#include <serialize.h>\n+\n+#include <string>\n+\n+#include <QString>\n+\n+class SendCoinsRecipient\n+{\n+public:\n+    explicit SendCoinsRecipient() : amount(0), fSubtractFeeFromAmount(false), nVersion(SendCoinsRecipient::CURRENT_VERSION) { }\n+    explicit SendCoinsRecipient(const QString &addr, const QString &_label, const CAmount& _amount, const QString &_message):\n+        address(addr), label(_label), amount(_amount), message(_message), fSubtractFeeFromAmount(false), nVersion(SendCoinsRecipient::CURRENT_VERSION) {}\n+\n+    // If from an unauthenticated payment request, this is used for storing\n+    // the addresses, e.g. address-A<br />address-B<br />address-C.\n+    // Info: As we don't need to process addresses in here when using\n+    // payment requests, we can abuse it for displaying an address list.\n+    // Todo: This is a hack, should be replaced with a cleaner solution!\n+    QString address;\n+    QString label;\n+    CAmount amount;\n+    // If from a payment request, this is used for storing the memo\n+    QString message;\n+    // Keep the payment request around as a serialized string to ensure\n+    // load/store is lossless.\n+    std::string sPaymentRequest;\n+    // Empty if no authentication or invalid signature/cert/etc.\n+    QString authenticatedMerchant;\n+\n+    bool fSubtractFeeFromAmount; // memory only\n+\n+    static const int CURRENT_VERSION = 1;\n+    int nVersion;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        std::string sAddress = address.toStdString();\n+        std::string sLabel = label.toStdString();\n+        std::string sMessage = message.toStdString();\n+        std::string sAuthenticatedMerchant = authenticatedMerchant.toStdString();\n+\n+        READWRITE(this->nVersion);\n+        READWRITE(sAddress);\n+        READWRITE(sLabel);\n+        READWRITE(amount);\n+        READWRITE(sMessage);\n+        READWRITE(sPaymentRequest);\n+        READWRITE(sAuthenticatedMerchant);\n+\n+        if (ser_action.ForRead())\n+        {\n+            address = QString::fromStdString(sAddress);\n+            label = QString::fromStdString(sLabel);\n+            message = QString::fromStdString(sMessage);\n+            authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);\n+        }\n+    }\n+};\n+\n+#endif // BITCOIN_QT_SENDCOINSRECIPIENT_H"
      },
      {
        "sha": "9a93798aef8b745387e4a4bd1fd4cbca9ba02d32",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -15,11 +15,12 @@\n \n #include <consensus/consensus.h>\n #include <interfaces/node.h>\n+#include <interfaces/wallet.h>\n #include <key_io.h>\n-#include <validation.h>\n+#include <policy/policy.h>\n #include <script/script.h>\n #include <util/system.h>\n-#include <policy/policy.h>\n+#include <validation.h>\n #include <wallet/ismine.h>\n \n #include <stdint.h>"
      },
      {
        "sha": "7413a1f09e30ba288788ec955196e0bf19c169c0",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -2,17 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <qt/walletcontroller.h>\n+\n #include <qt/askpassphrasedialog.h>\n #include <qt/createwalletdialog.h>\n #include <qt/guiconstants.h>\n #include <qt/guiutil.h>\n-#include <qt/walletcontroller.h>\n-\n-#include <wallet/wallet.h>\n+#include <qt/walletmodel.h>\n \n #include <interfaces/handler.h>\n #include <interfaces/node.h>\n #include <util/string.h>\n+#include <wallet/wallet.h>\n \n #include <algorithm>\n "
      },
      {
        "sha": "956245775e9ce5836d6c2c99dde7909ac101332b",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_WALLETCONTROLLER_H\n #define BITCOIN_QT_WALLETCONTROLLER_H\n \n-#include <qt/walletmodel.h>\n+#include <qt/sendcoinsrecipient.h>\n #include <support/allocators/secure.h>\n #include <sync.h>\n \n@@ -23,10 +23,12 @@\n \n class OptionsModel;\n class PlatformStyle;\n+class WalletModel;\n \n namespace interfaces {\n class Handler;\n class Node;\n+class Wallet;\n } // namespace interfaces\n \n class AskPassphraseDialog;"
      },
      {
        "sha": "8087356f5ef7ce8533e736783b4f3fd974231787",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 57,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -9,9 +9,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <amount.h>\n #include <key.h>\n-#include <serialize.h>\n #include <script/standard.h>\n \n #include <qt/walletmodeltransaction.h>\n@@ -29,6 +27,7 @@ class AddressTableModel;\n class OptionsModel;\n class PlatformStyle;\n class RecentRequestsTableModel;\n+class SendCoinsRecipient;\n class TransactionTableModel;\n class WalletModelTransaction;\n \n@@ -47,61 +46,6 @@ QT_BEGIN_NAMESPACE\n class QTimer;\n QT_END_NAMESPACE\n \n-class SendCoinsRecipient\n-{\n-public:\n-    explicit SendCoinsRecipient() : amount(0), fSubtractFeeFromAmount(false), nVersion(SendCoinsRecipient::CURRENT_VERSION) { }\n-    explicit SendCoinsRecipient(const QString &addr, const QString &_label, const CAmount& _amount, const QString &_message):\n-        address(addr), label(_label), amount(_amount), message(_message), fSubtractFeeFromAmount(false), nVersion(SendCoinsRecipient::CURRENT_VERSION) {}\n-\n-    // If from an unauthenticated payment request, this is used for storing\n-    // the addresses, e.g. address-A<br />address-B<br />address-C.\n-    // Info: As we don't need to process addresses in here when using\n-    // payment requests, we can abuse it for displaying an address list.\n-    // Todo: This is a hack, should be replaced with a cleaner solution!\n-    QString address;\n-    QString label;\n-    CAmount amount;\n-    // If from a payment request, this is used for storing the memo\n-    QString message;\n-    // Keep the payment request around as a serialized string to ensure\n-    // load/store is lossless.\n-    std::string sPaymentRequest;\n-    // Empty if no authentication or invalid signature/cert/etc.\n-    QString authenticatedMerchant;\n-\n-    bool fSubtractFeeFromAmount; // memory only\n-\n-    static const int CURRENT_VERSION = 1;\n-    int nVersion;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        std::string sAddress = address.toStdString();\n-        std::string sLabel = label.toStdString();\n-        std::string sMessage = message.toStdString();\n-        std::string sAuthenticatedMerchant = authenticatedMerchant.toStdString();\n-\n-        READWRITE(this->nVersion);\n-        READWRITE(sAddress);\n-        READWRITE(sLabel);\n-        READWRITE(amount);\n-        READWRITE(sMessage);\n-        READWRITE(sPaymentRequest);\n-        READWRITE(sAuthenticatedMerchant);\n-\n-        if (ser_action.ForRead())\n-        {\n-            address = QString::fromStdString(sAddress);\n-            label = QString::fromStdString(sLabel);\n-            message = QString::fromStdString(sMessage);\n-            authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);\n-        }\n-    }\n-};\n-\n /** Interface to Bitcoin wallet from Qt view code. */\n class WalletModel : public QObject\n {"
      },
      {
        "sha": "9e5d285e8cee63c0ae9b911d006e970cae946514",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -5,7 +5,8 @@\n #ifndef BITCOIN_QT_WALLETMODELTRANSACTION_H\n #define BITCOIN_QT_WALLETMODELTRANSACTION_H\n \n-#include <qt/walletmodel.h>\n+#include <primitives/transaction.h>\n+#include <qt/sendcoinsrecipient.h>\n \n #include <amount.h>\n "
      },
      {
        "sha": "8b320832f05d21831653e9f347ad228a95964736",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "patch": "@@ -18,17 +18,14 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"qt/bitcoingui -> qt/walletframe -> qt/bitcoingui\"\n     \"qt/bitcoingui -> qt/walletview -> qt/bitcoingui\"\n     \"qt/clientmodel -> qt/peertablemodel -> qt/clientmodel\"\n-    \"qt/paymentserver -> qt/walletmodel -> qt/paymentserver\"\n     \"qt/recentrequeststablemodel -> qt/walletmodel -> qt/recentrequeststablemodel\"\n     \"qt/sendcoinsdialog -> qt/walletmodel -> qt/sendcoinsdialog\"\n     \"qt/transactiontablemodel -> qt/walletmodel -> qt/transactiontablemodel\"\n-    \"qt/walletmodel -> qt/walletmodeltransaction -> qt/walletmodel\"\n     \"txmempool -> validation -> txmempool\"\n     \"wallet/coincontrol -> wallet/wallet -> wallet/coincontrol\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n     \"policy/fees -> txmempool -> validation -> policy/fees\"\n-    \"qt/guiutil -> qt/walletmodel -> qt/optionsmodel -> qt/guiutil\"\n     \"txmempool -> validation -> validationinterface -> txmempool\"\n     \"wallet/scriptpubkeyman -> wallet/wallet -> wallet/scriptpubkeyman\"\n )"
      }
    ]
  },
  {
    "sha": "6a2e6b0600077e5903400dc74bc8b0c26592fde6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTJlNmIwNjAwMDc3ZTU5MDM0MDBkYzc0YmM4YjBjMjY1OTJmZGU2",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-11-21T19:37:26Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-11-21T19:37:26Z"
      },
      "message": "Remove out of date comments for CalculateMaximumSignedTxSize",
      "tree": {
        "sha": "1991ef56619107f3d56a27edbc0f51d3ac0a242d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1991ef56619107f3d56a27edbc0f51d3ac0a242d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a2e6b0600077e5903400dc74bc8b0c26592fde6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a2e6b0600077e5903400dc74bc8b0c26592fde6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a2e6b0600077e5903400dc74bc8b0c26592fde6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a2e6b0600077e5903400dc74bc8b0c26592fde6/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae6943620ab369e8e0865c3ec2d2848ba9389325",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae6943620ab369e8e0865c3ec2d2848ba9389325",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae6943620ab369e8e0865c3ec2d2848ba9389325"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 1,
      "deletions": 5
    },
    "files": [
      {
        "sha": "dc2a52d490859ca017ad477648c27be921dc55ae",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a2e6b0600077e5903400dc74bc8b0c26592fde6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a2e6b0600077e5903400dc74bc8b0c26592fde6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6a2e6b0600077e5903400dc74bc8b0c26592fde6",
        "patch": "@@ -1444,11 +1444,9 @@ bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScri\n int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig)\n {\n     std::vector<CTxOut> txouts;\n-    // Look up the inputs.  We should have already checked that this transaction\n-    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n-    // wallet, with a valid index into the vout array, and the ability to sign.\n     for (const CTxIn& input : tx.vin) {\n         const auto mi = wallet->mapWallet.find(input.prevout.hash);\n+        // Can not estimate size without knowing the input details\n         if (mi == wallet->mapWallet.end()) {\n             return -1;\n         }\n@@ -1463,8 +1461,6 @@ int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wall\n {\n     CMutableTransaction txNew(tx);\n     if (!wallet->DummySignTx(txNew, txouts, use_max_sig)) {\n-        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n-        // implies that we can sign for every input.\n         return -1;\n     }\n     return GetVirtualTransactionSize(CTransaction(txNew));"
      }
    ]
  },
  {
    "sha": "e20c72f9f076681def325b5b5fa53bccda2b0eab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjBjNzJmOWYwNzY2ODFkZWYzMjViNWI1ZmE1M2JjY2RhMmIwZWFi",
    "commit": {
      "author": {
        "name": "251",
        "email": "13120787+l2a5b1@users.noreply.github.com",
        "date": "2019-07-23T21:47:17Z"
      },
      "committer": {
        "name": "251",
        "email": "13120787+l2a5b1@users.noreply.github.com",
        "date": "2019-11-21T20:05:38Z"
      },
      "message": "Fire TransactionRemovedFromMempool from mempool\n\nThis commit fires TransactionRemovedFromMempool callbacks from the\nmempool and cleans up a bunch of code.",
      "tree": {
        "sha": "f88c796738d7379600782ac143e24a0f922fca45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f88c796738d7379600782ac143e24a0f922fca45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e20c72f9f076681def325b5b5fa53bccda2b0eab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e20c72f9f076681def325b5b5fa53bccda2b0eab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e20c72f9f076681def325b5b5fa53bccda2b0eab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e20c72f9f076681def325b5b5fa53bccda2b0eab/comments",
    "author": {
      "login": "l2a5b1",
      "id": 13120787,
      "node_id": "MDQ6VXNlcjEzMTIwNzg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13120787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l2a5b1",
      "html_url": "https://github.com/l2a5b1",
      "followers_url": "https://api.github.com/users/l2a5b1/followers",
      "following_url": "https://api.github.com/users/l2a5b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/l2a5b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l2a5b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l2a5b1/subscriptions",
      "organizations_url": "https://api.github.com/users/l2a5b1/orgs",
      "repos_url": "https://api.github.com/users/l2a5b1/repos",
      "events_url": "https://api.github.com/users/l2a5b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l2a5b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "l2a5b1",
      "id": 13120787,
      "node_id": "MDQ6VXNlcjEzMTIwNzg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13120787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l2a5b1",
      "html_url": "https://github.com/l2a5b1",
      "followers_url": "https://api.github.com/users/l2a5b1/followers",
      "following_url": "https://api.github.com/users/l2a5b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/l2a5b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l2a5b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l2a5b1/subscriptions",
      "organizations_url": "https://api.github.com/users/l2a5b1/orgs",
      "repos_url": "https://api.github.com/users/l2a5b1/repos",
      "events_url": "https://api.github.com/users/l2a5b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l2a5b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 15,
      "deletions": 36
    },
    "files": [
      {
        "sha": "e7dda59590cff2b5ed2ac8c1f4bae11f94bae9b5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e20c72f9f076681def325b5b5fa53bccda2b0eab/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e20c72f9f076681def325b5b5fa53bccda2b0eab/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e20c72f9f076681def325b5b5fa53bccda2b0eab",
        "patch": "@@ -281,7 +281,6 @@ void Shutdown(NodeContext& node)\n     node.chain_clients.clear();\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n-    GetMainSignals().UnregisterWithMempoolSignals(mempool);\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     if (node.mempool) node.mempool = nullptr;\n@@ -1263,7 +1262,6 @@ bool AppInitMain(NodeContext& node)\n     }, 60000);\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n-    GetMainSignals().RegisterWithMempoolSignals(mempool);\n \n     // Create client interfaces for wallets that are supposed to be loaded\n     // according to -wallet and -disablewallet options. This only constructs"
      },
      {
        "sha": "3c967a04c0711f4187ebcdaa0754884260010b52",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e20c72f9f076681def325b5b5fa53bccda2b0eab/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e20c72f9f076681def325b5b5fa53bccda2b0eab/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e20c72f9f076681def325b5b5fa53bccda2b0eab",
        "patch": "@@ -17,6 +17,7 @@\n #include <util/system.h>\n #include <util/moneystr.h>\n #include <util/time.h>\n+#include <validationinterface.h>\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, unsigned int _entryHeight,\n@@ -403,7 +404,12 @@ void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAnces\n \n void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n {\n-    NotifyEntryRemoved(it->GetSharedTx(), reason);\n+    CTransactionRef ptx = it->GetSharedTx();\n+    NotifyEntryRemoved(ptx, reason);\n+    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n+        GetMainSignals().TransactionRemovedFromMempool(ptx);\n+    }\n+\n     const uint256 hash = it->GetTx().GetHash();\n     for (const CTxIn& txin : it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);"
      },
      {
        "sha": "6c0f4d5edd2d3390826dc4c7b4f16191fa557cd7",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 24,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e20c72f9f076681def325b5b5fa53bccda2b0eab/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e20c72f9f076681def325b5b5fa53bccda2b0eab/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=e20c72f9f076681def325b5b5fa53bccda2b0eab",
        "patch": "@@ -7,9 +7,9 @@\n \n #include <primitives/block.h>\n #include <scheduler.h>\n-#include <txmempool.h>\n \n #include <future>\n+#include <unordered_map>\n #include <utility>\n \n #include <boost/signals2/signal.hpp>\n@@ -46,11 +46,6 @@ struct MainSignalsInstance {\n \n static CMainSignals g_signals;\n \n-// This map has to a separate global instead of a member of MainSignalsInstance,\n-// because RegisterWithMempoolSignals is currently called before RegisterBackgroundSignalScheduler,\n-// so MainSignalsInstance hasn't been created yet.\n-static std::unordered_map<CTxMemPool*, boost::signals2::scoped_connection> g_connNotifyEntryRemoved;\n-\n void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n     assert(!m_internals);\n     m_internals.reset(new MainSignalsInstance(&scheduler));\n@@ -71,17 +66,6 @@ size_t CMainSignals::CallbacksPending() {\n     return m_internals->m_schedulerClient.CallbacksPending();\n }\n \n-void CMainSignals::RegisterWithMempoolSignals(CTxMemPool& pool) {\n-    g_connNotifyEntryRemoved.emplace(std::piecewise_construct,\n-        std::forward_as_tuple(&pool),\n-        std::forward_as_tuple(pool.NotifyEntryRemoved.connect(std::bind(&CMainSignals::MempoolEntryRemoved, this, std::placeholders::_1, std::placeholders::_2)))\n-    );\n-}\n-\n-void CMainSignals::UnregisterWithMempoolSignals(CTxMemPool& pool) {\n-    g_connNotifyEntryRemoved.erase(&pool);\n-}\n-\n CMainSignals& GetMainSignals()\n {\n     return g_signals;\n@@ -126,13 +110,6 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n \n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n@@ -150,6 +127,12 @@ void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n     });\n }\n \n+void CMainSignals::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n+    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        m_internals->TransactionRemovedFromMempool(ptx);\n+    });\n+}\n+\n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n     m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);"
      },
      {
        "sha": "63aad8661f85fef3abe7851be6a7da313f889515",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e20c72f9f076681def325b5b5fa53bccda2b0eab/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e20c72f9f076681def325b5b5fa53bccda2b0eab/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=e20c72f9f076681def325b5b5fa53bccda2b0eab",
        "patch": "@@ -21,8 +21,6 @@ class CConnman;\n class CValidationInterface;\n class uint256;\n class CScheduler;\n-class CTxMemPool;\n-enum class MemPoolRemovalReason;\n \n // These functions dispatch to one or all registered wallets\n \n@@ -158,8 +156,6 @@ class CMainSignals {\n     friend void ::UnregisterAllValidationInterfaces();\n     friend void ::CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n \n-    void MempoolEntryRemoved(CTransactionRef tx, MemPoolRemovalReason reason);\n-\n public:\n     /** Register a CScheduler to give callbacks which should run in the background (may only be called once) */\n     void RegisterBackgroundSignalScheduler(CScheduler& scheduler);\n@@ -170,13 +166,10 @@ class CMainSignals {\n \n     size_t CallbacksPending();\n \n-    /** Register with mempool to call TransactionRemovedFromMempool callbacks */\n-    void RegisterWithMempoolSignals(CTxMemPool& pool);\n-    /** Unregister with mempool */\n-    void UnregisterWithMempoolSignals(CTxMemPool& pool);\n \n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n+    void TransactionRemovedFromMempool(const CTransactionRef &);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>> &);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &, const CBlockIndex* pindex);\n     void ChainStateFlushed(const CBlockLocator &);"
      },
      {
        "sha": "7164432ca550003250aff60b589f19a9d8c7e918",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e20c72f9f076681def325b5b5fa53bccda2b0eab/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e20c72f9f076681def325b5b5fa53bccda2b0eab/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=e20c72f9f076681def325b5b5fa53bccda2b0eab",
        "patch": "@@ -26,7 +26,6 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n     \"policy/fees -> txmempool -> validation -> policy/fees\"\n-    \"txmempool -> validation -> validationinterface -> txmempool\"\n     \"wallet/scriptpubkeyman -> wallet/wallet -> wallet/scriptpubkeyman\"\n )\n "
      }
    ]
  },
  {
    "sha": "a2e581de942ece85b84c4f5a15287654b02867cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmU1ODFkZTk0MmVjZTg1Yjg0YzRmNWExNTI4NzY1NGIwMjg2N2Ni",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2019-11-21T20:13:08Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2019-11-21T20:13:08Z"
      },
      "message": "build: Create test utility library from src/test/util/",
      "tree": {
        "sha": "eeb1ebecaee9397e30e1d5e866ac9a00f11a9c5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eeb1ebecaee9397e30e1d5e866ac9a00f11a9c5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2e581de942ece85b84c4f5a15287654b02867cb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl3W79QACgkQJiaFvHjt\nEfvYQgf/b3PCqmVyeudKncvt42zKAQrGxPw3q/Hqd0iGQEA9PKUrKMtAaVYnm+0X\nlDsdHaGxp8hrbWlWT5J8395HEPKwZeUxYj/vVKNyK6navvP50bcxWP4SMlSrbCMG\nULHbE3NmTHB+ysNlOS6uDxGPapmpe+9pSXBHpe2/JJ3R5eTmNhPzF3UsKgOQGa90\nbGKb3xNX2KonQcxbY5TQnx2QgiSmizRfZ+tUMFRKA670oP7B82osOyf038JuWa7z\nxtX8+Vme5R8hq5xncq+N7TSxHzjM9Ih7oWeJB5RQghUx9CXCk1zoZ6Nt2g292QpR\nJyQ2cQ7T/yrlcya7ASMmgsXBBhey2w==\n=G+T6\n-----END PGP SIGNATURE-----",
        "payload": "tree eeb1ebecaee9397e30e1d5e866ac9a00f11a9c5b\nparent b4a1da9ef8e4b673c290d5b882527e627ae1b43a\nauthor Harris <brakmic@gmail.com> 1574367188 +0100\ncommitter Harris <brakmic@gmail.com> 1574367188 +0100\n\nbuild: Create test utility library from src/test/util/\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2e581de942ece85b84c4f5a15287654b02867cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2e581de942ece85b84c4f5a15287654b02867cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2e581de942ece85b84c4f5a15287654b02867cb/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4a1da9ef8e4b673c290d5b882527e627ae1b43a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4a1da9ef8e4b673c290d5b882527e627ae1b43a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4a1da9ef8e4b673c290d5b882527e627ae1b43a"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 40,
      "deletions": 30
    },
    "files": [
      {
        "sha": "27c87688b42ef8925d1b4b32ce21b31a18fd309f",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2e581de942ece85b84c4f5a15287654b02867cb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2e581de942ece85b84c4f5a15287654b02867cb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a2e581de942ece85b84c4f5a15287654b02867cb",
        "patch": "@@ -717,6 +717,8 @@ if EMBEDDED_LEVELDB\n include Makefile.leveldb.include\n endif\n \n+include Makefile.test_util.include\n+\n if ENABLE_TESTS\n include Makefile.test.include\n endif"
      },
      {
        "sha": "9e70db116b7c7354b1fe3d4262bfb6d8d8ba162c",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2e581de942ece85b84c4f5a15287654b02867cb/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2e581de942ece85b84c4f5a15287654b02867cb/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=a2e581de942ece85b84c4f5a15287654b02867cb",
        "patch": "@@ -40,10 +40,6 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/lockedpool.cpp \\\n   bench/poly1305.cpp \\\n   bench/prevector.cpp \\\n-  test/util/transaction_utils.h \\\n-  test/util/transaction_utils.cpp \\\n-  test/util/setup_common.h \\\n-  test/util/setup_common.cpp \\\n   test/util.h \\\n   test/util.cpp\n \n@@ -59,6 +55,7 @@ bench_bench_bitcoin_LDADD = \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBTEST_UTIL) \\\n   $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) \\\n   $(LIBMEMENV) \\"
      },
      {
        "sha": "8c47fabad9f419d8ee8ca0ed112a623f951c3184",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2e581de942ece85b84c4f5a15287654b02867cb/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2e581de942ece85b84c4f5a15287654b02867cb/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=a2e581de942ece85b84c4f5a15287654b02867cb",
        "patch": "@@ -26,12 +26,6 @@ TEST_QT_H = \\\n   qt/test/util.h \\\n   qt/test/wallettests.h\n \n-TEST_BITCOIN_CPP = \\\n-  test/util/setup_common.cpp\n-\n-TEST_BITCOIN_H = \\\n-  test/util/setup_common.h\n-\n qt_test_test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_TEST_INCLUDES)\n \n@@ -42,9 +36,7 @@ qt_test_test_bitcoin_qt_SOURCES = \\\n   qt/test/test_main.cpp \\\n   qt/test/uritests.cpp \\\n   qt/test/util.cpp \\\n-  $(TEST_QT_H) \\\n-  $(TEST_BITCOIN_CPP) \\\n-  $(TEST_BITCOIN_H)\n+  $(TEST_QT_H)\n if ENABLE_WALLET\n qt_test_test_bitcoin_qt_SOURCES += \\\n   qt/test/addressbooktests.cpp \\\n@@ -54,7 +46,7 @@ endif # ENABLE_WALLET\n \n nodist_qt_test_test_bitcoin_qt_SOURCES = $(TEST_QT_MOC_CPP)\n \n-qt_test_test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN_SERVER)\n+qt_test_test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN_SERVER) $(LIBTEST_UTIL)\n if ENABLE_WALLET\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_UTIL) $(LIBBITCOIN_WALLET)\n endif"
      },
      {
        "sha": "b4ca01b1fe162c022c91e41b5fffa486d725c3c8",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 4,
        "deletions": 16,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2e581de942ece85b84c4f5a15287654b02867cb/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2e581de942ece85b84c4f5a15287654b02867cb/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=a2e581de942ece85b84c4f5a15287654b02867cb",
        "patch": "@@ -58,31 +58,19 @@ RAW_TEST_FILES =\n GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)\n \n BITCOIN_TEST_SUITE = \\\n-  test/util/blockfilter.cpp \\\n-  test/util/blockfilter.h \\\n-  test/util/logging.cpp \\\n-  test/util/logging.h \\\n-  test/util/transaction_utils.cpp \\\n-  test/util/transaction_utils.h \\\n   test/main.cpp \\\n-  test/util/setup_common.h \\\n-  test/util/setup_common.cpp \\\n-  test/util/str.h \\\n-  test/util/str.cpp\n+  $(TEST_UTIL_H)\n \n FUZZ_SUITE = \\\n   test/fuzz/fuzz.cpp \\\n   test/fuzz/fuzz.h \\\n-  test/fuzz/FuzzedDataProvider.h \\\n-  test/util/setup_common.cpp \\\n-  test/util/setup_common.h \\\n-  test/util/str.cpp \\\n-  test/util/str.h\n+  test/fuzz/FuzzedDataProvider.h\n \n FUZZ_SUITE_LD_COMMON = \\\n  $(LIBBITCOIN_SERVER) \\\n  $(LIBBITCOIN_COMMON) \\\n  $(LIBBITCOIN_UTIL) \\\n+ $(LIBTEST_UTIL) \\\n  $(LIBBITCOIN_CONSENSUS) \\\n  $(LIBBITCOIN_CRYPTO) \\\n  $(LIBUNIVALUE) \\\n@@ -198,7 +186,7 @@ endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TEST_SUITE) $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(TESTDEFS) $(EVENT_CFLAGS)\n-test_test_bitcoin_LDADD =\n+test_test_bitcoin_LDADD = $(LIBTEST_UTIL)\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n endif"
      },
      {
        "sha": "cf55d141b0f83ff58b770e761ac14676c303072f",
        "filename": "src/Makefile.test_util.include",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2e581de942ece85b84c4f5a15287654b02867cb/src/Makefile.test_util.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2e581de942ece85b84c4f5a15287654b02867cb/src/Makefile.test_util.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_util.include?ref=a2e581de942ece85b84c4f5a15287654b02867cb",
        "patch": "@@ -0,0 +1,31 @@\n+# Copyright (c) 2013-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+LIBTEST_UTIL=libtest_util.a\n+\n+EXTRA_LIBRARIES += \\\n+    $(LIBTEST_UTIL)\n+\n+TEST_UTIL_H = \\\n+    test/util/blockfilter.h \\\n+    test/util/logging.h \\\n+    test/util/setup_common.h \\\n+    test/util/str.h \\\n+    test/util/transaction_utils.h\n+\n+libtest_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)\n+libtest_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+libtest_util_a_SOURCES = \\\n+  test/util/blockfilter.cpp \\\n+  test/util/logging.cpp \\\n+  test/util/setup_common.cpp \\\n+  test/util/str.cpp \\\n+  test/util/transaction_utils.cpp \\\n+  $(TEST_UTIL_H)\n+\n+LIBTEST_UTIL += $(LIBBITCOIN_SERVER)\n+LIBTEST_UTIL += $(LIBBITCOIN_COMMON)\n+LIBTEST_UTIL += $(LIBBITCOIN_UTIL)\n+LIBTEST_UTIL += $(LIBBITCOIN_CRYPTO_BASE)\n+"
      }
    ]
  },
  {
    "sha": "76303f65f92a0fbe9a90c0e807554a6daa860636",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjMwM2Y2NWY5MmEwZmJlOWE5MGMwZTgwNzU1NGE2ZGFhODYwNjM2",
    "commit": {
      "author": {
        "name": "Dominik Spicher",
        "email": "dominik.spicher@inacta.ch",
        "date": "2019-11-21T20:09:32Z"
      },
      "committer": {
        "name": "Dominik Spicher",
        "email": "dominik.spicher@inacta.ch",
        "date": "2019-11-21T20:30:01Z"
      },
      "message": "test: add unit test for non-standard txs with wrong nVersion",
      "tree": {
        "sha": "5410b648915a14e18f56c1660f24ec1e53f10fa8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5410b648915a14e18f56c1660f24ec1e53f10fa8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76303f65f92a0fbe9a90c0e807554a6daa860636",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76303f65f92a0fbe9a90c0e807554a6daa860636",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76303f65f92a0fbe9a90c0e807554a6daa860636",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76303f65f92a0fbe9a90c0e807554a6daa860636/comments",
    "author": {
      "login": "dspicher",
      "id": 3934374,
      "node_id": "MDQ6VXNlcjM5MzQzNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3934374?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dspicher",
      "html_url": "https://github.com/dspicher",
      "followers_url": "https://api.github.com/users/dspicher/followers",
      "following_url": "https://api.github.com/users/dspicher/following{/other_user}",
      "gists_url": "https://api.github.com/users/dspicher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dspicher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dspicher/subscriptions",
      "organizations_url": "https://api.github.com/users/dspicher/orgs",
      "repos_url": "https://api.github.com/users/dspicher/repos",
      "events_url": "https://api.github.com/users/dspicher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dspicher/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dspicher",
      "id": 3934374,
      "node_id": "MDQ6VXNlcjM5MzQzNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3934374?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dspicher",
      "html_url": "https://github.com/dspicher",
      "followers_url": "https://api.github.com/users/dspicher/followers",
      "following_url": "https://api.github.com/users/dspicher/following{/other_user}",
      "gists_url": "https://api.github.com/users/dspicher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dspicher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dspicher/subscriptions",
      "organizations_url": "https://api.github.com/users/dspicher/orgs",
      "repos_url": "https://api.github.com/users/dspicher/repos",
      "events_url": "https://api.github.com/users/dspicher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dspicher/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae6943620ab369e8e0865c3ec2d2848ba9389325",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae6943620ab369e8e0865c3ec2d2848ba9389325",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae6943620ab369e8e0865c3ec2d2848ba9389325"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2f7a3132d8ed8393fad3a0e9434baf0d64351407",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76303f65f92a0fbe9a90c0e807554a6daa860636/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76303f65f92a0fbe9a90c0e807554a6daa860636/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=76303f65f92a0fbe9a90c0e807554a6daa860636",
        "patch": "@@ -713,6 +713,29 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].nValue = nDustThreshold;\n     BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n \n+    // Disallowed nVersion\n+    t.nVersion = -1;\n+    reason.clear();\n+    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n+    BOOST_CHECK_EQUAL(reason, \"version\");\n+\n+    t.nVersion = 0;\n+    reason.clear();\n+    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n+    BOOST_CHECK_EQUAL(reason, \"version\");\n+\n+    t.nVersion = 3;\n+    reason.clear();\n+    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n+    BOOST_CHECK_EQUAL(reason, \"version\");\n+\n+    // Allowed nVersion\n+    t.nVersion = 1;\n+    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+\n+    t.nVersion = 2;\n+    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+\n     // Check dust with odd relay fee to verify rounding:\n     // nDustThreshold = 182 * 3702 / 1000\n     dustRelayFee = CFeeRate(3702);"
      }
    ]
  },
  {
    "sha": "a739d207a39fc34c2e5adf4e14bfbb3a6288ede1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzM5ZDIwN2EzOWZjMzRjMmU1YWRmNGUxNGJmYmIzYTYyODhlZGUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-22T08:36:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-22T08:37:01Z"
      },
      "message": "Merge #17519: rpc: Remove unused COINBASE_FLAGS\n\ne9a27cf338dc618b8ecab8984abc54d588de8a05 refactor: Remove unused COINBASE_FLAGS (Neha Narula)\n\nPull request description:\n\n  Commit d449772cf69c01932fc5d72c46054815d6300b3c stopped setting\n  COINBASE_FLAGS, and it looks like it hasn't been used since P2SH.\n\n  Following up on #17489, remove COINBASE_FLAGS which is unused. I verified that removing this did not change the contents of the coinbase's scriptSig.\n\nACKs for top commit:\n  laanwj:\n    ACK e9a27cf338dc618b8ecab8984abc54d588de8a05\n  MarcoFalke:\n    ACK e9a27cf338dc618b8ecab8984abc54d588de8a05 \ud83d\udcbb\n\nTree-SHA512: f9dac124ce7e3edcae974137764bb5039387b1b123b86af44486e398aa4a8d91a9ecf640e207b364ae303acbbaee7cca300d303ea3d6869ba9cae2bf555a6334",
      "tree": {
        "sha": "341cde608ad40eb936c3b19e0702c1e935c7ba83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/341cde608ad40eb936c3b19e0702c1e935c7ba83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a739d207a39fc34c2e5adf4e14bfbb3a6288ede1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3Xni0ACgkQHkrtYphs\n0l2FWwgAgap09etsFN1LnSgbxdrk4QMn7x9yBhRtv/qYZcXVUW3KN+ehs0/mgtmN\ng7pmlsmNpgKGsiEEYOpvIjAUwGhmJUad4ZzqonWdJzkejzFxQrU7uOLax8MF3SXy\nNIVBsZ58an8WRgUjBmNMY6XzZ4zKRt925Lu0eBvAj59RojJYC5qjDKKM8yrQslv9\njEbn87KCv5IKVUgXBpY8Po3tXn2ldrH1rfYAhaAKq3Z9UjbS3UZIxtlhEueKAMTg\n+rj9zxj1VQgWQbfAAOEgeNTBGsaAJo1k5dSzBvlaMmxgAFtTjIH84NOHXf42D3As\ne1xPcbhYS/Mo8xGlfzFLh6owygOGSg==\n=jXb8\n-----END PGP SIGNATURE-----",
        "payload": "tree 341cde608ad40eb936c3b19e0702c1e935c7ba83\nparent 69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b\nparent e9a27cf338dc618b8ecab8984abc54d588de8a05\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1574411791 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1574411821 +0100\n\nMerge #17519: rpc: Remove unused COINBASE_FLAGS\n\ne9a27cf338dc618b8ecab8984abc54d588de8a05 refactor: Remove unused COINBASE_FLAGS (Neha Narula)\n\nPull request description:\n\n  Commit d449772cf69c01932fc5d72c46054815d6300b3c stopped setting\n  COINBASE_FLAGS, and it looks like it hasn't been used since P2SH.\n\n  Following up on #17489, remove COINBASE_FLAGS which is unused. I verified that removing this did not change the contents of the coinbase's scriptSig.\n\nACKs for top commit:\n  laanwj:\n    ACK e9a27cf338dc618b8ecab8984abc54d588de8a05\n  MarcoFalke:\n    ACK e9a27cf338dc618b8ecab8984abc54d588de8a05 \ud83d\udcbb\n\nTree-SHA512: f9dac124ce7e3edcae974137764bb5039387b1b123b86af44486e398aa4a8d91a9ecf640e207b364ae303acbbaee7cca300d303ea3d6869ba9cae2bf555a6334\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a739d207a39fc34c2e5adf4e14bfbb3a6288ede1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a739d207a39fc34c2e5adf4e14bfbb3a6288ede1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a739d207a39fc34c2e5adf4e14bfbb3a6288ede1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69a6f1ad1f7ca52b2524ab8322bfa89a9b0ee61b"
      },
      {
        "sha": "e9a27cf338dc618b8ecab8984abc54d588de8a05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a27cf338dc618b8ecab8984abc54d588de8a05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9a27cf338dc618b8ecab8984abc54d588de8a05"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 2,
      "deletions": 9
    },
    "files": [
      {
        "sha": "2f6feb9e0293633451ac96ca135498e96832b1bd",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a739d207a39fc34c2e5adf4e14bfbb3a6288ede1/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a739d207a39fc34c2e5adf4e14bfbb3a6288ede1/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a739d207a39fc34c2e5adf4e14bfbb3a6288ede1",
        "patch": "@@ -435,7 +435,7 @@ void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned\n     ++nExtraNonce;\n     unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n     CMutableTransaction txCoinbase(*pblock->vtx[0]);\n-    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n+    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << CScriptNum(nExtraNonce));\n     assert(txCoinbase.vin[0].scriptSig.size() <= 100);\n \n     pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));"
      },
      {
        "sha": "85f9f1e8b76c00d53e37469e6be25925e1449bd6",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a739d207a39fc34c2e5adf4e14bfbb3a6288ede1/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a739d207a39fc34c2e5adf4e14bfbb3a6288ede1/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=a739d207a39fc34c2e5adf4e14bfbb3a6288ede1",
        "patch": "@@ -375,9 +375,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"      }\\n\"\n             \"      ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"coinbaseaux\\\" : {                 (json object) data that should be included in the coinbase's scriptSig content\\n\"\n-            \"      \\\"flags\\\" : \\\"xx\\\"                  (string) key name is to be ignored, and value included in scriptSig\\n\"\n-            \"  },\\n\"\n+            \"  \\\"coinbaseaux\\\" : { ... },            (json object) data that should be included in the coinbase's scriptSig content\\n\"\n             \"  \\\"coinbasevalue\\\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)\\n\"\n             \"  \\\"coinbasetxn\\\" : { ... },          (json object) information for coinbase transaction\\n\"\n             \"  \\\"target\\\" : \\\"xxxx\\\",                (string) The hash target\\n\"\n@@ -607,7 +605,6 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     }\n \n     UniValue aux(UniValue::VOBJ);\n-    aux.pushKV(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end()));\n \n     arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n "
      },
      {
        "sha": "8f5d3331704d849f3a4fb2ae355fc89897efcfa4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a739d207a39fc34c2e5adf4e14bfbb3a6288ede1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a739d207a39fc34c2e5adf4e14bfbb3a6288ede1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a739d207a39fc34c2e5adf4e14bfbb3a6288ede1",
        "patch": "@@ -129,9 +129,6 @@ CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CBlockPolicyEstimator feeEstimator;\n CTxMemPool mempool(&feeEstimator);\n \n-/** Constant stuff for coinbase transactions we create: */\n-CScript COINBASE_FLAGS;\n-\n // Internal stuff\n namespace {\n     CBlockIndex* pindexBestInvalid = nullptr;"
      },
      {
        "sha": "d87113c41f63c4ad239e57b00759deb65e97e809",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a739d207a39fc34c2e5adf4e14bfbb3a6288ede1/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a739d207a39fc34c2e5adf4e14bfbb3a6288ede1/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=a739d207a39fc34c2e5adf4e14bfbb3a6288ede1",
        "patch": "@@ -137,7 +137,6 @@ struct BlockHasher\n     size_t operator()(const uint256& hash) const { return ReadLE64(hash.begin()); }\n };\n \n-extern CScript COINBASE_FLAGS;\n extern CCriticalSection cs_main;\n extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;"
      }
    ]
  },
  {
    "sha": "b983e7e1721fa68cc04c05b1249d5871d66debe5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTgzZTdlMTcyMWZhNjhjYzA0YzA1YjEyNDlkNTg3MWQ2NmRlYmU1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-22T14:15:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-22T14:21:02Z"
      },
      "message": "Merge #17542: build: Create test utility library from src/test/util/\n\na2e581de942ece85b84c4f5a15287654b02867cb build: Create test utility library from src/test/util/ (Harris)\n\nPull request description:\n\n  This PR creates a static **test utility library** that replaces repetitive compilations of sources from *src/test/util* in **unit**, **gui** and **bench** **tests**.\n\n  The original issue is here: https://github.com/bitcoin/bitcoin/issues/17401\n\n  The changes are:\n\n  * a new *Makefile.test_util.include*\n  * a new entry in *Makefile.am* that includes *Makefile.test_util.include* when testing is enabled\n  * removal of all *src/test/util* headers & sources from unit, gui and bench Makefiles\n  * addition of *libtest_util.a* at LDADD's of every test\n\nACKs for top commit:\n  MarcoFalke:\n    ACK a2e581de942ece85b84c4f5a15287654b02867cb \ud83c\udf5e\n\nTree-SHA512: d172127a26ee70d16625e17d7d94337a65472c57bb97f910c357c52d3dc082ea478ee586ee9074d9ebfeb05b75027e5e15f5bcd2aa35962dadfd9ac6bfd55ab9",
      "tree": {
        "sha": "e54a01f4b569635f25b8a3e449ab9227e6c8b7fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e54a01f4b569635f25b8a3e449ab9227e6c8b7fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b983e7e1721fa68cc04c05b1249d5871d66debe5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYLC4pAL7OGskoDms0upIUOdSiyUFAl3X7s4ACgkQ0upIUOdS\niyXKnQ//cTlP3VXGSt2iCn5xyXBUNck78fDiDPVA+D9jGJZWWxF3zH9oKFFLuibO\noILrlvC7zTEBefMn3yufTF94bIigceqy7Sn5tOnF+eKLkIqE39OyQHEkzjGG5Z34\nGx4vU0Nl9gJVwkxWtNgw8AwtPxrK3BtZT2eNURtj0FCZXVEg1eznzx42T/S7OmQ4\nGHpMUOmGInNAIALJ/MptEwwB2PxeRNVeqtCgvawEg5d2WGhZGsmFj2OnEl+Vxx/t\nozVeZfbXV33i4iuJOj5NVjDuBzqwv1r5CaPCtcziTAqe1+FH8Vq4HvhE7LupBhOQ\nQQNOl+xXBZsKaQPeU0WANVaT7STQJGC1B0wmgqntXHqmJLIedePAaOzqvMrEg5bv\nu3SI/qOy9qCfZQGpCHlsvxFMn1u/FIbxU6MKb3bGEfX16YbINjuwxEfMLZrM3vpu\nam+neKhRI739C8pkfhtbbS43XOZ+k589uGWcQfNcYGKxAdwR/0KB0cqO63I75kiK\nf6bTGnJ7MpLvKzzA/iRvAWvGPbX3uBKx5WiHBc5DHQC+JSqe36SS2jzP5ks3gfy9\n4YgbqluP/O1TW/wNUwZOPDHWRGnYtGJ034kDIkDiQSPbjRBENPrFQIWFXtOfU8Ds\n9fYa/DtSMm+gbc5+J3MEQjOu4yJtodflsGj318/pEYb4YaACdpk=\n=/A6x\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIIdTu1J3R7hKH8vvRDyxQDWGDNJaYSmxo116bNtqoIxSCP/wEALjreG2a7j+\n8IGy66ShvfMI8QRd1+7Q8Ag3VDRFuRxYjACD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEAxRXLI7u3vgZ+dqgajK8vcI8SDHzO6w\n7VAW9ZAOjrF9V+IdStnuVKc2jRVUoXVHNSObpwjxBF3X7tHwCOJAdzVRpV//AIPf\n4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMu\nb3Jn//AQh1VRBhtQzTc/3DNQfVae/AjxILzcqCogoKs7iUfpTKcTj7EYNPvKYDrx\nRl4Q063onzGQCPEEXdfu0PAIRTXCyBN0ALYAg9/jDS75DI4uLWh0dHBzOi8vYWxp\nY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQoorAXFhUMImiEldn\nfmhaCQjxIEa/bq8AKTRwjTLcY5au2Fv4NB9d0c0B8FmVaOfJnZ3gCPEEXdfu0fAI\nxK3AEOAXF8EAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJu\naXR5d2FsbC5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree e54a01f4b569635f25b8a3e449ab9227e6c8b7fc\nparent a739d207a39fc34c2e5adf4e14bfbb3a6288ede1\nparent a2e581de942ece85b84c4f5a15287654b02867cb\nauthor MarcoFalke <falke.marco@gmail.com> 1574432145 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1574432462 -0500\n\nMerge #17542: build: Create test utility library from src/test/util/\n\na2e581de942ece85b84c4f5a15287654b02867cb build: Create test utility library from src/test/util/ (Harris)\n\nPull request description:\n\n  This PR creates a static **test utility library** that replaces repetitive compilations of sources from *src/test/util* in **unit**, **gui** and **bench** **tests**.\n\n  The original issue is here: https://github.com/bitcoin/bitcoin/issues/17401\n\n  The changes are:\n\n  * a new *Makefile.test_util.include*\n  * a new entry in *Makefile.am* that includes *Makefile.test_util.include* when testing is enabled\n  * removal of all *src/test/util* headers & sources from unit, gui and bench Makefiles\n  * addition of *libtest_util.a* at LDADD's of every test\n\nACKs for top commit:\n  MarcoFalke:\n    ACK a2e581de942ece85b84c4f5a15287654b02867cb \ud83c\udf5e\n\nTree-SHA512: d172127a26ee70d16625e17d7d94337a65472c57bb97f910c357c52d3dc082ea478ee586ee9074d9ebfeb05b75027e5e15f5bcd2aa35962dadfd9ac6bfd55ab9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b983e7e1721fa68cc04c05b1249d5871d66debe5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b983e7e1721fa68cc04c05b1249d5871d66debe5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b983e7e1721fa68cc04c05b1249d5871d66debe5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a739d207a39fc34c2e5adf4e14bfbb3a6288ede1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a739d207a39fc34c2e5adf4e14bfbb3a6288ede1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a739d207a39fc34c2e5adf4e14bfbb3a6288ede1"
      },
      {
        "sha": "a2e581de942ece85b84c4f5a15287654b02867cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2e581de942ece85b84c4f5a15287654b02867cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2e581de942ece85b84c4f5a15287654b02867cb"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 40,
      "deletions": 30
    },
    "files": [
      {
        "sha": "27c87688b42ef8925d1b4b32ce21b31a18fd309f",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b983e7e1721fa68cc04c05b1249d5871d66debe5/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b983e7e1721fa68cc04c05b1249d5871d66debe5/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b983e7e1721fa68cc04c05b1249d5871d66debe5",
        "patch": "@@ -717,6 +717,8 @@ if EMBEDDED_LEVELDB\n include Makefile.leveldb.include\n endif\n \n+include Makefile.test_util.include\n+\n if ENABLE_TESTS\n include Makefile.test.include\n endif"
      },
      {
        "sha": "9e70db116b7c7354b1fe3d4262bfb6d8d8ba162c",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b983e7e1721fa68cc04c05b1249d5871d66debe5/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b983e7e1721fa68cc04c05b1249d5871d66debe5/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=b983e7e1721fa68cc04c05b1249d5871d66debe5",
        "patch": "@@ -40,10 +40,6 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/lockedpool.cpp \\\n   bench/poly1305.cpp \\\n   bench/prevector.cpp \\\n-  test/util/transaction_utils.h \\\n-  test/util/transaction_utils.cpp \\\n-  test/util/setup_common.h \\\n-  test/util/setup_common.cpp \\\n   test/util.h \\\n   test/util.cpp\n \n@@ -59,6 +55,7 @@ bench_bench_bitcoin_LDADD = \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBTEST_UTIL) \\\n   $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) \\\n   $(LIBMEMENV) \\"
      },
      {
        "sha": "8c47fabad9f419d8ee8ca0ed112a623f951c3184",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b983e7e1721fa68cc04c05b1249d5871d66debe5/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b983e7e1721fa68cc04c05b1249d5871d66debe5/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=b983e7e1721fa68cc04c05b1249d5871d66debe5",
        "patch": "@@ -26,12 +26,6 @@ TEST_QT_H = \\\n   qt/test/util.h \\\n   qt/test/wallettests.h\n \n-TEST_BITCOIN_CPP = \\\n-  test/util/setup_common.cpp\n-\n-TEST_BITCOIN_H = \\\n-  test/util/setup_common.h\n-\n qt_test_test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_TEST_INCLUDES)\n \n@@ -42,9 +36,7 @@ qt_test_test_bitcoin_qt_SOURCES = \\\n   qt/test/test_main.cpp \\\n   qt/test/uritests.cpp \\\n   qt/test/util.cpp \\\n-  $(TEST_QT_H) \\\n-  $(TEST_BITCOIN_CPP) \\\n-  $(TEST_BITCOIN_H)\n+  $(TEST_QT_H)\n if ENABLE_WALLET\n qt_test_test_bitcoin_qt_SOURCES += \\\n   qt/test/addressbooktests.cpp \\\n@@ -54,7 +46,7 @@ endif # ENABLE_WALLET\n \n nodist_qt_test_test_bitcoin_qt_SOURCES = $(TEST_QT_MOC_CPP)\n \n-qt_test_test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN_SERVER)\n+qt_test_test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN_SERVER) $(LIBTEST_UTIL)\n if ENABLE_WALLET\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_UTIL) $(LIBBITCOIN_WALLET)\n endif"
      },
      {
        "sha": "b4ca01b1fe162c022c91e41b5fffa486d725c3c8",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 4,
        "deletions": 16,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b983e7e1721fa68cc04c05b1249d5871d66debe5/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b983e7e1721fa68cc04c05b1249d5871d66debe5/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=b983e7e1721fa68cc04c05b1249d5871d66debe5",
        "patch": "@@ -58,31 +58,19 @@ RAW_TEST_FILES =\n GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)\n \n BITCOIN_TEST_SUITE = \\\n-  test/util/blockfilter.cpp \\\n-  test/util/blockfilter.h \\\n-  test/util/logging.cpp \\\n-  test/util/logging.h \\\n-  test/util/transaction_utils.cpp \\\n-  test/util/transaction_utils.h \\\n   test/main.cpp \\\n-  test/util/setup_common.h \\\n-  test/util/setup_common.cpp \\\n-  test/util/str.h \\\n-  test/util/str.cpp\n+  $(TEST_UTIL_H)\n \n FUZZ_SUITE = \\\n   test/fuzz/fuzz.cpp \\\n   test/fuzz/fuzz.h \\\n-  test/fuzz/FuzzedDataProvider.h \\\n-  test/util/setup_common.cpp \\\n-  test/util/setup_common.h \\\n-  test/util/str.cpp \\\n-  test/util/str.h\n+  test/fuzz/FuzzedDataProvider.h\n \n FUZZ_SUITE_LD_COMMON = \\\n  $(LIBBITCOIN_SERVER) \\\n  $(LIBBITCOIN_COMMON) \\\n  $(LIBBITCOIN_UTIL) \\\n+ $(LIBTEST_UTIL) \\\n  $(LIBBITCOIN_CONSENSUS) \\\n  $(LIBBITCOIN_CRYPTO) \\\n  $(LIBUNIVALUE) \\\n@@ -198,7 +186,7 @@ endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TEST_SUITE) $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(TESTDEFS) $(EVENT_CFLAGS)\n-test_test_bitcoin_LDADD =\n+test_test_bitcoin_LDADD = $(LIBTEST_UTIL)\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n endif"
      },
      {
        "sha": "cf55d141b0f83ff58b770e761ac14676c303072f",
        "filename": "src/Makefile.test_util.include",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b983e7e1721fa68cc04c05b1249d5871d66debe5/src/Makefile.test_util.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b983e7e1721fa68cc04c05b1249d5871d66debe5/src/Makefile.test_util.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_util.include?ref=b983e7e1721fa68cc04c05b1249d5871d66debe5",
        "patch": "@@ -0,0 +1,31 @@\n+# Copyright (c) 2013-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+LIBTEST_UTIL=libtest_util.a\n+\n+EXTRA_LIBRARIES += \\\n+    $(LIBTEST_UTIL)\n+\n+TEST_UTIL_H = \\\n+    test/util/blockfilter.h \\\n+    test/util/logging.h \\\n+    test/util/setup_common.h \\\n+    test/util/str.h \\\n+    test/util/transaction_utils.h\n+\n+libtest_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)\n+libtest_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+libtest_util_a_SOURCES = \\\n+  test/util/blockfilter.cpp \\\n+  test/util/logging.cpp \\\n+  test/util/setup_common.cpp \\\n+  test/util/str.cpp \\\n+  test/util/transaction_utils.cpp \\\n+  $(TEST_UTIL_H)\n+\n+LIBTEST_UTIL += $(LIBBITCOIN_SERVER)\n+LIBTEST_UTIL += $(LIBBITCOIN_COMMON)\n+LIBTEST_UTIL += $(LIBBITCOIN_UTIL)\n+LIBTEST_UTIL += $(LIBBITCOIN_CRYPTO_BASE)\n+"
      }
    ]
  },
  {
    "sha": "03f6f408ab2e9b30e1ee747b76bd9edc20b2c99d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2Y2ZjQwOGFiMmU5YjMwZTFlZTc0N2I3NmJkOWVkYzIwYjJjOTlk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-22T14:40:08Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-22T14:52:58Z"
      },
      "message": "Merge #17545: build: remove libanl.so.1 from ALLOWED_LIBRARIES\n\nec89d2882a591f6af5aad57ab8638250d9dc1add build: remove libanl.so.1 from ALLOWED_LIBRARIES (fanquake)\n\nPull request description:\n\n  It should no longer be needed after: https://github.com/bitcoin/bitcoin/commit/10ae7a7b2316f8052ec58ef237ce6dd987300900.\n\n  Symbol checker output for the `0.19.0.1` gitian built Linux binaries:\n  ```bash\n  aarch64  arm  i686-pc  risvc  symbol-check.py  x86_64\n  root@557096f567b5:/test# find aarch64/ -type f -executable | xargs python3 symbol-check.py\n  ['libpthread.so.0', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-aarch64.so.1']\n  ['libpthread.so.0', 'libfontconfig.so.1', 'libfreetype.so.6', 'libxcb.so.1', 'libdl.so.2', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-aarch64.so.1']\n  root@557096f567b5:/test# find arm -type f -executable | xargs python3 symbol-check.py\n  ['libpthread.so.0', 'librt.so.1', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-armhf.so.3']\n  ['libpthread.so.0', 'librt.so.1', 'libfontconfig.so.1', 'libfreetype.so.6', 'libxcb.so.1', 'libdl.so.2', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-armhf.so.3']\n  root@557096f567b5:/test# find i686-pc -type f -executable | xargs python3 symbol-check.py\n  ['libpthread.so.0', 'librt.so.1', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux.so.2']\n  ['libpthread.so.0', 'librt.so.1', 'libfontconfig.so.1', 'libfreetype.so.6', 'libxcb.so.1', 'libdl.so.2', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux.so.2']\n  root@557096f567b5:/test# find risvc/ -type f -executable | xargs python3 symbol-check.py\n  ['libpthread.so.0', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-riscv64-lp64d.so.1']\n  ['libpthread.so.0', 'libfontconfig.so.1', 'libfreetype.so.6', 'libxcb.so.1', 'libdl.so.2', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-riscv64-lp64d.so.1', 'libatomic.so.1']\n  root@557096f567b5:/test# find x86_64/ -type f -executable | xargs python3 symbol-check.py\n  ['libpthread.so.0', 'librt.so.1', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-x86-64.so.2']\n  ['libpthread.so.0', 'librt.so.1', 'libfontconfig.so.1', 'libfreetype.so.6', 'libxcb.so.1', 'libdl.so.2', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-x86-64.so.2']\n  ```\n\nACKs for top commit:\n  laanwj:\n    ACK, good catch ec89d2882a591f6af5aad57ab8638250d9dc1add\n\nTree-SHA512: 6bc118da190a5c37d26f0dfad5d4661add2ef15525668efb93425423bddbddabf3d7d8809464e79691f517fbe2aab241678652b3dc55ec3f452cf0dcbc26057c",
      "tree": {
        "sha": "86c27cb39a58dcb50e78bf27b329d018055e79ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86c27cb39a58dcb50e78bf27b329d018055e79ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03f6f408ab2e9b30e1ee747b76bd9edc20b2c99d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3X9koACgkQLuufXMCV\nJsEkog/9F+xGQl+i5xCmdNoLeB6K1u9mOus9JvnnlUxHY/IAcJArOZ6SJ95LQzjn\nX2lBmH/rUMHZp5kxZbSwApbTWToK67Aj6KkimYD4ZFWLO2YBi2U1cD/Gv2Jk2Oo0\nlS3sC6NOYaBQ04CgWIJTxdLPOAhmRH7XyEucBgo7NXj7xIRoeC43PcEx2l3ppQDn\nJac/wAqJ98pop9NIyKdsdUlsoWebHiMXoLG1a2i8djTyyNzGGfBh+IJCGO00lyh/\nI60Uo3M+rm7RCQakPnxAnL7JiomH2vlvqG9iDlWe/6dEdf8yuAxVfiL1W/YbKlV2\n4yTVbrHTC8eg2GbIbv75Cj1z1Uxocb+dEE4G7E2aaBrDXf5f1oqFvUy23qmXKQBA\n4fR2R+pLXomQ7Qot57PzgyLgd0uswcDXdxYUbLwsDNeCICSW6P9djizjVU0CRHiI\nyd9Jgcn20VUZlczPQggHs7sMVwQLLRiqkXeWGYzyFDWf1QvxgqWgh5hcbYbtfdVs\nEeHguhaFlqg+LzbqRmoGVZSaxUQfxLStU/6Qwv/eDXs80+pXkreaoe1Ul5lQuDty\n5LqWH8LvVCsrLJSHA0AQPjPkNeVfAhktmHf0jN3ag7dcPl/WeTDxJvAehwPDkSBF\nyO+uU2yqRc2Ao8G1Pw35B94JWqmXrWQrvE/tGuC+Gqr0Ob560NA=\n=VgEk\n-----END PGP SIGNATURE-----",
        "payload": "tree 86c27cb39a58dcb50e78bf27b329d018055e79ba\nparent b983e7e1721fa68cc04c05b1249d5871d66debe5\nparent ec89d2882a591f6af5aad57ab8638250d9dc1add\nauthor fanquake <fanquake@gmail.com> 1574433608 -0500\ncommitter fanquake <fanquake@gmail.com> 1574434378 -0500\n\nMerge #17545: build: remove libanl.so.1 from ALLOWED_LIBRARIES\n\nec89d2882a591f6af5aad57ab8638250d9dc1add build: remove libanl.so.1 from ALLOWED_LIBRARIES (fanquake)\n\nPull request description:\n\n  It should no longer be needed after: https://github.com/bitcoin/bitcoin/commit/10ae7a7b2316f8052ec58ef237ce6dd987300900.\n\n  Symbol checker output for the `0.19.0.1` gitian built Linux binaries:\n  ```bash\n  aarch64  arm  i686-pc  risvc  symbol-check.py  x86_64\n  root@557096f567b5:/test# find aarch64/ -type f -executable | xargs python3 symbol-check.py\n  ['libpthread.so.0', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-aarch64.so.1']\n  ['libpthread.so.0', 'libfontconfig.so.1', 'libfreetype.so.6', 'libxcb.so.1', 'libdl.so.2', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-aarch64.so.1']\n  root@557096f567b5:/test# find arm -type f -executable | xargs python3 symbol-check.py\n  ['libpthread.so.0', 'librt.so.1', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-armhf.so.3']\n  ['libpthread.so.0', 'librt.so.1', 'libfontconfig.so.1', 'libfreetype.so.6', 'libxcb.so.1', 'libdl.so.2', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-armhf.so.3']\n  root@557096f567b5:/test# find i686-pc -type f -executable | xargs python3 symbol-check.py\n  ['libpthread.so.0', 'librt.so.1', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux.so.2']\n  ['libpthread.so.0', 'librt.so.1', 'libfontconfig.so.1', 'libfreetype.so.6', 'libxcb.so.1', 'libdl.so.2', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux.so.2']\n  root@557096f567b5:/test# find risvc/ -type f -executable | xargs python3 symbol-check.py\n  ['libpthread.so.0', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-riscv64-lp64d.so.1']\n  ['libpthread.so.0', 'libfontconfig.so.1', 'libfreetype.so.6', 'libxcb.so.1', 'libdl.so.2', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-riscv64-lp64d.so.1', 'libatomic.so.1']\n  root@557096f567b5:/test# find x86_64/ -type f -executable | xargs python3 symbol-check.py\n  ['libpthread.so.0', 'librt.so.1', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-x86-64.so.2']\n  ['libpthread.so.0', 'librt.so.1', 'libfontconfig.so.1', 'libfreetype.so.6', 'libxcb.so.1', 'libdl.so.2', 'libm.so.6', 'libgcc_s.so.1', 'libc.so.6', 'ld-linux-x86-64.so.2']\n  ```\n\nACKs for top commit:\n  laanwj:\n    ACK, good catch ec89d2882a591f6af5aad57ab8638250d9dc1add\n\nTree-SHA512: 6bc118da190a5c37d26f0dfad5d4661add2ef15525668efb93425423bddbddabf3d7d8809464e79691f517fbe2aab241678652b3dc55ec3f452cf0dcbc26057c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03f6f408ab2e9b30e1ee747b76bd9edc20b2c99d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03f6f408ab2e9b30e1ee747b76bd9edc20b2c99d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03f6f408ab2e9b30e1ee747b76bd9edc20b2c99d/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b983e7e1721fa68cc04c05b1249d5871d66debe5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b983e7e1721fa68cc04c05b1249d5871d66debe5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b983e7e1721fa68cc04c05b1249d5871d66debe5"
      },
      {
        "sha": "ec89d2882a591f6af5aad57ab8638250d9dc1add",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec89d2882a591f6af5aad57ab8638250d9dc1add",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec89d2882a591f6af5aad57ab8638250d9dc1add"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c224085c327946c7c28aed60753b5170b7a2d926",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03f6f408ab2e9b30e1ee747b76bd9edc20b2c99d/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03f6f408ab2e9b30e1ee747b76bd9edc20b2c99d/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=03f6f408ab2e9b30e1ee747b76bd9edc20b2c99d",
        "patch": "@@ -57,7 +57,6 @@\n 'libgcc_s.so.1', # GCC base support\n 'libc.so.6', # C library\n 'libpthread.so.0', # threading\n-'libanl.so.1', # DNS resolve\n 'libm.so.6', # math library\n 'librt.so.1', # real-time (clock)\n 'libatomic.so.1',"
      }
    ]
  },
  {
    "sha": "bb862d7864cc4889285e1a3713e3864d667cf30a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjg2MmQ3ODY0Y2M0ODg5Mjg1ZTFhMzcxM2UzODY0ZDY2N2NmMzBh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-22T15:35:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-22T15:35:08Z"
      },
      "message": "Merge #14384: Fire TransactionRemovedFromMempool callbacks from mempool\n\ne20c72f9f076681def325b5b5fa53bccda2b0eab Fire TransactionRemovedFromMempool from mempool (251)\n\nPull request description:\n\n  This pull request fires TransactionRemovedFromMempool callbacks from the mempool and cleans up a bunch of code.\n\n  It also resolves the `txmempool -> validation -> validationinterface -> txmempool` circular dependency.\n\n  Ideally, `validationinterface` is a dumb component that doesn't have any knowledge of the sub-systems it sends its notifications to. The commit that aims to resolve this circular dependency by moving `txmempool` specific code out of `validationinterface` to `txmempool` where it belongs.\n\nACKs for top commit:\n  jnewbery:\n    ACK e20c72f9f076681def325b5b5fa53bccda2b0eab\n\nTree-SHA512: 354c3ff1113b21a0b511d80d604edfe3846dddae3355e43d1387f68906e54bf5dc01e7c029edc0b8e635b500b2ab97ee50362e2486eb4319f7347ee9a9e6cef3",
      "tree": {
        "sha": "7cb60d4ed799d2931bacf2c4fd7e5b56e1c5a9c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7cb60d4ed799d2931bacf2c4fd7e5b56e1c5a9c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb862d7864cc4889285e1a3713e3864d667cf30a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3YACwACgkQHkrtYphs\n0l1GHAf+Np2sgCd8iZheCUjHyPRBqa5ajEdCp4l5U3mEIntn9GkFOYw0hjqIur74\nrPJOSQjtG+YxVaJLUDdVmIs4xZDO+QM2H/o1oWKBCpQohpxbLa1jGpixdrRDAbzs\n1W/zSoZA/witAyFFkV0hHWX4Rq8VqGZNqAqj1/Q8TtBBlZ/tbBoMvfFU+0ZNMHpY\n4UO2Zlf9C48+x0xJEqchTK8Owk5bfEinqXnRl8toCvBmVNPwMJJbvwtKqaI42Bjo\nS8oqOHAmcUQsI2VMrCmg/IMjwJ3sIHZL9pds0CrSfy+2hms11I7Hg0giB9H/4H+y\n9V0f0LzPLY2w55iF6NW8AEr3D02GCA==\n=2xtU\n-----END PGP SIGNATURE-----",
        "payload": "tree 7cb60d4ed799d2931bacf2c4fd7e5b56e1c5a9c1\nparent 03f6f408ab2e9b30e1ee747b76bd9edc20b2c99d\nparent e20c72f9f076681def325b5b5fa53bccda2b0eab\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1574436900 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1574436908 +0100\n\nMerge #14384: Fire TransactionRemovedFromMempool callbacks from mempool\n\ne20c72f9f076681def325b5b5fa53bccda2b0eab Fire TransactionRemovedFromMempool from mempool (251)\n\nPull request description:\n\n  This pull request fires TransactionRemovedFromMempool callbacks from the mempool and cleans up a bunch of code.\n\n  It also resolves the `txmempool -> validation -> validationinterface -> txmempool` circular dependency.\n\n  Ideally, `validationinterface` is a dumb component that doesn't have any knowledge of the sub-systems it sends its notifications to. The commit that aims to resolve this circular dependency by moving `txmempool` specific code out of `validationinterface` to `txmempool` where it belongs.\n\nACKs for top commit:\n  jnewbery:\n    ACK e20c72f9f076681def325b5b5fa53bccda2b0eab\n\nTree-SHA512: 354c3ff1113b21a0b511d80d604edfe3846dddae3355e43d1387f68906e54bf5dc01e7c029edc0b8e635b500b2ab97ee50362e2486eb4319f7347ee9a9e6cef3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb862d7864cc4889285e1a3713e3864d667cf30a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb862d7864cc4889285e1a3713e3864d667cf30a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb862d7864cc4889285e1a3713e3864d667cf30a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03f6f408ab2e9b30e1ee747b76bd9edc20b2c99d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03f6f408ab2e9b30e1ee747b76bd9edc20b2c99d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03f6f408ab2e9b30e1ee747b76bd9edc20b2c99d"
      },
      {
        "sha": "e20c72f9f076681def325b5b5fa53bccda2b0eab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e20c72f9f076681def325b5b5fa53bccda2b0eab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e20c72f9f076681def325b5b5fa53bccda2b0eab"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 15,
      "deletions": 36
    },
    "files": [
      {
        "sha": "e7dda59590cff2b5ed2ac8c1f4bae11f94bae9b5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb862d7864cc4889285e1a3713e3864d667cf30a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb862d7864cc4889285e1a3713e3864d667cf30a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bb862d7864cc4889285e1a3713e3864d667cf30a",
        "patch": "@@ -281,7 +281,6 @@ void Shutdown(NodeContext& node)\n     node.chain_clients.clear();\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n-    GetMainSignals().UnregisterWithMempoolSignals(mempool);\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     if (node.mempool) node.mempool = nullptr;\n@@ -1263,7 +1262,6 @@ bool AppInitMain(NodeContext& node)\n     }, 60000);\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n-    GetMainSignals().RegisterWithMempoolSignals(mempool);\n \n     // Create client interfaces for wallets that are supposed to be loaded\n     // according to -wallet and -disablewallet options. This only constructs"
      },
      {
        "sha": "3c967a04c0711f4187ebcdaa0754884260010b52",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb862d7864cc4889285e1a3713e3864d667cf30a/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb862d7864cc4889285e1a3713e3864d667cf30a/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=bb862d7864cc4889285e1a3713e3864d667cf30a",
        "patch": "@@ -17,6 +17,7 @@\n #include <util/system.h>\n #include <util/moneystr.h>\n #include <util/time.h>\n+#include <validationinterface.h>\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, unsigned int _entryHeight,\n@@ -403,7 +404,12 @@ void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAnces\n \n void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n {\n-    NotifyEntryRemoved(it->GetSharedTx(), reason);\n+    CTransactionRef ptx = it->GetSharedTx();\n+    NotifyEntryRemoved(ptx, reason);\n+    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n+        GetMainSignals().TransactionRemovedFromMempool(ptx);\n+    }\n+\n     const uint256 hash = it->GetTx().GetHash();\n     for (const CTxIn& txin : it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);"
      },
      {
        "sha": "6c0f4d5edd2d3390826dc4c7b4f16191fa557cd7",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 24,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb862d7864cc4889285e1a3713e3864d667cf30a/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb862d7864cc4889285e1a3713e3864d667cf30a/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=bb862d7864cc4889285e1a3713e3864d667cf30a",
        "patch": "@@ -7,9 +7,9 @@\n \n #include <primitives/block.h>\n #include <scheduler.h>\n-#include <txmempool.h>\n \n #include <future>\n+#include <unordered_map>\n #include <utility>\n \n #include <boost/signals2/signal.hpp>\n@@ -46,11 +46,6 @@ struct MainSignalsInstance {\n \n static CMainSignals g_signals;\n \n-// This map has to a separate global instead of a member of MainSignalsInstance,\n-// because RegisterWithMempoolSignals is currently called before RegisterBackgroundSignalScheduler,\n-// so MainSignalsInstance hasn't been created yet.\n-static std::unordered_map<CTxMemPool*, boost::signals2::scoped_connection> g_connNotifyEntryRemoved;\n-\n void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n     assert(!m_internals);\n     m_internals.reset(new MainSignalsInstance(&scheduler));\n@@ -71,17 +66,6 @@ size_t CMainSignals::CallbacksPending() {\n     return m_internals->m_schedulerClient.CallbacksPending();\n }\n \n-void CMainSignals::RegisterWithMempoolSignals(CTxMemPool& pool) {\n-    g_connNotifyEntryRemoved.emplace(std::piecewise_construct,\n-        std::forward_as_tuple(&pool),\n-        std::forward_as_tuple(pool.NotifyEntryRemoved.connect(std::bind(&CMainSignals::MempoolEntryRemoved, this, std::placeholders::_1, std::placeholders::_2)))\n-    );\n-}\n-\n-void CMainSignals::UnregisterWithMempoolSignals(CTxMemPool& pool) {\n-    g_connNotifyEntryRemoved.erase(&pool);\n-}\n-\n CMainSignals& GetMainSignals()\n {\n     return g_signals;\n@@ -126,13 +110,6 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n \n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n@@ -150,6 +127,12 @@ void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n     });\n }\n \n+void CMainSignals::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n+    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        m_internals->TransactionRemovedFromMempool(ptx);\n+    });\n+}\n+\n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n     m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);"
      },
      {
        "sha": "63aad8661f85fef3abe7851be6a7da313f889515",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb862d7864cc4889285e1a3713e3864d667cf30a/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb862d7864cc4889285e1a3713e3864d667cf30a/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=bb862d7864cc4889285e1a3713e3864d667cf30a",
        "patch": "@@ -21,8 +21,6 @@ class CConnman;\n class CValidationInterface;\n class uint256;\n class CScheduler;\n-class CTxMemPool;\n-enum class MemPoolRemovalReason;\n \n // These functions dispatch to one or all registered wallets\n \n@@ -158,8 +156,6 @@ class CMainSignals {\n     friend void ::UnregisterAllValidationInterfaces();\n     friend void ::CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n \n-    void MempoolEntryRemoved(CTransactionRef tx, MemPoolRemovalReason reason);\n-\n public:\n     /** Register a CScheduler to give callbacks which should run in the background (may only be called once) */\n     void RegisterBackgroundSignalScheduler(CScheduler& scheduler);\n@@ -170,13 +166,10 @@ class CMainSignals {\n \n     size_t CallbacksPending();\n \n-    /** Register with mempool to call TransactionRemovedFromMempool callbacks */\n-    void RegisterWithMempoolSignals(CTxMemPool& pool);\n-    /** Unregister with mempool */\n-    void UnregisterWithMempoolSignals(CTxMemPool& pool);\n \n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n+    void TransactionRemovedFromMempool(const CTransactionRef &);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>> &);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &, const CBlockIndex* pindex);\n     void ChainStateFlushed(const CBlockLocator &);"
      },
      {
        "sha": "7164432ca550003250aff60b589f19a9d8c7e918",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb862d7864cc4889285e1a3713e3864d667cf30a/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb862d7864cc4889285e1a3713e3864d667cf30a/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=bb862d7864cc4889285e1a3713e3864d667cf30a",
        "patch": "@@ -26,7 +26,6 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n     \"policy/fees -> txmempool -> validation -> policy/fees\"\n-    \"txmempool -> validation -> validationinterface -> txmempool\"\n     \"wallet/scriptpubkeyman -> wallet/wallet -> wallet/scriptpubkeyman\"\n )\n "
      }
    ]
  },
  {
    "sha": "5ad4dd1ea131f322dc39db5b4e50b2a2be29d6ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWQ0ZGQxZWExMzFmMzIyZGMzOWRiNWI0ZTUwYjJhMmJlMjlkNmZm",
    "commit": {
      "author": {
        "name": "Marius Kj\u00e6rstad",
        "email": "sandakersmann@users.noreply.github.com",
        "date": "2019-11-22T16:48:49Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2019-11-22T16:48:49Z"
      },
      "message": "doc: Changed MiniUPnPc link to https in dependencies.md\n\ndoc: Changed MiniUPnPc link to https in dependencies.md",
      "tree": {
        "sha": "a584236035d32c24fc093df6c205b59791a24357",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a584236035d32c24fc093df6c205b59791a24357"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ad4dd1ea131f322dc39db5b4e50b2a2be29d6ff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2BFxCRBK7hj4Ov3rIwAAdHIIAE8a0J0T9gOXx25hYMS9I4HQ\nO8MX9ozm25ZzqfwB6+KuxgTIpp4uvZbhSeQpSO7Hu2eoy7DH3aNlomYtyR85EHWW\nISn7XQ1ENVagxavT4eaWgcGqrkc/4j8TRX8c827wZOnewsPnyR9NPqL2l7fN0aRR\nQLMYxfUSwbCGSiwamMTLoBwecvu9OSlCsA8lnvkMPSuK+kc8uqkI30WWdjmxuMBP\nhGqV/+9A8LCxx4BCW1syetRvXSMsl06VcFjkPXD09NzeYE+coy8EGHDp6X4cczeI\nGQ7QLMnWkNShr595aKe5l7cYa6Rf60ckHve/Xa2TzJt72BT7RXMBl7LCwIPK7xQ=\n=hHeO\n-----END PGP SIGNATURE-----\n",
        "payload": "tree a584236035d32c24fc093df6c205b59791a24357\nparent bb862d7864cc4889285e1a3713e3864d667cf30a\nauthor Marius Kj\u00e6rstad <sandakersmann@users.noreply.github.com> 1574441329 +0100\ncommitter GitHub <noreply@github.com> 1574441329 +0100\n\ndoc: Changed MiniUPnPc link to https in dependencies.md\n\ndoc: Changed MiniUPnPc link to https in dependencies.md"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ad4dd1ea131f322dc39db5b4e50b2a2be29d6ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ad4dd1ea131f322dc39db5b4e50b2a2be29d6ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ad4dd1ea131f322dc39db5b4e50b2a2be29d6ff/comments",
    "author": {
      "login": "sandakersmann",
      "id": 6118832,
      "node_id": "MDQ6VXNlcjYxMTg4MzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6118832?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sandakersmann",
      "html_url": "https://github.com/sandakersmann",
      "followers_url": "https://api.github.com/users/sandakersmann/followers",
      "following_url": "https://api.github.com/users/sandakersmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/sandakersmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sandakersmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sandakersmann/subscriptions",
      "organizations_url": "https://api.github.com/users/sandakersmann/orgs",
      "repos_url": "https://api.github.com/users/sandakersmann/repos",
      "events_url": "https://api.github.com/users/sandakersmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sandakersmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb862d7864cc4889285e1a3713e3864d667cf30a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb862d7864cc4889285e1a3713e3864d667cf30a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb862d7864cc4889285e1a3713e3864d667cf30a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b739881a7a8d50926660e9f95aa4aa3c1883ab07",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ad4dd1ea131f322dc39db5b4e50b2a2be29d6ff/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ad4dd1ea131f322dc39db5b4e50b2a2be29d6ff/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=5ad4dd1ea131f322dc39db5b4e50b2a2be29d6ff",
        "patch": "@@ -16,7 +16,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | libevent | [2.1.11-stable](https://github.com/libevent/libevent/releases) | 2.0.22 | No |  |  |\n | libpng |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n | librsvg | |  |  |  |  |\n-| MiniUPnPc | [2.0.20180203](http://miniupnp.free.fr/files) |  | No |  |  |\n+| MiniUPnPc | [2.0.20180203](https://miniupnp.tuxfamily.org/files) |  | No |  |  |\n | PCRE |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n | Python (tests) |  | [3.5](https://www.python.org/downloads) |  |  |  |\n | qrencode | [3.4.4](https://fukuchi.org/works/qrencode) |  | No |  |  |"
      }
    ]
  },
  {
    "sha": "fad88e6f86d1dd32cf01db2287df9c63e66c5116",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWQ4OGU2Zjg2ZDFkZDMyY2YwMWRiMjI4N2RmOWM2M2U2NmM1MTE2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-22T18:58:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-22T18:57:55Z"
      },
      "message": "ci: Remove use of cd",
      "tree": {
        "sha": "5204b698fcb948fdcf7b211219fc6e454c3f0513",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5204b698fcb948fdcf7b211219fc6e454c3f0513"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad88e6f86d1dd32cf01db2287df9c63e66c5116",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUil1gv9FCF+vZeo5BhR7pjPN26XMGVG88aKn/Bi9BlGA26Ojm3a2ush7S65HGS7\n06KJoOJxT7/2SJ1GmUIL63ise1/ntODavjrftTJtDcdqkuwS/lJWMOsxpoeQyMjr\ntSkilZjC1fk2lsbEvfDhmcghIyzGu8DLscpd+FbT+nuP8/BdhCcFToWqtopE9QLs\n99WkjUmqpSgUH6CzRZrW+ZZzaSxxHqWN1ZLieGYc8ylvQsohzf5Lli2G3vaDWuIQ\nTyLdhIWxZjqH4OfuIP2lYPtbH/EzJ8X/V8ozWMWgVwKe/WRSCqm5b9JRSf0DGlbM\nL8Gtu8R0CCALfSzrGoxxWEj1H3tMzZDFHaIkVV3c31WyTKZ7eh2R1RKNk/6gOj0o\n36cj5c21f7mFNJF42MXupIZwtOx6lH61j3gUNTUiOm5KFty/zu/ZQ8DtPny8vz4w\njkEaCdN/vvfEeKMUaoWyzzDqiWfXy1ZCoTXN0h5WBgH8G0GEChwBUqAXPzp4daBU\n0F1+sJ+S\n=zwmB\n-----END PGP SIGNATURE-----",
        "payload": "tree 5204b698fcb948fdcf7b211219fc6e454c3f0513\nparent fa2941bbf47a8a6b79b8db4a87e1aedcf6a29a5e\nauthor MarcoFalke <falke.marco@gmail.com> 1574449133 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1574449075 -0500\n\nci: Remove use of cd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad88e6f86d1dd32cf01db2287df9c63e66c5116",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad88e6f86d1dd32cf01db2287df9c63e66c5116",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad88e6f86d1dd32cf01db2287df9c63e66c5116/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa2941bbf47a8a6b79b8db4a87e1aedcf6a29a5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2941bbf47a8a6b79b8db4a87e1aedcf6a29a5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2941bbf47a8a6b79b8db4a87e1aedcf6a29a5e"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 6,
      "deletions": 21
    },
    "files": [
      {
        "sha": "2a1983b1c5d19076e50f5d81d5143fb326f9b6c4",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad88e6f86d1dd32cf01db2287df9c63e66c5116/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad88e6f86d1dd32cf01db2287df9c63e66c5116/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=fad88e6f86d1dd32cf01db2287df9c63e66c5116",
        "patch": "@@ -44,6 +44,8 @@ elif [[ $BITCOIN_CONFIG = *--with-sanitizers=*address* ]]; then # If ran with (A\n   DOCKER_ADMIN=\"--cap-add SYS_PTRACE\"\n fi\n \n+export P_CI_DIR=\"$PWD\"\n+\n if [ -z \"$RUN_CI_ON_HOST\" ]; then\n   echo \"Creating $DOCKER_NAME_TAG container to run in\"\n   ${CI_RETRY_EXE} docker pull \"$DOCKER_NAME_TAG\"\n@@ -57,12 +59,12 @@ if [ -z \"$RUN_CI_ON_HOST\" ]; then\n                   $DOCKER_NAME_TAG)\n \n   DOCKER_EXEC () {\n-    docker exec $DOCKER_ID bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $PWD && $*\"\n+    docker exec $DOCKER_ID bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $P_CI_DIR && $*\"\n   }\n else\n   echo \"Running on host system without docker wrapper\"\n   DOCKER_EXEC () {\n-    bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $PWD && $*\"\n+    bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $P_CI_DIR && $*\"\n   }\n fi\n "
      },
      {
        "sha": "98b75d7497547a96478fbd3119a13983c2615b80",
        "filename": "ci/test/06_script_a.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 14,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad88e6f86d1dd32cf01db2287df9c63e66c5116/ci/test/06_script_a.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad88e6f86d1dd32cf01db2287df9c63e66c5116/ci/test/06_script_a.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_a.sh?ref=fad88e6f86d1dd32cf01db2287df9c63e66c5116",
        "patch": "@@ -19,14 +19,8 @@ else\n fi\n END_FOLD\n \n-# Create folder on host and docker, so that `cd` works\n-mkdir -p build\n DOCKER_EXEC mkdir -p build\n-\n-# Temporarily disable errexit, because Travis macOS fails without error message\n-set +o errexit\n-cd build || (echo \"could not enter build directory\"; exit 1)\n-set -o errexit\n+export P_CI_DIR=\"$P_CI_DIR/build\"\n \n BEGIN_FOLD configure\n DOCKER_EXEC ../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( (DOCKER_EXEC cat config.log) && false)\n@@ -38,9 +32,7 @@ mkdir -p \"bitcoin-$HOST\"\n DOCKER_EXEC make distdir VERSION=$HOST\n END_FOLD\n \n-set +o errexit\n-cd \"bitcoin-$HOST\" || (echo \"could not enter distdir bitcoin-$HOST\"; exit 1)\n-set -o errexit\n+export P_CI_DIR=\"$P_CI_DIR/bitcoin-$HOST\"\n \n BEGIN_FOLD configure\n DOCKER_EXEC ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( (DOCKER_EXEC cat config.log) && false)\n@@ -52,7 +44,3 @@ trap 'DOCKER_EXEC \"cat ${BASE_SCRATCH_DIR}/sanitizer-output/* 2> /dev/null\"' ERR\n BEGIN_FOLD build\n DOCKER_EXEC make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && DOCKER_EXEC make $GOAL V=1 ; false )\n END_FOLD\n-\n-set +o errexit\n-cd ${BASE_ROOT_DIR} || (echo \"could not enter base root dir $BASE_ROOT_DIR\"; exit 1)\n-set -o errexit"
      },
      {
        "sha": "a8e0a50f3669c53b17b609cf8a8f410d401049d9",
        "filename": "ci/test/06_script_b.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad88e6f86d1dd32cf01db2287df9c63e66c5116/ci/test/06_script_b.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad88e6f86d1dd32cf01db2287df9c63e66c5116/ci/test/06_script_b.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_b.sh?ref=fad88e6f86d1dd32cf01db2287df9c63e66c5116",
        "patch": "@@ -6,11 +6,6 @@\n \n export LC_ALL=C.UTF-8\n \n-# Temporarily disable errexit, because Travis macOS fails without error message\n-set +o errexit\n-cd \"build/bitcoin-$HOST\" || (echo \"could not enter distdir build/bitcoin-$HOST\"; exit 1)\n-set -o errexit\n-\n if [ -n \"$QEMU_USER_CMD\" ]; then\n   BEGIN_FOLD wrap-qemu\n   echo \"Prepare to run functional tests for HOST=$HOST\""
      }
    ]
  },
  {
    "sha": "cef87f7a48f76c33f55fc54f199a905a2fa0bb15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWY4N2Y3YTQ4Zjc2YzMzZjU1ZmM1NGYxOTlhOTA1YTJmYTBiYjE1",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-22T19:06:14Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-22T19:06:35Z"
      },
      "message": "Merge #17290: Enable BnB coin selection for preset inputs and subtract fee from outputs\n\nb007efdf1910db1d38671d6435d2f379bbf847d2 Allow BnB when subtract fee from outputs (Andrew Chow)\ndb15e71e79b24601853703bebd1c92f4b523fd5f Use BnB when preset inputs are selected (Andrew Chow)\n\nPull request description:\n\n  Currently we explicitly disable BnB when there are preset inputs selected or when the subtract fee from outputs option is enabled. This PR enables BnB for both cases.\n\n  Kind of an alternative to #17246 (implements the subtract fee from outputs part of it) and borrows a test from there too.\n\nACKs for top commit:\n  instagibbs:\n    reACK https://github.com/bitcoin/bitcoin/pull/17290/commits/b007efdf1910db1d38671d6435d2f379bbf847d2\n  Sjors:\n    re-ACK b007efdf1910db1d38671d6435d2f379bbf847d2\n\nTree-SHA512: 933276b09b2fa2ab43db7f0b98762f06f6f5fa8606195f96aca9fa1cb71ae4ee7156028dd482b1cada82ddd0996a9daf12ea5c152589fdf192cd96cbc51e99df",
      "tree": {
        "sha": "0ba63dfead2528f0ae743a8444f7ab69a8801c2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ba63dfead2528f0ae743a8444f7ab69a8801c2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cef87f7a48f76c33f55fc54f199a905a2fa0bb15",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAl3YMbsACgkQ0wARbhyH\nWj3v0hAAgn2XYi14J9m7M9lguMzLR6Luiu+lksllXyErfa+BRwJXChoaqCllIKyw\nis6kIDZi+H1ShU7gE2PM+62a4F84PSmKvJSYN+Gk1sI28JUbxUALofoGo1/HwlZb\nwNg+wkZ/y6FkOuYo5PdhdK6LrRe1gAmrJ5MXhPKybATNi6f9HLbFkL4fsakaImm7\nytco3eBrQE4ZZAmWKvqwv7r2qGl+vyJt/A/AyIegnh4+Y+COjUGvrhwC1qa6Q2EA\n2NTlx+xJTRDO4n9NpXAkt1EGsKj8rsbq8fwq8d+w4YygVeDhTomjJY8NgAbGwfrO\nB5rsWPTNyO72LHLNLqbu0Lmu0odRSr5Fna0Lx/XebpauJW3197agnHzp3TG2GnZi\n4nzwABKVDAFK1Vu2B0ijHDH6t37ti/qqPbvMnxGczypB9viAkFghV/UAo8v4dkNZ\nwxKIFYf1Je7SnWLoP4yIoojL9fZAKMtpZMlyVPnW2GvnTxFiF7jBAS3AwD/4Eynk\ni7BKfqVPb+UrIfWm4/fFlPuXOMHyxvOhz4HRkT0kc6hF4FM0JOLzxxK4JdE8ENNc\nRTPkEynxBO/MITDnOhalZslp/p/Rj6pUyQaN7+La/ZsnI43rB/VOpab3hrbf76f4\n1Y8h8KzkhBv6bNGdwUiygtlNn46fZk6SIUgPMwwdFbWWldkEylM=\n=pxly\n-----END PGP SIGNATURE-----",
        "payload": "tree 0ba63dfead2528f0ae743a8444f7ab69a8801c2b\nparent bb862d7864cc4889285e1a3713e3864d667cf30a\nparent b007efdf1910db1d38671d6435d2f379bbf847d2\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1574449574 +1300\ncommitter Samuel Dobson <dobsonsa68@gmail.com> 1574449595 +1300\n\nMerge #17290: Enable BnB coin selection for preset inputs and subtract fee from outputs\n\nb007efdf1910db1d38671d6435d2f379bbf847d2 Allow BnB when subtract fee from outputs (Andrew Chow)\ndb15e71e79b24601853703bebd1c92f4b523fd5f Use BnB when preset inputs are selected (Andrew Chow)\n\nPull request description:\n\n  Currently we explicitly disable BnB when there are preset inputs selected or when the subtract fee from outputs option is enabled. This PR enables BnB for both cases.\n\n  Kind of an alternative to #17246 (implements the subtract fee from outputs part of it) and borrows a test from there too.\n\nACKs for top commit:\n  instagibbs:\n    reACK https://github.com/bitcoin/bitcoin/pull/17290/commits/b007efdf1910db1d38671d6435d2f379bbf847d2\n  Sjors:\n    re-ACK b007efdf1910db1d38671d6435d2f379bbf847d2\n\nTree-SHA512: 933276b09b2fa2ab43db7f0b98762f06f6f5fa8606195f96aca9fa1cb71ae4ee7156028dd482b1cada82ddd0996a9daf12ea5c152589fdf192cd96cbc51e99df\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cef87f7a48f76c33f55fc54f199a905a2fa0bb15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cef87f7a48f76c33f55fc54f199a905a2fa0bb15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cef87f7a48f76c33f55fc54f199a905a2fa0bb15/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb862d7864cc4889285e1a3713e3864d667cf30a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb862d7864cc4889285e1a3713e3864d667cf30a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb862d7864cc4889285e1a3713e3864d667cf30a"
      },
      {
        "sha": "b007efdf1910db1d38671d6435d2f379bbf847d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b007efdf1910db1d38671d6435d2f379bbf847d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b007efdf1910db1d38671d6435d2f379bbf847d2"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 82,
      "deletions": 33
    },
    "files": [
      {
        "sha": "7e9f88f6b780340af267a603dd2066335384a04d",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 13,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cef87f7a48f76c33f55fc54f199a905a2fa0bb15/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cef87f7a48f76c33f55fc54f199a905a2fa0bb15/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=cef87f7a48f76c33f55fc54f199a905a2fa0bb15",
        "patch": "@@ -55,29 +55,39 @@ static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n     set.emplace(MakeTransactionRef(tx), nInput);\n }\n \n-static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+static void add_coin(CWallet& wallet, const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0, bool spendable = false)\n {\n     balance += nValue;\n     static int nextLockTime = 0;\n     CMutableTransaction tx;\n     tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n+    if (spendable) {\n+        CTxDestination dest;\n+        std::string error;\n+        assert(wallet.GetNewDestination(OutputType::BECH32, \"\", dest, error));\n+        tx.vout[nInput].scriptPubKey = GetScriptForDestination(dest);\n+    }\n     if (fIsFromMe) {\n         // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n         // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n         tx.vin.resize(1);\n     }\n-    std::unique_ptr<CWalletTx> wtx = MakeUnique<CWalletTx>(&testWallet, MakeTransactionRef(std::move(tx)));\n+    std::unique_ptr<CWalletTx> wtx = MakeUnique<CWalletTx>(&wallet, MakeTransactionRef(std::move(tx)));\n     if (fIsFromMe)\n     {\n         wtx->m_amounts[CWalletTx::DEBIT].Set(ISMINE_SPENDABLE, 1);\n     }\n     COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n     vCoins.push_back(output);\n-    testWallet.AddToWallet(*wtx.get());\n+    wallet.AddToWallet(*wtx.get());\n     wtxn.emplace_back(std::move(wtx));\n }\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0, bool spendable = false)\n+{\n+    add_coin(testWallet, nValue, nAge, fIsFromMe, nInput, spendable);\n+}\n \n static void empty_wallet(void)\n {\n@@ -252,17 +262,33 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     vCoins.at(0).nInputBytes = 40; // Make sure that it has a negative effective value. The next check should assert if this somehow got through. Otherwise it will fail\n     BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params_bnb, bnb_used));\n \n-    // Make sure that we aren't using BnB when there are preset inputs\n+    // Test fees subtracted from output:\n+    empty_wallet();\n+    add_coin(1 * CENT);\n+    vCoins.at(0).nInputBytes = 40;\n+    BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params_bnb, bnb_used));\n+    coin_selection_params_bnb.m_subtract_fee_outputs = true;\n+    BOOST_CHECK(testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params_bnb, bnb_used));\n+    BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n+\n+    // Make sure that can use BnB when there are preset inputs\n     empty_wallet();\n-    add_coin(5 * CENT);\n-    add_coin(3 * CENT);\n-    add_coin(2 * CENT);\n-    CCoinControl coin_control;\n-    coin_control.fAllowOtherInputs = true;\n-    coin_control.Select(COutPoint(vCoins.at(0).tx->GetHash(), vCoins.at(0).i));\n-    BOOST_CHECK(testWallet.SelectCoins(vCoins, 10 * CENT, setCoinsRet, nValueRet, coin_control, coin_selection_params_bnb, bnb_used));\n-    BOOST_CHECK(!bnb_used);\n-    BOOST_CHECK(!coin_selection_params_bnb.use_bnb);\n+    {\n+        std::unique_ptr<CWallet> wallet = MakeUnique<CWallet>(m_chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n+        bool firstRun;\n+        wallet->LoadWallet(firstRun);\n+        LOCK(wallet->cs_wallet);\n+        add_coin(*wallet, 5 * CENT, 6 * 24, false, 0, true);\n+        add_coin(*wallet, 3 * CENT, 6 * 24, false, 0, true);\n+        add_coin(*wallet, 2 * CENT, 6 * 24, false, 0, true);\n+        CCoinControl coin_control;\n+        coin_control.fAllowOtherInputs = true;\n+        coin_control.Select(COutPoint(vCoins.at(0).tx->GetHash(), vCoins.at(0).i));\n+        coin_selection_params_bnb.effective_fee = CFeeRate(0);\n+        BOOST_CHECK(wallet->SelectCoins(vCoins, 10 * CENT, setCoinsRet, nValueRet, coin_control, coin_selection_params_bnb, bnb_used));\n+        BOOST_CHECK(bnb_used);\n+        BOOST_CHECK(coin_selection_params_bnb.use_bnb);\n+    }\n }\n \n BOOST_AUTO_TEST_CASE(knapsack_solver_test)"
      },
      {
        "sha": "74cff4d99162e10d519cf704799af73e934908e8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 20,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cef87f7a48f76c33f55fc54f199a905a2fa0bb15/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cef87f7a48f76c33f55fc54f199a905a2fa0bb15/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cef87f7a48f76c33f55fc54f199a905a2fa0bb15",
        "patch": "@@ -2234,7 +2234,11 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n                 if (effective_value > 0) {\n                     group.fee += coin.m_input_bytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(coin.m_input_bytes);\n                     group.long_term_fee += coin.m_input_bytes < 0 ? 0 : long_term_feerate.GetFee(coin.m_input_bytes);\n-                    group.effective_value += effective_value;\n+                    if (coin_selection_params.m_subtract_fee_outputs) {\n+                        group.effective_value += coin.txout.nValue;\n+                    } else {\n+                        group.effective_value += effective_value;\n+                    }\n                     ++it;\n                 } else {\n                     it = group.Discard(coin);\n@@ -2260,6 +2264,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params, bool& bnb_used) const\n {\n     std::vector<COutput> vCoins(vAvailableCoins);\n+    CAmount value_to_select = nTargetValue;\n \n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coin_control.HasSelected() && !coin_control.fAllowOtherInputs)\n@@ -2285,22 +2290,33 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     coin_control.ListSelected(vPresetInputs);\n     for (const COutPoint& outpoint : vPresetInputs)\n     {\n-        // For now, don't use BnB if preset inputs are selected. TODO: Enable this later\n-        bnb_used = false;\n-        coin_selection_params.use_bnb = false;\n-\n         std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);\n         if (it != mapWallet.end())\n         {\n             const CWalletTx& wtx = it->second;\n             // Clearly invalid input, fail\n-            if (wtx.tx->vout.size() <= outpoint.n)\n+            if (wtx.tx->vout.size() <= outpoint.n) {\n+                bnb_used = false;\n                 return false;\n+            }\n             // Just to calculate the marginal byte size\n-            nValueFromPresetInputs += wtx.tx->vout[outpoint.n].nValue;\n-            setPresetCoins.insert(CInputCoin(wtx.tx, outpoint.n));\n-        } else\n+            CInputCoin coin(wtx.tx, outpoint.n, wtx.GetSpendSize(outpoint.n, false));\n+            nValueFromPresetInputs += coin.txout.nValue;\n+            if (coin.m_input_bytes <= 0) {\n+                bnb_used = false;\n+                return false; // Not solvable, can't estimate size for fee\n+            }\n+            coin.effective_value = coin.txout.nValue - coin_selection_params.effective_fee.GetFee(coin.m_input_bytes);\n+            if (coin_selection_params.use_bnb) {\n+                value_to_select -= coin.effective_value;\n+            } else {\n+                value_to_select -= coin.txout.nValue;\n+            }\n+            setPresetCoins.insert(coin);\n+        } else {\n+            bnb_used = false;\n             return false; // TODO: Allow non-wallet inputs\n+        }\n     }\n \n     // remove preset inputs from vCoins\n@@ -2329,14 +2345,14 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     size_t max_descendants = (size_t)std::max<int64_t>(1, limit_descendant_count);\n     bool fRejectLongChains = gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS);\n \n-    bool res = nTargetValue <= nValueFromPresetInputs ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 6, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 1, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, 2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+    bool res = value_to_select <= 0 ||\n+        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 6, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n+        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 1, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n \n     // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible inputs to the coinset\n     util::insert(setCoinsRet, setPresetCoins);\n@@ -2602,7 +2618,8 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n             // BnB selector is the only selector used when this is true.\n             // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = nSubtractFeeFromAmount == 0; // If we are doing subtract fee from recipient, then don't use BnB\n+            coin_selection_params.use_bnb = true;\n+            coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n             // Start with no fee and loop until there is enough fee\n             while (true)\n             {\n@@ -2616,7 +2633,9 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     nValueToSelect += nFeeRet;\n \n                 // vouts to the payees\n-                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                if (!coin_selection_params.m_subtract_fee_outputs) {\n+                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                }\n                 for (const auto& recipient : vecSend)\n                 {\n                     CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n@@ -2633,7 +2652,9 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                         }\n                     }\n                     // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n+                    if (!coin_selection_params.m_subtract_fee_outputs) {\n+                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n+                    }\n \n                     if (IsDust(txout, chain().relayDustFee()))\n                     {"
      },
      {
        "sha": "e4b8163f0219db207e18320b678877a69c6455af",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cef87f7a48f76c33f55fc54f199a905a2fa0bb15/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cef87f7a48f76c33f55fc54f199a905a2fa0bb15/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cef87f7a48f76c33f55fc54f199a905a2fa0bb15",
        "patch": "@@ -584,6 +584,8 @@ struct CoinSelectionParams\n     size_t change_spend_size = 0;\n     CFeeRate effective_fee = CFeeRate(0);\n     size_t tx_noinputs_size = 0;\n+    //! Indicate that we are subtracting the fee from outputs\n+    bool m_subtract_fee_outputs = false;\n \n     CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size) : use_bnb(use_bnb), change_output_size(change_output_size), change_spend_size(change_spend_size), effective_fee(effective_fee), tx_noinputs_size(tx_noinputs_size) {}\n     CoinSelectionParams() {}"
      }
    ]
  },
  {
    "sha": "8aac85d71e218783bc7ce06e5bf8bc660e24079d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWFjODVkNzFlMjE4NzgzYmM3Y2UwNmU1YmY4YmM2NjBlMjQwNzlk",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-22T19:33:38Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-22T19:35:10Z"
      },
      "message": "Merge #17371: Refactor: Require scriptPubKey to get wallet SigningProvider\n\nd0dab897afaac0a18aa47d3ce673a4a43a69178a Refactor: Require scriptPubKey to get wallet SigningProvider (Andrew Chow)\n4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da Accumulate result UniValue in SignTransaction (Andrew Chow)\n\nPull request description:\n\n  Easier to review ignoring whitespace:\n\n      git log -p -n1 -w\n\n  This commit does not change behavior. It passes new CScript arguments to\n  signing functions, but the arguments aren't currently used.\n\n  Split from #17261\n\nACKs for top commit:\n  instagibbs:\n    utACK https://github.com/bitcoin/bitcoin/pull/17371/commits/d0dab897afaac0a18aa47d3ce673a4a43a69178a\n  ryanofsky:\n    Code review ACK d0dab897afaac0a18aa47d3ce673a4a43a69178a. Thanks for the SignTransaction update. No other changes since last review\n  Sjors:\n    Code review ACK d0dab897afaac0a18aa47d3ce673a4a43a69178a\n  promag:\n    Code review ACK d0dab897afaac0a18aa47d3ce673a4a43a69178a.\n  meshcollider:\n    Code review ACK d0dab897afaac0a18aa47d3ce673a4a43a69178a\n\nTree-SHA512: c3f52df20fd9d6b3b5aa65562cf5f7dce7b7f44c148b0f988f8b578fce2a28e9b7bf010f5f04bb5bf60f5272b2899f1dbbfb8aee81579c21c9cba559d1d2bb70",
      "tree": {
        "sha": "92a38a0e567e4021bf52d495804de8b711d87d31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92a38a0e567e4021bf52d495804de8b711d87d31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8aac85d71e218783bc7ce06e5bf8bc660e24079d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAl3YOG4ACgkQ0wARbhyH\nWj21kA/7BsAK3Jvk+E7cDL11hm9HwRfnKRPuoXu3v3h5/7OD3moUkDwtRyhd6jRx\neiHDiRifc0Ofut7bl0ibEkNC/6C651DifCQdEItU2/XQr6leUj0+gh+S5LEUjqzv\nxbSWoNgcWljy4JRpvi6l+zzzd3FpoIhL3sH1zrMrkFHJHWmjuz3kWOSYV9tVHTiP\na0ThKpterU2WLN2m3VsPRyPiAkPb5EcjbzytRLtwOx//iIAvBDNwbSi9lmyIlqwd\n91RMpqkTjVE/s3qG5bum/3uLmp55CeRbLE30Rwv5oQL38sftEBYda2p5G9WR5FZX\n88h03IU0H/pXSwkWgRIJJJdkwJjsiangtiUsAb4tTYRU75ePs04pkMex1qUsMTH4\n/fwcLiY4wyU6qD2mkKuVxeAaj11JDv1gbjnkgIZjdga4eQ2wUixfgF6ll7A5O5Wz\ndA5MiU9wLpnJ37YRGX7Kr+vn8OLrFvwaEe7UxbTXRYOtH6uCxBbz3NeLKuW2R/OI\nwKZY/E2bNELNUmWQ3BKLKJCjJ66br5D6MmsddP7xpG94IIGiO/HUstPYOSkms7+I\nQ3vpZ1huncCAQHQO17wiMhnYTF+/XrMOUjO5dF/ABBBqkZ4uk5tQ2MqRD0t/S8NL\n7PtEZT2SyEijgfhe9eHTYYBDgxvX1O00tqipuz81Eur2KVkrRuU=\n=20oZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 92a38a0e567e4021bf52d495804de8b711d87d31\nparent cef87f7a48f76c33f55fc54f199a905a2fa0bb15\nparent d0dab897afaac0a18aa47d3ce673a4a43a69178a\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1574451218 +1300\ncommitter Samuel Dobson <dobsonsa68@gmail.com> 1574451310 +1300\n\nMerge #17371: Refactor: Require scriptPubKey to get wallet SigningProvider\n\nd0dab897afaac0a18aa47d3ce673a4a43a69178a Refactor: Require scriptPubKey to get wallet SigningProvider (Andrew Chow)\n4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da Accumulate result UniValue in SignTransaction (Andrew Chow)\n\nPull request description:\n\n  Easier to review ignoring whitespace:\n\n      git log -p -n1 -w\n\n  This commit does not change behavior. It passes new CScript arguments to\n  signing functions, but the arguments aren't currently used.\n\n  Split from #17261\n\nACKs for top commit:\n  instagibbs:\n    utACK https://github.com/bitcoin/bitcoin/pull/17371/commits/d0dab897afaac0a18aa47d3ce673a4a43a69178a\n  ryanofsky:\n    Code review ACK d0dab897afaac0a18aa47d3ce673a4a43a69178a. Thanks for the SignTransaction update. No other changes since last review\n  Sjors:\n    Code review ACK d0dab897afaac0a18aa47d3ce673a4a43a69178a\n  promag:\n    Code review ACK d0dab897afaac0a18aa47d3ce673a4a43a69178a.\n  meshcollider:\n    Code review ACK d0dab897afaac0a18aa47d3ce673a4a43a69178a\n\nTree-SHA512: c3f52df20fd9d6b3b5aa65562cf5f7dce7b7f44c148b0f988f8b578fce2a28e9b7bf010f5f04bb5bf60f5272b2899f1dbbfb8aee81579c21c9cba559d1d2bb70\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aac85d71e218783bc7ce06e5bf8bc660e24079d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8aac85d71e218783bc7ce06e5bf8bc660e24079d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aac85d71e218783bc7ce06e5bf8bc660e24079d/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cef87f7a48f76c33f55fc54f199a905a2fa0bb15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cef87f7a48f76c33f55fc54f199a905a2fa0bb15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cef87f7a48f76c33f55fc54f199a905a2fa0bb15"
      },
      {
        "sha": "d0dab897afaac0a18aa47d3ce673a4a43a69178a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0dab897afaac0a18aa47d3ce673a4a43a69178a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0dab897afaac0a18aa47d3ce673a4a43a69178a"
      }
    ],
    "stats": {
      "total": 194,
      "additions": 137,
      "deletions": 57
    },
    "files": [
      {
        "sha": "079df17431c895aec97382503308a48a1cfbb4f9",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=8aac85d71e218783bc7ce06e5bf8bc660e24079d",
        "patch": "@@ -116,8 +116,22 @@ class WalletImpl : public Wallet\n         std::string error;\n         return m_wallet->GetNewDestination(type, label, dest, error);\n     }\n-    bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet->GetLegacyScriptPubKeyMan()->GetPubKey(address, pub_key); }\n-    bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet->GetLegacyScriptPubKeyMan()->GetKey(address, key); }\n+    bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) override\n+    {\n+        const SigningProvider* provider = m_wallet->GetSigningProvider(script);\n+        if (provider) {\n+            return provider->GetPubKey(address, pub_key);\n+        }\n+        return false;\n+    }\n+    bool getPrivKey(const CScript& script, const CKeyID& address, CKey& key) override\n+    {\n+        const SigningProvider* provider = m_wallet->GetSigningProvider(script);\n+        if (provider) {\n+            return provider->GetKey(address, key);\n+        }\n+        return false;\n+    }\n     bool isSpendable(const CTxDestination& dest) override { return m_wallet->IsMine(dest) & ISMINE_SPENDABLE; }\n     bool haveWatchOnly() override\n     {"
      },
      {
        "sha": "b7cf9f2111b7acbf03165ddee27b759cda91693e",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=8aac85d71e218783bc7ce06e5bf8bc660e24079d",
        "patch": "@@ -81,10 +81,10 @@ class Wallet\n     virtual bool getNewDestination(const OutputType type, const std::string label, CTxDestination& dest) = 0;\n \n     //! Get public key.\n-    virtual bool getPubKey(const CKeyID& address, CPubKey& pub_key) = 0;\n+    virtual bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) = 0;\n \n     //! Get private key.\n-    virtual bool getPrivKey(const CKeyID& address, CKey& key) = 0;\n+    virtual bool getPrivKey(const CScript& script, const CKeyID& address, CKey& key) = 0;\n \n     //! Return whether wallet has private key.\n     virtual bool isSpendable(const CTxDestination& dest) = 0;"
      },
      {
        "sha": "3302dde4ed1431c5997ae60e16dc2b9aa0fa1fa5",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=8aac85d71e218783bc7ce06e5bf8bc660e24079d",
        "patch": "@@ -468,7 +468,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             CPubKey pubkey;\n             PKHash *pkhash = boost::get<PKHash>(&address);\n-            if (pkhash && model->wallet().getPubKey(CKeyID(*pkhash), pubkey))\n+            if (pkhash && model->wallet().getPubKey(out.txout.scriptPubKey, CKeyID(*pkhash), pubkey))\n             {\n                 nBytesInputs += (pubkey.IsCompressed() ? 148 : 180);\n             }"
      },
      {
        "sha": "9d250bcb8334d3e4cf476a469eabe55f159369cf",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=8aac85d71e218783bc7ce06e5bf8bc660e24079d",
        "patch": "@@ -136,7 +136,7 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n     }\n \n     CKey key;\n-    if (!model->wallet().getPrivKey(CKeyID(*pkhash), key))\n+    if (!model->wallet().getPrivKey(GetScriptForDestination(destination), CKeyID(*pkhash), key))\n     {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));"
      },
      {
        "sha": "6f24caee21adf0ab7b58ee5dc564c65cb4a28d8c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=8aac85d71e218783bc7ce06e5bf8bc660e24079d",
        "patch": "@@ -763,7 +763,9 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n     // Parse the prevtxs array\n     ParsePrevouts(request.params[2], &keystore, coins);\n \n-    return SignTransaction(mtx, &keystore, coins, request.params[3]);\n+    UniValue result(UniValue::VOBJ);\n+    SignTransaction(mtx, &keystore, coins, request.params[3], result);\n+    return result;\n }\n \n static UniValue sendrawtransaction(const JSONRPCRequest& request)"
      },
      {
        "sha": "40334883c5970c01ccd9cfc6b7973c3399305220",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=8aac85d71e218783bc7ce06e5bf8bc660e24079d",
        "patch": "@@ -268,7 +268,7 @@ void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keyst\n     }\n }\n \n-UniValue SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType)\n+void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType, UniValue& result)\n {\n     int nHashType = ParseSighashString(hashType);\n \n@@ -319,12 +319,12 @@ UniValue SignTransaction(CMutableTransaction& mtx, const SigningProvider* keysto\n     }\n     bool fComplete = vErrors.empty();\n \n-    UniValue result(UniValue::VOBJ);\n     result.pushKV(\"hex\", EncodeHexTx(CTransaction(mtx)));\n     result.pushKV(\"complete\", fComplete);\n     if (!vErrors.empty()) {\n+        if (result.exists(\"errors\")) {\n+            vErrors.push_backV(result[\"errors\"].getValues());\n+        }\n         result.pushKV(\"errors\", vErrors);\n     }\n-\n-    return result;\n }"
      },
      {
        "sha": "0b7712b83ccce6912b6843e1b2de49ff428d2abd",
        "filename": "src/rpc/rawtransaction_util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/rpc/rawtransaction_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/rpc/rawtransaction_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.h?ref=8aac85d71e218783bc7ce06e5bf8bc660e24079d",
        "patch": "@@ -21,9 +21,9 @@ class SigningProvider;\n  * @param  keystore      Temporary keystore containing signing keys\n  * @param  coins         Map of unspent outputs\n  * @param  hashType      The signature hash type\n- * @returns JSON object with details of signed transaction\n+ * @param result         JSON object where signed transaction results accumulate\n  */\n-UniValue SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType);\n+void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType, UniValue& result);\n \n /**\n   * Parse a prevtxs UniValue array and get the map of coins from it"
      },
      {
        "sha": "96c1ad8d3f818891de090ae51bc23be21932d32d",
        "filename": "src/wallet/psbtwallet.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 2,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/wallet/psbtwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/wallet/psbtwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.cpp?ref=8aac85d71e218783bc7ce06e5bf8bc660e24079d",
        "patch": "@@ -39,12 +39,35 @@ TransactionError FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& ps\n             return TransactionError::SIGHASH_MISMATCH;\n         }\n \n-        complete &= SignPSBTInput(HidingSigningProvider(pwallet->GetSigningProvider(), !sign, !bip32derivs), psbtx, i, sighash_type);\n+        // Get the scriptPubKey to know which SigningProvider to use\n+        CScript script;\n+        if (!input.witness_utxo.IsNull()) {\n+            script = input.witness_utxo.scriptPubKey;\n+        } else if (input.non_witness_utxo) {\n+            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n+        } else {\n+            // There's no UTXO so we can just skip this now\n+            complete = false;\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+        const SigningProvider* provider = pwallet->GetSigningProvider(script, sigdata);\n+        if (!provider) {\n+            complete = false;\n+            continue;\n+        }\n+\n+        complete &= SignPSBTInput(HidingSigningProvider(provider, !sign, !bip32derivs), psbtx, i, sighash_type);\n     }\n \n     // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n     for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n-        UpdatePSBTOutput(HidingSigningProvider(pwallet->GetSigningProvider(), true, !bip32derivs), psbtx, i);\n+        const CTxOut& out = psbtx.tx->vout.at(i);\n+        const SigningProvider* provider = pwallet->GetSigningProvider(out.scriptPubKey);\n+        if (provider) {\n+            UpdatePSBTOutput(HidingSigningProvider(provider, true, !bip32derivs), psbtx, i);\n+        }\n     }\n \n     return TransactionError::OK;"
      },
      {
        "sha": "3563b05c7164c20220d587454fa2acea9b8c44f2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 34,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8aac85d71e218783bc7ce06e5bf8bc660e24079d",
        "patch": "@@ -560,7 +560,11 @@ static UniValue signmessage(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n     }\n \n-    const SigningProvider* provider = pwallet->GetSigningProvider();\n+    CScript script_pub_key = GetScriptForDestination(*pkhash);\n+    const SigningProvider* provider = pwallet->GetSigningProvider(script_pub_key);\n+    if (!provider) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n+    }\n \n     CKey key;\n     CKeyID keyID(*pkhash);\n@@ -2940,34 +2944,36 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 entry.pushKV(\"label\", i->second.name);\n             }\n \n-            const SigningProvider* provider = pwallet->GetSigningProvider();\n-            if (scriptPubKey.IsPayToScriptHash()) {\n-                const CScriptID& hash = CScriptID(boost::get<ScriptHash>(address));\n-                CScript redeemScript;\n-                if (provider->GetCScript(hash, redeemScript)) {\n-                    entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n-                    // Now check if the redeemScript is actually a P2WSH script\n-                    CTxDestination witness_destination;\n-                    if (redeemScript.IsPayToWitnessScriptHash()) {\n-                        bool extracted = ExtractDestination(redeemScript, witness_destination);\n-                        CHECK_NONFATAL(extracted);\n-                        // Also return the witness script\n-                        const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(witness_destination);\n-                        CScriptID id;\n-                        CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n-                        CScript witnessScript;\n-                        if (provider->GetCScript(id, witnessScript)) {\n-                            entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+            const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n+            if (provider) {\n+                if (scriptPubKey.IsPayToScriptHash()) {\n+                    const CScriptID& hash = CScriptID(boost::get<ScriptHash>(address));\n+                    CScript redeemScript;\n+                    if (provider->GetCScript(hash, redeemScript)) {\n+                        entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n+                        // Now check if the redeemScript is actually a P2WSH script\n+                        CTxDestination witness_destination;\n+                        if (redeemScript.IsPayToWitnessScriptHash()) {\n+                            bool extracted = ExtractDestination(redeemScript, witness_destination);\n+                            CHECK_NONFATAL(extracted);\n+                            // Also return the witness script\n+                            const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(witness_destination);\n+                            CScriptID id;\n+                            CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                            CScript witnessScript;\n+                            if (provider->GetCScript(id, witnessScript)) {\n+                                entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+                            }\n                         }\n                     }\n-                }\n-            } else if (scriptPubKey.IsPayToWitnessScriptHash()) {\n-                const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(address);\n-                CScriptID id;\n-                CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n-                CScript witnessScript;\n-                if (provider->GetCScript(id, witnessScript)) {\n-                    entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+                } else if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+                    const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(address);\n+                    CScriptID id;\n+                    CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                    CScript witnessScript;\n+                    if (provider->GetCScript(id, witnessScript)) {\n+                        entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+                    }\n                 }\n             }\n         }\n@@ -2978,8 +2984,11 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         entry.pushKV(\"spendable\", out.fSpendable);\n         entry.pushKV(\"solvable\", out.fSolvable);\n         if (out.fSolvable) {\n-            auto descriptor = InferDescriptor(scriptPubKey, *pwallet->GetLegacyScriptPubKeyMan());\n-            entry.pushKV(\"desc\", descriptor->ToString());\n+            const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n+            if (provider) {\n+                auto descriptor = InferDescriptor(scriptPubKey, *provider);\n+                entry.pushKV(\"desc\", descriptor->ToString());\n+            }\n         }\n         if (avoid_reuse) entry.pushKV(\"reused\", reused);\n         entry.pushKV(\"safe\", out.fSafe);\n@@ -3288,7 +3297,23 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     // Parse the prevtxs array\n     ParsePrevouts(request.params[1], nullptr, coins);\n \n-    return SignTransaction(mtx, &*pwallet->GetLegacyScriptPubKeyMan(), coins, request.params[2]);\n+    std::set<const SigningProvider*> providers;\n+    for (const std::pair<COutPoint, Coin> coin_pair : coins) {\n+        const SigningProvider* provider = pwallet->GetSigningProvider(coin_pair.second.out.scriptPubKey);\n+        if (provider) {\n+            providers.insert(std::move(provider));\n+        }\n+    }\n+    if (providers.size() == 0) {\n+        // When there are no available providers, use DUMMY_SIGNING_PROVIDER so we can check if the tx is complete\n+        providers.insert(&DUMMY_SIGNING_PROVIDER);\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+    for (const SigningProvider* provider : providers) {\n+        SignTransaction(mtx, provider, coins, request.params[2], result);\n+    }\n+     return result;\n }\n \n static UniValue bumpfee(const JSONRPCRequest& request)\n@@ -3653,9 +3678,10 @@ static UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& de\n {\n     UniValue ret(UniValue::VOBJ);\n     UniValue detail = DescribeAddress(dest);\n+    CScript script = GetScriptForDestination(dest);\n     const SigningProvider* provider = nullptr;\n     if (pwallet) {\n-        provider = pwallet->GetSigningProvider();\n+        provider = pwallet->GetSigningProvider(script);\n     }\n     ret.pushKVs(detail);\n     ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(provider), dest));\n@@ -3747,11 +3773,11 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n     CScript scriptPubKey = GetScriptForDestination(dest);\n     ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n-    const SigningProvider* provider = pwallet->GetSigningProvider();\n+    const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n \n     isminetype mine = pwallet->IsMine(dest);\n     ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n-    bool solvable = IsSolvable(*provider, scriptPubKey);\n+    bool solvable = provider && IsSolvable(*provider, scriptPubKey);\n     ret.pushKV(\"solvable\", solvable);\n     if (solvable) {\n        ret.pushKV(\"desc\", InferDescriptor(scriptPubKey, *provider)->ToString());\n@@ -3764,7 +3790,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     }\n     ret.pushKV(\"ischange\", pwallet->IsChange(scriptPubKey));\n \n-    ScriptPubKeyMan* spk_man = pwallet->GetScriptPubKeyMan();\n+    ScriptPubKeyMan* spk_man = pwallet->GetScriptPubKeyMan(scriptPubKey);\n     if (spk_man) {\n         if (const CKeyMetadata* meta = spk_man->GetMetadata(dest)) {\n             ret.pushKV(\"timestamp\", meta->nCreateTime);"
      },
      {
        "sha": "3e368985e044b41e0bbd3b93714854ecd72df9a4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 6,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8aac85d71e218783bc7ce06e5bf8bc660e24079d",
        "patch": "@@ -1363,7 +1363,11 @@ bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout, bool use_max_sig\n     const CScript& scriptPubKey = txout.scriptPubKey;\n     SignatureData sigdata;\n \n-    const SigningProvider* provider = GetSigningProvider();\n+    const SigningProvider* provider = GetSigningProvider(scriptPubKey);\n+    if (!provider) {\n+        // We don't know about this scriptpbuKey;\n+        return false;\n+    }\n \n     if (!ProduceSignature(*provider, use_max_sig ? DUMMY_MAXIMUM_SIGNATURE_CREATOR : DUMMY_SIGNATURE_CREATOR, scriptPubKey, sigdata)) {\n         return false;\n@@ -2125,7 +2129,7 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n                 continue;\n             }\n \n-            const SigningProvider* provider = GetSigningProvider();\n+            const SigningProvider* provider = GetSigningProvider(wtx.tx->vout[i].scriptPubKey);\n \n             bool solvable = provider ? IsSolvable(*provider, wtx.tx->vout[i].scriptPubKey) : false;\n             bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n@@ -2378,8 +2382,9 @@ bool CWallet::SignTransaction(CMutableTransaction& tx)\n         const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n         SignatureData sigdata;\n \n-        const SigningProvider* provider = GetSigningProvider();\n+        const SigningProvider* provider = GetSigningProvider(scriptPubKey);\n         if (!provider) {\n+            // We don't know about this scriptpbuKey;\n             return false;\n         }\n \n@@ -2846,7 +2851,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 const CScript& scriptPubKey = coin.txout.scriptPubKey;\n                 SignatureData sigdata;\n \n-                const SigningProvider* provider = GetSigningProvider();\n+                const SigningProvider* provider = GetSigningProvider(scriptPubKey);\n                 if (!provider || !ProduceSignature(*provider, MutableTransactionSignatureCreator(&txNew, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n                 {\n                     strFailReason = _(\"Signing transaction failed\").translated;\n@@ -4043,12 +4048,17 @@ bool CWallet::Lock()\n     return true;\n }\n \n-ScriptPubKeyMan* CWallet::GetScriptPubKeyMan() const\n+ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const CScript& script) const\n+{\n+    return m_spk_man.get();\n+}\n+\n+const SigningProvider* CWallet::GetSigningProvider(const CScript& script) const\n {\n     return m_spk_man.get();\n }\n \n-const SigningProvider* CWallet::GetSigningProvider() const\n+const SigningProvider* CWallet::GetSigningProvider(const CScript& script, SignatureData& sigdata) const\n {\n     return m_spk_man.get();\n }"
      },
      {
        "sha": "3349091835189d11c25e537f50a4e9d207767dcb",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aac85d71e218783bc7ce06e5bf8bc660e24079d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8aac85d71e218783bc7ce06e5bf8bc660e24079d",
        "patch": "@@ -1130,8 +1130,13 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n         LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n     };\n \n-    ScriptPubKeyMan* GetScriptPubKeyMan() const;\n-    const SigningProvider* GetSigningProvider() const;\n+    //! Get the ScriptPubKeyMan for a script\n+    ScriptPubKeyMan* GetScriptPubKeyMan(const CScript& script) const;\n+\n+    //! Get the SigningProvider for a script\n+    const SigningProvider* GetSigningProvider(const CScript& script) const;\n+    const SigningProvider* GetSigningProvider(const CScript& script, SignatureData& sigdata) const;\n+\n     LegacyScriptPubKeyMan* GetLegacyScriptPubKeyMan() const;\n \n     // Temporary LegacyScriptPubKeyMan accessors and aliases."
      }
    ]
  },
  {
    "sha": "0aa72061e5d651373449bdfa8d9463dcfe7b1ad4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYWE3MjA2MWU1ZDY1MTM3MzQ0OWJkZmE4ZDk0NjNkY2ZlN2IxYWQ0",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-22T19:43:54Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-22T20:22:02Z"
      },
      "message": "Merge #16944: gui: create PSBT with watch-only wallet\n\nc6dd565c8820aa8a98b190621e10c6e2821a9ecc [gui] watch-only wallet: copy PSBT to clipboard (Sjors Provoost)\n39465d545d521e66bb3accfa788aa94bffaf47eb [wallet] add fillPSBT to interface (Sjors Provoost)\n848f88920853724511387ca0b7ef652fa14ced71 [gui] send: include watch-only (Sjors Provoost)\n40537f090907f81ba885edb7dff1558382976912 [wallet] ListCoins: include watch-only for wallets without private keys (Sjors Provoost)\n\nPull request description:\n\n  For wallets with `WALLET_FLAG_DISABLE_PRIVATE_KEYS` this makes the watch-only balance available on the send screen (including coin selection). Instead of sending a transaction it generates a PSBT.\n\n  The user can take this PSBT and process it with [HWI](https://github.com/bitcoin-core/HWI) or put it an SD card for hardware wallets that support that.\n\n  The PSBT is copied to the clipboard. This was the easiest approach; we can add a dialog later to display it, as well as an option to save to disk.\n\nACKs for top commit:\n  instagibbs:\n    test and code review ACK https://github.com/bitcoin/bitcoin/pull/16944/commits/c6dd565c8820aa8a98b190621e10c6e2821a9ecc\n  meshcollider:\n    re-ACK c6dd565c8820aa8a98b190621e10c6e2821a9ecc\n\nTree-SHA512: ebc3da0737e33b255ed926191b84569aedb6097d14868662bd5dce726ce3048e86e9a31eba987b10dffe1482b35c21ae1cd595c2caa4634bc4cf78a826a83852",
      "tree": {
        "sha": "3f952f22302eb76eaafafc4acfef0341ca61d807",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f952f22302eb76eaafafc4acfef0341ca61d807"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAl3YQ2oACgkQ0wARbhyH\nWj2tvw//cMson0ATx16zxD8o8GKQMkaGy+yaD3IhF0e05TBDz8EVUtFnE9f6waDw\nU2QpZwRxsCfhzrvc5lwjoXoyPB9zk+l/UPCFOcyFmyOclQ5zso7D0n3sIagoMufs\nidFAgUo9JSYFMD46EMZ1ZPuBu+euFGPz1R0u+7DRtLYAxQcyQuj4r065oUXj/4I7\nptlgC3EzAvNS3ngeXHZnmLLzVZLNVpBLkHd2M532FsmzDfx2g3RKsVQarfcU2FAi\nQDzHE3bmN07JAlxVRVrA2FOUuVWIV4SetSAGHhtC/iFAvALellwUtxBbgfDcjTP8\nyJkAHomVaFK3aHxc5e1f/zPDNcI5476wY8St6LK6kfVOGpwL4RQ9JRx2G/wRE5SC\nJ38z/DglqQfuMS6DXtJLpyDf2lJYPtueACZOY6n+aKq0xdQFqQdvwU62jT2Z6W1Z\n9vm4dDiIk4IIFej4LaVyJfNtLwWl0NtR4g5P/iAZBaRVQw6/NP686mE3l+X26g5r\nx/WM11TlBAIaZlRimRmB6xqXHgHReRlcl9sntfmeIVkXr6pb1l3LqAYPGn+j+Oxz\nXWqe3AkDXiqJgRc3/8o/Nr0klGvrl56CQPKem0AB3Kv9MlOrbch0G9c0fq/G0rn3\nnUbe7gRHdSrBuMMztpWilA6mm0zcVErWLR5H41H0glIN7c8qVTo=\n=EsNN\n-----END PGP SIGNATURE-----",
        "payload": "tree 3f952f22302eb76eaafafc4acfef0341ca61d807\nparent 8aac85d71e218783bc7ce06e5bf8bc660e24079d\nparent c6dd565c8820aa8a98b190621e10c6e2821a9ecc\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1574451834 +1300\ncommitter Samuel Dobson <dobsonsa68@gmail.com> 1574454122 +1300\n\nMerge #16944: gui: create PSBT with watch-only wallet\n\nc6dd565c8820aa8a98b190621e10c6e2821a9ecc [gui] watch-only wallet: copy PSBT to clipboard (Sjors Provoost)\n39465d545d521e66bb3accfa788aa94bffaf47eb [wallet] add fillPSBT to interface (Sjors Provoost)\n848f88920853724511387ca0b7ef652fa14ced71 [gui] send: include watch-only (Sjors Provoost)\n40537f090907f81ba885edb7dff1558382976912 [wallet] ListCoins: include watch-only for wallets without private keys (Sjors Provoost)\n\nPull request description:\n\n  For wallets with `WALLET_FLAG_DISABLE_PRIVATE_KEYS` this makes the watch-only balance available on the send screen (including coin selection). Instead of sending a transaction it generates a PSBT.\n\n  The user can take this PSBT and process it with [HWI](https://github.com/bitcoin-core/HWI) or put it an SD card for hardware wallets that support that.\n\n  The PSBT is copied to the clipboard. This was the easiest approach; we can add a dialog later to display it, as well as an option to save to disk.\n\nACKs for top commit:\n  instagibbs:\n    test and code review ACK https://github.com/bitcoin/bitcoin/pull/16944/commits/c6dd565c8820aa8a98b190621e10c6e2821a9ecc\n  meshcollider:\n    re-ACK c6dd565c8820aa8a98b190621e10c6e2821a9ecc\n\nTree-SHA512: ebc3da0737e33b255ed926191b84569aedb6097d14868662bd5dce726ce3048e86e9a31eba987b10dffe1482b35c21ae1cd595c2caa4634bc4cf78a826a83852\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8aac85d71e218783bc7ce06e5bf8bc660e24079d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aac85d71e218783bc7ce06e5bf8bc660e24079d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8aac85d71e218783bc7ce06e5bf8bc660e24079d"
      },
      {
        "sha": "c6dd565c8820aa8a98b190621e10c6e2821a9ecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6dd565c8820aa8a98b190621e10c6e2821a9ecc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6dd565c8820aa8a98b190621e10c6e2821a9ecc"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 85,
      "deletions": 23
    },
    "files": [
      {
        "sha": "94c6e8c7b768940e2424702ed9f8fabfb30655fe",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=0aa72061e5d651373449bdfa8d9463dcfe7b1ad4",
        "patch": "@@ -18,8 +18,9 @@\n #include <wallet/feebumper.h>\n #include <wallet/fees.h>\n #include <wallet/ismine.h>\n-#include <wallet/rpcwallet.h>\n #include <wallet/load.h>\n+#include <wallet/psbtwallet.h>\n+#include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n \n #include <memory>\n@@ -357,6 +358,14 @@ class WalletImpl : public Wallet\n         }\n         return {};\n     }\n+    TransactionError fillPSBT(PartiallySignedTransaction& psbtx,\n+        bool& complete,\n+        int sighash_type = 1 /* SIGHASH_ALL */,\n+        bool sign = true,\n+        bool bip32derivs = false) override\n+    {\n+        return FillPSBT(m_wallet.get(), psbtx, complete, sighash_type, sign, bip32derivs);\n+    }\n     WalletBalances getBalances() override\n     {\n         const auto bal = m_wallet->GetBalance();"
      },
      {
        "sha": "8d2b8a2eca9d8a1847753ec2633a8308cc5eb979",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=0aa72061e5d651373449bdfa8d9463dcfe7b1ad4",
        "patch": "@@ -14,6 +14,7 @@\n #include <functional>\n #include <map>\n #include <memory>\n+#include <psbt.h>\n #include <stdint.h>\n #include <string>\n #include <tuple>\n@@ -194,6 +195,13 @@ class Wallet\n         bool& in_mempool,\n         int& num_blocks) = 0;\n \n+    //! Fill PSBT.\n+    virtual TransactionError fillPSBT(PartiallySignedTransaction& psbtx,\n+        bool& complete,\n+        int sighash_type = 1 /* SIGHASH_ALL */,\n+        bool sign = true,\n+        bool bip32derivs = false) = 0;\n+\n     //! Get balances.\n     virtual WalletBalances getBalances() = 0;\n "
      },
      {
        "sha": "c3d00fa38e7b202b0492ebbfe87133ff1538f1b9",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 18,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=0aa72061e5d651373449bdfa8d9463dcfe7b1ad4",
        "patch": "@@ -21,11 +21,12 @@\n #include <chainparams.h>\n #include <interfaces/node.h>\n #include <key_io.h>\n-#include <wallet/coincontrol.h>\n-#include <ui_interface.h>\n-#include <txmempool.h>\n #include <policy/fees.h>\n+#include <txmempool.h>\n+#include <ui_interface.h>\n+#include <wallet/coincontrol.h>\n #include <wallet/fees.h>\n+#include <wallet/psbtwallet.h>\n \n #include <QFontMetrics>\n #include <QScrollBar>\n@@ -186,6 +187,11 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         // set default rbf checkbox state\n         ui->optInRBF->setCheckState(Qt::Checked);\n \n+        if (model->privateKeysDisabled()) {\n+            ui->sendButton->setText(tr(\"Cr&eate Unsigned\"));\n+            ui->sendButton->setToolTip(tr(\"Creates a Partially Signed Bitcoin Transaction (PSBT) for use with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet.\").arg(PACKAGE_NAME));\n+        }\n+\n         // set the smartfee-sliders default value (wallets default conf.target or last stored value)\n         QSettings settings;\n         if (settings.value(\"nSmartFeeSliderPosition\").toInt() != 0) {\n@@ -305,9 +311,19 @@ void SendCoinsDialog::on_sendButton_clicked()\n         formatted.append(recipientElement);\n     }\n \n-    QString questionString = tr(\"Are you sure you want to send?\");\n+    QString questionString;\n+    if (model->privateKeysDisabled()) {\n+        questionString.append(tr(\"Do you want to draft this transaction?\"));\n+    } else {\n+        questionString.append(tr(\"Are you sure you want to send?\"));\n+    }\n+\n     questionString.append(\"<br /><span style='font-size:10pt;'>\");\n-    questionString.append(tr(\"Please, review your transaction.\"));\n+    if (model->privateKeysDisabled()) {\n+        questionString.append(tr(\"Please, review your transaction proposal. This will produce a Partially Signed Bitcoin Transaction (PSBT) which you can copy and then sign with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet.\").arg(PACKAGE_NAME));\n+    } else {\n+        questionString.append(tr(\"Please, review your transaction.\"));\n+    }\n     questionString.append(\"</span>%1\");\n \n     if(txFee > 0)\n@@ -358,8 +374,9 @@ void SendCoinsDialog::on_sendButton_clicked()\n     } else {\n         questionString = questionString.arg(\"<br /><br />\" + formatted.at(0));\n     }\n-\n-    SendConfirmationDialog confirmationDialog(tr(\"Confirm send coins\"), questionString, informative_text, detailed_text, SEND_CONFIRM_DELAY, this);\n+    const QString confirmation = model->privateKeysDisabled() ? tr(\"Confirm transaction proposal\") : tr(\"Confirm send coins\");\n+    const QString confirmButtonText = model->privateKeysDisabled() ? tr(\"Copy PSBT to clipboard\") : tr(\"Send\");\n+    SendConfirmationDialog confirmationDialog(confirmation, questionString, informative_text, detailed_text, SEND_CONFIRM_DELAY, confirmButtonText, this);\n     confirmationDialog.exec();\n     QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n \n@@ -369,17 +386,35 @@ void SendCoinsDialog::on_sendButton_clicked()\n         return;\n     }\n \n-    // now send the prepared transaction\n-    WalletModel::SendCoinsReturn sendStatus = model->sendCoins(currentTransaction);\n-    // process sendStatus and on error generate message shown to user\n-    processSendCoinsReturn(sendStatus);\n+    bool send_failure = false;\n+    if (model->privateKeysDisabled()) {\n+        CMutableTransaction mtx = CMutableTransaction{*(currentTransaction.getWtx())};\n+        PartiallySignedTransaction psbtx(mtx);\n+        bool complete = false;\n+        const TransactionError err = model->wallet().fillPSBT(psbtx, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+        assert(!complete);\n+        assert(err == TransactionError::OK);\n+        // Serialize the PSBT\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n+        Q_EMIT message(tr(\"PSBT copied\"), \"Copied to clipboard\", CClientUIInterface::MSG_INFORMATION);\n+    } else {\n+        // now send the prepared transaction\n+        WalletModel::SendCoinsReturn sendStatus = model->sendCoins(currentTransaction);\n+        // process sendStatus and on error generate message shown to user\n+        processSendCoinsReturn(sendStatus);\n \n-    if (sendStatus.status == WalletModel::OK)\n-    {\n+        if (sendStatus.status == WalletModel::OK) {\n+            Q_EMIT coinsSent(currentTransaction.getWtx()->GetHash());\n+        } else {\n+            send_failure = true;\n+        }\n+    }\n+    if (!send_failure) {\n         accept();\n         CoinControlDialog::coinControl()->UnSelectAll();\n         coinControlUpdateLabels();\n-        Q_EMIT coinsSent(currentTransaction.getWtx()->GetHash());\n     }\n     fNewRecipientAllowed = true;\n }\n@@ -611,6 +646,9 @@ void SendCoinsDialog::useAvailableBalance(SendCoinsEntry* entry)\n         coin_control = *CoinControlDialog::coinControl();\n     }\n \n+    // Include watch-only for wallets without private key\n+    coin_control.fAllowWatchOnly = model->privateKeysDisabled();\n+\n     // Calculate available amount to send.\n     CAmount amount = model->wallet().getAvailableBalance(coin_control);\n     for (int i = 0; i < ui->entries->count(); ++i) {\n@@ -663,6 +701,8 @@ void SendCoinsDialog::updateCoinControlState(CCoinControl& ctrl)\n     // Either custom fee will be used or if not selected, the confirmation target from dropdown box\n     ctrl.m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n     ctrl.m_signal_bip125_rbf = ui->optInRBF->isChecked();\n+    // Include watch-only for wallets without private key\n+    ctrl.fAllowWatchOnly = model->privateKeysDisabled();\n }\n \n void SendCoinsDialog::updateSmartFeeLabel()\n@@ -870,8 +910,8 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     }\n }\n \n-SendConfirmationDialog::SendConfirmationDialog(const QString& title, const QString& text, const QString& informative_text, const QString& detailed_text, int _secDelay, QWidget* parent)\n-    : QMessageBox(parent), secDelay(_secDelay)\n+SendConfirmationDialog::SendConfirmationDialog(const QString& title, const QString& text, const QString& informative_text, const QString& detailed_text, int _secDelay, const QString& _confirmButtonText, QWidget* parent)\n+    : QMessageBox(parent), secDelay(_secDelay), confirmButtonText(_confirmButtonText)\n {\n     setIcon(QMessageBox::Question);\n     setWindowTitle(title); // On macOS, the window title is ignored (as required by the macOS Guidelines).\n@@ -908,11 +948,11 @@ void SendConfirmationDialog::updateYesButton()\n     if(secDelay > 0)\n     {\n         yesButton->setEnabled(false);\n-        yesButton->setText(tr(\"Send\") + \" (\" + QString::number(secDelay) + \")\");\n+        yesButton->setText(confirmButtonText + \" (\" + QString::number(secDelay) + \")\");\n     }\n     else\n     {\n         yesButton->setEnabled(true);\n-        yesButton->setText(tr(\"Send\"));\n+        yesButton->setText(confirmButtonText);\n     }\n }"
      },
      {
        "sha": "ccd84946136909c4e702ecf692911afccbdf845f",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=0aa72061e5d651373449bdfa8d9463dcfe7b1ad4",
        "patch": "@@ -108,7 +108,7 @@ class SendConfirmationDialog : public QMessageBox\n     Q_OBJECT\n \n public:\n-    SendConfirmationDialog(const QString& title, const QString& text, const QString& informative_text = \"\", const QString& detailed_text = \"\", int secDelay = SEND_CONFIRM_DELAY, QWidget* parent = nullptr);\n+    SendConfirmationDialog(const QString& title, const QString& text, const QString& informative_text = \"\", const QString& detailed_text = \"\", int secDelay = SEND_CONFIRM_DELAY, const QString& confirmText = \"Send\", QWidget* parent = nullptr);\n     int exec();\n \n private Q_SLOTS:\n@@ -119,6 +119,7 @@ private Q_SLOTS:\n     QAbstractButton *yesButton;\n     QTimer countDownTimer;\n     int secDelay;\n+    QString confirmButtonText;\n };\n \n #endif // BITCOIN_QT_SENDCOINSDIALOG_H"
      },
      {
        "sha": "fb92e29f21d8a68522040a5f07200a501852cb5d",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=0aa72061e5d651373449bdfa8d9463dcfe7b1ad4",
        "patch": "@@ -183,7 +183,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         std::string strFailReason;\n \n         auto& newTx = transaction.getWtx();\n-        newTx = m_wallet->createTransaction(vecSend, coinControl, true /* sign */, nChangePosRet, nFeeRequired, strFailReason);\n+        newTx = m_wallet->createTransaction(vecSend, coinControl, !privateKeysDisabled() /* sign */, nChangePosRet, nFeeRequired, strFailReason);\n         transaction.setTransactionFee(nFeeRequired);\n         if (fSubtractFeeFromAmount && newTx)\n             transaction.reassignAmounts(nChangePosRet);"
      },
      {
        "sha": "92139bbad8e544e2390e5d401cb2076bfe2ec6de",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0aa72061e5d651373449bdfa8d9463dcfe7b1ad4",
        "patch": "@@ -2164,20 +2164,24 @@ std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins(interfaces::Ch\n \n     for (const COutput& coin : availableCoins) {\n         CTxDestination address;\n-        if (coin.fSpendable &&\n+        if ((coin.fSpendable || (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && coin.fSolvable)) &&\n             ExtractDestination(FindNonChangeParentOutput(*coin.tx->tx, coin.i).scriptPubKey, address)) {\n             result[address].emplace_back(std::move(coin));\n         }\n     }\n \n     std::vector<COutPoint> lockedCoins;\n     ListLockedCoins(lockedCoins);\n+    // Include watch-only for wallets without private keys\n+    const bool include_watch_only = IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+    const isminetype is_mine_filter = include_watch_only ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n     for (const COutPoint& output : lockedCoins) {\n         auto it = mapWallet.find(output.hash);\n         if (it != mapWallet.end()) {\n             int depth = it->second.GetDepthInMainChain();\n             if (depth >= 0 && output.n < it->second.tx->vout.size() &&\n-                IsMine(it->second.tx->vout[output.n]) == ISMINE_SPENDABLE) {\n+                IsMine(it->second.tx->vout[output.n]) == is_mine_filter\n+            ) {\n                 CTxDestination address;\n                 if (ExtractDestination(FindNonChangeParentOutput(*it->second.tx, output.n).scriptPubKey, address)) {\n                     result[address].emplace_back("
      }
    ]
  },
  {
    "sha": "7127c310204787f1b981ef40a530fb22ccc7fc11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTI3YzMxMDIwNDc4N2YxYjk4MWVmNDBhNTMwZmIyMmNjYzdmYzEx",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-22T20:26:13Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-22T20:26:58Z"
      },
      "message": "Merge #17237: wallet: LearnRelatedScripts only if KeepDestination\n\n3958295bc8a3787b66b0269190218a3764088f79 wallet: LearnRelatedScripts only if KeepDestination (Jo\u00e3o Barbosa)\n55295fba4cbff36e9a8c3fed9c38e82ebe3c48b7 wallet: Lock address type in ReserveDestination (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Only mutates the wallet if the reserved key is kept.\n\n  First commit is a refactor that makes the address type a class member.\n\n  The second commit moves `LearnRelatedScripts` from `GetReservedDestination` to `KeepDestination` to avoid an unnecessary call to `AddCScript` - which in turn prevents multiple entries of the same script in the wallet DB.\n\nACKs for top commit:\n  achow101:\n    Re-ACK 3958295bc8a3787b66b0269190218a3764088f79\n  Sjors:\n    ACK 3958295bc8a3787b66b0269190218a3764088f79\n  ryanofsky:\n    Code review ACK 3958295bc8a3787b66b0269190218a3764088f79. I like this change. The new behavior makes more sense, and the change makes the code clearer, since the current LearnRelatedScripts call is hard to understand and explain. (Personally, I'd like it if this PR were merged before #17373 or that PR was rebased on top of this one so it would be less confusing.)\n  meshcollider:\n    utACK 3958295bc8a3787b66b0269190218a3764088f79\n\nTree-SHA512: 49a5f4b022b28042ad37ea309b28378a3983cb904e234a25795b5a360356652e0f8e60f15e3e64d85094ea63af9be01812d90ccfc08ca4f1dd927fdd8566e33f",
      "tree": {
        "sha": "2d6d997209dc25750a0478299dcc47680c6fce09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d6d997209dc25750a0478299dcc47680c6fce09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7127c310204787f1b981ef40a530fb22ccc7fc11",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAl3YRJIACgkQ0wARbhyH\nWj39iRAAkxETZjJ9ItUgUor9lwoIy3lstdBigLabYMhX7mLX9xaKYU0TR7b7KSCI\nJi5mQV+cTcnej22MPCL55BQIVY1BZ3o6HvLhasw6fu4vwAmtWZqPkuzNahhGyoRK\nVRgXLjnADmZHZpWrQ7UzCASeCewMKKF8LeaKM2v05F6Vi9HRjaDwjW64OXUxRnJm\nd1flyLxiQOOtuRiV/hOez25YmlMq3jzPyW47UNMKJrCY+1NL19x/3BejJUYRsLVD\nx0Gz8GsG1xNRr97aTsOOfdS4CrYlX5EngCh71kfkevcwYSlGjptwqMPU9OEdhB0t\nlTswwS9zBlRVX2fp1ZuYNetv1YXGY032uYu5pa9QveytkVABrf1tIoJ70QRwnREn\n3XYcnd4hkKVd1hrB5b6l14Xm4SPEVi8gXO0sKy3lKUvUHrTJq+xEzyH/g9lL2h5q\n8E/oSG/pFD7RF5G7C+O8liBNHlQmFMEpTriQc1gGr6XkfC4/VXZ2F/EGtC/YoDnN\nlMnY1wyagsvMa5+j/4raRh34OUvtSaxbAGjxXjJc8Dor/xIozmXAM71F9aZqxt1x\nnklSYyRJbquyTaykG7BSiN7yjWy+3oJNOTxFPXbMysMOytz8dggfFuLwjzSHS5kk\nLS+fOXCihDTSu8TrQMOcDdOkjkufRAxz18miUWBUX457Q8rcU6s=\n=IlMQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 2d6d997209dc25750a0478299dcc47680c6fce09\nparent 0aa72061e5d651373449bdfa8d9463dcfe7b1ad4\nparent 3958295bc8a3787b66b0269190218a3764088f79\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1574454373 +1300\ncommitter Samuel Dobson <dobsonsa68@gmail.com> 1574454418 +1300\n\nMerge #17237: wallet: LearnRelatedScripts only if KeepDestination\n\n3958295bc8a3787b66b0269190218a3764088f79 wallet: LearnRelatedScripts only if KeepDestination (Jo\u00e3o Barbosa)\n55295fba4cbff36e9a8c3fed9c38e82ebe3c48b7 wallet: Lock address type in ReserveDestination (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Only mutates the wallet if the reserved key is kept.\n\n  First commit is a refactor that makes the address type a class member.\n\n  The second commit moves `LearnRelatedScripts` from `GetReservedDestination` to `KeepDestination` to avoid an unnecessary call to `AddCScript` - which in turn prevents multiple entries of the same script in the wallet DB.\n\nACKs for top commit:\n  achow101:\n    Re-ACK 3958295bc8a3787b66b0269190218a3764088f79\n  Sjors:\n    ACK 3958295bc8a3787b66b0269190218a3764088f79\n  ryanofsky:\n    Code review ACK 3958295bc8a3787b66b0269190218a3764088f79. I like this change. The new behavior makes more sense, and the change makes the code clearer, since the current LearnRelatedScripts call is hard to understand and explain. (Personally, I'd like it if this PR were merged before #17373 or that PR was rebased on top of this one so it would be less confusing.)\n  meshcollider:\n    utACK 3958295bc8a3787b66b0269190218a3764088f79\n\nTree-SHA512: 49a5f4b022b28042ad37ea309b28378a3983cb904e234a25795b5a360356652e0f8e60f15e3e64d85094ea63af9be01812d90ccfc08ca4f1dd927fdd8566e33f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7127c310204787f1b981ef40a530fb22ccc7fc11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7127c310204787f1b981ef40a530fb22ccc7fc11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7127c310204787f1b981ef40a530fb22ccc7fc11/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0aa72061e5d651373449bdfa8d9463dcfe7b1ad4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0aa72061e5d651373449bdfa8d9463dcfe7b1ad4"
      },
      {
        "sha": "3958295bc8a3787b66b0269190218a3764088f79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3958295bc8a3787b66b0269190218a3764088f79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3958295bc8a3787b66b0269190218a3764088f79"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 15,
      "deletions": 14
    },
    "files": [
      {
        "sha": "fcb7bfecb8f05696e24238b714cc5b3beaa39c47",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7127c310204787f1b981ef40a530fb22ccc7fc11/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7127c310204787f1b981ef40a530fb22ccc7fc11/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7127c310204787f1b981ef40a530fb22ccc7fc11",
        "patch": "@@ -2544,7 +2544,8 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                          int& nChangePosInOut, std::string& strFailReason, const CCoinControl& coin_control, bool sign)\n {\n     CAmount nValue = 0;\n-    ReserveDestination reservedest(this);\n+    const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n+    ReserveDestination reservedest(this, change_type);\n     int nChangePosRequest = nChangePosInOut;\n     unsigned int nSubtractFeeFromAmount = 0;\n     for (const auto& recipient : vecSend)\n@@ -2603,8 +2604,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     return false;\n                 }\n                 CTxDestination dest;\n-                const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n-                bool ret = reservedest.GetReservedDestination(change_type, dest, true);\n+                bool ret = reservedest.GetReservedDestination(dest, true);\n                 if (!ret)\n                 {\n                     strFailReason = \"Keypool ran out, please call keypoolrefill first\";\n@@ -3128,8 +3128,8 @@ bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& des\n \n     m_spk_man->TopUp();\n \n-    ReserveDestination reservedest(this);\n-    if (!reservedest.GetReservedDestination(type, dest, true)) {\n+    ReserveDestination reservedest(this, type);\n+    if (!reservedest.GetReservedDestination(dest, true)) {\n         error = \"Error: Keypool ran out, please call keypoolrefill first\";\n         return false;\n     }\n@@ -3295,7 +3295,7 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n     return result;\n }\n \n-bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n+bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool internal)\n {\n     m_spk_man = pwallet->GetLegacyScriptPubKeyMan();\n     if (!m_spk_man) {\n@@ -3316,16 +3316,17 @@ bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestin\n         fInternal = keypool.fInternal;\n     }\n     assert(vchPubKey.IsValid());\n-    m_spk_man->LearnRelatedScripts(vchPubKey, type);\n     address = GetDestinationForKey(vchPubKey, type);\n     dest = address;\n     return true;\n }\n \n void ReserveDestination::KeepDestination()\n {\n-    if (nIndex != -1)\n+    if (nIndex != -1) {\n         m_spk_man->KeepDestination(nIndex);\n+        m_spk_man->LearnRelatedScripts(vchPubKey, type);\n+    }\n     nIndex = -1;\n     vchPubKey = CPubKey();\n     address = CNoDestination();"
      },
      {
        "sha": "fce49ec56c3dd3bd2112165b00c78fe71a055a13",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7127c310204787f1b981ef40a530fb22ccc7fc11/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7127c310204787f1b981ef40a530fb22ccc7fc11/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7127c310204787f1b981ef40a530fb22ccc7fc11",
        "patch": "@@ -140,8 +140,9 @@ class ReserveDestination\n {\n protected:\n     //! The wallet to reserve from\n-    CWallet* pwallet;\n+    CWallet* const pwallet;\n     LegacyScriptPubKeyMan* m_spk_man{nullptr};\n+    OutputType const type;\n     //! The index of the address's key in the keypool\n     int64_t nIndex{-1};\n     //! The public key for the address\n@@ -153,10 +154,9 @@ class ReserveDestination\n \n public:\n     //! Construct a ReserveDestination object. This does NOT reserve an address yet\n-    explicit ReserveDestination(CWallet* pwalletIn)\n-    {\n-        pwallet = pwalletIn;\n-    }\n+    explicit ReserveDestination(CWallet* pwallet, OutputType type)\n+      : pwallet(pwallet)\n+      , type(type) { }\n \n     ReserveDestination(const ReserveDestination&) = delete;\n     ReserveDestination& operator=(const ReserveDestination&) = delete;\n@@ -168,7 +168,7 @@ class ReserveDestination\n     }\n \n     //! Reserve an address\n-    bool GetReservedDestination(const OutputType type, CTxDestination& pubkey, bool internal);\n+    bool GetReservedDestination(CTxDestination& pubkey, bool internal);\n     //! Return reserved address\n     void ReturnDestination();\n     //! Keep the address. Do not return it's key to the keypool when this object goes out of scope"
      }
    ]
  },
  {
    "sha": "2a97d2b1a525dbc8f6e6610fe543e003acfb7fac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTk3ZDJiMWE1MjVkYmM4ZjZlNjYxMGZlNTQzZTAwM2FjZmI3ZmFj",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-22T20:33:31Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-22T20:33:41Z"
      },
      "message": "Merge #17553: wallet: Remove out of date comments for CalculateMaximumSignedTxSize\n\n6a2e6b0600077e5903400dc74bc8b0c26592fde6 Remove out of date comments for CalculateMaximumSignedTxSize (Gregory Sanders)\n\nPull request description:\n\n  These paths can be hit for probably a number of reasons, and ISMINE spendability is not a requirement to call it.\n\n  For example: During watch-only transaction creation, previous transaction in wallet, pubkey imported, but not the witnessscript associated with the prevout.\n\n  In this case I think no/minimal comment is better than specific and soon to be out of date.\n\nACKs for top commit:\n  achow101:\n    ACK 6a2e6b0600077e5903400dc74bc8b0c26592fde6\n  darosior:\n    ACK 6a2e6b0600077e5903400dc74bc8b0c26592fde6\n\nTree-SHA512: ad4c26fd2409eb5aed19d67c19cb5479d226bd11e9298630309c4344f6562ace2e10c2850ebe22770331d71e91320a606e79619b9fe52dd478ce1f589a740122",
      "tree": {
        "sha": "030fcf444dbec77879ba86c940ff5637c93dbe39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/030fcf444dbec77879ba86c940ff5637c93dbe39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a97d2b1a525dbc8f6e6610fe543e003acfb7fac",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAl3YRiUACgkQ0wARbhyH\nWj17hA/7B8mmNLNFAfK4ThOHQYNUAcSksMYQKjdv6A0xh94EkWruZo6OcndHXeoQ\nWmil6pbmorMwWdWnAnoYxz2TRUy1ek/UFMRp2uIcfOv+wrEHqayLHNxHwS6eN1T8\nETWXz+8wyTngxtKYk7mISnCF1dGEG1bD6fx2sVIPLubMyN92OPyFxXG6pAt2ewDY\nSr4SMZtNrPc5A3JyZMljolUs8jzVW1lsHwRjEbbob4kXh0OvO2WJ1tH6fqK3duBI\nh6h3vKcsOvj4ukrnYY3TzfoVl3J0HD4XIgCIL3sNDIInqruu2jjETLn7gd+W6ZQa\nTpXuDUm8OW4t0EVHiOSMZql8zMOUkIQw4goviyobe4Z0q7rtuDhmpxClblgD5rrC\n3XCb8D3rEkGieAY608rGLeC3ZS5iCuakS+IReAHvo5luVa0bCilXpeeyN7Lr/H8o\nYMwILCwICEWBSKcYsGVkDXujd6LIGOPBvKNIy7AtLPxrbq9PMtNBVuupGcdRwENs\nPFDVbyD7JeSbVcAqMjjIYKNZ4cCWX9mCRpowJiqHoV4sz6S0utl4F+AqgkWmV2Nn\nvtUTa+8dckCTMSN8HPKnj1xr6lK070+tgiRzLI8VPT9K9Spu9UKgVGwM9PhpdIfN\nFqcy5YBvF0tVFPAu1qVJmpUho4QHu20/KHYaFl/goMZSzxGTLZI=\n=irMA\n-----END PGP SIGNATURE-----",
        "payload": "tree 030fcf444dbec77879ba86c940ff5637c93dbe39\nparent 7127c310204787f1b981ef40a530fb22ccc7fc11\nparent 6a2e6b0600077e5903400dc74bc8b0c26592fde6\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1574454811 +1300\ncommitter Samuel Dobson <dobsonsa68@gmail.com> 1574454821 +1300\n\nMerge #17553: wallet: Remove out of date comments for CalculateMaximumSignedTxSize\n\n6a2e6b0600077e5903400dc74bc8b0c26592fde6 Remove out of date comments for CalculateMaximumSignedTxSize (Gregory Sanders)\n\nPull request description:\n\n  These paths can be hit for probably a number of reasons, and ISMINE spendability is not a requirement to call it.\n\n  For example: During watch-only transaction creation, previous transaction in wallet, pubkey imported, but not the witnessscript associated with the prevout.\n\n  In this case I think no/minimal comment is better than specific and soon to be out of date.\n\nACKs for top commit:\n  achow101:\n    ACK 6a2e6b0600077e5903400dc74bc8b0c26592fde6\n  darosior:\n    ACK 6a2e6b0600077e5903400dc74bc8b0c26592fde6\n\nTree-SHA512: ad4c26fd2409eb5aed19d67c19cb5479d226bd11e9298630309c4344f6562ace2e10c2850ebe22770331d71e91320a606e79619b9fe52dd478ce1f589a740122\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a97d2b1a525dbc8f6e6610fe543e003acfb7fac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a97d2b1a525dbc8f6e6610fe543e003acfb7fac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a97d2b1a525dbc8f6e6610fe543e003acfb7fac/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7127c310204787f1b981ef40a530fb22ccc7fc11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7127c310204787f1b981ef40a530fb22ccc7fc11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7127c310204787f1b981ef40a530fb22ccc7fc11"
      },
      {
        "sha": "6a2e6b0600077e5903400dc74bc8b0c26592fde6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a2e6b0600077e5903400dc74bc8b0c26592fde6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a2e6b0600077e5903400dc74bc8b0c26592fde6"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 1,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b1e1385ca36cf60c1416e1907136686298b7544c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a97d2b1a525dbc8f6e6610fe543e003acfb7fac/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a97d2b1a525dbc8f6e6610fe543e003acfb7fac/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2a97d2b1a525dbc8f6e6610fe543e003acfb7fac",
        "patch": "@@ -1448,11 +1448,9 @@ bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScri\n int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig)\n {\n     std::vector<CTxOut> txouts;\n-    // Look up the inputs.  We should have already checked that this transaction\n-    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n-    // wallet, with a valid index into the vout array, and the ability to sign.\n     for (const CTxIn& input : tx.vin) {\n         const auto mi = wallet->mapWallet.find(input.prevout.hash);\n+        // Can not estimate size without knowing the input details\n         if (mi == wallet->mapWallet.end()) {\n             return -1;\n         }\n@@ -1467,8 +1465,6 @@ int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wall\n {\n     CMutableTransaction txNew(tx);\n     if (!wallet->DummySignTx(txNew, txouts, use_max_sig)) {\n-        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n-        // implies that we can sign for every input.\n         return -1;\n     }\n     return GetVirtualTransactionSize(CTransaction(txNew));"
      }
    ]
  },
  {
    "sha": "a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmY1YjZmNDdkNzE2NjJkZmIzNzgxMDk0OWI2N2YzNDRjZjJhMWYy",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-22T20:35:34Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-22T20:35:58Z"
      },
      "message": "Merge #17550: build: set minimum supported macOS to 10.12\n\n7d7bf2ff4a67c3953b0d660ca88d11313cb4d71d build: set minimum supported macOS to 10.12 (fanquake)\n\nPull request description:\n\n  Extracted from #16392 as this doesn't need to wait for the other build changes.\n\n  Reasoning:\n  * `10.10` has been unsupported since July 2017 (~3 years at `v0.20.0` release)\n  * `10.11` has been unsupported since July 2018  (~2 years at `v0.20.0` release)\n  * macOS users are consistent at upgrading to new releases.\n  * Qt 5.12 LTS only supports [macOS > 10.12](https://doc-snapshots.qt.io/qt5-5.12/supported-platforms.html). As long as we're supporting macOS < 10.12 we would not be able to bump Qt in depends to 5.12 for the `v0.20.0` release.\n\n  Once we drop support for 10.12 and start using the 10.15 SDK there are some other follow ups:\n  * Enabling support for [`thread_local`](https://github.com/bitcoin/bitcoin/blob/master/configure.ac#L901).\n  * Removing some of the macOS notification code\n  * Removing macOS [startup item code](https://github.com/bitcoin/bitcoin/blob/master/src/qt/guiutil.cpp#L695).\n\n  There was also some related discussion in the `#bitcoin-builds` channel yesterday arvo.\n\nACKs for top commit:\n  laanwj:\n    ACK 7d7bf2ff4a67c3953b0d660ca88d11313cb4d71d\n  dongcarl:\n    post-IRC-grilling-ACK 7d7bf2ff4a67c3953b0d660ca88d11313cb4d71d\n\nTree-SHA512: 30b0ed75e3b4df2d3f94db2091b7982c1ea7be8fb3a2732d8efd1a53ef1e492d7265a47e90c38e92f66e638d10e9400a6ecb56e5093688bb26d1621645b453e8",
      "tree": {
        "sha": "85915b886a613cf2b3bf18053276ba8a0c34e883",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85915b886a613cf2b3bf18053276ba8a0c34e883"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3YRq4ACgkQLuufXMCV\nJsFDcg//bs0I2KY7U+YDG7hmQteX+jCKwJzYWIyuI4uSRsKCiIE5Bin6/LRkWOUC\ndwt57xgEsBk+eteftqnsNzM0SafPPkTcxsVx/X4kuGUloZV79Abo/39izgCYQjZ8\nfjViVWU/TmJB1VQJgj91NbYoJI/ClAt/o/dEo69rUzNSypIN5Ldemehu2tgiSVEO\nFCYdkbQN7dQzY73eAW6uyCU4tHDjCuKdlvJfDxlwW17QSfzK30wJIE0lDFtsxQxt\n/792RDE55dbvEyHQ0JADIX4HrqmFS4xSpXE3WiT0bv2VrNpNjkwOdcDKnXpPbZrG\nefeFqamh+1NUC/ChlZgtbE6WOUbqDeQ8M3/Z4GcZEc2mh5DQH5k1Hzdu9PMG8Yda\nXCcWZur0kBpNIR1kjjXYn0SZsArMFC0Hna2lgJwyNK1h7JpaDRNJgq7hhS2y9fdR\nS6z1NGaNTln9+RTn6LIcKn+Waw+UW5nCo6Jbey6QvteL5jjwsMPA1oXd1F3k1E46\njXwcrKQ2uRDLxgAUYG35fiOzVlYzWSYMt0K2Ph4WtAdkbvXEJrGLSVrS98QCqKgx\n0C4In5ut0PFOLCsW0yNZllrSHB9U62PHZGu92Tvy+ng6XtFkYCQYfmDqqSDwXzgJ\nNVNg9hWLhX/uyAV7GxLbOT9fa4q/a3w4AGI2041Az3l7x1D+1+A=\n=XBRH\n-----END PGP SIGNATURE-----",
        "payload": "tree 85915b886a613cf2b3bf18053276ba8a0c34e883\nparent 2a97d2b1a525dbc8f6e6610fe543e003acfb7fac\nparent 7d7bf2ff4a67c3953b0d660ca88d11313cb4d71d\nauthor fanquake <fanquake@gmail.com> 1574454934 -0500\ncommitter fanquake <fanquake@gmail.com> 1574454958 -0500\n\nMerge #17550: build: set minimum supported macOS to 10.12\n\n7d7bf2ff4a67c3953b0d660ca88d11313cb4d71d build: set minimum supported macOS to 10.12 (fanquake)\n\nPull request description:\n\n  Extracted from #16392 as this doesn't need to wait for the other build changes.\n\n  Reasoning:\n  * `10.10` has been unsupported since July 2017 (~3 years at `v0.20.0` release)\n  * `10.11` has been unsupported since July 2018  (~2 years at `v0.20.0` release)\n  * macOS users are consistent at upgrading to new releases.\n  * Qt 5.12 LTS only supports [macOS > 10.12](https://doc-snapshots.qt.io/qt5-5.12/supported-platforms.html). As long as we're supporting macOS < 10.12 we would not be able to bump Qt in depends to 5.12 for the `v0.20.0` release.\n\n  Once we drop support for 10.12 and start using the 10.15 SDK there are some other follow ups:\n  * Enabling support for [`thread_local`](https://github.com/bitcoin/bitcoin/blob/master/configure.ac#L901).\n  * Removing some of the macOS notification code\n  * Removing macOS [startup item code](https://github.com/bitcoin/bitcoin/blob/master/src/qt/guiutil.cpp#L695).\n\n  There was also some related discussion in the `#bitcoin-builds` channel yesterday arvo.\n\nACKs for top commit:\n  laanwj:\n    ACK 7d7bf2ff4a67c3953b0d660ca88d11313cb4d71d\n  dongcarl:\n    post-IRC-grilling-ACK 7d7bf2ff4a67c3953b0d660ca88d11313cb4d71d\n\nTree-SHA512: 30b0ed75e3b4df2d3f94db2091b7982c1ea7be8fb3a2732d8efd1a53ef1e492d7265a47e90c38e92f66e638d10e9400a6ecb56e5093688bb26d1621645b453e8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a97d2b1a525dbc8f6e6610fe543e003acfb7fac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a97d2b1a525dbc8f6e6610fe543e003acfb7fac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a97d2b1a525dbc8f6e6610fe543e003acfb7fac"
      },
      {
        "sha": "7d7bf2ff4a67c3953b0d660ca88d11313cb4d71d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d7bf2ff4a67c3953b0d660ca88d11313cb4d71d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d7bf2ff4a67c3953b0d660ca88d11313cb4d71d"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 14,
      "deletions": 15
    },
    "files": [
      {
        "sha": "3ede8788396036b6aefe8fcf07a5bb5f6a18a36c",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
        "patch": "@@ -144,16 +144,16 @@ jobs:\n         FILE_ENV=\"./ci/test/00_setup_env_native_nowallet.sh\"\n \n     - stage: test\n-      name: 'macOS 10.10  [GOAL: deploy] [no functional tests]'\n+      name: 'macOS 10.12  [GOAL: deploy] [no functional tests]'\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_mac.sh\"\n \n     - stage: test\n       name: 'macOS 10.14 native [GOAL: install] [GUI] [no depends]'\n       os: osx\n       # Use the most recent version:\n-      # Xcode 11, macOS 10.14, JDK 12.0.1\n+      # Xcode 11.2.1, macOS 10.14, JDK 13.0.1, SDK 10.15\n       # https://docs.travis-ci.com/user/reference/osx/#macos-version\n-      osx_image: xcode11\n+      osx_image: xcode11.2\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_mac_host.sh\""
      },
      {
        "sha": "af166b6ca7cf21336d24a1663dee549b6b85edbb",
        "filename": "ci/test/00_setup_env_mac.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/ci/test/00_setup_env_mac.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/ci/test/00_setup_env_mac.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac.sh?ref=a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
        "patch": "@@ -6,7 +6,7 @@\n \n export LC_ALL=C.UTF-8\n \n-export HOST=x86_64-apple-darwin14\n+export HOST=x86_64-apple-darwin16\n export PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python3-dev python3-setuptools\"\n export OSX_SDK=10.11\n export RUN_UNIT_TESTS=false"
      },
      {
        "sha": "0b437a723f045c094af7324182b48ac37a9ead0c",
        "filename": "ci/test/00_setup_env_mac_host.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/ci/test/00_setup_env_mac_host.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/ci/test/00_setup_env_mac_host.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac_host.sh?ref=a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
        "patch": "@@ -6,7 +6,7 @@\n \n export LC_ALL=C.UTF-8\n \n-export HOST=x86_64-apple-darwin14\n+export HOST=x86_64-apple-darwin16\n export BREW_PACKAGES=\"automake berkeley-db4 libtool boost miniupnpc pkg-config qt qrencode python3 ccache zeromq\"\n export PIP_PACKAGES=\"zmq\"\n export RUN_CI_ON_HOST=true"
      },
      {
        "sha": "5f006d3a190241a5f17ae0a684845814d411e097",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
        "patch": "@@ -37,7 +37,7 @@ script: |\n   set -e -o pipefail\n \n   WRAP_DIR=$HOME/wrapped\n-  HOSTS=\"x86_64-apple-darwin14\"\n+  HOSTS=\"x86_64-apple-darwin16\"\n   CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests GENISOIMAGE=$WRAP_DIR/genisoimage\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"ar ranlib date dmg genisoimage\""
      },
      {
        "sha": "b56302b6c7310bd1d0c2c4655d3d62c0eb6fedbb",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
        "patch": "@@ -25,7 +25,7 @@ Common `host-platform-triplets` for cross compilation are:\n - `i686-pc-linux-gnu` for Linux 32 bit\n - `x86_64-pc-linux-gnu` for x86 Linux\n - `x86_64-w64-mingw32` for Win64\n-- `x86_64-apple-darwin14` for macOS\n+- `x86_64-apple-darwin16` for macOS\n - `arm-linux-gnueabihf` for Linux ARM 32 bit\n - `aarch64-linux-gnu` for Linux ARM 64 bit\n - `riscv32-linux-gnu` for Linux RISC-V 32 bit"
      },
      {
        "sha": "1f88c209cf43bf76cb8f2fa6a9b74f96d483f7a7",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
        "patch": "@@ -1,4 +1,4 @@\n-OSX_MIN_VERSION=10.10\n+OSX_MIN_VERSION=10.12\n OSX_SDK_VERSION=10.11\n OSX_SDK=$(SDK_PATH)/MacOSX$(OSX_SDK_VERSION).sdk\n LD64_VERSION=253.9"
      },
      {
        "sha": "bf655538c72b2c6a9c6c385026319fb10117d1b9",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
        "patch": "@@ -110,7 +110,7 @@ tail -f $HOME/Library/Application\\ Support/Bitcoin/debug.log\n ```\n \n ## Notes\n-* Tested on OS X 10.10 Yosemite through macOS 10.14 Mojave on 64-bit Intel\n+* Tested on OS X 10.12 Sierra through macOS 10.15 Catalina on 64-bit Intel\n processors only.\n * Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714).\n "
      },
      {
        "sha": "88740ea1dae3d515286b9ead873cc69014d1e948",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
        "patch": "@@ -46,16 +46,15 @@ Compatibility\n ==============\n \n Bitcoin Core is supported and extensively tested on operating systems using\n-the Linux kernel, macOS 10.10+, and Windows 7 and newer. It is not recommended\n+the Linux kernel, macOS 10.12+, and Windows 7 and newer. It is not recommended\n to use Bitcoin Core on unsupported systems.\n \n Bitcoin Core should also work on most other Unix-like systems but is not\n as frequently tested on them.\n \n-From Bitcoin Core 0.17.0 onwards, macOS versions earlier than 10.10 are no\n-longer supported, as Bitcoin Core is now built using Qt 5.9.x which requires\n-macOS 10.10+. Additionally, Bitcoin Core does not yet change appearance when\n-macOS \"dark mode\" is activated.\n+From Bitcoin Core 0.20.0 onwards, macOS versions earlier than 10.12 are no\n+longer supported. Additionally, Bitcoin Core does not yet change appearance\n+when macOS \"dark mode\" is activated.\n \n In addition to previously supported CPU platforms, this release's pre-compiled\n distribution provides binaries for the RISC-V platform."
      },
      {
        "sha": "275078c88de837697f6fe3633a479ab59f43f91f",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f5b6f47d71662dfb37810949b67f344cf2a1f2/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
        "patch": "@@ -3,7 +3,7 @@\n <plist version=\"0.9\">\n <dict>\n   <key>LSMinimumSystemVersion</key>\n-  <string>10.10.0</string>\n+  <string>10.12.0</string>\n \n   <key>LSArchitecturePriority</key>\n   <array>"
      }
    ]
  },
  {
    "sha": "b77d5ad59fb9f3f26d919ee6c33ae732382de504",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzdkNWFkNTlmYjlmM2YyNmQ5MTllZTZjMzNhZTczMjM4MmRlNTA0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-20T09:46:01Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-22T20:38:52Z"
      },
      "message": "build: Disallow dynamic linking against c++ library\n\nEver since statically linking Qt, we've been linking the C++ library\nstatically too (-static-libstdc++). Take this into\naccount in the symbol checker.",
      "tree": {
        "sha": "4951d297aa02acf3063b6f414c051754409abaeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4951d297aa02acf3063b6f414c051754409abaeb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b77d5ad59fb9f3f26d919ee6c33ae732382de504",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3YR1wACgkQLuufXMCV\nJsEglhAAtOgbPVaz3t8/OOq/7BvOtIV2q/3oI5L3E/JtOaTiY31hDjj5vDWv6Xm6\nVkAiPLGwGAq2nu57Om1Svt5/XxklfY8M9mK91VDQR9ohq2HU19m4ObOGvQM6SJXC\nxLb5orKcnO4hVuJjiXU66JXhCChqdnNHRVUAMzGW3TKwTFxNZYg0iXpsRhNowqLx\n+/Fcv3cXOTucD6IqXPFIvdDLL3FvMzkSdbM8ahqzCSMA339iMYezzceMdDVGwrni\nGv78T4Fj3MMZSM+Ex6NbHMSEs+vWhssR18/Ev1YjMT8bfnkHTQxOT1J8z+F/ozpV\nl8PzOtQ59ihBpnrUioXlPo/Au8sWNOu5wevD2Sa1/a7KqRWK30oG8kPcDcz2NHFk\nKIW1Lqs6O9du9WJfSq6G2xxVFSeCPjW1lyKagkK189Kgqa4wk8ouNozZeIgMeHM2\nw5qR5AZ00Vd9Qawuy0urYSYy+p/gzWNYFso73cpgF9tPpZQEQ/MNvT3MtjJnfuak\n2RzrMmQowE2Cl3ZHVwDg6HWRWkYFVCjJ6xsKJifIcchZSuZOVrCPMEghPc+SCsKH\nn7oA5n57raKSYVSsBUyQCc/b0YBcRLyzVg8rWs6/tlF60JQYSYhWnR0ApMEDQ3+W\nqUyAY4K0qMDztO663Yongz7GKWuKv+jqzWIlsYxmWHKju2fNAsc=\n=E7pi\n-----END PGP SIGNATURE-----",
        "payload": "tree 4951d297aa02acf3063b6f414c051754409abaeb\nparent a6f5b6f47d71662dfb37810949b67f344cf2a1f2\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1574243161 +0100\ncommitter fanquake <fanquake@gmail.com> 1574455132 -0500\n\nbuild: Disallow dynamic linking against c++ library\n\nEver since statically linking Qt, we've been linking the C++ library\nstatically too (-static-libstdc++). Take this into\naccount in the symbol checker.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b77d5ad59fb9f3f26d919ee6c33ae732382de504",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b77d5ad59fb9f3f26d919ee6c33ae732382de504",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b77d5ad59fb9f3f26d919ee6c33ae732382de504/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6f5b6f47d71662dfb37810949b67f344cf2a1f2"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 2,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0698f7306622bf805b3a99474511077d482156f7",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b77d5ad59fb9f3f26d919ee6c33ae732382de504/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b77d5ad59fb9f3f26d919ee6c33ae732382de504/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=b77d5ad59fb9f3f26d919ee6c33ae732382de504",
        "patch": "@@ -4,8 +4,8 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n A script to check that the (Linux) executables produced by gitian only contain\n-allowed gcc, glibc and libstdc++ version symbols.  This makes sure they are\n-still compatible with the minimum supported Linux distribution versions.\n+allowed gcc and glibc version symbols. This makes sure they are still compatible\n+with the minimum supported Linux distribution versions.\n \n Example usage:\n \n@@ -20,25 +20,20 @@\n #\n # - g++ version 4.4.5 (https://packages.debian.org/search?suite=default&section=all&arch=any&searchon=names&keywords=g%2B%2B)\n # - libc version 2.11.3 (https://packages.debian.org/search?suite=default&section=all&arch=any&searchon=names&keywords=libc6)\n-# - libstdc++ version 4.4.5 (https://packages.debian.org/search?suite=default&section=all&arch=any&searchon=names&keywords=libstdc%2B%2B6)\n #\n # Ubuntu 10.04.4 (Lucid Lynx) has:\n #\n # - g++ version 4.4.3 (http://packages.ubuntu.com/search?keywords=g%2B%2B&searchon=names&suite=lucid&section=all)\n # - libc version 2.11.1 (http://packages.ubuntu.com/search?keywords=libc6&searchon=names&suite=lucid&section=all)\n-# - libstdc++ version 4.4.3 (http://packages.ubuntu.com/search?suite=lucid&section=all&arch=any&keywords=libstdc%2B%2B&searchon=names)\n #\n # Taking the minimum of these as our target.\n #\n # According to GNU ABI document (http://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html) this corresponds to:\n #   GCC 4.4.0: GCC_4.4.0\n-#   GCC 4.4.2: GLIBCXX_3.4.13, CXXABI_1.3.3\n #   (glibc)    GLIBC_2_11\n #\n MAX_VERSIONS = {\n 'GCC':       (4,4,0),\n-'CXXABI':    (1,3,3),\n-'GLIBCXX':   (3,4,13),\n 'GLIBC':     (2,11),\n 'LIBATOMIC': (1,0)\n }"
      }
    ]
  },
  {
    "sha": "16a7be1663b02ddefa1e4f0309be49b725ffb388",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmE3YmUxNjYzYjAyZGRlZmExZTRmMDMwOWJlNDliNzI1ZmZiMzg4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-20T09:55:35Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-22T20:40:05Z"
      },
      "message": "build: Bump minimum versions in symbol checker\n\nDebian 8 (Jessie) has:\n- g++ version 4.9.2\n- libc version 2.19\n\nUbuntu 16.04.4 (Xenial) has:\n- g++ version 5.3.1\n- libc version 2.23.0\n\nCentOS 7 has:\n- g++ version 4.8.5\n- libc version 2.17\n\nTaking the minimum of these as our target.\nAccording to the GNU ABI document this corresponds to:\n\n- GCC 4.8.5: GCC_4.8.0\n- (glibc)    GLIBC_2_17\n\nCo-Authored-By: fanquake <fanquake@gmail.com>",
      "tree": {
        "sha": "c79668c042e18c9b4c7bf59944f1b7e6a6a48acf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c79668c042e18c9b4c7bf59944f1b7e6a6a48acf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16a7be1663b02ddefa1e4f0309be49b725ffb388",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3YR6cACgkQLuufXMCV\nJsGqMw/9GiI8N9j/lKxu3M8bZG/dh64RtN0S6dlDrlIPUm8RshSSh8Sg3vA+7BZ8\nXAQbny+56gszRFHjmxXbSJub9hDim4fJ9DxqmNkuMMPgwI9MFFqR5rg722U5zWe+\nxvkQ0uwDKEUWBsRywKOEdIBccd8yjNiUQty+OQDXr8EPpw9njt2Y//B9B7SKlNip\np0rHzfGs8FM0Wftz0+f67RiYHdpkP/+ze6MbMP4tnUZJLFitfxeluCWB6k27AFlV\nGjdb9FLoMeRGpk6H3zpeHjNTQIZ2e8U1xL/vMGivhCRDPx0mT2y+g4oW3SlkpOW8\np4tqbRMCpiNux/5PBnkQD4rXe6gW8FgVdWqHTmk9x7qZGk8ExpqsZlC0rmMSe1lG\nOJHLS8wjSkd5H+8rQFL7jod3lM/3bbDtyzgZJmkNF/5D6RsLE/mTSaayRpScou4G\nuKeYffOaJxznlJND2jfPUt+jcj9xP2VUe/BieWaF3yfatUi+HAFNoEdSvgv5wuVs\nCOE2t6xMvObOOZOd/14g5Pcjrr52ojRcxqZrNTk3ClwkGD8mLWbxsXy8qhV5DwO5\nLZiDWuhvRQ4xaHWzuwaz/B+jI5MXUlpvOKn3koehq/PXz6J7iU0OXJ9Vv1T1VdhH\nXtm0ZjYdz8hZ62O05LmiUbYNm3NZ5rcBiNmYl1SGjbTwj4gLvv0=\n=LyNl\n-----END PGP SIGNATURE-----",
        "payload": "tree c79668c042e18c9b4c7bf59944f1b7e6a6a48acf\nparent b77d5ad59fb9f3f26d919ee6c33ae732382de504\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1574243735 +0100\ncommitter fanquake <fanquake@gmail.com> 1574455205 -0500\n\nbuild: Bump minimum versions in symbol checker\n\nDebian 8 (Jessie) has:\n- g++ version 4.9.2\n- libc version 2.19\n\nUbuntu 16.04.4 (Xenial) has:\n- g++ version 5.3.1\n- libc version 2.23.0\n\nCentOS 7 has:\n- g++ version 4.8.5\n- libc version 2.17\n\nTaking the minimum of these as our target.\nAccording to the GNU ABI document this corresponds to:\n\n- GCC 4.8.5: GCC_4.8.0\n- (glibc)    GLIBC_2_17\n\nCo-Authored-By: fanquake <fanquake@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16a7be1663b02ddefa1e4f0309be49b725ffb388",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16a7be1663b02ddefa1e4f0309be49b725ffb388",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16a7be1663b02ddefa1e4f0309be49b725ffb388/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b77d5ad59fb9f3f26d919ee6c33ae732382de504",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b77d5ad59fb9f3f26d919ee6c33ae732382de504",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b77d5ad59fb9f3f26d919ee6c33ae732382de504"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 16,
      "deletions": 11
    },
    "files": [
      {
        "sha": "cb255c9426eeb3b5ae9d538ad28748e9a57284f5",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16a7be1663b02ddefa1e4f0309be49b725ffb388/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16a7be1663b02ddefa1e4f0309be49b725ffb388/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=16a7be1663b02ddefa1e4f0309be49b725ffb388",
        "patch": "@@ -16,25 +16,30 @@\n import sys\n import os\n \n-# Debian 6.0.9 (Squeeze) has:\n+# Debian 8 (Jessie) EOL: 2020. https://wiki.debian.org/DebianReleases#Production_Releases\n #\n-# - g++ version 4.4.5 (https://packages.debian.org/search?suite=default&section=all&arch=any&searchon=names&keywords=g%2B%2B)\n-# - libc version 2.11.3 (https://packages.debian.org/search?suite=default&section=all&arch=any&searchon=names&keywords=libc6)\n+# - g++ version 4.9.2 (https://packages.debian.org/search?suite=jessie&arch=any&searchon=names&keywords=g%2B%2B)\n+# - libc version 2.19 (https://packages.debian.org/search?suite=jessie&arch=any&searchon=names&keywords=libc6)\n #\n-# Ubuntu 10.04.4 (Lucid Lynx) has:\n+# Ubuntu 16.04 (Xenial) EOL: 2024. https://wiki.ubuntu.com/Releases\n #\n-# - g++ version 4.4.3 (http://packages.ubuntu.com/search?keywords=g%2B%2B&searchon=names&suite=lucid&section=all)\n-# - libc version 2.11.1 (http://packages.ubuntu.com/search?keywords=libc6&searchon=names&suite=lucid&section=all)\n+# - g++ version 5.3.1 (https://packages.ubuntu.com/search?keywords=g%2B%2B&searchon=names&suite=xenial&section=all)\n+# - libc version 2.23.0 (https://packages.ubuntu.com/search?keywords=libc6&searchon=names&suite=xenial&section=all)\n+#\n+# CentOS 7 EOL: 2024. https://wiki.centos.org/FAQ/General\n+#\n+# - g++ version 4.8.5 (http://mirror.centos.org/centos/7/os/x86_64/Packages/)\n+# - libc version 2.17 (http://mirror.centos.org/centos/7/os/x86_64/Packages/)\n #\n # Taking the minimum of these as our target.\n #\n-# According to GNU ABI document (http://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html) this corresponds to:\n-#   GCC 4.4.0: GCC_4.4.0\n-#   (glibc)    GLIBC_2_11\n+# According to GNU ABI document (https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html) this corresponds to:\n+#   GCC 4.8.5: GCC_4.8.0\n+#   (glibc)    GLIBC_2_17\n #\n MAX_VERSIONS = {\n-'GCC':       (4,4,0),\n-'GLIBC':     (2,11),\n+'GCC':       (4,8,0),\n+'GLIBC':     (2,17),\n 'LIBATOMIC': (1,0)\n }\n # See here for a description of _IO_stdin_used:"
      }
    ]
  },
  {
    "sha": "8f15a317602727d24f60d0bbf43f851b33df3228",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjE1YTMxNzYwMjcyN2QyNGY2MGQwYmJmNDNmODUxYjMzZGYzMjI4",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-22T20:57:44Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-22T20:57:44Z"
      },
      "message": "doc: add glibc 2.17 requirement to release-notes",
      "tree": {
        "sha": "c274120a7d88e43c1f886f03ef35a2367e0d9ebf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c274120a7d88e43c1f886f03ef35a2367e0d9ebf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f15a317602727d24f60d0bbf43f851b33df3228",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3YS8gACgkQLuufXMCV\nJsGbahAAtMBJgJ6L3Syl+wW6Sm4l97zdn5YMG4qNaDasVz4rJ5wqS5BXlkLXGBfX\nA3SnXINt1rLte9EzG3yTQqCimjbrQ39YBiMzhJCMcNyOHTcJy+Z+DUtR0eD0+q3A\n14mdAhC7gkGw+ds2CB366Y/vTEpJJ5fwWKKuV9GZ2Sh5SFFwr1T9wdgiZ4rkwV79\n/bALXejg7IR7Rf+cyp/w1NVJ6c8rxxn4cKKP51rMG6ex/s7abmb0WUrK4L3bepHp\nynJ0AbWXCrZn0qIBLMTAlWNgdaeQsUPvfenN3kJ6CTppQNT2g7zLlb6i4SZTzimv\nQb2HwVyKGMrgvrzyjD9vaIYiYDjfLm8RZ5zD6lOA6unOuUmiM1si3Fo1r6+TXlIW\nzv5VGcnxDDR1GJz1vvi1nFCNpVjc85Tg0hLf42ugjMYZOypjEF8YX9AjiaER/d50\nOH4/V328F36x8r00pJF7A0g5VN5M5kU311EAeTnEeGlKgP9iklVKlfN4Dg6tbEPC\nB1RglvytVe+guofKKQff3+Zn5E9NMnkQvL1Tj/sGWsxhTN0O25vH5E2WIs/d3Oz6\nzETtRmuiAPrHwZxH/RHrZfVH0yHtUoJaIAcFI9uSOGG/jsq85znXdQAWTjlNmlPb\n9/xxNxFEOAptBvlNgxdLuk+uPa91k8XqsjKmQvb6MoVKfV9RfII=\n=T4ws\n-----END PGP SIGNATURE-----",
        "payload": "tree c274120a7d88e43c1f886f03ef35a2367e0d9ebf\nparent 16a7be1663b02ddefa1e4f0309be49b725ffb388\nauthor fanquake <fanquake@gmail.com> 1574456264 -0500\ncommitter fanquake <fanquake@gmail.com> 1574456264 -0500\n\ndoc: add glibc 2.17 requirement to release-notes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f15a317602727d24f60d0bbf43f851b33df3228",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f15a317602727d24f60d0bbf43f851b33df3228",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f15a317602727d24f60d0bbf43f851b33df3228/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16a7be1663b02ddefa1e4f0309be49b725ffb388",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16a7be1663b02ddefa1e4f0309be49b725ffb388",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16a7be1663b02ddefa1e4f0309be49b725ffb388"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d6bd8e6ed45f841e5a124ff79d4acaf0a91c1fe1",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f15a317602727d24f60d0bbf43f851b33df3228/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f15a317602727d24f60d0bbf43f851b33df3228/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=8f15a317602727d24f60d0bbf43f851b33df3228",
        "patch": "@@ -68,6 +68,10 @@ Build System\n - OpenSSL is no longer used by Bitcoin Core. The last usage of the library\n was removed in #17265.\n \n+- glibc 2.17 or greater is now required to run the release binaries. This\n+retains compatibility with RHEL 7, CentOS 7, Debian 8 and Ubuntu 14.04 LTS.\n+Further details can be found in #17538.\n+\n New RPCs\n --------\n "
      }
    ]
  },
  {
    "sha": "4effd67bf407e25e776a37739c6ca103e1f26d74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWZmZDY3YmY0MDdlMjVlNzc2YTM3NzM5YzZjYTEwM2UxZjI2ZDc0",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-22T21:19:43Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-22T21:20:04Z"
      },
      "message": "Merge #17387: wallet_importmulti: use addresses of the same type as being imported\n\nb84e776fd166ac422ac4a0dcdc1c6f7fd921bf70 wallet_importmulti: use addresses of the same type as being imported (Andrew Chow)\n\nPull request description:\n\n  When constructing an import from the solving data of an address, make sure that the original address is the same type as the one that will be imported.\n\n  See also: https://github.com/bitcoin/bitcoin/pull/17374#issuecomment-550036931\n\n  Part of #17261\n\nACKs for top commit:\n  Sjors:\n    Code review ACK b84e776\n  meshcollider:\n    Tested re-ACK b84e776fd166ac422ac4a0dcdc1c6f7fd921bf70\n\nTree-SHA512: 53c49c63af8cbade0116a62beddc77df1a411d8ed76571c3053f6aff096f41a5325421a188bab3dcacfda69bb28fdff6ba921ddd80f29c4abbadb3b58fda884c",
      "tree": {
        "sha": "aa3dcf789762b46fe3e8efc5a91373c7429bca2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa3dcf789762b46fe3e8efc5a91373c7429bca2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4effd67bf407e25e776a37739c6ca103e1f26d74",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAl3YUQQACgkQ0wARbhyH\nWj1cGg/9HhRNlksZCKcZN7FcR9jSq9x7Y8WB4OlKKWCNccIRClct3jEpzbDdlBcm\nwl2NHfUTy+LGD2msybDGDQCecwcJjbAzIPwWR1KhSgZpbdsc57vmub25JfBT2QSA\nBOu35bVLg9A0hva4m502K6opW6pGDXicoHFD9bnf3au/flr7E1peEXGvjPEL1SLj\nfm19R47vIrC57mFGf8b5rBEbDN+Thw8K/m/FfcYU5gzCP9cL+v5e3USAok2ttMRB\nGEHxbsMLw1PqOqq8nNz0mKhC7Nc9IuFyg3b6A260pMvh1Qx4BYQZS1PpzsnxWVe6\nbxm6ORTr+Z3Mo/6KcGlFsWsqrmeQiCEZwtX1gzfjmJz4ynKU8DDbBdJ9jfP4Y53v\npg2CAroz5eMVTHEpMZB8JJvNucBLn+AzToGXTdsscKvrw3Clo1zm8t+/9WR8H/kV\n9FvEpxB3ipu5r4ExJ5PT3WR7W0n/ohxSGCEQfbfXGDPofX2+qbQ0GEwhKuNzxJ0Y\ndIV0q94Fa9f+vOz9Ny/rhSAWSdxUKuIWRplnruvR3FcKkw0vgdiE7DniUYQAtUWt\nsTb9eLFojqaVA+X07rDBbefB5gW/RvNvlCNR8m82/DUycRNqLsyDiLzNZ7CoP+GQ\n2M/x3pub1Freu4YXwhY1nBaLeLoD+zU5PCPbgyj+ousKOQu3qs0=\n=gj39\n-----END PGP SIGNATURE-----",
        "payload": "tree aa3dcf789762b46fe3e8efc5a91373c7429bca2a\nparent a6f5b6f47d71662dfb37810949b67f344cf2a1f2\nparent b84e776fd166ac422ac4a0dcdc1c6f7fd921bf70\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1574457583 +1300\ncommitter Samuel Dobson <dobsonsa68@gmail.com> 1574457604 +1300\n\nMerge #17387: wallet_importmulti: use addresses of the same type as being imported\n\nb84e776fd166ac422ac4a0dcdc1c6f7fd921bf70 wallet_importmulti: use addresses of the same type as being imported (Andrew Chow)\n\nPull request description:\n\n  When constructing an import from the solving data of an address, make sure that the original address is the same type as the one that will be imported.\n\n  See also: https://github.com/bitcoin/bitcoin/pull/17374#issuecomment-550036931\n\n  Part of #17261\n\nACKs for top commit:\n  Sjors:\n    Code review ACK b84e776\n  meshcollider:\n    Tested re-ACK b84e776fd166ac422ac4a0dcdc1c6f7fd921bf70\n\nTree-SHA512: 53c49c63af8cbade0116a62beddc77df1a411d8ed76571c3053f6aff096f41a5325421a188bab3dcacfda69bb28fdff6ba921ddd80f29c4abbadb3b58fda884c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4effd67bf407e25e776a37739c6ca103e1f26d74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4effd67bf407e25e776a37739c6ca103e1f26d74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4effd67bf407e25e776a37739c6ca103e1f26d74/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6f5b6f47d71662dfb37810949b67f344cf2a1f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6f5b6f47d71662dfb37810949b67f344cf2a1f2"
      },
      {
        "sha": "b84e776fd166ac422ac4a0dcdc1c6f7fd921bf70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b84e776fd166ac422ac4a0dcdc1c6f7fd921bf70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b84e776fd166ac422ac4a0dcdc1c6f7fd921bf70"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "da795eac1fa34113fefc64b839d6527c7fd9d741",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4effd67bf407e25e776a37739c6ca103e1f26d74/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4effd67bf407e25e776a37739c6ca103e1f26d74/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=4effd67bf407e25e776a37739c6ca103e1f26d74",
        "patch": "@@ -675,7 +675,7 @@ def run_test(self):\n         # Import pubkeys with key origin info\n         self.log.info(\"Addresses should have hd keypath and master key id after import with key origin\")\n         pub_addr = self.nodes[1].getnewaddress()\n-        pub_addr = self.nodes[1].getnewaddress()\n+        pub_addr = self.nodes[1].getnewaddress(address_type=\"bech32\")\n         info = self.nodes[1].getaddressinfo(pub_addr)\n         pub = info['pubkey']\n         pub_keypath = info['hdkeypath']\n@@ -693,7 +693,7 @@ def run_test(self):\n         assert_equal(pub_import_info['hdkeypath'], pub_keypath)\n \n         # Import privkeys with key origin info\n-        priv_addr = self.nodes[1].getnewaddress()\n+        priv_addr = self.nodes[1].getnewaddress(address_type=\"bech32\")\n         info = self.nodes[1].getaddressinfo(priv_addr)\n         priv = self.nodes[1].dumpprivkey(priv_addr)\n         priv_keypath = info['hdkeypath']\n@@ -742,8 +742,8 @@ def run_test(self):\n         self.nodes[1].createwallet(wallet_name=\"noprivkeys\", disable_private_keys=True)\n         wrpc = self.nodes[1].get_wallet_rpc(\"noprivkeys\")\n \n-        addr1 = self.nodes[0].getnewaddress()\n-        addr2 = self.nodes[0].getnewaddress()\n+        addr1 = self.nodes[0].getnewaddress(address_type=\"bech32\")\n+        addr2 = self.nodes[0].getnewaddress(address_type=\"bech32\")\n         pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n         pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n         result = wrpc.importmulti(\n@@ -761,15 +761,15 @@ def run_test(self):\n         assert result[0]['success']\n         assert result[1]['success']\n         assert_equal(wrpc.getwalletinfo()[\"keypoolsize\"], 2)\n-        newaddr1 = wrpc.getnewaddress()\n+        newaddr1 = wrpc.getnewaddress(address_type=\"bech32\")\n         assert_equal(addr1, newaddr1)\n-        newaddr2 = wrpc.getnewaddress()\n+        newaddr2 = wrpc.getnewaddress(address_type=\"bech32\")\n         assert_equal(addr2, newaddr2)\n \n         # Import some public keys to the internal keypool of a no privkey wallet\n         self.log.info(\"Adding pubkey to internal keypool of disableprivkey wallet\")\n-        addr1 = self.nodes[0].getnewaddress()\n-        addr2 = self.nodes[0].getnewaddress()\n+        addr1 = self.nodes[0].getnewaddress(address_type=\"bech32\")\n+        addr2 = self.nodes[0].getnewaddress(address_type=\"bech32\")\n         pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n         pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n         result = wrpc.importmulti(\n@@ -789,15 +789,15 @@ def run_test(self):\n         assert result[0]['success']\n         assert result[1]['success']\n         assert_equal(wrpc.getwalletinfo()[\"keypoolsize_hd_internal\"], 2)\n-        newaddr1 = wrpc.getrawchangeaddress()\n+        newaddr1 = wrpc.getrawchangeaddress(address_type=\"bech32\")\n         assert_equal(addr1, newaddr1)\n-        newaddr2 = wrpc.getrawchangeaddress()\n+        newaddr2 = wrpc.getrawchangeaddress(address_type=\"bech32\")\n         assert_equal(addr2, newaddr2)\n \n         # Import a multisig and make sure the keys don't go into the keypool\n         self.log.info('Imported scripts with pubkeys should not have their pubkeys go into the keypool')\n-        addr1 = self.nodes[0].getnewaddress()\n-        addr2 = self.nodes[0].getnewaddress()\n+        addr1 = self.nodes[0].getnewaddress(address_type=\"bech32\")\n+        addr2 = self.nodes[0].getnewaddress(address_type=\"bech32\")\n         pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n         pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n         result = wrpc.importmulti("
      }
    ]
  },
  {
    "sha": "0b79caf658019de2c65a53c9e11fd1d2f4c369b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjc5Y2FmNjU4MDE5ZGUyYzY1YTUzYzllMTFmZDFkMmY0YzM2OWI2",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-22T21:35:50Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-22T21:36:04Z"
      },
      "message": "Merge #17447: wallet: Make -walletdir network only\n\n3c2c439dcd8797019ac6d6614775d5c20ee41c36 wallet: Make -walletdir network only (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  With this PR `bitcoind -regtest` doesn't run if bitcoin.conf has\n  ```\n  walletdir=/mnt/mydisk/wallets\n  ```\n  But works with\n  ```\n  [regtest]\n  walletdir=/mnt/mydisk/wallets\n  ```\n\n  Doesn't change mainnet behavior.\n\n  Closes #15630.\n\nACKs for top commit:\n  ryanofsky:\n    ACK 3c2c439dcd8797019ac6d6614775d5c20ee41c36\n  MarcoFalke:\n    ACK 3c2c439dcd8797019ac6d6614775d5c20ee41c36 \ud83c\udf48\n  meshcollider:\n    Tested ACK 3c2c439dcd8797019ac6d6614775d5c20ee41c36\n\nTree-SHA512: 8ab3b2db5f3f9cab78b36baaf490c80f7330372cfd8f73fe6536c8fb4c6e55e09f62296feb70617075838b3bcd7101abebbef3b228b6c3dbd42ce8c7a5c372d9",
      "tree": {
        "sha": "f6f662a85a6a46125473d29768dad389cd16745a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6f662a85a6a46125473d29768dad389cd16745a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b79caf658019de2c65a53c9e11fd1d2f4c369b6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAl3YVMQACgkQ0wARbhyH\nWj3u9w//XR/sbCUOQhfMMlVl4/ojFstGBFtUqJqUct+WgB2XjB8LCAkYnIJtzHAo\nn14W/TWQ6MYj3CiVs98StJtDHMBMWI5znq8kvgdB43yur4Id2pwM9/90ym1qBy7v\nlaez5E32yuvCyOeIIEgieFM7nKtc446NWVnlP+XNmJuujvkeqCK0lMFp59hHE5Qc\n8WZsjYRr0bGyAXvs96RPZ66oA0pDt0VKCq7Lv+vnil1T1zEBhjTarccUHZngzRFv\nbnK1hFGVm10My+7LSSrivLJrcTsBITs0fUZ31SiIkvOsQAC9GJhiimsvjjw9n71L\nzV0p09r3h16xcvjq/qWVSNwbesBQ4n3OhVsVBpAL1wkMw/ap4/OvsG7XOW7QO+T+\n7NQsPJNBADavl7kyfIjb1EZ7tbEVjLfmcHK+xMUFMjFMytKUEOvmdqppOoLbxEvi\n92m7t6aKaTdT5T3iEwys56omz2sImwvsM00GHu12zUyS8w4HfJtrGXAg08aB2aLl\ndSWA0ifhoSc6xRbWdoIYvwQSEGwYmbHKcQzw7hGa/l1qUv5lNh/WUD7ppLTu+pyw\n58b6bJ6s6ba92tExv1YpKBz+ALY/o7fyYg10H9y2FSWpa2ZskjAfE4aUFBUIZ6I+\n/io59lRQtftqa5zX5zRIGNRqwhemcDuJ162bK6jLYVoOOgjPLZg=\n=uQby\n-----END PGP SIGNATURE-----",
        "payload": "tree f6f662a85a6a46125473d29768dad389cd16745a\nparent 4effd67bf407e25e776a37739c6ca103e1f26d74\nparent 3c2c439dcd8797019ac6d6614775d5c20ee41c36\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1574458550 +1300\ncommitter Samuel Dobson <dobsonsa68@gmail.com> 1574458564 +1300\n\nMerge #17447: wallet: Make -walletdir network only\n\n3c2c439dcd8797019ac6d6614775d5c20ee41c36 wallet: Make -walletdir network only (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  With this PR `bitcoind -regtest` doesn't run if bitcoin.conf has\n  ```\n  walletdir=/mnt/mydisk/wallets\n  ```\n  But works with\n  ```\n  [regtest]\n  walletdir=/mnt/mydisk/wallets\n  ```\n\n  Doesn't change mainnet behavior.\n\n  Closes #15630.\n\nACKs for top commit:\n  ryanofsky:\n    ACK 3c2c439dcd8797019ac6d6614775d5c20ee41c36\n  MarcoFalke:\n    ACK 3c2c439dcd8797019ac6d6614775d5c20ee41c36 \ud83c\udf48\n  meshcollider:\n    Tested ACK 3c2c439dcd8797019ac6d6614775d5c20ee41c36\n\nTree-SHA512: 8ab3b2db5f3f9cab78b36baaf490c80f7330372cfd8f73fe6536c8fb4c6e55e09f62296feb70617075838b3bcd7101abebbef3b228b6c3dbd42ce8c7a5c372d9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b79caf658019de2c65a53c9e11fd1d2f4c369b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b79caf658019de2c65a53c9e11fd1d2f4c369b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b79caf658019de2c65a53c9e11fd1d2f4c369b6/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4effd67bf407e25e776a37739c6ca103e1f26d74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4effd67bf407e25e776a37739c6ca103e1f26d74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4effd67bf407e25e776a37739c6ca103e1f26d74"
      },
      {
        "sha": "3c2c439dcd8797019ac6d6614775d5c20ee41c36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c2c439dcd8797019ac6d6614775d5c20ee41c36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c2c439dcd8797019ac6d6614775d5c20ee41c36"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8b09dc9ad025854e31f01c289db56463d5930628",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b79caf658019de2c65a53c9e11fd1d2f4c369b6/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b79caf658019de2c65a53c9e11fd1d2f4c369b6/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=0b79caf658019de2c65a53c9e11fd1d2f4c369b6",
        "patch": "@@ -58,7 +58,7 @@ void WalletInit::AddWalletOptions() const\n     gArgs.AddArg(\"-upgradewallet\", \"Upgrade wallet to latest format on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-wallet=<path>\", \"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-walletbroadcast\",  strprintf(\"Make the wallet broadcast transactions (default: %u)\", DEFAULT_WALLETBROADCAST), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n #if HAVE_SYSTEM\n     gArgs.AddArg(\"-walletnotify=<cmd>\", \"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n #endif"
      }
    ]
  },
  {
    "sha": "27d82b63fb8869716d2f103fd381c2413bde4d1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2Q4MmI2M2ZiODg2OTcxNmQyZjEwM2ZkMzgxYzI0MTNiZGU0ZDFi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-22T23:12:00Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-22T23:44:43Z"
      },
      "message": "gui: remove macOS start on login code\n\nThe macOS startup item code was disabled for builds targeting macOS >\n10.11 in #15208. Now that we require macOS 10.12 as a minimum, #17550,\nwe can remove the startup item code entirely, as the API we were using\nwas removed in macOS 10.12.",
      "tree": {
        "sha": "c3857aa1e60aa2a810a1297b1cb722b1e13e7b48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3857aa1e60aa2a810a1297b1cb722b1e13e7b48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27d82b63fb8869716d2f103fd381c2413bde4d1b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3Ycu4ACgkQLuufXMCV\nJsGyiQ//Zyjgp5PZMo6hpLxfrIlRa55wY+Dw91ogfNqCdWOImL42jv/K5BBMSNdf\nXlSed/Ts/gayKk8XO49yyK/NwDvRLBjINpPjnPczYmD3fzWE8G0TherFnGh2m0e6\nhcMY1h5samFcXKWNEKcZbuSUwYtRHl07Bxbw2fFxS3yssrgy4FxINXBpcARVrQJT\n9Om+fWi1Wfx7/LcG5fMW9CmhK/Ryk7wCessrYV2EWFlr7eDCsvxXOvPkj+G6KY80\nhP4gbhThUSEKuFMzSXObEjJFUWPDtvGnQy7UJcdLlNDwoAZNBj08WSELKF5ve4or\nDhLdgUwsTciQxjOMy/BN+tzrTT7Hu0dEzaNUfw5FvYxhm+aDpkAL1pVoUaT1infx\nLI0k8yVQA6xI2Hd4eUxBChG0bSOhdJO0OCrW3A7734nDLoX2LK1GXNqrWjnLWumj\nan5VwmuVI6Q7r/Jik/0UpT4PowPHVZPj4uKLPfukXBLctRSX0H53tc63DRGcw7x3\nr5hy4mh4ix4Lpfn2+BXcJN7w/DUS7Ar9DgjFQLtoaVukhFO9LXqixIVbW+RNd1ib\nivvS6PZgnCffCyVsRThiUPD/AQxYmL+ltfoa3DHT2SzVk/gZN1vkoO/ubPQXtP/x\nxP9g/vBFnxtk0jq5WDXUUZx7NeFcE+kH8/XMVQDbxDkBelTRz7g=\n=/OOz\n-----END PGP SIGNATURE-----",
        "payload": "tree c3857aa1e60aa2a810a1297b1cb722b1e13e7b48\nparent 0b79caf658019de2c65a53c9e11fd1d2f4c369b6\nauthor fanquake <fanquake@gmail.com> 1574464320 -0500\ncommitter fanquake <fanquake@gmail.com> 1574466283 -0500\n\ngui: remove macOS start on login code\n\nThe macOS startup item code was disabled for builds targeting macOS >\n10.11 in #15208. Now that we require macOS 10.12 as a minimum, #17550,\nwe can remove the startup item code entirely, as the API we were using\nwas removed in macOS 10.12.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27d82b63fb8869716d2f103fd381c2413bde4d1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27d82b63fb8869716d2f103fd381c2413bde4d1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27d82b63fb8869716d2f103fd381c2413bde4d1b/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b79caf658019de2c65a53c9e11fd1d2f4c369b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b79caf658019de2c65a53c9e11fd1d2f4c369b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b79caf658019de2c65a53c9e11fd1d2f4c369b6"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 3,
      "deletions": 87
    },
    "files": [
      {
        "sha": "0981315190f74471938553c1196114d8f729f42d",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d82b63fb8869716d2f103fd381c2413bde4d1b/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d82b63fb8869716d2f103fd381c2413bde4d1b/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=27d82b63fb8869716d2f103fd381c2413bde4d1b",
        "patch": "@@ -86,6 +86,8 @@ Low-level Changes section below.\n GUI changes\n -----------\n \n+- The \"Start Bitcoin Core on system login\" option has been removed on macOS.\n+\n Wallet\n ------\n "
      },
      {
        "sha": "2bb95354415b54f88e4ead96cdff9637378f7de0",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 84,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d82b63fb8869716d2f103fd381c2413bde4d1b/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d82b63fb8869716d2f103fd381c2413bde4d1b/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=27d82b63fb8869716d2f103fd381c2413bde4d1b",
        "patch": "@@ -54,10 +54,7 @@\n #include <QUrlQuery>\n \n #if defined(Q_OS_MAC)\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n \n-#include <CoreServices/CoreServices.h>\n #include <QProcess>\n \n void ForceActivation();\n@@ -691,87 +688,6 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n     return true;\n }\n \n-\n-#elif defined(Q_OS_MAC) && defined(MAC_OS_X_VERSION_MIN_REQUIRED) && MAC_OS_X_VERSION_MIN_REQUIRED <= 101100\n-// based on: https://github.com/Mozketo/LaunchAtLoginController/blob/master/LaunchAtLoginController.m\n-\n-LSSharedFileListItemRef findStartupItemInList(CFArrayRef listSnapshot, LSSharedFileListRef list, CFURLRef findUrl)\n-{\n-    if (listSnapshot == nullptr) {\n-        return nullptr;\n-    }\n-\n-    // loop through the list of startup items and try to find the bitcoin app\n-    for(int i = 0; i < CFArrayGetCount(listSnapshot); i++) {\n-        LSSharedFileListItemRef item = (LSSharedFileListItemRef)CFArrayGetValueAtIndex(listSnapshot, i);\n-        UInt32 resolutionFlags = kLSSharedFileListNoUserInteraction | kLSSharedFileListDoNotMountVolumes;\n-        CFURLRef currentItemURL = nullptr;\n-\n-#if defined(MAC_OS_X_VERSION_MAX_ALLOWED) && MAC_OS_X_VERSION_MAX_ALLOWED >= 10100\n-        if(&LSSharedFileListItemCopyResolvedURL)\n-            currentItemURL = LSSharedFileListItemCopyResolvedURL(item, resolutionFlags, nullptr);\n-#if defined(MAC_OS_X_VERSION_MIN_REQUIRED) && MAC_OS_X_VERSION_MIN_REQUIRED < 10100\n-        else\n-            LSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, nullptr);\n-#endif\n-#else\n-        LSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, nullptr);\n-#endif\n-\n-        if(currentItemURL) {\n-            if (CFEqual(currentItemURL, findUrl)) {\n-                // found\n-                CFRelease(currentItemURL);\n-                return item;\n-            }\n-            CFRelease(currentItemURL);\n-        }\n-    }\n-    return nullptr;\n-}\n-\n-bool GetStartOnSystemStartup()\n-{\n-    CFURLRef bitcoinAppUrl = CFBundleCopyBundleURL(CFBundleGetMainBundle());\n-    if (bitcoinAppUrl == nullptr) {\n-        return false;\n-    }\n-\n-    LSSharedFileListRef loginItems = LSSharedFileListCreate(nullptr, kLSSharedFileListSessionLoginItems, nullptr);\n-    CFArrayRef listSnapshot = LSSharedFileListCopySnapshot(loginItems, nullptr);\n-    bool res = (findStartupItemInList(listSnapshot, loginItems, bitcoinAppUrl) != nullptr);\n-    CFRelease(bitcoinAppUrl);\n-    CFRelease(loginItems);\n-    CFRelease(listSnapshot);\n-    return res;\n-}\n-\n-bool SetStartOnSystemStartup(bool fAutoStart)\n-{\n-    CFURLRef bitcoinAppUrl = CFBundleCopyBundleURL(CFBundleGetMainBundle());\n-    if (bitcoinAppUrl == nullptr) {\n-        return false;\n-    }\n-\n-    LSSharedFileListRef loginItems = LSSharedFileListCreate(nullptr, kLSSharedFileListSessionLoginItems, nullptr);\n-    CFArrayRef listSnapshot = LSSharedFileListCopySnapshot(loginItems, nullptr);\n-    LSSharedFileListItemRef foundItem = findStartupItemInList(listSnapshot, loginItems, bitcoinAppUrl);\n-\n-    if(fAutoStart && !foundItem) {\n-        // add bitcoin app to startup item list\n-        LSSharedFileListInsertItemURL(loginItems, kLSSharedFileListItemBeforeFirst, nullptr, nullptr, bitcoinAppUrl, nullptr, nullptr);\n-    }\n-    else if(!fAutoStart && foundItem) {\n-        // remove item\n-        LSSharedFileListItemRemove(loginItems, foundItem);\n-    }\n-\n-    CFRelease(bitcoinAppUrl);\n-    CFRelease(loginItems);\n-    CFRelease(listSnapshot);\n-    return true;\n-}\n-#pragma GCC diagnostic pop\n #else\n \n bool GetStartOnSystemStartup() { return false; }"
      },
      {
        "sha": "d48c537c75a32325c2bd7c7260a2bb220613f130",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d82b63fb8869716d2f103fd381c2413bde4d1b/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d82b63fb8869716d2f103fd381c2413bde4d1b/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=27d82b63fb8869716d2f103fd381c2413bde4d1b",
        "patch": "@@ -71,12 +71,10 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n #ifdef Q_OS_MAC\n     /* remove Window tab on Mac */\n     ui->tabWidget->removeTab(ui->tabWidget->indexOf(ui->tabWindow));\n-#if  defined(MAC_OS_X_VERSION_MIN_REQUIRED) && MAC_OS_X_VERSION_MIN_REQUIRED > 101100\n-    /* hide launch at startup option if compiled against macOS > 10.11 (removed API) */\n+    /* hide launch at startup option on macOS */\n     ui->bitcoinAtStartup->setVisible(false);\n     ui->verticalLayout_Main->removeWidget(ui->bitcoinAtStartup);\n     ui->verticalLayout_Main->removeItem(ui->horizontalSpacer_0_Main);\n-#endif\n #endif\n \n     /* remove Wallet tab in case of -disablewallet */"
      }
    ]
  },
  {
    "sha": "596f6460f9fd8273665c8754ccd673d93a4f25f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTZmNjQ2MGY5ZmQ4MjczNjY1Yzg3NTRjY2Q2NzNkOTNhNGYyNWYw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-23T03:41:27Z"
      },
      "message": "Key pool: Move CanGetAddresses call\n\nCall LegacyScriptPubKeyMan::CanGetAddresses directly instead of calling\nCWallet::CanGetAddresses to only query the relevant key manager\n\nThis is a minor change in behavior: call now only happens if a new key needs to\nbe reserved, since if a key is already reserved it might fail unnecessarily.\n\nThis change also serves as a sanity check\nhttps://github.com/bitcoin/bitcoin/pull/16341#discussion_r331238394",
      "tree": {
        "sha": "e61c4da9158cff7385ee7c46d79df719658de673",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e61c4da9158cff7385ee7c46d79df719658de673"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/596f6460f9fd8273665c8754ccd673d93a4f25f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/596f6460f9fd8273665c8754ccd673d93a4f25f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/596f6460f9fd8273665c8754ccd673d93a4f25f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/596f6460f9fd8273665c8754ccd673d93a4f25f0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b79caf658019de2c65a53c9e11fd1d2f4c369b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b79caf658019de2c65a53c9e11fd1d2f4c369b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b79caf658019de2c65a53c9e11fd1d2f4c369b6"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9c5f2b5098d492a8355794bf5a682381d4cd3cb1",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/596f6460f9fd8273665c8754ccd673d93a4f25f0/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/596f6460f9fd8273665c8754ccd673d93a4f25f0/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=596f6460f9fd8273665c8754ccd673d93a4f25f0",
        "patch": "@@ -264,6 +264,10 @@ bool LegacyScriptPubKeyMan::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n \n bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, int64_t& index, CKeyPool& keypool)\n {\n+    if (!CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n     if (!ReserveKeyFromKeyPool(index, keypool, internal)) {\n         return false;\n     }"
      },
      {
        "sha": "89309a01d66046be65978596c31f335bea98d055",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/596f6460f9fd8273665c8754ccd673d93a4f25f0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/596f6460f9fd8273665c8754ccd673d93a4f25f0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=596f6460f9fd8273665c8754ccd673d93a4f25f0",
        "patch": "@@ -3298,9 +3298,6 @@ bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool inter\n         return false;\n     }\n \n-    if (!pwallet->CanGetAddresses(internal)) {\n-        return false;\n-    }\n \n     if (nIndex == -1)\n     {"
      }
    ]
  },
  {
    "sha": "3ed5e6819a50434449d92cb96b9d8d141e8c7d2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWQ1ZTY4MTlhNTA0MzQ0NDlkOTJjYjk2YjlkOGQxNDFlOGM3ZDJi",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-19T17:39:50Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-23T06:30:03Z"
      },
      "message": "refactor: Nuke coincontrol circular dependency",
      "tree": {
        "sha": "1a0c6614e275c53e743f2fb16e9877527d50e6be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a0c6614e275c53e743f2fb16e9877527d50e6be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl3Y0esACgkQQQEIES5+\nqB/fkw//WCVfDlZcgjTBS4H5S4mcdLRbAyO9wjPSqYpFg4jTv+/mpiJSI98W0XZw\nroTf5XQ63sO3AFlIzQTlHoyb4Rb1OT/AL4fQHl8tu4FU9h9DeykkY4jTwEr3EAg/\nUR88/qeURvc2LwucqZKjlLm8hra2bP2brkDoydUhWSKe/T2hNbMIOdeNGlwJ/Dun\nwt7xX0vV5O9/J+Ct2ko71od5nmK2UXCCaUf1GFN0cbISXf2a4QK5qdAKxKYIysf2\njYJdrbHPBrVGR84ne6Q7GEYGve0URVnbPTlVAp5G/HyZf350fxJHVktJs07w3sfe\noAD8XarmvXXKDj1Tt36/OoV4Nl7PTuprEir/hB93AGqu8nVUpDdYZzFmPArHpx/Y\n/A/Wd6QB0iVqbUlyHwOGY59uVEmA6WvWshv6KbmHkJfG6dDkNQDV3Fgxq0gLtdMR\nExoUqxB4lKOSi+aIlil4kMrHmp/GGd9HdROMqshkmdw4C14Juc4gR25N8jxH5r4E\n/fOww7/vM6yrb87OT41sQKKmV0TfoNpqdCWoQYRfJPpxZA4MM/sJdW4u1aCwQ5DN\ny8jVTe+zCBp2dWkGyvO3kY7toH9lW2CSSYTQaKIg5yIKeoeFx3Vl1KyE5qjd0PSs\nQysvW0DlX8iRRUHVG+MjByEbtjdsenHtKZZ6Vl80fdBDzlrEh44=\n=nVWC\n-----END PGP SIGNATURE-----",
        "payload": "tree 1a0c6614e275c53e743f2fb16e9877527d50e6be\nparent 0b79caf658019de2c65a53c9e11fd1d2f4c369b6\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1574185190 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1574490603 +0200\n\nrefactor: Nuke coincontrol circular dependency\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b79caf658019de2c65a53c9e11fd1d2f4c369b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b79caf658019de2c65a53c9e11fd1d2f4c369b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b79caf658019de2c65a53c9e11fd1d2f4c369b6"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9c4c9dbb17253b27d053777fa8db5bc2ee44a0d5",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=3ed5e6819a50434449d92cb96b9d8d141e8c7d2b",
        "patch": "@@ -27,6 +27,7 @@\n #include <wallet/coincontrol.h>\n #include <wallet/fees.h>\n #include <wallet/psbtwallet.h>\n+#include <wallet/wallet.h>\n \n #include <QFontMetrics>\n #include <QScrollBar>"
      },
      {
        "sha": "2893d0ab3d807db84bab9f7bb24b05187ed2c0ff",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=3ed5e6819a50434449d92cb96b9d8d141e8c7d2b",
        "patch": "@@ -6,14 +6,18 @@\n #define BITCOIN_WALLET_COINCONTROL_H\n \n #include <optional.h>\n+#include <outputtype.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <primitives/transaction.h>\n-#include <wallet/wallet.h>\n+#include <script/standard.h>\n \n const int DEFAULT_MIN_DEPTH = 0;\n const int DEFAULT_MAX_DEPTH = 9999999;\n \n+//! Default for -avoidpartialspends\n+static constexpr bool DEFAULT_AVOIDPARTIALSPENDS = false;\n+\n /** Coin Control Features. */\n class CCoinControl\n {"
      },
      {
        "sha": "dd0d2ffbd7d55d55042025d159a0ad6f52c47b86",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=3ed5e6819a50434449d92cb96b9d8d141e8c7d2b",
        "patch": "@@ -8,9 +8,11 @@\n #include <net.h>\n #include <node/context.h>\n #include <outputtype.h>\n+#include <ui_interface.h>\n #include <util/moneystr.h>\n #include <util/system.h>\n #include <util/translation.h>\n+#include <wallet/coincontrol.h>\n #include <wallet/wallet.h>\n #include <walletinitinterface.h>\n "
      },
      {
        "sha": "51df4a9a8b2f41190d6f9b6492b4963f44afa7aa",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3ed5e6819a50434449d92cb96b9d8d141e8c7d2b",
        "patch": "@@ -71,8 +71,6 @@ static const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;\n static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n //! Default for -walletrejectlongchains\n static const bool DEFAULT_WALLET_REJECT_LONG_CHAINS = false;\n-//! Default for -avoidpartialspends\n-static const bool DEFAULT_AVOIDPARTIALSPENDS = false;\n //! -txconfirmtarget default\n static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n //! -walletrbf default"
      },
      {
        "sha": "1538ad77b18a1caec7f820a29bdfb0c541c828b1",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=3ed5e6819a50434449d92cb96b9d8d141e8c7d2b",
        "patch": "@@ -22,7 +22,6 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"qt/sendcoinsdialog -> qt/walletmodel -> qt/sendcoinsdialog\"\n     \"qt/transactiontablemodel -> qt/walletmodel -> qt/transactiontablemodel\"\n     \"txmempool -> validation -> txmempool\"\n-    \"wallet/coincontrol -> wallet/wallet -> wallet/coincontrol\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n     \"policy/fees -> txmempool -> validation -> policy/fees\""
      }
    ]
  },
  {
    "sha": "f6e42256fe8900ed90f9644906b77f97e1600952",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmU0MjI1NmZlODkwMGVkOTBmOTY0NDkwNmI3N2Y5N2UxNjAwOTUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-23T09:28:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-23T09:30:41Z"
      },
      "message": "build: Allow export of environ symbols\n\nThis export was introduced in #17270 which added\n```\n//! Necessary on some platforms\nextern char** environ;\n```",
      "tree": {
        "sha": "faab9d5cf81b6067eee0fc21900834f2934c1574",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/faab9d5cf81b6067eee0fc21900834f2934c1574"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6e42256fe8900ed90f9644906b77f97e1600952",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6e42256fe8900ed90f9644906b77f97e1600952",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6e42256fe8900ed90f9644906b77f97e1600952",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6e42256fe8900ed90f9644906b77f97e1600952/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f15a317602727d24f60d0bbf43f851b33df3228",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f15a317602727d24f60d0bbf43f851b33df3228",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f15a317602727d24f60d0bbf43f851b33df3228"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0c59ab62396c7f6310f8b53561a8ed8daffba3ab",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6e42256fe8900ed90f9644906b77f97e1600952/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6e42256fe8900ed90f9644906b77f97e1600952/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=f6e42256fe8900ed90f9644906b77f97e1600952",
        "patch": "@@ -47,7 +47,8 @@\n \n # Ignore symbols that are exported as part of every executable\n IGNORE_EXPORTS = {\n-'_edata', '_end', '__end__', '_init', '__bss_start', '__bss_start__', '_bss_end__', '__bss_end__', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr'\n+'_edata', '_end', '__end__', '_init', '__bss_start', '__bss_start__', '_bss_end__', '__bss_end__', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr',\n+'environ', '_environ', '__environ',\n }\n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')"
      }
    ]
  },
  {
    "sha": "b509554433cb4bd32852239d0dd195ec059657f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTA5NTU0NDMzY2I0YmQzMjg1MjIzOWQwZGQxOTVlYzA1OTY1N2Y2",
    "commit": {
      "author": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2019-11-23T15:49:16Z"
      },
      "committer": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2019-11-23T15:49:16Z"
      },
      "message": "Added libtest_util library to msvc build configuration.",
      "tree": {
        "sha": "246003db366832f514dc1c4a22f7862270015d50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/246003db366832f514dc1c4a22f7862270015d50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b509554433cb4bd32852239d0dd195ec059657f6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEnTzIanL4SUNC6l/RCkG9w/T6/xwFAl3ZVPwACgkQCkG9w/T6\n/xw75g/+NohRHBtq9Oqi4NhqOy0gPhy4TLrnIzk4Za5snx+KbmqMJihj60B0dI3u\naYL6Bx/0oriTWHxX5BoSNLz1zOpQ4DDgK7e8eHfpEji4te4Vh8q1ZQorJ/VOJDgX\nUMc0ocwkMWL/u5lud9pcBuV9X+i49G4oZ4K+XMSND/LdkjzwJ/M7bwu0LH+tq8sa\nabpo79iephmBfy56cFTO+vuubphRi8fWfmFhilBquvbyJWmtRWdtWeIhNe3YMygp\ntXxm15Eg/SB2BjT9jhQwzPQrxgeFgkwwRpH/Vs+kjBXmuB2NjLW5sI0AZO0pwWeY\nvr8L3gHaMm40zuXe153wDcuF3GdzD5lCOf8BjkBefyhsoYlj18NHc5kYYoCwfyrH\nvjK5UuRJv2iw6TLJUgEQOhNccwm4s3vJthSgMPnUyhapruP5GtO8+Hl717lH4z+/\nbpLYnpY5I2rcBhC6uTyn4BXIyDgMmcseyLlkZtwsGHsLhsnJoOPn6VMoSki5roax\nptdxVqea14sesZl7LVwnC1jRqJu6Dh3IgQZl+sr+jrkP1kM/BFpTX8obIxfnyB8B\n19qpoCEEL0JqelHrjhiOpcXF1CEwgXUcH6n2nXnNwUXd7YTdtEgoQX5rD27AbD2i\nkaTX1DrNh/vr6I0+dp1s1smlix89OPeyYhJFvkjPydXvX3kNQvA=\n=FjsZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 246003db366832f514dc1c4a22f7862270015d50\nparent 4effd67bf407e25e776a37739c6ca103e1f26d74\nauthor Aaron Clauson <aaron@sipsorcery.com> 1574524156 +0000\ncommitter Aaron Clauson <aaron@sipsorcery.com> 1574524156 +0000\n\nAdded libtest_util library to msvc build configuration.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b509554433cb4bd32852239d0dd195ec059657f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b509554433cb4bd32852239d0dd195ec059657f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b509554433cb4bd32852239d0dd195ec059657f6/comments",
    "author": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4effd67bf407e25e776a37739c6ca103e1f26d74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4effd67bf407e25e776a37739c6ca103e1f26d74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4effd67bf407e25e776a37739c6ca103e1f26d74"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 36,
      "deletions": 1
    },
    "files": [
      {
        "sha": "128c1bd8e7b6bd0622eefee3b5be73c47907b1e8",
        "filename": "build_msvc/bench_bitcoin/bench_bitcoin.vcxproj.in",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b509554433cb4bd32852239d0dd195ec059657f6/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b509554433cb4bd32852239d0dd195ec059657f6/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj.in?ref=b509554433cb4bd32852239d0dd195ec059657f6",
        "patch": "@@ -42,6 +42,9 @@\n     <ProjectReference Include=\"..\\libleveldb\\libleveldb.vcxproj\">\n       <Project>{18430fef-6b61-4c53-b396-718e02850f1b}</Project>\n     </ProjectReference>\n+    <ProjectReference Include=\"..\\libtest_util\\libtest_util.vcxproj\">\n+      <Project>{1e065f03-3566-47d0-8fa9-daa72b084e7d}</Project>\n+    </ProjectReference>\n   </ItemGroup>\n   <Target Name=\"RawBenchHeaderGen\" BeforeTargets=\"PrepareForBuild\">\n     <PropertyGroup>"
      },
      {
        "sha": "9dff0e316e5043d2f81f773f3d446e9293022384",
        "filename": "build_msvc/bitcoin.sln",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b509554433cb4bd32852239d0dd195ec059657f6/build_msvc/bitcoin.sln",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b509554433cb4bd32852239d0dd195ec059657f6/build_msvc/bitcoin.sln",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin.sln?ref=b509554433cb4bd32852239d0dd195ec059657f6",
        "patch": "@@ -44,6 +44,8 @@ Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_qt\", \"libbitcoin\n EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-qt\", \"bitcoin-qt\\bitcoin-qt.vcxproj\", \"{7E99172D-7FF2-4CB6-B736-AC9B76ED412A}\"\n EndProject\n+Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libtest_util\", \"libtest_util\\libtest_util.vcxproj\", \"{868474FD-35F6-4400-8EED-30A33E7521D4}\"\n+EndProject\n Global\n     GlobalSection(SolutionConfigurationPlatforms) = preSolution\n         Debug|x64 = Debug|x64\n@@ -220,11 +222,21 @@ Global\n         {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x64.Build.0 = Release|x64\n         {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x86.ActiveCfg = Release|Win32\n         {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x86.Build.0 = Release|Win32\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x64.ActiveCfg = Debug|x64\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x64.Build.0 = Debug|x64\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x86.ActiveCfg = Debug|Win32\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x86.Build.0 = Debug|Win32\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x64.ActiveCfg = Release|x64\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x64.Build.0 = Release|x64\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x86.ActiveCfg = Release|Win32\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x86.Build.0 = Release|Win32\n     EndGlobalSection\n     GlobalSection(SolutionProperties) = preSolution\n         HideSolutionNode = FALSE\n     EndGlobalSection\n     GlobalSection(ExtensibilityGlobals) = postSolution\n-        SolutionGuid = {8AA72EDA-2CD4-4564-B1E4-688B760EEEE9}\n+                        SolutionGuid = {8AA72EDA-2CD4-4564-B1E4-688B760EEEE9}\n+                SolutionGuid = {8607C0F4-F33D-41B8-8D51-18E366A0F8DF}\n+        SolutionGuid = {58AAB032-7274-49BD-845E-5EF4DBB69B70}\n     EndGlobalSection\n EndGlobal"
      },
      {
        "sha": "b5e844010e9197706dc0d75582fe2d3983bebfb5",
        "filename": "build_msvc/libtest_util/libtest_util.vcxproj.in",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b509554433cb4bd32852239d0dd195ec059657f6/build_msvc/libtest_util/libtest_util.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b509554433cb4bd32852239d0dd195ec059657f6/build_msvc/libtest_util/libtest_util.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libtest_util/libtest_util.vcxproj.in?ref=b509554433cb4bd32852239d0dd195ec059657f6",
        "patch": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+  <Import Project=\"..\\common.init.vcxproj\" />\n+  <PropertyGroup Label=\"Globals\">\n+    <ProjectGuid>{868474FD-35F6-4400-8EED-30A33E7521D4}</ProjectGuid>\n+  </PropertyGroup>\n+  <PropertyGroup Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+  </PropertyGroup>\n+  <ItemGroup>\n+@SOURCE_FILES@\n+  </ItemGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n+</Project>"
      },
      {
        "sha": "39514384086a65ac93d43c90bcef39b2e028014a",
        "filename": "build_msvc/msvc-autogen.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b509554433cb4bd32852239d0dd195ec059657f6/build_msvc/msvc-autogen.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b509554433cb4bd32852239d0dd195ec059657f6/build_msvc/msvc-autogen.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/msvc-autogen.py?ref=b509554433cb4bd32852239d0dd195ec059657f6",
        "patch": "@@ -18,6 +18,7 @@\n     'libbitcoin_wallet',\n     'libbitcoin_zmq',\n     'bench_bitcoin',\n+    'libtest_util',\n ]\n \n ignore_list = ["
      },
      {
        "sha": "96d20a2720490d27c536ef18a5b92784ba607c50",
        "filename": "build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b509554433cb4bd32852239d0dd195ec059657f6/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b509554433cb4bd32852239d0dd195ec059657f6/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin/test_bitcoin.vcxproj?ref=b509554433cb4bd32852239d0dd195ec059657f6",
        "patch": "@@ -42,6 +42,9 @@\n     <ProjectReference Include=\"..\\libbitcoin_zmq\\libbitcoin_zmq.vcxproj\">\n       <Project>{792d487f-f14c-49fc-a9de-3fc150f31c3f}</Project>\n     </ProjectReference>\n+    <ProjectReference Include=\"..\\libtest_util\\libtest_util.vcxproj\">\n+      <Project>{1e065f03-3566-47d0-8fa9-daa72b084e7d}</Project>\n+    </ProjectReference>\n     <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n       <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n     </ProjectReference>"
      }
    ]
  },
  {
    "sha": "33c103e2fe67e32e9f4e783fa243dd2bba6b1682",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2MxMDNlMmZlNjdlMzJlOWY0ZTc4M2ZhMjQzZGQyYmJhNmIxNjgy",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-23T16:16:46Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-23T16:30:15Z"
      },
      "message": "Merge #17539: doc: Update and improve Developer Notes\n\n794fe91395c79f46a6d920bc08de5a0551b359a3 doc: Update and improve Developer Notes (Hennadii Stepanov)\n\nPull request description:\n\n  This PR:\n  - removes outdated things, e.g., global pointer `pwalletMain` etc\n  - adds \"Sanitizers\" to the TOC\n  - makes filenames, `peer.dat` and `debug.log`, monospaced\n  - specifies that _compile-time_ constant names are all uppercase\n  - rewords using `explicit` with constructors\n\nACKs for top commit:\n  jamesob:\n    lazy ACK https://github.com/bitcoin/bitcoin/pull/17539/commits/794fe91395c79f46a6d920bc08de5a0551b359a3\n  practicalswift:\n    ACK 794fe91395c79f46a6d920bc08de5a0551b359a3 -- nice improvements!\n\nTree-SHA512: 2c5f035b1627f5fac8dc2453199d9e46bd101f86771de567cd95698de3c61cc459444ec1a68710e1d280195e1e40b42d9f40906297d12f12bf37749eca58297d",
      "tree": {
        "sha": "2837b098305d95cfd7385cf8955030604629a42e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2837b098305d95cfd7385cf8955030604629a42e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33c103e2fe67e32e9f4e783fa243dd2bba6b1682",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3ZXpcACgkQLuufXMCV\nJsFHtxAAitL/zPIosvooQEzw5Zmft6M+sNdcq3jdwPoAVN95vqiHBGs3vgIUTDDb\n9plcI44PlxCvcRnNv8G7Ndsd7rVDa2QkApxACwNDL7FvRBSJjdoETbKDWdN4NRbX\nazQ0ZU8e4Ei0JCy2+JWSsKZ4o0a4sKMch0czx/hcHNA0WeUX+Fa/5HDYFqC8dzAG\nvIbdIN4+X1FGTkHEQ2AcS/63xSiu1/NJCcYFAlwtXLuJnqm/KCnJh2AWChHTso4W\n1xlc6KFPvF18CPFqqtC0LqI7tJAvqereSrPcEV/3A1zSnAEX7UIARpkoW/unWHbi\nOmhr1pDrU0ml7JonzR8appJi3wd5f9YPrv9TiGFn4d4lpRBkFbest1r0PvXF0DnQ\nMD0Dm/aalq4il8JTSNojvEHbGf7sIWbIqX90DQbmXOB6hUcKWxt+N0aBrJZ60PuG\nGQ2JKq9cTFyXww1N9iPbTe394w4bG6vGBuLupwvNugR2gQ4FYfQUDhbsx8CU2LVu\nEU03zKvLwfZkWeV5z282xQAlBxAWc3d0qh10YE+k0qXG5Wf8O2u70/vqaBNbZqqK\n0pIn6RDWQ+mgqV5Cyx5lwee4/eJ0rHbUYCyFjfw3TfEi94vcZ02WASXzWbdmz0Ej\nWcEFh0H27c89mYbBaFYRCrH2QMSm1QYtG+RU04a6slNTtWIpoIs=\n=Q7Q/\n-----END PGP SIGNATURE-----",
        "payload": "tree 2837b098305d95cfd7385cf8955030604629a42e\nparent 0b79caf658019de2c65a53c9e11fd1d2f4c369b6\nparent 794fe91395c79f46a6d920bc08de5a0551b359a3\nauthor fanquake <fanquake@gmail.com> 1574525806 -0500\ncommitter fanquake <fanquake@gmail.com> 1574526615 -0500\n\nMerge #17539: doc: Update and improve Developer Notes\n\n794fe91395c79f46a6d920bc08de5a0551b359a3 doc: Update and improve Developer Notes (Hennadii Stepanov)\n\nPull request description:\n\n  This PR:\n  - removes outdated things, e.g., global pointer `pwalletMain` etc\n  - adds \"Sanitizers\" to the TOC\n  - makes filenames, `peer.dat` and `debug.log`, monospaced\n  - specifies that _compile-time_ constant names are all uppercase\n  - rewords using `explicit` with constructors\n\nACKs for top commit:\n  jamesob:\n    lazy ACK https://github.com/bitcoin/bitcoin/pull/17539/commits/794fe91395c79f46a6d920bc08de5a0551b359a3\n  practicalswift:\n    ACK 794fe91395c79f46a6d920bc08de5a0551b359a3 -- nice improvements!\n\nTree-SHA512: 2c5f035b1627f5fac8dc2453199d9e46bd101f86771de567cd95698de3c61cc459444ec1a68710e1d280195e1e40b42d9f40906297d12f12bf37749eca58297d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33c103e2fe67e32e9f4e783fa243dd2bba6b1682",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33c103e2fe67e32e9f4e783fa243dd2bba6b1682",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33c103e2fe67e32e9f4e783fa243dd2bba6b1682/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b79caf658019de2c65a53c9e11fd1d2f4c369b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b79caf658019de2c65a53c9e11fd1d2f4c369b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b79caf658019de2c65a53c9e11fd1d2f4c369b6"
      },
      {
        "sha": "794fe91395c79f46a6d920bc08de5a0551b359a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/794fe91395c79f46a6d920bc08de5a0551b359a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/794fe91395c79f46a6d920bc08de5a0551b359a3"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 16,
      "deletions": 24
    },
    "files": [
      {
        "sha": "49f60c54ec8627473bdc38096a6f4fecc5f6c48e",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 16,
        "deletions": 24,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33c103e2fe67e32e9f4e783fa243dd2bba6b1682/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33c103e2fe67e32e9f4e783fa243dd2bba6b1682/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=33c103e2fe67e32e9f4e783fa243dd2bba6b1682",
        "patch": "@@ -12,12 +12,13 @@ Developer Notes\n     - [Development tips and tricks](#development-tips-and-tricks)\n         - [Compiling for debugging](#compiling-for-debugging)\n         - [Compiling for gprof profiling](#compiling-for-gprof-profiling)\n-        - [debug.log](#debuglog)\n+        - [`debug.log`](#debuglog)\n         - [Testnet and Regtest modes](#testnet-and-regtest-modes)\n         - [DEBUG_LOCKORDER](#debug_lockorder)\n         - [Valgrind suppressions file](#valgrind-suppressions-file)\n         - [Compiling for test coverage](#compiling-for-test-coverage)\n         - [Performance profiling with perf](#performance-profiling-with-perf)\n+        - [Sanitizers](#sanitizers)\n     - [Locking/mutex usage notes](#lockingmutex-usage-notes)\n     - [Threads](#threads)\n     - [Ignoring IDE/editor files](#ignoring-ideeditor-files)\n@@ -63,7 +64,7 @@ tool to clean up patches automatically before submission.\n   - Braces on the same line for everything else.\n   - 4 space indentation (no tabs) for every block except namespaces.\n   - No indentation for `public`/`protected`/`private` or for `namespace`.\n-  - No extra spaces inside parenthesis; don't do ( this ).\n+  - No extra spaces inside parenthesis; don't do `( this )`.\n   - No space after function names; one space after `if`, `for` and `while`.\n   - If an `if` only has a single-statement `then`-clause, it can appear\n     on the same line as the `if`, without braces. In every other case,\n@@ -77,7 +78,7 @@ code.\n     separate words (snake_case).\n     - Class member variables have a `m_` prefix.\n     - Global variables have a `g_` prefix.\n-  - Constant names are all uppercase, and use `_` to separate words.\n+  - Compile-time constant names are all uppercase, and use `_` to separate words.\n   - Class names, function names, and method names are UpperCamelCase\n     (PascalCase). Do not prefix class names with `C`.\n   - Test suite naming convention: The Boost test suite in file\n@@ -208,15 +209,15 @@ produce better debugging builds.\n \n Run configure with the `--enable-gprof` option, then make.\n \n-### debug.log\n+### `debug.log`\n \n-If the code is behaving strangely, take a look in the debug.log file in the data directory;\n+If the code is behaving strangely, take a look in the `debug.log` file in the data directory;\n error and debugging messages are written there.\n \n The `-debug=...` command-line option controls debugging; running with just `-debug` or `-debug=1` will turn\n-on all categories (and give you a very large debug.log file).\n+on all categories (and give you a very large `debug.log` file).\n \n-The Qt code routes `qDebug()` output to debug.log under category \"qt\": run with `-debug=qt`\n+The Qt code routes `qDebug()` output to `debug.log` under category \"qt\": run with `-debug=qt`\n to see it.\n \n ### Testnet and Regtest modes\n@@ -234,7 +235,7 @@ Bitcoin Core is a multi-threaded application, and deadlocks or other\n multi-threading bugs can be very difficult to track down. The `--enable-debug`\n configure option adds `-DDEBUG_LOCKORDER` to the compiler flags. This inserts\n run-time checks to keep track of which locks are held and adds warnings to the\n-debug.log file if inconsistencies are detected.\n+`debug.log` file if inconsistencies are detected.\n \n ### Valgrind suppressions file\n \n@@ -276,8 +277,7 @@ the functional test framework. Perf can observe a running process and sample\n (at some frequency) where its execution is.\n \n Perf installation is contingent on which kernel version you're running; see\n-[this StackExchange\n-thread](https://askubuntu.com/questions/50145/how-to-install-perf-monitoring-tool)\n+[this thread](https://askubuntu.com/questions/50145/how-to-install-perf-monitoring-tool)\n for specific instructions.\n \n Certain kernel parameters may need to be set for perf to be able to inspect the\n@@ -312,7 +312,7 @@ or using a graphical tool like [Hotspot](https://github.com/KDAB/hotspot).\n See the functional test documentation for how to invoke perf within tests.\n \n \n-**Sanitizers**\n+### Sanitizers\n \n Bitcoin Core can be compiled with various \"sanitizers\" enabled, which add\n instrumentation for issues regarding things like memory safety, thread race\n@@ -373,7 +373,7 @@ Deadlocks due to inconsistent lock ordering (thread 1 locks `cs_main` and then\n `cs_wallet`, while thread 2 locks them in the opposite order: result, deadlock\n as each waits for the other to release its lock) are a problem. Compile with\n `-DDEBUG_LOCKORDER` (or use `--enable-debug`) to get lock order inconsistencies\n-reported in the debug.log file.\n+reported in the `debug.log` file.\n \n Re-architecting the core code so there are better-defined interfaces\n between the various components is a goal, with any necessary locking\n@@ -387,8 +387,6 @@ Threads\n \n - ThreadImport : Loads blocks from `blk*.dat` files or `-loadblock=<file>`.\n \n-- StartNode : Starts other threads.\n-\n - ThreadDNSAddressSeed : Loads addresses of peers from the DNS.\n \n - ThreadMapPort : Universal plug-and-play startup/shutdown.\n@@ -401,7 +399,7 @@ Threads\n \n - ThreadMessageHandler : Higher-level message handling (sending and receiving).\n \n-- DumpAddresses : Dumps IP addresses of nodes to peers.dat.\n+- DumpAddresses : Dumps IP addresses of nodes to `peers.dat`.\n \n - ThreadRPCServer : Remote procedure call handler, listens on port 8332 for connections and services them.\n \n@@ -467,11 +465,6 @@ Wallet\n \n - Make sure that no crashes happen with run-time option `-disablewallet`.\n \n-  - *Rationale*: In RPC code that conditionally uses the wallet (such as\n-    `validateaddress`), it is easy to forget that global pointer `pwalletMain`\n-    can be nullptr. See `test/functional/disablewallet.py` for functional tests\n-    exercising the API with `-disablewallet`.\n-\n - Include `db_cxx.h` (BerkeleyDB header) only when `ENABLE_WALLET` is set.\n \n   - *Rationale*: Otherwise compilation of the disable-wallet build will fail in environments without BerkeleyDB.\n@@ -546,11 +539,10 @@ class A\n }\n ```\n \n-- By default, declare single-argument constructors `explicit`.\n+- By default, declare constructors `explicit`.\n \n-  - *Rationale*: This is a precaution to avoid unintended conversions that might\n-    arise when single-argument constructors are used as implicit conversion\n-    functions.\n+  - *Rationale*: This is a precaution to avoid unintended\n+    [conversions](https://en.cppreference.com/w/cpp/language/converting_constructor).\n \n - Use explicitly signed or unsigned `char`s, or even better `uint8_t` and\n   `int8_t`. Do not use bare `char` unless it is to pass to a third-party API."
      }
    ]
  },
  {
    "sha": "2c98e2024d52778259474b03b96448bc3a173632",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzk4ZTIwMjRkNTI3NzgyNTk0NzRiMDNiOTY0NDhiYzNhMTczNjMy",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-23T17:28:12Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-23T17:39:16Z"
      },
      "message": "Merge #17571: Add libtest_util library to msvc build configuration\n\nb509554433cb4bd32852239d0dd195ec059657f6 Added libtest_util library to msvc build configuration. (Aaron Clauson)\n\nPull request description:\n\n  libtest_util was introduced in #17542. This PR adds the msvc build configuration.\n\nACKs for top commit:\n  fanquake:\n    ACK b509554433cb4bd32852239d0dd195ec059657f6 - Appveyor looks good.\n\nTree-SHA512: abd9f8427375ae0e75e8227d853cccc666fd9e906038d97b787d9185dec1024232a6c64301e26e66fcaf86492183328abe4a7abd7af3321f062cd8722eb83b4c",
      "tree": {
        "sha": "f5d65f2ddffd3721255ba729f74dc7df1e0f3451",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5d65f2ddffd3721255ba729f74dc7df1e0f3451"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c98e2024d52778259474b03b96448bc3a173632",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3ZbsQACgkQLuufXMCV\nJsHrpQ/+KxrkzWGdj0JjAUSc52lXCCF1YQDWlotyWiLtYGvwfwApgBv85oMaKAR1\nJemVOTCqHXMQ/7ln+F2hXB+xhstXeI8EJ6YoHt/HoNY5NTN1JhlreZ4iduXXwuK2\nWbaLiZeer8BEfi3eYR31xyiFT1AkOTVWLlND1OcaCR/MvCreKlFdx2ggtilnaig8\nM2011L/ptudU3XNxdWEeDPHibWdQMrPIs/0We7qJZrLIL7aNtdzqO6L3G9Hy4X7s\nWmDJObzAew2RDzdPWdtIaY/K8VIF0MofhU7qiKcsAv2Ek3u08P/Yl55Vpvo0iPCC\nvKt1z97Z9W84R3nYaGCJTFbuZdyfgVZpN/H3Gj06M1cSbH2XQnO8TMVxkKYIlpbr\n7PIR1bIuJzkxjs/F7KiLdo7YCdsDxG6XM6iu9W9JXq6+GQ+Yw4fxpdI9pvcg0nRd\n+fV1p9p0skty1/E7leLOoMhEB3l5YPn1nKvLU6FLRLDapBMt4Va4WBXl2KjxpvDg\n5goLDY0Dg5ZeOcjj7247uPA6MZ3e93hJFGqFgx/0Ne/ZCFTdf6l98rt8psFd0K5t\nAZAzgex4CpzRQex8oAF3yFS6I9FT0pqHv7JRIBOnwvFW/pA6p6Hp9FGaUUF18uke\nN3lM7CEc0cm41nrP5+gUeYM0sTesICn6kmjwmY2iOAc6fvB7vCc=\n=15sm\n-----END PGP SIGNATURE-----",
        "payload": "tree f5d65f2ddffd3721255ba729f74dc7df1e0f3451\nparent 33c103e2fe67e32e9f4e783fa243dd2bba6b1682\nparent b509554433cb4bd32852239d0dd195ec059657f6\nauthor fanquake <fanquake@gmail.com> 1574530092 -0500\ncommitter fanquake <fanquake@gmail.com> 1574530756 -0500\n\nMerge #17571: Add libtest_util library to msvc build configuration\n\nb509554433cb4bd32852239d0dd195ec059657f6 Added libtest_util library to msvc build configuration. (Aaron Clauson)\n\nPull request description:\n\n  libtest_util was introduced in #17542. This PR adds the msvc build configuration.\n\nACKs for top commit:\n  fanquake:\n    ACK b509554433cb4bd32852239d0dd195ec059657f6 - Appveyor looks good.\n\nTree-SHA512: abd9f8427375ae0e75e8227d853cccc666fd9e906038d97b787d9185dec1024232a6c64301e26e66fcaf86492183328abe4a7abd7af3321f062cd8722eb83b4c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c98e2024d52778259474b03b96448bc3a173632",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c98e2024d52778259474b03b96448bc3a173632",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c98e2024d52778259474b03b96448bc3a173632/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33c103e2fe67e32e9f4e783fa243dd2bba6b1682",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33c103e2fe67e32e9f4e783fa243dd2bba6b1682",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33c103e2fe67e32e9f4e783fa243dd2bba6b1682"
      },
      {
        "sha": "b509554433cb4bd32852239d0dd195ec059657f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b509554433cb4bd32852239d0dd195ec059657f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b509554433cb4bd32852239d0dd195ec059657f6"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 36,
      "deletions": 1
    },
    "files": [
      {
        "sha": "128c1bd8e7b6bd0622eefee3b5be73c47907b1e8",
        "filename": "build_msvc/bench_bitcoin/bench_bitcoin.vcxproj.in",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c98e2024d52778259474b03b96448bc3a173632/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c98e2024d52778259474b03b96448bc3a173632/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj.in?ref=2c98e2024d52778259474b03b96448bc3a173632",
        "patch": "@@ -42,6 +42,9 @@\n     <ProjectReference Include=\"..\\libleveldb\\libleveldb.vcxproj\">\n       <Project>{18430fef-6b61-4c53-b396-718e02850f1b}</Project>\n     </ProjectReference>\n+    <ProjectReference Include=\"..\\libtest_util\\libtest_util.vcxproj\">\n+      <Project>{1e065f03-3566-47d0-8fa9-daa72b084e7d}</Project>\n+    </ProjectReference>\n   </ItemGroup>\n   <Target Name=\"RawBenchHeaderGen\" BeforeTargets=\"PrepareForBuild\">\n     <PropertyGroup>"
      },
      {
        "sha": "9dff0e316e5043d2f81f773f3d446e9293022384",
        "filename": "build_msvc/bitcoin.sln",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c98e2024d52778259474b03b96448bc3a173632/build_msvc/bitcoin.sln",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c98e2024d52778259474b03b96448bc3a173632/build_msvc/bitcoin.sln",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin.sln?ref=2c98e2024d52778259474b03b96448bc3a173632",
        "patch": "@@ -44,6 +44,8 @@ Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_qt\", \"libbitcoin\n EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-qt\", \"bitcoin-qt\\bitcoin-qt.vcxproj\", \"{7E99172D-7FF2-4CB6-B736-AC9B76ED412A}\"\n EndProject\n+Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libtest_util\", \"libtest_util\\libtest_util.vcxproj\", \"{868474FD-35F6-4400-8EED-30A33E7521D4}\"\n+EndProject\n Global\n     GlobalSection(SolutionConfigurationPlatforms) = preSolution\n         Debug|x64 = Debug|x64\n@@ -220,11 +222,21 @@ Global\n         {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x64.Build.0 = Release|x64\n         {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x86.ActiveCfg = Release|Win32\n         {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x86.Build.0 = Release|Win32\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x64.ActiveCfg = Debug|x64\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x64.Build.0 = Debug|x64\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x86.ActiveCfg = Debug|Win32\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x86.Build.0 = Debug|Win32\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x64.ActiveCfg = Release|x64\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x64.Build.0 = Release|x64\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x86.ActiveCfg = Release|Win32\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x86.Build.0 = Release|Win32\n     EndGlobalSection\n     GlobalSection(SolutionProperties) = preSolution\n         HideSolutionNode = FALSE\n     EndGlobalSection\n     GlobalSection(ExtensibilityGlobals) = postSolution\n-        SolutionGuid = {8AA72EDA-2CD4-4564-B1E4-688B760EEEE9}\n+                        SolutionGuid = {8AA72EDA-2CD4-4564-B1E4-688B760EEEE9}\n+                SolutionGuid = {8607C0F4-F33D-41B8-8D51-18E366A0F8DF}\n+        SolutionGuid = {58AAB032-7274-49BD-845E-5EF4DBB69B70}\n     EndGlobalSection\n EndGlobal"
      },
      {
        "sha": "b5e844010e9197706dc0d75582fe2d3983bebfb5",
        "filename": "build_msvc/libtest_util/libtest_util.vcxproj.in",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c98e2024d52778259474b03b96448bc3a173632/build_msvc/libtest_util/libtest_util.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c98e2024d52778259474b03b96448bc3a173632/build_msvc/libtest_util/libtest_util.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libtest_util/libtest_util.vcxproj.in?ref=2c98e2024d52778259474b03b96448bc3a173632",
        "patch": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+  <Import Project=\"..\\common.init.vcxproj\" />\n+  <PropertyGroup Label=\"Globals\">\n+    <ProjectGuid>{868474FD-35F6-4400-8EED-30A33E7521D4}</ProjectGuid>\n+  </PropertyGroup>\n+  <PropertyGroup Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+  </PropertyGroup>\n+  <ItemGroup>\n+@SOURCE_FILES@\n+  </ItemGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n+</Project>"
      },
      {
        "sha": "39514384086a65ac93d43c90bcef39b2e028014a",
        "filename": "build_msvc/msvc-autogen.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c98e2024d52778259474b03b96448bc3a173632/build_msvc/msvc-autogen.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c98e2024d52778259474b03b96448bc3a173632/build_msvc/msvc-autogen.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/msvc-autogen.py?ref=2c98e2024d52778259474b03b96448bc3a173632",
        "patch": "@@ -18,6 +18,7 @@\n     'libbitcoin_wallet',\n     'libbitcoin_zmq',\n     'bench_bitcoin',\n+    'libtest_util',\n ]\n \n ignore_list = ["
      },
      {
        "sha": "96d20a2720490d27c536ef18a5b92784ba607c50",
        "filename": "build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c98e2024d52778259474b03b96448bc3a173632/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c98e2024d52778259474b03b96448bc3a173632/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin/test_bitcoin.vcxproj?ref=2c98e2024d52778259474b03b96448bc3a173632",
        "patch": "@@ -42,6 +42,9 @@\n     <ProjectReference Include=\"..\\libbitcoin_zmq\\libbitcoin_zmq.vcxproj\">\n       <Project>{792d487f-f14c-49fc-a9de-3fc150f31c3f}</Project>\n     </ProjectReference>\n+    <ProjectReference Include=\"..\\libtest_util\\libtest_util.vcxproj\">\n+      <Project>{1e065f03-3566-47d0-8fa9-daa72b084e7d}</Project>\n+    </ProjectReference>\n     <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n       <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n     </ProjectReference>"
      }
    ]
  },
  {
    "sha": "02d8c56a18b9a2960888d6ec1209955105bae847",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmQ4YzU2YTE4YjlhMjk2MDg4OGQ2ZWMxMjA5OTU1MTA1YmFlODQ3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-23T16:42:23Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-23T21:06:34Z"
      },
      "message": "Seed RNG with precision timestamps on receipt of net messages.",
      "tree": {
        "sha": "9013a23918ed55059a39fa56ae93ef6951456607",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9013a23918ed55059a39fa56ae93ef6951456607"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02d8c56a18b9a2960888d6ec1209955105bae847",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d8c56a18b9a2960888d6ec1209955105bae847",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02d8c56a18b9a2960888d6ec1209955105bae847",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d8c56a18b9a2960888d6ec1209955105bae847/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33c103e2fe67e32e9f4e783fa243dd2bba6b1682",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33c103e2fe67e32e9f4e783fa243dd2bba6b1682",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33c103e2fe67e32e9f4e783fa243dd2bba6b1682"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 51,
      "deletions": 0
    },
    "files": [
      {
        "sha": "99dae88bab7155d2043b8a218c377e91e1765a2e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02d8c56a18b9a2960888d6ec1209955105bae847/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02d8c56a18b9a2960888d6ec1209955105bae847/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=02d8c56a18b9a2960888d6ec1209955105bae847",
        "patch": "@@ -16,6 +16,7 @@\n #include <crypto/sha256.h>\n #include <netbase.h>\n #include <net_permissions.h>\n+#include <random.h>\n #include <scheduler.h>\n #include <ui_interface.h>\n #include <util/strencodings.h>\n@@ -445,6 +446,9 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false, block_relay_only);\n     pnode->AddRef();\n \n+    // We're making a new connection, harvest entropy from the time (and our peer count)\n+    RandAddEvent((uint32_t)id);\n+\n     return pnode;\n }\n \n@@ -693,6 +697,9 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     msg.m_message_size = hdr.nMessageSize;\n     msg.m_raw_message_size = hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n \n+    // We just received a message off the wire, harvest entropy from the time (and the message checksum)\n+    RandAddEvent(ReadLE32(hash.begin()));\n+\n     msg.m_valid_checksum = (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) == 0);\n     if (!msg.m_valid_checksum) {\n         LogPrint(BCLog::NET, \"CHECKSUM ERROR (%s, %u bytes), expected %s was %s\\n\",\n@@ -1017,6 +1024,9 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n     }\n+\n+    // We received a new connection, harvest entropy from the time (and our peer count)\n+    RandAddEvent((uint32_t)id);\n }\n \n void CConnman::DisconnectNodes()"
      },
      {
        "sha": "09777237c20758367edec6fcba8c621f04de2f81",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02d8c56a18b9a2960888d6ec1209955105bae847/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02d8c56a18b9a2960888d6ec1209955105bae847/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=02d8c56a18b9a2960888d6ec1209955105bae847",
        "patch": "@@ -6,6 +6,7 @@\n #include <random.h>\n \n #include <compat/cpuid.h>\n+#include <crypto/sha256.h>\n #include <crypto/sha512.h>\n #include <support/cleanse.h>\n #ifdef WIN32\n@@ -449,6 +450,23 @@ static void SeedFast(CSHA512& hasher) noexcept\n     SeedTimestamp(hasher);\n }\n \n+// We use only SHA256 for the events hashing to get the ASM speedups we have for SHA256,\n+// since we want it to be fast as network peers may be able to trigger it repeatedly.\n+static Mutex events_mutex;\n+static CSHA256 events_hasher;\n+static void SeedEvents(CSHA512& hasher)\n+{\n+    LOCK(events_mutex);\n+\n+    unsigned char events_hash[32];\n+    events_hasher.Finalize(events_hash);\n+    hasher.Write(events_hash, 32);\n+\n+    // Re-initialize the hasher with the finalized state to use later.\n+    events_hasher.Reset();\n+    events_hasher.Write(events_hash, 32);\n+}\n+\n static void SeedSlow(CSHA512& hasher) noexcept\n {\n     unsigned char buffer[32];\n@@ -460,6 +478,9 @@ static void SeedSlow(CSHA512& hasher) noexcept\n     GetOSRand(buffer);\n     hasher.Write(buffer, sizeof(buffer));\n \n+    // Add the events hasher into the mix\n+    SeedEvents(hasher);\n+\n     // High-precision timestamp.\n     //\n     // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n@@ -485,6 +506,9 @@ static void SeedPeriodic(CSHA512& hasher, RNGState& rng)\n     // High-precision timestamp\n     SeedTimestamp(hasher);\n \n+    // Add the events hasher into the mix\n+    SeedEvents(hasher);\n+\n     // Dynamic environment data (performance monitoring, ...)\n     auto old_size = hasher.Size();\n     RandAddDynamicEnv(hasher);\n@@ -553,6 +577,15 @@ void GetRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNG\n void GetStrongRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::SLOW); }\n void RandAddPeriodic() { ProcRand(nullptr, 0, RNGLevel::PERIODIC); }\n \n+void RandAddEvent(const uint32_t event_info) {\n+    LOCK(events_mutex);\n+    events_hasher.Write((const unsigned char *)&event_info, sizeof(event_info));\n+    // Get the low four bytes of the performance counter. This translates to roughly the\n+    // subsecond part.\n+    uint32_t perfcounter = (GetPerformanceCounter() & 0xffffffff);\n+    events_hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n+\n bool g_mock_deterministic_tests{false};\n \n uint64_t GetRand(uint64_t nMax) noexcept"
      },
      {
        "sha": "b6e70fcb1fc6774416b136bd84d95b9cb0e2e16e",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02d8c56a18b9a2960888d6ec1209955105bae847/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02d8c56a18b9a2960888d6ec1209955105bae847/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=02d8c56a18b9a2960888d6ec1209955105bae847",
        "patch": "@@ -89,6 +89,14 @@ void GetStrongRandBytes(unsigned char* buf, int num) noexcept;\n  */\n void RandAddPeriodic();\n \n+/**\n+ * Gathers entropy from the low bits of the time at which events occur. Should\n+ * be called with a uint32_t describing the event at the time an event occurs.\n+ *\n+ * Thread-safe.\n+ */\n+void RandAddEvent(const uint32_t event_info);\n+\n /**\n  * Fast randomness source. This is seeded once with secure random data, but\n  * is completely deterministic and does not gather more entropy after that."
      }
    ]
  },
  {
    "sha": "9cbd87d8ee2910ac55c215451453e5162e1c377a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2JkODdkOGVlMjkxMGFjNTVjMjE1NDUxNDUzZTUxNjJlMWMzNzdh",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-24T05:26:03Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-24T05:26:17Z"
      },
      "message": "Merge #17518: refactor, wallet: Nuke coincontrol circular dependency\n\n3ed5e6819a50434449d92cb96b9d8d141e8c7d2b refactor: Nuke coincontrol circular dependency (Hennadii Stepanov)\n\nPull request description:\n\n  This PR gets rid of `wallet/coincontrol` -> `wallet/wallet` -> `wallet/coincontrol` circular dependency.\n\nACKs for top commit:\n  Sjors:\n    re-ACK 3ed5e6819a50434449d92cb96b9d8d141e8c7d2b\n  meshcollider:\n    utACK 3ed5e6819a50434449d92cb96b9d8d141e8c7d2b\n\nTree-SHA512: 7fbceb74a9cd04157170df158d2deb979cf397df818376b478224d2423f1d8504a8688e3a9b8fc527da73e4a34ab6bc4a98be0cc2937e102a063ab2ac553e86d",
      "tree": {
        "sha": "b1c112f792be2cdbe72ca6748718d6aa7e9964a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1c112f792be2cdbe72ca6748718d6aa7e9964a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cbd87d8ee2910ac55c215451453e5162e1c377a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAl3aFHkACgkQ0wARbhyH\nWj3YsA/+OSKV4CBKwE05kX570YL21jaSKkI9lHmiu2i2UfxhQc2BecmASzLJ8tAY\nAkeWMpBW3SVchnZWPw7hpD/FwpVGhALOzsQjRI8KASHVMKEeObRp00T5Zg4T2d/7\ntGR9bGhHB9wKxqMd+xwfoDrh+t99ViZC/af6sx8koQOzJOfgcj6uuChEufPa+SUA\nRL+oh7/ytcf2+6W2uDstUnBBmUj8MOoHuAmh8QYd1cwCgS+UJBGNIMfybIKe2lac\nPGuy9iypfb+8LEwrA+meAZdBkMd+3LJhd+/gKqpQdNr2n0SLDbKdKMm4YxkgQXeE\nB2PALa5fGZ9fNhKQWaUnITCOx5pYGwSCRHwPP4Fj+AC4l5SgaER+gT1VeIyGKkWj\ngTmjqR1kFjLn2p9Y4hXXs754VjbJiyN2H8fnSr9CPXN8ha3LDt+QECRXomV543vd\nMVd7Lmc9TkZeDpVZgfnWV8qGZ+E2rzpF4v04pyT5YpiTzm4SrckFIOb0os2n+bBX\nIZk6GE5IiwL22s6yKLURhnK323+eJJgJK35M82TZ/RAkvkZOu0z81xYjiE0sR0iE\nyGj7XQKtMNTsuYz6CwV9QhmHvyDE+1ICkS0m0ST8rg50KG7DFKMPL8gE+/HL3t0/\nORn1RiJIg2ftD7n6U0jdcyqtgwD3nQxTrQwxz6r2EmX9Q7qDLRk=\n=hsmb\n-----END PGP SIGNATURE-----",
        "payload": "tree b1c112f792be2cdbe72ca6748718d6aa7e9964a1\nparent 2c98e2024d52778259474b03b96448bc3a173632\nparent 3ed5e6819a50434449d92cb96b9d8d141e8c7d2b\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1574573163 +1300\ncommitter Samuel Dobson <dobsonsa68@gmail.com> 1574573177 +1300\n\nMerge #17518: refactor, wallet: Nuke coincontrol circular dependency\n\n3ed5e6819a50434449d92cb96b9d8d141e8c7d2b refactor: Nuke coincontrol circular dependency (Hennadii Stepanov)\n\nPull request description:\n\n  This PR gets rid of `wallet/coincontrol` -> `wallet/wallet` -> `wallet/coincontrol` circular dependency.\n\nACKs for top commit:\n  Sjors:\n    re-ACK 3ed5e6819a50434449d92cb96b9d8d141e8c7d2b\n  meshcollider:\n    utACK 3ed5e6819a50434449d92cb96b9d8d141e8c7d2b\n\nTree-SHA512: 7fbceb74a9cd04157170df158d2deb979cf397df818376b478224d2423f1d8504a8688e3a9b8fc527da73e4a34ab6bc4a98be0cc2937e102a063ab2ac553e86d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cbd87d8ee2910ac55c215451453e5162e1c377a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9cbd87d8ee2910ac55c215451453e5162e1c377a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cbd87d8ee2910ac55c215451453e5162e1c377a/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c98e2024d52778259474b03b96448bc3a173632",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c98e2024d52778259474b03b96448bc3a173632",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c98e2024d52778259474b03b96448bc3a173632"
      },
      {
        "sha": "3ed5e6819a50434449d92cb96b9d8d141e8c7d2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ed5e6819a50434449d92cb96b9d8d141e8c7d2b"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9c4c9dbb17253b27d053777fa8db5bc2ee44a0d5",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cbd87d8ee2910ac55c215451453e5162e1c377a/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cbd87d8ee2910ac55c215451453e5162e1c377a/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=9cbd87d8ee2910ac55c215451453e5162e1c377a",
        "patch": "@@ -27,6 +27,7 @@\n #include <wallet/coincontrol.h>\n #include <wallet/fees.h>\n #include <wallet/psbtwallet.h>\n+#include <wallet/wallet.h>\n \n #include <QFontMetrics>\n #include <QScrollBar>"
      },
      {
        "sha": "2893d0ab3d807db84bab9f7bb24b05187ed2c0ff",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cbd87d8ee2910ac55c215451453e5162e1c377a/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cbd87d8ee2910ac55c215451453e5162e1c377a/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=9cbd87d8ee2910ac55c215451453e5162e1c377a",
        "patch": "@@ -6,14 +6,18 @@\n #define BITCOIN_WALLET_COINCONTROL_H\n \n #include <optional.h>\n+#include <outputtype.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <primitives/transaction.h>\n-#include <wallet/wallet.h>\n+#include <script/standard.h>\n \n const int DEFAULT_MIN_DEPTH = 0;\n const int DEFAULT_MAX_DEPTH = 9999999;\n \n+//! Default for -avoidpartialspends\n+static constexpr bool DEFAULT_AVOIDPARTIALSPENDS = false;\n+\n /** Coin Control Features. */\n class CCoinControl\n {"
      },
      {
        "sha": "dd0d2ffbd7d55d55042025d159a0ad6f52c47b86",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cbd87d8ee2910ac55c215451453e5162e1c377a/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cbd87d8ee2910ac55c215451453e5162e1c377a/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=9cbd87d8ee2910ac55c215451453e5162e1c377a",
        "patch": "@@ -8,9 +8,11 @@\n #include <net.h>\n #include <node/context.h>\n #include <outputtype.h>\n+#include <ui_interface.h>\n #include <util/moneystr.h>\n #include <util/system.h>\n #include <util/translation.h>\n+#include <wallet/coincontrol.h>\n #include <wallet/wallet.h>\n #include <walletinitinterface.h>\n "
      },
      {
        "sha": "51df4a9a8b2f41190d6f9b6492b4963f44afa7aa",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cbd87d8ee2910ac55c215451453e5162e1c377a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cbd87d8ee2910ac55c215451453e5162e1c377a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9cbd87d8ee2910ac55c215451453e5162e1c377a",
        "patch": "@@ -71,8 +71,6 @@ static const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;\n static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n //! Default for -walletrejectlongchains\n static const bool DEFAULT_WALLET_REJECT_LONG_CHAINS = false;\n-//! Default for -avoidpartialspends\n-static const bool DEFAULT_AVOIDPARTIALSPENDS = false;\n //! -txconfirmtarget default\n static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n //! -walletrbf default"
      },
      {
        "sha": "1538ad77b18a1caec7f820a29bdfb0c541c828b1",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cbd87d8ee2910ac55c215451453e5162e1c377a/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cbd87d8ee2910ac55c215451453e5162e1c377a/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=9cbd87d8ee2910ac55c215451453e5162e1c377a",
        "patch": "@@ -22,7 +22,6 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"qt/sendcoinsdialog -> qt/walletmodel -> qt/sendcoinsdialog\"\n     \"qt/transactiontablemodel -> qt/walletmodel -> qt/transactiontablemodel\"\n     \"txmempool -> validation -> txmempool\"\n-    \"wallet/coincontrol -> wallet/wallet -> wallet/coincontrol\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n     \"policy/fees -> txmempool -> validation -> policy/fees\""
      }
    ]
  },
  {
    "sha": "14feda0814a9fecf2138041f7d36fe1ab338797f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGZlZGEwODE0YTlmZWNmMjEzODA0MWY3ZDM2ZmUxYWIzMzg3OTdm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-24T10:12:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-24T10:15:03Z"
      },
      "message": "doc: Add historical release notes for 0.19.0.1\n\nAdd historical release notes for 0.19.0.1. And replace 0.19.0's release\nnotes with a short explanation.",
      "tree": {
        "sha": "df3ad3ac04ac8a627abac6c9a67094dff0fc6317",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df3ad3ac04ac8a627abac6c9a67094dff0fc6317"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14feda0814a9fecf2138041f7d36fe1ab338797f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14feda0814a9fecf2138041f7d36fe1ab338797f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14feda0814a9fecf2138041f7d36fe1ab338797f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14feda0814a9fecf2138041f7d36fe1ab338797f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9cbd87d8ee2910ac55c215451453e5162e1c377a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cbd87d8ee2910ac55c215451453e5162e1c377a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cbd87d8ee2910ac55c215451453e5162e1c377a"
      }
    ],
    "stats": {
      "total": 2175,
      "additions": 1092,
      "deletions": 1083
    },
    "files": [
      {
        "sha": "70b8ec589fa36db6f5cb594fb608813369780969",
        "filename": "doc/release-notes/release-notes-0.19.0.1.md",
        "status": "added",
        "additions": 1089,
        "deletions": 0,
        "changes": 1089,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14feda0814a9fecf2138041f7d36fe1ab338797f/doc/release-notes/release-notes-0.19.0.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14feda0814a9fecf2138041f7d36fe1ab338797f/doc/release-notes/release-notes-0.19.0.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.19.0.1.md?ref=14feda0814a9fecf2138041f7d36fe1ab338797f",
        "patch": "@@ -0,0 +1,1089 @@\n+Bitcoin Core version 0.19.0.1 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.19.0.1/>\n+\n+This release includes new features, various bug fixes and performance\n+improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+Upgrading directly from a version of Bitcoin Core that has reached its EOL is\n+possible, but might take some time if the datadir needs to be migrated.  Old\n+wallet versions of Bitcoin Core are generally supported.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is supported and extensively tested on operating systems using\n+the Linux kernel, macOS 10.10+, and Windows 7 and newer. It is not recommended\n+to use Bitcoin Core on unsupported systems.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+as frequently tested on them.\n+\n+From 0.17.0 onwards, macOS <10.10 is no longer supported. 0.17.0 is\n+built using Qt 5.9.x, which doesn't support versions of macOS older than\n+10.10. Additionally, Bitcoin Core does not yet change appearance when\n+macOS \"dark mode\" is activated.\n+\n+Users running macOS Catalina may need to \"right-click\" and then choose \"Open\"\n+to open the Bitcoin Core .dmg. This is due to new signing requirements\n+imposed by Apple, which the Bitcoin Core project does not yet adhere too.\n+\n+Notable changes\n+===============\n+\n+New user documentation\n+----------------------\n+\n+- [Reduce memory](https://github.com/bitcoin/bitcoin/blob/master/doc/reduce-memory.md)\n+  suggests configuration tweaks for running Bitcoin Core on systems with\n+  limited memory. (#16339)\n+\n+New RPCs\n+--------\n+\n+- `getbalances` returns an object with all balances (`mine`,\n+  `untrusted_pending` and `immature`). Please refer to the RPC help of\n+  `getbalances` for details. The new RPC is intended to replace\n+  `getbalance`, `getunconfirmedbalance`, and the balance fields in\n+  `getwalletinfo`.  These old calls and fields may be removed in a\n+  future version. (#15930, #16239)\n+\n+- `setwalletflag` sets and unsets wallet flags that enable or disable\n+  features specific to that existing wallet, such as the new\n+  `avoid_reuse` feature documented elsewhere in these release notes.\n+  (#13756)\n+\n+- `getblockfilter` gets the BIP158 filter for the specified block.  This\n+  RPC is only enabled if block filters have been created using the\n+  `-blockfilterindex` configuration option. (#14121)\n+\n+New settings\n+------------\n+\n+- `-blockfilterindex` enables the creation of BIP158 block filters for\n+  the entire blockchain.  Filters will be created in the background and\n+  currently use about 4 GiB of space.  Note: this version of Bitcoin\n+  Core does not serve block filters over the P2P network, although the\n+  local user may obtain block filters using the `getblockfilter` RPC.\n+  (#14121)\n+\n+Updated settings\n+----------------\n+\n+- `whitebind` and `whitelist` now accept a list of permissions to\n+  provide peers connecting using the indicated interfaces or IP\n+  addresses.  If no permissions are specified with an address or CIDR\n+  network, the implicit default permissions are the same as previous\n+  releases.  See the `bitcoind -help` output for these two options for\n+  details about the available permissions. (#16248)\n+\n+- Users setting custom `dbcache` values can increase their setting slightly\n+  without using any more real memory.  Recent changes reduced the memory use\n+  by about 9% and made chainstate accounting more accurate (it was underestimating\n+  the use of memory before).  For example, if you set a value of \"450\" before, you\n+  may now set a value of \"500\" to use about the same real amount of memory. (#16957)\n+\n+\n+Updated RPCs\n+------------\n+\n+Note: some low-level RPC changes mainly useful for testing are described in the\n+Low-level Changes section below.\n+\n+- `sendmany` no longer has a `minconf` argument.  This argument was not\n+  well-specified and would lead to RPC errors even when the wallet's\n+  coin selection succeeded.  Users who want to influence coin selection\n+  can use the existing `-spendzeroconfchange`, `-limitancestorcount`,\n+  `-limitdescendantcount` and `-walletrejectlongchains` configuration\n+  arguments. (#15596)\n+\n+- `getbalance` and `sendtoaddress`, plus the new RPCs `getbalances` and\n+  `createwallet`, now accept an \"avoid_reuse\" parameter that controls\n+  whether already used addresses should be included in the operation.\n+  Additionally, `sendtoaddress` will avoid partial spends when\n+  `avoid_reuse` is enabled even if this feature is not already enabled\n+  via the `-avoidpartialspends` command line flag because not doing so\n+  would risk using up the \"wrong\" UTXO for an address reuse case.\n+  (#13756)\n+\n+- RPCs which have an `include_watchonly` argument or `includeWatching` option now default to `true` for watch-only\n+  wallets. Affected RPCs are: `getbalance`, `listreceivedbyaddress`, `listreceivedbylabel`, `listtransactions`,\n+  `listsinceblock`, `gettransaction`, `walletcreatefundedpsbt`, and `fundrawtransaction`. (#16383)\n+\n+- `listunspent` now returns a \"reused\" bool for each output if the\n+  wallet flag \"avoid_reuse\" is enabled. (#13756)\n+\n+- `getblockstats` now uses BlockUndo data instead of the transaction\n+  index, making it much faster, no longer dependent on the `-txindex`\n+  configuration option, and functional for all non-pruned blocks.\n+  (#14802)\n+\n+- `utxoupdatepsbt` now accepts a `descriptors` parameter that will fill\n+  out input and output scripts and keys when known. P2SH-witness inputs\n+  will be filled in from the UTXO set when a descriptor is provided that\n+  shows they're spending segwit outputs.  See the RPC help text for full\n+  details. (#15427)\n+\n+- `sendrawtransaction` and `testmempoolaccept` no longer accept a\n+  `allowhighfees` parameter to fail mempool acceptance if the\n+  transaction fee exceeds the value of the configuration option\n+  `-maxtxfee`.  Now there is a hardcoded default maximum feerate that\n+  can be changed when calling either RPC using a `maxfeerate` parameter.\n+  (#15620)\n+\n+- `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry`, and\n+  `getrawmempool` no longer return a `size` field unless the\n+  configuration option `-deprecatedrpc=size` is used.  Instead a new\n+  `vsize` field is returned with the transaction's virtual size\n+  (consistent with other RPCs such as `getrawtransaction`). (#15637)\n+\n+- `getwalletinfo` now includes a `scanning` field that is either `false`\n+  (no scanning) or an object with information about the duration and\n+  progress of the wallet's scanning historical blocks for transactions\n+  affecting its balances. (#15730)\n+\n+- `gettransaction` now accepts a third (boolean) argument `verbose`. If\n+  set to `true`, a new `decoded` field will be added to the response containing\n+  the decoded transaction. This field is equivalent to RPC `decoderawtransaction`,\n+  or RPC `getrawtransaction` when `verbose` is passed. (#16185, #16866, #16873)\n+\n+- `createwallet` accepts a new `passphrase` parameter.  If set, this\n+  will create the new wallet encrypted with the given passphrase.  If\n+  unset (the default) or set to an empty string, no encryption will be\n+  used. (#16394)\n+\n+- `getchaintxstats` RPC now returns the additional key of\n+  `window_final_block_height`. (#16695)\n+\n+- `getmempoolentry` now provides a `weight` field containing the\n+  transaction weight as defined in BIP141. (#16647)\n+\n+- The `getnetworkinfo` and `getpeerinfo` commands now contain a new field with decoded network service flags. (#16786)\n+\n+- `getdescriptorinfo` now returns an additional `checksum` field\n+  containing the checksum for the unmodified descriptor provided by the\n+  user (that is, before the descriptor is normalized for the\n+  `descriptor` field). (#15986)\n+\n+- `joinpsbts` now shuffles the order of the inputs and outputs of the resulting\n+  joined PSBT. Previously, inputs and outputs were added in the order PSBTs were\n+  provided. This made it easy to correlate inputs to outputs, representing a\n+  privacy leak. (#16512)\n+\n+- `walletcreatefundedpsbt` now signals BIP125 Replace-by-Fee if the\n+  `-walletrbf` configuration option is set to true. (#15911)\n+\n+GUI changes\n+-----------\n+\n+- The GUI wallet now provides bech32 addresses by default.  The user may change the address type\n+  during invoice generation using a GUI toggle, or the default address\n+  type may be changed with the `-addresstype` configuration option.\n+  (#15711, #16497)\n+\n+- In 0.18.0, a `./configure` flag was introduced to allow disabling BIP70 support in the GUI (support was enabled by default). In 0.19.0, this flag is now __disabled__ by default. If you want to compile Bitcoin Core with BIP70 support in the GUI, you can pass `--enable-bip70` to `./configure`. (#15584)\n+\n+Deprecated or removed configuration options\n+-------------------------------------------\n+\n+- `-mempoolreplacement` is removed, although default node behavior\n+  remains the same.  This option previously allowed the user to prevent\n+  the node from accepting or relaying BIP125 transaction replacements.\n+  This is different from the remaining configuration option\n+  `-walletrbf`. (#16171)\n+\n+Deprecated or removed RPCs\n+--------------------------\n+\n+- `bumpfee` no longer accepts a `totalFee` option unless the\n+  configuration parameter `deprecatedrpc=totalFee` is specified.  This\n+  parameter will be fully removed in a subsequent release. (#15996)\n+\n+- `bumpfee` has a new `fee_rate` option as a replacement for the deprecated `totalFee`. (#16727)\n+\n+- `generate` is now removed after being deprecated in Bitcoin Core 0.18.\n+  Use the `generatetoaddress` RPC instead. (#15492)\n+\n+P2P changes\n+-----------\n+\n+- BIP 61 reject messages were deprecated in v0.18. They are now disabled\n+  by default, but can be enabled by setting the `-enablebip61` command\n+  line option.  BIP 61 reject messages will be removed entirely in a\n+  future version of Bitcoin Core. (#14054)\n+\n+- To eliminate well-known denial-of-service vectors in Bitcoin Core,\n+  especially for nodes with spinning disks, the default value for the\n+  `-peerbloomfilters` configuration option has been changed to false.\n+  This prevents Bitcoin Core from sending the BIP111 NODE_BLOOM service\n+  flag, accepting BIP37 bloom filters, or serving merkle blocks or\n+  transactions matching a bloom filter.  Users who still want to provide\n+  bloom filter support may either set the configuration option to true\n+  to re-enable both BIP111 and BIP37 support or enable just BIP37\n+  support for specific peers using the updated `-whitelist` and\n+  `-whitebind` configuration options described elsewhere in these\n+  release notes.  For the near future, lightweight clients using public\n+  BIP111/BIP37 nodes should still be able to connect to older versions\n+  of Bitcoin Core and nodes that have manually enabled BIP37 support,\n+  but developers of such software should consider migrating to either\n+  using specific BIP37 nodes or an alternative transaction filtering\n+  system. (#16152)\n+\n+- By default, Bitcoin Core will now make two additional outbound connections that are exclusively used for block-relay.  No transactions or addr messages will be processed on these connections. These connections are designed to add little additional memory or bandwidth resource requirements but should make some partitioning attacks more difficult to carry out. (#15759)\n+\n+Miscellaneous CLI Changes\n+-------------------------\n+\n+- The `testnet` field in `bitcoin-cli -getinfo` has been renamed to\n+  `chain` and now returns the current network name as defined in BIP70\n+  (main, test, regtest). (#15566)\n+\n+Low-level changes\n+=================\n+\n+RPC\n+---\n+\n+- `getblockchaininfo` no longer returns a `bip9_softforks` object.\n+  Instead, information has been moved into the `softforks` object and\n+  an additional `type` field describes how Bitcoin Core determines\n+  whether that soft fork is active (e.g. BIP9 or BIP90).  See the RPC\n+  help for details. (#16060)\n+\n+- `getblocktemplate` no longer returns a `rules` array containing `CSV`\n+  and `segwit` (the BIP9 deployments that are currently in active\n+  state). (#16060)\n+\n+- `getrpcinfo` now returns a `logpath` field with the path to\n+  `debug.log`. (#15483)\n+\n+Tests\n+-----\n+\n+- The regression test chain enabled by the `-regtest` command line flag\n+  now requires transactions to not violate standard policy by default.\n+  This is the same default used for mainnet and makes it easier to test\n+  mainnet behavior on regtest. Note that the testnet still allows\n+  non-standard txs by default and that the policy can be locally\n+  adjusted with the `-acceptnonstdtxn` command line flag for both test\n+  chains. (#15891)\n+\n+Configuration\n+------------\n+\n+- A setting specified in the default section but not also specified in a\n+  network-specific section (e.g. testnet) will now produce an error\n+  preventing startup instead of just a warning unless the network is\n+  mainnet.  This prevents settings intended for mainnet from being\n+  applied to testnet or regtest. (#15629)\n+\n+- On platforms supporting `thread_local`, log lines can be prefixed with\n+  the name of the thread that caused the log. To enable this behavior,\n+  use `-logthreadnames=1`. (#15849)\n+\n+Network\n+-------\n+\n+- When fetching a transaction announced by multiple peers, previous versions of\n+  Bitcoin Core would sequentially attempt to download the transaction from each\n+  announcing peer until the transaction is received, in the order that those\n+  peers' announcements were received.  In this release, the download logic has\n+  changed to randomize the fetch order across peers and to prefer sending\n+  download requests to outbound peers over inbound peers. This fixes an issue\n+  where inbound peers could prevent a node from getting a transaction.\n+  (#14897, #15834)\n+\n+- If a Tor hidden service is being used, Bitcoin Core will be bound to\n+  the standard port 8333 even if a different port is configured for\n+  clearnet connections.  This prevents leaking node identity through use\n+  of identical non-default port numbers. (#15651)\n+\n+Mempool and transaction relay\n+-----------------------------\n+\n+- Allows one extra single-ancestor transaction per package.  Previously,\n+  if a transaction in the mempool had 25 descendants, or it and all of\n+  its descendants were over 101,000 vbytes, any newly-received\n+  transaction that was also a descendant would be ignored.  Now, one\n+  extra descendant will be allowed provided it is an immediate\n+  descendant (child) and the child's size is 10,000 vbytes or less.\n+  This makes it possible for two-party contract protocols such as\n+  Lightning Network to give each participant an output they can spend\n+  immediately for Child-Pays-For-Parent (CPFP) fee bumping without\n+  allowing one malicious participant to fill the entire package and thus\n+  prevent the other participant from spending their output. (#15681)\n+\n+- Transactions with outputs paying v1 to v16 witness versions (future\n+  segwit versions) are now accepted into the mempool, relayed, and\n+  mined.  Attempting to spend those outputs remains forbidden by policy\n+  (\"non-standard\").  When this change has been widely deployed, wallets\n+  and services can accept any valid bech32 Bitcoin address without\n+  concern that transactions paying future segwit versions will become\n+  stuck in an unconfirmed state. (#15846)\n+\n+- Legacy transactions (transactions with no segwit inputs) must now be\n+  sent using the legacy encoding format, enforcing the rule specified in\n+  BIP144.  (#14039)\n+\n+Wallet\n+------\n+\n+- When in pruned mode, a rescan that was triggered by an `importwallet`,\n+  `importpubkey`, `importaddress`, or `importprivkey` RPC will only fail\n+  when blocks have been pruned. Previously it would fail when `-prune`\n+  has been set.  This change allows setting `-prune` to a high value\n+  (e.g. the disk size) without the calls to any of the import RPCs\n+  failing until the first block is pruned. (#15870)\n+\n+- When creating a transaction with a fee above `-maxtxfee` (default 0.1\n+  BTC), the RPC commands `walletcreatefundedpsbt` and\n+  `fundrawtransaction` will now fail instead of rounding down the fee.\n+  Be aware that the `feeRate` argument is specified in BTC per 1,000\n+  vbytes, not satoshi per vbyte. (#16257)\n+\n+- A new wallet flag `avoid_reuse` has been added (default off). When\n+  enabled, a wallet will distinguish between used and unused addresses,\n+  and default to not use the former in coin selection.  When setting\n+  this flag on an existing wallet, rescanning the blockchain is required\n+  to correctly mark previously used destinations.  Together with \"avoid\n+  partial spends\" (added in Bitcoin Core v0.17.0), this can eliminate a\n+  serious privacy issue where a malicious user can track spends by\n+  sending small payments to a previously-paid address that would then\n+  be included with unrelated inputs in future payments. (#13756)\n+\n+Build system changes\n+--------------------\n+\n+- Python >=3.5 is now required by all aspects of the project. This\n+  includes the build systems, test framework and linters. The previously\n+  supported minimum (3.4), was EOL in March 2019. (#14954)\n+\n+- The minimum supported miniUPnPc API version is set to 10. This keeps\n+  compatibility with Ubuntu 16.04 LTS and Debian 8 `libminiupnpc-dev`\n+  packages. Please note, on Debian this package is still vulnerable to\n+  [CVE-2017-8798](https://security-tracker.debian.org/tracker/CVE-2017-8798)\n+  (in jessie only) and\n+  [CVE-2017-1000494](https://security-tracker.debian.org/tracker/CVE-2017-1000494)\n+  (both in jessie and in stretch). (#15993)\n+\n+0.19.0 change log\n+=================\n+\n+### Consensus\n+- #16128 Delete error-prone CScript constructor only used with FindAndDelete (instagibbs)\n+- #16060 Bury bip9 deployments (jnewbery)\n+\n+### Policy\n+- #15557 Enhance `bumpfee` to include inputs when targeting a feerate (instagibbs)\n+- #15846 Make sending to future native witness outputs standard (sipa)\n+\n+### Block and transaction handling\n+- #15632 Remove ResendWalletTransactions from the Validation Interface (jnewbery)\n+- #14121 Index for BIP 157 block filters (jimpo)\n+- #15141 Rewrite DoS interface between validation and net_processing (sdaftuar)\n+- #15880 utils and libraries: Replace deprecated Boost Filesystem functions (hebasto)\n+- #15971 validation: Add compile-time checking for negative locking requirement in LimitValidationInterfaceQueue (practicalswift)\n+- #15999 init: Remove dead code in LoadChainTip (MarcoFalke)\n+- #16015 validation: Hold cs_main when reading chainActive in RewindBlockIndex (practicalswift)\n+- #16056 remove unused magic number from consistency check (instagibbs)\n+- #16171 Remove -mempoolreplacement to prevent needless block prop slowness (TheBlueMatt)\n+- #15894 Remove duplicated \"Error: \" prefix in logs (hebasto)\n+- #14193 validation: Add missing mempool locks (MarcoFalke)\n+- #15681 Allow one extra single-ancestor transaction per package (TheBlueMatt)\n+- #15305 [validation] Crash if disconnecting a block fails (sdaftuar)\n+- #16471 log correct messages when CPFP fails (jnewbery)\n+- #16433 txmempool: Remove unused default value MemPoolRemovalReason::UNKNOWN (MarcoFalke)\n+- #13868 Remove unused fScriptChecks parameter from CheckInputs (Empact)\n+- #16421 Conservatively accept RBF bumps bumping one tx at the package limits (TheBlueMatt)\n+- #16854 Prevent UpdateTip log message from being broken up (stevenroose)\n+- #16956 validation: Make GetWitnessCommitmentIndex public (MarcoFalke)\n+- #16713 Ignore old versionbit activations to avoid 'unknown softforks' warning (jnewbery)\n+- #17002 chainparams: Bump assumed chain params (MarcoFalke)\n+- #16849 Fix block index inconsistency in InvalidateBlock() (sdaftuar)\n+\n+### P2P protocol and network code\n+- #15597 Generate log entry when blocks messages are received unexpectedly (pstratem)\n+- #15654 Remove unused unsanitized user agent string CNode::strSubVer (MarcoFalke)\n+- #15689 netaddress: Update CNetAddr for ORCHIDv2 (dongcarl)\n+- #15834 Fix transaction relay bugs introduced in #14897 and expire transactions from peer in-flight map (sdaftuar)\n+- #15651 torcontrol: Use the default/standard network port for Tor hidden services, even if the internal port is set differently (luke-jr)\n+- #16188 Document what happens to getdata of unknown type (MarcoFalke)\n+- #15649 Add ChaCha20Poly1305@Bitcoin AEAD (jonasschnelli)\n+- #16152 Disable bloom filtering by default (TheBlueMatt)\n+- #15993 Drop support of the insecure miniUPnPc versions (hebasto)\n+- #16197 Use mockable time for tx download (MarcoFalke)\n+- #16248 Make whitebind/whitelist permissions more flexible (NicolasDorier)\n+- #16618 [Fix] Allow connection of a noban banned peer (NicolasDorier)\n+- #16631 Restore default whitelistrelay to true (NicolasDorier)\n+- #15759 Add 2 outbound block-relay-only connections (sdaftuar)\n+- #15558 Don't query all DNS seeds at once (sipa)\n+- #16999 0.19 seeds update (laanwj)\n+\n+### Wallet\n+- #15288 Remove wallet -> node global function calls (ryanofsky)\n+- #15491 Improve log output for errors during load (gwillen)\n+- #13541 wallet/rpc: sendrawtransaction maxfeerate (kallewoof)\n+- #15680 Remove resendwallettransactions RPC method (jnewbery)\n+- #15508 Refactor analyzepsbt for use outside RPC code (gwillen)\n+- #15747 Remove plethora of Get*Balance (MarcoFalke)\n+- #15728 Refactor relay transactions (jnewbery)\n+- #15639 bitcoin-wallet tool: Drop libbitcoin_server.a dependency (ryanofsky)\n+- #15853 Remove unused import checkpoints.h (MarcoFalke)\n+- #15780 add cachable amounts for caching credit/debit values (kallewoof)\n+- #15778 Move maxtxfee from node to wallet (jnewbery)\n+- #15901 log on rescan completion (andrewtoth)\n+- #15917 Avoid logging no_such_file_or_directory error (promag)\n+- #15452 Replace CScriptID and CKeyID in CTxDestination with dedicated types (instagibbs)\n+- #15870 Only fail rescan when blocks have actually been pruned (MarcoFalke)\n+- #15006 Add option to create an encrypted wallet (achow101)\n+- #16001 Give WalletModel::UnlockContext move semantics (sipa)\n+- #15741 Batch write imported stuff in importmulti (achow101)\n+- #16144 do not encrypt wallets with disabled private keys (mrwhythat)\n+- #15024 Allow specific private keys to be derived from descriptor (meshcollider)\n+- #13756 \"avoid_reuse\" wallet flag for improved privacy (kallewoof)\n+- #16226 Move ismine to the wallet module (achow101)\n+- #16239 wallet/rpc: follow-up clean-up/fixes to avoid_reuse (kallewoof)\n+- #16286 refactoring: wallet: Fix GCC 7.4.0 warning (hebasto)\n+- #16257 abort when attempting to fund a transaction above -maxtxfee (Sjors)\n+- #16237 Have the wallet give out destinations instead of keys (achow101)\n+- #16322 Fix -maxtxfee check by moving it to CWallet::CreateTransaction (promag)\n+- #16361 Remove redundant pre-TopUpKeypool check (instagibbs)\n+- #16244 Move wallet creation out of the createwallet rpc into its own function (achow101)\n+- #16227 Refactor CWallet's inheritance chain (achow101)\n+- #16208 Consume ReserveDestination on successful CreateTransaction (instagibbs)\n+- #16301 Use CWallet::Import* functions in all import* RPCs (achow101)\n+- #16402 Remove wallet settings from chainparams (MarcoFalke)\n+- #16415 Get rid of PendingWalletTx class (ryanofsky)\n+- #15588 Log the actual wallet file version and no longer publicly expose the \"version\" record (achow101)\n+- #16399 Improve wallet creation (fjahr)\n+- #16475 Enumerate walletdb keys (MarcoFalke)\n+- #15709 Do not add \"setting\" key as unknown (Bushstar)\n+- #16451 Remove CMerkleTx (jnewbery)\n+- #15906 Move min_depth and max_depth to coin control (amitiuttarwar)\n+- #16502 Drop unused OldKey (promag)\n+- #16394 Allow createwallet to take empty passwords to make unencrypted wallets (achow101)\n+- #15911 Use wallet RBF default for walletcreatefundedpsbt (Sjors)\n+- #16503 Remove p2pEnabled from Chain interface (ariard)\n+- #16557 restore coinbase and confirmed/conflicted checks in SubmitMemoryPoolAndRelay() (jnewbery)\n+- #14934 Descriptor expansion cache clarifications (Sjors)\n+- #16383 rpcwallet: default include_watchonly to true for watchonly wallets (jb55)\n+- #16542 Return more specific errors about invalid descriptors (achow101)\n+- #16572 Fix Char as Bool in Wallet (JeremyRubin)\n+- #16753 extract PubKey from P2PK script with Solver (theStack)\n+- #16716 Use wallet name instead of pointer on unload/release (promag)\n+- #16185 gettransaction: add an argument to decode the transaction (darosior)\n+- #16745 Translate all initErrors in CreateWalletFromFile (MarcoFalke)\n+- #16792 Assert that the HRP is lowercase in Bech32::Encode (meshcollider)\n+- #16624 encapsulate transactions state (ariard)\n+- #16830 Cleanup walletinitinterface.h (hebasto)\n+- #16796 Fix segfault in CreateWalletFromFile (MarcoFalke)\n+- #16866 Rename 'decode' argument in gettransaction method to 'verbose' (jnewbery)\n+- #16727 Explicit feerate for bumpfee (instagibbs)\n+- #16609 descriptor: fix missed m_script_arg arg renaming in #14934 (fanquake)\n+\n+### RPC and other APIs\n+- #15492 remove deprecated generate method (Sjors)\n+- #15566 cli: Replace testnet with chain and return network name as per bip70 (fanquake)\n+- #15564 cli: Remove duplicate wallet fields from -getinfo (fanquake)\n+- #15642 Remove deprecated rpc warnings (jnewbery)\n+- #15637 Rename size to vsize in mempool related calls (fanquake)\n+- #15620 Uncouple non-wallet rpcs from maxTxFee global (MarcoFalke)\n+- #15616 Clarify decodescript RPCResult doc (MarcoFalke)\n+- #15669 Fix help text for signtransactionwithXXX (torkelrogstad)\n+- #15596 Ignore sendmany::minconf as dummy value (MarcoFalke)\n+- #15755 remove unused var in rawtransaction.cpp (Bushstar)\n+- #15746 RPCHelpMan: Always name dictionary keys (MarcoFalke)\n+- #15748 remove dead mining code (jnewbery)\n+- #15751 Speed up deriveaddresses for large ranges (sipa)\n+- #15770 Validate maxfeerate with AmountFromValue (promag)\n+- #15474 rest/rpc: Make mempoolinfo atomic (promag)\n+- #15463 Speedup getaddressesbylabel (promag)\n+- #15784 Remove dependency on interfaces::Chain in SignTransaction (ariard)\n+- #15323 Expose g_is_mempool_loaded via getmempoolinfo (Empact)\n+- #15932 Serialize in getblock without cs_main (MarcoFalke)\n+- #15930 Add balances RPC (MarcoFalke)\n+- #15730 Show scanning details in getwalletinfo (promag)\n+- #14802 faster getblockstats using BlockUndo data (FelixWeis)\n+- #14984 Speedup getrawmempool when verbose=true (promag)\n+- #16071 Hint for importmulti in help output of importpubkey and importaddress (kristapsk)\n+- #16063 Mention getwalletinfo where a rescan is triggered (promag)\n+- #16024 deriveaddresses: Correction of descriptor checksum in RPC example (ccapo)\n+- #16217 getrawtransaction: inform about blockhash argument when lookup fails (darosior)\n+- #15427 Add support for descriptors to utxoupdatepsbt (sipa)\n+- #16262 Allow shutdown while in generateblocks (pstratem)\n+- #15483 Adding a 'logpath' entry to getrpcinfo (darosior)\n+- #16325 Clarify that block count means height excl genesis (MarcoFalke)\n+- #16326 add new utxoupdatepsbt arguments to the CRPCCommand and CPRCCvertParam tables (jnewbery)\n+- #16332 Add logpath description for getrpcinfo (instagibbs)\n+- #16240 JSONRPCRequest-aware RPCHelpMan (kallewoof)\n+- #15996 Deprecate totalfee argument in `bumpfee` (instagibbs)\n+- #16467 sendrawtransaction help privacy note (jonatack)\n+- #16596 Fix getblocktemplate CLI example (emilengler)\n+- #15986 Add checksum to getdescriptorinfo (sipa)\n+- #16647 add weight to getmempoolentry output (fanquake)\n+- #16695 Add window final block height to getchaintxstats (leto)\n+- #16798 Refactor rawtransaction_util's SignTransaction to separate prevtx parsing (achow101)\n+- #16285 Improve scantxoutset response and help message (promag)\n+- #16725 Don't show addresses or P2PK in decoderawtransaction (NicolasDorier)\n+- #16787 Human readable network services (darosior)\n+- #16251 Improve signrawtransaction error reporting (ajtowns)\n+- #16873 fix regression in gettransaction (jonatack)\n+- #16512 Shuffle inputs and outputs after joining psbts (achow101)\n+- #16521 Use the default maxfeerate value as BTC/kB (Remagpie)\n+- #16817 Fix casing in getblockchaininfo to be inline with other fields (dangershony)\n+- #17131 fix -rpcclienttimeout 0 option (fjahr)\n+- #17249 Add missing deque include to fix build (jbeich)\n+- #17368 cli: fix -getinfo output when compiled with no wallet (fanquake)\n+\n+### GUI\n+- #15464 Drop unused return values in WalletFrame (promag)\n+- #15614 Defer removeAndDeleteWallet when no modal widget is active (promag)\n+- #15711 Generate bech32 addresses by default (MarcoFalke)\n+- #15829 update request payment button text and tab description (fanquake)\n+- #15874 Resolve the qt/guiutil <-> qt/optionsmodel CD (251Labs)\n+- #15371 Uppercase bech32 addresses in qr codes (benthecarman)\n+- #15928 Move QRImageWidget to its own file-pair (luke-jr)\n+- #16113 move coin control \"OK\" to the right hand side of the dialog (fanquake)\n+- #16090 Add vertical spacer to peer detail widget (JosuGZ)\n+- #15886 qt, wallet: Revamp SendConfirmationDialog (hebasto)\n+- #16263 Use qInfo() if no error occurs (hebasto)\n+- #16153 Add antialiasing to traffic graph widget (JosuGZ)\n+- #16350 Remove unused guard (hebasto)\n+- #16106 Sort wallets in open wallet menu (promag)\n+- #16291 Stop translating PACKAGE_NAME (MarcoFalke)\n+- #16380 Remove unused bits from the service flags enum (MarcoFalke)\n+- #16379 Fix autostart filenames on Linux for testnet/regtest (hebasto)\n+- #16366 init: Use InitError for all errors in bitcoind/qt (MarcoFalke)\n+- #16436 Do not create payment server if -disablewallet option provided (hebasto)\n+- #16514 Remove unused RPCConsole::tabFocus (promag)\n+- #16497 Generate bech32 addresses by default (take 2, fixup) (MarcoFalke)\n+- #16349 Remove redundant WalletController::addWallet slot (hebasto)\n+- #16578 Do not pass in command line arguments to QApplication (achow101)\n+- #16612 Remove menu icons (laanwj)\n+- #16677 remove unused PlatformStyle::TextColorIcon (fanquake)\n+- #16694 Ensure transaction send error is always visible (fanquake)\n+- #14879 Add warning messages to the debug window (hebasto)\n+- #16708 Replace obsolete functions of QSslSocket (hebasto)\n+- #16701 Replace functions deprecated in Qt 5.13 (hebasto)\n+- #16706 Replace deprecated QSignalMapper by lambda expressions (hebasto)\n+- #16707 Remove obsolete QModelIndex::child() (hebasto)\n+- #16758 Replace QFontMetrics::width() with TextWidth() (hebasto)\n+- #16760 Change uninstall icon on Windows (GChuf)\n+- #16720 Replace objc_msgSend() function calls with the native Objective-C syntax (hebasto)\n+- #16788 Update transifex slug for 0.19 (laanwj)\n+- #15450 Create wallet menu option (achow101)\n+- #16735 Remove unused menu items for Windows and Linux (GChuf)\n+- #16826 Do additional character escaping for wallet names and address labels (achow101)\n+- #15529 Add Qt programs to msvc build (updated, no code changes) (sipsorcery)\n+- #16714 add prune to intro screen with smart default (Sjors)\n+- #16858 advise users not to switch wallets when opening a BIP70 URI (jameshilliard)\n+- #16822 Create wallet menu option follow-ups (jonatack)\n+- #16882 Re-generate translations before 0.19.0 (MarcoFalke)\n+- #16928 Rename address checkbox back to bech32 (MarcoFalke)\n+- #16837 Fix {C{,XX},LD}FLAGS pickup (dongcarl)\n+- #16971 Change default size of intro frame (emilengler)\n+- #16988 Periodic translations update (laanwj)\n+- #16852 When BIP70 is disabled, get PaymentRequest merchant using string search (achow101)\n+- #16952 make sure to update the UI when deleting a transaction (jonasschnelli)\n+- #17031 Prevent processing duplicate payment requests (promag)\n+- #17135 Make polling in ClientModel asynchronous (promag)\n+- #17120 Fix start timer from non QThread (promag)\n+- #17257 disable font antialiasing for QR image address (fanquake)\n+\n+### Build system\n+- #14954 Require python 3.5 (MarcoFalke)\n+- #15580 native_protobuf: avoid system zlib (dongcarl)\n+- #15601 Switch to python3 (take 3) (MarcoFalke)\n+- #15581 Make less assumptions about build env (dongcarl)\n+- #14853 latest RapidCheck (fanquake)\n+- #15446 Improve depends debuggability (dongcarl)\n+- #13788 Fix --disable-asm for newer assembly checks/code (luke-jr)\n+- #12051 add missing debian contrib file to tarball (puchu)\n+- #15919 Remove unused OpenSSL includes to make it more clear where OpenSSL is used (practicalswift)\n+- #15978 .gitignore: Don't ignore depends patches (dongcarl)\n+- #15939 gitian: Remove windows 32 bit build (MarcoFalke)\n+- #15239 scripts and tools: Move non-linux build source tarballs to \"bitcoin-binaries/version\" directory (hebasto)\n+- #14047 Add HKDF_HMAC256_L32 and method to negate a private key (jonasschnelli)\n+- #16051 add patch to common dependencies (fanquake)\n+- #16049 switch to secure download of all dependencies (Kemu)\n+- #16059 configure: Fix thread_local detection (dongcarl)\n+- #16089 add ability to skip building zeromq (fanquake)\n+- #15844 Purge libtool archives (dongcarl)\n+- #15461 update to Boost 1.70 (Sjors)\n+- #16141 remove GZIP export from gitian descriptors (fanquake)\n+- #16235 Cleaned up and consolidated msbuild files (no code changes) (sipsorcery)\n+- #16246 MSVC: Fix error in debug mode (Fix #16245) (NicolasDorier)\n+- #16183 xtrans: Configure flags cleanup (dongcarl)\n+- #16258 [MSVC]: Create the config.ini as part of bitcoind build (NicolasDorier)\n+- #16271 remove -Wall from rapidcheck build flags (fanquake)\n+- #16309 [MSVC] allow user level project customization (NicolasDorier)\n+- #16308 [MSVC] Copy build output to src/ automatically after build (NicolasDorier)\n+- #15457 Check std::system for -[alert|block|wallet]notify (Sjors)\n+- #16344 use #if HAVE_SYSTEM instead of defined(HAVE_SYSTEM) (Sjors)\n+- #16352 prune dbus from depends (fanquake)\n+- #16270 expat 2.2.7 (fanquake)\n+- #16408 Prune X packages (dongcarl)\n+- #16386 disable unused Qt features (fanquake)\n+- #16424 Treat -Wswitch as error when --enable-werror (MarcoFalke)\n+- #16441 remove qt libjpeg check from bitcoin_qt.m4 (fanquake)\n+- #16434 Specify AM_CPPFLAGS for ZMQ (domob1812)\n+- #16534 add Qt Creator Makefile.am.user to .gitignore (Bushstar)\n+- #16573 disable building libsecp256k1 benchmarks (fanquake)\n+- #16533 disable libxcb extensions (fanquake)\n+- #16589 Remove unused src/obj-test folder (MarcoFalke)\n+- #16435 autoconf: Sane `--enable-debug` defaults (dongcarl)\n+- #16622 echo property tests status during build (jonatack)\n+- #16611 Remove src/obj directory from repository (laanwj)\n+- #16371 ignore macOS make deploy artefacts & add them to clean-local (fanquake)\n+- #16654 build: update RapidCheck Makefile (jonatack)\n+- #16370 cleanup package configure flags (fanquake)\n+- #16746 msbuild: Ignore linker warning (sipsorcery)\n+- #16750 msbuild: adds bench_bitcoin to auto generated project files (sipsorcery)\n+- #16810 guix: Remove ssp spec file hack (dongcarl)\n+- #16477 skip deploying plugins we dont use in macdeployqtplus (fanquake)\n+- #16413 Bump QT to LTS release 5.9.8 (THETCR)\n+- #15584 disable BIP70 support by default (fanquake)\n+- #16871 make building protobuf optional in depends (fanquake)\n+- #16879 remove redundant sed patching (fanquake)\n+- #16809 zlib: Move toolchain options to configure (dongcarl)\n+- #15146 Solve SmartOS FD_ZERO build issue (Empact)\n+- #16870 update boost macros to latest upstream for improved error reporting (fanquake)\n+- #16982 Factor out qt translations from build system (laanwj)\n+- #16926 Add OpenSSL termios fix for musl libc (nmarley)\n+- #16927 Refresh ZeroMQ 4.3.1 patch (nmarley)\n+- #17005 Qt version appears only if GUI is being built (ch4ot1c)\n+- #16468 Exclude depends/Makefile in .gitignore (promag)\n+\n+### Tests and QA\n+- #15296 Add script checking for deterministic line coverage in unit tests (practicalswift)\n+- #15338 ci: Build and run tests once on freebsd (MarcoFalke)\n+- #15479 Add .style.yapf (MarcoFalke)\n+- #15534 lint-format-strings: open files sequentially (fix for OS X) (gwillen)\n+- #15504 fuzz: Link BasicTestingSetup (shared with unit tests) (MarcoFalke)\n+- #15473 bench: Benchmark mempooltojson (MarcoFalke)\n+- #15466 Print remaining jobs in test_runner.py (stevenroose)\n+- #15631 mininode: Clearer error message on invalid magic bytes (MarcoFalke)\n+- #15255 Remove travis_wait from lint script (gkrizek)\n+- #15686 make pruning test faster (jnewbery)\n+- #15533 .style.yapf: Set column_limit=160 (MarcoFalke)\n+- #15660 Overhaul p2p_compactblocks.py (sdaftuar)\n+- #15495 Add regtests for HTTP status codes (domob1812)\n+- #15772 Properly log named args in authproxy (MarcoFalke)\n+- #15771 Prevent concurrency issues reading .cookie file (promag)\n+- #15693 travis: Switch to ubuntu keyserver to avoid timeouts (MarcoFalke)\n+- #15629 init: Throw error when network specific config is ignored (MarcoFalke)\n+- #15773 Add BitcoinTestFramework::sync_* methods (MarcoFalke)\n+- #15797 travis: Bump second timeout to 33 minutes, add rationale (MarcoFalke)\n+- #15788 Unify testing setups for fuzz, bench, and unit tests (MarcoFalke)\n+- #15352 Reduce noise level in test_bitcoin output (practicalswift)\n+- #15779 Add wallet_balance benchmark (MarcoFalke)\n+- #15843 fix outdated include in blockfilter_index_tests (jamesob)\n+- #15866 Add missing syncwithvalidationinterfacequeue to wallet_import_rescan (MarcoFalke)\n+- #15697 Make swap_magic_bytes in p2p_invalid_messages atomic (MarcoFalke)\n+- #15895 Avoid re-reading config.ini unnecessarily (luke-jr)\n+- #15896 feature_filelock, interface_bitcoin_cli: Use PACKAGE_NAME in messages rather than hardcoding Bitcoin Core (luke-jr)\n+- #15897 QA/mininode: Send all headers upfront in send_blocks_and_test to avoid sending an unconnected one (luke-jr)\n+- #15696 test_runner: Move feature_pruning to base tests (MarcoFalke)\n+- #15869 Add settings merge test to prevent regresssions (ryanofsky)\n+- #15758 Add further tests to wallet_balance (MarcoFalke)\n+- #15841 combine_logs: append node stderr and stdout if it exists (MarcoFalke)\n+- #15949 test_runner: Move pruning back to extended (MarcoFalke)\n+- #15927 log thread names by default in functional tests (jnewbery)\n+- #15664 change default Python block serialization to witness (instagibbs)\n+- #15988 Add test for ArgsManager::GetChainName (ryanofsky)\n+- #15963 Make random seed logged and settable (jnewbery)\n+- #15943 Fail if RPC has been added without tests (MarcoFalke)\n+- #16036 travis: Run all lint scripts even if one fails (scravy)\n+- #13555 parameterize adjustment period in versionbits_computeblockversion (JBaczuk)\n+- #16079 wallet_balance.py: Prevent edge cases (stevenroose)\n+- #16078 replace tx hash with txid in rawtransaction test (LongShao007)\n+- #16042 Bump MAX_NODES to 12 (MarcoFalke)\n+- #16124 Limit Python linting to files in the repo (practicalswift)\n+- #16143 Mark unit test blockfilter_index_initial_sync as non-deterministic (practicalswift)\n+- #16214 travis: Fix caching issues (MarcoFalke)\n+- #15982 Make msg_block a witness block (MarcoFalke)\n+- #16225 Make coins_tests/updatecoins_simulation_test deterministic (practicalswift)\n+- #16236 fuzz: Log output even if fuzzer failed (MarcoFalke)\n+- #15520 cirrus: Run extended test feature_pruning (MarcoFalke)\n+- #16234 Add test for unknown args (MarcoFalke)\n+- #16207 stop generating lcov coverage when functional tests fail (asood123)\n+- #16252 Log to debug.log in all unit tests (MarcoFalke)\n+- #16289 Add missing ECC_Stop() in GUI rpcnestedtests.cpp (jonasschnelli)\n+- #16278 Remove unused includes (practicalswift)\n+- #16302 Add missing syncwithvalidationinterfacequeue to wallet_balance test (MarcoFalke)\n+- #15538 wallet_bumpfee.py: Make sure coin selection produces change (instagibbs)\n+- #16294 Create at most one testing setup (MarcoFalke)\n+- #16299 bench: Move generated data to a dedicated translation unit (promag)\n+- #16329 Add tests for getblockchaininfo.softforks (MarcoFalke)\n+- #15687 tool wallet test coverage for unexpected writes to wallet (jonatack)\n+- #16267 bench: Benchmark blocktojson (fanatid)\n+- #14505 Add linter to make sure single parameter constructors are marked explicit (practicalswift)\n+- #16338 Disable other targets when enable-fuzz is set (qmma70)\n+- #16334 rpc_users: Also test rpcauth.py with password (dongcarl)\n+- #15282 Replace hard-coded hex tx with class in test framework (stevenroose)\n+- #16390 Add --filter option to test_runner.py (promag)\n+- #15891 Require standard txs in regtest by default (MarcoFalke)\n+- #16374 Enable passing wildcard test names to test runner from root (jonatack)\n+- #16420 Fix race condition in wallet_encryption test (jonasschnelli)\n+- #16422 remove redundant setup in addrman_tests (zenosage)\n+- #16438 travis: Print memory and number of cpus (MarcoFalke)\n+- #16445 Skip flaky p2p_invalid_messages test on macOS (fjahr)\n+- #16459 Fix race condition in example_test.py (sdaftuar)\n+- #16464 Ensure we don't generate a too-big block in p2sh sigops test (sdaftuar)\n+- #16491 fix deprecated log.warn in feature_dbcrash test (jonatack)\n+- #15134 Switch one of the Travis jobs to an unsigned char environment (-funsigned-char) (practicalswift)\n+- #16505 Changes verbosity of msbuild from quiet to normal in the appveyor script (sipsorcery)\n+- #16293 Make test cases separate functions (MarcoFalke)\n+- #16470 Fail early on disconnect in mininode.wait_for_* (MarcoFalke)\n+- #16277 Suppress output in test_bitcoin for expected errors (gertjaap)\n+- #16493 Fix test failures (MarcoFalke)\n+- #16538 Add missing sync_blocks to feature_pruning (MarcoFalke)\n+- #16509 Adapt test framework for chains other than \"regtest\" (MarcoFalke)\n+- #16363 Add test for BIP30 duplicate tx (MarcoFalke)\n+- #16535 Explain why -whitelist is used in feature_fee_estimation (MarcoFalke)\n+- #16554 only include and use OpenSSL where it's actually needed (BIP70) (fanquake)\n+- #16598 Remove confusing hash256 function in util (elichai)\n+- #16595 travis: Use extended 90 minute timeout when available (MarcoFalke)\n+- #16563 Add unit test for AddTimeData (mzumsande)\n+- #16561 Use colors and dots in test_runner.py output only if standard output is a terminal (practicalswift)\n+- #16465 Test p2sh-witness and bech32 in wallet_import_rescan (MarcoFalke)\n+- #16582 Rework ci (Use travis only as fallback env) (MarcoFalke)\n+- #16633 travis: Fix test_runner.py timeouts (MarcoFalke)\n+- #16646 Run tests with UPnP disabled (fanquake)\n+- #16623 ci: Add environment files for all settings (MarcoFalke)\n+- #16656 fix rpc_setban.py race (jonasschnelli)\n+- #16570 Make descriptor tests deterministic (davereikher)\n+- #16404 Test ZMQ notification after chain reorg (promag)\n+- #16726 Avoid common Python default parameter gotcha when mutable dict/list:s are used as default parameter values (practicalswift)\n+- #16739 ci: Pass down $makejobs to test_runner.py, other improvements (MarcoFalke)\n+- #16767 Check for codespell in lint-spelling.sh (kristapsk)\n+- #16768 Make lint-includes.sh work from any directory (kristapsk)\n+- #15257 Scripts and tools: Bump flake8 to 3.7.8 (Empact)\n+- #16804 Remove unused try-block in assert_debug_log (MarcoFalke)\n+- #16850 `servicesnames` field in `getpeerinfo` and `getnetworkinfo` (darosior)\n+- #16551 Test that low difficulty chain fork is rejected (MarcoFalke)\n+- #16737 Establish only one connection between nodes in rpc_invalidateblock (MarcoFalke)\n+- #16845 Add notes on how to generate data/wallets/high_minversion (MarcoFalke)\n+- #16888 Bump timeouts in slow running tests (MarcoFalke)\n+- #16864 Add python bech32 impl round-trip test (instagibbs)\n+- #16865 add some unit tests for merkle.cpp (soroosh-sdi)\n+- #14696 Add explicit references to related CVE's in p2p_invalid_block test (lucash-dev)\n+- #16907 lint: Add DisabledOpcodeTemplates to whitelist (MarcoFalke)\n+- #16898 Remove connect_nodes_bi (MarcoFalke)\n+- #16917 Move common function assert_approx() into util.py (fridokus)\n+- #16921 Add information on how to add Vulture suppressions (practicalswift)\n+- #16920 Fix extra_args in wallet_import_rescan.py (MarcoFalke)\n+- #16918 Make PORT_MIN in test runner configurable (MarcoFalke)\n+- #16941 travis: Disable feature_block in tsan run due to oom (MarcoFalke)\n+- #16929 follow-up to rpc: default maxfeerate value as BTC/kB (jonatack)\n+- #16959 ci: Set $host before setting fallback values (MarcoFalke)\n+- #16961 Remove python dead code linter (laanwj)\n+- #16931 add unittests for CheckProofOfWork (soroosh-sdi)\n+- #16991 Fix service flag comparison check in rpc_net test (luke-jr) (laanwj)\n+- #16987 Correct docstring param name (jbampton)\n+- #17015 Explain QT_QPA_PLATFORM for gui tests (MarcoFalke)\n+- #17006 Enable UBSan for Travis fuzzing job (practicalswift)\n+- #17086 Fix fs_tests for unknown locales (carnhofdaki)\n+- #15903 appveyor: Write @PACKAGE_NAME@ to config (MarcoFalke)\n+- #16742 test: add executable flag for wallet_watchonly.py (theStack)\n+- #16740 qa: Relax so that the subscriber is ready before publishing zmq messages (#16740)\n+\n+### Miscellaneous\n+- #15335 Fix lack of warning of unrecognized section names (AkioNak)\n+- #15528 contrib: Bump gitian descriptors for 0.19 (MarcoFalke)\n+- #15609 scripts and tools: Set 'distro' explicitly (hebasto)\n+- #15519 Add Poly1305 implementation (jonasschnelli)\n+- #15643 contrib: Gh-merge: include acks in merge commit (MarcoFalke)\n+- #15838 scripts and tools: Fetch missing review comments in github-merge.py (nkostoulas)\n+- #15920 lint: Check that all wallet args are hidden (MarcoFalke)\n+- #15849 Thread names in logs and deadlock debug tools (jamesob)\n+- #15650 Handle the result of posix_fallocate system call (lucayepa)\n+- #15766 scripts and tools: Upgrade gitian image before signing (hebasto)\n+- #15512 Add ChaCha20 encryption option (XOR) (jonasschnelli)\n+- #15968 Fix portability issue with pthreads (grim-trigger)\n+- #15970 Utils and libraries: fix static_assert for macro HAVE_THREAD_LOCAL (orientye)\n+- #15863 scripts and tools: Ensure repos are up-to-date in gitian-build.py (hebasto)\n+- #15224 Add RNG strengthening (10ms once every minute) (sipa)\n+- #15840 Contrib scripts: Filter IPv6 by ASN (abitfan)\n+- #13998 Scripts and tools: gitian-build.py improvements and corrections (hebasto)\n+- #15236 scripts and tools: Make --setup command independent (hebasto)\n+- #16114 contrib: Add curl as a required program in gitian-build.py (fanquake)\n+- #16046 util: Add type safe gettime (MarcoFalke)\n+- #15703 Update secp256k1 subtree to latest upstream (sipa)\n+- #16086 contrib: Use newer config.guess & config.sub in install_db4.sh (fanquake)\n+- #16130 Don't GPG sign intermediate commits with github-merge tool (stevenroose)\n+- #16162 scripts: Add key for michael ford (fanquake) to trusted keys list (fanquake)\n+- #16201 devtools: Always use unabbreviated commit IDs in github-merge.py (laanwj)\n+- #16112 util: Log early messages (MarcoFalke)\n+- #16223 devtools: Fetch and display ACKs at sign-off time in github-merge (laanwj)\n+- #16300 util: Explain why the path is cached (MarcoFalke)\n+- #16314 scripts and tools: Update copyright_header.py script (hebasto)\n+- #16158 Fix logic of memory_cleanse() on MSVC and clean up docs (real-or-random)\n+- #14734 fix an undefined behavior in uint::SetHex (kazcw)\n+- #16327 scripts and tools: Update ShellCheck linter (hebasto)\n+- #15277 contrib: Enable building in guix containers (dongcarl)\n+- #16362 Add bilingual_str type (hebasto)\n+- #16481 logs: add missing space (harding)\n+- #16581 sipsorcery gitian key (sipsorcery)\n+- #16566 util: Refactor upper/lowercase functions (kallewoof)\n+- #16620 util: Move resolveerrmsg to util/error (MarcoFalke)\n+- #16625 scripts: Remove github-merge.py (fanquake)\n+- #15864 Fix datadir handling (hebasto)\n+- #16670 util: Add join helper to join a list of strings (MarcoFalke)\n+- #16665 scripts: Move update-translations.py to maintainer-tools repo (fanquake)\n+- #16730 Support serialization of `std::vector<bool>` (sipa)\n+- #16556 Fix systemd service file configuration directory setup (setpill)\n+- #15615 Add log output during initial header sync (jonasschnelli)\n+- #16774 Avoid unnecessary \"Synchronizing blockheaders\" log messages (jonasschnelli)\n+- #16489 log: harmonize bitcoind logging (jonatack)\n+- #16577 util: Cbufferedfile fixes and unit test (LarryRuane)\n+- #16984 util: Make thread names shorter (hebasto)\n+- #17038 Don't rename main thread at process level (laanwj)\n+- #17184 util: Filter out macos process serial number (hebasto)\n+- #17095 util: Filter control characters out of log messages (laanwj)\n+- #17085 init: Change fallback locale to C.UTF-8 (laanwj)\n+- #16957 9% less memory: make SaltedOutpointHasher noexcept (martinus)\n+- #17449 fix uninitialized variable nMinerConfirmationWindow (bitcoinVBR)\n+\n+### Documentation\n+- #15514 Update Transifex links (fanquake)\n+- #15513 add \"sections\" info to example bitcoin.conf (fanquake)\n+- #15530 Move wallet lock annotations to header (MarcoFalke)\n+- #15562 remove duplicate clone step in build-windows.md (fanquake)\n+- #15565 remove release note fragments (fanquake)\n+- #15444 Additional productivity tips (Sjors)\n+- #15577 Enable TLS in link to chris.beams.io (JeremyRand)\n+- #15604 release note for disabling reject messages by default (jnewbery)\n+- #15611 Add Gitian key for droark (droark)\n+- #15626 Update ACK description in CONTRIBUTING.md (jonatack)\n+- #15603 Add more tips to productivity.md (gwillen)\n+- #15683 Comment for seemingly duplicate LIBBITCOIN_SERVER (Bushstar)\n+- #15685 rpc-mining: Clarify error messages (MarcoFalke)\n+- #15760 Clarify sendrawtransaction::maxfeerate==0 help (MarcoFalke)\n+- #15659 fix findFork comment (r8921039)\n+- #15718 Improve netaddress comments (dongcarl)\n+- #15833 remove out-of-date comment on pay-to-witness support (r8921039)\n+- #15821 Remove upgrade note in release notes from EOL versions (MarcoFalke)\n+- #15267 explain AcceptToMemoryPoolWorker's coins_to_uncache (jamesob)\n+- #15887 Align code example style with clang-format (hebasto)\n+- #15877 Fix -dustrelayfee= argument docs grammar (keepkeyjon)\n+- #15908 Align MSVC build options with Linux build ones (hebasto)\n+- #15941 Add historical release notes for 0.18.0 (laanwj)\n+- #15794 Clarify PR guidelines w/re documentation (dongcarl)\n+- #15607 Release process updates (jonatack)\n+- #14364 Clarify -blocksdir usage (sangaman)\n+- #15777 Add doxygen comments for keypool classes (jnewbery)\n+- #15820 Add productivity notes for dummy rebases (dongcarl)\n+- #15922 Explain how to pass in non-fundamental types into functions (MarcoFalke)\n+- #16080 build/doc: update bitcoin_config.h packages, release process (jonatack)\n+- #16047 analyzepsbt description in doc/psbt.md (jonatack)\n+- #16039 add release note for 14954 (fanquake)\n+- #16139 Add riscv64 to outputs list in release-process.md (JeremyRand)\n+- #16140 create security policy (narula)\n+- #16164 update release process for SECURITY.md (jonatack)\n+- #16213 Remove explicit mention of versions from SECURITY.md (MarcoFalke)\n+- #16186 doc/lint: Fix spelling errors identified by codespell 1.15.0 (Empact)\n+- #16149 Rework section on ACK in CONTRIBUTING.md (MarcoFalke)\n+- #16196 Add release notes for 14897 & 15834 (MarcoFalke)\n+- #16241 add rapidcheck to vcpkg install list (fanquake)\n+- #16243 Remove travis badge from readme (MarcoFalke)\n+- #16256 remove orphaned header in developer notes (jonatack)\n+- #15964 Improve build-osx document formatting (giulio92)\n+- #16313 Fix broken link in doc/build-osx.md (jonatack)\n+- #16330 Use placeholder instead of key expiration date (hebasto)\n+- #16339 add reduce-memory.md (fanquake)\n+- #16347 Include static members in Doxygen (dongcarl)\n+- #15824 Improve netbase comments (dongcarl)\n+- #16430 Update bips 35, 37 and 111 status (MarcoFalke)\n+- #16455 Remove downgrading warning in release notes, per 0.18 branch (MarcoFalke)\n+- #16484 update labels in CONTRIBUTING.md (MarcoFalke)\n+- #16483 update Python command in msvc readme (sipsorcery)\n+- #16504 Add release note for the deprecated totalFee option of bumpfee (promag)\n+- #16448 add note on precedence of options in bitcoin.conf (fanquake)\n+- #16536 Update and extend benchmarking.md (ariard)\n+- #16530 Fix grammar and punctuation in developer notes (Tech1k)\n+- #16574 Add historical release notes for 0.18.1 (laanwj)\n+- #16585 Update Markdown syntax for bdb packages (emilengler)\n+- #16586 Mention other ways to conserve memory on compilation (MarcoFalke)\n+- #16605 Add missing contributor to 0.18.1 release notes (meshcollider)\n+- #16615 Fix typos in COPYRIGHT (gapeman)\n+- #16626 Fix spelling error chache -> cache (nilswloewen)\n+- #16587 Improve versionbits.h documentation (ariard)\n+- #16643 Add ZMQ dependencies to the Fedora build instructions (hebasto)\n+- #16634 Refer in rpcbind doc to the manpage (MarcoFalke)\n+- #16555 mention whitelist is inbound, and applies to blocksonly (Sjors)\n+- #16645 initial RapidCheck property-based testing documentation (jonatack)\n+- #16691 improve depends prefix documentation (fanquake)\n+- #16629 Add documentation for the new whitelist permissions (NicolasDorier)\n+- #16723 Update labels in CONTRIBUTING.md (hebasto)\n+- #16461 Tidy up shadowing section (promag)\n+- #16621 add default bitcoin.conf locations (GChuf)\n+- #16752 Delete stale URL in test README (michaelfolkson)\n+- #14862 Declare BLOCK_VALID_HEADER reserved (MarcoFalke)\n+- #16806 Add issue templates for bug and feature request (MarcoFalke)\n+- #16857 Elaborate need to re-login on Debian-based after usermod for Tor group (clashicly)\n+- #16863 Add a missing closing parenthesis in the bitcoin-wallet's help (darosior)\n+- #16757 CChainState return values (MarcoFalke)\n+- #16847 add comments clarifying how local services are advertised (jamesob)\n+- #16812 Fix whitespace errs in .md files, bitcoin.conf, and Info.plist.in (ch4ot1c)\n+- #16885 Update tx-size-small comment with relevant CVE disclosure (instagibbs)\n+- #16900 Fix doxygen comment for SignTransaction in rpc/rawtransaction_util (MarcoFalke)\n+- #16914 Update homebrew instruction for doxygen (Sjors)\n+- #16912 Remove Doxygen intro from src/bitcoind.cpp (ch4ot1c)\n+- #16960 replace outdated OpenSSL comment in test README (fanquake)\n+- #16968 Remove MSVC update step from translation process (laanwj)\n+- #16953 Improve test READMEs (fjahr)\n+- #16962 Put PR template in comments (laanwj)\n+- #16397 Clarify includeWatching for fundrawtransaction (stevenroose)\n+- #15459 add how to calculate blockchain and chainstate size variables to release process (marcoagner)\n+- #16997 Update bips.md for 0.19 (laanwj)\n+- #17001 Remove mention of renamed mapBlocksUnlinked (MarcoFalke)\n+- #17014 Consolidate release notes before 0.19.0 (move-only) (MarcoFalke)\n+- #17111 update bips.md with buried BIP9 deployments (MarcoFalke)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- 251\n+- Aaron Clauson\n+- Akio Nakamura\n+- Alistair Mann\n+- Amiti Uttarwar\n+- Andrew Chow\n+- andrewtoth\n+- Anthony Towns\n+- Antoine Riard\n+- Aseem Sood\n+- Ben Carman\n+- Ben Woosley\n+- bpay\n+- Carl Dong\n+- Carnhof Daki\n+- Chris Capobianco\n+- Chris Moore\n+- Chuf\n+- clashic\n+- clashicly\n+- Cory Fields\n+- Daki Carnhof\n+- Dan Gershony\n+- Daniel Edgecumbe\n+- Daniel Kraft\n+- Daniel McNally\n+- darosior\n+- David A. Harding\n+- David Reikher\n+- Douglas Roark\n+- Elichai Turkel\n+- Emil\n+- Emil Engler\n+- ezegom\n+- Fabian Jahr\n+- fanquake\n+- Felix Weis\n+- Ferdinando M. Ametrano\n+- fridokus\n+- gapeman\n+- GChuf\n+- Gert-Jaap Glasbergen\n+- Giulio Lombardo\n+- Glenn Willen\n+- Graham Krizek\n+- Gregory Sanders\n+- grim-trigger\n+- gwillen\n+- Hennadii Stepanov\n+- Jack Mallers\n+- James Hilliard\n+- James O'Beirne\n+- Jan Beich\n+- Jeremy Rubin\n+- JeremyRand\n+- Jim Posen\n+- John Bampton\n+- John Newbery\n+- Jon Atack\n+- Jon Layton\n+- Jonas Schnelli\n+- Jonathan \"Duke\" Leto\n+- Jo\u00e3o Barbosa\n+- Joonmo Yang\n+- Jordan Baczuk\n+- Jorge Tim\u00f3n\n+- Josu Go\u00f1i\n+- Julian Fleischer\n+- Karl-Johan Alm\n+- Kaz Wesley\n+- keepkeyjon\n+- Kirill Fomichev\n+- Kristaps Kaupe\n+- Kristian Kramer\n+- Larry Ruane\n+- Lenny Maiorani\n+- LongShao007\n+- Luca Venturini\n+- lucash-dev\n+- Luke Dashjr\n+- marcoagner\n+- MarcoFalke\n+- marcuswin\n+- Martin Ankerl\n+- Martin Zumsande\n+- Matt Corallo\n+- MeshCollider\n+- Michael Folkson\n+- Miguel Herranz\n+- Nathan Marley\n+- Neha Narula\n+- nicolas.dorier\n+- Nils Loewen\n+- nkostoulas\n+- NullFunctor\n+- orient\n+- Patrick Strateman\n+- Peter Bushnell\n+- Peter Wagner\n+- Pieter Wuille\n+- practicalswift\n+- qmma\n+- r8921039\n+- RJ Rybarczyk\n+- Russell Yanofsky\n+- Samuel Dobson\n+- Sebastian Falbesoner\n+- setpill\n+- shannon1916\n+- Sjors Provoost\n+- soroosh-sdi\n+- Steven Roose\n+- Suhas Daftuar\n+- tecnovert\n+- THETCR\n+- Tim Ruffing\n+- Tobias Kaderle\n+- Torkel Rogstad\n+- Ulrich Kempken\n+- whythat\n+- William Casarin\n+- Wladimir J. van der Laan\n+- zenosage\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/bitcoin/bitcoin/)."
      },
      {
        "sha": "086491e92dea86159787b214acf16e0158a400f5",
        "filename": "doc/release-notes/release-notes-0.19.0.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1083,
        "changes": 1086,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14feda0814a9fecf2138041f7d36fe1ab338797f/doc/release-notes/release-notes-0.19.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14feda0814a9fecf2138041f7d36fe1ab338797f/doc/release-notes/release-notes-0.19.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.19.0.md?ref=14feda0814a9fecf2138041f7d36fe1ab338797f",
        "patch": "@@ -1,1086 +1,6 @@\n-Bitcoin Core version 0.19.0 is now available from:\n-\n-  <https://bitcoincore.org/bin/bitcoin-core-0.19.0/>\n-\n-This release includes new features, various bug fixes and performance\n-improvements, as well as updated translations.\n-\n-Please report bugs using the issue tracker at GitHub:\n-\n-  <https://github.com/bitcoin/bitcoin/issues>\n-\n-To receive security and update notifications, please subscribe to:\n-\n-  <https://bitcoincore.org/en/list/announcements/join/>\n-\n-How to Upgrade\n-==============\n-\n-If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the\n-installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n-or `bitcoind`/`bitcoin-qt` (on Linux).\n-\n-Upgrading directly from a version of Bitcoin Core that has reached its EOL is\n-possible, but might take some time if the datadir needs to be migrated.  Old\n-wallet versions of Bitcoin Core are generally supported.\n-\n-Compatibility\n-==============\n-\n-Bitcoin Core is supported and extensively tested on operating systems using\n-the Linux kernel, macOS 10.10+, and Windows 7 and newer. It is not recommended\n-to use Bitcoin Core on unsupported systems.\n-\n-Bitcoin Core should also work on most other Unix-like systems but is not\n-as frequently tested on them.\n-\n-From 0.17.0 onwards, macOS <10.10 is no longer supported. 0.17.0 is\n-built using Qt 5.9.x, which doesn't support versions of macOS older than\n-10.10. Additionally, Bitcoin Core does not yet change appearance when\n-macOS \"dark mode\" is activated.\n-\n-Users running macOS Catalina may need to \"right-click\" and then choose \"Open\"\n-to open the Bitcoin Core .dmg. This is due to new signing requirements\n-imposed by Apple, which the Bitcoin Core project does not yet adhere too.\n-\n-Notable changes\n-===============\n-\n-New user documentation\n-----------------------\n-\n-- [Reduce memory](https://github.com/bitcoin/bitcoin/blob/master/doc/reduce-memory.md)\n-  suggests configuration tweaks for running Bitcoin Core on systems with\n-  limited memory. (#16339)\n-\n-New RPCs\n---------\n-\n-- `getbalances` returns an object with all balances (`mine`,\n-  `untrusted_pending` and `immature`). Please refer to the RPC help of\n-  `getbalances` for details. The new RPC is intended to replace\n-  `getbalance`, `getunconfirmedbalance`, and the balance fields in\n-  `getwalletinfo`.  These old calls and fields may be removed in a\n-  future version. (#15930, #16239)\n-\n-- `setwalletflag` sets and unsets wallet flags that enable or disable\n-  features specific to that existing wallet, such as the new\n-  `avoid_reuse` feature documented elsewhere in these release notes.\n-  (#13756)\n-\n-- `getblockfilter` gets the BIP158 filter for the specified block.  This\n-  RPC is only enabled if block filters have been created using the\n-  `-blockfilterindex` configuration option. (#14121)\n-\n-New settings\n-------------\n-\n-- `-blockfilterindex` enables the creation of BIP158 block filters for\n-  the entire blockchain.  Filters will be created in the background and\n-  currently use about 4 GiB of space.  Note: this version of Bitcoin\n-  Core does not serve block filters over the P2P network, although the\n-  local user may obtain block filters using the `getblockfilter` RPC.\n-  (#14121)\n-\n-Updated settings\n-----------------\n-\n-- `whitebind` and `whitelist` now accept a list of permissions to\n-  provide peers connecting using the indicated interfaces or IP\n-  addresses.  If no permissions are specified with an address or CIDR\n-  network, the implicit default permissions are the same as previous\n-  releases.  See the `bitcoind -help` output for these two options for\n-  details about the available permissions. (#16248)\n-\n-- Users setting custom `dbcache` values can increase their setting slightly\n-  without using any more real memory.  Recent changes reduced the memory use\n-  by about 9% and made chainstate accounting more accurate (it was underestimating\n-  the use of memory before).  For example, if you set a value of \"450\" before, you\n-  may now set a value of \"500\" to use about the same real amount of memory. (#16957)\n-\n-\n-Updated RPCs\n-------------\n-\n-Note: some low-level RPC changes mainly useful for testing are described in the\n-Low-level Changes section below.\n-\n-- `sendmany` no longer has a `minconf` argument.  This argument was not\n-  well-specified and would lead to RPC errors even when the wallet's\n-  coin selection succeeded.  Users who want to influence coin selection\n-  can use the existing `-spendzeroconfchange`, `-limitancestorcount`,\n-  `-limitdescendantcount` and `-walletrejectlongchains` configuration\n-  arguments. (#15596)\n-\n-- `getbalance` and `sendtoaddress`, plus the new RPCs `getbalances` and\n-  `createwallet`, now accept an \"avoid_reuse\" parameter that controls\n-  whether already used addresses should be included in the operation.\n-  Additionally, `sendtoaddress` will avoid partial spends when\n-  `avoid_reuse` is enabled even if this feature is not already enabled\n-  via the `-avoidpartialspends` command line flag because not doing so\n-  would risk using up the \"wrong\" UTXO for an address reuse case.\n-  (#13756)\n-\n-- RPCs which have an `include_watchonly` argument or `includeWatching` option now default to `true` for watch-only\n-  wallets. Affected RPCs are: `getbalance`, `listreceivedbyaddress`, `listreceivedbylabel`, `listtransactions`,\n-  `listsinceblock`, `gettransaction`, `walletcreatefundedpsbt`, and `fundrawtransaction`. (#16383)\n-\n-- `listunspent` now returns a \"reused\" bool for each output if the\n-  wallet flag \"avoid_reuse\" is enabled. (#13756)\n-\n-- `getblockstats` now uses BlockUndo data instead of the transaction\n-  index, making it much faster, no longer dependent on the `-txindex`\n-  configuration option, and functional for all non-pruned blocks.\n-  (#14802)\n-\n-- `utxoupdatepsbt` now accepts a `descriptors` parameter that will fill\n-  out input and output scripts and keys when known. P2SH-witness inputs\n-  will be filled in from the UTXO set when a descriptor is provided that\n-  shows they're spending segwit outputs.  See the RPC help text for full\n-  details. (#15427)\n-\n-- `sendrawtransaction` and `testmempoolaccept` no longer accept a\n-  `allowhighfees` parameter to fail mempool acceptance if the\n-  transaction fee exceeds the value of the configuration option\n-  `-maxtxfee`.  Now there is a hardcoded default maximum feerate that\n-  can be changed when calling either RPC using a `maxfeerate` parameter.\n-  (#15620)\n-\n-- `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry`, and\n-  `getrawmempool` no longer return a `size` field unless the\n-  configuration option `-deprecatedrpc=size` is used.  Instead a new\n-  `vsize` field is returned with the transaction's virtual size\n-  (consistent with other RPCs such as `getrawtransaction`). (#15637)\n-\n-- `getwalletinfo` now includes a `scanning` field that is either `false`\n-  (no scanning) or an object with information about the duration and\n-  progress of the wallet's scanning historical blocks for transactions\n-  affecting its balances. (#15730)\n-\n-- `gettransaction` now accepts a third (boolean) argument `verbose`. If\n-  set to `true`, a new `decoded` field will be added to the response containing\n-  the decoded transaction. This field is equivalent to RPC `decoderawtransaction`,\n-  or RPC `getrawtransaction` when `verbose` is passed. (#16185, #16866, #16873)\n-\n-- `createwallet` accepts a new `passphrase` parameter.  If set, this\n-  will create the new wallet encrypted with the given passphrase.  If\n-  unset (the default) or set to an empty string, no encryption will be\n-  used. (#16394)\n-\n-- `getchaintxstats` RPC now returns the additional key of\n-  `window_final_block_height`. (#16695)\n-\n-- `getmempoolentry` now provides a `weight` field containing the\n-  transaction weight as defined in BIP141. (#16647)\n-\n-- The `getnetworkinfo` and `getpeerinfo` commands now contain a new field with decoded network service flags. (#16786)\n-\n-- `getdescriptorinfo` now returns an additional `checksum` field\n-  containing the checksum for the unmodified descriptor provided by the\n-  user (that is, before the descriptor is normalized for the\n-  `descriptor` field). (#15986)\n-\n-- `joinpsbts` now shuffles the order of the inputs and outputs of the resulting\n-  joined PSBT. Previously, inputs and outputs were added in the order PSBTs were\n-  provided. This made it easy to correlate inputs to outputs, representing a\n-  privacy leak. (#16512)\n-\n-- `walletcreatefundedpsbt` now signals BIP125 Replace-by-Fee if the\n-  `-walletrbf` configuration option is set to true. (#15911)\n-\n-GUI changes\n------------\n-\n-- The GUI wallet now provides bech32 addresses by default.  The user may change the address type\n-  during invoice generation using a GUI toggle, or the default address\n-  type may be changed with the `-addresstype` configuration option.\n-  (#15711, #16497)\n-\n-- In 0.18.0, a `./configure` flag was introduced to allow disabling BIP70 support in the GUI (support was enabled by default). In 0.19.0, this flag is now __disabled__ by default. If you want to compile Bitcoin Core with BIP70 support in the GUI, you can pass `--enable-bip70` to `./configure`. (#15584)\n-\n-Deprecated or removed configuration options\n--------------------------------------------\n-\n-- `-mempoolreplacement` is removed, although default node behavior\n-  remains the same.  This option previously allowed the user to prevent\n-  the node from accepting or relaying BIP125 transaction replacements.\n-  This is different from the remaining configuration option\n-  `-walletrbf`. (#16171)\n-\n-Deprecated or removed RPCs\n---------------------------\n-\n-- `bumpfee` no longer accepts a `totalFee` option unless the\n-  configuration parameter `deprecatedrpc=totalFee` is specified.  This\n-  parameter will be fully removed in a subsequent release. (#15996)\n-\n-- `bumpfee` has a new `fee_rate` option as a replacement for the deprecated `totalFee`. (#16727)\n-\n-- `generate` is now removed after being deprecated in Bitcoin Core 0.18.\n-  Use the `generatetoaddress` RPC instead. (#15492)\n-\n-P2P changes\n+0.19.0 note\n -----------\n \n-- BIP 61 reject messages were deprecated in v0.18. They are now disabled\n-  by default, but can be enabled by setting the `-enablebip61` command\n-  line option.  BIP 61 reject messages will be removed entirely in a\n-  future version of Bitcoin Core. (#14054)\n-\n-- To eliminate well-known denial-of-service vectors in Bitcoin Core,\n-  especially for nodes with spinning disks, the default value for the\n-  `-peerbloomfilters` configuration option has been changed to false.\n-  This prevents Bitcoin Core from sending the BIP111 NODE_BLOOM service\n-  flag, accepting BIP37 bloom filters, or serving merkle blocks or\n-  transactions matching a bloom filter.  Users who still want to provide\n-  bloom filter support may either set the configuration option to true\n-  to re-enable both BIP111 and BIP37 support or enable just BIP37\n-  support for specific peers using the updated `-whitelist` and\n-  `-whitebind` configuration options described elsewhere in these\n-  release notes.  For the near future, lightweight clients using public\n-  BIP111/BIP37 nodes should still be able to connect to older versions\n-  of Bitcoin Core and nodes that have manually enabled BIP37 support,\n-  but developers of such software should consider migrating to either\n-  using specific BIP37 nodes or an alternative transaction filtering\n-  system. (#16152)\n-\n-- By default, Bitcoin Core will now make two additional outbound connections that are exclusively used for block-relay.  No transactions or addr messages will be processed on these connections. These connections are designed to add little additional memory or bandwidth resource requirements but should make some partitioning attacks more difficult to carry out. (#15759)\n-\n-Miscellaneous CLI Changes\n--------------------------\n-\n-- The `testnet` field in `bitcoin-cli -getinfo` has been renamed to\n-  `chain` and now returns the current network name as defined in BIP70\n-  (main, test, regtest). (#15566)\n-\n-Low-level changes\n-=================\n-\n-RPC\n----\n-\n-- `getblockchaininfo` no longer returns a `bip9_softforks` object.\n-  Instead, information has been moved into the `softforks` object and\n-  an additional `type` field describes how Bitcoin Core determines\n-  whether that soft fork is active (e.g. BIP9 or BIP90).  See the RPC\n-  help for details. (#16060)\n-\n-- `getblocktemplate` no longer returns a `rules` array containing `CSV`\n-  and `segwit` (the BIP9 deployments that are currently in active\n-  state). (#16060)\n-\n-- `getrpcinfo` now returns a `logpath` field with the path to\n-  `debug.log`. (#15483)\n-\n-Tests\n------\n-\n-- The regression test chain enabled by the `-regtest` command line flag\n-  now requires transactions to not violate standard policy by default.\n-  This is the same default used for mainnet and makes it easier to test\n-  mainnet behavior on regtest. Note that the testnet still allows\n-  non-standard txs by default and that the policy can be locally\n-  adjusted with the `-acceptnonstdtxn` command line flag for both test\n-  chains. (#15891)\n-\n-Configuration\n-------------\n-\n-- A setting specified in the default section but not also specified in a\n-  network-specific section (e.g. testnet) will now produce an error\n-  preventing startup instead of just a warning unless the network is\n-  mainnet.  This prevents settings intended for mainnet from being\n-  applied to testnet or regtest. (#15629)\n-\n-- On platforms supporting `thread_local`, log lines can be prefixed with\n-  the name of the thread that caused the log. To enable this behavior,\n-  use `-logthreadnames=1`. (#15849)\n-\n-Network\n--------\n-\n-- When fetching a transaction announced by multiple peers, previous versions of\n-  Bitcoin Core would sequentially attempt to download the transaction from each\n-  announcing peer until the transaction is received, in the order that those\n-  peers' announcements were received.  In this release, the download logic has\n-  changed to randomize the fetch order across peers and to prefer sending\n-  download requests to outbound peers over inbound peers. This fixes an issue\n-  where inbound peers could prevent a node from getting a transaction.\n-  (#14897, #15834)\n-\n-- If a Tor hidden service is being used, Bitcoin Core will be bound to\n-  the standard port 8333 even if a different port is configured for\n-  clearnet connections.  This prevents leaking node identity through use\n-  of identical non-default port numbers. (#15651)\n-\n-Mempool and transaction relay\n------------------------------\n-\n-- Allows one extra single-ancestor transaction per package.  Previously,\n-  if a transaction in the mempool had 25 descendants, or it and all of\n-  its descendants were over 101,000 vbytes, any newly-received\n-  transaction that was also a descendant would be ignored.  Now, one\n-  extra descendant will be allowed provided it is an immediate\n-  descendant (child) and the child's size is 10,000 vbytes or less.\n-  This makes it possible for two-party contract protocols such as\n-  Lightning Network to give each participant an output they can spend\n-  immediately for Child-Pays-For-Parent (CPFP) fee bumping without\n-  allowing one malicious participant to fill the entire package and thus\n-  prevent the other participant from spending their output. (#15681)\n-\n-- Transactions with outputs paying v1 to v16 witness versions (future\n-  segwit versions) are now accepted into the mempool, relayed, and\n-  mined.  Attempting to spend those outputs remains forbidden by policy\n-  (\"non-standard\").  When this change has been widely deployed, wallets\n-  and services can accept any valid bech32 Bitcoin address without\n-  concern that transactions paying future segwit versions will become\n-  stuck in an unconfirmed state. (#15846)\n-\n-- Legacy transactions (transactions with no segwit inputs) must now be\n-  sent using the legacy encoding format, enforcing the rule specified in\n-  BIP144.  (#14039)\n-\n-Wallet\n-------\n-\n-- When in pruned mode, a rescan that was triggered by an `importwallet`,\n-  `importpubkey`, `importaddress`, or `importprivkey` RPC will only fail\n-  when blocks have been pruned. Previously it would fail when `-prune`\n-  has been set.  This change allows setting `-prune` to a high value\n-  (e.g. the disk size) without the calls to any of the import RPCs\n-  failing until the first block is pruned. (#15870)\n-\n-- When creating a transaction with a fee above `-maxtxfee` (default 0.1\n-  BTC), the RPC commands `walletcreatefundedpsbt` and\n-  `fundrawtransaction` will now fail instead of rounding down the fee.\n-  Be aware that the `feeRate` argument is specified in BTC per 1,000\n-  vbytes, not satoshi per vbyte. (#16257)\n-\n-- A new wallet flag `avoid_reuse` has been added (default off). When\n-  enabled, a wallet will distinguish between used and unused addresses,\n-  and default to not use the former in coin selection.  When setting\n-  this flag on an existing wallet, rescanning the blockchain is required\n-  to correctly mark previously used destinations.  Together with \"avoid\n-  partial spends\" (added in Bitcoin Core v0.17.0), this can eliminate a\n-  serious privacy issue where a malicious user can track spends by\n-  sending small payments to a previously-paid address that would then\n-  be included with unrelated inputs in future payments. (#13756)\n-\n-Build system changes\n---------------------\n-\n-- Python >=3.5 is now required by all aspects of the project. This\n-  includes the build systems, test framework and linters. The previously\n-  supported minimum (3.4), was EOL in March 2019. (#14954)\n-\n-- The minimum supported miniUPnPc API version is set to 10. This keeps\n-  compatibility with Ubuntu 16.04 LTS and Debian 8 `libminiupnpc-dev`\n-  packages. Please note, on Debian this package is still vulnerable to\n-  [CVE-2017-8798](https://security-tracker.debian.org/tracker/CVE-2017-8798)\n-  (in jessie only) and\n-  [CVE-2017-1000494](https://security-tracker.debian.org/tracker/CVE-2017-1000494)\n-  (both in jessie and in stretch). (#15993)\n-\n-0.19.0 change log\n-=================\n-\n-### Consensus\n-- #16128 Delete error-prone CScript constructor only used with FindAndDelete (instagibbs)\n-- #16060 Bury bip9 deployments (jnewbery)\n-\n-### Policy\n-- #15557 Enhance `bumpfee` to include inputs when targeting a feerate (instagibbs)\n-- #15846 Make sending to future native witness outputs standard (sipa)\n-\n-### Block and transaction handling\n-- #15632 Remove ResendWalletTransactions from the Validation Interface (jnewbery)\n-- #14121 Index for BIP 157 block filters (jimpo)\n-- #15141 Rewrite DoS interface between validation and net_processing (sdaftuar)\n-- #15880 utils and libraries: Replace deprecated Boost Filesystem functions (hebasto)\n-- #15971 validation: Add compile-time checking for negative locking requirement in LimitValidationInterfaceQueue (practicalswift)\n-- #15999 init: Remove dead code in LoadChainTip (MarcoFalke)\n-- #16015 validation: Hold cs_main when reading chainActive in RewindBlockIndex (practicalswift)\n-- #16056 remove unused magic number from consistency check (instagibbs)\n-- #16171 Remove -mempoolreplacement to prevent needless block prop slowness (TheBlueMatt)\n-- #15894 Remove duplicated \"Error: \" prefix in logs (hebasto)\n-- #14193 validation: Add missing mempool locks (MarcoFalke)\n-- #15681 Allow one extra single-ancestor transaction per package (TheBlueMatt)\n-- #15305 [validation] Crash if disconnecting a block fails (sdaftuar)\n-- #16471 log correct messages when CPFP fails (jnewbery)\n-- #16433 txmempool: Remove unused default value MemPoolRemovalReason::UNKNOWN (MarcoFalke)\n-- #13868 Remove unused fScriptChecks parameter from CheckInputs (Empact)\n-- #16421 Conservatively accept RBF bumps bumping one tx at the package limits (TheBlueMatt)\n-- #16854 Prevent UpdateTip log message from being broken up (stevenroose)\n-- #16956 validation: Make GetWitnessCommitmentIndex public (MarcoFalke)\n-- #16713 Ignore old versionbit activations to avoid 'unknown softforks' warning (jnewbery)\n-- #17002 chainparams: Bump assumed chain params (MarcoFalke)\n-- #16849 Fix block index inconsistency in InvalidateBlock() (sdaftuar)\n-\n-### P2P protocol and network code\n-- #15597 Generate log entry when blocks messages are received unexpectedly (pstratem)\n-- #15654 Remove unused unsanitized user agent string CNode::strSubVer (MarcoFalke)\n-- #15689 netaddress: Update CNetAddr for ORCHIDv2 (dongcarl)\n-- #15834 Fix transaction relay bugs introduced in #14897 and expire transactions from peer in-flight map (sdaftuar)\n-- #15651 torcontrol: Use the default/standard network port for Tor hidden services, even if the internal port is set differently (luke-jr)\n-- #16188 Document what happens to getdata of unknown type (MarcoFalke)\n-- #15649 Add ChaCha20Poly1305@Bitcoin AEAD (jonasschnelli)\n-- #16152 Disable bloom filtering by default (TheBlueMatt)\n-- #15993 Drop support of the insecure miniUPnPc versions (hebasto)\n-- #16197 Use mockable time for tx download (MarcoFalke)\n-- #16248 Make whitebind/whitelist permissions more flexible (NicolasDorier)\n-- #16618 [Fix] Allow connection of a noban banned peer (NicolasDorier)\n-- #16631 Restore default whitelistrelay to true (NicolasDorier)\n-- #15759 Add 2 outbound block-relay-only connections (sdaftuar)\n-- #15558 Don't query all DNS seeds at once (sipa)\n-- #16999 0.19 seeds update (laanwj)\n-\n-### Wallet\n-- #15288 Remove wallet -> node global function calls (ryanofsky)\n-- #15491 Improve log output for errors during load (gwillen)\n-- #13541 wallet/rpc: sendrawtransaction maxfeerate (kallewoof)\n-- #15680 Remove resendwallettransactions RPC method (jnewbery)\n-- #15508 Refactor analyzepsbt for use outside RPC code (gwillen)\n-- #15747 Remove plethora of Get*Balance (MarcoFalke)\n-- #15728 Refactor relay transactions (jnewbery)\n-- #15639 bitcoin-wallet tool: Drop libbitcoin_server.a dependency (ryanofsky)\n-- #15853 Remove unused import checkpoints.h (MarcoFalke)\n-- #15780 add cachable amounts for caching credit/debit values (kallewoof)\n-- #15778 Move maxtxfee from node to wallet (jnewbery)\n-- #15901 log on rescan completion (andrewtoth)\n-- #15917 Avoid logging no_such_file_or_directory error (promag)\n-- #15452 Replace CScriptID and CKeyID in CTxDestination with dedicated types (instagibbs)\n-- #15870 Only fail rescan when blocks have actually been pruned (MarcoFalke)\n-- #15006 Add option to create an encrypted wallet (achow101)\n-- #16001 Give WalletModel::UnlockContext move semantics (sipa)\n-- #15741 Batch write imported stuff in importmulti (achow101)\n-- #16144 do not encrypt wallets with disabled private keys (mrwhythat)\n-- #15024 Allow specific private keys to be derived from descriptor (meshcollider)\n-- #13756 \"avoid_reuse\" wallet flag for improved privacy (kallewoof)\n-- #16226 Move ismine to the wallet module (achow101)\n-- #16239 wallet/rpc: follow-up clean-up/fixes to avoid_reuse (kallewoof)\n-- #16286 refactoring: wallet: Fix GCC 7.4.0 warning (hebasto)\n-- #16257 abort when attempting to fund a transaction above -maxtxfee (Sjors)\n-- #16237 Have the wallet give out destinations instead of keys (achow101)\n-- #16322 Fix -maxtxfee check by moving it to CWallet::CreateTransaction (promag)\n-- #16361 Remove redundant pre-TopUpKeypool check (instagibbs)\n-- #16244 Move wallet creation out of the createwallet rpc into its own function (achow101)\n-- #16227 Refactor CWallet's inheritance chain (achow101)\n-- #16208 Consume ReserveDestination on successful CreateTransaction (instagibbs)\n-- #16301 Use CWallet::Import* functions in all import* RPCs (achow101)\n-- #16402 Remove wallet settings from chainparams (MarcoFalke)\n-- #16415 Get rid of PendingWalletTx class (ryanofsky)\n-- #15588 Log the actual wallet file version and no longer publicly expose the \"version\" record (achow101)\n-- #16399 Improve wallet creation (fjahr)\n-- #16475 Enumerate walletdb keys (MarcoFalke)\n-- #15709 Do not add \"setting\" key as unknown (Bushstar)\n-- #16451 Remove CMerkleTx (jnewbery)\n-- #15906 Move min_depth and max_depth to coin control (amitiuttarwar)\n-- #16502 Drop unused OldKey (promag)\n-- #16394 Allow createwallet to take empty passwords to make unencrypted wallets (achow101)\n-- #15911 Use wallet RBF default for walletcreatefundedpsbt (Sjors)\n-- #16503 Remove p2pEnabled from Chain interface (ariard)\n-- #16557 restore coinbase and confirmed/conflicted checks in SubmitMemoryPoolAndRelay() (jnewbery)\n-- #14934 Descriptor expansion cache clarifications (Sjors)\n-- #16383 rpcwallet: default include_watchonly to true for watchonly wallets (jb55)\n-- #16542 Return more specific errors about invalid descriptors (achow101)\n-- #16572 Fix Char as Bool in Wallet (JeremyRubin)\n-- #16753 extract PubKey from P2PK script with Solver (theStack)\n-- #16716 Use wallet name instead of pointer on unload/release (promag)\n-- #16185 gettransaction: add an argument to decode the transaction (darosior)\n-- #16745 Translate all initErrors in CreateWalletFromFile (MarcoFalke)\n-- #16792 Assert that the HRP is lowercase in Bech32::Encode (meshcollider)\n-- #16624 encapsulate transactions state (ariard)\n-- #16830 Cleanup walletinitinterface.h (hebasto)\n-- #16796 Fix segfault in CreateWalletFromFile (MarcoFalke)\n-- #16866 Rename 'decode' argument in gettransaction method to 'verbose' (jnewbery)\n-- #16727 Explicit feerate for bumpfee (instagibbs)\n-- #16609 descriptor: fix missed m_script_arg arg renaming in #14934 (fanquake)\n-\n-### RPC and other APIs\n-- #15492 remove deprecated generate method (Sjors)\n-- #15566 cli: Replace testnet with chain and return network name as per bip70 (fanquake)\n-- #15564 cli: Remove duplicate wallet fields from -getinfo (fanquake)\n-- #15642 Remove deprecated rpc warnings (jnewbery)\n-- #15637 Rename size to vsize in mempool related calls (fanquake)\n-- #15620 Uncouple non-wallet rpcs from maxTxFee global (MarcoFalke)\n-- #15616 Clarify decodescript RPCResult doc (MarcoFalke)\n-- #15669 Fix help text for signtransactionwithXXX (torkelrogstad)\n-- #15596 Ignore sendmany::minconf as dummy value (MarcoFalke)\n-- #15755 remove unused var in rawtransaction.cpp (Bushstar)\n-- #15746 RPCHelpMan: Always name dictionary keys (MarcoFalke)\n-- #15748 remove dead mining code (jnewbery)\n-- #15751 Speed up deriveaddresses for large ranges (sipa)\n-- #15770 Validate maxfeerate with AmountFromValue (promag)\n-- #15474 rest/rpc: Make mempoolinfo atomic (promag)\n-- #15463 Speedup getaddressesbylabel (promag)\n-- #15784 Remove dependency on interfaces::Chain in SignTransaction (ariard)\n-- #15323 Expose g_is_mempool_loaded via getmempoolinfo (Empact)\n-- #15932 Serialize in getblock without cs_main (MarcoFalke)\n-- #15930 Add balances RPC (MarcoFalke)\n-- #15730 Show scanning details in getwalletinfo (promag)\n-- #14802 faster getblockstats using BlockUndo data (FelixWeis)\n-- #14984 Speedup getrawmempool when verbose=true (promag)\n-- #16071 Hint for importmulti in help output of importpubkey and importaddress (kristapsk)\n-- #16063 Mention getwalletinfo where a rescan is triggered (promag)\n-- #16024 deriveaddresses: Correction of descriptor checksum in RPC example (ccapo)\n-- #16217 getrawtransaction: inform about blockhash argument when lookup fails (darosior)\n-- #15427 Add support for descriptors to utxoupdatepsbt (sipa)\n-- #16262 Allow shutdown while in generateblocks (pstratem)\n-- #15483 Adding a 'logpath' entry to getrpcinfo (darosior)\n-- #16325 Clarify that block count means height excl genesis (MarcoFalke)\n-- #16326 add new utxoupdatepsbt arguments to the CRPCCommand and CPRCCvertParam tables (jnewbery)\n-- #16332 Add logpath description for getrpcinfo (instagibbs)\n-- #16240 JSONRPCRequest-aware RPCHelpMan (kallewoof)\n-- #15996 Deprecate totalfee argument in `bumpfee` (instagibbs)\n-- #16467 sendrawtransaction help privacy note (jonatack)\n-- #16596 Fix getblocktemplate CLI example (emilengler)\n-- #15986 Add checksum to getdescriptorinfo (sipa)\n-- #16647 add weight to getmempoolentry output (fanquake)\n-- #16695 Add window final block height to getchaintxstats (leto)\n-- #16798 Refactor rawtransaction_util's SignTransaction to separate prevtx parsing (achow101)\n-- #16285 Improve scantxoutset response and help message (promag)\n-- #16725 Don't show addresses or P2PK in decoderawtransaction (NicolasDorier)\n-- #16787 Human readable network services (darosior)\n-- #16251 Improve signrawtransaction error reporting (ajtowns)\n-- #16873 fix regression in gettransaction (jonatack)\n-- #16512 Shuffle inputs and outputs after joining psbts (achow101)\n-- #16521 Use the default maxfeerate value as BTC/kB (Remagpie)\n-- #16817 Fix casing in getblockchaininfo to be inline with other fields (dangershony)\n-- #17131 fix -rpcclienttimeout 0 option (fjahr)\n-- #17249 Add missing deque include to fix build (jbeich)\n-\n-### GUI\n-- #15464 Drop unused return values in WalletFrame (promag)\n-- #15614 Defer removeAndDeleteWallet when no modal widget is active (promag)\n-- #15711 Generate bech32 addresses by default (MarcoFalke)\n-- #15829 update request payment button text and tab description (fanquake)\n-- #15874 Resolve the qt/guiutil <-> qt/optionsmodel CD (251Labs)\n-- #15371 Uppercase bech32 addresses in qr codes (benthecarman)\n-- #15928 Move QRImageWidget to its own file-pair (luke-jr)\n-- #16113 move coin control \"OK\" to the right hand side of the dialog (fanquake)\n-- #16090 Add vertical spacer to peer detail widget (JosuGZ)\n-- #15886 qt, wallet: Revamp SendConfirmationDialog (hebasto)\n-- #16263 Use qInfo() if no error occurs (hebasto)\n-- #16153 Add antialiasing to traffic graph widget (JosuGZ)\n-- #16350 Remove unused guard (hebasto)\n-- #16106 Sort wallets in open wallet menu (promag)\n-- #16291 Stop translating PACKAGE_NAME (MarcoFalke)\n-- #16380 Remove unused bits from the service flags enum (MarcoFalke)\n-- #16379 Fix autostart filenames on Linux for testnet/regtest (hebasto)\n-- #16366 init: Use InitError for all errors in bitcoind/qt (MarcoFalke)\n-- #16436 Do not create payment server if -disablewallet option provided (hebasto)\n-- #16514 Remove unused RPCConsole::tabFocus (promag)\n-- #16497 Generate bech32 addresses by default (take 2, fixup) (MarcoFalke)\n-- #16349 Remove redundant WalletController::addWallet slot (hebasto)\n-- #16578 Do not pass in command line arguments to QApplication (achow101)\n-- #16612 Remove menu icons (laanwj)\n-- #16677 remove unused PlatformStyle::TextColorIcon (fanquake)\n-- #16694 Ensure transaction send error is always visible (fanquake)\n-- #14879 Add warning messages to the debug window (hebasto)\n-- #16708 Replace obsolete functions of QSslSocket (hebasto)\n-- #16701 Replace functions deprecated in Qt 5.13 (hebasto)\n-- #16706 Replace deprecated QSignalMapper by lambda expressions (hebasto)\n-- #16707 Remove obsolete QModelIndex::child() (hebasto)\n-- #16758 Replace QFontMetrics::width() with TextWidth() (hebasto)\n-- #16760 Change uninstall icon on Windows (GChuf)\n-- #16720 Replace objc_msgSend() function calls with the native Objective-C syntax (hebasto)\n-- #16788 Update transifex slug for 0.19 (laanwj)\n-- #15450 Create wallet menu option (achow101)\n-- #16735 Remove unused menu items for Windows and Linux (GChuf)\n-- #16826 Do additional character escaping for wallet names and address labels (achow101)\n-- #15529 Add Qt programs to msvc build (updated, no code changes) (sipsorcery)\n-- #16714 add prune to intro screen with smart default (Sjors)\n-- #16858 advise users not to switch wallets when opening a BIP70 URI (jameshilliard)\n-- #16822 Create wallet menu option follow-ups (jonatack)\n-- #16882 Re-generate translations before 0.19.0 (MarcoFalke)\n-- #16928 Rename address checkbox back to bech32 (MarcoFalke)\n-- #16837 Fix {C{,XX},LD}FLAGS pickup (dongcarl)\n-- #16971 Change default size of intro frame (emilengler)\n-- #16988 Periodic translations update (laanwj)\n-- #16852 When BIP70 is disabled, get PaymentRequest merchant using string search (achow101)\n-- #16952 make sure to update the UI when deleting a transaction (jonasschnelli)\n-- #17031 Prevent processing duplicate payment requests (promag)\n-- #17135 Make polling in ClientModel asynchronous (promag)\n-- #17120 Fix start timer from non QThread (promag)\n-- #17257 disable font antialiasing for QR image address (fanquake)\n-\n-### Build system\n-- #14954 Require python 3.5 (MarcoFalke)\n-- #15580 native_protobuf: avoid system zlib (dongcarl)\n-- #15601 Switch to python3 (take 3) (MarcoFalke)\n-- #15581 Make less assumptions about build env (dongcarl)\n-- #14853 latest RapidCheck (fanquake)\n-- #15446 Improve depends debuggability (dongcarl)\n-- #13788 Fix --disable-asm for newer assembly checks/code (luke-jr)\n-- #12051 add missing debian contrib file to tarball (puchu)\n-- #15919 Remove unused OpenSSL includes to make it more clear where OpenSSL is used (practicalswift)\n-- #15978 .gitignore: Don't ignore depends patches (dongcarl)\n-- #15939 gitian: Remove windows 32 bit build (MarcoFalke)\n-- #15239 scripts and tools: Move non-linux build source tarballs to \"bitcoin-binaries/version\" directory (hebasto)\n-- #14047 Add HKDF_HMAC256_L32 and method to negate a private key (jonasschnelli)\n-- #16051 add patch to common dependencies (fanquake)\n-- #16049 switch to secure download of all dependencies (Kemu)\n-- #16059 configure: Fix thread_local detection (dongcarl)\n-- #16089 add ability to skip building zeromq (fanquake)\n-- #15844 Purge libtool archives (dongcarl)\n-- #15461 update to Boost 1.70 (Sjors)\n-- #16141 remove GZIP export from gitian descriptors (fanquake)\n-- #16235 Cleaned up and consolidated msbuild files (no code changes) (sipsorcery)\n-- #16246 MSVC: Fix error in debug mode (Fix #16245) (NicolasDorier)\n-- #16183 xtrans: Configure flags cleanup (dongcarl)\n-- #16258 [MSVC]: Create the config.ini as part of bitcoind build (NicolasDorier)\n-- #16271 remove -Wall from rapidcheck build flags (fanquake)\n-- #16309 [MSVC] allow user level project customization (NicolasDorier)\n-- #16308 [MSVC] Copy build output to src/ automatically after build (NicolasDorier)\n-- #15457 Check std::system for -[alert|block|wallet]notify (Sjors)\n-- #16344 use #if HAVE_SYSTEM instead of defined(HAVE_SYSTEM) (Sjors)\n-- #16352 prune dbus from depends (fanquake)\n-- #16270 expat 2.2.7 (fanquake)\n-- #16408 Prune X packages (dongcarl)\n-- #16386 disable unused Qt features (fanquake)\n-- #16424 Treat -Wswitch as error when --enable-werror (MarcoFalke)\n-- #16441 remove qt libjpeg check from bitcoin_qt.m4 (fanquake)\n-- #16434 Specify AM_CPPFLAGS for ZMQ (domob1812)\n-- #16534 add Qt Creator Makefile.am.user to .gitignore (Bushstar)\n-- #16573 disable building libsecp256k1 benchmarks (fanquake)\n-- #16533 disable libxcb extensions (fanquake)\n-- #16589 Remove unused src/obj-test folder (MarcoFalke)\n-- #16435 autoconf: Sane `--enable-debug` defaults (dongcarl)\n-- #16622 echo property tests status during build (jonatack)\n-- #16611 Remove src/obj directory from repository (laanwj)\n-- #16371 ignore macOS make deploy artefacts & add them to clean-local (fanquake)\n-- #16654 build: update RapidCheck Makefile (jonatack)\n-- #16370 cleanup package configure flags (fanquake)\n-- #16746 msbuild: Ignore linker warning (sipsorcery)\n-- #16750 msbuild: adds bench_bitcoin to auto generated project files (sipsorcery)\n-- #16810 guix: Remove ssp spec file hack (dongcarl)\n-- #16477 skip deploying plugins we dont use in macdeployqtplus (fanquake)\n-- #16413 Bump QT to LTS release 5.9.8 (THETCR)\n-- #15584 disable BIP70 support by default (fanquake)\n-- #16871 make building protobuf optional in depends (fanquake)\n-- #16879 remove redundant sed patching (fanquake)\n-- #16809 zlib: Move toolchain options to configure (dongcarl)\n-- #15146 Solve SmartOS FD_ZERO build issue (Empact)\n-- #16870 update boost macros to latest upstream for improved error reporting (fanquake)\n-- #16982 Factor out qt translations from build system (laanwj)\n-- #16926 Add OpenSSL termios fix for musl libc (nmarley)\n-- #16927 Refresh ZeroMQ 4.3.1 patch (nmarley)\n-- #17005 Qt version appears only if GUI is being built (ch4ot1c)\n-- #16468 Exclude depends/Makefile in .gitignore (promag)\n-\n-### Tests and QA\n-- #15296 Add script checking for deterministic line coverage in unit tests (practicalswift)\n-- #15338 ci: Build and run tests once on freebsd (MarcoFalke)\n-- #15479 Add .style.yapf (MarcoFalke)\n-- #15534 lint-format-strings: open files sequentially (fix for OS X) (gwillen)\n-- #15504 fuzz: Link BasicTestingSetup (shared with unit tests) (MarcoFalke)\n-- #15473 bench: Benchmark mempooltojson (MarcoFalke)\n-- #15466 Print remaining jobs in test_runner.py (stevenroose)\n-- #15631 mininode: Clearer error message on invalid magic bytes (MarcoFalke)\n-- #15255 Remove travis_wait from lint script (gkrizek)\n-- #15686 make pruning test faster (jnewbery)\n-- #15533 .style.yapf: Set column_limit=160 (MarcoFalke)\n-- #15660 Overhaul p2p_compactblocks.py (sdaftuar)\n-- #15495 Add regtests for HTTP status codes (domob1812)\n-- #15772 Properly log named args in authproxy (MarcoFalke)\n-- #15771 Prevent concurrency issues reading .cookie file (promag)\n-- #15693 travis: Switch to ubuntu keyserver to avoid timeouts (MarcoFalke)\n-- #15629 init: Throw error when network specific config is ignored (MarcoFalke)\n-- #15773 Add BitcoinTestFramework::sync_* methods (MarcoFalke)\n-- #15797 travis: Bump second timeout to 33 minutes, add rationale (MarcoFalke)\n-- #15788 Unify testing setups for fuzz, bench, and unit tests (MarcoFalke)\n-- #15352 Reduce noise level in test_bitcoin output (practicalswift)\n-- #15779 Add wallet_balance benchmark (MarcoFalke)\n-- #15843 fix outdated include in blockfilter_index_tests (jamesob)\n-- #15866 Add missing syncwithvalidationinterfacequeue to wallet_import_rescan (MarcoFalke)\n-- #15697 Make swap_magic_bytes in p2p_invalid_messages atomic (MarcoFalke)\n-- #15895 Avoid re-reading config.ini unnecessarily (luke-jr)\n-- #15896 feature_filelock, interface_bitcoin_cli: Use PACKAGE_NAME in messages rather than hardcoding Bitcoin Core (luke-jr)\n-- #15897 QA/mininode: Send all headers upfront in send_blocks_and_test to avoid sending an unconnected one (luke-jr)\n-- #15696 test_runner: Move feature_pruning to base tests (MarcoFalke)\n-- #15869 Add settings merge test to prevent regresssions (ryanofsky)\n-- #15758 Add further tests to wallet_balance (MarcoFalke)\n-- #15841 combine_logs: append node stderr and stdout if it exists (MarcoFalke)\n-- #15949 test_runner: Move pruning back to extended (MarcoFalke)\n-- #15927 log thread names by default in functional tests (jnewbery)\n-- #15664 change default Python block serialization to witness (instagibbs)\n-- #15988 Add test for ArgsManager::GetChainName (ryanofsky)\n-- #15963 Make random seed logged and settable (jnewbery)\n-- #15943 Fail if RPC has been added without tests (MarcoFalke)\n-- #16036 travis: Run all lint scripts even if one fails (scravy)\n-- #13555 parameterize adjustment period in versionbits_computeblockversion (JBaczuk)\n-- #16079 wallet_balance.py: Prevent edge cases (stevenroose)\n-- #16078 replace tx hash with txid in rawtransaction test (LongShao007)\n-- #16042 Bump MAX_NODES to 12 (MarcoFalke)\n-- #16124 Limit Python linting to files in the repo (practicalswift)\n-- #16143 Mark unit test blockfilter_index_initial_sync as non-deterministic (practicalswift)\n-- #16214 travis: Fix caching issues (MarcoFalke)\n-- #15982 Make msg_block a witness block (MarcoFalke)\n-- #16225 Make coins_tests/updatecoins_simulation_test deterministic (practicalswift)\n-- #16236 fuzz: Log output even if fuzzer failed (MarcoFalke)\n-- #15520 cirrus: Run extended test feature_pruning (MarcoFalke)\n-- #16234 Add test for unknown args (MarcoFalke)\n-- #16207 stop generating lcov coverage when functional tests fail (asood123)\n-- #16252 Log to debug.log in all unit tests (MarcoFalke)\n-- #16289 Add missing ECC_Stop() in GUI rpcnestedtests.cpp (jonasschnelli)\n-- #16278 Remove unused includes (practicalswift)\n-- #16302 Add missing syncwithvalidationinterfacequeue to wallet_balance test (MarcoFalke)\n-- #15538 wallet_bumpfee.py: Make sure coin selection produces change (instagibbs)\n-- #16294 Create at most one testing setup (MarcoFalke)\n-- #16299 bench: Move generated data to a dedicated translation unit (promag)\n-- #16329 Add tests for getblockchaininfo.softforks (MarcoFalke)\n-- #15687 tool wallet test coverage for unexpected writes to wallet (jonatack)\n-- #16267 bench: Benchmark blocktojson (fanatid)\n-- #14505 Add linter to make sure single parameter constructors are marked explicit (practicalswift)\n-- #16338 Disable other targets when enable-fuzz is set (qmma70)\n-- #16334 rpc_users: Also test rpcauth.py with password (dongcarl)\n-- #15282 Replace hard-coded hex tx with class in test framework (stevenroose)\n-- #16390 Add --filter option to test_runner.py (promag)\n-- #15891 Require standard txs in regtest by default (MarcoFalke)\n-- #16374 Enable passing wildcard test names to test runner from root (jonatack)\n-- #16420 Fix race condition in wallet_encryption test (jonasschnelli)\n-- #16422 remove redundant setup in addrman_tests (zenosage)\n-- #16438 travis: Print memory and number of cpus (MarcoFalke)\n-- #16445 Skip flaky p2p_invalid_messages test on macOS (fjahr)\n-- #16459 Fix race condition in example_test.py (sdaftuar)\n-- #16464 Ensure we don't generate a too-big block in p2sh sigops test (sdaftuar)\n-- #16491 fix deprecated log.warn in feature_dbcrash test (jonatack)\n-- #15134 Switch one of the Travis jobs to an unsigned char environment (-funsigned-char) (practicalswift)\n-- #16505 Changes verbosity of msbuild from quiet to normal in the appveyor script (sipsorcery)\n-- #16293 Make test cases separate functions (MarcoFalke)\n-- #16470 Fail early on disconnect in mininode.wait_for_* (MarcoFalke)\n-- #16277 Suppress output in test_bitcoin for expected errors (gertjaap)\n-- #16493 Fix test failures (MarcoFalke)\n-- #16538 Add missing sync_blocks to feature_pruning (MarcoFalke)\n-- #16509 Adapt test framework for chains other than \"regtest\" (MarcoFalke)\n-- #16363 Add test for BIP30 duplicate tx (MarcoFalke)\n-- #16535 Explain why -whitelist is used in feature_fee_estimation (MarcoFalke)\n-- #16554 only include and use OpenSSL where it's actually needed (BIP70) (fanquake)\n-- #16598 Remove confusing hash256 function in util (elichai)\n-- #16595 travis: Use extended 90 minute timeout when available (MarcoFalke)\n-- #16563 Add unit test for AddTimeData (mzumsande)\n-- #16561 Use colors and dots in test_runner.py output only if standard output is a terminal (practicalswift)\n-- #16465 Test p2sh-witness and bech32 in wallet_import_rescan (MarcoFalke)\n-- #16582 Rework ci (Use travis only as fallback env) (MarcoFalke)\n-- #16633 travis: Fix test_runner.py timeouts (MarcoFalke)\n-- #16646 Run tests with UPnP disabled (fanquake)\n-- #16623 ci: Add environment files for all settings (MarcoFalke)\n-- #16656 fix rpc_setban.py race (jonasschnelli)\n-- #16570 Make descriptor tests deterministic (davereikher)\n-- #16404 Test ZMQ notification after chain reorg (promag)\n-- #16726 Avoid common Python default parameter gotcha when mutable dict/list:s are used as default parameter values (practicalswift)\n-- #16739 ci: Pass down $makejobs to test_runner.py, other improvements (MarcoFalke)\n-- #16767 Check for codespell in lint-spelling.sh (kristapsk)\n-- #16768 Make lint-includes.sh work from any directory (kristapsk)\n-- #15257 Scripts and tools: Bump flake8 to 3.7.8 (Empact)\n-- #16804 Remove unused try-block in assert_debug_log (MarcoFalke)\n-- #16850 `servicesnames` field in `getpeerinfo` and `getnetworkinfo` (darosior)\n-- #16551 Test that low difficulty chain fork is rejected (MarcoFalke)\n-- #16737 Establish only one connection between nodes in rpc_invalidateblock (MarcoFalke)\n-- #16845 Add notes on how to generate data/wallets/high_minversion (MarcoFalke)\n-- #16888 Bump timeouts in slow running tests (MarcoFalke)\n-- #16864 Add python bech32 impl round-trip test (instagibbs)\n-- #16865 add some unit tests for merkle.cpp (soroosh-sdi)\n-- #14696 Add explicit references to related CVE's in p2p_invalid_block test (lucash-dev)\n-- #16907 lint: Add DisabledOpcodeTemplates to whitelist (MarcoFalke)\n-- #16898 Remove connect_nodes_bi (MarcoFalke)\n-- #16917 Move common function assert_approx() into util.py (fridokus)\n-- #16921 Add information on how to add Vulture suppressions (practicalswift)\n-- #16920 Fix extra_args in wallet_import_rescan.py (MarcoFalke)\n-- #16918 Make PORT_MIN in test runner configurable (MarcoFalke)\n-- #16941 travis: Disable feature_block in tsan run due to oom (MarcoFalke)\n-- #16929 follow-up to rpc: default maxfeerate value as BTC/kB (jonatack)\n-- #16959 ci: Set $host before setting fallback values (MarcoFalke)\n-- #16961 Remove python dead code linter (laanwj)\n-- #16931 add unittests for CheckProofOfWork (soroosh-sdi)\n-- #16991 Fix service flag comparison check in rpc_net test (luke-jr) (laanwj)\n-- #16987 Correct docstring param name (jbampton)\n-- #17015 Explain QT_QPA_PLATFORM for gui tests (MarcoFalke)\n-- #17006 Enable UBSan for Travis fuzzing job (practicalswift)\n-- #17086 Fix fs_tests for unknown locales (carnhofdaki)\n-- #15903 appveyor: Write @PACKAGE_NAME@ to config (MarcoFalke)\n-- #16742 test: add executable flag for wallet_watchonly.py (theStack)\n-- #16740 qa: Relax so that the subscriber is ready before publishing zmq messages (#16740)\n-\n-### Miscellaneous\n-- #15335 Fix lack of warning of unrecognized section names (AkioNak)\n-- #15528 contrib: Bump gitian descriptors for 0.19 (MarcoFalke)\n-- #15609 scripts and tools: Set 'distro' explicitly (hebasto)\n-- #15519 Add Poly1305 implementation (jonasschnelli)\n-- #15643 contrib: Gh-merge: include acks in merge commit (MarcoFalke)\n-- #15838 scripts and tools: Fetch missing review comments in github-merge.py (nkostoulas)\n-- #15920 lint: Check that all wallet args are hidden (MarcoFalke)\n-- #15849 Thread names in logs and deadlock debug tools (jamesob)\n-- #15650 Handle the result of posix_fallocate system call (lucayepa)\n-- #15766 scripts and tools: Upgrade gitian image before signing (hebasto)\n-- #15512 Add ChaCha20 encryption option (XOR) (jonasschnelli)\n-- #15968 Fix portability issue with pthreads (grim-trigger)\n-- #15970 Utils and libraries: fix static_assert for macro HAVE_THREAD_LOCAL (orientye)\n-- #15863 scripts and tools: Ensure repos are up-to-date in gitian-build.py (hebasto)\n-- #15224 Add RNG strengthening (10ms once every minute) (sipa)\n-- #15840 Contrib scripts: Filter IPv6 by ASN (abitfan)\n-- #13998 Scripts and tools: gitian-build.py improvements and corrections (hebasto)\n-- #15236 scripts and tools: Make --setup command independent (hebasto)\n-- #16114 contrib: Add curl as a required program in gitian-build.py (fanquake)\n-- #16046 util: Add type safe gettime (MarcoFalke)\n-- #15703 Update secp256k1 subtree to latest upstream (sipa)\n-- #16086 contrib: Use newer config.guess & config.sub in install_db4.sh (fanquake)\n-- #16130 Don't GPG sign intermediate commits with github-merge tool (stevenroose)\n-- #16162 scripts: Add key for michael ford (fanquake) to trusted keys list (fanquake)\n-- #16201 devtools: Always use unabbreviated commit IDs in github-merge.py (laanwj)\n-- #16112 util: Log early messages (MarcoFalke)\n-- #16223 devtools: Fetch and display ACKs at sign-off time in github-merge (laanwj)\n-- #16300 util: Explain why the path is cached (MarcoFalke)\n-- #16314 scripts and tools: Update copyright_header.py script (hebasto)\n-- #16158 Fix logic of memory_cleanse() on MSVC and clean up docs (real-or-random)\n-- #14734 fix an undefined behavior in uint::SetHex (kazcw)\n-- #16327 scripts and tools: Update ShellCheck linter (hebasto)\n-- #15277 contrib: Enable building in guix containers (dongcarl)\n-- #16362 Add bilingual_str type (hebasto)\n-- #16481 logs: add missing space (harding)\n-- #16581 sipsorcery gitian key (sipsorcery)\n-- #16566 util: Refactor upper/lowercase functions (kallewoof)\n-- #16620 util: Move resolveerrmsg to util/error (MarcoFalke)\n-- #16625 scripts: Remove github-merge.py (fanquake)\n-- #15864 Fix datadir handling (hebasto)\n-- #16670 util: Add join helper to join a list of strings (MarcoFalke)\n-- #16665 scripts: Move update-translations.py to maintainer-tools repo (fanquake)\n-- #16730 Support serialization of `std::vector<bool>` (sipa)\n-- #16556 Fix systemd service file configuration directory setup (setpill)\n-- #15615 Add log output during initial header sync (jonasschnelli)\n-- #16774 Avoid unnecessary \"Synchronizing blockheaders\" log messages (jonasschnelli)\n-- #16489 log: harmonize bitcoind logging (jonatack)\n-- #16577 util: Cbufferedfile fixes and unit test (LarryRuane)\n-- #16984 util: Make thread names shorter (hebasto)\n-- #17038 Don't rename main thread at process level (laanwj)\n-- #17184 util: Filter out macos process serial number (hebasto)\n-- #17095 util: Filter control characters out of log messages (laanwj)\n-- #17085 init: Change fallback locale to C.UTF-8 (laanwj)\n-- #16957 9% less memory: make SaltedOutpointHasher noexcept (martinus)\n-\n-### Documentation\n-- #15514 Update Transifex links (fanquake)\n-- #15513 add \"sections\" info to example bitcoin.conf (fanquake)\n-- #15530 Move wallet lock annotations to header (MarcoFalke)\n-- #15562 remove duplicate clone step in build-windows.md (fanquake)\n-- #15565 remove release note fragments (fanquake)\n-- #15444 Additional productivity tips (Sjors)\n-- #15577 Enable TLS in link to chris.beams.io (JeremyRand)\n-- #15604 release note for disabling reject messages by default (jnewbery)\n-- #15611 Add Gitian key for droark (droark)\n-- #15626 Update ACK description in CONTRIBUTING.md (jonatack)\n-- #15603 Add more tips to productivity.md (gwillen)\n-- #15683 Comment for seemingly duplicate LIBBITCOIN_SERVER (Bushstar)\n-- #15685 rpc-mining: Clarify error messages (MarcoFalke)\n-- #15760 Clarify sendrawtransaction::maxfeerate==0 help (MarcoFalke)\n-- #15659 fix findFork comment (r8921039)\n-- #15718 Improve netaddress comments (dongcarl)\n-- #15833 remove out-of-date comment on pay-to-witness support (r8921039)\n-- #15821 Remove upgrade note in release notes from EOL versions (MarcoFalke)\n-- #15267 explain AcceptToMemoryPoolWorker's coins_to_uncache (jamesob)\n-- #15887 Align code example style with clang-format (hebasto)\n-- #15877 Fix -dustrelayfee= argument docs grammar (keepkeyjon)\n-- #15908 Align MSVC build options with Linux build ones (hebasto)\n-- #15941 Add historical release notes for 0.18.0 (laanwj)\n-- #15794 Clarify PR guidelines w/re documentation (dongcarl)\n-- #15607 Release process updates (jonatack)\n-- #14364 Clarify -blocksdir usage (sangaman)\n-- #15777 Add doxygen comments for keypool classes (jnewbery)\n-- #15820 Add productivity notes for dummy rebases (dongcarl)\n-- #15922 Explain how to pass in non-fundamental types into functions (MarcoFalke)\n-- #16080 build/doc: update bitcoin_config.h packages, release process (jonatack)\n-- #16047 analyzepsbt description in doc/psbt.md (jonatack)\n-- #16039 add release note for 14954 (fanquake)\n-- #16139 Add riscv64 to outputs list in release-process.md (JeremyRand)\n-- #16140 create security policy (narula)\n-- #16164 update release process for SECURITY.md (jonatack)\n-- #16213 Remove explicit mention of versions from SECURITY.md (MarcoFalke)\n-- #16186 doc/lint: Fix spelling errors identified by codespell 1.15.0 (Empact)\n-- #16149 Rework section on ACK in CONTRIBUTING.md (MarcoFalke)\n-- #16196 Add release notes for 14897 & 15834 (MarcoFalke)\n-- #16241 add rapidcheck to vcpkg install list (fanquake)\n-- #16243 Remove travis badge from readme (MarcoFalke)\n-- #16256 remove orphaned header in developer notes (jonatack)\n-- #15964 Improve build-osx document formatting (giulio92)\n-- #16313 Fix broken link in doc/build-osx.md (jonatack)\n-- #16330 Use placeholder instead of key expiration date (hebasto)\n-- #16339 add reduce-memory.md (fanquake)\n-- #16347 Include static members in Doxygen (dongcarl)\n-- #15824 Improve netbase comments (dongcarl)\n-- #16430 Update bips 35, 37 and 111 status (MarcoFalke)\n-- #16455 Remove downgrading warning in release notes, per 0.18 branch (MarcoFalke)\n-- #16484 update labels in CONTRIBUTING.md (MarcoFalke)\n-- #16483 update Python command in msvc readme (sipsorcery)\n-- #16504 Add release note for the deprecated totalFee option of bumpfee (promag)\n-- #16448 add note on precedence of options in bitcoin.conf (fanquake)\n-- #16536 Update and extend benchmarking.md (ariard)\n-- #16530 Fix grammar and punctuation in developer notes (Tech1k)\n-- #16574 Add historical release notes for 0.18.1 (laanwj)\n-- #16585 Update Markdown syntax for bdb packages (emilengler)\n-- #16586 Mention other ways to conserve memory on compilation (MarcoFalke)\n-- #16605 Add missing contributor to 0.18.1 release notes (meshcollider)\n-- #16615 Fix typos in COPYRIGHT (gapeman)\n-- #16626 Fix spelling error chache -> cache (nilswloewen)\n-- #16587 Improve versionbits.h documentation (ariard)\n-- #16643 Add ZMQ dependencies to the Fedora build instructions (hebasto)\n-- #16634 Refer in rpcbind doc to the manpage (MarcoFalke)\n-- #16555 mention whitelist is inbound, and applies to blocksonly (Sjors)\n-- #16645 initial RapidCheck property-based testing documentation (jonatack)\n-- #16691 improve depends prefix documentation (fanquake)\n-- #16629 Add documentation for the new whitelist permissions (NicolasDorier)\n-- #16723 Update labels in CONTRIBUTING.md (hebasto)\n-- #16461 Tidy up shadowing section (promag)\n-- #16621 add default bitcoin.conf locations (GChuf)\n-- #16752 Delete stale URL in test README (michaelfolkson)\n-- #14862 Declare BLOCK_VALID_HEADER reserved (MarcoFalke)\n-- #16806 Add issue templates for bug and feature request (MarcoFalke)\n-- #16857 Elaborate need to re-login on Debian-based after usermod for Tor group (clashicly)\n-- #16863 Add a missing closing parenthesis in the bitcoin-wallet's help (darosior)\n-- #16757 CChainState return values (MarcoFalke)\n-- #16847 add comments clarifying how local services are advertised (jamesob)\n-- #16812 Fix whitespace errs in .md files, bitcoin.conf, and Info.plist.in (ch4ot1c)\n-- #16885 Update tx-size-small comment with relevant CVE disclosure (instagibbs)\n-- #16900 Fix doxygen comment for SignTransaction in rpc/rawtransaction_util (MarcoFalke)\n-- #16914 Update homebrew instruction for doxygen (Sjors)\n-- #16912 Remove Doxygen intro from src/bitcoind.cpp (ch4ot1c)\n-- #16960 replace outdated OpenSSL comment in test README (fanquake)\n-- #16968 Remove MSVC update step from translation process (laanwj)\n-- #16953 Improve test READMEs (fjahr)\n-- #16962 Put PR template in comments (laanwj)\n-- #16397 Clarify includeWatching for fundrawtransaction (stevenroose)\n-- #15459 add how to calculate blockchain and chainstate size variables to release process (marcoagner)\n-- #16997 Update bips.md for 0.19 (laanwj)\n-- #17001 Remove mention of renamed mapBlocksUnlinked (MarcoFalke)\n-- #17014 Consolidate release notes before 0.19.0 (move-only) (MarcoFalke)\n-- #17111 update bips.md with buried BIP9 deployments (MarcoFalke)\n-\n-Credits\n-=======\n-\n-Thanks to everyone who directly contributed to this release:\n-\n-- 251\n-- Aaron Clauson\n-- Akio Nakamura\n-- Alistair Mann\n-- Amiti Uttarwar\n-- Andrew Chow\n-- andrewtoth\n-- Anthony Towns\n-- Antoine Riard\n-- Aseem Sood\n-- Ben Carman\n-- Ben Woosley\n-- bpay\n-- Carl Dong\n-- Carnhof Daki\n-- Chris Capobianco\n-- Chris Moore\n-- Chuf\n-- clashic\n-- clashicly\n-- Cory Fields\n-- Daki Carnhof\n-- Dan Gershony\n-- Daniel Edgecumbe\n-- Daniel Kraft\n-- Daniel McNally\n-- darosior\n-- David A. Harding\n-- David Reikher\n-- Douglas Roark\n-- Elichai Turkel\n-- Emil\n-- Emil Engler\n-- ezegom\n-- Fabian Jahr\n-- fanquake\n-- Felix Weis\n-- Ferdinando M. Ametrano\n-- fridokus\n-- gapeman\n-- GChuf\n-- Gert-Jaap Glasbergen\n-- Giulio Lombardo\n-- Glenn Willen\n-- Graham Krizek\n-- Gregory Sanders\n-- grim-trigger\n-- gwillen\n-- Hennadii Stepanov\n-- Jack Mallers\n-- James Hilliard\n-- James O'Beirne\n-- Jan Beich\n-- Jeremy Rubin\n-- JeremyRand\n-- Jim Posen\n-- John Bampton\n-- John Newbery\n-- Jon Atack\n-- Jon Layton\n-- Jonas Schnelli\n-- Jonathan \"Duke\" Leto\n-- Jo\u00e3o Barbosa\n-- Joonmo Yang\n-- Jordan Baczuk\n-- Jorge Tim\u00f3n\n-- Josu Go\u00f1i\n-- Julian Fleischer\n-- Karl-Johan Alm\n-- Kaz Wesley\n-- keepkeyjon\n-- Kirill Fomichev\n-- Kristaps Kaupe\n-- Kristian Kramer\n-- Larry Ruane\n-- Lenny Maiorani\n-- LongShao007\n-- Luca Venturini\n-- lucash-dev\n-- Luke Dashjr\n-- marcoagner\n-- MarcoFalke\n-- marcuswin\n-- Martin Ankerl\n-- Martin Zumsande\n-- Matt Corallo\n-- MeshCollider\n-- Michael Folkson\n-- Miguel Herranz\n-- Nathan Marley\n-- Neha Narula\n-- nicolas.dorier\n-- Nils Loewen\n-- nkostoulas\n-- orient\n-- Patrick Strateman\n-- Peter Bushnell\n-- Peter Wagner\n-- Pieter Wuille\n-- practicalswift\n-- qmma\n-- r8921039\n-- RJ Rybarczyk\n-- Russell Yanofsky\n-- Samuel Dobson\n-- Sebastian Falbesoner\n-- setpill\n-- shannon1916\n-- Sjors Provoost\n-- soroosh-sdi\n-- Steven Roose\n-- Suhas Daftuar\n-- tecnovert\n-- THETCR\n-- Tim Ruffing\n-- Tobias Kaderle\n-- Torkel Rogstad\n-- Ulrich Kempken\n-- whythat\n-- William Casarin\n-- Wladimir J. van der Laan\n-- zenosage\n+Due to a last-minute issue (#17449), 0.19.0, although it was tagged, was never released.\n \n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/bitcoin/bitcoin/).\n+See the release notes for 0.19.0.1 instead."
      }
    ]
  },
  {
    "sha": "2eeacdfe44e5f5cbb240f92b3d7ddcdf5079dc3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWVhY2RmZTQ0ZTVmNWNiYjI0MGY5MmIzZDdkZGNkZjUwNzlkYzNi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-24T10:19:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-24T10:19:54Z"
      },
      "message": "Merge #17527: Fix CPUID subleaf iteration\n\nf93fc61c65d605eae2d3e2c98bdd30ae587fcdab Put bounds on the number of CPUID leaves explored (Pieter Wuille)\nba2c5fe1477cec80d7e02f824daba21a1021758e Fix CPUID subleaf iteration (Pieter Wuille)\n\nPull request description:\n\n  This fixes #17523.\n\n  The code to determine which CPUID subleaves to explore was incorrect in #17270. The new code here is based on Intel's reference documentation for CPUID (a document called \"Intel\u00ae Processor Identification and the CPUID Instruction - Application Note 485\", which I cannot actually find on their own website).\n\nACKs for top commit:\n  laanwj:\n    ACK f93fc61c65d605eae2d3e2c98bdd30ae587fcdab\n  jonatack:\n    ACK f93fc61c65d605eae2d3e2c98bdd30ae587fcdab code review, tested rebased on current master bb862d7 with Debian 4.19 x86_64\n  mzumsande:\n    ACK f93fc61, reviewed code and compared with the intel doc, tested on an AMD and an Intel processor.\n\nTree-SHA512: 2790b326fa397b736c0f39f25807bea57de2752fdd58bf6693d044b8cb26df36c11cce165a334b471f8e33724f10e3b76edab5cc4e0e7776601aabda13277245",
      "tree": {
        "sha": "7c32a1934e9f7034e70b8a4013e8fdefdc46166f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c32a1934e9f7034e70b8a4013e8fdefdc46166f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2eeacdfe44e5f5cbb240f92b3d7ddcdf5079dc3b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3aWUoACgkQHkrtYphs\n0l1lUQgAuIMqVdlzUeG8pX2+AHBfJ1HIy03UCe11z6826LS8sHOJaOwJkvULTUqL\nKNafe54MsuSiEfge3Coi4IVCBuwhmFs1inquZtt1YQJzgVamDbdTxZoFjyJdN1T5\nr4zQOUhx7FXNMIFisAktj6oCGmip3U24fGL3+bYWTYtPp3ylbu/ZYT3nC2PQzOP2\nvFcAf7UUvTleKAK00yaL7mbyxInAvLDiBm4ovqhT2N/+Rw8tcvLVrF76x3e29P9k\nGoaF8eqpZglAOUpacJnIEZKuzVEfoFWvxFkV/EqevBHrdNAB+3XDloaK5DclZvge\nlUMnFkzjj2vpaA6NrS/zgkAqjHWWIA==\n=ACVd\n-----END PGP SIGNATURE-----",
        "payload": "tree 7c32a1934e9f7034e70b8a4013e8fdefdc46166f\nparent 9cbd87d8ee2910ac55c215451453e5162e1c377a\nparent f93fc61c65d605eae2d3e2c98bdd30ae587fcdab\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1574590767 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1574590794 +0100\n\nMerge #17527: Fix CPUID subleaf iteration\n\nf93fc61c65d605eae2d3e2c98bdd30ae587fcdab Put bounds on the number of CPUID leaves explored (Pieter Wuille)\nba2c5fe1477cec80d7e02f824daba21a1021758e Fix CPUID subleaf iteration (Pieter Wuille)\n\nPull request description:\n\n  This fixes #17523.\n\n  The code to determine which CPUID subleaves to explore was incorrect in #17270. The new code here is based on Intel's reference documentation for CPUID (a document called \"Intel\u00ae Processor Identification and the CPUID Instruction - Application Note 485\", which I cannot actually find on their own website).\n\nACKs for top commit:\n  laanwj:\n    ACK f93fc61c65d605eae2d3e2c98bdd30ae587fcdab\n  jonatack:\n    ACK f93fc61c65d605eae2d3e2c98bdd30ae587fcdab code review, tested rebased on current master bb862d7 with Debian 4.19 x86_64\n  mzumsande:\n    ACK f93fc61, reviewed code and compared with the intel doc, tested on an AMD and an Intel processor.\n\nTree-SHA512: 2790b326fa397b736c0f39f25807bea57de2752fdd58bf6693d044b8cb26df36c11cce165a334b471f8e33724f10e3b76edab5cc4e0e7776601aabda13277245\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eeacdfe44e5f5cbb240f92b3d7ddcdf5079dc3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2eeacdfe44e5f5cbb240f92b3d7ddcdf5079dc3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eeacdfe44e5f5cbb240f92b3d7ddcdf5079dc3b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9cbd87d8ee2910ac55c215451453e5162e1c377a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cbd87d8ee2910ac55c215451453e5162e1c377a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cbd87d8ee2910ac55c215451453e5162e1c377a"
      },
      {
        "sha": "f93fc61c65d605eae2d3e2c98bdd30ae587fcdab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f93fc61c65d605eae2d3e2c98bdd30ae587fcdab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f93fc61c65d605eae2d3e2c98bdd30ae587fcdab"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 18,
      "deletions": 7
    },
    "files": [
      {
        "sha": "6992c720fff33e5bd535f8a5e5881ee9194571ec",
        "filename": "src/randomenv.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eeacdfe44e5f5cbb240f92b3d7ddcdf5079dc3b/src/randomenv.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eeacdfe44e5f5cbb240f92b3d7ddcdf5079dc3b/src/randomenv.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/randomenv.cpp?ref=2eeacdfe44e5f5cbb240f92b3d7ddcdf5079dc3b",
        "patch": "@@ -197,19 +197,30 @@ void AddAllCPUID(CSHA512& hasher)\n     // Iterate over all standard leaves\n     AddCPUID(hasher, 0, 0, ax, bx, cx, dx); // Returns max leaf in ax\n     uint32_t max = ax;\n-    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n-        for (uint32_t subleaf = 0;; ++subleaf) {\n+    for (uint32_t leaf = 1; leaf <= max && leaf <= 0xFF; ++leaf) {\n+        uint32_t maxsub = 0;\n+        for (uint32_t subleaf = 0; subleaf <= 0xFF; ++subleaf) {\n             AddCPUID(hasher, leaf, subleaf, ax, bx, cx, dx);\n-            // Iterate over subleaves for leaf 4, 11, 13\n-            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n-            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n-            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+            // Iterate subleafs for leaf values 4, 7, 11, 13\n+            if (leaf == 4) {\n+                if ((ax & 0x1f) == 0) break;\n+            } else if (leaf == 7) {\n+                if (subleaf == 0) maxsub = ax;\n+                if (subleaf == maxsub) break;\n+            } else if (leaf == 11) {\n+                if ((cx & 0xff00) == 0) break;\n+            } else if (leaf == 13) {\n+                if (ax == 0 && bx == 0 && cx == 0 && dx == 0) break;\n+            } else {\n+                // For any other leaf, stop after subleaf 0.\n+                break;\n+            }\n         }\n     }\n     // Iterate over all extended leaves\n     AddCPUID(hasher, 0x80000000, 0, ax, bx, cx, dx); // Returns max extended leaf in ax\n     uint32_t ext_max = ax;\n-    for (uint32_t leaf = 0x80000001; leaf <= ext_max; ++leaf) {\n+    for (uint32_t leaf = 0x80000001; leaf <= ext_max && leaf <= 0x800000FF; ++leaf) {\n         AddCPUID(hasher, leaf, 0, ax, bx, cx, dx);\n     }\n }"
      }
    ]
  },
  {
    "sha": "eafd2593674b6890418a50eadf69425071b824e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWZkMjU5MzY3NGI2ODkwNDE4YTUwZWFkZjY5NDI1MDcxYjgyNGU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-11-23T22:18:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-24T12:40:11Z"
      },
      "message": "build: Add NX workaround for RV64\n\nWork around https://bugs.launchpad.net/ubuntu/+source/gcc-8-cross-ports/+bug/1853740.",
      "tree": {
        "sha": "5e342e90a2a042904bf3917fd820d5cbbdde24fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e342e90a2a042904bf3917fd820d5cbbdde24fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eafd2593674b6890418a50eadf69425071b824e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eafd2593674b6890418a50eadf69425071b824e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eafd2593674b6890418a50eadf69425071b824e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eafd2593674b6890418a50eadf69425071b824e4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6e42256fe8900ed90f9644906b77f97e1600952",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6e42256fe8900ed90f9644906b77f97e1600952",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6e42256fe8900ed90f9644906b77f97e1600952"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7016ff861b991ea93333ea437a0b7e49324ed222",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eafd2593674b6890418a50eadf69425071b824e4/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eafd2593674b6890418a50eadf69425071b824e4/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=eafd2593674b6890418a50eadf69425071b824e4",
        "patch": "@@ -46,7 +46,7 @@ script: |\n   FAKETIME_PROGS=\"date ar ranlib nm\"\n   HOST_CFLAGS=\"-O2 -g\"\n   HOST_CXXFLAGS=\"-O2 -g\"\n-  HOST_LDFLAGS=-static-libstdc++\n+  HOST_LDFLAGS_BASE=\"-static-libstdc++\"\n \n   export QT_RCC_TEST=1\n   export QT_RCC_SOURCE_DATE_OVERRIDE=1\n@@ -160,6 +160,13 @@ script: |\n   # Extract the release tarball into a dir for each host and build\n   for i in ${HOSTS}; do\n     export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n+    if [ \"${i}\" = \"riscv64-linux-gnu\" ]; then\n+      # Workaround for https://bugs.launchpad.net/ubuntu/+source/gcc-8-cross-ports/+bug/1853740\n+      # TODO: remove this when no longer needed\n+      HOST_LDFLAGS=\"${HOST_LDFLAGS_BASE} -Wl,-z,noexecstack\"\n+    else\n+      HOST_LDFLAGS=\"${HOST_LDFLAGS_BASE}\"\n+    fi\n     mkdir -p distsrc-${i}\n     cd distsrc-${i}\n     INSTALLPATH=`pwd`/installed/${DISTNAME}"
      }
    ]
  },
  {
    "sha": "239d199667888e5d60309f15a38eed4d3afe56c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzlkMTk5NjY3ODg4ZTVkNjAzMDlmMTVhMzhlZWQ0ZDNhZmU1NmM0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-24T13:24:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-24T13:24:15Z"
      },
      "message": "Merge #17574: doc: Add historical release notes for 0.19.0.1\n\n14feda0814a9fecf2138041f7d36fe1ab338797f doc: Add historical release notes for 0.19.0.1 (Wladimir J. van der Laan)\n\nPull request description:\n\n  Add historical release notes for 0.19.0.1. And replace 0.19.0's release notes with a short explanation.\n\nTop commit has no ACKs.\n\nTree-SHA512: 3551250c8b0643a96b645af9088ef07a079452bad3abf2b5653563f5ecbc07fc1e1c6adcd56eb9fa6e3e7637719b3b99253b95bce409a9267a428323b559bfa3",
      "tree": {
        "sha": "127b93f871700f79b8bc4ba31d161531974c22d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/127b93f871700f79b8bc4ba31d161531974c22d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/239d199667888e5d60309f15a38eed4d3afe56c4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3ahH8ACgkQHkrtYphs\n0l3/eQgAnlLYCToFq5NwE8kcPNF58pCuLRo8Lg++kGfZxuvtoFXWbCU5esF47LcW\n+x0OgEyvDM28yaK/ZE6ewHuwUjVYmcehTIJ95Z4a7b6dd1mkXKyXxIT3RIhupB+Y\nENgarhagkVcEOxuJqP9EPhWo/AlxipHWlZimGBPsopqJSy6eoNS7wCvKqePN3iwO\noqr2uApoM2aNtLonNNUZIUy6lEGCq0TB+bTGq0d72BqK6XNttJmtqKk6jcvc3Bex\n4u+PZM+Q+r/NcFp46j7cKFNSaZy3lKH5NIDFAo/8m6XUopNgw/3xs9yePLevU9ld\nJyG54qiFCDJ2tlQAEcxBxjUHxQumBA==\n=G/VS\n-----END PGP SIGNATURE-----",
        "payload": "tree 127b93f871700f79b8bc4ba31d161531974c22d6\nparent 2eeacdfe44e5f5cbb240f92b3d7ddcdf5079dc3b\nparent 14feda0814a9fecf2138041f7d36fe1ab338797f\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1574601848 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1574601855 +0100\n\nMerge #17574: doc: Add historical release notes for 0.19.0.1\n\n14feda0814a9fecf2138041f7d36fe1ab338797f doc: Add historical release notes for 0.19.0.1 (Wladimir J. van der Laan)\n\nPull request description:\n\n  Add historical release notes for 0.19.0.1. And replace 0.19.0's release notes with a short explanation.\n\nTop commit has no ACKs.\n\nTree-SHA512: 3551250c8b0643a96b645af9088ef07a079452bad3abf2b5653563f5ecbc07fc1e1c6adcd56eb9fa6e3e7637719b3b99253b95bce409a9267a428323b559bfa3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/239d199667888e5d60309f15a38eed4d3afe56c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/239d199667888e5d60309f15a38eed4d3afe56c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/239d199667888e5d60309f15a38eed4d3afe56c4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2eeacdfe44e5f5cbb240f92b3d7ddcdf5079dc3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eeacdfe44e5f5cbb240f92b3d7ddcdf5079dc3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2eeacdfe44e5f5cbb240f92b3d7ddcdf5079dc3b"
      },
      {
        "sha": "14feda0814a9fecf2138041f7d36fe1ab338797f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14feda0814a9fecf2138041f7d36fe1ab338797f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14feda0814a9fecf2138041f7d36fe1ab338797f"
      }
    ],
    "stats": {
      "total": 2175,
      "additions": 1092,
      "deletions": 1083
    },
    "files": [
      {
        "sha": "70b8ec589fa36db6f5cb594fb608813369780969",
        "filename": "doc/release-notes/release-notes-0.19.0.1.md",
        "status": "added",
        "additions": 1089,
        "deletions": 0,
        "changes": 1089,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239d199667888e5d60309f15a38eed4d3afe56c4/doc/release-notes/release-notes-0.19.0.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239d199667888e5d60309f15a38eed4d3afe56c4/doc/release-notes/release-notes-0.19.0.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.19.0.1.md?ref=239d199667888e5d60309f15a38eed4d3afe56c4",
        "patch": "@@ -0,0 +1,1089 @@\n+Bitcoin Core version 0.19.0.1 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.19.0.1/>\n+\n+This release includes new features, various bug fixes and performance\n+improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+Upgrading directly from a version of Bitcoin Core that has reached its EOL is\n+possible, but might take some time if the datadir needs to be migrated.  Old\n+wallet versions of Bitcoin Core are generally supported.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is supported and extensively tested on operating systems using\n+the Linux kernel, macOS 10.10+, and Windows 7 and newer. It is not recommended\n+to use Bitcoin Core on unsupported systems.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+as frequently tested on them.\n+\n+From 0.17.0 onwards, macOS <10.10 is no longer supported. 0.17.0 is\n+built using Qt 5.9.x, which doesn't support versions of macOS older than\n+10.10. Additionally, Bitcoin Core does not yet change appearance when\n+macOS \"dark mode\" is activated.\n+\n+Users running macOS Catalina may need to \"right-click\" and then choose \"Open\"\n+to open the Bitcoin Core .dmg. This is due to new signing requirements\n+imposed by Apple, which the Bitcoin Core project does not yet adhere too.\n+\n+Notable changes\n+===============\n+\n+New user documentation\n+----------------------\n+\n+- [Reduce memory](https://github.com/bitcoin/bitcoin/blob/master/doc/reduce-memory.md)\n+  suggests configuration tweaks for running Bitcoin Core on systems with\n+  limited memory. (#16339)\n+\n+New RPCs\n+--------\n+\n+- `getbalances` returns an object with all balances (`mine`,\n+  `untrusted_pending` and `immature`). Please refer to the RPC help of\n+  `getbalances` for details. The new RPC is intended to replace\n+  `getbalance`, `getunconfirmedbalance`, and the balance fields in\n+  `getwalletinfo`.  These old calls and fields may be removed in a\n+  future version. (#15930, #16239)\n+\n+- `setwalletflag` sets and unsets wallet flags that enable or disable\n+  features specific to that existing wallet, such as the new\n+  `avoid_reuse` feature documented elsewhere in these release notes.\n+  (#13756)\n+\n+- `getblockfilter` gets the BIP158 filter for the specified block.  This\n+  RPC is only enabled if block filters have been created using the\n+  `-blockfilterindex` configuration option. (#14121)\n+\n+New settings\n+------------\n+\n+- `-blockfilterindex` enables the creation of BIP158 block filters for\n+  the entire blockchain.  Filters will be created in the background and\n+  currently use about 4 GiB of space.  Note: this version of Bitcoin\n+  Core does not serve block filters over the P2P network, although the\n+  local user may obtain block filters using the `getblockfilter` RPC.\n+  (#14121)\n+\n+Updated settings\n+----------------\n+\n+- `whitebind` and `whitelist` now accept a list of permissions to\n+  provide peers connecting using the indicated interfaces or IP\n+  addresses.  If no permissions are specified with an address or CIDR\n+  network, the implicit default permissions are the same as previous\n+  releases.  See the `bitcoind -help` output for these two options for\n+  details about the available permissions. (#16248)\n+\n+- Users setting custom `dbcache` values can increase their setting slightly\n+  without using any more real memory.  Recent changes reduced the memory use\n+  by about 9% and made chainstate accounting more accurate (it was underestimating\n+  the use of memory before).  For example, if you set a value of \"450\" before, you\n+  may now set a value of \"500\" to use about the same real amount of memory. (#16957)\n+\n+\n+Updated RPCs\n+------------\n+\n+Note: some low-level RPC changes mainly useful for testing are described in the\n+Low-level Changes section below.\n+\n+- `sendmany` no longer has a `minconf` argument.  This argument was not\n+  well-specified and would lead to RPC errors even when the wallet's\n+  coin selection succeeded.  Users who want to influence coin selection\n+  can use the existing `-spendzeroconfchange`, `-limitancestorcount`,\n+  `-limitdescendantcount` and `-walletrejectlongchains` configuration\n+  arguments. (#15596)\n+\n+- `getbalance` and `sendtoaddress`, plus the new RPCs `getbalances` and\n+  `createwallet`, now accept an \"avoid_reuse\" parameter that controls\n+  whether already used addresses should be included in the operation.\n+  Additionally, `sendtoaddress` will avoid partial spends when\n+  `avoid_reuse` is enabled even if this feature is not already enabled\n+  via the `-avoidpartialspends` command line flag because not doing so\n+  would risk using up the \"wrong\" UTXO for an address reuse case.\n+  (#13756)\n+\n+- RPCs which have an `include_watchonly` argument or `includeWatching` option now default to `true` for watch-only\n+  wallets. Affected RPCs are: `getbalance`, `listreceivedbyaddress`, `listreceivedbylabel`, `listtransactions`,\n+  `listsinceblock`, `gettransaction`, `walletcreatefundedpsbt`, and `fundrawtransaction`. (#16383)\n+\n+- `listunspent` now returns a \"reused\" bool for each output if the\n+  wallet flag \"avoid_reuse\" is enabled. (#13756)\n+\n+- `getblockstats` now uses BlockUndo data instead of the transaction\n+  index, making it much faster, no longer dependent on the `-txindex`\n+  configuration option, and functional for all non-pruned blocks.\n+  (#14802)\n+\n+- `utxoupdatepsbt` now accepts a `descriptors` parameter that will fill\n+  out input and output scripts and keys when known. P2SH-witness inputs\n+  will be filled in from the UTXO set when a descriptor is provided that\n+  shows they're spending segwit outputs.  See the RPC help text for full\n+  details. (#15427)\n+\n+- `sendrawtransaction` and `testmempoolaccept` no longer accept a\n+  `allowhighfees` parameter to fail mempool acceptance if the\n+  transaction fee exceeds the value of the configuration option\n+  `-maxtxfee`.  Now there is a hardcoded default maximum feerate that\n+  can be changed when calling either RPC using a `maxfeerate` parameter.\n+  (#15620)\n+\n+- `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry`, and\n+  `getrawmempool` no longer return a `size` field unless the\n+  configuration option `-deprecatedrpc=size` is used.  Instead a new\n+  `vsize` field is returned with the transaction's virtual size\n+  (consistent with other RPCs such as `getrawtransaction`). (#15637)\n+\n+- `getwalletinfo` now includes a `scanning` field that is either `false`\n+  (no scanning) or an object with information about the duration and\n+  progress of the wallet's scanning historical blocks for transactions\n+  affecting its balances. (#15730)\n+\n+- `gettransaction` now accepts a third (boolean) argument `verbose`. If\n+  set to `true`, a new `decoded` field will be added to the response containing\n+  the decoded transaction. This field is equivalent to RPC `decoderawtransaction`,\n+  or RPC `getrawtransaction` when `verbose` is passed. (#16185, #16866, #16873)\n+\n+- `createwallet` accepts a new `passphrase` parameter.  If set, this\n+  will create the new wallet encrypted with the given passphrase.  If\n+  unset (the default) or set to an empty string, no encryption will be\n+  used. (#16394)\n+\n+- `getchaintxstats` RPC now returns the additional key of\n+  `window_final_block_height`. (#16695)\n+\n+- `getmempoolentry` now provides a `weight` field containing the\n+  transaction weight as defined in BIP141. (#16647)\n+\n+- The `getnetworkinfo` and `getpeerinfo` commands now contain a new field with decoded network service flags. (#16786)\n+\n+- `getdescriptorinfo` now returns an additional `checksum` field\n+  containing the checksum for the unmodified descriptor provided by the\n+  user (that is, before the descriptor is normalized for the\n+  `descriptor` field). (#15986)\n+\n+- `joinpsbts` now shuffles the order of the inputs and outputs of the resulting\n+  joined PSBT. Previously, inputs and outputs were added in the order PSBTs were\n+  provided. This made it easy to correlate inputs to outputs, representing a\n+  privacy leak. (#16512)\n+\n+- `walletcreatefundedpsbt` now signals BIP125 Replace-by-Fee if the\n+  `-walletrbf` configuration option is set to true. (#15911)\n+\n+GUI changes\n+-----------\n+\n+- The GUI wallet now provides bech32 addresses by default.  The user may change the address type\n+  during invoice generation using a GUI toggle, or the default address\n+  type may be changed with the `-addresstype` configuration option.\n+  (#15711, #16497)\n+\n+- In 0.18.0, a `./configure` flag was introduced to allow disabling BIP70 support in the GUI (support was enabled by default). In 0.19.0, this flag is now __disabled__ by default. If you want to compile Bitcoin Core with BIP70 support in the GUI, you can pass `--enable-bip70` to `./configure`. (#15584)\n+\n+Deprecated or removed configuration options\n+-------------------------------------------\n+\n+- `-mempoolreplacement` is removed, although default node behavior\n+  remains the same.  This option previously allowed the user to prevent\n+  the node from accepting or relaying BIP125 transaction replacements.\n+  This is different from the remaining configuration option\n+  `-walletrbf`. (#16171)\n+\n+Deprecated or removed RPCs\n+--------------------------\n+\n+- `bumpfee` no longer accepts a `totalFee` option unless the\n+  configuration parameter `deprecatedrpc=totalFee` is specified.  This\n+  parameter will be fully removed in a subsequent release. (#15996)\n+\n+- `bumpfee` has a new `fee_rate` option as a replacement for the deprecated `totalFee`. (#16727)\n+\n+- `generate` is now removed after being deprecated in Bitcoin Core 0.18.\n+  Use the `generatetoaddress` RPC instead. (#15492)\n+\n+P2P changes\n+-----------\n+\n+- BIP 61 reject messages were deprecated in v0.18. They are now disabled\n+  by default, but can be enabled by setting the `-enablebip61` command\n+  line option.  BIP 61 reject messages will be removed entirely in a\n+  future version of Bitcoin Core. (#14054)\n+\n+- To eliminate well-known denial-of-service vectors in Bitcoin Core,\n+  especially for nodes with spinning disks, the default value for the\n+  `-peerbloomfilters` configuration option has been changed to false.\n+  This prevents Bitcoin Core from sending the BIP111 NODE_BLOOM service\n+  flag, accepting BIP37 bloom filters, or serving merkle blocks or\n+  transactions matching a bloom filter.  Users who still want to provide\n+  bloom filter support may either set the configuration option to true\n+  to re-enable both BIP111 and BIP37 support or enable just BIP37\n+  support for specific peers using the updated `-whitelist` and\n+  `-whitebind` configuration options described elsewhere in these\n+  release notes.  For the near future, lightweight clients using public\n+  BIP111/BIP37 nodes should still be able to connect to older versions\n+  of Bitcoin Core and nodes that have manually enabled BIP37 support,\n+  but developers of such software should consider migrating to either\n+  using specific BIP37 nodes or an alternative transaction filtering\n+  system. (#16152)\n+\n+- By default, Bitcoin Core will now make two additional outbound connections that are exclusively used for block-relay.  No transactions or addr messages will be processed on these connections. These connections are designed to add little additional memory or bandwidth resource requirements but should make some partitioning attacks more difficult to carry out. (#15759)\n+\n+Miscellaneous CLI Changes\n+-------------------------\n+\n+- The `testnet` field in `bitcoin-cli -getinfo` has been renamed to\n+  `chain` and now returns the current network name as defined in BIP70\n+  (main, test, regtest). (#15566)\n+\n+Low-level changes\n+=================\n+\n+RPC\n+---\n+\n+- `getblockchaininfo` no longer returns a `bip9_softforks` object.\n+  Instead, information has been moved into the `softforks` object and\n+  an additional `type` field describes how Bitcoin Core determines\n+  whether that soft fork is active (e.g. BIP9 or BIP90).  See the RPC\n+  help for details. (#16060)\n+\n+- `getblocktemplate` no longer returns a `rules` array containing `CSV`\n+  and `segwit` (the BIP9 deployments that are currently in active\n+  state). (#16060)\n+\n+- `getrpcinfo` now returns a `logpath` field with the path to\n+  `debug.log`. (#15483)\n+\n+Tests\n+-----\n+\n+- The regression test chain enabled by the `-regtest` command line flag\n+  now requires transactions to not violate standard policy by default.\n+  This is the same default used for mainnet and makes it easier to test\n+  mainnet behavior on regtest. Note that the testnet still allows\n+  non-standard txs by default and that the policy can be locally\n+  adjusted with the `-acceptnonstdtxn` command line flag for both test\n+  chains. (#15891)\n+\n+Configuration\n+------------\n+\n+- A setting specified in the default section but not also specified in a\n+  network-specific section (e.g. testnet) will now produce an error\n+  preventing startup instead of just a warning unless the network is\n+  mainnet.  This prevents settings intended for mainnet from being\n+  applied to testnet or regtest. (#15629)\n+\n+- On platforms supporting `thread_local`, log lines can be prefixed with\n+  the name of the thread that caused the log. To enable this behavior,\n+  use `-logthreadnames=1`. (#15849)\n+\n+Network\n+-------\n+\n+- When fetching a transaction announced by multiple peers, previous versions of\n+  Bitcoin Core would sequentially attempt to download the transaction from each\n+  announcing peer until the transaction is received, in the order that those\n+  peers' announcements were received.  In this release, the download logic has\n+  changed to randomize the fetch order across peers and to prefer sending\n+  download requests to outbound peers over inbound peers. This fixes an issue\n+  where inbound peers could prevent a node from getting a transaction.\n+  (#14897, #15834)\n+\n+- If a Tor hidden service is being used, Bitcoin Core will be bound to\n+  the standard port 8333 even if a different port is configured for\n+  clearnet connections.  This prevents leaking node identity through use\n+  of identical non-default port numbers. (#15651)\n+\n+Mempool and transaction relay\n+-----------------------------\n+\n+- Allows one extra single-ancestor transaction per package.  Previously,\n+  if a transaction in the mempool had 25 descendants, or it and all of\n+  its descendants were over 101,000 vbytes, any newly-received\n+  transaction that was also a descendant would be ignored.  Now, one\n+  extra descendant will be allowed provided it is an immediate\n+  descendant (child) and the child's size is 10,000 vbytes or less.\n+  This makes it possible for two-party contract protocols such as\n+  Lightning Network to give each participant an output they can spend\n+  immediately for Child-Pays-For-Parent (CPFP) fee bumping without\n+  allowing one malicious participant to fill the entire package and thus\n+  prevent the other participant from spending their output. (#15681)\n+\n+- Transactions with outputs paying v1 to v16 witness versions (future\n+  segwit versions) are now accepted into the mempool, relayed, and\n+  mined.  Attempting to spend those outputs remains forbidden by policy\n+  (\"non-standard\").  When this change has been widely deployed, wallets\n+  and services can accept any valid bech32 Bitcoin address without\n+  concern that transactions paying future segwit versions will become\n+  stuck in an unconfirmed state. (#15846)\n+\n+- Legacy transactions (transactions with no segwit inputs) must now be\n+  sent using the legacy encoding format, enforcing the rule specified in\n+  BIP144.  (#14039)\n+\n+Wallet\n+------\n+\n+- When in pruned mode, a rescan that was triggered by an `importwallet`,\n+  `importpubkey`, `importaddress`, or `importprivkey` RPC will only fail\n+  when blocks have been pruned. Previously it would fail when `-prune`\n+  has been set.  This change allows setting `-prune` to a high value\n+  (e.g. the disk size) without the calls to any of the import RPCs\n+  failing until the first block is pruned. (#15870)\n+\n+- When creating a transaction with a fee above `-maxtxfee` (default 0.1\n+  BTC), the RPC commands `walletcreatefundedpsbt` and\n+  `fundrawtransaction` will now fail instead of rounding down the fee.\n+  Be aware that the `feeRate` argument is specified in BTC per 1,000\n+  vbytes, not satoshi per vbyte. (#16257)\n+\n+- A new wallet flag `avoid_reuse` has been added (default off). When\n+  enabled, a wallet will distinguish between used and unused addresses,\n+  and default to not use the former in coin selection.  When setting\n+  this flag on an existing wallet, rescanning the blockchain is required\n+  to correctly mark previously used destinations.  Together with \"avoid\n+  partial spends\" (added in Bitcoin Core v0.17.0), this can eliminate a\n+  serious privacy issue where a malicious user can track spends by\n+  sending small payments to a previously-paid address that would then\n+  be included with unrelated inputs in future payments. (#13756)\n+\n+Build system changes\n+--------------------\n+\n+- Python >=3.5 is now required by all aspects of the project. This\n+  includes the build systems, test framework and linters. The previously\n+  supported minimum (3.4), was EOL in March 2019. (#14954)\n+\n+- The minimum supported miniUPnPc API version is set to 10. This keeps\n+  compatibility with Ubuntu 16.04 LTS and Debian 8 `libminiupnpc-dev`\n+  packages. Please note, on Debian this package is still vulnerable to\n+  [CVE-2017-8798](https://security-tracker.debian.org/tracker/CVE-2017-8798)\n+  (in jessie only) and\n+  [CVE-2017-1000494](https://security-tracker.debian.org/tracker/CVE-2017-1000494)\n+  (both in jessie and in stretch). (#15993)\n+\n+0.19.0 change log\n+=================\n+\n+### Consensus\n+- #16128 Delete error-prone CScript constructor only used with FindAndDelete (instagibbs)\n+- #16060 Bury bip9 deployments (jnewbery)\n+\n+### Policy\n+- #15557 Enhance `bumpfee` to include inputs when targeting a feerate (instagibbs)\n+- #15846 Make sending to future native witness outputs standard (sipa)\n+\n+### Block and transaction handling\n+- #15632 Remove ResendWalletTransactions from the Validation Interface (jnewbery)\n+- #14121 Index for BIP 157 block filters (jimpo)\n+- #15141 Rewrite DoS interface between validation and net_processing (sdaftuar)\n+- #15880 utils and libraries: Replace deprecated Boost Filesystem functions (hebasto)\n+- #15971 validation: Add compile-time checking for negative locking requirement in LimitValidationInterfaceQueue (practicalswift)\n+- #15999 init: Remove dead code in LoadChainTip (MarcoFalke)\n+- #16015 validation: Hold cs_main when reading chainActive in RewindBlockIndex (practicalswift)\n+- #16056 remove unused magic number from consistency check (instagibbs)\n+- #16171 Remove -mempoolreplacement to prevent needless block prop slowness (TheBlueMatt)\n+- #15894 Remove duplicated \"Error: \" prefix in logs (hebasto)\n+- #14193 validation: Add missing mempool locks (MarcoFalke)\n+- #15681 Allow one extra single-ancestor transaction per package (TheBlueMatt)\n+- #15305 [validation] Crash if disconnecting a block fails (sdaftuar)\n+- #16471 log correct messages when CPFP fails (jnewbery)\n+- #16433 txmempool: Remove unused default value MemPoolRemovalReason::UNKNOWN (MarcoFalke)\n+- #13868 Remove unused fScriptChecks parameter from CheckInputs (Empact)\n+- #16421 Conservatively accept RBF bumps bumping one tx at the package limits (TheBlueMatt)\n+- #16854 Prevent UpdateTip log message from being broken up (stevenroose)\n+- #16956 validation: Make GetWitnessCommitmentIndex public (MarcoFalke)\n+- #16713 Ignore old versionbit activations to avoid 'unknown softforks' warning (jnewbery)\n+- #17002 chainparams: Bump assumed chain params (MarcoFalke)\n+- #16849 Fix block index inconsistency in InvalidateBlock() (sdaftuar)\n+\n+### P2P protocol and network code\n+- #15597 Generate log entry when blocks messages are received unexpectedly (pstratem)\n+- #15654 Remove unused unsanitized user agent string CNode::strSubVer (MarcoFalke)\n+- #15689 netaddress: Update CNetAddr for ORCHIDv2 (dongcarl)\n+- #15834 Fix transaction relay bugs introduced in #14897 and expire transactions from peer in-flight map (sdaftuar)\n+- #15651 torcontrol: Use the default/standard network port for Tor hidden services, even if the internal port is set differently (luke-jr)\n+- #16188 Document what happens to getdata of unknown type (MarcoFalke)\n+- #15649 Add ChaCha20Poly1305@Bitcoin AEAD (jonasschnelli)\n+- #16152 Disable bloom filtering by default (TheBlueMatt)\n+- #15993 Drop support of the insecure miniUPnPc versions (hebasto)\n+- #16197 Use mockable time for tx download (MarcoFalke)\n+- #16248 Make whitebind/whitelist permissions more flexible (NicolasDorier)\n+- #16618 [Fix] Allow connection of a noban banned peer (NicolasDorier)\n+- #16631 Restore default whitelistrelay to true (NicolasDorier)\n+- #15759 Add 2 outbound block-relay-only connections (sdaftuar)\n+- #15558 Don't query all DNS seeds at once (sipa)\n+- #16999 0.19 seeds update (laanwj)\n+\n+### Wallet\n+- #15288 Remove wallet -> node global function calls (ryanofsky)\n+- #15491 Improve log output for errors during load (gwillen)\n+- #13541 wallet/rpc: sendrawtransaction maxfeerate (kallewoof)\n+- #15680 Remove resendwallettransactions RPC method (jnewbery)\n+- #15508 Refactor analyzepsbt for use outside RPC code (gwillen)\n+- #15747 Remove plethora of Get*Balance (MarcoFalke)\n+- #15728 Refactor relay transactions (jnewbery)\n+- #15639 bitcoin-wallet tool: Drop libbitcoin_server.a dependency (ryanofsky)\n+- #15853 Remove unused import checkpoints.h (MarcoFalke)\n+- #15780 add cachable amounts for caching credit/debit values (kallewoof)\n+- #15778 Move maxtxfee from node to wallet (jnewbery)\n+- #15901 log on rescan completion (andrewtoth)\n+- #15917 Avoid logging no_such_file_or_directory error (promag)\n+- #15452 Replace CScriptID and CKeyID in CTxDestination with dedicated types (instagibbs)\n+- #15870 Only fail rescan when blocks have actually been pruned (MarcoFalke)\n+- #15006 Add option to create an encrypted wallet (achow101)\n+- #16001 Give WalletModel::UnlockContext move semantics (sipa)\n+- #15741 Batch write imported stuff in importmulti (achow101)\n+- #16144 do not encrypt wallets with disabled private keys (mrwhythat)\n+- #15024 Allow specific private keys to be derived from descriptor (meshcollider)\n+- #13756 \"avoid_reuse\" wallet flag for improved privacy (kallewoof)\n+- #16226 Move ismine to the wallet module (achow101)\n+- #16239 wallet/rpc: follow-up clean-up/fixes to avoid_reuse (kallewoof)\n+- #16286 refactoring: wallet: Fix GCC 7.4.0 warning (hebasto)\n+- #16257 abort when attempting to fund a transaction above -maxtxfee (Sjors)\n+- #16237 Have the wallet give out destinations instead of keys (achow101)\n+- #16322 Fix -maxtxfee check by moving it to CWallet::CreateTransaction (promag)\n+- #16361 Remove redundant pre-TopUpKeypool check (instagibbs)\n+- #16244 Move wallet creation out of the createwallet rpc into its own function (achow101)\n+- #16227 Refactor CWallet's inheritance chain (achow101)\n+- #16208 Consume ReserveDestination on successful CreateTransaction (instagibbs)\n+- #16301 Use CWallet::Import* functions in all import* RPCs (achow101)\n+- #16402 Remove wallet settings from chainparams (MarcoFalke)\n+- #16415 Get rid of PendingWalletTx class (ryanofsky)\n+- #15588 Log the actual wallet file version and no longer publicly expose the \"version\" record (achow101)\n+- #16399 Improve wallet creation (fjahr)\n+- #16475 Enumerate walletdb keys (MarcoFalke)\n+- #15709 Do not add \"setting\" key as unknown (Bushstar)\n+- #16451 Remove CMerkleTx (jnewbery)\n+- #15906 Move min_depth and max_depth to coin control (amitiuttarwar)\n+- #16502 Drop unused OldKey (promag)\n+- #16394 Allow createwallet to take empty passwords to make unencrypted wallets (achow101)\n+- #15911 Use wallet RBF default for walletcreatefundedpsbt (Sjors)\n+- #16503 Remove p2pEnabled from Chain interface (ariard)\n+- #16557 restore coinbase and confirmed/conflicted checks in SubmitMemoryPoolAndRelay() (jnewbery)\n+- #14934 Descriptor expansion cache clarifications (Sjors)\n+- #16383 rpcwallet: default include_watchonly to true for watchonly wallets (jb55)\n+- #16542 Return more specific errors about invalid descriptors (achow101)\n+- #16572 Fix Char as Bool in Wallet (JeremyRubin)\n+- #16753 extract PubKey from P2PK script with Solver (theStack)\n+- #16716 Use wallet name instead of pointer on unload/release (promag)\n+- #16185 gettransaction: add an argument to decode the transaction (darosior)\n+- #16745 Translate all initErrors in CreateWalletFromFile (MarcoFalke)\n+- #16792 Assert that the HRP is lowercase in Bech32::Encode (meshcollider)\n+- #16624 encapsulate transactions state (ariard)\n+- #16830 Cleanup walletinitinterface.h (hebasto)\n+- #16796 Fix segfault in CreateWalletFromFile (MarcoFalke)\n+- #16866 Rename 'decode' argument in gettransaction method to 'verbose' (jnewbery)\n+- #16727 Explicit feerate for bumpfee (instagibbs)\n+- #16609 descriptor: fix missed m_script_arg arg renaming in #14934 (fanquake)\n+\n+### RPC and other APIs\n+- #15492 remove deprecated generate method (Sjors)\n+- #15566 cli: Replace testnet with chain and return network name as per bip70 (fanquake)\n+- #15564 cli: Remove duplicate wallet fields from -getinfo (fanquake)\n+- #15642 Remove deprecated rpc warnings (jnewbery)\n+- #15637 Rename size to vsize in mempool related calls (fanquake)\n+- #15620 Uncouple non-wallet rpcs from maxTxFee global (MarcoFalke)\n+- #15616 Clarify decodescript RPCResult doc (MarcoFalke)\n+- #15669 Fix help text for signtransactionwithXXX (torkelrogstad)\n+- #15596 Ignore sendmany::minconf as dummy value (MarcoFalke)\n+- #15755 remove unused var in rawtransaction.cpp (Bushstar)\n+- #15746 RPCHelpMan: Always name dictionary keys (MarcoFalke)\n+- #15748 remove dead mining code (jnewbery)\n+- #15751 Speed up deriveaddresses for large ranges (sipa)\n+- #15770 Validate maxfeerate with AmountFromValue (promag)\n+- #15474 rest/rpc: Make mempoolinfo atomic (promag)\n+- #15463 Speedup getaddressesbylabel (promag)\n+- #15784 Remove dependency on interfaces::Chain in SignTransaction (ariard)\n+- #15323 Expose g_is_mempool_loaded via getmempoolinfo (Empact)\n+- #15932 Serialize in getblock without cs_main (MarcoFalke)\n+- #15930 Add balances RPC (MarcoFalke)\n+- #15730 Show scanning details in getwalletinfo (promag)\n+- #14802 faster getblockstats using BlockUndo data (FelixWeis)\n+- #14984 Speedup getrawmempool when verbose=true (promag)\n+- #16071 Hint for importmulti in help output of importpubkey and importaddress (kristapsk)\n+- #16063 Mention getwalletinfo where a rescan is triggered (promag)\n+- #16024 deriveaddresses: Correction of descriptor checksum in RPC example (ccapo)\n+- #16217 getrawtransaction: inform about blockhash argument when lookup fails (darosior)\n+- #15427 Add support for descriptors to utxoupdatepsbt (sipa)\n+- #16262 Allow shutdown while in generateblocks (pstratem)\n+- #15483 Adding a 'logpath' entry to getrpcinfo (darosior)\n+- #16325 Clarify that block count means height excl genesis (MarcoFalke)\n+- #16326 add new utxoupdatepsbt arguments to the CRPCCommand and CPRCCvertParam tables (jnewbery)\n+- #16332 Add logpath description for getrpcinfo (instagibbs)\n+- #16240 JSONRPCRequest-aware RPCHelpMan (kallewoof)\n+- #15996 Deprecate totalfee argument in `bumpfee` (instagibbs)\n+- #16467 sendrawtransaction help privacy note (jonatack)\n+- #16596 Fix getblocktemplate CLI example (emilengler)\n+- #15986 Add checksum to getdescriptorinfo (sipa)\n+- #16647 add weight to getmempoolentry output (fanquake)\n+- #16695 Add window final block height to getchaintxstats (leto)\n+- #16798 Refactor rawtransaction_util's SignTransaction to separate prevtx parsing (achow101)\n+- #16285 Improve scantxoutset response and help message (promag)\n+- #16725 Don't show addresses or P2PK in decoderawtransaction (NicolasDorier)\n+- #16787 Human readable network services (darosior)\n+- #16251 Improve signrawtransaction error reporting (ajtowns)\n+- #16873 fix regression in gettransaction (jonatack)\n+- #16512 Shuffle inputs and outputs after joining psbts (achow101)\n+- #16521 Use the default maxfeerate value as BTC/kB (Remagpie)\n+- #16817 Fix casing in getblockchaininfo to be inline with other fields (dangershony)\n+- #17131 fix -rpcclienttimeout 0 option (fjahr)\n+- #17249 Add missing deque include to fix build (jbeich)\n+- #17368 cli: fix -getinfo output when compiled with no wallet (fanquake)\n+\n+### GUI\n+- #15464 Drop unused return values in WalletFrame (promag)\n+- #15614 Defer removeAndDeleteWallet when no modal widget is active (promag)\n+- #15711 Generate bech32 addresses by default (MarcoFalke)\n+- #15829 update request payment button text and tab description (fanquake)\n+- #15874 Resolve the qt/guiutil <-> qt/optionsmodel CD (251Labs)\n+- #15371 Uppercase bech32 addresses in qr codes (benthecarman)\n+- #15928 Move QRImageWidget to its own file-pair (luke-jr)\n+- #16113 move coin control \"OK\" to the right hand side of the dialog (fanquake)\n+- #16090 Add vertical spacer to peer detail widget (JosuGZ)\n+- #15886 qt, wallet: Revamp SendConfirmationDialog (hebasto)\n+- #16263 Use qInfo() if no error occurs (hebasto)\n+- #16153 Add antialiasing to traffic graph widget (JosuGZ)\n+- #16350 Remove unused guard (hebasto)\n+- #16106 Sort wallets in open wallet menu (promag)\n+- #16291 Stop translating PACKAGE_NAME (MarcoFalke)\n+- #16380 Remove unused bits from the service flags enum (MarcoFalke)\n+- #16379 Fix autostart filenames on Linux for testnet/regtest (hebasto)\n+- #16366 init: Use InitError for all errors in bitcoind/qt (MarcoFalke)\n+- #16436 Do not create payment server if -disablewallet option provided (hebasto)\n+- #16514 Remove unused RPCConsole::tabFocus (promag)\n+- #16497 Generate bech32 addresses by default (take 2, fixup) (MarcoFalke)\n+- #16349 Remove redundant WalletController::addWallet slot (hebasto)\n+- #16578 Do not pass in command line arguments to QApplication (achow101)\n+- #16612 Remove menu icons (laanwj)\n+- #16677 remove unused PlatformStyle::TextColorIcon (fanquake)\n+- #16694 Ensure transaction send error is always visible (fanquake)\n+- #14879 Add warning messages to the debug window (hebasto)\n+- #16708 Replace obsolete functions of QSslSocket (hebasto)\n+- #16701 Replace functions deprecated in Qt 5.13 (hebasto)\n+- #16706 Replace deprecated QSignalMapper by lambda expressions (hebasto)\n+- #16707 Remove obsolete QModelIndex::child() (hebasto)\n+- #16758 Replace QFontMetrics::width() with TextWidth() (hebasto)\n+- #16760 Change uninstall icon on Windows (GChuf)\n+- #16720 Replace objc_msgSend() function calls with the native Objective-C syntax (hebasto)\n+- #16788 Update transifex slug for 0.19 (laanwj)\n+- #15450 Create wallet menu option (achow101)\n+- #16735 Remove unused menu items for Windows and Linux (GChuf)\n+- #16826 Do additional character escaping for wallet names and address labels (achow101)\n+- #15529 Add Qt programs to msvc build (updated, no code changes) (sipsorcery)\n+- #16714 add prune to intro screen with smart default (Sjors)\n+- #16858 advise users not to switch wallets when opening a BIP70 URI (jameshilliard)\n+- #16822 Create wallet menu option follow-ups (jonatack)\n+- #16882 Re-generate translations before 0.19.0 (MarcoFalke)\n+- #16928 Rename address checkbox back to bech32 (MarcoFalke)\n+- #16837 Fix {C{,XX},LD}FLAGS pickup (dongcarl)\n+- #16971 Change default size of intro frame (emilengler)\n+- #16988 Periodic translations update (laanwj)\n+- #16852 When BIP70 is disabled, get PaymentRequest merchant using string search (achow101)\n+- #16952 make sure to update the UI when deleting a transaction (jonasschnelli)\n+- #17031 Prevent processing duplicate payment requests (promag)\n+- #17135 Make polling in ClientModel asynchronous (promag)\n+- #17120 Fix start timer from non QThread (promag)\n+- #17257 disable font antialiasing for QR image address (fanquake)\n+\n+### Build system\n+- #14954 Require python 3.5 (MarcoFalke)\n+- #15580 native_protobuf: avoid system zlib (dongcarl)\n+- #15601 Switch to python3 (take 3) (MarcoFalke)\n+- #15581 Make less assumptions about build env (dongcarl)\n+- #14853 latest RapidCheck (fanquake)\n+- #15446 Improve depends debuggability (dongcarl)\n+- #13788 Fix --disable-asm for newer assembly checks/code (luke-jr)\n+- #12051 add missing debian contrib file to tarball (puchu)\n+- #15919 Remove unused OpenSSL includes to make it more clear where OpenSSL is used (practicalswift)\n+- #15978 .gitignore: Don't ignore depends patches (dongcarl)\n+- #15939 gitian: Remove windows 32 bit build (MarcoFalke)\n+- #15239 scripts and tools: Move non-linux build source tarballs to \"bitcoin-binaries/version\" directory (hebasto)\n+- #14047 Add HKDF_HMAC256_L32 and method to negate a private key (jonasschnelli)\n+- #16051 add patch to common dependencies (fanquake)\n+- #16049 switch to secure download of all dependencies (Kemu)\n+- #16059 configure: Fix thread_local detection (dongcarl)\n+- #16089 add ability to skip building zeromq (fanquake)\n+- #15844 Purge libtool archives (dongcarl)\n+- #15461 update to Boost 1.70 (Sjors)\n+- #16141 remove GZIP export from gitian descriptors (fanquake)\n+- #16235 Cleaned up and consolidated msbuild files (no code changes) (sipsorcery)\n+- #16246 MSVC: Fix error in debug mode (Fix #16245) (NicolasDorier)\n+- #16183 xtrans: Configure flags cleanup (dongcarl)\n+- #16258 [MSVC]: Create the config.ini as part of bitcoind build (NicolasDorier)\n+- #16271 remove -Wall from rapidcheck build flags (fanquake)\n+- #16309 [MSVC] allow user level project customization (NicolasDorier)\n+- #16308 [MSVC] Copy build output to src/ automatically after build (NicolasDorier)\n+- #15457 Check std::system for -[alert|block|wallet]notify (Sjors)\n+- #16344 use #if HAVE_SYSTEM instead of defined(HAVE_SYSTEM) (Sjors)\n+- #16352 prune dbus from depends (fanquake)\n+- #16270 expat 2.2.7 (fanquake)\n+- #16408 Prune X packages (dongcarl)\n+- #16386 disable unused Qt features (fanquake)\n+- #16424 Treat -Wswitch as error when --enable-werror (MarcoFalke)\n+- #16441 remove qt libjpeg check from bitcoin_qt.m4 (fanquake)\n+- #16434 Specify AM_CPPFLAGS for ZMQ (domob1812)\n+- #16534 add Qt Creator Makefile.am.user to .gitignore (Bushstar)\n+- #16573 disable building libsecp256k1 benchmarks (fanquake)\n+- #16533 disable libxcb extensions (fanquake)\n+- #16589 Remove unused src/obj-test folder (MarcoFalke)\n+- #16435 autoconf: Sane `--enable-debug` defaults (dongcarl)\n+- #16622 echo property tests status during build (jonatack)\n+- #16611 Remove src/obj directory from repository (laanwj)\n+- #16371 ignore macOS make deploy artefacts & add them to clean-local (fanquake)\n+- #16654 build: update RapidCheck Makefile (jonatack)\n+- #16370 cleanup package configure flags (fanquake)\n+- #16746 msbuild: Ignore linker warning (sipsorcery)\n+- #16750 msbuild: adds bench_bitcoin to auto generated project files (sipsorcery)\n+- #16810 guix: Remove ssp spec file hack (dongcarl)\n+- #16477 skip deploying plugins we dont use in macdeployqtplus (fanquake)\n+- #16413 Bump QT to LTS release 5.9.8 (THETCR)\n+- #15584 disable BIP70 support by default (fanquake)\n+- #16871 make building protobuf optional in depends (fanquake)\n+- #16879 remove redundant sed patching (fanquake)\n+- #16809 zlib: Move toolchain options to configure (dongcarl)\n+- #15146 Solve SmartOS FD_ZERO build issue (Empact)\n+- #16870 update boost macros to latest upstream for improved error reporting (fanquake)\n+- #16982 Factor out qt translations from build system (laanwj)\n+- #16926 Add OpenSSL termios fix for musl libc (nmarley)\n+- #16927 Refresh ZeroMQ 4.3.1 patch (nmarley)\n+- #17005 Qt version appears only if GUI is being built (ch4ot1c)\n+- #16468 Exclude depends/Makefile in .gitignore (promag)\n+\n+### Tests and QA\n+- #15296 Add script checking for deterministic line coverage in unit tests (practicalswift)\n+- #15338 ci: Build and run tests once on freebsd (MarcoFalke)\n+- #15479 Add .style.yapf (MarcoFalke)\n+- #15534 lint-format-strings: open files sequentially (fix for OS X) (gwillen)\n+- #15504 fuzz: Link BasicTestingSetup (shared with unit tests) (MarcoFalke)\n+- #15473 bench: Benchmark mempooltojson (MarcoFalke)\n+- #15466 Print remaining jobs in test_runner.py (stevenroose)\n+- #15631 mininode: Clearer error message on invalid magic bytes (MarcoFalke)\n+- #15255 Remove travis_wait from lint script (gkrizek)\n+- #15686 make pruning test faster (jnewbery)\n+- #15533 .style.yapf: Set column_limit=160 (MarcoFalke)\n+- #15660 Overhaul p2p_compactblocks.py (sdaftuar)\n+- #15495 Add regtests for HTTP status codes (domob1812)\n+- #15772 Properly log named args in authproxy (MarcoFalke)\n+- #15771 Prevent concurrency issues reading .cookie file (promag)\n+- #15693 travis: Switch to ubuntu keyserver to avoid timeouts (MarcoFalke)\n+- #15629 init: Throw error when network specific config is ignored (MarcoFalke)\n+- #15773 Add BitcoinTestFramework::sync_* methods (MarcoFalke)\n+- #15797 travis: Bump second timeout to 33 minutes, add rationale (MarcoFalke)\n+- #15788 Unify testing setups for fuzz, bench, and unit tests (MarcoFalke)\n+- #15352 Reduce noise level in test_bitcoin output (practicalswift)\n+- #15779 Add wallet_balance benchmark (MarcoFalke)\n+- #15843 fix outdated include in blockfilter_index_tests (jamesob)\n+- #15866 Add missing syncwithvalidationinterfacequeue to wallet_import_rescan (MarcoFalke)\n+- #15697 Make swap_magic_bytes in p2p_invalid_messages atomic (MarcoFalke)\n+- #15895 Avoid re-reading config.ini unnecessarily (luke-jr)\n+- #15896 feature_filelock, interface_bitcoin_cli: Use PACKAGE_NAME in messages rather than hardcoding Bitcoin Core (luke-jr)\n+- #15897 QA/mininode: Send all headers upfront in send_blocks_and_test to avoid sending an unconnected one (luke-jr)\n+- #15696 test_runner: Move feature_pruning to base tests (MarcoFalke)\n+- #15869 Add settings merge test to prevent regresssions (ryanofsky)\n+- #15758 Add further tests to wallet_balance (MarcoFalke)\n+- #15841 combine_logs: append node stderr and stdout if it exists (MarcoFalke)\n+- #15949 test_runner: Move pruning back to extended (MarcoFalke)\n+- #15927 log thread names by default in functional tests (jnewbery)\n+- #15664 change default Python block serialization to witness (instagibbs)\n+- #15988 Add test for ArgsManager::GetChainName (ryanofsky)\n+- #15963 Make random seed logged and settable (jnewbery)\n+- #15943 Fail if RPC has been added without tests (MarcoFalke)\n+- #16036 travis: Run all lint scripts even if one fails (scravy)\n+- #13555 parameterize adjustment period in versionbits_computeblockversion (JBaczuk)\n+- #16079 wallet_balance.py: Prevent edge cases (stevenroose)\n+- #16078 replace tx hash with txid in rawtransaction test (LongShao007)\n+- #16042 Bump MAX_NODES to 12 (MarcoFalke)\n+- #16124 Limit Python linting to files in the repo (practicalswift)\n+- #16143 Mark unit test blockfilter_index_initial_sync as non-deterministic (practicalswift)\n+- #16214 travis: Fix caching issues (MarcoFalke)\n+- #15982 Make msg_block a witness block (MarcoFalke)\n+- #16225 Make coins_tests/updatecoins_simulation_test deterministic (practicalswift)\n+- #16236 fuzz: Log output even if fuzzer failed (MarcoFalke)\n+- #15520 cirrus: Run extended test feature_pruning (MarcoFalke)\n+- #16234 Add test for unknown args (MarcoFalke)\n+- #16207 stop generating lcov coverage when functional tests fail (asood123)\n+- #16252 Log to debug.log in all unit tests (MarcoFalke)\n+- #16289 Add missing ECC_Stop() in GUI rpcnestedtests.cpp (jonasschnelli)\n+- #16278 Remove unused includes (practicalswift)\n+- #16302 Add missing syncwithvalidationinterfacequeue to wallet_balance test (MarcoFalke)\n+- #15538 wallet_bumpfee.py: Make sure coin selection produces change (instagibbs)\n+- #16294 Create at most one testing setup (MarcoFalke)\n+- #16299 bench: Move generated data to a dedicated translation unit (promag)\n+- #16329 Add tests for getblockchaininfo.softforks (MarcoFalke)\n+- #15687 tool wallet test coverage for unexpected writes to wallet (jonatack)\n+- #16267 bench: Benchmark blocktojson (fanatid)\n+- #14505 Add linter to make sure single parameter constructors are marked explicit (practicalswift)\n+- #16338 Disable other targets when enable-fuzz is set (qmma70)\n+- #16334 rpc_users: Also test rpcauth.py with password (dongcarl)\n+- #15282 Replace hard-coded hex tx with class in test framework (stevenroose)\n+- #16390 Add --filter option to test_runner.py (promag)\n+- #15891 Require standard txs in regtest by default (MarcoFalke)\n+- #16374 Enable passing wildcard test names to test runner from root (jonatack)\n+- #16420 Fix race condition in wallet_encryption test (jonasschnelli)\n+- #16422 remove redundant setup in addrman_tests (zenosage)\n+- #16438 travis: Print memory and number of cpus (MarcoFalke)\n+- #16445 Skip flaky p2p_invalid_messages test on macOS (fjahr)\n+- #16459 Fix race condition in example_test.py (sdaftuar)\n+- #16464 Ensure we don't generate a too-big block in p2sh sigops test (sdaftuar)\n+- #16491 fix deprecated log.warn in feature_dbcrash test (jonatack)\n+- #15134 Switch one of the Travis jobs to an unsigned char environment (-funsigned-char) (practicalswift)\n+- #16505 Changes verbosity of msbuild from quiet to normal in the appveyor script (sipsorcery)\n+- #16293 Make test cases separate functions (MarcoFalke)\n+- #16470 Fail early on disconnect in mininode.wait_for_* (MarcoFalke)\n+- #16277 Suppress output in test_bitcoin for expected errors (gertjaap)\n+- #16493 Fix test failures (MarcoFalke)\n+- #16538 Add missing sync_blocks to feature_pruning (MarcoFalke)\n+- #16509 Adapt test framework for chains other than \"regtest\" (MarcoFalke)\n+- #16363 Add test for BIP30 duplicate tx (MarcoFalke)\n+- #16535 Explain why -whitelist is used in feature_fee_estimation (MarcoFalke)\n+- #16554 only include and use OpenSSL where it's actually needed (BIP70) (fanquake)\n+- #16598 Remove confusing hash256 function in util (elichai)\n+- #16595 travis: Use extended 90 minute timeout when available (MarcoFalke)\n+- #16563 Add unit test for AddTimeData (mzumsande)\n+- #16561 Use colors and dots in test_runner.py output only if standard output is a terminal (practicalswift)\n+- #16465 Test p2sh-witness and bech32 in wallet_import_rescan (MarcoFalke)\n+- #16582 Rework ci (Use travis only as fallback env) (MarcoFalke)\n+- #16633 travis: Fix test_runner.py timeouts (MarcoFalke)\n+- #16646 Run tests with UPnP disabled (fanquake)\n+- #16623 ci: Add environment files for all settings (MarcoFalke)\n+- #16656 fix rpc_setban.py race (jonasschnelli)\n+- #16570 Make descriptor tests deterministic (davereikher)\n+- #16404 Test ZMQ notification after chain reorg (promag)\n+- #16726 Avoid common Python default parameter gotcha when mutable dict/list:s are used as default parameter values (practicalswift)\n+- #16739 ci: Pass down $makejobs to test_runner.py, other improvements (MarcoFalke)\n+- #16767 Check for codespell in lint-spelling.sh (kristapsk)\n+- #16768 Make lint-includes.sh work from any directory (kristapsk)\n+- #15257 Scripts and tools: Bump flake8 to 3.7.8 (Empact)\n+- #16804 Remove unused try-block in assert_debug_log (MarcoFalke)\n+- #16850 `servicesnames` field in `getpeerinfo` and `getnetworkinfo` (darosior)\n+- #16551 Test that low difficulty chain fork is rejected (MarcoFalke)\n+- #16737 Establish only one connection between nodes in rpc_invalidateblock (MarcoFalke)\n+- #16845 Add notes on how to generate data/wallets/high_minversion (MarcoFalke)\n+- #16888 Bump timeouts in slow running tests (MarcoFalke)\n+- #16864 Add python bech32 impl round-trip test (instagibbs)\n+- #16865 add some unit tests for merkle.cpp (soroosh-sdi)\n+- #14696 Add explicit references to related CVE's in p2p_invalid_block test (lucash-dev)\n+- #16907 lint: Add DisabledOpcodeTemplates to whitelist (MarcoFalke)\n+- #16898 Remove connect_nodes_bi (MarcoFalke)\n+- #16917 Move common function assert_approx() into util.py (fridokus)\n+- #16921 Add information on how to add Vulture suppressions (practicalswift)\n+- #16920 Fix extra_args in wallet_import_rescan.py (MarcoFalke)\n+- #16918 Make PORT_MIN in test runner configurable (MarcoFalke)\n+- #16941 travis: Disable feature_block in tsan run due to oom (MarcoFalke)\n+- #16929 follow-up to rpc: default maxfeerate value as BTC/kB (jonatack)\n+- #16959 ci: Set $host before setting fallback values (MarcoFalke)\n+- #16961 Remove python dead code linter (laanwj)\n+- #16931 add unittests for CheckProofOfWork (soroosh-sdi)\n+- #16991 Fix service flag comparison check in rpc_net test (luke-jr) (laanwj)\n+- #16987 Correct docstring param name (jbampton)\n+- #17015 Explain QT_QPA_PLATFORM for gui tests (MarcoFalke)\n+- #17006 Enable UBSan for Travis fuzzing job (practicalswift)\n+- #17086 Fix fs_tests for unknown locales (carnhofdaki)\n+- #15903 appveyor: Write @PACKAGE_NAME@ to config (MarcoFalke)\n+- #16742 test: add executable flag for wallet_watchonly.py (theStack)\n+- #16740 qa: Relax so that the subscriber is ready before publishing zmq messages (#16740)\n+\n+### Miscellaneous\n+- #15335 Fix lack of warning of unrecognized section names (AkioNak)\n+- #15528 contrib: Bump gitian descriptors for 0.19 (MarcoFalke)\n+- #15609 scripts and tools: Set 'distro' explicitly (hebasto)\n+- #15519 Add Poly1305 implementation (jonasschnelli)\n+- #15643 contrib: Gh-merge: include acks in merge commit (MarcoFalke)\n+- #15838 scripts and tools: Fetch missing review comments in github-merge.py (nkostoulas)\n+- #15920 lint: Check that all wallet args are hidden (MarcoFalke)\n+- #15849 Thread names in logs and deadlock debug tools (jamesob)\n+- #15650 Handle the result of posix_fallocate system call (lucayepa)\n+- #15766 scripts and tools: Upgrade gitian image before signing (hebasto)\n+- #15512 Add ChaCha20 encryption option (XOR) (jonasschnelli)\n+- #15968 Fix portability issue with pthreads (grim-trigger)\n+- #15970 Utils and libraries: fix static_assert for macro HAVE_THREAD_LOCAL (orientye)\n+- #15863 scripts and tools: Ensure repos are up-to-date in gitian-build.py (hebasto)\n+- #15224 Add RNG strengthening (10ms once every minute) (sipa)\n+- #15840 Contrib scripts: Filter IPv6 by ASN (abitfan)\n+- #13998 Scripts and tools: gitian-build.py improvements and corrections (hebasto)\n+- #15236 scripts and tools: Make --setup command independent (hebasto)\n+- #16114 contrib: Add curl as a required program in gitian-build.py (fanquake)\n+- #16046 util: Add type safe gettime (MarcoFalke)\n+- #15703 Update secp256k1 subtree to latest upstream (sipa)\n+- #16086 contrib: Use newer config.guess & config.sub in install_db4.sh (fanquake)\n+- #16130 Don't GPG sign intermediate commits with github-merge tool (stevenroose)\n+- #16162 scripts: Add key for michael ford (fanquake) to trusted keys list (fanquake)\n+- #16201 devtools: Always use unabbreviated commit IDs in github-merge.py (laanwj)\n+- #16112 util: Log early messages (MarcoFalke)\n+- #16223 devtools: Fetch and display ACKs at sign-off time in github-merge (laanwj)\n+- #16300 util: Explain why the path is cached (MarcoFalke)\n+- #16314 scripts and tools: Update copyright_header.py script (hebasto)\n+- #16158 Fix logic of memory_cleanse() on MSVC and clean up docs (real-or-random)\n+- #14734 fix an undefined behavior in uint::SetHex (kazcw)\n+- #16327 scripts and tools: Update ShellCheck linter (hebasto)\n+- #15277 contrib: Enable building in guix containers (dongcarl)\n+- #16362 Add bilingual_str type (hebasto)\n+- #16481 logs: add missing space (harding)\n+- #16581 sipsorcery gitian key (sipsorcery)\n+- #16566 util: Refactor upper/lowercase functions (kallewoof)\n+- #16620 util: Move resolveerrmsg to util/error (MarcoFalke)\n+- #16625 scripts: Remove github-merge.py (fanquake)\n+- #15864 Fix datadir handling (hebasto)\n+- #16670 util: Add join helper to join a list of strings (MarcoFalke)\n+- #16665 scripts: Move update-translations.py to maintainer-tools repo (fanquake)\n+- #16730 Support serialization of `std::vector<bool>` (sipa)\n+- #16556 Fix systemd service file configuration directory setup (setpill)\n+- #15615 Add log output during initial header sync (jonasschnelli)\n+- #16774 Avoid unnecessary \"Synchronizing blockheaders\" log messages (jonasschnelli)\n+- #16489 log: harmonize bitcoind logging (jonatack)\n+- #16577 util: Cbufferedfile fixes and unit test (LarryRuane)\n+- #16984 util: Make thread names shorter (hebasto)\n+- #17038 Don't rename main thread at process level (laanwj)\n+- #17184 util: Filter out macos process serial number (hebasto)\n+- #17095 util: Filter control characters out of log messages (laanwj)\n+- #17085 init: Change fallback locale to C.UTF-8 (laanwj)\n+- #16957 9% less memory: make SaltedOutpointHasher noexcept (martinus)\n+- #17449 fix uninitialized variable nMinerConfirmationWindow (bitcoinVBR)\n+\n+### Documentation\n+- #15514 Update Transifex links (fanquake)\n+- #15513 add \"sections\" info to example bitcoin.conf (fanquake)\n+- #15530 Move wallet lock annotations to header (MarcoFalke)\n+- #15562 remove duplicate clone step in build-windows.md (fanquake)\n+- #15565 remove release note fragments (fanquake)\n+- #15444 Additional productivity tips (Sjors)\n+- #15577 Enable TLS in link to chris.beams.io (JeremyRand)\n+- #15604 release note for disabling reject messages by default (jnewbery)\n+- #15611 Add Gitian key for droark (droark)\n+- #15626 Update ACK description in CONTRIBUTING.md (jonatack)\n+- #15603 Add more tips to productivity.md (gwillen)\n+- #15683 Comment for seemingly duplicate LIBBITCOIN_SERVER (Bushstar)\n+- #15685 rpc-mining: Clarify error messages (MarcoFalke)\n+- #15760 Clarify sendrawtransaction::maxfeerate==0 help (MarcoFalke)\n+- #15659 fix findFork comment (r8921039)\n+- #15718 Improve netaddress comments (dongcarl)\n+- #15833 remove out-of-date comment on pay-to-witness support (r8921039)\n+- #15821 Remove upgrade note in release notes from EOL versions (MarcoFalke)\n+- #15267 explain AcceptToMemoryPoolWorker's coins_to_uncache (jamesob)\n+- #15887 Align code example style with clang-format (hebasto)\n+- #15877 Fix -dustrelayfee= argument docs grammar (keepkeyjon)\n+- #15908 Align MSVC build options with Linux build ones (hebasto)\n+- #15941 Add historical release notes for 0.18.0 (laanwj)\n+- #15794 Clarify PR guidelines w/re documentation (dongcarl)\n+- #15607 Release process updates (jonatack)\n+- #14364 Clarify -blocksdir usage (sangaman)\n+- #15777 Add doxygen comments for keypool classes (jnewbery)\n+- #15820 Add productivity notes for dummy rebases (dongcarl)\n+- #15922 Explain how to pass in non-fundamental types into functions (MarcoFalke)\n+- #16080 build/doc: update bitcoin_config.h packages, release process (jonatack)\n+- #16047 analyzepsbt description in doc/psbt.md (jonatack)\n+- #16039 add release note for 14954 (fanquake)\n+- #16139 Add riscv64 to outputs list in release-process.md (JeremyRand)\n+- #16140 create security policy (narula)\n+- #16164 update release process for SECURITY.md (jonatack)\n+- #16213 Remove explicit mention of versions from SECURITY.md (MarcoFalke)\n+- #16186 doc/lint: Fix spelling errors identified by codespell 1.15.0 (Empact)\n+- #16149 Rework section on ACK in CONTRIBUTING.md (MarcoFalke)\n+- #16196 Add release notes for 14897 & 15834 (MarcoFalke)\n+- #16241 add rapidcheck to vcpkg install list (fanquake)\n+- #16243 Remove travis badge from readme (MarcoFalke)\n+- #16256 remove orphaned header in developer notes (jonatack)\n+- #15964 Improve build-osx document formatting (giulio92)\n+- #16313 Fix broken link in doc/build-osx.md (jonatack)\n+- #16330 Use placeholder instead of key expiration date (hebasto)\n+- #16339 add reduce-memory.md (fanquake)\n+- #16347 Include static members in Doxygen (dongcarl)\n+- #15824 Improve netbase comments (dongcarl)\n+- #16430 Update bips 35, 37 and 111 status (MarcoFalke)\n+- #16455 Remove downgrading warning in release notes, per 0.18 branch (MarcoFalke)\n+- #16484 update labels in CONTRIBUTING.md (MarcoFalke)\n+- #16483 update Python command in msvc readme (sipsorcery)\n+- #16504 Add release note for the deprecated totalFee option of bumpfee (promag)\n+- #16448 add note on precedence of options in bitcoin.conf (fanquake)\n+- #16536 Update and extend benchmarking.md (ariard)\n+- #16530 Fix grammar and punctuation in developer notes (Tech1k)\n+- #16574 Add historical release notes for 0.18.1 (laanwj)\n+- #16585 Update Markdown syntax for bdb packages (emilengler)\n+- #16586 Mention other ways to conserve memory on compilation (MarcoFalke)\n+- #16605 Add missing contributor to 0.18.1 release notes (meshcollider)\n+- #16615 Fix typos in COPYRIGHT (gapeman)\n+- #16626 Fix spelling error chache -> cache (nilswloewen)\n+- #16587 Improve versionbits.h documentation (ariard)\n+- #16643 Add ZMQ dependencies to the Fedora build instructions (hebasto)\n+- #16634 Refer in rpcbind doc to the manpage (MarcoFalke)\n+- #16555 mention whitelist is inbound, and applies to blocksonly (Sjors)\n+- #16645 initial RapidCheck property-based testing documentation (jonatack)\n+- #16691 improve depends prefix documentation (fanquake)\n+- #16629 Add documentation for the new whitelist permissions (NicolasDorier)\n+- #16723 Update labels in CONTRIBUTING.md (hebasto)\n+- #16461 Tidy up shadowing section (promag)\n+- #16621 add default bitcoin.conf locations (GChuf)\n+- #16752 Delete stale URL in test README (michaelfolkson)\n+- #14862 Declare BLOCK_VALID_HEADER reserved (MarcoFalke)\n+- #16806 Add issue templates for bug and feature request (MarcoFalke)\n+- #16857 Elaborate need to re-login on Debian-based after usermod for Tor group (clashicly)\n+- #16863 Add a missing closing parenthesis in the bitcoin-wallet's help (darosior)\n+- #16757 CChainState return values (MarcoFalke)\n+- #16847 add comments clarifying how local services are advertised (jamesob)\n+- #16812 Fix whitespace errs in .md files, bitcoin.conf, and Info.plist.in (ch4ot1c)\n+- #16885 Update tx-size-small comment with relevant CVE disclosure (instagibbs)\n+- #16900 Fix doxygen comment for SignTransaction in rpc/rawtransaction_util (MarcoFalke)\n+- #16914 Update homebrew instruction for doxygen (Sjors)\n+- #16912 Remove Doxygen intro from src/bitcoind.cpp (ch4ot1c)\n+- #16960 replace outdated OpenSSL comment in test README (fanquake)\n+- #16968 Remove MSVC update step from translation process (laanwj)\n+- #16953 Improve test READMEs (fjahr)\n+- #16962 Put PR template in comments (laanwj)\n+- #16397 Clarify includeWatching for fundrawtransaction (stevenroose)\n+- #15459 add how to calculate blockchain and chainstate size variables to release process (marcoagner)\n+- #16997 Update bips.md for 0.19 (laanwj)\n+- #17001 Remove mention of renamed mapBlocksUnlinked (MarcoFalke)\n+- #17014 Consolidate release notes before 0.19.0 (move-only) (MarcoFalke)\n+- #17111 update bips.md with buried BIP9 deployments (MarcoFalke)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- 251\n+- Aaron Clauson\n+- Akio Nakamura\n+- Alistair Mann\n+- Amiti Uttarwar\n+- Andrew Chow\n+- andrewtoth\n+- Anthony Towns\n+- Antoine Riard\n+- Aseem Sood\n+- Ben Carman\n+- Ben Woosley\n+- bpay\n+- Carl Dong\n+- Carnhof Daki\n+- Chris Capobianco\n+- Chris Moore\n+- Chuf\n+- clashic\n+- clashicly\n+- Cory Fields\n+- Daki Carnhof\n+- Dan Gershony\n+- Daniel Edgecumbe\n+- Daniel Kraft\n+- Daniel McNally\n+- darosior\n+- David A. Harding\n+- David Reikher\n+- Douglas Roark\n+- Elichai Turkel\n+- Emil\n+- Emil Engler\n+- ezegom\n+- Fabian Jahr\n+- fanquake\n+- Felix Weis\n+- Ferdinando M. Ametrano\n+- fridokus\n+- gapeman\n+- GChuf\n+- Gert-Jaap Glasbergen\n+- Giulio Lombardo\n+- Glenn Willen\n+- Graham Krizek\n+- Gregory Sanders\n+- grim-trigger\n+- gwillen\n+- Hennadii Stepanov\n+- Jack Mallers\n+- James Hilliard\n+- James O'Beirne\n+- Jan Beich\n+- Jeremy Rubin\n+- JeremyRand\n+- Jim Posen\n+- John Bampton\n+- John Newbery\n+- Jon Atack\n+- Jon Layton\n+- Jonas Schnelli\n+- Jonathan \"Duke\" Leto\n+- Jo\u00e3o Barbosa\n+- Joonmo Yang\n+- Jordan Baczuk\n+- Jorge Tim\u00f3n\n+- Josu Go\u00f1i\n+- Julian Fleischer\n+- Karl-Johan Alm\n+- Kaz Wesley\n+- keepkeyjon\n+- Kirill Fomichev\n+- Kristaps Kaupe\n+- Kristian Kramer\n+- Larry Ruane\n+- Lenny Maiorani\n+- LongShao007\n+- Luca Venturini\n+- lucash-dev\n+- Luke Dashjr\n+- marcoagner\n+- MarcoFalke\n+- marcuswin\n+- Martin Ankerl\n+- Martin Zumsande\n+- Matt Corallo\n+- MeshCollider\n+- Michael Folkson\n+- Miguel Herranz\n+- Nathan Marley\n+- Neha Narula\n+- nicolas.dorier\n+- Nils Loewen\n+- nkostoulas\n+- NullFunctor\n+- orient\n+- Patrick Strateman\n+- Peter Bushnell\n+- Peter Wagner\n+- Pieter Wuille\n+- practicalswift\n+- qmma\n+- r8921039\n+- RJ Rybarczyk\n+- Russell Yanofsky\n+- Samuel Dobson\n+- Sebastian Falbesoner\n+- setpill\n+- shannon1916\n+- Sjors Provoost\n+- soroosh-sdi\n+- Steven Roose\n+- Suhas Daftuar\n+- tecnovert\n+- THETCR\n+- Tim Ruffing\n+- Tobias Kaderle\n+- Torkel Rogstad\n+- Ulrich Kempken\n+- whythat\n+- William Casarin\n+- Wladimir J. van der Laan\n+- zenosage\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/bitcoin/bitcoin/)."
      },
      {
        "sha": "086491e92dea86159787b214acf16e0158a400f5",
        "filename": "doc/release-notes/release-notes-0.19.0.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1083,
        "changes": 1086,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239d199667888e5d60309f15a38eed4d3afe56c4/doc/release-notes/release-notes-0.19.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239d199667888e5d60309f15a38eed4d3afe56c4/doc/release-notes/release-notes-0.19.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.19.0.md?ref=239d199667888e5d60309f15a38eed4d3afe56c4",
        "patch": "@@ -1,1086 +1,6 @@\n-Bitcoin Core version 0.19.0 is now available from:\n-\n-  <https://bitcoincore.org/bin/bitcoin-core-0.19.0/>\n-\n-This release includes new features, various bug fixes and performance\n-improvements, as well as updated translations.\n-\n-Please report bugs using the issue tracker at GitHub:\n-\n-  <https://github.com/bitcoin/bitcoin/issues>\n-\n-To receive security and update notifications, please subscribe to:\n-\n-  <https://bitcoincore.org/en/list/announcements/join/>\n-\n-How to Upgrade\n-==============\n-\n-If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the\n-installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n-or `bitcoind`/`bitcoin-qt` (on Linux).\n-\n-Upgrading directly from a version of Bitcoin Core that has reached its EOL is\n-possible, but might take some time if the datadir needs to be migrated.  Old\n-wallet versions of Bitcoin Core are generally supported.\n-\n-Compatibility\n-==============\n-\n-Bitcoin Core is supported and extensively tested on operating systems using\n-the Linux kernel, macOS 10.10+, and Windows 7 and newer. It is not recommended\n-to use Bitcoin Core on unsupported systems.\n-\n-Bitcoin Core should also work on most other Unix-like systems but is not\n-as frequently tested on them.\n-\n-From 0.17.0 onwards, macOS <10.10 is no longer supported. 0.17.0 is\n-built using Qt 5.9.x, which doesn't support versions of macOS older than\n-10.10. Additionally, Bitcoin Core does not yet change appearance when\n-macOS \"dark mode\" is activated.\n-\n-Users running macOS Catalina may need to \"right-click\" and then choose \"Open\"\n-to open the Bitcoin Core .dmg. This is due to new signing requirements\n-imposed by Apple, which the Bitcoin Core project does not yet adhere too.\n-\n-Notable changes\n-===============\n-\n-New user documentation\n-----------------------\n-\n-- [Reduce memory](https://github.com/bitcoin/bitcoin/blob/master/doc/reduce-memory.md)\n-  suggests configuration tweaks for running Bitcoin Core on systems with\n-  limited memory. (#16339)\n-\n-New RPCs\n---------\n-\n-- `getbalances` returns an object with all balances (`mine`,\n-  `untrusted_pending` and `immature`). Please refer to the RPC help of\n-  `getbalances` for details. The new RPC is intended to replace\n-  `getbalance`, `getunconfirmedbalance`, and the balance fields in\n-  `getwalletinfo`.  These old calls and fields may be removed in a\n-  future version. (#15930, #16239)\n-\n-- `setwalletflag` sets and unsets wallet flags that enable or disable\n-  features specific to that existing wallet, such as the new\n-  `avoid_reuse` feature documented elsewhere in these release notes.\n-  (#13756)\n-\n-- `getblockfilter` gets the BIP158 filter for the specified block.  This\n-  RPC is only enabled if block filters have been created using the\n-  `-blockfilterindex` configuration option. (#14121)\n-\n-New settings\n-------------\n-\n-- `-blockfilterindex` enables the creation of BIP158 block filters for\n-  the entire blockchain.  Filters will be created in the background and\n-  currently use about 4 GiB of space.  Note: this version of Bitcoin\n-  Core does not serve block filters over the P2P network, although the\n-  local user may obtain block filters using the `getblockfilter` RPC.\n-  (#14121)\n-\n-Updated settings\n-----------------\n-\n-- `whitebind` and `whitelist` now accept a list of permissions to\n-  provide peers connecting using the indicated interfaces or IP\n-  addresses.  If no permissions are specified with an address or CIDR\n-  network, the implicit default permissions are the same as previous\n-  releases.  See the `bitcoind -help` output for these two options for\n-  details about the available permissions. (#16248)\n-\n-- Users setting custom `dbcache` values can increase their setting slightly\n-  without using any more real memory.  Recent changes reduced the memory use\n-  by about 9% and made chainstate accounting more accurate (it was underestimating\n-  the use of memory before).  For example, if you set a value of \"450\" before, you\n-  may now set a value of \"500\" to use about the same real amount of memory. (#16957)\n-\n-\n-Updated RPCs\n-------------\n-\n-Note: some low-level RPC changes mainly useful for testing are described in the\n-Low-level Changes section below.\n-\n-- `sendmany` no longer has a `minconf` argument.  This argument was not\n-  well-specified and would lead to RPC errors even when the wallet's\n-  coin selection succeeded.  Users who want to influence coin selection\n-  can use the existing `-spendzeroconfchange`, `-limitancestorcount`,\n-  `-limitdescendantcount` and `-walletrejectlongchains` configuration\n-  arguments. (#15596)\n-\n-- `getbalance` and `sendtoaddress`, plus the new RPCs `getbalances` and\n-  `createwallet`, now accept an \"avoid_reuse\" parameter that controls\n-  whether already used addresses should be included in the operation.\n-  Additionally, `sendtoaddress` will avoid partial spends when\n-  `avoid_reuse` is enabled even if this feature is not already enabled\n-  via the `-avoidpartialspends` command line flag because not doing so\n-  would risk using up the \"wrong\" UTXO for an address reuse case.\n-  (#13756)\n-\n-- RPCs which have an `include_watchonly` argument or `includeWatching` option now default to `true` for watch-only\n-  wallets. Affected RPCs are: `getbalance`, `listreceivedbyaddress`, `listreceivedbylabel`, `listtransactions`,\n-  `listsinceblock`, `gettransaction`, `walletcreatefundedpsbt`, and `fundrawtransaction`. (#16383)\n-\n-- `listunspent` now returns a \"reused\" bool for each output if the\n-  wallet flag \"avoid_reuse\" is enabled. (#13756)\n-\n-- `getblockstats` now uses BlockUndo data instead of the transaction\n-  index, making it much faster, no longer dependent on the `-txindex`\n-  configuration option, and functional for all non-pruned blocks.\n-  (#14802)\n-\n-- `utxoupdatepsbt` now accepts a `descriptors` parameter that will fill\n-  out input and output scripts and keys when known. P2SH-witness inputs\n-  will be filled in from the UTXO set when a descriptor is provided that\n-  shows they're spending segwit outputs.  See the RPC help text for full\n-  details. (#15427)\n-\n-- `sendrawtransaction` and `testmempoolaccept` no longer accept a\n-  `allowhighfees` parameter to fail mempool acceptance if the\n-  transaction fee exceeds the value of the configuration option\n-  `-maxtxfee`.  Now there is a hardcoded default maximum feerate that\n-  can be changed when calling either RPC using a `maxfeerate` parameter.\n-  (#15620)\n-\n-- `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry`, and\n-  `getrawmempool` no longer return a `size` field unless the\n-  configuration option `-deprecatedrpc=size` is used.  Instead a new\n-  `vsize` field is returned with the transaction's virtual size\n-  (consistent with other RPCs such as `getrawtransaction`). (#15637)\n-\n-- `getwalletinfo` now includes a `scanning` field that is either `false`\n-  (no scanning) or an object with information about the duration and\n-  progress of the wallet's scanning historical blocks for transactions\n-  affecting its balances. (#15730)\n-\n-- `gettransaction` now accepts a third (boolean) argument `verbose`. If\n-  set to `true`, a new `decoded` field will be added to the response containing\n-  the decoded transaction. This field is equivalent to RPC `decoderawtransaction`,\n-  or RPC `getrawtransaction` when `verbose` is passed. (#16185, #16866, #16873)\n-\n-- `createwallet` accepts a new `passphrase` parameter.  If set, this\n-  will create the new wallet encrypted with the given passphrase.  If\n-  unset (the default) or set to an empty string, no encryption will be\n-  used. (#16394)\n-\n-- `getchaintxstats` RPC now returns the additional key of\n-  `window_final_block_height`. (#16695)\n-\n-- `getmempoolentry` now provides a `weight` field containing the\n-  transaction weight as defined in BIP141. (#16647)\n-\n-- The `getnetworkinfo` and `getpeerinfo` commands now contain a new field with decoded network service flags. (#16786)\n-\n-- `getdescriptorinfo` now returns an additional `checksum` field\n-  containing the checksum for the unmodified descriptor provided by the\n-  user (that is, before the descriptor is normalized for the\n-  `descriptor` field). (#15986)\n-\n-- `joinpsbts` now shuffles the order of the inputs and outputs of the resulting\n-  joined PSBT. Previously, inputs and outputs were added in the order PSBTs were\n-  provided. This made it easy to correlate inputs to outputs, representing a\n-  privacy leak. (#16512)\n-\n-- `walletcreatefundedpsbt` now signals BIP125 Replace-by-Fee if the\n-  `-walletrbf` configuration option is set to true. (#15911)\n-\n-GUI changes\n------------\n-\n-- The GUI wallet now provides bech32 addresses by default.  The user may change the address type\n-  during invoice generation using a GUI toggle, or the default address\n-  type may be changed with the `-addresstype` configuration option.\n-  (#15711, #16497)\n-\n-- In 0.18.0, a `./configure` flag was introduced to allow disabling BIP70 support in the GUI (support was enabled by default). In 0.19.0, this flag is now __disabled__ by default. If you want to compile Bitcoin Core with BIP70 support in the GUI, you can pass `--enable-bip70` to `./configure`. (#15584)\n-\n-Deprecated or removed configuration options\n--------------------------------------------\n-\n-- `-mempoolreplacement` is removed, although default node behavior\n-  remains the same.  This option previously allowed the user to prevent\n-  the node from accepting or relaying BIP125 transaction replacements.\n-  This is different from the remaining configuration option\n-  `-walletrbf`. (#16171)\n-\n-Deprecated or removed RPCs\n---------------------------\n-\n-- `bumpfee` no longer accepts a `totalFee` option unless the\n-  configuration parameter `deprecatedrpc=totalFee` is specified.  This\n-  parameter will be fully removed in a subsequent release. (#15996)\n-\n-- `bumpfee` has a new `fee_rate` option as a replacement for the deprecated `totalFee`. (#16727)\n-\n-- `generate` is now removed after being deprecated in Bitcoin Core 0.18.\n-  Use the `generatetoaddress` RPC instead. (#15492)\n-\n-P2P changes\n+0.19.0 note\n -----------\n \n-- BIP 61 reject messages were deprecated in v0.18. They are now disabled\n-  by default, but can be enabled by setting the `-enablebip61` command\n-  line option.  BIP 61 reject messages will be removed entirely in a\n-  future version of Bitcoin Core. (#14054)\n-\n-- To eliminate well-known denial-of-service vectors in Bitcoin Core,\n-  especially for nodes with spinning disks, the default value for the\n-  `-peerbloomfilters` configuration option has been changed to false.\n-  This prevents Bitcoin Core from sending the BIP111 NODE_BLOOM service\n-  flag, accepting BIP37 bloom filters, or serving merkle blocks or\n-  transactions matching a bloom filter.  Users who still want to provide\n-  bloom filter support may either set the configuration option to true\n-  to re-enable both BIP111 and BIP37 support or enable just BIP37\n-  support for specific peers using the updated `-whitelist` and\n-  `-whitebind` configuration options described elsewhere in these\n-  release notes.  For the near future, lightweight clients using public\n-  BIP111/BIP37 nodes should still be able to connect to older versions\n-  of Bitcoin Core and nodes that have manually enabled BIP37 support,\n-  but developers of such software should consider migrating to either\n-  using specific BIP37 nodes or an alternative transaction filtering\n-  system. (#16152)\n-\n-- By default, Bitcoin Core will now make two additional outbound connections that are exclusively used for block-relay.  No transactions or addr messages will be processed on these connections. These connections are designed to add little additional memory or bandwidth resource requirements but should make some partitioning attacks more difficult to carry out. (#15759)\n-\n-Miscellaneous CLI Changes\n--------------------------\n-\n-- The `testnet` field in `bitcoin-cli -getinfo` has been renamed to\n-  `chain` and now returns the current network name as defined in BIP70\n-  (main, test, regtest). (#15566)\n-\n-Low-level changes\n-=================\n-\n-RPC\n----\n-\n-- `getblockchaininfo` no longer returns a `bip9_softforks` object.\n-  Instead, information has been moved into the `softforks` object and\n-  an additional `type` field describes how Bitcoin Core determines\n-  whether that soft fork is active (e.g. BIP9 or BIP90).  See the RPC\n-  help for details. (#16060)\n-\n-- `getblocktemplate` no longer returns a `rules` array containing `CSV`\n-  and `segwit` (the BIP9 deployments that are currently in active\n-  state). (#16060)\n-\n-- `getrpcinfo` now returns a `logpath` field with the path to\n-  `debug.log`. (#15483)\n-\n-Tests\n------\n-\n-- The regression test chain enabled by the `-regtest` command line flag\n-  now requires transactions to not violate standard policy by default.\n-  This is the same default used for mainnet and makes it easier to test\n-  mainnet behavior on regtest. Note that the testnet still allows\n-  non-standard txs by default and that the policy can be locally\n-  adjusted with the `-acceptnonstdtxn` command line flag for both test\n-  chains. (#15891)\n-\n-Configuration\n-------------\n-\n-- A setting specified in the default section but not also specified in a\n-  network-specific section (e.g. testnet) will now produce an error\n-  preventing startup instead of just a warning unless the network is\n-  mainnet.  This prevents settings intended for mainnet from being\n-  applied to testnet or regtest. (#15629)\n-\n-- On platforms supporting `thread_local`, log lines can be prefixed with\n-  the name of the thread that caused the log. To enable this behavior,\n-  use `-logthreadnames=1`. (#15849)\n-\n-Network\n--------\n-\n-- When fetching a transaction announced by multiple peers, previous versions of\n-  Bitcoin Core would sequentially attempt to download the transaction from each\n-  announcing peer until the transaction is received, in the order that those\n-  peers' announcements were received.  In this release, the download logic has\n-  changed to randomize the fetch order across peers and to prefer sending\n-  download requests to outbound peers over inbound peers. This fixes an issue\n-  where inbound peers could prevent a node from getting a transaction.\n-  (#14897, #15834)\n-\n-- If a Tor hidden service is being used, Bitcoin Core will be bound to\n-  the standard port 8333 even if a different port is configured for\n-  clearnet connections.  This prevents leaking node identity through use\n-  of identical non-default port numbers. (#15651)\n-\n-Mempool and transaction relay\n------------------------------\n-\n-- Allows one extra single-ancestor transaction per package.  Previously,\n-  if a transaction in the mempool had 25 descendants, or it and all of\n-  its descendants were over 101,000 vbytes, any newly-received\n-  transaction that was also a descendant would be ignored.  Now, one\n-  extra descendant will be allowed provided it is an immediate\n-  descendant (child) and the child's size is 10,000 vbytes or less.\n-  This makes it possible for two-party contract protocols such as\n-  Lightning Network to give each participant an output they can spend\n-  immediately for Child-Pays-For-Parent (CPFP) fee bumping without\n-  allowing one malicious participant to fill the entire package and thus\n-  prevent the other participant from spending their output. (#15681)\n-\n-- Transactions with outputs paying v1 to v16 witness versions (future\n-  segwit versions) are now accepted into the mempool, relayed, and\n-  mined.  Attempting to spend those outputs remains forbidden by policy\n-  (\"non-standard\").  When this change has been widely deployed, wallets\n-  and services can accept any valid bech32 Bitcoin address without\n-  concern that transactions paying future segwit versions will become\n-  stuck in an unconfirmed state. (#15846)\n-\n-- Legacy transactions (transactions with no segwit inputs) must now be\n-  sent using the legacy encoding format, enforcing the rule specified in\n-  BIP144.  (#14039)\n-\n-Wallet\n-------\n-\n-- When in pruned mode, a rescan that was triggered by an `importwallet`,\n-  `importpubkey`, `importaddress`, or `importprivkey` RPC will only fail\n-  when blocks have been pruned. Previously it would fail when `-prune`\n-  has been set.  This change allows setting `-prune` to a high value\n-  (e.g. the disk size) without the calls to any of the import RPCs\n-  failing until the first block is pruned. (#15870)\n-\n-- When creating a transaction with a fee above `-maxtxfee` (default 0.1\n-  BTC), the RPC commands `walletcreatefundedpsbt` and\n-  `fundrawtransaction` will now fail instead of rounding down the fee.\n-  Be aware that the `feeRate` argument is specified in BTC per 1,000\n-  vbytes, not satoshi per vbyte. (#16257)\n-\n-- A new wallet flag `avoid_reuse` has been added (default off). When\n-  enabled, a wallet will distinguish between used and unused addresses,\n-  and default to not use the former in coin selection.  When setting\n-  this flag on an existing wallet, rescanning the blockchain is required\n-  to correctly mark previously used destinations.  Together with \"avoid\n-  partial spends\" (added in Bitcoin Core v0.17.0), this can eliminate a\n-  serious privacy issue where a malicious user can track spends by\n-  sending small payments to a previously-paid address that would then\n-  be included with unrelated inputs in future payments. (#13756)\n-\n-Build system changes\n---------------------\n-\n-- Python >=3.5 is now required by all aspects of the project. This\n-  includes the build systems, test framework and linters. The previously\n-  supported minimum (3.4), was EOL in March 2019. (#14954)\n-\n-- The minimum supported miniUPnPc API version is set to 10. This keeps\n-  compatibility with Ubuntu 16.04 LTS and Debian 8 `libminiupnpc-dev`\n-  packages. Please note, on Debian this package is still vulnerable to\n-  [CVE-2017-8798](https://security-tracker.debian.org/tracker/CVE-2017-8798)\n-  (in jessie only) and\n-  [CVE-2017-1000494](https://security-tracker.debian.org/tracker/CVE-2017-1000494)\n-  (both in jessie and in stretch). (#15993)\n-\n-0.19.0 change log\n-=================\n-\n-### Consensus\n-- #16128 Delete error-prone CScript constructor only used with FindAndDelete (instagibbs)\n-- #16060 Bury bip9 deployments (jnewbery)\n-\n-### Policy\n-- #15557 Enhance `bumpfee` to include inputs when targeting a feerate (instagibbs)\n-- #15846 Make sending to future native witness outputs standard (sipa)\n-\n-### Block and transaction handling\n-- #15632 Remove ResendWalletTransactions from the Validation Interface (jnewbery)\n-- #14121 Index for BIP 157 block filters (jimpo)\n-- #15141 Rewrite DoS interface between validation and net_processing (sdaftuar)\n-- #15880 utils and libraries: Replace deprecated Boost Filesystem functions (hebasto)\n-- #15971 validation: Add compile-time checking for negative locking requirement in LimitValidationInterfaceQueue (practicalswift)\n-- #15999 init: Remove dead code in LoadChainTip (MarcoFalke)\n-- #16015 validation: Hold cs_main when reading chainActive in RewindBlockIndex (practicalswift)\n-- #16056 remove unused magic number from consistency check (instagibbs)\n-- #16171 Remove -mempoolreplacement to prevent needless block prop slowness (TheBlueMatt)\n-- #15894 Remove duplicated \"Error: \" prefix in logs (hebasto)\n-- #14193 validation: Add missing mempool locks (MarcoFalke)\n-- #15681 Allow one extra single-ancestor transaction per package (TheBlueMatt)\n-- #15305 [validation] Crash if disconnecting a block fails (sdaftuar)\n-- #16471 log correct messages when CPFP fails (jnewbery)\n-- #16433 txmempool: Remove unused default value MemPoolRemovalReason::UNKNOWN (MarcoFalke)\n-- #13868 Remove unused fScriptChecks parameter from CheckInputs (Empact)\n-- #16421 Conservatively accept RBF bumps bumping one tx at the package limits (TheBlueMatt)\n-- #16854 Prevent UpdateTip log message from being broken up (stevenroose)\n-- #16956 validation: Make GetWitnessCommitmentIndex public (MarcoFalke)\n-- #16713 Ignore old versionbit activations to avoid 'unknown softforks' warning (jnewbery)\n-- #17002 chainparams: Bump assumed chain params (MarcoFalke)\n-- #16849 Fix block index inconsistency in InvalidateBlock() (sdaftuar)\n-\n-### P2P protocol and network code\n-- #15597 Generate log entry when blocks messages are received unexpectedly (pstratem)\n-- #15654 Remove unused unsanitized user agent string CNode::strSubVer (MarcoFalke)\n-- #15689 netaddress: Update CNetAddr for ORCHIDv2 (dongcarl)\n-- #15834 Fix transaction relay bugs introduced in #14897 and expire transactions from peer in-flight map (sdaftuar)\n-- #15651 torcontrol: Use the default/standard network port for Tor hidden services, even if the internal port is set differently (luke-jr)\n-- #16188 Document what happens to getdata of unknown type (MarcoFalke)\n-- #15649 Add ChaCha20Poly1305@Bitcoin AEAD (jonasschnelli)\n-- #16152 Disable bloom filtering by default (TheBlueMatt)\n-- #15993 Drop support of the insecure miniUPnPc versions (hebasto)\n-- #16197 Use mockable time for tx download (MarcoFalke)\n-- #16248 Make whitebind/whitelist permissions more flexible (NicolasDorier)\n-- #16618 [Fix] Allow connection of a noban banned peer (NicolasDorier)\n-- #16631 Restore default whitelistrelay to true (NicolasDorier)\n-- #15759 Add 2 outbound block-relay-only connections (sdaftuar)\n-- #15558 Don't query all DNS seeds at once (sipa)\n-- #16999 0.19 seeds update (laanwj)\n-\n-### Wallet\n-- #15288 Remove wallet -> node global function calls (ryanofsky)\n-- #15491 Improve log output for errors during load (gwillen)\n-- #13541 wallet/rpc: sendrawtransaction maxfeerate (kallewoof)\n-- #15680 Remove resendwallettransactions RPC method (jnewbery)\n-- #15508 Refactor analyzepsbt for use outside RPC code (gwillen)\n-- #15747 Remove plethora of Get*Balance (MarcoFalke)\n-- #15728 Refactor relay transactions (jnewbery)\n-- #15639 bitcoin-wallet tool: Drop libbitcoin_server.a dependency (ryanofsky)\n-- #15853 Remove unused import checkpoints.h (MarcoFalke)\n-- #15780 add cachable amounts for caching credit/debit values (kallewoof)\n-- #15778 Move maxtxfee from node to wallet (jnewbery)\n-- #15901 log on rescan completion (andrewtoth)\n-- #15917 Avoid logging no_such_file_or_directory error (promag)\n-- #15452 Replace CScriptID and CKeyID in CTxDestination with dedicated types (instagibbs)\n-- #15870 Only fail rescan when blocks have actually been pruned (MarcoFalke)\n-- #15006 Add option to create an encrypted wallet (achow101)\n-- #16001 Give WalletModel::UnlockContext move semantics (sipa)\n-- #15741 Batch write imported stuff in importmulti (achow101)\n-- #16144 do not encrypt wallets with disabled private keys (mrwhythat)\n-- #15024 Allow specific private keys to be derived from descriptor (meshcollider)\n-- #13756 \"avoid_reuse\" wallet flag for improved privacy (kallewoof)\n-- #16226 Move ismine to the wallet module (achow101)\n-- #16239 wallet/rpc: follow-up clean-up/fixes to avoid_reuse (kallewoof)\n-- #16286 refactoring: wallet: Fix GCC 7.4.0 warning (hebasto)\n-- #16257 abort when attempting to fund a transaction above -maxtxfee (Sjors)\n-- #16237 Have the wallet give out destinations instead of keys (achow101)\n-- #16322 Fix -maxtxfee check by moving it to CWallet::CreateTransaction (promag)\n-- #16361 Remove redundant pre-TopUpKeypool check (instagibbs)\n-- #16244 Move wallet creation out of the createwallet rpc into its own function (achow101)\n-- #16227 Refactor CWallet's inheritance chain (achow101)\n-- #16208 Consume ReserveDestination on successful CreateTransaction (instagibbs)\n-- #16301 Use CWallet::Import* functions in all import* RPCs (achow101)\n-- #16402 Remove wallet settings from chainparams (MarcoFalke)\n-- #16415 Get rid of PendingWalletTx class (ryanofsky)\n-- #15588 Log the actual wallet file version and no longer publicly expose the \"version\" record (achow101)\n-- #16399 Improve wallet creation (fjahr)\n-- #16475 Enumerate walletdb keys (MarcoFalke)\n-- #15709 Do not add \"setting\" key as unknown (Bushstar)\n-- #16451 Remove CMerkleTx (jnewbery)\n-- #15906 Move min_depth and max_depth to coin control (amitiuttarwar)\n-- #16502 Drop unused OldKey (promag)\n-- #16394 Allow createwallet to take empty passwords to make unencrypted wallets (achow101)\n-- #15911 Use wallet RBF default for walletcreatefundedpsbt (Sjors)\n-- #16503 Remove p2pEnabled from Chain interface (ariard)\n-- #16557 restore coinbase and confirmed/conflicted checks in SubmitMemoryPoolAndRelay() (jnewbery)\n-- #14934 Descriptor expansion cache clarifications (Sjors)\n-- #16383 rpcwallet: default include_watchonly to true for watchonly wallets (jb55)\n-- #16542 Return more specific errors about invalid descriptors (achow101)\n-- #16572 Fix Char as Bool in Wallet (JeremyRubin)\n-- #16753 extract PubKey from P2PK script with Solver (theStack)\n-- #16716 Use wallet name instead of pointer on unload/release (promag)\n-- #16185 gettransaction: add an argument to decode the transaction (darosior)\n-- #16745 Translate all initErrors in CreateWalletFromFile (MarcoFalke)\n-- #16792 Assert that the HRP is lowercase in Bech32::Encode (meshcollider)\n-- #16624 encapsulate transactions state (ariard)\n-- #16830 Cleanup walletinitinterface.h (hebasto)\n-- #16796 Fix segfault in CreateWalletFromFile (MarcoFalke)\n-- #16866 Rename 'decode' argument in gettransaction method to 'verbose' (jnewbery)\n-- #16727 Explicit feerate for bumpfee (instagibbs)\n-- #16609 descriptor: fix missed m_script_arg arg renaming in #14934 (fanquake)\n-\n-### RPC and other APIs\n-- #15492 remove deprecated generate method (Sjors)\n-- #15566 cli: Replace testnet with chain and return network name as per bip70 (fanquake)\n-- #15564 cli: Remove duplicate wallet fields from -getinfo (fanquake)\n-- #15642 Remove deprecated rpc warnings (jnewbery)\n-- #15637 Rename size to vsize in mempool related calls (fanquake)\n-- #15620 Uncouple non-wallet rpcs from maxTxFee global (MarcoFalke)\n-- #15616 Clarify decodescript RPCResult doc (MarcoFalke)\n-- #15669 Fix help text for signtransactionwithXXX (torkelrogstad)\n-- #15596 Ignore sendmany::minconf as dummy value (MarcoFalke)\n-- #15755 remove unused var in rawtransaction.cpp (Bushstar)\n-- #15746 RPCHelpMan: Always name dictionary keys (MarcoFalke)\n-- #15748 remove dead mining code (jnewbery)\n-- #15751 Speed up deriveaddresses for large ranges (sipa)\n-- #15770 Validate maxfeerate with AmountFromValue (promag)\n-- #15474 rest/rpc: Make mempoolinfo atomic (promag)\n-- #15463 Speedup getaddressesbylabel (promag)\n-- #15784 Remove dependency on interfaces::Chain in SignTransaction (ariard)\n-- #15323 Expose g_is_mempool_loaded via getmempoolinfo (Empact)\n-- #15932 Serialize in getblock without cs_main (MarcoFalke)\n-- #15930 Add balances RPC (MarcoFalke)\n-- #15730 Show scanning details in getwalletinfo (promag)\n-- #14802 faster getblockstats using BlockUndo data (FelixWeis)\n-- #14984 Speedup getrawmempool when verbose=true (promag)\n-- #16071 Hint for importmulti in help output of importpubkey and importaddress (kristapsk)\n-- #16063 Mention getwalletinfo where a rescan is triggered (promag)\n-- #16024 deriveaddresses: Correction of descriptor checksum in RPC example (ccapo)\n-- #16217 getrawtransaction: inform about blockhash argument when lookup fails (darosior)\n-- #15427 Add support for descriptors to utxoupdatepsbt (sipa)\n-- #16262 Allow shutdown while in generateblocks (pstratem)\n-- #15483 Adding a 'logpath' entry to getrpcinfo (darosior)\n-- #16325 Clarify that block count means height excl genesis (MarcoFalke)\n-- #16326 add new utxoupdatepsbt arguments to the CRPCCommand and CPRCCvertParam tables (jnewbery)\n-- #16332 Add logpath description for getrpcinfo (instagibbs)\n-- #16240 JSONRPCRequest-aware RPCHelpMan (kallewoof)\n-- #15996 Deprecate totalfee argument in `bumpfee` (instagibbs)\n-- #16467 sendrawtransaction help privacy note (jonatack)\n-- #16596 Fix getblocktemplate CLI example (emilengler)\n-- #15986 Add checksum to getdescriptorinfo (sipa)\n-- #16647 add weight to getmempoolentry output (fanquake)\n-- #16695 Add window final block height to getchaintxstats (leto)\n-- #16798 Refactor rawtransaction_util's SignTransaction to separate prevtx parsing (achow101)\n-- #16285 Improve scantxoutset response and help message (promag)\n-- #16725 Don't show addresses or P2PK in decoderawtransaction (NicolasDorier)\n-- #16787 Human readable network services (darosior)\n-- #16251 Improve signrawtransaction error reporting (ajtowns)\n-- #16873 fix regression in gettransaction (jonatack)\n-- #16512 Shuffle inputs and outputs after joining psbts (achow101)\n-- #16521 Use the default maxfeerate value as BTC/kB (Remagpie)\n-- #16817 Fix casing in getblockchaininfo to be inline with other fields (dangershony)\n-- #17131 fix -rpcclienttimeout 0 option (fjahr)\n-- #17249 Add missing deque include to fix build (jbeich)\n-\n-### GUI\n-- #15464 Drop unused return values in WalletFrame (promag)\n-- #15614 Defer removeAndDeleteWallet when no modal widget is active (promag)\n-- #15711 Generate bech32 addresses by default (MarcoFalke)\n-- #15829 update request payment button text and tab description (fanquake)\n-- #15874 Resolve the qt/guiutil <-> qt/optionsmodel CD (251Labs)\n-- #15371 Uppercase bech32 addresses in qr codes (benthecarman)\n-- #15928 Move QRImageWidget to its own file-pair (luke-jr)\n-- #16113 move coin control \"OK\" to the right hand side of the dialog (fanquake)\n-- #16090 Add vertical spacer to peer detail widget (JosuGZ)\n-- #15886 qt, wallet: Revamp SendConfirmationDialog (hebasto)\n-- #16263 Use qInfo() if no error occurs (hebasto)\n-- #16153 Add antialiasing to traffic graph widget (JosuGZ)\n-- #16350 Remove unused guard (hebasto)\n-- #16106 Sort wallets in open wallet menu (promag)\n-- #16291 Stop translating PACKAGE_NAME (MarcoFalke)\n-- #16380 Remove unused bits from the service flags enum (MarcoFalke)\n-- #16379 Fix autostart filenames on Linux for testnet/regtest (hebasto)\n-- #16366 init: Use InitError for all errors in bitcoind/qt (MarcoFalke)\n-- #16436 Do not create payment server if -disablewallet option provided (hebasto)\n-- #16514 Remove unused RPCConsole::tabFocus (promag)\n-- #16497 Generate bech32 addresses by default (take 2, fixup) (MarcoFalke)\n-- #16349 Remove redundant WalletController::addWallet slot (hebasto)\n-- #16578 Do not pass in command line arguments to QApplication (achow101)\n-- #16612 Remove menu icons (laanwj)\n-- #16677 remove unused PlatformStyle::TextColorIcon (fanquake)\n-- #16694 Ensure transaction send error is always visible (fanquake)\n-- #14879 Add warning messages to the debug window (hebasto)\n-- #16708 Replace obsolete functions of QSslSocket (hebasto)\n-- #16701 Replace functions deprecated in Qt 5.13 (hebasto)\n-- #16706 Replace deprecated QSignalMapper by lambda expressions (hebasto)\n-- #16707 Remove obsolete QModelIndex::child() (hebasto)\n-- #16758 Replace QFontMetrics::width() with TextWidth() (hebasto)\n-- #16760 Change uninstall icon on Windows (GChuf)\n-- #16720 Replace objc_msgSend() function calls with the native Objective-C syntax (hebasto)\n-- #16788 Update transifex slug for 0.19 (laanwj)\n-- #15450 Create wallet menu option (achow101)\n-- #16735 Remove unused menu items for Windows and Linux (GChuf)\n-- #16826 Do additional character escaping for wallet names and address labels (achow101)\n-- #15529 Add Qt programs to msvc build (updated, no code changes) (sipsorcery)\n-- #16714 add prune to intro screen with smart default (Sjors)\n-- #16858 advise users not to switch wallets when opening a BIP70 URI (jameshilliard)\n-- #16822 Create wallet menu option follow-ups (jonatack)\n-- #16882 Re-generate translations before 0.19.0 (MarcoFalke)\n-- #16928 Rename address checkbox back to bech32 (MarcoFalke)\n-- #16837 Fix {C{,XX},LD}FLAGS pickup (dongcarl)\n-- #16971 Change default size of intro frame (emilengler)\n-- #16988 Periodic translations update (laanwj)\n-- #16852 When BIP70 is disabled, get PaymentRequest merchant using string search (achow101)\n-- #16952 make sure to update the UI when deleting a transaction (jonasschnelli)\n-- #17031 Prevent processing duplicate payment requests (promag)\n-- #17135 Make polling in ClientModel asynchronous (promag)\n-- #17120 Fix start timer from non QThread (promag)\n-- #17257 disable font antialiasing for QR image address (fanquake)\n-\n-### Build system\n-- #14954 Require python 3.5 (MarcoFalke)\n-- #15580 native_protobuf: avoid system zlib (dongcarl)\n-- #15601 Switch to python3 (take 3) (MarcoFalke)\n-- #15581 Make less assumptions about build env (dongcarl)\n-- #14853 latest RapidCheck (fanquake)\n-- #15446 Improve depends debuggability (dongcarl)\n-- #13788 Fix --disable-asm for newer assembly checks/code (luke-jr)\n-- #12051 add missing debian contrib file to tarball (puchu)\n-- #15919 Remove unused OpenSSL includes to make it more clear where OpenSSL is used (practicalswift)\n-- #15978 .gitignore: Don't ignore depends patches (dongcarl)\n-- #15939 gitian: Remove windows 32 bit build (MarcoFalke)\n-- #15239 scripts and tools: Move non-linux build source tarballs to \"bitcoin-binaries/version\" directory (hebasto)\n-- #14047 Add HKDF_HMAC256_L32 and method to negate a private key (jonasschnelli)\n-- #16051 add patch to common dependencies (fanquake)\n-- #16049 switch to secure download of all dependencies (Kemu)\n-- #16059 configure: Fix thread_local detection (dongcarl)\n-- #16089 add ability to skip building zeromq (fanquake)\n-- #15844 Purge libtool archives (dongcarl)\n-- #15461 update to Boost 1.70 (Sjors)\n-- #16141 remove GZIP export from gitian descriptors (fanquake)\n-- #16235 Cleaned up and consolidated msbuild files (no code changes) (sipsorcery)\n-- #16246 MSVC: Fix error in debug mode (Fix #16245) (NicolasDorier)\n-- #16183 xtrans: Configure flags cleanup (dongcarl)\n-- #16258 [MSVC]: Create the config.ini as part of bitcoind build (NicolasDorier)\n-- #16271 remove -Wall from rapidcheck build flags (fanquake)\n-- #16309 [MSVC] allow user level project customization (NicolasDorier)\n-- #16308 [MSVC] Copy build output to src/ automatically after build (NicolasDorier)\n-- #15457 Check std::system for -[alert|block|wallet]notify (Sjors)\n-- #16344 use #if HAVE_SYSTEM instead of defined(HAVE_SYSTEM) (Sjors)\n-- #16352 prune dbus from depends (fanquake)\n-- #16270 expat 2.2.7 (fanquake)\n-- #16408 Prune X packages (dongcarl)\n-- #16386 disable unused Qt features (fanquake)\n-- #16424 Treat -Wswitch as error when --enable-werror (MarcoFalke)\n-- #16441 remove qt libjpeg check from bitcoin_qt.m4 (fanquake)\n-- #16434 Specify AM_CPPFLAGS for ZMQ (domob1812)\n-- #16534 add Qt Creator Makefile.am.user to .gitignore (Bushstar)\n-- #16573 disable building libsecp256k1 benchmarks (fanquake)\n-- #16533 disable libxcb extensions (fanquake)\n-- #16589 Remove unused src/obj-test folder (MarcoFalke)\n-- #16435 autoconf: Sane `--enable-debug` defaults (dongcarl)\n-- #16622 echo property tests status during build (jonatack)\n-- #16611 Remove src/obj directory from repository (laanwj)\n-- #16371 ignore macOS make deploy artefacts & add them to clean-local (fanquake)\n-- #16654 build: update RapidCheck Makefile (jonatack)\n-- #16370 cleanup package configure flags (fanquake)\n-- #16746 msbuild: Ignore linker warning (sipsorcery)\n-- #16750 msbuild: adds bench_bitcoin to auto generated project files (sipsorcery)\n-- #16810 guix: Remove ssp spec file hack (dongcarl)\n-- #16477 skip deploying plugins we dont use in macdeployqtplus (fanquake)\n-- #16413 Bump QT to LTS release 5.9.8 (THETCR)\n-- #15584 disable BIP70 support by default (fanquake)\n-- #16871 make building protobuf optional in depends (fanquake)\n-- #16879 remove redundant sed patching (fanquake)\n-- #16809 zlib: Move toolchain options to configure (dongcarl)\n-- #15146 Solve SmartOS FD_ZERO build issue (Empact)\n-- #16870 update boost macros to latest upstream for improved error reporting (fanquake)\n-- #16982 Factor out qt translations from build system (laanwj)\n-- #16926 Add OpenSSL termios fix for musl libc (nmarley)\n-- #16927 Refresh ZeroMQ 4.3.1 patch (nmarley)\n-- #17005 Qt version appears only if GUI is being built (ch4ot1c)\n-- #16468 Exclude depends/Makefile in .gitignore (promag)\n-\n-### Tests and QA\n-- #15296 Add script checking for deterministic line coverage in unit tests (practicalswift)\n-- #15338 ci: Build and run tests once on freebsd (MarcoFalke)\n-- #15479 Add .style.yapf (MarcoFalke)\n-- #15534 lint-format-strings: open files sequentially (fix for OS X) (gwillen)\n-- #15504 fuzz: Link BasicTestingSetup (shared with unit tests) (MarcoFalke)\n-- #15473 bench: Benchmark mempooltojson (MarcoFalke)\n-- #15466 Print remaining jobs in test_runner.py (stevenroose)\n-- #15631 mininode: Clearer error message on invalid magic bytes (MarcoFalke)\n-- #15255 Remove travis_wait from lint script (gkrizek)\n-- #15686 make pruning test faster (jnewbery)\n-- #15533 .style.yapf: Set column_limit=160 (MarcoFalke)\n-- #15660 Overhaul p2p_compactblocks.py (sdaftuar)\n-- #15495 Add regtests for HTTP status codes (domob1812)\n-- #15772 Properly log named args in authproxy (MarcoFalke)\n-- #15771 Prevent concurrency issues reading .cookie file (promag)\n-- #15693 travis: Switch to ubuntu keyserver to avoid timeouts (MarcoFalke)\n-- #15629 init: Throw error when network specific config is ignored (MarcoFalke)\n-- #15773 Add BitcoinTestFramework::sync_* methods (MarcoFalke)\n-- #15797 travis: Bump second timeout to 33 minutes, add rationale (MarcoFalke)\n-- #15788 Unify testing setups for fuzz, bench, and unit tests (MarcoFalke)\n-- #15352 Reduce noise level in test_bitcoin output (practicalswift)\n-- #15779 Add wallet_balance benchmark (MarcoFalke)\n-- #15843 fix outdated include in blockfilter_index_tests (jamesob)\n-- #15866 Add missing syncwithvalidationinterfacequeue to wallet_import_rescan (MarcoFalke)\n-- #15697 Make swap_magic_bytes in p2p_invalid_messages atomic (MarcoFalke)\n-- #15895 Avoid re-reading config.ini unnecessarily (luke-jr)\n-- #15896 feature_filelock, interface_bitcoin_cli: Use PACKAGE_NAME in messages rather than hardcoding Bitcoin Core (luke-jr)\n-- #15897 QA/mininode: Send all headers upfront in send_blocks_and_test to avoid sending an unconnected one (luke-jr)\n-- #15696 test_runner: Move feature_pruning to base tests (MarcoFalke)\n-- #15869 Add settings merge test to prevent regresssions (ryanofsky)\n-- #15758 Add further tests to wallet_balance (MarcoFalke)\n-- #15841 combine_logs: append node stderr and stdout if it exists (MarcoFalke)\n-- #15949 test_runner: Move pruning back to extended (MarcoFalke)\n-- #15927 log thread names by default in functional tests (jnewbery)\n-- #15664 change default Python block serialization to witness (instagibbs)\n-- #15988 Add test for ArgsManager::GetChainName (ryanofsky)\n-- #15963 Make random seed logged and settable (jnewbery)\n-- #15943 Fail if RPC has been added without tests (MarcoFalke)\n-- #16036 travis: Run all lint scripts even if one fails (scravy)\n-- #13555 parameterize adjustment period in versionbits_computeblockversion (JBaczuk)\n-- #16079 wallet_balance.py: Prevent edge cases (stevenroose)\n-- #16078 replace tx hash with txid in rawtransaction test (LongShao007)\n-- #16042 Bump MAX_NODES to 12 (MarcoFalke)\n-- #16124 Limit Python linting to files in the repo (practicalswift)\n-- #16143 Mark unit test blockfilter_index_initial_sync as non-deterministic (practicalswift)\n-- #16214 travis: Fix caching issues (MarcoFalke)\n-- #15982 Make msg_block a witness block (MarcoFalke)\n-- #16225 Make coins_tests/updatecoins_simulation_test deterministic (practicalswift)\n-- #16236 fuzz: Log output even if fuzzer failed (MarcoFalke)\n-- #15520 cirrus: Run extended test feature_pruning (MarcoFalke)\n-- #16234 Add test for unknown args (MarcoFalke)\n-- #16207 stop generating lcov coverage when functional tests fail (asood123)\n-- #16252 Log to debug.log in all unit tests (MarcoFalke)\n-- #16289 Add missing ECC_Stop() in GUI rpcnestedtests.cpp (jonasschnelli)\n-- #16278 Remove unused includes (practicalswift)\n-- #16302 Add missing syncwithvalidationinterfacequeue to wallet_balance test (MarcoFalke)\n-- #15538 wallet_bumpfee.py: Make sure coin selection produces change (instagibbs)\n-- #16294 Create at most one testing setup (MarcoFalke)\n-- #16299 bench: Move generated data to a dedicated translation unit (promag)\n-- #16329 Add tests for getblockchaininfo.softforks (MarcoFalke)\n-- #15687 tool wallet test coverage for unexpected writes to wallet (jonatack)\n-- #16267 bench: Benchmark blocktojson (fanatid)\n-- #14505 Add linter to make sure single parameter constructors are marked explicit (practicalswift)\n-- #16338 Disable other targets when enable-fuzz is set (qmma70)\n-- #16334 rpc_users: Also test rpcauth.py with password (dongcarl)\n-- #15282 Replace hard-coded hex tx with class in test framework (stevenroose)\n-- #16390 Add --filter option to test_runner.py (promag)\n-- #15891 Require standard txs in regtest by default (MarcoFalke)\n-- #16374 Enable passing wildcard test names to test runner from root (jonatack)\n-- #16420 Fix race condition in wallet_encryption test (jonasschnelli)\n-- #16422 remove redundant setup in addrman_tests (zenosage)\n-- #16438 travis: Print memory and number of cpus (MarcoFalke)\n-- #16445 Skip flaky p2p_invalid_messages test on macOS (fjahr)\n-- #16459 Fix race condition in example_test.py (sdaftuar)\n-- #16464 Ensure we don't generate a too-big block in p2sh sigops test (sdaftuar)\n-- #16491 fix deprecated log.warn in feature_dbcrash test (jonatack)\n-- #15134 Switch one of the Travis jobs to an unsigned char environment (-funsigned-char) (practicalswift)\n-- #16505 Changes verbosity of msbuild from quiet to normal in the appveyor script (sipsorcery)\n-- #16293 Make test cases separate functions (MarcoFalke)\n-- #16470 Fail early on disconnect in mininode.wait_for_* (MarcoFalke)\n-- #16277 Suppress output in test_bitcoin for expected errors (gertjaap)\n-- #16493 Fix test failures (MarcoFalke)\n-- #16538 Add missing sync_blocks to feature_pruning (MarcoFalke)\n-- #16509 Adapt test framework for chains other than \"regtest\" (MarcoFalke)\n-- #16363 Add test for BIP30 duplicate tx (MarcoFalke)\n-- #16535 Explain why -whitelist is used in feature_fee_estimation (MarcoFalke)\n-- #16554 only include and use OpenSSL where it's actually needed (BIP70) (fanquake)\n-- #16598 Remove confusing hash256 function in util (elichai)\n-- #16595 travis: Use extended 90 minute timeout when available (MarcoFalke)\n-- #16563 Add unit test for AddTimeData (mzumsande)\n-- #16561 Use colors and dots in test_runner.py output only if standard output is a terminal (practicalswift)\n-- #16465 Test p2sh-witness and bech32 in wallet_import_rescan (MarcoFalke)\n-- #16582 Rework ci (Use travis only as fallback env) (MarcoFalke)\n-- #16633 travis: Fix test_runner.py timeouts (MarcoFalke)\n-- #16646 Run tests with UPnP disabled (fanquake)\n-- #16623 ci: Add environment files for all settings (MarcoFalke)\n-- #16656 fix rpc_setban.py race (jonasschnelli)\n-- #16570 Make descriptor tests deterministic (davereikher)\n-- #16404 Test ZMQ notification after chain reorg (promag)\n-- #16726 Avoid common Python default parameter gotcha when mutable dict/list:s are used as default parameter values (practicalswift)\n-- #16739 ci: Pass down $makejobs to test_runner.py, other improvements (MarcoFalke)\n-- #16767 Check for codespell in lint-spelling.sh (kristapsk)\n-- #16768 Make lint-includes.sh work from any directory (kristapsk)\n-- #15257 Scripts and tools: Bump flake8 to 3.7.8 (Empact)\n-- #16804 Remove unused try-block in assert_debug_log (MarcoFalke)\n-- #16850 `servicesnames` field in `getpeerinfo` and `getnetworkinfo` (darosior)\n-- #16551 Test that low difficulty chain fork is rejected (MarcoFalke)\n-- #16737 Establish only one connection between nodes in rpc_invalidateblock (MarcoFalke)\n-- #16845 Add notes on how to generate data/wallets/high_minversion (MarcoFalke)\n-- #16888 Bump timeouts in slow running tests (MarcoFalke)\n-- #16864 Add python bech32 impl round-trip test (instagibbs)\n-- #16865 add some unit tests for merkle.cpp (soroosh-sdi)\n-- #14696 Add explicit references to related CVE's in p2p_invalid_block test (lucash-dev)\n-- #16907 lint: Add DisabledOpcodeTemplates to whitelist (MarcoFalke)\n-- #16898 Remove connect_nodes_bi (MarcoFalke)\n-- #16917 Move common function assert_approx() into util.py (fridokus)\n-- #16921 Add information on how to add Vulture suppressions (practicalswift)\n-- #16920 Fix extra_args in wallet_import_rescan.py (MarcoFalke)\n-- #16918 Make PORT_MIN in test runner configurable (MarcoFalke)\n-- #16941 travis: Disable feature_block in tsan run due to oom (MarcoFalke)\n-- #16929 follow-up to rpc: default maxfeerate value as BTC/kB (jonatack)\n-- #16959 ci: Set $host before setting fallback values (MarcoFalke)\n-- #16961 Remove python dead code linter (laanwj)\n-- #16931 add unittests for CheckProofOfWork (soroosh-sdi)\n-- #16991 Fix service flag comparison check in rpc_net test (luke-jr) (laanwj)\n-- #16987 Correct docstring param name (jbampton)\n-- #17015 Explain QT_QPA_PLATFORM for gui tests (MarcoFalke)\n-- #17006 Enable UBSan for Travis fuzzing job (practicalswift)\n-- #17086 Fix fs_tests for unknown locales (carnhofdaki)\n-- #15903 appveyor: Write @PACKAGE_NAME@ to config (MarcoFalke)\n-- #16742 test: add executable flag for wallet_watchonly.py (theStack)\n-- #16740 qa: Relax so that the subscriber is ready before publishing zmq messages (#16740)\n-\n-### Miscellaneous\n-- #15335 Fix lack of warning of unrecognized section names (AkioNak)\n-- #15528 contrib: Bump gitian descriptors for 0.19 (MarcoFalke)\n-- #15609 scripts and tools: Set 'distro' explicitly (hebasto)\n-- #15519 Add Poly1305 implementation (jonasschnelli)\n-- #15643 contrib: Gh-merge: include acks in merge commit (MarcoFalke)\n-- #15838 scripts and tools: Fetch missing review comments in github-merge.py (nkostoulas)\n-- #15920 lint: Check that all wallet args are hidden (MarcoFalke)\n-- #15849 Thread names in logs and deadlock debug tools (jamesob)\n-- #15650 Handle the result of posix_fallocate system call (lucayepa)\n-- #15766 scripts and tools: Upgrade gitian image before signing (hebasto)\n-- #15512 Add ChaCha20 encryption option (XOR) (jonasschnelli)\n-- #15968 Fix portability issue with pthreads (grim-trigger)\n-- #15970 Utils and libraries: fix static_assert for macro HAVE_THREAD_LOCAL (orientye)\n-- #15863 scripts and tools: Ensure repos are up-to-date in gitian-build.py (hebasto)\n-- #15224 Add RNG strengthening (10ms once every minute) (sipa)\n-- #15840 Contrib scripts: Filter IPv6 by ASN (abitfan)\n-- #13998 Scripts and tools: gitian-build.py improvements and corrections (hebasto)\n-- #15236 scripts and tools: Make --setup command independent (hebasto)\n-- #16114 contrib: Add curl as a required program in gitian-build.py (fanquake)\n-- #16046 util: Add type safe gettime (MarcoFalke)\n-- #15703 Update secp256k1 subtree to latest upstream (sipa)\n-- #16086 contrib: Use newer config.guess & config.sub in install_db4.sh (fanquake)\n-- #16130 Don't GPG sign intermediate commits with github-merge tool (stevenroose)\n-- #16162 scripts: Add key for michael ford (fanquake) to trusted keys list (fanquake)\n-- #16201 devtools: Always use unabbreviated commit IDs in github-merge.py (laanwj)\n-- #16112 util: Log early messages (MarcoFalke)\n-- #16223 devtools: Fetch and display ACKs at sign-off time in github-merge (laanwj)\n-- #16300 util: Explain why the path is cached (MarcoFalke)\n-- #16314 scripts and tools: Update copyright_header.py script (hebasto)\n-- #16158 Fix logic of memory_cleanse() on MSVC and clean up docs (real-or-random)\n-- #14734 fix an undefined behavior in uint::SetHex (kazcw)\n-- #16327 scripts and tools: Update ShellCheck linter (hebasto)\n-- #15277 contrib: Enable building in guix containers (dongcarl)\n-- #16362 Add bilingual_str type (hebasto)\n-- #16481 logs: add missing space (harding)\n-- #16581 sipsorcery gitian key (sipsorcery)\n-- #16566 util: Refactor upper/lowercase functions (kallewoof)\n-- #16620 util: Move resolveerrmsg to util/error (MarcoFalke)\n-- #16625 scripts: Remove github-merge.py (fanquake)\n-- #15864 Fix datadir handling (hebasto)\n-- #16670 util: Add join helper to join a list of strings (MarcoFalke)\n-- #16665 scripts: Move update-translations.py to maintainer-tools repo (fanquake)\n-- #16730 Support serialization of `std::vector<bool>` (sipa)\n-- #16556 Fix systemd service file configuration directory setup (setpill)\n-- #15615 Add log output during initial header sync (jonasschnelli)\n-- #16774 Avoid unnecessary \"Synchronizing blockheaders\" log messages (jonasschnelli)\n-- #16489 log: harmonize bitcoind logging (jonatack)\n-- #16577 util: Cbufferedfile fixes and unit test (LarryRuane)\n-- #16984 util: Make thread names shorter (hebasto)\n-- #17038 Don't rename main thread at process level (laanwj)\n-- #17184 util: Filter out macos process serial number (hebasto)\n-- #17095 util: Filter control characters out of log messages (laanwj)\n-- #17085 init: Change fallback locale to C.UTF-8 (laanwj)\n-- #16957 9% less memory: make SaltedOutpointHasher noexcept (martinus)\n-\n-### Documentation\n-- #15514 Update Transifex links (fanquake)\n-- #15513 add \"sections\" info to example bitcoin.conf (fanquake)\n-- #15530 Move wallet lock annotations to header (MarcoFalke)\n-- #15562 remove duplicate clone step in build-windows.md (fanquake)\n-- #15565 remove release note fragments (fanquake)\n-- #15444 Additional productivity tips (Sjors)\n-- #15577 Enable TLS in link to chris.beams.io (JeremyRand)\n-- #15604 release note for disabling reject messages by default (jnewbery)\n-- #15611 Add Gitian key for droark (droark)\n-- #15626 Update ACK description in CONTRIBUTING.md (jonatack)\n-- #15603 Add more tips to productivity.md (gwillen)\n-- #15683 Comment for seemingly duplicate LIBBITCOIN_SERVER (Bushstar)\n-- #15685 rpc-mining: Clarify error messages (MarcoFalke)\n-- #15760 Clarify sendrawtransaction::maxfeerate==0 help (MarcoFalke)\n-- #15659 fix findFork comment (r8921039)\n-- #15718 Improve netaddress comments (dongcarl)\n-- #15833 remove out-of-date comment on pay-to-witness support (r8921039)\n-- #15821 Remove upgrade note in release notes from EOL versions (MarcoFalke)\n-- #15267 explain AcceptToMemoryPoolWorker's coins_to_uncache (jamesob)\n-- #15887 Align code example style with clang-format (hebasto)\n-- #15877 Fix -dustrelayfee= argument docs grammar (keepkeyjon)\n-- #15908 Align MSVC build options with Linux build ones (hebasto)\n-- #15941 Add historical release notes for 0.18.0 (laanwj)\n-- #15794 Clarify PR guidelines w/re documentation (dongcarl)\n-- #15607 Release process updates (jonatack)\n-- #14364 Clarify -blocksdir usage (sangaman)\n-- #15777 Add doxygen comments for keypool classes (jnewbery)\n-- #15820 Add productivity notes for dummy rebases (dongcarl)\n-- #15922 Explain how to pass in non-fundamental types into functions (MarcoFalke)\n-- #16080 build/doc: update bitcoin_config.h packages, release process (jonatack)\n-- #16047 analyzepsbt description in doc/psbt.md (jonatack)\n-- #16039 add release note for 14954 (fanquake)\n-- #16139 Add riscv64 to outputs list in release-process.md (JeremyRand)\n-- #16140 create security policy (narula)\n-- #16164 update release process for SECURITY.md (jonatack)\n-- #16213 Remove explicit mention of versions from SECURITY.md (MarcoFalke)\n-- #16186 doc/lint: Fix spelling errors identified by codespell 1.15.0 (Empact)\n-- #16149 Rework section on ACK in CONTRIBUTING.md (MarcoFalke)\n-- #16196 Add release notes for 14897 & 15834 (MarcoFalke)\n-- #16241 add rapidcheck to vcpkg install list (fanquake)\n-- #16243 Remove travis badge from readme (MarcoFalke)\n-- #16256 remove orphaned header in developer notes (jonatack)\n-- #15964 Improve build-osx document formatting (giulio92)\n-- #16313 Fix broken link in doc/build-osx.md (jonatack)\n-- #16330 Use placeholder instead of key expiration date (hebasto)\n-- #16339 add reduce-memory.md (fanquake)\n-- #16347 Include static members in Doxygen (dongcarl)\n-- #15824 Improve netbase comments (dongcarl)\n-- #16430 Update bips 35, 37 and 111 status (MarcoFalke)\n-- #16455 Remove downgrading warning in release notes, per 0.18 branch (MarcoFalke)\n-- #16484 update labels in CONTRIBUTING.md (MarcoFalke)\n-- #16483 update Python command in msvc readme (sipsorcery)\n-- #16504 Add release note for the deprecated totalFee option of bumpfee (promag)\n-- #16448 add note on precedence of options in bitcoin.conf (fanquake)\n-- #16536 Update and extend benchmarking.md (ariard)\n-- #16530 Fix grammar and punctuation in developer notes (Tech1k)\n-- #16574 Add historical release notes for 0.18.1 (laanwj)\n-- #16585 Update Markdown syntax for bdb packages (emilengler)\n-- #16586 Mention other ways to conserve memory on compilation (MarcoFalke)\n-- #16605 Add missing contributor to 0.18.1 release notes (meshcollider)\n-- #16615 Fix typos in COPYRIGHT (gapeman)\n-- #16626 Fix spelling error chache -> cache (nilswloewen)\n-- #16587 Improve versionbits.h documentation (ariard)\n-- #16643 Add ZMQ dependencies to the Fedora build instructions (hebasto)\n-- #16634 Refer in rpcbind doc to the manpage (MarcoFalke)\n-- #16555 mention whitelist is inbound, and applies to blocksonly (Sjors)\n-- #16645 initial RapidCheck property-based testing documentation (jonatack)\n-- #16691 improve depends prefix documentation (fanquake)\n-- #16629 Add documentation for the new whitelist permissions (NicolasDorier)\n-- #16723 Update labels in CONTRIBUTING.md (hebasto)\n-- #16461 Tidy up shadowing section (promag)\n-- #16621 add default bitcoin.conf locations (GChuf)\n-- #16752 Delete stale URL in test README (michaelfolkson)\n-- #14862 Declare BLOCK_VALID_HEADER reserved (MarcoFalke)\n-- #16806 Add issue templates for bug and feature request (MarcoFalke)\n-- #16857 Elaborate need to re-login on Debian-based after usermod for Tor group (clashicly)\n-- #16863 Add a missing closing parenthesis in the bitcoin-wallet's help (darosior)\n-- #16757 CChainState return values (MarcoFalke)\n-- #16847 add comments clarifying how local services are advertised (jamesob)\n-- #16812 Fix whitespace errs in .md files, bitcoin.conf, and Info.plist.in (ch4ot1c)\n-- #16885 Update tx-size-small comment with relevant CVE disclosure (instagibbs)\n-- #16900 Fix doxygen comment for SignTransaction in rpc/rawtransaction_util (MarcoFalke)\n-- #16914 Update homebrew instruction for doxygen (Sjors)\n-- #16912 Remove Doxygen intro from src/bitcoind.cpp (ch4ot1c)\n-- #16960 replace outdated OpenSSL comment in test README (fanquake)\n-- #16968 Remove MSVC update step from translation process (laanwj)\n-- #16953 Improve test READMEs (fjahr)\n-- #16962 Put PR template in comments (laanwj)\n-- #16397 Clarify includeWatching for fundrawtransaction (stevenroose)\n-- #15459 add how to calculate blockchain and chainstate size variables to release process (marcoagner)\n-- #16997 Update bips.md for 0.19 (laanwj)\n-- #17001 Remove mention of renamed mapBlocksUnlinked (MarcoFalke)\n-- #17014 Consolidate release notes before 0.19.0 (move-only) (MarcoFalke)\n-- #17111 update bips.md with buried BIP9 deployments (MarcoFalke)\n-\n-Credits\n-=======\n-\n-Thanks to everyone who directly contributed to this release:\n-\n-- 251\n-- Aaron Clauson\n-- Akio Nakamura\n-- Alistair Mann\n-- Amiti Uttarwar\n-- Andrew Chow\n-- andrewtoth\n-- Anthony Towns\n-- Antoine Riard\n-- Aseem Sood\n-- Ben Carman\n-- Ben Woosley\n-- bpay\n-- Carl Dong\n-- Carnhof Daki\n-- Chris Capobianco\n-- Chris Moore\n-- Chuf\n-- clashic\n-- clashicly\n-- Cory Fields\n-- Daki Carnhof\n-- Dan Gershony\n-- Daniel Edgecumbe\n-- Daniel Kraft\n-- Daniel McNally\n-- darosior\n-- David A. Harding\n-- David Reikher\n-- Douglas Roark\n-- Elichai Turkel\n-- Emil\n-- Emil Engler\n-- ezegom\n-- Fabian Jahr\n-- fanquake\n-- Felix Weis\n-- Ferdinando M. Ametrano\n-- fridokus\n-- gapeman\n-- GChuf\n-- Gert-Jaap Glasbergen\n-- Giulio Lombardo\n-- Glenn Willen\n-- Graham Krizek\n-- Gregory Sanders\n-- grim-trigger\n-- gwillen\n-- Hennadii Stepanov\n-- Jack Mallers\n-- James Hilliard\n-- James O'Beirne\n-- Jan Beich\n-- Jeremy Rubin\n-- JeremyRand\n-- Jim Posen\n-- John Bampton\n-- John Newbery\n-- Jon Atack\n-- Jon Layton\n-- Jonas Schnelli\n-- Jonathan \"Duke\" Leto\n-- Jo\u00e3o Barbosa\n-- Joonmo Yang\n-- Jordan Baczuk\n-- Jorge Tim\u00f3n\n-- Josu Go\u00f1i\n-- Julian Fleischer\n-- Karl-Johan Alm\n-- Kaz Wesley\n-- keepkeyjon\n-- Kirill Fomichev\n-- Kristaps Kaupe\n-- Kristian Kramer\n-- Larry Ruane\n-- Lenny Maiorani\n-- LongShao007\n-- Luca Venturini\n-- lucash-dev\n-- Luke Dashjr\n-- marcoagner\n-- MarcoFalke\n-- marcuswin\n-- Martin Ankerl\n-- Martin Zumsande\n-- Matt Corallo\n-- MeshCollider\n-- Michael Folkson\n-- Miguel Herranz\n-- Nathan Marley\n-- Neha Narula\n-- nicolas.dorier\n-- Nils Loewen\n-- nkostoulas\n-- orient\n-- Patrick Strateman\n-- Peter Bushnell\n-- Peter Wagner\n-- Pieter Wuille\n-- practicalswift\n-- qmma\n-- r8921039\n-- RJ Rybarczyk\n-- Russell Yanofsky\n-- Samuel Dobson\n-- Sebastian Falbesoner\n-- setpill\n-- shannon1916\n-- Sjors Provoost\n-- soroosh-sdi\n-- Steven Roose\n-- Suhas Daftuar\n-- tecnovert\n-- THETCR\n-- Tim Ruffing\n-- Tobias Kaderle\n-- Torkel Rogstad\n-- Ulrich Kempken\n-- whythat\n-- William Casarin\n-- Wladimir J. van der Laan\n-- zenosage\n+Due to a last-minute issue (#17449), 0.19.0, although it was tagged, was never released.\n \n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/bitcoin/bitcoin/).\n+See the release notes for 0.19.0.1 instead."
      }
    ]
  },
  {
    "sha": "70cda342cd20d0e0cd9f28405457544036968f2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGNkYTM0MmNkMjBkMGUwY2Q5ZjI4NDA1NDU3NTQ0MDM2OTY4ZjJk",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-10-26T15:14:38Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-24T15:09:51Z"
      },
      "message": "rpc: improve getaddressinfo RPCHelpman formatting",
      "tree": {
        "sha": "0a58081c4c8a147281a7c77aa3f742f878e436fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a58081c4c8a147281a7c77aa3f742f878e436fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70cda342cd20d0e0cd9f28405457544036968f2d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3anUEACgkQT1chs9Dj\nkh2obBAAkUoXi/alrb8MQNnUnx2vpS+2aCIcmXC/WWVjRZLT70rqdNj1wVHE3Eoa\nOHHHjVHphxAt5ieUhnWUoZOxoyaI0dafQSGp8K1SRxl4g0jOZHsQKt1q3RI3e/H1\nhcpJpsnxKbP6BchGYl0OkIbciSl5aIM5+4ctUhslcqIGXCcn3xlnHquuhf3jj/R+\nZDJLRJL+Fmu7YMwpGYuqKjQgkeimcUbIHVj4D50s6ZZjz2PeCMhaf7rZPTlOYGOO\nZVIgFI59MpK8VqyUrJPv0e9hpDFy1mLeVxDd1WmI85wlqFFu3x9PV1M4v/sHrGdW\nD99YdzsSJ3get+YUIY9aQXB8Vnk2OKGhCdkZ7fvlB+cdUabwxmfwKdu9xmhAw3qz\n1GVlKTSggXRMXMUT3vbu0P52p9qFBEx21d+PWZewU6QDNbmdW8qXz1PCS42Qd8GQ\nrXW6FOznrzT3BBs7AlQeBDInXMudqQAXDtqzBDOBojs1opf9cln9z6g8+1xx+Zoa\naYQ+6lkh888QCoxQAEnkR9ZBJBucZISmCcka3HtiWAeBTjISiqTL9zsOCPR9+pdU\ng+XezAWiMk7DLBx+6oS91xJG39VyeLL626baLOMNPFojH1OJn4xYJN8RxHQGZ+Yp\nL3e/H3ROTuO0nZsm234l2ywMJLd0uCOmav5eCT0VAblONWZR8Go=\n=EhCW\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGE2lG1N3+aQkWM9V1BcHCacEbwEcP2GhrfcaYlntGG+CP/wEFtCN+NBOuWq\nhcNk3bqQZTwI8QRd2p1C8Ah1QNRdXCy+JQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEIzOvXPSD9N8VHAQktO9YgEI8QRd2p1C\n8Ag8o3VMOoc6tQCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ//wEK2njeWTrSyNsoexMHfOpcgI8QRd2p1D8AjQShNH\nmOmKHgCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BDnJ86a/IxIlCOMv8uAoGOFCPEEXdqdQvAIq0F6YM2hWioA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 0a58081c4c8a147281a7c77aa3f742f878e436fe\nparent 239d199667888e5d60309f15a38eed4d3afe56c4\nauthor Jon Atack <jon@atack.com> 1572102878 +0200\ncommitter Jon Atack <jon@atack.com> 1574608191 +0100\n\nrpc: improve getaddressinfo RPCHelpman formatting\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70cda342cd20d0e0cd9f28405457544036968f2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70cda342cd20d0e0cd9f28405457544036968f2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70cda342cd20d0e0cd9f28405457544036968f2d/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "239d199667888e5d60309f15a38eed4d3afe56c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/239d199667888e5d60309f15a38eed4d3afe56c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/239d199667888e5d60309f15a38eed4d3afe56c4"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 29,
      "deletions": 25
    },
    "files": [
      {
        "sha": "2ac58cba6aaf000c8dfa1b2409b17eea1641548b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 25,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70cda342cd20d0e0cd9f28405457544036968f2d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70cda342cd20d0e0cd9f28405457544036968f2d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=70cda342cd20d0e0cd9f28405457544036968f2d",
        "patch": "@@ -3709,41 +3709,45 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     }\n \n             RPCHelpMan{\"getaddressinfo\",\n-                \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n-                \"to be in the wallet.\\n\",\n+                \"\\nReturn information about the given bitcoin address.\\n\"\n+                \"Some information requires the address to be in the wallet.\\n\",\n                 {\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to get the information of.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n-            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex-encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n-            \"  \\\"solvable\\\" : true|false,      (boolean) Whether we know how to spend coins sent to this address, ignoring the possible lack of private keys\\n\"\n-            \"  \\\"desc\\\" : \\\"desc\\\",            (string, optional) A descriptor for spending coins sent to this address (only when solvable)\\n\"\n-            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"ischange\\\" : true|false,      (boolean) If the address was used for change output\\n\"\n-            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n-            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",              (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",             (string) The hex-encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,              (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,         (boolean) If the address is watchonly\\n\"\n+            \"  \\\"solvable\\\" : true|false,            (boolean) Whether we know how to spend coins sent to this address, ignoring the possible lack of private keys\\n\"\n+            \"  \\\"desc\\\" : \\\"desc\\\",                    (string, optional) A descriptor for spending coins sent to this address (only when solvable)\\n\"\n+            \"  \\\"isscript\\\" : true|false,            (boolean) If the key is a script\\n\"\n+            \"  \\\"ischange\\\" : true|false,            (boolean) If the address was used for change output\\n\"\n+            \"  \\\"iswitness\\\" : true|false,           (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version         (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"           (string, optional) The hex value of the witness program\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"                   (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible\\n\"\n+            \"                                                         types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash,\\n\"\n+            \"                                                         witness_v0_scripthash, witness_unknown\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                      (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"pubkeys\\\"                           (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n             \"    [\\n\"\n             \"      \\\"pubkey\\\"\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n-            \"  \\\"embedded\\\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdseedid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\").\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean, optional) If the pubkey is compressed\\n\"\n-            \"  \\\"label\\\" :  \\\"label\\\"         (string) The label associated with the address, \\\"\\\" is the default label\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"      (string, optional) The Hash160 of the HD seed\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx              (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",          (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n+            \"  \\\"embedded\\\" : {...},                 (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all\\n\"\n+            \"                                                         getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\",\\n\"\n+            \"                                                         \\\"hdseedid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\").\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,        (boolean, optional) If the pubkey is compressed\\n\"\n+            \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address, \\\"\\\" is the default label\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"             (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) The Hash160 of the HD seed\\n\"\n             \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingperint of the master key.\\n\"\n-            \"  \\\"labels\\\"                      (object) Array of labels associated with the address.\\n\"\n+            \"  \\\"labels\\\"                            (object) Array of labels associated with the address.\\n\"\n             \"    [\\n\"\n             \"      { (json object of label data)\\n\"\n             \"        \\\"name\\\": \\\"labelname\\\" (string) The label\\n\""
      }
    ]
  },
  {
    "sha": "1a3a256d5e0443d19757c1f1fceb9c9ede17758a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTNhMjU2ZDVlMDQ0M2QxOTc1N2MxZjFmY2ViOWM5ZWRlMTc3NThh",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2019-11-24T21:53:42Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2019-11-24T21:53:42Z"
      },
      "message": "wallet: replace raw pointer with const reference in AddrToPubKey",
      "tree": {
        "sha": "963a9b2827f64f1854a36253f2f1b57e3b23cb13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/963a9b2827f64f1854a36253f2f1b57e3b23cb13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a3a256d5e0443d19757c1f1fceb9c9ede17758a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl3a++YACgkQJiaFvHjt\nEftLpwf/ST76m8Hbx3LMigJV5ckvZT1DeH8ObQQCwXtqK6zcS+WFNCdPvnVWs5yG\nB29QtPkrVBGlYdOYGCmgTOzR/fTG+PtcwY1SvGtX4gSC1f4UYqMjPH9sr34uQYY/\nelvdybUQHehiozOZLcxTxCVAywfsKDbVab7LZICQ4Nz3GJguBmpZnhxsxa4lGB54\nAoR22jiInhPU8crjJboj4DevXpZATxuEq9JyZ4b/dc5EbqRs78cl2BhHFnCzJEn9\nXtywKTxMPwbdeCP6R9pp4pnlWEB+he4DCFAwQNjxLHHZfZMGrApXSuseNBcY4QlF\nSDN5yZ27eBcFRQSekAkhBrcZBaDMBg==\n=G/mC\n-----END PGP SIGNATURE-----",
        "payload": "tree 963a9b2827f64f1854a36253f2f1b57e3b23cb13\nparent 239d199667888e5d60309f15a38eed4d3afe56c4\nauthor Harris <brakmic@gmail.com> 1574632422 +0100\ncommitter Harris <brakmic@gmail.com> 1574632422 +0100\n\nwallet: replace raw pointer with const reference in AddrToPubKey\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a3a256d5e0443d19757c1f1fceb9c9ede17758a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a3a256d5e0443d19757c1f1fceb9c9ede17758a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a3a256d5e0443d19757c1f1fceb9c9ede17758a/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "239d199667888e5d60309f15a38eed4d3afe56c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/239d199667888e5d60309f15a38eed4d3afe56c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/239d199667888e5d60309f15a38eed4d3afe56c4"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0791a365fe44da785d5d8dc9135488e4a302fa52",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a3a256d5e0443d19757c1f1fceb9c9ede17758a/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a3a256d5e0443d19757c1f1fceb9c9ede17758a/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=1a3a256d5e0443d19757c1f1fceb9c9ede17758a",
        "patch": "@@ -131,18 +131,18 @@ CPubKey HexToPubKey(const std::string& hex_in)\n }\n \n // Retrieves a public key for an address from the given FillableSigningProvider\n-CPubKey AddrToPubKey(FillableSigningProvider* const keystore, const std::string& addr_in)\n+CPubKey AddrToPubKey(const FillableSigningProvider& keystore, const std::string& addr_in)\n {\n     CTxDestination dest = DecodeDestination(addr_in);\n     if (!IsValidDestination(dest)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address: \" + addr_in);\n     }\n-    CKeyID key = GetKeyForDestination(*keystore, dest);\n+    CKeyID key = GetKeyForDestination(keystore, dest);\n     if (key.IsNull()) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"%s does not refer to a key\", addr_in));\n     }\n     CPubKey vchPubKey;\n-    if (!keystore->GetPubKey(key, vchPubKey)) {\n+    if (!keystore.GetPubKey(key, vchPubKey)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"no full public key for address %s\", addr_in));\n     }\n     if (!vchPubKey.IsFullyValid()) {"
      },
      {
        "sha": "9304e1fefbff9e05e87e4f39afcdd26f4680409d",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a3a256d5e0443d19757c1f1fceb9c9ede17758a/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a3a256d5e0443d19757c1f1fceb9c9ede17758a/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=1a3a256d5e0443d19757c1f1fceb9c9ede17758a",
        "patch": "@@ -69,7 +69,7 @@ extern std::string HelpExampleCli(const std::string& methodname, const std::stri\n extern std::string HelpExampleRpc(const std::string& methodname, const std::string& args);\n \n CPubKey HexToPubKey(const std::string& hex_in);\n-CPubKey AddrToPubKey(FillableSigningProvider* const keystore, const std::string& addr_in);\n+CPubKey AddrToPubKey(const FillableSigningProvider& keystore, const std::string& addr_in);\n CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, FillableSigningProvider& keystore, CScript& script_out);\n \n UniValue DescribeAddress(const CTxDestination& dest);"
      },
      {
        "sha": "f48e1e90fd458a7ba54869e7c6a5d87a33c60334",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a3a256d5e0443d19757c1f1fceb9c9ede17758a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a3a256d5e0443d19757c1f1fceb9c9ede17758a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1a3a256d5e0443d19757c1f1fceb9c9ede17758a",
        "patch": "@@ -998,7 +998,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n         if (IsHex(keys_or_addrs[i].get_str()) && (keys_or_addrs[i].get_str().length() == 66 || keys_or_addrs[i].get_str().length() == 130)) {\n             pubkeys.push_back(HexToPubKey(keys_or_addrs[i].get_str()));\n         } else {\n-            pubkeys.push_back(AddrToPubKey(&spk_man, keys_or_addrs[i].get_str()));\n+            pubkeys.push_back(AddrToPubKey(spk_man, keys_or_addrs[i].get_str()));\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "5a0ed850700dfb19167d40b38f80313bd5e427ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTBlZDg1MDcwMGRmYjE5MTY3ZDQwYjM4ZjgwMzEzYmQ1ZTQyN2Nh",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-10-26T15:43:13Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-24T22:05:48Z"
      },
      "message": "rpc: improve getaddressinfo RPCHelpman content",
      "tree": {
        "sha": "87da921621498957ab65e7ce6c24b6d6c55a9a3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87da921621498957ab65e7ce6c24b6d6c55a9a3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a0ed850700dfb19167d40b38f80313bd5e427ca",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3a/sUACgkQT1chs9Dj\nkh3duw/+PX6fz5xGsSUp915QmjY/yTgIy2nY2ClirB5wiCb1MJHUUGJwKbdikCQl\n4Z99i7knyxIH7G2v/81F/rBj5rc025tmsI6CKMnGrZnlpOGbcKrXm+sGksLDZmTv\nBe4n43ZKQogq5orTAYqK+IDsCCpKQR0407ntDImq1BVcJjyJebLYGdWbH1wF98rF\nMM7MLCslxNPmDbGJiOqvDSSxFjkLQ55kFhAYe/py07izGR7YdrnGIYB1vcvCTkcD\n29/4jUmcqTsCMTZBMM/BhCGxSWLzJQsWQK0TLZ/zOjjxiZFM/2zVVBkAdaC9l8Zi\nlS42W5tNZLwz4+DMzKX0SeskHZpEZZUyd1XWH/aoxMEDuMQBQCRyqQOMjohWelc9\nYLq+VuBOKSKW9QTmCZ44e70EjKDLx9dS6gfi9QakPtCrjYFD3OQZx0Z2q7kCiMCr\nak714QW6bt8XfU3kqQa5SndTmrrzwM85lREOey3emjGc7ZhAL4VA59l4PYyDa1qF\n3dKn6UDEpK+5EQbWxlwOAPrfnihplCByDyFxUrDq0/QOw6gJKM+B3UacpXvIM6pb\ncYKQVb+kFBBiYhVd1Wnib441dKbQszfEi4r4CPaqVKU8lYUPyAWSHMjfsWvwavzI\nSyJry2HmZ++7AcIzPU1HBCVZJCCW6aJKh4Niw2cw6pt49rW0vME=\n=VySC\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIBUqCF/ZdgVMrUfjuwVfLm1jgrUI8HE1z4yXkVP2YDN5CP/wEFj9jjfBKKHT\n8Mz/SC6vIBwI8QRd2v7G8Agm25H+j86E7QCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wENY4dBriNvYkikcyrKBIIDoI8QRd2v7H\n8AhxqzBtmtSeXACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQ/PfFu57ReUEbBYUnsQ9VWwjxBF3a/sfwCO5M\nWc9ntUT5AIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t8BD9HDF9KqUhR/6Rf+z/uHWKCPEEXdr+x/AIRf7/k7Ry08EAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 87da921621498957ab65e7ce6c24b6d6c55a9a3c\nparent 70cda342cd20d0e0cd9f28405457544036968f2d\nauthor Jon Atack <jon@atack.com> 1572104593 +0200\ncommitter Jon Atack <jon@atack.com> 1574633148 +0100\n\nrpc: improve getaddressinfo RPCHelpman content\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a0ed850700dfb19167d40b38f80313bd5e427ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a0ed850700dfb19167d40b38f80313bd5e427ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a0ed850700dfb19167d40b38f80313bd5e427ca/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70cda342cd20d0e0cd9f28405457544036968f2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70cda342cd20d0e0cd9f28405457544036968f2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70cda342cd20d0e0cd9f28405457544036968f2d"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "db7d6ad0dae75f964e9a56554b3624011a57151b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a0ed850700dfb19167d40b38f80313bd5e427ca/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a0ed850700dfb19167d40b38f80313bd5e427ca/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5a0ed850700dfb19167d40b38f80313bd5e427ca",
        "patch": "@@ -951,7 +951,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n     }\n \n             RPCHelpMan{\"addmultisigaddress\",\n-                \"\\nAdd a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n+                \"\\nAdd an nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n                 \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n                 \"This functionality is only intended for use with non-watchonly addresses.\\n\"\n                 \"See `importaddress` for watchonly p2sh address support.\\n\"\n@@ -3710,48 +3710,48 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n             RPCHelpMan{\"getaddressinfo\",\n                 \"\\nReturn information about the given bitcoin address.\\n\"\n-                \"Some information requires the address to be in the wallet.\\n\",\n+                \"Some of the information will only be present if the address is in the active wallet.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to get the information of.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for which to get information.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\",              (string) The bitcoin address validated\\n\"\n-            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",             (string) The hex-encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,              (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,         (boolean) If the address is watchonly\\n\"\n-            \"  \\\"solvable\\\" : true|false,            (boolean) Whether we know how to spend coins sent to this address, ignoring the possible lack of private keys\\n\"\n-            \"  \\\"desc\\\" : \\\"desc\\\",                    (string, optional) A descriptor for spending coins sent to this address (only when solvable)\\n\"\n-            \"  \\\"isscript\\\" : true|false,            (boolean) If the key is a script\\n\"\n-            \"  \\\"ischange\\\" : true|false,            (boolean) If the address was used for change output\\n\"\n-            \"  \\\"iswitness\\\" : true|false,           (boolean) If the address is a witness address\\n\"\n-            \"  \\\"witness_version\\\" : version         (numeric, optional) The version number of the witness program\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"           (string, optional) The hex value of the witness program\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"                   (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",              (string) The bitcoin address validated.\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",             (string) The hex-encoded scriptPubKey generated by the address.\\n\"\n+            \"  \\\"ismine\\\" : true|false,              (boolean) If the address is yours.\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,         (boolean) If the address is watchonly.\\n\"\n+            \"  \\\"solvable\\\" : true|false,            (boolean) If we know how to spend coins sent to this address, ignoring the possible lack of private keys.\\n\"\n+            \"  \\\"desc\\\" : \\\"desc\\\",                    (string, optional) A descriptor for spending coins sent to this address (only when solvable).\\n\"\n+            \"  \\\"isscript\\\" : true|false,            (boolean) If the key is a script.\\n\"\n+            \"  \\\"ischange\\\" : true|false,            (boolean) If the address was used for change output.\\n\"\n+            \"  \\\"iswitness\\\" : true|false,           (boolean) If the address is a witness address.\\n\"\n+            \"  \\\"witness_version\\\" : version         (numeric, optional) The version number of the witness program.\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"           (string, optional) The hex value of the witness program.\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"                   (string, optional) The output script type. Only if isscript is true and the redeemscript is known. Possible\\n\"\n             \"                                                         types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash,\\n\"\n-            \"                                                         witness_v0_scripthash, witness_unknown\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                      (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"pubkeys\\\"                           (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"                                                         witness_v0_scripthash, witness_unknown.\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                      (string, optional) The redeemscript for the p2sh address.\\n\"\n+            \"  \\\"pubkeys\\\"                           (array, optional) Array of pubkeys associated with the known redeemscript (only if script is multisig).\\n\"\n             \"    [\\n\"\n-            \"      \\\"pubkey\\\"\\n\"\n+            \"      \\\"pubkey\\\" (string)\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx              (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",          (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n-            \"  \\\"embedded\\\" : {...},                 (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all\\n\"\n-            \"                                                         getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\",\\n\"\n-            \"                                                         \\\"hdseedid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\").\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,        (boolean, optional) If the pubkey is compressed\\n\"\n-            \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address, \\\"\\\" is the default label\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"             (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) The Hash160 of the HD seed\\n\"\n-            \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingperint of the master key.\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx              (numeric, optional) The number of signatures required to spend multisig output (only if script is multisig).\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",          (string, optional) The hex value of the raw public key for single-key addresses (possibly embedded in P2SH or P2WSH).\\n\"\n+            \"  \\\"embedded\\\" : {...},                 (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. Includes all\\n\"\n+            \"                                                         getaddressinfo output fields for the embedded address, excluding metadata (timestamp, hdkeypath,\\n\"\n+            \"                                                         hdseedid) and relation to the wallet (ismine, iswatchonly).\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,        (boolean, optional) If the pubkey is compressed.\\n\"\n+            \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address. Defaults to \\\"\\\".\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key if available, expressed in seconds since Epoch Time (Jan 1 1970 GMT).\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"             (string, optional) The HD keypath, if the key is HD and available.\\n\"\n+            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) The Hash160 of the HD seed.\\n\"\n+            \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingerprint of the master key.\\n\"\n             \"  \\\"labels\\\"                            (object) Array of labels associated with the address.\\n\"\n             \"    [\\n\"\n             \"      { (json object of label data)\\n\"\n-            \"        \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n-            \"        \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"        \\\"name\\\": \\\"label name\\\" (string) The label.\\n\"\n+            \"        \\\"purpose\\\": \\\"purpose\\\" (string) The purpose of the associated address (send or receive).\\n\"\n             \"      },...\\n\"\n             \"    ]\\n\"\n             \"}\\n\""
      }
    ]
  },
  {
    "sha": "8d1ed0c263f8cdff7189f02040b5d02238d93da0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDFlZDBjMjYzZjhjZGZmNzE4OWYwMjA0MGI1ZDAyMjM4ZDkzZGEw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-10-28T15:09:15Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-24T22:06:54Z"
      },
      "message": "rpc: clarify label vs labels in getaddressinfo RPCHelpman",
      "tree": {
        "sha": "872d077fcc259a446b627e73acc179d0d2d1e3be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/872d077fcc259a446b627e73acc179d0d2d1e3be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d1ed0c263f8cdff7189f02040b5d02238d93da0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3a/wYACgkQT1chs9Dj\nkh2bBA//SZgt8Aic+iHrg/gt9iFC/jdbDFA912rBdVU7rxfMbbKN/HXowMD/KxXE\nNO5lhRsjcVb8T2XbPM+4D3KNFR77ypqccjrC0QFuGEiiH8fFB3KvzFMg55YBbMvH\n+uhwvFYVO7YZvWVuuQSio9U1ZGiDeqdkNR3y8bpA1J3tD9NECxp9c/AbEn5jbEpE\nvC80CqY/Yt+wkLViD2JvRNoaVoqzkbqTwpD+FLTj5BOPbRYS8FLp/vRx6far9vFl\n4AaevbBT1LUsvfUv+8mYL5EKyxvlFyzLt4/BIG6tqZV8S97983zjIQQ/Tu+VHm20\nwiNhglRBbXhwntfSQeDqPOJbj/pg3SIue+ina0XFSWJ/pQNe3WgRin9MDvWTXjXn\nJnGD2Uk1QEk9OYtjFXSuOdD/ekYUtsupPmK1JCepqX3FgInWdoFnlgQZ8Qr209/H\nYQ3khLsz3AQhRy8R50wlq/zV8P0uq2W4Z0nHjbxxf28LlzeFokKln85ZGol/ynKD\nQhNP8pgx34IEMdOylyuE89E1cMnVb/q90CHOh1gClRjVCTmg+j/FnfU051K7dpmZ\nQhRRI9zUCuRB17vbCynD1IOI7f5OIbOGCGUIKQ3Tkrq+N5BwQKxNMSZusQZYv4v1\nFLKkuY4WjbECoJrY26TQJ9dr8ugVcLiw4esZlLVMv8FlMP4CcL8=\n=TLfl\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMksKA8futthQa0m6lJnGnvJ9CW9H0V6NE4b1J3Bnf6RCP/wEAPzxffRqX8b\nZQ5Dm7mTge0I8QRd2v8H8AiLyi89fpsPDgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEARRVv+PcxX52VUGR+wpKbII8QRd2v8H\n8Ajea/kugjpRCACD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRl\ncm5pdHl3YWxsLmNvbf/wEGrgAPbn8BYJLFujLnWN6KkI8QRd2v8I8Ai7Ux0JYFDx\n6ACD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3Rh\nbXBzLm9yZ/AQxdbxWCGWWR2c+qoFyYF0BgjxBF3a/wjwCN+NRtblHf23AIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 872d077fcc259a446b627e73acc179d0d2d1e3be\nparent 5a0ed850700dfb19167d40b38f80313bd5e427ca\nauthor Jon Atack <jon@atack.com> 1572275355 +0100\ncommitter Jon Atack <jon@atack.com> 1574633214 +0100\n\nrpc: clarify label vs labels in getaddressinfo RPCHelpman\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d1ed0c263f8cdff7189f02040b5d02238d93da0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d1ed0c263f8cdff7189f02040b5d02238d93da0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d1ed0c263f8cdff7189f02040b5d02238d93da0/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a0ed850700dfb19167d40b38f80313bd5e427ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a0ed850700dfb19167d40b38f80313bd5e427ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a0ed850700dfb19167d40b38f80313bd5e427ca"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "253466ad783a8d730b003812d2cf33b3a6b81078",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d1ed0c263f8cdff7189f02040b5d02238d93da0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d1ed0c263f8cdff7189f02040b5d02238d93da0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8d1ed0c263f8cdff7189f02040b5d02238d93da0",
        "patch": "@@ -3742,15 +3742,16 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"                                                         getaddressinfo output fields for the embedded address, excluding metadata (timestamp, hdkeypath,\\n\"\n             \"                                                         hdseedid) and relation to the wallet (ismine, iswatchonly).\\n\"\n             \"  \\\"iscompressed\\\" : true|false,        (boolean, optional) If the pubkey is compressed.\\n\"\n-            \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address. Defaults to \\\"\\\".\\n\"\n+            \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address. Defaults to \\\"\\\". Equivalent to the name field in the labels array.\\n\"\n             \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key if available, expressed in seconds since Epoch Time (Jan 1 1970 GMT).\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"             (string, optional) The HD keypath, if the key is HD and available.\\n\"\n             \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) The Hash160 of the HD seed.\\n\"\n             \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingerprint of the master key.\\n\"\n-            \"  \\\"labels\\\"                            (object) Array of labels associated with the address.\\n\"\n+            \"  \\\"labels\\\"                            (object) An array of labels associated with the address. Currently limited to one label but returned\\n\"\n+            \"                                               as an array to keep the API stable if multiple labels are enabled in the future.\\n\"\n             \"    [\\n\"\n             \"      { (json object of label data)\\n\"\n-            \"        \\\"name\\\": \\\"label name\\\" (string) The label.\\n\"\n+            \"        \\\"name\\\": \\\"label name\\\" (string) The label name. Defaults to \\\"\\\". Equivalent to the label field above.\\n\"\n             \"        \\\"purpose\\\": \\\"purpose\\\" (string) The purpose of the associated address (send or receive).\\n\"\n             \"      },...\\n\"\n             \"    ]\\n\""
      }
    ]
  },
  {
    "sha": "2ee0cb3330ccf70f0540cb42370796e32eff1569",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWUwY2IzMzMwY2NmNzBmMDU0MGNiNDIzNzA3OTZlMzJlZmYxNTY5",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-10-28T16:26:03Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-24T22:07:05Z"
      },
      "message": "rpc: update getaddressinfo RPCExamples to bech32",
      "tree": {
        "sha": "fa057444e0cfdca52faaed0bc5c51c41621c89ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa057444e0cfdca52faaed0bc5c51c41621c89ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ee0cb3330ccf70f0540cb42370796e32eff1569",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3a/wkACgkQT1chs9Dj\nkh3kHw/9Fqk66Ij+eHWtaHFUxIadWNzlBG59YadZFwkYs2i0KyICL3kP0UgZ8EAO\ne+n0JEWV7g7Hn6jQcuNG8c4ZCDhOaPJCFvECXjOaTa+XgDomGpPdmqXCxEtxXyDm\nGBCrTQT1GtYkyO6X8OtXIfTt8EvDWgivybPOa61L9bUa6/BeY0LV/N3q5FHi3gn8\nzUQfuBkpOhaQCngwbZjdOQENzwH4zJFNDXd8d+mR62rZWRtj7+t8tiNCJH6IO27Z\n3sbrrl0izucnR0/QjaXorJC9gBvApgVsCx/YoBNGYI1u9qO3EOoZtAqf1zConcGl\nMk2ZNFTaHCHoGdPRrVjfUEjic2LE2VSZTY0nuuA2kxU2UPUM9d8roHima5vHiraa\nkyT39nEsilHahX4KtT6p+flofDzlrv47QKE7nXdSLH2ZlV3FQJnp+LDz6z5p2GCz\nDRPS4o1obnTHBo45o95dWIVYr5ut1MN4oiWNuaqcL5fWEvnxS7l/KQKu9Zpdi3KS\n4NwegrSph4BKuAGIQgb9pNM1oWQ+Kx7q7xlAadM6rmwHtYRRW9Z1qDNm4bR8+ymS\nytP1KqGoyiEngrOtiOKi32q7fCG8C2KbgRymoBFBJGYpjsZXVtd+UAPy2mX3kqTl\nIfU9+Q44EmmgGzyGywLfLJrCyXQF4NtgsXLZbCqIgP5ugnAs8f8=\n=S3sr\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIAfExnEKu6DiAkLTHVVY7ypCXCMQG1QV9JbWryZ2huTLCP/wEBS7Z5sJYxSt\nt/arSieUUvII8QRd2v8K8AjY7SHsjMAuVACD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEBzFFfWQMnTvzTQgkfDc1wUI\n8CAfavZpqoVobX7F0rJY+HdlGUhamDI7Zdaj4JYnWjwD/AjxBF3a/wvwCEzzVhiS\ngHzyAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRpbWVz\ndGFtcHMub3Jn//AQKg9czV06McSCa75cREc2vgjxBF3a/wvwCDodJs6ZRkqoAIPf\n4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRhbGxheHkuY29t8BBEWQw/\ni+x6dhcrY/11NUsJCPEEXdr/CvAIBk1hVqEn6NsAg9/jDS75DI4uLWh0dHBzOi8v\nYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree fa057444e0cfdca52faaed0bc5c51c41621c89ca\nparent 8d1ed0c263f8cdff7189f02040b5d02238d93da0\nauthor Jon Atack <jon@atack.com> 1572279963 +0100\ncommitter Jon Atack <jon@atack.com> 1574633225 +0100\n\nrpc: update getaddressinfo RPCExamples to bech32\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ee0cb3330ccf70f0540cb42370796e32eff1569",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ee0cb3330ccf70f0540cb42370796e32eff1569",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ee0cb3330ccf70f0540cb42370796e32eff1569/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d1ed0c263f8cdff7189f02040b5d02238d93da0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d1ed0c263f8cdff7189f02040b5d02238d93da0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d1ed0c263f8cdff7189f02040b5d02238d93da0"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9dd7d8435c04a85108b9acceddcec39817c3d8d0",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ee0cb3330ccf70f0540cb42370796e32eff1569/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ee0cb3330ccf70f0540cb42370796e32eff1569/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2ee0cb3330ccf70f0540cb42370796e32eff1569",
        "patch": "@@ -3758,8 +3758,8 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"}\\n\"\n                 },\n                 RPCExamples{\n-                    HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n-            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+                    HelpExampleCli(\"getaddressinfo\", \"\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\"\") +\n+                    HelpExampleRpc(\"getaddressinfo\", \"\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\"\")\n                 },\n             }.Check(request);\n "
      }
    ]
  },
  {
    "sha": "1388de83900eaced906d369fe9e8887ae74b2dcf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzg4ZGU4MzkwMGVhY2VkOTA2ZDM2OWZlOWU4ODg3YWU3NGIyZGNm",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-10-27T13:16:00Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-24T22:07:07Z"
      },
      "message": "rpc: add getaddressinfo code documentation\n\nand separate the fields with a line break for readability.",
      "tree": {
        "sha": "63491701a09b92d8365f045283867b77720b4c7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63491701a09b92d8365f045283867b77720b4c7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1388de83900eaced906d369fe9e8887ae74b2dcf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3a/wwACgkQT1chs9Dj\nkh32lhAAqj5TpgVQqkGBilOt59/l3rvzzHiGdI6Dr+dQONkRF/+sI3eSZO6XRv9B\npH+JCt+S+bkTrjpJnv/UjYToks2c4kpZ+U5/VX7ajp/gZv3svODYJj23r5IWZIxN\nICqtdJ5SleVuGhYN8QTGIjC0YEd//oibEb2xqawc/Cw63GvKKyW/qsHPsM9guIq/\nvsmT44RKsseiSPy6Eq5/83eSFz1dZsf7uHrazUcXouey6EO+i9+rqe49Pxuu0x3g\n5PsLPoCH592dqIyvcvuJEimpBx9Ninl4fYL2JLuxXYQy6VNNkrGF3ptiI0VCc3yB\nXBshiFZM7ywry+OkSfu4I0WlHtcOJ89ncW/Xy6PLoCN0elnPw/LLvkOBsa4WrnPz\npNI+yQRZXhvb0wzUGtWPHWHx/asvHe5koJr1Yy81F1YEdeaCKGYPojZcaZqDR7Dt\n4Jo5ZqFPi96uUamDUIe6yxndLzq3kokzPxkh5H+xQYA1qUXf8vyjFyMoyUXpQfR0\n6qoYP9bRPPXHPY+rLdz2sUB9SmHwTFMluAyqeSLjG2KRxqeFlkCA2XM73ShqIuSO\nO8bCsqX5UrVq8oKOzMXr2I8AKs2O8bDzI1ChAhjFEiKk8XdtzXJB2Fv0kft6zAV9\nexzoUgncb0xOXy3/537dJZMIKscQk7UiaWEsB6UzjOV1PioPO9w=\n=gIl3\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEwkLgnDfiH0xrcpXWQViQeXsemG37Wx56XIprebqu4hCP/wEC9p5gr4vX5i\nVsY/yXj/A6YI8QRd2v8N8AiOYDkQbmo5jQCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEEJZMJWaPlWncdIC0yTJ\n7l8I8QRd2v8O8AitGS3LiB7oHQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wEEoi2qYCrmeDlz5QQ1NB4UAI8QRd2v8N8Ahq4eH8\ncvj1VwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BBWSk+qooPb0yzhS8B8cOhPCPEEXdr/DfAIquyFQAkQA5QA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 63491701a09b92d8365f045283867b77720b4c7a\nparent 2ee0cb3330ccf70f0540cb42370796e32eff1569\nauthor Jon Atack <jon@atack.com> 1572182160 +0100\ncommitter Jon Atack <jon@atack.com> 1574633227 +0100\n\nrpc: add getaddressinfo code documentation\n\nand separate the fields with a line break for readability.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1388de83900eaced906d369fe9e8887ae74b2dcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1388de83900eaced906d369fe9e8887ae74b2dcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1388de83900eaced906d369fe9e8887ae74b2dcf/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ee0cb3330ccf70f0540cb42370796e32eff1569",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ee0cb3330ccf70f0540cb42370796e32eff1569",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ee0cb3330ccf70f0540cb42370796e32eff1569"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 21,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f4b5a8b9ac02da2204f74015fcbfc3bfa63d79c9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 3,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1388de83900eaced906d369fe9e8887ae74b2dcf/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1388de83900eaced906d369fe9e8887ae74b2dcf/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1388de83900eaced906d369fe9e8887ae74b2dcf",
        "patch": "@@ -3778,23 +3778,39 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n     CScript scriptPubKey = GetScriptForDestination(dest);\n     ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+\n     const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n \n     isminetype mine = pwallet->IsMine(dest);\n     ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n+\n     bool solvable = provider && IsSolvable(*provider, scriptPubKey);\n     ret.pushKV(\"solvable\", solvable);\n+\n     if (solvable) {\n        ret.pushKV(\"desc\", InferDescriptor(scriptPubKey, *provider)->ToString());\n     }\n+\n     ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n+\n+    // Return DescribeWalletAddress fields.\n+    // Always returned: isscript, ischange, iswitness.\n+    // Optional: witness_version, witness_program, script, hex, pubkeys (array),\n+    // sigsrequired, pubkey, embedded, iscompressed.\n     UniValue detail = DescribeWalletAddress(pwallet, dest);\n     ret.pushKVs(detail);\n+\n+    // Return label field if existing. Currently only one label can be\n+    // associated with an address, so the label should be equivalent to the\n+    // value of the name key/value pair in the labels hash array below.\n     if (pwallet->mapAddressBook.count(dest)) {\n         ret.pushKV(\"label\", pwallet->mapAddressBook[dest].name);\n     }\n+\n     ret.pushKV(\"ischange\", pwallet->IsChange(scriptPubKey));\n \n+    // Fetch KeyMetadata, if present, for the timestamp, hdkeypath, hdseedid,\n+    // and hdmasterfingerprint fields.\n     ScriptPubKeyMan* spk_man = pwallet->GetScriptPubKeyMan(scriptPubKey);\n     if (spk_man) {\n         if (const CKeyMetadata* meta = spk_man->GetMetadata(dest)) {\n@@ -3807,9 +3823,11 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n         }\n     }\n \n-    // Currently only one label can be associated with an address, return an array\n-    // so the API remains stable if we allow multiple labels to be associated with\n-    // an address.\n+    // Return a labels array containing a hash of key/value pairs for the label\n+    // name and address purpose. The name value is equivalent to the label field\n+    // above. Currently only one label can be associated with an address, but we\n+    // return an array so the API remains stable if we allow multiple labels to\n+    // be associated with an address in the future.\n     UniValue labels(UniValue::VARR);\n     std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n     if (mi != pwallet->mapAddressBook.end()) {"
      }
    ]
  },
  {
    "sha": "0f3539ac6d772fc646b5f184fa1efe77bf632f6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjM1MzlhYzZkNzcyZmM2NDZiNWYxODRmYTFlZmU3N2JmNjMyZjZh",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-10-28T13:54:41Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-24T22:07:10Z"
      },
      "message": "test: add listlabels test in wallet_labels.py",
      "tree": {
        "sha": "b61fd8109e1f6e504ca45815e54fe677bdff500c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b61fd8109e1f6e504ca45815e54fe677bdff500c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f3539ac6d772fc646b5f184fa1efe77bf632f6a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3a/w8ACgkQT1chs9Dj\nkh1gMhAAnxKGkMpHB2mikQ6iOTrZoydGOZeBiDIn2p4+56JrA67/Fu3Z9f3ldIO/\nayxkZwFNd0jT4yN0ldmZk9z2CKNAQFvWIqGhQJ8kjZtdsHCuSI6ne3fU+WmZwUoB\nbCWZRYMvjuoX+/FmTv71Bty9mIW5MeI3klY62uYkXFs2wTpqWpULhNu4MdZYG+qa\nc6L9k7iaI/Hvv5m5iG+dT76PD19WWUPE25IyDG49YZwVrn26NOsMu/XdH4fhK1ts\nLZo9oUnUZPzNQtM6DOnW1kU/gCQXHGz0V8u9E+6PwlKUC70dHcIoMWWAFlknxyft\nExP/pD3ITWoRt4CMl6VwCmrO60+BcZVFThG7L7NtT4vJPl3kW/QmIRemEiT26Nlb\n1sV+uuM92MQ9uixbctoHJjdzO+EeLlmN4YY2P01Tn2kRafs3xp/YHiB+jHhegCAp\nxgwgvUqzaXsOI6wE7t9c4Livp5vIVyGP7BNUKi7TBjXkR+z40113QKgRM+Yt+ar4\nDAxWWQ/OOXO/fY+4NEtrc0a5vYk8NXDGuUM5lAwhc4uobhIF7QM0A/6d37DM9ZcX\nwgmX6YQw15dBB0J2LMr1bFA3bH/mz+ONdNRU6DroJOqnSRBvsfPwPUDJJPV3eP/U\nH2v0x1y//ua9A/g9gte+EHlaPWEHt/S7elzMxFWo4Yni3ir3AqU=\n=LSjz\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILyhE4bW8TKiA1WlkPr0zdjTsDMBZWvUHf+uQqs4wwCZCP/wEGABLs71/kgv\nU9XHWjmUo+sI8QRd2v8Q8Aj7dHKOLvB/AgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEH70Xls8yTyVq4JiBkcn3III8QRd2v8P\n8AibKmvRNA5jxACD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRl\ncm5pdHl3YWxsLmNvbf/wEMoYLFd2Hsqwv7Gpa18JJCUI8CD7aCKkCZj2qq8mzRHp\n/N+Gm0YDuH2tdDT/HxWgQgmSEwjxBF3a/xDwCAwkxEo6hkybAIPf4w0u+QyOLCto\ndHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BDUwrzN\neTCCyceA4hOtPlAACPAgrSiOiuKuIe3frY2rFil17cInPXlRtM6dCtU7lkRQoCAI\n8QRd2v8Q8AjBJbdl8LcFaACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree b61fd8109e1f6e504ca45815e54fe677bdff500c\nparent 1388de83900eaced906d369fe9e8887ae74b2dcf\nauthor Jon Atack <jon@atack.com> 1572270881 +0100\ncommitter Jon Atack <jon@atack.com> 1574633230 +0100\n\ntest: add listlabels test in wallet_labels.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f3539ac6d772fc646b5f184fa1efe77bf632f6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f3539ac6d772fc646b5f184fa1efe77bf632f6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f3539ac6d772fc646b5f184fa1efe77bf632f6a/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1388de83900eaced906d369fe9e8887ae74b2dcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1388de83900eaced906d369fe9e8887ae74b2dcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1388de83900eaced906d369fe9e8887ae74b2dcf"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2af8d2abacfce50e31f480d5b659e7a2d02302e9",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f3539ac6d772fc646b5f184fa1efe77bf632f6a/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f3539ac6d772fc646b5f184fa1efe77bf632f6a/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=0f3539ac6d772fc646b5f184fa1efe77bf632f6a",
        "patch": "@@ -152,14 +152,13 @@ def add_receive_address(self, address):\n     def verify(self, node):\n         if self.receive_address is not None:\n             assert self.receive_address in self.addresses\n-\n         for address in self.addresses:\n             assert_equal(\n                 node.getaddressinfo(address)['labels'][0],\n                 {\"name\": self.name,\n                  \"purpose\": self.purpose[address]})\n             assert_equal(node.getaddressinfo(address)['label'], self.name)\n-\n+        assert self.name in node.listlabels()\n         assert_equal(\n             node.getaddressesbylabel(self.name),\n             {address: {\"purpose\": self.purpose[address]} for address in self.addresses})"
      }
    ]
  },
  {
    "sha": "33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2Y1ZmMzMmU1YmZiZTFlODljNGQyMGNlNDU1YmNjNmRjMTk0MTUx",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-10-28T10:11:20Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-24T22:08:38Z"
      },
      "message": "test: add rpc getaddressinfo labels test coverage",
      "tree": {
        "sha": "541a9905f6291d56b1227e21827ebaaa100ca15a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/541a9905f6291d56b1227e21827ebaaa100ca15a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3a/2sACgkQT1chs9Dj\nkh2yxg/+MMC0FVOUFm7Zx5bl0Dg+oJDF1Z96wXrwWUs8aPaCJ+8H13OSKsG3OCKw\nHlxNoy+a+Zi47Ans9DAg8cJhIMQS0em6MXxJBP1GUmKOs7azc4cNZNtqUMN2nRlV\nIiodj8zhjvpXXgOYB6Bu1wKZN65Me5d0TwYjbeC1H5frFZPNNMZoL8LY9MJpNEu6\nS5E9nu1GNpAcrz2q+HPLRMsAAzfJNGbV4BeW1c+mZe5hZY7xPou5Q3CCiitjQGYc\nNYuU05VpOO7/YRTOaTw+qKRT5Ygj129IVrxkJKHqAnkexL/xweVd24mtHqvwQIqd\nVWSRQpYQjd00z5nscb3tO8rnTU0e4VNnI4CFr1CjJ6fsLvE0HRvpfIdM7t4RGkA+\nwqF0AGwxSmdeo7icpeGcCosR+xgYf5EcDMBB3Ij1Wq+Tbsy+1/1faYNFs1gMi4p2\n3BcX+mgIWd9fXyIp2HUl/r+//AZyoFPLVp9FntAYP7ot6BfRuCgI6YxUmxgtimof\nCVegHhIcgyc2XLqizNkN0UYkkA60Dr03Nm5I767cWi6TxAyBMwHL3odxSFEotYwD\nw15K1ONnkrF4OYXDJGEXaCSGgZPsTOfWVJqDspdaY6POzcNIIO6YJNQ1YaAGzv3o\nqGVuET23ZhKWjVFfZnLFfk/8bzMwy+YKhwp+TKbOsrQ7lCW7VYo=\n=zeas\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDXrH9kQ2nruwZQ91qImZUepXH9URBx7QgDHwx4lv6lACP/wED9TwKiOVghH\nS8wfIusKMT0I8QRd2v9s8AhIx+vls/JLvgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEFeiuohl59qpuqtxHK7XDdEI8QRd2v9t\n8AgIlfdAjVypJgCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRl\ncm5pdHl3YWxsLmNvbf/wELmS7ys//wYTa3HesmpsXecI8QRd2v9t8AhtkxCmlD86\nZACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVz\ndGFtcHMub3Jn8BDgXB5t2GqdesmREsx6NlpBCPEEXdr/bfAIK+Xz/6V5FjAAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 541a9905f6291d56b1227e21827ebaaa100ca15a\nparent 0f3539ac6d772fc646b5f184fa1efe77bf632f6a\nauthor Jon Atack <jon@atack.com> 1572257480 +0100\ncommitter Jon Atack <jon@atack.com> 1574633318 +0100\n\ntest: add rpc getaddressinfo labels test coverage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f3539ac6d772fc646b5f184fa1efe77bf632f6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f3539ac6d772fc646b5f184fa1efe77bf632f6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f3539ac6d772fc646b5f184fa1efe77bf632f6a"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 58,
      "deletions": 22
    },
    "files": [
      {
        "sha": "3d81a61120270b4c4e6422d354579a7d10075100",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
        "patch": "@@ -88,6 +88,11 @@ def get_multisig(node):\n                     p2sh_p2wsh_script=CScript([OP_HASH160, witness_script, OP_EQUAL]).hex(),\n                     p2sh_p2wsh_addr=script_to_p2sh_p2wsh(script_code))\n \n+def labels_value(name=\"\", purpose=\"receive\"):\n+    \"\"\"Generate a getaddressinfo labels array from a name and purpose.\n+    Often used as the value of a labels kwarg for calling test_address below.\"\"\"\n+    return [{\"name\": name, \"purpose\": purpose}]\n+\n def test_address(node, address, **kwargs):\n     \"\"\"Get address info for `address` and test whether the returned values are as expected.\"\"\"\n     addr_info = node.getaddressinfo(address)"
      },
      {
        "sha": "130fa3cfaf78dac939055a9a4eac04907eee1f8b",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
        "patch": "@@ -15,6 +15,10 @@\n     connect_nodes,\n     wait_until,\n )\n+from test_framework.wallet_util import (\n+    labels_value,\n+    test_address,\n+)\n \n \n class WalletTest(BitcoinTestFramework):\n@@ -390,7 +394,7 @@ def run_test(self):\n             for label in [u'\u0440\u044b\u0431\u0430', u'\ud834\udd61']:\n                 addr = self.nodes[0].getnewaddress()\n                 self.nodes[0].setlabel(addr, label)\n-                assert_equal(self.nodes[0].getaddressinfo(addr)['label'], label)\n+                test_address(self.nodes[0], addr, label=label, labels=labels_value(name=label))\n                 assert label in self.nodes[0].listlabels()\n         self.nodes[0].rpc.ensure_ascii = True  # restore to default\n "
      },
      {
        "sha": "e356fce46944da2da83e9b07891d51f4693f01aa",
        "filename": "test/functional/wallet_import_with_label.py",
        "status": "modified",
        "additions": 22,
        "deletions": 9,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_import_with_label.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_import_with_label.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_with_label.py?ref=33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
        "patch": "@@ -11,7 +11,10 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.wallet_util import test_address\n+from test_framework.wallet_util import (\n+    labels_value,\n+    test_address,\n+)\n \n \n class ImportWithLabel(BitcoinTestFramework):\n@@ -36,7 +39,8 @@ def run_test(self):\n                      address,\n                      iswatchonly=True,\n                      ismine=False,\n-                     label=label)\n+                     label=label,\n+                     labels=labels_value(name=label))\n \n         self.log.info(\n             \"Import the watch-only address's private key without a \"\n@@ -47,7 +51,8 @@ def run_test(self):\n \n         test_address(self.nodes[1],\n                      address,\n-                     label=label)\n+                     label=label,\n+                     labels=labels_value(name=label))\n \n         self.log.info(\n             \"Test importaddress without label and importprivkey with label.\"\n@@ -59,7 +64,8 @@ def run_test(self):\n                      address2,\n                      iswatchonly=True,\n                      ismine=False,\n-                     label=\"\")\n+                     label=\"\",\n+                     labels=labels_value())\n \n         self.log.info(\n             \"Import the watch-only address's private key with a \"\n@@ -71,7 +77,8 @@ def run_test(self):\n \n         test_address(self.nodes[1],\n                      address2,\n-                     label=label2)\n+                     label=label2,\n+                     labels=labels_value(name=label2))\n \n         self.log.info(\"Test importaddress with label and importprivkey with label.\")\n         self.log.info(\"Import a watch-only address with a label.\")\n@@ -82,7 +89,8 @@ def run_test(self):\n                      address3,\n                      iswatchonly=True,\n                      ismine=False,\n-                     label=label3_addr)\n+                     label=label3_addr,\n+                     labels=labels_value(name=label3_addr))\n \n         self.log.info(\n             \"Import the watch-only address's private key with a \"\n@@ -94,7 +102,8 @@ def run_test(self):\n \n         test_address(self.nodes[1],\n                      address3,\n-                     label=label3_priv)\n+                     label=label3_priv,\n+                     labels=labels_value(name=label3_priv))\n \n         self.log.info(\n             \"Test importprivkey won't label new dests with the same \"\n@@ -109,6 +118,7 @@ def run_test(self):\n                      iswatchonly=True,\n                      ismine=False,\n                      label=label4_addr,\n+                     labels=labels_value(name=label4_addr),\n                      embedded=None)\n \n         self.log.info(\n@@ -123,10 +133,13 @@ def run_test(self):\n \n         test_address(self.nodes[1],\n                      embedded_addr,\n-                     label=\"\")\n+                     label=\"\",\n+                     labels=labels_value())\n+\n         test_address(self.nodes[1],\n                      address4,\n-                     label=label4_addr)\n+                     label=label4_addr,\n+                     labels=labels_value(name=label4_addr))\n \n         self.stop_nodes()\n "
      },
      {
        "sha": "5febac5998b75fa5dc04c21076941c57748968c6",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
        "patch": "@@ -29,6 +29,7 @@\n from test_framework.wallet_util import (\n     get_key,\n     get_multisig,\n+    labels_value,\n     test_address,\n )\n \n@@ -121,7 +122,7 @@ def run_test(self):\n         self.test_importmulti({\"scriptPubKey\": key.p2pkh_script,\n                                \"timestamp\": \"now\",\n                                \"internal\": True,\n-                               \"label\": \"Example label\"},\n+                               \"label\": \"Unsuccessful labelling for internal addresses\"},\n                               success=False,\n                               error_code=-8,\n                               error_message='Internal addresses should not have a label')\n@@ -550,25 +551,27 @@ def run_test(self):\n         self.log.info(\"Should not import a p2sh-p2wpkh address from descriptor without checksum and private key\")\n         self.test_importmulti({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n                                \"timestamp\": \"now\",\n-                               \"label\": \"Descriptor import test\",\n+                               \"label\": \"Unsuccessful P2SH-P2WPKH descriptor import\",\n                                \"keys\": [key.privkey]},\n                               success=False,\n                               error_code=-5,\n                               error_message=\"Missing checksum\")\n \n         # Test importing of a P2SH-P2WPKH address via descriptor + private key\n         key = get_key(self.nodes[0])\n+        p2sh_p2wpkh_label = \"Successful P2SH-P2WPKH descriptor import\"\n         self.log.info(\"Should import a p2sh-p2wpkh address from descriptor and private key\")\n         self.test_importmulti({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n                                \"timestamp\": \"now\",\n-                               \"label\": \"Descriptor import test\",\n+                               \"label\": p2sh_p2wpkh_label,\n                                \"keys\": [key.privkey]},\n                               success=True)\n         test_address(self.nodes[1],\n                      key.p2sh_p2wpkh_addr,\n                      solvable=True,\n                      ismine=True,\n-                     label=\"Descriptor import test\")\n+                     label=p2sh_p2wpkh_label,\n+                     labels=labels_value(name=p2sh_p2wpkh_label))\n \n         # Test ranged descriptor fails if range is not specified\n         xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n@@ -628,17 +631,19 @@ def run_test(self):\n \n         # Test importing of a P2PKH address via descriptor\n         key = get_key(self.nodes[0])\n+        p2pkh_label = \"P2PKH descriptor import\"\n         self.log.info(\"Should import a p2pkh address from descriptor\")\n         self.test_importmulti({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n                                \"timestamp\": \"now\",\n-                               \"label\": \"Descriptor import test\"},\n+                               \"label\": p2pkh_label},\n                               True,\n                               warnings=[\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\"])\n         test_address(self.nodes[1],\n                      key.p2pkh_addr,\n                      solvable=True,\n                      ismine=False,\n-                     label=\"Descriptor import test\")\n+                     label=p2pkh_label,\n+                     labels=labels_value(name=p2pkh_label))\n \n         # Test import fails if both desc and scriptPubKey are provided\n         key = get_key(self.nodes[0])"
      },
      {
        "sha": "27371d43bb4a15512177b2e37125d41d101fe597",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
        "patch": "@@ -13,6 +13,10 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet_util import (\n+    labels_value,\n+    test_address,\n+)\n \n class WalletLabelsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -153,11 +157,12 @@ def verify(self, node):\n         if self.receive_address is not None:\n             assert self.receive_address in self.addresses\n         for address in self.addresses:\n-            assert_equal(\n-                node.getaddressinfo(address)['labels'][0],\n-                {\"name\": self.name,\n-                 \"purpose\": self.purpose[address]})\n-            assert_equal(node.getaddressinfo(address)['label'], self.name)\n+            test_address(\n+                node,\n+                address,\n+                label=self.name,\n+                labels=labels_value(name=self.name, purpose=self.purpose[address])\n+             )\n         assert self.name in node.listlabels()\n         assert_equal(\n             node.getaddressesbylabel(self.name),"
      },
      {
        "sha": "afd473306d52aea19b4212039a9d4e75798edf41",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
        "patch": "@@ -11,6 +11,10 @@\n     assert_equal,\n     assert_raises_rpc_error,\n )\n+from test_framework.wallet_util import (\n+    labels_value,\n+    test_address,\n+)\n \n \n class ReceivedByTest(BitcoinTestFramework):\n@@ -127,7 +131,7 @@ def run_test(self):\n         # set pre-state\n         label = ''\n         address = self.nodes[1].getnewaddress()\n-        assert_equal(self.nodes[1].getaddressinfo(address)['label'], label)\n+        test_address(self.nodes[1], address, label=label, labels=labels_value(name=label))\n         received_by_label_json = [r for r in self.nodes[1].listreceivedbylabel() if r[\"label\"] == label][0]\n         balance_by_label = self.nodes[1].getreceivedbylabel(label)\n "
      }
    ]
  },
  {
    "sha": "746318179884055910df0d556fd9f79da18ce38d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDYzMTgxNzk4ODQwNTU5MTBkZjBkNTU2ZmQ5Zjc5ZGExOGNlMzhk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-24T23:40:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-24T23:42:54Z"
      },
      "message": "Merge #17538: build: Bump minimum libc to 2.17 for release binaries\n\n8f15a317602727d24f60d0bbf43f851b33df3228 doc: add glibc 2.17 requirement to release-notes (fanquake)\n16a7be1663b02ddefa1e4f0309be49b725ffb388 build: Bump minimum versions in symbol checker (Wladimir J. van der Laan)\nb77d5ad59fb9f3f26d919ee6c33ae732382de504 build: Disallow dynamic linking against c++ library (Wladimir J. van der Laan)\n\nPull request description:\n\n  Closes: #17525. Taken over from #17531.\n\n  Debian 8 (Jessie) has:\n  - g++ version 4.9.2\n  - libc version 2.19\n\n  CentOS 7 has:\n  - g++ version 4.8.5\n  - libc version 2.17\n\n  Ubuntu 16.04.4 (Xenial, oldest supported Ubuntu) has:\n  - g++ version 5.3.1\n  - libc version 2.23.0\n\n  Taking the minimum of these as our target. According to [GNU ABI document](https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html) this corresponds to:\n\n  - GCC 4.8.5: GCC_4.8.0\n  - (glibc)    GLIBC_2_17\n\n  This also contains a (long needed) commit to disallow dynamic linking to stdc++, as our releases statically link against that.\n\nACKs for top commit:\n  laanwj:\n    re-ACK 8f15a317602727d24f60d0bbf43f851b33df3228\n\nTree-SHA512: a3cc92aa1c5de253b1531f4b854d6f5f4a15d614ba6290d9db293542a96994b55c4a8e33e03b601bae16eb65529630b4f94b48b010e0b66b7dc9ff0acf945107",
      "tree": {
        "sha": "ba3171a7fb86c62f8e59746d00bbdb4ee0c63b8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba3171a7fb86c62f8e59746d00bbdb4ee0c63b8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/746318179884055910df0d556fd9f79da18ce38d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYLC4pAL7OGskoDms0upIUOdSiyUFAl3bFX4ACgkQ0upIUOdS\niyU+ZxAAryNiMJoCYlkFwIuy8AmW2wMn1QYATzcjztCI1D2J8DsoGAmOkUVWin0w\nJTi5FcHx7mnwh03VQ+RBxsstRjLWpe0NnydppMU924vDb61qyYGuaVI3KUjJajIJ\no+nwrfs5P6NhqZue7MD2mEkz8bCJCZvT3fEXN1pJ0cp2wTTErwu1B5LFEfziZYkC\nsDypLvu0y58ebuzceSyazkadffHrfhg2scFiszfJQdgWCtItkbh3Zxi/uhSu0Qt1\nbAy3eNqfRqQzQwVgqEpRBdwbbKBBrnpui9Ie2JOsVHvldqja2uHt2+LlEuZbjfbX\nLGONKM3m9u+VKU72dsd+sOe1ebl0gRpufEEVHYyrRJIFawhmDi+zr8hO2k4cpWn2\nnLe+yxSDyNrt6BDJkIfpXAtbAZTjoIqs6TsgvT9Vvy2rebjFFAIDAFHb0oS7DJSm\nFYCuPJA0yYxF9z+AlBcdwM57pjmOzWpSs/wAsuEUi7eQTUiVs8IyQkeDUtTsXmSV\nz6IkKu1pqW5B3Dt0nXHZY7vHeafU0EuV0Ol8dqlNTMIkT5d6I+pdXBV9GLQLj2LY\n7NHaOKtStoOvOfvfFWlOMTWWprHeyj1yYtkGAs2s9KeHeDYmKcUvikYQAPaa+f1s\nTT9q4nILlpDE3uqw7xwUh4p245tl9gP9AYuR/EFl07xiKGDISis=\n=VN8V\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHrZaVrlWxeAc8XDwp25UsR2zjNh9kACfHJq0JXz844LCP/wEBX2HkB6+c8g\n4wZmjUnvbzEI8CBBjUUJN6qIXZBWNtGoAi6T81UGKX0d8d3ZnY771eDnQgjxBF3b\nFYHwCCdE1tiQExO6AIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5l\ndGVybml0eXdhbGwuY29t//AQfIPABfYkNCO9rdbtmVui6QjwIGUakNENDSYASgsz\nGNUH4dn8uBOCgEf/yjg5IkMbSSMnCPEEXdsVgfAICqMBhGZtJxcAg9/jDS75DI4s\nK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmf/8BC7\nH5WPpY/GY+8IfgBaM60iCPEEXdsVgPAIfyzg7InBtqsAg9/jDS75DI4uLWh0dHBz\nOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ8x0O2+XK\ngAMNdEo4clYNNQjxBF3bFYHwCIV6gakx2b1dAIPf4w0u+QyOIyJodHRwczovL2J0\nYy5jYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree ba3171a7fb86c62f8e59746d00bbdb4ee0c63b8d\nparent 239d199667888e5d60309f15a38eed4d3afe56c4\nparent 8f15a317602727d24f60d0bbf43f851b33df3228\nauthor MarcoFalke <falke.marco@gmail.com> 1574638827 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1574638974 -0500\n\nMerge #17538: build: Bump minimum libc to 2.17 for release binaries\n\n8f15a317602727d24f60d0bbf43f851b33df3228 doc: add glibc 2.17 requirement to release-notes (fanquake)\n16a7be1663b02ddefa1e4f0309be49b725ffb388 build: Bump minimum versions in symbol checker (Wladimir J. van der Laan)\nb77d5ad59fb9f3f26d919ee6c33ae732382de504 build: Disallow dynamic linking against c++ library (Wladimir J. van der Laan)\n\nPull request description:\n\n  Closes: #17525. Taken over from #17531.\n\n  Debian 8 (Jessie) has:\n  - g++ version 4.9.2\n  - libc version 2.19\n\n  CentOS 7 has:\n  - g++ version 4.8.5\n  - libc version 2.17\n\n  Ubuntu 16.04.4 (Xenial, oldest supported Ubuntu) has:\n  - g++ version 5.3.1\n  - libc version 2.23.0\n\n  Taking the minimum of these as our target. According to [GNU ABI document](https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html) this corresponds to:\n\n  - GCC 4.8.5: GCC_4.8.0\n  - (glibc)    GLIBC_2_17\n\n  This also contains a (long needed) commit to disallow dynamic linking to stdc++, as our releases statically link against that.\n\nACKs for top commit:\n  laanwj:\n    re-ACK 8f15a317602727d24f60d0bbf43f851b33df3228\n\nTree-SHA512: a3cc92aa1c5de253b1531f4b854d6f5f4a15d614ba6290d9db293542a96994b55c4a8e33e03b601bae16eb65529630b4f94b48b010e0b66b7dc9ff0acf945107\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/746318179884055910df0d556fd9f79da18ce38d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/746318179884055910df0d556fd9f79da18ce38d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/746318179884055910df0d556fd9f79da18ce38d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "239d199667888e5d60309f15a38eed4d3afe56c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/239d199667888e5d60309f15a38eed4d3afe56c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/239d199667888e5d60309f15a38eed4d3afe56c4"
      },
      {
        "sha": "8f15a317602727d24f60d0bbf43f851b33df3228",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f15a317602727d24f60d0bbf43f851b33df3228",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f15a317602727d24f60d0bbf43f851b33df3228"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 22,
      "deletions": 18
    },
    "files": [
      {
        "sha": "cb255c9426eeb3b5ae9d538ad28748e9a57284f5",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/746318179884055910df0d556fd9f79da18ce38d/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/746318179884055910df0d556fd9f79da18ce38d/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=746318179884055910df0d556fd9f79da18ce38d",
        "patch": "@@ -4,8 +4,8 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n A script to check that the (Linux) executables produced by gitian only contain\n-allowed gcc, glibc and libstdc++ version symbols.  This makes sure they are\n-still compatible with the minimum supported Linux distribution versions.\n+allowed gcc and glibc version symbols. This makes sure they are still compatible\n+with the minimum supported Linux distribution versions.\n \n Example usage:\n \n@@ -16,30 +16,30 @@\n import sys\n import os\n \n-# Debian 6.0.9 (Squeeze) has:\n+# Debian 8 (Jessie) EOL: 2020. https://wiki.debian.org/DebianReleases#Production_Releases\n #\n-# - g++ version 4.4.5 (https://packages.debian.org/search?suite=default&section=all&arch=any&searchon=names&keywords=g%2B%2B)\n-# - libc version 2.11.3 (https://packages.debian.org/search?suite=default&section=all&arch=any&searchon=names&keywords=libc6)\n-# - libstdc++ version 4.4.5 (https://packages.debian.org/search?suite=default&section=all&arch=any&searchon=names&keywords=libstdc%2B%2B6)\n+# - g++ version 4.9.2 (https://packages.debian.org/search?suite=jessie&arch=any&searchon=names&keywords=g%2B%2B)\n+# - libc version 2.19 (https://packages.debian.org/search?suite=jessie&arch=any&searchon=names&keywords=libc6)\n #\n-# Ubuntu 10.04.4 (Lucid Lynx) has:\n+# Ubuntu 16.04 (Xenial) EOL: 2024. https://wiki.ubuntu.com/Releases\n #\n-# - g++ version 4.4.3 (http://packages.ubuntu.com/search?keywords=g%2B%2B&searchon=names&suite=lucid&section=all)\n-# - libc version 2.11.1 (http://packages.ubuntu.com/search?keywords=libc6&searchon=names&suite=lucid&section=all)\n-# - libstdc++ version 4.4.3 (http://packages.ubuntu.com/search?suite=lucid&section=all&arch=any&keywords=libstdc%2B%2B&searchon=names)\n+# - g++ version 5.3.1 (https://packages.ubuntu.com/search?keywords=g%2B%2B&searchon=names&suite=xenial&section=all)\n+# - libc version 2.23.0 (https://packages.ubuntu.com/search?keywords=libc6&searchon=names&suite=xenial&section=all)\n+#\n+# CentOS 7 EOL: 2024. https://wiki.centos.org/FAQ/General\n+#\n+# - g++ version 4.8.5 (http://mirror.centos.org/centos/7/os/x86_64/Packages/)\n+# - libc version 2.17 (http://mirror.centos.org/centos/7/os/x86_64/Packages/)\n #\n # Taking the minimum of these as our target.\n #\n-# According to GNU ABI document (http://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html) this corresponds to:\n-#   GCC 4.4.0: GCC_4.4.0\n-#   GCC 4.4.2: GLIBCXX_3.4.13, CXXABI_1.3.3\n-#   (glibc)    GLIBC_2_11\n+# According to GNU ABI document (https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html) this corresponds to:\n+#   GCC 4.8.5: GCC_4.8.0\n+#   (glibc)    GLIBC_2_17\n #\n MAX_VERSIONS = {\n-'GCC':       (4,4,0),\n-'CXXABI':    (1,3,3),\n-'GLIBCXX':   (3,4,13),\n-'GLIBC':     (2,11),\n+'GCC':       (4,8,0),\n+'GLIBC':     (2,17),\n 'LIBATOMIC': (1,0)\n }\n # See here for a description of _IO_stdin_used:"
      },
      {
        "sha": "d6bd8e6ed45f841e5a124ff79d4acaf0a91c1fe1",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/746318179884055910df0d556fd9f79da18ce38d/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/746318179884055910df0d556fd9f79da18ce38d/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=746318179884055910df0d556fd9f79da18ce38d",
        "patch": "@@ -68,6 +68,10 @@ Build System\n - OpenSSL is no longer used by Bitcoin Core. The last usage of the library\n was removed in #17265.\n \n+- glibc 2.17 or greater is now required to run the release binaries. This\n+retains compatibility with RHEL 7, CentOS 7, Debian 8 and Ubuntu 14.04 LTS.\n+Further details can be found in #17538.\n+\n New RPCs\n --------\n "
      }
    ]
  },
  {
    "sha": "e6f167bfdfc056ced2064c7e21f8abbff6e3ff19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmYxNjdiZmRmYzA1NmNlZDIwNjRjN2UyMWY4YWJiZmY2ZTNmZjE5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-25T00:07:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-25T00:07:56Z"
      },
      "message": "Merge #17569: build: Allow export of environ symbols and work around rv64 toolchain issue\n\neafd2593674b6890418a50eadf69425071b824e4 build: Add NX workaround for RV64 (Wladimir J. van der Laan)\nf6e42256fe8900ed90f9644906b77f97e1600952 build: Allow export of environ symbols (Wladimir J. van der Laan)\n\nPull request description:\n\n  This export was introduced in #17270 which added\n  ```\n  //! Necessary on some platforms\n  extern char** environ;\n  ```\n  This should (finally) make the gitian build pass again (fix issue #17525.).\n\n  Built on top of #17538 which should be merged first.\n\nTop commit has no ACKs.\n\nTree-SHA512: 5c2054d52d0957aec3dc945b76d8e219187d22dc03889e7a88fb76049bf8e4a3e9f4da00dd1e9dd0351211f8e70d1a1b8ad7244f0348dab698e9d14b9d0c0bd4",
      "tree": {
        "sha": "9fce42247a5b46621e925fe7a1c60da41bef030e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fce42247a5b46621e925fe7a1c60da41bef030e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6f167bfdfc056ced2064c7e21f8abbff6e3ff19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYLC4pAL7OGskoDms0upIUOdSiyUFAl3bG1wACgkQ0upIUOdS\niyXeYg//aMVBctkzIb/Hu9cCbXsnlaf3/7fqAantQ8zIvGyXqu/Q+/E2FEglRkjB\nwpWJUCQgfg+0RQkWyY701WwnIo88lhSxUlUiz/BbIMeWibsAyjGx2dKSrFFfw5uE\npTgpLUhEWjX2rfsE3Wlr14kVX1x+jVhbGfy8b+Jc7IGuKTSKgBQSgiEPoBaG0VdK\naXhG1OQN7xjj+b6Pe3DhM790IA336+mZkxSOMi/dxnzQvJb705BZLs6tcmHpkA3x\nI1Zama6jqUEifUhlswkLAt3hdMaFKQCoZibtTOW87bSKxklURDJNr57kJUEo7vTN\nWnEJSxZy8QaF4pelO1z/aWcpSL/XHRjqDFz3OC5woPyQ7RqnSBgtzrhxR4HfEDSc\nt8/wpZJ8m3Il0L3aeeRWY838I4g0ishKSUeo5gq2nCpJBToNk39MxSzWNiEKn2EV\ntEUHd0VI0EAwaKF4vni3JBru395em4TTEzyfLRoWs/aYfY3pnrQC5D4kv7JVtmOL\nF/tmJWW24rpqdZAJG/lYayXT0WPQRDAvgs7DWk692f5wlM47o3CvyTA+eiyvht5B\n75JZyTkzbr93alksMyRQrSHV0bvseVUKaLMfiwZfhdBaGqyhFt98cmJeEkYPyR6O\nbALinYzFJXYwHdAIdtUXvEhw7Us/Dvn/0REO4yygDQTOxD7j3a4=\n=82wc\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIOJFDw2EBaemx2k5x2PaBtOrptN8A293q+OhmyZnVoW/CP/wEBmFZcvXd+JS\nspjAGtRdYoII8QRd2xtf8Ajvj2p+PJoLowCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQLgog5TO6adhvioVC\nccv32QjxBF3bG1/wCJvOgVD0bARhAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQlWOYwWK528iJ7Ux/oBUDZgjx\nBF3bG1/wCIYLi+zA54PrAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRh\nci5ldGVybml0eXdhbGwuY29t8BDQzxg1mn2ESY67avvuWfh4CPEEXdsbX/AI8RA5\nt5/PGn4Ag9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 9fce42247a5b46621e925fe7a1c60da41bef030e\nparent 746318179884055910df0d556fd9f79da18ce38d\nparent eafd2593674b6890418a50eadf69425071b824e4\nauthor MarcoFalke <falke.marco@gmail.com> 1574640441 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1574640476 -0500\n\nMerge #17569: build: Allow export of environ symbols and work around rv64 toolchain issue\n\neafd2593674b6890418a50eadf69425071b824e4 build: Add NX workaround for RV64 (Wladimir J. van der Laan)\nf6e42256fe8900ed90f9644906b77f97e1600952 build: Allow export of environ symbols (Wladimir J. van der Laan)\n\nPull request description:\n\n  This export was introduced in #17270 which added\n  ```\n  //! Necessary on some platforms\n  extern char** environ;\n  ```\n  This should (finally) make the gitian build pass again (fix issue #17525.).\n\n  Built on top of #17538 which should be merged first.\n\nTop commit has no ACKs.\n\nTree-SHA512: 5c2054d52d0957aec3dc945b76d8e219187d22dc03889e7a88fb76049bf8e4a3e9f4da00dd1e9dd0351211f8e70d1a1b8ad7244f0348dab698e9d14b9d0c0bd4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6f167bfdfc056ced2064c7e21f8abbff6e3ff19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6f167bfdfc056ced2064c7e21f8abbff6e3ff19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6f167bfdfc056ced2064c7e21f8abbff6e3ff19/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "746318179884055910df0d556fd9f79da18ce38d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/746318179884055910df0d556fd9f79da18ce38d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/746318179884055910df0d556fd9f79da18ce38d"
      },
      {
        "sha": "eafd2593674b6890418a50eadf69425071b824e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eafd2593674b6890418a50eadf69425071b824e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eafd2593674b6890418a50eadf69425071b824e4"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0c59ab62396c7f6310f8b53561a8ed8daffba3ab",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f167bfdfc056ced2064c7e21f8abbff6e3ff19/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f167bfdfc056ced2064c7e21f8abbff6e3ff19/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=e6f167bfdfc056ced2064c7e21f8abbff6e3ff19",
        "patch": "@@ -47,7 +47,8 @@\n \n # Ignore symbols that are exported as part of every executable\n IGNORE_EXPORTS = {\n-'_edata', '_end', '__end__', '_init', '__bss_start', '__bss_start__', '_bss_end__', '__bss_end__', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr'\n+'_edata', '_end', '__end__', '_init', '__bss_start', '__bss_start__', '_bss_end__', '__bss_end__', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr',\n+'environ', '_environ', '__environ',\n }\n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')"
      },
      {
        "sha": "7016ff861b991ea93333ea437a0b7e49324ed222",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f167bfdfc056ced2064c7e21f8abbff6e3ff19/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f167bfdfc056ced2064c7e21f8abbff6e3ff19/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=e6f167bfdfc056ced2064c7e21f8abbff6e3ff19",
        "patch": "@@ -46,7 +46,7 @@ script: |\n   FAKETIME_PROGS=\"date ar ranlib nm\"\n   HOST_CFLAGS=\"-O2 -g\"\n   HOST_CXXFLAGS=\"-O2 -g\"\n-  HOST_LDFLAGS=-static-libstdc++\n+  HOST_LDFLAGS_BASE=\"-static-libstdc++\"\n \n   export QT_RCC_TEST=1\n   export QT_RCC_SOURCE_DATE_OVERRIDE=1\n@@ -160,6 +160,13 @@ script: |\n   # Extract the release tarball into a dir for each host and build\n   for i in ${HOSTS}; do\n     export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n+    if [ \"${i}\" = \"riscv64-linux-gnu\" ]; then\n+      # Workaround for https://bugs.launchpad.net/ubuntu/+source/gcc-8-cross-ports/+bug/1853740\n+      # TODO: remove this when no longer needed\n+      HOST_LDFLAGS=\"${HOST_LDFLAGS_BASE} -Wl,-z,noexecstack\"\n+    else\n+      HOST_LDFLAGS=\"${HOST_LDFLAGS_BASE}\"\n+    fi\n     mkdir -p distsrc-${i}\n     cd distsrc-${i}\n     INSTALLPATH=`pwd`/installed/${DISTNAME}"
      }
    ]
  },
  {
    "sha": "2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2I0ZThiZGM3ZWY3NWFlOGQ5NWMyNDZhZjFlOGUxZjljNzA0NWJk",
    "commit": {
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2019-11-25T00:33:17Z"
      },
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2019-11-25T00:33:17Z"
      },
      "message": "[test] move string helper functions into test library",
      "tree": {
        "sha": "478c4b892e09f4103061f42052460c50e22ca9b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/478c4b892e09f4103061f42052460c50e22ca9b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd/comments",
    "author": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "239d199667888e5d60309f15a38eed4d3afe56c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/239d199667888e5d60309f15a38eed4d3afe56c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/239d199667888e5d60309f15a38eed4d3afe56c4"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 36,
      "deletions": 35
    },
    "files": [
      {
        "sha": "235420e6ac89381a2d7097c17c64b80c00c08f7e",
        "filename": "src/test/settings_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd/src/test/settings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd/src/test/settings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/settings_tests.cpp?ref=2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd",
        "patch": "@@ -4,8 +4,9 @@\n \n #include <util/settings.h>\n \n-#include <test/util.h>\n #include <test/util/setup_common.h>\n+#include <test/util/str.h>\n+\n \n #include <boost/test/unit_test.hpp>\n #include <univalue.h>"
      },
      {
        "sha": "3cf830dd386038e70808602dedb4dfddb1e3d60a",
        "filename": "src/test/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 33,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd/src/test/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd/src/test/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util.h?ref=2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd",
        "patch": "@@ -34,37 +34,4 @@ std::string getnewaddress(CWallet& w);\n /** Returns the generated coin */\n CTxIn generatetoaddress(const std::string& address);\n \n-/**\n- * Increment a string. Useful to enumerate all fixed length strings with\n- * characters in [min_char, max_char].\n- */\n-template <typename CharType, size_t StringLength>\n-bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)\n-{\n-    for (CharType& elem : string) {\n-        bool has_next = elem != max_char;\n-        elem = elem < min_char || elem >= max_char ? min_char : CharType(elem + 1);\n-        if (has_next) return true;\n-    }\n-    return false;\n-}\n-\n-/**\n- * Iterate over string values and call function for each string without\n- * successive duplicate characters.\n- */\n-template <typename CharType, size_t StringLength, typename Fn>\n-void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {\n-    for (bool has_next = true; has_next; has_next = NextString(string, min_char, max_char)) {\n-        int prev = -1;\n-        bool skip_string = false;\n-        for (CharType c : string) {\n-            if (c == prev) skip_string = true;\n-            if (skip_string || c < min_char || c > max_char) break;\n-            prev = c;\n-        }\n-        if (!skip_string) fn();\n-    }\n-}\n-\n #endif // BITCOIN_TEST_UTIL_H"
      },
      {
        "sha": "ef94692df096ec9343007dc33971d42d9732022e",
        "filename": "src/test/util/str.h",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd/src/test/util/str.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd/src/test/util/str.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/str.h?ref=2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd",
        "patch": "@@ -9,4 +9,37 @@\n \n bool CaseInsensitiveEqual(const std::string& s1, const std::string& s2);\n \n+/**\n+ * Increment a string. Useful to enumerate all fixed length strings with\n+ * characters in [min_char, max_char].\n+ */\n+template <typename CharType, size_t StringLength>\n+bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)\n+{\n+    for (CharType& elem : string) {\n+        bool has_next = elem != max_char;\n+        elem = elem < min_char || elem >= max_char ? min_char : CharType(elem + 1);\n+        if (has_next) return true;\n+    }\n+    return false;\n+}\n+\n+/**\n+ * Iterate over string values and call function for each string without\n+ * successive duplicate characters.\n+ */\n+template <typename CharType, size_t StringLength, typename Fn>\n+void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {\n+    for (bool has_next = true; has_next; has_next = NextString(string, min_char, max_char)) {\n+        int prev = -1;\n+        bool skip_string = false;\n+        for (CharType c : string) {\n+            if (c == prev) skip_string = true;\n+            if (skip_string || c < min_char || c > max_char) break;\n+            prev = c;\n+        }\n+        if (!skip_string) fn();\n+    }\n+}\n+\n #endif // BITCOIN_TEST_UTIL_STR_H"
      },
      {
        "sha": "fbd2bd5651b5c05773f278339ea1c2b7c040665a",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd",
        "patch": "@@ -7,7 +7,7 @@\n #include <clientversion.h>\n #include <sync.h>\n #include <test/util/setup_common.h>\n-#include <test/util.h>\n+#include <test/util/str.h>\n #include <util/moneystr.h>\n #include <util/strencodings.h>\n #include <util/string.h>"
      }
    ]
  },
  {
    "sha": "2fa65e0de94f01d502e8ace89be3c5dc963dd764",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmE2NWUwZGU5NGYwMWQ1MDJlOGFjZTg5YmUzYzVkYzk2M2RkNzY0",
    "commit": {
      "author": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2019-11-25T12:12:51Z"
      },
      "committer": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2019-11-25T12:34:47Z"
      },
      "message": "Add ci script to install on s390x",
      "tree": {
        "sha": "db38e5b4684d45ccc61e3a30d3e22dbdd495fd02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db38e5b4684d45ccc61e3a30d3e22dbdd495fd02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fa65e0de94f01d502e8ace89be3c5dc963dd764",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAl3bymgZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqf65tEADRIHnWe0B/wVzUESkqfp3o\nB1JNC7U4c+Mv3Bx90a1qzVC9cOo62iwomtiBHbHRhlKzsiEwP0+6b9EQ/HLAfTfS\n1hSTsUJZ+wJqIh7SZ0Q/zqWgVYXDi9J1UD63/aPUqBLUKIfwKr9C4KHB+HiNCJRV\nPD3caqxa4iw6WO7yzdYi1LWhgk1Ik5PNZJfiapBn0oegP2az7DQ0Stv7h33Q6uE7\n4Z7XkZT2srx9+5hLMuangkOIXPinWYS1buHUPMQIJNwADVmZVj+aMKHACby1I3Ez\n88JWWOJGcfjeRdV4abcZic5XcbKP1KKmphNQBKPEA8TZPzYZUzfUKUdsfDeEH/o2\nWouw6zfIwI9UuQdMbrDQQNHtksXFO8LJDveFD3ks5BaR5tW9le06YFWFfNWfHRpD\nEG9FFzZiCsQ1RcYskbxx/GLKZKfgHRA8d89jNYiJd+iTXG+BpHpZ3YiVkrdRmRTn\nZDPXzhhgqAhYvQkIJce6sjdaTF1oLEtBr7CAd/x2Cj+JpEI4eiZC902gN3Lt2mEe\ntgODPIPoXBfhwXoYVUB2OSetvVu/8t4/+ewFlUSygCSUhAXas1YIkldn0wZXnFqr\nCYaJ5dVLmNhcCbibUD5YUzL5Xq48vTPmnqptHMN7XhVXBNDcfmRcxxBT85hy3ZAb\nNDU/Z1h+VOXQvIM/QuvmaA==\n=UUuE\n-----END PGP SIGNATURE-----",
        "payload": "tree db38e5b4684d45ccc61e3a30d3e22dbdd495fd02\nparent e6f167bfdfc056ced2064c7e21f8abbff6e3ff19\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1574683971 +0200\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1574685287 +0200\n\nAdd ci script to install on s390x\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fa65e0de94f01d502e8ace89be3c5dc963dd764",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fa65e0de94f01d502e8ace89be3c5dc963dd764",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fa65e0de94f01d502e8ace89be3c5dc963dd764/comments",
    "author": {
      "login": "elichai",
      "id": 2167860,
      "node_id": "MDQ6VXNlcjIxNjc4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elichai",
      "html_url": "https://github.com/elichai",
      "followers_url": "https://api.github.com/users/elichai/followers",
      "following_url": "https://api.github.com/users/elichai/following{/other_user}",
      "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
      "organizations_url": "https://api.github.com/users/elichai/orgs",
      "repos_url": "https://api.github.com/users/elichai/repos",
      "events_url": "https://api.github.com/users/elichai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elichai/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "elichai",
      "id": 2167860,
      "node_id": "MDQ6VXNlcjIxNjc4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elichai",
      "html_url": "https://github.com/elichai",
      "followers_url": "https://api.github.com/users/elichai/followers",
      "following_url": "https://api.github.com/users/elichai/following{/other_user}",
      "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
      "organizations_url": "https://api.github.com/users/elichai/orgs",
      "repos_url": "https://api.github.com/users/elichai/repos",
      "events_url": "https://api.github.com/users/elichai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elichai/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6f167bfdfc056ced2064c7e21f8abbff6e3ff19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6f167bfdfc056ced2064c7e21f8abbff6e3ff19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6f167bfdfc056ced2064c7e21f8abbff6e3ff19"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b41d44c61aefb7015ef079f190798ea9d21b356f",
        "filename": "ci/test/00_setup_env_s390x.sh",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fa65e0de94f01d502e8ace89be3c5dc963dd764/ci/test/00_setup_env_s390x.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fa65e0de94f01d502e8ace89be3c5dc963dd764/ci/test/00_setup_env_s390x.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_s390x.sh?ref=2fa65e0de94f01d502e8ace89be3c5dc963dd764",
        "patch": "@@ -0,0 +1,18 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export HOST=s390x-unknown-linux-gnu\n+export DOCKER_NAME_TAG=s390x/ubuntu:18.04\n+export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n+export NO_DEPENDS=1\n+export RUN_UNIT_TESTS=true\n+export RUN_FUNCTIONAL_TESTS=false\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--enable-reduce-exports --with-incompatible-bdb\"\n+\n+lscpu"
      }
    ]
  },
  {
    "sha": "da1f153e5e260f1744ee1bf4f24ca3a74ffea465",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTFmMTUzZTVlMjYwZjE3NDRlZTFiZjRmMjRjYTNhNzRmZmVhNDY1",
    "commit": {
      "author": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2019-11-25T12:13:11Z"
      },
      "committer": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2019-11-25T12:34:49Z"
      },
      "message": "Add s390x tests to travis",
      "tree": {
        "sha": "8da1cd4c4aee2eb655e566e54450d155d94828b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8da1cd4c4aee2eb655e566e54450d155d94828b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da1f153e5e260f1744ee1bf4f24ca3a74ffea465",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAl3bymkZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqf8JBD/9/oCvz8RKzVg0rs/SqQLDk\n7QzqJnRXow5hBIz7tpGJWxbcnjdycz4slUXoGnOFptZkk9hH8SXmsa7mCnYfWvW/\nN5Hc9VZiVBzXClyzO1PLtMKOSVlerffyhWDUmU6tjugot+WmtlY67bH+AxQlBNA+\nsskrOicidJBlQxVtzqlSaSTnvHXCrSGU0c4TG/DN3Gc9uo+6/BOQXmn9v4dFu3wG\ncs1ADHgSq6dsOtldhRbu/Zx1omseLxwSQ5OopiYIlEybYS2R3pxqCcvuLIdsMMLJ\nxRwfPIgGjP7GXOjIGD1rKIbWZkVz2WnoDZlAwQkmf6ODgCI4SX/Xl89wqdo9UYHA\nlDvvRIcNRsk0GBao1qOig/gYpOfMzkNh4uJWtu3wBXFS4r/lqDZdzVL7ktIDDqFv\nqopHqQCzE7c43bO3ErapyGPUXgVkY3ulIEfr9Egt1qu8hznP0HfvatWII54FxKkw\nDduQ9cwcuqgP+UC2K8RjOiBzWjL1PkvGum+GEGzAG7uSaXZErV9bdpeNvu+Klr6f\nwCz1+qLVdRKAUwj2HiWbL0fJiBylNl98yUY6GeqEnTrp0o7leYlU/Bvv4typx30u\nv1PjxP9/jB28sG/QzA2xnvTqikkMQZSdFOM3lCPykis7r4kNkufMWr/MLlcJRwD4\nysxdCoTNazheIBpmRukgGQ==\n=xOIL\n-----END PGP SIGNATURE-----",
        "payload": "tree 8da1cd4c4aee2eb655e566e54450d155d94828b8\nparent 2fa65e0de94f01d502e8ace89be3c5dc963dd764\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1574683991 +0200\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1574685289 +0200\n\nAdd s390x tests to travis\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da1f153e5e260f1744ee1bf4f24ca3a74ffea465",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da1f153e5e260f1744ee1bf4f24ca3a74ffea465",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da1f153e5e260f1744ee1bf4f24ca3a74ffea465/comments",
    "author": {
      "login": "elichai",
      "id": 2167860,
      "node_id": "MDQ6VXNlcjIxNjc4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elichai",
      "html_url": "https://github.com/elichai",
      "followers_url": "https://api.github.com/users/elichai/followers",
      "following_url": "https://api.github.com/users/elichai/following{/other_user}",
      "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
      "organizations_url": "https://api.github.com/users/elichai/orgs",
      "repos_url": "https://api.github.com/users/elichai/repos",
      "events_url": "https://api.github.com/users/elichai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elichai/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "elichai",
      "id": 2167860,
      "node_id": "MDQ6VXNlcjIxNjc4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elichai",
      "html_url": "https://github.com/elichai",
      "followers_url": "https://api.github.com/users/elichai/followers",
      "following_url": "https://api.github.com/users/elichai/following{/other_user}",
      "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
      "organizations_url": "https://api.github.com/users/elichai/orgs",
      "repos_url": "https://api.github.com/users/elichai/repos",
      "events_url": "https://api.github.com/users/elichai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elichai/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fa65e0de94f01d502e8ace89be3c5dc963dd764",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fa65e0de94f01d502e8ace89be3c5dc963dd764",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fa65e0de94f01d502e8ace89be3c5dc963dd764"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6612d5e4d111aa2d9bd22e2afeaad555c8e4dbb7",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da1f153e5e260f1744ee1bf4f24ca3a74ffea465/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da1f153e5e260f1744ee1bf4f24ca3a74ffea465/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=da1f153e5e260f1744ee1bf4f24ca3a74ffea465",
        "patch": "@@ -102,6 +102,12 @@ jobs:\n         FILE_ENV=\"./ci/test/00_setup_env_arm.sh\"\n         QEMU_USER_CMD=\"\"  # Can run the tests natively without qemu\n \n+    - stage: test\n+      name: 'S390x  [GOAL: install]  [unit tests, functional tests]'\n+      arch: s390x\n+      env: >-\n+        FILE_ENV=\"./ci/test/00_setup_env_s390x.sh\"\n+\n     - stage: test\n       name: 'Win64  [GOAL: deploy]  [unit tests, no gui, no functional tests]'\n       env: >-"
      }
    ]
  },
  {
    "sha": "f13e274b6f8ada41ebcd3e746b38c7577074f6f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTNlMjc0YjZmOGFkYTQxZWJjZDNlNzQ2YjM4Yzc1NzcwNzRmNmY5",
    "commit": {
      "author": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2019-11-25T13:35:36Z"
      },
      "committer": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2019-11-25T13:35:36Z"
      },
      "message": "Appveyor install libevent[thread] vcpkg\n\nAs per #17586 the default libevent vcpkg install now has thread disabled. This PR installs libevent with the thread feature enabled.",
      "tree": {
        "sha": "b1a7ea3919733ef70fee5d37ff16601778ab45e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1a7ea3919733ef70fee5d37ff16601778ab45e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f13e274b6f8ada41ebcd3e746b38c7577074f6f9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEnTzIanL4SUNC6l/RCkG9w/T6/xwFAl3b2KgACgkQCkG9w/T6\n/xxCpRAAgs3kkIRnS4CAa5lA/gaz9CqfysTvtROPTQJXH8l9soTIY1nXkjICmkjE\nb5ygV075CMSb7E4rM5+HwARWgQfXvxL+LYPtfthuOR0zaZ+X25V/7P7B+eRPXYI+\nBoWYNzAyjbpDE80QI35FX4j+zBRpxoJt+Hd8XTHWuFu66tuEJTmm+YHBvfvOL+70\ndtX5GjHpWQc1dScyF2u54pfDBZbzvcfoaCR1wViVzhKv/cT1UDOrZOgoA6cCn8S1\nhqdqiDEn42YMfkhrX9ZR9BTuadfrjwfnCUKLsZAIzd/+2ImqZoCZgVKAv0wiq86j\nPMvcWvUYFWfMgt/1MDRFfCF8TGLd3fmA6BllRpfLecvswUHfASF7z/yVrC7pETXc\nzQIBxVvBH9wxL5I1DYBshRx3oYL5Cd5c+WIxLzSdEQih5DPskU32XWXFJZkCpb68\nFy9B0hruKm6dfcBBPx8uXfbHQwqIMGA+kb99KZVaGkBwSJ0yhLRaa/6bncPB71Tw\nVzlKnY6uRzfYaHzIsnZLV++V1AXHC6+2+t5sMzgVoQWcioPuxlmxFpJhRDhIFNmx\nedQ4h679hFf2C25qOgppSR/N1b2xfZhchLDm8ijsSj2pPwxUHfCE2fcB7/isBexp\nSz0uuEFys2RBRuIXIvjeH4CTSx+lJi5tuGdHNwjdIl8nHMW81SA=\n=jC43\n-----END PGP SIGNATURE-----",
        "payload": "tree b1a7ea3919733ef70fee5d37ff16601778ab45e1\nparent e6f167bfdfc056ced2064c7e21f8abbff6e3ff19\nauthor Aaron Clauson <aaron@sipsorcery.com> 1574688936 +0000\ncommitter Aaron Clauson <aaron@sipsorcery.com> 1574688936 +0000\n\nAppveyor install libevent[thread] vcpkg\n\nAs per #17586 the default libevent vcpkg install now has thread disabled. This PR installs libevent with the thread feature enabled.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13e274b6f8ada41ebcd3e746b38c7577074f6f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f13e274b6f8ada41ebcd3e746b38c7577074f6f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13e274b6f8ada41ebcd3e746b38c7577074f6f9/comments",
    "author": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6f167bfdfc056ced2064c7e21f8abbff6e3ff19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6f167bfdfc056ced2064c7e21f8abbff6e3ff19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6f167bfdfc056ced2064c7e21f8abbff6e3ff19"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "27e2bbdcde9236c07c92e3752870306fe254d288",
        "filename": "build_msvc/vcpkg-packages.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13e274b6f8ada41ebcd3e746b38c7577074f6f9/build_msvc/vcpkg-packages.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13e274b6f8ada41ebcd3e746b38c7577074f6f9/build_msvc/vcpkg-packages.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/vcpkg-packages.txt?ref=f13e274b6f8ada41ebcd3e746b38c7577074f6f9",
        "patch": "@@ -1 +1 @@\n-berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent rapidcheck zeromq double-conversion\n\\ No newline at end of file\n+berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] rapidcheck zeromq double-conversion\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "89a1f7a250ef70ff2d65701564f1e24bb9280d90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWExZjdhMjUwZWY3MGZmMmQ2NTcwMTU2NGYxZTI0YmI5MjgwZDkw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-25T15:19:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-25T15:20:00Z"
      },
      "message": "Merge #17592: Appveyor install libevent[thread] vcpkg\n\nf13e274b6f8ada41ebcd3e746b38c7577074f6f9 Appveyor install libevent[thread] vcpkg (Aaron Clauson)\n\nPull request description:\n\n  As per #17586 the default libevent vcpkg install now has thread disabled. This PR installs libevent with the thread feature enabled.\n\nTop commit has no ACKs.\n\nTree-SHA512: 5448113f0444170777400fef3582719845ca50d61d9382dfaacc55c43d477dd714456e38a3094e9b6858d93e84def11c2efa46902b52648c9f0c9362cc909147",
      "tree": {
        "sha": "b1a7ea3919733ef70fee5d37ff16601778ab45e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1a7ea3919733ef70fee5d37ff16601778ab45e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89a1f7a250ef70ff2d65701564f1e24bb9280d90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYLC4pAL7OGskoDms0upIUOdSiyUFAl3b8SAACgkQ0upIUOdS\niyX6xQ/+JEPLazhvpvwSi0ztcJs1NA6Y3HjCoib/jJQ82460ixG1uMz8uYeaa/gw\nOYlstmsHETW1bwZKzq0ZVhoIv3CAeiHc11w+NuKmMc9eDkiyKkSO4H5tNlI94uJU\n/mBR2NUBPjkUqfSC1gYJ92lVhydTlRqeAY0gOydiarwgX+QJar09rkoDkWrYPpeO\n6fs2sllAVKVHmhKXz+Wwa1swSxEMdxXoHSNJ0R85gQhJgfP6lKSSanq4AavTVpkq\nqvYKXPVn+y9hL7MUMCFr2OnKIxIloHow+gMZvAvQwOZwSwsTnLI3alBbu3AzLoZ3\nq9ZjeY5zuNU3kZfTO1AQHWjam0sgQUyuompciYhR9OwZacdPQ5sx1kz7RtAglLHu\na5HjzAXCD59oVuUd6xDdcZuCv/8pWsnkund1FioZ3cxCajoY1onVBP7BGRxXB/6q\n9mcfmzTsf9p3uY7bhfISdSFopbJV8oVWMO6eGJxqciLCp5esa9LkZ+soCOD3GsIX\nI7UopiBY4UundOIucavpSx0E6Sbey/ISCLSkXHGZE0AO7XFwgWCG7YyvvKS9j9bW\nHMJh6yAwh0YWXUfV/j5iobE4ZW14pwbU6Vieay7ZwiXrwzS7HFrM5AclB8jbes6F\n+5vZ57VS3EBhiDWIhItBol1k/T3oiaTYAua/874wJV814iHiMbk=\n=TXMi\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIPbdrlUxUrqAG54p+Il2Ez5EGKKFxWfWmW2S51zT1dgDCP/wEBJQjC9hIT+K\nwcMT4xBjaaoI8CBIVqtFM4SA9UQzWoSXpzDZmk/9hKkkls9JHp74NWt2NAjxBF3b\n8SPwCPAFRhdEP4xSAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5l\ndGVybml0eXdhbGwuY29t//AQIXxoMhJdLMQOUz1UA8NXkAjxIOnZUTpYbFc45mtx\nYATeNAwAqDfjNircbkHzSwgO5f1OCPEEXdvxI/AISpp9Fje3ymQAg9/jDS75DI4u\nLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//w\nEMf1mnvEYPLGbn84/34TxYEI8QRd2/Ek8AgiWA0unRKgngCD3+MNLvkMjiwraHR0\ncHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ/UkryHgz\ns+MvXjDeFbu/PgjxINlq3ftKs0ZOgsxCz+B5+z2mzkKDDgzE3MCpIGalhYk4CPEE\nXdvxI/AI3lghhWI18NMAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNh\ndGFsbGF4eS5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree b1a7ea3919733ef70fee5d37ff16601778ab45e1\nparent e6f167bfdfc056ced2064c7e21f8abbff6e3ff19\nparent f13e274b6f8ada41ebcd3e746b38c7577074f6f9\nauthor MarcoFalke <falke.marco@gmail.com> 1574695196 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1574695200 -0500\n\nMerge #17592: Appveyor install libevent[thread] vcpkg\n\nf13e274b6f8ada41ebcd3e746b38c7577074f6f9 Appveyor install libevent[thread] vcpkg (Aaron Clauson)\n\nPull request description:\n\n  As per #17586 the default libevent vcpkg install now has thread disabled. This PR installs libevent with the thread feature enabled.\n\nTop commit has no ACKs.\n\nTree-SHA512: 5448113f0444170777400fef3582719845ca50d61d9382dfaacc55c43d477dd714456e38a3094e9b6858d93e84def11c2efa46902b52648c9f0c9362cc909147\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89a1f7a250ef70ff2d65701564f1e24bb9280d90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89a1f7a250ef70ff2d65701564f1e24bb9280d90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89a1f7a250ef70ff2d65701564f1e24bb9280d90/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6f167bfdfc056ced2064c7e21f8abbff6e3ff19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6f167bfdfc056ced2064c7e21f8abbff6e3ff19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6f167bfdfc056ced2064c7e21f8abbff6e3ff19"
      },
      {
        "sha": "f13e274b6f8ada41ebcd3e746b38c7577074f6f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13e274b6f8ada41ebcd3e746b38c7577074f6f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f13e274b6f8ada41ebcd3e746b38c7577074f6f9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "27e2bbdcde9236c07c92e3752870306fe254d288",
        "filename": "build_msvc/vcpkg-packages.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89a1f7a250ef70ff2d65701564f1e24bb9280d90/build_msvc/vcpkg-packages.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89a1f7a250ef70ff2d65701564f1e24bb9280d90/build_msvc/vcpkg-packages.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/vcpkg-packages.txt?ref=89a1f7a250ef70ff2d65701564f1e24bb9280d90",
        "patch": "@@ -1 +1 @@\n-berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent rapidcheck zeromq double-conversion\n\\ No newline at end of file\n+berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] rapidcheck zeromq double-conversion\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "f613e5dfdafe708f63ebb5193c44e2bc770c6651",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjEzZTVkZmRhZmU3MDhmNjNlYmI1MTkzYzQ0ZTJiYzc3MGM2NjUx",
    "commit": {
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2019-11-25T01:44:40Z"
      },
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2019-11-25T15:40:03Z"
      },
      "message": "[test] move mining helper functions into test library",
      "tree": {
        "sha": "e5ea15d63a856feb8bbda714507615838bbc71bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5ea15d63a856feb8bbda714507615838bbc71bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f613e5dfdafe708f63ebb5193c44e2bc770c6651",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f613e5dfdafe708f63ebb5193c44e2bc770c6651",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f613e5dfdafe708f63ebb5193c44e2bc770c6651",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f613e5dfdafe708f63ebb5193c44e2bc770c6651/comments",
    "author": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 79,
      "deletions": 59
    },
    "files": [
      {
        "sha": "139b709569233c00e9ed592202d382d0f3420d71",
        "filename": "src/Makefile.test_util.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f613e5dfdafe708f63ebb5193c44e2bc770c6651/src/Makefile.test_util.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f613e5dfdafe708f63ebb5193c44e2bc770c6651/src/Makefile.test_util.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_util.include?ref=f613e5dfdafe708f63ebb5193c44e2bc770c6651",
        "patch": "@@ -10,6 +10,7 @@ EXTRA_LIBRARIES += \\\n TEST_UTIL_H = \\\n     test/util/blockfilter.h \\\n     test/util/logging.h \\\n+    test/util/mining.h \\\n     test/util/setup_common.h \\\n     test/util/str.h \\\n     test/util/transaction_utils.h\n@@ -19,6 +20,7 @@ libtest_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libtest_util_a_SOURCES = \\\n   test/util/blockfilter.cpp \\\n   test/util/logging.cpp \\\n+  test/util/mining.cpp \\\n   test/util/setup_common.cpp \\\n   test/util/str.cpp \\\n   test/util/transaction_utils.cpp \\\n@@ -28,4 +30,3 @@ LIBTEST_UTIL += $(LIBBITCOIN_SERVER)\n LIBTEST_UTIL += $(LIBBITCOIN_COMMON)\n LIBTEST_UTIL += $(LIBBITCOIN_UTIL)\n LIBTEST_UTIL += $(LIBBITCOIN_CRYPTO_BASE)\n-"
      },
      {
        "sha": "2ccae0c6675641cfb016989ee00a173970c9de42",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f613e5dfdafe708f63ebb5193c44e2bc770c6651/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f613e5dfdafe708f63ebb5193c44e2bc770c6651/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=f613e5dfdafe708f63ebb5193c44e2bc770c6651",
        "patch": "@@ -6,6 +6,7 @@\n #include <consensus/validation.h>\n #include <crypto/sha256.h>\n #include <test/util.h>\n+#include <test/util/mining.h>\n #include <txmempool.h>\n #include <validation.h>\n "
      },
      {
        "sha": "bd79ddfdd6d498cb26d12852daa4fc7f0424d3d2",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f613e5dfdafe708f63ebb5193c44e2bc770c6651/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f613e5dfdafe708f63ebb5193c44e2bc770c6651/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=f613e5dfdafe708f63ebb5193c44e2bc770c6651",
        "patch": "@@ -7,6 +7,7 @@\n #include <node/context.h>\n #include <optional.h>\n #include <test/util.h>\n+#include <test/util/mining.h>\n #include <validationinterface.h>\n #include <wallet/wallet.h>\n "
      },
      {
        "sha": "e775ad323ba9bd55f12764c718cb6e2fd201cdc6",
        "filename": "src/test/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 44,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f613e5dfdafe708f63ebb5193c44e2bc770c6651/src/test/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f613e5dfdafe708f63ebb5193c44e2bc770c6651/src/test/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util.cpp?ref=f613e5dfdafe708f63ebb5193c44e2bc770c6651",
        "patch": "@@ -4,15 +4,9 @@\n \n #include <test/util.h>\n \n-#include <chainparams.h>\n-#include <consensus/merkle.h>\n #include <key_io.h>\n-#include <miner.h>\n #include <outputtype.h>\n-#include <pow.h>\n #include <script/standard.h>\n-#include <validation.h>\n-#include <validationinterface.h>\n #ifdef ENABLE_WALLET\n #include <wallet/wallet.h>\n #endif\n@@ -44,41 +38,3 @@ void importaddress(CWallet& wallet, const std::string& address)\n     wallet.SetAddressBook(dest, /* label */ \"\", \"receive\");\n }\n #endif // ENABLE_WALLET\n-\n-CTxIn generatetoaddress(const std::string& address)\n-{\n-    const auto dest = DecodeDestination(address);\n-    assert(IsValidDestination(dest));\n-    const auto coinbase_script = GetScriptForDestination(dest);\n-\n-    return MineBlock(coinbase_script);\n-}\n-\n-CTxIn MineBlock(const CScript& coinbase_scriptPubKey)\n-{\n-    auto block = PrepareBlock(coinbase_scriptPubKey);\n-\n-    while (!CheckProofOfWork(block->GetHash(), block->nBits, Params().GetConsensus())) {\n-        ++block->nNonce;\n-        assert(block->nNonce);\n-    }\n-\n-    bool processed{ProcessNewBlock(Params(), block, true, nullptr)};\n-    assert(processed);\n-\n-    return CTxIn{block->vtx[0]->GetHash(), 0};\n-}\n-\n-std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey)\n-{\n-    auto block = std::make_shared<CBlock>(\n-        BlockAssembler{Params()}\n-            .CreateNewBlock(coinbase_scriptPubKey)\n-            ->block);\n-\n-    LOCK(cs_main);\n-    block->nTime = ::ChainActive().Tip()->GetMedianTimePast() + 1;\n-    block->hashMerkleRoot = BlockMerkleRoot(*block);\n-\n-    return block;\n-}"
      },
      {
        "sha": "7adeaea7721168ec672b7ab47221333258ba2999",
        "filename": "src/test/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f613e5dfdafe708f63ebb5193c44e2bc770c6651/src/test/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f613e5dfdafe708f63ebb5193c44e2bc770c6651/src/test/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util.h?ref=f613e5dfdafe708f63ebb5193c44e2bc770c6651",
        "patch": "@@ -5,33 +5,19 @@\n #ifndef BITCOIN_TEST_UTIL_H\n #define BITCOIN_TEST_UTIL_H\n \n-#include <memory>\n #include <string>\n \n-class CBlock;\n-class CScript;\n-class CTxIn;\n class CWallet;\n \n // Constants //\n \n extern const std::string ADDRESS_BCRT1_UNSPENDABLE;\n \n-// Lower-level utils //\n-\n-/** Returns the generated coin */\n-CTxIn MineBlock(const CScript& coinbase_scriptPubKey);\n-/** Prepare a block to be mined */\n-std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey);\n-\n-\n // RPC-like //\n \n /** Import the address to the wallet */\n void importaddress(CWallet& wallet, const std::string& address);\n /** Returns a new address from the wallet */\n std::string getnewaddress(CWallet& w);\n-/** Returns the generated coin */\n-CTxIn generatetoaddress(const std::string& address);\n \n #endif // BITCOIN_TEST_UTIL_H"
      },
      {
        "sha": "30f0f5d7e6fe67cf3a74f5c23ffcda9d52078a06",
        "filename": "src/test/util/mining.cpp",
        "status": "added",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f613e5dfdafe708f63ebb5193c44e2bc770c6651/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f613e5dfdafe708f63ebb5193c44e2bc770c6651/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=f613e5dfdafe708f63ebb5193c44e2bc770c6651",
        "patch": "@@ -0,0 +1,51 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/util/mining.h>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <key_io.h>\n+#include <miner.h>\n+#include <pow.h>\n+#include <script/standard.h>\n+#include <validation.h>\n+\n+CTxIn generatetoaddress(const std::string& address)\n+{\n+    const auto dest = DecodeDestination(address);\n+    assert(IsValidDestination(dest));\n+    const auto coinbase_script = GetScriptForDestination(dest);\n+\n+    return MineBlock(coinbase_script);\n+}\n+\n+CTxIn MineBlock(const CScript& coinbase_scriptPubKey)\n+{\n+    auto block = PrepareBlock(coinbase_scriptPubKey);\n+\n+    while (!CheckProofOfWork(block->GetHash(), block->nBits, Params().GetConsensus())) {\n+        ++block->nNonce;\n+        assert(block->nNonce);\n+    }\n+\n+    bool processed{ProcessNewBlock(Params(), block, true, nullptr)};\n+    assert(processed);\n+\n+    return CTxIn{block->vtx[0]->GetHash(), 0};\n+}\n+\n+std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey)\n+{\n+    auto block = std::make_shared<CBlock>(\n+        BlockAssembler{Params()}\n+            .CreateNewBlock(coinbase_scriptPubKey)\n+            ->block);\n+\n+    LOCK(cs_main);\n+    block->nTime = ::ChainActive().Tip()->GetMedianTimePast() + 1;\n+    block->hashMerkleRoot = BlockMerkleRoot(*block);\n+\n+    return block;\n+}"
      },
      {
        "sha": "afe4de684f1bbc4de61dfb383e57c486bd1db89d",
        "filename": "src/test/util/mining.h",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f613e5dfdafe708f63ebb5193c44e2bc770c6651/src/test/util/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f613e5dfdafe708f63ebb5193c44e2bc770c6651/src/test/util/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.h?ref=f613e5dfdafe708f63ebb5193c44e2bc770c6651",
        "patch": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_MINING_H\n+#define BITCOIN_TEST_UTIL_MINING_H\n+\n+#include <memory>\n+#include <string>\n+\n+class CBlock;\n+class CScript;\n+class CTxIn;\n+\n+/** Returns the generated coin */\n+CTxIn MineBlock(const CScript& coinbase_scriptPubKey);\n+\n+/** Prepare a block to be mined */\n+std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey);\n+\n+/** RPC-like helper function, returns the generated coin */\n+CTxIn generatetoaddress(const std::string& address);\n+\n+#endif // BITCOIN_TEST_UTIL_MINING_H"
      }
    ]
  },
  {
    "sha": "78e283e656bf1643944ffdb76185f3468eb25895",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGUyODNlNjU2YmYxNjQzOTQ0ZmZkYjc2MTg1ZjM0NjhlYjI1ODk1",
    "commit": {
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2019-11-25T12:57:47Z"
      },
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2019-11-25T15:40:09Z"
      },
      "message": "[test] move wallet helper functions into test library",
      "tree": {
        "sha": "a80dd0ba15cf71e5d92709cf30d96d35cc403365",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a80dd0ba15cf71e5d92709cf30d96d35cc403365"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78e283e656bf1643944ffdb76185f3468eb25895",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78e283e656bf1643944ffdb76185f3468eb25895",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78e283e656bf1643944ffdb76185f3468eb25895",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78e283e656bf1643944ffdb76185f3468eb25895/comments",
    "author": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f613e5dfdafe708f63ebb5193c44e2bc770c6651",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f613e5dfdafe708f63ebb5193c44e2bc770c6651",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f613e5dfdafe708f63ebb5193c44e2bc770c6651"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 11,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1c97e22de8ca3374954f6f1d5099a52aac8d4d6e",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78e283e656bf1643944ffdb76185f3468eb25895/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78e283e656bf1643944ffdb76185f3468eb25895/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=78e283e656bf1643944ffdb76185f3468eb25895",
        "patch": "@@ -39,9 +39,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/bech32.cpp \\\n   bench/lockedpool.cpp \\\n   bench/poly1305.cpp \\\n-  bench/prevector.cpp \\\n-  test/util.h \\\n-  test/util.cpp\n+  bench/prevector.cpp\n \n nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n "
      },
      {
        "sha": "505d630b7d53ee58192ed70ee82eb3c96ac2a8b4",
        "filename": "src/Makefile.test_util.include",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78e283e656bf1643944ffdb76185f3468eb25895/src/Makefile.test_util.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78e283e656bf1643944ffdb76185f3468eb25895/src/Makefile.test_util.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_util.include?ref=78e283e656bf1643944ffdb76185f3468eb25895",
        "patch": "@@ -13,7 +13,8 @@ TEST_UTIL_H = \\\n     test/util/mining.h \\\n     test/util/setup_common.h \\\n     test/util/str.h \\\n-    test/util/transaction_utils.h\n+    test/util/transaction_utils.h \\\n+    test/util/wallet.h\n \n libtest_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)\n libtest_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n@@ -24,6 +25,7 @@ libtest_util_a_SOURCES = \\\n   test/util/setup_common.cpp \\\n   test/util/str.cpp \\\n   test/util/transaction_utils.cpp \\\n+  test/util/wallet.cpp \\\n   $(TEST_UTIL_H)\n \n LIBTEST_UTIL += $(LIBBITCOIN_SERVER)"
      },
      {
        "sha": "184367e1e5d7b3c2cba9d7cac151d6f30845c5ff",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78e283e656bf1643944ffdb76185f3468eb25895/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78e283e656bf1643944ffdb76185f3468eb25895/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=78e283e656bf1643944ffdb76185f3468eb25895",
        "patch": "@@ -5,8 +5,8 @@\n #include <bench/bench.h>\n #include <consensus/validation.h>\n #include <crypto/sha256.h>\n-#include <test/util.h>\n #include <test/util/mining.h>\n+#include <test/util/wallet.h>\n #include <txmempool.h>\n #include <validation.h>\n "
      },
      {
        "sha": "f39dcc0b71b420ee80e61b31ea7835023134f6bf",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78e283e656bf1643944ffdb76185f3468eb25895/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78e283e656bf1643944ffdb76185f3468eb25895/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=78e283e656bf1643944ffdb76185f3468eb25895",
        "patch": "@@ -6,8 +6,8 @@\n #include <interfaces/chain.h>\n #include <node/context.h>\n #include <optional.h>\n-#include <test/util.h>\n #include <test/util/mining.h>\n+#include <test/util/wallet.h>\n #include <validationinterface.h>\n #include <wallet/wallet.h>\n "
      },
      {
        "sha": "226d2df6e40ee929728ec87737de9b1c5dbe30bd",
        "filename": "src/test/util/wallet.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78e283e656bf1643944ffdb76185f3468eb25895/src/test/util/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78e283e656bf1643944ffdb76185f3468eb25895/src/test/util/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/wallet.cpp?ref=78e283e656bf1643944ffdb76185f3468eb25895",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <test/util.h>\n+#include <test/util/wallet.h>\n \n #include <key_io.h>\n #include <outputtype.h>",
        "previous_filename": "src/test/util.cpp"
      },
      {
        "sha": "565ef1756a6cdff11e7daf3a4c992ace22535b26",
        "filename": "src/test/util/wallet.h",
        "status": "renamed",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78e283e656bf1643944ffdb76185f3468eb25895/src/test/util/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78e283e656bf1643944ffdb76185f3468eb25895/src/test/util/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/wallet.h?ref=78e283e656bf1643944ffdb76185f3468eb25895",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_TEST_UTIL_H\n-#define BITCOIN_TEST_UTIL_H\n+#ifndef BITCOIN_TEST_UTIL_WALLET_H\n+#define BITCOIN_TEST_UTIL_WALLET_H\n \n #include <string>\n \n@@ -20,4 +20,5 @@ void importaddress(CWallet& wallet, const std::string& address);\n /** Returns a new address from the wallet */\n std::string getnewaddress(CWallet& w);\n \n-#endif // BITCOIN_TEST_UTIL_H\n+\n+#endif // BITCOIN_TEST_UTIL_WALLET_H",
        "previous_filename": "src/test/util.h"
      }
    ]
  },
  {
    "sha": "41d7db0b60375533934af3e3b48043e6de944bd1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWQ3ZGIwYjYwMzc1NTMzOTM0YWYzZTNiNDgwNDNlNmRlOTQ0YmQx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-25T18:20:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-25T18:20:49Z"
      },
      "message": "doc: Change doxygen URL to doxygen.bitcoincore.org\n\nThe bitcoin core doxygen documentation has moved to\nhttps://doxygen.bitcoincore.org, see\nbitcoin-core/bitcoincore.org#681\n\n(the old URL still works as a redirect)",
      "tree": {
        "sha": "7b9a391059e3b4b7b27c66bf178c79d69f92f014",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b9a391059e3b4b7b27c66bf178c79d69f92f014"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41d7db0b60375533934af3e3b48043e6de944bd1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41d7db0b60375533934af3e3b48043e6de944bd1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41d7db0b60375533934af3e3b48043e6de944bd1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41d7db0b60375533934af3e3b48043e6de944bd1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89a1f7a250ef70ff2d65701564f1e24bb9280d90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89a1f7a250ef70ff2d65701564f1e24bb9280d90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89a1f7a250ef70ff2d65701564f1e24bb9280d90"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4dd21c4620f802a2784059177a03461260f36ef8",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41d7db0b60375533934af3e3b48043e6de944bd1/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41d7db0b60375533934af3e3b48043e6de944bd1/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=41d7db0b60375533934af3e3b48043e6de944bd1",
        "patch": "@@ -54,7 +54,7 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n - [Productivity Notes](productivity.md)\n - [Release Notes](release-notes.md)\n - [Release Process](release-process.md)\n-- [Source Code Documentation (External Link)](https://dev.visucore.com/bitcoin/doxygen/)\n+- [Source Code Documentation (External Link)](https://doxygen.bitcoincore.org/)\n - [Translation Process](translation_process.md)\n - [Translation Strings Policy](translation_strings_policy.md)\n - [JSON-RPC Interface](JSON-RPC-interface.md)"
      }
    ]
  },
  {
    "sha": "12230529e330aefc0fbd37811b8837e96bf40cad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjIzMDUyOWUzMzBhZWZjMGZiZDM3ODExYjg4MzdlOTZiZjQwY2Fk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-25T19:08:15Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-25T19:20:23Z"
      },
      "message": "Merge #17596: doc: Change doxygen URL to doxygen.bitcoincore.org\n\n41d7db0b60375533934af3e3b48043e6de944bd1 doc: Change doxygen URL to doxygen.bitcoincore.org (Wladimir J. van der Laan)\n\nPull request description:\n\n  The bitcoin core doxygen documentation has moved to https://doxygen.bitcoincore.org, see bitcoin-core/bitcoincore.org#681\n\n  (the old URL still works as a redirect)\n\nACKs for top commit:\n  Sjors:\n    ACK 41d7db0b60375533934af3e3b48043e6de944bd1 based on a short spot check.\n  fanquake:\n    ACK 41d7db0b60375533934af3e3b48043e6de944bd1 - also checked the redirect.\n\nTree-SHA512: e6fa0477b7825e3557c1b3bed8c5a37c33188ddcba43e6a19f95d86618408f7d04bbaeb64bd79181930c5af1252ca5c462e3f7a850bfffa39a8f62bcccbb4260",
      "tree": {
        "sha": "7b9a391059e3b4b7b27c66bf178c79d69f92f014",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b9a391059e3b4b7b27c66bf178c79d69f92f014"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12230529e330aefc0fbd37811b8837e96bf40cad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3cKXcACgkQLuufXMCV\nJsFdfg/+JXmLOq9R4eY+3XTCUaxtFuoi1DSO6hakYKvMV3+A+Wmq/4YelChmEKHK\ntmyWgta4f9xQMh6mQSqtLk8zaH/tF0DqG/d+UGTofhLKEsGGhx4lCdx5dqTObmfv\nYVSCLeW/FAdR7S5H/u8Dcw5jSdLgiLAbIzSULX1rELtcNbV9Jp4cZpC059xYs0xP\nkzESaDWywgV+K4ZAzTpX+UwKmTnf3bGT71Ei73tqxlmtLbQ3HpHUEUmRP1tO2jtS\nLCEDoM9c3qDbzKVPGHq4+v25D5/THlfKrbXrMAFcb0iRAk8Mx0DIuwsFmXwEa34q\nSyfOTD99yZPM8fK3IiRycJCOPdER7pXRcUHH7cUI7WgWurprEtF/bRNnNaIr5G4S\n6BGPvAdLs6lSdW55LB5g1whoSKFd40a2sYYn1OhAaiILZg6NRNPpqZCH99TkIpvx\nlAFMTi7MCj56p49Nve6PusuidGyL9l7kRcX7b384MrIL1Q4ONqk+5yKtyAT/AoBF\nExvIZGI14jvDS0TXBNfRywsmelNPcHDK66/EML1d4Lhu9I6EwYVOwRniZ/Ssqrhg\n/LScW5uL9I5SMQhZztPqRXH/LfURFRpgRfoS/GW0w7ck8BA4L1RYLHBflSPjkxyf\nFJoDRFvTngjNchxwqnFcK8oNTJh5m6kmH2vhP/A1eYCOrPmjlbM=\n=crSz\n-----END PGP SIGNATURE-----",
        "payload": "tree 7b9a391059e3b4b7b27c66bf178c79d69f92f014\nparent 89a1f7a250ef70ff2d65701564f1e24bb9280d90\nparent 41d7db0b60375533934af3e3b48043e6de944bd1\nauthor fanquake <fanquake@gmail.com> 1574708895 -0500\ncommitter fanquake <fanquake@gmail.com> 1574709623 -0500\n\nMerge #17596: doc: Change doxygen URL to doxygen.bitcoincore.org\n\n41d7db0b60375533934af3e3b48043e6de944bd1 doc: Change doxygen URL to doxygen.bitcoincore.org (Wladimir J. van der Laan)\n\nPull request description:\n\n  The bitcoin core doxygen documentation has moved to https://doxygen.bitcoincore.org, see bitcoin-core/bitcoincore.org#681\n\n  (the old URL still works as a redirect)\n\nACKs for top commit:\n  Sjors:\n    ACK 41d7db0b60375533934af3e3b48043e6de944bd1 based on a short spot check.\n  fanquake:\n    ACK 41d7db0b60375533934af3e3b48043e6de944bd1 - also checked the redirect.\n\nTree-SHA512: e6fa0477b7825e3557c1b3bed8c5a37c33188ddcba43e6a19f95d86618408f7d04bbaeb64bd79181930c5af1252ca5c462e3f7a850bfffa39a8f62bcccbb4260\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12230529e330aefc0fbd37811b8837e96bf40cad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12230529e330aefc0fbd37811b8837e96bf40cad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12230529e330aefc0fbd37811b8837e96bf40cad/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89a1f7a250ef70ff2d65701564f1e24bb9280d90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89a1f7a250ef70ff2d65701564f1e24bb9280d90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89a1f7a250ef70ff2d65701564f1e24bb9280d90"
      },
      {
        "sha": "41d7db0b60375533934af3e3b48043e6de944bd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41d7db0b60375533934af3e3b48043e6de944bd1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41d7db0b60375533934af3e3b48043e6de944bd1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4dd21c4620f802a2784059177a03461260f36ef8",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12230529e330aefc0fbd37811b8837e96bf40cad/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12230529e330aefc0fbd37811b8837e96bf40cad/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=12230529e330aefc0fbd37811b8837e96bf40cad",
        "patch": "@@ -54,7 +54,7 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n - [Productivity Notes](productivity.md)\n - [Release Notes](release-notes.md)\n - [Release Process](release-process.md)\n-- [Source Code Documentation (External Link)](https://dev.visucore.com/bitcoin/doxygen/)\n+- [Source Code Documentation (External Link)](https://doxygen.bitcoincore.org/)\n - [Translation Process](translation_process.md)\n - [Translation Strings Policy](translation_strings_policy.md)\n - [JSON-RPC Interface](JSON-RPC-interface.md)"
      }
    ]
  },
  {
    "sha": "2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzFjNDM3NTRiN2EyOWUyZmM4NTJjMmFkNjQzMGJhMjdhYTJkN2Ri",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-25T19:57:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-25T19:57:40Z"
      },
      "message": "Merge #17591: ci: Add big endian platform - s390x\n\nda1f153e5e260f1744ee1bf4f24ca3a74ffea465 Add s390x tests to travis (Elichai Turkel)\n2fa65e0de94f01d502e8ace89be3c5dc963dd764 Add ci script to install on s390x (Elichai Turkel)\n\nPull request description:\n\n  Discovered this as part of #17402 and a conversation with gmaxwell.\n\n  You can see here that the platform is indeed BE: https://travis-ci.org/elichai/bitcoin/jobs/616656410#L36\n\n  This closes https://github.com/bitcoin/bitcoin/issues/6466\n\nACKs for top commit:\n  MarcoFalke:\n    ACK da1f153e5e260f1744ee1bf4f24ca3a74ffea465\n\nTree-SHA512: e7e94e54e220257d91b24fddc79eab2bcaaadf0b2d1e7e6872d9757808ab2541728f00b1f3ab7e343305c0e7d91bb48a17a3f9621f6fff6c9fe6cde6682de408",
      "tree": {
        "sha": "638aa9c47752505b868a945741ece8c17b1105f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/638aa9c47752505b868a945741ece8c17b1105f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYLC4pAL7OGskoDms0upIUOdSiyUFAl3cMjUACgkQ0upIUOdS\niyWF7g/9EOijHHwer9hMbFLKJv1sYPdP1o4KhWAE7+BesVx4bfOUrPq2z/yIS9jX\nDwjGCpzuBwULYz2Pl2H58fb3urC3iwCwc8F2O0HlUNCvOtGWi3eVQ+OoeNRIGzun\nRbfELb9QrEMY/WUtfKkkcj4HiAPtGKPmzQB8MQo3RdgxsirszOZQJl2canZYSoii\n9N8f5zrBGM0cmSD7L/i9du14xHzuTc+XMPVyLu+yroGKy0kbSuOB9pqoK5BE/Dz6\nlSKWpAoCLutN1tyagpVLHbWfz7tey6yX0IIyLcjjRggk7WB9la6GxSuBYcldmw/l\n61YdCfJZG7qvvsXyWOFUdmYrjMHWrtnwngi1QZ7Tdr7R/HPUj29SSr6rJz+cIk0t\nYFlFZEtJKO/WK3drH3reiD2vUo8VVU+ZcQoohtDMxX9kSdhRnW5jPUQ+LQ1mQUXS\nl78F1Dkr3NC60WZcpfZTnRfC4Rmj7pLLlUCYJPmif0ropmPHOtx49gYXGhD1cCry\nPY3waSm+w8dlPPtS45oY8o34o4WyzDypsenkMnNIgAkTznvnZDO2bXmezpz2s9iE\nsrlNDZlz5hQlva9RzrK+Gm452EaEsJIwewwdo7V/k9FUhvjTpmULbAt3wpIFWMJQ\nRuaKhHHFyISb/nIx8PQHvxKQ3rxvfenMoi2F8LAEgcGm94okpls=\n=wYAc\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHEHMTKGvWsBSiIcm9qCXCJDusoxHoDHfFGh35mgtHBqCP/wECnd6I2obR/J\nitT8LTw6XdoI8CAVXDChDr1DsGom21E4DHIEMpQXscz6uLDY/MIQSuf36AjxBF3c\nMjjwCFtKKCFJ4jtSAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5l\ndGVybml0eXdhbGwuY29t//AQRCPXfEBS4LHi6j0O6PuliwjxIOVblP5df/pQh9IM\nLIwhPJWXn1A+IMBf4C33PLxf8JkXCPEEXdwyN/AIMVrBk+rgz40Ag9/jDS75DI4u\nLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//w\nELNcZaiIWtWM1NiTa9d9xCwI8SBktUpFylLS1XeI2AGgioPn1XXcmN6yq9TuIZ5Q\nbLj/dAjxBF3cMjfwCPRU1I6BFRigAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BD/ht6BfTS34IQHNWwl2sfcCPEE\nXdwyNvAIattCRQDoNmgAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNh\ndGFsbGF4eS5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 638aa9c47752505b868a945741ece8c17b1105f4\nparent 12230529e330aefc0fbd37811b8837e96bf40cad\nparent da1f153e5e260f1744ee1bf4f24ca3a74ffea465\nauthor MarcoFalke <falke.marco@gmail.com> 1574711857 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1574711860 -0500\n\nMerge #17591: ci: Add big endian platform - s390x\n\nda1f153e5e260f1744ee1bf4f24ca3a74ffea465 Add s390x tests to travis (Elichai Turkel)\n2fa65e0de94f01d502e8ace89be3c5dc963dd764 Add ci script to install on s390x (Elichai Turkel)\n\nPull request description:\n\n  Discovered this as part of #17402 and a conversation with gmaxwell.\n\n  You can see here that the platform is indeed BE: https://travis-ci.org/elichai/bitcoin/jobs/616656410#L36\n\n  This closes https://github.com/bitcoin/bitcoin/issues/6466\n\nACKs for top commit:\n  MarcoFalke:\n    ACK da1f153e5e260f1744ee1bf4f24ca3a74ffea465\n\nTree-SHA512: e7e94e54e220257d91b24fddc79eab2bcaaadf0b2d1e7e6872d9757808ab2541728f00b1f3ab7e343305c0e7d91bb48a17a3f9621f6fff6c9fe6cde6682de408\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12230529e330aefc0fbd37811b8837e96bf40cad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12230529e330aefc0fbd37811b8837e96bf40cad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12230529e330aefc0fbd37811b8837e96bf40cad"
      },
      {
        "sha": "da1f153e5e260f1744ee1bf4f24ca3a74ffea465",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da1f153e5e260f1744ee1bf4f24ca3a74ffea465",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da1f153e5e260f1744ee1bf4f24ca3a74ffea465"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6612d5e4d111aa2d9bd22e2afeaad555c8e4dbb7",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db",
        "patch": "@@ -102,6 +102,12 @@ jobs:\n         FILE_ENV=\"./ci/test/00_setup_env_arm.sh\"\n         QEMU_USER_CMD=\"\"  # Can run the tests natively without qemu\n \n+    - stage: test\n+      name: 'S390x  [GOAL: install]  [unit tests, functional tests]'\n+      arch: s390x\n+      env: >-\n+        FILE_ENV=\"./ci/test/00_setup_env_s390x.sh\"\n+\n     - stage: test\n       name: 'Win64  [GOAL: deploy]  [unit tests, no gui, no functional tests]'\n       env: >-"
      },
      {
        "sha": "b41d44c61aefb7015ef079f190798ea9d21b356f",
        "filename": "ci/test/00_setup_env_s390x.sh",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db/ci/test/00_setup_env_s390x.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db/ci/test/00_setup_env_s390x.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_s390x.sh?ref=2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db",
        "patch": "@@ -0,0 +1,18 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export HOST=s390x-unknown-linux-gnu\n+export DOCKER_NAME_TAG=s390x/ubuntu:18.04\n+export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n+export NO_DEPENDS=1\n+export RUN_UNIT_TESTS=true\n+export RUN_FUNCTIONAL_TESTS=false\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--enable-reduce-exports --with-incompatible-bdb\"\n+\n+lscpu"
      }
    ]
  },
  {
    "sha": "fa94fc10c881e502e6c9a71f3b7719aa955900f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTk0ZmMxMGM4ODFlNTAyZTZjOWE3MWYzYjc3MTlhYTk1NTkwMGY5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-25T20:08:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-25T20:07:28Z"
      },
      "message": "ci: Run functional tests on s390x",
      "tree": {
        "sha": "6717aa257ac453ca37a0d16cf19a5be6898fc0cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6717aa257ac453ca37a0d16cf19a5be6898fc0cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa94fc10c881e502e6c9a71f3b7719aa955900f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiBZQwAiRNUBlhQWiptb5wLWgoZ0t0wfNW+4JWUC3xtHM28dhdT7iAyEWu6yzjH\nIh8quowUao4bpD3OVysJgwCV+5vk9zmgcvUGQteQCYeQJxpi+23pz6bHc38FkvPH\nBbg+sbOd36RWNDxGu1dleyv4PM7Sb4mMQVcbIH8mx4igkmpHyeMi4rDbH/CYL8E9\nDj93envBGGnmYxjLwuFjTqKkpvZGexVtTH1BB6phQr7RSkTsYHm+bnvVRp+aOitm\ncLxdyUxRzb+nfzQJicHbQ9X5NIqBOznciyZsXbFe9RKFxRsMCetGruG1Oo9/9HAy\nwheIvf5AAkTfoATarBkOFAJ/N/688gkkscKkpY2844ubPL98DJxGeuTlDYcfWX0/\ny8cLVAZGql6Dc6DpbUMgU1ewlzA1//poZVRmhrota5goE9FBFaja11WoH5xdnp3V\nWnyIGUjA6JaLLt+51j/y8Ftvm8xzi6C7A/6dPtYo6pbcEbfASpOtQJSTG8HmCJUP\nX+FZ9lka\n=wjAj\n-----END PGP SIGNATURE-----",
        "payload": "tree 6717aa257ac453ca37a0d16cf19a5be6898fc0cb\nparent 2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db\nauthor MarcoFalke <falke.marco@gmail.com> 1574712517 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1574712448 -0500\n\nci: Run functional tests on s390x\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa94fc10c881e502e6c9a71f3b7719aa955900f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa94fc10c881e502e6c9a71f3b7719aa955900f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa94fc10c881e502e6c9a71f3b7719aa955900f9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 4,
      "deletions": 7
    },
    "files": [
      {
        "sha": "1c19145166841487dbbfd2fbfebe779b1257e3dc",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa94fc10c881e502e6c9a71f3b7719aa955900f9/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa94fc10c881e502e6c9a71f3b7719aa955900f9/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=fa94fc10c881e502e6c9a71f3b7719aa955900f9",
        "patch": "@@ -96,14 +96,14 @@ jobs:\n         - set -o errexit; source ./ci/extended_lint/06_script.sh\n \n     - stage: test\n-      name: 'ARM  [GOAL: install]  [unit tests, functional tests]'\n+      name: 'ARM  [GOAL: install]  [bionic]  [unit tests, functional tests]'\n       arch: arm64\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_arm.sh\"\n         QEMU_USER_CMD=\"\"  # Can run the tests natively without qemu\n \n     - stage: test\n-      name: 'S390x  [GOAL: install]  [unit tests, functional tests]'\n+      name: 'S390x  [GOAL: install]  [bionic]  [unit tests, functional tests]'\n       arch: s390x\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_s390x.sh\""
      },
      {
        "sha": "89660c7fa4d5c8e5d64f6bbcfb79399355b8c398",
        "filename": "ci/test/00_setup_env_s390x.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa94fc10c881e502e6c9a71f3b7719aa955900f9/ci/test/00_setup_env_s390x.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa94fc10c881e502e6c9a71f3b7719aa955900f9/ci/test/00_setup_env_s390x.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_s390x.sh?ref=fa94fc10c881e502e6c9a71f3b7719aa955900f9",
        "patch": "@@ -7,12 +7,9 @@\n export LC_ALL=C.UTF-8\n \n export HOST=s390x-unknown-linux-gnu\n-export DOCKER_NAME_TAG=s390x/ubuntu:18.04\n-export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n+export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n export NO_DEPENDS=1\n export RUN_UNIT_TESTS=true\n-export RUN_FUNCTIONAL_TESTS=false\n+export RUN_FUNCTIONAL_TESTS=true\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-reduce-exports --with-incompatible-bdb\"\n-\n-lscpu"
      }
    ]
  },
  {
    "sha": "fad9fdbea5dfb19328282afda9588edc6f1d0ddf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWQ5ZmRiZWE1ZGZiMTkzMjgyODJhZmRhOTU4OGVkYzZmMWQwZGRm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-25T20:30:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-25T20:27:50Z"
      },
      "message": "test: Properly deserialize integers in little-endian",
      "tree": {
        "sha": "8f8bf81a9a94e1016bc266b1ca20f4858e5140e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f8bf81a9a94e1016bc266b1ca20f4858e5140e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad9fdbea5dfb19328282afda9588edc6f1d0ddf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhbQQv+IUMi1iMXNcqXSPT6e2zwNdtL5zxJmxf/ArNB42WVsxXPqpzex44+L7eJ\nBJFSCL0CdFJ2g1J7INg2um5GcP4tBKfmWs8JGi84TWGJYIoFhpg1utsK6nV/xHyE\nQXtBKe3XBxSQY9DzRlMYZ/ZZT1lyxzAr4Dhi/JRvhJVuchnYdmP7ihmJkIrCxleN\nyzJJ/yG8OQYzTDegIFS4YqDdAg0ptnzBNrwvybacE+JGHc+UHTbAkOVoNO4ZHhar\nLjb+R38VuQobi/1fvnQv3snw5sKQW9IgFm+wrVsSwQD4QZEN54l0ni0i65xQDgPw\nBT1qYbhSFGOWyAv9RnVMH7K6hxX5NzkPleG9jGVoUOWt9qWcQpn0tKz1ddrZNYZ0\nrhi29p2ro3ypqLL6J0wHIKLR5auLKOmhs/QrSzQnceLleuCgIYaIFkX7s2Xidinc\n4gWJRFcRyUCzh1EtKfSC6tUBsdiIdyoVmZujr/983AkD5uTDTmMgh74PhZ+4xdQh\nPP2DDIEN\n=fjPl\n-----END PGP SIGNATURE-----",
        "payload": "tree 8f8bf81a9a94e1016bc266b1ca20f4858e5140e4\nparent fa94fc10c881e502e6c9a71f3b7719aa955900f9\nauthor MarcoFalke <falke.marco@gmail.com> 1574713801 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1574713670 -0500\n\ntest: Properly deserialize integers in little-endian\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad9fdbea5dfb19328282afda9588edc6f1d0ddf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad9fdbea5dfb19328282afda9588edc6f1d0ddf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad9fdbea5dfb19328282afda9588edc6f1d0ddf/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa94fc10c881e502e6c9a71f3b7719aa955900f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa94fc10c881e502e6c9a71f3b7719aa955900f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa94fc10c881e502e6c9a71f3b7719aa955900f9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "797fcc828a30ff059a4160ebf3006afd678cca7c",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9fdbea5dfb19328282afda9588edc6f1d0ddf/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9fdbea5dfb19328282afda9588edc6f1d0ddf/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=fad9fdbea5dfb19328282afda9588edc6f1d0ddf",
        "patch": "@@ -151,7 +151,7 @@ def run_test(self):\n \n         bin_response = self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body=bin_request, ret_type=RetType.BYTES)\n         output = BytesIO(bin_response)\n-        chain_height, = unpack(\"i\", output.read(4))\n+        chain_height, = unpack(\"<i\", output.read(4))\n         response_hash = output.read(32)[::-1].hex()\n \n         assert_equal(bb_hash, response_hash)  # check if getutxo's chaintip during calculation was fine"
      }
    ]
  },
  {
    "sha": "fabd71076cd9493bd2d30a198467f5ea621b27aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWJkNzEwNzZjZDk0OTNiZDJkMzBhMTk4NDY3ZjVlYTYyMWIyN2Fh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-25T21:27:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-25T21:23:36Z"
      },
      "message": "ci: Print free disk space",
      "tree": {
        "sha": "44a5aa9a52e452b44b704002f7e74b5b936422a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44a5aa9a52e452b44b704002f7e74b5b936422a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fabd71076cd9493bd2d30a198467f5ea621b27aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiOhQv+Jj7Q+yZNeAZttZ/6QHHkdDLK59QGPCQwy6fyd9oPCwT2F0fSDvYI5IKJ\n0mTLibD1owPmOEwY5GEnWj4ImZWR5vzeL/LujBfgD5xXtEbU1UAzL1F9Zswh+U3y\n1VGILMjOQPFUMzXqbJJmijH4GHkmFGJXdAVvhh+UD3uDXATFY4gtuFhFvoilRMnd\nY2I+wa6vnA5gsEs+d38x3GIFPm0S62EsNmhRKnjHgWspbsY+3wICqZHUMgy6PNj5\nGSyb+arkXQDuf0250PO6AI9U1Y4hmo2PPxqC3paGbpfvr6jmfFdmivLwqOmP4oEO\nsha6/IoLj+vdT+YI23NaM85S4i7v+nKPTgK/sIqXY510RbAhRO8nGg3lgA4dMjWH\nJnI46mukABmg4+bpvaUYyPXsIQRsEVa09i81dSyUfWiqLtaUdCDVDN2xl72EvDfC\ny+Cml8hblUiy+FnfK0s4XrcULAlF4vy4sb9tFwx9MRXTkYAsfxEq4MjUXdW4h6q4\nEJydCmgX\n=dego\n-----END PGP SIGNATURE-----",
        "payload": "tree 44a5aa9a52e452b44b704002f7e74b5b936422a9\nparent fad9fdbea5dfb19328282afda9588edc6f1d0ddf\nauthor MarcoFalke <falke.marco@gmail.com> 1574717225 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1574717016 -0500\n\nci: Print free disk space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabd71076cd9493bd2d30a198467f5ea621b27aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fabd71076cd9493bd2d30a198467f5ea621b27aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabd71076cd9493bd2d30a198467f5ea621b27aa/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fad9fdbea5dfb19328282afda9588edc6f1d0ddf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad9fdbea5dfb19328282afda9588edc6f1d0ddf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fad9fdbea5dfb19328282afda9588edc6f1d0ddf"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5055a720964486e141fb03cdd6747297371f3ad1",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabd71076cd9493bd2d30a198467f5ea621b27aa/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabd71076cd9493bd2d30a198467f5ea621b27aa/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=fabd71076cd9493bd2d30a198467f5ea621b27aa",
        "patch": "@@ -72,6 +72,8 @@ if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n else\n   DOCKER_EXEC free -m -h\n   DOCKER_EXEC echo \"Number of CPUs \\(nproc\\):\" \\$\\(nproc\\)\n+  DOCKER_EXEC echo \"Free disk space:\"\n+  DOCKER_EXEC df -h\n fi\n \n if [ -n \"$DPKG_ADD_ARCH\" ]; then"
      }
    ]
  },
  {
    "sha": "87819046432a24fa8a7ec5c115eae4df0d281245",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzgxOTA0NjQzMmEyNGZhOGE3ZWM1YzExNWVhZTRkZjBkMjgxMjQ1",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-26T00:07:46Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-26T00:22:29Z"
      },
      "message": "qt: Fix class name of Ui::ModalOverlay",
      "tree": {
        "sha": "0773dbe819b00e0645ed02f8fafeddb876fee5cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0773dbe819b00e0645ed02f8fafeddb876fee5cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87819046432a24fa8a7ec5c115eae4df0d281245",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl3ccEgACgkQQQEIES5+\nqB80DA/+IxvGQ1IMFGbaX1plyg9sF8qFnhY9lbpeqihfxUvKxts245pkAPhctl8J\nVYH0akxf1F14Y6JctRPG2ksTq+Gy/FLQlS0iqRmoAW4/MD34HFcT5hP3z8nC/Zst\naR84zeXMoemRSd2UZRcHneFOOSTZvhf3WBc8Sz3feKgHXhjcY/C0l8EpCglTtoLG\ngx2KtgJ7+0R6KN/VDy4Bavd4cT3805/SUeSfvQcCn7I9O91H6nFLfnIrR5c6+wVH\nmYVetRLFNJ19n0G0vB5ldVBniRqFoSmYqk+/9gXDFzwlEkZYSQdd7hZicrj1kiJZ\no30QEc360Vs647p3IN6A81QlpjCUDF9bPJin/J+TJgQlyi4v+FllI/kz6eK1PbfQ\nuFb2bVi8z2CA4aSKNbsDGzHM3HyITEGo5KamiOZ87MsACWgh43pn3VvvYd5S0zUW\nI1S75tfxjzvzl2KpE31ttBCUlrbXz4GRktF7gpzZXFJWKWlf/Hrq9ZJ2idYs3fbx\nhnjxrBrvFXAbR08xGVrzp1YCIXShE74wPPZ+JIV7w8aPCJ4hyAW+QPG2pywMnrxz\n7EFMYggYwh1YtKxkA5CE5jgjPWxJ1dD3hJiR6cUfNooxig1Rqhwira3ulTLiepPX\nPh1ttPCX6GUHhW7WqFEu01nWuIHzCLKpyagGDlrVY4M6znYLj2g=\n=ulER\n-----END PGP SIGNATURE-----",
        "payload": "tree 0773dbe819b00e0645ed02f8fafeddb876fee5cc\nparent 89a1f7a250ef70ff2d65701564f1e24bb9280d90\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1574726866 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1574727749 +0200\n\nqt: Fix class name of Ui::ModalOverlay\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87819046432a24fa8a7ec5c115eae4df0d281245",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87819046432a24fa8a7ec5c115eae4df0d281245",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87819046432a24fa8a7ec5c115eae4df0d281245/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89a1f7a250ef70ff2d65701564f1e24bb9280d90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89a1f7a250ef70ff2d65701564f1e24bb9280d90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89a1f7a250ef70ff2d65701564f1e24bb9280d90"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 1,
      "deletions": 9
    },
    "files": [
      {
        "sha": "da19a6fa2e0426c492d739c60e4c63850d37cf57",
        "filename": "src/qt/forms/modaloverlay.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87819046432a24fa8a7ec5c115eae4df0d281245/src/qt/forms/modaloverlay.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87819046432a24fa8a7ec5c115eae4df0d281245/src/qt/forms/modaloverlay.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/modaloverlay.ui?ref=87819046432a24fa8a7ec5c115eae4df0d281245",
        "patch": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <ui version=\"4.0\">\n  <class>ModalOverlay</class>\n- <widget class=\"ModalOverlay\" name=\"ModalOverlay\">\n+ <widget class=\"QWidget\" name=\"ModalOverlay\">\n   <property name=\"geometry\">\n    <rect>\n     <x>0</x>\n@@ -369,14 +369,6 @@ QLabel { color: rgb(40,40,40);  }</string>\n    </item>\n   </layout>\n  </widget>\n- <customwidgets>\n-  <customwidget>\n-   <class>ModalOverlay</class>\n-   <extends>QWidget</extends>\n-   <header>qt/modaloverlay.h</header>\n-   <container>1</container>\n-  </customwidget>\n- </customwidgets>\n  <resources/>\n  <connections/>\n </ui>"
      }
    ]
  },
  {
    "sha": "93352d261fa4e1518a4f006de157ff5a2fc4c819",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzM1MmQyNjFmYTRlMTUxOGE0ZjAwNmRlMTU3ZmY1YTJmYzRjODE5",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-26T00:31:28Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-26T00:31:28Z"
      },
      "message": "qt: Use proper class for Ui::ReceiveCoinsDialog",
      "tree": {
        "sha": "a328d8343dabb5a6ab65af642518f824e79bd347",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a328d8343dabb5a6ab65af642518f824e79bd347"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93352d261fa4e1518a4f006de157ff5a2fc4c819",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl3ccmAACgkQQQEIES5+\nqB+N/Q//bwbAtDWJ35vgjSG4/qOcWf3/nti0fzSdCJXSy1sci4anZu0+R1Fk43Zm\nErqaO65UOe0afaeE2fjyApyjBUAlgLRkpOFX2sNVOwzK6rLJ9wdlAbDSRNJOFYQn\nes0IUDNVXy2FBhsPYhAb2bXk9+eCEwF3041DDwIlNNwqq79hj0SmjMXJqeUymS3G\nmPfHGqr2WYrE3iKMyYWd51bSU0M+UugDV94F/KsG2v9XFngg7PhdcBvAFwyVv4t9\nRLbgadumvOOBQXnqM+W1kZ++Plxe+xva5E4AO7110rqt1/sCcaa62nyRdKY+2Ii4\nnyR4ryUuGuLlu91WJnTfQFGPyQKM98oVQMXwJNHhSK1EYCdqSKR9MqhOZ9J5kXt8\nyGCpVnHlSh6UbsJZoCbaIPLg6B0LzxXFo2ANK8U2tpMIJ1kKOEau56DkbmmVxWW3\nL/H3mjmsRYEPMYKCW+vkqu7hZZJNyvalYPDrpz9UkxnnETlFp6/UAcYH+876Dzzs\nSjDS+yeCirGJsI/rHPtu2Tffpd+cy5K2BdIndyvVaVoF0ge6EKWow1JUcd6Lovmv\nv3YM3gdXEyijFvsP5v2PBXxWbrWNOIns4t08oZvebtd8HLM2HMyBcZjSb1NqGJs7\nINrXwV8wkiGcZaUeoYAFhIPtRZXja+UAnc3+TjoXLzznTpQFzyY=\n=1xFD\n-----END PGP SIGNATURE-----",
        "payload": "tree a328d8343dabb5a6ab65af642518f824e79bd347\nparent 87819046432a24fa8a7ec5c115eae4df0d281245\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1574728288 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1574728288 +0200\n\nqt: Use proper class for Ui::ReceiveCoinsDialog\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93352d261fa4e1518a4f006de157ff5a2fc4c819",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93352d261fa4e1518a4f006de157ff5a2fc4c819",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93352d261fa4e1518a4f006de157ff5a2fc4c819/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87819046432a24fa8a7ec5c115eae4df0d281245",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87819046432a24fa8a7ec5c115eae4df0d281245",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87819046432a24fa8a7ec5c115eae4df0d281245"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7dbee6d68907d58f671e8a8683667e4953186a9d",
        "filename": "src/qt/forms/receivecoinsdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93352d261fa4e1518a4f006de157ff5a2fc4c819/src/qt/forms/receivecoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93352d261fa4e1518a4f006de157ff5a2fc4c819/src/qt/forms/receivecoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/receivecoinsdialog.ui?ref=93352d261fa4e1518a4f006de157ff5a2fc4c819",
        "patch": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <ui version=\"4.0\">\n  <class>ReceiveCoinsDialog</class>\n- <widget class=\"QWidget\" name=\"ReceiveCoinsDialog\">\n+ <widget class=\"QDialog\" name=\"ReceiveCoinsDialog\">\n   <property name=\"geometry\">\n    <rect>\n     <x>0</x>"
      }
    ]
  },
  {
    "sha": "0ee914ba9e5960763c7bb380b566ee481446f97a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWU5MTRiYTllNTk2MDc2M2M3YmIzODBiNTY2ZWU0ODE0NDZmOTdh",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-26T08:17:36Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-26T08:26:32Z"
      },
      "message": "Merge #17584: wallet: replace raw pointer with const reference in AddrToPubKey\n\n1a3a256d5e0443d19757c1f1fceb9c9ede17758a wallet: replace raw pointer with const reference in AddrToPubKey (Harris)\n\nPull request description:\n\n  This PR replaces a redundant reference-to-pointer conversion in **addmultisigaddress** from *wallet/rpcwallet.cpp*. It also makes the API from *rpc/util.h* look more straightforward as **AddrToPubKey** now uses const references like other functions from there.\n\n  I am not sure why there is a ref-to-ptr conversion in addmultisignatures, so I can only speculate that this is because of \"historical reasons\".\n\n  The ref-to-ptr conversion happens here: https://github.com/bitcoin/bitcoin/blob/master/src/wallet/rpcwallet.cpp#L1001\n\n  There, the address of LegacyScriptPubKeyMan& is given to AddrToPubKey.\n\n  Later, in AddrToPubKey, it gets converted back to a reference, because GetKeyForDestination in rpc/util.cpp expects a const ref: https://github.com/bitcoin/bitcoin/blob/master/src/rpc/util.cpp#L140\n\n  Regards,\n\nACKs for top commit:\n  achow101:\n    ACK 1a3a256d5e0443d19757c1f1fceb9c9ede17758a\n  meshcollider:\n    utACK 1a3a256d5e0443d19757c1f1fceb9c9ede17758a\n  promag:\n    Code review ACK 1a3a256d5e0443d19757c1f1fceb9c9ede17758a.\n  hebasto:\n    ACK 1a3a256d5e0443d19757c1f1fceb9c9ede17758a, I have not tested the code, but I have reviewed it and it looks OK, I agree it can be merged.\n\nTree-SHA512: 1a2b8ddab5694ef4c65fac69f011e38dd03a634e84a35857e13bd05ad99fe42af22ee0af6230865e3d2c725693512f3336acb055ede19c958424283e7a3856c4",
      "tree": {
        "sha": "6d936c5c78cfece95939e3d6ab7d3a837d44d506",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d936c5c78cfece95939e3d6ab7d3a837d44d506"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ee914ba9e5960763c7bb380b566ee481446f97a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAl3c4bgACgkQ0wARbhyH\nWj06OA//WugAZAsvYAZXkKpiyWWlUz2PColBbqi8vRFCrnOGBKlIehMmlWmiXzUf\nRDtiqlmEOaF8VE0jsYwXBUiHTztoY4mIErPlMkRc72WstoKCqzkWdkiO5hXhswG/\npQ3fhPWv8PCPUPjLMfD+CiD0ej1n12xgsp3Pl1yHKaXHMSl/Adk8admn5NMEcqTW\nE2I7OjJqYMEMDyxecYFAYLgu9XkydUnYe9EgU5XbUHFZjTuIZAWdNKXuRAxtWijp\n9phaU3dc7whavmpi/nV09O8Ie2pB/BOkmtWKOj4mECwWafLJLkZLfqZtY7aORsVx\nq7OHVJPMt1kC/Rab4gX16KogwavolPeiMdXi5UrHbLPhgi9kXrL1bW86eft0p67Y\nhahd5X4bTydrHF95vXpdi8fgOzwwsRn2+3IflgxKgvVWyUwmEP3PF1EyUUsQnAcL\nb2fjFr607/dr3r+mFAG/3xCT/AQFy4tQ9H8rj8edNQJNrYOVG+eTDpU9IIu9hUnY\nRiGHHcsGckXzYhT71whVNGtQ3w0F42471tC4uTiUKpuLdL+0jOSpX4K4dYUJLrdk\nHjQi2X854+sxncsa0c1jTTAlcCW/7o5n6F6V1PWQK1RfUpPrRJSOB4Mz7jNDNvrz\nlFVedKYdQjPAlXKT+TwhbEcRdj4Weh05YScrnl6LsJhJzZWAmiM=\n=GVaC\n-----END PGP SIGNATURE-----",
        "payload": "tree 6d936c5c78cfece95939e3d6ab7d3a837d44d506\nparent 2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db\nparent 1a3a256d5e0443d19757c1f1fceb9c9ede17758a\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1574756256 +1300\ncommitter Samuel Dobson <dobsonsa68@gmail.com> 1574756792 +1300\n\nMerge #17584: wallet: replace raw pointer with const reference in AddrToPubKey\n\n1a3a256d5e0443d19757c1f1fceb9c9ede17758a wallet: replace raw pointer with const reference in AddrToPubKey (Harris)\n\nPull request description:\n\n  This PR replaces a redundant reference-to-pointer conversion in **addmultisigaddress** from *wallet/rpcwallet.cpp*. It also makes the API from *rpc/util.h* look more straightforward as **AddrToPubKey** now uses const references like other functions from there.\n\n  I am not sure why there is a ref-to-ptr conversion in addmultisignatures, so I can only speculate that this is because of \"historical reasons\".\n\n  The ref-to-ptr conversion happens here: https://github.com/bitcoin/bitcoin/blob/master/src/wallet/rpcwallet.cpp#L1001\n\n  There, the address of LegacyScriptPubKeyMan& is given to AddrToPubKey.\n\n  Later, in AddrToPubKey, it gets converted back to a reference, because GetKeyForDestination in rpc/util.cpp expects a const ref: https://github.com/bitcoin/bitcoin/blob/master/src/rpc/util.cpp#L140\n\n  Regards,\n\nACKs for top commit:\n  achow101:\n    ACK 1a3a256d5e0443d19757c1f1fceb9c9ede17758a\n  meshcollider:\n    utACK 1a3a256d5e0443d19757c1f1fceb9c9ede17758a\n  promag:\n    Code review ACK 1a3a256d5e0443d19757c1f1fceb9c9ede17758a.\n  hebasto:\n    ACK 1a3a256d5e0443d19757c1f1fceb9c9ede17758a, I have not tested the code, but I have reviewed it and it looks OK, I agree it can be merged.\n\nTree-SHA512: 1a2b8ddab5694ef4c65fac69f011e38dd03a634e84a35857e13bd05ad99fe42af22ee0af6230865e3d2c725693512f3336acb055ede19c958424283e7a3856c4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ee914ba9e5960763c7bb380b566ee481446f97a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ee914ba9e5960763c7bb380b566ee481446f97a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ee914ba9e5960763c7bb380b566ee481446f97a/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c1c43754b7a29e2fc852c2ad6430ba27aa2d7db"
      },
      {
        "sha": "1a3a256d5e0443d19757c1f1fceb9c9ede17758a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a3a256d5e0443d19757c1f1fceb9c9ede17758a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a3a256d5e0443d19757c1f1fceb9c9ede17758a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0791a365fe44da785d5d8dc9135488e4a302fa52",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee914ba9e5960763c7bb380b566ee481446f97a/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee914ba9e5960763c7bb380b566ee481446f97a/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=0ee914ba9e5960763c7bb380b566ee481446f97a",
        "patch": "@@ -131,18 +131,18 @@ CPubKey HexToPubKey(const std::string& hex_in)\n }\n \n // Retrieves a public key for an address from the given FillableSigningProvider\n-CPubKey AddrToPubKey(FillableSigningProvider* const keystore, const std::string& addr_in)\n+CPubKey AddrToPubKey(const FillableSigningProvider& keystore, const std::string& addr_in)\n {\n     CTxDestination dest = DecodeDestination(addr_in);\n     if (!IsValidDestination(dest)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address: \" + addr_in);\n     }\n-    CKeyID key = GetKeyForDestination(*keystore, dest);\n+    CKeyID key = GetKeyForDestination(keystore, dest);\n     if (key.IsNull()) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"%s does not refer to a key\", addr_in));\n     }\n     CPubKey vchPubKey;\n-    if (!keystore->GetPubKey(key, vchPubKey)) {\n+    if (!keystore.GetPubKey(key, vchPubKey)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"no full public key for address %s\", addr_in));\n     }\n     if (!vchPubKey.IsFullyValid()) {"
      },
      {
        "sha": "9304e1fefbff9e05e87e4f39afcdd26f4680409d",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee914ba9e5960763c7bb380b566ee481446f97a/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee914ba9e5960763c7bb380b566ee481446f97a/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=0ee914ba9e5960763c7bb380b566ee481446f97a",
        "patch": "@@ -69,7 +69,7 @@ extern std::string HelpExampleCli(const std::string& methodname, const std::stri\n extern std::string HelpExampleRpc(const std::string& methodname, const std::string& args);\n \n CPubKey HexToPubKey(const std::string& hex_in);\n-CPubKey AddrToPubKey(FillableSigningProvider* const keystore, const std::string& addr_in);\n+CPubKey AddrToPubKey(const FillableSigningProvider& keystore, const std::string& addr_in);\n CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, FillableSigningProvider& keystore, CScript& script_out);\n \n UniValue DescribeAddress(const CTxDestination& dest);"
      },
      {
        "sha": "f48e1e90fd458a7ba54869e7c6a5d87a33c60334",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee914ba9e5960763c7bb380b566ee481446f97a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee914ba9e5960763c7bb380b566ee481446f97a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0ee914ba9e5960763c7bb380b566ee481446f97a",
        "patch": "@@ -998,7 +998,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n         if (IsHex(keys_or_addrs[i].get_str()) && (keys_or_addrs[i].get_str().length() == 66 || keys_or_addrs[i].get_str().length() == 130)) {\n             pubkeys.push_back(HexToPubKey(keys_or_addrs[i].get_str()));\n         } else {\n-            pubkeys.push_back(AddrToPubKey(&spk_man, keys_or_addrs[i].get_str()));\n+            pubkeys.push_back(AddrToPubKey(spk_man, keys_or_addrs[i].get_str()));\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "2689c8fd7159f47248c5fc365463be8b0e8b039c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjg5YzhmZDcxNTlmNDcyNDhjNWZjMzY1NDYzYmU4YjBlOGIwMzlj",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-11-25T10:33:58Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-11-26T10:38:32Z"
      },
      "message": "[test] qt: add send screen balance test",
      "tree": {
        "sha": "bd48be43829a6460e80225732a98a2f00269d254",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd48be43829a6460e80225732a98a2f00269d254"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2689c8fd7159f47248c5fc365463be8b0e8b039c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl3dAKgACgkQV/+b28ww\nEAntwA/+KSMZZFL4jUwjov2bcJPjmYY03V+1VWCaEJ68eKMOk/V5kps4vdzUkoQg\nN34Xb4yh/OTyojG01BMshtMClIjFsDcAnpHyDjsKwn+HYQ9UgcGZg8rqNDGEj1pA\nhEoklE7g83OdLfsQPjwPqINMHdW1qWuxqaym+OKMDS8Y4j4jiNLCGVDsSc2Mkl/r\nBhFxpM2IuE5JpXkCfHNaQ1FWXA6s6KrqgqCS1TtCRvEInqmupKlMPlXs3zmU38Te\njUgvY3qHdSFkXqP3Bbixr2uuIR7AhPSeB8QdL2/M/CJ1Dl2m1osb3E6QVfDQO3ss\nzpqTprBieSp6TWts7L24J+FtTSTHWKc7+mCDBX7BWaCdSLpjo+fUKYJsfNI8khiR\nFHD1bw+5+2VXyJE+yB27T7MJL3xDDcmlVStXVjcDtnW+q/lyYDPZdXrAhC2cIwoG\nENlOFdgnXm5XsvFv5GV82hl9Yf5X6O1F2pHLVChglpQRBR3RNBAfYklmnE8cFZXe\nTfTIQ6HKqU4V/Qj6HVnucbMKLlMbiHnpwtyJm1IWbiJIIwYkTguffO3kYztwNRW9\ny9Cy5djTSwzSWGTA3a1MBbymmCS3i+y+M37Uj4D7LqkQFXoYHi0J6JShVmz1hPhf\nWfzCU4ijWhEnnalNRsRUPPmEDc8rfrHfFSLvbAJt7y4Z0czsKho=\n=An1I\n-----END PGP SIGNATURE-----",
        "payload": "tree bd48be43829a6460e80225732a98a2f00269d254\nparent 0ee914ba9e5960763c7bb380b566ee481446f97a\nauthor Sjors Provoost <sjors@sprovoost.nl> 1574678038 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1574764712 +0100\n\n[test] qt: add send screen balance test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2689c8fd7159f47248c5fc365463be8b0e8b039c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2689c8fd7159f47248c5fc365463be8b0e8b039c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2689c8fd7159f47248c5fc365463be8b0e8b039c/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ee914ba9e5960763c7bb380b566ee481446f97a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ee914ba9e5960763c7bb380b566ee481446f97a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ee914ba9e5960763c7bb380b566ee481446f97a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dfd56511ea4060081e57a00ca5fadc90262ef7f6",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2689c8fd7159f47248c5fc365463be8b0e8b039c/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2689c8fd7159f47248c5fc365463be8b0e8b039c/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=2689c8fd7159f47248c5fc365463be8b0e8b039c",
        "patch": "@@ -170,6 +170,16 @@ void TestGUI(interfaces::Node& node)\n     sendCoinsDialog.setModel(&walletModel);\n     transactionView.setModel(&walletModel);\n \n+    {\n+        // Check balance in send dialog\n+        QLabel* balanceLabel = sendCoinsDialog.findChild<QLabel*>(\"labelBalance\");\n+        QString balanceText = balanceLabel->text();\n+        int unit = walletModel.getOptionsModel()->getDisplayUnit();\n+        CAmount balance = walletModel.wallet().getBalance();\n+        QString balanceComparison = BitcoinUnits::formatWithUnit(unit, balance, false, BitcoinUnits::separatorAlways);\n+        QCOMPARE(balanceText, balanceComparison);\n+    }\n+\n     // Send two transactions, and verify they are added to transaction list.\n     TransactionTableModel* transactionTableModel = walletModel.getTransactionTableModel();\n     QCOMPARE(transactionTableModel->rowCount({}), 105);"
      }
    ]
  },
  {
    "sha": "4a96e459d733f1b6427221aaa1874ea00f79988a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTk2ZTQ1OWQ3MzNmMWI2NDI3MjIxYWFhMTg3NGVhMDBmNzk5ODhh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-11-26T10:43:53Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-11-26T10:43:53Z"
      },
      "message": "[gui] send: show watch-only balance in send screen",
      "tree": {
        "sha": "80b260402be5309009074d4079e5883abbf9400d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80b260402be5309009074d4079e5883abbf9400d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a96e459d733f1b6427221aaa1874ea00f79988a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl3dAesACgkQV/+b28ww\nEAmKdg/+KNsUyxzb6a5xF4IU6UsD/KkQzVhmVIMru8Wi94oxMQz1SPrauQCfw3NR\ngP2p2A2kDyuzyTrx5V4ahaWIkW2kzyUaSq3lU+gfGHqeniNqNIFcGk+/MQIZLleM\neq4jOnZCDvkd0iwLqT4yZWaV8FKcFHUXJKkfiQvLQGRdONBXOmvJSJKY/YS2rngL\n+JhOrNMDTV+nTy71DBa4QsgEji3RH5GbDt+jdpt3iSvDQQWutc0/RLtjuU+27guH\nzBtOzMBRPOfXcLmHMkHRDIsZXnYPDowo0IVGfleN5yOcdLbQsDHBZ9Gs2Oqd0LD7\nBiV7B/IIPo7pTb0uP4NTg+JWPw63feetICWRE4zzLPMC7LEknz6SXvkY9a0RS9xG\nqWnOlC8ui/bRPTgOLWWD38/hL/mEHTFa5CboHZsP7nO6FUCKMvDl84GzmrPqL8TP\nRCwdXcVfABfkVTM6ci+f1dA7YSgQvj4qGQYoPyzMwdVGE0s8KdKK4whhk4w7gyZb\nKWSOo4UNiawd8JpK5EUTuQUGTuuzIO2rr/lHp2wCmPj9lnlDO849B9M2PTDUe8Fq\n66TJseEy5q59dha2eRf1wnf1L5BJrUdGUmOkT1BIcwgbskAX/a65Isj1w+hcbd/M\nCRawa+nVLBJfM1k3aIHGAmEplIokHe9N/J4t1EXM6G5FKkQUrus=\n=Xayq\n-----END PGP SIGNATURE-----",
        "payload": "tree 80b260402be5309009074d4079e5883abbf9400d\nparent 2689c8fd7159f47248c5fc365463be8b0e8b039c\nauthor Sjors Provoost <sjors@sprovoost.nl> 1574765033 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1574765033 +0100\n\n[gui] send: show watch-only balance in send screen\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a96e459d733f1b6427221aaa1874ea00f79988a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a96e459d733f1b6427221aaa1874ea00f79988a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a96e459d733f1b6427221aaa1874ea00f79988a/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2689c8fd7159f47248c5fc365463be8b0e8b039c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2689c8fd7159f47248c5fc365463be8b0e8b039c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2689c8fd7159f47248c5fc365463be8b0e8b039c"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cfd4bf33d460d8ed43c17e0b267910c984255005",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a96e459d733f1b6427221aaa1874ea00f79988a/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a96e459d733f1b6427221aaa1874ea00f79988a/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=4a96e459d733f1b6427221aaa1874ea00f79988a",
        "patch": "@@ -1190,7 +1190,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n         <number>3</number>\n        </property>\n        <item>\n-        <widget class=\"QLabel\" name=\"label\">\n+        <widget class=\"QLabel\" name=\"labelBalanceName\">\n          <property name=\"sizePolicy\">\n           <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Fixed\">\n            <horstretch>0</horstretch>"
      },
      {
        "sha": "f1ea3e23e5d5e893ee90f4763869257b0af6b08f",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a96e459d733f1b6427221aaa1874ea00f79988a/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a96e459d733f1b6427221aaa1874ea00f79988a/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=4a96e459d733f1b6427221aaa1874ea00f79988a",
        "patch": "@@ -562,7 +562,12 @@ void SendCoinsDialog::setBalance(const interfaces::WalletBalances& balances)\n {\n     if(model && model->getOptionsModel())\n     {\n-        ui->labelBalance->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), balances.balance));\n+        CAmount balance = balances.balance;\n+        if (model->privateKeysDisabled()) {\n+            balance = balances.watch_only_balance;\n+            ui->labelBalanceName->setText(tr(\"Watch-only balance:\"));\n+        }\n+        ui->labelBalance->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), balance));\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "f2ab1309619b995ce9acb30bf0d1ec8526c435ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmFiMTMwOTYxOWI5OTVjZTlhY2IzMGJmMGQxZWM4NTI2YzQzNWFk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-26T14:29:41Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-26T14:48:52Z"
      },
      "message": "Merge #17606: qt, refactor: Use proper classes for Ui::*\n\n93352d261fa4e1518a4f006de157ff5a2fc4c819 qt: Use proper class for Ui::ReceiveCoinsDialog (Hennadii Stepanov)\n87819046432a24fa8a7ec5c115eae4df0d281245 qt: Fix class name of Ui::ModalOverlay (Hennadii Stepanov)\n\nPull request description:\n\n  Use proper classes for:\n  - `Ui::ModalOverlay` to remove `<customwidget>` entry\n  - `Ui::ReceiveCoinsDialog` to be consistent with the code base\n\n  This PR does not change behavior.\n\nACKs for top commit:\n  jonasschnelli:\n    Tested ACK 93352d261fa4e1518a4f006de157ff5a2fc4c819 - ran this on top of master and tested the modal overlay on initial mainnet sync.\n  laanwj:\n    code review ACK 93352d261fa4e1518a4f006de157ff5a2fc4c819\n\nTree-SHA512: faeed8e86dbf5355505defcdb7e1db07d6a6005ee5eb07367b00f6aa122dd8ad34f8372d4bae7b29c0eac87b538a33157e19328be2876135e8a6376a3197f1bc",
      "tree": {
        "sha": "8ea95e8b2d5994ad656c4c9e9f45f9a3f66a54ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ea95e8b2d5994ad656c4c9e9f45f9a3f66a54ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2ab1309619b995ce9acb30bf0d1ec8526c435ad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3dO1UACgkQLuufXMCV\nJsEFNQ/5AcKLhPGWFG5xFcF4TFAVOXZ/yS7jQ1gWxqKJsdR5Kd2il0KpDq+Ys1qE\n9ZpWU+/LRFvqx6ez8LvkqRJiILCTljB3l4T6H/tLKwkpUgHsKlfCiVMB5O3XKBrl\nw0OLtV8U3kffeeYwYdZzmU/8BU0aw4Zi9SPbSlWCIDOIBI4FrVyLLyR54S8yT42W\nYFHAmrTj1T50FdNiJ+B3NIE18RH8b1n/7NsY0JjtsaVpa78I0JjSmcSWGGGR/UKa\ndMbyhKBbyY7Hu03/BjxAVjLK6BcvUkYF59uoPpxOdN4CV16WNjI3UgVLe6cpOOAj\ntc+bpGSSEFZ9cYS4MqXdsmQsuIHXGQdww/+Tcvfa+jUyLcWFoS4xXw+xbnCto9Vo\nLpP/Ld1MmrtW3fJSMkoXXCWAgvO164TMBP+ES6aExEe2tvrWdR1aaoCEksFVB3f2\nlmL0/8ULmpfid7YnFnmtJHNvOImFcChoTZOlUH5tzeQvd3u0TV3FNYZ7qBEjy4ku\nBTiIKHE9EwutO5wSD9PxXOE9jE+QV26x0DN0OmjUZIJMrG13WuvTzyC5qOujutbo\naOZ0IBFyLvFXbtX7SnVX+fI04i4cbzwyEy64QeWoqe91BnZyb1s4q5hn6yoZtN5G\nOYDBInr6Pgjvn6ey4ZHnIXR/wuP9UL/Sv3yEM7wo4T+nNsJ3JK4=\n=yjxY\n-----END PGP SIGNATURE-----",
        "payload": "tree 8ea95e8b2d5994ad656c4c9e9f45f9a3f66a54ce\nparent 0ee914ba9e5960763c7bb380b566ee481446f97a\nparent 93352d261fa4e1518a4f006de157ff5a2fc4c819\nauthor fanquake <fanquake@gmail.com> 1574778581 -0500\ncommitter fanquake <fanquake@gmail.com> 1574779732 -0500\n\nMerge #17606: qt, refactor: Use proper classes for Ui::*\n\n93352d261fa4e1518a4f006de157ff5a2fc4c819 qt: Use proper class for Ui::ReceiveCoinsDialog (Hennadii Stepanov)\n87819046432a24fa8a7ec5c115eae4df0d281245 qt: Fix class name of Ui::ModalOverlay (Hennadii Stepanov)\n\nPull request description:\n\n  Use proper classes for:\n  - `Ui::ModalOverlay` to remove `<customwidget>` entry\n  - `Ui::ReceiveCoinsDialog` to be consistent with the code base\n\n  This PR does not change behavior.\n\nACKs for top commit:\n  jonasschnelli:\n    Tested ACK 93352d261fa4e1518a4f006de157ff5a2fc4c819 - ran this on top of master and tested the modal overlay on initial mainnet sync.\n  laanwj:\n    code review ACK 93352d261fa4e1518a4f006de157ff5a2fc4c819\n\nTree-SHA512: faeed8e86dbf5355505defcdb7e1db07d6a6005ee5eb07367b00f6aa122dd8ad34f8372d4bae7b29c0eac87b538a33157e19328be2876135e8a6376a3197f1bc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2ab1309619b995ce9acb30bf0d1ec8526c435ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2ab1309619b995ce9acb30bf0d1ec8526c435ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2ab1309619b995ce9acb30bf0d1ec8526c435ad/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ee914ba9e5960763c7bb380b566ee481446f97a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ee914ba9e5960763c7bb380b566ee481446f97a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ee914ba9e5960763c7bb380b566ee481446f97a"
      },
      {
        "sha": "93352d261fa4e1518a4f006de157ff5a2fc4c819",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93352d261fa4e1518a4f006de157ff5a2fc4c819",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93352d261fa4e1518a4f006de157ff5a2fc4c819"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 2,
      "deletions": 10
    },
    "files": [
      {
        "sha": "da19a6fa2e0426c492d739c60e4c63850d37cf57",
        "filename": "src/qt/forms/modaloverlay.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2ab1309619b995ce9acb30bf0d1ec8526c435ad/src/qt/forms/modaloverlay.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2ab1309619b995ce9acb30bf0d1ec8526c435ad/src/qt/forms/modaloverlay.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/modaloverlay.ui?ref=f2ab1309619b995ce9acb30bf0d1ec8526c435ad",
        "patch": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <ui version=\"4.0\">\n  <class>ModalOverlay</class>\n- <widget class=\"ModalOverlay\" name=\"ModalOverlay\">\n+ <widget class=\"QWidget\" name=\"ModalOverlay\">\n   <property name=\"geometry\">\n    <rect>\n     <x>0</x>\n@@ -369,14 +369,6 @@ QLabel { color: rgb(40,40,40);  }</string>\n    </item>\n   </layout>\n  </widget>\n- <customwidgets>\n-  <customwidget>\n-   <class>ModalOverlay</class>\n-   <extends>QWidget</extends>\n-   <header>qt/modaloverlay.h</header>\n-   <container>1</container>\n-  </customwidget>\n- </customwidgets>\n  <resources/>\n  <connections/>\n </ui>"
      },
      {
        "sha": "7dbee6d68907d58f671e8a8683667e4953186a9d",
        "filename": "src/qt/forms/receivecoinsdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2ab1309619b995ce9acb30bf0d1ec8526c435ad/src/qt/forms/receivecoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2ab1309619b995ce9acb30bf0d1ec8526c435ad/src/qt/forms/receivecoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/receivecoinsdialog.ui?ref=f2ab1309619b995ce9acb30bf0d1ec8526c435ad",
        "patch": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <ui version=\"4.0\">\n  <class>ReceiveCoinsDialog</class>\n- <widget class=\"QWidget\" name=\"ReceiveCoinsDialog\">\n+ <widget class=\"QDialog\" name=\"ReceiveCoinsDialog\">\n   <property name=\"geometry\">\n    <rect>\n     <x>0</x>"
      }
    ]
  },
  {
    "sha": "d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmEzYTVjYWRiZTU4YzBmZTM2M2JiYzZhY2FjMjkzZDQxZWVkZjdl",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-25T22:31:31Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-26T14:55:07Z"
      },
      "message": "util: make ScheduleBatchPriority advisory only",
      "tree": {
        "sha": "a8f86d51e6e0b40a5e0cb1cd0b8a23832e397f32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8f86d51e6e0b40a5e0cb1cd0b8a23832e397f32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3dPMsACgkQLuufXMCV\nJsEIVg//dNJwg2s8gnnQKz0mSmKz9NXyna2Omkj+dBLaUxQUSr5k73WGxAb7wFYG\nEDIRmdC2kItlw2XiIzxRZzTqLeM3CHOjcovaOf2CrYj5Mn12QaCDGBOA91nvT+fc\nA0v/JDFJ8wKtE6xv1M3FE5DuntmBmjwiVvrEbkYUr8EVFfhQP3N0av04++fdmzUf\nK7zgBKyS/F1rH07/+ZLP/zF6vX+HSO2EcY73AG1vdPEK9eebKCxl3wu29PPrEw7z\nFmBEHSKlvfcJzOCFMvnWhCpS5TP99XkPFddwAaKuqKz2D4Fn7wMuy33pvjShalde\nYHzyC+ITeFDjZMPkEDoAHeMDWQDzstBgs9qQqC7HTKSIDDzWbHyDjGUQgm3rT+UL\nq9O7Az8iqZ6TWIikAqvM862C95VH59p9sVrN2xI4gYjdfjRB1EsBLkqFas/caBmd\nl0Ek9VJdgzo2UgJ7+c0iwfakbeFoTdp3X18Vx0I2LiEPOCyOqmsyxZfvUo3obZ4S\nDAUqzVLft/DWM1p936tgPrc41QXP4MJwnLXb9CXNxjtvaY2n8b3d+jtSdYzQC7LQ\nGr6r0dC48UZ0ryCPV+bezMl+A0XGtYbR70JtKhFcaCmUbZ8KwIHaCmQeH2F6B+oG\nCpeEaOt0FcN5ahoPC/ah1YhWIo6dbuk6ze8x3xLx8pumDEYywXg=\n=uVrU\n-----END PGP SIGNATURE-----",
        "payload": "tree a8f86d51e6e0b40a5e0cb1cd0b8a23832e397f32\nparent 0ee914ba9e5960763c7bb380b566ee481446f97a\nauthor fanquake <fanquake@gmail.com> 1574721091 -0500\ncommitter fanquake <fanquake@gmail.com> 1574780107 -0500\n\nutil: make ScheduleBatchPriority advisory only\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ee914ba9e5960763c7bb380b566ee481446f97a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ee914ba9e5960763c7bb380b566ee481446f97a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ee914ba9e5960763c7bb380b566ee481446f97a"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "563ff6a54b35d58b5bf30d9b1604dcc72541709b",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e",
        "patch": "@@ -1126,17 +1126,13 @@ fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific)\n     return fs::absolute(path, GetDataDir(net_specific));\n }\n \n-int ScheduleBatchPriority()\n+void ScheduleBatchPriority()\n {\n #ifdef SCHED_BATCH\n     const static sched_param param{};\n-    if (int ret = pthread_setschedparam(pthread_self(), SCHED_BATCH, &param)) {\n+    if (pthread_setschedparam(pthread_self(), SCHED_BATCH, &param) != 0) {\n         LogPrintf(\"Failed to pthread_setschedparam: %s\\n\", strerror(errno));\n-        return ret;\n     }\n-    return 0;\n-#else\n-    return 1;\n #endif\n }\n "
      },
      {
        "sha": "82903b5187d8488a27eeb415d516d616053f3883",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e",
        "patch": "@@ -367,10 +367,8 @@ std::string CopyrightHolders(const std::string& strPrefix);\n  * On platforms that support it, tell the kernel the calling thread is\n  * CPU-intensive and non-interactive. See SCHED_BATCH in sched(7) for details.\n  *\n- * @return The return value of sched_setschedule(), or 1 on systems without\n- * sched_setschedule().\n  */\n-int ScheduleBatchPriority();\n+void ScheduleBatchPriority();\n \n namespace util {\n "
      }
    ]
  },
  {
    "sha": "4fb82e916b3b92c14443db23d7f606eb02cf1654",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmI4MmU5MTZiM2I5MmMxNDQ0M2RiMjNkN2Y2MDZlYjAyY2YxNjU0",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-26T14:56:05Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-11-26T15:53:40Z"
      },
      "message": "Merge #17567: gui: remove macOS start on login code\n\n27d82b63fb8869716d2f103fd381c2413bde4d1b gui: remove macOS start on login code (fanquake)\n\nPull request description:\n\n  The macOS startup item code was disabled for builds targeting macOS >\n  `10.11` in #15208. Now that we require macOS `10.12` as a minimum (#17550),\n  we can remove the startup item code entirely. The API we were using, `LSSharedFileListItemCopyResolvedURL`, `LSSharedFileListCopySnapshot` etc,\n  was removed in macOS `10.12` SDK.\n\nACKs for top commit:\n  jonasschnelli:\n    utACK 27d82b63fb8869716d2f103fd381c2413bde4d1b\n  jonasschnelli:\n    Tested ACK 27d82b63fb8869716d2f103fd381c2413bde4d1b - successfully compiled on 10.15.1\n\nTree-SHA512: 7420757b91c7820e6a63280887155394547134a9cebcf3721af0284da23292627f94cd431241e033075b3fd86d79ace3ebf1b25d17763acbf71e07a742395409",
      "tree": {
        "sha": "20946a2fb406566a82602b541ebaf7334bb6f41e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20946a2fb406566a82602b541ebaf7334bb6f41e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fb82e916b3b92c14443db23d7f606eb02cf1654",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3dSoQACgkQLuufXMCV\nJsGziw/+M2RRracb8L9+NU9d8Vnm3VFwWCHiuGeponuGFvDXr7sj/n5QtVNVG5Y5\nbKuQaQDAtgrBSQM1VmgC54ovVNq+Ec8eTgWBJTM8Y88Xg5ocj0qtHTVWwtYLX0yU\ndSHPXa67yRF4tnsBWl8/WHNXCGttGpf5Mv+lqGZ5aWmpu3fOW/v0U5JvFmMB9iNU\n30nTVO/zv8vXNS5Lp8xtLI4vwaNne3T/Cq87OHtDPJFMthxLUL1sYRxnvha5Ijuw\nZFXEJARwbsOuRWFDtJsZKtKLrDgcmpZc6uDvq30sDs/fSrgX3Mwvx5ftg03YrSKI\nSRNTqBS6HIPjTYO2wjkW1RjNjef859gNYuYMVsHgWdOXCSLKrVf0sWjMmEPnxS+v\n8+3tRyg9+PEJiLyEOrA+9ASCzWz2PzJMpSpFWNx8gpXIBxuMOzeFVto9pzuI5IIo\nfVsNsv40PHmKE8OtwEYHjltJorjgtkAyzYoFwLJb/+1lsIF6bJIVehJvQA8gEG2/\n2s9pxUtPqGU40SEakz4CsFq72DMhePKjEDrfQvXST/yiB6QPi7tH+xBnb4EBhlbf\ndCFobSIX6WYZjWLsAg3sPhLenggwhMUoX2j1aAyMyP91QIi1DIkyZ3hYmzi30obv\n7zEiZ25UufoIWK2svKSIoD3x/gXQT1HaBUQcdjqGnGRDnL8bhmg=\n=Mt5e\n-----END PGP SIGNATURE-----",
        "payload": "tree 20946a2fb406566a82602b541ebaf7334bb6f41e\nparent f2ab1309619b995ce9acb30bf0d1ec8526c435ad\nparent 27d82b63fb8869716d2f103fd381c2413bde4d1b\nauthor fanquake <fanquake@gmail.com> 1574780165 -0500\ncommitter fanquake <fanquake@gmail.com> 1574783620 -0500\n\nMerge #17567: gui: remove macOS start on login code\n\n27d82b63fb8869716d2f103fd381c2413bde4d1b gui: remove macOS start on login code (fanquake)\n\nPull request description:\n\n  The macOS startup item code was disabled for builds targeting macOS >\n  `10.11` in #15208. Now that we require macOS `10.12` as a minimum (#17550),\n  we can remove the startup item code entirely. The API we were using, `LSSharedFileListItemCopyResolvedURL`, `LSSharedFileListCopySnapshot` etc,\n  was removed in macOS `10.12` SDK.\n\nACKs for top commit:\n  jonasschnelli:\n    utACK 27d82b63fb8869716d2f103fd381c2413bde4d1b\n  jonasschnelli:\n    Tested ACK 27d82b63fb8869716d2f103fd381c2413bde4d1b - successfully compiled on 10.15.1\n\nTree-SHA512: 7420757b91c7820e6a63280887155394547134a9cebcf3721af0284da23292627f94cd431241e033075b3fd86d79ace3ebf1b25d17763acbf71e07a742395409\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fb82e916b3b92c14443db23d7f606eb02cf1654",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4fb82e916b3b92c14443db23d7f606eb02cf1654",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fb82e916b3b92c14443db23d7f606eb02cf1654/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2ab1309619b995ce9acb30bf0d1ec8526c435ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2ab1309619b995ce9acb30bf0d1ec8526c435ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2ab1309619b995ce9acb30bf0d1ec8526c435ad"
      },
      {
        "sha": "27d82b63fb8869716d2f103fd381c2413bde4d1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27d82b63fb8869716d2f103fd381c2413bde4d1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27d82b63fb8869716d2f103fd381c2413bde4d1b"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 3,
      "deletions": 87
    },
    "files": [
      {
        "sha": "07caf0e53a2649ea4de68ee5494ef581c21a02ec",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb82e916b3b92c14443db23d7f606eb02cf1654/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb82e916b3b92c14443db23d7f606eb02cf1654/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=4fb82e916b3b92c14443db23d7f606eb02cf1654",
        "patch": "@@ -90,6 +90,8 @@ Low-level Changes section below.\n GUI changes\n -----------\n \n+- The \"Start Bitcoin Core on system login\" option has been removed on macOS.\n+\n Wallet\n ------\n "
      },
      {
        "sha": "2bb95354415b54f88e4ead96cdff9637378f7de0",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 84,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb82e916b3b92c14443db23d7f606eb02cf1654/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb82e916b3b92c14443db23d7f606eb02cf1654/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=4fb82e916b3b92c14443db23d7f606eb02cf1654",
        "patch": "@@ -54,10 +54,7 @@\n #include <QUrlQuery>\n \n #if defined(Q_OS_MAC)\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n \n-#include <CoreServices/CoreServices.h>\n #include <QProcess>\n \n void ForceActivation();\n@@ -691,87 +688,6 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n     return true;\n }\n \n-\n-#elif defined(Q_OS_MAC) && defined(MAC_OS_X_VERSION_MIN_REQUIRED) && MAC_OS_X_VERSION_MIN_REQUIRED <= 101100\n-// based on: https://github.com/Mozketo/LaunchAtLoginController/blob/master/LaunchAtLoginController.m\n-\n-LSSharedFileListItemRef findStartupItemInList(CFArrayRef listSnapshot, LSSharedFileListRef list, CFURLRef findUrl)\n-{\n-    if (listSnapshot == nullptr) {\n-        return nullptr;\n-    }\n-\n-    // loop through the list of startup items and try to find the bitcoin app\n-    for(int i = 0; i < CFArrayGetCount(listSnapshot); i++) {\n-        LSSharedFileListItemRef item = (LSSharedFileListItemRef)CFArrayGetValueAtIndex(listSnapshot, i);\n-        UInt32 resolutionFlags = kLSSharedFileListNoUserInteraction | kLSSharedFileListDoNotMountVolumes;\n-        CFURLRef currentItemURL = nullptr;\n-\n-#if defined(MAC_OS_X_VERSION_MAX_ALLOWED) && MAC_OS_X_VERSION_MAX_ALLOWED >= 10100\n-        if(&LSSharedFileListItemCopyResolvedURL)\n-            currentItemURL = LSSharedFileListItemCopyResolvedURL(item, resolutionFlags, nullptr);\n-#if defined(MAC_OS_X_VERSION_MIN_REQUIRED) && MAC_OS_X_VERSION_MIN_REQUIRED < 10100\n-        else\n-            LSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, nullptr);\n-#endif\n-#else\n-        LSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, nullptr);\n-#endif\n-\n-        if(currentItemURL) {\n-            if (CFEqual(currentItemURL, findUrl)) {\n-                // found\n-                CFRelease(currentItemURL);\n-                return item;\n-            }\n-            CFRelease(currentItemURL);\n-        }\n-    }\n-    return nullptr;\n-}\n-\n-bool GetStartOnSystemStartup()\n-{\n-    CFURLRef bitcoinAppUrl = CFBundleCopyBundleURL(CFBundleGetMainBundle());\n-    if (bitcoinAppUrl == nullptr) {\n-        return false;\n-    }\n-\n-    LSSharedFileListRef loginItems = LSSharedFileListCreate(nullptr, kLSSharedFileListSessionLoginItems, nullptr);\n-    CFArrayRef listSnapshot = LSSharedFileListCopySnapshot(loginItems, nullptr);\n-    bool res = (findStartupItemInList(listSnapshot, loginItems, bitcoinAppUrl) != nullptr);\n-    CFRelease(bitcoinAppUrl);\n-    CFRelease(loginItems);\n-    CFRelease(listSnapshot);\n-    return res;\n-}\n-\n-bool SetStartOnSystemStartup(bool fAutoStart)\n-{\n-    CFURLRef bitcoinAppUrl = CFBundleCopyBundleURL(CFBundleGetMainBundle());\n-    if (bitcoinAppUrl == nullptr) {\n-        return false;\n-    }\n-\n-    LSSharedFileListRef loginItems = LSSharedFileListCreate(nullptr, kLSSharedFileListSessionLoginItems, nullptr);\n-    CFArrayRef listSnapshot = LSSharedFileListCopySnapshot(loginItems, nullptr);\n-    LSSharedFileListItemRef foundItem = findStartupItemInList(listSnapshot, loginItems, bitcoinAppUrl);\n-\n-    if(fAutoStart && !foundItem) {\n-        // add bitcoin app to startup item list\n-        LSSharedFileListInsertItemURL(loginItems, kLSSharedFileListItemBeforeFirst, nullptr, nullptr, bitcoinAppUrl, nullptr, nullptr);\n-    }\n-    else if(!fAutoStart && foundItem) {\n-        // remove item\n-        LSSharedFileListItemRemove(loginItems, foundItem);\n-    }\n-\n-    CFRelease(bitcoinAppUrl);\n-    CFRelease(loginItems);\n-    CFRelease(listSnapshot);\n-    return true;\n-}\n-#pragma GCC diagnostic pop\n #else\n \n bool GetStartOnSystemStartup() { return false; }"
      },
      {
        "sha": "d48c537c75a32325c2bd7c7260a2bb220613f130",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fb82e916b3b92c14443db23d7f606eb02cf1654/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fb82e916b3b92c14443db23d7f606eb02cf1654/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=4fb82e916b3b92c14443db23d7f606eb02cf1654",
        "patch": "@@ -71,12 +71,10 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n #ifdef Q_OS_MAC\n     /* remove Window tab on Mac */\n     ui->tabWidget->removeTab(ui->tabWidget->indexOf(ui->tabWindow));\n-#if  defined(MAC_OS_X_VERSION_MIN_REQUIRED) && MAC_OS_X_VERSION_MIN_REQUIRED > 101100\n-    /* hide launch at startup option if compiled against macOS > 10.11 (removed API) */\n+    /* hide launch at startup option on macOS */\n     ui->bitcoinAtStartup->setVisible(false);\n     ui->verticalLayout_Main->removeWidget(ui->bitcoinAtStartup);\n     ui->verticalLayout_Main->removeItem(ui->horizontalSpacer_0_Main);\n-#endif\n #endif\n \n     /* remove Wallet tab in case of -disablewallet */"
      }
    ]
  },
  {
    "sha": "d8a66626d63135fd245d5afc524b88b9a94d208b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGE2NjYyNmQ2MzEzNWZkMjQ1ZDVhZmM1MjRiODhiOWE5NGQyMDhi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-26T15:57:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-26T16:11:16Z"
      },
      "message": "Merge #17283: rpc: improve getaddressinfo test coverage, help, code docs\n\n33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151 test: add rpc getaddressinfo labels test coverage (Jon Atack)\n0f3539ac6d772fc646b5f184fa1efe77bf632f6a test: add listlabels test in wallet_labels.py (Jon Atack)\n1388de83900eaced906d369fe9e8887ae74b2dcf rpc: add getaddressinfo code documentation (Jon Atack)\n2ee0cb3330ccf70f0540cb42370796e32eff1569 rpc: update getaddressinfo RPCExamples to bech32 (Jon Atack)\n8d1ed0c263f8cdff7189f02040b5d02238d93da0 rpc: clarify label vs labels in getaddressinfo RPCHelpman (Jon Atack)\n5a0ed850700dfb19167d40b38f80313bd5e427ca rpc: improve getaddressinfo RPCHelpman content (Jon Atack)\n70cda342cd20d0e0cd9f28405457544036968f2d rpc: improve getaddressinfo RPCHelpman formatting (Jon Atack)\n\nPull request description:\n\n  This PR is a continuation of the work in https://github.com/bitcoin/bitcoin/pull/12892.\n\n  Main motivations:\n  - There is currently no test coverage for the getaddressinfo `labels` response. Coverage here is a prerequisite before deprecating the `label` response or adding multiple labels per address.\n  - `bitcoin-cli help getaddressinfo` returns a few content errors, difficult-to-read formatting, and no explanation why it returns both `label` and `labels` and how they relate, which can be confusing for application developers.\n\n  Changes by order of commits:\n  - [x] improve/fix getaddressinfo RPCHelpman layout formatting\n  - [x] improve/fix getaddressinfo RPCHelpman content\n  - [x] clarify the `label` and `labels` fields in getaddressinfo RPCHelpman\n  - [x] update getaddressinfo RPCExamples addresses to bech32\n  - [x] add getaddressinfo code docs\n  - [x] add a `listlabels` test assertion in wallet_labels.py\n  - [x] add missing getaddressinfo `labels` test coverage and improve the existing `label` tests\n\n  Here are gists of the CLI help output:\n  [`bitcoin-cli help getaddressinfo` before this PR](https://gist.github.com/jonatack/022af5221a85c069780359a22643c810)\n  [`bitcoin-cli help getaddressinfo` after this PR](https://gist.github.com/jonatack/4ee5f6abc62a3d99269570206a5f90ba)\n\n  It seems we ought to begin a deprecation process for the getaddressinfo `label` field? If yes, I have a follow-up ready. _--> EDIT: Deprecation follow-ups #17578 and #17585 now build on this PR._\n\nACKs for top commit:\n  fjahr:\n    Re-ACK 33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151\n  jnewbery:\n    ACK 33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151.\n\nTree-SHA512: a001aa863090ec2566a31059477945b1c303ebeb430b33472f8b150e420fa5742fc33bca9d95571746395b607f43f6078dd5b53e238ac1f3fc648b51c8f79a07",
      "tree": {
        "sha": "d70302fc2deecf8e9107943c207e3eac9ea0f64f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d70302fc2deecf8e9107943c207e3eac9ea0f64f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8a66626d63135fd245d5afc524b88b9a94d208b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3dTqQACgkQHkrtYphs\n0l08Zgf9FwuR1O3UYX78nNdCFOqHkS2eZ3so/CpSBnxGX/y3mnVHK1a5VFWrIWxk\nKHZSLAWxpPGbQOwryDDGmbGxvLE1ZSD/k46gGVkuISIqHCiONQLuTfrLm6lYugP0\n9KyqF4FOxcX8ZCkoMrIXZo30Wu/6JPMcV9Gl9fRovWnmOxM395Cn+5rseINDr6Tt\nbgDlKsGS696Cm7MRqth5W1EuIRrq0R+F2gKK+Ena60ce4yHKB/74RuC548JqWJ11\nQHhxrqBcDX7wvrgBho6Lowg2VcRYoRtMsQJU6nzmtP6CeexDDACnQ+t9ghJ5+C6m\nUko830A0on9brVdAvymf8QG4//Gktw==\n=FOyE\n-----END PGP SIGNATURE-----",
        "payload": "tree d70302fc2deecf8e9107943c207e3eac9ea0f64f\nparent 4fb82e916b3b92c14443db23d7f606eb02cf1654\nparent 33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1574783843 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1574784676 +0100\n\nMerge #17283: rpc: improve getaddressinfo test coverage, help, code docs\n\n33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151 test: add rpc getaddressinfo labels test coverage (Jon Atack)\n0f3539ac6d772fc646b5f184fa1efe77bf632f6a test: add listlabels test in wallet_labels.py (Jon Atack)\n1388de83900eaced906d369fe9e8887ae74b2dcf rpc: add getaddressinfo code documentation (Jon Atack)\n2ee0cb3330ccf70f0540cb42370796e32eff1569 rpc: update getaddressinfo RPCExamples to bech32 (Jon Atack)\n8d1ed0c263f8cdff7189f02040b5d02238d93da0 rpc: clarify label vs labels in getaddressinfo RPCHelpman (Jon Atack)\n5a0ed850700dfb19167d40b38f80313bd5e427ca rpc: improve getaddressinfo RPCHelpman content (Jon Atack)\n70cda342cd20d0e0cd9f28405457544036968f2d rpc: improve getaddressinfo RPCHelpman formatting (Jon Atack)\n\nPull request description:\n\n  This PR is a continuation of the work in https://github.com/bitcoin/bitcoin/pull/12892.\n\n  Main motivations:\n  - There is currently no test coverage for the getaddressinfo `labels` response. Coverage here is a prerequisite before deprecating the `label` response or adding multiple labels per address.\n  - `bitcoin-cli help getaddressinfo` returns a few content errors, difficult-to-read formatting, and no explanation why it returns both `label` and `labels` and how they relate, which can be confusing for application developers.\n\n  Changes by order of commits:\n  - [x] improve/fix getaddressinfo RPCHelpman layout formatting\n  - [x] improve/fix getaddressinfo RPCHelpman content\n  - [x] clarify the `label` and `labels` fields in getaddressinfo RPCHelpman\n  - [x] update getaddressinfo RPCExamples addresses to bech32\n  - [x] add getaddressinfo code docs\n  - [x] add a `listlabels` test assertion in wallet_labels.py\n  - [x] add missing getaddressinfo `labels` test coverage and improve the existing `label` tests\n\n  Here are gists of the CLI help output:\n  [`bitcoin-cli help getaddressinfo` before this PR](https://gist.github.com/jonatack/022af5221a85c069780359a22643c810)\n  [`bitcoin-cli help getaddressinfo` after this PR](https://gist.github.com/jonatack/4ee5f6abc62a3d99269570206a5f90ba)\n\n  It seems we ought to begin a deprecation process for the getaddressinfo `label` field? If yes, I have a follow-up ready. _--> EDIT: Deprecation follow-ups #17578 and #17585 now build on this PR._\n\nACKs for top commit:\n  fjahr:\n    Re-ACK 33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151\n  jnewbery:\n    ACK 33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151.\n\nTree-SHA512: a001aa863090ec2566a31059477945b1c303ebeb430b33472f8b150e420fa5742fc33bca9d95571746395b607f43f6078dd5b53e238ac1f3fc648b51c8f79a07\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a66626d63135fd245d5afc524b88b9a94d208b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8a66626d63135fd245d5afc524b88b9a94d208b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a66626d63135fd245d5afc524b88b9a94d208b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fb82e916b3b92c14443db23d7f606eb02cf1654",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fb82e916b3b92c14443db23d7f606eb02cf1654",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fb82e916b3b92c14443db23d7f606eb02cf1654"
      },
      {
        "sha": "33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151"
      }
    ],
    "stats": {
      "total": 178,
      "additions": 118,
      "deletions": 60
    },
    "files": [
      {
        "sha": "d906f6ddf072e8f9d87fa621b6af80e1cdd4c0b7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 36,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a66626d63135fd245d5afc524b88b9a94d208b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a66626d63135fd245d5afc524b88b9a94d208b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d8a66626d63135fd245d5afc524b88b9a94d208b",
        "patch": "@@ -951,7 +951,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n     }\n \n             RPCHelpMan{\"addmultisigaddress\",\n-                \"\\nAdd a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n+                \"\\nAdd an nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n                 \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n                 \"This functionality is only intended for use with non-watchonly addresses.\\n\"\n                 \"See `importaddress` for watchonly p2sh address support.\\n\"\n@@ -3709,52 +3709,57 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     }\n \n             RPCHelpMan{\"getaddressinfo\",\n-                \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n-                \"to be in the wallet.\\n\",\n+                \"\\nReturn information about the given bitcoin address.\\n\"\n+                \"Some of the information will only be present if the address is in the active wallet.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to get the information of.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for which to get information.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n-            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex-encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n-            \"  \\\"solvable\\\" : true|false,      (boolean) Whether we know how to spend coins sent to this address, ignoring the possible lack of private keys\\n\"\n-            \"  \\\"desc\\\" : \\\"desc\\\",            (string, optional) A descriptor for spending coins sent to this address (only when solvable)\\n\"\n-            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"ischange\\\" : true|false,      (boolean) If the address was used for change output\\n\"\n-            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n-            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",              (string) The bitcoin address validated.\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",             (string) The hex-encoded scriptPubKey generated by the address.\\n\"\n+            \"  \\\"ismine\\\" : true|false,              (boolean) If the address is yours.\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,         (boolean) If the address is watchonly.\\n\"\n+            \"  \\\"solvable\\\" : true|false,            (boolean) If we know how to spend coins sent to this address, ignoring the possible lack of private keys.\\n\"\n+            \"  \\\"desc\\\" : \\\"desc\\\",                    (string, optional) A descriptor for spending coins sent to this address (only when solvable).\\n\"\n+            \"  \\\"isscript\\\" : true|false,            (boolean) If the key is a script.\\n\"\n+            \"  \\\"ischange\\\" : true|false,            (boolean) If the address was used for change output.\\n\"\n+            \"  \\\"iswitness\\\" : true|false,           (boolean) If the address is a witness address.\\n\"\n+            \"  \\\"witness_version\\\" : version         (numeric, optional) The version number of the witness program.\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"           (string, optional) The hex value of the witness program.\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"                   (string, optional) The output script type. Only if isscript is true and the redeemscript is known. Possible\\n\"\n+            \"                                                         types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash,\\n\"\n+            \"                                                         witness_v0_scripthash, witness_unknown.\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                      (string, optional) The redeemscript for the p2sh address.\\n\"\n+            \"  \\\"pubkeys\\\"                           (array, optional) Array of pubkeys associated with the known redeemscript (only if script is multisig).\\n\"\n             \"    [\\n\"\n-            \"      \\\"pubkey\\\"\\n\"\n+            \"      \\\"pubkey\\\" (string)\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n-            \"  \\\"embedded\\\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdseedid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\").\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean, optional) If the pubkey is compressed\\n\"\n-            \"  \\\"label\\\" :  \\\"label\\\"         (string) The label associated with the address, \\\"\\\" is the default label\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"      (string, optional) The Hash160 of the HD seed\\n\"\n-            \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingperint of the master key.\\n\"\n-            \"  \\\"labels\\\"                      (object) Array of labels associated with the address.\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx              (numeric, optional) The number of signatures required to spend multisig output (only if script is multisig).\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",          (string, optional) The hex value of the raw public key for single-key addresses (possibly embedded in P2SH or P2WSH).\\n\"\n+            \"  \\\"embedded\\\" : {...},                 (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. Includes all\\n\"\n+            \"                                                         getaddressinfo output fields for the embedded address, excluding metadata (timestamp, hdkeypath,\\n\"\n+            \"                                                         hdseedid) and relation to the wallet (ismine, iswatchonly).\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,        (boolean, optional) If the pubkey is compressed.\\n\"\n+            \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address. Defaults to \\\"\\\". Equivalent to the name field in the labels array.\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key if available, expressed in seconds since Epoch Time (Jan 1 1970 GMT).\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"             (string, optional) The HD keypath, if the key is HD and available.\\n\"\n+            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) The Hash160 of the HD seed.\\n\"\n+            \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingerprint of the master key.\\n\"\n+            \"  \\\"labels\\\"                            (object) An array of labels associated with the address. Currently limited to one label but returned\\n\"\n+            \"                                               as an array to keep the API stable if multiple labels are enabled in the future.\\n\"\n             \"    [\\n\"\n             \"      { (json object of label data)\\n\"\n-            \"        \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n-            \"        \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"        \\\"name\\\": \\\"label name\\\" (string) The label name. Defaults to \\\"\\\". Equivalent to the label field above.\\n\"\n+            \"        \\\"purpose\\\": \\\"purpose\\\" (string) The purpose of the associated address (send or receive).\\n\"\n             \"      },...\\n\"\n             \"    ]\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n-                    HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n-            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+                    HelpExampleCli(\"getaddressinfo\", \"\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\"\") +\n+                    HelpExampleRpc(\"getaddressinfo\", \"\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\"\")\n                 },\n             }.Check(request);\n \n@@ -3773,23 +3778,39 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n     CScript scriptPubKey = GetScriptForDestination(dest);\n     ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+\n     const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n \n     isminetype mine = pwallet->IsMine(dest);\n     ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n+\n     bool solvable = provider && IsSolvable(*provider, scriptPubKey);\n     ret.pushKV(\"solvable\", solvable);\n+\n     if (solvable) {\n        ret.pushKV(\"desc\", InferDescriptor(scriptPubKey, *provider)->ToString());\n     }\n+\n     ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n+\n+    // Return DescribeWalletAddress fields.\n+    // Always returned: isscript, ischange, iswitness.\n+    // Optional: witness_version, witness_program, script, hex, pubkeys (array),\n+    // sigsrequired, pubkey, embedded, iscompressed.\n     UniValue detail = DescribeWalletAddress(pwallet, dest);\n     ret.pushKVs(detail);\n+\n+    // Return label field if existing. Currently only one label can be\n+    // associated with an address, so the label should be equivalent to the\n+    // value of the name key/value pair in the labels hash array below.\n     if (pwallet->mapAddressBook.count(dest)) {\n         ret.pushKV(\"label\", pwallet->mapAddressBook[dest].name);\n     }\n+\n     ret.pushKV(\"ischange\", pwallet->IsChange(scriptPubKey));\n \n+    // Fetch KeyMetadata, if present, for the timestamp, hdkeypath, hdseedid,\n+    // and hdmasterfingerprint fields.\n     ScriptPubKeyMan* spk_man = pwallet->GetScriptPubKeyMan(scriptPubKey);\n     if (spk_man) {\n         if (const CKeyMetadata* meta = spk_man->GetMetadata(dest)) {\n@@ -3802,9 +3823,11 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n         }\n     }\n \n-    // Currently only one label can be associated with an address, return an array\n-    // so the API remains stable if we allow multiple labels to be associated with\n-    // an address.\n+    // Return a labels array containing a hash of key/value pairs for the label\n+    // name and address purpose. The name value is equivalent to the label field\n+    // above. Currently only one label can be associated with an address, but we\n+    // return an array so the API remains stable if we allow multiple labels to\n+    // be associated with an address in the future.\n     UniValue labels(UniValue::VARR);\n     std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n     if (mi != pwallet->mapAddressBook.end()) {"
      },
      {
        "sha": "3d81a61120270b4c4e6422d354579a7d10075100",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a66626d63135fd245d5afc524b88b9a94d208b/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a66626d63135fd245d5afc524b88b9a94d208b/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=d8a66626d63135fd245d5afc524b88b9a94d208b",
        "patch": "@@ -88,6 +88,11 @@ def get_multisig(node):\n                     p2sh_p2wsh_script=CScript([OP_HASH160, witness_script, OP_EQUAL]).hex(),\n                     p2sh_p2wsh_addr=script_to_p2sh_p2wsh(script_code))\n \n+def labels_value(name=\"\", purpose=\"receive\"):\n+    \"\"\"Generate a getaddressinfo labels array from a name and purpose.\n+    Often used as the value of a labels kwarg for calling test_address below.\"\"\"\n+    return [{\"name\": name, \"purpose\": purpose}]\n+\n def test_address(node, address, **kwargs):\n     \"\"\"Get address info for `address` and test whether the returned values are as expected.\"\"\"\n     addr_info = node.getaddressinfo(address)"
      },
      {
        "sha": "130fa3cfaf78dac939055a9a4eac04907eee1f8b",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a66626d63135fd245d5afc524b88b9a94d208b/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a66626d63135fd245d5afc524b88b9a94d208b/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=d8a66626d63135fd245d5afc524b88b9a94d208b",
        "patch": "@@ -15,6 +15,10 @@\n     connect_nodes,\n     wait_until,\n )\n+from test_framework.wallet_util import (\n+    labels_value,\n+    test_address,\n+)\n \n \n class WalletTest(BitcoinTestFramework):\n@@ -390,7 +394,7 @@ def run_test(self):\n             for label in [u'\u0440\u044b\u0431\u0430', u'\ud834\udd61']:\n                 addr = self.nodes[0].getnewaddress()\n                 self.nodes[0].setlabel(addr, label)\n-                assert_equal(self.nodes[0].getaddressinfo(addr)['label'], label)\n+                test_address(self.nodes[0], addr, label=label, labels=labels_value(name=label))\n                 assert label in self.nodes[0].listlabels()\n         self.nodes[0].rpc.ensure_ascii = True  # restore to default\n "
      },
      {
        "sha": "e356fce46944da2da83e9b07891d51f4693f01aa",
        "filename": "test/functional/wallet_import_with_label.py",
        "status": "modified",
        "additions": 22,
        "deletions": 9,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a66626d63135fd245d5afc524b88b9a94d208b/test/functional/wallet_import_with_label.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a66626d63135fd245d5afc524b88b9a94d208b/test/functional/wallet_import_with_label.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_with_label.py?ref=d8a66626d63135fd245d5afc524b88b9a94d208b",
        "patch": "@@ -11,7 +11,10 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.wallet_util import test_address\n+from test_framework.wallet_util import (\n+    labels_value,\n+    test_address,\n+)\n \n \n class ImportWithLabel(BitcoinTestFramework):\n@@ -36,7 +39,8 @@ def run_test(self):\n                      address,\n                      iswatchonly=True,\n                      ismine=False,\n-                     label=label)\n+                     label=label,\n+                     labels=labels_value(name=label))\n \n         self.log.info(\n             \"Import the watch-only address's private key without a \"\n@@ -47,7 +51,8 @@ def run_test(self):\n \n         test_address(self.nodes[1],\n                      address,\n-                     label=label)\n+                     label=label,\n+                     labels=labels_value(name=label))\n \n         self.log.info(\n             \"Test importaddress without label and importprivkey with label.\"\n@@ -59,7 +64,8 @@ def run_test(self):\n                      address2,\n                      iswatchonly=True,\n                      ismine=False,\n-                     label=\"\")\n+                     label=\"\",\n+                     labels=labels_value())\n \n         self.log.info(\n             \"Import the watch-only address's private key with a \"\n@@ -71,7 +77,8 @@ def run_test(self):\n \n         test_address(self.nodes[1],\n                      address2,\n-                     label=label2)\n+                     label=label2,\n+                     labels=labels_value(name=label2))\n \n         self.log.info(\"Test importaddress with label and importprivkey with label.\")\n         self.log.info(\"Import a watch-only address with a label.\")\n@@ -82,7 +89,8 @@ def run_test(self):\n                      address3,\n                      iswatchonly=True,\n                      ismine=False,\n-                     label=label3_addr)\n+                     label=label3_addr,\n+                     labels=labels_value(name=label3_addr))\n \n         self.log.info(\n             \"Import the watch-only address's private key with a \"\n@@ -94,7 +102,8 @@ def run_test(self):\n \n         test_address(self.nodes[1],\n                      address3,\n-                     label=label3_priv)\n+                     label=label3_priv,\n+                     labels=labels_value(name=label3_priv))\n \n         self.log.info(\n             \"Test importprivkey won't label new dests with the same \"\n@@ -109,6 +118,7 @@ def run_test(self):\n                      iswatchonly=True,\n                      ismine=False,\n                      label=label4_addr,\n+                     labels=labels_value(name=label4_addr),\n                      embedded=None)\n \n         self.log.info(\n@@ -123,10 +133,13 @@ def run_test(self):\n \n         test_address(self.nodes[1],\n                      embedded_addr,\n-                     label=\"\")\n+                     label=\"\",\n+                     labels=labels_value())\n+\n         test_address(self.nodes[1],\n                      address4,\n-                     label=label4_addr)\n+                     label=label4_addr,\n+                     labels=labels_value(name=label4_addr))\n \n         self.stop_nodes()\n "
      },
      {
        "sha": "5febac5998b75fa5dc04c21076941c57748968c6",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a66626d63135fd245d5afc524b88b9a94d208b/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a66626d63135fd245d5afc524b88b9a94d208b/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=d8a66626d63135fd245d5afc524b88b9a94d208b",
        "patch": "@@ -29,6 +29,7 @@\n from test_framework.wallet_util import (\n     get_key,\n     get_multisig,\n+    labels_value,\n     test_address,\n )\n \n@@ -121,7 +122,7 @@ def run_test(self):\n         self.test_importmulti({\"scriptPubKey\": key.p2pkh_script,\n                                \"timestamp\": \"now\",\n                                \"internal\": True,\n-                               \"label\": \"Example label\"},\n+                               \"label\": \"Unsuccessful labelling for internal addresses\"},\n                               success=False,\n                               error_code=-8,\n                               error_message='Internal addresses should not have a label')\n@@ -550,25 +551,27 @@ def run_test(self):\n         self.log.info(\"Should not import a p2sh-p2wpkh address from descriptor without checksum and private key\")\n         self.test_importmulti({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n                                \"timestamp\": \"now\",\n-                               \"label\": \"Descriptor import test\",\n+                               \"label\": \"Unsuccessful P2SH-P2WPKH descriptor import\",\n                                \"keys\": [key.privkey]},\n                               success=False,\n                               error_code=-5,\n                               error_message=\"Missing checksum\")\n \n         # Test importing of a P2SH-P2WPKH address via descriptor + private key\n         key = get_key(self.nodes[0])\n+        p2sh_p2wpkh_label = \"Successful P2SH-P2WPKH descriptor import\"\n         self.log.info(\"Should import a p2sh-p2wpkh address from descriptor and private key\")\n         self.test_importmulti({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n                                \"timestamp\": \"now\",\n-                               \"label\": \"Descriptor import test\",\n+                               \"label\": p2sh_p2wpkh_label,\n                                \"keys\": [key.privkey]},\n                               success=True)\n         test_address(self.nodes[1],\n                      key.p2sh_p2wpkh_addr,\n                      solvable=True,\n                      ismine=True,\n-                     label=\"Descriptor import test\")\n+                     label=p2sh_p2wpkh_label,\n+                     labels=labels_value(name=p2sh_p2wpkh_label))\n \n         # Test ranged descriptor fails if range is not specified\n         xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n@@ -628,17 +631,19 @@ def run_test(self):\n \n         # Test importing of a P2PKH address via descriptor\n         key = get_key(self.nodes[0])\n+        p2pkh_label = \"P2PKH descriptor import\"\n         self.log.info(\"Should import a p2pkh address from descriptor\")\n         self.test_importmulti({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n                                \"timestamp\": \"now\",\n-                               \"label\": \"Descriptor import test\"},\n+                               \"label\": p2pkh_label},\n                               True,\n                               warnings=[\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\"])\n         test_address(self.nodes[1],\n                      key.p2pkh_addr,\n                      solvable=True,\n                      ismine=False,\n-                     label=\"Descriptor import test\")\n+                     label=p2pkh_label,\n+                     labels=labels_value(name=p2pkh_label))\n \n         # Test import fails if both desc and scriptPubKey are provided\n         key = get_key(self.nodes[0])"
      },
      {
        "sha": "27371d43bb4a15512177b2e37125d41d101fe597",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a66626d63135fd245d5afc524b88b9a94d208b/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a66626d63135fd245d5afc524b88b9a94d208b/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=d8a66626d63135fd245d5afc524b88b9a94d208b",
        "patch": "@@ -13,6 +13,10 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet_util import (\n+    labels_value,\n+    test_address,\n+)\n \n class WalletLabelsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -152,14 +156,14 @@ def add_receive_address(self, address):\n     def verify(self, node):\n         if self.receive_address is not None:\n             assert self.receive_address in self.addresses\n-\n         for address in self.addresses:\n-            assert_equal(\n-                node.getaddressinfo(address)['labels'][0],\n-                {\"name\": self.name,\n-                 \"purpose\": self.purpose[address]})\n-            assert_equal(node.getaddressinfo(address)['label'], self.name)\n-\n+            test_address(\n+                node,\n+                address,\n+                label=self.name,\n+                labels=labels_value(name=self.name, purpose=self.purpose[address])\n+             )\n+        assert self.name in node.listlabels()\n         assert_equal(\n             node.getaddressesbylabel(self.name),\n             {address: {\"purpose\": self.purpose[address]} for address in self.addresses})"
      },
      {
        "sha": "afd473306d52aea19b4212039a9d4e75798edf41",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a66626d63135fd245d5afc524b88b9a94d208b/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a66626d63135fd245d5afc524b88b9a94d208b/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=d8a66626d63135fd245d5afc524b88b9a94d208b",
        "patch": "@@ -11,6 +11,10 @@\n     assert_equal,\n     assert_raises_rpc_error,\n )\n+from test_framework.wallet_util import (\n+    labels_value,\n+    test_address,\n+)\n \n \n class ReceivedByTest(BitcoinTestFramework):\n@@ -127,7 +131,7 @@ def run_test(self):\n         # set pre-state\n         label = ''\n         address = self.nodes[1].getnewaddress()\n-        assert_equal(self.nodes[1].getaddressinfo(address)['label'], label)\n+        test_address(self.nodes[1], address, label=label, labels=labels_value(name=label))\n         received_by_label_json = [r for r in self.nodes[1].listreceivedbylabel() if r[\"label\"] == label][0]\n         balance_by_label = self.nodes[1].getreceivedbylabel(label)\n "
      }
    ]
  },
  {
    "sha": "9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmNmOGNlN2FlMDJiZjE3MGI5YmYwYzI4ODdmZDcwOWQ3NTJjYmY3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-19T23:33:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-26T16:46:40Z"
      },
      "message": "Rename Keep/ReturnKey to Keep/ReturnDestination and remove the wrapper\n\nThere is no reason to have Keep/ReturnDestination to be a wrapper for\nKeep/ReturnKey. Instead just make them the same function.",
      "tree": {
        "sha": "4416ea6c352f2c8dabea6aa83864a2cd957bc3d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4416ea6c352f2c8dabea6aa83864a2cd957bc3d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "596f6460f9fd8273665c8754ccd673d93a4f25f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/596f6460f9fd8273665c8754ccd673d93a4f25f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/596f6460f9fd8273665c8754ccd673d93a4f25f0"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 3,
      "deletions": 16
    },
    "files": [
      {
        "sha": "76a678d06a67330610a35eb9f585255b3a97ab54",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7",
        "patch": "@@ -274,16 +274,6 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n-void LegacyScriptPubKeyMan::KeepDestination(int64_t index)\n-{\n-    KeepKey(index);\n-}\n-\n-void LegacyScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CPubKey& pubkey)\n-{\n-    ReturnKey(index, internal, pubkey);\n-}\n-\n void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n {\n     AssertLockHeld(cs_wallet);\n@@ -1096,15 +1086,15 @@ void LegacyScriptPubKeyMan::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const\n     m_pool_key_to_index[pubkey.GetID()] = index;\n }\n \n-void LegacyScriptPubKeyMan::KeepKey(int64_t nIndex)\n+void LegacyScriptPubKeyMan::KeepDestination(int64_t nIndex)\n {\n     // Remove from key pool\n     WalletBatch batch(m_storage.GetDatabase());\n     batch.ErasePool(nIndex);\n     WalletLogPrintf(\"keypool keep %d\\n\", nIndex);\n }\n \n-void LegacyScriptPubKeyMan::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n+void LegacyScriptPubKeyMan::ReturnDestination(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n {\n     // Return to key pool\n     {\n@@ -1138,7 +1128,7 @@ bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, bool internal)\n             result = GenerateNewKey(batch, internal);\n             return true;\n         }\n-        KeepKey(nIndex);\n+        KeepDestination(nIndex);\n         result = keypool.vchPubKey;\n     }\n     return true;"
      },
      {
        "sha": "5d366f441ebb79ccbe1b29bc816902ee7be39ce8",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7",
        "patch": "@@ -266,9 +266,6 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n      */\n     bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n \n-    void KeepKey(int64_t nIndex);\n-    void ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey);\n-\n public:\n     bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n     isminetype IsMine(const CScript& script) const override;"
      }
    ]
  },
  {
    "sha": "65833a74076cddf986037c6eb3b29a9b9dbe31c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTgzM2E3NDA3NmNkZGY5ODYwMzdjNmViM2IyOWE5YjlkYmUzMWM1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-26T16:52:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-26T16:52:51Z"
      },
      "message": "Add OutputType and CPubKey parameters to KeepDestination\n\nThese need to be added so that LearnRelatedScripts can be called\nfrom within KeepDestination later.",
      "tree": {
        "sha": "785a8a3f8ed8369d8954fd38d6ba2369753cb8f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/785a8a3f8ed8369d8954fd38d6ba2369753cb8f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65833a74076cddf986037c6eb3b29a9b9dbe31c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65833a74076cddf986037c6eb3b29a9b9dbe31c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65833a74076cddf986037c6eb3b29a9b9dbe31c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65833a74076cddf986037c6eb3b29a9b9dbe31c5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "f7153a751f08620e0ca63380bba245b9bf1e781b",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65833a74076cddf986037c6eb3b29a9b9dbe31c5/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65833a74076cddf986037c6eb3b29a9b9dbe31c5/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=65833a74076cddf986037c6eb3b29a9b9dbe31c5",
        "patch": "@@ -18,7 +18,7 @@ bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestinat\n \n     // Generate a new key that is added to wallet\n     CPubKey new_key;\n-    if (!GetKeyFromPool(new_key)) {\n+    if (!GetKeyFromPool(new_key, type)) {\n         error = \"Error: Keypool ran out, please call keypoolrefill first\";\n         return false;\n     }\n@@ -1086,7 +1086,7 @@ void LegacyScriptPubKeyMan::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const\n     m_pool_key_to_index[pubkey.GetID()] = index;\n }\n \n-void LegacyScriptPubKeyMan::KeepDestination(int64_t nIndex)\n+void LegacyScriptPubKeyMan::KeepDestination(int64_t nIndex, const OutputType& type, const CPubKey& pubkey)\n {\n     // Remove from key pool\n     WalletBatch batch(m_storage.GetDatabase());\n@@ -1112,7 +1112,7 @@ void LegacyScriptPubKeyMan::ReturnDestination(int64_t nIndex, bool fInternal, co\n     WalletLogPrintf(\"keypool return %d\\n\", nIndex);\n }\n \n-bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, bool internal)\n+bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, const OutputType type, bool internal)\n {\n     if (!CanGetAddresses(internal)) {\n         return false;\n@@ -1128,7 +1128,7 @@ bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, bool internal)\n             result = GenerateNewKey(batch, internal);\n             return true;\n         }\n-        KeepDestination(nIndex);\n+        KeepDestination(nIndex, type, keypool.vchPubKey);\n         result = keypool.vchPubKey;\n     }\n     return true;"
      },
      {
        "sha": "16901952a6b0d8ec9b16a09d5ed836cec7fde910",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65833a74076cddf986037c6eb3b29a9b9dbe31c5/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65833a74076cddf986037c6eb3b29a9b9dbe31c5/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=65833a74076cddf986037c6eb3b29a9b9dbe31c5",
        "patch": "@@ -151,7 +151,7 @@ class ScriptPubKeyMan\n     virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n \n     virtual bool GetReservedDestination(const OutputType type, bool internal, int64_t& index, CKeyPool& keypool) { return false; }\n-    virtual void KeepDestination(int64_t index) {}\n+    virtual void KeepDestination(int64_t index, const OutputType& type, const CPubKey& pubkey) {}\n     virtual void ReturnDestination(int64_t index, bool internal, const CPubKey& pubkey) {}\n \n     virtual bool TopUp(unsigned int size = 0) { return false; }\n@@ -248,7 +248,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n \n     //! Fetches a key from the keypool\n-    bool GetKeyFromPool(CPubKey &key, bool internal = false);\n+    bool GetKeyFromPool(CPubKey &key, const OutputType type, bool internal = false);\n \n     /**\n      * Reserves a key from the keypool and sets nIndex to its index\n@@ -274,7 +274,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n \n     bool GetReservedDestination(const OutputType type, bool internal, int64_t& index, CKeyPool& keypool) override;\n-    void KeepDestination(int64_t index) override;\n+    void KeepDestination(int64_t index, const OutputType& type, const CPubKey& pubkey) override;\n     void ReturnDestination(int64_t index, bool internal, const CPubKey& pubkey) override;\n \n     bool TopUp(unsigned int size = 0) override;"
      },
      {
        "sha": "179e7b39eac15a32c239d2e59a61ef5c5f6310a5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65833a74076cddf986037c6eb3b29a9b9dbe31c5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65833a74076cddf986037c6eb3b29a9b9dbe31c5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=65833a74076cddf986037c6eb3b29a9b9dbe31c5",
        "patch": "@@ -3317,7 +3317,7 @@ bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool inter\n void ReserveDestination::KeepDestination()\n {\n     if (nIndex != -1) {\n-        m_spk_man->KeepDestination(nIndex);\n+        m_spk_man->KeepDestination(nIndex, type, vchPubKey);\n         m_spk_man->LearnRelatedScripts(vchPubKey, type);\n     }\n     nIndex = -1;"
      }
    ]
  },
  {
    "sha": "ff330badd45067cb520b1cfa1844f60a4c9f2031",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjMzMGJhZGQ0NTA2N2NiNTIwYjFjZmExODQ0ZjYwYTRjOWYyMDMx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-25T07:19:57Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-26T18:02:46Z"
      },
      "message": "Default to bnb_used = false as there are many cases where BnB is not used",
      "tree": {
        "sha": "cad0b5bb7362c49534382cf0c6286aa69110f93e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cad0b5bb7362c49534382cf0c6286aa69110f93e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff330badd45067cb520b1cfa1844f60a4c9f2031",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff330badd45067cb520b1cfa1844f60a4c9f2031",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff330badd45067cb520b1cfa1844f60a4c9f2031",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff330badd45067cb520b1cfa1844f60a4c9f2031/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b79caf658019de2c65a53c9e11fd1d2f4c369b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b79caf658019de2c65a53c9e11fd1d2f4c369b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b79caf658019de2c65a53c9e11fd1d2f4c369b6"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 4,
      "deletions": 7
    },
    "files": [
      {
        "sha": "647b381b39471f8d883e9d13af7549b26c9844ce",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff330badd45067cb520b1cfa1844f60a4c9f2031/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff330badd45067cb520b1cfa1844f60a4c9f2031/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ff330badd45067cb520b1cfa1844f60a4c9f2031",
        "patch": "@@ -2270,12 +2270,12 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     std::vector<COutput> vCoins(vAvailableCoins);\n     CAmount value_to_select = nTargetValue;\n \n+    // Default to bnb was not used. If we use it, we set it later\n+    bnb_used = false;\n+\n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coin_control.HasSelected() && !coin_control.fAllowOtherInputs)\n     {\n-        // We didn't use BnB here, so set it to false.\n-        bnb_used = false;\n-\n         for (const COutput& out : vCoins)\n         {\n             if (!out.fSpendable)\n@@ -2300,14 +2300,12 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             const CWalletTx& wtx = it->second;\n             // Clearly invalid input, fail\n             if (wtx.tx->vout.size() <= outpoint.n) {\n-                bnb_used = false;\n                 return false;\n             }\n             // Just to calculate the marginal byte size\n             CInputCoin coin(wtx.tx, outpoint.n, wtx.GetSpendSize(outpoint.n, false));\n             nValueFromPresetInputs += coin.txout.nValue;\n             if (coin.m_input_bytes <= 0) {\n-                bnb_used = false;\n                 return false; // Not solvable, can't estimate size for fee\n             }\n             coin.effective_value = coin.txout.nValue - coin_selection_params.effective_fee.GetFee(coin.m_input_bytes);\n@@ -2318,7 +2316,6 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             }\n             setPresetCoins.insert(coin);\n         } else {\n-            bnb_used = false;\n             return false; // TODO: Allow non-wallet inputs\n         }\n     }\n@@ -2678,7 +2675,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 }\n \n                 // Choose coins to use\n-                bool bnb_used;\n+                bool bnb_used = false;\n                 if (pick_new_inputs) {\n                     nValueIn = 0;\n                     setCoins.clear();"
      }
    ]
  },
  {
    "sha": "eadd1304c81e0b89178e4cc7630bd31650850c85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWRkMTMwNGM4MWUwYjg5MTc4ZTRjYzc2MzBiZDMxNjUwODUwYzg1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-23T03:21:36Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-26T18:02:46Z"
      },
      "message": "tests: Add a test for funding with sufficient preset inputs and subtractFeeFromOutputs",
      "tree": {
        "sha": "5ef912f7e46c08e24d332d8aadf2f7346ab2cfc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ef912f7e46c08e24d332d8aadf2f7346ab2cfc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eadd1304c81e0b89178e4cc7630bd31650850c85",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eadd1304c81e0b89178e4cc7630bd31650850c85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eadd1304c81e0b89178e4cc7630bd31650850c85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eadd1304c81e0b89178e4cc7630bd31650850c85/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff330badd45067cb520b1cfa1844f60a4c9f2031",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff330badd45067cb520b1cfa1844f60a4c9f2031",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff330badd45067cb520b1cfa1844f60a4c9f2031"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6f1ae0d3ba4fbf9188adf2471c1a695469b8bc8b",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eadd1304c81e0b89178e4cc7630bd31650850c85/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eadd1304c81e0b89178e4cc7630bd31650850c85/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=eadd1304c81e0b89178e4cc7630bd31650850c85",
        "patch": "@@ -92,6 +92,7 @@ def run_test(self):\n         self.test_option_feerate()\n         self.test_address_reuse()\n         self.test_option_subtract_fee_from_outputs()\n+        self.test_subtract_fee_with_presets()\n \n     def test_change_position(self):\n         \"\"\"Ensure setting changePosition in fundraw with an exact match is handled properly.\"\"\"\n@@ -741,5 +742,17 @@ def test_option_subtract_fee_from_outputs(self):\n         # The total subtracted from the outputs is equal to the fee.\n         assert_equal(share[0] + share[2] + share[3], result[0]['fee'])\n \n+    def test_subtract_fee_with_presets(self):\n+        self.log.info(\"Test fundrawtxn subtract fee from outputs with preset inputs that are sufficient\")\n+\n+        addr = self.nodes[0].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        vout = find_vout_for_address(self.nodes[0], txid, addr)\n+\n+        rawtx = self.nodes[0].createrawtransaction([{'txid': txid, 'vout': vout}], [{self.nodes[0].getnewaddress(): 5}])\n+        fundedtx = self.nodes[0].fundrawtransaction(rawtx, {'subtractFeeFromOutputs': [0]})\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(fundedtx['hex'])\n+        self.nodes[0].sendrawtransaction(signedtx['hex'])\n+\n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      }
    ]
  },
  {
    "sha": "61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWJiMjFiNDE4MWMwNmI1OTU2YjVkNmYyZjc4MzFlNTZlNGYxY2Y2",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-03T19:57:11Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-27T17:25:29Z"
      },
      "message": "script: Enable SC2155 rule for Gitian scripts\n\nAlso pwd command is replaced with $PWD variable everywhere for\nconsistency.",
      "tree": {
        "sha": "be2d55b56a801fa0755ec091c1d1d84360d55596",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be2d55b56a801fa0755ec091c1d1d84360d55596"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl3esg0ACgkQQQEIES5+\nqB9ZQA//TrLKdePhiOxne2c0VOpeSGNwCtY/cbudDFE54B0jZ8SW9fi2Xcxqdnt8\nvvqcQRbLWNZTLeVDO56A65Nm3Th2lmwp7C2I69F/OU3S+QvdUpJdImcekhTPSq8h\npfkyIuyR/D3yBXsEEHpEulKHwfq1TVaWoKvVQjJDLM98X9Ax6ushaMusWieYgPyY\n/SUrcpUZah/WVW3rCRnXjHCDIj/RPavGr2P90ZGKhEf+aw5xiTFJ4FcmyK40xeZK\nOa7X2iJH2+MEne7Wfc1DhkaWqXjhfR90hM7NUtn7fbTrcx6U8IFLpr76WmkZzt3m\nYXoQE+Kxgq/ThqJOuAyP6VkvvZGbCskqcs8DSNR9zJvftW8VqQgOcvCwasebDCCW\nGF09x2P7FWYJCP/Xqt4LafXuC6eml+juoSGnfQdahKbHKvGrbAQ5bRk8F1n66HMU\nYKPeD7cueH5ovoJrhMlisTvycenwS57WBJcoT48FZVod+j7KBSbgbcvIIP3hzmUf\n/dhuvtQBsG6wn1jBng4fGVlnpOirQmghhrNjMqp5SgAzb6X7vlT4MDrO7E8pLEJn\nXue6X5r7F/w+EBOzVoVgp5pOTiaci0BTQoOd2tDNEkDNhWKIwRNTyYVGvL61SbCe\nXYoXpuYzfQ2gFxTf6awFBSzCMqTRsK0z0nd7OosQDS3oLA67Sts=\n=asMF\n-----END PGP SIGNATURE-----",
        "payload": "tree be2d55b56a801fa0755ec091c1d1d84360d55596\nparent 577682d9e8cc07a8db9459a47b01f6c18decba7c\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1572811031 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1574875529 +0200\n\nscript: Enable SC2155 rule for Gitian scripts\n\nAlso pwd command is replaced with $PWD variable everywhere for\nconsistency.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "577682d9e8cc07a8db9459a47b01f6c18decba7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/577682d9e8cc07a8db9459a47b01f6c18decba7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/577682d9e8cc07a8db9459a47b01f6c18decba7c"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 11,
      "deletions": 12
    },
    "files": [
      {
        "sha": "e994ab3cf8120c509358c16310619e9a66966101",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6",
        "patch": "@@ -51,7 +51,7 @@ script: |\n   export QT_RCC_TEST=1\n   export QT_RCC_SOURCE_DATE_OVERRIDE=1\n   export TZ=\"UTC\"\n-  export BUILD_DIR=$(pwd)\n+  export BUILD_DIR=\"$PWD\"\n   mkdir -p ${WRAP_DIR}\n   if test -n \"$GBUILD_CACHE_ENABLED\"; then\n     export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n@@ -122,7 +122,7 @@ script: |\n   done\n \n   cd bitcoin\n-  BASEPREFIX=$(pwd)/depends\n+  BASEPREFIX=\"${PWD}/depends\"\n   # Build dependencies for each host\n   for i in $HOSTS; do\n     EXTRA_INCLUDES=\"$EXTRA_INCLUDES_BASE/$i\"\n@@ -161,7 +161,7 @@ script: |\n     export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n     mkdir -p distsrc-${i}\n     cd distsrc-${i}\n-    INSTALLPATH=$(pwd)/installed/${DISTNAME}\n+    INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n     mkdir -p ${INSTALLPATH}\n     tar --strip-components=1 -xf ../$SOURCEDIST\n "
      },
      {
        "sha": "217fa038718062a3661210e41379752a7e9872cf",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6",
        "patch": "@@ -17,7 +17,7 @@ script: |\n \n   WRAP_DIR=$HOME/wrapped\n   mkdir -p ${WRAP_DIR}\n-  export PATH=$(pwd):$PATH\n+  export PATH=\"$PWD\":$PATH\n   FAKETIME_PROGS=\"dmg genisoimage\"\n \n   # Create global faketime wrappers"
      },
      {
        "sha": "39e2064c723b4eb3b380b2d21bcdb0cced08ba98",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6",
        "patch": "@@ -45,7 +45,7 @@ script: |\n   export QT_RCC_TEST=1\n   export QT_RCC_SOURCE_DATE_OVERRIDE=1\n   export TZ=\"UTC\"\n-  export BUILD_DIR=$(pwd)\n+  export BUILD_DIR=\"$PWD\"\n   mkdir -p ${WRAP_DIR}\n   if test -n \"$GBUILD_CACHE_ENABLED\"; then\n     export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n@@ -86,7 +86,7 @@ script: |\n   export PATH=${WRAP_DIR}:${PATH}\n \n   cd bitcoin\n-  BASEPREFIX=$(pwd)/depends\n+  BASEPREFIX=\"${PWD}/depends\"\n \n   mkdir -p ${BASEPREFIX}/SDKs\n   tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.11.sdk.tar.gz\n@@ -125,7 +125,7 @@ script: |\n     export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n     mkdir -p distsrc-${i}\n     cd distsrc-${i}\n-    INSTALLPATH=$(pwd)/installed/${DISTNAME}\n+    INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n     mkdir -p ${INSTALLPATH}\n     tar --strip-components=1 -xf ../$SOURCEDIST\n "
      },
      {
        "sha": "245690b03debec50d16c3c2151b3b5479edfc034",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6",
        "patch": "@@ -19,7 +19,7 @@ files:\n script: |\n   set -e -o pipefail\n \n-  BUILD_DIR=$(pwd)\n+  BUILD_DIR=\"$PWD\"\n   SIGDIR=${BUILD_DIR}/signature/win\n   UNSIGNED_DIR=${BUILD_DIR}/unsigned\n "
      },
      {
        "sha": "bb6f3fde1da70c88de19803c8595db986351891a",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6",
        "patch": "@@ -40,7 +40,7 @@ script: |\n   export QT_RCC_TEST=1\n   export QT_RCC_SOURCE_DATE_OVERRIDE=1\n   export TZ=\"UTC\"\n-  export BUILD_DIR=$(pwd)\n+  export BUILD_DIR=\"$PWD\"\n   mkdir -p ${WRAP_DIR}\n   if test -n \"$GBUILD_CACHE_ENABLED\"; then\n     export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n@@ -96,7 +96,7 @@ script: |\n   export PATH=${WRAP_DIR}:${PATH}\n \n   cd bitcoin\n-  BASEPREFIX=$(pwd)/depends\n+  BASEPREFIX=\"${PWD}/depends\"\n   # Build dependencies for each host\n   for i in $HOSTS; do\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n@@ -131,7 +131,7 @@ script: |\n     export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n     mkdir -p distsrc-${i}\n     cd distsrc-${i}\n-    INSTALLPATH=$(pwd)/installed/${DISTNAME}\n+    INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n     mkdir -p ${INSTALLPATH}\n     tar --strip-components=1 -xf ../$SOURCEDIST\n "
      },
      {
        "sha": "ce371455ed15fe196598b1de8fb12fbc8050518c",
        "filename": "test/lint/lint-shell.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6/test/lint/lint-shell.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6/test/lint/lint-shell.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-shell.sh?ref=61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6",
        "patch": "@@ -26,7 +26,6 @@ disabled_gitian=(\n     SC2001 # See if you can use ${variable//search/replace} instead.\n     SC2094 # Make sure not to read and write the same file in the same pipeline.\n     SC2129 # Consider using { cmd1; cmd2; } >> file instead of individual redirects.\n-    SC2155 # Declare and assign separately to avoid masking return values.\n     SC2230 # which is non-standard. Use builtin 'command -v' instead.\n )\n "
      }
    ]
  },
  {
    "sha": "17f81e96486780df5d464487975ecb11b278ec8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2Y4MWU5NjQ4Njc4MGRmNWQ0NjQ0ODc5NzVlY2IxMWIyNzhlYzhk",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-03T20:32:50Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-27T17:27:56Z"
      },
      "message": "script: Enable SC2001 rule for Gitian scripts",
      "tree": {
        "sha": "96369d9a631c1996c0c794091120fd1fdf54bb92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96369d9a631c1996c0c794091120fd1fdf54bb92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17f81e96486780df5d464487975ecb11b278ec8d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl3eshwACgkQQQEIES5+\nqB9uaQ/7BMXrhF44EaAqRA9BIb9qqaE2dUqnf+Tg1fcxjxsl3/XVpjp5eMceEqH9\nvykiI1k03I9fnE33NaZ6F8V+ts/TSgDqOEMCGrav0CL20h8nghXhk3csXMgHigbE\nbVnqJ1NWVPBbNm/oSR/qlBedNU6hfNEVeI0m8WRfPS570WjzHScwMYBuvpei5Ec0\ntZWU1091Fznfn4hGW28aUEHNnkXXaXZ1IkvQOvm1ZQ3DWFscVktIpV87ZoIYMPvG\nmhhg6cxqmD0rz2aKl72A8Qxmtb4oAD+HqdSGggxlzMYQn/adqmmyzo4nV3RQ+2Tv\n8NRFpI6PIPc+ukDuizkLkFPy3ZA/ZwRRFqLUaAw6H6EpM71QCFvrd34ixEcW8FYK\nZ9Dtons7QRMzzBZ/QkLfHrqTcTziXQFtPNQjjpWdWEWAR19wE2dtE3qN/D0asBCZ\nTmgQfFhsSEcF3Av75kDNt7MIZHXXoxBO0H/f/0t6zllPw2ZFogWHD9FVxYlYgfzd\nqvFxyJgweoICRkqt974h3CMMW2mij3fLH7aTZDQE/hj7UmqMi4ZTy5PW5xH82FXW\n9oNe6X8v51uLzfHobvl9FVRmiZ7WM/T6s/XwyySU73du5B3wqHkOjDSaGV2GtLT8\nN6ds2xcp3/48w3B5l73q5VLLuR3d++rgLbpDdQWW3/Vg5SjDJiI=\n=CG/Z\n-----END PGP SIGNATURE-----",
        "payload": "tree 96369d9a631c1996c0c794091120fd1fdf54bb92\nparent 61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1572813170 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1574875676 +0200\n\nscript: Enable SC2001 rule for Gitian scripts\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17f81e96486780df5d464487975ecb11b278ec8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17f81e96486780df5d464487975ecb11b278ec8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17f81e96486780df5d464487975ecb11b278ec8d/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4d7e327359cfddd0002a5cc9a3fe40e408b8e4bf",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17f81e96486780df5d464487975ecb11b278ec8d/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17f81e96486780df5d464487975ecb11b278ec8d/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=17f81e96486780df5d464487975ecb11b278ec8d",
        "patch": "@@ -144,7 +144,8 @@ script: |\n   CONFIG_SITE=${BASEPREFIX}/$(echo \"${HOSTS}\" | awk '{print $1;}')/share/config.site ./configure --prefix=/\n   make dist\n   SOURCEDIST=$(echo bitcoin-*.tar.gz)\n-  DISTNAME=$(echo ${SOURCEDIST} | sed 's/.tar.*//')\n+  DISTNAME=${SOURCEDIST/%.tar.gz}\n+\n   # Correct tar file order\n   mkdir -p temp\n   pushd temp"
      },
      {
        "sha": "125fe6e915ced363f45ec7b49b77e47d7d2dcebf",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17f81e96486780df5d464487975ecb11b278ec8d/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17f81e96486780df5d464487975ecb11b278ec8d/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=17f81e96486780df5d464487975ecb11b278ec8d",
        "patch": "@@ -107,7 +107,7 @@ script: |\n   CONFIG_SITE=${BASEPREFIX}/$(echo \"${HOSTS}\" | awk '{print $1;}')/share/config.site ./configure --prefix=/\n   make dist\n   SOURCEDIST=$(echo bitcoin-*.tar.gz)\n-  DISTNAME=$(echo ${SOURCEDIST} | sed 's/.tar.*//')\n+  DISTNAME=${SOURCEDIST/%.tar.gz}\n \n   # Correct tar file order\n   mkdir -p temp"
      },
      {
        "sha": "3bcf08abb85cf31687332b5f28b2b86f7eb1efd5",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17f81e96486780df5d464487975ecb11b278ec8d/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17f81e96486780df5d464487975ecb11b278ec8d/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=17f81e96486780df5d464487975ecb11b278ec8d",
        "patch": "@@ -37,6 +37,6 @@ script: |\n   make\n   find ${UNSIGNED_DIR} -name \"*-unsigned.exe\" | while read i; do\n     INFILE=\"$(basename \"${i}\")\"\n-    OUTFILE=\"$(echo \"${INFILE}\" | sed s/-unsigned//)\"\n+    OUTFILE=\"${INFILE/%-unsigned}\"\n     ./osslsigncode attach-signature -in \"${i}\" -out \"${OUTDIR}/${OUTFILE}\" -sigin \"${SIGDIR}/${INFILE}.pem\"\n   done"
      },
      {
        "sha": "751204d3662217fe72730dc22b04708741fd4fac",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17f81e96486780df5d464487975ecb11b278ec8d/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17f81e96486780df5d464487975ecb11b278ec8d/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=17f81e96486780df5d464487975ecb11b278ec8d",
        "patch": "@@ -114,7 +114,8 @@ script: |\n   CONFIG_SITE=${BASEPREFIX}/$(echo \"${HOSTS}\" | awk '{print $1;}')/share/config.site ./configure --prefix=/\n   make dist\n   SOURCEDIST=$(echo bitcoin-*.tar.gz)\n-  DISTNAME=$(echo ${SOURCEDIST} | sed 's/.tar.*//')\n+  DISTNAME=${SOURCEDIST/%.tar.gz}\n+\n   # Correct tar file order\n   mkdir -p temp\n   pushd temp"
      },
      {
        "sha": "63624e3ae09df90d2edc906c28436faf136aca2e",
        "filename": "test/lint/lint-shell.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17f81e96486780df5d464487975ecb11b278ec8d/test/lint/lint-shell.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17f81e96486780df5d464487975ecb11b278ec8d/test/lint/lint-shell.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-shell.sh?ref=17f81e96486780df5d464487975ecb11b278ec8d",
        "patch": "@@ -23,7 +23,6 @@ disabled=(\n     SC2162 # read without -r will mangle backslashes.\n )\n disabled_gitian=(\n-    SC2001 # See if you can use ${variable//search/replace} instead.\n     SC2094 # Make sure not to read and write the same file in the same pipeline.\n     SC2129 # Consider using { cmd1; cmd2; } >> file instead of individual redirects.\n     SC2230 # which is non-standard. Use builtin 'command -v' instead."
      }
    ]
  },
  {
    "sha": "73b96c94cb6c2afdee7f151768a96944ecaf9d9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2I5NmM5NGNiNmMyYWZkZWU3ZjE1MTc2OGE5Njk0NGVjYWY5ZDli",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-11-27T21:27:56Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-11-27T21:27:56Z"
      },
      "message": "net: Fix uninitialized read in ProcessMessage(...)",
      "tree": {
        "sha": "910ff3e874b203f2e6104df57990422858bdb408",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/910ff3e874b203f2e6104df57990422858bdb408"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73b96c94cb6c2afdee7f151768a96944ecaf9d9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73b96c94cb6c2afdee7f151768a96944ecaf9d9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73b96c94cb6c2afdee7f151768a96944ecaf9d9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73b96c94cb6c2afdee7f151768a96944ecaf9d9b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8a66626d63135fd245d5afc524b88b9a94d208b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a66626d63135fd245d5afc524b88b9a94d208b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8a66626d63135fd245d5afc524b88b9a94d208b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3401eb64ca87446b7b820c1b06c36efa91243c54",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73b96c94cb6c2afdee7f151768a96944ecaf9d9b/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73b96c94cb6c2afdee7f151768a96944ecaf9d9b/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=73b96c94cb6c2afdee7f151768a96944ecaf9d9b",
        "patch": "@@ -114,7 +114,7 @@ inline ValidationState::~ValidationState() {};\n \n class TxValidationState : public ValidationState {\n private:\n-    TxValidationResult m_result;\n+    TxValidationResult m_result = TxValidationResult::TX_RESULT_UNSET;\n public:\n     bool Invalid(TxValidationResult result,\n                  const std::string &reject_reason=\"\",\n@@ -129,7 +129,7 @@ class TxValidationState : public ValidationState {\n \n class BlockValidationState : public ValidationState {\n private:\n-    BlockValidationResult m_result;\n+    BlockValidationResult m_result = BlockValidationResult::BLOCK_RESULT_UNSET;\n public:\n     bool Invalid(BlockValidationResult result,\n                  const std::string &reject_reason=\"\","
      }
    ]
  },
  {
    "sha": "1f59885d27a0c4812fb1a2324507e2b2e32057d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjU5ODg1ZDI3YTBjNDgxMmZiMWEyMzI0NTA3ZTJiMmUzMjA1N2Qz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-28T09:18:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-28T09:18:22Z"
      },
      "message": "Merge #17361: script: Lint Gitian descriptors with ShellCheck\n\n17f81e96486780df5d464487975ecb11b278ec8d script: Enable SC2001 rule for Gitian scripts (Hennadii Stepanov)\n61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6 script: Enable SC2155 rule for Gitian scripts (Hennadii Stepanov)\n577682d9e8cc07a8db9459a47b01f6c18decba7c script: Enable SC2006 rule for Gitian scripts (Hennadii Stepanov)\n14aded46df289e2d05f9fd79c81f2e8ed68a1487 script: Lint Gitian descriptors with ShellCheck (Hennadii Stepanov)\n\nPull request description:\n\n  This PR extracts shell scripts from Gitian descriptors (`contrib/gitian-descriptors/`) and checks for ShellCheck warnings as any other one.\n\n  Some non-controversial warnings are fixed.\n\nACKs for top commit:\n  practicalswift:\n    ACK 17f81e96486780df5d464487975ecb11b278ec8d -- diff looks correct\n\nTree-SHA512: bdfa3d35bbb65ff634c90835d75c3df63e958b558599771d21366724f5cf64da83a68957d926e926a99c3704b9529e96a17697dc8d9ff3adf7154d9cb1999a8d",
      "tree": {
        "sha": "554d71a47692e5aa9b4954aa3d3e5577fc02daff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/554d71a47692e5aa9b4954aa3d3e5577fc02daff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f59885d27a0c4812fb1a2324507e2b2e32057d3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3fkN4ACgkQHkrtYphs\n0l2TOQgAuxLi2B+s5ACfGwtcqWeJIneftUEqCQAyFNzjKSAC3oTGbQHyxU9ig/rE\ncZGcp1Aund6MBlQdcu85XU5njonu0wM1rG3DJQ6YgbkcU+QvjxIlI/qI/LElQoZy\n/E08YtOonnA5ua7FmVzMwRZ42SGsmvwiyoY4PUbSdxQc/DGmLLEMHTxeeoVN2hti\n+Hhg129S0vDfn+I8s55ieejMjI+ux93B9UrybcInmolYzgeNdgwm+MobotJjczLX\nExhYyxkC7OUXXFaPdwJqWNNNwml5Rl0r1J1kvG6IeyVLVVeZmIVqFkTa2qL1zoEo\n2CGO+fOz+W1TDkFQFRnt6Roxg1Z3lw==\n=t8nS\n-----END PGP SIGNATURE-----",
        "payload": "tree 554d71a47692e5aa9b4954aa3d3e5577fc02daff\nparent d8a66626d63135fd245d5afc524b88b9a94d208b\nparent 17f81e96486780df5d464487975ecb11b278ec8d\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1574932680 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1574932702 +0100\n\nMerge #17361: script: Lint Gitian descriptors with ShellCheck\n\n17f81e96486780df5d464487975ecb11b278ec8d script: Enable SC2001 rule for Gitian scripts (Hennadii Stepanov)\n61bb21b4181c06b5956b5d6f2f7831e56e4f1cf6 script: Enable SC2155 rule for Gitian scripts (Hennadii Stepanov)\n577682d9e8cc07a8db9459a47b01f6c18decba7c script: Enable SC2006 rule for Gitian scripts (Hennadii Stepanov)\n14aded46df289e2d05f9fd79c81f2e8ed68a1487 script: Lint Gitian descriptors with ShellCheck (Hennadii Stepanov)\n\nPull request description:\n\n  This PR extracts shell scripts from Gitian descriptors (`contrib/gitian-descriptors/`) and checks for ShellCheck warnings as any other one.\n\n  Some non-controversial warnings are fixed.\n\nACKs for top commit:\n  practicalswift:\n    ACK 17f81e96486780df5d464487975ecb11b278ec8d -- diff looks correct\n\nTree-SHA512: bdfa3d35bbb65ff634c90835d75c3df63e958b558599771d21366724f5cf64da83a68957d926e926a99c3704b9529e96a17697dc8d9ff3adf7154d9cb1999a8d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f59885d27a0c4812fb1a2324507e2b2e32057d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f59885d27a0c4812fb1a2324507e2b2e32057d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f59885d27a0c4812fb1a2324507e2b2e32057d3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8a66626d63135fd245d5afc524b88b9a94d208b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a66626d63135fd245d5afc524b88b9a94d208b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8a66626d63135fd245d5afc524b88b9a94d208b"
      },
      {
        "sha": "17f81e96486780df5d464487975ecb11b278ec8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17f81e96486780df5d464487975ecb11b278ec8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17f81e96486780df5d464487975ecb11b278ec8d"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 65,
      "deletions": 32
    },
    "files": [
      {
        "sha": "8b2d609504d5c0980b128ba28e4da4ee466e01f2",
        "filename": "ci/lint/04_install.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f59885d27a0c4812fb1a2324507e2b2e32057d3/ci/lint/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f59885d27a0c4812fb1a2324507e2b2e32057d3/ci/lint/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/04_install.sh?ref=1f59885d27a0c4812fb1a2324507e2b2e32057d3",
        "patch": "@@ -1,13 +1,14 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C\n \n travis_retry pip3 install codespell==1.15.0\n travis_retry pip3 install flake8==3.7.8\n+travis_retry pip3 install yq\n \n SHELLCHECK_VERSION=v0.6.0\n curl -s \"https://storage.googleapis.com/shellcheck/shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz\" | tar --xz -xf - --directory /tmp/"
      },
      {
        "sha": "2b86602a8296fed508d225e5b004c8c040a48d99",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f59885d27a0c4812fb1a2324507e2b2e32057d3/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f59885d27a0c4812fb1a2324507e2b2e32057d3/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=1f59885d27a0c4812fb1a2324507e2b2e32057d3",
        "patch": "@@ -51,7 +51,7 @@ script: |\n   export QT_RCC_TEST=1\n   export QT_RCC_SOURCE_DATE_OVERRIDE=1\n   export TZ=\"UTC\"\n-  export BUILD_DIR=`pwd`\n+  export BUILD_DIR=\"$PWD\"\n   mkdir -p ${WRAP_DIR}\n   if test -n \"$GBUILD_CACHE_ENABLED\"; then\n     export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n@@ -108,7 +108,7 @@ script: |\n   rm -f ${WRAP_DIR}/${prog}\n   cat << EOF > ${WRAP_DIR}/${prog}\n   #!/usr/bin/env bash\n-  REAL=\"`which -a ${prog}-8 | grep -v ${WRAP_DIR}/${prog} | head -1`\"\n+  REAL=\"$(which -a ${prog}-8 | grep -v ${WRAP_DIR}/${prog} | head -1)\"\n   for var in \"\\$@\"\n   do\n     if [ \"\\$var\" = \"-m32\" ]; then\n@@ -123,7 +123,7 @@ script: |\n   done\n \n   cd bitcoin\n-  BASEPREFIX=`pwd`/depends\n+  BASEPREFIX=\"${PWD}/depends\"\n   # Build dependencies for each host\n   for i in $HOSTS; do\n     EXTRA_INCLUDES=\"$EXTRA_INCLUDES_BASE/$i\"\n@@ -142,10 +142,11 @@ script: |\n \n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n-  CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n+  CONFIG_SITE=${BASEPREFIX}/$(echo \"${HOSTS}\" | awk '{print $1;}')/share/config.site ./configure --prefix=/\n   make dist\n-  SOURCEDIST=`echo bitcoin-*.tar.gz`\n-  DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n+  SOURCEDIST=$(echo bitcoin-*.tar.gz)\n+  DISTNAME=${SOURCEDIST/%.tar.gz}\n+\n   # Correct tar file order\n   mkdir -p temp\n   pushd temp\n@@ -169,7 +170,7 @@ script: |\n     fi\n     mkdir -p distsrc-${i}\n     cd distsrc-${i}\n-    INSTALLPATH=`pwd`/installed/${DISTNAME}\n+    INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n     mkdir -p ${INSTALLPATH}\n     tar --strip-components=1 -xf ../$SOURCEDIST\n "
      },
      {
        "sha": "2d49493641639cf398b30d0b2df071eca7611aa1",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f59885d27a0c4812fb1a2324507e2b2e32057d3/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f59885d27a0c4812fb1a2324507e2b2e32057d3/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=1f59885d27a0c4812fb1a2324507e2b2e32057d3",
        "patch": "@@ -17,7 +17,7 @@ script: |\n \n   WRAP_DIR=$HOME/wrapped\n   mkdir -p ${WRAP_DIR}\n-  export PATH=`pwd`:$PATH\n+  export PATH=\"$PWD\":$PATH\n   FAKETIME_PROGS=\"dmg genisoimage\"\n \n   # Create global faketime wrappers"
      },
      {
        "sha": "d3a2645c532d63b93c04f493371d0ec81c3f4b10",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f59885d27a0c4812fb1a2324507e2b2e32057d3/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f59885d27a0c4812fb1a2324507e2b2e32057d3/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=1f59885d27a0c4812fb1a2324507e2b2e32057d3",
        "patch": "@@ -45,7 +45,7 @@ script: |\n   export QT_RCC_TEST=1\n   export QT_RCC_SOURCE_DATE_OVERRIDE=1\n   export TZ=\"UTC\"\n-  export BUILD_DIR=`pwd`\n+  export BUILD_DIR=\"$PWD\"\n   mkdir -p ${WRAP_DIR}\n   if test -n \"$GBUILD_CACHE_ENABLED\"; then\n     export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n@@ -87,7 +87,7 @@ script: |\n   export PATH=${WRAP_DIR}:${PATH}\n \n   cd bitcoin\n-  BASEPREFIX=`pwd`/depends\n+  BASEPREFIX=\"${PWD}/depends\"\n \n   mkdir -p ${BASEPREFIX}/SDKs\n   tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.11.sdk.tar.gz\n@@ -105,10 +105,10 @@ script: |\n \n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n-  CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n+  CONFIG_SITE=${BASEPREFIX}/$(echo \"${HOSTS}\" | awk '{print $1;}')/share/config.site ./configure --prefix=/\n   make dist\n-  SOURCEDIST=`echo bitcoin-*.tar.gz`\n-  DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n+  SOURCEDIST=$(echo bitcoin-*.tar.gz)\n+  DISTNAME=${SOURCEDIST/%.tar.gz}\n \n   # Correct tar file order\n   mkdir -p temp\n@@ -126,7 +126,7 @@ script: |\n     export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n     mkdir -p distsrc-${i}\n     cd distsrc-${i}\n-    INSTALLPATH=`pwd`/installed/${DISTNAME}\n+    INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n     mkdir -p ${INSTALLPATH}\n     tar --strip-components=1 -xf ../$SOURCEDIST\n "
      },
      {
        "sha": "6a52db1f9f5ba372afe5a6e2cab19492285701fa",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f59885d27a0c4812fb1a2324507e2b2e32057d3/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f59885d27a0c4812fb1a2324507e2b2e32057d3/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=1f59885d27a0c4812fb1a2324507e2b2e32057d3",
        "patch": "@@ -19,7 +19,7 @@ files:\n script: |\n   set -e -o pipefail\n \n-  BUILD_DIR=`pwd`\n+  BUILD_DIR=\"$PWD\"\n   SIGDIR=${BUILD_DIR}/signature/win\n   UNSIGNED_DIR=${BUILD_DIR}/unsigned\n \n@@ -35,7 +35,7 @@ script: |\n   ./configure --without-gsf --without-curl --disable-dependency-tracking\n   make\n   find ${UNSIGNED_DIR} -name \"*-unsigned.exe\" | while read i; do\n-    INFILE=\"`basename \"${i}\"`\"\n-    OUTFILE=\"`echo \"${INFILE}\" | sed s/-unsigned//`\"\n+    INFILE=\"$(basename \"${i}\")\"\n+    OUTFILE=\"${INFILE/%-unsigned}\"\n     ./osslsigncode attach-signature -in \"${i}\" -out \"${OUTDIR}/${OUTFILE}\" -sigin \"${SIGDIR}/${INFILE}.pem\"\n   done"
      },
      {
        "sha": "b772404ae5b983a8563b1ce07393af331457affe",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f59885d27a0c4812fb1a2324507e2b2e32057d3/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f59885d27a0c4812fb1a2324507e2b2e32057d3/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=1f59885d27a0c4812fb1a2324507e2b2e32057d3",
        "patch": "@@ -40,7 +40,7 @@ script: |\n   export QT_RCC_TEST=1\n   export QT_RCC_SOURCE_DATE_OVERRIDE=1\n   export TZ=\"UTC\"\n-  export BUILD_DIR=`pwd`\n+  export BUILD_DIR=\"$PWD\"\n   mkdir -p ${WRAP_DIR}\n   if test -n \"$GBUILD_CACHE_ENABLED\"; then\n     export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n@@ -97,7 +97,7 @@ script: |\n   export PATH=${WRAP_DIR}:${PATH}\n \n   cd bitcoin\n-  BASEPREFIX=`pwd`/depends\n+  BASEPREFIX=\"${PWD}/depends\"\n   # Build dependencies for each host\n   for i in $HOSTS; do\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n@@ -112,10 +112,11 @@ script: |\n \n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n-  CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n+  CONFIG_SITE=${BASEPREFIX}/$(echo \"${HOSTS}\" | awk '{print $1;}')/share/config.site ./configure --prefix=/\n   make dist\n-  SOURCEDIST=`echo bitcoin-*.tar.gz`\n-  DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n+  SOURCEDIST=$(echo bitcoin-*.tar.gz)\n+  DISTNAME=${SOURCEDIST/%.tar.gz}\n+\n   # Correct tar file order\n   mkdir -p temp\n   pushd temp\n@@ -132,7 +133,7 @@ script: |\n     export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n     mkdir -p distsrc-${i}\n     cd distsrc-${i}\n-    INSTALLPATH=`pwd`/installed/${DISTNAME}\n+    INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n     mkdir -p ${INSTALLPATH}\n     tar --strip-components=1 -xf ../$SOURCEDIST\n "
      },
      {
        "sha": "c3e4ae9ad2020bd8a974ce0b91017d324b5d79b3",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f59885d27a0c4812fb1a2324507e2b2e32057d3/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f59885d27a0c4812fb1a2324507e2b2e32057d3/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=1f59885d27a0c4812fb1a2324507e2b2e32057d3",
        "patch": "@@ -258,6 +258,7 @@ Use the `-v` option for verbose output.\n |-----------|:----------:|:-------------------------------------------:|--------------\n | [`lint-python.sh`](lint/lint-python.sh) | [flake8](https://gitlab.com/pycqa/flake8) | [3.7.8](https://github.com/bitcoin/bitcoin/pull/15257) | `pip3 install flake8==3.7.8`\n | [`lint-shell.sh`](lint/lint-shell.sh) | [ShellCheck](https://github.com/koalaman/shellcheck) | [0.6.0](https://github.com/bitcoin/bitcoin/pull/15166) | [details...](https://github.com/koalaman/shellcheck#installing)\n+| [`lint-shell.sh`](lint/lint-shell.sh) | [yq](https://github.com/kislyuk/yq) | default | `pip3 install yq`\n | [`lint-spelling.sh`](lint/lint-spelling.sh) | [codespell](https://github.com/codespell-project/codespell) | [1.15.0](https://github.com/bitcoin/bitcoin/pull/16186) | `pip3 install codespell==1.15.0`\n \n Please be aware that on Linux distributions all dependencies are usually available as packages, but could be outdated."
      },
      {
        "sha": "63624e3ae09df90d2edc906c28436faf136aca2e",
        "filename": "test/lint/lint-shell.sh",
        "status": "modified",
        "additions": 37,
        "deletions": 8,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f59885d27a0c4812fb1a2324507e2b2e32057d3/test/lint/lint-shell.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f59885d27a0c4812fb1a2324507e2b2e32057d3/test/lint/lint-shell.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-shell.sh?ref=1f59885d27a0c4812fb1a2324507e2b2e32057d3",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n@@ -16,16 +16,45 @@ if [ \"$TRAVIS\" = \"true\" ]; then\n     unset LC_ALL\n fi\n \n-if ! command -v shellcheck > /dev/null; then\n-    echo \"Skipping shell linting since shellcheck is not installed.\"\n-    exit 0\n-fi\n-\n # Disabled warnings:\n disabled=(\n     SC2046 # Quote this to prevent word splitting.\n     SC2086 # Double quote to prevent globbing and word splitting.\n     SC2162 # read without -r will mangle backslashes.\n )\n-shellcheck -e \"$(IFS=\",\"; echo \"${disabled[*]}\")\" \\\n-    $(git ls-files -- \"*.sh\" | grep -vE 'src/(secp256k1|univalue)/')\n+disabled_gitian=(\n+    SC2094 # Make sure not to read and write the same file in the same pipeline.\n+    SC2129 # Consider using { cmd1; cmd2; } >> file instead of individual redirects.\n+    SC2230 # which is non-standard. Use builtin 'command -v' instead.\n+)\n+\n+EXIT_CODE=0\n+\n+if ! command -v shellcheck > /dev/null; then\n+    echo \"Skipping shell linting since shellcheck is not installed.\"\n+    exit $EXIT_CODE\n+fi\n+\n+EXCLUDE=\"--exclude=$(IFS=','; echo \"${disabled[*]}\")\"\n+if ! shellcheck \"$EXCLUDE\" $(git ls-files -- '*.sh' | grep -vE 'src/(leveldb|secp256k1|univalue)/'); then\n+    EXIT_CODE=1\n+fi\n+\n+if ! command -v yq > /dev/null; then\n+    echo \"Skipping Gitian desriptor scripts checking since yq is not installed.\"\n+    exit $EXIT_CODE\n+fi\n+\n+EXCLUDE_GITIAN=${EXCLUDE}\",$(IFS=','; echo \"${disabled_gitian[*]}\")\"\n+for descriptor in $(git ls-files -- 'contrib/gitian-descriptors/*.yml')\n+do\n+    echo\n+    echo \"$descriptor\"\n+    # Use #!/bin/bash as gitian-builder/bin/gbuild does to complete a script.\n+    SCRIPT=$'#!/bin/bash\\n'$(yq -r .script \"$descriptor\")\n+    if ! echo \"$SCRIPT\" | shellcheck \"$EXCLUDE_GITIAN\" -; then\n+        EXIT_CODE=1\n+    fi\n+done\n+\n+exit $EXIT_CODE"
      }
    ]
  },
  {
    "sha": "23cecd6cd56f952c757f469c46d7593c2ffaa419",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2NlY2Q2Y2Q1NmY5NTJjNzU3ZjQ2OWM0NmQ3NTkzYzJmZmFhNDE5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-28T11:49:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-28T11:49:32Z"
      },
      "message": "Merge #17604: util: make ScheduleBatchPriority advisory only\n\nd2a3a5cadbe58c0fe363bbc6acac293d41eedf7e util: make ScheduleBatchPriority advisory only (fanquake)\n\nPull request description:\n\nACKs for top commit:\n  laanwj:\n    ACK d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e\n\nTree-SHA512: 14e44360bc6b0c0bfd794cb8a744af7d64fb01aa5602fdb392d6c54799a721ef04426e8379b157dd40f2a33c0b6a5248b09d59c865c453ff1f6e3abbafff524e",
      "tree": {
        "sha": "56af7f8b038fbf9094f165073edd77e591f9ae26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56af7f8b038fbf9094f165073edd77e591f9ae26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23cecd6cd56f952c757f469c46d7593c2ffaa419",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3ftEwACgkQHkrtYphs\n0l0yNwgAnJqic1HDeN0c77t9QnIbfiHErXp0z5fLSM6nLIpZVDV1bIhjLve2F/q0\nR8RKUeLpRKgja3zqBnKP9o+9DRzTte9ontir6Hqfp4AgeG5sjiFLktjOtvQSCdqb\nYBa2fYTVm8gSH1+abAzcgzVmjHVUwHdeTqweLQO4OHI4aiVE04sDNY4cgrlucToM\niAjTHeBlkXwm+Oee3REMm6JCb6Dpv0HgBNDNfe21NBPgXU1VofRAjLZdfAf6kFNB\n9c3dDEQOlgFB1MFkbr6lWEZwhsgIi2lvdy4pTCOyv1yllnMUaSrvLCD879vPB2N/\nLzcJfOMUM5aEOgUm0QI0gVH2vlSPRA==\n=t/dt\n-----END PGP SIGNATURE-----",
        "payload": "tree 56af7f8b038fbf9094f165073edd77e591f9ae26\nparent 1f59885d27a0c4812fb1a2324507e2b2e32057d3\nparent d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1574941759 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1574941772 +0100\n\nMerge #17604: util: make ScheduleBatchPriority advisory only\n\nd2a3a5cadbe58c0fe363bbc6acac293d41eedf7e util: make ScheduleBatchPriority advisory only (fanquake)\n\nPull request description:\n\nACKs for top commit:\n  laanwj:\n    ACK d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e\n\nTree-SHA512: 14e44360bc6b0c0bfd794cb8a744af7d64fb01aa5602fdb392d6c54799a721ef04426e8379b157dd40f2a33c0b6a5248b09d59c865c453ff1f6e3abbafff524e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23cecd6cd56f952c757f469c46d7593c2ffaa419",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23cecd6cd56f952c757f469c46d7593c2ffaa419",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23cecd6cd56f952c757f469c46d7593c2ffaa419/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f59885d27a0c4812fb1a2324507e2b2e32057d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f59885d27a0c4812fb1a2324507e2b2e32057d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f59885d27a0c4812fb1a2324507e2b2e32057d3"
      },
      {
        "sha": "d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2a3a5cadbe58c0fe363bbc6acac293d41eedf7e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "563ff6a54b35d58b5bf30d9b1604dcc72541709b",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23cecd6cd56f952c757f469c46d7593c2ffaa419/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23cecd6cd56f952c757f469c46d7593c2ffaa419/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=23cecd6cd56f952c757f469c46d7593c2ffaa419",
        "patch": "@@ -1126,17 +1126,13 @@ fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific)\n     return fs::absolute(path, GetDataDir(net_specific));\n }\n \n-int ScheduleBatchPriority()\n+void ScheduleBatchPriority()\n {\n #ifdef SCHED_BATCH\n     const static sched_param param{};\n-    if (int ret = pthread_setschedparam(pthread_self(), SCHED_BATCH, &param)) {\n+    if (pthread_setschedparam(pthread_self(), SCHED_BATCH, &param) != 0) {\n         LogPrintf(\"Failed to pthread_setschedparam: %s\\n\", strerror(errno));\n-        return ret;\n     }\n-    return 0;\n-#else\n-    return 1;\n #endif\n }\n "
      },
      {
        "sha": "82903b5187d8488a27eeb415d516d616053f3883",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23cecd6cd56f952c757f469c46d7593c2ffaa419/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23cecd6cd56f952c757f469c46d7593c2ffaa419/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=23cecd6cd56f952c757f469c46d7593c2ffaa419",
        "patch": "@@ -367,10 +367,8 @@ std::string CopyrightHolders(const std::string& strPrefix);\n  * On platforms that support it, tell the kernel the calling thread is\n  * CPU-intensive and non-interactive. See SCHED_BATCH in sched(7) for details.\n  *\n- * @return The return value of sched_setschedule(), or 1 on systems without\n- * sched_setschedule().\n  */\n-int ScheduleBatchPriority();\n+void ScheduleBatchPriority();\n \n namespace util {\n "
      }
    ]
  },
  {
    "sha": "114e89e596a66f3cb1ebd8fc2d775b61c5722245",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTRlODllNTk2YTY2ZjNjYjFlYmQ4ZmMyZDc3NWI2MWM1NzIyMjQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-28T11:58:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-11-28T11:58:56Z"
      },
      "message": "Merge #17624: net: Fix an uninitialized read in ProcessMessage(\u2026, \"tx\", \u2026) when receiving a transaction we already have\n\n73b96c94cb6c2afdee7f151768a96944ecaf9d9b net: Fix uninitialized read in ProcessMessage(...) (practicalswift)\n\nPull request description:\n\n  Fix an uninitialized read in `ProcessMessage(\u2026, \"tx\", \u2026)` when receiving a transaction we already have.\n\n  The uninitialized value is read and used on [L2526 in the case of `AlreadyHave(inv) == true`](https://github.com/bitcoin/bitcoin/blob/d8a66626d63135fd245d5afc524b88b9a94d208b/src/net_processing.cpp#L2494-L2526).\n\n  Proof of concept being run against a `bitcoind` built with MemorySanitizer (`-fsanitize=memory`):\n\n  ```\n  $ ./p2p-uninit-read-in-conditional-poc.py\n  Usage: ./p2p-uninit-read-in-conditional-poc.py <dstaddr> <dstport> <net>\n  $ bitcoind -regtest &\n  $ ./p2p-uninit-read-in-conditional-poc.py 127.0.0.1 18444 regtest\n  SUMMARY: MemorySanitizer: use-of-uninitialized-value\n  [1]+  Exit 77                 bitcoind -regtest\n  $\n  ```\n\n  Proof of concept being run against a `bitcoind` running under Valgrind (`valgrind --exit-on-first-error`):\n\n  ```\n  $ valgrind -q --exit-on-first-error=yes --error-exitcode=1 bitcoind -regtest &\n  $ ./p2p-uninit-read-in-conditional-poc.py 127.0.0.1 18444 regtest\n  ==27351== Conditional jump or move depends on uninitialised value(s)\n  [1]+  Exit 1                  valgrind -q --exit-on-first-error=yes --error-exitcode=1 bitcoind -regtest\n  $\n  ```\n\n  Proof of concept script:\n\n  ```\n  #!/usr/bin/env python3\n\n  import sys\n\n  from test_framework.mininode import NetworkThread\n  from test_framework.mininode import P2PDataStore\n  from test_framework.messages import CTransaction, CTxIn, CTxOut, msg_tx\n\n  def send_duplicate_tx(dstaddr=\"127.0.0.1\", dstport=18444, net=\"regtest\"):\n      network_thread = NetworkThread()\n      network_thread.start()\n\n      node = P2PDataStore()\n      node.peer_connect(dstaddr=dstaddr, dstport=dstport, net=net)()\n      node.wait_for_verack()\n\n      tx = CTransaction()\n      tx.vin.append(CTxIn())\n      tx.vout.append(CTxOut())\n      node.send_message(msg_tx(tx))\n      node.send_message(msg_tx(tx))\n      node.peer_disconnect()\n      network_thread.close()\n\n  if __name__ == \"__main__\":\n      if len(sys.argv) != 4:\n          print(\"Usage: {} <dstaddr> <dstport> <net>\".format(sys.argv[0]))\n          sys.exit(0)\n      send_duplicate_tx(sys.argv[1], int(sys.argv[2]), sys.argv[3])\n  ```\n\n  Note that the transaction in the proof of concept is the simplest possible, but really any transaction can be used. It does not have to be a valid transaction.\n\n  This bug was introduced in #15921 (\"validation: Tidy up ValidationState interface\") which was merged in to `master` 28 days ago.\n\n  Luckily this bug was caught before being part of any Bitcoin Core release :)\n\nACKs for top commit:\n  jnewbery:\n    utACK 73b96c94cb6c2afdee7f151768a96944ecaf9d9b\n  laanwj:\n    ACK 73b96c94cb6c2afdee7f151768a96944ecaf9d9b, thanks for discovering and reporting this before it ended up in a release.\n\nTree-SHA512: 7ce6b8f260bcdd9b2ec4ff4b941a891bbef578acf4456df33b7a8d42b248237ec4949e65e2445b24851d1639b10681c701ad500b1c0b776ff050ef8c3812c795",
      "tree": {
        "sha": "0cbaf4a5d3b306d26557262373ff7dff91d6b705",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cbaf4a5d3b306d26557262373ff7dff91d6b705"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/114e89e596a66f3cb1ebd8fc2d775b61c5722245",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3ftoAACgkQHkrtYphs\n0l3y/wf/XlszvRZ1bP16Bv6cuqsk55zGay3jhd0xPqSlREFmJFHfqiXAR7+nnYL9\neNcHcjgbqnKs6nKlO4tBXLcbwXFCHd33ae4DHzL6Tj2Zml3P+2w7k2MEDWargRJa\nx+pkcKWfmLxWYeCqZHKEj8uvs5rSiDU/K7yttOirmMQEWcPuW0K4rHH6YMHNSGRE\nEeVSObmXzCXv4pH34eUPd2HwJNSSu7gucrsZ+TvbCsJLIiyrAe7WFaEmoQQoCkW0\nP1XhT/uY76T99b1ys+Fuw8W5UjGksnjX3GoLvL3E/x3gAFpAal5LhYL/pE+ReDUu\nLOUbnPnLU4myG2xLPSOg3ZN6/msxXA==\n=rUG6\n-----END PGP SIGNATURE-----",
        "payload": "tree 0cbaf4a5d3b306d26557262373ff7dff91d6b705\nparent 23cecd6cd56f952c757f469c46d7593c2ffaa419\nparent 73b96c94cb6c2afdee7f151768a96944ecaf9d9b\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1574942309 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1574942336 +0100\n\nMerge #17624: net: Fix an uninitialized read in ProcessMessage(\u2026, \"tx\", \u2026) when receiving a transaction we already have\n\n73b96c94cb6c2afdee7f151768a96944ecaf9d9b net: Fix uninitialized read in ProcessMessage(...) (practicalswift)\n\nPull request description:\n\n  Fix an uninitialized read in `ProcessMessage(\u2026, \"tx\", \u2026)` when receiving a transaction we already have.\n\n  The uninitialized value is read and used on [L2526 in the case of `AlreadyHave(inv) == true`](https://github.com/bitcoin/bitcoin/blob/d8a66626d63135fd245d5afc524b88b9a94d208b/src/net_processing.cpp#L2494-L2526).\n\n  Proof of concept being run against a `bitcoind` built with MemorySanitizer (`-fsanitize=memory`):\n\n  ```\n  $ ./p2p-uninit-read-in-conditional-poc.py\n  Usage: ./p2p-uninit-read-in-conditional-poc.py <dstaddr> <dstport> <net>\n  $ bitcoind -regtest &\n  $ ./p2p-uninit-read-in-conditional-poc.py 127.0.0.1 18444 regtest\n  SUMMARY: MemorySanitizer: use-of-uninitialized-value\n  [1]+  Exit 77                 bitcoind -regtest\n  $\n  ```\n\n  Proof of concept being run against a `bitcoind` running under Valgrind (`valgrind --exit-on-first-error`):\n\n  ```\n  $ valgrind -q --exit-on-first-error=yes --error-exitcode=1 bitcoind -regtest &\n  $ ./p2p-uninit-read-in-conditional-poc.py 127.0.0.1 18444 regtest\n  ==27351== Conditional jump or move depends on uninitialised value(s)\n  [1]+  Exit 1                  valgrind -q --exit-on-first-error=yes --error-exitcode=1 bitcoind -regtest\n  $\n  ```\n\n  Proof of concept script:\n\n  ```\n  #!/usr/bin/env python3\n\n  import sys\n\n  from test_framework.mininode import NetworkThread\n  from test_framework.mininode import P2PDataStore\n  from test_framework.messages import CTransaction, CTxIn, CTxOut, msg_tx\n\n  def send_duplicate_tx(dstaddr=\"127.0.0.1\", dstport=18444, net=\"regtest\"):\n      network_thread = NetworkThread()\n      network_thread.start()\n\n      node = P2PDataStore()\n      node.peer_connect(dstaddr=dstaddr, dstport=dstport, net=net)()\n      node.wait_for_verack()\n\n      tx = CTransaction()\n      tx.vin.append(CTxIn())\n      tx.vout.append(CTxOut())\n      node.send_message(msg_tx(tx))\n      node.send_message(msg_tx(tx))\n      node.peer_disconnect()\n      network_thread.close()\n\n  if __name__ == \"__main__\":\n      if len(sys.argv) != 4:\n          print(\"Usage: {} <dstaddr> <dstport> <net>\".format(sys.argv[0]))\n          sys.exit(0)\n      send_duplicate_tx(sys.argv[1], int(sys.argv[2]), sys.argv[3])\n  ```\n\n  Note that the transaction in the proof of concept is the simplest possible, but really any transaction can be used. It does not have to be a valid transaction.\n\n  This bug was introduced in #15921 (\"validation: Tidy up ValidationState interface\") which was merged in to `master` 28 days ago.\n\n  Luckily this bug was caught before being part of any Bitcoin Core release :)\n\nACKs for top commit:\n  jnewbery:\n    utACK 73b96c94cb6c2afdee7f151768a96944ecaf9d9b\n  laanwj:\n    ACK 73b96c94cb6c2afdee7f151768a96944ecaf9d9b, thanks for discovering and reporting this before it ended up in a release.\n\nTree-SHA512: 7ce6b8f260bcdd9b2ec4ff4b941a891bbef578acf4456df33b7a8d42b248237ec4949e65e2445b24851d1639b10681c701ad500b1c0b776ff050ef8c3812c795\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/114e89e596a66f3cb1ebd8fc2d775b61c5722245",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/114e89e596a66f3cb1ebd8fc2d775b61c5722245",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/114e89e596a66f3cb1ebd8fc2d775b61c5722245/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23cecd6cd56f952c757f469c46d7593c2ffaa419",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23cecd6cd56f952c757f469c46d7593c2ffaa419",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23cecd6cd56f952c757f469c46d7593c2ffaa419"
      },
      {
        "sha": "73b96c94cb6c2afdee7f151768a96944ecaf9d9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73b96c94cb6c2afdee7f151768a96944ecaf9d9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73b96c94cb6c2afdee7f151768a96944ecaf9d9b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3401eb64ca87446b7b820c1b06c36efa91243c54",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/114e89e596a66f3cb1ebd8fc2d775b61c5722245/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/114e89e596a66f3cb1ebd8fc2d775b61c5722245/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=114e89e596a66f3cb1ebd8fc2d775b61c5722245",
        "patch": "@@ -114,7 +114,7 @@ inline ValidationState::~ValidationState() {};\n \n class TxValidationState : public ValidationState {\n private:\n-    TxValidationResult m_result;\n+    TxValidationResult m_result = TxValidationResult::TX_RESULT_UNSET;\n public:\n     bool Invalid(TxValidationResult result,\n                  const std::string &reject_reason=\"\",\n@@ -129,7 +129,7 @@ class TxValidationState : public ValidationState {\n \n class BlockValidationState : public ValidationState {\n private:\n-    BlockValidationResult m_result;\n+    BlockValidationResult m_result = BlockValidationResult::BLOCK_RESULT_UNSET;\n public:\n     bool Invalid(BlockValidationResult result,\n                  const std::string &reject_reason=\"\","
      }
    ]
  },
  {
    "sha": "abb30de63f368c9875c3f2a4cfe91b1daf9412da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYmIzMGRlNjNmMzY4Yzk4NzVjM2YyYTRjZmU5MWIxZGFmOTQxMmRh",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-29T10:15:55Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-11-29T10:16:08Z"
      },
      "message": "Merge #17587: gui: show watch-only balance in send screen\n\n4a96e459d733f1b6427221aaa1874ea00f79988a [gui] send: show watch-only balance in send screen (Sjors Provoost)\n2689c8fd7159f47248c5fc365463be8b0e8b039c [test] qt: add send screen balance test (Sjors Provoost)\n\nPull request description:\n\n  Now that we can create a PSBT from a watch-only wallet (#16944), we should also display the watch-only balance on the send screen.\n\n  Before:\n  <img width=\"1008\" alt=\"before\" src=\"https://user-images.githubusercontent.com/10217/69533384-030e9180-0f78-11ea-9748-c32c957e822e.png\">\n\n  After:\n  <img width=\"1009\" alt=\"Schermafbeelding 2019-11-26 om 11 44 17\" src=\"https://user-images.githubusercontent.com/10217/69622879-19811f80-1042-11ea-8279-091012f39b38.png\">\n\n  I added a test to check the balance on the send screen, but it only covers regular wallets. A better would add a watch-only only wallet.\n\nACKs for top commit:\n  meshcollider:\n    utACK 4a96e459d733f1b6427221aaa1874ea00f79988a\n  jb55:\n    utACK 4a96e459d733f1b6427221aaa1874ea00f79988a\n  promag:\n    reACK 4a96e45, rebased and label change since last review.\n  instagibbs:\n    code review and light test ACK https://github.com/bitcoin/bitcoin/pull/17587/commits/4a96e459d733f1b6427221aaa1874ea00f79988a\n\nTree-SHA512: 4213549888bd309f72bdbba1453218f4a2b07e809100d786a3791897c75468f9092b06fe4b971942b1c228aa75ee7c04971f262ca9a478b42756e056eb534620",
      "tree": {
        "sha": "05d2960586e42607f16b159363ff4298d4794b48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05d2960586e42607f16b159363ff4298d4794b48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abb30de63f368c9875c3f2a4cfe91b1daf9412da",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAl3g7+gACgkQ0wARbhyH\nWj0rdA/+ISBa8TxV+Oh7WXzikNqahKAHKkfs5K8UlaihjjZPWe1s5DZ9vzi8xOV2\neQ5+eViOU1rxSSCEcRc4qUHmP1zNKcVTN9YqO9WTY8KMgoSLbF2SF7UzvGlpONSi\nEjfEeKLw9OMrlJZZbKi0CRSw/CvX+SFzN16f63FgdlennIaRdfm/TYcLHZ9g3Xgs\nYuqmbc+b/sKzRd7ncG29W/twE+TFazJohs/KBKuWsyv4e2rx6T7xxWSmm5EFqxie\n57KlyMV9yXSdkJxknccbNhvW5q+Hqpv95cHguQ5pw7ivDtvpdmnHgGXOfHMFSuEu\n6S0rzbm+vRBEa9RgUz/ybU67f/aUp3vDBF3b1UVEzXrWSaNHB7C/27eVnkZHTAuJ\nWodUdiw34hJtkJKo6dVjebiY4wZTtx2qL7c17Yu1v5hrzzZi0T49a0F4vm381hSF\n7xZNyRkaCKWBksWa8f72zo1jk/UMyaK0UyEchxIbyhNyacvS4Hf6w3PbPaHWlIxk\n1fqjgHVW+PxjCKXIOx/P7sCwkDTruPuLtehQrtZa1Ovo9CZmv8RISzZ9pa5GgQzP\nfMjEz38OUAVpvq5B/IxnxqaEJgADtZEB3XmBXoWXnofhbhh+nrsuDMT2HUBWZNek\nGcDyaxVuOknqSAFkaRLq1AxweYNm3aiB9zF/W4aB7QYd58C1zZQ=\n=Kwgz\n-----END PGP SIGNATURE-----",
        "payload": "tree 05d2960586e42607f16b159363ff4298d4794b48\nparent 114e89e596a66f3cb1ebd8fc2d775b61c5722245\nparent 4a96e459d733f1b6427221aaa1874ea00f79988a\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1575022555 +1300\ncommitter Samuel Dobson <dobsonsa68@gmail.com> 1575022568 +1300\n\nMerge #17587: gui: show watch-only balance in send screen\n\n4a96e459d733f1b6427221aaa1874ea00f79988a [gui] send: show watch-only balance in send screen (Sjors Provoost)\n2689c8fd7159f47248c5fc365463be8b0e8b039c [test] qt: add send screen balance test (Sjors Provoost)\n\nPull request description:\n\n  Now that we can create a PSBT from a watch-only wallet (#16944), we should also display the watch-only balance on the send screen.\n\n  Before:\n  <img width=\"1008\" alt=\"before\" src=\"https://user-images.githubusercontent.com/10217/69533384-030e9180-0f78-11ea-9748-c32c957e822e.png\">\n\n  After:\n  <img width=\"1009\" alt=\"Schermafbeelding 2019-11-26 om 11 44 17\" src=\"https://user-images.githubusercontent.com/10217/69622879-19811f80-1042-11ea-8279-091012f39b38.png\">\n\n  I added a test to check the balance on the send screen, but it only covers regular wallets. A better would add a watch-only only wallet.\n\nACKs for top commit:\n  meshcollider:\n    utACK 4a96e459d733f1b6427221aaa1874ea00f79988a\n  jb55:\n    utACK 4a96e459d733f1b6427221aaa1874ea00f79988a\n  promag:\n    reACK 4a96e45, rebased and label change since last review.\n  instagibbs:\n    code review and light test ACK https://github.com/bitcoin/bitcoin/pull/17587/commits/4a96e459d733f1b6427221aaa1874ea00f79988a\n\nTree-SHA512: 4213549888bd309f72bdbba1453218f4a2b07e809100d786a3791897c75468f9092b06fe4b971942b1c228aa75ee7c04971f262ca9a478b42756e056eb534620\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abb30de63f368c9875c3f2a4cfe91b1daf9412da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/abb30de63f368c9875c3f2a4cfe91b1daf9412da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abb30de63f368c9875c3f2a4cfe91b1daf9412da/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "114e89e596a66f3cb1ebd8fc2d775b61c5722245",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/114e89e596a66f3cb1ebd8fc2d775b61c5722245",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/114e89e596a66f3cb1ebd8fc2d775b61c5722245"
      },
      {
        "sha": "4a96e459d733f1b6427221aaa1874ea00f79988a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a96e459d733f1b6427221aaa1874ea00f79988a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a96e459d733f1b6427221aaa1874ea00f79988a"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 17,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cfd4bf33d460d8ed43c17e0b267910c984255005",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abb30de63f368c9875c3f2a4cfe91b1daf9412da/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abb30de63f368c9875c3f2a4cfe91b1daf9412da/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=abb30de63f368c9875c3f2a4cfe91b1daf9412da",
        "patch": "@@ -1190,7 +1190,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n         <number>3</number>\n        </property>\n        <item>\n-        <widget class=\"QLabel\" name=\"label\">\n+        <widget class=\"QLabel\" name=\"labelBalanceName\">\n          <property name=\"sizePolicy\">\n           <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Fixed\">\n            <horstretch>0</horstretch>"
      },
      {
        "sha": "f1ea3e23e5d5e893ee90f4763869257b0af6b08f",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abb30de63f368c9875c3f2a4cfe91b1daf9412da/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abb30de63f368c9875c3f2a4cfe91b1daf9412da/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=abb30de63f368c9875c3f2a4cfe91b1daf9412da",
        "patch": "@@ -562,7 +562,12 @@ void SendCoinsDialog::setBalance(const interfaces::WalletBalances& balances)\n {\n     if(model && model->getOptionsModel())\n     {\n-        ui->labelBalance->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), balances.balance));\n+        CAmount balance = balances.balance;\n+        if (model->privateKeysDisabled()) {\n+            balance = balances.watch_only_balance;\n+            ui->labelBalanceName->setText(tr(\"Watch-only balance:\"));\n+        }\n+        ui->labelBalance->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), balance));\n     }\n }\n "
      },
      {
        "sha": "dfd56511ea4060081e57a00ca5fadc90262ef7f6",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abb30de63f368c9875c3f2a4cfe91b1daf9412da/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abb30de63f368c9875c3f2a4cfe91b1daf9412da/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=abb30de63f368c9875c3f2a4cfe91b1daf9412da",
        "patch": "@@ -170,6 +170,16 @@ void TestGUI(interfaces::Node& node)\n     sendCoinsDialog.setModel(&walletModel);\n     transactionView.setModel(&walletModel);\n \n+    {\n+        // Check balance in send dialog\n+        QLabel* balanceLabel = sendCoinsDialog.findChild<QLabel*>(\"labelBalance\");\n+        QString balanceText = balanceLabel->text();\n+        int unit = walletModel.getOptionsModel()->getDisplayUnit();\n+        CAmount balance = walletModel.wallet().getBalance();\n+        QString balanceComparison = BitcoinUnits::formatWithUnit(unit, balance, false, BitcoinUnits::separatorAlways);\n+        QCOMPARE(balanceText, balanceComparison);\n+    }\n+\n     // Send two transactions, and verify they are added to transaction list.\n     TransactionTableModel* transactionTableModel = walletModel.getTransactionTableModel();\n     QCOMPARE(transactionTableModel->rowCount({}), 105);"
      }
    ]
  },
  {
    "sha": "b66861e2e5e8a49e11e7489cf22c3007bc7082cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjY4NjFlMmU1ZThhNDllMTFlNzQ4OWNmMjJjMzAwN2JjNzA4MmNj",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-29T18:15:45Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-29T19:11:00Z"
      },
      "message": "Fix comparison function signature\n\nThis commit fixes build on CentOS 7 with GCC 4.8.5",
      "tree": {
        "sha": "b71f238783d5cc15c554def9afe8988b43632da6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b71f238783d5cc15c554def9afe8988b43632da6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b66861e2e5e8a49e11e7489cf22c3007bc7082cc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl3hbUcACgkQQQEIES5+\nqB9AohAAquSGVtcx5oxWrfomg8Q8kIPSUh8SMLjQSkVKT5WgY1BPeIiCzZxZXdDG\nhYn9pOVMW6WKJEhO64MxWYhCDHL6Wu1dvgAwQvF/sMNvsaxcpeTpijVpJbFRiOcZ\ndHBKo9PELbcnj2G8gGkPdy0Tt2ZoQXTC2P7CM54FUmaWJKYIxgBJ1kU5Mrq668o5\n330xllFFP6EgFn1sIrQL263kI0TtjYR8K8lROuM/9HfyhCSQ37VWY8ra8ZOSk4Mr\nAq5SLXwbpoxhlS456K5I/lACDuXG1CrZGDHwFxPHhocW8hesOWisfJqIIppKJOm2\n0v0icbOpkNBQNe5gbxov8vByHljW9DVJqQWTiL4chzo/fD2+yZUrTksqeg/53e+X\nOYxiBI5AXKLO6K49kPSDl8VhH+VaXFzM+N/JfETWrUp8QOSJ9i5uJwsz3yDjS+Lg\nykkPHV0bXcGZzswzihbSaNaV+hM+L48stMLerHQZ3l0F3kBZ/7HljW8OqqwfkF6l\nVe1vWmgqtt0yaOmRJ/CSxOw/ZUOx2MKfuA3buSmzV2JcIvuYxNy6wsMkGdHYibFO\nFm5mz9rHHuYppSN1M6TQ8We9kAPiF/VL786oNHJepeOk1XCydlcbbtEi8z5YOmqI\nkZK5abEmSxALqwXUtFw4vqaZEP5j0B7gkPZPRgYH0LHyRLUq1Sw=\n=XFp0\n-----END PGP SIGNATURE-----",
        "payload": "tree b71f238783d5cc15c554def9afe8988b43632da6\nparent abb30de63f368c9875c3f2a4cfe91b1daf9412da\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1575051345 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1575054660 +0200\n\nFix comparison function signature\n\nThis commit fixes build on CentOS 7 with GCC 4.8.5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b66861e2e5e8a49e11e7489cf22c3007bc7082cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b66861e2e5e8a49e11e7489cf22c3007bc7082cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b66861e2e5e8a49e11e7489cf22c3007bc7082cc/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abb30de63f368c9875c3f2a4cfe91b1daf9412da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abb30de63f368c9875c3f2a4cfe91b1daf9412da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abb30de63f368c9875c3f2a4cfe91b1daf9412da"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "18fa5f417f81f2d21cd3201653a4fa315b1bb253",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b66861e2e5e8a49e11e7489cf22c3007bc7082cc/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b66861e2e5e8a49e11e7489cf22c3007bc7082cc/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=b66861e2e5e8a49e11e7489cf22c3007bc7082cc",
        "patch": "@@ -12,8 +12,7 @@\n #include <clientversion.h>\n #include <streams.h>\n \n-#include <algorithm>\n-\n+#include <utility>\n \n RecentRequestsTableModel::RecentRequestsTableModel(WalletModel *parent) :\n     QAbstractTableModel(parent), walletModel(parent)\n@@ -214,10 +213,10 @@ void RecentRequestsTableModel::updateDisplayUnit()\n     updateAmountColumnTitle();\n }\n \n-bool RecentRequestEntryLessThan::operator()(RecentRequestEntry &left, RecentRequestEntry &right) const\n+bool RecentRequestEntryLessThan::operator()(const RecentRequestEntry& left, const RecentRequestEntry& right) const\n {\n-    RecentRequestEntry *pLeft = &left;\n-    RecentRequestEntry *pRight = &right;\n+    const RecentRequestEntry* pLeft = &left;\n+    const RecentRequestEntry* pRight = &right;\n     if (order == Qt::DescendingOrder)\n         std::swap(pLeft, pRight);\n "
      },
      {
        "sha": "f5085f726887252d81df25235fd63baec1936411",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b66861e2e5e8a49e11e7489cf22c3007bc7082cc/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b66861e2e5e8a49e11e7489cf22c3007bc7082cc/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=b66861e2e5e8a49e11e7489cf22c3007bc7082cc",
        "patch": "@@ -45,7 +45,7 @@ class RecentRequestEntryLessThan\n public:\n     RecentRequestEntryLessThan(int nColumn, Qt::SortOrder fOrder):\n         column(nColumn), order(fOrder) {}\n-    bool operator()(RecentRequestEntry &left, RecentRequestEntry &right) const;\n+    bool operator()(const RecentRequestEntry& left, const RecentRequestEntry& right) const;\n \n private:\n     int column;"
      }
    ]
  },
  {
    "sha": "98fbd1cdffaa69357091cc67e959ac21119dfa16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OGZiZDFjZGZmYWE2OTM1NzA5MWNjNjdlOTU5YWMyMTExOWRmYTE2",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-29T19:18:24Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-29T19:23:25Z"
      },
      "message": "Use correct C++11 header for std::swap()",
      "tree": {
        "sha": "c96705619b933d9126b2f94cef8be461b1950ef6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c96705619b933d9126b2f94cef8be461b1950ef6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98fbd1cdffaa69357091cc67e959ac21119dfa16",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl3hcDkACgkQQQEIES5+\nqB+mzxAApBdPH/V0ljPuTAxRKUGcWdNFKELvooEcMIXU/wS6OOAFlE4Nm/RsgywQ\nhJ0vXnxzQJyVXsTSLlvUo6N4p7eSsl8KvWQmCjh4Tkaz2fkS/0gBxHRTGvihUlyo\nCtoFSyc4qBEfcxq9T5hjT93xq7MAp+0RsrEOnfDCmS0aR9w49YtWgw3upBee8En/\nLiDkpLH4puPc3m3gFoNxRHr3B1u+6qiT+V5/OsMWu9HS9vh1BSEJvkKw++Pg71a+\ntW+1SiQ7yp12mqDCkDtUlhiM0RMaqniFs/ETbkv8JvlOmU2rKiqzcrR9tvTjgjNK\nrzTH3S0ejRU3qzJEv3BdGt/Ef+8uCs6M0QtFb6f5YDlO0lIJlv2cq24q4Jbvz7H2\nIxDIun6ObjTwi11oJF8vS6KooeA0DmhZst8SIE6TIyQvezjOM5bc7GRsWl4mA6xM\nCk2DadNEovn6rqczMgizZIwwDi9WDEaPhaab1zjtYztZKb6UrJZeTsAo/nuAzcWs\noHDdonB5bccflJBT32kJ+AXEi3zc9keHCh3emx6vhskq6OGZxt1Ccixv+h/JIkHe\ngQj/df5VQ9uJ1Nli++flKhDusw0z39WYlgTcS57djiDvZtTkW0mklqU0Wc61GZB6\nqXvMZYb5lA4zsdxsKnQLQBXTUSSBOC0LvIftERLMPXJSaUPy4lU=\n=nd0e\n-----END PGP SIGNATURE-----",
        "payload": "tree c96705619b933d9126b2f94cef8be461b1950ef6\nparent b66861e2e5e8a49e11e7489cf22c3007bc7082cc\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1575055104 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1575055405 +0200\n\nUse correct C++11 header for std::swap()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98fbd1cdffaa69357091cc67e959ac21119dfa16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98fbd1cdffaa69357091cc67e959ac21119dfa16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98fbd1cdffaa69357091cc67e959ac21119dfa16/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b66861e2e5e8a49e11e7489cf22c3007bc7082cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b66861e2e5e8a49e11e7489cf22c3007bc7082cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b66861e2e5e8a49e11e7489cf22c3007bc7082cc"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4ad5818cdc1113767ac390e3165a8e63afaf8e0d",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98fbd1cdffaa69357091cc67e959ac21119dfa16/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98fbd1cdffaa69357091cc67e959ac21119dfa16/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=98fbd1cdffaa69357091cc67e959ac21119dfa16",
        "patch": "@@ -6,11 +6,11 @@\n #define BITCOIN_CUCKOOCACHE_H\n \n #include <array>\n-#include <algorithm>\n #include <atomic>\n-#include <cstring>\n #include <cmath>\n+#include <cstring>\n #include <memory>\n+#include <utility>\n #include <vector>\n \n "
      },
      {
        "sha": "4fb07688ffb62f27998004ff0fe079e125322a4b",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98fbd1cdffaa69357091cc67e959ac21119dfa16/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98fbd1cdffaa69357091cc67e959ac21119dfa16/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=98fbd1cdffaa69357091cc67e959ac21119dfa16",
        "patch": "@@ -13,6 +13,7 @@\n #include <algorithm>\n #include <cstddef>\n #include <type_traits>\n+#include <utility>\n \n #pragma pack(push, 1)\n /** Implements a drop-in replacement for std::vector<T> which stores up to N"
      },
      {
        "sha": "b6c6984b1008dbe8cf4e05b03ee81b9b2bb9a96a",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98fbd1cdffaa69357091cc67e959ac21119dfa16/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98fbd1cdffaa69357091cc67e959ac21119dfa16/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=98fbd1cdffaa69357091cc67e959ac21119dfa16",
        "patch": "@@ -8,7 +8,7 @@\n #include <net_types.h> // For banmap_t\n #include <qt/clientmodel.h>\n \n-#include <algorithm>\n+#include <utility>\n \n #include <QDebug>\n #include <QList>"
      },
      {
        "sha": "514ff35bcdbae547b01c7c31e9362d476ac230fd",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98fbd1cdffaa69357091cc67e959ac21119dfa16/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98fbd1cdffaa69357091cc67e959ac21119dfa16/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=98fbd1cdffaa69357091cc67e959ac21119dfa16",
        "patch": "@@ -10,7 +10,7 @@\n \n #include <interfaces/node.h>\n \n-#include <algorithm>\n+#include <utility>\n \n #include <QDebug>\n #include <QList>"
      },
      {
        "sha": "482fe3772c25d45d000c122fed66417e82704ab6",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98fbd1cdffaa69357091cc67e959ac21119dfa16/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98fbd1cdffaa69357091cc67e959ac21119dfa16/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=98fbd1cdffaa69357091cc67e959ac21119dfa16",
        "patch": "@@ -17,6 +17,7 @@\n #include <condition_variable>\n \n #include <unordered_set>\n+#include <utility>\n \n BOOST_FIXTURE_TEST_SUITE(checkqueue_tests, TestingSetup)\n "
      },
      {
        "sha": "54f97e721325650e329558d76dcf5ca1caefae8e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98fbd1cdffaa69357091cc67e959ac21119dfa16/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98fbd1cdffaa69357091cc67e959ac21119dfa16/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=98fbd1cdffaa69357091cc67e959ac21119dfa16",
        "patch": "@@ -23,7 +23,6 @@\n #include <versionbits.h>\n #include <serialize.h>\n \n-#include <algorithm>\n #include <atomic>\n #include <map>\n #include <memory>"
      }
    ]
  },
  {
    "sha": "bd6a24307564a56d54d98331d5e1680d27ddc09e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDZhMjQzMDc1NjRhNTZkNTRkOTgzMzFkNWUxNjgwZDI3ZGRjMDll",
    "commit": {
      "author": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-11-30T03:34:28Z"
      },
      "committer": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-11-30T03:41:06Z"
      },
      "message": "script: Add Keyserver to verify-commits README",
      "tree": {
        "sha": "eb133aa0b3b5a2615a7479f242feb09c3d7fd134",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb133aa0b3b5a2615a7479f242feb09c3d7fd134"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd6a24307564a56d54d98331d5e1680d27ddc09e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE82XmVEpcmrEyk0LUL21BRcVfx8cFAl3h5NcACgkQL21BRcVf\nx8dBig//Xx3JdY3k+WiYhWzLvwhOjh/ZVU3kpm1gmmh9nXK2pD9fg0vImff/+hA4\nDAW4swSfaChQPgqrBjuJAFKcrfX4Q87Um+bEGEUOHVn27nrEzToO9sIZGJgSeNp1\nBEMrekwahRnG+c90cHUCMWLXsgdYlT4yLNBcSv5D6WNzhqJfyQiul3deAcRt2iz9\nRumO6UYzCFRdERuShGyGhaP+FpCAuloENHwOchTFtG0dVjIwJNK3zzFohU4UQGfd\nrX4AeL+pfE386ZX3jFwzE4xDlRlg9p2QrAVhF8bmBaZLrNTxwrSJDBM0asj13BvA\nz25cRMFdfaaMglMeEClfCD/s4Bu9NRFzcfm9sbaB1fupzi/LIXynKzl8dKIJ0AGG\njwca6740a/2fb2UCYOeMyrHQUTmQyzO+vHEirAzi3lxx/LsbAtMBZPb34ZIVQB3U\ncvR2JZbX2FWtDCzuzOlotjZo5IbhsFm/W4a6VW9KS4pH9cUboPu7qugiux0GVQ2N\nlk9j68bc/oVPo3zWeUaqvXRFTzGxZ1O1GKPo/5FyFTlj5e05D9J6zF4xiyeoktJa\nhTJyQ2zHWwOPlUuvWnLz7tvhbezxrjEnc1rJIu0WtYW1b0n5fKfN2uAQClANVOYL\nYpVBvTGTSLTlumMvCPd2eHEXmVS9vTp0fusstFx2PMmXWBNA52A=\n=HdEq\n-----END PGP SIGNATURE-----",
        "payload": "tree eb133aa0b3b5a2615a7479f242feb09c3d7fd134\nparent abb30de63f368c9875c3f2a4cfe91b1daf9412da\nauthor Emil Engler <me@emilengler.com> 1575084868 +0100\ncommitter Emil Engler <me@emilengler.com> 1575085266 +0100\n\nscript: Add Keyserver to verify-commits README\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd6a24307564a56d54d98331d5e1680d27ddc09e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd6a24307564a56d54d98331d5e1680d27ddc09e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd6a24307564a56d54d98331d5e1680d27ddc09e/comments",
    "author": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abb30de63f368c9875c3f2a4cfe91b1daf9412da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abb30de63f368c9875c3f2a4cfe91b1daf9412da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abb30de63f368c9875c3f2a4cfe91b1daf9412da"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e95a57586ff1c34fef56f4d851934f0d881bbd8c",
        "filename": "contrib/verify-commits/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd6a24307564a56d54d98331d5e1680d27ddc09e/contrib/verify-commits/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd6a24307564a56d54d98331d5e1680d27ddc09e/contrib/verify-commits/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/README.md?ref=bd6a24307564a56d54d98331d5e1680d27ddc09e",
        "patch": "@@ -40,7 +40,7 @@ Import trusted keys\n In order to check the commit signatures, you must add the trusted PGP keys to your machine. [GnuPG](https://gnupg.org/) may be used to import the trusted keys by running the following command:\n \n ```sh\n-gpg --recv-keys $(<contrib/verify-commits/trusted-keys)\n+gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys $(<contrib/verify-commits/trusted-keys)\n ```\n \n Key expiry/revocation"
      }
    ]
  },
  {
    "sha": "70ed2ab7ef9e7ebf56f77b7c410a345ff455938f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGVkMmFiN2VmOWU3ZWJmNTZmNzdiN2M0MTBhMzQ1ZmY0NTU5Mzhm",
    "commit": {
      "author": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2019-11-30T21:31:46Z"
      },
      "committer": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2019-11-30T21:31:46Z"
      },
      "message": "Add unit test for DB creation with unicode path\n\nAn issue arose when attempting to switch back to the main repo version of leveldb when the bitcoin data directory uses a unicode path. The leveldb windows file IO wrapper was using the *A ANSI win32 calls instead of the Unicode *W ones. This unit test will catch if the path created by leveldb doesn't match what we're expecting. For more info see https://github.com/google/leveldb/issues/755.",
      "tree": {
        "sha": "0a5fe9362dabea71bc8b4571c2a1292ad29932a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a5fe9362dabea71bc8b4571c2a1292ad29932a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70ed2ab7ef9e7ebf56f77b7c410a345ff455938f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEnTzIanL4SUNC6l/RCkG9w/T6/xwFAl3i38IACgkQCkG9w/T6\n/xxSQg/8D0+j5+8geVste+9uysdOiMKxdulMMRMvSFWq1gd4zeTi13lshNqhI74r\n51+vz+AH8dieoI4PNr2YZ5uy99x9Nnh6crl8cDRioUIDKC3AtkoQUMpNxelnKwlI\nugtTHu8goUn1N6rVnMHq7/bJh5kKBECNIORjr2z6mOYrMstRiTgMslyjloPJqAju\nC0sARmFYprjQMIc8STDXKu8kGEn55NBzJKOTdCV1k6GYnG7u6NXNbLsatb52TxUO\no0T2fnrXzD8zNw9I0RqrUHaRC+7kNl5up1Rld/tiCGVqdvMWPjsnUnw0KTOoKwLA\nF7AKPuqTFE7dYnoZIiOSaY7uqrH5bw5w7NxugfELoMeFBdAy/cszkSOLsfj5W+TO\nW8SZ++CXGLDYdvz8FxhHQW0gsmrKep9wTi2TOikkdf0XJtMKp7mfGERt5/5HUX9D\nEwfzP4wb+J0X5q+ydpD2x9pbpg+77q5zHHgK+5jAdiwHE9B50ruyJJNTl9n+6S1i\npWBVbV4WTeYmeV6JSjZUlxc/4V0cW0miZLA/ibuiNlBlfERHzP1QygX70KxgIZHg\na+xFULctTc/3dwk9dfTzi3qo2o+htTSOK2eOW6rbsjY3AUWBAznSIc1OIICBJhRl\nbXtyIMfJYP19P6TZAg36+7pU6asE2uBqP6T9yFQUmGyIowwfFAA=\n=l8Yo\n-----END PGP SIGNATURE-----",
        "payload": "tree 0a5fe9362dabea71bc8b4571c2a1292ad29932a9\nparent 114e89e596a66f3cb1ebd8fc2d775b61c5722245\nauthor Aaron Clauson <aaron@sipsorcery.com> 1575149506 +0000\ncommitter Aaron Clauson <aaron@sipsorcery.com> 1575149506 +0000\n\nAdd unit test for DB creation with unicode path\n\nAn issue arose when attempting to switch back to the main repo version of leveldb when the bitcoin data directory uses a unicode path. The leveldb windows file IO wrapper was using the *A ANSI win32 calls instead of the Unicode *W ones. This unit test will catch if the path created by leveldb doesn't match what we're expecting. For more info see https://github.com/google/leveldb/issues/755.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ed2ab7ef9e7ebf56f77b7c410a345ff455938f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70ed2ab7ef9e7ebf56f77b7c410a345ff455938f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ed2ab7ef9e7ebf56f77b7c410a345ff455938f/comments",
    "author": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "114e89e596a66f3cb1ebd8fc2d775b61c5722245",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/114e89e596a66f3cb1ebd8fc2d775b61c5722245",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/114e89e596a66f3cb1ebd8fc2d775b61c5722245"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b647c0f70b3abf3b6d89146658eee7ab6d6eff88",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70ed2ab7ef9e7ebf56f77b7c410a345ff455938f/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70ed2ab7ef9e7ebf56f77b7c410a345ff455938f/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=70ed2ab7ef9e7ebf56f77b7c410a345ff455938f",
        "patch": "@@ -397,6 +397,18 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(unicodepath)\n+{\n+    // Attempt to create a database with a utf8 character in the path.\n+    // On Windows this test will fail if the directory is created using\n+    // the ANSI CreateDirectoryA  call and the code page isn't UTF8.\n+    // It will succeed if the created with  CreateDirectoryW.\n+    fs::path ph = GetDataDir() / \"test_runner_\u20bf_\ud83c\udfc3_20191128_104644\";\n+    CDBWrapper dbw(ph, (1 << 20));\n+\n+    fs::path lockPath = ph / \"LOCK\";\n+    BOOST_CHECK(boost::filesystem::exists(lockPath));\n+}\n \n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "2ecb7e1556cd970b6dccb5f101a718602487df4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWNiN2UxNTU2Y2Q5NzBiNmRjY2I1ZjEwMWE3MTg2MDI0ODdkZjRi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-01T03:46:05Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-01T04:16:48Z"
      },
      "message": "Merge #17521: depends: only use D-Bus with Qt on linux\n\n6fdf5dab26e87888c3511fecef5d4d612b8247d6 depends: only use dbus with qt on linux (fanquake)\n\nPull request description:\n\n  Since #8210 we've been passing `-dbus-runtime` when configuring Qt, however D-Bus isn't used on macOS or Windows. So rather than blanket passing `-dbus-runtime`, only use D-Bus when building for linux, and disable it for Windows and macOS. This also saves some time building qt in depends (for windows or macOS).\n\n  This gist contains a diff of the symbols in a macOS bitcoin-qt after applying this change: https://gist.github.com/fanquake/317e5c9c7d1b5e37a0c1ce8001af18c4.\n\nACKs for top commit:\n  laanwj:\n    ACK 6fdf5dab26e87888c3511fecef5d4d612b8247d6\n\nTree-SHA512: 7c7df6036f27dae6adb807edf94cd26b4dafa3728976d219a68f7388b6477777b35acebd507320e4469c9f2fcf016b311c82e0b12d50546cb5ab66a1e955e464",
      "tree": {
        "sha": "b24514e037f3cb7e155b11ac302619c53d8d5505",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b24514e037f3cb7e155b11ac302619c53d8d5505"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ecb7e1556cd970b6dccb5f101a718602487df4b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3jPrAACgkQLuufXMCV\nJsHsWhAAhA3ZS0jAReQTs+LMoC0RvUdMQ9Q6b1I2WVj1yp5y7N7CJSRPKrRVAeee\nlwjpHExJjK2CTbiqs0NNQlX7I/lhKingfH9vMOm0Lqp34optsD0O+dnRWFiG4Rlf\nQciE5mgEKthmpYoQB4VyY30VNtErAto9WECLKNwhRaq3FQvcDhfvD7NgieOui+p2\nhM/iYDyaT9HPpsr5QNU1kDmp1ATwPH46KQYWZq1q0b6v2pDHfrSSOAe4L6TWS3mt\nvYaZz+q3a0DiWJINAkxK4c9hPKnlqkg3a9i2MJT4ULj2FyK/8soZUVjgZxkt1hRf\ne6xnYHQD1ybS12NcHH7nb+6HlLFbOdwqS41UVn50hrMd6r5KkAe4t+IWtJqxwznW\ncJHwb+Q2oPnHOMpToBga5SvqqPZ22PQz67lnfkszPAP/9JqEJA3HQoMr5J4nxOGW\nCBLC///Qn+3nZJKGbDqBZeOZY417IVltheJl9I3rnc1BY5lGvJPht6h9IVLvpDQ+\nAuHSZGyXnzlMIIcSGZmwEmjkdkUq3OY+SyFOoDMwHUEF6XVOEpXgnQlTZpo2PwMT\nqK0LaeqsOEgo+6m8pkBvfSjR8Hu2IufwEmlfT1IeqZH+H504t8Rdq77AT1otHsx+\n2KV87+Dmmqda9Z7XXSLwYuNLsalaEaI+0DYEbH4cNxDnOys1BzQ=\n=rLJu\n-----END PGP SIGNATURE-----",
        "payload": "tree b24514e037f3cb7e155b11ac302619c53d8d5505\nparent abb30de63f368c9875c3f2a4cfe91b1daf9412da\nparent 6fdf5dab26e87888c3511fecef5d4d612b8247d6\nauthor fanquake <fanquake@gmail.com> 1575171965 -0500\ncommitter fanquake <fanquake@gmail.com> 1575173808 -0500\n\nMerge #17521: depends: only use D-Bus with Qt on linux\n\n6fdf5dab26e87888c3511fecef5d4d612b8247d6 depends: only use dbus with qt on linux (fanquake)\n\nPull request description:\n\n  Since #8210 we've been passing `-dbus-runtime` when configuring Qt, however D-Bus isn't used on macOS or Windows. So rather than blanket passing `-dbus-runtime`, only use D-Bus when building for linux, and disable it for Windows and macOS. This also saves some time building qt in depends (for windows or macOS).\n\n  This gist contains a diff of the symbols in a macOS bitcoin-qt after applying this change: https://gist.github.com/fanquake/317e5c9c7d1b5e37a0c1ce8001af18c4.\n\nACKs for top commit:\n  laanwj:\n    ACK 6fdf5dab26e87888c3511fecef5d4d612b8247d6\n\nTree-SHA512: 7c7df6036f27dae6adb807edf94cd26b4dafa3728976d219a68f7388b6477777b35acebd507320e4469c9f2fcf016b311c82e0b12d50546cb5ab66a1e955e464\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ecb7e1556cd970b6dccb5f101a718602487df4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ecb7e1556cd970b6dccb5f101a718602487df4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ecb7e1556cd970b6dccb5f101a718602487df4b/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abb30de63f368c9875c3f2a4cfe91b1daf9412da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abb30de63f368c9875c3f2a4cfe91b1daf9412da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abb30de63f368c9875c3f2a4cfe91b1daf9412da"
      },
      {
        "sha": "6fdf5dab26e87888c3511fecef5d4d612b8247d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fdf5dab26e87888c3511fecef5d4d612b8247d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fdf5dab26e87888c3511fecef5d4d612b8247d6"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c9ffc1036ccca597b358e95d595fb631fc48699a",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecb7e1556cd970b6dccb5f101a718602487df4b/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecb7e1556cd970b6dccb5f101a718602487df4b/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=2ecb7e1556cd970b6dccb5f101a718602487df4b",
        "patch": "@@ -25,7 +25,6 @@ $(package)_config_opts_debug = -debug\n $(package)_config_opts += -bindir $(build_prefix)/bin\n $(package)_config_opts += -c++std c++11\n $(package)_config_opts += -confirm-license\n-$(package)_config_opts += -dbus-runtime\n $(package)_config_opts += -hostprefix $(build_prefix)\n $(package)_config_opts += -no-compile-examples\n $(package)_config_opts += -no-cups\n@@ -105,8 +104,10 @@ $(package)_config_opts += -no-feature-vnc\n $(package)_config_opts += -no-feature-wizard\n $(package)_config_opts += -no-feature-xml\n \n+$(package)_config_opts_darwin = -no-dbus\n+\n ifneq ($(build_os),darwin)\n-$(package)_config_opts_darwin = -xplatform macx-clang-linux\n+$(package)_config_opts_darwin += -xplatform macx-clang-linux\n $(package)_config_opts_darwin += -device-option MAC_SDK_PATH=$(OSX_SDK)\n $(package)_config_opts_darwin += -device-option MAC_SDK_VERSION=$(OSX_SDK_VERSION)\n $(package)_config_opts_darwin += -device-option CROSS_COMPILE=\"$(host)-\"\n@@ -122,12 +123,17 @@ $(package)_config_opts_linux += -no-feature-xlib\n $(package)_config_opts_linux += -system-freetype\n $(package)_config_opts_linux += -fontconfig\n $(package)_config_opts_linux += -no-opengl\n+$(package)_config_opts_linux += -dbus-runtime\n $(package)_config_opts_arm_linux += -platform linux-g++ -xplatform bitcoin-linux-g++\n $(package)_config_opts_i686_linux  = -xplatform linux-g++-32\n $(package)_config_opts_x86_64_linux = -xplatform linux-g++-64\n $(package)_config_opts_aarch64_linux = -xplatform linux-aarch64-gnu-g++\n $(package)_config_opts_riscv64_linux = -platform linux-g++ -xplatform bitcoin-linux-g++\n-$(package)_config_opts_mingw32  = -no-opengl -xplatform win32-g++ -device-option CROSS_COMPILE=\"$(host)-\"\n+\n+$(package)_config_opts_mingw32 = -no-opengl\n+$(package)_config_opts_mingw32 += -no-dbus\n+$(package)_config_opts_mingw32 += -xplatform win32-g++\n+$(package)_config_opts_mingw32 += -device-option CROSS_COMPILE=\"$(host)-\"\n \n $(package)_config_opts_android = -xplatform android-clang\n $(package)_config_opts_android += -android-sdk $(ANDROID_SDK)\n@@ -137,6 +143,7 @@ $(package)_config_opts_android += -device-option CROSS_COMPILE=\"$(host)-\"\n $(package)_config_opts_android += -egl\n $(package)_config_opts_android += -qpa xcb\n $(package)_config_opts_android += -no-eglfs\n+$(package)_config_opts_android += -no-dbus\n $(package)_config_opts_android += -opengl es2\n $(package)_config_opts_android += -qt-freetype\n $(package)_config_opts_android += -no-fontconfig"
      }
    ]
  },
  {
    "sha": "19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTY5OGFjNmJjMGU2Yzc1YTkyYjAyYzhiNzRhZTFmYTUxYzM0ZTA4",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-01T16:56:52Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-01T17:23:44Z"
      },
      "message": "Merge #17568: wallet: fix when sufficient preset inputs and subtractFeeFromOutputs\n\neadd1304c81e0b89178e4cc7630bd31650850c85 tests: Add a test for funding with sufficient preset inputs and subtractFeeFromOutputs (Andrew Chow)\nff330badd45067cb520b1cfa1844f60a4c9f2031 Default to bnb_used = false as there are many cases where BnB is not used (Andrew Chow)\n\nPull request description:\n\n  #17290 introduced a bug where, when we had preset inputs that covered the amount being sent and subtractFeeFrromOutputs was being used, transaction funding would result in a `Fee exceeds maximum configured by -maxtxfee` error. This was happening because we weren't setting `bnb_used = false` when the preset inputs were used as it should have been. This resulted in a too high fee because the change would go to fees accidentally.\n\n  Apparently this particular case doesn't have a test, so I've added one as well.\n\nACKs for top commit:\n  Sjors:\n    ACK eadd130. I can't get this new test to fail on macOS (without this PR). It passes whether or not I compile with `--enable-debug`. It does fail on Ubuntu. Yay undefined behavior... Anyway, it's a useful test.\n  fanquake:\n    ACK eadd1304c81e0b89178e4cc7630bd31650850c85\n  instagibbs:\n    utACK https://github.com/bitcoin/bitcoin/pull/17568/commits/eadd1304c81e0b89178e4cc7630bd31650850c85\n\nTree-SHA512: 7286c321f78666eea558cc591174630d210263594df41cab1065417510591ee514ade0e1d0cec8af09a785757da68de82592b013e8fe8d4966cec3254368706e",
      "tree": {
        "sha": "df9e5c79831e18ca0dd102da7a0657ea632a1470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df9e5c79831e18ca0dd102da7a0657ea632a1470"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3j9yAACgkQLuufXMCV\nJsEqQBAAp3BGOZX0koVLfVykQtMxZp1G8n8R5FEkPk/hTqoJJprmJvJxUq/xmPcP\nuQ8Oey9VUk50uJENujsl935+WDVp17mAbxSi0SywTXcLBtDi4Tg3BwoS5mk9zFlf\nPk6M1rV3nspnSb0BabzqiMUpdFDAk6YxwlN3d5+yfQT0j5lBDmNTxeSFN0xv29RF\nDzcQ/fEecDlXY4M/jF5SndlV3uc1xSL5yLaHzNdvsU5Lz3AwIvOOgAgj9y2aJVzp\nweq/OEMZSVbrOY1o6wyeYDtZR3i3j9F2wUVkl68wfHYv/WGGgp6dPgYOK9ZEe4Ht\nKIAB1OZ/0L3yDWO/GHRFpvRRiyh02cWLRZETO9Nea17h0rULrTMQf2XNhZvY7tOM\nX5PK4nDdFgKm9EOrGDoZZG+nz7XsUw4FRUJw1fAp011Whlxt2S1f97GNPRJIcNZH\n+dfX15U/rgiVEu60RH/t+S//XxVWghSiMXxTRIj8Hhb8GJGcIgQCB8u5ucZgTlD0\nfOXK2gR86zW30JId+0YpabBKmxihj7EBmjYKqOViWW9iTnL1j8B1BreWHJogvts9\niz+2wjbuTe5BjUdUOS9C/hmfDqQgRvdzbNq1yKyucUFbz9UPlvylX+vfZ+2ulxUW\nV/98v7KE8MZFFCxqNoODL17M9RrcpmNCaHK61guWhEdafCH0kXI=\n=NBAq\n-----END PGP SIGNATURE-----",
        "payload": "tree df9e5c79831e18ca0dd102da7a0657ea632a1470\nparent 2ecb7e1556cd970b6dccb5f101a718602487df4b\nparent eadd1304c81e0b89178e4cc7630bd31650850c85\nauthor fanquake <fanquake@gmail.com> 1575219412 -0500\ncommitter fanquake <fanquake@gmail.com> 1575221024 -0500\n\nMerge #17568: wallet: fix when sufficient preset inputs and subtractFeeFromOutputs\n\neadd1304c81e0b89178e4cc7630bd31650850c85 tests: Add a test for funding with sufficient preset inputs and subtractFeeFromOutputs (Andrew Chow)\nff330badd45067cb520b1cfa1844f60a4c9f2031 Default to bnb_used = false as there are many cases where BnB is not used (Andrew Chow)\n\nPull request description:\n\n  #17290 introduced a bug where, when we had preset inputs that covered the amount being sent and subtractFeeFrromOutputs was being used, transaction funding would result in a `Fee exceeds maximum configured by -maxtxfee` error. This was happening because we weren't setting `bnb_used = false` when the preset inputs were used as it should have been. This resulted in a too high fee because the change would go to fees accidentally.\n\n  Apparently this particular case doesn't have a test, so I've added one as well.\n\nACKs for top commit:\n  Sjors:\n    ACK eadd130. I can't get this new test to fail on macOS (without this PR). It passes whether or not I compile with `--enable-debug`. It does fail on Ubuntu. Yay undefined behavior... Anyway, it's a useful test.\n  fanquake:\n    ACK eadd1304c81e0b89178e4cc7630bd31650850c85\n  instagibbs:\n    utACK https://github.com/bitcoin/bitcoin/pull/17568/commits/eadd1304c81e0b89178e4cc7630bd31650850c85\n\nTree-SHA512: 7286c321f78666eea558cc591174630d210263594df41cab1065417510591ee514ade0e1d0cec8af09a785757da68de82592b013e8fe8d4966cec3254368706e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ecb7e1556cd970b6dccb5f101a718602487df4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ecb7e1556cd970b6dccb5f101a718602487df4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ecb7e1556cd970b6dccb5f101a718602487df4b"
      },
      {
        "sha": "eadd1304c81e0b89178e4cc7630bd31650850c85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eadd1304c81e0b89178e4cc7630bd31650850c85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eadd1304c81e0b89178e4cc7630bd31650850c85"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 17,
      "deletions": 7
    },
    "files": [
      {
        "sha": "647b381b39471f8d883e9d13af7549b26c9844ce",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08",
        "patch": "@@ -2270,12 +2270,12 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     std::vector<COutput> vCoins(vAvailableCoins);\n     CAmount value_to_select = nTargetValue;\n \n+    // Default to bnb was not used. If we use it, we set it later\n+    bnb_used = false;\n+\n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coin_control.HasSelected() && !coin_control.fAllowOtherInputs)\n     {\n-        // We didn't use BnB here, so set it to false.\n-        bnb_used = false;\n-\n         for (const COutput& out : vCoins)\n         {\n             if (!out.fSpendable)\n@@ -2300,14 +2300,12 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             const CWalletTx& wtx = it->second;\n             // Clearly invalid input, fail\n             if (wtx.tx->vout.size() <= outpoint.n) {\n-                bnb_used = false;\n                 return false;\n             }\n             // Just to calculate the marginal byte size\n             CInputCoin coin(wtx.tx, outpoint.n, wtx.GetSpendSize(outpoint.n, false));\n             nValueFromPresetInputs += coin.txout.nValue;\n             if (coin.m_input_bytes <= 0) {\n-                bnb_used = false;\n                 return false; // Not solvable, can't estimate size for fee\n             }\n             coin.effective_value = coin.txout.nValue - coin_selection_params.effective_fee.GetFee(coin.m_input_bytes);\n@@ -2318,7 +2316,6 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             }\n             setPresetCoins.insert(coin);\n         } else {\n-            bnb_used = false;\n             return false; // TODO: Allow non-wallet inputs\n         }\n     }\n@@ -2678,7 +2675,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 }\n \n                 // Choose coins to use\n-                bool bnb_used;\n+                bool bnb_used = false;\n                 if (pick_new_inputs) {\n                     nValueIn = 0;\n                     setCoins.clear();"
      },
      {
        "sha": "6f1ae0d3ba4fbf9188adf2471c1a695469b8bc8b",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08",
        "patch": "@@ -92,6 +92,7 @@ def run_test(self):\n         self.test_option_feerate()\n         self.test_address_reuse()\n         self.test_option_subtract_fee_from_outputs()\n+        self.test_subtract_fee_with_presets()\n \n     def test_change_position(self):\n         \"\"\"Ensure setting changePosition in fundraw with an exact match is handled properly.\"\"\"\n@@ -741,5 +742,17 @@ def test_option_subtract_fee_from_outputs(self):\n         # The total subtracted from the outputs is equal to the fee.\n         assert_equal(share[0] + share[2] + share[3], result[0]['fee'])\n \n+    def test_subtract_fee_with_presets(self):\n+        self.log.info(\"Test fundrawtxn subtract fee from outputs with preset inputs that are sufficient\")\n+\n+        addr = self.nodes[0].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        vout = find_vout_for_address(self.nodes[0], txid, addr)\n+\n+        rawtx = self.nodes[0].createrawtransaction([{'txid': txid, 'vout': vout}], [{self.nodes[0].getnewaddress(): 5}])\n+        fundedtx = self.nodes[0].fundrawtransaction(rawtx, {'subtractFeeFromOutputs': [0]})\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(fundedtx['hex'])\n+        self.nodes[0].sendrawtransaction(signedtx['hex'])\n+\n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      }
    ]
  },
  {
    "sha": "5db506ba5943868cc2c845f717508739b7f05714",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZGI1MDZiYTU5NDM4NjhjYzJjODQ1ZjcxNzUwODczOWI3ZjA1NzE0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-11-29T15:11:18Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-01T19:53:30Z"
      },
      "message": "tests: Add option --valgrind to run nodes under valgrind in the functional tests",
      "tree": {
        "sha": "e1b2aa6dc986024e4514adcc9419222f80d455c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1b2aa6dc986024e4514adcc9419222f80d455c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5db506ba5943868cc2c845f717508739b7f05714",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5db506ba5943868cc2c845f717508739b7f05714",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5db506ba5943868cc2c845f717508739b7f05714",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5db506ba5943868cc2c845f717508739b7f05714/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bc162fd7eb5940209b6d9aa5bd659ff8a0c5cc7b",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5db506ba5943868cc2c845f717508739b7f05714/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5db506ba5943868cc2c845f717508739b7f05714/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=5db506ba5943868cc2c845f717508739b7f05714",
        "patch": "@@ -157,6 +157,8 @@ def parse_args(self):\n                             help=\"use bitcoin-cli instead of RPC for all commands\")\n         parser.add_argument(\"--perf\", dest=\"perf\", default=False, action=\"store_true\",\n                             help=\"profile running nodes with perf for the duration of the test\")\n+        parser.add_argument(\"--valgrind\", dest=\"valgrind\", default=False, action=\"store_true\",\n+                            help=\"run nodes under the valgrind memory error detector: expect at least a ~10x slowdown, valgrind 3.14 or later required\")\n         parser.add_argument(\"--randomseed\", type=int,\n                             help=\"set a random seed for deterministically reproducing a previous test run\")\n         self.add_options(parser)\n@@ -394,6 +396,7 @@ def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None):\n                 extra_args=extra_args[i],\n                 use_cli=self.options.usecli,\n                 start_perf=self.options.perf,\n+                use_valgrind=self.options.valgrind,\n             ))\n \n     def start_node(self, i, *args, **kwargs):"
      },
      {
        "sha": "40681790b9cabb28c9ca7fceb7a14bac5e0b0636",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5db506ba5943868cc2c845f717508739b7f05714/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5db506ba5943868cc2c845f717508739b7f05714/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=5db506ba5943868cc2c845f717508739b7f05714",
        "patch": "@@ -59,7 +59,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, *, chain, rpchost, timewait, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n+    def __init__(self, i, datadir, *, chain, rpchost, timewait, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False, use_valgrind=False):\n         \"\"\"\n         Kwargs:\n             start_perf (bool): If True, begin profiling the node with `perf` as soon as\n@@ -96,6 +96,15 @@ def __init__(self, i, datadir, *, chain, rpchost, timewait, bitcoind, bitcoin_cl\n             \"-debugexclude=leveldb\",\n             \"-uacomment=testnode%d\" % i,\n         ]\n+        if use_valgrind:\n+            default_suppressions_file = os.path.join(\n+                os.path.dirname(os.path.realpath(__file__)),\n+                \"..\", \"..\", \"..\", \"contrib\", \"valgrind.supp\")\n+            suppressions_file = os.getenv(\"VALGRIND_SUPPRESSIONS_FILE\",\n+                                          default_suppressions_file)\n+            self.args = [\"valgrind\", \"--suppressions={}\".format(suppressions_file),\n+                         \"--gen-suppressions=all\", \"--exit-on-first-error=yes\",\n+                         \"--error-exitcode=1\", \"--quiet\"] + self.args\n \n         self.cli = TestNodeCLI(bitcoin_cli, self.datadir)\n         self.use_cli = use_cli"
      }
    ]
  },
  {
    "sha": "02afb0c550dc8529918460c845d1da3adf236eed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmFmYjBjNTUwZGM4NTI5OTE4NDYwYzg0NWQxZGEzYWRmMjM2ZWVk",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-12-01T14:46:44Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-12-02T01:54:16Z"
      },
      "message": "Fix origfee return for bumpfee with feerate arg",
      "tree": {
        "sha": "37f8672127e60c7841c857d477598ecfe3f9d42e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37f8672127e60c7841c857d477598ecfe3f9d42e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02afb0c550dc8529918460c845d1da3adf236eed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02afb0c550dc8529918460c845d1da3adf236eed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02afb0c550dc8529918460c845d1da3adf236eed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02afb0c550dc8529918460c845d1da3adf236eed/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ecb7e1556cd970b6dccb5f101a718602487df4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ecb7e1556cd970b6dccb5f101a718602487df4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ecb7e1556cd970b6dccb5f101a718602487df4b"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "36588eb7d195eeb1bdd270d4629444aae2d5aeab",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02afb0c550dc8529918460c845d1da3adf236eed/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02afb0c550dc8529918460c845d1da3adf236eed/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=02afb0c550dc8529918460c845d1da3adf236eed",
        "patch": "@@ -108,12 +108,11 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n     return feebumper::Result::OK;\n }\n \n-static CFeeRate EstimateFeeRate(const CWallet& wallet, const CWalletTx& wtx, CCoinControl& coin_control, CAmount& old_fee)\n+static CFeeRate EstimateFeeRate(const CWallet& wallet, const CWalletTx& wtx, const CAmount old_fee, CCoinControl& coin_control)\n {\n     // Get the fee rate of the original transaction. This is calculated from\n     // the tx fee/vsize, so it may have been rounded down. Add 1 satoshi to the\n     // result.\n-    old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n     CFeeRate feerate(old_fee, txSize);\n     feerate += CFeeRate(1);\n@@ -309,6 +308,8 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n         }\n     }\n \n+    old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+\n     if (coin_control.m_feerate) {\n         // The user provided a feeRate argument.\n         // We calculate this here to avoid compiler warning on the cs_wallet lock\n@@ -319,7 +320,7 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n         }\n     } else {\n         // The user did not provide a feeRate argument\n-        new_coin_control.m_feerate = EstimateFeeRate(wallet, wtx, new_coin_control, old_fee);\n+        new_coin_control.m_feerate = EstimateFeeRate(wallet, wtx, old_fee, new_coin_control);\n     }\n \n     // Fill in required inputs we are double-spending(all of them)"
      },
      {
        "sha": "0c08655833ea88af9b5047a5840e1d3bf0c6808a",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02afb0c550dc8529918460c845d1da3adf236eed/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02afb0c550dc8529918460c845d1da3adf236eed/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=02afb0c550dc8529918460c845d1da3adf236eed",
        "patch": "@@ -101,7 +101,8 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     else:\n         bumped_tx = rbf_node.bumpfee(rbfid)\n     assert_equal(bumped_tx[\"errors\"], [])\n-    assert bumped_tx[\"fee\"] - abs(rbftx[\"fee\"]) > 0\n+    assert bumped_tx[\"fee\"] > -rbftx[\"fee\"]\n+    assert_equal(bumped_tx[\"origfee\"], -rbftx[\"fee\"])\n     # check that bumped_tx propagates, original tx was evicted and has a wallet conflict\n     self.sync_mempools((rbf_node, peer_node))\n     assert bumped_tx[\"txid\"] in rbf_node.getrawmempool()"
      }
    ]
  },
  {
    "sha": "35eda631ed3bd23d4a41761a85a96f925d4a6337",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNWVkYTYzMWVkM2JkMjNkNGE0MTc2MWE4NWE5NmY5MjVkNGE2MzM3",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-02T16:06:10Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-02T16:24:52Z"
      },
      "message": "Merge #17634: qt: Fix comparison function signature\n\n98fbd1cdffaa69357091cc67e959ac21119dfa16 Use correct C++11 header for std::swap() (Hennadii Stepanov)\nb66861e2e5e8a49e11e7489cf22c3007bc7082cc Fix comparison function signature (Hennadii Stepanov)\n\nPull request description:\n\n  This PR fixes build on CentOS 7 with GCC 4.8.5:\n\n  ```\n  ...\n  In file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                   from ./serialize.h:11,\n                   from ./qt/sendcoinsrecipient.h:13,\n                   from ./qt/recentrequeststablemodel.h:8,\n                   from qt/recentrequeststablemodel.cpp:5:\n  /usr/include/c++/4.8.2/bits/stl_algo.h: In instantiation of \u2018_RandomAccessIterator std::__unguarded_partition(_RandomAccessIterator, _RandomAccessIterator, const _Tp&, _Compare) [with _RandomAccessIterator = QList<RecentRequestEntry>::iterator; _Tp = RecentRequestEntry; _Compare = RecentRequestEntryLessThan]\u2019:\n  /usr/include/c++/4.8.2/bits/stl_algo.h:2296:78:   required from \u2018_RandomAccessIterator std::__unguarded_partition_pivot(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = QList<RecentRequestEntry>::iterator; _Compare = RecentRequestEntryLessThan]\u2019\n  /usr/include/c++/4.8.2/bits/stl_algo.h:2337:62:   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator, _Size, _Compare) [with _RandomAccessIterator = QList<RecentRequestEntry>::iterator; _Size = int; _Compare = RecentRequestEntryLessThan]\u2019\n  /usr/include/c++/4.8.2/bits/stl_algo.h:5499:44:   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter = QList<RecentRequestEntry>::iterator; _Compare = RecentRequestEntryLessThan]\u2019\n  qt/recentrequeststablemodel.cpp:208:82:   required from here\n  /usr/include/c++/4.8.2/bits/stl_algo.h:2263:35: error: no match for call to \u2018(RecentRequestEntryLessThan) (RecentRequestEntry&, const RecentRequestEntry&)\u2019\n      while (__comp(*__first, __pivot))\n                                     ^\n  In file included from qt/recentrequeststablemodel.cpp:5:0:\n  ./qt/recentrequeststablemodel.h:43:7: note: candidate is:\n   class RecentRequestEntryLessThan\n         ^\n  qt/recentrequeststablemodel.cpp:217:6: note: bool RecentRequestEntryLessThan::operator()(RecentRequestEntry&, RecentRequestEntry&) const\n   bool RecentRequestEntryLessThan::operator()(RecentRequestEntry &left, RecentRequestEntry &right) const\n        ^\n  qt/recentrequeststablemodel.cpp:217:6: note:   no known conversion for argument 2 from \u2018const RecentRequestEntry\u2019 to \u2018RecentRequestEntry&\u2019\n  In file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                   from ./serialize.h:11,\n                   from ./qt/sendcoinsrecipient.h:13,\n                   from ./qt/recentrequeststablemodel.h:8,\n                   from qt/recentrequeststablemodel.cpp:5:\n  /usr/include/c++/4.8.2/bits/stl_algo.h:2266:34: error: no match for call to \u2018(RecentRequestEntryLessThan) (const RecentRequestEntry&, RecentRequestEntry&)\u2019\n      while (__comp(__pivot, *__last))\n                                    ^\n  In file included from qt/recentrequeststablemodel.cpp:5:0:\n  ./qt/recentrequeststablemodel.h:43:7: note: candidate is:\n   class RecentRequestEntryLessThan\n         ^\n  qt/recentrequeststablemodel.cpp:217:6: note: bool RecentRequestEntryLessThan::operator()(RecentRequestEntry&, RecentRequestEntry&) const\n   bool RecentRequestEntryLessThan::operator()(RecentRequestEntry &left, RecentRequestEntry &right) const\n        ^\n  qt/recentrequeststablemodel.cpp:217:6: note:   no known conversion for argument 1 from \u2018const RecentRequestEntry\u2019 to \u2018RecentRequestEntry&\u2019\n    CXX      qt/qt_libbitcoinqt_a-sendcoinsentry.o\n  make[2]: *** [qt/qt_libbitcoinqt_a-recentrequeststablemodel.o] Error 1\n  ```\n\n  Also for `std::swap()` header `<algorithm>` is replaced with `<utility>` one.\n  Refs:\n  - [`std::swap()`](https://en.cppreference.com/w/cpp/algorithm/swap)\n  - [standard library header `<utility>`](https://en.cppreference.com/w/cpp/header/utility)\n\nACKs for top commit:\n  promag:\n    Code review ACK 98fbd1cdffaa69357091cc67e959ac21119dfa16.\n  jonasschnelli:\n    utACK 98fbd1cdffaa69357091cc67e959ac21119dfa16\n  fanquake:\n    ACK 98fbd1cdffaa69357091cc67e959ac21119dfa16\n\nTree-SHA512: 91324490c1bdb98f186d233418e7e72ae7bee507876e94fb8c038bee031cea9e1046900f21156da4b7c33abcd726796867b124c4132d9ae3759877e90a8527db",
      "tree": {
        "sha": "6bc7458902f40d6f310cf17b55f17c61951de033",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bc7458902f40d6f310cf17b55f17c61951de033"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35eda631ed3bd23d4a41761a85a96f925d4a6337",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3lOtQACgkQLuufXMCV\nJsE0zQ/9FEuEPHN3S7j9QXRrXW3O6HuRqw/vxWsmTzP/H7UCz2HSDyz+2ko2A/fG\nUcjaq2rueBGnzNqaroCJC++1Yuu6WoxwPSI3n8yOo10fXyPkOn4EJ0qqdL1GBOz+\nGs+F+1sVT1tyGjPcoLYnsf0vHBEcsPsvytM3M2gAFZ+QJSvhLEbl7FUDqU+uu0G7\nrE3XdfvPHv9kWgBToBNmXERCmRQBsPjo77PTFqblb8LNjehgaAU3zttHqpk3ztxs\n3UfJPaPJ9osRdiNtI4Pcggv0hrFCuPuxUdT463VGg0+LPmGUvInMBPWdyDkbBu+2\nAfztrZ3c6sEl+mngg2hU21Sl6SEmQfwJPO809SLg6cAu/Jn3u869OiRUzdBgeA7X\nI5NlZmvO2ZPDAe6HQ2gx4J4TtB2L/m8OOFG25niQ0fFyQ+EGF96GD6HHX+qOvVZV\ns0oLVydpByajirlz/fiNgqFUvPxr9o7b8ItmsNug+SSfVbMBTtc031KOjqHoP12Y\nrOCvwp5mjc8qwZ3qmm1eHm8Uos4iyDiMTo/rtsZ+jyw2hfV1LLQon8MQQ6No7J0s\nR1X7gotvQ2cRAnPm+okcaEhKrj5NZYU9nGPDzHBchwMXppXUQITxmQ7qQiQgAkMz\nXztRl2SBhZe3iwSPvUCJkERbrnluWMl0aaxA5Gsc2xIz7eFDowA=\n=5uzo\n-----END PGP SIGNATURE-----",
        "payload": "tree 6bc7458902f40d6f310cf17b55f17c61951de033\nparent 19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08\nparent 98fbd1cdffaa69357091cc67e959ac21119dfa16\nauthor fanquake <fanquake@gmail.com> 1575302770 -0500\ncommitter fanquake <fanquake@gmail.com> 1575303892 -0500\n\nMerge #17634: qt: Fix comparison function signature\n\n98fbd1cdffaa69357091cc67e959ac21119dfa16 Use correct C++11 header for std::swap() (Hennadii Stepanov)\nb66861e2e5e8a49e11e7489cf22c3007bc7082cc Fix comparison function signature (Hennadii Stepanov)\n\nPull request description:\n\n  This PR fixes build on CentOS 7 with GCC 4.8.5:\n\n  ```\n  ...\n  In file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                   from ./serialize.h:11,\n                   from ./qt/sendcoinsrecipient.h:13,\n                   from ./qt/recentrequeststablemodel.h:8,\n                   from qt/recentrequeststablemodel.cpp:5:\n  /usr/include/c++/4.8.2/bits/stl_algo.h: In instantiation of \u2018_RandomAccessIterator std::__unguarded_partition(_RandomAccessIterator, _RandomAccessIterator, const _Tp&, _Compare) [with _RandomAccessIterator = QList<RecentRequestEntry>::iterator; _Tp = RecentRequestEntry; _Compare = RecentRequestEntryLessThan]\u2019:\n  /usr/include/c++/4.8.2/bits/stl_algo.h:2296:78:   required from \u2018_RandomAccessIterator std::__unguarded_partition_pivot(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = QList<RecentRequestEntry>::iterator; _Compare = RecentRequestEntryLessThan]\u2019\n  /usr/include/c++/4.8.2/bits/stl_algo.h:2337:62:   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator, _Size, _Compare) [with _RandomAccessIterator = QList<RecentRequestEntry>::iterator; _Size = int; _Compare = RecentRequestEntryLessThan]\u2019\n  /usr/include/c++/4.8.2/bits/stl_algo.h:5499:44:   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter = QList<RecentRequestEntry>::iterator; _Compare = RecentRequestEntryLessThan]\u2019\n  qt/recentrequeststablemodel.cpp:208:82:   required from here\n  /usr/include/c++/4.8.2/bits/stl_algo.h:2263:35: error: no match for call to \u2018(RecentRequestEntryLessThan) (RecentRequestEntry&, const RecentRequestEntry&)\u2019\n      while (__comp(*__first, __pivot))\n                                     ^\n  In file included from qt/recentrequeststablemodel.cpp:5:0:\n  ./qt/recentrequeststablemodel.h:43:7: note: candidate is:\n   class RecentRequestEntryLessThan\n         ^\n  qt/recentrequeststablemodel.cpp:217:6: note: bool RecentRequestEntryLessThan::operator()(RecentRequestEntry&, RecentRequestEntry&) const\n   bool RecentRequestEntryLessThan::operator()(RecentRequestEntry &left, RecentRequestEntry &right) const\n        ^\n  qt/recentrequeststablemodel.cpp:217:6: note:   no known conversion for argument 2 from \u2018const RecentRequestEntry\u2019 to \u2018RecentRequestEntry&\u2019\n  In file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                   from ./serialize.h:11,\n                   from ./qt/sendcoinsrecipient.h:13,\n                   from ./qt/recentrequeststablemodel.h:8,\n                   from qt/recentrequeststablemodel.cpp:5:\n  /usr/include/c++/4.8.2/bits/stl_algo.h:2266:34: error: no match for call to \u2018(RecentRequestEntryLessThan) (const RecentRequestEntry&, RecentRequestEntry&)\u2019\n      while (__comp(__pivot, *__last))\n                                    ^\n  In file included from qt/recentrequeststablemodel.cpp:5:0:\n  ./qt/recentrequeststablemodel.h:43:7: note: candidate is:\n   class RecentRequestEntryLessThan\n         ^\n  qt/recentrequeststablemodel.cpp:217:6: note: bool RecentRequestEntryLessThan::operator()(RecentRequestEntry&, RecentRequestEntry&) const\n   bool RecentRequestEntryLessThan::operator()(RecentRequestEntry &left, RecentRequestEntry &right) const\n        ^\n  qt/recentrequeststablemodel.cpp:217:6: note:   no known conversion for argument 1 from \u2018const RecentRequestEntry\u2019 to \u2018RecentRequestEntry&\u2019\n    CXX      qt/qt_libbitcoinqt_a-sendcoinsentry.o\n  make[2]: *** [qt/qt_libbitcoinqt_a-recentrequeststablemodel.o] Error 1\n  ```\n\n  Also for `std::swap()` header `<algorithm>` is replaced with `<utility>` one.\n  Refs:\n  - [`std::swap()`](https://en.cppreference.com/w/cpp/algorithm/swap)\n  - [standard library header `<utility>`](https://en.cppreference.com/w/cpp/header/utility)\n\nACKs for top commit:\n  promag:\n    Code review ACK 98fbd1cdffaa69357091cc67e959ac21119dfa16.\n  jonasschnelli:\n    utACK 98fbd1cdffaa69357091cc67e959ac21119dfa16\n  fanquake:\n    ACK 98fbd1cdffaa69357091cc67e959ac21119dfa16\n\nTree-SHA512: 91324490c1bdb98f186d233418e7e72ae7bee507876e94fb8c038bee031cea9e1046900f21156da4b7c33abcd726796867b124c4132d9ae3759877e90a8527db\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35eda631ed3bd23d4a41761a85a96f925d4a6337",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35eda631ed3bd23d4a41761a85a96f925d4a6337",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35eda631ed3bd23d4a41761a85a96f925d4a6337/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08"
      },
      {
        "sha": "98fbd1cdffaa69357091cc67e959ac21119dfa16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98fbd1cdffaa69357091cc67e959ac21119dfa16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98fbd1cdffaa69357091cc67e959ac21119dfa16"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "4ad5818cdc1113767ac390e3165a8e63afaf8e0d",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "patch": "@@ -6,11 +6,11 @@\n #define BITCOIN_CUCKOOCACHE_H\n \n #include <array>\n-#include <algorithm>\n #include <atomic>\n-#include <cstring>\n #include <cmath>\n+#include <cstring>\n #include <memory>\n+#include <utility>\n #include <vector>\n \n "
      },
      {
        "sha": "4fb07688ffb62f27998004ff0fe079e125322a4b",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "patch": "@@ -13,6 +13,7 @@\n #include <algorithm>\n #include <cstddef>\n #include <type_traits>\n+#include <utility>\n \n #pragma pack(push, 1)\n /** Implements a drop-in replacement for std::vector<T> which stores up to N"
      },
      {
        "sha": "b6c6984b1008dbe8cf4e05b03ee81b9b2bb9a96a",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "patch": "@@ -8,7 +8,7 @@\n #include <net_types.h> // For banmap_t\n #include <qt/clientmodel.h>\n \n-#include <algorithm>\n+#include <utility>\n \n #include <QDebug>\n #include <QList>"
      },
      {
        "sha": "514ff35bcdbae547b01c7c31e9362d476ac230fd",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "patch": "@@ -10,7 +10,7 @@\n \n #include <interfaces/node.h>\n \n-#include <algorithm>\n+#include <utility>\n \n #include <QDebug>\n #include <QList>"
      },
      {
        "sha": "18fa5f417f81f2d21cd3201653a4fa315b1bb253",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "patch": "@@ -12,8 +12,7 @@\n #include <clientversion.h>\n #include <streams.h>\n \n-#include <algorithm>\n-\n+#include <utility>\n \n RecentRequestsTableModel::RecentRequestsTableModel(WalletModel *parent) :\n     QAbstractTableModel(parent), walletModel(parent)\n@@ -214,10 +213,10 @@ void RecentRequestsTableModel::updateDisplayUnit()\n     updateAmountColumnTitle();\n }\n \n-bool RecentRequestEntryLessThan::operator()(RecentRequestEntry &left, RecentRequestEntry &right) const\n+bool RecentRequestEntryLessThan::operator()(const RecentRequestEntry& left, const RecentRequestEntry& right) const\n {\n-    RecentRequestEntry *pLeft = &left;\n-    RecentRequestEntry *pRight = &right;\n+    const RecentRequestEntry* pLeft = &left;\n+    const RecentRequestEntry* pRight = &right;\n     if (order == Qt::DescendingOrder)\n         std::swap(pLeft, pRight);\n "
      },
      {
        "sha": "f5085f726887252d81df25235fd63baec1936411",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "patch": "@@ -45,7 +45,7 @@ class RecentRequestEntryLessThan\n public:\n     RecentRequestEntryLessThan(int nColumn, Qt::SortOrder fOrder):\n         column(nColumn), order(fOrder) {}\n-    bool operator()(RecentRequestEntry &left, RecentRequestEntry &right) const;\n+    bool operator()(const RecentRequestEntry& left, const RecentRequestEntry& right) const;\n \n private:\n     int column;"
      },
      {
        "sha": "482fe3772c25d45d000c122fed66417e82704ab6",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "patch": "@@ -17,6 +17,7 @@\n #include <condition_variable>\n \n #include <unordered_set>\n+#include <utility>\n \n BOOST_FIXTURE_TEST_SUITE(checkqueue_tests, TestingSetup)\n "
      },
      {
        "sha": "54f97e721325650e329558d76dcf5ca1caefae8e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "patch": "@@ -23,7 +23,6 @@\n #include <versionbits.h>\n #include <serialize.h>\n \n-#include <algorithm>\n #include <atomic>\n #include <map>\n #include <memory>"
      }
    ]
  },
  {
    "sha": "ba41aa4969169cd73d6b4f57444ed7d8d875de10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTQxYWE0OTY5MTY5Y2Q3M2Q2YjRmNTc0NDRlZDdkOGQ4NzVkZTEw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-02T16:57:20Z"
      },
      "message": "Key pool: Move LearnRelated and GetDestination calls\n\nAddresses are determined by LegacyScriptPubKeyMan::GetReservedDestination\ninstead of ReserveDestination::GetReservedDestination as other ScriptPubKeyMan\nimplementations may construct addresses differently\n\nThis does not change behavior.",
      "tree": {
        "sha": "1645f6defd962dc195bde34031a862a9bc84eed3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1645f6defd962dc195bde34031a862a9bc84eed3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba41aa4969169cd73d6b4f57444ed7d8d875de10",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba41aa4969169cd73d6b4f57444ed7d8d875de10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba41aa4969169cd73d6b4f57444ed7d8d875de10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba41aa4969169cd73d6b4f57444ed7d8d875de10/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65833a74076cddf986037c6eb3b29a9b9dbe31c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65833a74076cddf986037c6eb3b29a9b9dbe31c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65833a74076cddf986037c6eb3b29a9b9dbe31c5"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "4986871fb708283285233135a59a1443dd6720ca",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba41aa4969169cd73d6b4f57444ed7d8d875de10/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba41aa4969169cd73d6b4f57444ed7d8d875de10/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=ba41aa4969169cd73d6b4f57444ed7d8d875de10",
        "patch": "@@ -262,7 +262,7 @@ bool LegacyScriptPubKeyMan::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n     return true;\n }\n \n-bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, int64_t& index, CKeyPool& keypool)\n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n {\n     if (!CanGetAddresses(internal)) {\n         return false;\n@@ -271,6 +271,7 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     if (!ReserveKeyFromKeyPool(index, keypool, internal)) {\n         return false;\n     }\n+    address = GetDestinationForKey(keypool.vchPubKey, type);\n     return true;\n }\n \n@@ -1091,6 +1092,7 @@ void LegacyScriptPubKeyMan::KeepDestination(int64_t nIndex, const OutputType& ty\n     // Remove from key pool\n     WalletBatch batch(m_storage.GetDatabase());\n     batch.ErasePool(nIndex);\n+    LearnRelatedScripts(pubkey, type);\n     WalletLogPrintf(\"keypool keep %d\\n\", nIndex);\n }\n "
      },
      {
        "sha": "bcc62ece1e9ee9dfd74dcd8fb990e07f0ef212ce",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba41aa4969169cd73d6b4f57444ed7d8d875de10/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba41aa4969169cd73d6b4f57444ed7d8d875de10/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=ba41aa4969169cd73d6b4f57444ed7d8d875de10",
        "patch": "@@ -150,7 +150,7 @@ class ScriptPubKeyMan\n     virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n     virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n \n-    virtual bool GetReservedDestination(const OutputType type, bool internal, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n     virtual void KeepDestination(int64_t index, const OutputType& type, const CPubKey& pubkey) {}\n     virtual void ReturnDestination(int64_t index, bool internal, const CPubKey& pubkey) {}\n \n@@ -273,7 +273,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! will encrypt previously unencrypted keys\n     bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n \n-    bool GetReservedDestination(const OutputType type, bool internal, int64_t& index, CKeyPool& keypool) override;\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n     void KeepDestination(int64_t index, const OutputType& type, const CPubKey& pubkey) override;\n     void ReturnDestination(int64_t index, bool internal, const CPubKey& pubkey) override;\n "
      },
      {
        "sha": "2bdec16f289708ea7b3bdb3f3f789c4be7f771b4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba41aa4969169cd73d6b4f57444ed7d8d875de10/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba41aa4969169cd73d6b4f57444ed7d8d875de10/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ba41aa4969169cd73d6b4f57444ed7d8d875de10",
        "patch": "@@ -3302,14 +3302,13 @@ bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool inter\n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n-        if (!m_spk_man->GetReservedDestination(type, internal, nIndex, keypool)) {\n+        if (!m_spk_man->GetReservedDestination(type, internal, address, nIndex, keypool)) {\n             return false;\n         }\n         vchPubKey = keypool.vchPubKey;\n         fInternal = keypool.fInternal;\n     }\n     assert(vchPubKey.IsValid());\n-    address = GetDestinationForKey(vchPubKey, type);\n     dest = address;\n     return true;\n }\n@@ -3318,7 +3317,6 @@ void ReserveDestination::KeepDestination()\n {\n     if (nIndex != -1) {\n         m_spk_man->KeepDestination(nIndex, type, vchPubKey);\n-        m_spk_man->LearnRelatedScripts(vchPubKey, type);\n     }\n     nIndex = -1;\n     vchPubKey = CPubKey();"
      },
      {
        "sha": "f6cbe6f6de7937a207465647bfbbd091a7b11e50",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba41aa4969169cd73d6b4f57444ed7d8d875de10/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba41aa4969169cd73d6b4f57444ed7d8d875de10/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ba41aa4969169cd73d6b4f57444ed7d8d875de10",
        "patch": "@@ -141,7 +141,8 @@ class ReserveDestination\n protected:\n     //! The wallet to reserve from\n     CWallet* const pwallet;\n-    LegacyScriptPubKeyMan* m_spk_man{nullptr};\n+    //! The ScriptPubKeyMan to reserve from. Based on type when GetReservedDestination is called\n+    ScriptPubKeyMan* m_spk_man{nullptr};\n     OutputType const type;\n     //! The index of the address's key in the keypool\n     int64_t nIndex{-1};"
      }
    ]
  },
  {
    "sha": "386a994b853bc5b3a2ed0d812673465b8ffa4849",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODZhOTk0Yjg1M2JjNWIzYTJlZDBkODEyNjczNDY1YjhmZmE0ODQ5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-02T16:57:46Z"
      },
      "message": "Key pool: Change ReturnDestination interface to take address instead of key\n\nIn order for ScriptPubKeyMan to be generic and work with future\nScriptPubKeyMans, ScriptPubKeyMan::ReturnDestination is changed to\ntake a CTxDestination instead of a CPubKey. Since LegacyScriptPubKeyMan\nstill deals with keys internally, a new map m_reserved_key_to_index is\nadded in order to track the keypool indexes that have been reserved.\n\nThe CPubKey argument of KeepDestination is also  removed so that it is\nmore generic. Instead of taking a CPubKey or a CTxDestination, we just use\nthe nIndex given to find the pubkey.",
      "tree": {
        "sha": "0589f2d5ad8d22fe0d089f2de67bf62b842378cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0589f2d5ad8d22fe0d089f2de67bf62b842378cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/386a994b853bc5b3a2ed0d812673465b8ffa4849",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/386a994b853bc5b3a2ed0d812673465b8ffa4849",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/386a994b853bc5b3a2ed0d812673465b8ffa4849",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/386a994b853bc5b3a2ed0d812673465b8ffa4849/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba41aa4969169cd73d6b4f57444ed7d8d875de10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba41aa4969169cd73d6b4f57444ed7d8d875de10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba41aa4969169cd73d6b4f57444ed7d8d875de10"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 20,
      "deletions": 16
    },
    "files": [
      {
        "sha": "e5b45a81a1b2a4954f51ebf70beef6088baaf3b4",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/386a994b853bc5b3a2ed0d812673465b8ffa4849/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/386a994b853bc5b3a2ed0d812673465b8ffa4849/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=386a994b853bc5b3a2ed0d812673465b8ffa4849",
        "patch": "@@ -1087,16 +1087,20 @@ void LegacyScriptPubKeyMan::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const\n     m_pool_key_to_index[pubkey.GetID()] = index;\n }\n \n-void LegacyScriptPubKeyMan::KeepDestination(int64_t nIndex, const OutputType& type, const CPubKey& pubkey)\n+void LegacyScriptPubKeyMan::KeepDestination(int64_t nIndex, const OutputType& type)\n {\n     // Remove from key pool\n     WalletBatch batch(m_storage.GetDatabase());\n     batch.ErasePool(nIndex);\n+    CPubKey pubkey;\n+    bool have_pk = GetPubKey(m_index_to_reserved_key.at(nIndex), pubkey);\n+    assert(have_pk);\n     LearnRelatedScripts(pubkey, type);\n+    m_index_to_reserved_key.erase(nIndex);\n     WalletLogPrintf(\"keypool keep %d\\n\", nIndex);\n }\n \n-void LegacyScriptPubKeyMan::ReturnDestination(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n+void LegacyScriptPubKeyMan::ReturnDestination(int64_t nIndex, bool fInternal, const CTxDestination&)\n {\n     // Return to key pool\n     {\n@@ -1108,7 +1112,9 @@ void LegacyScriptPubKeyMan::ReturnDestination(int64_t nIndex, bool fInternal, co\n         } else {\n             setExternalKeyPool.insert(nIndex);\n         }\n-        m_pool_key_to_index[pubkey.GetID()] = nIndex;\n+        CKeyID& pubkey_id = m_index_to_reserved_key.at(nIndex);\n+        m_pool_key_to_index[pubkey_id] = nIndex;\n+        m_index_to_reserved_key.erase(nIndex);\n         NotifyCanGetAddressesChanged();\n     }\n     WalletLogPrintf(\"keypool return %d\\n\", nIndex);\n@@ -1130,7 +1136,7 @@ bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, const OutputType typ\n             result = GenerateNewKey(batch, internal);\n             return true;\n         }\n-        KeepDestination(nIndex, type, keypool.vchPubKey);\n+        KeepDestination(nIndex, type);\n         result = keypool.vchPubKey;\n     }\n     return true;\n@@ -1175,6 +1181,8 @@ bool LegacyScriptPubKeyMan::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& key\n             throw std::runtime_error(std::string(__func__) + \": keypool entry invalid\");\n         }\n \n+        assert(m_index_to_reserved_key.count(nIndex) == 0);\n+        m_index_to_reserved_key[nIndex] = keypool.vchPubKey.GetID();\n         m_pool_key_to_index.erase(keypool.vchPubKey.GetID());\n         WalletLogPrintf(\"keypool reserve %d\\n\", nIndex);\n     }"
      },
      {
        "sha": "6ed9a4787ac88376cf49d896348c5a4060c30a5a",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/386a994b853bc5b3a2ed0d812673465b8ffa4849/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/386a994b853bc5b3a2ed0d812673465b8ffa4849/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=386a994b853bc5b3a2ed0d812673465b8ffa4849",
        "patch": "@@ -151,8 +151,8 @@ class ScriptPubKeyMan\n     virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n \n     virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n-    virtual void KeepDestination(int64_t index, const OutputType& type, const CPubKey& pubkey) {}\n-    virtual void ReturnDestination(int64_t index, bool internal, const CPubKey& pubkey) {}\n+    virtual void KeepDestination(int64_t index, const OutputType& type) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n \n     virtual bool TopUp(unsigned int size = 0) { return false; }\n \n@@ -246,6 +246,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_wallet);\n     int64_t m_max_keypool_index GUARDED_BY(cs_wallet) = 0;\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n+    // Tracks keypool indexes to CKeyIDs of keys that have been taken out of the keypool but may be returned to it\n+    std::map<int64_t, CKeyID> m_index_to_reserved_key;\n \n     //! Fetches a key from the keypool\n     bool GetKeyFromPool(CPubKey &key, const OutputType type, bool internal = false);\n@@ -274,8 +276,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n \n     bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n-    void KeepDestination(int64_t index, const OutputType& type, const CPubKey& pubkey) override;\n-    void ReturnDestination(int64_t index, bool internal, const CPubKey& pubkey) override;\n+    void KeepDestination(int64_t index, const OutputType& type) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination&) override;\n \n     bool TopUp(unsigned int size = 0) override;\n "
      },
      {
        "sha": "e50dd1c127c915aa70fc84e557a3102fea850541",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/386a994b853bc5b3a2ed0d812673465b8ffa4849/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/386a994b853bc5b3a2ed0d812673465b8ffa4849/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=386a994b853bc5b3a2ed0d812673465b8ffa4849",
        "patch": "@@ -3305,31 +3305,27 @@ bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool inter\n         if (!m_spk_man->GetReservedDestination(type, internal, address, nIndex, keypool)) {\n             return false;\n         }\n-        vchPubKey = keypool.vchPubKey;\n         fInternal = keypool.fInternal;\n     }\n-    assert(vchPubKey.IsValid());\n     dest = address;\n     return true;\n }\n \n void ReserveDestination::KeepDestination()\n {\n     if (nIndex != -1) {\n-        m_spk_man->KeepDestination(nIndex, type, vchPubKey);\n+        m_spk_man->KeepDestination(nIndex, type);\n     }\n     nIndex = -1;\n-    vchPubKey = CPubKey();\n     address = CNoDestination();\n }\n \n void ReserveDestination::ReturnDestination()\n {\n     if (nIndex != -1) {\n-        m_spk_man->ReturnDestination(nIndex, fInternal, vchPubKey);\n+        m_spk_man->ReturnDestination(nIndex, fInternal, address);\n     }\n     nIndex = -1;\n-    vchPubKey = CPubKey();\n     address = CNoDestination();\n }\n "
      },
      {
        "sha": "db5788ebb5d19a083c9310159dba48bd07ad090b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/386a994b853bc5b3a2ed0d812673465b8ffa4849/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/386a994b853bc5b3a2ed0d812673465b8ffa4849/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=386a994b853bc5b3a2ed0d812673465b8ffa4849",
        "patch": "@@ -146,8 +146,6 @@ class ReserveDestination\n     OutputType const type;\n     //! The index of the address's key in the keypool\n     int64_t nIndex{-1};\n-    //! The public key for the address\n-    CPubKey vchPubKey;\n     //! The destination\n     CTxDestination address;\n     //! Whether this is from the internal (change output) keypool"
      }
    ]
  },
  {
    "sha": "886f1731bec4393dd342403ac34069a3a4f95eea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODZmMTczMWJlYzQzOTNkZDM0MjQwM2FjMzQwNjlhM2E0Zjk1ZWVh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-02T16:57:46Z"
      },
      "message": "Key pool: Fix omitted pre-split count in GetKeyPoolSize\n\nThis is a bugfix: https://github.com/bitcoin/bitcoin/pull/16341#discussion_r330669214",
      "tree": {
        "sha": "c0924d07f93efe422861f94f784015aa6e4c4265",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0924d07f93efe422861f94f784015aa6e4c4265"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/886f1731bec4393dd342403ac34069a3a4f95eea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/886f1731bec4393dd342403ac34069a3a4f95eea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/886f1731bec4393dd342403ac34069a3a4f95eea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/886f1731bec4393dd342403ac34069a3a4f95eea/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "386a994b853bc5b3a2ed0d812673465b8ffa4849",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/386a994b853bc5b3a2ed0d812673465b8ffa4849",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/386a994b853bc5b3a2ed0d812673465b8ffa4849"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2b9e8fbf2aa7e2e2c0162e19dabae30e670d3294",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/886f1731bec4393dd342403ac34069a3a4f95eea/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/886f1731bec4393dd342403ac34069a3a4f95eea/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=886f1731bec4393dd342403ac34069a3a4f95eea",
        "patch": "@@ -455,7 +455,7 @@ size_t LegacyScriptPubKeyMan::KeypoolCountExternalKeys()\n unsigned int LegacyScriptPubKeyMan::GetKeyPoolSize() const\n {\n     AssertLockHeld(cs_wallet);\n-    return setInternalKeyPool.size() + setExternalKeyPool.size();\n+    return setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size();\n }\n \n int64_t LegacyScriptPubKeyMan::GetTimeFirstKey() const"
      }
    ]
  },
  {
    "sha": "e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2FkNGEyZjhjMDdhODJkNjQyNGI0NzNmMGQ1MWRiZDhmODk3YjEw",
    "commit": {
      "author": {
        "name": "Wilson Ccasihue S",
        "email": "wilson2cs@gmail.com",
        "date": "2019-12-02T02:30:29Z"
      },
      "committer": {
        "name": "hel0",
        "email": "wilson2cs@gmail.com",
        "date": "2019-12-02T17:06:35Z"
      },
      "message": "doc: rename wallet-tool references to bitcoin-wallet",
      "tree": {
        "sha": "4fe44d456c9674db39692c30493dd5e1d410cb7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fe44d456c9674db39692c30493dd5e1d410cb7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10/comments",
    "author": {
      "login": "hel-o",
      "id": 4449673,
      "node_id": "MDQ6VXNlcjQ0NDk2NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4449673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hel-o",
      "html_url": "https://github.com/hel-o",
      "followers_url": "https://api.github.com/users/hel-o/followers",
      "following_url": "https://api.github.com/users/hel-o/following{/other_user}",
      "gists_url": "https://api.github.com/users/hel-o/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hel-o/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hel-o/subscriptions",
      "organizations_url": "https://api.github.com/users/hel-o/orgs",
      "repos_url": "https://api.github.com/users/hel-o/repos",
      "events_url": "https://api.github.com/users/hel-o/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hel-o/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hel-o",
      "id": 4449673,
      "node_id": "MDQ6VXNlcjQ0NDk2NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4449673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hel-o",
      "html_url": "https://github.com/hel-o",
      "followers_url": "https://api.github.com/users/hel-o/followers",
      "following_url": "https://api.github.com/users/hel-o/following{/other_user}",
      "gists_url": "https://api.github.com/users/hel-o/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hel-o/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hel-o/subscriptions",
      "organizations_url": "https://api.github.com/users/hel-o/orgs",
      "repos_url": "https://api.github.com/users/hel-o/repos",
      "events_url": "https://api.github.com/users/hel-o/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hel-o/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a2013edc0518521eddf22f46190cb7c71320c4bf",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10",
        "patch": "@@ -41,8 +41,8 @@ static bool WalletAppInit(int argc, char* argv[])\n     }\n     if (argc < 2 || HelpRequested(gArgs)) {\n         std::string usage = strprintf(\"%s bitcoin-wallet version\", PACKAGE_NAME) + \" \" + FormatFullVersion() + \"\\n\\n\" +\n-                                      \"wallet-tool is an offline tool for creating and interacting with Bitcoin Core wallet files.\\n\" +\n-                                      \"By default wallet-tool will act on wallets in the default mainnet wallet directory in the datadir.\\n\" +\n+                                      \"bitcoin-wallet is an offline tool for creating and interacting with Bitcoin Core wallet files.\\n\" +\n+                                      \"By default bitcoin-wallet will act on wallets in the default mainnet wallet directory in the datadir.\\n\" +\n                                       \"To change the target wallet, use the -datadir, -wallet and -testnet/-regtest arguments.\\n\\n\" +\n                                       \"Usage:\\n\" +\n                                      \"  bitcoin-wallet [options] <command>\\n\\n\" +"
      },
      {
        "sha": "0a8ce7caf1719b381ba12c3ec1f47b80b5eabf5d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10",
        "patch": "@@ -822,7 +822,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n \n void CWallet::LoadToWallet(CWalletTx& wtxIn)\n {\n-    // If wallet doesn't have a chain (e.g wallet-tool), lock can't be taken.\n+    // If wallet doesn't have a chain (e.g bitcoin-wallet), lock can't be taken.\n     auto locked_chain = LockChain();\n     if (locked_chain) {\n         Optional<int> block_height = locked_chain->getBlockHeight(wtxIn.m_confirm.hashBlock);\n@@ -2944,7 +2944,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n {\n     // Even if we don't use this lock in this function, we want to preserve\n     // lock order in LoadToWallet if query of chain state is needed to know\n-    // tx status. If lock can't be taken (e.g wallet-tool), tx confirmation\n+    // tx status. If lock can't be taken (e.g bitcoin-wallet), tx confirmation\n     // status may be not reliable.\n     auto locked_chain = LockChain();\n     LOCK(cs_wallet);"
      }
    ]
  },
  {
    "sha": "2b6575d9895c7da2ec64f2cb04be150f91a600f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjY1NzVkOTg5NWM3ZGEyZWM2NGYyY2IwNGJlMTUwZjkxYTYwMGY4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-03T15:25:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-03T15:25:34Z"
      },
      "message": "Merge #17643: wallet: Fix origfee return for bumpfee with feerate arg\n\n02afb0c550dc8529918460c845d1da3adf236eed Fix origfee return for bumpfee with feerate arg (Gregory Sanders)\n\nPull request description:\n\n  fixes https://github.com/bitcoin/bitcoin/issues/17642 and adds a simple test that would have caught it\n\nACKs for top commit:\n  achow101:\n    ACK 02afb0c550dc8529918460c845d1da3adf236eed\n\nTree-SHA512: 303e392e05407f204dffe360689b5bb5dc77fd462dd0e489bc0b6c8f94f89ab7fe2bd8cb47e4dc6dc5c23a619826d15f3bf6b02b2c8e96402fbb51953c462e2d",
      "tree": {
        "sha": "3abc866339d67f425e17b73a21673b0967589bc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3abc866339d67f425e17b73a21673b0967589bc4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b6575d9895c7da2ec64f2cb04be150f91a600f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYLC4pAL7OGskoDms0upIUOdSiyUFAl3mfm4ACgkQ0upIUOdS\niyURBA/+NpPeR83Pxbqcdtvi6uYkN45ZzIULpt7WG/uf/3Db1wCI1V2kewHUMrLr\nR5gghED11x+rD2PU506N66RVai7T8pH+kf6InFTDNTrLFvMM/ZagQjq73NzH0LNV\nCeRfGawOt2m/KjCL7tvlMKZnRpUVNoQyly5Kwey4RkZMc2O739kkhF8Ixrc1isJe\n+1Z6aUhXWXxMcUSe10SR7kBycnbQMIBMqIW/Bi71+DqqqdEShWb7bXDnC+2fr7Nx\nE+B8f4AcdpCc3f106eUixSF5wkIbeRbEhwZodKtwO04BAonOwjVFKH5TeO2YvPPX\nB3N2XxS5IwISjmlhI2a+uqRe1iR0A+kHkdUW2oPDaeT/GLXr6Vk1QxNsOTL6nI+n\ncCSvgQgXQSJXkZdGpTaYcXiXlMBuBkwWRg5XB7DvdJbz5JnqLPmcAkNKHhk2Ca1s\nSgbvrU6hrQjKomM7O5rtV9DV0BM541PpNh2K3FeDqvi8GQ+boqK8hs2E8qwOK30i\n4LucZIOMvSL4vF6eaWVjRJF1NJfehRr5STpX3M5+3j44x1G3LNpUoAb4JtLRz9C4\nCPTl+F/kiuRjDDhZeh6jZN5kLboy4Af458+Brc6udNkAMJyz7vYGQewX+lpfGn6d\nhfUtFNoSeyhpH3xvIjJIC1xA6LJ/aC1415jp2G858x8NaKDdAQU=\n=JmAe\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEmN8KSi5gSSknEYCAECxyJ4jum+fR4ZWFw6hrfE/Y3CCP/wEI9wjsk7Fm1n\nz4CrFiaDryII8QRd5n5y8AiARfr46FL8jwCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEN8IBHBkT1MUg7ItCrdm\nMFII8QRd5n5x8AiZ62Uk9LjwmQCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2Fs\nZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQ/KdafQ+HN5xQPODUmntgYwjxBF3mfnHw\nCKtRqy19N/hRAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRhbGxh\neHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 3abc866339d67f425e17b73a21673b0967589bc4\nparent 35eda631ed3bd23d4a41761a85a96f925d4a6337\nparent 02afb0c550dc8529918460c845d1da3adf236eed\nauthor MarcoFalke <falke.marco@gmail.com> 1575386723 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575386734 -0500\n\nMerge #17643: wallet: Fix origfee return for bumpfee with feerate arg\n\n02afb0c550dc8529918460c845d1da3adf236eed Fix origfee return for bumpfee with feerate arg (Gregory Sanders)\n\nPull request description:\n\n  fixes https://github.com/bitcoin/bitcoin/issues/17642 and adds a simple test that would have caught it\n\nACKs for top commit:\n  achow101:\n    ACK 02afb0c550dc8529918460c845d1da3adf236eed\n\nTree-SHA512: 303e392e05407f204dffe360689b5bb5dc77fd462dd0e489bc0b6c8f94f89ab7fe2bd8cb47e4dc6dc5c23a619826d15f3bf6b02b2c8e96402fbb51953c462e2d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b6575d9895c7da2ec64f2cb04be150f91a600f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b6575d9895c7da2ec64f2cb04be150f91a600f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b6575d9895c7da2ec64f2cb04be150f91a600f8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35eda631ed3bd23d4a41761a85a96f925d4a6337"
      },
      {
        "sha": "02afb0c550dc8529918460c845d1da3adf236eed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02afb0c550dc8529918460c845d1da3adf236eed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02afb0c550dc8529918460c845d1da3adf236eed"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "36588eb7d195eeb1bdd270d4629444aae2d5aeab",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b6575d9895c7da2ec64f2cb04be150f91a600f8/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b6575d9895c7da2ec64f2cb04be150f91a600f8/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=2b6575d9895c7da2ec64f2cb04be150f91a600f8",
        "patch": "@@ -108,12 +108,11 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n     return feebumper::Result::OK;\n }\n \n-static CFeeRate EstimateFeeRate(const CWallet& wallet, const CWalletTx& wtx, CCoinControl& coin_control, CAmount& old_fee)\n+static CFeeRate EstimateFeeRate(const CWallet& wallet, const CWalletTx& wtx, const CAmount old_fee, CCoinControl& coin_control)\n {\n     // Get the fee rate of the original transaction. This is calculated from\n     // the tx fee/vsize, so it may have been rounded down. Add 1 satoshi to the\n     // result.\n-    old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n     CFeeRate feerate(old_fee, txSize);\n     feerate += CFeeRate(1);\n@@ -309,6 +308,8 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n         }\n     }\n \n+    old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+\n     if (coin_control.m_feerate) {\n         // The user provided a feeRate argument.\n         // We calculate this here to avoid compiler warning on the cs_wallet lock\n@@ -319,7 +320,7 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n         }\n     } else {\n         // The user did not provide a feeRate argument\n-        new_coin_control.m_feerate = EstimateFeeRate(wallet, wtx, new_coin_control, old_fee);\n+        new_coin_control.m_feerate = EstimateFeeRate(wallet, wtx, old_fee, new_coin_control);\n     }\n \n     // Fill in required inputs we are double-spending(all of them)"
      },
      {
        "sha": "0c08655833ea88af9b5047a5840e1d3bf0c6808a",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b6575d9895c7da2ec64f2cb04be150f91a600f8/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b6575d9895c7da2ec64f2cb04be150f91a600f8/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=2b6575d9895c7da2ec64f2cb04be150f91a600f8",
        "patch": "@@ -101,7 +101,8 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     else:\n         bumped_tx = rbf_node.bumpfee(rbfid)\n     assert_equal(bumped_tx[\"errors\"], [])\n-    assert bumped_tx[\"fee\"] - abs(rbftx[\"fee\"]) > 0\n+    assert bumped_tx[\"fee\"] > -rbftx[\"fee\"]\n+    assert_equal(bumped_tx[\"origfee\"], -rbftx[\"fee\"])\n     # check that bumped_tx propagates, original tx was evicted and has a wallet conflict\n     self.sync_mempools((rbf_node, peer_node))\n     assert bumped_tx[\"txid\"] in rbf_node.getrawmempool()"
      }
    ]
  },
  {
    "sha": "69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWNhNmNkZDY2MTBmM2VhNjRmYmQ5MWNjMTcyZjZmNGQ1NGYzNjNi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-03T15:33:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-03T15:34:11Z"
      },
      "message": "Merge #17599: ci: Run functional tests on s390x\n\nfabd71076cd9493bd2d30a198467f5ea621b27aa ci: Print free disk space (MarcoFalke)\nfad9fdbea5dfb19328282afda9588edc6f1d0ddf test: Properly deserialize integers in little-endian (MarcoFalke)\nfa94fc10c881e502e6c9a71f3b7719aa955900f9 ci: Run functional tests on s390x (MarcoFalke)\n\nPull request description:\n\nTop commit has no ACKs.\n\nTree-SHA512: 98ba77eb56f283131fdaeb393fda86cc308f1bf9781e1e0e5736b8d616528dc8ff2e494d55ba107c138083025c66a59e382fcfa9962d4349a5fd6cbbc52484c3",
      "tree": {
        "sha": "780b3a94581ed30531d634b33ee4a22859ab4696",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/780b3a94581ed30531d634b33ee4a22859ab4696"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYLC4pAL7OGskoDms0upIUOdSiyUFAl3mgHMACgkQ0upIUOdS\niyWiWw//Yjw8C9g6Aua4JBoj9LffYsPJrb5FhryeEivqnP0JhbxJ4/aDM/lNYoZl\nT/kJG+Hr9B4cDj1ycgVybg8VwG0ZWI3rM5OL8/XYHyIPV3bWZTclUUpUiQhZ89+c\nPJYHDUwPV3b+SjY2NVgRI/eRHXMB1awuXEcZLSPKdntYOMaNv3dtk0rzePAV7Wmq\nmTSrMlIpe5el+FP6o5JgdMtB1D+BxranbXG7FkdIzVMFPGu3xFg6mZ2nGW8/4kDL\nG2mcO66b+sUgtdKE2pcFqpFHx2md1LRxs6oOIgBoOwTZqnG2p1ikExoOlXN19gT2\npv4mP4xeRvLSMEeEO61ytwX57MjKC/Zz414qRMaoPTTzbK7GfqLpiKSqLS6Rjgms\nJYpNpOoLAL9mGsAxPXtzF5OyBnD35VcW8DjSs4k+MaLZ6V05A3gebGWqADe4uyWr\n3q/mvwziGbNB2jvOj0dPyIW69YEJNw36mNxfEoV7om0JOw3DNrcxCQaSOdDwzzke\nbmiYDFEaARxJvyiuQ4DSv7ajKYE7Vnk6vHNduLHNjT8fHq+SHFVJyf0BFqSNflGT\n+0hSkZQLf6I+vawyZFfPDM34SKDGr5lQdRNUecxXcfFafREk9l9YnyfmYohNYGTT\nalU501P3uTQbrVEejm/cnVKXLAwSXiyAnxQBUjOSDM1ed15yTGQ=\n=msTx\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHhWovDm/CcvoNUSE/+t8hr2uEd6r+KDP9TDVCFCxARiCP/wEBRp8yrefhIF\nhDuHnqeD5rEI8QRd5oB08Ai8og9SAIRLdgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEF23olDpMP9rxzKzGvW3zjYI8QRd5oB0\n8AhsDjyldxBHMwCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ/AQhEQLTH4N7tKSNvG6v7CrWAjxBF3mgHXwCBoi5Cpq\nZXyhAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdh\nbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 780b3a94581ed30531d634b33ee4a22859ab4696\nparent 2b6575d9895c7da2ec64f2cb04be150f91a600f8\nparent fabd71076cd9493bd2d30a198467f5ea621b27aa\nauthor MarcoFalke <falke.marco@gmail.com> 1575387231 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575387251 -0500\n\nMerge #17599: ci: Run functional tests on s390x\n\nfabd71076cd9493bd2d30a198467f5ea621b27aa ci: Print free disk space (MarcoFalke)\nfad9fdbea5dfb19328282afda9588edc6f1d0ddf test: Properly deserialize integers in little-endian (MarcoFalke)\nfa94fc10c881e502e6c9a71f3b7719aa955900f9 ci: Run functional tests on s390x (MarcoFalke)\n\nPull request description:\n\nTop commit has no ACKs.\n\nTree-SHA512: 98ba77eb56f283131fdaeb393fda86cc308f1bf9781e1e0e5736b8d616528dc8ff2e494d55ba107c138083025c66a59e382fcfa9962d4349a5fd6cbbc52484c3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b6575d9895c7da2ec64f2cb04be150f91a600f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b6575d9895c7da2ec64f2cb04be150f91a600f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b6575d9895c7da2ec64f2cb04be150f91a600f8"
      },
      {
        "sha": "fabd71076cd9493bd2d30a198467f5ea621b27aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabd71076cd9493bd2d30a198467f5ea621b27aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fabd71076cd9493bd2d30a198467f5ea621b27aa"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 7,
      "deletions": 8
    },
    "files": [
      {
        "sha": "1c19145166841487dbbfd2fbfebe779b1257e3dc",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b",
        "patch": "@@ -96,14 +96,14 @@ jobs:\n         - set -o errexit; source ./ci/extended_lint/06_script.sh\n \n     - stage: test\n-      name: 'ARM  [GOAL: install]  [unit tests, functional tests]'\n+      name: 'ARM  [GOAL: install]  [bionic]  [unit tests, functional tests]'\n       arch: arm64\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_arm.sh\"\n         QEMU_USER_CMD=\"\"  # Can run the tests natively without qemu\n \n     - stage: test\n-      name: 'S390x  [GOAL: install]  [unit tests, functional tests]'\n+      name: 'S390x  [GOAL: install]  [bionic]  [unit tests, functional tests]'\n       arch: s390x\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_s390x.sh\""
      },
      {
        "sha": "89660c7fa4d5c8e5d64f6bbcfb79399355b8c398",
        "filename": "ci/test/00_setup_env_s390x.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b/ci/test/00_setup_env_s390x.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b/ci/test/00_setup_env_s390x.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_s390x.sh?ref=69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b",
        "patch": "@@ -7,12 +7,9 @@\n export LC_ALL=C.UTF-8\n \n export HOST=s390x-unknown-linux-gnu\n-export DOCKER_NAME_TAG=s390x/ubuntu:18.04\n-export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n+export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n export NO_DEPENDS=1\n export RUN_UNIT_TESTS=true\n-export RUN_FUNCTIONAL_TESTS=false\n+export RUN_FUNCTIONAL_TESTS=true\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-reduce-exports --with-incompatible-bdb\"\n-\n-lscpu"
      },
      {
        "sha": "5055a720964486e141fb03cdd6747297371f3ad1",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b",
        "patch": "@@ -72,6 +72,8 @@ if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n else\n   DOCKER_EXEC free -m -h\n   DOCKER_EXEC echo \"Number of CPUs \\(nproc\\):\" \\$\\(nproc\\)\n+  DOCKER_EXEC echo \"Free disk space:\"\n+  DOCKER_EXEC df -h\n fi\n \n if [ -n \"$DPKG_ADD_ARCH\" ]; then"
      },
      {
        "sha": "797fcc828a30ff059a4160ebf3006afd678cca7c",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b",
        "patch": "@@ -151,7 +151,7 @@ def run_test(self):\n \n         bin_response = self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body=bin_request, ret_type=RetType.BYTES)\n         output = BytesIO(bin_response)\n-        chain_height, = unpack(\"i\", output.read(4))\n+        chain_height, = unpack(\"<i\", output.read(4))\n         response_hash = output.read(32)[::-1].hex()\n \n         assert_equal(bb_hash, response_hash)  # check if getutxo's chaintip during calculation was fine"
      }
    ]
  },
  {
    "sha": "1705f1949a14fb1d5213b44b4787bee07681526f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzA1ZjE5NDlhMTRmYjFkNTIxM2I0NGI0Nzg3YmVlMDc2ODE1MjZm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-03T16:00:58Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-03T16:02:06Z"
      },
      "message": "Merge #17549: ci: misc cleanups\n\nfad88e6f86d1dd32cf01db2287df9c63e66c5116 ci: Remove use of cd (MarcoFalke)\nfa2941bbf47a8a6b79b8db4a87e1aedcf6a29a5e ci: Remove unmaintained extended_lint (MarcoFalke)\nfa041875284d01602647519cc452185ba1ad5a8f scripted-diff: Use ci DEPENDS_DIR, remove BASE_BUILD_DIR (MarcoFalke)\nfa0656d1ebc2a01d900fead4ce055d59eb818a1f ci: Add DEPENDS_DIR variable, Add documentation for folders (MarcoFalke)\nfaeeca87b65dd98e0efbc54443b3f8854cae9c00 scripted-diff: Move various folders to ci scratch dir (MarcoFalke)\n\nPull request description:\n\n  Some minor cleanups:\n\n  * Remove unused and unmaintained extended_lint to avoid ci bottlenecks and waste of CPU\n  * Move all folders that hold temporary ci files to the ci scratch dir (except for the build dirs)\n  * Add some documentation to folders and remove the `BASE_BUILD_DIR` alias for the root directory\n  * Fixes #17178 by removing `cd`\n\nTop commit has no ACKs.\n\nTree-SHA512: f6eb9d47ab98c08af59a79c2a4bf62fc331f0f6f3174909a28f2c2f48b0234423da5aee876225d2e188619b71b008d882a20d29a7aca68248039ea5080be5af5",
      "tree": {
        "sha": "a9008d94cfad290eb9fb6b6a54a00d4a9234ab11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9008d94cfad290eb9fb6b6a54a00d4a9234ab11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1705f1949a14fb1d5213b44b4787bee07681526f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYLC4pAL7OGskoDms0upIUOdSiyUFAl3mhv4ACgkQ0upIUOdS\niyXZpA/+OvvC6K7LeDght5v+f9G89k/9FH2xe1mk+gQbSoehuafVUtyCJcWgSLEB\np/tOvzjxh2QLNG6K4VZXFE2cEWj3zyULdKda5bOhUylQeHK+YyB2n4MKtKjlFAMt\n9b+9oueyieicRN/1g4KHhzOcg/cXnmWA6FRlvlS6Y5Cm+cRnxm6PsoRJisKqhLQm\nMF5c+VRpoU4a6o0J+s4weYvFHHn4ppBRpp8dwMOxxKlp0TH4UFg75QRgt4+MZlIO\nedrIIkN9cfy4I5y9+YFtuWRm8uPguEJUz13UbsCKCzMJCO/uFLLW7rc8VVzv+Wzq\n5cynEOYIQRnQ9wSNSPimPyYRARv3fNxdz6j+Cbtxf91KX2Bhkclc3PImuEeti0Mr\nlZU/njiCgGzaQR3PCLoyyAolg5DCqQ8LKkIYVFp9PcUvCV6HqJhHhKhlFdgCnYiw\n79ZQDEPpD5Jt5u8AkuMlBH8oTABtfoXRTVYT1PdIRbKnb5dKGTPJw3L89vcywE3J\nREpt7O8qnq9CZ+j7+97Xk0QAgeZeyGF+P653dFwJHSR/d9QcHEmEYEgb//27weQr\nOiboWXrgmY0pxFZD9sbTW6R0BWGUazGkqBrnPghmlNsy5kYD96Axw5l2gwYZRAYo\nrw7F5iTLj2/whHxGBbj2ZJ3HMM8xN73VATUW69dSiVKRc4Uaf7U=\n=nsqy\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFSZ/joZlIaSVYT/prNmYGsNsDekwuZ3wHwTWndY+BnDCP/wEJdRkrTst1IR\n2UKvNUYYMrMI8QRd5ocA8AgwDPWy3cdGDQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEMCVqzjb9asnBghtg4clhzUI8QRd5ocB\n8AjuCvcLYsNOFgCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ/AQ4r2PjgdL98JvqDaOfdz+zgjxBF3mhwHwCKb5CA1G\nUvMtAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdh\nbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree a9008d94cfad290eb9fb6b6a54a00d4a9234ab11\nparent 69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b\nparent fad88e6f86d1dd32cf01db2287df9c63e66c5116\nauthor MarcoFalke <falke.marco@gmail.com> 1575388858 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575388926 -0500\n\nMerge #17549: ci: misc cleanups\n\nfad88e6f86d1dd32cf01db2287df9c63e66c5116 ci: Remove use of cd (MarcoFalke)\nfa2941bbf47a8a6b79b8db4a87e1aedcf6a29a5e ci: Remove unmaintained extended_lint (MarcoFalke)\nfa041875284d01602647519cc452185ba1ad5a8f scripted-diff: Use ci DEPENDS_DIR, remove BASE_BUILD_DIR (MarcoFalke)\nfa0656d1ebc2a01d900fead4ce055d59eb818a1f ci: Add DEPENDS_DIR variable, Add documentation for folders (MarcoFalke)\nfaeeca87b65dd98e0efbc54443b3f8854cae9c00 scripted-diff: Move various folders to ci scratch dir (MarcoFalke)\n\nPull request description:\n\n  Some minor cleanups:\n\n  * Remove unused and unmaintained extended_lint to avoid ci bottlenecks and waste of CPU\n  * Move all folders that hold temporary ci files to the ci scratch dir (except for the build dirs)\n  * Add some documentation to folders and remove the `BASE_BUILD_DIR` alias for the root directory\n  * Fixes #17178 by removing `cd`\n\nTop commit has no ACKs.\n\nTree-SHA512: f6eb9d47ab98c08af59a79c2a4bf62fc331f0f6f3174909a28f2c2f48b0234423da5aee876225d2e188619b71b008d882a20d29a7aca68248039ea5080be5af5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1705f1949a14fb1d5213b44b4787bee07681526f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1705f1949a14fb1d5213b44b4787bee07681526f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1705f1949a14fb1d5213b44b4787bee07681526f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b"
      },
      {
        "sha": "fad88e6f86d1dd32cf01db2287df9c63e66c5116",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad88e6f86d1dd32cf01db2287df9c63e66c5116",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fad88e6f86d1dd32cf01db2287df9c63e66c5116"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 35,
      "deletions": 78
    },
    "files": [
      {
        "sha": "8a04326bab0af2ec128b3b911d02489d3c289ab3",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1705f1949a14fb1d5213b44b4787bee07681526f/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1705f1949a14fb1d5213b44b4787bee07681526f/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=1705f1949a14fb1d5213b44b4787bee07681526f",
        "patch": "@@ -43,7 +43,6 @@ before_cache:\n stages:\n   - lint\n   - test\n-  - extended-lint\n env:\n   global:\n     - CI_RETRY_EXE=\"travis_retry\"\n@@ -82,19 +81,6 @@ jobs:\n       script:\n         - set -o errexit; source ./ci/lint/06_script.sh\n \n-    - stage: extended-lint\n-      name: 'extended lint [runtime >= 60 seconds]'\n-      env:\n-      cache: false\n-      language: python\n-      python: '3.5'\n-      install:\n-        - set -o errexit; source ./ci/extended_lint/04_install.sh\n-      before_script:\n-        - set -o errexit; source ./ci/lint/05_before_script.sh\n-      script:\n-        - set -o errexit; source ./ci/extended_lint/06_script.sh\n-\n     - stage: test\n       name: 'ARM  [GOAL: install]  [bionic]  [unit tests, functional tests]'\n       arch: arm64"
      },
      {
        "sha": "123d874a84da4b8531edf5e51052b581688cef27",
        "filename": "ci/extended_lint/04_install.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b/ci/extended_lint/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b/ci/extended_lint/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/extended_lint/04_install.sh?ref=69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b",
        "patch": "@@ -1,12 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2019 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C\n-\n-CPPCHECK_VERSION=1.86\n-curl -s https://codeload.github.com/danmar/cppcheck/tar.gz/${CPPCHECK_VERSION} | tar -zxf - --directory /tmp/\n-(cd /tmp/cppcheck-${CPPCHECK_VERSION}/ && make CFGDIR=/tmp/cppcheck-${CPPCHECK_VERSION}/cfg/ > /dev/null)\n-export PATH=\"$PATH:/tmp/cppcheck-${CPPCHECK_VERSION}/\""
      },
      {
        "sha": "e8228c9c4d912c81e16b772e79e85231a2b6c1b9",
        "filename": "ci/extended_lint/06_script.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b/ci/extended_lint/06_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b/ci/extended_lint/06_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/extended_lint/06_script.sh?ref=69ca6cdd6610f3ea64fbd91cc172f6f4d54f363b",
        "patch": "@@ -1,9 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2019 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C\n-\n-test/lint/extended-lint-all.sh"
      },
      {
        "sha": "6040804a9ff75397a86b18076a065201b1d68901",
        "filename": "ci/test/00_setup_env.sh",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1705f1949a14fb1d5213b44b4787bee07681526f/ci/test/00_setup_env.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1705f1949a14fb1d5213b44b4787bee07681526f/ci/test/00_setup_env.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env.sh?ref=1705f1949a14fb1d5213b44b4787bee07681526f",
        "patch": "@@ -13,13 +13,17 @@ if [ -n \"${FILE_ENV}\" ]; then\n   source \"${FILE_ENV}\"\n fi\n \n+# The root dir.\n+# The ci system copies this folder.\n+# This is where the build is done (depends and dist).\n BASE_ROOT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\"/../../ >/dev/null 2>&1 && pwd )\n export BASE_ROOT_DIR\n \n echo \"Fallback to default values in env (if not yet set)\"\n # The number of parallel jobs to pass down to make and test_runner.py\n export MAKEJOBS=${MAKEJOBS:--j4}\n # A folder for the ci system to put temporary files (ccache, datadirs for tests, ...)\n+# This folder only exists on the ci host.\n export BASE_SCRATCH_DIR=${BASE_SCRATCH_DIR:-$BASE_ROOT_DIR/ci/scratch/}\n # What host to compile for. See also ./depends/README.md\n # Tests that need cross-compilation export the appropriate HOST.\n@@ -37,15 +41,18 @@ export BOOST_TEST_RANDOM=${BOOST_TEST_RANDOM:-1}\n export CCACHE_SIZE=${CCACHE_SIZE:-100M}\n export CCACHE_TEMPDIR=${CCACHE_TEMPDIR:-/tmp/.ccache-temp}\n export CCACHE_COMPRESS=${CCACHE_COMPRESS:-1}\n+# The cache dir.\n+# This folder exists on the ci host and ci guest. Changes are propagated back and forth.\n export CCACHE_DIR=${CCACHE_DIR:-$BASE_SCRATCH_DIR/.ccache}\n-# Folder where the build is done (depends and dist). Can not be changed and is equal to the root of the git repo\n-export BASE_BUILD_DIR=${BASE_BUILD_DIR:-$BASE_ROOT_DIR}\n-# Folder where the build is done (bin and lib). Can not be changed.\n-export BASE_OUTDIR=${BASE_OUTDIR:-$BASE_BUILD_DIR/out/$HOST}\n+# The depends dir.\n+# This folder exists on the ci host and ci guest. Changes are propagated back and forth.\n+export DEPENDS_DIR=${DEPENDS_DIR:-$BASE_ROOT_DIR/depends}\n+# Folder where the build is done (bin and lib).\n+export BASE_OUTDIR=${BASE_OUTDIR:-$BASE_SCRATCH_DIR/out/$HOST}\n export SDK_URL=${SDK_URL:-https://bitcoincore.org/depends-sources/sdks}\n export WINEDEBUG=${WINEDEBUG:-fixme-all}\n export DOCKER_PACKAGES=${DOCKER_PACKAGES:-build-essential libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates ccache python3 rsync git}\n export GOAL=${GOAL:-install}\n-export DIR_QA_ASSETS=${DIR_QA_ASSETS:-${BASE_BUILD_DIR}/qa-assets}\n+export DIR_QA_ASSETS=${DIR_QA_ASSETS:-${BASE_SCRATCH_DIR}/qa-assets}\n export PATH=${BASE_ROOT_DIR}/ci/retry:$PATH\n export CI_RETRY_EXE=${CI_RETRY_EXE:retry}"
      },
      {
        "sha": "9efdd30d879d6f0e2503350d1a918172ed5a5439",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1705f1949a14fb1d5213b44b4787bee07681526f/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1705f1949a14fb1d5213b44b4787bee07681526f/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=1705f1949a14fb1d5213b44b4787bee07681526f",
        "patch": "@@ -34,35 +34,37 @@ mkdir -p \"${BASE_SCRATCH_DIR}\"\n mkdir -p \"${CCACHE_DIR}\"\n \n export ASAN_OPTIONS=\"detect_stack_use_after_return=1\"\n-export LSAN_OPTIONS=\"suppressions=${BASE_BUILD_DIR}/test/sanitizer_suppressions/lsan\"\n-export TSAN_OPTIONS=\"suppressions=${BASE_BUILD_DIR}/test/sanitizer_suppressions/tsan:log_path=${BASE_BUILD_DIR}/sanitizer-output/tsan\"\n-export UBSAN_OPTIONS=\"suppressions=${BASE_BUILD_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1\"\n+export LSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/lsan\"\n+export TSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/tsan:log_path=${BASE_SCRATCH_DIR}/sanitizer-output/tsan\"\n+export UBSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1\"\n env | grep -E '^(BITCOIN_CONFIG|CCACHE_|WINEDEBUG|LC_ALL|BOOST_TEST_RANDOM|CONFIG_SHELL|(ASAN|LSAN|TSAN|UBSAN)_OPTIONS)' | tee /tmp/env\n if [[ $HOST = *-mingw32 ]]; then\n   DOCKER_ADMIN=\"--cap-add SYS_ADMIN\"\n elif [[ $BITCOIN_CONFIG = *--with-sanitizers=*address* ]]; then # If ran with (ASan + LSan), Docker needs access to ptrace (https://github.com/google/sanitizers/issues/764)\n   DOCKER_ADMIN=\"--cap-add SYS_PTRACE\"\n fi\n \n+export P_CI_DIR=\"$PWD\"\n+\n if [ -z \"$RUN_CI_ON_HOST\" ]; then\n   echo \"Creating $DOCKER_NAME_TAG container to run in\"\n   ${CI_RETRY_EXE} docker pull \"$DOCKER_NAME_TAG\"\n \n   DOCKER_ID=$(docker run $DOCKER_ADMIN -idt \\\n-                  --mount type=bind,src=$BASE_BUILD_DIR,dst=/ro_base,readonly \\\n+                  --mount type=bind,src=$BASE_ROOT_DIR,dst=/ro_base,readonly \\\n                   --mount type=bind,src=$CCACHE_DIR,dst=$CCACHE_DIR \\\n-                  --mount type=bind,src=$BASE_BUILD_DIR/depends,dst=$BASE_BUILD_DIR/depends \\\n-                  -w $BASE_BUILD_DIR \\\n+                  --mount type=bind,src=$DEPENDS_DIR,dst=$DEPENDS_DIR \\\n+                  -w $BASE_ROOT_DIR \\\n                   --env-file /tmp/env \\\n                   $DOCKER_NAME_TAG)\n \n   DOCKER_EXEC () {\n-    docker exec $DOCKER_ID bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $PWD && $*\"\n+    docker exec $DOCKER_ID bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $P_CI_DIR && $*\"\n   }\n else\n   echo \"Running on host system without docker wrapper\"\n   DOCKER_EXEC () {\n-    bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $PWD && $*\"\n+    bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $P_CI_DIR && $*\"\n   }\n fi\n \n@@ -90,11 +92,11 @@ if [ ! -d ${DIR_QA_ASSETS} ]; then\n fi\n export DIR_FUZZ_IN=${DIR_QA_ASSETS}/fuzz_seed_corpus/\n \n-DOCKER_EXEC mkdir -p \"${BASE_BUILD_DIR}/sanitizer-output/\"\n+DOCKER_EXEC mkdir -p \"${BASE_SCRATCH_DIR}/sanitizer-output/\"\n \n if [ -z \"$RUN_CI_ON_HOST\" ]; then\n-  echo \"Create $BASE_BUILD_DIR\"\n-  DOCKER_EXEC rsync -a /ro_base/ $BASE_BUILD_DIR\n+  echo \"Create $BASE_ROOT_DIR\"\n+  DOCKER_EXEC rsync -a /ro_base/ $BASE_ROOT_DIR\n fi\n \n if [ \"$USE_BUSY_BOX\" = \"true\" ]; then"
      },
      {
        "sha": "51a5830682616f4a6fdedcb6dda21510b60a57d1",
        "filename": "ci/test/05_before_script.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1705f1949a14fb1d5213b44b4787bee07681526f/ci/test/05_before_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1705f1949a14fb1d5213b44b4787bee07681526f/ci/test/05_before_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/05_before_script.sh?ref=1705f1949a14fb1d5213b44b4787bee07681526f",
        "patch": "@@ -13,13 +13,13 @@ else\n   DOCKER_EXEC echo \\> \\$HOME/.bitcoin\n fi\n \n-DOCKER_EXEC mkdir -p depends/SDKs depends/sdk-sources\n+DOCKER_EXEC mkdir -p ${DEPENDS_DIR}/SDKs ${DEPENDS_DIR}/sdk-sources\n \n-if [ -n \"$OSX_SDK\" ] && [ ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then\n-  curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz\n+if [ -n \"$OSX_SDK\" ] && [ ! -f ${DEPENDS_DIR}/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then\n+  curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o ${DEPENDS_DIR}/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz\n fi\n-if [ -n \"$OSX_SDK\" ] && [ -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then\n-  DOCKER_EXEC tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz\n+if [ -n \"$OSX_SDK\" ] && [ -f ${DEPENDS_DIR}/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then\n+  DOCKER_EXEC tar -C ${DEPENDS_DIR}/SDKs -xf ${DEPENDS_DIR}/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz\n fi\n if [[ $HOST = *-mingw32 ]]; then\n   DOCKER_EXEC update-alternatives --set $HOST-g++ \\$\\(which $HOST-g++-posix\\)"
      },
      {
        "sha": "98b75d7497547a96478fbd3119a13983c2615b80",
        "filename": "ci/test/06_script_a.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 16,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1705f1949a14fb1d5213b44b4787bee07681526f/ci/test/06_script_a.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1705f1949a14fb1d5213b44b4787bee07681526f/ci/test/06_script_a.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_a.sh?ref=1705f1949a14fb1d5213b44b4787bee07681526f",
        "patch": "@@ -6,7 +6,7 @@\n \n export LC_ALL=C.UTF-8\n \n-BITCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$BASE_BUILD_DIR/depends/$HOST --bindir=$BASE_OUTDIR/bin --libdir=$BASE_OUTDIR/lib\"\n+BITCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$DEPENDS_DIR/$HOST --bindir=$BASE_OUTDIR/bin --libdir=$BASE_OUTDIR/lib\"\n if [ -z \"$NO_DEPENDS\" ]; then\n   DOCKER_EXEC ccache --max-size=$CCACHE_SIZE\n fi\n@@ -19,14 +19,8 @@ else\n fi\n END_FOLD\n \n-# Create folder on host and docker, so that `cd` works\n-mkdir -p build\n DOCKER_EXEC mkdir -p build\n-\n-# Temporarily disable errexit, because Travis macOS fails without error message\n-set +o errexit\n-cd build || (echo \"could not enter build directory\"; exit 1)\n-set -o errexit\n+export P_CI_DIR=\"$P_CI_DIR/build\"\n \n BEGIN_FOLD configure\n DOCKER_EXEC ../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( (DOCKER_EXEC cat config.log) && false)\n@@ -38,21 +32,15 @@ mkdir -p \"bitcoin-$HOST\"\n DOCKER_EXEC make distdir VERSION=$HOST\n END_FOLD\n \n-set +o errexit\n-cd \"bitcoin-$HOST\" || (echo \"could not enter distdir bitcoin-$HOST\"; exit 1)\n-set -o errexit\n+export P_CI_DIR=\"$P_CI_DIR/bitcoin-$HOST\"\n \n BEGIN_FOLD configure\n DOCKER_EXEC ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( (DOCKER_EXEC cat config.log) && false)\n END_FOLD\n \n set -o errtrace\n-trap 'DOCKER_EXEC \"cat ${BASE_BUILD_DIR}/sanitizer-output/* 2> /dev/null\"' ERR\n+trap 'DOCKER_EXEC \"cat ${BASE_SCRATCH_DIR}/sanitizer-output/* 2> /dev/null\"' ERR\n \n BEGIN_FOLD build\n DOCKER_EXEC make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && DOCKER_EXEC make $GOAL V=1 ; false )\n END_FOLD\n-\n-set +o errexit\n-cd ${BASE_BUILD_DIR} || (echo \"could not enter travis build dir $BASE_BUILD_DIR\"; exit 1)\n-set -o errexit"
      },
      {
        "sha": "a8e0a50f3669c53b17b609cf8a8f410d401049d9",
        "filename": "ci/test/06_script_b.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1705f1949a14fb1d5213b44b4787bee07681526f/ci/test/06_script_b.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1705f1949a14fb1d5213b44b4787bee07681526f/ci/test/06_script_b.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_b.sh?ref=1705f1949a14fb1d5213b44b4787bee07681526f",
        "patch": "@@ -6,11 +6,6 @@\n \n export LC_ALL=C.UTF-8\n \n-# Temporarily disable errexit, because Travis macOS fails without error message\n-set +o errexit\n-cd \"build/bitcoin-$HOST\" || (echo \"could not enter distdir build/bitcoin-$HOST\"; exit 1)\n-set -o errexit\n-\n if [ -n \"$QEMU_USER_CMD\" ]; then\n   BEGIN_FOLD wrap-qemu\n   echo \"Prepare to run functional tests for HOST=$HOST\"\n@@ -33,7 +28,7 @@ fi\n if [ \"$RUN_UNIT_TESTS\" = \"true\" ]; then\n   BEGIN_FOLD unit-tests\n   bash -c \"${CI_WAIT}\" &  # Print dots in case the unit tests take a long time to run\n-  DOCKER_EXEC LD_LIBRARY_PATH=$BASE_BUILD_DIR/depends/$HOST/lib make $MAKEJOBS check VERBOSE=1\n+  DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib make $MAKEJOBS check VERBOSE=1\n   END_FOLD\n fi\n "
      }
    ]
  },
  {
    "sha": "1fdaa04cebaac61a1106ed52a35486039413a0cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmRhYTA0Y2ViYWFjNjFhMTEwNmVkNTJhMzU0ODYwMzk0MTNhMGNi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-03T16:06:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-03T16:06:59Z"
      },
      "message": "Merge #17641: Add unit test for leveldb creation with unicode path\n\n70ed2ab7ef9e7ebf56f77b7c410a345ff455938f Add unit test for DB creation with unicode path (Aaron Clauson)\n\nPull request description:\n\n  An issue arose when attempting to switch back to the main repo version of leveldb when the bitcoin data directory uses a unicode path. The leveldb windows file IO wrapper was using the *A ANSI win32 calls instead of the Unicode *W ones. This unit test will catch if the path created by leveldb doesn't match what we're expecting. For more info see https://github.com/google/leveldb/issues/755.\n\nACKs for top commit:\n  laanwj:\n    ACK 70ed2ab7ef9e7ebf56f77b7c410a345ff455938f\n\nTree-SHA512: fc6dbd3aa26a439016e63e8d4d931f218ce99094fc7887a13b54562ad4133047020288ecbcd622a8309f422ee1eda5df50bcb8c8e44442af36ed57b22c069004",
      "tree": {
        "sha": "275c10c7a62f55d7053d5c39bd2eb8020c86dc0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/275c10c7a62f55d7053d5c39bd2eb8020c86dc0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fdaa04cebaac61a1106ed52a35486039413a0cb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYLC4pAL7OGskoDms0upIUOdSiyUFAl3miCMACgkQ0upIUOdS\niyVfFw//fMYALUtfckkT+qdNZNJuyHtZiIt0ODjz/JemMrqezAndYsEi7xjj8UuT\ntkyXKVWjbuYz4T9nr7AhagWyysTMLRv4W7CHvCYJNpVOWtIv6yzQ3RFw+wnY9ezo\nhHbslsD85MZSFMiEq/lk2679HJa0qV28PmVJ2TIJCRmjqxDbNMDMbPZI5mRbkEUS\nILcgTbL2no95NYNYCpm8P5/1vVtfmPMAOM3anxBLxuS707O8rli0lWi4b1cKeO6d\nZDes3XQ74NvQejnBvBjzJ0v+NGGL/W3QiXg8UcQkpiI7oaH4DoSTXwGG4dH86Byn\nA1NmoiWem+u70z7669SVRjvl63Fu2DgjZbmjNNv78ehMOTc5OUgTtHgSxW6x+aWg\nceXy/Z+bHF29CK7yxItfbiaaI3f9RPAVupuakn2P6P2zQdXVcxsbFPBTu5EzOcTE\ncvXldBvD5YB3eU6G8+0vvrlWCFTRCyIFviLBktLFGrIwrQ3pNySvKDqYH/gEPJ9X\nCm6D2TTrsGUQX7/jZhQp5HAlwirPUsKO4eoNr/YrXOGXOZbEibaD30z60ixEoP1l\nS6Cf01zWewf8oMeurJFDXVF/61mKbH8BsLt/wUezW2DNRaEjJcSnKTyn5fNTn3HV\n+TwzsKIUb8H4h7MW9WA+zdKLBjxhMHEMGPefoB/SqUQWu1NM8ac=\n=hik4\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICNlhcdmC5f7WnHx8lLmFAkLgngChLsTkvn/wJAq++FBCP/wEF7a+ZLl8NEB\nbV7CSpP082oI8QRd5ogk8AhvoEojF1f7OQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEKB43Jq92qanq6XFxKhyo+II8QRd5ogk\n8Ah3773BhoPpLACD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ/AQ2pdTJTseDDn68IOWboyakQjxBF3miCTwCIVnAeQL\nebkOAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdh\nbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 275c10c7a62f55d7053d5c39bd2eb8020c86dc0f\nparent 1705f1949a14fb1d5213b44b4787bee07681526f\nparent 70ed2ab7ef9e7ebf56f77b7c410a345ff455938f\nauthor MarcoFalke <falke.marco@gmail.com> 1575389216 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575389219 -0500\n\nMerge #17641: Add unit test for leveldb creation with unicode path\n\n70ed2ab7ef9e7ebf56f77b7c410a345ff455938f Add unit test for DB creation with unicode path (Aaron Clauson)\n\nPull request description:\n\n  An issue arose when attempting to switch back to the main repo version of leveldb when the bitcoin data directory uses a unicode path. The leveldb windows file IO wrapper was using the *A ANSI win32 calls instead of the Unicode *W ones. This unit test will catch if the path created by leveldb doesn't match what we're expecting. For more info see https://github.com/google/leveldb/issues/755.\n\nACKs for top commit:\n  laanwj:\n    ACK 70ed2ab7ef9e7ebf56f77b7c410a345ff455938f\n\nTree-SHA512: fc6dbd3aa26a439016e63e8d4d931f218ce99094fc7887a13b54562ad4133047020288ecbcd622a8309f422ee1eda5df50bcb8c8e44442af36ed57b22c069004\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fdaa04cebaac61a1106ed52a35486039413a0cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fdaa04cebaac61a1106ed52a35486039413a0cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fdaa04cebaac61a1106ed52a35486039413a0cb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1705f1949a14fb1d5213b44b4787bee07681526f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1705f1949a14fb1d5213b44b4787bee07681526f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1705f1949a14fb1d5213b44b4787bee07681526f"
      },
      {
        "sha": "70ed2ab7ef9e7ebf56f77b7c410a345ff455938f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ed2ab7ef9e7ebf56f77b7c410a345ff455938f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70ed2ab7ef9e7ebf56f77b7c410a345ff455938f"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b647c0f70b3abf3b6d89146658eee7ab6d6eff88",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fdaa04cebaac61a1106ed52a35486039413a0cb/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fdaa04cebaac61a1106ed52a35486039413a0cb/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=1fdaa04cebaac61a1106ed52a35486039413a0cb",
        "patch": "@@ -397,6 +397,18 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(unicodepath)\n+{\n+    // Attempt to create a database with a utf8 character in the path.\n+    // On Windows this test will fail if the directory is created using\n+    // the ANSI CreateDirectoryA  call and the code page isn't UTF8.\n+    // It will succeed if the created with  CreateDirectoryW.\n+    fs::path ph = GetDataDir() / \"test_runner_\u20bf_\ud83c\udfc3_20191128_104644\";\n+    CDBWrapper dbw(ph, (1 << 20));\n+\n+    fs::path lockPath = ph / \"LOCK\";\n+    BOOST_CHECK(boost::filesystem::exists(lockPath));\n+}\n \n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "54b12e425b502e7777e6910117b4527ab4ead0ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGIxMmU0MjViNTAyZTc3NzdlNjkxMDExN2I0NTI3YWI0ZWFkMGZm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-03T18:22:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-03T18:22:36Z"
      },
      "message": "Merge #17555: test: add unit test for non-standard txs with wrong nVersion\n\n76303f65f92a0fbe9a90c0e807554a6daa860636 test: add unit test for non-standard txs with wrong nVersion (Dominik Spicher)\n\nPull request description:\n\n  Takes care of one of the missing cases of #17394: nVersion must be within the allowed range.\n\nACKs for top commit:\n  instagibbs:\n    ACK https://github.com/bitcoin/bitcoin/pull/17555/commits/76303f65f92a0fbe9a90c0e807554a6daa860636\n\nTree-SHA512: 94464f781cf70a5616f7cea2014ae0a97a338c34411cc989c60389de2ce00368374811db78c919bda30e0ebf341fb830998a5e97c124dd8afc8feb726cedfd3a",
      "tree": {
        "sha": "ec4f2950722b431e0c1f3cc1fdd7dbaf8cca5661",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec4f2950722b431e0c1f3cc1fdd7dbaf8cca5661"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54b12e425b502e7777e6910117b4527ab4ead0ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYLC4pAL7OGskoDms0upIUOdSiyUFAl3mp+wACgkQ0upIUOdS\niyVbkw//ZNJtBhwvMSMqCR6Amr5GOLurUtuN3Enzlu7AOEExrZKLBBTxQdgsGXB2\n75xmIILeSuGtJcA4pyrdyOdtNP0lKgFXOSK4xBnbINd2GKI2GQRUHC/mZI2FpRbx\n0TQaPMXz4idDDbEDYm02CzWZb00bJALpq2shhGEvxgBJxzWAbKgA0Qr5cbGu2pK6\nwAfJmTd4v+We4kZ/iupJ3Rr6BQqlGwEqNGfI9/AGdS9/UevDTFV0NGtb9/Qt77WX\nmeo2IzHfpmIETPPqlFemCvoCiQSYMz4uOWTVS9f8LY9oNUKH769HRPiHgbt/Z5Jy\nepIQqY3SdXCDbbNS6xxWPl90ONSqyh4GVqluh9obrP6VjGyNCkE8raV9kFPursjc\n4vwbBwW7OcqjgrnvSbIXTvg3wblLLRlyhVnu34pCtWBoXRb/2N55aRSDq88+32m/\nRb5oVAzHkVv3HEzR07QJjid0tkbfQmlKUwHAlep0FXAJS0bifMVXLx/yn/fLZAV1\nnCtH8os8uPfGi/91ZzynO289HIhgpZcsbHlI/+hh6daVZklC6iJmijaCOiKR1145\n3KoLLBnYGkKFoBmCDai6COQqXVLsEPECraKjC2b+RUJPvyNrJ2Pc+SWNnmm3iQ1u\nm7vIkyhGtbsi6KlomXHYagXsaeuUvMmyNH71XuMg+L5D7T8dDdY=\n=7aab\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIPVg4S95NZfh5/bSf3kdfodLfvTVsKNQRSJILntTpevRCP/wEAcZgwGZS+tC\n9LdT20QT770I8QRd5qfv8AjUMC8jh+1aNgCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEFXlMRMjzBPjZ0536QJO\nxC4I8QRd5qfu8Ahs9T3p91+EmACD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbfAQaTKi8IwXRm3o3u/nSD/LqgjxBF3mp+/wCNxtKT4a\nH8UuAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdh\nbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree ec4f2950722b431e0c1f3cc1fdd7dbaf8cca5661\nparent 1fdaa04cebaac61a1106ed52a35486039413a0cb\nparent 76303f65f92a0fbe9a90c0e807554a6daa860636\nauthor MarcoFalke <falke.marco@gmail.com> 1575397351 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575397356 -0500\n\nMerge #17555: test: add unit test for non-standard txs with wrong nVersion\n\n76303f65f92a0fbe9a90c0e807554a6daa860636 test: add unit test for non-standard txs with wrong nVersion (Dominik Spicher)\n\nPull request description:\n\n  Takes care of one of the missing cases of #17394: nVersion must be within the allowed range.\n\nACKs for top commit:\n  instagibbs:\n    ACK https://github.com/bitcoin/bitcoin/pull/17555/commits/76303f65f92a0fbe9a90c0e807554a6daa860636\n\nTree-SHA512: 94464f781cf70a5616f7cea2014ae0a97a338c34411cc989c60389de2ce00368374811db78c919bda30e0ebf341fb830998a5e97c124dd8afc8feb726cedfd3a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54b12e425b502e7777e6910117b4527ab4ead0ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54b12e425b502e7777e6910117b4527ab4ead0ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54b12e425b502e7777e6910117b4527ab4ead0ff/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fdaa04cebaac61a1106ed52a35486039413a0cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fdaa04cebaac61a1106ed52a35486039413a0cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fdaa04cebaac61a1106ed52a35486039413a0cb"
      },
      {
        "sha": "76303f65f92a0fbe9a90c0e807554a6daa860636",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76303f65f92a0fbe9a90c0e807554a6daa860636",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76303f65f92a0fbe9a90c0e807554a6daa860636"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2f7a3132d8ed8393fad3a0e9434baf0d64351407",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54b12e425b502e7777e6910117b4527ab4ead0ff/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54b12e425b502e7777e6910117b4527ab4ead0ff/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=54b12e425b502e7777e6910117b4527ab4ead0ff",
        "patch": "@@ -713,6 +713,29 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].nValue = nDustThreshold;\n     BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n \n+    // Disallowed nVersion\n+    t.nVersion = -1;\n+    reason.clear();\n+    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n+    BOOST_CHECK_EQUAL(reason, \"version\");\n+\n+    t.nVersion = 0;\n+    reason.clear();\n+    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n+    BOOST_CHECK_EQUAL(reason, \"version\");\n+\n+    t.nVersion = 3;\n+    reason.clear();\n+    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n+    BOOST_CHECK_EQUAL(reason, \"version\");\n+\n+    // Allowed nVersion\n+    t.nVersion = 1;\n+    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+\n+    t.nVersion = 2;\n+    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+\n     // Check dust with odd relay fee to verify rounding:\n     // nDustThreshold = 182 * 3702 / 1000\n     dustRelayFee = CFeeRate(3702);"
      }
    ]
  },
  {
    "sha": "e354db787790b84b0b3f34cc55b65446c71e4fa2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzU0ZGI3ODc3OTBiODRiMGIzZjM0Y2M1NWI2NTQ0NmM3MWU0ZmEy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-03T18:41:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-03T18:41:56Z"
      },
      "message": "Merge #17637: script: Add Keyserver to verify-commits README\n\nbd6a24307564a56d54d98331d5e1680d27ddc09e script: Add Keyserver to verify-commits README (Emil Engler)\n\nPull request description:\n\n  When I use the option with the default keyserver on `gpg (GnuPG) 2.2.12` from the Debian repositories only the keys from meshcollider and fanquake are actually found. Using the ubuntu keyserver works without any problems and all keys are getting found.\n  As this keyserver is also suggested on [https://bitcoincore.org/en/download/](), it would be good to have a common keyserver.\n\nACKs for top commit:\n  laanwj:\n    ACK bd6a24307564a56d54d98331d5e1680d27ddc09e, better to be explicit here\n\nTree-SHA512: d4127c42490390bed4e0074ebb1f8a6cc983f96bbea0ec1da011a93bed325a7f465ed9936e4bc2ef7c4b2e4501a2868d00b67ceb7bf85f2a902db9c6173a6c61",
      "tree": {
        "sha": "b26b50a138893ce3991d6ba054d6ae44ddb558a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b26b50a138893ce3991d6ba054d6ae44ddb558a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e354db787790b84b0b3f34cc55b65446c71e4fa2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYLC4pAL7OGskoDms0upIUOdSiyUFAl3mrHQACgkQ0upIUOdS\niyWsrw/+OeA/KWr0yTb0dvCaj6L0aR6IWPNnzgotbd+EstXtp8MPPPYDmUqILGN4\nLOFW5/kAYcAB7bI0nwZL4RCZVGpdJVl9y7j7iSWZRFdeOVJvviChpWkgvnVFEV7W\ndMXaKfy7r6uZXLnlg/VTmbGuE50VA6JzGL0G+e9BoPaiMwJr8Z4p2hrMvMta0usl\nOA8bJxkYtFsQtllT8b94JR+p10bMyYbeBuH47Id64WWEjvvNml9ibJV9e8it9HGv\n5UiDDwdqFOUbc/DH8DE9oAV7MKQUv6UUGLj4Z6mdS5SPlpPdNjFdHOghV0eGMwUA\nbmZ6rfYopvfia1K8Hpz7TtKAkJZXwLkhFg0nUuyH7oXXXakuC3wNN8zji7wfFLE0\nucF3PhQYA76CZqZFMzWmZm6eBjCKVbloPXC2T8LlN1QQtABaFJd799jbfDrVOldv\n0dicikUlKASmrTUbI35v9ayngKidZIWEMpWVLBspK5yvyz1IUTXzk3owyCtinMAT\nhPyg+fLzLJuBAVkeOGH5eFiR0F894xpE0fvgDtQ2RK0L9ITCwIIO1sXawbRPyf/o\ntktAICnkmih6gU0TfligC76PUt3XPD68gAHJl3pFfIhWLrB5R83webBMXsyGexNT\nqK57WhHYusk8mmJGgKCTjpv+qsRnlKYv61C+FELdvKJMcui9YGQ=\n=wRn3\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIJXG1denjguODAg0fE3i+1LUvmmqCzEnOnHUazo8v7KPCP/wEFO2iFzoh544\nq/RRXkeri1MI8QRd5qx38AhEl+4BeoyvfACD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEIgWcA8tOAKOfX/oAmQh\n6ykI8QRd5qx38AjDck17Zg4jggCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbfAQioKwrYTOrK8kCvc/qnIdjQjwIKoGKYsSKRaWUxIu\nTQokfIsZX3DanwJa32FYnEp8MDo0CPEEXeasePAIdbY1rRx0YXkAg9/jDS75DI4p\nKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree b26b50a138893ce3991d6ba054d6ae44ddb558a5\nparent 54b12e425b502e7777e6910117b4527ab4ead0ff\nparent bd6a24307564a56d54d98331d5e1680d27ddc09e\nauthor MarcoFalke <falke.marco@gmail.com> 1575398510 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575398516 -0500\n\nMerge #17637: script: Add Keyserver to verify-commits README\n\nbd6a24307564a56d54d98331d5e1680d27ddc09e script: Add Keyserver to verify-commits README (Emil Engler)\n\nPull request description:\n\n  When I use the option with the default keyserver on `gpg (GnuPG) 2.2.12` from the Debian repositories only the keys from meshcollider and fanquake are actually found. Using the ubuntu keyserver works without any problems and all keys are getting found.\n  As this keyserver is also suggested on [https://bitcoincore.org/en/download/](), it would be good to have a common keyserver.\n\nACKs for top commit:\n  laanwj:\n    ACK bd6a24307564a56d54d98331d5e1680d27ddc09e, better to be explicit here\n\nTree-SHA512: d4127c42490390bed4e0074ebb1f8a6cc983f96bbea0ec1da011a93bed325a7f465ed9936e4bc2ef7c4b2e4501a2868d00b67ceb7bf85f2a902db9c6173a6c61\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e354db787790b84b0b3f34cc55b65446c71e4fa2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e354db787790b84b0b3f34cc55b65446c71e4fa2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e354db787790b84b0b3f34cc55b65446c71e4fa2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54b12e425b502e7777e6910117b4527ab4ead0ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54b12e425b502e7777e6910117b4527ab4ead0ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54b12e425b502e7777e6910117b4527ab4ead0ff"
      },
      {
        "sha": "bd6a24307564a56d54d98331d5e1680d27ddc09e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd6a24307564a56d54d98331d5e1680d27ddc09e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd6a24307564a56d54d98331d5e1680d27ddc09e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e95a57586ff1c34fef56f4d851934f0d881bbd8c",
        "filename": "contrib/verify-commits/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e354db787790b84b0b3f34cc55b65446c71e4fa2/contrib/verify-commits/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e354db787790b84b0b3f34cc55b65446c71e4fa2/contrib/verify-commits/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/README.md?ref=e354db787790b84b0b3f34cc55b65446c71e4fa2",
        "patch": "@@ -40,7 +40,7 @@ Import trusted keys\n In order to check the commit signatures, you must add the trusted PGP keys to your machine. [GnuPG](https://gnupg.org/) may be used to import the trusted keys by running the following command:\n \n ```sh\n-gpg --recv-keys $(<contrib/verify-commits/trusted-keys)\n+gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys $(<contrib/verify-commits/trusted-keys)\n ```\n \n Key expiry/revocation"
      }
    ]
  },
  {
    "sha": "c8becb82805ed1483e009eba682f19fe9e8b8c9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGJlY2I4MjgwNWVkMTQ4M2UwMDllYmE2ODJmMTlmZTllOGI4Yzlj",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-03T20:15:52Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-03T20:16:04Z"
      },
      "message": "depends: add ability to skip building qrencode",
      "tree": {
        "sha": "0abd3e9df86904d0b7ed645d24a2571ff6c57e89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0abd3e9df86904d0b7ed645d24a2571ff6c57e89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8becb82805ed1483e009eba682f19fe9e8b8c9c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3mwoQACgkQLuufXMCV\nJsH6pA/+NJ9kD5yX3pA0Cx/BpGs8pNlDI3/FWMlvPfMU0KQ7kOeULLnG9ep6xTic\n0LINQ0j3bE1niC5uIghS6LaregMb824BR0jKzK/52Qp6XE+z4EXp9cz4FbvAUF6U\n1L2i5hWtizw4YW5IvvIhZ1OX5D2kcApyF8k39lI1WvQgxmzl8LWb7BaGIJie7t7S\nQSXwi3yMnWDqm2FalohPZbxNelhTbTBAEghkYQO1+xbEMAmEB7YcEI8V9W+D+2bV\nUCc9yk2XQ0D18XHpJJbS6E1DgqqFbJpfO3rQ46mdtPSidMTjI48K60piH1oLtF+j\nPSJOKbNL2F5h/LaiMrNjgjvyL4ymlx5Vx3Cdf4Q9UINJ5QKdtXBPAg0O7M/RsF+d\n2eC9ZtkpHcUVK/XcMBl2yvm+CaeSJYuRemZ3dT1ESnnVfSJTIXVLwQjwUcgipokQ\ny0NwWqPZBQrxC3sCGCf5itTXrkjcjVjY/lrQU0H8G5FJPQGaphSVrK1fAYlMKSZy\nc/qp0ugIeqfwdqZqiq1AXVewHcR4E6uF+OMmilQsh9OGJ9ogcC3sJtdszxj+xRfi\n8U3TnkWrEJj1I4s8A77n6jJjmBZYAha5uleWVJ06KDwS2MiH6k/kxioI+Pqw9b8m\nozSVwFPWYLdGbKKsKfNbpsXr8J4swEjIrSbo9Jc9sObRGx7MBzM=\n=tE1G\n-----END PGP SIGNATURE-----",
        "payload": "tree 0abd3e9df86904d0b7ed645d24a2571ff6c57e89\nparent e354db787790b84b0b3f34cc55b65446c71e4fa2\nauthor fanquake <fanquake@gmail.com> 1575404152 -0500\ncommitter fanquake <fanquake@gmail.com> 1575404164 -0500\n\ndepends: add ability to skip building qrencode\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8becb82805ed1483e009eba682f19fe9e8b8c9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8becb82805ed1483e009eba682f19fe9e8b8c9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8becb82805ed1483e009eba682f19fe9e8b8c9c/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e354db787790b84b0b3f34cc55b65446c71e4fa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e354db787790b84b0b3f34cc55b65446c71e4fa2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e354db787790b84b0b3f34cc55b65446c71e4fa2"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8706e013f97dbe946e73e987f3909eddbce22b71",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8becb82805ed1483e009eba682f19fe9e8b8c9c/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8becb82805ed1483e009eba682f19fe9e8b8c9c/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=c8becb82805ed1483e009eba682f19fe9e8b8c9c",
        "patch": "@@ -9,6 +9,7 @@ WORK_PATH = $(BASEDIR)/work\n BASE_CACHE ?= $(BASEDIR)/built\n SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n+NO_QR ?=\n RAPIDCHECK ?=\n NO_WALLET ?=\n NO_ZMQ ?=\n@@ -100,7 +101,10 @@ $(host_arch)_$(host_os)_id_string+=$(shell $(host_CXX) --version 2>/dev/null)\n $(host_arch)_$(host_os)_id_string+=$(shell $(host_RANLIB) --version 2>/dev/null)\n $(host_arch)_$(host_os)_id_string+=$(shell $(host_STRIP) --version 2>/dev/null)\n \n-qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch)_$(host_os)_packages)\n+qrencode_packages_$(NO_QR) = $(qrencode_packages)\n+\n+qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch)_$(host_os)_packages) $(qrencode_packages_)\n+\n wallet_packages_$(NO_WALLET) = $(wallet_packages)\n upnp_packages_$(NO_UPNP) = $(upnp_packages)\n zmq_packages_$(NO_ZMQ) = $(zmq_packages)\n@@ -154,6 +158,7 @@ $(host_prefix)/share/config.site : config.site.in $(host_prefix)/.stamp_$(final_\n             -e 's|@LDFLAGS@|$(strip $(host_LDFLAGS) $(host_$(release_type)_LDFLAGS))|' \\\n             -e 's|@allow_host_packages@|$(ALLOW_HOST_PACKAGES)|' \\\n             -e 's|@no_qt@|$(NO_QT)|' \\\n+            -e 's|@no_qr@|$(NO_QR)|' \\\n             -e 's|@no_zmq@|$(NO_ZMQ)|' \\\n             -e 's|@no_wallet@|$(NO_WALLET)|' \\\n             -e 's|@no_upnp@|$(NO_UPNP)|' \\"
      },
      {
        "sha": "e382e8a2006e9954185eed3fb299079fee507197",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8becb82805ed1483e009eba682f19fe9e8b8c9c/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8becb82805ed1483e009eba682f19fe9e8b8c9c/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=c8becb82805ed1483e009eba682f19fe9e8b8c9c",
        "patch": "@@ -76,6 +76,7 @@ The following can be set when running make: make FOO=bar\n     SDK_PATH: Path where sdk's can be found (used by macOS)\n     FALLBACK_DOWNLOAD_PATH: If a source file can't be fetched, try here before giving up\n     NO_QT: Don't download/build/cache qt and its dependencies\n+    NO_QR: Don't download/build/cache packages needed for enabling qrencode\n     NO_ZMQ: Don't download/build/cache packages needed for enabling zeromq\n     NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n     NO_UPNP: Don't download/build/cache packages needed for enabling upnp"
      },
      {
        "sha": "c5731e5269a7f87784e0e01fd893eaf5dc996bba",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8becb82805ed1483e009eba682f19fe9e8b8c9c/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8becb82805ed1483e009eba682f19fe9e8b8c9c/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=c8becb82805ed1483e009eba682f19fe9e8b8c9c",
        "patch": "@@ -17,6 +17,10 @@ if test -z $with_qt_bindir && test -z \"@no_qt@\"; then\n   with_qt_bindir=$depends_prefix/native/bin\n fi\n \n+if test -z $with_qrencode && test -n \"@no_qr@\"; then\n+  with_qrencode=no\n+fi\n+\n if test -z $enable_wallet && test -n \"@no_wallet@\"; then\n   enable_wallet=no\n fi"
      },
      {
        "sha": "d8ccb208ccd013e2f00eadb51be95ff0d86fcbc8",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8becb82805ed1483e009eba682f19fe9e8b8c9c/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8becb82805ed1483e009eba682f19fe9e8b8c9c/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=c8becb82805ed1483e009eba682f19fe9e8b8c9c",
        "patch": "@@ -1,6 +1,8 @@\n packages:=boost libevent\n \n-qt_packages = qrencode zlib\n+qt_packages = zlib\n+\n+qrencode_packages = qrencode\n \n qt_linux_packages:=qt expat libxcb xcb_proto libXau xproto freetype fontconfig\n qt_android_packages=qt"
      }
    ]
  },
  {
    "sha": "bce44089db27e2b21a3dc2954b170ecf0d6d998e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2U0NDA4OWRiMjdlMmIyMWEzZGMyOTU0YjE3MGVjZjBkNmQ5OThl",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-03T21:15:14Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-03T21:35:50Z"
      },
      "message": "Merge #17547: build: Fix configure report about qr\n\n651c636f9ed4a60c4cd003e566e3ac6ae6eda3ed build: Fix configure report about qr (Hennadii Stepanov)\n\nPull request description:\n\n  On master (b7bc9b8330096d1f4f1fa563b855b88da425226e):\n  ```\n  $ apt list libqrencode-dev\n  Listing... Done\n  libqrencode-dev/bionic 3.4.4-1build1 amd64\n  $ ./configure | grep -i qr\n  checking for QR... no\n  checking whether to build GUI with support for QR codes... no\n      with qr     = auto\n  ```\n\n  With this PR:\n  ```\n  $ apt list libqrencode-dev\n  Listing... Done\n  libqrencode-dev/bionic 3.4.4-1build1 amd64\n  $ ./configure | grep -i qr\n  checking for QR... no\n  checking whether to build GUI with support for QR codes... no\n      with qr     = no\n  ```\n\nACKs for top commit:\n  laanwj:\n    Concept and light code review ACK 651c636f9ed4a60c4cd003e566e3ac6ae6eda3ed\n  fanquake:\n    ACK 651c636f9ed4a60c4cd003e566e3ac6ae6eda3ed\n\nTree-SHA512: 8959b1c7da5b28d06affcdd27ff4e455f1f7d9c8363dbde8ef07aaf79139ec8bc7ce25610b28e1d90c7e168573ee90ac9ab359bf10c667d0254507f8a880a935",
      "tree": {
        "sha": "1a8fdf1a9f1e3c3e818061079a4c50c5f892af76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a8fdf1a9f1e3c3e818061079a4c50c5f892af76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bce44089db27e2b21a3dc2954b170ecf0d6d998e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3m1TYACgkQLuufXMCV\nJsEplQ/+PfdkGmyC1nbLfqSbuqoFczOc0lKN8b3oyfKIgriOZpOJlBVGaRRf4WRC\nnQBRyGPDtcesyjRibb4k2XeYfBaWQEUTFAxXSULLHDYF9CGtAnAvk05FYY8qwxYR\n/32wlSGWMnouB4Xbc1/TPUlWP+958k2d9UD8byaJIn3D+zk/fmjtF/8mgEXCnSFj\nVqWJWP4a2uZNi2qWGKYRExjQnJMJv/Zl/yJYRRWLEky2orRRPDSge0K6JufcX9M5\nmSexjJTR4H80RdG8SkIa7lyKsiwadH1Kcb/GRjQUamvMuZMSZOTHAsYPar8kLx62\nDlcJsCS8gFE/9idtDNuB27bUo+1MxduSqB3HNcGwoEILxWOSkP0fwapbsIrqGzHj\nb1gPMwO4C3zse6L4uYDtXQ5PuypQ+3trLtI3/bQiNQSCUPsaFlV5v5b13gkvwNiE\npv7eI+jTYMxem7NjutEirE73WVz6lJIqo8D3QftPpQJ578Np82rCK6ZXRHt/0piZ\nTUW6n3axV74Y9o/eoch8aIw4D6CfHn0pa/THqTeIGijqtEZmc2M669kTmEsX0ItP\nGayBOU+yBwWQOb1gBLMuzv/+IHKyOZ1oq5lK0w3ZTdsDDeEFPwk+Zki/Fo8kgLK3\n+GOP6Z5Ou9vi0gmHGLLOVq7rssqfR083pdCL3mqCnZYdEyDiUUU=\n=pxia\n-----END PGP SIGNATURE-----",
        "payload": "tree 1a8fdf1a9f1e3c3e818061079a4c50c5f892af76\nparent e354db787790b84b0b3f34cc55b65446c71e4fa2\nparent 651c636f9ed4a60c4cd003e566e3ac6ae6eda3ed\nauthor fanquake <fanquake@gmail.com> 1575407714 -0500\ncommitter fanquake <fanquake@gmail.com> 1575408950 -0500\n\nMerge #17547: build: Fix configure report about qr\n\n651c636f9ed4a60c4cd003e566e3ac6ae6eda3ed build: Fix configure report about qr (Hennadii Stepanov)\n\nPull request description:\n\n  On master (b7bc9b8330096d1f4f1fa563b855b88da425226e):\n  ```\n  $ apt list libqrencode-dev\n  Listing... Done\n  libqrencode-dev/bionic 3.4.4-1build1 amd64\n  $ ./configure | grep -i qr\n  checking for QR... no\n  checking whether to build GUI with support for QR codes... no\n      with qr     = auto\n  ```\n\n  With this PR:\n  ```\n  $ apt list libqrencode-dev\n  Listing... Done\n  libqrencode-dev/bionic 3.4.4-1build1 amd64\n  $ ./configure | grep -i qr\n  checking for QR... no\n  checking whether to build GUI with support for QR codes... no\n      with qr     = no\n  ```\n\nACKs for top commit:\n  laanwj:\n    Concept and light code review ACK 651c636f9ed4a60c4cd003e566e3ac6ae6eda3ed\n  fanquake:\n    ACK 651c636f9ed4a60c4cd003e566e3ac6ae6eda3ed\n\nTree-SHA512: 8959b1c7da5b28d06affcdd27ff4e455f1f7d9c8363dbde8ef07aaf79139ec8bc7ce25610b28e1d90c7e168573ee90ac9ab359bf10c667d0254507f8a880a935\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bce44089db27e2b21a3dc2954b170ecf0d6d998e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bce44089db27e2b21a3dc2954b170ecf0d6d998e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bce44089db27e2b21a3dc2954b170ecf0d6d998e/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e354db787790b84b0b3f34cc55b65446c71e4fa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e354db787790b84b0b3f34cc55b65446c71e4fa2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e354db787790b84b0b3f34cc55b65446c71e4fa2"
      },
      {
        "sha": "651c636f9ed4a60c4cd003e566e3ac6ae6eda3ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/651c636f9ed4a60c4cd003e566e3ac6ae6eda3ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/651c636f9ed4a60c4cd003e566e3ac6ae6eda3ed"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ed9ccade6d73c2751d63609ac9ce4ca015f8bd1e",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bce44089db27e2b21a3dc2954b170ecf0d6d998e/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bce44089db27e2b21a3dc2954b170ecf0d6d998e/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=bce44089db27e2b21a3dc2954b170ecf0d6d998e",
        "patch": "@@ -1471,18 +1471,16 @@ if test x$bitcoin_enable_qt != xno; then\n   AC_MSG_CHECKING([whether to build GUI with support for QR codes])\n   if test x$have_qrencode = xno; then\n     if test x$use_qr = xyes; then\n-     AC_MSG_ERROR(\"QR support requested but cannot be built. use --without-qrencode\")\n+      AC_MSG_ERROR([QR support requested but cannot be built. Use --without-qrencode])\n     fi\n-    AC_MSG_RESULT(no)\n+    use_qr=no\n   else\n     if test x$use_qr != xno; then\n-      AC_MSG_RESULT(yes)\n       AC_DEFINE([USE_QRCODE],[1],[Define if QR support should be compiled in])\n       use_qr=yes\n-    else\n-      AC_MSG_RESULT(no)\n     fi\n   fi\n+  AC_MSG_RESULT([$use_qr])\n \n   if test x$XGETTEXT = x; then\n     AC_MSG_WARN(\"xgettext is required to update qt translations\")"
      }
    ]
  },
  {
    "sha": "bd44711e1bb2eee7646f2f8e2e8763d1c216bdb9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDQ0NzExZTFiYjJlZWU3NjQ2ZjJmOGUyZTg3NjNkMWMyMTZiZGI5",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-03T22:45:55Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-03T22:50:30Z"
      },
      "message": "build: pass -dead_strip_dylibs to ld on macOS\n\nThis strips some unused dylibs from bitcoin-qt.\n\nFrom man ld:\nRemove dylibs that are unreachable by the entry point or exported symbols. \nThat is, suppresses the generation of load command commands for dylibs \nwhich supplied no symbols during the link. This option should not be \nused when linking against a dylib which is required at runtime for \nsome indirect reason such as the dylib has an important initializer.",
      "tree": {
        "sha": "5214d8440832a00c76b7505878885c24d37fd0ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5214d8440832a00c76b7505878885c24d37fd0ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd44711e1bb2eee7646f2f8e2e8763d1c216bdb9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd44711e1bb2eee7646f2f8e2e8763d1c216bdb9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd44711e1bb2eee7646f2f8e2e8763d1c216bdb9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd44711e1bb2eee7646f2f8e2e8763d1c216bdb9/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e354db787790b84b0b3f34cc55b65446c71e4fa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e354db787790b84b0b3f34cc55b65446c71e4fa2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e354db787790b84b0b3f34cc55b65446c71e4fa2"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "62b70bcb0767fbcf656e5b9ec92f9b69506178b6",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd44711e1bb2eee7646f2f8e2e8763d1c216bdb9/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd44711e1bb2eee7646f2f8e2e8763d1c216bdb9/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=bd44711e1bb2eee7646f2f8e2e8763d1c216bdb9",
        "patch": "@@ -783,6 +783,7 @@ fi\n dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip_dylibs]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip_dylibs\"])\n fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])"
      }
    ]
  },
  {
    "sha": "01c87015597021bf1c0856f7f6be175bdde844b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWM4NzAxNTU5NzAyMWJmMWMwODU2ZjdmNmJlMTc1YmRkZTg0NGIy",
    "commit": {
      "author": {
        "name": "malevolent",
        "email": "malevolentbtc@gmail.com",
        "date": "2019-12-04T06:48:53Z"
      },
      "committer": {
        "name": "malevolent",
        "email": "malevolentbtc@gmail.com",
        "date": "2019-12-04T06:48:53Z"
      },
      "message": "util: remove unwanted fields from bitcoin-cli -getinfo\n\nIn accordance with #17314, Removing noisy fields from -getinfo. Fields removed: protocolversion, walletversion and keypoololdest. In addition to changing bitcoin-cli -getinfo, there is another change to test/functional/interface_bitcoin_cli.py. This change deletes tests that utilize removed -getinfo calls.",
      "tree": {
        "sha": "31db706003e820391916be104c5b5db9fa56579d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31db706003e820391916be104c5b5db9fa56579d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01c87015597021bf1c0856f7f6be175bdde844b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01c87015597021bf1c0856f7f6be175bdde844b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01c87015597021bf1c0856f7f6be175bdde844b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01c87015597021bf1c0856f7f6be175bdde844b2/comments",
    "author": {
      "login": "malevolent",
      "id": 52677772,
      "node_id": "MDQ6VXNlcjUyNjc3Nzcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/52677772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/malevolent",
      "html_url": "https://github.com/malevolent",
      "followers_url": "https://api.github.com/users/malevolent/followers",
      "following_url": "https://api.github.com/users/malevolent/following{/other_user}",
      "gists_url": "https://api.github.com/users/malevolent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/malevolent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/malevolent/subscriptions",
      "organizations_url": "https://api.github.com/users/malevolent/orgs",
      "repos_url": "https://api.github.com/users/malevolent/repos",
      "events_url": "https://api.github.com/users/malevolent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/malevolent/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "malevolent",
      "id": 52677772,
      "node_id": "MDQ6VXNlcjUyNjc3Nzcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/52677772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/malevolent",
      "html_url": "https://github.com/malevolent",
      "followers_url": "https://api.github.com/users/malevolent/followers",
      "following_url": "https://api.github.com/users/malevolent/following{/other_user}",
      "gists_url": "https://api.github.com/users/malevolent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/malevolent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/malevolent/subscriptions",
      "organizations_url": "https://api.github.com/users/malevolent/orgs",
      "repos_url": "https://api.github.com/users/malevolent/repos",
      "events_url": "https://api.github.com/users/malevolent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/malevolent/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b90dad5143993d266cdfeece898164d648bbbd78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b90dad5143993d266cdfeece898164d648bbbd78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b90dad5143993d266cdfeece898164d648bbbd78"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 0,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1035e730b8071e7e92becb6811f830ed9bd40ff0",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01c87015597021bf1c0856f7f6be175bdde844b2/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01c87015597021bf1c0856f7f6be175bdde844b2/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=01c87015597021bf1c0856f7f6be175bdde844b2",
        "patch": "@@ -256,7 +256,6 @@ class GetinfoRequestHandler: public BaseRequestHandler\n             return batch[ID_BLOCKCHAININFO];\n         }\n         result.pushKV(\"version\", batch[ID_NETWORKINFO][\"result\"][\"version\"]);\n-        result.pushKV(\"protocolversion\", batch[ID_NETWORKINFO][\"result\"][\"protocolversion\"]);\n         result.pushKV(\"blocks\", batch[ID_BLOCKCHAININFO][\"result\"][\"blocks\"]);\n         result.pushKV(\"headers\", batch[ID_BLOCKCHAININFO][\"result\"][\"headers\"]);\n         result.pushKV(\"verificationprogress\", batch[ID_BLOCKCHAININFO][\"result\"][\"verificationprogress\"]);\n@@ -266,9 +265,7 @@ class GetinfoRequestHandler: public BaseRequestHandler\n         result.pushKV(\"difficulty\", batch[ID_BLOCKCHAININFO][\"result\"][\"difficulty\"]);\n         result.pushKV(\"chain\", UniValue(batch[ID_BLOCKCHAININFO][\"result\"][\"chain\"]));\n         if (!batch[ID_WALLETINFO][\"result\"].isNull()) {\n-            result.pushKV(\"walletversion\", batch[ID_WALLETINFO][\"result\"][\"walletversion\"]);\n             result.pushKV(\"balance\", batch[ID_WALLETINFO][\"result\"][\"balance\"]);\n-            result.pushKV(\"keypoololdest\", batch[ID_WALLETINFO][\"result\"][\"keypoololdest\"]);\n             result.pushKV(\"keypoolsize\", batch[ID_WALLETINFO][\"result\"][\"keypoolsize\"]);\n             if (!batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"].isNull()) {\n                 result.pushKV(\"unlocked_until\", batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"]);"
      },
      {
        "sha": "373a2bdee0d611a5a2511b223502cc121f6a4852",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01c87015597021bf1c0856f7f6be175bdde844b2/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01c87015597021bf1c0856f7f6be175bdde844b2/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=01c87015597021bf1c0856f7f6be175bdde844b2",
        "patch": "@@ -56,17 +56,14 @@ def run_test(self):\n         blockchain_info = self.nodes[0].getblockchaininfo()\n \n         assert_equal(cli_get_info['version'], network_info['version'])\n-        assert_equal(cli_get_info['protocolversion'], network_info['protocolversion'])\n         assert_equal(cli_get_info['blocks'], blockchain_info['blocks'])\n         assert_equal(cli_get_info['timeoffset'], network_info['timeoffset'])\n         assert_equal(cli_get_info['connections'], network_info['connections'])\n         assert_equal(cli_get_info['proxy'], network_info['networks'][0]['proxy'])\n         assert_equal(cli_get_info['difficulty'], blockchain_info['difficulty'])\n         assert_equal(cli_get_info['chain'], blockchain_info['chain'])\n         if self.is_wallet_compiled():\n-            assert_equal(cli_get_info['walletversion'], wallet_info['walletversion'])\n             assert_equal(cli_get_info['balance'], wallet_info['balance'])\n-            assert_equal(cli_get_info['keypoololdest'], wallet_info['keypoololdest'])\n             assert_equal(cli_get_info['keypoolsize'], wallet_info['keypoolsize'])\n             assert_equal(cli_get_info['paytxfee'], wallet_info['paytxfee'])\n             assert_equal(cli_get_info['relayfee'], network_info['relayfee'])"
      }
    ]
  },
  {
    "sha": "dcbe024f5e6508ec3525babc0eb252d6b761e4d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2JlMDI0ZjVlNjUwOGVjMzUyNWJhYmMwZWIyNTJkNmI3NjFlNGQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-04T09:55:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-04T10:00:40Z"
      },
      "message": "Merge #17648: doc: rename wallet-tool references to bitcoin-wallet\n\ne7ad4a2f8c07a82d6424b473f0d51dbd8f897b10 doc: rename wallet-tool references to bitcoin-wallet (Wilson Ccasihue S)\n\nPull request description:\n\n  Fix. text reference to executable bitcoin-wallet instead of wallet-tool, there is not a wallet-tool at bin/ folder.\n\nACKs for top commit:\n  fanquake:\n    ACK e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10 - thanks for following up.\n\nTree-SHA512: aed41b08947728a4ff3a97a62858ee7c86e2e5d57dcbbd0aab492dae3d8a548bb60541924e68cf3a0aa3d53d7db0012b489462b466919cd83f05b2aa88b7fff7",
      "tree": {
        "sha": "954b2bede549990e41b2214c543d3238b5cf0f76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/954b2bede549990e41b2214c543d3238b5cf0f76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcbe024f5e6508ec3525babc0eb252d6b761e4d5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3ng8gACgkQHkrtYphs\n0l3F7Af+OPa1psc1X56cMrChOVAJTtTbzH2jqav2xQxPS8xqIfjYyxE8agX0C8JA\nqOBB5i4wNVPQN/hmeTbhs68asDjgLdhhmuwvYI0SAHbxhjsqDInnuXH5L2rilzvU\ny3GqJXMnDsMdRrSgfaS3GvDoiiZMcjvUzAQVPMEyv4os/2b572Zv+A8VpBiqu2mG\n3USrbNOvcADZGimeQbjdt5JCqtxauAhqRvDUHtLqVWNoDZdywmV80oWBr3SYkumR\nWabuq9fR8taoXx30eSA1ofHUGiaTGiOVOEOzKwXVqM67guWrzj7EoikmkfeK7TAx\npfu+qzKqZYkPHvTCHlMF6lfK8Jbrvw==\n=wCkb\n-----END PGP SIGNATURE-----",
        "payload": "tree 954b2bede549990e41b2214c543d3238b5cf0f76\nparent bce44089db27e2b21a3dc2954b170ecf0d6d998e\nparent e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1575453340 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1575453640 +0100\n\nMerge #17648: doc: rename wallet-tool references to bitcoin-wallet\n\ne7ad4a2f8c07a82d6424b473f0d51dbd8f897b10 doc: rename wallet-tool references to bitcoin-wallet (Wilson Ccasihue S)\n\nPull request description:\n\n  Fix. text reference to executable bitcoin-wallet instead of wallet-tool, there is not a wallet-tool at bin/ folder.\n\nACKs for top commit:\n  fanquake:\n    ACK e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10 - thanks for following up.\n\nTree-SHA512: aed41b08947728a4ff3a97a62858ee7c86e2e5d57dcbbd0aab492dae3d8a548bb60541924e68cf3a0aa3d53d7db0012b489462b466919cd83f05b2aa88b7fff7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcbe024f5e6508ec3525babc0eb252d6b761e4d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcbe024f5e6508ec3525babc0eb252d6b761e4d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcbe024f5e6508ec3525babc0eb252d6b761e4d5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bce44089db27e2b21a3dc2954b170ecf0d6d998e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bce44089db27e2b21a3dc2954b170ecf0d6d998e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bce44089db27e2b21a3dc2954b170ecf0d6d998e"
      },
      {
        "sha": "e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7ad4a2f8c07a82d6424b473f0d51dbd8f897b10"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a2013edc0518521eddf22f46190cb7c71320c4bf",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcbe024f5e6508ec3525babc0eb252d6b761e4d5/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcbe024f5e6508ec3525babc0eb252d6b761e4d5/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=dcbe024f5e6508ec3525babc0eb252d6b761e4d5",
        "patch": "@@ -41,8 +41,8 @@ static bool WalletAppInit(int argc, char* argv[])\n     }\n     if (argc < 2 || HelpRequested(gArgs)) {\n         std::string usage = strprintf(\"%s bitcoin-wallet version\", PACKAGE_NAME) + \" \" + FormatFullVersion() + \"\\n\\n\" +\n-                                      \"wallet-tool is an offline tool for creating and interacting with Bitcoin Core wallet files.\\n\" +\n-                                      \"By default wallet-tool will act on wallets in the default mainnet wallet directory in the datadir.\\n\" +\n+                                      \"bitcoin-wallet is an offline tool for creating and interacting with Bitcoin Core wallet files.\\n\" +\n+                                      \"By default bitcoin-wallet will act on wallets in the default mainnet wallet directory in the datadir.\\n\" +\n                                       \"To change the target wallet, use the -datadir, -wallet and -testnet/-regtest arguments.\\n\\n\" +\n                                       \"Usage:\\n\" +\n                                      \"  bitcoin-wallet [options] <command>\\n\\n\" +"
      },
      {
        "sha": "0a8ce7caf1719b381ba12c3ec1f47b80b5eabf5d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcbe024f5e6508ec3525babc0eb252d6b761e4d5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcbe024f5e6508ec3525babc0eb252d6b761e4d5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=dcbe024f5e6508ec3525babc0eb252d6b761e4d5",
        "patch": "@@ -822,7 +822,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n \n void CWallet::LoadToWallet(CWalletTx& wtxIn)\n {\n-    // If wallet doesn't have a chain (e.g wallet-tool), lock can't be taken.\n+    // If wallet doesn't have a chain (e.g bitcoin-wallet), lock can't be taken.\n     auto locked_chain = LockChain();\n     if (locked_chain) {\n         Optional<int> block_height = locked_chain->getBlockHeight(wtxIn.m_confirm.hashBlock);\n@@ -2944,7 +2944,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n {\n     // Even if we don't use this lock in this function, we want to preserve\n     // lock order in LoadToWallet if query of chain state is needed to know\n-    // tx status. If lock can't be taken (e.g wallet-tool), tx confirmation\n+    // tx status. If lock can't be taken (e.g bitcoin-wallet), tx confirmation\n     // status may be not reliable.\n     auto locked_chain = LockChain();\n     LOCK(cs_wallet);"
      }
    ]
  },
  {
    "sha": "41919631d50949c845600d413be96ad6ce0495e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTkxOTYzMWQ1MDk0OWM4NDU2MDBkNDEzYmU5NmFkNmNlMDQ5NWU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-04T12:10:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-04T12:12:44Z"
      },
      "message": "Merge #17573: Seed RNG with precision timestamps on receipt of net messages.\n\n02d8c56a18b9a2960888d6ec1209955105bae847 Seed RNG with precision timestamps on receipt of net messages. (Matt Corallo)\n\nPull request description:\n\n  See title. Exposes a generic dead-simple \"SeedEvent\" interface, but currently just used for net messages.\n\nACKs for top commit:\n  sipa:\n    utACK https://github.com/bitcoin/bitcoin/commit/02d8c56a18b9a2960888d6ec1209955105bae847\n  laanwj:\n    ACK 02d8c56a18b9a2960888d6ec1209955105bae847\n  meshcollider:\n    utACK 02d8c56a18b9a2960888d6ec1209955105bae847\n\nTree-SHA512: 28eb39a201ee2b13393c5c64dbf7c1913f3482f095969ef5141bfe549ce77dd63bb5f14738f6eedb296c686ea36014aa157b9c5e8059710a318590f30e9caa14",
      "tree": {
        "sha": "7148c84bf2580c06f773f546570dab01447d9017",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7148c84bf2580c06f773f546570dab01447d9017"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41919631d50949c845600d413be96ad6ce0495e5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3norwACgkQHkrtYphs\n0l2xoAf/bj0klKcE2sOYurTK8KeSUflXtqdm8qWzdNYzgsyrSquVfb9SGIcYSjat\nKvYxNlNlsrwiACg/jx5wO0pQfPvs90IUzRK2CHtr/VGknpWkWm1n+D/9w2OLjG8u\ndLAi3FfDizKNsg1K064Yl/ae+GUcGSpnYwlWiHx08FZhXI602IR55j9p7NCSCLCk\nt4NfSeSBnRjf1v5Wm+4rlNbGDq7MuceAI2dgxKqki+gzuzuC7HeYHlZzX2FmHonG\nq5GRA2caq1hvh2XCKeTC6cbWx10QfH+/j9IO2LlUm6umaanC0AQ8gkRQAW0/DS8R\ncv21PxRlQJEenHIWemHA0K6dCEE9tA==\n=MdeH\n-----END PGP SIGNATURE-----",
        "payload": "tree 7148c84bf2580c06f773f546570dab01447d9017\nparent dcbe024f5e6508ec3525babc0eb252d6b761e4d5\nparent 02d8c56a18b9a2960888d6ec1209955105bae847\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1575461458 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1575461564 +0100\n\nMerge #17573: Seed RNG with precision timestamps on receipt of net messages.\n\n02d8c56a18b9a2960888d6ec1209955105bae847 Seed RNG with precision timestamps on receipt of net messages. (Matt Corallo)\n\nPull request description:\n\n  See title. Exposes a generic dead-simple \"SeedEvent\" interface, but currently just used for net messages.\n\nACKs for top commit:\n  sipa:\n    utACK https://github.com/bitcoin/bitcoin/commit/02d8c56a18b9a2960888d6ec1209955105bae847\n  laanwj:\n    ACK 02d8c56a18b9a2960888d6ec1209955105bae847\n  meshcollider:\n    utACK 02d8c56a18b9a2960888d6ec1209955105bae847\n\nTree-SHA512: 28eb39a201ee2b13393c5c64dbf7c1913f3482f095969ef5141bfe549ce77dd63bb5f14738f6eedb296c686ea36014aa157b9c5e8059710a318590f30e9caa14\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41919631d50949c845600d413be96ad6ce0495e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41919631d50949c845600d413be96ad6ce0495e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41919631d50949c845600d413be96ad6ce0495e5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcbe024f5e6508ec3525babc0eb252d6b761e4d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcbe024f5e6508ec3525babc0eb252d6b761e4d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcbe024f5e6508ec3525babc0eb252d6b761e4d5"
      },
      {
        "sha": "02d8c56a18b9a2960888d6ec1209955105bae847",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d8c56a18b9a2960888d6ec1209955105bae847",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02d8c56a18b9a2960888d6ec1209955105bae847"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 51,
      "deletions": 0
    },
    "files": [
      {
        "sha": "99dae88bab7155d2043b8a218c377e91e1765a2e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41919631d50949c845600d413be96ad6ce0495e5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41919631d50949c845600d413be96ad6ce0495e5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=41919631d50949c845600d413be96ad6ce0495e5",
        "patch": "@@ -16,6 +16,7 @@\n #include <crypto/sha256.h>\n #include <netbase.h>\n #include <net_permissions.h>\n+#include <random.h>\n #include <scheduler.h>\n #include <ui_interface.h>\n #include <util/strencodings.h>\n@@ -445,6 +446,9 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false, block_relay_only);\n     pnode->AddRef();\n \n+    // We're making a new connection, harvest entropy from the time (and our peer count)\n+    RandAddEvent((uint32_t)id);\n+\n     return pnode;\n }\n \n@@ -693,6 +697,9 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     msg.m_message_size = hdr.nMessageSize;\n     msg.m_raw_message_size = hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n \n+    // We just received a message off the wire, harvest entropy from the time (and the message checksum)\n+    RandAddEvent(ReadLE32(hash.begin()));\n+\n     msg.m_valid_checksum = (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) == 0);\n     if (!msg.m_valid_checksum) {\n         LogPrint(BCLog::NET, \"CHECKSUM ERROR (%s, %u bytes), expected %s was %s\\n\",\n@@ -1017,6 +1024,9 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n     }\n+\n+    // We received a new connection, harvest entropy from the time (and our peer count)\n+    RandAddEvent((uint32_t)id);\n }\n \n void CConnman::DisconnectNodes()"
      },
      {
        "sha": "09777237c20758367edec6fcba8c621f04de2f81",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41919631d50949c845600d413be96ad6ce0495e5/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41919631d50949c845600d413be96ad6ce0495e5/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=41919631d50949c845600d413be96ad6ce0495e5",
        "patch": "@@ -6,6 +6,7 @@\n #include <random.h>\n \n #include <compat/cpuid.h>\n+#include <crypto/sha256.h>\n #include <crypto/sha512.h>\n #include <support/cleanse.h>\n #ifdef WIN32\n@@ -449,6 +450,23 @@ static void SeedFast(CSHA512& hasher) noexcept\n     SeedTimestamp(hasher);\n }\n \n+// We use only SHA256 for the events hashing to get the ASM speedups we have for SHA256,\n+// since we want it to be fast as network peers may be able to trigger it repeatedly.\n+static Mutex events_mutex;\n+static CSHA256 events_hasher;\n+static void SeedEvents(CSHA512& hasher)\n+{\n+    LOCK(events_mutex);\n+\n+    unsigned char events_hash[32];\n+    events_hasher.Finalize(events_hash);\n+    hasher.Write(events_hash, 32);\n+\n+    // Re-initialize the hasher with the finalized state to use later.\n+    events_hasher.Reset();\n+    events_hasher.Write(events_hash, 32);\n+}\n+\n static void SeedSlow(CSHA512& hasher) noexcept\n {\n     unsigned char buffer[32];\n@@ -460,6 +478,9 @@ static void SeedSlow(CSHA512& hasher) noexcept\n     GetOSRand(buffer);\n     hasher.Write(buffer, sizeof(buffer));\n \n+    // Add the events hasher into the mix\n+    SeedEvents(hasher);\n+\n     // High-precision timestamp.\n     //\n     // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n@@ -485,6 +506,9 @@ static void SeedPeriodic(CSHA512& hasher, RNGState& rng)\n     // High-precision timestamp\n     SeedTimestamp(hasher);\n \n+    // Add the events hasher into the mix\n+    SeedEvents(hasher);\n+\n     // Dynamic environment data (performance monitoring, ...)\n     auto old_size = hasher.Size();\n     RandAddDynamicEnv(hasher);\n@@ -553,6 +577,15 @@ void GetRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNG\n void GetStrongRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::SLOW); }\n void RandAddPeriodic() { ProcRand(nullptr, 0, RNGLevel::PERIODIC); }\n \n+void RandAddEvent(const uint32_t event_info) {\n+    LOCK(events_mutex);\n+    events_hasher.Write((const unsigned char *)&event_info, sizeof(event_info));\n+    // Get the low four bytes of the performance counter. This translates to roughly the\n+    // subsecond part.\n+    uint32_t perfcounter = (GetPerformanceCounter() & 0xffffffff);\n+    events_hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n+\n bool g_mock_deterministic_tests{false};\n \n uint64_t GetRand(uint64_t nMax) noexcept"
      },
      {
        "sha": "b6e70fcb1fc6774416b136bd84d95b9cb0e2e16e",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41919631d50949c845600d413be96ad6ce0495e5/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41919631d50949c845600d413be96ad6ce0495e5/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=41919631d50949c845600d413be96ad6ce0495e5",
        "patch": "@@ -89,6 +89,14 @@ void GetStrongRandBytes(unsigned char* buf, int num) noexcept;\n  */\n void RandAddPeriodic();\n \n+/**\n+ * Gathers entropy from the low bits of the time at which events occur. Should\n+ * be called with a uint32_t describing the event at the time an event occurs.\n+ *\n+ * Thread-safe.\n+ */\n+void RandAddEvent(const uint32_t event_info);\n+\n /**\n  * Fast randomness source. This is seeded once with secure random data, but\n  * is completely deterministic and does not gather more entropy after that."
      }
    ]
  },
  {
    "sha": "faa8023ce9a47b282e1fac3ca8b3a7bb0042935a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE4MDIzY2U5YTQ3YjI4MmUxZmFjM2NhOGIzYTdiYjAwNDI5MzVh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-19T16:40:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-04T14:32:15Z"
      },
      "message": "ci: Bump to clang-8 for asan build to avoid segfaults on ppc64le",
      "tree": {
        "sha": "afe78a2579bc59142f017b0939131a57d2ecbcc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afe78a2579bc59142f017b0939131a57d2ecbcc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa8023ce9a47b282e1fac3ca8b3a7bb0042935a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj1VAwAh/ts+d4zwhIhTViNis620lRJdiDS27I4a9rCwTS+y6nchX/jVg9soGJw\ngJlWR1VjiOyehpDJV+kta3126X/QF4kGbicIP14g12lH8FCzsMzO8jGeKUatn4S2\n6oUGzfNpDS/QeMZA4fvL9b9+i57vq6z4BW+vogmTcWmirrccNz5d4qXZIWzfSPg3\nZkfXk9K15q4wvieZ8Vt1RuZl/MdS34ptNahexrUk1997cxJ8EPBRkASY7n7raE/6\n7Vhl8/cxhp+hlXkbjZ3aZS98RwpQtR/cysLh0e4CdG6U442ap2fvz2ZUUaHh5xrA\nVrNYLVRVGJBRcp0Oe9UTYdDrbol5woZRU2NKN23pWXhlIt0Gvk0uXRaSsP1ODOXu\n3+FkBOJs+ggplcEF03SPTxgENE6U2qURMD89kgvAHniz6TyTnN4xp7nFhfP6i7HA\nO8QJkjZW8nJNXedXjyRK8LRT3NPTLGroutZasC0/NSgC05GEmodE799NnYOxn0Q1\nxXMTTedZ\n=VjjY\n-----END PGP SIGNATURE-----",
        "payload": "tree afe78a2579bc59142f017b0939131a57d2ecbcc7\nparent 1fdaa04cebaac61a1106ed52a35486039413a0cb\nauthor MarcoFalke <falke.marco@gmail.com> 1574181643 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575469935 -0500\n\nci: Bump to clang-8 for asan build to avoid segfaults on ppc64le\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa8023ce9a47b282e1fac3ca8b3a7bb0042935a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa8023ce9a47b282e1fac3ca8b3a7bb0042935a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa8023ce9a47b282e1fac3ca8b3a7bb0042935a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fdaa04cebaac61a1106ed52a35486039413a0cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fdaa04cebaac61a1106ed52a35486039413a0cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fdaa04cebaac61a1106ed52a35486039413a0cb"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2ffd3c51078bdc7b29c9db68d2571b4a08e96fa4",
        "filename": "ci/test/00_setup_env_native_asan.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa8023ce9a47b282e1fac3ca8b3a7bb0042935a/ci/test/00_setup_env_native_asan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa8023ce9a47b282e1fac3ca8b3a7bb0042935a/ci/test/00_setup_env_native_asan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_asan.sh?ref=faa8023ce9a47b282e1fac3ca8b3a7bb0042935a",
        "patch": "@@ -6,7 +6,8 @@\n \n export LC_ALL=C.UTF-8\n \n-export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n+export PACKAGES=\"clang-8 llvm-8 python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n+# Use clang-8 instead of default clang (which is clang-6 on Bionic) to avoid spurious segfaults when running on ppc64le\n export NO_DEPENDS=1\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=address,integer,undefined CC=clang-8 CXX=clang++-8\""
      }
    ]
  },
  {
    "sha": "2222c305866a77065ab5be24c1c252bae252bb59",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjIyYzMwNTg2NmE3NzA2NWFiNWJlMjRjMWMyNTJiYWUyNTJiYjU5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-20T18:42:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-04T14:32:19Z"
      },
      "message": "test: Use char instead of unsigned char",
      "tree": {
        "sha": "974a099b217fb059b47cf6d17bb9db0b7c596f9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/974a099b217fb059b47cf6d17bb9db0b7c596f9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2222c305866a77065ab5be24c1c252bae252bb59",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhjVwwAgnpNtGhnO8+wgwhJYV68v+auzeWiXhj16kOLw9KyL9I7xZ+/P+imQgrI\nWPkzTWW2VRnIYPZTMaOiZO4kKbw8lT6uOUA804XE1m+Kp/x8TmkWUJSPpMDY9VRI\nl13IQ2IZX46sj7FgmvEvbtmpn/dYa6go1r6jJuNCXt7xOSywYKSw9BXnseLFW5dk\nBnhC7JNBzSIRO2K0QDwntipSUeeBeoMEXoxAMcRAAA7KJc5WIX08y1/CcKbKXwRV\n+IiCTAfKtQFCqYRpLNJ4FbA22nzj/PdY0jjW+o/RZG/a1Al442/EyOMy1T9fQyaR\nYjgD1JxmpryVQSQHs9kwoVa1c/JVWuqjbVZCgzcPAE/wBgWtHKfGkPSqhSvQeBwX\nV3nYquHO/QqfAbyeRrtFifiF6ajValpPj8uSN0FQ2edftPIhDHZPNjp1qVane83d\n1ENTu3jw5ZZmrkL+BxuUqYwvfWZdK0BKekGm1vkMGkK/pYHgQVp2Seis57SDe3Gf\nU+YQ2aSs\n=dKvV\n-----END PGP SIGNATURE-----",
        "payload": "tree 974a099b217fb059b47cf6d17bb9db0b7c596f9b\nparent faa8023ce9a47b282e1fac3ca8b3a7bb0042935a\nauthor MarcoFalke <falke.marco@gmail.com> 1574275333 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575469939 -0500\n\ntest: Use char instead of unsigned char\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2222c305866a77065ab5be24c1c252bae252bb59",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2222c305866a77065ab5be24c1c252bae252bb59",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2222c305866a77065ab5be24c1c252bae252bb59/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faa8023ce9a47b282e1fac3ca8b3a7bb0042935a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa8023ce9a47b282e1fac3ca8b3a7bb0042935a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faa8023ce9a47b282e1fac3ca8b3a7bb0042935a"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "2deb0c5bfc06e3c709eb09a9342008a847e8f953",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2222c305866a77065ab5be24c1c252bae252bb59/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2222c305866a77065ab5be24c1c252bae252bb59/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=2222c305866a77065ab5be24c1c252bae252bb59",
        "patch": "@@ -186,14 +186,15 @@ static void TestHKDF_SHA256_32(const std::string &ikm_hex, const std::string &sa\n     BOOST_CHECK(HexStr(out, out + 32) == okm_check_hex);\n }\n \n-static std::string LongTestString() {\n+static std::string LongTestString()\n+{\n     std::string ret;\n-    for (int i=0; i<200000; i++) {\n-        ret += (unsigned char)(i);\n-        ret += (unsigned char)(i >> 4);\n-        ret += (unsigned char)(i >> 8);\n-        ret += (unsigned char)(i >> 12);\n-        ret += (unsigned char)(i >> 16);\n+    for (int i = 0; i < 200000; i++) {\n+        ret += (char)(i);\n+        ret += (char)(i >> 4);\n+        ret += (char)(i >> 8);\n+        ret += (char)(i >> 12);\n+        ret += (char)(i >> 16);\n     }\n     return ret;\n }"
      }
    ]
  },
  {
    "sha": "fa69cef13e5aab8264339eb3d50a9e89d59efd87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTY5Y2VmMTNlNWFhYjgyNjQzMzllYjNkNTBhOWU4OWQ1OWVmZDg3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-04T15:28:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-04T16:25:32Z"
      },
      "message": "test: Print stderr when subprocess fails",
      "tree": {
        "sha": "bfaef7a8e34443236eda2e3da9e93d4f107e257c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfaef7a8e34443236eda2e3da9e93d4f107e257c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa69cef13e5aab8264339eb3d50a9e89d59efd87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgDugv9GprcPp13HxSU6/pz0YdLIGQ8scFeRTj1sqm1SU5lHO7pHh9fCR7L3Nja\nrDHi/47UIgSo3JYJ+uz8AI0w6qppYtUeVOhm7oM66Mq7Xl5ih8Yd3lmVePvd4zUr\n8lrFTw5QK9GeNpOL5HvbjdHHsTc7X5vuFn7FYixh1vCTtbhMvhsEdTpI5XHJQCvZ\nhTDYbcZq/vGFLC0LSLCdEfMbxcbEL0xFC6qS9oWcxKHCpbL69o3QshwSjlK9Eij6\nBorhtGfXK2wIXeXab7uqYplqg33PEYaotwuEpORHGwk9BCM1PkE3jnXZpZxBxaSZ\nqGvuZWjPi9iF08sEWvSDqQxnklxOnxXE6RJIi9aTWvtbELUpEaYKdK7GSfyCJyyS\n0kYgn/IbIop0pTHkpKd5BsVj7paHT9elFTNhLAOhRdqZf7Ersj4NrHu3u4RSxkPA\nMKLqWAxAAk9d/iqUwjCqv3mYo0thj8yRzdqsJkPs3CUizmv19zvfzROBhOI9ASw/\n71Gxoi4B\n=/QkK\n-----END PGP SIGNATURE-----",
        "payload": "tree bfaef7a8e34443236eda2e3da9e93d4f107e257c\nparent 2222c305866a77065ab5be24c1c252bae252bb59\nauthor MarcoFalke <falke.marco@gmail.com> 1575473289 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575476732 -0500\n\ntest: Print stderr when subprocess fails\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa69cef13e5aab8264339eb3d50a9e89d59efd87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa69cef13e5aab8264339eb3d50a9e89d59efd87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa69cef13e5aab8264339eb3d50a9e89d59efd87/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2222c305866a77065ab5be24c1c252bae252bb59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2222c305866a77065ab5be24c1c252bae252bb59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2222c305866a77065ab5be24c1c252bae252bb59"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f468f9eaec5dcd1caa3ef161bde2493ee4ce9896",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa69cef13e5aab8264339eb3d50a9e89d59efd87/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa69cef13e5aab8264339eb3d50a9e89d59efd87/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fa69cef13e5aab8264339eb3d50a9e89d59efd87",
        "patch": "@@ -12,6 +12,7 @@\n import pdb\n import random\n import shutil\n+import subprocess\n import sys\n import tempfile\n import time\n@@ -121,6 +122,9 @@ def main(self):\n         except KeyError:\n             self.log.exception(\"Key error\")\n             self.success = TestStatus.FAILED\n+        except subprocess.CalledProcessError as e:\n+            self.log.exception(\"Called Process failed with '{}'\".format(e.output))\n+            self.success = TestStatus.FAILED\n         except Exception:\n             self.log.exception(\"Unexpected exception caught during testing\")\n             self.success = TestStatus.FAILED"
      }
    ]
  },
  {
    "sha": "fa1bfc476c9208a4c412c8ca74d05f52bb47766f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTFiZmM0NzZjOTIwOGE0YzQxMmM4Y2E3NGQwNWY1MmJiNDc3NjZm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-20T19:10:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-04T17:16:38Z"
      },
      "message": "ci: ubsan report_error_type=1 and add suppressions",
      "tree": {
        "sha": "922de7964e094ecf9c0511f31a748cb2fc61a9b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/922de7964e094ecf9c0511f31a748cb2fc61a9b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1bfc476c9208a4c412c8ca74d05f52bb47766f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgxfwv/QeGadFV5Vlj3bR7WeG0e2N+VR5Y8gdcQ//5DLhJ71+DZ5z50jq6cboA7\nv7F2ON/cGfBmggZ6z8z52a/ZsoDNfKqbxSrDa4MGBWbfJlQk/DyPjfo2TSuxxR0b\nSCE4tOYTBcn+9idB56SobyQBmpTm1hd5JQaIUTOJufjN0havEJwZKaquKp3ilQGB\n1S0W2QiOAtACXE/GZ0dFB1QBSnrEXNgUNq/CgPj4QpTOOlR+PecAwpGRtDYIr/jN\nskrz30xeGbsB6OSHyRkPrRMe3IyF6pvbtprfRhBjMkuCRr3cU1so+LanmGZV/YwH\njxx/yPVFTC5FPUDcD75US9AwpVuenGtUGY8lMq4pTOwsBYLFJg1BR9u8O/3uzdp1\nj96i2mvAHh4K7+E3/Mmzuj3HMJqCMCE1Negq1cq4BaFf1/nLO6z4TWAVFABSavHI\n0qtm5zje/sr7QTBflV9+mjC8P2vxTtwIi1J+LJVGsh1intSbKqiGuHNTcgRe5ZO5\nweheaKST\n=xBxj\n-----END PGP SIGNATURE-----",
        "payload": "tree 922de7964e094ecf9c0511f31a748cb2fc61a9b0\nparent fa69cef13e5aab8264339eb3d50a9e89d59efd87\nauthor MarcoFalke <falke.marco@gmail.com> 1574277057 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575479798 -0500\n\nci: ubsan report_error_type=1 and add suppressions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1bfc476c9208a4c412c8ca74d05f52bb47766f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1bfc476c9208a4c412c8ca74d05f52bb47766f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1bfc476c9208a4c412c8ca74d05f52bb47766f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa69cef13e5aab8264339eb3d50a9e89d59efd87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa69cef13e5aab8264339eb3d50a9e89d59efd87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa69cef13e5aab8264339eb3d50a9e89d59efd87"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 43,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b9eaae0b0de4fbe50c4e72bdfa5c0d9fbfea2a52",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1bfc476c9208a4c412c8ca74d05f52bb47766f/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1bfc476c9208a4c412c8ca74d05f52bb47766f/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=fa1bfc476c9208a4c412c8ca74d05f52bb47766f",
        "patch": "@@ -36,7 +36,7 @@ mkdir -p \"${CCACHE_DIR}\"\n export ASAN_OPTIONS=\"detect_stack_use_after_return=1\"\n export LSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/lsan\"\n export TSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/tsan:log_path=${BASE_SCRATCH_DIR}/sanitizer-output/tsan\"\n-export UBSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1\"\n+export UBSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1\"\n env | grep -E '^(BITCOIN_CONFIG|CCACHE_|WINEDEBUG|LC_ALL|BOOST_TEST_RANDOM|CONFIG_SHELL|(ASAN|LSAN|TSAN|UBSAN)_OPTIONS)' | tee /tmp/env\n if [[ $HOST = *-mingw32 ]]; then\n   DOCKER_ADMIN=\"--cap-add SYS_ADMIN\""
      },
      {
        "sha": "f5de358bcb994a7a5430986e34eb2ab1002166ca",
        "filename": "test/sanitizer_suppressions/ubsan",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1bfc476c9208a4c412c8ca74d05f52bb47766f/test/sanitizer_suppressions/ubsan",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1bfc476c9208a4c412c8ca74d05f52bb47766f/test/sanitizer_suppressions/ubsan",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/sanitizer_suppressions/ubsan?ref=fa1bfc476c9208a4c412c8ca74d05f52bb47766f",
        "patch": "@@ -42,3 +42,45 @@ unsigned-integer-overflow:stl_bvector.h\n unsigned-integer-overflow:txmempool.cpp\n unsigned-integer-overflow:util/strencodings.cpp\n unsigned-integer-overflow:validation.cpp\n+\n+implicit-integer-sign-change:*/include/c++/*/bits/*.h\n+implicit-integer-sign-change:*/new_allocator.h\n+implicit-integer-sign-change:/usr/include/boost/date_time/format_date_parser.hpp\n+implicit-integer-sign-change:arith_uint256.cpp\n+implicit-integer-sign-change:bech32.cpp\n+implicit-integer-sign-change:bloom.cpp\n+implicit-integer-sign-change:chain.*\n+implicit-integer-sign-change:coins.h\n+implicit-integer-sign-change:compat/stdin.cpp\n+implicit-integer-sign-change:compressor.h\n+implicit-integer-sign-change:crypto/*\n+implicit-integer-sign-change:key.cpp\n+implicit-integer-sign-change:noui.cpp\n+implicit-integer-sign-change:prevector.h\n+implicit-integer-sign-change:protocol.cpp\n+implicit-integer-sign-change:script/bitcoinconsensus.cpp\n+implicit-integer-sign-change:script/interpreter.cpp\n+implicit-integer-sign-change:serialize.h\n+implicit-integer-sign-change:test/arith_uint256_tests.cpp\n+implicit-integer-sign-change:test/coins_tests.cpp\n+implicit-integer-sign-change:test/pow_tests.cpp\n+implicit-integer-sign-change:test/prevector_tests.cpp\n+implicit-integer-sign-change:test/sighash_tests.cpp\n+implicit-integer-sign-change:test/streams_tests.cpp\n+implicit-integer-sign-change:test/transaction_tests.cpp\n+implicit-integer-sign-change:txmempool.cpp\n+implicit-integer-sign-change:util/strencodings.*\n+implicit-integer-sign-change:validation.cpp\n+implicit-integer-sign-change:zmq/zmqpublishnotifier.cpp\n+implicit-signed-integer-truncation,implicit-integer-sign-change:chain.h\n+implicit-signed-integer-truncation,implicit-integer-sign-change:test/skiplist_tests.cpp\n+implicit-signed-integer-truncation:chain.h\n+implicit-signed-integer-truncation:crypto/*\n+implicit-signed-integer-truncation:cuckoocache.h\n+implicit-signed-integer-truncation:leveldb/*\n+implicit-signed-integer-truncation:streams.h\n+implicit-signed-integer-truncation:test/arith_uint256_tests.cpp\n+implicit-signed-integer-truncation:test/skiplist_tests.cpp\n+implicit-signed-integer-truncation:torcontrol.cpp\n+implicit-unsigned-integer-truncation:crypto/*\n+implicit-unsigned-integer-truncation:leveldb/*"
      }
    ]
  },
  {
    "sha": "fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQwZTQ4YzUwZDhjY2Y0MmNlNWU2NmMxMjM5MGUyZWQ0YjYwZTc1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-04T16:21:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-04T17:16:52Z"
      },
      "message": "ci: Remove unparseable lines from supp file for old xenial clang tsan",
      "tree": {
        "sha": "02e491ac3cceb07a99b1350389d1dba991bc36bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02e491ac3cceb07a99b1350389d1dba991bc36bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjcAwwAx+Q5bzMfywJ4QlILmOdbqP7eAJl1FIeK2wcbRawvHkVcpiKp1Jcik5ws\n/0Cby74Dg7tBcdAqYisyIaABdhWLcnwhsn03Gnr0ZyTrr2CDnr35684jsIDTLk4s\nUCl1e/1uJKeasmwxf6NErKRFiOAicJNIO9Lr9FSHfVLUJBV6ei0nf6orK2EkfpTH\n42JEu4ACea4jny7WbWDAIiwdRg6nDHz7GVzDpBQ3QTI+Yn9JQTlH6ZzbRWttSqiD\n+Hrg9EJrvrMffUCmDU6PTwitlxhAzpr3s5cMdAgGkAs5vHM2loIz5jWYFRDPcCT+\n4+L6nPYl9xhgJORX/D7WCcqW3Z387Ukqhjiiz+cqpX85BoXrK7AZ0Gqg96uT0nEB\nXdvps0q3eT3DQOIcP7jhf2wbgAI9R4bmEYb6KazyZkh+liXozKFKe4B56j/iwkIt\nOKxri9tyte72vP4vQu5Zzl+j1XQF4l3RToTuXSwWpLTqv6OzAJBqFfxIiExqIxFQ\n6oXaJGy5\n=rGjk\n-----END PGP SIGNATURE-----",
        "payload": "tree 02e491ac3cceb07a99b1350389d1dba991bc36bd\nparent fa1bfc476c9208a4c412c8ca74d05f52bb47766f\nauthor MarcoFalke <falke.marco@gmail.com> 1575476492 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575479812 -0500\n\nci: Remove unparseable lines from supp file for old xenial clang tsan\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa1bfc476c9208a4c412c8ca74d05f52bb47766f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1bfc476c9208a4c412c8ca74d05f52bb47766f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1bfc476c9208a4c412c8ca74d05f52bb47766f"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1f485fbec435d6da8ed849fd9777ad5bb6b0a816",
        "filename": "ci/test/00_setup_env.sh",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75/ci/test/00_setup_env.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75/ci/test/00_setup_env.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env.sh?ref=fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75",
        "patch": "@@ -6,19 +6,19 @@\n \n export LC_ALL=C.UTF-8\n \n+# The root dir.\n+# The ci system copies this folder.\n+# This is where the build is done (depends and dist).\n+BASE_ROOT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\"/../../ >/dev/null 2>&1 && pwd )\n+export BASE_ROOT_DIR\n+\n echo \"Setting specific values in env\"\n if [ -n \"${FILE_ENV}\" ]; then\n   set -o errexit;\n   # shellcheck disable=SC1090\n   source \"${FILE_ENV}\"\n fi\n \n-# The root dir.\n-# The ci system copies this folder.\n-# This is where the build is done (depends and dist).\n-BASE_ROOT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\"/../../ >/dev/null 2>&1 && pwd )\n-export BASE_ROOT_DIR\n-\n echo \"Fallback to default values in env (if not yet set)\"\n # The number of parallel jobs to pass down to make and test_runner.py\n export MAKEJOBS=${MAKEJOBS:--j4}"
      },
      {
        "sha": "e9b7a7bba1fc81c4f995e51b6fe61197ba5ed0c2",
        "filename": "ci/test/00_setup_env_native_tsan.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75/ci/test/00_setup_env_native_tsan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75/ci/test/00_setup_env_native_tsan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_tsan.sh?ref=fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75",
        "patch": "@@ -11,3 +11,7 @@ export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-\n export NO_DEPENDS=1\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-zmq --disable-wallet --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=thread --disable-hardening --disable-asm CC=clang CXX=clang++\"\n+\n+# xenial comes with old clang versions that can not parse the sanitizer suppressions files\n+# Remove unparseable lines as a hacky workaround\n+sed -i '/^implicit-/d' \"${BASE_ROOT_DIR}/test/sanitizer_suppressions/ubsan\""
      }
    ]
  },
  {
    "sha": "fee01bb053639f9e066ffb7ca72d7a5cb005d4b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWUwMWJiMDUzNjM5ZjllMDY2ZmZiN2NhNzJkN2E1Y2IwMDVkNGIz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-04T18:22:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-04T18:23:16Z"
      },
      "message": "Merge #17517: ci: Bump to clang-8 for asan build to avoid segfaults on ppc64le\n\nfa40e48c50d8ccf42ce5e66c12390e2ed4b60e75 ci: Remove unparseable lines from supp file for old xenial clang tsan (MarcoFalke)\nfa1bfc476c9208a4c412c8ca74d05f52bb47766f ci: ubsan report_error_type=1 and add suppressions (MarcoFalke)\nfa69cef13e5aab8264339eb3d50a9e89d59efd87 test: Print stderr when subprocess fails (MarcoFalke)\n2222c305866a77065ab5be24c1c252bae252bb59 test: Use char instead of unsigned char (MarcoFalke)\nfaa8023ce9a47b282e1fac3ca8b3a7bb0042935a ci: Bump to clang-8 for asan build to avoid segfaults on ppc64le (MarcoFalke)\n\nPull request description:\n\n  Use clang-8 instead of default clang (which is clang-6 on Bionic) to avoid spurious segfaults when running the ci system on ppc64le\n\nACKs for top commit:\n  practicalswift:\n    ACK fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75 assuming Travis is happy -- diff looks correct :)\n\nTree-SHA512: f4f26232d3a0ef38da245869340f723d279a3db9823befbc735fb5a00024dae041c7306d7ae55d2488e6f86aa96cdea155b007aefb561fba505141e8dbc717dc",
      "tree": {
        "sha": "64746d06501c357ebc9eb334699035b5d1309940",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64746d06501c357ebc9eb334699035b5d1309940"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgzGAv/XQrMa06YYMFh9UHkn9MtElDrUgk4fs4j/zLf30YZ+ryB+Y3CQi1jOJeg\nzmsp1F+96hrDH4m3jn9DPeoPJBSC43hFHxFkH75mlsNCAanlAdD6Gy+JfPYDBJ8z\nkb/6GtfM2BSXeBKX9W1190Tge/S4szp719JZY2VNPvNrGxFic7bAa2YHGutRhDoP\nRe4CgK+WTqpaVD8lCx7GLCwt2ZxHYDN+Yb69H83lh1Kzg27La6UosJTjLzSKrviP\nX1aSATA+xa0HDNBogALoRTb38p+arzfrwATLOQszZyVk71lvRIN2WJYTa0gtGcX2\n/PfvqfvLrEII1vZFK43f1duQSB+icohppdZH18RG1MW6Da0I6koOK/QBGER/hscy\nrrZvZjPMeCXjYhRXqi7N4htGTUlin5WoKq220bs3rBtXAags6m5hZh2EVBmh6euM\nVKzI6G90GLeDLE+1Ik93NmUemGMDLzMgfXTB5y3CjAIHqQfRxq+OvxESaM+dyZAB\nzU8P2Kr5\n=oTfU\n-----END PGP SIGNATURE-----",
        "payload": "tree 64746d06501c357ebc9eb334699035b5d1309940\nparent 41919631d50949c845600d413be96ad6ce0495e5\nparent fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75\nauthor MarcoFalke <falke.marco@gmail.com> 1575483743 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575483796 -0500\n\nMerge #17517: ci: Bump to clang-8 for asan build to avoid segfaults on ppc64le\n\nfa40e48c50d8ccf42ce5e66c12390e2ed4b60e75 ci: Remove unparseable lines from supp file for old xenial clang tsan (MarcoFalke)\nfa1bfc476c9208a4c412c8ca74d05f52bb47766f ci: ubsan report_error_type=1 and add suppressions (MarcoFalke)\nfa69cef13e5aab8264339eb3d50a9e89d59efd87 test: Print stderr when subprocess fails (MarcoFalke)\n2222c305866a77065ab5be24c1c252bae252bb59 test: Use char instead of unsigned char (MarcoFalke)\nfaa8023ce9a47b282e1fac3ca8b3a7bb0042935a ci: Bump to clang-8 for asan build to avoid segfaults on ppc64le (MarcoFalke)\n\nPull request description:\n\n  Use clang-8 instead of default clang (which is clang-6 on Bionic) to avoid spurious segfaults when running the ci system on ppc64le\n\nACKs for top commit:\n  practicalswift:\n    ACK fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75 assuming Travis is happy -- diff looks correct :)\n\nTree-SHA512: f4f26232d3a0ef38da245869340f723d279a3db9823befbc735fb5a00024dae041c7306d7ae55d2488e6f86aa96cdea155b007aefb561fba505141e8dbc717dc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41919631d50949c845600d413be96ad6ce0495e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41919631d50949c845600d413be96ad6ce0495e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41919631d50949c845600d413be96ad6ce0495e5"
      },
      {
        "sha": "fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa40e48c50d8ccf42ce5e66c12390e2ed4b60e75"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 68,
      "deletions": 16
    },
    "files": [
      {
        "sha": "1f485fbec435d6da8ed849fd9777ad5bb6b0a816",
        "filename": "ci/test/00_setup_env.sh",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3/ci/test/00_setup_env.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3/ci/test/00_setup_env.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env.sh?ref=fee01bb053639f9e066ffb7ca72d7a5cb005d4b3",
        "patch": "@@ -6,19 +6,19 @@\n \n export LC_ALL=C.UTF-8\n \n+# The root dir.\n+# The ci system copies this folder.\n+# This is where the build is done (depends and dist).\n+BASE_ROOT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\"/../../ >/dev/null 2>&1 && pwd )\n+export BASE_ROOT_DIR\n+\n echo \"Setting specific values in env\"\n if [ -n \"${FILE_ENV}\" ]; then\n   set -o errexit;\n   # shellcheck disable=SC1090\n   source \"${FILE_ENV}\"\n fi\n \n-# The root dir.\n-# The ci system copies this folder.\n-# This is where the build is done (depends and dist).\n-BASE_ROOT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\"/../../ >/dev/null 2>&1 && pwd )\n-export BASE_ROOT_DIR\n-\n echo \"Fallback to default values in env (if not yet set)\"\n # The number of parallel jobs to pass down to make and test_runner.py\n export MAKEJOBS=${MAKEJOBS:--j4}"
      },
      {
        "sha": "2ffd3c51078bdc7b29c9db68d2571b4a08e96fa4",
        "filename": "ci/test/00_setup_env_native_asan.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3/ci/test/00_setup_env_native_asan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3/ci/test/00_setup_env_native_asan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_asan.sh?ref=fee01bb053639f9e066ffb7ca72d7a5cb005d4b3",
        "patch": "@@ -6,7 +6,8 @@\n \n export LC_ALL=C.UTF-8\n \n-export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n+export PACKAGES=\"clang-8 llvm-8 python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n+# Use clang-8 instead of default clang (which is clang-6 on Bionic) to avoid spurious segfaults when running on ppc64le\n export NO_DEPENDS=1\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=address,integer,undefined CC=clang-8 CXX=clang++-8\""
      },
      {
        "sha": "e9b7a7bba1fc81c4f995e51b6fe61197ba5ed0c2",
        "filename": "ci/test/00_setup_env_native_tsan.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3/ci/test/00_setup_env_native_tsan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3/ci/test/00_setup_env_native_tsan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_tsan.sh?ref=fee01bb053639f9e066ffb7ca72d7a5cb005d4b3",
        "patch": "@@ -11,3 +11,7 @@ export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-\n export NO_DEPENDS=1\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-zmq --disable-wallet --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=thread --disable-hardening --disable-asm CC=clang CXX=clang++\"\n+\n+# xenial comes with old clang versions that can not parse the sanitizer suppressions files\n+# Remove unparseable lines as a hacky workaround\n+sed -i '/^implicit-/d' \"${BASE_ROOT_DIR}/test/sanitizer_suppressions/ubsan\""
      },
      {
        "sha": "b9eaae0b0de4fbe50c4e72bdfa5c0d9fbfea2a52",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=fee01bb053639f9e066ffb7ca72d7a5cb005d4b3",
        "patch": "@@ -36,7 +36,7 @@ mkdir -p \"${CCACHE_DIR}\"\n export ASAN_OPTIONS=\"detect_stack_use_after_return=1\"\n export LSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/lsan\"\n export TSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/tsan:log_path=${BASE_SCRATCH_DIR}/sanitizer-output/tsan\"\n-export UBSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1\"\n+export UBSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1\"\n env | grep -E '^(BITCOIN_CONFIG|CCACHE_|WINEDEBUG|LC_ALL|BOOST_TEST_RANDOM|CONFIG_SHELL|(ASAN|LSAN|TSAN|UBSAN)_OPTIONS)' | tee /tmp/env\n if [[ $HOST = *-mingw32 ]]; then\n   DOCKER_ADMIN=\"--cap-add SYS_ADMIN\""
      },
      {
        "sha": "2deb0c5bfc06e3c709eb09a9342008a847e8f953",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=fee01bb053639f9e066ffb7ca72d7a5cb005d4b3",
        "patch": "@@ -186,14 +186,15 @@ static void TestHKDF_SHA256_32(const std::string &ikm_hex, const std::string &sa\n     BOOST_CHECK(HexStr(out, out + 32) == okm_check_hex);\n }\n \n-static std::string LongTestString() {\n+static std::string LongTestString()\n+{\n     std::string ret;\n-    for (int i=0; i<200000; i++) {\n-        ret += (unsigned char)(i);\n-        ret += (unsigned char)(i >> 4);\n-        ret += (unsigned char)(i >> 8);\n-        ret += (unsigned char)(i >> 12);\n-        ret += (unsigned char)(i >> 16);\n+    for (int i = 0; i < 200000; i++) {\n+        ret += (char)(i);\n+        ret += (char)(i >> 4);\n+        ret += (char)(i >> 8);\n+        ret += (char)(i >> 12);\n+        ret += (char)(i >> 16);\n     }\n     return ret;\n }"
      },
      {
        "sha": "f468f9eaec5dcd1caa3ef161bde2493ee4ce9896",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fee01bb053639f9e066ffb7ca72d7a5cb005d4b3",
        "patch": "@@ -12,6 +12,7 @@\n import pdb\n import random\n import shutil\n+import subprocess\n import sys\n import tempfile\n import time\n@@ -121,6 +122,9 @@ def main(self):\n         except KeyError:\n             self.log.exception(\"Key error\")\n             self.success = TestStatus.FAILED\n+        except subprocess.CalledProcessError as e:\n+            self.log.exception(\"Called Process failed with '{}'\".format(e.output))\n+            self.success = TestStatus.FAILED\n         except Exception:\n             self.log.exception(\"Unexpected exception caught during testing\")\n             self.success = TestStatus.FAILED"
      },
      {
        "sha": "f5de358bcb994a7a5430986e34eb2ab1002166ca",
        "filename": "test/sanitizer_suppressions/ubsan",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3/test/sanitizer_suppressions/ubsan",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3/test/sanitizer_suppressions/ubsan",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/sanitizer_suppressions/ubsan?ref=fee01bb053639f9e066ffb7ca72d7a5cb005d4b3",
        "patch": "@@ -42,3 +42,45 @@ unsigned-integer-overflow:stl_bvector.h\n unsigned-integer-overflow:txmempool.cpp\n unsigned-integer-overflow:util/strencodings.cpp\n unsigned-integer-overflow:validation.cpp\n+\n+implicit-integer-sign-change:*/include/c++/*/bits/*.h\n+implicit-integer-sign-change:*/new_allocator.h\n+implicit-integer-sign-change:/usr/include/boost/date_time/format_date_parser.hpp\n+implicit-integer-sign-change:arith_uint256.cpp\n+implicit-integer-sign-change:bech32.cpp\n+implicit-integer-sign-change:bloom.cpp\n+implicit-integer-sign-change:chain.*\n+implicit-integer-sign-change:coins.h\n+implicit-integer-sign-change:compat/stdin.cpp\n+implicit-integer-sign-change:compressor.h\n+implicit-integer-sign-change:crypto/*\n+implicit-integer-sign-change:key.cpp\n+implicit-integer-sign-change:noui.cpp\n+implicit-integer-sign-change:prevector.h\n+implicit-integer-sign-change:protocol.cpp\n+implicit-integer-sign-change:script/bitcoinconsensus.cpp\n+implicit-integer-sign-change:script/interpreter.cpp\n+implicit-integer-sign-change:serialize.h\n+implicit-integer-sign-change:test/arith_uint256_tests.cpp\n+implicit-integer-sign-change:test/coins_tests.cpp\n+implicit-integer-sign-change:test/pow_tests.cpp\n+implicit-integer-sign-change:test/prevector_tests.cpp\n+implicit-integer-sign-change:test/sighash_tests.cpp\n+implicit-integer-sign-change:test/streams_tests.cpp\n+implicit-integer-sign-change:test/transaction_tests.cpp\n+implicit-integer-sign-change:txmempool.cpp\n+implicit-integer-sign-change:util/strencodings.*\n+implicit-integer-sign-change:validation.cpp\n+implicit-integer-sign-change:zmq/zmqpublishnotifier.cpp\n+implicit-signed-integer-truncation,implicit-integer-sign-change:chain.h\n+implicit-signed-integer-truncation,implicit-integer-sign-change:test/skiplist_tests.cpp\n+implicit-signed-integer-truncation:chain.h\n+implicit-signed-integer-truncation:crypto/*\n+implicit-signed-integer-truncation:cuckoocache.h\n+implicit-signed-integer-truncation:leveldb/*\n+implicit-signed-integer-truncation:streams.h\n+implicit-signed-integer-truncation:test/arith_uint256_tests.cpp\n+implicit-signed-integer-truncation:test/skiplist_tests.cpp\n+implicit-signed-integer-truncation:torcontrol.cpp\n+implicit-unsigned-integer-truncation:crypto/*\n+implicit-unsigned-integer-truncation:leveldb/*"
      }
    ]
  },
  {
    "sha": "5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWVlMGUyMTYzY2MwMmNkZjFjZDZiZWM2OWJmYmI1MTNiYjMwMmQ1",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-04T19:32:43Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-04T19:59:12Z"
      },
      "message": "Merge #17650: util: remove unwanted fields from bitcoin-cli -getinfo\n\n01c87015597021bf1c0856f7f6be175bdde844b2 util: remove unwanted fields from bitcoin-cli -getinfo (malevolent)\n\nPull request description:\n\n  Removed the following fields from -getinfo: protocolversion, walletversion and keypoololdest. This change closes #17314 .\n\nACKs for top commit:\n  laanwj:\n    ACK 01c87015597021bf1c0856f7f6be175bdde844b2\n  achow101:\n    ACK 01c87015597021bf1c0856f7f6be175bdde844b2\n  practicalswift:\n    ACK 01c87015597021bf1c0856f7f6be175bdde844b2 -- diff looks correct\n\nTree-SHA512: c98f2e8a3fee04d46766f70cb88f4e49e892a4424eff8940a7d48e9e808597b702427225788f984f5c3641591fd8d86acee56774afde1d57a4259c31d971ea08",
      "tree": {
        "sha": "a08943f5513ff4300b83be4d6549a42c61a663fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a08943f5513ff4300b83be4d6549a42c61a663fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3oEBAACgkQLuufXMCV\nJsE6mhAAui0DPjE4TjsnRtJ41Nvx3o4S1HhJcZJAQ+IgO87OjQ/kv2R4spx2kJGO\ns71AZ15FQ48grlrw3V+S8oo0y5FbCgbnvTdDglHcD9EWvDBSGe0YWytCo1Xj5vvF\n2INInZIM4GwQAjec6rc6ZeAfD9/qO/MkYYbXXCmW0iv/fdQw1H4FbiTr6/M6JXxP\nzhpIdsYpkP07wpdrKY5HC42n0asW/mIVL1JJb/tOWdDgNpQtSRgEPeiZLzkQOB0f\n2EdqD23Lekvml/5ELWuC1tMRompXYqAwCwg0roMql2F18OdPQrzjeS1kWTR+p6kh\n86gmCNE5thuFx/QnevuSabVaXJjuKNlKHfoHnQD4oMIwZfqVcLYkse2SZWOkNjxE\n0/gi2JGwwezAVNhC1T7sKD9Mtt7t4UeXV1eE0WhbQB+oPe76kiqxRhDUhuD+QcS3\n2xUwdY3xexQkW0itSYj/8zQKnFlpXYKONbVRlw+o33n7reVh+dqfzfzdusUU23De\nXCHgdOoMlbUNmo111RFomNc7vQJoj4EixlfIZO4g+O4uCyd8FdNZnzUHNr+zvPr/\n8dZ7iyjFao8A7P3nILaIvOSmYO1LZ6M4d8qtZf21HpfoeAgNXB8VClNY2WS/ly4F\nyfKYX7yya6RiQFD3lQs8Ev0+VeKFW/Lx0+WONhZzqa3y8Xv/0kE=\n=iNSZ\n-----END PGP SIGNATURE-----",
        "payload": "tree a08943f5513ff4300b83be4d6549a42c61a663fb\nparent fee01bb053639f9e066ffb7ca72d7a5cb005d4b3\nparent 01c87015597021bf1c0856f7f6be175bdde844b2\nauthor fanquake <fanquake@gmail.com> 1575487963 -0500\ncommitter fanquake <fanquake@gmail.com> 1575489552 -0500\n\nMerge #17650: util: remove unwanted fields from bitcoin-cli -getinfo\n\n01c87015597021bf1c0856f7f6be175bdde844b2 util: remove unwanted fields from bitcoin-cli -getinfo (malevolent)\n\nPull request description:\n\n  Removed the following fields from -getinfo: protocolversion, walletversion and keypoololdest. This change closes #17314 .\n\nACKs for top commit:\n  laanwj:\n    ACK 01c87015597021bf1c0856f7f6be175bdde844b2\n  achow101:\n    ACK 01c87015597021bf1c0856f7f6be175bdde844b2\n  practicalswift:\n    ACK 01c87015597021bf1c0856f7f6be175bdde844b2 -- diff looks correct\n\nTree-SHA512: c98f2e8a3fee04d46766f70cb88f4e49e892a4424eff8940a7d48e9e808597b702427225788f984f5c3641591fd8d86acee56774afde1d57a4259c31d971ea08\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fee01bb053639f9e066ffb7ca72d7a5cb005d4b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fee01bb053639f9e066ffb7ca72d7a5cb005d4b3"
      },
      {
        "sha": "01c87015597021bf1c0856f7f6be175bdde844b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01c87015597021bf1c0856f7f6be175bdde844b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01c87015597021bf1c0856f7f6be175bdde844b2"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 0,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1035e730b8071e7e92becb6811f830ed9bd40ff0",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5",
        "patch": "@@ -256,7 +256,6 @@ class GetinfoRequestHandler: public BaseRequestHandler\n             return batch[ID_BLOCKCHAININFO];\n         }\n         result.pushKV(\"version\", batch[ID_NETWORKINFO][\"result\"][\"version\"]);\n-        result.pushKV(\"protocolversion\", batch[ID_NETWORKINFO][\"result\"][\"protocolversion\"]);\n         result.pushKV(\"blocks\", batch[ID_BLOCKCHAININFO][\"result\"][\"blocks\"]);\n         result.pushKV(\"headers\", batch[ID_BLOCKCHAININFO][\"result\"][\"headers\"]);\n         result.pushKV(\"verificationprogress\", batch[ID_BLOCKCHAININFO][\"result\"][\"verificationprogress\"]);\n@@ -266,9 +265,7 @@ class GetinfoRequestHandler: public BaseRequestHandler\n         result.pushKV(\"difficulty\", batch[ID_BLOCKCHAININFO][\"result\"][\"difficulty\"]);\n         result.pushKV(\"chain\", UniValue(batch[ID_BLOCKCHAININFO][\"result\"][\"chain\"]));\n         if (!batch[ID_WALLETINFO][\"result\"].isNull()) {\n-            result.pushKV(\"walletversion\", batch[ID_WALLETINFO][\"result\"][\"walletversion\"]);\n             result.pushKV(\"balance\", batch[ID_WALLETINFO][\"result\"][\"balance\"]);\n-            result.pushKV(\"keypoololdest\", batch[ID_WALLETINFO][\"result\"][\"keypoololdest\"]);\n             result.pushKV(\"keypoolsize\", batch[ID_WALLETINFO][\"result\"][\"keypoolsize\"]);\n             if (!batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"].isNull()) {\n                 result.pushKV(\"unlocked_until\", batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"]);"
      },
      {
        "sha": "f04a58cd19698a853eb345d7128040fb62f543a5",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5",
        "patch": "@@ -59,17 +59,14 @@ def run_test(self):\n         blockchain_info = self.nodes[0].getblockchaininfo()\n \n         assert_equal(cli_get_info['version'], network_info['version'])\n-        assert_equal(cli_get_info['protocolversion'], network_info['protocolversion'])\n         assert_equal(cli_get_info['blocks'], blockchain_info['blocks'])\n         assert_equal(cli_get_info['timeoffset'], network_info['timeoffset'])\n         assert_equal(cli_get_info['connections'], network_info['connections'])\n         assert_equal(cli_get_info['proxy'], network_info['networks'][0]['proxy'])\n         assert_equal(cli_get_info['difficulty'], blockchain_info['difficulty'])\n         assert_equal(cli_get_info['chain'], blockchain_info['chain'])\n         if self.is_wallet_compiled():\n-            assert_equal(cli_get_info['walletversion'], wallet_info['walletversion'])\n             assert_equal(cli_get_info['balance'], wallet_info['balance'])\n-            assert_equal(cli_get_info['keypoololdest'], wallet_info['keypoololdest'])\n             assert_equal(cli_get_info['keypoolsize'], wallet_info['keypoolsize'])\n             assert_equal(cli_get_info['paytxfee'], wallet_info['paytxfee'])\n             assert_equal(cli_get_info['relayfee'], network_info['relayfee'])"
      }
    ]
  },
  {
    "sha": "b11d35b5e2dd09ab816d688d8ac0264b43f7f844",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTFkMzViNWUyZGQwOWFiODE2ZDY4OGQ4YWMwMjY0YjQzZjdmODQ0",
    "commit": {
      "author": {
        "name": "willyk",
        "email": "wko@blockchainfoundry.co",
        "date": "2019-12-05T00:30:29Z"
      },
      "committer": {
        "name": "Willy Ko",
        "email": "wko@blockchainfoundry.co",
        "date": "2019-12-05T10:21:09Z"
      },
      "message": "Fixed wget call in gitian-build.py",
      "tree": {
        "sha": "f07b3b73a787c89dcb0f1b06387c7655ec7787c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f07b3b73a787c89dcb0f1b06387c7655ec7787c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b11d35b5e2dd09ab816d688d8ac0264b43f7f844",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b11d35b5e2dd09ab816d688d8ac0264b43f7f844",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b11d35b5e2dd09ab816d688d8ac0264b43f7f844",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b11d35b5e2dd09ab816d688d8ac0264b43f7f844/comments",
    "author": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e38fa6fcb01271feb77e8af263f54e9ffc375f6c",
        "filename": "contrib/gitian-build.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11d35b5e2dd09ab816d688d8ac0264b43f7f844/contrib/gitian-build.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11d35b5e2dd09ab816d688d8ac0264b43f7f844/contrib/gitian-build.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.py?ref=b11d35b5e2dd09ab816d688d8ac0264b43f7f844",
        "patch": "@@ -51,7 +51,7 @@ def build():\n     os.chdir('gitian-builder')\n     os.makedirs('inputs', exist_ok=True)\n \n-    subprocess.check_call(['wget', '-O' 'osslsigncode-2.0.tar.gz' '-N', '-P', 'inputs', 'https://github.com/mtrojnar/osslsigncode/archive/2.0.tar.gz'])\n+    subprocess.check_call(['wget', '-O', 'inputs/osslsigncode-2.0.tar.gz', 'https://github.com/mtrojnar/osslsigncode/archive/2.0.tar.gz'])\n     subprocess.check_call([\"echo '5a60e0a4b3e0b4d655317b2f12a810211c50242138322b16e7e01c6fbb89d92f inputs/osslsigncode-2.0.tar.gz' | sha256sum -c\"], shell=True)\n     subprocess.check_call(['make', '-C', '../bitcoin/depends', 'download', 'SOURCES_PATH=' + os.getcwd() + '/cache/common'])\n "
      },
      {
        "sha": "36d79a0c34dec300a9c65ef85407d7c762296ffb",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11d35b5e2dd09ab816d688d8ac0264b43f7f844/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11d35b5e2dd09ab816d688d8ac0264b43f7f844/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=b11d35b5e2dd09ab816d688d8ac0264b43f7f844",
        "patch": "@@ -116,7 +116,7 @@ Ensure gitian-builder is up-to-date:\n \n     pushd ./gitian-builder\n     mkdir -p inputs\n-    wget -O osslsigncode-2.0.tar.gz -P inputs https://github.com/mtrojnar/osslsigncode/archive/2.0.tar.gz\n+    wget -O inputs/osslsigncode-2.0.tar.gz https://github.com/mtrojnar/osslsigncode/archive/2.0.tar.gz\n     echo '5a60e0a4b3e0b4d655317b2f12a810211c50242138322b16e7e01c6fbb89d92f inputs/osslsigncode-2.0.tar.gz' | sha256sum -c\n     popd\n "
      }
    ]
  },
  {
    "sha": "1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjlkNWFmNGYxOTdlN2NjMDQ2OWEwYmIyNWRjYmM1MWRmYTUzN2Y0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-05T10:46:55Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-05T10:54:18Z"
      },
      "message": "tests: Add initialization order fiasco detection in Travis",
      "tree": {
        "sha": "8d1f7a4a9ab5cd04f1a1b728fe946bfb3aeef3bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d1f7a4a9ab5cd04f1a1b728fe946bfb3aeef3bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5aa788e07d9c212ebea31875bd96f06596ec9b65",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4",
        "patch": "@@ -33,7 +33,7 @@ fi\n mkdir -p \"${BASE_SCRATCH_DIR}\"\n mkdir -p \"${CCACHE_DIR}\"\n \n-export ASAN_OPTIONS=\"detect_stack_use_after_return=1\"\n+export ASAN_OPTIONS=\"detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1\"\n export LSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/lsan\"\n export TSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/tsan:log_path=${BASE_SCRATCH_DIR}/sanitizer-output/tsan\"\n export UBSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1\""
      }
    ]
  },
  {
    "sha": "ba0cad2702e01860d3539f170343d8d9f9c5b75a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTBjYWQyNzAyZTAxODYwZDM1MzlmMTcwMzQzZDhkOWY5YzViNzVh",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-03T22:45:55Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-05T13:41:15Z"
      },
      "message": "build: pass -dead_strip_dylibs to ld on macOS\n\nThis strips some unused dylibs from bitcoin-qt.\n\nFrom man ld:\nRemove dylibs that are unreachable by the entry point or exported symbols. \nThat is, suppresses the generation of load command commands for dylibs \nwhich supplied no symbols during the link. This option should not be \nused when linking against a dylib which is required at runtime for \nsome indirect reason such as the dylib has an important initializer.",
      "tree": {
        "sha": "c221b4f1afcc5e796a97a5e49d3250f28e89a8e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c221b4f1afcc5e796a97a5e49d3250f28e89a8e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba0cad2702e01860d3539f170343d8d9f9c5b75a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3pCPsACgkQLuufXMCV\nJsFUzg//T0w3iXhBdwalmIsbkY6m5c6a2v6njD3KIARzMh3/uk/qVWxLbBNI/oFP\n389rtjQnREJddlapxXFQTK2OwAelYW3WqPUjQ/O3b52mQJkiFg2jdIeMflREFHxt\nRPEytKUGAkJ6XQ0m2igC4dqSotFyyUtrMmy0PDx5/b9EODHhUdNS2KexyHZj4YLj\nwQTgLtC4wIcSijqC8sZo0pZq1CEGvVHfTeYEdeB9SjoK9c3eiD/AXDA4UU14LIy2\njtYJnEEIcT3oxDMC+foCL1mVCTmbfyXZxX83fdvk9DCKe26FtviH8yCUDbAap/Mf\njV2VBDsITFNMg8hOX1AjDsPAT/Oudfu2imwzy2FC/XqIhGG3UGMQGYt1/iSWQ0jn\nDUHAc++xdhvH8wCV+Z6/BIWTn8+2cVlIuE/C1BVaGSsUFR8Ch+iDdNrtvY0bqo2M\nlZ97ODey4tiM0MpCwErRKD3jkwlA2GbxoVgNAGAnP8iIEdm4H5CvNXnrMpNKiggF\nihZ2x10MbzoG/KXplLcK+PZNWBjMGUqg3nos0UkL5wcVhu6uOCmou8blA5/jIe/5\nv/z8WwBdAkx7GcAhpXIaYoOICgPA3pi0gEicVb/nUTv3EFQQ/wn9H6444d1oQthw\nK5gqAYpA1sR6rF2NBp7KNJ2Ewqq0vFwKXeD0cvQ+XdNM9Qn+2K0=\n=Kgyk\n-----END PGP SIGNATURE-----",
        "payload": "tree c221b4f1afcc5e796a97a5e49d3250f28e89a8e3\nparent 5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5\nauthor fanquake <fanquake@gmail.com> 1575413155 -0500\ncommitter fanquake <fanquake@gmail.com> 1575553275 -0500\n\nbuild: pass -dead_strip_dylibs to ld on macOS\n\nThis strips some unused dylibs from bitcoin-qt.\n\nFrom man ld:\nRemove dylibs that are unreachable by the entry point or exported symbols. \nThat is, suppresses the generation of load command commands for dylibs \nwhich supplied no symbols during the link. This option should not be \nused when linking against a dylib which is required at runtime for \nsome indirect reason such as the dylib has an important initializer.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba0cad2702e01860d3539f170343d8d9f9c5b75a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba0cad2702e01860d3539f170343d8d9f9c5b75a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba0cad2702e01860d3539f170343d8d9f9c5b75a/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e0bec0882e79a080f57e0bd4150e9ccc774be342",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba0cad2702e01860d3539f170343d8d9f9c5b75a/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba0cad2702e01860d3539f170343d8d9f9c5b75a/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=ba0cad2702e01860d3539f170343d8d9f9c5b75a",
        "patch": "@@ -783,6 +783,7 @@ fi\n dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip_dylibs]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip_dylibs\"])\n fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])"
      }
    ]
  },
  {
    "sha": "2359a4790d93ffd17b8afc2fea3775dd858ef50d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzU5YTQ3OTBkOTNmZmQxN2I4YWZjMmZlYTM3NzVkZDg1OGVmNTBk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-05T13:42:03Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-05T14:07:03Z"
      },
      "message": "depends: don't use OpenGL in Qt on macOS",
      "tree": {
        "sha": "a0366297ab02e8593c821a0b496ef395c5d91b8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0366297ab02e8593c821a0b496ef395c5d91b8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2359a4790d93ffd17b8afc2fea3775dd858ef50d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3pDwcACgkQLuufXMCV\nJsG97w//XEGChYEvHK/fbGQ4rUKR3p9WD8yByRU9B0PS9FR6JL97wE9cwLTi/EuP\n1ABPtgBPKFY3PFakPa038owVuRZ2D6qi7ETEa6s2NhC2mB7lw1sy/RX0qS8Mzqbc\nJGdIiZ7cLqKXvkKvcPA20bJoF4PbtQ2sdMAE34fulCbXXGH/w9NcLYAhwi/2X3dh\nFDYOeBb6Ojwi3fKB/Wucrxz7/oGPyAgGgLrLINmbbXxV5RupsaMuIcSSDqw67l8w\n+aUY3tfqU7W0tBGiXjLv6JvOTYtJeyDb3eO5Dp2fFCpgbdOXa42Rz8cFH1SppqU8\nhAdz5iSPQAzvW58g0wLixpywx41GtsPMCDb/HUr8rj/WtipeYwrJ0lTWAGQAzdLQ\n149TH6HgFSxKGyjrAop0eNLtBh7J2WqblqVLCGMwzK8ydnjnTs4liKhSIE5Mc1oS\nvehiqUAL4k5EkTAxrdAtV6MyyN08UVgEyHbeAbMx3QA44uwZmMCce/ki2bJw0r7y\nQx4s/w4tL5hI5+BVIQ+pJvu3EdjhScGFw/YOtssGcg2NHTpVWSTTIfEGpC2zYNCz\nEdU3FG+AQdsATbzYNMQRHjwtjEfncvY5LmCyFdM26BrrUw6qTh5AsULvgX/BHlqu\n243V9xDpeVFbwIFeapirEnxp1zU0QsffHcLP58gjJmNsM7aw9Ks=\n=KEsu\n-----END PGP SIGNATURE-----",
        "payload": "tree a0366297ab02e8593c821a0b496ef395c5d91b8f\nparent ba0cad2702e01860d3539f170343d8d9f9c5b75a\nauthor fanquake <fanquake@gmail.com> 1575553323 -0500\ncommitter fanquake <fanquake@gmail.com> 1575554823 -0500\n\ndepends: don't use OpenGL in Qt on macOS\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2359a4790d93ffd17b8afc2fea3775dd858ef50d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2359a4790d93ffd17b8afc2fea3775dd858ef50d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2359a4790d93ffd17b8afc2fea3775dd858ef50d/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba0cad2702e01860d3539f170343d8d9f9c5b75a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba0cad2702e01860d3539f170343d8d9f9c5b75a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba0cad2702e01860d3539f170343d8d9f9c5b75a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f1d234ccf6dd8ebe626770da448f4f16e119bc01",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2359a4790d93ffd17b8afc2fea3775dd858ef50d/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2359a4790d93ffd17b8afc2fea3775dd858ef50d/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=2359a4790d93ffd17b8afc2fea3775dd858ef50d",
        "patch": "@@ -105,6 +105,7 @@ $(package)_config_opts += -no-feature-wizard\n $(package)_config_opts += -no-feature-xml\n \n $(package)_config_opts_darwin = -no-dbus\n+$(package)_config_opts_darwin += -no-opengl\n \n ifneq ($(build_os),darwin)\n $(package)_config_opts_darwin += -xplatform macx-clang-linux"
      }
    ]
  },
  {
    "sha": "6fff333c9f00cf379562ed38c2599997f9821cfb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmZmMzMzYzlmMDBjZjM3OTU2MmVkMzhjMjU5OTk5N2Y5ODIxY2Zi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-05T14:14:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-05T14:14:42Z"
      },
      "message": "Merge #17507: random: mark RandAddPeriodic and SeedPeriodic as noexcept\n\n55b2cb199c276781b6daa5438af2da57dea3ac52 random: mark RandAddPeriodic and SeedPeriodic as noexcept (fanquake)\n461e547877da0c04db69e067c923cc4540aab03a doc: correct random.h docs after #17270 (fanquake)\n\nPull request description:\n\n  The usage of `MilliSleep()` in SeedPeriodic (previously SeedSleep) was\n  [removed](https://github.com/bitcoin/bitcoin/pull/17270/commits/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a) in #17270, meaning it, and its users can now be marked `noexcept`.\n\n  This also corrects the docs in random.h for some of the changes in #17270.\n\nACKs for top commit:\n  practicalswift:\n    ACK 55b2cb199c276781b6daa5438af2da57dea3ac52\n  laanwj:\n    ACK 55b2cb199c276781b6daa5438af2da57dea3ac52\n  sipa:\n    ACK 55b2cb199c276781b6daa5438af2da57dea3ac52\n\nTree-SHA512: 672d369796e7c4f9b4d98dc545e5454999fa1bef373871994a26041d6163c58909e2255e4f820d3ef011679aa3392754eb57477306a89f5fd3d57e2bd7f0811a",
      "tree": {
        "sha": "6f15049cb00f89df5274f4bb012095e3d6c96b28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f15049cb00f89df5274f4bb012095e3d6c96b28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fff333c9f00cf379562ed38c2599997f9821cfb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3pENIACgkQHkrtYphs\n0l1ZBAf5AaGNnF6vq74Usi//d08rkOUP+QadEf8G+AOCY48dTzM7vUf1rbhSEyu4\nutoMG0C5hnhkHowyofqtEqA1mwY68UC4mngKbC/u88mQUr0Fonpfkied8x2Qrc/4\nDxU0rsF3PGIFoXRgPTMb2/WSLCLIydleOX/GMLSBSX4Cl2nNDczCR35UJfGeprDZ\nqsiWDBDde9YUG+7uXKVKbjFHncn4TT5j+tf/LToMfh1D8r8KXkbejR6V4u4L1h19\nN0QeCZaEKcotI2j2cq5D46opSzW248iF9e0JXzmpcvXvNj6Rata/J2ppVh8Qncez\npXDfbFNu8e942uZsGjdTbom44K12lQ==\n=ISbq\n-----END PGP SIGNATURE-----",
        "payload": "tree 6f15049cb00f89df5274f4bb012095e3d6c96b28\nparent 5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5\nparent 55b2cb199c276781b6daa5438af2da57dea3ac52\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1575555264 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1575555282 +0100\n\nMerge #17507: random: mark RandAddPeriodic and SeedPeriodic as noexcept\n\n55b2cb199c276781b6daa5438af2da57dea3ac52 random: mark RandAddPeriodic and SeedPeriodic as noexcept (fanquake)\n461e547877da0c04db69e067c923cc4540aab03a doc: correct random.h docs after #17270 (fanquake)\n\nPull request description:\n\n  The usage of `MilliSleep()` in SeedPeriodic (previously SeedSleep) was\n  [removed](https://github.com/bitcoin/bitcoin/pull/17270/commits/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a) in #17270, meaning it, and its users can now be marked `noexcept`.\n\n  This also corrects the docs in random.h for some of the changes in #17270.\n\nACKs for top commit:\n  practicalswift:\n    ACK 55b2cb199c276781b6daa5438af2da57dea3ac52\n  laanwj:\n    ACK 55b2cb199c276781b6daa5438af2da57dea3ac52\n  sipa:\n    ACK 55b2cb199c276781b6daa5438af2da57dea3ac52\n\nTree-SHA512: 672d369796e7c4f9b4d98dc545e5454999fa1bef373871994a26041d6163c58909e2255e4f820d3ef011679aa3392754eb57477306a89f5fd3d57e2bd7f0811a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fff333c9f00cf379562ed38c2599997f9821cfb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fff333c9f00cf379562ed38c2599997f9821cfb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fff333c9f00cf379562ed38c2599997f9821cfb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5aee0e2163cc02cdf1cd6bec69bfbb513bb302d5"
      },
      {
        "sha": "55b2cb199c276781b6daa5438af2da57dea3ac52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55b2cb199c276781b6daa5438af2da57dea3ac52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55b2cb199c276781b6daa5438af2da57dea3ac52"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 12,
      "deletions": 22
    },
    "files": [
      {
        "sha": "fd1dfe506fe1a753c7f47eb8e98f5aa1585c8f4b",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 14,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fff333c9f00cf379562ed38c2599997f9821cfb/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fff333c9f00cf379562ed38c2599997f9821cfb/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=6fff333c9f00cf379562ed38c2599997f9821cfb",
        "patch": "@@ -179,7 +179,7 @@ static uint64_t GetRdSeed() noexcept\n /* Access to other hardware random number generators could be added here later,\n  * assuming it is sufficiently fast (in the order of a few hundred CPU cycles).\n  * Slower sources should probably be invoked separately, and/or only from\n- * RandAddSeedSleep (which is called during idle background operation).\n+ * RandAddPeriodic (which is called once a minute).\n  */\n static void InitHardwareRand() {}\n static void ReportHardwareRand() {}\n@@ -416,17 +416,7 @@ RNGState& GetRNGState() noexcept\n \n /* A note on the use of noexcept in the seeding functions below:\n  *\n- * None of the RNG code should ever throw any exception, with the sole exception\n- * of MilliSleep in SeedSleep, which can (and does) support interruptions which\n- * cause a boost::thread_interrupted to be thrown.\n- *\n- * This means that SeedSleep, and all functions that invoke it are throwing.\n- * However, we know that GetRandBytes() and GetStrongRandBytes() never trigger\n- * this sleeping logic, so they are noexcept. The same is true for all the\n- * GetRand*() functions that use GetRandBytes() indirectly.\n- *\n- * TODO: After moving away from interruptible boost-based thread management,\n- * everything can become noexcept here.\n+ * None of the RNG code should ever throw any exception.\n  */\n \n static void SeedTimestamp(CSHA512& hasher) noexcept\n@@ -498,7 +488,7 @@ static void SeedStrengthen(CSHA512& hasher, RNGState& rng, int microseconds) noe\n     Strengthen(strengthen_seed, microseconds, hasher);\n }\n \n-static void SeedPeriodic(CSHA512& hasher, RNGState& rng)\n+static void SeedPeriodic(CSHA512& hasher, RNGState& rng) noexcept\n {\n     // Everything that the 'fast' seeder includes\n     SeedFast(hasher);\n@@ -575,7 +565,7 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level)\n \n void GetRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::FAST); }\n void GetStrongRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::SLOW); }\n-void RandAddPeriodic() { ProcRand(nullptr, 0, RNGLevel::PERIODIC); }\n+void RandAddPeriodic() noexcept { ProcRand(nullptr, 0, RNGLevel::PERIODIC); }\n \n void RandAddEvent(const uint32_t event_info) {\n     LOCK(events_mutex);"
      },
      {
        "sha": "82dd6ecf9f170e05f243c3850baccd5b2fcd4f8b",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fff333c9f00cf379562ed38c2599997f9821cfb/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fff333c9f00cf379562ed38c2599997f9821cfb/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=6fff333c9f00cf379562ed38c2599997f9821cfb",
        "patch": "@@ -40,17 +40,17 @@\n  *   These entropy sources are slower, but designed to make sure the RNG state contains\n  *   fresh data that is unpredictable to attackers.\n  *\n- * - RandAddSeedSleep() seeds everything that fast seeding includes, but additionally:\n- *   - A high-precision timestamp before and after sleeping 1ms.\n- *   - (On Windows) Once every 10 minutes, performance monitoring data from the OS.\n- -   - Once every minute, strengthen the entropy for 10 ms using repeated SHA512.\n- *   These just exploit the fact the system is idle to improve the quality of the RNG\n- *   slightly.\n+ * - RandAddPeriodic() seeds everything that fast seeding includes, but additionally:\n+ *   - A high-precision timestamp\n+ *   - Dynamic environment data (performance monitoring, ...)\n+ *   - Strengthen the entropy for 10 ms using repeated SHA512.\n+ *   This is run once every minute.\n  *\n  * On first use of the RNG (regardless of what function is called first), all entropy\n  * sources used in the 'slow' seeder are included, but also:\n  * - 256 bits from the hardware RNG (rdseed or rdrand) when available.\n- * - (On Windows) Performance monitoring data from the OS.\n+ * - Dynamic environment data (performance monitoring, ...)\n+ * - Static environment data\n  * - Strengthen the entropy for 100 ms using repeated SHA512.\n  *\n  * When mixing in new entropy, H = SHA512(entropy || old_rng_state) is computed, and\n@@ -87,7 +87,7 @@ void GetStrongRandBytes(unsigned char* buf, int num) noexcept;\n  *\n  * Thread-safe.\n  */\n-void RandAddPeriodic();\n+void RandAddPeriodic() noexcept;\n \n /**\n  * Gathers entropy from the low bits of the time at which events occur. Should"
      }
    ]
  },
  {
    "sha": "989fd539d5bf590c5f6070ee2a4a9e2d3018df2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODlmZDUzOWQ1YmY1OTBjNWY2MDcwZWUyYTRhOWUyZDMwMThkZjJj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-08-23T07:27:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-05T17:06:28Z"
      },
      "message": "depends: Support for 64-bit POWER targets",
      "tree": {
        "sha": "c99cd9c9d1ea0e0ee4182a9cb7e0e8e53723f5a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c99cd9c9d1ea0e0ee4182a9cb7e0e8e53723f5a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/989fd539d5bf590c5f6070ee2a4a9e2d3018df2c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/989fd539d5bf590c5f6070ee2a4a9e2d3018df2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/989fd539d5bf590c5f6070ee2a4a9e2d3018df2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/989fd539d5bf590c5f6070ee2a4a9e2d3018df2c/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fff333c9f00cf379562ed38c2599997f9821cfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fff333c9f00cf379562ed38c2599997f9821cfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fff333c9f00cf379562ed38c2599997f9821cfb"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b91e31c91de7579c425ba54d08d11106299fb9f5",
        "filename": "depends/.gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/989fd539d5bf590c5f6070ee2a4a9e2d3018df2c/depends/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/989fd539d5bf590c5f6070ee2a4a9e2d3018df2c/depends/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/.gitignore?ref=989fd539d5bf590c5f6070ee2a4a9e2d3018df2c",
        "patch": "@@ -8,5 +8,6 @@ i686*\n mips*\n arm*\n aarch64*\n+powerpc*\n riscv32*\n riscv64*"
      },
      {
        "sha": "4784207191007d07f5b50f79a646d18106d1932c",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/989fd539d5bf590c5f6070ee2a4a9e2d3018df2c/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/989fd539d5bf590c5f6070ee2a4a9e2d3018df2c/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=989fd539d5bf590c5f6070ee2a4a9e2d3018df2c",
        "patch": "@@ -186,7 +186,7 @@ $(host_prefix)/share/config.site: check-packages\n check-packages: check-sources\n \n clean-all: clean\n-\t@rm -rf $(SOURCES_PATH) x86_64* i686* mips* arm* aarch64* riscv32* riscv64*\n+\t@rm -rf $(SOURCES_PATH) x86_64* i686* mips* arm* aarch64* powerpc* riscv32* riscv64*\n \n clean:\n \t@rm -rf $(WORK_PATH) $(BASE_CACHE) $(BUILD)"
      },
      {
        "sha": "8f915aef36949ee324a7cdf548e0fb5c4194b969",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/989fd539d5bf590c5f6070ee2a4a9e2d3018df2c/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/989fd539d5bf590c5f6070ee2a4a9e2d3018df2c/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=989fd539d5bf590c5f6070ee2a4a9e2d3018df2c",
        "patch": "@@ -28,6 +28,8 @@ Common `host-platform-triplets` for cross compilation are:\n - `x86_64-apple-darwin16` for macOS\n - `arm-linux-gnueabihf` for Linux ARM 32 bit\n - `aarch64-linux-gnu` for Linux ARM 64 bit\n+- `powerpc64-linux-gnu` for Linux POWER 64-bit (big endian)\n+- `powerpc64le-linux-gnu` for Linux POWER 64-bit (little endian)\n - `riscv32-linux-gnu` for Linux RISC-V 32 bit\n - `riscv64-linux-gnu` for Linux RISC-V 64 bit\n - `armv7a-linux-android` for Android ARM 32 bit\n@@ -61,6 +63,10 @@ For linux AARCH64 cross compilation:\n \n     sudo apt-get install g++-aarch64-linux-gnu binutils-aarch64-linux-gnu\n \n+For linux POWER 64-bit cross compilation (there are no packages for 32-bit):\n+\n+    sudo apt-get install g++-powerpc64-linux-gnu binutils-powerpc64-linux-gnu g++-powerpc64le-linux-gnu binutils-powerpc64le-linux-gnu\n+\n For linux RISC-V 64-bit cross compilation (there are no packages for 32-bit):\n \n     sudo apt-get install g++-riscv64-linux-gnu binutils-riscv64-linux-gnu"
      },
      {
        "sha": "6f7d630f4c3b7036a6fdeee53868b1ff6edf3d57",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/989fd539d5bf590c5f6070ee2a4a9e2d3018df2c/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/989fd539d5bf590c5f6070ee2a4a9e2d3018df2c/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=989fd539d5bf590c5f6070ee2a4a9e2d3018df2c",
        "patch": "@@ -128,6 +128,8 @@ $(package)_config_opts_arm_linux += -platform linux-g++ -xplatform bitcoin-linux\n $(package)_config_opts_i686_linux  = -xplatform linux-g++-32\n $(package)_config_opts_x86_64_linux = -xplatform linux-g++-64\n $(package)_config_opts_aarch64_linux = -xplatform linux-aarch64-gnu-g++\n+$(package)_config_opts_powerpc64_linux = -platform linux-g++ -xplatform bitcoin-linux-g++\n+$(package)_config_opts_powerpc64le_linux = -platform linux-g++ -xplatform bitcoin-linux-g++\n $(package)_config_opts_riscv64_linux = -platform linux-g++ -xplatform bitcoin-linux-g++\n \n $(package)_config_opts_mingw32 = -no-opengl"
      }
    ]
  },
  {
    "sha": "11113247c323c5b98debcb512fb9db9fe5a8e7cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTExMzI0N2MzMjNjNWI5OGRlYmNiNTEyZmI5ZGI5ZmU1YThlN2Nm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-05T17:15:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-05T17:12:46Z"
      },
      "message": "depends: Support for S390X targets",
      "tree": {
        "sha": "c31f6d24cff4ef84d1c6b74cba00143c1e8d6e14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c31f6d24cff4ef84d1c6b74cba00143c1e8d6e14"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11113247c323c5b98debcb512fb9db9fe5a8e7cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhCxwv/ffsoa46y4TRJ/LPk7L6SS6hykk++PABh/TlhlwmCYv9/9oZDNTZejtPR\nGKCwxy3uAxoGQ4i4hUrzcbPpd/OHhU/79+BtujRUSVlToxsRxfm7my0wKaaoyhTL\nVz+iQPJhAjrymMTzC47Tx3+WsHeFQsM/3qik208r1cQ2P6J5lqOgsBlPEy861+q2\nJMfZIxAAwV3SOufOLCpjSdCj3GQbAlnO6cZwrXrYFeWSrsadpZUQnWYoW5+vx3Gh\nWumTXL+T+xZ6qZJQM1puz0ubR3Lo1808RgZDfajLQf2qLUug8RFXEZTGVdWj0jh4\n/iKb44DPAzTEXYMl5IXAO3LksXqm8YuS7DKs2G/ewl3gA5nIRBU+yo8xxkUUPPHn\nv6IaKZY5wAB0azo0kU5B9NehM/OHW/pI6Ph/neELteZEWyLwhWFzyKWF+jgxgheq\n1iL3JM1vfhclCHV2WR1hZYEwCAVpEsGZT9M0EBGNcz2NkmKAnjO25dQcLSSr51o3\n88CMcqnz\n=2tgX\n-----END PGP SIGNATURE-----",
        "payload": "tree c31f6d24cff4ef84d1c6b74cba00143c1e8d6e14\nparent 989fd539d5bf590c5f6070ee2a4a9e2d3018df2c\nauthor MarcoFalke <falke.marco@gmail.com> 1575566148 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575565966 -0500\n\ndepends: Support for S390X targets\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11113247c323c5b98debcb512fb9db9fe5a8e7cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11113247c323c5b98debcb512fb9db9fe5a8e7cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11113247c323c5b98debcb512fb9db9fe5a8e7cf/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "989fd539d5bf590c5f6070ee2a4a9e2d3018df2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/989fd539d5bf590c5f6070ee2a4a9e2d3018df2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/989fd539d5bf590c5f6070ee2a4a9e2d3018df2c"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "19c506ce5447d4b9099f741fd33f800d101bcf6d",
        "filename": "depends/.gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11113247c323c5b98debcb512fb9db9fe5a8e7cf/depends/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11113247c323c5b98debcb512fb9db9fe5a8e7cf/depends/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/.gitignore?ref=11113247c323c5b98debcb512fb9db9fe5a8e7cf",
        "patch": "@@ -11,3 +11,4 @@ aarch64*\n powerpc*\n riscv32*\n riscv64*\n+s390x*"
      },
      {
        "sha": "5b0b0d9688434e34fb1555b2c9e12ce5421754ad",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11113247c323c5b98debcb512fb9db9fe5a8e7cf/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11113247c323c5b98debcb512fb9db9fe5a8e7cf/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=11113247c323c5b98debcb512fb9db9fe5a8e7cf",
        "patch": "@@ -186,7 +186,7 @@ $(host_prefix)/share/config.site: check-packages\n check-packages: check-sources\n \n clean-all: clean\n-\t@rm -rf $(SOURCES_PATH) x86_64* i686* mips* arm* aarch64* powerpc* riscv32* riscv64*\n+\t@rm -rf $(SOURCES_PATH) x86_64* i686* mips* arm* aarch64* powerpc* riscv32* riscv64* s390x*\n \n clean:\n \t@rm -rf $(WORK_PATH) $(BASE_CACHE) $(BUILD)"
      },
      {
        "sha": "0449d295fed7f3b1c3f99ac4387030cf204719d7",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11113247c323c5b98debcb512fb9db9fe5a8e7cf/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11113247c323c5b98debcb512fb9db9fe5a8e7cf/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=11113247c323c5b98debcb512fb9db9fe5a8e7cf",
        "patch": "@@ -12,13 +12,13 @@ For example:\n \n     make HOST=x86_64-w64-mingw32 -j4\n \n-**Bitcoin's configure script by default will ignore the depends output.** In\n+**Bitcoin Core's configure script by default will ignore the depends output.** In\n order for it to pick up libraries, tools, and settings from the depends build,\n you must point it at the appropriate `--prefix` directory generated by the\n build. In the above example, a prefix dir named x86_64-w64-mingw32 will be\n created. To use it for Bitcoin:\n \n-    ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32\n+    ./configure --prefix=$PWD/depends/x86_64-w64-mingw32\n \n Common `host-platform-triplets` for cross compilation are:\n \n@@ -32,6 +32,7 @@ Common `host-platform-triplets` for cross compilation are:\n - `powerpc64le-linux-gnu` for Linux POWER 64-bit (little endian)\n - `riscv32-linux-gnu` for Linux RISC-V 32 bit\n - `riscv64-linux-gnu` for Linux RISC-V 64 bit\n+- `s390x-linux-gnu` for Linux S390X\n - `armv7a-linux-android` for Android ARM 32 bit\n - `aarch64-linux-android` for Android ARM 64 bit\n - `i686-linux-android` for Android x86 32 bit\n@@ -74,6 +75,10 @@ For linux RISC-V 64-bit cross compilation (there are no packages for 32-bit):\n RISC-V known issue: gcc-7.3.0 and gcc-7.3.1 result in a broken `test_bitcoin` executable (see https://github.com/bitcoin/bitcoin/pull/13543),\n this is apparently fixed in gcc-8.1.0.\n \n+For linux S390X cross compilation:\n+\n+    sudo apt-get install g++-s390x-linux-gnu binutils-s390x-linux-gnu\n+\n ### Dependency Options\n The following can be set when running make: make FOO=bar\n "
      },
      {
        "sha": "4d45f55e2d122e49de6880f1fd4e2760e12b97f9",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11113247c323c5b98debcb512fb9db9fe5a8e7cf/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11113247c323c5b98debcb512fb9db9fe5a8e7cf/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=11113247c323c5b98debcb512fb9db9fe5a8e7cf",
        "patch": "@@ -131,6 +131,7 @@ $(package)_config_opts_aarch64_linux = -xplatform linux-aarch64-gnu-g++\n $(package)_config_opts_powerpc64_linux = -platform linux-g++ -xplatform bitcoin-linux-g++\n $(package)_config_opts_powerpc64le_linux = -platform linux-g++ -xplatform bitcoin-linux-g++\n $(package)_config_opts_riscv64_linux = -platform linux-g++ -xplatform bitcoin-linux-g++\n+$(package)_config_opts_s390x_linux = -platform linux-g++ -xplatform bitcoin-linux-g++\n \n $(package)_config_opts_mingw32 = -no-opengl\n $(package)_config_opts_mingw32 += -no-dbus"
      }
    ]
  },
  {
    "sha": "8bda0960f94dfb6462fc810cd61a8a065730eb79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmRhMDk2MGY5NGRmYjY0NjJmYzgxMGNkNjFhOGEwNjU3MzBlYjc5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-12-04T23:14:43Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-12-05T17:49:11Z"
      },
      "message": "Move events_hasher into RNGState()",
      "tree": {
        "sha": "00f0858e156cb12eb2ff90b15f8d5dc033a6aff3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00f0858e156cb12eb2ff90b15f8d5dc033a6aff3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bda0960f94dfb6462fc810cd61a8a065730eb79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bda0960f94dfb6462fc810cd61a8a065730eb79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8bda0960f94dfb6462fc810cd61a8a065730eb79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bda0960f94dfb6462fc810cd61a8a065730eb79/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fff333c9f00cf379562ed38c2599997f9821cfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fff333c9f00cf379562ed38c2599997f9821cfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fff333c9f00cf379562ed38c2599997f9821cfb"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 40,
      "deletions": 33
    },
    "files": [
      {
        "sha": "50b84777336607365caa9975f4230d4793a3520d",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 32,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bda0960f94dfb6462fc810cd61a8a065730eb79/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bda0960f94dfb6462fc810cd61a8a065730eb79/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=8bda0960f94dfb6462fc810cd61a8a065730eb79",
        "patch": "@@ -360,6 +360,9 @@ class RNGState {\n     uint64_t m_counter GUARDED_BY(m_mutex) = 0;\n     bool m_strongly_seeded GUARDED_BY(m_mutex) = false;\n \n+    Mutex m_events_mutex;\n+    CSHA256 m_events_hasher GUARDED_BY(m_events_mutex);\n+\n public:\n     RNGState() noexcept\n     {\n@@ -370,6 +373,35 @@ class RNGState {\n     {\n     }\n \n+    void AddEvent(uint32_t event_info) noexcept\n+    {\n+        LOCK(m_events_mutex);\n+\n+        m_events_hasher.Write((const unsigned char *)&event_info, sizeof(event_info));\n+        // Get the low four bytes of the performance counter. This translates to roughly the\n+        // subsecond part.\n+        uint32_t perfcounter = (GetPerformanceCounter() & 0xffffffff);\n+        m_events_hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+    }\n+\n+    /**\n+     * Feed (the hash of) all events added through AddEvent() to hasher.\n+     */\n+    void SeedEvents(CSHA512& hasher) noexcept\n+    {\n+        // We use only SHA256 for the events hashing to get the ASM speedups we have for SHA256,\n+        // since we want it to be fast as network peers may be able to trigger it repeatedly.\n+        LOCK(m_events_mutex);\n+\n+        unsigned char events_hash[32];\n+        m_events_hasher.Finalize(events_hash);\n+        hasher.Write(events_hash, 32);\n+\n+        // Re-initialize the hasher with the finalized state to use later.\n+        m_events_hasher.Reset();\n+        m_events_hasher.Write(events_hash, 32);\n+    }\n+\n     /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n      *\n      * If this function has never been called with strong_seed = true, false is returned.\n@@ -440,24 +472,7 @@ static void SeedFast(CSHA512& hasher) noexcept\n     SeedTimestamp(hasher);\n }\n \n-// We use only SHA256 for the events hashing to get the ASM speedups we have for SHA256,\n-// since we want it to be fast as network peers may be able to trigger it repeatedly.\n-static Mutex events_mutex;\n-static CSHA256 events_hasher;\n-static void SeedEvents(CSHA512& hasher)\n-{\n-    LOCK(events_mutex);\n-\n-    unsigned char events_hash[32];\n-    events_hasher.Finalize(events_hash);\n-    hasher.Write(events_hash, 32);\n-\n-    // Re-initialize the hasher with the finalized state to use later.\n-    events_hasher.Reset();\n-    events_hasher.Write(events_hash, 32);\n-}\n-\n-static void SeedSlow(CSHA512& hasher) noexcept\n+static void SeedSlow(CSHA512& hasher, RNGState& rng) noexcept\n {\n     unsigned char buffer[32];\n \n@@ -469,7 +484,7 @@ static void SeedSlow(CSHA512& hasher) noexcept\n     hasher.Write(buffer, sizeof(buffer));\n \n     // Add the events hasher into the mix\n-    SeedEvents(hasher);\n+    rng.SeedEvents(hasher);\n \n     // High-precision timestamp.\n     //\n@@ -497,7 +512,7 @@ static void SeedPeriodic(CSHA512& hasher, RNGState& rng) noexcept\n     SeedTimestamp(hasher);\n \n     // Add the events hasher into the mix\n-    SeedEvents(hasher);\n+    rng.SeedEvents(hasher);\n \n     // Dynamic environment data (performance monitoring, ...)\n     auto old_size = hasher.Size();\n@@ -514,7 +529,7 @@ static void SeedStartup(CSHA512& hasher, RNGState& rng) noexcept\n     SeedHardwareSlow(hasher);\n \n     // Everything that the 'slow' seeder includes.\n-    SeedSlow(hasher);\n+    SeedSlow(hasher, rng);\n \n     // Dynamic environment data (performance monitoring, ...)\n     auto old_size = hasher.Size();\n@@ -534,7 +549,7 @@ enum class RNGLevel {\n     PERIODIC, //!< Called by RandAddPeriodic()\n };\n \n-static void ProcRand(unsigned char* out, int num, RNGLevel level)\n+static void ProcRand(unsigned char* out, int num, RNGLevel level) noexcept\n {\n     // Make sure the RNG is initialized first (as all Seed* function possibly need hwrand to be available).\n     RNGState& rng = GetRNGState();\n@@ -547,7 +562,7 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level)\n         SeedFast(hasher);\n         break;\n     case RNGLevel::SLOW:\n-        SeedSlow(hasher);\n+        SeedSlow(hasher, rng);\n         break;\n     case RNGLevel::PERIODIC:\n         SeedPeriodic(hasher, rng);\n@@ -566,15 +581,7 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level)\n void GetRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::FAST); }\n void GetStrongRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::SLOW); }\n void RandAddPeriodic() noexcept { ProcRand(nullptr, 0, RNGLevel::PERIODIC); }\n-\n-void RandAddEvent(const uint32_t event_info) {\n-    LOCK(events_mutex);\n-    events_hasher.Write((const unsigned char *)&event_info, sizeof(event_info));\n-    // Get the low four bytes of the performance counter. This translates to roughly the\n-    // subsecond part.\n-    uint32_t perfcounter = (GetPerformanceCounter() & 0xffffffff);\n-    events_hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n-}\n+void RandAddEvent(const uint32_t event_info) noexcept { GetRNGState().AddEvent(event_info); }\n \n bool g_mock_deterministic_tests{false};\n "
      },
      {
        "sha": "e1b105168d5d76062bb70ffc6ba61bcb47db7074",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bda0960f94dfb6462fc810cd61a8a065730eb79/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bda0960f94dfb6462fc810cd61a8a065730eb79/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=8bda0960f94dfb6462fc810cd61a8a065730eb79",
        "patch": "@@ -95,7 +95,7 @@ void RandAddPeriodic() noexcept;\n  *\n  * Thread-safe.\n  */\n-void RandAddEvent(const uint32_t event_info);\n+void RandAddEvent(const uint32_t event_info) noexcept;\n \n /**\n  * Fast randomness source. This is seeded once with secure random data, but"
      }
    ]
  },
  {
    "sha": "facbaf092f1ab298943206603cff6e6e3d30d452",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWNiYWYwOTJmMWFiMjk4OTQzMjA2NjAzY2ZmNmU2ZTNkMzBkNDUy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-22T20:36:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-05T18:45:49Z"
      },
      "message": "rpc: Use mempool from node context instead of global\n\nCurrently they are identical, but in the future we might want to turn\nthe mempool into a unique_ptr. Replacing the global with the mempool\npointer from the node context simplifies this step.",
      "tree": {
        "sha": "8028edb1dd96232ed91d01abb6b0b40a718141ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8028edb1dd96232ed91d01abb6b0b40a718141ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/facbaf092f1ab298943206603cff6e6e3d30d452",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjsrwv/bsKW2afogFhOPuMTJWO6hMB+gzbNL6CNNJh9iAxA/ZzNG11N9sgUpYFJ\nKnqT86FPCcXctibK4ZpX7gBCuvh0/Ql21TnoP7fU6yBPWPd5E8wYZ/GnkUOnV9EF\nAHJUzyuHAm6utyq7THticLtGYICSmRJa+nO2T2/HfvXVzk7HWfXfrLsr4Dqd4L/f\nCI3Ou63B5CRHtYIWSxH2ld09Cd/Arp7ExFJuokLkgjP1ltAnXamCI9tMDfkav2ag\n4rnfZhlkWz4RUkPxE9qqyIjMCqKwrDYUYAWKJvQ7HgkItq/qSYFW/T0ZxzKoYXae\nOqgeAOAChpeYwx4ADKl8ivvKya/a+Pjc5Wp942kZrAckGuJ6nxyamhhpOSfJNK4U\nzQuhUtd49GEw6e4Iqlr4g6QBwCf+eKia7Xg/bvN+LQBZyqwuKwAOzMPow63pqs/X\ngeuHWemExwmUIWUQ21DVIb9vlss3w3GqYoL8dnD95HEez6mxJIM1MS1bKssEKusE\nQVQzh5B1\n=pI3U\n-----END PGP SIGNATURE-----",
        "payload": "tree 8028edb1dd96232ed91d01abb6b0b40a718141ff\nparent b983e7e1721fa68cc04c05b1249d5871d66debe5\nauthor MarcoFalke <falke.marco@gmail.com> 1574455003 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575571549 -0500\n\nrpc: Use mempool from node context instead of global\n\nCurrently they are identical, but in the future we might want to turn\nthe mempool into a unique_ptr. Replacing the global with the mempool\npointer from the node context simplifies this step.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facbaf092f1ab298943206603cff6e6e3d30d452",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/facbaf092f1ab298943206603cff6e6e3d30d452",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facbaf092f1ab298943206603cff6e6e3d30d452/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b983e7e1721fa68cc04c05b1249d5871d66debe5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b983e7e1721fa68cc04c05b1249d5871d66debe5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b983e7e1721fa68cc04c05b1249d5871d66debe5"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 20,
      "deletions": 9
    },
    "files": [
      {
        "sha": "044a84dabf34d43fa74225733b66c790a36befca",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facbaf092f1ab298943206603cff6e6e3d30d452/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facbaf092f1ab298943206603cff6e6e3d30d452/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=facbaf092f1ab298943206603cff6e6e3d30d452",
        "patch": "@@ -528,7 +528,7 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n     if (!request.params[0].isNull())\n         fVerbose = request.params[0].get_bool();\n \n-    return MempoolToJSON(::mempool, fVerbose);\n+    return MempoolToJSON(EnsureMemPool(), fVerbose);\n }\n \n static UniValue getmempoolancestors(const JSONRPCRequest& request)\n@@ -566,6 +566,7 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n+    const CTxMemPool& mempool = EnsureMemPool();\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -591,7 +592,7 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n             const CTxMemPoolEntry &e = *ancestorIt;\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n-            entryToJSON(::mempool, info, e);\n+            entryToJSON(mempool, info, e);\n             o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n@@ -633,6 +634,7 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n+    const CTxMemPool& mempool = EnsureMemPool();\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -658,7 +660,7 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n             const CTxMemPoolEntry &e = *descendantIt;\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n-            entryToJSON(::mempool, info, e);\n+            entryToJSON(mempool, info, e);\n             o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n@@ -685,6 +687,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n+    const CTxMemPool& mempool = EnsureMemPool();\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -694,7 +697,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n \n     const CTxMemPoolEntry &e = *it;\n     UniValue info(UniValue::VOBJ);\n-    entryToJSON(::mempool, info, e);\n+    entryToJSON(mempool, info, e);\n     return info;\n }\n \n@@ -1070,6 +1073,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n     CCoinsViewCache* coins_view = &::ChainstateActive().CoinsTip();\n \n     if (fMempool) {\n+        const CTxMemPool& mempool = EnsureMemPool();\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(coins_view, mempool);\n         if (!view.GetCoin(out, coin) || mempool.isSpent(out)) {\n@@ -1448,7 +1452,7 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    return MempoolInfoToJSON(::mempool);\n+    return MempoolInfoToJSON(EnsureMemPool());\n }\n \n static UniValue preciousblock(const JSONRPCRequest& request)\n@@ -1964,11 +1968,13 @@ static UniValue savemempool(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if (!::mempool.IsLoaded()) {\n+    const CTxMemPool& mempool = EnsureMemPool();\n+\n+    if (!mempool.IsLoaded()) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"The mempool was not loaded yet\");\n     }\n \n-    if (!DumpMempool(::mempool)) {\n+    if (!DumpMempool(mempool)) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Unable to dump mempool to disk\");\n     }\n "
      },
      {
        "sha": "bb78aaac64b9814579d3443894b3133d55f2f8ad",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facbaf092f1ab298943206603cff6e6e3d30d452/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facbaf092f1ab298943206603cff6e6e3d30d452/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=facbaf092f1ab298943206603cff6e6e3d30d452",
        "patch": "@@ -244,6 +244,7 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n             }.Check(request);\n \n     LOCK(cs_main);\n+    const CTxMemPool& mempool = EnsureMemPool();\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"blocks\",           (int)::ChainActive().Height());\n@@ -290,7 +291,7 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Priority is no longer supported, dummy argument to prioritisetransaction must be 0.\");\n     }\n \n-    mempool.PrioritiseTransaction(hash, nAmount);\n+    EnsureMemPool().PrioritiseTransaction(hash, nAmount);\n     return true;\n }\n \n@@ -476,6 +477,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, PACKAGE_NAME \" is in initial sync and waiting for blocks...\");\n \n     static unsigned int nTransactionsUpdatedLast;\n+    const CTxMemPool& mempool = EnsureMemPool();\n \n     if (!lpval.isNull())\n     {\n@@ -510,7 +512,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                 if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n                     // Timeout: Check transactions for update\n-                    // without holding ::mempool.cs to avoid deadlocks\n+                    // without holding the mempool lock to avoid deadlocks\n                     if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\n                         break;\n                     checktxtime += std::chrono::seconds(10);"
      },
      {
        "sha": "38332fa3429052a1bbea03137c8a2bf1d9f7eeee",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facbaf092f1ab298943206603cff6e6e3d30d452/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facbaf092f1ab298943206603cff6e6e3d30d452/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=facbaf092f1ab298943206603cff6e6e3d30d452",
        "patch": "@@ -636,6 +636,7 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n+        const CTxMemPool& mempool = EnsureMemPool();\n         LOCK(cs_main);\n         LOCK(mempool.cs);\n         CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n@@ -888,6 +889,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n         max_raw_tx_fee_rate = CFeeRate(AmountFromValue(request.params[1]));\n     }\n \n+    CTxMemPool& mempool = EnsureMemPool();\n     int64_t virtual_size = GetVirtualTransactionSize(*tx);\n     CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n \n@@ -1506,6 +1508,7 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n+        const CTxMemPool& mempool = EnsureMemPool();\n         LOCK2(cs_main, mempool.cs);\n         CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);"
      }
    ]
  },
  {
    "sha": "fa660d65d7cc401ad5bbfdc076a074de19a79329",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTY2MGQ2NWQ3Y2M0MDFhZDViYmZkYzA3NmEwNzRkZTE5YTc5MzI5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-22T21:24:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-05T19:22:05Z"
      },
      "message": "node: Use mempool from node context instead of global",
      "tree": {
        "sha": "e66d5323bd671bbfdec809b28775d8bf5d56ba8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e66d5323bd671bbfdec809b28775d8bf5d56ba8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa660d65d7cc401ad5bbfdc076a074de19a79329",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgDtgv/e0FKG6Lc4rqqR+cJ9sCVjGyasle1lyquM4TAhlFf5GE91KWDuW8XplEx\nFMesARb6qYbNb5l6YVDuYSKRIMtIZVSKVnbdHzTb+D8DF6Tl/hR4Z1Sa3aTUmHiN\ny1zuO/0SAO3/K+V9CRAjvM7/9+a8In1ThtiXRdBoZ244YaDD8GliviVYpPDODtz5\nLx97jd72YgsvENbZHf8bYHebj42gP1VVs3xVglO5QSgMf5Iu/CIQ9B1VQDp96L2v\nkc/JF+ruVDARbbOS77zKpfEbZPtvtwWQLQywCNduoKK4a1i0a87oIguaK6+RxUBw\nhW/AvCKLBnWbQ03wAfJ4WkV7sUJ4woc2EB042MmmEb9ldsrffjF+05jH4oWwI0vO\niqQTXPpeG16HXCThJE4+ExKwofeJNpTiuty/eTY1JP9WOPOZ08UP9jQ5sT7/6W4U\nj76WkvlNQpT5Dx6F8vjeBTzHERZBBMxsyZ53f8wTLym5XhP2UhdIntLdgQZnmecv\nu2L2dM3I\n=D/F8\n-----END PGP SIGNATURE-----",
        "payload": "tree e66d5323bd671bbfdec809b28775d8bf5d56ba8f\nparent facbaf092f1ab298943206603cff6e6e3d30d452\nauthor MarcoFalke <falke.marco@gmail.com> 1574457878 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575573725 -0500\n\nnode: Use mempool from node context instead of global\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa660d65d7cc401ad5bbfdc076a074de19a79329",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa660d65d7cc401ad5bbfdc076a074de19a79329",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa660d65d7cc401ad5bbfdc076a074de19a79329/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "facbaf092f1ab298943206603cff6e6e3d30d452",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facbaf092f1ab298943206603cff6e6e3d30d452",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/facbaf092f1ab298943206603cff6e6e3d30d452"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 16,
      "deletions": 14
    },
    "files": [
      {
        "sha": "ac640aa35a7e80c4f0fd142a72ee74c7d9c50e94",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -263,7 +263,7 @@ class ChainImpl : public Chain\n         }\n         return true;\n     }\n-    void findCoins(std::map<COutPoint, Coin>& coins) override { return FindCoins(coins); }\n+    void findCoins(std::map<COutPoint, Coin>& coins) override { return FindCoins(m_node, coins); }\n     double guessVerificationProgress(const uint256& block_hash) override\n     {\n         LOCK(cs_main);"
      },
      {
        "sha": "24695c1afc2f71e3c8d7c987b908af826d3ee107",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -167,8 +167,8 @@ class NodeImpl : public Node\n     }\n     int64_t getTotalBytesRecv() override { return m_context.connman ? m_context.connman->GetTotalBytesRecv() : 0; }\n     int64_t getTotalBytesSent() override { return m_context.connman ? m_context.connman->GetTotalBytesSent() : 0; }\n-    size_t getMempoolSize() override { return ::mempool.size(); }\n-    size_t getMempoolDynamicUsage() override { return ::mempool.DynamicMemoryUsage(); }\n+    size_t getMempoolSize() override { return m_context.mempool ? m_context.mempool->size() : 0; }\n+    size_t getMempoolDynamicUsage() override { return m_context.mempool ? m_context.mempool->DynamicMemoryUsage() : 0; }\n     bool getHeaderTip(int& height, int64_t& block_time) override\n     {\n         LOCK(::cs_main);"
      },
      {
        "sha": "f4f86cdbe9667e598714b8ace3b1347eafb6b687",
        "filename": "src/node/coin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/node/coin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/node/coin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.cpp?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -4,14 +4,16 @@\n \n #include <node/coin.h>\n \n+#include <node/context.h>\n #include <txmempool.h>\n #include <validation.h>\n \n-void FindCoins(std::map<COutPoint, Coin>& coins)\n+void FindCoins(const NodeContext& node, std::map<COutPoint, Coin>& coins)\n {\n-    LOCK2(cs_main, ::mempool.cs);\n+    assert(node.mempool);\n+    LOCK2(cs_main, node.mempool->cs);\n     CCoinsViewCache& chain_view = ::ChainstateActive().CoinsTip();\n-    CCoinsViewMemPool mempool_view(&chain_view, ::mempool);\n+    CCoinsViewMemPool mempool_view(&chain_view, *node.mempool);\n     for (auto& coin : coins) {\n         if (!mempool_view.GetCoin(coin.first, coin.second)) {\n             // Either the coin is not in the CCoinsViewCache or is spent. Clear it."
      },
      {
        "sha": "908850e2a5ac3fcbc6b6c35182fea7ae13b6351f",
        "filename": "src/node/coin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/node/coin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/node/coin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.h?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -9,14 +9,16 @@\n \n class COutPoint;\n class Coin;\n+struct NodeContext;\n \n /**\n  * Look up unspent output information. Returns coins in the mempool and in the\n  * current chain UTXO set. Iterates through all the keys in the map and\n  * populates the values.\n  *\n+ * @param[in] node The node context to use for lookup\n  * @param[in,out] coins map to fill\n  */\n-void FindCoins(std::map<COutPoint, Coin>& coins);\n+void FindCoins(const NodeContext& node, std::map<COutPoint, Coin>& coins);\n \n #endif // BITCOIN_NODE_COIN_H"
      },
      {
        "sha": "5e2e50201598b913fa847ff6bdaded844dcd3ec9",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -20,6 +20,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     // node.connman is assigned both before chain clients and before RPC server is accepting calls,\n     // and reset after chain clients and RPC sever are stopped. node.connman should never be null here.\n     assert(node.connman);\n+    assert(node.mempool);\n     std::promise<void> promise;\n     uint256 hashTx = tx->GetHash();\n     bool callback_set = false;\n@@ -35,10 +36,10 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         // So if the output does exist, then this transaction exists in the chain.\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n-    if (!mempool.exists(hashTx)) {\n+    if (!node.mempool->exists(hashTx)) {\n         // Transaction is not already in the mempool. Submit it.\n         TxValidationState state;\n-        if (!AcceptToMemoryPool(mempool, state, std::move(tx),\n+        if (!AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n                 nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n             err_string = FormatStateMessage(state);\n             if (state.IsInvalid()) {"
      },
      {
        "sha": "71390420411ebe3e694b0157d0d7fe5607d33d07",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -134,6 +134,7 @@ void TestGUI(interfaces::Node& node)\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n     node.context()->connman = std::move(test.m_node.connman);\n+    node.context()->mempool = std::move(test.m_node.mempool);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);"
      },
      {
        "sha": "fc6fc70392e7cb84359d94d771e7285783338a30",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -759,7 +759,7 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n     for (const CTxIn& txin : mtx.vin) {\n         coins[txin.prevout]; // Create empty map entry keyed by prevout.\n     }\n-    FindCoins(coins);\n+    FindCoins(*g_rpc_node, coins);\n \n     // Parse the prevtxs array\n     ParsePrevouts(request.params[2], &keystore, coins);"
      },
      {
        "sha": "84a3980b195c82610753b3224574bd68b692a517",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa660d65d7cc401ad5bbfdc076a074de19a79329/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "patch": "@@ -112,14 +112,10 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     std::string notsigned = r.get_str();\n     std::string privkey1 = \"\\\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\\\"\";\n     std::string privkey2 = \"\\\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\\\"\";\n-    NodeContext node;\n-    node.chain = interfaces::MakeChain(node);\n-    g_rpc_node = &node;\n     r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);\n     r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [\"+privkey1+\",\"+privkey2+\"] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n-    g_rpc_node = nullptr;\n }\n \n BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)"
      }
    ]
  },
  {
    "sha": "910a4301b170680c8d14fd20101f067c2f52a0f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTBhNDMwMWIxNzA2ODBjOGQxNGZkMjAxMDFmMDY3YzJmNTJhMGY5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-05T20:52:12Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-05T20:52:17Z"
      },
      "message": "Merge #17522: test: Wait until mempool is loaded in wallet_abandonconflict\n\ndddd09eb33d14fabda0aa40fa008b23b2bd6e589 test: Wait until mempool is loaded in wallet_abandonconflict (MarcoFalke)\n\nPull request description:\n\n  This might or might not fix intermittent issues such as https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/28724018#L4091\n\n  I believe the mempool was not loaded fully after the restart, in which case it was not dumped either on the next restart. Thus, the previous mempool was attempted to be loaded a second time, which succeeded and contained the txs.\n\nACKs for top commit:\n  laanwj:\n    ACK dddd09eb33d14fabda0aa40fa008b23b2bd6e589\n\nTree-SHA512: ab7061f946b5e5388f825dddceadb125f5197b24af3a7fcf1e700235d106a323419a56bfb4d84a2e27442e0de63e540c623b704343d83a98deaab3c02fcbdcbe",
      "tree": {
        "sha": "6664701b1726bb7a2593ebf966091883f0c75345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6664701b1726bb7a2593ebf966091883f0c75345"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/910a4301b170680c8d14fd20101f067c2f52a0f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgJ2gwAipVZSg+aOuQvNp3dYcE5V+TuTWxYqileIFwNKtP2dxUlmgqlDqCA4il5\nrHjIGXpR4KpeVvRtP8Cn99L1ZQW/6lRuyF5WnjOwUTPqxRDU6TB/2TIMnYWiZ8S9\niSATJD25/Idw5VLtHox73wg5J+hsph4Fp3oGZd8rhTpbdZRrtao+DXQvwCoITfj6\np5xK0t08P6FjtI46WrRk1jCxrl7iaFpEntMtyxXcQKqG0rL19CJtxRUKt7Wna2Rq\nFeRu9kYyfCXUH5CH4YkvuN5boFIzbu+BcCMTJ1Iy2egzmxLK+NO61tj6QVySqB7Z\npgQs5NPiOiE94KVpMWuLsa+1+PGW5UrN1DZQn2gGUm0S7QDUq7iByFEiYhtFVXb1\nTTaz7Hr9HMgDMC1ufiqa3I7TdpR/NRBv3H2wT+Qffh6VybL4zDAnNlsMQB794mt2\nC5lfY9/57QpYb7IL2B23fhjjYEOtBy/DavbCeRISnvhuk7n938IBcT8g0OBjibR5\nbxEOl0+w\n=x2Fa\n-----END PGP SIGNATURE-----",
        "payload": "tree 6664701b1726bb7a2593ebf966091883f0c75345\nparent 6fff333c9f00cf379562ed38c2599997f9821cfb\nparent dddd09eb33d14fabda0aa40fa008b23b2bd6e589\nauthor MarcoFalke <falke.marco@gmail.com> 1575579132 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575579137 -0500\n\nMerge #17522: test: Wait until mempool is loaded in wallet_abandonconflict\n\ndddd09eb33d14fabda0aa40fa008b23b2bd6e589 test: Wait until mempool is loaded in wallet_abandonconflict (MarcoFalke)\n\nPull request description:\n\n  This might or might not fix intermittent issues such as https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/28724018#L4091\n\n  I believe the mempool was not loaded fully after the restart, in which case it was not dumped either on the next restart. Thus, the previous mempool was attempted to be loaded a second time, which succeeded and contained the txs.\n\nACKs for top commit:\n  laanwj:\n    ACK dddd09eb33d14fabda0aa40fa008b23b2bd6e589\n\nTree-SHA512: ab7061f946b5e5388f825dddceadb125f5197b24af3a7fcf1e700235d106a323419a56bfb4d84a2e27442e0de63e540c623b704343d83a98deaab3c02fcbdcbe\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/910a4301b170680c8d14fd20101f067c2f52a0f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/910a4301b170680c8d14fd20101f067c2f52a0f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/910a4301b170680c8d14fd20101f067c2f52a0f9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fff333c9f00cf379562ed38c2599997f9821cfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fff333c9f00cf379562ed38c2599997f9821cfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fff333c9f00cf379562ed38c2599997f9821cfb"
      },
      {
        "sha": "dddd09eb33d14fabda0aa40fa008b23b2bd6e589",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dddd09eb33d14fabda0aa40fa008b23b2bd6e589",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dddd09eb33d14fabda0aa40fa008b23b2bd6e589"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1122daaf837028c8c633164e52e5497fca600631",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/910a4301b170680c8d14fd20101f067c2f52a0f9/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/910a4301b170680c8d14fd20101f067c2f52a0f9/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=910a4301b170680c8d14fd20101f067c2f52a0f9",
        "patch": "@@ -18,6 +18,7 @@\n     assert_raises_rpc_error,\n     connect_nodes,\n     disconnect_nodes,\n+    wait_until,\n )\n \n \n@@ -97,6 +98,7 @@ def run_test(self):\n         # TODO: redo with eviction\n         self.stop_node(0)\n         self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n+        wait_until(lambda: self.nodes[0].getmempoolinfo()['loaded'])\n \n         # Verify txs no longer in either node's mempool\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n@@ -124,6 +126,8 @@ def run_test(self):\n         # Verify that even with a low min relay fee, the tx is not reaccepted from wallet on startup once abandoned\n         self.stop_node(0)\n         self.start_node(0, extra_args=[\"-minrelaytxfee=0.00001\"])\n+        wait_until(lambda: self.nodes[0].getmempoolinfo()['loaded'])\n+\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(self.nodes[0].getbalance(), balance)\n \n@@ -144,6 +148,7 @@ def run_test(self):\n         # Remove using high relay fee again\n         self.stop_node(0)\n         self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n+        wait_until(lambda: self.nodes[0].getmempoolinfo()['loaded'])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         newbalance = self.nodes[0].getbalance()\n         assert_equal(newbalance, balance - Decimal(\"24.9996\"))"
      }
    ]
  },
  {
    "sha": "5d0b7f9e3d203522054b5ad31354332617a062b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDBiN2Y5ZTNkMjAzNTIyMDU0YjVhZDMxMzU0MzMyNjE3YTA2MmI4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-05T20:55:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-05T20:55:27Z"
      },
      "message": "Merge #17670: Move events_hasher into RNGState()\n\n8bda0960f94dfb6462fc810cd61a8a065730eb79 Move events_hasher into RNGState() (Pieter Wuille)\n\nPull request description:\n\n  This moves `events_hasher` and `events_mutex` into `RNGState()` in random.cpp. This guarantees (through the existing `GetRNGState()` function) that the mutex is always created before any events are added, even when that happens inside global initializers.\n\n  Fixes the issue reported here: https://github.com/bitcoin/bitcoin/pull/17573#issuecomment-561828251, and includes the annotation from #17666).\n\nACKs for top commit:\n  MarcoFalke:\n    re-ACK 8bda0960f94dfb6462fc810cd61a8a065730eb79 \ud83e\udd48\n  sipsorcery:\n    re-ACK 8bda0960f94dfb6462fc810cd61a8a065730eb79.\n\nTree-SHA512: 78702d668764df19e9d61d87d82eca71cceca87d5351b740e13e732a1c18a3d53d7fbaaf63245266da597370bfebec9fa6a4749c15ec5a78dcfe6122c33553ed",
      "tree": {
        "sha": "329281f2057b0105971d28393110da998a44b569",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/329281f2057b0105971d28393110da998a44b569"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d0b7f9e3d203522054b5ad31354332617a062b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhC+gv8CD67JYBz0aBbXAST08OrHw+q34ZmeSHa0Fj1T1V6Z/UXq81mZ9/AbONP\nwO8EgFTjTlMd+4R4ZC2NCn4E0DZVnmMiULHT3hNFRK5aRvfBFd6SBuaest1shGjX\nArGc+ixG4Pp0HVrOWcwFyIB60b1nQSxE3/VcD5cXq5IXyWHouYDq8f22qAWto0Y1\n9N0wo8WR+TlEhoGTt2c7sXnb2hx0C9729suT8DuxsI/FeCJwLSka3XWJ6Ug4KVoL\nObZKNKO+b6Dk1UZnPqabTeFo0Z4TDxxz+wRC5M9oK4CtBDIpJAfJUKwVIlJYW+lz\nC9w89y7s6Qb1tnvCv+GSWoIt5Q2BjNptHdbKhzsy5flWtxHtn2ko1MAnlm72F5IS\nFngmPWwVhSQ6ZvmA5gvAwgg7AubIP3cXueiyRsJDtGKx0zRJL2E8Swn82VgX6FKe\nLMKX5xu1A+RiecnwUAVg0RIihomItmwk3B1gpsYRPzwOHpIaTXPsJiVydquIWYcG\nlVmzRIeH\n=/HOr\n-----END PGP SIGNATURE-----",
        "payload": "tree 329281f2057b0105971d28393110da998a44b569\nparent 910a4301b170680c8d14fd20101f067c2f52a0f9\nparent 8bda0960f94dfb6462fc810cd61a8a065730eb79\nauthor MarcoFalke <falke.marco@gmail.com> 1575579322 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575579327 -0500\n\nMerge #17670: Move events_hasher into RNGState()\n\n8bda0960f94dfb6462fc810cd61a8a065730eb79 Move events_hasher into RNGState() (Pieter Wuille)\n\nPull request description:\n\n  This moves `events_hasher` and `events_mutex` into `RNGState()` in random.cpp. This guarantees (through the existing `GetRNGState()` function) that the mutex is always created before any events are added, even when that happens inside global initializers.\n\n  Fixes the issue reported here: https://github.com/bitcoin/bitcoin/pull/17573#issuecomment-561828251, and includes the annotation from #17666).\n\nACKs for top commit:\n  MarcoFalke:\n    re-ACK 8bda0960f94dfb6462fc810cd61a8a065730eb79 \ud83e\udd48\n  sipsorcery:\n    re-ACK 8bda0960f94dfb6462fc810cd61a8a065730eb79.\n\nTree-SHA512: 78702d668764df19e9d61d87d82eca71cceca87d5351b740e13e732a1c18a3d53d7fbaaf63245266da597370bfebec9fa6a4749c15ec5a78dcfe6122c33553ed\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d0b7f9e3d203522054b5ad31354332617a062b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d0b7f9e3d203522054b5ad31354332617a062b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d0b7f9e3d203522054b5ad31354332617a062b8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "910a4301b170680c8d14fd20101f067c2f52a0f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/910a4301b170680c8d14fd20101f067c2f52a0f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/910a4301b170680c8d14fd20101f067c2f52a0f9"
      },
      {
        "sha": "8bda0960f94dfb6462fc810cd61a8a065730eb79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bda0960f94dfb6462fc810cd61a8a065730eb79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bda0960f94dfb6462fc810cd61a8a065730eb79"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 40,
      "deletions": 33
    },
    "files": [
      {
        "sha": "50b84777336607365caa9975f4230d4793a3520d",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 32,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d0b7f9e3d203522054b5ad31354332617a062b8/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d0b7f9e3d203522054b5ad31354332617a062b8/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=5d0b7f9e3d203522054b5ad31354332617a062b8",
        "patch": "@@ -360,6 +360,9 @@ class RNGState {\n     uint64_t m_counter GUARDED_BY(m_mutex) = 0;\n     bool m_strongly_seeded GUARDED_BY(m_mutex) = false;\n \n+    Mutex m_events_mutex;\n+    CSHA256 m_events_hasher GUARDED_BY(m_events_mutex);\n+\n public:\n     RNGState() noexcept\n     {\n@@ -370,6 +373,35 @@ class RNGState {\n     {\n     }\n \n+    void AddEvent(uint32_t event_info) noexcept\n+    {\n+        LOCK(m_events_mutex);\n+\n+        m_events_hasher.Write((const unsigned char *)&event_info, sizeof(event_info));\n+        // Get the low four bytes of the performance counter. This translates to roughly the\n+        // subsecond part.\n+        uint32_t perfcounter = (GetPerformanceCounter() & 0xffffffff);\n+        m_events_hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+    }\n+\n+    /**\n+     * Feed (the hash of) all events added through AddEvent() to hasher.\n+     */\n+    void SeedEvents(CSHA512& hasher) noexcept\n+    {\n+        // We use only SHA256 for the events hashing to get the ASM speedups we have for SHA256,\n+        // since we want it to be fast as network peers may be able to trigger it repeatedly.\n+        LOCK(m_events_mutex);\n+\n+        unsigned char events_hash[32];\n+        m_events_hasher.Finalize(events_hash);\n+        hasher.Write(events_hash, 32);\n+\n+        // Re-initialize the hasher with the finalized state to use later.\n+        m_events_hasher.Reset();\n+        m_events_hasher.Write(events_hash, 32);\n+    }\n+\n     /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n      *\n      * If this function has never been called with strong_seed = true, false is returned.\n@@ -440,24 +472,7 @@ static void SeedFast(CSHA512& hasher) noexcept\n     SeedTimestamp(hasher);\n }\n \n-// We use only SHA256 for the events hashing to get the ASM speedups we have for SHA256,\n-// since we want it to be fast as network peers may be able to trigger it repeatedly.\n-static Mutex events_mutex;\n-static CSHA256 events_hasher;\n-static void SeedEvents(CSHA512& hasher)\n-{\n-    LOCK(events_mutex);\n-\n-    unsigned char events_hash[32];\n-    events_hasher.Finalize(events_hash);\n-    hasher.Write(events_hash, 32);\n-\n-    // Re-initialize the hasher with the finalized state to use later.\n-    events_hasher.Reset();\n-    events_hasher.Write(events_hash, 32);\n-}\n-\n-static void SeedSlow(CSHA512& hasher) noexcept\n+static void SeedSlow(CSHA512& hasher, RNGState& rng) noexcept\n {\n     unsigned char buffer[32];\n \n@@ -469,7 +484,7 @@ static void SeedSlow(CSHA512& hasher) noexcept\n     hasher.Write(buffer, sizeof(buffer));\n \n     // Add the events hasher into the mix\n-    SeedEvents(hasher);\n+    rng.SeedEvents(hasher);\n \n     // High-precision timestamp.\n     //\n@@ -497,7 +512,7 @@ static void SeedPeriodic(CSHA512& hasher, RNGState& rng) noexcept\n     SeedTimestamp(hasher);\n \n     // Add the events hasher into the mix\n-    SeedEvents(hasher);\n+    rng.SeedEvents(hasher);\n \n     // Dynamic environment data (performance monitoring, ...)\n     auto old_size = hasher.Size();\n@@ -514,7 +529,7 @@ static void SeedStartup(CSHA512& hasher, RNGState& rng) noexcept\n     SeedHardwareSlow(hasher);\n \n     // Everything that the 'slow' seeder includes.\n-    SeedSlow(hasher);\n+    SeedSlow(hasher, rng);\n \n     // Dynamic environment data (performance monitoring, ...)\n     auto old_size = hasher.Size();\n@@ -534,7 +549,7 @@ enum class RNGLevel {\n     PERIODIC, //!< Called by RandAddPeriodic()\n };\n \n-static void ProcRand(unsigned char* out, int num, RNGLevel level)\n+static void ProcRand(unsigned char* out, int num, RNGLevel level) noexcept\n {\n     // Make sure the RNG is initialized first (as all Seed* function possibly need hwrand to be available).\n     RNGState& rng = GetRNGState();\n@@ -547,7 +562,7 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level)\n         SeedFast(hasher);\n         break;\n     case RNGLevel::SLOW:\n-        SeedSlow(hasher);\n+        SeedSlow(hasher, rng);\n         break;\n     case RNGLevel::PERIODIC:\n         SeedPeriodic(hasher, rng);\n@@ -566,15 +581,7 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level)\n void GetRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::FAST); }\n void GetStrongRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::SLOW); }\n void RandAddPeriodic() noexcept { ProcRand(nullptr, 0, RNGLevel::PERIODIC); }\n-\n-void RandAddEvent(const uint32_t event_info) {\n-    LOCK(events_mutex);\n-    events_hasher.Write((const unsigned char *)&event_info, sizeof(event_info));\n-    // Get the low four bytes of the performance counter. This translates to roughly the\n-    // subsecond part.\n-    uint32_t perfcounter = (GetPerformanceCounter() & 0xffffffff);\n-    events_hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n-}\n+void RandAddEvent(const uint32_t event_info) noexcept { GetRNGState().AddEvent(event_info); }\n \n bool g_mock_deterministic_tests{false};\n "
      },
      {
        "sha": "e1b105168d5d76062bb70ffc6ba61bcb47db7074",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d0b7f9e3d203522054b5ad31354332617a062b8/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d0b7f9e3d203522054b5ad31354332617a062b8/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=5d0b7f9e3d203522054b5ad31354332617a062b8",
        "patch": "@@ -95,7 +95,7 @@ void RandAddPeriodic() noexcept;\n  *\n  * Thread-safe.\n  */\n-void RandAddEvent(const uint32_t event_info);\n+void RandAddEvent(const uint32_t event_info) noexcept;\n \n /**\n  * Fast randomness source. This is seeded once with secure random data, but"
      }
    ]
  },
  {
    "sha": "cf43f3f0a8ffb9006c799004a441776c299174f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjQzZjNmMGE4ZmZiOTAwNmM3OTkwMDRhNDQxNzc2YzI5OTE3NGY0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-05T20:56:12Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-05T20:56:14Z"
      },
      "message": "Merge #17674: tests: Add initialization order fiasco detection in Travis\n\n1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4 tests: Add initialization order fiasco detection in Travis (practicalswift)\n\nPull request description:\n\n  Add initialization order fiasco detection in Travis :)\n\n  Context: https://github.com/bitcoin/bitcoin/pull/17670#issuecomment-562035813\n\n  This would have caught the `events_hasher` initialization order issue introduced in #17573  and fixed in #17670.\n\n  Output in case of an initialization order fiasco:\n\n  ```\n  ==7934==ERROR: AddressSanitizer: initialization-order-fiasco on address 0x557098d79200 at pc 0x55709796b9a3 bp 0x7ffde524dc30 sp 0x7ffde524dc28\n  READ of size 8 at 0x557098d79200 thread T0\n      #0 0x55709796b9a2 in CSHA256::Finalize(unsigned char*) src/crypto/sha256.cpp:667:25\n      #1 0x5570978150e9 in SeedEvents(CSHA512&) src/random.cpp:462:19\n      #2 0x5570978145e1 in SeedSlow(CSHA512&) src/random.cpp:482:5\n      #3 0x5570978149a3 in SeedStartup(CSHA512&, (anonymous namespace)::RNGState&) src/random.cpp:527:5\n      #4 0x55709781102d in ProcRand(unsigned char*, int, RNGLevel) src/random.cpp:571:9\n      #5 0x557097810d19 in GetRandBytes(unsigned char*, int) src/random.cpp:576:59\n      #6 0x557096c2f9d5 in (anonymous namespace)::CSignatureCache::CSignatureCache() src/script/sigcache.cpp:34:9\n      #7 0x557096511977 in __cxx_global_var_init.7 src/script/sigcache.cpp:67:24\n      #8 0x5570965119f8 in _GLOBAL__sub_I_sigcache.cpp src/script/sigcache.cpp\n      #9 0x557097bba4ac in __libc_csu_init (src/bitcoind+0x18554ac)\n      #10 0x7f214b1c2b27 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:266\n      #11 0x5570965347d9 in _start (src/bitcoind+0x1cf7d9)\n\n  0x557098d79200 is located 96 bytes inside of global variable 'events_hasher' defined in 'random.cpp:456:16' (0x557098d791a0) of size 104\n    registered at:\n      #0 0x557096545dfd in __asan_register_globals compiler-rt/lib/asan/asan_globals.cpp:360:3\n      #1 0x557097817f8b in asan.module_ctor (src/bitcoind+0x14b2f8b)\n\n  SUMMARY: AddressSanitizer: initialization-order-fiasco src/crypto/sha256.cpp:667:25 in CSHA256::Finalize(unsigned char*)\n  ```\n\nACKs for top commit:\n  promag:\n    Tested ACK 1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4, got\n  MarcoFalke:\n    ACK 1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4 \ud83d\udc54\n\nTree-SHA512: f24ac0a313df7549193bd7f4fcfdf9b72bdfc6a6ee31d0b08e6d0752e5108fbd532106b6c86377ae0641258c9adb4921872e5d9a0154c0284e03315e0777102c",
      "tree": {
        "sha": "59327461d6767f401da29367a386c5f80397e13d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59327461d6767f401da29367a386c5f80397e13d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf43f3f0a8ffb9006c799004a441776c299174f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhhZwwAr1OG3Bavupsh2DM3GGAIqGpa5Wt6yUDE7lKM1MVkw4KA0hupb/Aer79M\nc4EX7Jcfd4CQF89yBbglexx+cXM9fy6ZmVFr2i/Dqm1SEBG43KW+6IFBpeE1DTi5\ntT/5SiHRVaVh7pXEh05DAa2Coj+Iy09gmUWKUAHA/c3kbUgy0cBdY1/x3akzJ6lS\n1icsOM4W6QukjjDDqIiCv5nCBfUdbbZmGgqkOyP6jlN2KUvBpV6DU7LFDLSmlOVP\ngve2qwWFEPCXRQMETe/mf3EtZEWQdQG2O1SroeUwvQDEr2oGbEnGdQvBfEv0vHrV\nTeDacxaZGRAvLLe783IezHuYt+b40qEFnucaa7Z6zNymDNyJaOiqFsR3qKV+UyZG\nsOPhkSMYMoVU1DSYd3brDAgXzjfAp9RMFpn9fixGkfK5vCWEc/Z3BeDBdm8b0DG4\nSBtdZeoLcaLb/OZxO3gR/htAMPSUwC3vxZscX+kkH8kLScv8uuzEm/f69MoQnjyR\nX4APM4Lj\n=xwlv\n-----END PGP SIGNATURE-----",
        "payload": "tree 59327461d6767f401da29367a386c5f80397e13d\nparent 5d0b7f9e3d203522054b5ad31354332617a062b8\nparent 1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4\nauthor MarcoFalke <falke.marco@gmail.com> 1575579372 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575579374 -0500\n\nMerge #17674: tests: Add initialization order fiasco detection in Travis\n\n1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4 tests: Add initialization order fiasco detection in Travis (practicalswift)\n\nPull request description:\n\n  Add initialization order fiasco detection in Travis :)\n\n  Context: https://github.com/bitcoin/bitcoin/pull/17670#issuecomment-562035813\n\n  This would have caught the `events_hasher` initialization order issue introduced in #17573  and fixed in #17670.\n\n  Output in case of an initialization order fiasco:\n\n  ```\n  ==7934==ERROR: AddressSanitizer: initialization-order-fiasco on address 0x557098d79200 at pc 0x55709796b9a3 bp 0x7ffde524dc30 sp 0x7ffde524dc28\n  READ of size 8 at 0x557098d79200 thread T0\n      #0 0x55709796b9a2 in CSHA256::Finalize(unsigned char*) src/crypto/sha256.cpp:667:25\n      #1 0x5570978150e9 in SeedEvents(CSHA512&) src/random.cpp:462:19\n      #2 0x5570978145e1 in SeedSlow(CSHA512&) src/random.cpp:482:5\n      #3 0x5570978149a3 in SeedStartup(CSHA512&, (anonymous namespace)::RNGState&) src/random.cpp:527:5\n      #4 0x55709781102d in ProcRand(unsigned char*, int, RNGLevel) src/random.cpp:571:9\n      #5 0x557097810d19 in GetRandBytes(unsigned char*, int) src/random.cpp:576:59\n      #6 0x557096c2f9d5 in (anonymous namespace)::CSignatureCache::CSignatureCache() src/script/sigcache.cpp:34:9\n      #7 0x557096511977 in __cxx_global_var_init.7 src/script/sigcache.cpp:67:24\n      #8 0x5570965119f8 in _GLOBAL__sub_I_sigcache.cpp src/script/sigcache.cpp\n      #9 0x557097bba4ac in __libc_csu_init (src/bitcoind+0x18554ac)\n      #10 0x7f214b1c2b27 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:266\n      #11 0x5570965347d9 in _start (src/bitcoind+0x1cf7d9)\n\n  0x557098d79200 is located 96 bytes inside of global variable 'events_hasher' defined in 'random.cpp:456:16' (0x557098d791a0) of size 104\n    registered at:\n      #0 0x557096545dfd in __asan_register_globals compiler-rt/lib/asan/asan_globals.cpp:360:3\n      #1 0x557097817f8b in asan.module_ctor (src/bitcoind+0x14b2f8b)\n\n  SUMMARY: AddressSanitizer: initialization-order-fiasco src/crypto/sha256.cpp:667:25 in CSHA256::Finalize(unsigned char*)\n  ```\n\nACKs for top commit:\n  promag:\n    Tested ACK 1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4, got\n  MarcoFalke:\n    ACK 1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4 \ud83d\udc54\n\nTree-SHA512: f24ac0a313df7549193bd7f4fcfdf9b72bdfc6a6ee31d0b08e6d0752e5108fbd532106b6c86377ae0641258c9adb4921872e5d9a0154c0284e03315e0777102c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf43f3f0a8ffb9006c799004a441776c299174f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf43f3f0a8ffb9006c799004a441776c299174f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf43f3f0a8ffb9006c799004a441776c299174f4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d0b7f9e3d203522054b5ad31354332617a062b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d0b7f9e3d203522054b5ad31354332617a062b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d0b7f9e3d203522054b5ad31354332617a062b8"
      },
      {
        "sha": "1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f9d5af4f197e7cc0469a0bb25dcbc51dfa537f4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5aa788e07d9c212ebea31875bd96f06596ec9b65",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf43f3f0a8ffb9006c799004a441776c299174f4/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf43f3f0a8ffb9006c799004a441776c299174f4/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=cf43f3f0a8ffb9006c799004a441776c299174f4",
        "patch": "@@ -33,7 +33,7 @@ fi\n mkdir -p \"${BASE_SCRATCH_DIR}\"\n mkdir -p \"${CCACHE_DIR}\"\n \n-export ASAN_OPTIONS=\"detect_stack_use_after_return=1\"\n+export ASAN_OPTIONS=\"detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1\"\n export LSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/lsan\"\n export TSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/tsan:log_path=${BASE_SCRATCH_DIR}/sanitizer-output/tsan\"\n export UBSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1\""
      }
    ]
  },
  {
    "sha": "c966ff14c77870378847b9e6063b9671739ddc1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTY2ZmYxNGM3Nzg3MDM3ODg0N2I5ZTYwNjNiOTY3MTczOWRkYzFm",
    "commit": {
      "author": {
        "name": "willyk",
        "email": "wko@blockchainfoundry.co",
        "date": "2019-12-05T21:00:34Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2019-12-05T21:00:34Z"
      },
      "message": "gitian: fixed SC2001 regex\n\nthe `-` is not a special symbol and should not have `%` in front of it.",
      "tree": {
        "sha": "0fa0be0f283bbacb3dca8e5deac2b4614d5e4cc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fa0be0f283bbacb3dca8e5deac2b4614d5e4cc3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c966ff14c77870378847b9e6063b9671739ddc1f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd6W/yCRBK7hj4Ov3rIwAAdHIIAA+OQvnkB6IKT9zDYkEk6YBf\ntvFfiK6t+EsAlRIwxlyNF0WSkZe00eBvwI8COXK03sN90jvTDRHOm+Zt/3SK2mS3\ntweSIFk0R08sjAmUHiazpmEi6E8LcQTKzUl7x0vYGENs787L0n/A/EQh/q6gfPL/\ng5kTABAhiBnL18K/n8EgCbMUcuc9SfzCBTWNi5zQB9AhqHrvkZMrGoAJIqhyrg+L\nQonLzoLBgTf5T7wCfekphXkRVD6ybgEMZPXudU3pjmSqgEeFlPxj+uFSkeePigFs\nXlS5yRjj9Srq4p7KxEgh+2lkchueHUCw7UDRKJtCXBPpxsrHgPpbavgk+C9uOyM=\n=rzlW\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 0fa0be0f283bbacb3dca8e5deac2b4614d5e4cc3\nparent cf43f3f0a8ffb9006c799004a441776c299174f4\nauthor willyk <wko@blockchainfoundry.co> 1575579634 -0800\ncommitter GitHub <noreply@github.com> 1575579634 -0800\n\ngitian: fixed SC2001 regex\n\nthe `-` is not a special symbol and should not have `%` in front of it."
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c966ff14c77870378847b9e6063b9671739ddc1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c966ff14c77870378847b9e6063b9671739ddc1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c966ff14c77870378847b9e6063b9671739ddc1f/comments",
    "author": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf43f3f0a8ffb9006c799004a441776c299174f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf43f3f0a8ffb9006c799004a441776c299174f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf43f3f0a8ffb9006c799004a441776c299174f4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "70b7bb111d0751b8b1913e82f4714eeac19c60ad",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c966ff14c77870378847b9e6063b9671739ddc1f/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c966ff14c77870378847b9e6063b9671739ddc1f/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=c966ff14c77870378847b9e6063b9671739ddc1f",
        "patch": "@@ -36,6 +36,6 @@ script: |\n   make\n   find ${UNSIGNED_DIR} -name \"*-unsigned.exe\" | while read i; do\n     INFILE=\"$(basename \"${i}\")\"\n-    OUTFILE=\"${INFILE/%-unsigned}\"\n+    OUTFILE=\"${INFILE/-unsigned}\"\n     ./osslsigncode attach-signature -in \"${i}\" -out \"${OUTDIR}/${OUTFILE}\" -sigin \"${SIGDIR}/${INFILE}.pem\"\n   done"
      }
    ]
  },
  {
    "sha": "5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTA5YmNkM2JmM2MzNTAyMzU1ZTg5ZmQwYjc2YmI4ZTkzZDhhOTVi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-18T23:26:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-12-06T00:31:09Z"
      },
      "message": "Add bounds checks in key_io before DecodeBase58Check",
      "tree": {
        "sha": "388569d03abf646a5b616c7a68e4611d0f2cf0a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/388569d03abf646a5b616c7a68e4611d0f2cf0a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 13,
      "deletions": 14
    },
    "files": [
      {
        "sha": "90eded4992adb78ac14f96979fb6bf10fa881236",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
        "patch": "@@ -16,7 +16,6 @@\n \n #include <attributes.h>\n \n-#include <limits>\n #include <string>\n #include <vector>\n \n@@ -36,13 +35,13 @@ std::string EncodeBase58(const std::vector<unsigned char>& vch);\n  * return true if decoding is successful.\n  * psz cannot be nullptr.\n  */\n-NODISCARD bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len = std::numeric_limits<int>::max());\n+NODISCARD bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n /**\n  * Decode a base58-encoded string (str) into a byte vector (vchRet).\n  * return true if decoding is successful.\n  */\n-NODISCARD bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len = std::numeric_limits<int>::max());\n+NODISCARD bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n /**\n  * Encode a byte vector into a base58-encoded string, including checksum\n@@ -53,12 +52,12 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn);\n  * Decode a base58-encoded string (psz) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-NODISCARD bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len = std::numeric_limits<int>::max());\n+NODISCARD bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n /**\n  * Decode a base58-encoded string (str) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-NODISCARD bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len = std::numeric_limits<int>::max());\n+NODISCARD bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n #endif // BITCOIN_BASE58_H"
      },
      {
        "sha": "d8c9b2e01a203fa46f22c4d563a0ad981396f3bc",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
        "patch": "@@ -47,7 +47,7 @@ static void Base58Decode(benchmark::State& state)\n     const char* addr = \"17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem\";\n     std::vector<unsigned char> vch;\n     while (state.KeepRunning()) {\n-        (void) DecodeBase58(addr, vch);\n+        (void) DecodeBase58(addr, vch, 64);\n     }\n }\n "
      },
      {
        "sha": "af06db7343e3693ec911895536d0dd0185ff04f1",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
        "patch": "@@ -73,7 +73,7 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n-    if (DecodeBase58Check(str, data)) {\n+    if (DecodeBase58Check(str, data, 21)) {\n         // base58-encoded Bitcoin addresses.\n         // Public-key-hash-addresses have version 0 (or 111 testnet).\n         // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n@@ -133,7 +133,7 @@ CKey DecodeSecret(const std::string& str)\n {\n     CKey key;\n     std::vector<unsigned char> data;\n-    if (DecodeBase58Check(str, data)) {\n+    if (DecodeBase58Check(str, data, 34)) {\n         const std::vector<unsigned char>& privkey_prefix = Params().Base58Prefix(CChainParams::SECRET_KEY);\n         if ((data.size() == 32 + privkey_prefix.size() || (data.size() == 33 + privkey_prefix.size() && data.back() == 1)) &&\n             std::equal(privkey_prefix.begin(), privkey_prefix.end(), data.begin())) {\n@@ -164,7 +164,7 @@ CExtPubKey DecodeExtPubKey(const std::string& str)\n {\n     CExtPubKey key;\n     std::vector<unsigned char> data;\n-    if (DecodeBase58Check(str, data)) {\n+    if (DecodeBase58Check(str, data, 78)) {\n         const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n         if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n             key.Decode(data.data() + prefix.size());\n@@ -187,7 +187,7 @@ CExtKey DecodeExtKey(const std::string& str)\n {\n     CExtKey key;\n     std::vector<unsigned char> data;\n-    if (DecodeBase58Check(str, data)) {\n+    if (DecodeBase58Check(str, data, 78)) {\n         const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n         if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n             key.Decode(data.data() + prefix.size());"
      },
      {
        "sha": "96fdf8c86d3facf1a50a70f0ef30c0f6f2a6d99f",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
        "patch": "@@ -54,15 +54,15 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n         }\n         std::vector<unsigned char> expected = ParseHex(test[0].get_str());\n         std::string base58string = test[1].get_str();\n-        BOOST_CHECK_MESSAGE(DecodeBase58(base58string, result), strTest);\n+        BOOST_CHECK_MESSAGE(DecodeBase58(base58string, result, 256), strTest);\n         BOOST_CHECK_MESSAGE(result.size() == expected.size() && std::equal(result.begin(), result.end(), expected.begin()), strTest);\n     }\n \n-    BOOST_CHECK(!DecodeBase58(\"invalid\", result));\n+    BOOST_CHECK(!DecodeBase58(\"invalid\", result, 100));\n \n     // check that DecodeBase58 skips whitespace, but still fails with unexpected non-whitespace at the end.\n-    BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result));\n-    BOOST_CHECK( DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t \", result));\n+    BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result, 3));\n+    BOOST_CHECK( DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t \", result, 3));\n     std::vector<unsigned char> expected = ParseHex(\"971a55\");\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n }"
      }
    ]
  },
  {
    "sha": "c7c9c44278471228376ee29f2852dcfc6b58cb93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2M5YzQ0Mjc4NDcxMjI4Mzc2ZWUyOWYyODUyZGNmYzZiNThjYjkz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-06T08:11:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-06T08:11:14Z"
      },
      "message": "Merge #17663: build: pass -dead_strip_dylibs to ld on macOS\n\nbd44711e1bb2eee7646f2f8e2e8763d1c216bdb9 build: pass -dead_strip_dylibs to ld on macOS (fanquake)\n\nPull request description:\n\n  This strips some unused dylibs from bitcoin-qt.\n\n  ```diff\n  otool -L src/qt/bitcoin-qt\n    /usr/lib/libSystem.B.dylib\n  - /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration\n    /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n    /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation\n    /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices\n    /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit\n    /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices\n    /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\n  -/System/Library/Frameworks/Security.framework/Versions/A/Security\n    /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration\n    /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics\n    /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL\n  -/System/Library/Frameworks/AGL.framework/Versions/A/AGL\n    /System/Library/Frameworks/Carbon.framework/Versions/A/Carbon\n    /usr/lib/libc++.1.dylib\n    /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork\n    /System/Library/Frameworks/CoreText.framework/Versions/A/CoreText\n    /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\n    /usr/lib/libobjc.A.dylib\n  ```\n\n  `AGL` - ObjC wrapper for OpenGL.\n  `DiskArbitration` - mount/unmount notifications and events.\n  `Security` - low level security operations, authentication services.\n\n  From `man ld`:\n  ```\n  Remove dylibs that are unreachable by the entry point or exported symbols.\n  That is, suppresses the generation of load command commands for dylibs\n  which supplied no symbols during the link. This option should not be\n  used when linking against a dylib which is required at runtime for\n  some indirect reason such as the dylib has an important initializer.\n  ```\n\nACKs for top commit:\n  theuni:\n    ACK bd44711e1bb2eee7646f2f8e2e8763d1c216bdb9.\n\nTree-SHA512: 9592ce2966d28cb6c58e01efd401f56a4baa5dc5be5313f4fe8454632b578608be65a23c8602772049cd4655a9cb020fdd40d6622a244c301920d8c3db43f99a",
      "tree": {
        "sha": "4e782662ffded06d2d44704c0211ad74799901fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e782662ffded06d2d44704c0211ad74799901fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7c9c44278471228376ee29f2852dcfc6b58cb93",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3qDSIACgkQHkrtYphs\n0l2C9wf/TdPqVJNKtl3//ZGxwV/qFUaROqMIh0xCia2+2c/92UybpqdTVT/6PAfd\nPCAHcGPDT4sWuC6p0tfWmpL/TxzYaA1kHGet7xv2p4OcyQaGvWx+8fs/LDaD58nQ\nA7Cf5gAFfJZ/OncirqXGvNH6jnQLMXVRTErtLbQcDAUkk+t5wJ6pXftvUJQMoOGW\ncSxJ3FWDyuXOqx7KX78NTNR4hRuoO85Z+vHZsz0cF9gHtmk7wxGwfy1wUNTW0po2\nOJfiap7NjZRiqsvtjIbjJfN2Uhi0vZ8DVIACGctlg2/58+dDPJgjkjxNzTdML8pR\n0wkhlaY3xBElgtFmnlJRhXU9Ug8PQA==\n=1MAO\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e782662ffded06d2d44704c0211ad74799901fe\nparent cf43f3f0a8ffb9006c799004a441776c299174f4\nparent bd44711e1bb2eee7646f2f8e2e8763d1c216bdb9\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1575619868 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1575619874 +0100\n\nMerge #17663: build: pass -dead_strip_dylibs to ld on macOS\n\nbd44711e1bb2eee7646f2f8e2e8763d1c216bdb9 build: pass -dead_strip_dylibs to ld on macOS (fanquake)\n\nPull request description:\n\n  This strips some unused dylibs from bitcoin-qt.\n\n  ```diff\n  otool -L src/qt/bitcoin-qt\n    /usr/lib/libSystem.B.dylib\n  - /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration\n    /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n    /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation\n    /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices\n    /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit\n    /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices\n    /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\n  -/System/Library/Frameworks/Security.framework/Versions/A/Security\n    /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration\n    /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics\n    /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL\n  -/System/Library/Frameworks/AGL.framework/Versions/A/AGL\n    /System/Library/Frameworks/Carbon.framework/Versions/A/Carbon\n    /usr/lib/libc++.1.dylib\n    /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork\n    /System/Library/Frameworks/CoreText.framework/Versions/A/CoreText\n    /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\n    /usr/lib/libobjc.A.dylib\n  ```\n\n  `AGL` - ObjC wrapper for OpenGL.\n  `DiskArbitration` - mount/unmount notifications and events.\n  `Security` - low level security operations, authentication services.\n\n  From `man ld`:\n  ```\n  Remove dylibs that are unreachable by the entry point or exported symbols.\n  That is, suppresses the generation of load command commands for dylibs\n  which supplied no symbols during the link. This option should not be\n  used when linking against a dylib which is required at runtime for\n  some indirect reason such as the dylib has an important initializer.\n  ```\n\nACKs for top commit:\n  theuni:\n    ACK bd44711e1bb2eee7646f2f8e2e8763d1c216bdb9.\n\nTree-SHA512: 9592ce2966d28cb6c58e01efd401f56a4baa5dc5be5313f4fe8454632b578608be65a23c8602772049cd4655a9cb020fdd40d6622a244c301920d8c3db43f99a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7c9c44278471228376ee29f2852dcfc6b58cb93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7c9c44278471228376ee29f2852dcfc6b58cb93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7c9c44278471228376ee29f2852dcfc6b58cb93/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf43f3f0a8ffb9006c799004a441776c299174f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf43f3f0a8ffb9006c799004a441776c299174f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf43f3f0a8ffb9006c799004a441776c299174f4"
      },
      {
        "sha": "bd44711e1bb2eee7646f2f8e2e8763d1c216bdb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd44711e1bb2eee7646f2f8e2e8763d1c216bdb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd44711e1bb2eee7646f2f8e2e8763d1c216bdb9"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e0bec0882e79a080f57e0bd4150e9ccc774be342",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7c9c44278471228376ee29f2852dcfc6b58cb93/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7c9c44278471228376ee29f2852dcfc6b58cb93/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=c7c9c44278471228376ee29f2852dcfc6b58cb93",
        "patch": "@@ -783,6 +783,7 @@ fi\n dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip_dylibs]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip_dylibs\"])\n fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])"
      }
    ]
  },
  {
    "sha": "cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjExMzI0YTYzZWYxMDQ3NWJmYzRkOGU0NTE0OGQ1YWU2ZjNlNzFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-06T08:45:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-06T08:45:26Z"
      },
      "message": "Merge #17051: tests: Add deserialization fuzzing harnesses\n\n897849d8c225045f0dd3a2fe99b5d69bdf84b4e2 tests: Add deserialization fuzzing harnesses (practicalswift)\n16f0a186dcee563bb1000e1ffc51da87e7623bc6 tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus (practicalswift)\n\nPull request description:\n\n  Add deserialization fuzzing harnesses.\n\n  **Testing this PR**\n\n  Run:\n\n  ```\n  $ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n  $ make\n  $ contrib/devtools/test_fuzzing_harnesses.sh 'addr_info|block_file_info|block_filter|block_header|ext_key|ext_pub_key|fee_rate|flat_file|key_origin|merkle_block|mutable_transaction|out_point|partial_merkle_tree|partially_signed_transaction|prefilled_transaction|psbt_input|psbt_output|pub_key|script_deserialize|sub_net|tx_in' 10\n  ```\n\n  `test_fuzzing_harnesses.sh` can be found in PR #17000.\n\nACKs for top commit:\n  laanwj:\n    thanks, ACK 897849d8c225045f0dd3a2fe99b5d69bdf84b4e2\n\nTree-SHA512: 5a270a3002cc23b725f7b35476a43777b2b00b4d089cc006372e2fcc7afa430afaa3c1430f778ae08fc53dd85a13e7bd2fab0449c319f676423226e189a417f6",
      "tree": {
        "sha": "114db5aa0e4c7b3703208c67d3347964634b063d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/114db5aa0e4c7b3703208c67d3347964634b063d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3qFSYACgkQHkrtYphs\n0l2SJgf/X0K/JwqeVPvnTvbGJYiMGR0Q9cErhXa46w9staBK4uXLEB79K+gakv0c\nOAtRx3i5gSaz0zIU1FGg1pgnfi7zFHSk0YiISqYMudetR1nxFuOtBGC1WnjXGZnF\np0ajNmkYhrCpEu/aJg6IGL/1slgoKbUrxxOyRz6pVEy0yBycS9kFBv0ORpl1pJ96\nHGF6OPVTY7YHzTh+B3ERoKZu58938robiBtId3vD+sB8kNhf6wXsqr7KVSbp1Kk4\n518XRAJhG80vXe25sjWR3/CZdS0Ej+jGd0xMwY6lKy7V1Iu4onFoxibDQgrRT8eX\nDJUQNIt2Vw7IAx0wypLzxA7v2U5eEQ==\n=T7/O\n-----END PGP SIGNATURE-----",
        "payload": "tree 114db5aa0e4c7b3703208c67d3347964634b063d\nparent c7c9c44278471228376ee29f2852dcfc6b58cb93\nparent 897849d8c225045f0dd3a2fe99b5d69bdf84b4e2\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1575621919 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1575621926 +0100\n\nMerge #17051: tests: Add deserialization fuzzing harnesses\n\n897849d8c225045f0dd3a2fe99b5d69bdf84b4e2 tests: Add deserialization fuzzing harnesses (practicalswift)\n16f0a186dcee563bb1000e1ffc51da87e7623bc6 tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus (practicalswift)\n\nPull request description:\n\n  Add deserialization fuzzing harnesses.\n\n  **Testing this PR**\n\n  Run:\n\n  ```\n  $ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n  $ make\n  $ contrib/devtools/test_fuzzing_harnesses.sh 'addr_info|block_file_info|block_filter|block_header|ext_key|ext_pub_key|fee_rate|flat_file|key_origin|merkle_block|mutable_transaction|out_point|partial_merkle_tree|partially_signed_transaction|prefilled_transaction|psbt_input|psbt_output|pub_key|script_deserialize|sub_net|tx_in' 10\n  ```\n\n  `test_fuzzing_harnesses.sh` can be found in PR #17000.\n\nACKs for top commit:\n  laanwj:\n    thanks, ACK 897849d8c225045f0dd3a2fe99b5d69bdf84b4e2\n\nTree-SHA512: 5a270a3002cc23b725f7b35476a43777b2b00b4d089cc006372e2fcc7afa430afaa3c1430f778ae08fc53dd85a13e7bd2fab0449c319f676423226e189a417f6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7c9c44278471228376ee29f2852dcfc6b58cb93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7c9c44278471228376ee29f2852dcfc6b58cb93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7c9c44278471228376ee29f2852dcfc6b58cb93"
      },
      {
        "sha": "897849d8c225045f0dd3a2fe99b5d69bdf84b4e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/897849d8c225045f0dd3a2fe99b5d69bdf84b4e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/897849d8c225045f0dd3a2fe99b5d69bdf84b4e2"
      }
    ],
    "stats": {
      "total": 493,
      "additions": 385,
      "deletions": 108
    },
    "files": [
      {
        "sha": "6ae15cc553c97212710cbddd32de86679988d35f",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 126,
        "deletions": 0,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "patch": "@@ -4,11 +4,15 @@\n \n \n FUZZ_TARGETS = \\\n+  test/fuzz/addr_info_deserialize \\\n   test/fuzz/address_deserialize \\\n   test/fuzz/addrman_deserialize \\\n   test/fuzz/banentry_deserialize \\\n   test/fuzz/bech32 \\\n   test/fuzz/block_deserialize \\\n+  test/fuzz/block_file_info_deserialize \\\n+  test/fuzz/block_filter_deserialize \\\n+  test/fuzz/block_header_and_short_txids_deserialize \\\n   test/fuzz/blockheader_deserialize \\\n   test/fuzz/blocklocator_deserialize \\\n   test/fuzz/blockmerkleroot \\\n@@ -20,16 +24,30 @@ FUZZ_TARGETS = \\\n   test/fuzz/descriptor_parse \\\n   test/fuzz/diskblockindex_deserialize \\\n   test/fuzz/eval_script \\\n+  test/fuzz/fee_rate_deserialize \\\n+  test/fuzz/flat_file_pos_deserialize \\\n   test/fuzz/inv_deserialize \\\n+  test/fuzz/key_origin_info_deserialize \\\n+  test/fuzz/merkle_block_deserialize \\\n   test/fuzz/messageheader_deserialize \\\n   test/fuzz/netaddr_deserialize \\\n+  test/fuzz/out_point_deserialize \\\n   test/fuzz/parse_iso8601 \\\n+  test/fuzz/partial_merkle_tree_deserialize \\\n+  test/fuzz/partially_signed_transaction_deserialize \\\n+  test/fuzz/prefilled_transaction_deserialize \\\n   test/fuzz/psbt \\\n+  test/fuzz/psbt_input_deserialize \\\n+  test/fuzz/psbt_output_deserialize \\\n+  test/fuzz/pub_key_deserialize \\\n   test/fuzz/script \\\n+  test/fuzz/script_deserialize \\\n   test/fuzz/script_flags \\\n   test/fuzz/service_deserialize \\\n   test/fuzz/spanparsing \\\n+  test/fuzz/sub_net_deserialize \\\n   test/fuzz/transaction \\\n+  test/fuzz/tx_in_deserialize \\\n   test/fuzz/txoutcompressor_deserialize \\\n   test/fuzz/txundo_deserialize\n \n@@ -371,6 +389,114 @@ test_fuzz_transaction_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_transaction_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_transaction_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_addr_info_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_addr_info_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDR_INFO_DESERIALIZE=1\n+test_fuzz_addr_info_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_addr_info_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_addr_info_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_block_file_info_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_block_file_info_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_FILE_INFO_DESERIALIZE=1\n+test_fuzz_block_file_info_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_file_info_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_file_info_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_block_filter_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_block_filter_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_FILTER_DESERIALIZE=1\n+test_fuzz_block_filter_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_filter_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_filter_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_block_header_and_short_txids_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_block_header_and_short_txids_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_HEADER_AND_SHORT_TXIDS_DESERIALIZE=1\n+test_fuzz_block_header_and_short_txids_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_header_and_short_txids_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_header_and_short_txids_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_fee_rate_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_fee_rate_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DFEE_RATE_DESERIALIZE=1\n+test_fuzz_fee_rate_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_fee_rate_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_fee_rate_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_flat_file_pos_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_flat_file_pos_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DFLAT_FILE_POS_DESERIALIZE=1\n+test_fuzz_flat_file_pos_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_flat_file_pos_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_flat_file_pos_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_key_origin_info_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_key_origin_info_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DKEY_ORIGIN_INFO_DESERIALIZE=1\n+test_fuzz_key_origin_info_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_key_origin_info_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_key_origin_info_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_merkle_block_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_merkle_block_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMERKLE_BLOCK_DESERIALIZE=1\n+test_fuzz_merkle_block_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_merkle_block_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_merkle_block_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_out_point_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_out_point_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DOUT_POINT_DESERIALIZE=1\n+test_fuzz_out_point_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_out_point_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_out_point_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_partially_signed_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_partially_signed_transaction_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPARTIALLY_SIGNED_TRANSACTION_DESERIALIZE=1\n+test_fuzz_partially_signed_transaction_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_partially_signed_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_partially_signed_transaction_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_partial_merkle_tree_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_partial_merkle_tree_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPARTIAL_MERKLE_TREE_DESERIALIZE=1\n+test_fuzz_partial_merkle_tree_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_partial_merkle_tree_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_partial_merkle_tree_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_prefilled_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_prefilled_transaction_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPREFILLED_TRANSACTION_DESERIALIZE=1\n+test_fuzz_prefilled_transaction_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_prefilled_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_prefilled_transaction_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_psbt_input_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_psbt_input_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPSBT_INPUT_DESERIALIZE=1\n+test_fuzz_psbt_input_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_psbt_input_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_psbt_input_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_psbt_output_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_psbt_output_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPSBT_OUTPUT_DESERIALIZE=1\n+test_fuzz_psbt_output_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_psbt_output_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_psbt_output_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_pub_key_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_pub_key_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPUB_KEY_DESERIALIZE=1\n+test_fuzz_pub_key_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_pub_key_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_pub_key_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_script_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_script_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSCRIPT_DESERIALIZE=1\n+test_fuzz_script_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_sub_net_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_sub_net_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSUB_NET_DESERIALIZE=1\n+test_fuzz_sub_net_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_sub_net_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_sub_net_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_tx_in_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_tx_in_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTX_IN_DESERIALIZE=1\n+test_fuzz_tx_in_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_tx_in_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_tx_in_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n endif # ENABLE_FUZZ\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)"
      },
      {
        "sha": "46bc38fdabac579152096261a6381ed51767f901",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 216,
        "deletions": 102,
        "changes": 318,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "patch": "@@ -5,18 +5,24 @@\n #include <addrdb.h>\n #include <addrman.h>\n #include <blockencodings.h>\n+#include <blockfilter.h>\n #include <chain.h>\n #include <coins.h>\n #include <compressor.h>\n #include <consensus/merkle.h>\n+#include <key.h>\n+#include <merkleblock.h>\n #include <net.h>\n #include <primitives/block.h>\n #include <protocol.h>\n+#include <psbt.h>\n #include <pubkey.h>\n+#include <script/keyorigin.h>\n #include <streams.h>\n #include <undo.h>\n #include <version.h>\n \n+#include <stdexcept>\n #include <stdint.h>\n #include <unistd.h>\n \n@@ -37,129 +43,237 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         int nVersion;\n         ds >> nVersion;\n         ds.SetVersion(nVersion);\n-    } catch (const std::ios_base::failure& e) {\n+    } catch (const std::ios_base::failure&) {\n         return;\n     }\n \n-#if BLOCK_DESERIALIZE\n-            try\n-            {\n-                CBlock block;\n-                ds >> block;\n-            } catch (const std::ios_base::failure& e) {return;}\n+#if BLOCK_FILTER_DESERIALIZE\n+    try {\n+        BlockFilter block_filter;\n+        ds >> block_filter;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif ADDR_INFO_DESERIALIZE\n+    try {\n+        CAddrInfo addr_info;\n+        ds >> addr_info;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif BLOCK_FILE_INFO_DESERIALIZE\n+    try {\n+        CBlockFileInfo block_file_info;\n+        ds >> block_file_info;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif BLOCK_HEADER_AND_SHORT_TXIDS_DESERIALIZE\n+    try {\n+        CBlockHeaderAndShortTxIDs block_header_and_short_txids;\n+        ds >> block_header_and_short_txids;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif FEE_RATE_DESERIALIZE\n+    try {\n+        CFeeRate fee_rate;\n+        ds >> fee_rate;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif MERKLE_BLOCK_DESERIALIZE\n+    try {\n+        CMerkleBlock merkle_block;\n+        ds >> merkle_block;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif OUT_POINT_DESERIALIZE\n+    try {\n+        COutPoint out_point;\n+        ds >> out_point;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif PARTIAL_MERKLE_TREE_DESERIALIZE\n+    try {\n+        CPartialMerkleTree partial_merkle_tree;\n+        ds >> partial_merkle_tree;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif PUB_KEY_DESERIALIZE\n+    try {\n+        CPubKey pub_key;\n+        ds >> pub_key;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif SCRIPT_DESERIALIZE\n+    try {\n+        CScript script;\n+        ds >> script;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif SUB_NET_DESERIALIZE\n+    try {\n+        CSubNet sub_net;\n+        ds >> sub_net;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif TX_IN_DESERIALIZE\n+    try {\n+        CTxIn tx_in;\n+        ds >> tx_in;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif FLAT_FILE_POS_DESERIALIZE\n+    try {\n+        FlatFilePos flat_file_pos;\n+        ds >> flat_file_pos;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif KEY_ORIGIN_INFO_DESERIALIZE\n+    try {\n+        KeyOriginInfo key_origin_info;\n+        ds >> key_origin_info;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif PARTIALLY_SIGNED_TRANSACTION_DESERIALIZE\n+    try {\n+        PartiallySignedTransaction partially_signed_transaction;\n+        ds >> partially_signed_transaction;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif PREFILLED_TRANSACTION_DESERIALIZE\n+    try {\n+        PrefilledTransaction prefilled_transaction;\n+        ds >> prefilled_transaction;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif PSBT_INPUT_DESERIALIZE\n+    try {\n+        PSBTInput psbt_input;\n+        ds >> psbt_input;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif PSBT_OUTPUT_DESERIALIZE\n+    try {\n+        PSBTOutput psbt_output;\n+        ds >> psbt_output;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif BLOCK_DESERIALIZE\n+    try {\n+        CBlock block;\n+        ds >> block;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BLOCKLOCATOR_DESERIALIZE\n-            try\n-            {\n-                CBlockLocator bl;\n-                ds >> bl;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CBlockLocator bl;\n+        ds >> bl;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BLOCKMERKLEROOT\n-            try\n-            {\n-                CBlock block;\n-                ds >> block;\n-                bool mutated;\n-                BlockMerkleRoot(block, &mutated);\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CBlock block;\n+        ds >> block;\n+        bool mutated;\n+        BlockMerkleRoot(block, &mutated);\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif ADDRMAN_DESERIALIZE\n-            try\n-            {\n-                CAddrMan am;\n-                ds >> am;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CAddrMan am;\n+        ds >> am;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BLOCKHEADER_DESERIALIZE\n-            try\n-            {\n-                CBlockHeader bh;\n-                ds >> bh;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CBlockHeader bh;\n+        ds >> bh;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BANENTRY_DESERIALIZE\n-            try\n-            {\n-                CBanEntry be;\n-                ds >> be;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CBanEntry be;\n+        ds >> be;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif TXUNDO_DESERIALIZE\n-            try\n-            {\n-                CTxUndo tu;\n-                ds >> tu;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CTxUndo tu;\n+        ds >> tu;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BLOCKUNDO_DESERIALIZE\n-            try\n-            {\n-                CBlockUndo bu;\n-                ds >> bu;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CBlockUndo bu;\n+        ds >> bu;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif COINS_DESERIALIZE\n-            try\n-            {\n-                Coin coin;\n-                ds >> coin;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        Coin coin;\n+        ds >> coin;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif NETADDR_DESERIALIZE\n-            try\n-            {\n-                CNetAddr na;\n-                ds >> na;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CNetAddr na;\n+        ds >> na;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif SERVICE_DESERIALIZE\n-            try\n-            {\n-                CService s;\n-                ds >> s;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CService s;\n+        ds >> s;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif MESSAGEHEADER_DESERIALIZE\n-            CMessageHeader::MessageStartChars pchMessageStart = {0x00, 0x00, 0x00, 0x00};\n-            try\n-            {\n-                CMessageHeader mh(pchMessageStart);\n-                ds >> mh;\n-                if (!mh.IsValid(pchMessageStart)) {return;}\n-            } catch (const std::ios_base::failure& e) {return;}\n+    CMessageHeader::MessageStartChars pchMessageStart = {0x00, 0x00, 0x00, 0x00};\n+    try {\n+        CMessageHeader mh(pchMessageStart);\n+        ds >> mh;\n+        (void)mh.IsValid(pchMessageStart);\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif ADDRESS_DESERIALIZE\n-            try\n-            {\n-                CAddress a;\n-                ds >> a;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CAddress a;\n+        ds >> a;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif INV_DESERIALIZE\n-            try\n-            {\n-                CInv i;\n-                ds >> i;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CInv i;\n+        ds >> i;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BLOOMFILTER_DESERIALIZE\n-            try\n-            {\n-                CBloomFilter bf;\n-                ds >> bf;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CBloomFilter bf;\n+        ds >> bf;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif DISKBLOCKINDEX_DESERIALIZE\n-            try\n-            {\n-                CDiskBlockIndex dbi;\n-                ds >> dbi;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CDiskBlockIndex dbi;\n+        ds >> dbi;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif TXOUTCOMPRESSOR_DESERIALIZE\n-            CTxOut to;\n-            CTxOutCompressor toc(to);\n-            try\n-            {\n-                ds >> toc;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    CTxOut to;\n+    CTxOutCompressor toc(to);\n+    try {\n+        ds >> toc;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BLOCKTRANSACTIONS_DESERIALIZE\n-            try\n-            {\n-                BlockTransactions bt;\n-                ds >> bt;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        BlockTransactions bt;\n+        ds >> bt;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BLOCKTRANSACTIONSREQUEST_DESERIALIZE\n-            try\n-            {\n-                BlockTransactionsRequest btr;\n-                ds >> btr;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        BlockTransactionsRequest btr;\n+        ds >> btr;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #else\n #error Need at least one fuzz target to compile\n #endif"
      },
      {
        "sha": "fefafda36bd78b66b9863397d009b0d2321f760f",
        "filename": "src/test/fuzz/transaction.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e/src/test/fuzz/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e/src/test/fuzz/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/transaction.cpp?ref=cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "patch": "@@ -26,19 +26,31 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         int nVersion;\n         ds >> nVersion;\n         ds.SetVersion(nVersion);\n-    } catch (const std::ios_base::failure& e) {\n+    } catch (const std::ios_base::failure&) {\n         return;\n     }\n-    bool valid = true;\n+    bool valid_tx = true;\n     const CTransaction tx = [&] {\n         try {\n             return CTransaction(deserialize, ds);\n-        } catch (const std::ios_base::failure& e) {\n-            valid = false;\n+        } catch (const std::ios_base::failure&) {\n+            valid_tx = false;\n             return CTransaction();\n         }\n     }();\n-    if (!valid) {\n+    bool valid_mutable_tx = true;\n+    CDataStream ds_mtx(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n+    CMutableTransaction mutable_tx;\n+    try {\n+        int nVersion;\n+        ds_mtx >> nVersion;\n+        ds_mtx.SetVersion(nVersion);\n+        ds_mtx >> mutable_tx;\n+    } catch (const std::ios_base::failure&) {\n+        valid_mutable_tx = false;\n+    }\n+    assert(valid_tx == valid_mutable_tx);\n+    if (!valid_tx) {\n         return;\n     }\n "
      },
      {
        "sha": "ffebb579e7fee6947260b4b728b7f753fd20c94d",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 26,
        "deletions": 1,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "patch": "@@ -12,6 +12,27 @@\n import subprocess\n import logging\n \n+# Fuzzers known to lack a seed corpus in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus\n+FUZZERS_MISSING_CORPORA = [\n+    \"addr_info_deserialize\",\n+    \"block_file_info_deserialize\",\n+    \"block_filter_deserialize\",\n+    \"block_header_and_short_txids_deserialize\",\n+    \"fee_rate_deserialize\",\n+    \"flat_file_pos_deserialize\",\n+    \"key_origin_info_deserialize\",\n+    \"merkle_block_deserialize\",\n+    \"out_point_deserialize\",\n+    \"partial_merkle_tree_deserialize\",\n+    \"partially_signed_transaction_deserialize\",\n+    \"prefilled_transaction_deserialize\",\n+    \"psbt_input_deserialize\",\n+    \"psbt_output_deserialize\",\n+    \"pub_key_deserialize\",\n+    \"script_deserialize\",\n+    \"sub_net_deserialize\",\n+    \"tx_in_deserialize\",\n+]\n \n def main():\n     parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n@@ -100,10 +121,14 @@ def main():\n \n def run_once(*, corpus, test_list, build_dir, export_coverage):\n     for t in test_list:\n+        corpus_path = os.path.join(corpus, t)\n+        if t in FUZZERS_MISSING_CORPORA:\n+            os.makedirs(corpus_path, exist_ok=True)\n         args = [\n             os.path.join(build_dir, 'src', 'test', 'fuzz', t),\n             '-runs=1',\n-            os.path.join(corpus, t),\n+            '-detect_leaks=0',\n+            corpus_path,\n         ]\n         logging.debug('Run {} with args {}'.format(t, args))\n         result = subprocess.run(args, stderr=subprocess.PIPE, universal_newlines=True)"
      }
    ]
  },
  {
    "sha": "978b25528c5f336e0aade73bd1b320500f257f70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzhiMjU1MjhjNWYzMzZlMGFhZGU3M2JkMWIzMjA1MDBmMjU3Zjcw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-06T08:52:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-06T09:02:08Z"
      },
      "message": "util: Update tinyformat to upstream\n\nLast update was in 2017.\nUpdates tinyformat to upstream commit 705e3f4e1de922069bf715746d35bd2364b1f98f.\nRe-apply bitcoin core specific changes.\n\nNo changes that affect our use, as far as I can see, but this gets rid\nof the gcc `-Wimplicit-fallthrough` warnings, at least.",
      "tree": {
        "sha": "094cc600ad2d96930b87b27f75470d09257a8942",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/094cc600ad2d96930b87b27f75470d09257a8942"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/978b25528c5f336e0aade73bd1b320500f257f70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/978b25528c5f336e0aade73bd1b320500f257f70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/978b25528c5f336e0aade73bd1b320500f257f70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/978b25528c5f336e0aade73bd1b320500f257f70/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e"
      }
    ],
    "stats": {
      "total": 459,
      "additions": 278,
      "deletions": 181
    },
    "files": [
      {
        "sha": "be63f2d5d8205a91a564c93fe39aa91dc4d58a3c",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 278,
        "deletions": 181,
        "changes": 459,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/978b25528c5f336e0aade73bd1b320500f257f70/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/978b25528c5f336e0aade73bd1b320500f257f70/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=978b25528c5f336e0aade73bd1b320500f257f70",
        "patch": "@@ -33,6 +33,7 @@\n //\n // * Type safety and extensibility for user defined types.\n // * C99 printf() compatibility, to the extent possible using std::ostream\n+// * POSIX extension for positional arguments\n // * Simplicity and minimalism.  A single header file to include and distribute\n //   with your projects.\n // * Augment rather than replace the standard stream formatting mechanism\n@@ -42,7 +43,7 @@\n // Main interface example usage\n // ----------------------------\n //\n-// To print a date to std::cout:\n+// To print a date to std::cout for American usage:\n //\n //   std::string weekday = \"Wednesday\";\n //   const char* month = \"July\";\n@@ -52,6 +53,14 @@\n //\n //   tfm::printf(\"%s, %s %d, %.2d:%.2d\\n\", weekday, month, day, hour, min);\n //\n+// POSIX extension for positional arguments is available.\n+// The ability to rearrange formatting arguments is an important feature\n+// for localization because the word order may vary in different languages.\n+//\n+// Previous example for German usage. Arguments are reordered:\n+//\n+//   tfm::printf(\"%1$s, %3$d. %2$s, %4$d:%5$.2d\\n\", weekday, month, day, hour, min);\n+//\n // The strange types here emphasize the type safety of the interface; it is\n // possible to print a std::string using the \"%s\" conversion, and a\n // size_t using the \"%d\" conversion.  A similar result could be achieved\n@@ -133,12 +142,17 @@ namespace tfm = tinyformat;\n //------------------------------------------------------------------------------\n // Implementation details.\n #include <algorithm>\n-#include <cassert>\n #include <iostream>\n #include <sstream>\n-#include <stdexcept>\n+#include <stdexcept> // Added for Bitcoin Core\n+\n+#ifndef TINYFORMAT_ASSERT\n+#   include <cassert>\n+#   define TINYFORMAT_ASSERT(cond) assert(cond)\n+#endif\n \n #ifndef TINYFORMAT_ERROR\n+#   include <cassert>\n #   define TINYFORMAT_ERROR(reason) assert(0 && reason)\n #endif\n \n@@ -149,13 +163,13 @@ namespace tfm = tinyformat;\n #endif\n \n #if defined(__GLIBCXX__) && __GLIBCXX__ < 20080201\n-//  std::showpos is broken on old libstdc++ as provided with OSX.  See\n+//  std::showpos is broken on old libstdc++ as provided with macOS.  See\n //  http://gcc.gnu.org/ml/libstdc++/2007-11/msg00075.html\n #   define TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n #endif\n \n #ifdef __APPLE__\n-// Workaround OSX linker warning: Xcode uses different default symbol\n+// Workaround macOS linker warning: Xcode uses different default symbol\n // visibilities for static libs vs executables (see issue #25)\n #   define TINYFORMAT_HIDDEN __attribute__((visibility(\"hidden\")))\n #else\n@@ -164,6 +178,7 @@ namespace tfm = tinyformat;\n \n namespace tinyformat {\n \n+// Added for Bitcoin Core\n class format_error: public std::runtime_error\n {\n public:\n@@ -218,7 +233,7 @@ template<int n> struct is_wchar<wchar_t[n]> {};\n template<typename T, typename fmtT, bool convertible = is_convertible<T, fmtT>::value>\n struct formatValueAsType\n {\n-    static void invoke(std::ostream& /*out*/, const T& /*value*/) { assert(0); }\n+    static void invoke(std::ostream& /*out*/, const T& /*value*/) { TINYFORMAT_ASSERT(0); }\n };\n // Specialized version for types that can actually be converted to fmtT, as\n // indicated by the \"convertible\" template parameter.\n@@ -240,8 +255,7 @@ struct formatZeroIntegerWorkaround<T,true>\n {\n     static bool invoke(std::ostream& out, const T& value)\n     {\n-        if (static_cast<int>(value) == 0 && out.flags() & std::ios::showpos)\n-        {\n+        if (static_cast<int>(value) == 0 && out.flags() & std::ios::showpos) {\n             out << \"+0\";\n             return true;\n         }\n@@ -282,7 +296,7 @@ inline void formatTruncated(std::ostream& out, const T& value, int ntrunc)\n inline void formatTruncated(std::ostream& out, type* value, int ntrunc) \\\n {                                                           \\\n     std::streamsize len = 0;                                \\\n-    while(len < ntrunc && value[len] != 0)                  \\\n+    while (len < ntrunc && value[len] != 0)                 \\\n         ++len;                                              \\\n     out.write(value, len);                                  \\\n }\n@@ -328,15 +342,14 @@ inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,\n     // could otherwise lead to a crash when printing a dangling (const char*).\n     const bool canConvertToChar = detail::is_convertible<T,char>::value;\n     const bool canConvertToVoidPtr = detail::is_convertible<T, const void*>::value;\n-    if(canConvertToChar && *(fmtEnd-1) == 'c')\n+    if (canConvertToChar && *(fmtEnd-1) == 'c')\n         detail::formatValueAsType<T, char>::invoke(out, value);\n-    else if(canConvertToVoidPtr && *(fmtEnd-1) == 'p')\n+    else if (canConvertToVoidPtr && *(fmtEnd-1) == 'p')\n         detail::formatValueAsType<T, const void*>::invoke(out, value);\n #ifdef TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n-    else if(detail::formatZeroIntegerWorkaround<T>::invoke(out, value)) /**/;\n+    else if (detail::formatZeroIntegerWorkaround<T>::invoke(out, value)) /**/;\n #endif\n-    else if(ntrunc >= 0)\n-    {\n+    else if (ntrunc >= 0) {\n         // Take care not to overread C strings in truncating conversions like\n         // \"%.4s\" where at most 4 characters may be read.\n         detail::formatTruncated(out, value, ntrunc);\n@@ -351,8 +364,7 @@ inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,\n inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,  \\\n                         const char* fmtEnd, int /**/, charType value) \\\n {                                                                     \\\n-    switch(*(fmtEnd-1))                                               \\\n-    {                                                                 \\\n+    switch (*(fmtEnd-1)) {                                            \\\n         case 'u': case 'd': case 'i': case 'o': case 'X': case 'x':   \\\n             out << static_cast<int>(value); break;                    \\\n         default:                                                      \\\n@@ -490,19 +502,19 @@ namespace detail {\n \n // Type-opaque holder for an argument to format(), with associated actions on\n // the type held as explicit function pointers.  This allows FormatArg's for\n-// each argument to be allocated as a homogenous array inside FormatList\n+// each argument to be allocated as a homogeneous array inside FormatList\n // whereas a naive implementation based on inheritance does not.\n class FormatArg\n {\n     public:\n         FormatArg()\n-             : m_value(nullptr),\n-             m_formatImpl(nullptr),\n-             m_toIntImpl(nullptr)\n-         { }\n+            : m_value(NULL),\n+            m_formatImpl(NULL),\n+            m_toIntImpl(NULL)\n+        { }\n \n         template<typename T>\n-        explicit FormatArg(const T& value)\n+        FormatArg(const T& value)\n             : m_value(static_cast<const void*>(&value)),\n             m_formatImpl(&formatImpl<T>),\n             m_toIntImpl(&toIntImpl<T>)\n@@ -511,15 +523,15 @@ class FormatArg\n         void format(std::ostream& out, const char* fmtBegin,\n                     const char* fmtEnd, int ntrunc) const\n         {\n-            assert(m_value);\n-            assert(m_formatImpl);\n+            TINYFORMAT_ASSERT(m_value);\n+            TINYFORMAT_ASSERT(m_formatImpl);\n             m_formatImpl(out, fmtBegin, fmtEnd, ntrunc, m_value);\n         }\n \n         int toInt() const\n         {\n-            assert(m_value);\n-            assert(m_toIntImpl);\n+            TINYFORMAT_ASSERT(m_value);\n+            TINYFORMAT_ASSERT(m_toIntImpl);\n             return m_toIntImpl(m_value);\n         }\n \n@@ -549,36 +561,68 @@ class FormatArg\n inline int parseIntAndAdvance(const char*& c)\n {\n     int i = 0;\n-    for(;*c >= '0' && *c <= '9'; ++c)\n+    for (;*c >= '0' && *c <= '9'; ++c)\n         i = 10*i + (*c - '0');\n     return i;\n }\n \n-// Print literal part of format string and return next format spec\n-// position.\n+// Parse width or precision `n` from format string pointer `c`, and advance it\n+// to the next character. If an indirection is requested with `*`, the argument\n+// is read from `args[argIndex]` and `argIndex` is incremented (or read\n+// from `args[n]` in positional mode). Returns true if one or more\n+// characters were read.\n+inline bool parseWidthOrPrecision(int& n, const char*& c, bool positionalMode,\n+                                  const detail::FormatArg* args,\n+                                  int& argIndex, int numArgs)\n+{\n+    if (*c >= '0' && *c <= '9') {\n+        n = parseIntAndAdvance(c);\n+    }\n+    else if (*c == '*') {\n+        ++c;\n+        n = 0;\n+        if (positionalMode) {\n+            int pos = parseIntAndAdvance(c) - 1;\n+            if (*c != '$')\n+                TINYFORMAT_ERROR(\"tinyformat: Non-positional argument used after a positional one\");\n+            if (pos >= 0 && pos < numArgs)\n+                n = args[pos].toInt();\n+            else\n+                TINYFORMAT_ERROR(\"tinyformat: Positional argument out of range\");\n+            ++c;\n+        }\n+        else {\n+            if (argIndex < numArgs)\n+                n = args[argIndex++].toInt();\n+            else\n+                TINYFORMAT_ERROR(\"tinyformat: Not enough arguments to read variable width or precision\");\n+        }\n+    }\n+    else {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+// Print literal part of format string and return next format spec position.\n //\n-// Skips over any occurrences of '%%', printing a literal '%' to the\n-// output.  The position of the first % character of the next\n-// nontrivial format spec is returned, or the end of string.\n+// Skips over any occurrences of '%%', printing a literal '%' to the output.\n+// The position of the first % character of the next nontrivial format spec is\n+// returned, or the end of string.\n inline const char* printFormatStringLiteral(std::ostream& out, const char* fmt)\n {\n     const char* c = fmt;\n-    for(;; ++c)\n-    {\n-        switch(*c)\n-        {\n-            case '\\0':\n-                out.write(fmt, c - fmt);\n+    for (;; ++c) {\n+        if (*c == '\\0') {\n+            out.write(fmt, c - fmt);\n+            return c;\n+        }\n+        else if (*c == '%') {\n+            out.write(fmt, c - fmt);\n+            if (*(c+1) != '%')\n                 return c;\n-            case '%':\n-                out.write(fmt, c - fmt);\n-                if(*(c+1) != '%')\n-                    return c;\n-                // for \"%%\", tack trailing % onto next literal section.\n-                fmt = ++c;\n-                break;\n-            default:\n-                break;\n+            // for \"%%\", tack trailing % onto next literal section.\n+            fmt = ++c;\n         }\n     }\n }\n@@ -587,23 +631,43 @@ inline const char* printFormatStringLiteral(std::ostream& out, const char* fmt)\n // Parse a format string and set the stream state accordingly.\n //\n // The format mini-language recognized here is meant to be the one from C99,\n-// with the form \"%[flags][width][.precision][length]type\".\n+// with the form \"%[flags][width][.precision][length]type\" with POSIX\n+// positional arguments extension.\n+//\n+// POSIX positional arguments extension:\n+// Conversions can be applied to the nth argument after the format in\n+// the argument list, rather than to the next unused argument. In this case,\n+// the conversion specifier character % (see below) is replaced by the sequence\n+// \"%n$\", where n is a decimal integer in the range [1,{NL_ARGMAX}],\n+// giving the position of the argument in the argument list. This feature\n+// provides for the definition of format strings that select arguments\n+// in an order appropriate to specific languages.\n+//\n+// The format can contain either numbered argument conversion specifications\n+// (that is, \"%n$\" and \"*m$\"), or unnumbered argument conversion specifications\n+// (that is, % and * ), but not both. The only exception to this is that %%\n+// can be mixed with the \"%n$\" form. The results of mixing numbered and\n+// unnumbered argument specifications in a format string are undefined.\n+// When numbered argument specifications are used, specifying the Nth argument\n+// requires that all the leading arguments, from the first to the (N-1)th,\n+// are specified in the format string.\n+//\n+// In format strings containing the \"%n$\" form of conversion specification,\n+// numbered arguments in the argument list can be referenced from the format\n+// string as many times as required.\n //\n // Formatting options which can't be natively represented using the ostream\n // state are returned in spacePadPositive (for space padded positive numbers)\n // and ntrunc (for truncating conversions).  argIndex is incremented if\n // necessary to pull out variable width and precision.  The function returns a\n // pointer to the character after the end of the current format spec.\n-inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositive,\n+inline const char* streamStateFromFormat(std::ostream& out, bool& positionalMode,\n+                                         bool& spacePadPositive,\n                                          int& ntrunc, const char* fmtStart,\n-                                         const detail::FormatArg* formatters,\n-                                         int& argIndex, int numFormatters)\n+                                         const detail::FormatArg* args,\n+                                         int& argIndex, int numArgs)\n {\n-    if(*fmtStart != '%')\n-    {\n-        TINYFORMAT_ERROR(\"tinyformat: Not enough conversion specifiers in format string\");\n-        return fmtStart;\n-    }\n+    TINYFORMAT_ASSERT(*fmtStart == '%');\n     // Reset stream state to defaults.\n     out.width(0);\n     out.precision(6);\n@@ -616,100 +680,113 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositi\n     bool widthSet = false;\n     int widthExtra = 0;\n     const char* c = fmtStart + 1;\n-    // 1) Parse flags\n-    for(;; ++c)\n-    {\n-        switch(*c)\n-        {\n-            case '#':\n-                out.setf(std::ios::showpoint | std::ios::showbase);\n-                continue;\n-            case '0':\n-                // overridden by left alignment ('-' flag)\n-                if(!(out.flags() & std::ios::left))\n-                {\n-                    // Use internal padding so that numeric values are\n-                    // formatted correctly, eg -00010 rather than 000-10\n-                    out.fill('0');\n-                    out.setf(std::ios::internal, std::ios::adjustfield);\n-                }\n-                continue;\n-            case '-':\n-                out.fill(' ');\n-                out.setf(std::ios::left, std::ios::adjustfield);\n-                continue;\n-            case ' ':\n-                // overridden by show positive sign, '+' flag.\n-                if(!(out.flags() & std::ios::showpos))\n-                    spacePadPositive = true;\n-                continue;\n-            case '+':\n-                out.setf(std::ios::showpos);\n-                spacePadPositive = false;\n-                widthExtra = 1;\n-                continue;\n-            default:\n-                break;\n+\n+    // 1) Parse an argument index (if followed by '$') or a width possibly\n+    // preceded with '0' flag.\n+    if (*c >= '0' && *c <= '9') {\n+        const char tmpc = *c;\n+        int value = parseIntAndAdvance(c);\n+        if (*c == '$') {\n+            // value is an argument index\n+            if (value > 0 && value <= numArgs)\n+                argIndex = value - 1;\n+            else\n+                TINYFORMAT_ERROR(\"tinyformat: Positional argument out of range\");\n+            ++c;\n+            positionalMode = true;\n+        }\n+        else if (positionalMode) {\n+            TINYFORMAT_ERROR(\"tinyformat: Non-positional argument used after a positional one\");\n+        }\n+        else {\n+            if (tmpc == '0') {\n+                // Use internal padding so that numeric values are\n+                // formatted correctly, eg -00010 rather than 000-10\n+                out.fill('0');\n+                out.setf(std::ios::internal, std::ios::adjustfield);\n+            }\n+            if (value != 0) {\n+                // Nonzero value means that we parsed width.\n+                widthSet = true;\n+                out.width(value);\n+            }\n         }\n-        break;\n     }\n-    // 2) Parse width\n-    if(*c >= '0' && *c <= '9')\n-    {\n-        widthSet = true;\n-        out.width(parseIntAndAdvance(c));\n+    else if (positionalMode) {\n+        TINYFORMAT_ERROR(\"tinyformat: Non-positional argument used after a positional one\");\n     }\n-    if(*c == '*')\n-    {\n-        widthSet = true;\n+    // 2) Parse flags and width if we did not do it in previous step.\n+    if (!widthSet) {\n+        // Parse flags\n+        for (;; ++c) {\n+            switch (*c) {\n+                case '#':\n+                    out.setf(std::ios::showpoint | std::ios::showbase);\n+                    continue;\n+                case '0':\n+                    // overridden by left alignment ('-' flag)\n+                    if (!(out.flags() & std::ios::left)) {\n+                        // Use internal padding so that numeric values are\n+                        // formatted correctly, eg -00010 rather than 000-10\n+                        out.fill('0');\n+                        out.setf(std::ios::internal, std::ios::adjustfield);\n+                    }\n+                    continue;\n+                case '-':\n+                    out.fill(' ');\n+                    out.setf(std::ios::left, std::ios::adjustfield);\n+                    continue;\n+                case ' ':\n+                    // overridden by show positive sign, '+' flag.\n+                    if (!(out.flags() & std::ios::showpos))\n+                        spacePadPositive = true;\n+                    continue;\n+                case '+':\n+                    out.setf(std::ios::showpos);\n+                    spacePadPositive = false;\n+                    widthExtra = 1;\n+                    continue;\n+                default:\n+                    break;\n+            }\n+            break;\n+        }\n+        // Parse width\n         int width = 0;\n-        if(argIndex < numFormatters)\n-            width = formatters[argIndex++].toInt();\n-        else\n-            TINYFORMAT_ERROR(\"tinyformat: Not enough arguments to read variable width\");\n-        if(width < 0)\n-        {\n-            // negative widths correspond to '-' flag set\n-            out.fill(' ');\n-            out.setf(std::ios::left, std::ios::adjustfield);\n-            width = -width;\n+        widthSet = parseWidthOrPrecision(width, c, positionalMode,\n+                                         args, argIndex, numArgs);\n+        if (widthSet) {\n+            if (width < 0) {\n+                // negative widths correspond to '-' flag set\n+                out.fill(' ');\n+                out.setf(std::ios::left, std::ios::adjustfield);\n+                width = -width;\n+            }\n+            out.width(width);\n         }\n-        out.width(width);\n-        ++c;\n     }\n     // 3) Parse precision\n-    if(*c == '.')\n-    {\n+    if (*c == '.') {\n         ++c;\n         int precision = 0;\n-        if(*c == '*')\n-        {\n-            ++c;\n-            if(argIndex < numFormatters)\n-                precision = formatters[argIndex++].toInt();\n-            else\n-                TINYFORMAT_ERROR(\"tinyformat: Not enough arguments to read variable precision\");\n-        }\n-        else\n-        {\n-            if(*c >= '0' && *c <= '9')\n-                precision = parseIntAndAdvance(c);\n-            else if(*c == '-') // negative precisions ignored, treated as zero.\n-                parseIntAndAdvance(++c);\n-        }\n-        out.precision(precision);\n-        precisionSet = true;\n+        parseWidthOrPrecision(precision, c, positionalMode,\n+                              args, argIndex, numArgs);\n+        // Presence of `.` indicates precision set, unless the inferred value\n+        // was negative in which case the default is used.\n+        precisionSet = precision >= 0;\n+        if (precisionSet)\n+            out.precision(precision);\n     }\n     // 4) Ignore any C99 length modifier\n-    while(*c == 'l' || *c == 'h' || *c == 'L' ||\n-          *c == 'j' || *c == 'z' || *c == 't')\n+    while (*c == 'l' || *c == 'h' || *c == 'L' ||\n+           *c == 'j' || *c == 'z' || *c == 't') {\n         ++c;\n+    }\n     // 5) We're up to the conversion specifier character.\n     // Set stream flags based on conversion specifier (thanks to the\n     // boost::format class for forging the way here).\n     bool intConversion = false;\n-    switch(*c)\n-    {\n+    switch (*c) {\n         case 'u': case 'd': case 'i':\n             out.setf(std::ios::dec, std::ios::basefield);\n             intConversion = true;\n@@ -738,6 +815,18 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositi\n         case 'f':\n             out.setf(std::ios::fixed, std::ios::floatfield);\n             break;\n+        case 'A':\n+            out.setf(std::ios::uppercase);\n+            // Falls through\n+        case 'a':\n+#           ifdef _MSC_VER\n+            // Workaround https://developercommunity.visualstudio.com/content/problem/520472/hexfloat-stream-output-does-not-ignore-precision-a.html\n+            // by always setting maximum precision on MSVC to avoid precision\n+            // loss for doubles.\n+            out.precision(13);\n+#           endif\n+            out.setf(std::ios::fixed | std::ios::scientific, std::ios::floatfield);\n+            break;\n         case 'G':\n             out.setf(std::ios::uppercase);\n             // Falls through\n@@ -746,17 +835,13 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositi\n             // As in boost::format, let stream decide float format.\n             out.flags(out.flags() & ~std::ios::floatfield);\n             break;\n-        case 'a': case 'A':\n-            TINYFORMAT_ERROR(\"tinyformat: the %a and %A conversion specs \"\n-                             \"are not supported\");\n-            break;\n         case 'c':\n             // Handled as special case inside formatValue()\n             break;\n         case 's':\n-            if(precisionSet)\n+            if (precisionSet)\n                 ntrunc = static_cast<int>(out.precision());\n-            // Make %s print booleans as \"true\" and \"false\"\n+            // Make %s print Booleans as \"true\" and \"false\"\n             out.setf(std::ios::boolalpha);\n             break;\n         case 'n':\n@@ -770,8 +855,7 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositi\n         default:\n             break;\n     }\n-    if(intConversion && precisionSet && !widthSet)\n-    {\n+    if (intConversion && precisionSet && !widthSet) {\n         // \"precision\" for integers gives the minimum number of digits (to be\n         // padded with zeros on the left).  This isn't really supported by the\n         // iostreams, but we can approximately simulate it with the width if\n@@ -786,35 +870,43 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositi\n \n //------------------------------------------------------------------------------\n inline void formatImpl(std::ostream& out, const char* fmt,\n-                       const detail::FormatArg* formatters,\n-                       int numFormatters)\n+                       const detail::FormatArg* args,\n+                       int numArgs)\n {\n     // Saved stream state\n     std::streamsize origWidth = out.width();\n     std::streamsize origPrecision = out.precision();\n     std::ios::fmtflags origFlags = out.flags();\n     char origFill = out.fill();\n \n-    for (int argIndex = 0; argIndex < numFormatters; ++argIndex)\n-    {\n-        // Parse the format string\n+    // \"Positional mode\" means all format specs should be of the form \"%n$...\"\n+    // with `n` an integer. We detect this in `streamStateFromFormat`.\n+    bool positionalMode = false;\n+    int argIndex = 0;\n+    while (true) {\n         fmt = printFormatStringLiteral(out, fmt);\n+        if (*fmt == '\\0') {\n+            if (!positionalMode && argIndex < numArgs) {\n+                TINYFORMAT_ERROR(\"tinyformat: Not enough conversion specifiers in format string\");\n+            }\n+            break;\n+        }\n         bool spacePadPositive = false;\n         int ntrunc = -1;\n-        const char* fmtEnd = streamStateFromFormat(out, spacePadPositive, ntrunc, fmt,\n-                                                   formatters, argIndex, numFormatters);\n-        if (argIndex >= numFormatters)\n-        {\n-            // Check args remain after reading any variable width/precision\n-            TINYFORMAT_ERROR(\"tinyformat: Not enough format arguments\");\n+        const char* fmtEnd = streamStateFromFormat(out, positionalMode, spacePadPositive, ntrunc, fmt,\n+                                                   args, argIndex, numArgs);\n+        // NB: argIndex may be incremented by reading variable width/precision\n+        // in `streamStateFromFormat`, so do the bounds check here.\n+        if (argIndex >= numArgs) {\n+            TINYFORMAT_ERROR(\"tinyformat: Too many conversion specifiers in format string\");\n             return;\n         }\n-        const FormatArg& arg = formatters[argIndex];\n+        const FormatArg& arg = args[argIndex];\n         // Format the arg into the stream.\n-        if(!spacePadPositive)\n+        if (!spacePadPositive) {\n             arg.format(out, fmt, fmtEnd, ntrunc);\n-        else\n-        {\n+        }\n+        else {\n             // The following is a special case with no direct correspondence\n             // between stream formatting and the printf() behaviour.  Simulate\n             // it crudely by formatting into a temporary string stream and\n@@ -824,18 +916,17 @@ inline void formatImpl(std::ostream& out, const char* fmt,\n             tmpStream.setf(std::ios::showpos);\n             arg.format(tmpStream, fmt, fmtEnd, ntrunc);\n             std::string result = tmpStream.str(); // allocates... yuck.\n-            for(size_t i = 0, iend = result.size(); i < iend; ++i)\n-                if(result[i] == '+') result[i] = ' ';\n+            for (size_t i = 0, iend = result.size(); i < iend; ++i) {\n+                if (result[i] == '+')\n+                    result[i] = ' ';\n+            }\n             out << result;\n         }\n+        if (!positionalMode)\n+            ++argIndex;\n         fmt = fmtEnd;\n     }\n \n-    // Print remaining part of format string.\n-    fmt = printFormatStringLiteral(out, fmt);\n-    if(*fmt != '\\0')\n-        TINYFORMAT_ERROR(\"tinyformat: Too many conversion specifiers in format string\");\n-\n     // Restore stream state\n     out.width(origWidth);\n     out.precision(origPrecision);\n@@ -855,14 +946,14 @@ inline void formatImpl(std::ostream& out, const char* fmt,\n class FormatList\n {\n     public:\n-        FormatList(detail::FormatArg* formatters, int N)\n-            : m_formatters(formatters), m_N(N) { }\n+        FormatList(detail::FormatArg* args, int N)\n+            : m_args(args), m_N(N) { }\n \n         friend void vformat(std::ostream& out, const char* fmt,\n                             const FormatList& list);\n \n     private:\n-        const detail::FormatArg* m_formatters;\n+        const detail::FormatArg* m_args;\n         int m_N;\n };\n \n@@ -879,29 +970,33 @@ class FormatListN : public FormatList\n     public:\n #ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n         template<typename... Args>\n-        explicit FormatListN(const Args&... args)\n+        FormatListN(const Args&... args)\n             : FormatList(&m_formatterStore[0], N),\n             m_formatterStore { FormatArg(args)... }\n         { static_assert(sizeof...(args) == N, \"Number of args must be N\"); }\n #else // C++98 version\n         void init(int) {}\n-#       define TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR(n)       \\\n-                                                               \\\n-        template<TINYFORMAT_ARGTYPES(n)>                       \\\n-        explicit FormatListN(TINYFORMAT_VARARGS(n))            \\\n-            : FormatList(&m_formatterStore[0], n)              \\\n-        { assert(n == N); init(0, TINYFORMAT_PASSARGS(n)); }   \\\n-                                                               \\\n-        template<TINYFORMAT_ARGTYPES(n)>                       \\\n-        void init(int i, TINYFORMAT_VARARGS(n))                \\\n-        {                                                      \\\n-            m_formatterStore[i] = FormatArg(v1);               \\\n-            init(i+1 TINYFORMAT_PASSARGS_TAIL(n));             \\\n+#       define TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR(n)                \\\n+                                                                        \\\n+        template<TINYFORMAT_ARGTYPES(n)>                                \\\n+        FormatListN(TINYFORMAT_VARARGS(n))                              \\\n+            : FormatList(&m_formatterStore[0], n)                       \\\n+        { TINYFORMAT_ASSERT(n == N); init(0, TINYFORMAT_PASSARGS(n)); } \\\n+                                                                        \\\n+        template<TINYFORMAT_ARGTYPES(n)>                                \\\n+        void init(int i, TINYFORMAT_VARARGS(n))                         \\\n+        {                                                               \\\n+            m_formatterStore[i] = FormatArg(v1);                        \\\n+            init(i+1 TINYFORMAT_PASSARGS_TAIL(n));                      \\\n         }\n \n         TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR)\n #       undef TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR\n #endif\n+        FormatListN(const FormatListN& other)\n+            : FormatList(&m_formatterStore[0], N)\n+        { std::copy(&other.m_formatterStore[0], &other.m_formatterStore[N],\n+                    &m_formatterStore[0]); }\n \n     private:\n         FormatArg m_formatterStore[N];\n@@ -956,7 +1051,7 @@ TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_MAKEFORMATLIST)\n /// list of format arguments is held in a single function argument.\n inline void vformat(std::ostream& out, const char* fmt, FormatListRef list)\n {\n-    detail::formatImpl(out, fmt, list.m_formatters, list.m_N);\n+    detail::formatImpl(out, fmt, list.m_args, list.m_N);\n }\n \n \n@@ -993,6 +1088,7 @@ void printfln(const char* fmt, const Args&... args)\n     std::cout << '\\n';\n }\n \n+\n #else // C++98 version\n \n inline void format(std::ostream& out, const char* fmt)\n@@ -1063,6 +1159,7 @@ std::string format(const std::string &fmt, const Args&... args)\n \n } // namespace tinyformat\n \n+// Added for Bitcoin Core:\n /** Format arguments and return the string or write to given std::ostream (see tinyformat::format doc for details) */\n #define strprintf tfm::format\n "
      }
    ]
  },
  {
    "sha": "ce935292c041162e160d95fc6afeda3dceded2cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTkzNTI5MmMwNDExNjJlMTYwZDk1ZmM2YWZlZGEzZGNlZGVkMmNm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-09T13:07:31Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-06T09:10:31Z"
      },
      "message": "tests: Add fuzzing harness for various CTxIn related functions",
      "tree": {
        "sha": "e880e8d2f3eae3d74dde6b151f72440dd5b80b8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e880e8d2f3eae3d74dde6b151f72440dd5b80b8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce935292c041162e160d95fc6afeda3dceded2cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce935292c041162e160d95fc6afeda3dceded2cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce935292c041162e160d95fc6afeda3dceded2cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce935292c041162e160d95fc6afeda3dceded2cf/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 40,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d1f6589cf8928bfdda4da23743450e2b451c6ff5",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce935292c041162e160d95fc6afeda3dceded2cf/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce935292c041162e160d95fc6afeda3dceded2cf/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=ce935292c041162e160d95fc6afeda3dceded2cf",
        "patch": "@@ -47,6 +47,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/spanparsing \\\n   test/fuzz/sub_net_deserialize \\\n   test/fuzz/transaction \\\n+  test/fuzz/tx_in \\\n   test/fuzz/tx_in_deserialize \\\n   test/fuzz/txoutcompressor_deserialize \\\n   test/fuzz/txundo_deserialize\n@@ -497,6 +498,12 @@ test_fuzz_tx_in_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_tx_in_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_tx_in_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_tx_in_SOURCES = $(FUZZ_SUITE) test/fuzz/tx_in.cpp\n+test_fuzz_tx_in_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_tx_in_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_tx_in_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_tx_in_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n endif # ENABLE_FUZZ\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)"
      },
      {
        "sha": "8e116537d1af53a043d8ac1b44e46ca301184176",
        "filename": "src/test/fuzz/tx_in.cpp",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce935292c041162e160d95fc6afeda3dceded2cf/src/test/fuzz/tx_in.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce935292c041162e160d95fc6afeda3dceded2cf/src/test/fuzz/tx_in.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/tx_in.cpp?ref=ce935292c041162e160d95fc6afeda3dceded2cf",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <core_memusage.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <test/fuzz/fuzz.h>\n+#include <version.h>\n+\n+#include <cassert>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n+    CTxIn tx_in;\n+    try {\n+        int version;\n+        ds >> version;\n+        ds.SetVersion(version);\n+        ds >> tx_in;\n+    } catch (const std::ios_base::failure&) {\n+        return;\n+    }\n+\n+    (void)GetTransactionInputWeight(tx_in);\n+    (void)GetVirtualTransactionInputSize(tx_in);\n+    (void)RecursiveDynamicUsage(tx_in);\n+\n+    (void)tx_in.ToString();\n+}"
      }
    ]
  },
  {
    "sha": "e75ecb91c730115290e1201371492c2cd334e9b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzVlY2I5MWM3MzAxMTUyOTBlMTIwMTM3MTQ5MmMyY2QzMzRlOWI0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-09T13:14:52Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-06T09:10:44Z"
      },
      "message": "tests: Add fuzzing harness for various CTxOut related functions",
      "tree": {
        "sha": "b4ff0f82e847e8c9bc14fd60d4c0c9529b7e7735",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4ff0f82e847e8c9bc14fd60d4c0c9529b7e7735"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e75ecb91c730115290e1201371492c2cd334e9b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e75ecb91c730115290e1201371492c2cd334e9b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e75ecb91c730115290e1201371492c2cd334e9b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e75ecb91c730115290e1201371492c2cd334e9b4/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce935292c041162e160d95fc6afeda3dceded2cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce935292c041162e160d95fc6afeda3dceded2cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce935292c041162e160d95fc6afeda3dceded2cf"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 42,
      "deletions": 0
    },
    "files": [
      {
        "sha": "79f2080554cbdffdc70dcee97b89a30fe81f2c01",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e75ecb91c730115290e1201371492c2cd334e9b4/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e75ecb91c730115290e1201371492c2cd334e9b4/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=e75ecb91c730115290e1201371492c2cd334e9b4",
        "patch": "@@ -49,6 +49,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/transaction \\\n   test/fuzz/tx_in \\\n   test/fuzz/tx_in_deserialize \\\n+  test/fuzz/tx_out \\\n   test/fuzz/txoutcompressor_deserialize \\\n   test/fuzz/txundo_deserialize\n \n@@ -504,6 +505,12 @@ test_fuzz_tx_in_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_tx_in_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_tx_in_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_tx_out_SOURCES = $(FUZZ_SUITE) test/fuzz/tx_out.cpp\n+test_fuzz_tx_out_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_tx_out_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_tx_out_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_tx_out_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n endif # ENABLE_FUZZ\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)"
      },
      {
        "sha": "aa1338d5ba4120ce33c3d55dc28d359e471bb747",
        "filename": "src/test/fuzz/tx_out.cpp",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e75ecb91c730115290e1201371492c2cd334e9b4/src/test/fuzz/tx_out.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e75ecb91c730115290e1201371492c2cd334e9b4/src/test/fuzz/tx_out.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/tx_out.cpp?ref=e75ecb91c730115290e1201371492c2cd334e9b4",
        "patch": "@@ -0,0 +1,35 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <core_memusage.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <test/fuzz/fuzz.h>\n+#include <version.h>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n+    CTxOut tx_out;\n+    try {\n+        int version;\n+        ds >> version;\n+        ds.SetVersion(version);\n+        ds >> tx_out;\n+    } catch (const std::ios_base::failure&) {\n+        return;\n+    }\n+\n+    const CFeeRate dust_relay_fee{DUST_RELAY_TX_FEE};\n+    (void)GetDustThreshold(tx_out, dust_relay_fee);\n+    (void)IsDust(tx_out, dust_relay_fee);\n+    (void)RecursiveDynamicUsage(tx_out);\n+\n+    (void)tx_out.ToString();\n+    (void)tx_out.IsNull();\n+    tx_out.SetNull();\n+    assert(tx_out.IsNull());\n+}"
      }
    ]
  },
  {
    "sha": "d5766f223f627bf2eb731ce8552dfafa2b824378",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTc2NmYyMjNmNjI3YmYyZWI3MzFjZTg1NTJkZmFmYTJiODI0Mzc4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-02T08:01:27Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-06T09:11:02Z"
      },
      "message": "tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus",
      "tree": {
        "sha": "b1966a2537e5c1878b6bad4973415d342dac8720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1966a2537e5c1878b6bad4973415d342dac8720"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5766f223f627bf2eb731ce8552dfafa2b824378",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5766f223f627bf2eb731ce8552dfafa2b824378",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5766f223f627bf2eb731ce8552dfafa2b824378",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5766f223f627bf2eb731ce8552dfafa2b824378/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e75ecb91c730115290e1201371492c2cd334e9b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e75ecb91c730115290e1201371492c2cd334e9b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e75ecb91c730115290e1201371492c2cd334e9b4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6bbe45f00f6086ec405125a221beb2b978403878",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5766f223f627bf2eb731ce8552dfafa2b824378/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5766f223f627bf2eb731ce8552dfafa2b824378/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=d5766f223f627bf2eb731ce8552dfafa2b824378",
        "patch": "@@ -32,6 +32,8 @@\n     \"script_deserialize\",\n     \"sub_net_deserialize\",\n     \"tx_in_deserialize\",\n+    \"tx_in\",\n+    \"tx_out\",\n ]\n \n def main():"
      }
    ]
  },
  {
    "sha": "575383b3e1361e60ba88738a34d92b1662f915a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzUzODNiM2UxMzYxZTYwYmE4ODczOGEzNGQ5MmIxNjYyZjkxNWE3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-02T08:01:27Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-06T09:14:03Z"
      },
      "message": "tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus",
      "tree": {
        "sha": "63c069d4ce6b0e23871e2dd6984ecfeb084a8140",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63c069d4ce6b0e23871e2dd6984ecfeb084a8140"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/575383b3e1361e60ba88738a34d92b1662f915a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/575383b3e1361e60ba88738a34d92b1662f915a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/575383b3e1361e60ba88738a34d92b1662f915a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/575383b3e1361e60ba88738a34d92b1662f915a7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "080f565f9b80a20d4c10fd63b40b5ed63b5e6546",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/575383b3e1361e60ba88738a34d92b1662f915a7/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/575383b3e1361e60ba88738a34d92b1662f915a7/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=575383b3e1361e60ba88738a34d92b1662f915a7",
        "patch": "@@ -20,6 +20,7 @@\n     \"block_header_and_short_txids_deserialize\",\n     \"fee_rate_deserialize\",\n     \"flat_file_pos_deserialize\",\n+    \"integer\",\n     \"key_origin_info_deserialize\",\n     \"merkle_block_deserialize\",\n     \"out_point_deserialize\","
      }
    ]
  },
  {
    "sha": "597d10ceb9fd2a118c7e551cd6263379691d9295",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTdkMTBjZWI5ZmQyYTExOGM3ZTU1MWNkNjI2MzM3OTY5MWQ5Mjk1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-09T15:51:32Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-06T09:14:17Z"
      },
      "message": "tests: Add fuzzing harness for various functions consuming only integrals",
      "tree": {
        "sha": "8fcb609fbce9b034427ac85e229e8e802ac8bd77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fcb609fbce9b034427ac85e229e8e802ac8bd77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/597d10ceb9fd2a118c7e551cd6263379691d9295",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/597d10ceb9fd2a118c7e551cd6263379691d9295",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/597d10ceb9fd2a118c7e551cd6263379691d9295",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/597d10ceb9fd2a118c7e551cd6263379691d9295/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "575383b3e1361e60ba88738a34d92b1662f915a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/575383b3e1361e60ba88738a34d92b1662f915a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/575383b3e1361e60ba88738a34d92b1662f915a7"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 134,
      "deletions": 0
    },
    "files": [
      {
        "sha": "70b72b5c0e0e7c3669f9e5360516d0642af2bdd1",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/597d10ceb9fd2a118c7e551cd6263379691d9295/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/597d10ceb9fd2a118c7e551cd6263379691d9295/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=597d10ceb9fd2a118c7e551cd6263379691d9295",
        "patch": "@@ -26,6 +26,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/eval_script \\\n   test/fuzz/fee_rate_deserialize \\\n   test/fuzz/flat_file_pos_deserialize \\\n+  test/fuzz/integer \\\n   test/fuzz/inv_deserialize \\\n   test/fuzz/key_origin_info_deserialize \\\n   test/fuzz/merkle_block_deserialize \\\n@@ -365,6 +366,12 @@ test_fuzz_eval_script_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_eval_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_eval_script_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_integer_SOURCES = $(FUZZ_SUITE) test/fuzz/integer.cpp\n+test_fuzz_integer_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_integer_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_integer_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_integer_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n test_fuzz_txoutcompressor_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_txoutcompressor_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXOUTCOMPRESSOR_DESERIALIZE=1\n test_fuzz_txoutcompressor_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "723938bcdb7b13447ad1470cf59836ed6079f107",
        "filename": "src/test/fuzz/integer.cpp",
        "status": "added",
        "additions": 127,
        "deletions": 0,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/597d10ceb9fd2a118c7e551cd6263379691d9295/src/test/fuzz/integer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/597d10ceb9fd2a118c7e551cd6263379691d9295/src/test/fuzz/integer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/integer.cpp?ref=597d10ceb9fd2a118c7e551cd6263379691d9295",
        "patch": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <compressor.h>\n+#include <consensus/merkle.h>\n+#include <core_io.h>\n+#include <crypto/common.h>\n+#include <crypto/siphash.h>\n+#include <key_io.h>\n+#include <memusage.h>\n+#include <netbase.h>\n+#include <policy/settings.h>\n+#include <pow.h>\n+#include <pubkey.h>\n+#include <rpc/util.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+\n+#include <cassert>\n+#include <limits>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() < sizeof(uint256) + sizeof(uint160)) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const uint256 u256(fuzzed_data_provider.ConsumeBytes<unsigned char>(sizeof(uint256)));\n+    const uint160 u160(fuzzed_data_provider.ConsumeBytes<unsigned char>(sizeof(uint160)));\n+    const uint64_t u64 = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+    const int64_t i64 = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+    const uint32_t u32 = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+    const int32_t i32 = fuzzed_data_provider.ConsumeIntegral<int32_t>();\n+    const uint16_t u16 = fuzzed_data_provider.ConsumeIntegral<uint16_t>();\n+    const int16_t i16 = fuzzed_data_provider.ConsumeIntegral<int16_t>();\n+    const uint8_t u8 = fuzzed_data_provider.ConsumeIntegral<uint8_t>();\n+    const int8_t i8 = fuzzed_data_provider.ConsumeIntegral<int8_t>();\n+    // We cannot assume a specific value of std::is_signed<char>::value:\n+    // ConsumeIntegral<char>() instead of casting from {u,}int8_t.\n+    const char ch = fuzzed_data_provider.ConsumeIntegral<char>();\n+\n+    const Consensus::Params& consensus_params = Params().GetConsensus();\n+    (void)CheckProofOfWork(u256, u32, consensus_params);\n+    (void)CompressAmount(u64);\n+    static const uint256 u256_min(uint256S(\"0000000000000000000000000000000000000000000000000000000000000000\"));\n+    static const uint256 u256_max(uint256S(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\n+    const std::vector<uint256> v256{u256, u256_min, u256_max};\n+    (void)ComputeMerkleRoot(v256);\n+    (void)CountBits(u64);\n+    (void)DecompressAmount(u64);\n+    (void)FormatISO8601Date(i64);\n+    (void)FormatISO8601DateTime(i64);\n+    (void)GetSizeOfCompactSize(u64);\n+    (void)GetSpecialScriptSize(u32);\n+    // (void)GetVirtualTransactionSize(i64, i64); // function defined only for a subset of int64_t inputs\n+    // (void)GetVirtualTransactionSize(i64, i64, u32); // function defined only for a subset of int64_t/uint32_t inputs\n+    (void)HexDigit(ch);\n+    (void)i64tostr(i64);\n+    (void)IsDigit(ch);\n+    (void)IsSpace(ch);\n+    (void)IsSwitchChar(ch);\n+    (void)itostr(i32);\n+    (void)memusage::DynamicUsage(ch);\n+    (void)memusage::DynamicUsage(i16);\n+    (void)memusage::DynamicUsage(i32);\n+    (void)memusage::DynamicUsage(i64);\n+    (void)memusage::DynamicUsage(i8);\n+    (void)memusage::DynamicUsage(u16);\n+    (void)memusage::DynamicUsage(u32);\n+    (void)memusage::DynamicUsage(u64);\n+    (void)memusage::DynamicUsage(u8);\n+    const unsigned char uch = static_cast<unsigned char>(u8);\n+    (void)memusage::DynamicUsage(uch);\n+    (void)MillisToTimeval(i64);\n+    const double d = ser_uint64_to_double(u64);\n+    assert(ser_double_to_uint64(d) == u64);\n+    const float f = ser_uint32_to_float(u32);\n+    assert(ser_float_to_uint32(f) == u32);\n+    (void)SighashToStr(uch);\n+    (void)SipHashUint256(u64, u64, u256);\n+    (void)SipHashUint256Extra(u64, u64, u256, u32);\n+    (void)ToLower(ch);\n+\n+    const arith_uint256 au256 = UintToArith256(u256);\n+    assert(ArithToUint256(au256) == u256);\n+    assert(uint256S(au256.GetHex()) == u256);\n+    (void)au256.bits();\n+    (void)au256.GetCompact(/* fNegative= */ false);\n+    (void)au256.GetCompact(/* fNegative= */ true);\n+    (void)au256.getdouble();\n+    (void)au256.GetHex();\n+    (void)au256.GetLow64();\n+    (void)au256.size();\n+    (void)au256.ToString();\n+\n+    const CKeyID key_id{u160};\n+    const CScriptID script_id{u160};\n+    // CTxDestination = CNoDestination \u222a PKHash \u222a ScriptHash \u222a WitnessV0ScriptHash \u222a WitnessV0KeyHash \u222a WitnessUnknown\n+    const PKHash pk_hash{u160};\n+    const ScriptHash script_hash{u160};\n+    const WitnessV0KeyHash witness_v0_key_hash{u160};\n+    const WitnessV0ScriptHash witness_v0_script_hash{u256};\n+    const std::vector<CTxDestination> destinations{pk_hash, script_hash, witness_v0_key_hash, witness_v0_script_hash};\n+    const SigningProvider store;\n+    for (const CTxDestination& destination : destinations) {\n+        (void)DescribeAddress(destination);\n+        (void)EncodeDestination(destination);\n+        (void)GetKeyForDestination(store, destination);\n+        (void)GetScriptForDestination(destination);\n+        (void)IsValidDestination(destination);\n+    }\n+}"
      }
    ]
  },
  {
    "sha": "709afb2a7de283a9188e7df51476830012e0a4e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDlhZmIyYTdkZTI4M2E5MTg4ZTdkZjUxNDc2ODMwMDEyZTBhNGU1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-23T08:29:55Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-06T09:15:56Z"
      },
      "message": "tests: Test serialisation as part of deserialisation fuzzing. Test round-trip equality where possible. Avoid code repetition.",
      "tree": {
        "sha": "5190b3e68b85616988cbba7da4a844fba8629fd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5190b3e68b85616988cbba7da4a844fba8629fd5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/709afb2a7de283a9188e7df51476830012e0a4e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/709afb2a7de283a9188e7df51476830012e0a4e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/709afb2a7de283a9188e7df51476830012e0a4e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/709afb2a7de283a9188e7df51476830012e0a4e5/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e"
      }
    ],
    "stats": {
      "total": 254,
      "additions": 98,
      "deletions": 156
    },
    "files": [
      {
        "sha": "bd05283b785e3efc3bf7eb2a496d9dd04ca01393",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 98,
        "deletions": 156,
        "changes": 254,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/709afb2a7de283a9188e7df51476830012e0a4e5/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/709afb2a7de283a9188e7df51476830012e0a4e5/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=709afb2a7de283a9188e7df51476830012e0a4e5",
        "patch": "@@ -22,6 +22,7 @@\n #include <undo.h>\n #include <version.h>\n \n+#include <exception>\n #include <stdexcept>\n #include <stdint.h>\n #include <unistd.h>\n@@ -36,245 +37,186 @@ void initialize()\n     static const auto verify_handle = MakeUnique<ECCVerifyHandle>();\n }\n \n-void test_one_input(const std::vector<uint8_t>& buffer)\n+namespace {\n+\n+struct invalid_fuzzing_input_exception : public std::exception {\n+};\n+\n+template <typename T>\n+CDataStream Serialize(const T& obj)\n+{\n+    CDataStream ds(SER_NETWORK, INIT_PROTO_VERSION);\n+    ds << obj;\n+    return ds;\n+}\n+\n+template <typename T>\n+T Deserialize(CDataStream ds)\n+{\n+    T obj;\n+    ds >> obj;\n+    return obj;\n+}\n+\n+template <typename T>\n+void DeserializeFromFuzzingInput(const std::vector<uint8_t>& buffer, T& obj)\n {\n     CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n     try {\n-        int nVersion;\n-        ds >> nVersion;\n-        ds.SetVersion(nVersion);\n+        int version;\n+        ds >> version;\n+        ds.SetVersion(version);\n     } catch (const std::ios_base::failure&) {\n-        return;\n+        throw invalid_fuzzing_input_exception();\n     }\n-\n-#if BLOCK_FILTER_DESERIALIZE\n     try {\n-        BlockFilter block_filter;\n-        ds >> block_filter;\n+        ds >> obj;\n     } catch (const std::ios_base::failure&) {\n+        throw invalid_fuzzing_input_exception();\n     }\n-#elif ADDR_INFO_DESERIALIZE\n+    assert(buffer.empty() || !Serialize(obj).empty());\n+}\n+\n+template <typename T>\n+void AssertEqualAfterSerializeDeserialize(const T& obj)\n+{\n+    assert(Deserialize<T>(Serialize(obj)) == obj);\n+}\n+\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n     try {\n+#if BLOCK_FILTER_DESERIALIZE\n+        BlockFilter block_filter;\n+        DeserializeFromFuzzingInput(buffer, block_filter);\n+#elif ADDR_INFO_DESERIALIZE\n         CAddrInfo addr_info;\n-        ds >> addr_info;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, addr_info);\n #elif BLOCK_FILE_INFO_DESERIALIZE\n-    try {\n         CBlockFileInfo block_file_info;\n-        ds >> block_file_info;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, block_file_info);\n #elif BLOCK_HEADER_AND_SHORT_TXIDS_DESERIALIZE\n-    try {\n         CBlockHeaderAndShortTxIDs block_header_and_short_txids;\n-        ds >> block_header_and_short_txids;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, block_header_and_short_txids);\n #elif FEE_RATE_DESERIALIZE\n-    try {\n         CFeeRate fee_rate;\n-        ds >> fee_rate;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, fee_rate);\n+        AssertEqualAfterSerializeDeserialize(fee_rate);\n #elif MERKLE_BLOCK_DESERIALIZE\n-    try {\n         CMerkleBlock merkle_block;\n-        ds >> merkle_block;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, merkle_block);\n #elif OUT_POINT_DESERIALIZE\n-    try {\n         COutPoint out_point;\n-        ds >> out_point;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, out_point);\n+        AssertEqualAfterSerializeDeserialize(out_point);\n #elif PARTIAL_MERKLE_TREE_DESERIALIZE\n-    try {\n         CPartialMerkleTree partial_merkle_tree;\n-        ds >> partial_merkle_tree;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, partial_merkle_tree);\n #elif PUB_KEY_DESERIALIZE\n-    try {\n         CPubKey pub_key;\n-        ds >> pub_key;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, pub_key);\n+        // TODO: The following equivalence should hold for CPubKey? Fix.\n+        // AssertEqualAfterSerializeDeserialize(pub_key);\n #elif SCRIPT_DESERIALIZE\n-    try {\n         CScript script;\n-        ds >> script;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, script);\n #elif SUB_NET_DESERIALIZE\n-    try {\n         CSubNet sub_net;\n-        ds >> sub_net;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, sub_net);\n+        AssertEqualAfterSerializeDeserialize(sub_net);\n #elif TX_IN_DESERIALIZE\n-    try {\n         CTxIn tx_in;\n-        ds >> tx_in;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, tx_in);\n+        AssertEqualAfterSerializeDeserialize(tx_in);\n #elif FLAT_FILE_POS_DESERIALIZE\n-    try {\n         FlatFilePos flat_file_pos;\n-        ds >> flat_file_pos;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, flat_file_pos);\n+        AssertEqualAfterSerializeDeserialize(flat_file_pos);\n #elif KEY_ORIGIN_INFO_DESERIALIZE\n-    try {\n         KeyOriginInfo key_origin_info;\n-        ds >> key_origin_info;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, key_origin_info);\n+        AssertEqualAfterSerializeDeserialize(key_origin_info);\n #elif PARTIALLY_SIGNED_TRANSACTION_DESERIALIZE\n-    try {\n         PartiallySignedTransaction partially_signed_transaction;\n-        ds >> partially_signed_transaction;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, partially_signed_transaction);\n #elif PREFILLED_TRANSACTION_DESERIALIZE\n-    try {\n         PrefilledTransaction prefilled_transaction;\n-        ds >> prefilled_transaction;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, prefilled_transaction);\n #elif PSBT_INPUT_DESERIALIZE\n-    try {\n         PSBTInput psbt_input;\n-        ds >> psbt_input;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, psbt_input);\n #elif PSBT_OUTPUT_DESERIALIZE\n-    try {\n         PSBTOutput psbt_output;\n-        ds >> psbt_output;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, psbt_output);\n #elif BLOCK_DESERIALIZE\n-    try {\n         CBlock block;\n-        ds >> block;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, block);\n #elif BLOCKLOCATOR_DESERIALIZE\n-    try {\n         CBlockLocator bl;\n-        ds >> bl;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, bl);\n #elif BLOCKMERKLEROOT\n-    try {\n         CBlock block;\n-        ds >> block;\n+        DeserializeFromFuzzingInput(buffer, block);\n         bool mutated;\n         BlockMerkleRoot(block, &mutated);\n-    } catch (const std::ios_base::failure&) {\n-    }\n #elif ADDRMAN_DESERIALIZE\n-    try {\n         CAddrMan am;\n-        ds >> am;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, am);\n #elif BLOCKHEADER_DESERIALIZE\n-    try {\n         CBlockHeader bh;\n-        ds >> bh;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, bh);\n #elif BANENTRY_DESERIALIZE\n-    try {\n         CBanEntry be;\n-        ds >> be;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, be);\n #elif TXUNDO_DESERIALIZE\n-    try {\n         CTxUndo tu;\n-        ds >> tu;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, tu);\n #elif BLOCKUNDO_DESERIALIZE\n-    try {\n         CBlockUndo bu;\n-        ds >> bu;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, bu);\n #elif COINS_DESERIALIZE\n-    try {\n         Coin coin;\n-        ds >> coin;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, coin);\n #elif NETADDR_DESERIALIZE\n-    try {\n         CNetAddr na;\n-        ds >> na;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, na);\n+        AssertEqualAfterSerializeDeserialize(na);\n #elif SERVICE_DESERIALIZE\n-    try {\n         CService s;\n-        ds >> s;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, s);\n+        AssertEqualAfterSerializeDeserialize(s);\n #elif MESSAGEHEADER_DESERIALIZE\n-    CMessageHeader::MessageStartChars pchMessageStart = {0x00, 0x00, 0x00, 0x00};\n-    try {\n+        const CMessageHeader::MessageStartChars pchMessageStart = {0x00, 0x00, 0x00, 0x00};\n         CMessageHeader mh(pchMessageStart);\n-        ds >> mh;\n+        DeserializeFromFuzzingInput(buffer, mh);\n         (void)mh.IsValid(pchMessageStart);\n-    } catch (const std::ios_base::failure&) {\n-    }\n #elif ADDRESS_DESERIALIZE\n-    try {\n         CAddress a;\n-        ds >> a;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, a);\n #elif INV_DESERIALIZE\n-    try {\n         CInv i;\n-        ds >> i;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, i);\n #elif BLOOMFILTER_DESERIALIZE\n-    try {\n         CBloomFilter bf;\n-        ds >> bf;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, bf);\n #elif DISKBLOCKINDEX_DESERIALIZE\n-    try {\n         CDiskBlockIndex dbi;\n-        ds >> dbi;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, dbi);\n #elif TXOUTCOMPRESSOR_DESERIALIZE\n-    CTxOut to;\n-    CTxOutCompressor toc(to);\n-    try {\n-        ds >> toc;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        CTxOut to;\n+        CTxOutCompressor toc(to);\n+        DeserializeFromFuzzingInput(buffer, toc);\n #elif BLOCKTRANSACTIONS_DESERIALIZE\n-    try {\n         BlockTransactions bt;\n-        ds >> bt;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, bt);\n #elif BLOCKTRANSACTIONSREQUEST_DESERIALIZE\n-    try {\n         BlockTransactionsRequest btr;\n-        ds >> btr;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, btr);\n #else\n #error Need at least one fuzz target to compile\n #endif\n+    } catch (const invalid_fuzzing_input_exception&) {\n+    }\n }"
      }
    ]
  },
  {
    "sha": "993e38a4e2fa66093314b988dfbe459f46aa5864",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTNlMzhhNGUyZmE2NjA5MzMxNGI5ODhkZmJlNDU5ZjQ2YWE1ODY0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-06T14:37:49Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-06T14:40:28Z"
      },
      "message": "tests: Mark functional tests not supporting bitcoin-cli (--usecli) as such",
      "tree": {
        "sha": "f02e4a96bb2394cbffd67ba6aeef916b45dfe2df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f02e4a96bb2394cbffd67ba6aeef916b45dfe2df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/993e38a4e2fa66093314b988dfbe459f46aa5864",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/993e38a4e2fa66093314b988dfbe459f46aa5864",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/993e38a4e2fa66093314b988dfbe459f46aa5864",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/993e38a4e2fa66093314b988dfbe459f46aa5864/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "801209b1c00df3f23514737366909a4a7def516c",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -13,6 +13,7 @@ class ConfArgsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.supports_cli = False\n \n     def test_config_file_parser(self):\n         # Assume node is stopped"
      },
      {
        "sha": "c2b4de54f2bfdcdef5133d06bbb64849a64355b2",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -139,6 +139,7 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4', '-addresstype=legacy']]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "5bbdb8cda1b25057f5b2808cc643fee7d47971a4",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -51,6 +51,7 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.rpc_timeout = 480\n+        self.supports_cli = False\n \n         # Set -maxmempool=0 to turn off mempool memory sharing with dbcache\n         # Set -rpcservertimeout=900 to reduce socket disconnects in this"
      },
      {
        "sha": "bd4b271ca7890fa237ce5defbee30e34bed557ec",
        "filename": "test/functional/feature_loadblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_loadblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_loadblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_loadblock.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -26,6 +26,7 @@ class LoadblockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n+        self.supports_cli = False\n \n     def run_test(self):\n         self.nodes[1].setnetworkactive(state=False)"
      },
      {
        "sha": "42e2b5bff2473af8257625ad24590b3493db7de2",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -36,6 +36,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxuploadtarget=800\", \"-acceptnonstdtxn=1\"]]\n+        self.supports_cli = False\n \n         # Cache for utxos, as the listunspent may take a long time later in the test\n         self.utxo_cache = []"
      },
      {
        "sha": "e1e0f005309e5ba17714d5abbabf364855007760",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -78,6 +78,7 @@ class PruneTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 6\n+        self.supports_cli = False\n \n         # Create nodes 0 and 1 to mine.\n         # Create node 2 to test pruning."
      },
      {
        "sha": "9e578f0026dd3f096256b5f5cbf7a5c8c14d4707",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -76,6 +76,7 @@ def set_test_params(self):\n                 \"-limitdescendantsize=101\",\n             ],\n         ]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "bf3c56228e5167f56f556bb62e8232606fb994e3",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -72,6 +72,7 @@ def set_test_params(self):\n                 \"-addresstype=legacy\",\n             ],\n         ]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "9485db9864b913bba6302f863039de04dbf5c30a",
        "filename": "test/functional/feature_shutdown.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_shutdown.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/feature_shutdown.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_shutdown.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -17,6 +17,7 @@ class ShutdownTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.supports_cli = False\n \n     def run_test(self):\n         node = get_rpc_proxy(self.nodes[0].url, 1, timeout=600, coveragedir=self.nodes[0].coverage_dir)"
      },
      {
        "sha": "d007490f800f55cb5fe6d19af13f3d308ead3c99",
        "filename": "test/functional/interface_http.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/interface_http.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/interface_http.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_http.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -13,6 +13,7 @@\n class HTTPBasicsTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n+        self.supports_cli = False\n \n     def setup_network(self):\n         self.setup_nodes()"
      },
      {
        "sha": "e73ec90819f15e5d187b8ffd00e5124b375a26b4",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -44,6 +44,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[\"-rest\"], []]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "e460db39f80eae0ea9a4ce028d6e92284fc084c6",
        "filename": "test/functional/interface_rpc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/interface_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/interface_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rpc.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -22,6 +22,7 @@ class RPCInterfaceTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.supports_cli = False\n \n     def test_getrpcinfo(self):\n         self.log.info(\"Testing getrpcinfo...\")"
      },
      {
        "sha": "9cb6b03ee05e4891fb9b06a3413650e03ea7e628",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -37,6 +37,7 @@ def set_test_params(self):\n         self.extra_args = [[\n             '-txindex',\n         ]] * self.num_nodes\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "39035f7cb1e149a6312e5e71e37e18a7c67974e4",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -18,6 +18,7 @@ def set_test_params(self):\n             \"-maxmempool=5\",\n             \"-spendzeroconfchange=0\",\n         ]]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "7ff8c12cc979c65dc9673b818e8c882f16791d23",
        "filename": "test/functional/mempool_package_onemore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/mempool_package_onemore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/mempool_package_onemore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_onemore.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -19,6 +19,7 @@ class MempoolPackagesTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxorphantx=1000\"]]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "d6498f18a7ec4648bd8ffd3ab66223037105f862",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -27,6 +27,7 @@ def set_test_params(self):\n             [\"-maxorphantx=1000\"],\n             [\"-maxorphantx=1000\", \"-limitancestorcount={}\".format(MAX_ANCESTORS_CUSTOM)],\n         ]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "bfeaa76c7421ad97b74ec2135d74fa57664e9680",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -43,6 +43,7 @@ class MiningTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n+        self.supports_cli = False\n \n     def mine_chain(self):\n         self.log.info('Create some old blocks')"
      },
      {
        "sha": "6d0b241e573c3f407d66ac220f1a6fcf43e0e4f6",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -27,6 +27,7 @@ def run(self):\n class GetBlockTemplateLPTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "1426fdaacb9c829c013c8c795d34ea30cd927d2d",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -18,6 +18,7 @@ def set_test_params(self):\n             \"-printpriority=1\",\n             \"-acceptnonstdtxn=1\",\n         ]] * self.num_nodes\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "1b64b65b827d3e7a773989c4374e90fb8afff792",
        "filename": "test/functional/p2p_disconnect_ban.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/p2p_disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/p2p_disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_disconnect_ban.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -16,6 +16,7 @@\n class DisconnectBanTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.supports_cli = False\n \n     def run_test(self):\n         self.log.info(\"Connect nodes both way\")"
      },
      {
        "sha": "297fa88fbe4bde56f5477b9c7a86ec4db93caa35",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -191,6 +191,7 @@ def set_test_params(self):\n             [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-segwitheight={}\".format(SEGWIT_HEIGHT)],\n             [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=1\", \"-segwitheight=-1\"]\n         ]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "664a15a5ecff9664ccc4a5774c3a0e9f49fadd2b",
        "filename": "test/functional/rpc_bind.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_bind.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_bind.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_bind.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -15,6 +15,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.bind_to_localhost_only = False\n         self.num_nodes = 1\n+        self.supports_cli = False\n \n     def setup_network(self):\n         self.add_nodes(self.num_nodes, None)"
      },
      {
        "sha": "adf6f1ca4f88c808099345e34812ea0c3d4da7af",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -49,6 +49,7 @@ class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.supports_cli = False\n \n     def run_test(self):\n         self.mine_chain()"
      },
      {
        "sha": "aa7f12848cd73b737870dc247b7eab18557b47f5",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -22,6 +22,7 @@ class RpcCreateMultiSigTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "3ae42cb1f40b27781d9d95d7f6277b6eb210805a",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -31,6 +31,7 @@ def set_test_params(self):\n         # This test isn't testing tx relay. Set whitelist on the peers for\n         # instant tx relay.\n         self.extra_args = [['-whitelist=127.0.0.1']] * self.num_nodes\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "57794ae9731acd492cc3127dec653f578af73531",
        "filename": "test/functional/rpc_getblockstats.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_getblockstats.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_getblockstats.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockstats.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -33,6 +33,7 @@ def add_options(self, parser):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.supports_cli = False\n \n     def get_stats(self):\n         return [self.nodes[0].getblockstats(hash_or_height=self.start_height + i) for i in range(self.max_stat_pos+1)]"
      },
      {
        "sha": "ec8ea5697a56820ddd27b2b7d3cbfeff2a736121",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -13,6 +13,7 @@\n class HelpRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n+        self.supports_cli = False\n \n     def run_test(self):\n         self.test_categories()"
      },
      {
        "sha": "c8517d719ee3dd30327e4f61ce16a887f3f88634",
        "filename": "test/functional/rpc_misc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_misc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_misc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_misc.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -19,6 +19,7 @@\n class RpcMiscTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n+        self.supports_cli = False\n \n     def run_test(self):\n         node = self.nodes[0]"
      },
      {
        "sha": "41b931296902008ff81d6bec6ed84bb2fe73df95",
        "filename": "test/functional/rpc_named_arguments.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_named_arguments.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_named_arguments.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_named_arguments.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -13,6 +13,7 @@\n class NamedArgumentTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n+        self.supports_cli = False\n \n     def run_test(self):\n         node = self.nodes[0]"
      },
      {
        "sha": "368debf35cafe0e491a269e48540f8b5d19adc38",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -45,6 +45,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[\"-minrelaytxfee=0.00001000\"],[\"-minrelaytxfee=0.00000500\"]]\n+        self.supports_cli = False\n \n     def run_test(self):\n         self.log.info('Connect nodes both way')"
      },
      {
        "sha": "8386e47411a5eabf526f413ede56f030adaf352c",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -36,6 +36,7 @@ class PreciousTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.supports_cli = False\n \n     def setup_network(self):\n         self.setup_nodes()"
      },
      {
        "sha": "105923460984b27fe1a72eab6b8df8aa0ef96935",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -32,6 +32,7 @@ def set_test_params(self):\n             [\"-walletrbf=0\"],\n             []\n         ]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "14cad3d1b8b8d126cfcaf29be85813b36672adb5",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -53,6 +53,7 @@ def set_test_params(self):\n             [\"-txindex\"],\n             [\"-txindex\"],\n         ]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "9fd44762d8706d7614cb34b2def0c41ae6e35b2d",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -15,6 +15,7 @@ class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "9f159711713ce4666d63028f966af586969f3cc7",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -14,6 +14,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "3541f96ab74b563af07bbc727e8e30fe0bbaf5a0",
        "filename": "test/functional/rpc_users.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_users.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/rpc_users.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_users.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -35,6 +35,7 @@ def call_with_auth(node, user, password):\n class HTTPBasicsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.supports_cli = False\n \n     def setup_chain(self):\n         super().setup_chain()"
      },
      {
        "sha": "3a81f14b0091049637fece219e997d06db393fa6",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -26,6 +26,7 @@ class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "f08606e622e3fe887314e02292001ee410b5946b",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -83,6 +83,7 @@ def set_test_params(self):\n         # whitelist all peers to speed up tx relay / mempool sync\n         for args in self.extra_args:\n             args.append(\"-whitelist=127.0.0.1\")\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "e0ee33ccdb67d4ba2ed8e3fc65cf85495ea06bba",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -54,6 +54,7 @@ def set_test_params(self):\n             ['-limitdescendantcount=3'],  # Limit mempool descendants as a hack to have wallet txs rejected from the mempool\n             [],\n         ]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "2606afa0e455f71569c99ef0414879ca6dc76d98",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -28,6 +28,7 @@ def set_test_params(self):\n             \"-acceptnonstdtxn=1\",\n         ]] * self.num_nodes\n         self.setup_clean_chain = True\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "7eb756df515015b43d15203e7afe978fd04fd20b",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -40,6 +40,7 @@ def set_test_params(self):\n             \"-deprecatedrpc=totalFee\",\n             \"-addresstype=bech32\",\n         ] for i in range(self.num_nodes)]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "af6e7b67b3a2cc53d19fa918273dc01805035f7b",
        "filename": "test/functional/wallet_bumpfee_totalfee_deprecation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_bumpfee_totalfee_deprecation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_bumpfee_totalfee_deprecation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee_totalfee_deprecation.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -16,6 +16,7 @@ def set_test_params(self):\n             \"-walletrbf={}\".format(i),\n             \"-mintxfee=0.00002\",\n         ] for i in range(self.num_nodes)]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "575b501f50c90e4ae69e6240f3a0a366c2dfe827",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -20,6 +20,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=0']]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "a8583e2879bc9affb4c845cbf258c1e415393eea",
        "filename": "test/functional/wallet_implicitsegwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_implicitsegwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_implicitsegwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_implicitsegwit.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -41,6 +41,7 @@ def check_implicit_transactions(implicit_keys, implicit_node):\n class ImplicitSegwitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "b8b85b7a19994abcdd809038faf496836fd69c8f",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -145,6 +145,7 @@ def get_rand_amount():\n class ImportRescanTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "dc69cedc443c9e1c55d2d7e6b4a431fa6c4bb7d3",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -19,6 +19,7 @@ class ListSinceBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "07977855604a71287d210d29d679498216906ef4",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -27,6 +27,7 @@\n class ReorgsRestoreTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "99559090ee5577d15ba5b395cf30fe5e302f48dc",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -16,6 +16,7 @@\n class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "1891cd919038d55ee1f7ea261c16b914ec892d72",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/993e38a4e2fa66093314b988dfbe459f46aa5864/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=993e38a4e2fa66093314b988dfbe459f46aa5864",
        "patch": "@@ -16,6 +16,7 @@\n class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  },
  {
    "sha": "5ac804a9eb0cdbdcff8b50ecfb736f8793cab805",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWM4MDRhOWViMGNkYmRjZmY4YjUwZWNmYjczNmY4NzkzY2FiODA1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-06T13:22:04Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-06T15:24:06Z"
      },
      "message": "tests: Use a default of supports_cli=True (instead of supports_cli=False)",
      "tree": {
        "sha": "e6a609766a3d805b7ef1772b406faebf22269bf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6a609766a3d805b7ef1772b406faebf22269bf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "993e38a4e2fa66093314b988dfbe459f46aa5864",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/993e38a4e2fa66093314b988dfbe459f46aa5864",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/993e38a4e2fa66093314b988dfbe459f46aa5864"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "16a791177b693e686f2956e8e5f4cf4fbe0f83f8",
        "filename": "test/functional/create_cache.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805/test/functional/create_cache.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805/test/functional/create_cache.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/create_cache.py?ref=5ac804a9eb0cdbdcff8b50ecfb736f8793cab805",
        "patch": "@@ -16,7 +16,6 @@ class CreateCache(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 0\n-        self.supports_cli = True\n \n     def setup_network(self):\n         pass"
      },
      {
        "sha": "42d7d59d56313282c1eca4beaec729f98057240e",
        "filename": "test/functional/rpc_deriveaddresses.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805/test/functional/rpc_deriveaddresses.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805/test/functional/rpc_deriveaddresses.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deriveaddresses.py?ref=5ac804a9eb0cdbdcff8b50ecfb736f8793cab805",
        "patch": "@@ -10,7 +10,6 @@\n class DeriveaddressesTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.supports_cli = 1\n \n     def run_test(self):\n         assert_raises_rpc_error(-5, \"Missing checksum\", self.nodes[0].deriveaddresses, \"a\")"
      },
      {
        "sha": "a17e7709f29c31ec68ac65e652194bdccf56cd3d",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=5ac804a9eb0cdbdcff8b50ecfb736f8793cab805",
        "patch": "@@ -97,7 +97,7 @@ def __init__(self):\n         self.nodes = []\n         self.network_thread = None\n         self.rpc_timeout = 60  # Wait for up to 60 seconds for the RPC server to respond\n-        self.supports_cli = False\n+        self.supports_cli = True\n         self.bind_to_localhost_only = True\n         self.set_test_params()\n         self.parse_args()"
      },
      {
        "sha": "048b3127ff1149c3c3691c677b23eee5b8709635",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=5ac804a9eb0cdbdcff8b50ecfb736f8793cab805",
        "patch": "@@ -15,7 +15,6 @@ class CreateWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 1\n-        self.supports_cli = True\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "85d900f6cc6fa42989cf90510c1c6008f8e43c22",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=5ac804a9eb0cdbdcff8b50ecfb736f8793cab805",
        "patch": "@@ -24,7 +24,6 @@ class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.supports_cli = True\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "b0c41b27380f4f87f59c3e36f10084dd604d0444",
        "filename": "test/functional/wallet_watchonly.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805/test/functional/wallet_watchonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805/test/functional/wallet_watchonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_watchonly.py?ref=5ac804a9eb0cdbdcff8b50ecfb736f8793cab805",
        "patch": "@@ -16,7 +16,6 @@ class CreateWalletWatchonlyTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 1\n-        self.supports_cli = True\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  },
  {
    "sha": "a5a705b46dd32f93857e916311e3b71cae8be6b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWE3MDViNDZkZDMyZjkzODU3ZTkxNjMxMWUzYjcxY2FlOGJlNmI3",
    "commit": {
      "author": {
        "name": "nijynot",
        "email": "nijynot@gmail.com",
        "date": "2019-12-02T00:57:43Z"
      },
      "committer": {
        "name": "nijynot",
        "email": "nijynot@gmail.com",
        "date": "2019-12-06T18:14:15Z"
      },
      "message": "lcov: filter depends from coverage report",
      "tree": {
        "sha": "55afd6b160786b81f3383e00a0f1b39d79082463",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55afd6b160786b81f3383e00a0f1b39d79082463"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5a705b46dd32f93857e916311e3b71cae8be6b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5a705b46dd32f93857e916311e3b71cae8be6b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5a705b46dd32f93857e916311e3b71cae8be6b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5a705b46dd32f93857e916311e3b71cae8be6b7/comments",
    "author": {
      "login": "nijynot",
      "id": 16340977,
      "node_id": "MDQ6VXNlcjE2MzQwOTc3",
      "avatar_url": "https://avatars.githubusercontent.com/u/16340977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nijynot",
      "html_url": "https://github.com/nijynot",
      "followers_url": "https://api.github.com/users/nijynot/followers",
      "following_url": "https://api.github.com/users/nijynot/following{/other_user}",
      "gists_url": "https://api.github.com/users/nijynot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nijynot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nijynot/subscriptions",
      "organizations_url": "https://api.github.com/users/nijynot/orgs",
      "repos_url": "https://api.github.com/users/nijynot/repos",
      "events_url": "https://api.github.com/users/nijynot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nijynot/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "nijynot",
      "id": 16340977,
      "node_id": "MDQ6VXNlcjE2MzQwOTc3",
      "avatar_url": "https://avatars.githubusercontent.com/u/16340977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nijynot",
      "html_url": "https://github.com/nijynot",
      "followers_url": "https://api.github.com/users/nijynot/followers",
      "following_url": "https://api.github.com/users/nijynot/following{/other_user}",
      "gists_url": "https://api.github.com/users/nijynot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nijynot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nijynot/subscriptions",
      "organizations_url": "https://api.github.com/users/nijynot/orgs",
      "repos_url": "https://api.github.com/users/nijynot/repos",
      "events_url": "https://api.github.com/users/nijynot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nijynot/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19698ac6bc0e6c75a92b02c8b74ae1fa51c34e08"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0332e686d37ae1f5af3c478edbaa51f203d6b0df",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5a705b46dd32f93857e916311e3b71cae8be6b7/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5a705b46dd32f93857e916311e3b71cae8be6b7/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=a5a705b46dd32f93857e916311e3b71cae8be6b7",
        "patch": "@@ -99,7 +99,7 @@ $(OSX_APP)/Contents/PkgInfo:\n \n $(OSX_APP)/Contents/Resources/empty.lproj:\n \t$(MKDIR_P) $(@D)\n-\t@touch $@ \n+\t@touch $@\n \n $(OSX_APP)/Contents/Info.plist: $(OSX_PLIST)\n \t$(MKDIR_P) $(@D)\n@@ -189,7 +189,15 @@ $(BITCOIN_WALLET_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n if USE_LCOV\n-LCOV_FILTER_PATTERN=-p \"/usr/include/\" -p \"/usr/lib/\" -p \"src/leveldb/\" -p \"src/bench/\" -p \"src/univalue\" -p \"src/crypto/ctaes\" -p \"src/secp256k1\"\n+LCOV_FILTER_PATTERN = \\\n+\t-p \"/usr/include/\" \\\n+\t-p \"/usr/lib/\" \\\n+\t-p \"src/leveldb/\" \\\n+\t-p \"src/bench/\" \\\n+\t-p \"src/univalue\" \\\n+\t-p \"src/crypto/ctaes\" \\\n+\t-p \"src/secp256k1\" \\\n+\t-p \"depends\"\n \n baseline.info:\n \t$(LCOV) -c -i -d $(abs_builddir)/src -o $@\n@@ -321,4 +329,3 @@ clean-local: clean-docs\n \trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ test/tmp/ cache/ $(OSX_APP)\n \trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache share/rpcauth/__pycache__\n \trm -rf osx_volname dist/ dpi36.background.tiff dpi72.background.tiff\n-"
      }
    ]
  },
  {
    "sha": "6338c0203416a5f86e9422b6cd479da8af277f2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzM4YzAyMDM0MTZhNWY4NmU5NDIyYjZjZDQ3OWRhOGFmMjc3ZjJm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-06T18:25:51Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-06T18:25:51Z"
      },
      "message": "tests: Fix fuzzing harness for descriptor parsing (descriptor_parse)",
      "tree": {
        "sha": "45e685bfbd4192d788fd6fecd67263b45604194b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45e685bfbd4192d788fd6fecd67263b45604194b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6338c0203416a5f86e9422b6cd479da8af277f2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6338c0203416a5f86e9422b6cd479da8af277f2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6338c0203416a5f86e9422b6cd479da8af277f2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6338c0203416a5f86e9422b6cd479da8af277f2f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "47d5038c26c166c20a1df5e5e0be3fcfdd1e0073",
        "filename": "src/test/fuzz/descriptor_parse.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6338c0203416a5f86e9422b6cd479da8af277f2f/src/test/fuzz/descriptor_parse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6338c0203416a5f86e9422b6cd479da8af277f2f/src/test/fuzz/descriptor_parse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/descriptor_parse.cpp?ref=6338c0203416a5f86e9422b6cd479da8af277f2f",
        "patch": "@@ -3,11 +3,14 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n+#include <util/memory.h>\n \n void initialize()\n {\n+    static const auto verify_handle = MakeUnique<ECCVerifyHandle>();\n     SelectParams(CBaseChainParams::REGTEST);\n }\n "
      }
    ]
  },
  {
    "sha": "da1af855f9bfe19faaad63b731ed34484f16525e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTFhZjg1NWY5YmZlMTlmYWFhZDYzYjczMWVkMzQ0ODRmMTY1MjVl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-06T18:35:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-06T18:35:37Z"
      },
      "message": "Merge #17275: pubkey: Assert CPubKey's ECCVerifyHandle precondition\n\nd8daa8f3711909223b117b8faa82daca87fc942d pubkey: Assert CPubKey's ECCVerifyHandle precondition (practicalswift)\n\nPull request description:\n\n  Assert `CPubKey`'s `ECCVerifyHandle` precondition.\n\n  This makes it more clear for fuzzing harness writers and others that `ECCVerifyHandle` is expected to be held when interacting with `CPubKey`.\n\n  Related PR #17274.\n\nACKs for top commit:\n  sipa:\n    ACK d8daa8f3711909223b117b8faa82daca87fc942d\n\nTree-SHA512: 9e74086599799dc9b5c3fb8357445b662e5bf896d826af63d6d6b6ddb616612966f3bb5de3bd3ae0e692c47de85672f64b8ab6d3a1c45899dc25ba46990b5ec7",
      "tree": {
        "sha": "afa90ac27a851e4082f554aee7ed3403747347ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afa90ac27a851e4082f554aee7ed3403747347ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da1af855f9bfe19faaad63b731ed34484f16525e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhJYwv8CKpR/vmCEiUWfj0ymLp8LjsEBMhAdUzYTNcS1uFio4FoFggWCT7hZ0ZO\n+K5K7EQePeZVSe+H1wzC8IzA54IqyB+f5uA3HGHLRHf15RE0hju29tLmneLwG80O\nSVVHacAI9lUsKcmzme+aojhwqCZWsdmkgmXsvKREuLxMCrOxQkXoVzq8ICCIdbzL\n28V1v/z1xnNBEI/AA6PrEWWA6oGQQsKuYt9Mviz3jkLMrz9slBIV2qbur41SqAhw\nARPrh1kOuKm8Mh8RaTolbpbpiPRYPea1DuiIlhbH7k2bjVcMofuiJilH6WTfNZrL\nGCgWS8IbMcsT2LyNX5JPMlx3OaQ/RViDuWq0GdrjHQCC0sMq1CJFu6bw/q9QqMI0\ns4nEeQZm54FhCrgHNRFWVw3lDgyZXJuda5jwFk4hgb4mroV9V3RFzWQCQqVjFnv8\nqPE22DCRhKT2vCkmKraoACThU0izaBUXhxkobMoHwoYMtKhsbJSdFFZyv0DVHHoD\n5TyzT7VG\n=dk/6\n-----END PGP SIGNATURE-----",
        "payload": "tree afa90ac27a851e4082f554aee7ed3403747347ad\nparent cb11324a63ef10475bfc4d8e45148d5ae6f3e71e\nparent d8daa8f3711909223b117b8faa82daca87fc942d\nauthor MarcoFalke <falke.marco@gmail.com> 1575657331 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575657337 -0500\n\nMerge #17275: pubkey: Assert CPubKey's ECCVerifyHandle precondition\n\nd8daa8f3711909223b117b8faa82daca87fc942d pubkey: Assert CPubKey's ECCVerifyHandle precondition (practicalswift)\n\nPull request description:\n\n  Assert `CPubKey`'s `ECCVerifyHandle` precondition.\n\n  This makes it more clear for fuzzing harness writers and others that `ECCVerifyHandle` is expected to be held when interacting with `CPubKey`.\n\n  Related PR #17274.\n\nACKs for top commit:\n  sipa:\n    ACK d8daa8f3711909223b117b8faa82daca87fc942d\n\nTree-SHA512: 9e74086599799dc9b5c3fb8357445b662e5bf896d826af63d6d6b6ddb616612966f3bb5de3bd3ae0e692c47de85672f64b8ab6d3a1c45899dc25ba46990b5ec7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da1af855f9bfe19faaad63b731ed34484f16525e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da1af855f9bfe19faaad63b731ed34484f16525e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da1af855f9bfe19faaad63b731ed34484f16525e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e"
      },
      {
        "sha": "d8daa8f3711909223b117b8faa82daca87fc942d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8daa8f3711909223b117b8faa82daca87fc942d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8daa8f3711909223b117b8faa82daca87fc942d"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "21e51a380d116efc97af4f8e6a24cc10f4a7255e",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da1af855f9bfe19faaad63b731ed34484f16525e/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da1af855f9bfe19faaad63b731ed34484f16525e/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=da1af855f9bfe19faaad63b731ed34484f16525e",
        "patch": "@@ -171,6 +171,7 @@ bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchS\n         return false;\n     secp256k1_pubkey pubkey;\n     secp256k1_ecdsa_signature sig;\n+    assert(secp256k1_context_verify && \"secp256k1_context_verify must be initialized to use CPubKey.\");\n     if (!secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, vch, size())) {\n         return false;\n     }\n@@ -190,6 +191,7 @@ bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned cha\n     bool fComp = ((vchSig[0] - 27) & 4) != 0;\n     secp256k1_pubkey pubkey;\n     secp256k1_ecdsa_recoverable_signature sig;\n+    assert(secp256k1_context_verify && \"secp256k1_context_verify must be initialized to use CPubKey.\");\n     if (!secp256k1_ecdsa_recoverable_signature_parse_compact(secp256k1_context_verify, &sig, &vchSig[1], recid)) {\n         return false;\n     }\n@@ -207,13 +209,15 @@ bool CPubKey::IsFullyValid() const {\n     if (!IsValid())\n         return false;\n     secp256k1_pubkey pubkey;\n+    assert(secp256k1_context_verify && \"secp256k1_context_verify must be initialized to use CPubKey.\");\n     return secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, vch, size());\n }\n \n bool CPubKey::Decompress() {\n     if (!IsValid())\n         return false;\n     secp256k1_pubkey pubkey;\n+    assert(secp256k1_context_verify && \"secp256k1_context_verify must be initialized to use CPubKey.\");\n     if (!secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, vch, size())) {\n         return false;\n     }\n@@ -232,6 +236,7 @@ bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChi\n     BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n     memcpy(ccChild.begin(), out+32, 32);\n     secp256k1_pubkey pubkey;\n+    assert(secp256k1_context_verify && \"secp256k1_context_verify must be initialized to use CPubKey.\");\n     if (!secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, vch, size())) {\n         return false;\n     }\n@@ -273,6 +278,7 @@ bool CExtPubKey::Derive(CExtPubKey &out, unsigned int _nChild) const {\n \n /* static */ bool CPubKey::CheckLowS(const std::vector<unsigned char>& vchSig) {\n     secp256k1_ecdsa_signature sig;\n+    assert(secp256k1_context_verify && \"secp256k1_context_verify must be initialized to use CPubKey.\");\n     if (!ecdsa_signature_parse_der_lax(secp256k1_context_verify, &sig, vchSig.data(), vchSig.size())) {\n         return false;\n     }"
      }
    ]
  },
  {
    "sha": "4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWU4YTU4Y2U3N2ExZTAxM2FmOThjZWZmMWNmOTZiZDBlNGZkNDM2",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-06T18:37:12Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-06T18:37:30Z"
      },
      "message": "Merge #17373: wallet: Various fixes and cleanup to keypool handling in LegacyScriptPubKeyMan and CWallet\n\n886f1731bec4393dd342403ac34069a3a4f95eea Key pool: Fix omitted pre-split count in GetKeyPoolSize (Andrew Chow)\n386a994b853bc5b3a2ed0d812673465b8ffa4849 Key pool: Change ReturnDestination interface to take address instead of key (Andrew Chow)\nba41aa4969169cd73d6b4f57444ed7d8d875de10 Key pool: Move LearnRelated and GetDestination calls (Andrew Chow)\n65833a74076cddf986037c6eb3b29a9b9dbe31c5 Add OutputType and CPubKey parameters to KeepDestination (Andrew Chow)\n9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7 Rename Keep/ReturnKey to Keep/ReturnDestination and remove the wrapper (Andrew Chow)\n596f6460f9fd8273665c8754ccd673d93a4f25f0 Key pool: Move CanGetAddresses call (Andrew Chow)\n\nPull request description:\n\n  * The `pwallet->CanGetAddresses()` call in `ReserveDestination::GetReservedDestination` to `LegacyScriptPubKeyMan::GetReservedDestination` so that the sanity check results in a failure when a `ScriptPubKeyMan` individually cannot get a destination, not when any of the `ScriptPubKeyMan`s can't.\n  * `ScriptPubKeyMan::GetReservedDestination` is changed to return the destination so that future `ScriptPubKeyMan`s can return destinations constructed in other ways. This is implemented for `LegacyScriptPubKeyMan` by moving key-to-destination code from `CWallet` to `LegacyScriptPubKeyMan`\n  * In order for `ScriptPubKeyMan` to be generic and work with future `ScriptPubKeyMan`s, `ScriptPubKeyMan::ReturnDestination` is changed to take a `CTxDestination` instead of a `CPubKey`. Since `LegacyScriptPubKeyMan` still deals with keys internally, a new map `m_reserved_key_to_index` is added in order to track the keypool indexes that have been reserved.\n  * A bug is fixed in how the total keypool size is calculated as it was omitting `set_pre_split_keypool` which is a bug.\n\n  Split from #17261\n\nACKs for top commit:\n  ryanofsky:\n    Code review ACK 886f1731bec4393dd342403ac34069a3a4f95eea. Only change is moving earlier fix to a better commit (same end result).\n  promag:\n    Code review ACK 886f1731bec4393dd342403ac34069a3a4f95eea.\n  instagibbs:\n    code review re-ACK https://github.com/bitcoin/bitcoin/pull/17373/commits/886f1731bec4393dd342403ac34069a3a4f95eea\n  Sjors:\n    Code review re-ACK 886f1731bec4393dd342403ac34069a3a4f95eea\n\nTree-SHA512: f4be290759f63fdc920d5c02bd0d09acc4b06a5f053787d4afcd3c921b2e35d2bd97617fadae015da853dc189f559fb8d2c6e58d53e4cabfac9af151cd97ad19",
      "tree": {
        "sha": "dc971de6ff0230826acc11559a1942f9c31de026",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc971de6ff0230826acc11559a1942f9c31de026"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3qn+oACgkQLuufXMCV\nJsG4Eg//TSaIBpvog5hEf51SWZFJ9d4v01MraLBLjTZSywSwSRWGJ7EQV+zLIcZv\nEv6HbFvv0N/Ul0lD5XyopuFwar3NyLEZ9HJ2R7mSsKZ0kuMhj2zDq8srrlz/jMTj\nTisD0fAvCbyvPu8HxRUrdqUVikgr2i8iyZlTbNZ7BHikACZKIt5L3OolP5uNM3Il\n59BVt6oe/2C4ORgv4IEhzZJ1RUAHnvqk0Yv5nY/AZzIhaaX4k6na1EO1gLcOsW7V\nUYcATCM9eEfTvKnwfyyVikUri9Cw1DlxQLd043tcMzHF55G/ees3eXApkyXHu6kT\nNN8oONLJMvilXmb+AcVM0n3PqAGald5YOdLtlIf/7NIKO0SfKpmWveZCNdQp0sNB\nCIkzG8STXhSSwLwMHnzmEQ8VM2ZGVuv23m+4can71wlktnMvZ+Rw0z2lBXcFCv+5\n9lxomPhKdZ5IYtOzNvOOy+TpSirprmTwzi1WcCwhXqVsb85TBzozqMFwJ4SLbGqm\neGkY5wkgYEyXwGSIBhHR4swbmSd1yTeKGscAGtsT47AJ1cygbrNdGORwuU6ZL7oL\nqpDY6yDFObC7hOb20Az2TdzmXrig+9xFkTrk5Vcrk0Ie6996dhdBGGW9HyZfH0Ev\nI57qkIB8rDAk7t4v0cqXzJHmPPNdIPZZFoB4M/01i7LdvfzT2yU=\n=OeQl\n-----END PGP SIGNATURE-----",
        "payload": "tree dc971de6ff0230826acc11559a1942f9c31de026\nparent da1af855f9bfe19faaad63b731ed34484f16525e\nparent 886f1731bec4393dd342403ac34069a3a4f95eea\nauthor fanquake <fanquake@gmail.com> 1575657432 -0500\ncommitter fanquake <fanquake@gmail.com> 1575657450 -0500\n\nMerge #17373: wallet: Various fixes and cleanup to keypool handling in LegacyScriptPubKeyMan and CWallet\n\n886f1731bec4393dd342403ac34069a3a4f95eea Key pool: Fix omitted pre-split count in GetKeyPoolSize (Andrew Chow)\n386a994b853bc5b3a2ed0d812673465b8ffa4849 Key pool: Change ReturnDestination interface to take address instead of key (Andrew Chow)\nba41aa4969169cd73d6b4f57444ed7d8d875de10 Key pool: Move LearnRelated and GetDestination calls (Andrew Chow)\n65833a74076cddf986037c6eb3b29a9b9dbe31c5 Add OutputType and CPubKey parameters to KeepDestination (Andrew Chow)\n9fcf8ce7ae02bf170b9bf0c2887fd709d752cbf7 Rename Keep/ReturnKey to Keep/ReturnDestination and remove the wrapper (Andrew Chow)\n596f6460f9fd8273665c8754ccd673d93a4f25f0 Key pool: Move CanGetAddresses call (Andrew Chow)\n\nPull request description:\n\n  * The `pwallet->CanGetAddresses()` call in `ReserveDestination::GetReservedDestination` to `LegacyScriptPubKeyMan::GetReservedDestination` so that the sanity check results in a failure when a `ScriptPubKeyMan` individually cannot get a destination, not when any of the `ScriptPubKeyMan`s can't.\n  * `ScriptPubKeyMan::GetReservedDestination` is changed to return the destination so that future `ScriptPubKeyMan`s can return destinations constructed in other ways. This is implemented for `LegacyScriptPubKeyMan` by moving key-to-destination code from `CWallet` to `LegacyScriptPubKeyMan`\n  * In order for `ScriptPubKeyMan` to be generic and work with future `ScriptPubKeyMan`s, `ScriptPubKeyMan::ReturnDestination` is changed to take a `CTxDestination` instead of a `CPubKey`. Since `LegacyScriptPubKeyMan` still deals with keys internally, a new map `m_reserved_key_to_index` is added in order to track the keypool indexes that have been reserved.\n  * A bug is fixed in how the total keypool size is calculated as it was omitting `set_pre_split_keypool` which is a bug.\n\n  Split from #17261\n\nACKs for top commit:\n  ryanofsky:\n    Code review ACK 886f1731bec4393dd342403ac34069a3a4f95eea. Only change is moving earlier fix to a better commit (same end result).\n  promag:\n    Code review ACK 886f1731bec4393dd342403ac34069a3a4f95eea.\n  instagibbs:\n    code review re-ACK https://github.com/bitcoin/bitcoin/pull/17373/commits/886f1731bec4393dd342403ac34069a3a4f95eea\n  Sjors:\n    Code review re-ACK 886f1731bec4393dd342403ac34069a3a4f95eea\n\nTree-SHA512: f4be290759f63fdc920d5c02bd0d09acc4b06a5f053787d4afcd3c921b2e35d2bd97617fadae015da853dc189f559fb8d2c6e58d53e4cabfac9af151cd97ad19\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da1af855f9bfe19faaad63b731ed34484f16525e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da1af855f9bfe19faaad63b731ed34484f16525e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da1af855f9bfe19faaad63b731ed34484f16525e"
      },
      {
        "sha": "886f1731bec4393dd342403ac34069a3a4f95eea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/886f1731bec4393dd342403ac34069a3a4f95eea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/886f1731bec4393dd342403ac34069a3a4f95eea"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 36,
      "deletions": 43
    },
    "files": [
      {
        "sha": "2b9e8fbf2aa7e2e2c0162e19dabae30e670d3294",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 18,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436",
        "patch": "@@ -18,7 +18,7 @@ bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestinat\n \n     // Generate a new key that is added to wallet\n     CPubKey new_key;\n-    if (!GetKeyFromPool(new_key)) {\n+    if (!GetKeyFromPool(new_key, type)) {\n         error = \"Error: Keypool ran out, please call keypoolrefill first\";\n         return false;\n     }\n@@ -262,24 +262,19 @@ bool LegacyScriptPubKeyMan::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n     return true;\n }\n \n-bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, int64_t& index, CKeyPool& keypool)\n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n {\n+    if (!CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n     if (!ReserveKeyFromKeyPool(index, keypool, internal)) {\n         return false;\n     }\n+    address = GetDestinationForKey(keypool.vchPubKey, type);\n     return true;\n }\n \n-void LegacyScriptPubKeyMan::KeepDestination(int64_t index)\n-{\n-    KeepKey(index);\n-}\n-\n-void LegacyScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CPubKey& pubkey)\n-{\n-    ReturnKey(index, internal, pubkey);\n-}\n-\n void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n {\n     AssertLockHeld(cs_wallet);\n@@ -460,7 +455,7 @@ size_t LegacyScriptPubKeyMan::KeypoolCountExternalKeys()\n unsigned int LegacyScriptPubKeyMan::GetKeyPoolSize() const\n {\n     AssertLockHeld(cs_wallet);\n-    return setInternalKeyPool.size() + setExternalKeyPool.size();\n+    return setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size();\n }\n \n int64_t LegacyScriptPubKeyMan::GetTimeFirstKey() const\n@@ -1092,15 +1087,20 @@ void LegacyScriptPubKeyMan::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const\n     m_pool_key_to_index[pubkey.GetID()] = index;\n }\n \n-void LegacyScriptPubKeyMan::KeepKey(int64_t nIndex)\n+void LegacyScriptPubKeyMan::KeepDestination(int64_t nIndex, const OutputType& type)\n {\n     // Remove from key pool\n     WalletBatch batch(m_storage.GetDatabase());\n     batch.ErasePool(nIndex);\n+    CPubKey pubkey;\n+    bool have_pk = GetPubKey(m_index_to_reserved_key.at(nIndex), pubkey);\n+    assert(have_pk);\n+    LearnRelatedScripts(pubkey, type);\n+    m_index_to_reserved_key.erase(nIndex);\n     WalletLogPrintf(\"keypool keep %d\\n\", nIndex);\n }\n \n-void LegacyScriptPubKeyMan::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n+void LegacyScriptPubKeyMan::ReturnDestination(int64_t nIndex, bool fInternal, const CTxDestination&)\n {\n     // Return to key pool\n     {\n@@ -1112,13 +1112,15 @@ void LegacyScriptPubKeyMan::ReturnKey(int64_t nIndex, bool fInternal, const CPub\n         } else {\n             setExternalKeyPool.insert(nIndex);\n         }\n-        m_pool_key_to_index[pubkey.GetID()] = nIndex;\n+        CKeyID& pubkey_id = m_index_to_reserved_key.at(nIndex);\n+        m_pool_key_to_index[pubkey_id] = nIndex;\n+        m_index_to_reserved_key.erase(nIndex);\n         NotifyCanGetAddressesChanged();\n     }\n     WalletLogPrintf(\"keypool return %d\\n\", nIndex);\n }\n \n-bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, bool internal)\n+bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, const OutputType type, bool internal)\n {\n     if (!CanGetAddresses(internal)) {\n         return false;\n@@ -1134,7 +1136,7 @@ bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, bool internal)\n             result = GenerateNewKey(batch, internal);\n             return true;\n         }\n-        KeepKey(nIndex);\n+        KeepDestination(nIndex, type);\n         result = keypool.vchPubKey;\n     }\n     return true;\n@@ -1179,6 +1181,8 @@ bool LegacyScriptPubKeyMan::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& key\n             throw std::runtime_error(std::string(__func__) + \": keypool entry invalid\");\n         }\n \n+        assert(m_index_to_reserved_key.count(nIndex) == 0);\n+        m_index_to_reserved_key[nIndex] = keypool.vchPubKey.GetID();\n         m_pool_key_to_index.erase(keypool.vchPubKey.GetID());\n         WalletLogPrintf(\"keypool reserve %d\\n\", nIndex);\n     }"
      },
      {
        "sha": "6ed9a4787ac88376cf49d896348c5a4060c30a5a",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436",
        "patch": "@@ -150,9 +150,9 @@ class ScriptPubKeyMan\n     virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n     virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n \n-    virtual bool GetReservedDestination(const OutputType type, bool internal, int64_t& index, CKeyPool& keypool) { return false; }\n-    virtual void KeepDestination(int64_t index) {}\n-    virtual void ReturnDestination(int64_t index, bool internal, const CPubKey& pubkey) {}\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index, const OutputType& type) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n \n     virtual bool TopUp(unsigned int size = 0) { return false; }\n \n@@ -246,9 +246,11 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_wallet);\n     int64_t m_max_keypool_index GUARDED_BY(cs_wallet) = 0;\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n+    // Tracks keypool indexes to CKeyIDs of keys that have been taken out of the keypool but may be returned to it\n+    std::map<int64_t, CKeyID> m_index_to_reserved_key;\n \n     //! Fetches a key from the keypool\n-    bool GetKeyFromPool(CPubKey &key, bool internal = false);\n+    bool GetKeyFromPool(CPubKey &key, const OutputType type, bool internal = false);\n \n     /**\n      * Reserves a key from the keypool and sets nIndex to its index\n@@ -266,19 +268,16 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n      */\n     bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n \n-    void KeepKey(int64_t nIndex);\n-    void ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey);\n-\n public:\n     bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n     isminetype IsMine(const CScript& script) const override;\n \n     //! will encrypt previously unencrypted keys\n     bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n \n-    bool GetReservedDestination(const OutputType type, bool internal, int64_t& index, CKeyPool& keypool) override;\n-    void KeepDestination(int64_t index) override;\n-    void ReturnDestination(int64_t index, bool internal, const CPubKey& pubkey) override;\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index, const OutputType& type) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination&) override;\n \n     bool TopUp(unsigned int size = 0) override;\n "
      },
      {
        "sha": "abee497c1d713a0a493b09d5473053633905a92a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 12,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436",
        "patch": "@@ -3295,43 +3295,34 @@ bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool inter\n         return false;\n     }\n \n-    if (!pwallet->CanGetAddresses(internal)) {\n-        return false;\n-    }\n \n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n-        if (!m_spk_man->GetReservedDestination(type, internal, nIndex, keypool)) {\n+        if (!m_spk_man->GetReservedDestination(type, internal, address, nIndex, keypool)) {\n             return false;\n         }\n-        vchPubKey = keypool.vchPubKey;\n         fInternal = keypool.fInternal;\n     }\n-    assert(vchPubKey.IsValid());\n-    address = GetDestinationForKey(vchPubKey, type);\n     dest = address;\n     return true;\n }\n \n void ReserveDestination::KeepDestination()\n {\n     if (nIndex != -1) {\n-        m_spk_man->KeepDestination(nIndex);\n-        m_spk_man->LearnRelatedScripts(vchPubKey, type);\n+        m_spk_man->KeepDestination(nIndex, type);\n     }\n     nIndex = -1;\n-    vchPubKey = CPubKey();\n     address = CNoDestination();\n }\n \n void ReserveDestination::ReturnDestination()\n {\n     if (nIndex != -1) {\n-        m_spk_man->ReturnDestination(nIndex, fInternal, vchPubKey);\n+        m_spk_man->ReturnDestination(nIndex, fInternal, address);\n     }\n     nIndex = -1;\n-    vchPubKey = CPubKey();\n     address = CNoDestination();\n }\n "
      },
      {
        "sha": "b02e092f0abb607966573b30afeae867ba31fe67",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436",
        "patch": "@@ -139,12 +139,11 @@ class ReserveDestination\n protected:\n     //! The wallet to reserve from\n     CWallet* const pwallet;\n-    LegacyScriptPubKeyMan* m_spk_man{nullptr};\n+    //! The ScriptPubKeyMan to reserve from. Based on type when GetReservedDestination is called\n+    ScriptPubKeyMan* m_spk_man{nullptr};\n     OutputType const type;\n     //! The index of the address's key in the keypool\n     int64_t nIndex{-1};\n-    //! The public key for the address\n-    CPubKey vchPubKey;\n     //! The destination\n     CTxDestination address;\n     //! Whether this is from the internal (change output) keypool"
      }
    ]
  },
  {
    "sha": "7f3ae224685efaeb6fe714de90e8871d12e55f34",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjNhZTIyNDY4NWVmYWViNmZlNzE0ZGU5MGU4ODcxZDEyZTU1ZjM0",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-29T19:46:49Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-12-06T19:44:35Z"
      },
      "message": "ci: Add CentOS 7 build",
      "tree": {
        "sha": "038ff0e8f33a0d9c59a66c009b4c1a12f95e6039",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/038ff0e8f33a0d9c59a66c009b4c1a12f95e6039"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f3ae224685efaeb6fe714de90e8871d12e55f34",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl3qr74ACgkQQQEIES5+\nqB8bmBAAoksSClzPldRb/pavw2lX1jbsJSy1UE2OVc284qSxDISK+PTbx230eCMR\npTShQoI7LMEdNOssQgRE4mGBXa5Ma37xfy7IOt4PDpBHU5kK2bYNzmjuIQzXgakZ\n86uch4prlAw8F/wHcgqvM9VuUDCRerrhEFOxZ7o8M0z7qbVqCKrzxuBzGTbXdHUK\nSSGt34mJi4oubfD1PCIo3R4xiylE2G8szC473GfPgR0ldlax56su4bBJVUdGbRwb\nAa4z4CMGwGY+NKJ7exgXUXlNjuNHn+/wb1nWDpKPgI5vdMlELTETcadIa9o7bxXE\nh+WmVh7whrP0hFcY3q9UxnsH5dn2yvZoBJ83CGu7Rza/bg7o/pBrD0rdc3DlE5wi\nbKgcJa3V6MFA6RgcQRj+maZS/iosj9+Pkd4EX7HqOTDlVqLQ1SoZwTVDA/JB2BgS\n/eqz5g/bTGur70M2gf0/6U8ycU2OjdNHDAG27bB/M7gUnOzqfea8+w0tFVG67b6Q\nybI8QUIq2TEGXamN4CL6VK09nD0Mn0LRNwOxXdH894JTteUW2nqZk4q9ORmUJpXV\nxROnvVAO8IegV7RgQaNYMsNjJcP17w/unuVozIJVkTei1dzqlHfGGjDwExkoUgIl\nMBEc4kLQAsuSoEgPKMmFbYIhOWB/eNmiGoKJpwUOiwcs2hiWCcM=\n=33IP\n-----END PGP SIGNATURE-----",
        "payload": "tree 038ff0e8f33a0d9c59a66c009b4c1a12f95e6039\nparent 35eda631ed3bd23d4a41761a85a96f925d4a6337\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1575056809 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1575661475 +0200\n\nci: Add CentOS 7 build\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f3ae224685efaeb6fe714de90e8871d12e55f34",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f3ae224685efaeb6fe714de90e8871d12e55f34",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f3ae224685efaeb6fe714de90e8871d12e55f34/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35eda631ed3bd23d4a41761a85a96f925d4a6337"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 27,
      "deletions": 1
    },
    "files": [
      {
        "sha": "63b76605f6419136fa46d125d626907692a99750",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f3ae224685efaeb6fe714de90e8871d12e55f34/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f3ae224685efaeb6fe714de90e8871d12e55f34/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=7f3ae224685efaeb6fe714de90e8871d12e55f34",
        "patch": "@@ -118,6 +118,11 @@ jobs:\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_i686.sh\"\n \n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [CentOS 7]  [no depends, only system libs]'\n+      env: >-\n+        FILE_ENV=\"./ci/test/00_setup_env_native_centos.sh\"\n+\n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [uses qt5 dev package instead of depends Qt to speed up build and avoid timeout] [unsigned char]'\n       env: >-"
      },
      {
        "sha": "56b915b6c7b366c8d9a3970d6ac510d9b7ae0af9",
        "filename": "ci/test/00_setup_env_native_centos.sh",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f3ae224685efaeb6fe714de90e8871d12e55f34/ci/test/00_setup_env_native_centos.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f3ae224685efaeb6fe714de90e8871d12e55f34/ci/test/00_setup_env_native_centos.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_centos.sh?ref=7f3ae224685efaeb6fe714de90e8871d12e55f34",
        "patch": "@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export DOCKER_NAME_TAG=centos:7\n+export DOCKER_PACKAGES=\"gcc-c++ libtool make git python3 python36-zmq\"\n+export PACKAGES=\"boost-devel libevent-devel libdb4-devel libdb4-cxx-devel miniupnpc-devel zeromq-devel qt5-qtbase-devel qt5-qttools-devel qrencode-devel\"\n+export NO_DEPENDS=1\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--enable-reduce-exports\""
      },
      {
        "sha": "318ee94fde14d1c4a16715d458d66ec8d6a9647f",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f3ae224685efaeb6fe714de90e8871d12e55f34/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f3ae224685efaeb6fe714de90e8871d12e55f34/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=7f3ae224685efaeb6fe714de90e8871d12e55f34",
        "patch": "@@ -6,6 +6,10 @@\n \n export LC_ALL=C.UTF-8\n \n+if [[ $DOCKER_NAME_TAG == centos* ]]; then\n+  export LC_ALL=en_US.utf8\n+fi\n+\n if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n   set +o errexit\n   pushd /usr/local/Homebrew || exit 1\n@@ -78,7 +82,10 @@ if [ -n \"$DPKG_ADD_ARCH\" ]; then\n   DOCKER_EXEC dpkg --add-architecture \"$DPKG_ADD_ARCH\"\n fi\n \n-if [ \"$TRAVIS_OS_NAME\" != \"osx\" ]; then\n+if [[ $DOCKER_NAME_TAG == centos* ]]; then\n+  ${CI_RETRY_EXE} DOCKER_EXEC yum -y install epel-release\n+  ${CI_RETRY_EXE} DOCKER_EXEC yum -y install $DOCKER_PACKAGES $PACKAGES\n+elif [ \"$TRAVIS_OS_NAME\" != \"osx\" ]; then\n   ${CI_RETRY_EXE} DOCKER_EXEC apt-get update\n   ${CI_RETRY_EXE} DOCKER_EXEC apt-get install --no-install-recommends --no-upgrade -y $PACKAGES $DOCKER_PACKAGES\n fi"
      }
    ]
  },
  {
    "sha": "711e0449cf4a0f15cabe0d64094e3add24ad44b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTFlMDQ0OWNmNGEwZjE1Y2FiZTBkNjQwOTRlM2FkZDI0YWQ0NGIw",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-12-06T19:52:02Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-12-06T19:54:37Z"
      },
      "message": "ci: Remove trusty build\n\nCo-authored-by: Emil Engler <me@emilengler.com>",
      "tree": {
        "sha": "2677b9e4ac595f8de758a2ae086bf9e2c84f0aad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2677b9e4ac595f8de758a2ae086bf9e2c84f0aad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/711e0449cf4a0f15cabe0d64094e3add24ad44b0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl3qsiMACgkQQQEIES5+\nqB/Gkw//QB59xU0s7RPW4OgWT3y/3DfvJy25AAo2w06Cr1K3CNP7PQr5Qz4cRysi\ntCTi/XmPls5FiAaAAtqMGV7kV0CwOOmaZJOMTEyfN9/vo1NilrnbdSsRyzUVbakU\nqzcpwrEElzu4oU59QFJuYn8k5oHUOP5tVkRqehWKrR4SIkWmC549B2D9Mj5Ihd08\nxSGY0DWlMtr+hZjVhFI8LQc8EK4nw3B6zff+Rz7HnHszgiooumDed8Mz3cSWD0z5\nJ9ltuCfGSZzuYrbnIwpdObQTSDF3KHgglJa5klo2HyKatPewNeD8Jw8dXVUC90oa\nIM22db8jZmDhlC/BlikCWwivc33rTeQymR5oOU+Abh+nncyAV082Q9Abaijw9h3L\n/KCSlN6kqPU4tpHGt6Id8p3NXOPwx6FD6dELGJNg5xswM3PqobSUeXdeVKMHlUIp\nVnN38eefifmwvnMCUnb/AWDOPzXOOaUmB1K3cWnHWH5/kq8FJSxytjrE4l5332ei\nlru5WnMA7bRv4X+fOkf+EonVReUDmlPVO0SAGXz7e3gCQMu0aebnSvFShe83PlBZ\nWYVH8nAQchdjMps4nYE2h82UWgqaAuJmcPrSHoJnxMNzcuIgF1TPOXUjUfn1T+qn\nmZckO9peWB/6/A2t/vN1qxtMtSQk7CIyUcGcsV+uF0UI27jCnjc=\n=6uiI\n-----END PGP SIGNATURE-----",
        "payload": "tree 2677b9e4ac595f8de758a2ae086bf9e2c84f0aad\nparent 7f3ae224685efaeb6fe714de90e8871d12e55f34\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1575661922 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1575662077 +0200\n\nci: Remove trusty build\n\nCo-authored-by: Emil Engler <me@emilengler.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711e0449cf4a0f15cabe0d64094e3add24ad44b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/711e0449cf4a0f15cabe0d64094e3add24ad44b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711e0449cf4a0f15cabe0d64094e3add24ad44b0/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f3ae224685efaeb6fe714de90e8871d12e55f34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f3ae224685efaeb6fe714de90e8871d12e55f34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f3ae224685efaeb6fe714de90e8871d12e55f34"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 0,
      "deletions": 19
    },
    "files": [
      {
        "sha": "bfb4cb1d58639b452daf153d17db3714dbc8dad3",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/711e0449cf4a0f15cabe0d64094e3add24ad44b0/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/711e0449cf4a0f15cabe0d64094e3add24ad44b0/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=711e0449cf4a0f15cabe0d64094e3add24ad44b0",
        "patch": "@@ -128,11 +128,6 @@ jobs:\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_native_qt5.sh\"\n \n-    - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [trusty]  [no functional tests, no depends, only system libs]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_native_trusty.sh\"\n-\n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [xenial]  [no depends, only system libs, sanitizers: thread (TSan), no wallet]'\n       env: >-"
      },
      {
        "sha": "893c1f6b53c72a7f2ba9712d5e3c16fd6e8475b7",
        "filename": "ci/test/00_setup_env_native_trusty.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f3ae224685efaeb6fe714de90e8871d12e55f34/ci/test/00_setup_env_native_trusty.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f3ae224685efaeb6fe714de90e8871d12e55f34/ci/test/00_setup_env_native_trusty.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_trusty.sh?ref=7f3ae224685efaeb6fe714de90e8871d12e55f34",
        "patch": "@@ -1,14 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2019 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C.UTF-8\n-\n-export DOCKER_NAME_TAG=ubuntu:14.04\n-export PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libicu-dev libpng-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.1++-dev libzmq3-dev libqrencode-dev\"\n-export NO_DEPENDS=1\n-export RUN_FUNCTIONAL_TESTS=false\n-export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=no\""
      }
    ]
  },
  {
    "sha": "fd9d6eebc1eabb4675a118d19d38283da2dead39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDlkNmVlYmMxZWFiYjQ2NzVhMTE4ZDE5ZDM4MjgzZGEyZGVhZDM5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T23:01:30Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-06T20:05:08Z"
      },
      "message": "Add GetEncryptionKey() and HasEncryptionKeys() to WalletStorage\n\nAdds functions in WalletStorage that allow ScriptPubKeyMans to check\nand get encryption keys from the wallet.",
      "tree": {
        "sha": "94b31da8c4ac4ee1cd54250ed4417d294446c961",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94b31da8c4ac4ee1cd54250ed4417d294446c961"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd9d6eebc1eabb4675a118d19d38283da2dead39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd9d6eebc1eabb4675a118d19d38283da2dead39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd9d6eebc1eabb4675a118d19d38283da2dead39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd9d6eebc1eabb4675a118d19d38283da2dead39/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d738418a6962b5d4496d0203166073cdf5435785",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd9d6eebc1eabb4675a118d19d38283da2dead39/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd9d6eebc1eabb4675a118d19d38283da2dead39/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=fd9d6eebc1eabb4675a118d19d38283da2dead39",
        "patch": "@@ -31,6 +31,8 @@ class WalletStorage\n     virtual void UnsetBlankWalletFlag(WalletBatch&) = 0;\n     virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n     virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n     virtual bool IsLocked() const = 0;\n };\n "
      },
      {
        "sha": "af3b7cf61312976fa7f175d380b561f697c262f9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd9d6eebc1eabb4675a118d19d38283da2dead39/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd9d6eebc1eabb4675a118d19d38283da2dead39/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fd9d6eebc1eabb4675a118d19d38283da2dead39",
        "patch": "@@ -4056,3 +4056,13 @@ LegacyScriptPubKeyMan* CWallet::GetLegacyScriptPubKeyMan() const\n {\n     return m_spk_man.get();\n }\n+\n+const CKeyingMaterial& CWallet::GetEncryptionKey() const\n+{\n+    return vMasterKey;\n+}\n+\n+bool CWallet::HasEncryptionKeys() const\n+{\n+    return !mapMasterKeys.empty();\n+}"
      },
      {
        "sha": "82661fcc31349f2a21405afd8d7c8c8867b0a0a9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd9d6eebc1eabb4675a118d19d38283da2dead39/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd9d6eebc1eabb4675a118d19d38283da2dead39/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fd9d6eebc1eabb4675a118d19d38283da2dead39",
        "patch": "@@ -1136,6 +1136,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     LegacyScriptPubKeyMan* GetLegacyScriptPubKeyMan() const;\n \n+    const CKeyingMaterial& GetEncryptionKey() const override;\n+    bool HasEncryptionKeys() const override;\n+\n     // Temporary LegacyScriptPubKeyMan accessors and aliases.\n     friend class LegacyScriptPubKeyMan;\n     std::unique_ptr<LegacyScriptPubKeyMan> m_spk_man = MakeUnique<LegacyScriptPubKeyMan>(*this);"
      }
    ]
  },
  {
    "sha": "e576b135d6451101d6a8219f55d80aefa216dc38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTc2YjEzNWQ2NDUxMTAxZDZhODIxOWY1NWQ4MGFlZmEyMTZkYzM4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T23:02:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-06T20:05:08Z"
      },
      "message": "Replace LegacyScriptPubKeyMan::vMasterKey with GetDecryptionKey()",
      "tree": {
        "sha": "d989e10eff24459961a1d1c0d216b7b8b59436d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d989e10eff24459961a1d1c0d216b7b8b59436d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e576b135d6451101d6a8219f55d80aefa216dc38",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e576b135d6451101d6a8219f55d80aefa216dc38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e576b135d6451101d6a8219f55d80aefa216dc38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e576b135d6451101d6a8219f55d80aefa216dc38/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd9d6eebc1eabb4675a118d19d38283da2dead39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd9d6eebc1eabb4675a118d19d38283da2dead39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd9d6eebc1eabb4675a118d19d38283da2dead39"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f9c2645ca9ea5d2b82d0d4fead9cccf057dd40c0",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e576b135d6451101d6a8219f55d80aefa216dc38/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e576b135d6451101d6a8219f55d80aefa216dc38/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=e576b135d6451101d6a8219f55d80aefa216dc38",
        "patch": "@@ -594,7 +594,7 @@ bool LegacyScriptPubKeyMan::AddKeyPubKeyInner(const CKey& key, const CPubKey &pu\n \n     std::vector<unsigned char> vchCryptedSecret;\n     CKeyingMaterial vchSecret(key.begin(), key.end());\n-    if (!EncryptSecret(vMasterKey, vchSecret, pubkey.GetHash(), vchCryptedSecret)) {\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), vchSecret, pubkey.GetHash(), vchCryptedSecret)) {\n         return false;\n     }\n \n@@ -759,7 +759,7 @@ bool LegacyScriptPubKeyMan::GetKey(const CKeyID &address, CKey& keyOut) const\n     {\n         const CPubKey &vchPubKey = (*mi).second.first;\n         const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-        return DecryptKey(vMasterKey, vchCryptedSecret, vchPubKey, keyOut);\n+        return DecryptKey(m_storage.GetEncryptionKey(), vchCryptedSecret, vchPubKey, keyOut);\n     }\n     return false;\n }\n@@ -1398,7 +1398,6 @@ LegacyScriptPubKeyMan::LegacyScriptPubKeyMan(CWallet& wallet)\n     : ScriptPubKeyMan(wallet),\n       m_wallet(wallet),\n       cs_wallet(wallet.cs_wallet),\n-      vMasterKey(wallet.vMasterKey),\n       fUseCrypto(wallet.fUseCrypto),\n       fDecryptionThoroughlyChecked(wallet.fDecryptionThoroughlyChecked) {}\n "
      },
      {
        "sha": "daed5bd9016d05d69dbd00e07bdd29287578cdfd",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e576b135d6451101d6a8219f55d80aefa216dc38/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e576b135d6451101d6a8219f55d80aefa216dc38/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=e576b135d6451101d6a8219f55d80aefa216dc38",
        "patch": "@@ -412,7 +412,6 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     template<typename... Params> void WalletLogPrintf(const std::string& fmt, const Params&... parameters) const;\n     CWallet& m_wallet;\n     CCriticalSection& cs_wallet;\n-    CKeyingMaterial& vMasterKey GUARDED_BY(cs_KeyStore);\n     std::atomic<bool>& fUseCrypto;\n     bool& fDecryptionThoroughlyChecked;\n };"
      }
    ]
  },
  {
    "sha": "97c0374a46943b2ed38ea24eeeff1f1568dd55b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2MwMzc0YTQ2OTQzYjJlZDM4ZWEyNGVlZWZmMWYxNTY4ZGQ1NWIz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T23:02:11Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-06T20:05:47Z"
      },
      "message": "Move Unlock implementation to LegacyScriptPubKeyMan\n\nCWallet::Unlock is changed to call ScriptPubKeyMan::CheckDecryptionKey\nand the original implementation of Unlock is renamed to CheckDecryptionKey.",
      "tree": {
        "sha": "9be6c26319a8cbdae6d9a098a5f53d9b3916543e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9be6c26319a8cbdae6d9a098a5f53d9b3916543e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97c0374a46943b2ed38ea24eeeff1f1568dd55b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97c0374a46943b2ed38ea24eeeff1f1568dd55b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97c0374a46943b2ed38ea24eeeff1f1568dd55b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97c0374a46943b2ed38ea24eeeff1f1568dd55b3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e576b135d6451101d6a8219f55d80aefa216dc38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e576b135d6451101d6a8219f55d80aefa216dc38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e576b135d6451101d6a8219f55d80aefa216dc38"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 21,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0adfefa1aa4dbdb364efdb1b26cc419a926c1a05",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c0374a46943b2ed38ea24eeeff1f1568dd55b3/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c0374a46943b2ed38ea24eeeff1f1568dd55b3/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=97c0374a46943b2ed38ea24eeeff1f1568dd55b3",
        "patch": "@@ -202,7 +202,7 @@ isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n     assert(false);\n }\n \n-bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n+bool LegacyScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n     {\n         LOCK(cs_KeyStore);\n@@ -217,7 +217,7 @@ bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n             const CPubKey &vchPubKey = (*mi).second.first;\n             const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n             CKey key;\n-            if (!DecryptKey(vMasterKeyIn, vchCryptedSecret, vchPubKey, key))\n+            if (!DecryptKey(master_key, vchCryptedSecret, vchPubKey, key))\n             {\n                 keyFail = true;\n                 break;\n@@ -233,10 +233,8 @@ bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n         }\n         if (keyFail || (!keyPass && !accept_no_keys))\n             return false;\n-        vMasterKey = vMasterKeyIn;\n         fDecryptionThoroughlyChecked = true;\n     }\n-    NotifyStatusChanged(this);\n     return true;\n }\n "
      },
      {
        "sha": "f5d7bc658aa7b13cbfde8e182faed403fa661aa0",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c0374a46943b2ed38ea24eeeff1f1568dd55b3/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c0374a46943b2ed38ea24eeeff1f1568dd55b3/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=97c0374a46943b2ed38ea24eeeff1f1568dd55b3",
        "patch": "@@ -152,6 +152,9 @@ class ScriptPubKeyMan\n     virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n     virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n \n+    //! Check that the given decryption key is valid for this ScriptPubKeyMan, i.e. it decrypts all of the keys handled by it.\n+    virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }\n+\n     virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n     virtual void KeepDestination(int64_t index, const OutputType& type) {}\n     virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n@@ -276,6 +279,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     //! will encrypt previously unencrypted keys\n     bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n+    bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n \n     bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n     void KeepDestination(int64_t index, const OutputType& type) override;"
      },
      {
        "sha": "80dfbb594df82ab31a4abedf6ce681a8ac068eb6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c0374a46943b2ed38ea24eeeff1f1568dd55b3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c0374a46943b2ed38ea24eeeff1f1568dd55b3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=97c0374a46943b2ed38ea24eeeff1f1568dd55b3",
        "patch": "@@ -4037,6 +4037,21 @@ bool CWallet::Lock()\n     return true;\n }\n \n+bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (m_spk_man) {\n+            if (!m_spk_man->CheckDecryptionKey(vMasterKeyIn, accept_no_keys)) {\n+                return false;\n+            }\n+        }\n+        vMasterKey = vMasterKeyIn;\n+    }\n+    NotifyStatusChanged(this);\n+    return true;\n+}\n+\n ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const CScript& script) const\n {\n     return m_spk_man.get();"
      }
    ]
  },
  {
    "sha": "14b5efd66ff0afbf3bf9158a724534a9090fc7fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGI1ZWZkNjZmZjBhZmJmM2JmOTE1OGE3MjQ1MzRhOTA5MGZjN2Zj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T23:02:36Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-06T20:05:48Z"
      },
      "message": "Move fDecryptionThoroughlyChecked from CWallet to LegacyScriptPubKeyMan",
      "tree": {
        "sha": "c01bb76824220e70644b55c25c30b4084b80ce5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c01bb76824220e70644b55c25c30b4084b80ce5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14b5efd66ff0afbf3bf9158a724534a9090fc7fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14b5efd66ff0afbf3bf9158a724534a9090fc7fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14b5efd66ff0afbf3bf9158a724534a9090fc7fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14b5efd66ff0afbf3bf9158a724534a9090fc7fc/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97c0374a46943b2ed38ea24eeeff1f1568dd55b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97c0374a46943b2ed38ea24eeeff1f1568dd55b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97c0374a46943b2ed38ea24eeeff1f1568dd55b3"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 4,
      "deletions": 6
    },
    "files": [
      {
        "sha": "8a3f36c2e2b95f8e603c4e00dcc2d015294212f6",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14b5efd66ff0afbf3bf9158a724534a9090fc7fc/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14b5efd66ff0afbf3bf9158a724534a9090fc7fc/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=14b5efd66ff0afbf3bf9158a724534a9090fc7fc",
        "patch": "@@ -1396,8 +1396,7 @@ LegacyScriptPubKeyMan::LegacyScriptPubKeyMan(CWallet& wallet)\n     : ScriptPubKeyMan(wallet),\n       m_wallet(wallet),\n       cs_wallet(wallet.cs_wallet),\n-      fUseCrypto(wallet.fUseCrypto),\n-      fDecryptionThoroughlyChecked(wallet.fDecryptionThoroughlyChecked) {}\n+      fUseCrypto(wallet.fUseCrypto) {}\n \n bool LegacyScriptPubKeyMan::SetCrypted() { return m_wallet.SetCrypted(); }\n bool LegacyScriptPubKeyMan::IsCrypted() const { return m_wallet.IsCrypted(); }"
      },
      {
        "sha": "89e9dc01a3150507e213512285ffbf67251df801",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14b5efd66ff0afbf3bf9158a724534a9090fc7fc/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14b5efd66ff0afbf3bf9158a724534a9090fc7fc/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=14b5efd66ff0afbf3bf9158a724534a9090fc7fc",
        "patch": "@@ -198,6 +198,9 @@ class ScriptPubKeyMan\n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n private:\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n     using WatchOnlySet = std::set<CScript>;\n     using WatchKeyMap = std::map<CKeyID, CPubKey>;\n \n@@ -417,7 +420,6 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     CWallet& m_wallet;\n     CCriticalSection& cs_wallet;\n     std::atomic<bool>& fUseCrypto;\n-    bool& fDecryptionThoroughlyChecked;\n };\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "50cd8833ba2c432d71f95ec06145fb9919210c59",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14b5efd66ff0afbf3bf9158a724534a9090fc7fc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14b5efd66ff0afbf3bf9158a724534a9090fc7fc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=14b5efd66ff0afbf3bf9158a724534a9090fc7fc",
        "patch": "@@ -601,8 +601,6 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     //! if fUseCrypto is false, vMasterKey must be empty\n     std::atomic<bool> fUseCrypto;\n \n-    //! keeps track of whether Unlock has run a thorough check before\n-    bool fDecryptionThoroughlyChecked;\n \n     bool SetCrypted();\n     bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false);\n@@ -735,7 +733,6 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     /** Construct wallet with specified name and database implementation. */\n     CWallet(interfaces::Chain* chain, const WalletLocation& location, std::unique_ptr<WalletDatabase> database)\n         : fUseCrypto(false),\n-          fDecryptionThoroughlyChecked(false),\n           m_chain(chain),\n           m_location(location),\n           database(std::move(database))"
      }
    ]
  },
  {
    "sha": "35f962fcf0d5107ae6a3a9348e249a9b18ff7106",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNWY5NjJmY2YwZDUxMDdhZTZhM2E5MzQ4ZTI0OWE5YjE4ZmY3MTA2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T23:04:06Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-06T20:05:48Z"
      },
      "message": "Clear mapKeys before encrypting\n\nDoes not change behavior. Needed to make AddCryptedKeyInner() work\nwith SetCrypted() being gone.",
      "tree": {
        "sha": "07a5aa9b2a252fd5febc14115682e3f7b1eccb0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07a5aa9b2a252fd5febc14115682e3f7b1eccb0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35f962fcf0d5107ae6a3a9348e249a9b18ff7106",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35f962fcf0d5107ae6a3a9348e249a9b18ff7106",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35f962fcf0d5107ae6a3a9348e249a9b18ff7106",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35f962fcf0d5107ae6a3a9348e249a9b18ff7106/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14b5efd66ff0afbf3bf9158a724534a9090fc7fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14b5efd66ff0afbf3bf9158a724534a9090fc7fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14b5efd66ff0afbf3bf9158a724534a9090fc7fc"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "acf3ed2e2b8b7ffa85b5bc2f7a607e4e22fedfdb",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35f962fcf0d5107ae6a3a9348e249a9b18ff7106/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35f962fcf0d5107ae6a3a9348e249a9b18ff7106/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=35f962fcf0d5107ae6a3a9348e249a9b18ff7106",
        "patch": "@@ -245,7 +245,9 @@ bool LegacyScriptPubKeyMan::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n         return false;\n \n     fUseCrypto = true;\n-    for (const KeyMap::value_type& mKey : mapKeys)\n+    KeyMap keys_to_encrypt;\n+    keys_to_encrypt.swap(mapKeys); // Clear mapKeys so AddCryptedKeyInner will succeed.\n+    for (const KeyMap::value_type& mKey : keys_to_encrypt)\n     {\n         const CKey &key = mKey.second;\n         CPubKey vchPubKey = key.GetPubKey();\n@@ -256,7 +258,6 @@ bool LegacyScriptPubKeyMan::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n         if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n             return false;\n     }\n-    mapKeys.clear();\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "77a777118eaf78f10a439810d1c08d510a539aa0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2E3NzcxMThlYWY3OGYxMGE0Mzk4MTBkMWMwOGQ1MTBhNTM5YWEw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T23:23:57Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-06T20:05:48Z"
      },
      "message": "Rename EncryptKeys to Encrypt and pass in the encrypted batch to use",
      "tree": {
        "sha": "3abffca64ce466ec095472740316248f7043e1e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3abffca64ce466ec095472740316248f7043e1e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77a777118eaf78f10a439810d1c08d510a539aa0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77a777118eaf78f10a439810d1c08d510a539aa0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77a777118eaf78f10a439810d1c08d510a539aa0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77a777118eaf78f10a439810d1c08d510a539aa0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35f962fcf0d5107ae6a3a9348e249a9b18ff7106",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35f962fcf0d5107ae6a3a9348e249a9b18ff7106",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35f962fcf0d5107ae6a3a9348e249a9b18ff7106"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 17,
      "deletions": 13
    },
    "files": [
      {
        "sha": "4d8a7e2d38c6432ee0a48a2b53823370feb02cdb",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77a777118eaf78f10a439810d1c08d510a539aa0/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77a777118eaf78f10a439810d1c08d510a539aa0/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=77a777118eaf78f10a439810d1c08d510a539aa0",
        "patch": "@@ -238,11 +238,15 @@ bool LegacyScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key\n     return true;\n }\n \n-bool LegacyScriptPubKeyMan::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n+bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n {\n+    AssertLockHeld(cs_wallet);\n     LOCK(cs_KeyStore);\n-    if (!mapCryptedKeys.empty() || IsCrypted())\n+    encrypted_batch = batch;\n+    if (!mapCryptedKeys.empty() || IsCrypted()) {\n+        encrypted_batch = nullptr;\n         return false;\n+    }\n \n     fUseCrypto = true;\n     KeyMap keys_to_encrypt;\n@@ -253,11 +257,16 @@ bool LegacyScriptPubKeyMan::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n         CPubKey vchPubKey = key.GetPubKey();\n         CKeyingMaterial vchSecret(key.begin(), key.end());\n         std::vector<unsigned char> vchCryptedSecret;\n-        if (!EncryptSecret(vMasterKeyIn, vchSecret, vchPubKey.GetHash(), vchCryptedSecret))\n+        if (!EncryptSecret(master_key, vchSecret, vchPubKey.GetHash(), vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n             return false;\n-        if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n+        }\n+        if (!AddCryptedKey(vchPubKey, vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n             return false;\n+        }\n     }\n+    encrypted_batch = nullptr;\n     return true;\n }\n "
      },
      {
        "sha": "4fe4efc199de6189ad000e9a33ba4a023e73b2f5",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77a777118eaf78f10a439810d1c08d510a539aa0/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77a777118eaf78f10a439810d1c08d510a539aa0/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=77a777118eaf78f10a439810d1c08d510a539aa0",
        "patch": "@@ -154,6 +154,7 @@ class ScriptPubKeyMan\n \n     //! Check that the given decryption key is valid for this ScriptPubKeyMan, i.e. it decrypts all of the keys handled by it.\n     virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) { return false; }\n \n     virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n     virtual void KeepDestination(int64_t index, const OutputType& type) {}\n@@ -280,9 +281,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n     isminetype IsMine(const CScript& script) const override;\n \n-    //! will encrypt previously unencrypted keys\n-    bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n     bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n+    bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n \n     bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n     void KeepDestination(int64_t index, const OutputType& type) override;"
      },
      {
        "sha": "88399bbab6b10a6a36006dc477dd198a9d51872f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77a777118eaf78f10a439810d1c08d510a539aa0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77a777118eaf78f10a439810d1c08d510a539aa0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=77a777118eaf78f10a439810d1c08d510a539aa0",
        "patch": "@@ -532,8 +532,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     {\n         LOCK(cs_wallet);\n         mapMasterKeys[++nMasterKeyMaxID] = kMasterKey;\n-        assert(!encrypted_batch);\n-        encrypted_batch = new WalletBatch(*database);\n+        WalletBatch* encrypted_batch = new WalletBatch(*database);\n         if (!encrypted_batch->TxnBegin()) {\n             delete encrypted_batch;\n             encrypted_batch = nullptr;\n@@ -542,7 +541,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         encrypted_batch->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n \n         if (auto spk_man = m_spk_man.get()) {\n-            if (!spk_man->EncryptKeys(_vMasterKey)) {\n+            if (!spk_man->Encrypt(_vMasterKey, encrypted_batch)) {\n                 encrypted_batch->TxnAbort();\n                 delete encrypted_batch;\n                 encrypted_batch = nullptr;"
      },
      {
        "sha": "eb74baee4ebef8923fcdc109903e1bebecabbc04",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77a777118eaf78f10a439810d1c08d510a539aa0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77a777118eaf78f10a439810d1c08d510a539aa0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=77a777118eaf78f10a439810d1c08d510a539aa0",
        "patch": "@@ -743,8 +743,6 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     {\n         // Should not have slots connected at this point.\n         assert(NotifyUnload.empty());\n-        delete encrypted_batch;\n-        encrypted_batch = nullptr;\n     }\n \n     bool IsCrypted() const { return fUseCrypto; }\n@@ -1145,8 +1143,6 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     LegacyScriptPubKeyMan::CryptedKeyMap& mapCryptedKeys GUARDED_BY(cs_KeyStore) = m_spk_man->mapCryptedKeys;\n     LegacyScriptPubKeyMan::WatchOnlySet& setWatchOnly GUARDED_BY(cs_KeyStore) = m_spk_man->setWatchOnly;\n     LegacyScriptPubKeyMan::WatchKeyMap& mapWatchKeys GUARDED_BY(cs_KeyStore) = m_spk_man->mapWatchKeys;\n-    WalletBatch*& encrypted_batch GUARDED_BY(cs_wallet) = m_spk_man->encrypted_batch;\n-    using CryptedKeyMap = LegacyScriptPubKeyMan::CryptedKeyMap;\n \n     /** Get last block processed height */\n     int GetLastBlockHeight() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)"
      }
    ]
  },
  {
    "sha": "bf6417142f36a2f75b3a11368bd73fe788ae1ccb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjY0MTcxNDJmMzZhMmY3NWIzYTExMzY4YmQ3M2ZlNzg4YWUxY2Ni",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T23:14:53Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-06T20:05:48Z"
      },
      "message": "Remove SetCrypted() and fUseCrypto; Change IsCrypted()'s implementation\n\nRemoves SetCrypted() and fUseCrypto as we don't need them anymore.\nSetCrypted calls in LegacyScriptPubKeyMan are replaced with mapKeys.empty()\n\nIsCrypted() is changed to just call HasEncryptionKeys()",
      "tree": {
        "sha": "1c2b79eea3f32fdedfe3eb0ff0d12c42cda8eb5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c2b79eea3f32fdedfe3eb0ff0d12c42cda8eb5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf6417142f36a2f75b3a11368bd73fe788ae1ccb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf6417142f36a2f75b3a11368bd73fe788ae1ccb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf6417142f36a2f75b3a11368bd73fe788ae1ccb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf6417142f36a2f75b3a11368bd73fe788ae1ccb/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77a777118eaf78f10a439810d1c08d510a539aa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77a777118eaf78f10a439810d1c08d510a539aa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77a777118eaf78f10a439810d1c08d510a539aa0"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 9,
      "deletions": 29
    },
    "files": [
      {
        "sha": "0cc30ba1b9825314f9705440ebedfbe45b8e65b9",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 10,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf6417142f36a2f75b3a11368bd73fe788ae1ccb/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf6417142f36a2f75b3a11368bd73fe788ae1ccb/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=bf6417142f36a2f75b3a11368bd73fe788ae1ccb",
        "patch": "@@ -206,8 +206,7 @@ bool LegacyScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key\n {\n     {\n         LOCK(cs_KeyStore);\n-        if (!SetCrypted())\n-            return false;\n+        assert(mapKeys.empty());\n \n         bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n         bool keyFail = false;\n@@ -243,12 +242,11 @@ bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBat\n     AssertLockHeld(cs_wallet);\n     LOCK(cs_KeyStore);\n     encrypted_batch = batch;\n-    if (!mapCryptedKeys.empty() || IsCrypted()) {\n+    if (!mapCryptedKeys.empty()) {\n         encrypted_batch = nullptr;\n         return false;\n     }\n \n-    fUseCrypto = true;\n     KeyMap keys_to_encrypt;\n     keys_to_encrypt.swap(mapKeys); // Clear mapKeys so AddCryptedKeyInner will succeed.\n     for (const KeyMap::value_type& mKey : keys_to_encrypt)\n@@ -620,9 +618,7 @@ bool LegacyScriptPubKeyMan::LoadCryptedKey(const CPubKey &vchPubKey, const std::\n bool LegacyScriptPubKeyMan::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     LOCK(cs_KeyStore);\n-    if (!SetCrypted()) {\n-        return false;\n-    }\n+    assert(mapKeys.empty());\n \n     mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n@@ -1405,10 +1401,8 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n LegacyScriptPubKeyMan::LegacyScriptPubKeyMan(CWallet& wallet)\n     : ScriptPubKeyMan(wallet),\n       m_wallet(wallet),\n-      cs_wallet(wallet.cs_wallet),\n-      fUseCrypto(wallet.fUseCrypto) {}\n+      cs_wallet(wallet.cs_wallet) {}\n \n-bool LegacyScriptPubKeyMan::SetCrypted() { return m_wallet.SetCrypted(); }\n bool LegacyScriptPubKeyMan::IsCrypted() const { return m_wallet.IsCrypted(); }\n void LegacyScriptPubKeyMan::NotifyWatchonlyChanged(bool fHaveWatchOnly) const { return m_wallet.NotifyWatchonlyChanged(fHaveWatchOnly); }\n void LegacyScriptPubKeyMan::NotifyCanGetAddressesChanged() const { return m_wallet.NotifyCanGetAddressesChanged(); }"
      },
      {
        "sha": "eef9640cd041fd9540d397f250f8972b5a7fc560",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf6417142f36a2f75b3a11368bd73fe788ae1ccb/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf6417142f36a2f75b3a11368bd73fe788ae1ccb/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=bf6417142f36a2f75b3a11368bd73fe788ae1ccb",
        "patch": "@@ -412,14 +412,12 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     friend class CWallet;\n     friend class ReserveDestination;\n     LegacyScriptPubKeyMan(CWallet& wallet);\n-    bool SetCrypted();\n     bool IsCrypted() const;\n     void NotifyWatchonlyChanged(bool fHaveWatchOnly) const;\n     void NotifyCanGetAddressesChanged() const;\n     template<typename... Params> void WalletLogPrintf(const std::string& fmt, const Params&... parameters) const;\n     CWallet& m_wallet;\n     CCriticalSection& cs_wallet;\n-    std::atomic<bool>& fUseCrypto;\n };\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "41a816312aa2ceeb642176b10ebcc6b443bf1bb1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf6417142f36a2f75b3a11368bd73fe788ae1ccb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf6417142f36a2f75b3a11368bd73fe788ae1ccb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bf6417142f36a2f75b3a11368bd73fe788ae1ccb",
        "patch": "@@ -4002,15 +4002,9 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n     return groups;\n }\n \n-bool CWallet::SetCrypted()\n+bool CWallet::IsCrypted() const\n {\n-    LOCK(cs_KeyStore);\n-    if (fUseCrypto)\n-        return true;\n-    if (!mapKeys.empty())\n-        return false;\n-    fUseCrypto = true;\n-    return true;\n+    return HasEncryptionKeys();\n }\n \n bool CWallet::IsLocked() const\n@@ -4024,7 +4018,7 @@ bool CWallet::IsLocked() const\n \n bool CWallet::Lock()\n {\n-    if (!SetCrypted())\n+    if (!IsCrypted())\n         return false;\n \n     {"
      },
      {
        "sha": "c4511601de6e434a1c68d405797b053ad7813760",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf6417142f36a2f75b3a11368bd73fe788ae1ccb/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf6417142f36a2f75b3a11368bd73fe788ae1ccb/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bf6417142f36a2f75b3a11368bd73fe788ae1ccb",
        "patch": "@@ -597,12 +597,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n private:\n     CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n \n-    //! if fUseCrypto is true, mapKeys must be empty\n-    //! if fUseCrypto is false, vMasterKey must be empty\n-    std::atomic<bool> fUseCrypto;\n \n-\n-    bool SetCrypted();\n     bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false);\n \n     std::atomic<bool> fAbortRescan{false};\n@@ -732,8 +727,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     /** Construct wallet with specified name and database implementation. */\n     CWallet(interfaces::Chain* chain, const WalletLocation& location, std::unique_ptr<WalletDatabase> database)\n-        : fUseCrypto(false),\n-          m_chain(chain),\n+        : m_chain(chain),\n           m_location(location),\n           database(std::move(database))\n     {\n@@ -745,7 +739,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n         assert(NotifyUnload.empty());\n     }\n \n-    bool IsCrypted() const { return fUseCrypto; }\n+    bool IsCrypted() const;\n     bool IsLocked() const override;\n     bool Lock();\n "
      }
    ]
  },
  {
    "sha": "7cecf10ac32af0fca206ac5f24f482bdec88cb7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2VjZjEwYWMzMmFmMGZjYTIwNmFjNWYyNGY0ODJiZGVjODhjYjdk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T22:33:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-06T20:05:48Z"
      },
      "message": "Replace LegacyScriptPubKeyMan::IsCrypted with LegacyScriptPubKeyMan::HasEncryptionKeys",
      "tree": {
        "sha": "411f99ad7b3fa9ec594d3033a5369d134ae4180e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/411f99ad7b3fa9ec594d3033a5369d134ae4180e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cecf10ac32af0fca206ac5f24f482bdec88cb7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cecf10ac32af0fca206ac5f24f482bdec88cb7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cecf10ac32af0fca206ac5f24f482bdec88cb7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cecf10ac32af0fca206ac5f24f482bdec88cb7d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf6417142f36a2f75b3a11368bd73fe788ae1ccb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf6417142f36a2f75b3a11368bd73fe788ae1ccb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf6417142f36a2f75b3a11368bd73fe788ae1ccb"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 6,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b4315014cbabe91423f4ffebc2581913d0d78317",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cecf10ac32af0fca206ac5f24f482bdec88cb7d/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cecf10ac32af0fca206ac5f24f482bdec88cb7d/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=7cecf10ac32af0fca206ac5f24f482bdec88cb7d",
        "patch": "@@ -549,7 +549,7 @@ bool LegacyScriptPubKeyMan::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& s\n         RemoveWatchOnly(script);\n     }\n \n-    if (!IsCrypted()) {\n+    if (!m_storage.HasEncryptionKeys()) {\n         return batch.WriteKey(pubkey,\n                                                  secret.GetPrivKey(),\n                                                  mapKeyMetadata[pubkey.GetID()]);\n@@ -590,7 +590,7 @@ void LegacyScriptPubKeyMan::LoadScriptMetadata(const CScriptID& script_id, const\n bool LegacyScriptPubKeyMan::AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey)\n {\n     LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n+    if (!m_storage.HasEncryptionKeys()) {\n         return FillableSigningProvider::AddKeyPubKey(key, pubkey);\n     }\n \n@@ -745,7 +745,7 @@ void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n bool LegacyScriptPubKeyMan::HaveKey(const CKeyID &address) const\n {\n     LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n+    if (!m_storage.HasEncryptionKeys()) {\n         return FillableSigningProvider::HaveKey(address);\n     }\n     return mapCryptedKeys.count(address) > 0;\n@@ -754,7 +754,7 @@ bool LegacyScriptPubKeyMan::HaveKey(const CKeyID &address) const\n bool LegacyScriptPubKeyMan::GetKey(const CKeyID &address, CKey& keyOut) const\n {\n     LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n+    if (!m_storage.HasEncryptionKeys()) {\n         return FillableSigningProvider::GetKey(address, keyOut);\n     }\n \n@@ -801,7 +801,7 @@ bool LegacyScriptPubKeyMan::GetWatchPubKey(const CKeyID &address, CPubKey &pubke\n bool LegacyScriptPubKeyMan::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n {\n     LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n+    if (!m_storage.HasEncryptionKeys()) {\n         if (!FillableSigningProvider::GetPubKey(address, vchPubKeyOut)) {\n             return GetWatchPubKey(address, vchPubKeyOut);\n         }\n@@ -1387,7 +1387,7 @@ bool LegacyScriptPubKeyMan::ImportScriptPubKeys(const std::set<CScript>& script_\n std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n {\n     LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n+    if (!m_storage.HasEncryptionKeys()) {\n         return FillableSigningProvider::GetKeys();\n     }\n     std::set<CKeyID> set_address;\n@@ -1403,7 +1403,6 @@ LegacyScriptPubKeyMan::LegacyScriptPubKeyMan(CWallet& wallet)\n       m_wallet(wallet),\n       cs_wallet(wallet.cs_wallet) {}\n \n-bool LegacyScriptPubKeyMan::IsCrypted() const { return m_wallet.IsCrypted(); }\n void LegacyScriptPubKeyMan::NotifyWatchonlyChanged(bool fHaveWatchOnly) const { return m_wallet.NotifyWatchonlyChanged(fHaveWatchOnly); }\n void LegacyScriptPubKeyMan::NotifyCanGetAddressesChanged() const { return m_wallet.NotifyCanGetAddressesChanged(); }\n template<typename... Params> void LegacyScriptPubKeyMan::WalletLogPrintf(const std::string& fmt, const Params&... parameters) const { return m_wallet.WalletLogPrintf(fmt, parameters...); }"
      },
      {
        "sha": "aa5eac3a85489a14b9cdede51b1ef5d5c01388c1",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cecf10ac32af0fca206ac5f24f482bdec88cb7d/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cecf10ac32af0fca206ac5f24f482bdec88cb7d/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=7cecf10ac32af0fca206ac5f24f482bdec88cb7d",
        "patch": "@@ -412,7 +412,6 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     friend class CWallet;\n     friend class ReserveDestination;\n     LegacyScriptPubKeyMan(CWallet& wallet);\n-    bool IsCrypted() const;\n     void NotifyWatchonlyChanged(bool fHaveWatchOnly) const;\n     void NotifyCanGetAddressesChanged() const;\n     template<typename... Params> void WalletLogPrintf(const std::string& fmt, const Params&... parameters) const;"
      }
    ]
  },
  {
    "sha": "034561f9cd4180ea1c165cb02df6c84444a8d692",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzQ1NjFmOWNkNDE4MGVhMWMxNjVjYjAyZGY2Yzg0NDQ0YThkNjky",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2019-12-06T20:47:55Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2019-12-06T20:47:55Z"
      },
      "message": "cli: fix Fatal LevelDB error when specifying -blockfilterindex=basic twice",
      "tree": {
        "sha": "1c0f2961ac02458cbf6c894d6603b94bdcb064f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c0f2961ac02458cbf6c894d6603b94bdcb064f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/034561f9cd4180ea1c165cb02df6c84444a8d692",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl3qvnsACgkQJiaFvHjt\nEftEKQf/e4I7WyYnyjKbXQ+nmw+WMAeKoCXLuaOqNx3w/MvzspJcJdC10xKV1zcT\nBsqoXm3Np6CzxNdDdYiGDeLsiqt9qJXU8wW+XXHKBQKeRkVfxEVJBiKLiFykqjxR\nJaz/mYYyeuwXB6k8IGoO++gSAII/bLbJ5kDmGkQRZxqLXmm2dQM3h6ca9zP2QRjr\nQ6wk+qowYFqM99Co/AH409yHbr9cgg05Otjnyr1tERyyti0zgt1LO1giDqHhxpll\nsV3GBlKSl9J/z3TpeJfArmtk0k+E282k9jP5spGPp1bHs7lR6fI19pXe4PCAU1Z6\nawgySpVjDTo9r4CWYRNrqCTZZpn9jQ==\n=lOQC\n-----END PGP SIGNATURE-----",
        "payload": "tree 1c0f2961ac02458cbf6c894d6603b94bdcb064f8\nparent cb11324a63ef10475bfc4d8e45148d5ae6f3e71e\nauthor Harris <brakmic@gmail.com> 1575665275 +0100\ncommitter Harris <brakmic@gmail.com> 1575665275 +0100\n\ncli: fix Fatal LevelDB error when specifying -blockfilterindex=basic twice\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/034561f9cd4180ea1c165cb02df6c84444a8d692",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/034561f9cd4180ea1c165cb02df6c84444a8d692",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/034561f9cd4180ea1c165cb02df6c84444a8d692/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "5ad22d46eb925aaa46609fd151854ea2318a66bc",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/034561f9cd4180ea1c165cb02df6c84444a8d692/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/034561f9cd4180ea1c165cb02df6c84444a8d692/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=034561f9cd4180ea1c165cb02df6c84444a8d692",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <mutex>\n #include <sstream>\n+#include <set>\n \n #include <blockfilter.h>\n #include <crypto/siphash.h>\n@@ -221,15 +222,14 @@ bool BlockFilterTypeByName(const std::string& name, BlockFilterType& filter_type\n     return false;\n }\n \n-const std::vector<BlockFilterType>& AllBlockFilterTypes()\n+const std::set<BlockFilterType>& AllBlockFilterTypes()\n {\n-    static std::vector<BlockFilterType> types;\n+    static std::set<BlockFilterType> types;\n \n     static std::once_flag flag;\n     std::call_once(flag, []() {\n-            types.reserve(g_filter_types.size());\n             for (auto entry : g_filter_types) {\n-                types.push_back(entry.first);\n+                types.insert(entry.first);\n             }\n         });\n "
      },
      {
        "sha": "828204b87543a7ecb8949aa9f86dd7836553c81a",
        "filename": "src/blockfilter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/034561f9cd4180ea1c165cb02df6c84444a8d692/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/034561f9cd4180ea1c165cb02df6c84444a8d692/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=034561f9cd4180ea1c165cb02df6c84444a8d692",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <stdint.h>\n #include <string>\n+#include <set>\n #include <unordered_set>\n #include <vector>\n \n@@ -97,7 +98,7 @@ const std::string& BlockFilterTypeName(BlockFilterType filter_type);\n bool BlockFilterTypeByName(const std::string& name, BlockFilterType& filter_type);\n \n /** Get a list of known filter types. */\n-const std::vector<BlockFilterType>& AllBlockFilterTypes();\n+const std::set<BlockFilterType>& AllBlockFilterTypes();\n \n /** Get a comma-separated list of known filter type names. */\n const std::string& ListBlockFilterTypes();"
      },
      {
        "sha": "9c91c93e6595e1af0d0d5a2a2a2f4c2337649093",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/034561f9cd4180ea1c165cb02df6c84444a8d692/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/034561f9cd4180ea1c165cb02df6c84444a8d692/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=034561f9cd4180ea1c165cb02df6c84444a8d692",
        "patch": "@@ -58,6 +58,7 @@\n \n #include <stdint.h>\n #include <stdio.h>\n+#include <set>\n \n #ifndef WIN32\n #include <attributes.h>\n@@ -846,7 +847,7 @@ int nUserMaxConnections;\n int nFD;\n ServiceFlags nLocalServices = ServiceFlags(NODE_NETWORK | NODE_NETWORK_LIMITED);\n int64_t peer_connect_timeout;\n-std::vector<BlockFilterType> g_enabled_filter_types;\n+std::set<BlockFilterType> g_enabled_filter_types;\n \n } // namespace\n \n@@ -934,13 +935,12 @@ bool AppInitParameterInteraction()\n         g_enabled_filter_types = AllBlockFilterTypes();\n     } else if (blockfilterindex_value != \"0\") {\n         const std::vector<std::string> names = gArgs.GetArgs(\"-blockfilterindex\");\n-        g_enabled_filter_types.reserve(names.size());\n         for (const auto& name : names) {\n             BlockFilterType filter_type;\n             if (!BlockFilterTypeByName(name, filter_type)) {\n                 return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\").translated, name));\n             }\n-            g_enabled_filter_types.push_back(filter_type);\n+            g_enabled_filter_types.insert(filter_type);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "fc0da027e8cda1d7304e50315a848c353bae4822",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzBkYTAyN2U4Y2RhMWQ3MzA0ZTUwMzE1YTg0OGMzNTNiYWU0ODIy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-07T04:32:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-07T04:32:21Z"
      },
      "message": "Merge #17635: ci: Add CentOS 7 build\n\n711e0449cf4a0f15cabe0d64094e3add24ad44b0 ci: Remove trusty build (Hennadii Stepanov)\n7f3ae224685efaeb6fe714de90e8871d12e55f34 ci: Add CentOS 7 build (Hennadii Stepanov)\n\nPull request description:\n\n  Arguably, CentOS is the most conservative distro of all the popular ones. Thus, it could be a good way to check the Bitcoin Core compatibility with aged dependencies.\n\n  Currently, CentOS 7 has:\n  - Berkeley DB == 4.8.30\n  - Boost == 1.53.0\n  - GCC == 4.8.5\n  - libevent == 2.0.21 < minimum required [2.0.22](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md), but tests passed\n  - MiniUPnPc == 2.0\n  - Python == 3.6.8\n  - qrencode == 3.4.1\n  - Qt == 5.9.7\n  - ZeroMQ == 4.1.4\n\n  ~Please note that this PR is based on the bugfix #17634.~\n\n  Also trusty build has been removed for the following reasons:\n  - https://github.com/bitcoin/bitcoin/issues/17628#issuecomment-559448201:\n  > Maybe it'd make sense to replace Ubuntu Trusty with Centos 7 as the \"check ancient backward compatibililty\" Travis run. It's supported until 2024, apparently.\n\n  - https://github.com/bitcoin/bitcoin/pull/17635#discussion_r354811792:\n  > Our travis is currently running at its limit and this doesn't seem like it is adding a lot new coverage compared to the other builds.\n\n  Close #17628\n\nACKs for top commit:\n  MarcoFalke:\n    ACK 711e0449cf4a0f15cabe0d64094e3add24ad44b0 \ud83d\udea0\n\nTree-SHA512: 614ec8394943f482a5867067f7119bffd052924a51e32ffda9a08e10c392c4a955a3539e2f8907cb65bfd9347dadf0ba62f6d1530bbc49927c347360a5a7f73c",
      "tree": {
        "sha": "a99971816597ed6f641e558a87b8b5c06c5a6bbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a99971816597ed6f641e558a87b8b5c06c5a6bbd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc0da027e8cda1d7304e50315a848c353bae4822",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi9yQv/WyaK33kcY/Fo4+DVe7/x9XnGnRZ9f8R2Tlo7PhfQBimPMPZYoKR/DF8e\nvUe498KYLfkQqtY/w8+D0gzCf0WdlKM+HSJj5MSv8aLfCzfBYO/szT76VZIt3yaF\nSmD9cwrgdPzCKrkC03rCA/HOUReNOaeHYu+87K5S33GGJ+agOmVJWMv3t0aFULOJ\nyYlWhbsSgPA3dCi66QzCM1Z7deqTrRBUItDrur4xZaOziNjat6va+i0NXf5e/l5H\nyt2zmtEW90d49ePkTGARguAq0C4IbBSzL8PEU5pl3b9qSOrpTeqryPg+qpLHYyY9\nt60VGnk0RRmcUvu3uSr6lACuoJ/+rsuvORCllz9/KfgALlgssCcRB18jwLVPBuRH\nWh3ShnOB4fizK6gp/YGb3JO/bEtHpWDXV1xxQexxNYmI5BfqdsscId6N79niuXD4\nhZz6kpObldFNDQorrX90f5oHNTYYJctnMFz5Wm5XHtbaMNgSkeuB3RjDUlnCj9b9\nV10Xttvq\n=+vDO\n-----END PGP SIGNATURE-----",
        "payload": "tree a99971816597ed6f641e558a87b8b5c06c5a6bbd\nparent 4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436\nparent 711e0449cf4a0f15cabe0d64094e3add24ad44b0\nauthor MarcoFalke <falke.marco@gmail.com> 1575693136 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575693141 -0500\n\nMerge #17635: ci: Add CentOS 7 build\n\n711e0449cf4a0f15cabe0d64094e3add24ad44b0 ci: Remove trusty build (Hennadii Stepanov)\n7f3ae224685efaeb6fe714de90e8871d12e55f34 ci: Add CentOS 7 build (Hennadii Stepanov)\n\nPull request description:\n\n  Arguably, CentOS is the most conservative distro of all the popular ones. Thus, it could be a good way to check the Bitcoin Core compatibility with aged dependencies.\n\n  Currently, CentOS 7 has:\n  - Berkeley DB == 4.8.30\n  - Boost == 1.53.0\n  - GCC == 4.8.5\n  - libevent == 2.0.21 < minimum required [2.0.22](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md), but tests passed\n  - MiniUPnPc == 2.0\n  - Python == 3.6.8\n  - qrencode == 3.4.1\n  - Qt == 5.9.7\n  - ZeroMQ == 4.1.4\n\n  ~Please note that this PR is based on the bugfix #17634.~\n\n  Also trusty build has been removed for the following reasons:\n  - https://github.com/bitcoin/bitcoin/issues/17628#issuecomment-559448201:\n  > Maybe it'd make sense to replace Ubuntu Trusty with Centos 7 as the \"check ancient backward compatibililty\" Travis run. It's supported until 2024, apparently.\n\n  - https://github.com/bitcoin/bitcoin/pull/17635#discussion_r354811792:\n  > Our travis is currently running at its limit and this doesn't seem like it is adding a lot new coverage compared to the other builds.\n\n  Close #17628\n\nACKs for top commit:\n  MarcoFalke:\n    ACK 711e0449cf4a0f15cabe0d64094e3add24ad44b0 \ud83d\udea0\n\nTree-SHA512: 614ec8394943f482a5867067f7119bffd052924a51e32ffda9a08e10c392c4a955a3539e2f8907cb65bfd9347dadf0ba62f6d1530bbc49927c347360a5a7f73c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc0da027e8cda1d7304e50315a848c353bae4822",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc0da027e8cda1d7304e50315a848c353bae4822",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc0da027e8cda1d7304e50315a848c353bae4822/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436"
      },
      {
        "sha": "711e0449cf4a0f15cabe0d64094e3add24ad44b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711e0449cf4a0f15cabe0d64094e3add24ad44b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/711e0449cf4a0f15cabe0d64094e3add24ad44b0"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 26,
      "deletions": 19
    },
    "files": [
      {
        "sha": "4f9dbeded42f50c8945a713c58cdeb9af48a2543",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc0da027e8cda1d7304e50315a848c353bae4822/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc0da027e8cda1d7304e50315a848c353bae4822/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=fc0da027e8cda1d7304e50315a848c353bae4822",
        "patch": "@@ -105,14 +105,14 @@ jobs:\n         FILE_ENV=\"./ci/test/00_setup_env_i686.sh\"\n \n     - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [uses qt5 dev package instead of depends Qt to speed up build and avoid timeout] [unsigned char]'\n+      name: 'x86_64 Linux  [GOAL: install]  [CentOS 7]  [no depends, only system libs]'\n       env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_native_qt5.sh\"\n+        FILE_ENV=\"./ci/test/00_setup_env_native_centos.sh\"\n \n     - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [trusty]  [no functional tests, no depends, only system libs]'\n+      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [uses qt5 dev package instead of depends Qt to speed up build and avoid timeout] [unsigned char]'\n       env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_native_trusty.sh\"\n+        FILE_ENV=\"./ci/test/00_setup_env_native_qt5.sh\"\n \n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [xenial]  [no depends, only system libs, sanitizers: thread (TSan), no wallet]'"
      },
      {
        "sha": "56b915b6c7b366c8d9a3970d6ac510d9b7ae0af9",
        "filename": "ci/test/00_setup_env_native_centos.sh",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc0da027e8cda1d7304e50315a848c353bae4822/ci/test/00_setup_env_native_centos.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc0da027e8cda1d7304e50315a848c353bae4822/ci/test/00_setup_env_native_centos.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_centos.sh?ref=fc0da027e8cda1d7304e50315a848c353bae4822",
        "patch": "@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export DOCKER_NAME_TAG=centos:7\n+export DOCKER_PACKAGES=\"gcc-c++ libtool make git python3 python36-zmq\"\n+export PACKAGES=\"boost-devel libevent-devel libdb4-devel libdb4-cxx-devel miniupnpc-devel zeromq-devel qt5-qtbase-devel qt5-qttools-devel qrencode-devel\"\n+export NO_DEPENDS=1\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--enable-reduce-exports\""
      },
      {
        "sha": "893c1f6b53c72a7f2ba9712d5e3c16fd6e8475b7",
        "filename": "ci/test/00_setup_env_native_trusty.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436/ci/test/00_setup_env_native_trusty.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436/ci/test/00_setup_env_native_trusty.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_trusty.sh?ref=4ee8a58ce77a1e013af98ceff1cf96bd0e4fd436",
        "patch": "@@ -1,14 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2019 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C.UTF-8\n-\n-export DOCKER_NAME_TAG=ubuntu:14.04\n-export PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libicu-dev libpng-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.1++-dev libzmq3-dev libqrencode-dev\"\n-export NO_DEPENDS=1\n-export RUN_FUNCTIONAL_TESTS=false\n-export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=no\""
      },
      {
        "sha": "c72134525021f8a8b5216c75809c313f1494fe59",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc0da027e8cda1d7304e50315a848c353bae4822/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc0da027e8cda1d7304e50315a848c353bae4822/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=fc0da027e8cda1d7304e50315a848c353bae4822",
        "patch": "@@ -6,6 +6,10 @@\n \n export LC_ALL=C.UTF-8\n \n+if [[ $DOCKER_NAME_TAG == centos* ]]; then\n+  export LC_ALL=en_US.utf8\n+fi\n+\n if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n   set +o errexit\n   pushd /usr/local/Homebrew || exit 1\n@@ -82,7 +86,10 @@ if [ -n \"$DPKG_ADD_ARCH\" ]; then\n   DOCKER_EXEC dpkg --add-architecture \"$DPKG_ADD_ARCH\"\n fi\n \n-if [ \"$TRAVIS_OS_NAME\" != \"osx\" ]; then\n+if [[ $DOCKER_NAME_TAG == centos* ]]; then\n+  ${CI_RETRY_EXE} DOCKER_EXEC yum -y install epel-release\n+  ${CI_RETRY_EXE} DOCKER_EXEC yum -y install $DOCKER_PACKAGES $PACKAGES\n+elif [ \"$TRAVIS_OS_NAME\" != \"osx\" ]; then\n   ${CI_RETRY_EXE} DOCKER_EXEC apt-get update\n   ${CI_RETRY_EXE} DOCKER_EXEC apt-get install --no-install-recommends --no-upgrade -y $PACKAGES $DOCKER_PACKAGES\n fi"
      }
    ]
  },
  {
    "sha": "a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGY1ZDVjNmI5ZmMyMjUwYjljMGQ4NTZjMDg4NWNlOGZlYzgzZGU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-07T10:46:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-07T10:46:36Z"
      },
      "message": "Merge #17658: depends: add ability to skip building qrencode\n\nc8becb82805ed1483e009eba682f19fe9e8b8c9c depends: add ability to skip building qrencode (fanquake)\n\nPull request description:\n\n  Similar to other depends packages, add the ability to skip building `qrencode` by passing `NO_QR=1`. Same as #16089.\n\nACKs for top commit:\n  promag:\n    ACK c8becb82805ed1483e009eba682f19fe9e8b8c9c.\n  hebasto:\n    ACK c8becb82805ed1483e009eba682f19fe9e8b8c9c, I have reviewed the code and it looks OK, I agree it can be merged.\n\nTree-SHA512: 86c7a87a31b1b2e65be2b79f533ce49f8b0074cf31331411cb3d32bb542d0b99e69605482ad75e4d1be5f2c8c613f17ba9ff17195a6b48f45365f5eb35df8bf9",
      "tree": {
        "sha": "a998004bcf30c1241a68c29b36b9d856d7835192",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a998004bcf30c1241a68c29b36b9d856d7835192"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3rgwwACgkQHkrtYphs\n0l13JAf/ZXECxlGxLFWBTdWAGlojX5GFBWr5AGwzsDX77vQ9EztQiBi2WzORGV6V\nyCrduxLXzINCxIHtdddR2gAHq83GMDZ7FqtpkT/fzlMxgh6qrxHBLs29LULYvV5G\ngdjedCXC4rcJBg2Ix7viFNVlUhoB+alV2lOeILrjyMsrMY+aSkNzpgGnIN5uss9y\n6qke1t4wsOmTlz3P6EioR2mjtP+0FBWngh+0lsW3rttlQDDNKTIBxseydcSrKFN9\n5WuIfn8RgUy3JqDIkCtgWIBY0EAhWNbulFsGEWe1rAnEzK5PpkYF3X+c8Qo7XcBf\nHCqkv3EQP7/blG39V/HLwdpQ4LsKBg==\n=IOCY\n-----END PGP SIGNATURE-----",
        "payload": "tree a998004bcf30c1241a68c29b36b9d856d7835192\nparent fc0da027e8cda1d7304e50315a848c353bae4822\nparent c8becb82805ed1483e009eba682f19fe9e8b8c9c\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1575715583 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1575715596 +0100\n\nMerge #17658: depends: add ability to skip building qrencode\n\nc8becb82805ed1483e009eba682f19fe9e8b8c9c depends: add ability to skip building qrencode (fanquake)\n\nPull request description:\n\n  Similar to other depends packages, add the ability to skip building `qrencode` by passing `NO_QR=1`. Same as #16089.\n\nACKs for top commit:\n  promag:\n    ACK c8becb82805ed1483e009eba682f19fe9e8b8c9c.\n  hebasto:\n    ACK c8becb82805ed1483e009eba682f19fe9e8b8c9c, I have reviewed the code and it looks OK, I agree it can be merged.\n\nTree-SHA512: 86c7a87a31b1b2e65be2b79f533ce49f8b0074cf31331411cb3d32bb542d0b99e69605482ad75e4d1be5f2c8c613f17ba9ff17195a6b48f45365f5eb35df8bf9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc0da027e8cda1d7304e50315a848c353bae4822",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc0da027e8cda1d7304e50315a848c353bae4822",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc0da027e8cda1d7304e50315a848c353bae4822"
      },
      {
        "sha": "c8becb82805ed1483e009eba682f19fe9e8b8c9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8becb82805ed1483e009eba682f19fe9e8b8c9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8becb82805ed1483e009eba682f19fe9e8b8c9c"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8706e013f97dbe946e73e987f3909eddbce22b71",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8",
        "patch": "@@ -9,6 +9,7 @@ WORK_PATH = $(BASEDIR)/work\n BASE_CACHE ?= $(BASEDIR)/built\n SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n+NO_QR ?=\n RAPIDCHECK ?=\n NO_WALLET ?=\n NO_ZMQ ?=\n@@ -100,7 +101,10 @@ $(host_arch)_$(host_os)_id_string+=$(shell $(host_CXX) --version 2>/dev/null)\n $(host_arch)_$(host_os)_id_string+=$(shell $(host_RANLIB) --version 2>/dev/null)\n $(host_arch)_$(host_os)_id_string+=$(shell $(host_STRIP) --version 2>/dev/null)\n \n-qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch)_$(host_os)_packages)\n+qrencode_packages_$(NO_QR) = $(qrencode_packages)\n+\n+qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch)_$(host_os)_packages) $(qrencode_packages_)\n+\n wallet_packages_$(NO_WALLET) = $(wallet_packages)\n upnp_packages_$(NO_UPNP) = $(upnp_packages)\n zmq_packages_$(NO_ZMQ) = $(zmq_packages)\n@@ -154,6 +158,7 @@ $(host_prefix)/share/config.site : config.site.in $(host_prefix)/.stamp_$(final_\n             -e 's|@LDFLAGS@|$(strip $(host_LDFLAGS) $(host_$(release_type)_LDFLAGS))|' \\\n             -e 's|@allow_host_packages@|$(ALLOW_HOST_PACKAGES)|' \\\n             -e 's|@no_qt@|$(NO_QT)|' \\\n+            -e 's|@no_qr@|$(NO_QR)|' \\\n             -e 's|@no_zmq@|$(NO_ZMQ)|' \\\n             -e 's|@no_wallet@|$(NO_WALLET)|' \\\n             -e 's|@no_upnp@|$(NO_UPNP)|' \\"
      },
      {
        "sha": "e382e8a2006e9954185eed3fb299079fee507197",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8",
        "patch": "@@ -76,6 +76,7 @@ The following can be set when running make: make FOO=bar\n     SDK_PATH: Path where sdk's can be found (used by macOS)\n     FALLBACK_DOWNLOAD_PATH: If a source file can't be fetched, try here before giving up\n     NO_QT: Don't download/build/cache qt and its dependencies\n+    NO_QR: Don't download/build/cache packages needed for enabling qrencode\n     NO_ZMQ: Don't download/build/cache packages needed for enabling zeromq\n     NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n     NO_UPNP: Don't download/build/cache packages needed for enabling upnp"
      },
      {
        "sha": "c5731e5269a7f87784e0e01fd893eaf5dc996bba",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8",
        "patch": "@@ -17,6 +17,10 @@ if test -z $with_qt_bindir && test -z \"@no_qt@\"; then\n   with_qt_bindir=$depends_prefix/native/bin\n fi\n \n+if test -z $with_qrencode && test -n \"@no_qr@\"; then\n+  with_qrencode=no\n+fi\n+\n if test -z $enable_wallet && test -n \"@no_wallet@\"; then\n   enable_wallet=no\n fi"
      },
      {
        "sha": "d8ccb208ccd013e2f00eadb51be95ff0d86fcbc8",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8",
        "patch": "@@ -1,6 +1,8 @@\n packages:=boost libevent\n \n-qt_packages = qrencode zlib\n+qt_packages = zlib\n+\n+qrencode_packages = qrencode\n \n qt_linux_packages:=qt expat libxcb xcb_proto libXau xproto freetype fontconfig\n qt_android_packages=qt"
      }
    ]
  },
  {
    "sha": "5622d8f3156a293e61d0964c33d4b21d8c9fd5e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjIyZDhmMzE1NmEyOTNlNjFkMDk2NGMzM2Q0YjIxZDhjOWZkNWUw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-07T14:56:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-07T14:56:10Z"
      },
      "message": "Merge #17671: script: fixed wget call in gitian-build.py\n\nb11d35b5e2dd09ab816d688d8ac0264b43f7f844 Fixed wget call in gitian-build.py (willyk)\n\nPull request description:\n\n  Missing comma makes the gitian-builder script to download osslsigncode-2.0.tar.gz as osslsigncode-2.0.tar.gz-N,  which makes the subsequent calls fail when building window binaries\n\nACKs for top commit:\n  laanwj:\n    ACK b11d35b5e2dd09ab816d688d8ac0264b43f7f844\n  promag:\n    ACK b11d35b5e2dd09ab816d688d8ac0264b43f7f844.\n  hebasto:\n    ACK b11d35b5e2dd09ab816d688d8ac0264b43f7f844, I have reviewed the code and it looks OK, I agree it can be merged.\n\nTree-SHA512: a74f6bec9e405fe57c2e53cc4ea0cb3546521b295478d02ae81a36306262e349e14395e46fd8106e72cc6a5bb80a88c8eff1ea38816af49c8b169c5715e84b0d",
      "tree": {
        "sha": "dffcfb816780bab49bd99dbe361793bb1505cedb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dffcfb816780bab49bd99dbe361793bb1505cedb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5622d8f3156a293e61d0964c33d4b21d8c9fd5e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgWzwv+J00Tao5XTM3XLAuDcMNRUK7IH2ohJ2pU9Z39mXlMDfCr4pwQDJtwuHtp\nXtnSJrAPC4g//l7h7UVRVRa19Iub5PPxhYjX4ASObPIv+drqKl4UBN5f4W+ozeCU\nfiSw3d/62Lu79KVw/hO/KbsA5AAdUZiYf9hLyRoGntFl0Peq3XxAYE5f7caZ2gvZ\nf+IM3ZpH9r5oasgmgLrdZ8GJQpN1DAq+78KZqBM206HBajUsQXPnR44qouj0XQsx\nYQ55GOGIL/6k+forOCelr1Cfw9tRVSasPPVwq6ctwJll01nqMs3CzkWlw4kc/rm/\nttkhSzdmf+0JgWJFd63rb7YU/B9ySr2dxO+QWkaYzSgiPBd5hSzZa864YlpIlTWa\nFYwwUmU3U69YH4bxVKm18SrLehqHIEmo0TJLOSFg/MryOCSVE6VyxYY7dwhrXao4\nTCMrPkXp+SVTZQ8Vfw7Oi+/ngRj0mDS5GMWlKSPBgrkkWRNJCSihcDl1ZpzC89rP\nRdJeGWZk\n=lX9F\n-----END PGP SIGNATURE-----",
        "payload": "tree dffcfb816780bab49bd99dbe361793bb1505cedb\nparent a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8\nparent b11d35b5e2dd09ab816d688d8ac0264b43f7f844\nauthor MarcoFalke <falke.marco@gmail.com> 1575730567 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575730570 -0500\n\nMerge #17671: script: fixed wget call in gitian-build.py\n\nb11d35b5e2dd09ab816d688d8ac0264b43f7f844 Fixed wget call in gitian-build.py (willyk)\n\nPull request description:\n\n  Missing comma makes the gitian-builder script to download osslsigncode-2.0.tar.gz as osslsigncode-2.0.tar.gz-N,  which makes the subsequent calls fail when building window binaries\n\nACKs for top commit:\n  laanwj:\n    ACK b11d35b5e2dd09ab816d688d8ac0264b43f7f844\n  promag:\n    ACK b11d35b5e2dd09ab816d688d8ac0264b43f7f844.\n  hebasto:\n    ACK b11d35b5e2dd09ab816d688d8ac0264b43f7f844, I have reviewed the code and it looks OK, I agree it can be merged.\n\nTree-SHA512: a74f6bec9e405fe57c2e53cc4ea0cb3546521b295478d02ae81a36306262e349e14395e46fd8106e72cc6a5bb80a88c8eff1ea38816af49c8b169c5715e84b0d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5622d8f3156a293e61d0964c33d4b21d8c9fd5e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5622d8f3156a293e61d0964c33d4b21d8c9fd5e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5622d8f3156a293e61d0964c33d4b21d8c9fd5e0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8f5d5c6b9fc2250b9c0d856c0885ce8fec83de8"
      },
      {
        "sha": "b11d35b5e2dd09ab816d688d8ac0264b43f7f844",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b11d35b5e2dd09ab816d688d8ac0264b43f7f844",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b11d35b5e2dd09ab816d688d8ac0264b43f7f844"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e38fa6fcb01271feb77e8af263f54e9ffc375f6c",
        "filename": "contrib/gitian-build.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5622d8f3156a293e61d0964c33d4b21d8c9fd5e0/contrib/gitian-build.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5622d8f3156a293e61d0964c33d4b21d8c9fd5e0/contrib/gitian-build.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.py?ref=5622d8f3156a293e61d0964c33d4b21d8c9fd5e0",
        "patch": "@@ -51,7 +51,7 @@ def build():\n     os.chdir('gitian-builder')\n     os.makedirs('inputs', exist_ok=True)\n \n-    subprocess.check_call(['wget', '-O' 'osslsigncode-2.0.tar.gz' '-N', '-P', 'inputs', 'https://github.com/mtrojnar/osslsigncode/archive/2.0.tar.gz'])\n+    subprocess.check_call(['wget', '-O', 'inputs/osslsigncode-2.0.tar.gz', 'https://github.com/mtrojnar/osslsigncode/archive/2.0.tar.gz'])\n     subprocess.check_call([\"echo '5a60e0a4b3e0b4d655317b2f12a810211c50242138322b16e7e01c6fbb89d92f inputs/osslsigncode-2.0.tar.gz' | sha256sum -c\"], shell=True)\n     subprocess.check_call(['make', '-C', '../bitcoin/depends', 'download', 'SOURCES_PATH=' + os.getcwd() + '/cache/common'])\n "
      },
      {
        "sha": "36d79a0c34dec300a9c65ef85407d7c762296ffb",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5622d8f3156a293e61d0964c33d4b21d8c9fd5e0/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5622d8f3156a293e61d0964c33d4b21d8c9fd5e0/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=5622d8f3156a293e61d0964c33d4b21d8c9fd5e0",
        "patch": "@@ -116,7 +116,7 @@ Ensure gitian-builder is up-to-date:\n \n     pushd ./gitian-builder\n     mkdir -p inputs\n-    wget -O osslsigncode-2.0.tar.gz -P inputs https://github.com/mtrojnar/osslsigncode/archive/2.0.tar.gz\n+    wget -O inputs/osslsigncode-2.0.tar.gz https://github.com/mtrojnar/osslsigncode/archive/2.0.tar.gz\n     echo '5a60e0a4b3e0b4d655317b2f12a810211c50242138322b16e7e01c6fbb89d92f inputs/osslsigncode-2.0.tar.gz' | sha256sum -c\n     popd\n "
      }
    ]
  },
  {
    "sha": "d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjVmYWZjMmY3ZDk4YWIyYmUwYTA5NjFlN2EzZWJlNzg1MGMxZGNh",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-07T20:32:05Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-07T20:32:05Z"
      },
      "message": "gui: disable File->CreateWallet during startup",
      "tree": {
        "sha": "13658a286c9d4b9eb41bdc463ebff9f95d7abfe8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13658a286c9d4b9eb41bdc463ebff9f95d7abfe8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3sDEUACgkQLuufXMCV\nJsHmohAApdg6qqyEQF+6rgTYrXlLYdkIaJGrtSJgFev1TG5xUjqdic4890QLzkaG\nVTMndik+1sWk/oM/uHSfEPR1L0NbkQA7Nn+nLxpjAG7PWynxn719lSUsDzS6I8zR\nh8a/qD8y6LKP3VJZbwERkxIcGeb0IWKZQtjvRpUbUBCY8EBOd3hJo137D7P4wxk/\nH9bbKKMHgr70RH9d/Z+PJ7k0kDoJf7Mh/JioxblEwyT7RtSYWggbakjHcC4nHvAN\njBCi5tnBgkmoYePjA9qUuy6QUekxDp0aHrhk3q+7H6TOANwSRyZivRqgbxpLgOkh\n2LZ6u1/F2tkLnpknGszXyfyWa6F8VEzUj70DE/bx40DYj+5ODWxVv1NtxXeKxp/2\nZ/qM2YnVYOa1qh+g9IwKscJ3E7nheQQtD3tNSiI7iM0wPengO0DA1kz3IgP7D560\nDeBw4BosMtEbBh9hAnRNNPeO76DFwqGlEZ8bIWV+0HkYF/lWo8+tkbe480EjG9Rz\nxT5lOp43zyzITQPdcMRca3I/ueeJWs2OqlUGBNDAXIQMmhhH4LmU7tOQzzQXz1KO\ngDHlvsJh0kTPEoZuURfd//4zhWRP1gZDPWG4aMUoycDfTANrY1oJbJQTzIRMqjkE\n10xchNeg3gBI+CHGtLzj7aEsTZoCU/3W40N06msOd4M4VjkJ47c=\n=pBcz\n-----END PGP SIGNATURE-----",
        "payload": "tree 13658a286c9d4b9eb41bdc463ebff9f95d7abfe8\nparent 5622d8f3156a293e61d0964c33d4b21d8c9fd5e0\nauthor fanquake <fanquake@gmail.com> 1575750725 -0500\ncommitter fanquake <fanquake@gmail.com> 1575750725 -0500\n\ngui: disable File->CreateWallet during startup\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5622d8f3156a293e61d0964c33d4b21d8c9fd5e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5622d8f3156a293e61d0964c33d4b21d8c9fd5e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5622d8f3156a293e61d0964c33d4b21d8c9fd5e0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8444984b27e944d8db5c60497fa63efa316861e2",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca",
        "patch": "@@ -341,6 +341,7 @@ void BitcoinGUI::createActions()\n     m_close_wallet_action->setStatusTip(tr(\"Close wallet\"));\n \n     m_create_wallet_action = new QAction(tr(\"Create Wallet...\"), this);\n+    m_create_wallet_action->setEnabled(false);\n     m_create_wallet_action->setStatusTip(tr(\"Create a new wallet\"));\n \n     showHelpMessageAction = new QAction(tr(\"&Command-line options\"), this);\n@@ -618,6 +619,7 @@ void BitcoinGUI::setWalletController(WalletController* wallet_controller)\n \n     m_wallet_controller = wallet_controller;\n \n+    m_create_wallet_action->setEnabled(true);\n     m_open_wallet_action->setEnabled(true);\n     m_open_wallet_action->setMenu(m_open_wallet_menu);\n "
      }
    ]
  },
  {
    "sha": "bb03765e2d554da9dad5b9b314844a2ecb5c62e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjAzNzY1ZTJkNTU0ZGE5ZGFkNWI5YjMxNDg0NGEyZWNiNWM2MmUy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-08T18:17:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-08T18:17:23Z"
      },
      "message": "Merge #17685: tests: Fix bug in the descriptor parsing fuzzing harness (descriptor_parse)\n\n6338c0203416a5f86e9422b6cd479da8af277f2f tests: Fix fuzzing harness for descriptor parsing (descriptor_parse) (practicalswift)\n\nPull request description:\n\n  Fix bug in the descriptor parsing fuzzing harness (`descriptor_parse`) by making sure `secp256k1_context_verify` is properly initialized (via `ECCVerifyHandle`).\n\n  Background:\n\n  When fuzzing `Parse(\u2026)` with `libFuzzer` I eventually reached the test case `combo(020000000000000000000000000000000000000000000000000000000000000000)`. That input triggers a call to `CPubKey::IsFullyValid()` which in turns requires an initialized `secp256k1_context_verify`.\n\n  The fuzzing harness did not fulfil that pre-condition prior to this commit (sorry, my fault!) :)\n\n  Before:\n\n  ```\n  $ mkdir descriptors/\n  $ echo -n 'combo(020000000000000000000000000000000000000000000000000000000000000000)' > descriptors/input\n  $ UBSAN_OPTIONS=\"print_stacktrace=1:halt_on_error=1\" src/test/fuzz/descriptor_parse -runs=1 descriptors/\n  \u2026\n  pubkey.cpp:210:38: runtime error: null pointer passed as argument 1, which is declared to never be null\n  secp256k1/include/secp256k1.h:305:3: note: nonnull attribute specified here\n      #0 0x561c032ccf25 in CPubKey::IsFullyValid() const src/pubkey.cpp:210:12\n      #1 0x561c022139c3 in (anonymous namespace)::ParsePubkeyInner(Span<char const> const&, bool, FlatSigningProvider&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) src/script/descriptor.cpp:674:24\n      #2 0x561c02207680 in (anonymous namespace)::ParsePubkey(Span<char const> const&, bool, FlatSigningProvider&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) src/script/descriptor.cpp:730:42\n      #3 0x561c0220080e in (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) src/script/descriptor.cpp:774:23\n      #4 0x561c021ffb07 in Parse(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, FlatSigningProvider&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool) src/script/descriptor.cpp:994:16\n      #5 0x561c0218d5d4 in test_one_input(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/test/fuzz/descriptor_parse.cpp:20:9\n  \u2026\n  $\n  ```\n\n  After:\n\n  ```\n  $ mkdir descriptors/\n  $ echo -n 'combo(020000000000000000000000000000000000000000000000000000000000000000)' > descriptors/input\n  $ UBSAN_OPTIONS=\"print_stacktrace=1:halt_on_error=1\" src/test/fuzz/descriptor_parse -runs=1 descriptors/\n  \u2026\n  Done 2 runs in 0 second(s)\n  $\n  ```\n\nACKs for top commit:\n  paymog:\n    ACK 6338c0203416a5f86e9422b6cd479da8af277f2f\n  MarcoFalke:\n    ACK 6338c0203416a5f86e9422b6cd479da8af277f2f \ud83d\udd4a\n\nTree-SHA512: bf24c404e1f64183761b057d2f210c3db85277f4415122977c315d7d6835acb5e897b5d64032615e9e44ad4a16dfe857e94481f6e4b57b6dfa8cb37adb2528a5",
      "tree": {
        "sha": "73efdde76e0988dc68a71787be4d0073697b6c61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73efdde76e0988dc68a71787be4d0073697b6c61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb03765e2d554da9dad5b9b314844a2ecb5c62e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhElQwAwU9ijR1Qa3lppDNC9NLcLDgFANy2UDYAGt6uFgO3GQqxdfzbkdAfaDJy\nVB7fSmzwQPMuaZLbbFXiNkMrM7Ul6V0bzENB1GtwnLIUsMPEQoRW6AdQIjU+L7Ii\nMJ2+KETymaE4AGU8HyhVHC0dNAavQwsZp1ZmYlHqxdzHnLlgP0Z796oil3iNs23A\nrxhX2WarpXTO3DeXUMumLsCLxkHNF52Q3X6bt73uWVmYdmWAqoAz1q35x/g7X177\nzbuUaeXAB516+++H6is0lAg9lK+KI7InEuT0/GcC7nIZ02VOHd326Oi8akVQuTTQ\nfiannXgm0FJG9Vcgktj9ByfqbSSThTuiwean1L566rIPrLAxPoro+lqmXVs8YH8E\n+Ruyo4BLP8L54KDg909ryluoA2nxhvil/jLu+flNklBe9BrymiVqzupCTJpCvBw+\njzVSHbt3Q1uI7xWH21/I/M3MXbbaeezOnVymU0xFivlUXlP0GiH25bJPtTx9A+sK\nvFCASykS\n=14U4\n-----END PGP SIGNATURE-----",
        "payload": "tree 73efdde76e0988dc68a71787be4d0073697b6c61\nparent 5622d8f3156a293e61d0964c33d4b21d8c9fd5e0\nparent 6338c0203416a5f86e9422b6cd479da8af277f2f\nauthor MarcoFalke <falke.marco@gmail.com> 1575829041 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575829043 -0500\n\nMerge #17685: tests: Fix bug in the descriptor parsing fuzzing harness (descriptor_parse)\n\n6338c0203416a5f86e9422b6cd479da8af277f2f tests: Fix fuzzing harness for descriptor parsing (descriptor_parse) (practicalswift)\n\nPull request description:\n\n  Fix bug in the descriptor parsing fuzzing harness (`descriptor_parse`) by making sure `secp256k1_context_verify` is properly initialized (via `ECCVerifyHandle`).\n\n  Background:\n\n  When fuzzing `Parse(\u2026)` with `libFuzzer` I eventually reached the test case `combo(020000000000000000000000000000000000000000000000000000000000000000)`. That input triggers a call to `CPubKey::IsFullyValid()` which in turns requires an initialized `secp256k1_context_verify`.\n\n  The fuzzing harness did not fulfil that pre-condition prior to this commit (sorry, my fault!) :)\n\n  Before:\n\n  ```\n  $ mkdir descriptors/\n  $ echo -n 'combo(020000000000000000000000000000000000000000000000000000000000000000)' > descriptors/input\n  $ UBSAN_OPTIONS=\"print_stacktrace=1:halt_on_error=1\" src/test/fuzz/descriptor_parse -runs=1 descriptors/\n  \u2026\n  pubkey.cpp:210:38: runtime error: null pointer passed as argument 1, which is declared to never be null\n  secp256k1/include/secp256k1.h:305:3: note: nonnull attribute specified here\n      #0 0x561c032ccf25 in CPubKey::IsFullyValid() const src/pubkey.cpp:210:12\n      #1 0x561c022139c3 in (anonymous namespace)::ParsePubkeyInner(Span<char const> const&, bool, FlatSigningProvider&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) src/script/descriptor.cpp:674:24\n      #2 0x561c02207680 in (anonymous namespace)::ParsePubkey(Span<char const> const&, bool, FlatSigningProvider&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) src/script/descriptor.cpp:730:42\n      #3 0x561c0220080e in (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) src/script/descriptor.cpp:774:23\n      #4 0x561c021ffb07 in Parse(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, FlatSigningProvider&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool) src/script/descriptor.cpp:994:16\n      #5 0x561c0218d5d4 in test_one_input(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/test/fuzz/descriptor_parse.cpp:20:9\n  \u2026\n  $\n  ```\n\n  After:\n\n  ```\n  $ mkdir descriptors/\n  $ echo -n 'combo(020000000000000000000000000000000000000000000000000000000000000000)' > descriptors/input\n  $ UBSAN_OPTIONS=\"print_stacktrace=1:halt_on_error=1\" src/test/fuzz/descriptor_parse -runs=1 descriptors/\n  \u2026\n  Done 2 runs in 0 second(s)\n  $\n  ```\n\nACKs for top commit:\n  paymog:\n    ACK 6338c0203416a5f86e9422b6cd479da8af277f2f\n  MarcoFalke:\n    ACK 6338c0203416a5f86e9422b6cd479da8af277f2f \ud83d\udd4a\n\nTree-SHA512: bf24c404e1f64183761b057d2f210c3db85277f4415122977c315d7d6835acb5e897b5d64032615e9e44ad4a16dfe857e94481f6e4b57b6dfa8cb37adb2528a5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb03765e2d554da9dad5b9b314844a2ecb5c62e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb03765e2d554da9dad5b9b314844a2ecb5c62e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb03765e2d554da9dad5b9b314844a2ecb5c62e2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5622d8f3156a293e61d0964c33d4b21d8c9fd5e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5622d8f3156a293e61d0964c33d4b21d8c9fd5e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5622d8f3156a293e61d0964c33d4b21d8c9fd5e0"
      },
      {
        "sha": "6338c0203416a5f86e9422b6cd479da8af277f2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6338c0203416a5f86e9422b6cd479da8af277f2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6338c0203416a5f86e9422b6cd479da8af277f2f"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "47d5038c26c166c20a1df5e5e0be3fcfdd1e0073",
        "filename": "src/test/fuzz/descriptor_parse.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb03765e2d554da9dad5b9b314844a2ecb5c62e2/src/test/fuzz/descriptor_parse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb03765e2d554da9dad5b9b314844a2ecb5c62e2/src/test/fuzz/descriptor_parse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/descriptor_parse.cpp?ref=bb03765e2d554da9dad5b9b314844a2ecb5c62e2",
        "patch": "@@ -3,11 +3,14 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n+#include <util/memory.h>\n \n void initialize()\n {\n+    static const auto verify_handle = MakeUnique<ECCVerifyHandle>();\n     SelectParams(CBaseChainParams::REGTEST);\n }\n "
      }
    ]
  },
  {
    "sha": "e97f5c18238835bc3a3aee2e9e65b287f1c8b938",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTdmNWMxODIzODgzNWJjM2EzYWVlMmU5ZTY1YjI4N2YxYzhiOTM4",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-08T21:49:13Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-08T22:55:11Z"
      },
      "message": "depends: don't configure xcb_proto\n\nxcb_proto's configure doesn't understand --disable-shared or\n--with-pic. All the package does it put a stack of xml files into\na directory to be used by libxcb.",
      "tree": {
        "sha": "1fc6939938b36beb65520eaf72d5e95cf0997548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fc6939938b36beb65520eaf72d5e95cf0997548"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e97f5c18238835bc3a3aee2e9e65b287f1c8b938",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3tf1gACgkQLuufXMCV\nJsFvLw/+IO2+hs0WU3zVCKFR3aq9wsyn9V2anUdUj/xJAPb8na+ND64N8P/oFGPJ\nzcGxQassk8gt53LAPzf2qtkVROzEivUZZDg5mEw9C/34Ny3j8ny7/0gTcEEYR727\nnXXc7GXmO+DQ/rBJuZDlXseS0/kcHG8DNUVzMSK0aKbpubJy79D3PeIsNUILyiFe\nnnlonLeJAi826NjBiR+Snh6wOfYl/uLWzR9hwbfm2/G+HnXibXjEzVUcoio3+ruq\nGSsQcoFqUykW3XBtcu+8UMc74hAgIjdlz5W+XZmJvoEw97z2KgHjNpuSKDLPwuje\nrmIAENXyvyfrQIHnT9TM5rVscsrsl1JEfc0hM8wsmTDbWd6y9cAtDQUP2ohMCC4M\nUkZnpHE45cXuyMU1f+ZSUvZwYnmgR2fB/x8xXQPcsnhiBF+rKrSrYNlahDAiviUQ\npTCPy60+UpasiZfWF9gfYGkTCnqJN4ImfcGJQ4PTEhve2++6Br4SEQFqeXJ9nCWz\nRjQmmAbkv/hObKgSf4PVGeMEy8qNhTrFghWMhym7wcnDZGs6YVvZFFJ2bzD1NVPs\nTjgzUdYD/iM5wBTT9Zf7GzbGNZiVkw6OZldcpy/EXs5cwlC/29gletSM26PrpN0M\ng1qcF4QN/K8VpD20o/cHKMIDbHafoy6f3uscrOSj2zBsTshUWqQ=\n=KYEl\n-----END PGP SIGNATURE-----",
        "payload": "tree 1fc6939938b36beb65520eaf72d5e95cf0997548\nparent bb03765e2d554da9dad5b9b314844a2ecb5c62e2\nauthor fanquake <fanquake@gmail.com> 1575841753 -0500\ncommitter fanquake <fanquake@gmail.com> 1575845711 -0500\n\ndepends: don't configure xcb_proto\n\nxcb_proto's configure doesn't understand --disable-shared or\n--with-pic. All the package does it put a stack of xml files into\na directory to be used by libxcb.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e97f5c18238835bc3a3aee2e9e65b287f1c8b938",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e97f5c18238835bc3a3aee2e9e65b287f1c8b938",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e97f5c18238835bc3a3aee2e9e65b287f1c8b938/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb03765e2d554da9dad5b9b314844a2ecb5c62e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb03765e2d554da9dad5b9b314844a2ecb5c62e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb03765e2d554da9dad5b9b314844a2ecb5c62e2"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 0,
      "deletions": 5
    },
    "files": [
      {
        "sha": "01203a0718af93deff60d84fb337848e79ae661e",
        "filename": "depends/packages/xcb_proto.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e97f5c18238835bc3a3aee2e9e65b287f1c8b938/depends/packages/xcb_proto.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e97f5c18238835bc3a3aee2e9e65b287f1c8b938/depends/packages/xcb_proto.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/xcb_proto.mk?ref=e97f5c18238835bc3a3aee2e9e65b287f1c8b938",
        "patch": "@@ -4,11 +4,6 @@ $(package)_download_path=https://xcb.freedesktop.org/dist\n $(package)_file_name=xcb-proto-$($(package)_version).tar.bz2\n $(package)_sha256_hash=7ef40ddd855b750bc597d2a435da21e55e502a0fefa85b274f2c922800baaf05\n \n-define $(package)_set_vars\n-  $(package)_config_opts=--disable-shared --enable-option-checking\n-  $(package)_config_opts_linux=--with-pic\n-endef\n-\n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef"
      }
    ]
  },
  {
    "sha": "f736f6920b160c9e7d7072500ddd0459c5181f86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzM2ZjY5MjBiMTYwYzllN2Q3MDcyNTAwZGRkMDQ1OWM1MTgxZjg2",
    "commit": {
      "author": {
        "name": "nijynot",
        "email": "nijynot@gmail.com",
        "date": "2019-12-08T23:14:53Z"
      },
      "committer": {
        "name": "nijynot",
        "email": "nijynot@gmail.com",
        "date": "2019-12-08T23:14:53Z"
      },
      "message": "lcov: filter /usr/lib64 from coverage report",
      "tree": {
        "sha": "066d79c682b1f23efbad7d2914152626168d36bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/066d79c682b1f23efbad7d2914152626168d36bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f736f6920b160c9e7d7072500ddd0459c5181f86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f736f6920b160c9e7d7072500ddd0459c5181f86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f736f6920b160c9e7d7072500ddd0459c5181f86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f736f6920b160c9e7d7072500ddd0459c5181f86/comments",
    "author": {
      "login": "nijynot",
      "id": 16340977,
      "node_id": "MDQ6VXNlcjE2MzQwOTc3",
      "avatar_url": "https://avatars.githubusercontent.com/u/16340977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nijynot",
      "html_url": "https://github.com/nijynot",
      "followers_url": "https://api.github.com/users/nijynot/followers",
      "following_url": "https://api.github.com/users/nijynot/following{/other_user}",
      "gists_url": "https://api.github.com/users/nijynot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nijynot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nijynot/subscriptions",
      "organizations_url": "https://api.github.com/users/nijynot/orgs",
      "repos_url": "https://api.github.com/users/nijynot/repos",
      "events_url": "https://api.github.com/users/nijynot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nijynot/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "nijynot",
      "id": 16340977,
      "node_id": "MDQ6VXNlcjE2MzQwOTc3",
      "avatar_url": "https://avatars.githubusercontent.com/u/16340977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nijynot",
      "html_url": "https://github.com/nijynot",
      "followers_url": "https://api.github.com/users/nijynot/followers",
      "following_url": "https://api.github.com/users/nijynot/following{/other_user}",
      "gists_url": "https://api.github.com/users/nijynot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nijynot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nijynot/subscriptions",
      "organizations_url": "https://api.github.com/users/nijynot/orgs",
      "repos_url": "https://api.github.com/users/nijynot/repos",
      "events_url": "https://api.github.com/users/nijynot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nijynot/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5a705b46dd32f93857e916311e3b71cae8be6b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5a705b46dd32f93857e916311e3b71cae8be6b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5a705b46dd32f93857e916311e3b71cae8be6b7"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f121c33b242716339b4bf730b3458cc57268fdc4",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f736f6920b160c9e7d7072500ddd0459c5181f86/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f736f6920b160c9e7d7072500ddd0459c5181f86/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=f736f6920b160c9e7d7072500ddd0459c5181f86",
        "patch": "@@ -192,6 +192,7 @@ if USE_LCOV\n LCOV_FILTER_PATTERN = \\\n \t-p \"/usr/include/\" \\\n \t-p \"/usr/lib/\" \\\n+\t-p \"/usr/lib64/\" \\\n \t-p \"src/leveldb/\" \\\n \t-p \"src/bench/\" \\\n \t-p \"src/univalue\" \\"
      }
    ]
  },
  {
    "sha": "0ccad08fb25e00fcf41ffbad6ce2501e363a0033",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2NhZDA4ZmIyNWUwMGZjZjQxZmZiYWQ2Y2UyNTAxZTM2M2EwMDMz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-12-09T02:34:02Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-12-09T02:34:02Z"
      },
      "message": "Make env data logging optional",
      "tree": {
        "sha": "ab09438581b1b9499a163c6129491b0ba1991450",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab09438581b1b9499a163c6129491b0ba1991450"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ccad08fb25e00fcf41ffbad6ce2501e363a0033",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ccad08fb25e00fcf41ffbad6ce2501e363a0033",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ccad08fb25e00fcf41ffbad6ce2501e363a0033",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ccad08fb25e00fcf41ffbad6ce2501e363a0033/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb03765e2d554da9dad5b9b314844a2ecb5c62e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb03765e2d554da9dad5b9b314844a2ecb5c62e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb03765e2d554da9dad5b9b314844a2ecb5c62e2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "99927fc5d2774bcd062233a512846b2cd86be491",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ccad08fb25e00fcf41ffbad6ce2501e363a0033/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ccad08fb25e00fcf41ffbad6ce2501e363a0033/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=0ccad08fb25e00fcf41ffbad6ce2501e363a0033",
        "patch": "@@ -517,7 +517,7 @@ static void SeedPeriodic(CSHA512& hasher, RNGState& rng) noexcept\n     // Dynamic environment data (performance monitoring, ...)\n     auto old_size = hasher.Size();\n     RandAddDynamicEnv(hasher);\n-    LogPrintf(\"Feeding %i bytes of dynamic environment data into RNG\\n\", hasher.Size() - old_size);\n+    LogPrint(BCLog::RAND, \"Feeding %i bytes of dynamic environment data into RNG\\n\", hasher.Size() - old_size);\n \n     // Strengthen for 10 ms\n     SeedStrengthen(hasher, rng, 10000);\n@@ -537,7 +537,7 @@ static void SeedStartup(CSHA512& hasher, RNGState& rng) noexcept\n \n     // Static environment data\n     RandAddStaticEnv(hasher);\n-    LogPrintf(\"Feeding %i bytes of environment data into RNG\\n\", hasher.Size() - old_size);\n+    LogPrint(BCLog::RAND, \"Feeding %i bytes of environment data into RNG\\n\", hasher.Size() - old_size);\n \n     // Strengthen for 100 ms\n     SeedStrengthen(hasher, rng, 100000);"
      }
    ]
  },
  {
    "sha": "b6fb899ead9b9374a2f802666a3056012a793fa4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmZiODk5ZWFkOWI5Mzc0YTJmODAyNjY2YTMwNTYwMTJhNzkzZmE0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-09T09:02:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-09T09:02:42Z"
      },
      "message": "Merge #17699: Make env data logging optional\n\n0ccad08fb25e00fcf41ffbad6ce2501e363a0033 Make env data logging optional (Pieter Wuille)\n\nPull request description:\n\n  The dynamic env feeding logging is a bit chatty, make it dependent on `-debug=rand`.\n\nACKs for top commit:\n  practicalswift:\n    ACK 0ccad08fb25e00fcf41ffbad6ce2501e363a0033 -- less noise is good and diff looks correct\n  laanwj:\n    ACK 0ccad08fb25e00fcf41ffbad6ce2501e363a0033\n  promag:\n    ACK 0ccad08fb25e00fcf41ffbad6ce2501e363a0033.\n  jonatack:\n    ACK 0ccad08fb25e00fcf41ffbad6ce2501e363a0033, was considering to propose this.\n\nTree-SHA512: 01d7f9ac134852c2c0d5f66f96ee4395f0ff7a60573e648f3d01054073624042148c8e8b9f69a29c9a41c296e1f4be77c2015a642ee4113a2fd8779b62aa137d",
      "tree": {
        "sha": "ab09438581b1b9499a163c6129491b0ba1991450",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab09438581b1b9499a163c6129491b0ba1991450"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6fb899ead9b9374a2f802666a3056012a793fa4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3uDbIACgkQHkrtYphs\n0l1J/Qf/agA+ug5An7VZtaA1VRI8NLFu6mNu2fWzslfVQUW67Wl+1bdqJUaC7OfM\nC9THDqwfzDQM3RxcOA2af8bO7k5HwSiR6nyJCrDl7RlKPHa/i0lgI0eHL5pnbtoz\nYu7aCpejZ+/nc6SJVtTdZMrUJMvMTrc356VKOFcUL+E1aru3/iOG1iv5/k9YsZau\nc36/ytjvXM7eYi/eZEJjk1Kxj3wMmjkuijfU0J2kyRTUOjDo2oHhdeHlSOy69dHB\nzq5qnCQMb1XXlW27CtRzklM4Jy8P5XxDbGHl0WwVWZTSG5/VQSeNl37+tmYtQ07U\nTu1GcIDHu8SNAu9i3NlxonDemRz8Kw==\n=RaDq\n-----END PGP SIGNATURE-----",
        "payload": "tree ab09438581b1b9499a163c6129491b0ba1991450\nparent bb03765e2d554da9dad5b9b314844a2ecb5c62e2\nparent 0ccad08fb25e00fcf41ffbad6ce2501e363a0033\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1575882142 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1575882162 +0100\n\nMerge #17699: Make env data logging optional\n\n0ccad08fb25e00fcf41ffbad6ce2501e363a0033 Make env data logging optional (Pieter Wuille)\n\nPull request description:\n\n  The dynamic env feeding logging is a bit chatty, make it dependent on `-debug=rand`.\n\nACKs for top commit:\n  practicalswift:\n    ACK 0ccad08fb25e00fcf41ffbad6ce2501e363a0033 -- less noise is good and diff looks correct\n  laanwj:\n    ACK 0ccad08fb25e00fcf41ffbad6ce2501e363a0033\n  promag:\n    ACK 0ccad08fb25e00fcf41ffbad6ce2501e363a0033.\n  jonatack:\n    ACK 0ccad08fb25e00fcf41ffbad6ce2501e363a0033, was considering to propose this.\n\nTree-SHA512: 01d7f9ac134852c2c0d5f66f96ee4395f0ff7a60573e648f3d01054073624042148c8e8b9f69a29c9a41c296e1f4be77c2015a642ee4113a2fd8779b62aa137d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6fb899ead9b9374a2f802666a3056012a793fa4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6fb899ead9b9374a2f802666a3056012a793fa4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6fb899ead9b9374a2f802666a3056012a793fa4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb03765e2d554da9dad5b9b314844a2ecb5c62e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb03765e2d554da9dad5b9b314844a2ecb5c62e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb03765e2d554da9dad5b9b314844a2ecb5c62e2"
      },
      {
        "sha": "0ccad08fb25e00fcf41ffbad6ce2501e363a0033",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ccad08fb25e00fcf41ffbad6ce2501e363a0033",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ccad08fb25e00fcf41ffbad6ce2501e363a0033"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "99927fc5d2774bcd062233a512846b2cd86be491",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fb899ead9b9374a2f802666a3056012a793fa4/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fb899ead9b9374a2f802666a3056012a793fa4/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=b6fb899ead9b9374a2f802666a3056012a793fa4",
        "patch": "@@ -517,7 +517,7 @@ static void SeedPeriodic(CSHA512& hasher, RNGState& rng) noexcept\n     // Dynamic environment data (performance monitoring, ...)\n     auto old_size = hasher.Size();\n     RandAddDynamicEnv(hasher);\n-    LogPrintf(\"Feeding %i bytes of dynamic environment data into RNG\\n\", hasher.Size() - old_size);\n+    LogPrint(BCLog::RAND, \"Feeding %i bytes of dynamic environment data into RNG\\n\", hasher.Size() - old_size);\n \n     // Strengthen for 10 ms\n     SeedStrengthen(hasher, rng, 10000);\n@@ -537,7 +537,7 @@ static void SeedStartup(CSHA512& hasher, RNGState& rng) noexcept\n \n     // Static environment data\n     RandAddStaticEnv(hasher);\n-    LogPrintf(\"Feeding %i bytes of environment data into RNG\\n\", hasher.Size() - old_size);\n+    LogPrint(BCLog::RAND, \"Feeding %i bytes of environment data into RNG\\n\", hasher.Size() - old_size);\n \n     // Strengthen for 100 ms\n     SeedStrengthen(hasher, rng, 100000);"
      }
    ]
  },
  {
    "sha": "91559da683dbf5de101b7722cdac341963d2433a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTU1OWRhNjgzZGJmNWRlMTAxYjc3MjJjZGFjMzQxOTYzZDI0MzNh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-09T09:05:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-09T09:06:32Z"
      },
      "message": "Merge #17676: depends: don't use OpenGL in Qt on macOS\n\n2359a4790d93ffd17b8afc2fea3775dd858ef50d depends: don't use OpenGL in Qt on macOS (fanquake)\nba0cad2702e01860d3539f170343d8d9f9c5b75a build: pass -dead_strip_dylibs to ld on macOS (fanquake)\n\nPull request description:\n\n  Based on #17663. OpenGL on macOS was also deprecated in 10.14.\n\n  This also removes the `/System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL` dylib from `bitcoin-qt`.\n\nACKs for top commit:\n  laanwj:\n    ACK 2359a4790d93ffd17b8afc2fea3775dd858ef50d\n  jonasschnelli:\n    utACK 2359a4790d93ffd17b8afc2fea3775dd858ef50d\n  hebasto:\n    ACK 2359a4790d93ffd17b8afc2fea3775dd858ef50d\n\nTree-SHA512: 39b0151832c829f6ebdc4910eb28ebbeba64539cd04eba6ce3ec75fc0f231569956ca51a1e0bffc76dd27e85643c65a155320b9b450c49e9841e12b108406d41",
      "tree": {
        "sha": "a2e3341a16363d6609c33b23b31fd7934a996edb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2e3341a16363d6609c33b23b31fd7934a996edb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91559da683dbf5de101b7722cdac341963d2433a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3uDpgACgkQHkrtYphs\n0l3yuQf8DSrJa/3pTQ5q3se0Lk/AQhPkFEhoX1ze+jDQ9BtKrHY0gpBkp9BFE3ud\nlmAF/CWMbydpUAvFUnjhaj+a4HFHCDuAezyQuauKUlzdFJbYhH7ZdUsvFFdeMfDP\nOJwHKLcQS7dkhU5Ui+m3IO/lP0OnMNEoFAGy/Oohd0pJS/BqXy+qT4H0HZh9G57q\nCcmienH3gI82WYdDLNH1TJT0y9M1mZq3kDsQy+sZFW+rXR833JZTBkwx44uAbpJf\nKYQgplxOhq97X5fUoviyTnGT13W8BUd+/yVZHch0pAYn8EHQVLKdQpu5oQvx1E+f\ne6gQoD8VIvZ30a1cm0J5GpLqsmCXjA==\n=aSyt\n-----END PGP SIGNATURE-----",
        "payload": "tree a2e3341a16363d6609c33b23b31fd7934a996edb\nparent b6fb899ead9b9374a2f802666a3056012a793fa4\nparent 2359a4790d93ffd17b8afc2fea3775dd858ef50d\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1575882320 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1575882392 +0100\n\nMerge #17676: depends: don't use OpenGL in Qt on macOS\n\n2359a4790d93ffd17b8afc2fea3775dd858ef50d depends: don't use OpenGL in Qt on macOS (fanquake)\nba0cad2702e01860d3539f170343d8d9f9c5b75a build: pass -dead_strip_dylibs to ld on macOS (fanquake)\n\nPull request description:\n\n  Based on #17663. OpenGL on macOS was also deprecated in 10.14.\n\n  This also removes the `/System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL` dylib from `bitcoin-qt`.\n\nACKs for top commit:\n  laanwj:\n    ACK 2359a4790d93ffd17b8afc2fea3775dd858ef50d\n  jonasschnelli:\n    utACK 2359a4790d93ffd17b8afc2fea3775dd858ef50d\n  hebasto:\n    ACK 2359a4790d93ffd17b8afc2fea3775dd858ef50d\n\nTree-SHA512: 39b0151832c829f6ebdc4910eb28ebbeba64539cd04eba6ce3ec75fc0f231569956ca51a1e0bffc76dd27e85643c65a155320b9b450c49e9841e12b108406d41\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91559da683dbf5de101b7722cdac341963d2433a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91559da683dbf5de101b7722cdac341963d2433a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91559da683dbf5de101b7722cdac341963d2433a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6fb899ead9b9374a2f802666a3056012a793fa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6fb899ead9b9374a2f802666a3056012a793fa4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6fb899ead9b9374a2f802666a3056012a793fa4"
      },
      {
        "sha": "2359a4790d93ffd17b8afc2fea3775dd858ef50d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2359a4790d93ffd17b8afc2fea3775dd858ef50d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2359a4790d93ffd17b8afc2fea3775dd858ef50d"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f1d234ccf6dd8ebe626770da448f4f16e119bc01",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91559da683dbf5de101b7722cdac341963d2433a/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91559da683dbf5de101b7722cdac341963d2433a/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=91559da683dbf5de101b7722cdac341963d2433a",
        "patch": "@@ -105,6 +105,7 @@ $(package)_config_opts += -no-feature-wizard\n $(package)_config_opts += -no-feature-xml\n \n $(package)_config_opts_darwin = -no-dbus\n+$(package)_config_opts_darwin += -no-opengl\n \n ifneq ($(build_os),darwin)\n $(package)_config_opts_darwin += -xplatform macx-clang-linux"
      }
    ]
  },
  {
    "sha": "48a5c92f9ef6634375a3f52812cf3d511c37699d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGE1YzkyZjllZjY2MzQzNzVhM2Y1MjgxMmNmM2Q1MTFjMzc2OTlk",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2019-12-09T09:57:39Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2019-12-09T09:57:39Z"
      },
      "message": "ui: disable 3rd-party tx-urls when wallet disabled",
      "tree": {
        "sha": "ee18ab75d890b37d00557aa559f7d3ff7cb0aa17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee18ab75d890b37d00557aa559f7d3ff7cb0aa17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48a5c92f9ef6634375a3f52812cf3d511c37699d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl3uGpMACgkQJiaFvHjt\nEftUsAf/WpcfT7IL5OjpUDCApAzohMEG16OYWolMvpDK0PIJJTY3HCahGRvztwnJ\nGaHVHdKv5lbSzy1yT1yBJerBLlIBLuNGqbG1kwYFXNo7qbHZEW0PlT1WTG4UlWTz\nSa0qcZVJlKol8tyWOnLR/r4naof8flzKDbVAyzbbQlnQaFTqZHz+7K+7+rKmu43A\n9MAVxEW2LD3ge1FX+oJlrqx923wTOqb0dTYUhsqdK/GjU8u/AuKcCgIhvqJqE+Eu\n/Fzect+jzHgl8ZmKmrf7tNrDtdluK/ETbtjq7xphnw+iur5a+OQ86u8cUXqm66OW\nu+c/nuG/x3TRRqYz/X28cMVGC3ocLg==\n=ug+k\n-----END PGP SIGNATURE-----",
        "payload": "tree ee18ab75d890b37d00557aa559f7d3ff7cb0aa17\nparent cb11324a63ef10475bfc4d8e45148d5ae6f3e71e\nauthor Harris <brakmic@gmail.com> 1575885459 +0100\ncommitter Harris <brakmic@gmail.com> 1575885459 +0100\n\nui: disable 3rd-party tx-urls when wallet disabled\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48a5c92f9ef6634375a3f52812cf3d511c37699d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48a5c92f9ef6634375a3f52812cf3d511c37699d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48a5c92f9ef6634375a3f52812cf3d511c37699d/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0f5ba08a5b45ee16091483368850d09015d55b20",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48a5c92f9ef6634375a3f52812cf3d511c37699d/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48a5c92f9ef6634375a3f52812cf3d511c37699d/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=48a5c92f9ef6634375a3f52812cf3d511c37699d",
        "patch": "@@ -77,9 +77,11 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     ui->verticalLayout_Main->removeItem(ui->horizontalSpacer_0_Main);\n #endif\n \n-    /* remove Wallet tab in case of -disablewallet */\n+    /* remove Wallet tab and 3rd party-URL textbox in case of -disablewallet */\n     if (!enableWallet) {\n         ui->tabWidget->removeTab(ui->tabWidget->indexOf(ui->tabWallet));\n+        ui->thirdPartyTxUrlsLabel->setVisible(false);\n+        ui->thirdPartyTxUrls->setVisible(false);\n     }\n \n     /* Display elements init */"
      }
    ]
  },
  {
    "sha": "67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2N2YzNmUwYjJjZTBmOTliOTA1NzhlN2UxZGQ5ZTA2MjQwMjZiY2Zh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-09T10:07:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-09T10:12:20Z"
      },
      "message": "gui: Move static placeholder texts to forms\n\nThere was an issue around the time of Qt 4.6 when placeholder text was\nintroduced, that caused a compile failure when it was specified in the\nform.\n\nAs a workaround the placeholder texts were moved to the code.\n\nQt 4 hasn't been relevant to us for ages. So move all (non-parametrized)\nplaceholder texts to the form files instead.\n\nIt's better to keep this kind of text content together. Makes sure\ntranslate/no-translate status is kept as it is.",
      "tree": {
        "sha": "bf0d06b2a73802965d643d476950776f8b962f92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf0d06b2a73802965d643d476950776f8b962f92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91559da683dbf5de101b7722cdac341963d2433a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91559da683dbf5de101b7722cdac341963d2433a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91559da683dbf5de101b7722cdac341963d2433a"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 14,
      "deletions": 7
    },
    "files": [
      {
        "sha": "1b7291ab9dabf87e93b7fef0090bc785e718bd96",
        "filename": "src/qt/forms/openuridialog.ui",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/forms/openuridialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/forms/openuridialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/openuridialog.ui?ref=67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa",
        "patch": "@@ -24,7 +24,11 @@\n       </widget>\n      </item>\n      <item>\n-      <widget class=\"QValidatedLineEdit\" name=\"uriEdit\"/>\n+      <widget class=\"QValidatedLineEdit\" name=\"uriEdit\">\n+       <property name=\"placeholderText\">\n+        <string notr=\"true\">bitcoin:</string>\n+       </property>\n+      </widget>\n      </item>\n     </layout>\n    </item>"
      },
      {
        "sha": "fea759dee08d0110fb7a64df1a827e54e47a503c",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa",
        "patch": "@@ -685,6 +685,9 @@\n            <property name=\"toolTip\">\n             <string>Third party URLs (e.g. a block explorer) that appear in the transactions tab as context menu items. %s in the URL is replaced by transaction hash. Multiple URLs are separated by vertical bar |.</string>\n            </property>\n+           <property name=\"placeholderText\">\n+            <string notr=\"true\">https://example.com/tx/%s</string>\n+           </property>\n           </widget>\n          </item>\n         </layout>"
      },
      {
        "sha": "455faf8afd321505e74ee3f59d6332dfe2b2cc32",
        "filename": "src/qt/forms/sendcoinsentry.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/forms/sendcoinsentry.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/forms/sendcoinsentry.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsentry.ui?ref=67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa",
        "patch": "@@ -144,6 +144,9 @@\n       <property name=\"toolTip\">\n        <string>Enter a label for this address to add it to the list of used addresses</string>\n       </property>\n+      <property name=\"placeholderText\">\n+       <string>Enter a label for this address to add it to your address book</string>\n+      </property>\n      </widget>\n     </item>\n     <item row=\"2\" column=\"0\">"
      },
      {
        "sha": "f42d19093b8be35e249112b4f9b2d8f8282d7d03",
        "filename": "src/qt/forms/signverifymessagedialog.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/forms/signverifymessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/forms/signverifymessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/signverifymessagedialog.ui?ref=67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa",
        "patch": "@@ -121,6 +121,9 @@\n          </property>\n          <item>\n           <widget class=\"QLineEdit\" name=\"signatureOut_SM\">\n+           <property name=\"placeholderText\">\n+            <string>Click \"Sign Message\" to generate signature</string>\n+           </property>\n            <property name=\"font\">\n             <font>\n              <italic>true</italic>"
      },
      {
        "sha": "9dc64bb23a482ce701e1f35844734e5c5814a002",
        "filename": "src/qt/openuridialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/openuridialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/openuridialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.cpp?ref=67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa",
        "patch": "@@ -15,7 +15,6 @@ OpenURIDialog::OpenURIDialog(QWidget *parent) :\n     ui(new Ui::OpenURIDialog)\n {\n     ui->setupUi(this);\n-    ui->uriEdit->setPlaceholderText(\"bitcoin:\");\n }\n \n OpenURIDialog::~OpenURIDialog()"
      },
      {
        "sha": "c61d73d3a8875216d4287add18a956deeff238f8",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa",
        "patch": "@@ -108,8 +108,6 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n             ui->lang->addItem(locale.nativeLanguageName() + QString(\" (\") + langStr + QString(\")\"), QVariant(langStr));\n         }\n     }\n-    ui->thirdPartyTxUrls->setPlaceholderText(\"https://example.com/tx/%s\");\n-\n     ui->unit->setModel(new BitcoinUnits(this));\n \n     /* Widget-to-option mapper */"
      },
      {
        "sha": "610dfbb85a8ed278623985d0722a689c70836bd8",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa",
        "patch": "@@ -37,7 +37,6 @@ SendCoinsEntry::SendCoinsEntry(const PlatformStyle *_platformStyle, QWidget *par\n \n     if (platformStyle->getUseExtraSpacing())\n         ui->payToLayout->setSpacing(4);\n-    ui->addAsLabel->setPlaceholderText(tr(\"Enter a label for this address to add it to your address book\"));\n \n     // normal bitcoin address field\n     GUIUtil::setupAddressWidget(ui->payTo, this);"
      },
      {
        "sha": "81e9d33a60d2fc9b400a4152b7cd8c7431ed0dd9",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa",
        "patch": "@@ -35,8 +35,6 @@ SignVerifyMessageDialog::SignVerifyMessageDialog(const PlatformStyle *_platformS\n     ui->verifyMessageButton_VM->setIcon(platformStyle->SingleColorIcon(\":/icons/transaction_0\"));\n     ui->clearButton_VM->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n \n-    ui->signatureOut_SM->setPlaceholderText(tr(\"Click \\\"Sign Message\\\" to generate signature\"));\n-\n     GUIUtil::setupAddressWidget(ui->addressIn_SM, this);\n     GUIUtil::setupAddressWidget(ui->addressIn_VM, this);\n "
      }
    ]
  },
  {
    "sha": "a652dc5521e2caf5734ffb797c7f2fc80685fef1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjUyZGM1NTIxZTJjYWY1NzM0ZmZiNzk3YzdmMmZjODA2ODVmZWYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-09T11:28:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-09T11:28:55Z"
      },
      "message": "qt: Normalize placeholder to avoid using \"address book\" in sendcoinsentry",
      "tree": {
        "sha": "868e710663adb450c2c2fe7af3bc3dc7354282f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/868e710663adb450c2c2fe7af3bc3dc7354282f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a652dc5521e2caf5734ffb797c7f2fc80685fef1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a652dc5521e2caf5734ffb797c7f2fc80685fef1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a652dc5521e2caf5734ffb797c7f2fc80685fef1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a652dc5521e2caf5734ffb797c7f2fc80685fef1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "934363af1f1c1ab2c6ac829f416c2d16a8bae69b",
        "filename": "src/qt/forms/sendcoinsentry.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a652dc5521e2caf5734ffb797c7f2fc80685fef1/src/qt/forms/sendcoinsentry.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a652dc5521e2caf5734ffb797c7f2fc80685fef1/src/qt/forms/sendcoinsentry.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsentry.ui?ref=a652dc5521e2caf5734ffb797c7f2fc80685fef1",
        "patch": "@@ -145,7 +145,7 @@\n        <string>Enter a label for this address to add it to the list of used addresses</string>\n       </property>\n       <property name=\"placeholderText\">\n-       <string>Enter a label for this address to add it to your address book</string>\n+       <string>Enter a label for this address to add it to the list of used addresses</string>\n       </property>\n      </widget>\n     </item>"
      }
    ]
  },
  {
    "sha": "1ebf6402fc7cc7f918f276ee6fde369ba813beb2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWJmNjQwMmZjN2NjN2Y5MThmMjc2ZWU2ZmRlMzY5YmE4MTNiZWIy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T13:38:39Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T13:38:42Z"
      },
      "message": "Merge #17647: lcov: filter depends from coverage reports\n\nf736f6920b160c9e7d7072500ddd0459c5181f86 lcov: filter /usr/lib64 from coverage report (nijynot)\na5a705b46dd32f93857e916311e3b71cae8be6b7 lcov: filter depends from coverage report (nijynot)\n\nPull request description:\n\n  If you build the binaries with the `depends` folder and then generate coverage reports with `make cov`, `depends` will be included in the coverage reports. Coverage of the dependencies are not that interesting and should be filtered.\n\nACKs for top commit:\n  laanwj:\n    code review ACK f736f6920b160c9e7d7072500ddd0459c5181f86\n  MarcoFalke:\n    ACK f736f6920b160c9e7d7072500ddd0459c5181f86 \ud83d\udc07\n\nTree-SHA512: 57c3e09f32e71523afff6ddc4f92bc35ab7b783f26f7a7380ae7556222954111cccce4c6dbc99305c424818f91e15bf5fe3532a7dca1daaa8ad71315d1dd857c",
      "tree": {
        "sha": "eea987ae7e73d668f53c92ec0586344fb2ec5a13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eea987ae7e73d668f53c92ec0586344fb2ec5a13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ebf6402fc7cc7f918f276ee6fde369ba813beb2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhZFAv/TFECvY4Iz19KP/Ro5iS84P4C23lLOeiG3JMMDDzukgiYpkp6IJ2QblMe\nhJ1EK8TczxhDzGhkQqup2SjlbYq5DxddMNGISyNtSNRVurrKNXK/3NwCSjbiuYeZ\nyK9jYEufrGO9cPRN8hkzbgZQFHEy4htc9/Qkm0+n+kM4aee4SmVBrn003BRwEKBH\nF2AKkjc8FjkDoTI8RC6EjbI5aNZm56Mlz3TxGlmIoro1LDXjubpsaqT+Ve292TdM\ngy86JONDr7YP1EjVGkCAx782HcRvgLkLy0Vwr3GAFLl3QGqsz0tK4Aze2ygLo6uW\n0rEd2m/8aoKfX26t4jzmbPzDsTOD08ZtjxJFC2ap+8ZLGqxoB1hwJg1STVagHrrU\nznHxDvBrzGV4oQ4Qt/UN0vvmj2T237daw0RZ8ERs2tNF4u9IB4ec8OvejJ/dpvd1\nlDUFL2RdcaW/RydFx7rzZDGDmXEP73DUEWp9HZxeVilZC9cDelTlmyjt9WIQCqCy\n0A+ZtuL2\n=lNWO\n-----END PGP SIGNATURE-----",
        "payload": "tree eea987ae7e73d668f53c92ec0586344fb2ec5a13\nparent 91559da683dbf5de101b7722cdac341963d2433a\nparent f736f6920b160c9e7d7072500ddd0459c5181f86\nauthor MarcoFalke <falke.marco@gmail.com> 1575898719 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575898722 -0500\n\nMerge #17647: lcov: filter depends from coverage reports\n\nf736f6920b160c9e7d7072500ddd0459c5181f86 lcov: filter /usr/lib64 from coverage report (nijynot)\na5a705b46dd32f93857e916311e3b71cae8be6b7 lcov: filter depends from coverage report (nijynot)\n\nPull request description:\n\n  If you build the binaries with the `depends` folder and then generate coverage reports with `make cov`, `depends` will be included in the coverage reports. Coverage of the dependencies are not that interesting and should be filtered.\n\nACKs for top commit:\n  laanwj:\n    code review ACK f736f6920b160c9e7d7072500ddd0459c5181f86\n  MarcoFalke:\n    ACK f736f6920b160c9e7d7072500ddd0459c5181f86 \ud83d\udc07\n\nTree-SHA512: 57c3e09f32e71523afff6ddc4f92bc35ab7b783f26f7a7380ae7556222954111cccce4c6dbc99305c424818f91e15bf5fe3532a7dca1daaa8ad71315d1dd857c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ebf6402fc7cc7f918f276ee6fde369ba813beb2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ebf6402fc7cc7f918f276ee6fde369ba813beb2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ebf6402fc7cc7f918f276ee6fde369ba813beb2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91559da683dbf5de101b7722cdac341963d2433a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91559da683dbf5de101b7722cdac341963d2433a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91559da683dbf5de101b7722cdac341963d2433a"
      },
      {
        "sha": "f736f6920b160c9e7d7072500ddd0459c5181f86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f736f6920b160c9e7d7072500ddd0459c5181f86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f736f6920b160c9e7d7072500ddd0459c5181f86"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 11,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f121c33b242716339b4bf730b3458cc57268fdc4",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ebf6402fc7cc7f918f276ee6fde369ba813beb2/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ebf6402fc7cc7f918f276ee6fde369ba813beb2/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=1ebf6402fc7cc7f918f276ee6fde369ba813beb2",
        "patch": "@@ -99,7 +99,7 @@ $(OSX_APP)/Contents/PkgInfo:\n \n $(OSX_APP)/Contents/Resources/empty.lproj:\n \t$(MKDIR_P) $(@D)\n-\t@touch $@ \n+\t@touch $@\n \n $(OSX_APP)/Contents/Info.plist: $(OSX_PLIST)\n \t$(MKDIR_P) $(@D)\n@@ -189,7 +189,16 @@ $(BITCOIN_WALLET_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n if USE_LCOV\n-LCOV_FILTER_PATTERN=-p \"/usr/include/\" -p \"/usr/lib/\" -p \"src/leveldb/\" -p \"src/bench/\" -p \"src/univalue\" -p \"src/crypto/ctaes\" -p \"src/secp256k1\"\n+LCOV_FILTER_PATTERN = \\\n+\t-p \"/usr/include/\" \\\n+\t-p \"/usr/lib/\" \\\n+\t-p \"/usr/lib64/\" \\\n+\t-p \"src/leveldb/\" \\\n+\t-p \"src/bench/\" \\\n+\t-p \"src/univalue\" \\\n+\t-p \"src/crypto/ctaes\" \\\n+\t-p \"src/secp256k1\" \\\n+\t-p \"depends\"\n \n baseline.info:\n \t$(LCOV) -c -i -d $(abs_builddir)/src -o $@\n@@ -321,4 +330,3 @@ clean-local: clean-docs\n \trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ test/tmp/ cache/ $(OSX_APP)\n \trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache share/rpcauth/__pycache__\n \trm -rf osx_volname dist/ dpi36.background.tiff dpi72.background.tiff\n-"
      }
    ]
  },
  {
    "sha": "c8e65ade095b01977c5557e6cf3b0f2d4a6e91e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGU2NWFkZTA5NWIwMTk3N2M1NTU3ZTZjZjNiMGYyZDRhNmU5MWU0",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-09T14:21:59Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-09T14:35:33Z"
      },
      "message": "Merge #17695: gui: disable File->CreateWallet during startup\n\nd65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca gui: disable File->CreateWallet during startup (fanquake)\n\nPull request description:\n\n  Same as #16118. Early calls to Create Wallet will crash bitcoin-qt.\n\n  ```bash\n  lldb /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt -- --regtest -debug\n\n  Process 18143 launched: '/Users/michael/github/bitcoin/src/qt/bitcoin-qt' (x86_64)\n  2019-12-07 15:49:37.823867-0500 bitcoin-qt[18143:5696499] MessageTracer: Falling back to default whitelist\n  Process 18143 stopped\n  * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x18)\n      frame #0: 0x00000001000d2d9d bitcoin-qt`CreateWalletActivity::createWallet() + 381\n  bitcoin-qt`CreateWalletActivity::createWallet:\n  ->  0x1000d2d9d <+381>: movq   0x18(%rax), %r14\n      0x1000d2da1 <+385>: movq   %r15, -0xa8(%rbp)\n      0x1000d2da8 <+392>: leaq   -0xa0(%rbp), %r12\n      0x1000d2daf <+399>: leaq   -0x80(%rbp), %rsi\n  Target 0: (bitcoin-qt) stopped.\n  (lldb) bt\n  * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x18)\n    * frame #0: 0x00000001000d2d9d bitcoin-qt`CreateWalletActivity::createWallet() + 381\n      frame #1: 0x0000000100833e6f bitcoin-qt`QMetaObject::activate(QObject*, int, int, void**) + 1631\n      frame #2: 0x0000000100a1fc47 bitcoin-qt`QDialog::done(int) + 247\n      frame #3: 0x0000000100833ef5 bitcoin-qt`QMetaObject::activate(QObject*, int, int, void**) + 1765\n      frame #4: 0x00000001009e04c2 bitcoin-qt`QDialogButtonBoxPrivate::_q_handleButtonClicked() + 786\n  ```\n\nACKs for top commit:\n  jonasschnelli:\n    utACK d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca\n  promag:\n    ACK d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca.\n\nTree-SHA512: 12d7f9e8772508bffbb0163849d9eceec5b1c80068c5d377a4d0973c713dc5f8ad38be8f793fec843d7fb604f0e60a72398b0c95f0a8b775dab39d25b29ac046",
      "tree": {
        "sha": "8025aad9e9d147e44971e4406e858bf537af95a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8025aad9e9d147e44971e4406e858bf537af95a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8e65ade095b01977c5557e6cf3b0f2d4a6e91e4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3uW7UACgkQLuufXMCV\nJsGdZg//SMkwc+cs3PyHuGKJ9dnmWTU2C5RYLQJC8+2zXhPeF3IaBFtNVpyxFhHw\nOcSkRK62DbSZeUuocYoIjuS360Xyu5gTLwdoiITUkS52bY+TnBXKj1B2C6/f58Bm\nOgAnyD3VB5o1YdotSRwuM96aJbhXn5l9zLjfhXMAlROIL7G6Fl5qCQBL6vVVKaPg\nx87a5BvwVF9SgPlbCoAQHXL1mvVM40o03K0aYRIH7zfW+oNsLOgccyINHzbJATOI\nWScpBiDX/7hB3xlaB3ZUlV3EqsNUGTflysbhS+bUhkwnLTi0YFuRvP5jshI/wKrH\nAcKvLuMOnoSWNWsqynvTP7YxEAP9mrBpgKgvlAIkhhJAdZ2R9WynjhyULB3EEfVW\nZ47bmnQFYLEKangk+yLCgHXDDFt7UgA7QnoDgVZiiC0yZ+Q+x+kIdCmUoPhqjrUS\nHBYPTCO0AeTmB0mAFXIsIihv0ESrpQaJthQxG7Hfc545qDeYZ5+HV0cXfo5Nnz4L\n2bh6vEyhxISKEWU9m9CK2zbYornuYtUB8nAH1L44LCiK7dlT99zjo3SlYW+GyUut\n0RAHZKUVd2SnalOczoZgWf7JEFoc6JN1iymrWyWoMD3iJX6iS+ET1txac/P59I+P\nHFx0Uk5mPLn7HKHf5RVWEE/ArfrkPTbBaSqmF2hRpUePFY+VE9I=\n=iVX0\n-----END PGP SIGNATURE-----",
        "payload": "tree 8025aad9e9d147e44971e4406e858bf537af95a2\nparent 1ebf6402fc7cc7f918f276ee6fde369ba813beb2\nparent d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca\nauthor fanquake <fanquake@gmail.com> 1575901319 -0500\ncommitter fanquake <fanquake@gmail.com> 1575902133 -0500\n\nMerge #17695: gui: disable File->CreateWallet during startup\n\nd65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca gui: disable File->CreateWallet during startup (fanquake)\n\nPull request description:\n\n  Same as #16118. Early calls to Create Wallet will crash bitcoin-qt.\n\n  ```bash\n  lldb /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt -- --regtest -debug\n\n  Process 18143 launched: '/Users/michael/github/bitcoin/src/qt/bitcoin-qt' (x86_64)\n  2019-12-07 15:49:37.823867-0500 bitcoin-qt[18143:5696499] MessageTracer: Falling back to default whitelist\n  Process 18143 stopped\n  * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x18)\n      frame #0: 0x00000001000d2d9d bitcoin-qt`CreateWalletActivity::createWallet() + 381\n  bitcoin-qt`CreateWalletActivity::createWallet:\n  ->  0x1000d2d9d <+381>: movq   0x18(%rax), %r14\n      0x1000d2da1 <+385>: movq   %r15, -0xa8(%rbp)\n      0x1000d2da8 <+392>: leaq   -0xa0(%rbp), %r12\n      0x1000d2daf <+399>: leaq   -0x80(%rbp), %rsi\n  Target 0: (bitcoin-qt) stopped.\n  (lldb) bt\n  * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x18)\n    * frame #0: 0x00000001000d2d9d bitcoin-qt`CreateWalletActivity::createWallet() + 381\n      frame #1: 0x0000000100833e6f bitcoin-qt`QMetaObject::activate(QObject*, int, int, void**) + 1631\n      frame #2: 0x0000000100a1fc47 bitcoin-qt`QDialog::done(int) + 247\n      frame #3: 0x0000000100833ef5 bitcoin-qt`QMetaObject::activate(QObject*, int, int, void**) + 1765\n      frame #4: 0x00000001009e04c2 bitcoin-qt`QDialogButtonBoxPrivate::_q_handleButtonClicked() + 786\n  ```\n\nACKs for top commit:\n  jonasschnelli:\n    utACK d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca\n  promag:\n    ACK d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca.\n\nTree-SHA512: 12d7f9e8772508bffbb0163849d9eceec5b1c80068c5d377a4d0973c713dc5f8ad38be8f793fec843d7fb604f0e60a72398b0c95f0a8b775dab39d25b29ac046\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8e65ade095b01977c5557e6cf3b0f2d4a6e91e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8e65ade095b01977c5557e6cf3b0f2d4a6e91e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8e65ade095b01977c5557e6cf3b0f2d4a6e91e4/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ebf6402fc7cc7f918f276ee6fde369ba813beb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ebf6402fc7cc7f918f276ee6fde369ba813beb2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ebf6402fc7cc7f918f276ee6fde369ba813beb2"
      },
      {
        "sha": "d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d65fafc2f7d98ab2be0a0961e7a3ebe7850c1dca"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8444984b27e944d8db5c60497fa63efa316861e2",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8e65ade095b01977c5557e6cf3b0f2d4a6e91e4/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8e65ade095b01977c5557e6cf3b0f2d4a6e91e4/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=c8e65ade095b01977c5557e6cf3b0f2d4a6e91e4",
        "patch": "@@ -341,6 +341,7 @@ void BitcoinGUI::createActions()\n     m_close_wallet_action->setStatusTip(tr(\"Close wallet\"));\n \n     m_create_wallet_action = new QAction(tr(\"Create Wallet...\"), this);\n+    m_create_wallet_action->setEnabled(false);\n     m_create_wallet_action->setStatusTip(tr(\"Create a new wallet\"));\n \n     showHelpMessageAction = new QAction(tr(\"&Command-line options\"), this);\n@@ -618,6 +619,7 @@ void BitcoinGUI::setWalletController(WalletController* wallet_controller)\n \n     m_wallet_controller = wallet_controller;\n \n+    m_create_wallet_action->setEnabled(true);\n     m_open_wallet_action->setEnabled(true);\n     m_open_wallet_action->setMenu(m_open_wallet_menu);\n "
      }
    ]
  },
  {
    "sha": "05c23488c2ce6f415ced607dca7e74a27e0200b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWMyMzQ4OGMyY2U2ZjQxNWNlZDYwN2RjYTdlNzRhMjdlMDIwMGI1",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-09T14:44:26Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-09T14:55:09Z"
      },
      "message": "Merge #17694: ui: disable 3rd-party tx-urls when wallet disabled\n\n48a5c92f9ef6634375a3f52812cf3d511c37699d ui: disable 3rd-party tx-urls when wallet disabled (Harris)\n\nPull request description:\n\n  This PR closes #17683 by removing 3rd-party Url-Label and -TextBox from Display Options in wallet-disabled mode.\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 48a5c92f9ef6634375a3f52812cf3d511c37699d\n  fanquake:\n    ACK 48a5c92f9ef6634375a3f52812cf3d511c37699d - tested with and without wallet (compiled out and `-disablewallet`).\n\nTree-SHA512: 3cc89825409fc0a3eec501c4dab5ff1caaa4ce410746a4b6ab200222fff986f4483eab90cda53a98a144be6acf1b6ca8650ab18242c39446f3335b3a9a537066",
      "tree": {
        "sha": "db9d0489960d1b7a859a2a78e11e623e85683495",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db9d0489960d1b7a859a2a78e11e623e85683495"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05c23488c2ce6f415ced607dca7e74a27e0200b5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3uYE0ACgkQLuufXMCV\nJsEMJA//bHfffS+CXyEbzmmpnNCJ0uxcySoPKfpB01qzLTWCvg70sUMcwdcLl55M\nnfBLnFRFEXskyem9ZTzGTskUQ5VAoVPo1GFFwhgbgQXH0NYMl3BISfz4AoCij3p2\nXodEyE9kQD1gknK0Wt/Op/d7Jt53lGBU3tS4z9Jxcp+Wpa3BcFWT+LTcZtAAMCxI\nC7NJzVhbLJMtnQ2kB8P5xJT4pOoKBNHcNLMW115ln+w7AKIvT5fA2ckZAfB/L/A+\nXJXrA1b4NukvUftdMhV6+HpsY4Kk3xKT/8rSGglNN5nd55paBZLTjkBmdCCqQK/3\ntSy8yPjWFmR9lYWnyZeLbQ7cG0G+fZLa/SJjnTOws+R4PDK1aWByvYWlkBtyLbSS\n3JBLu9QADvDFEF/p4cemyFBeHo7d90QtKOMIBMegKxYaXR7RjIP4sBnHSYyHAHIX\n9PnnP3qBw43myUmayi7lC+hr+oJ43iuxp3LlOZJYBYDiz2Qq3ZJnseqgYdlj4bBz\nXcOMVd1/rmnQCD/iN0pv/u47ZMt8pDtQPWM/d7TqS1b2XbMRcJaUmbuC2MZY1ZVj\n7Xn2QGIFisNwfzbsb42utWhJqB8xIvEibOWvJtnMYWtOUVdl092jq38l0VL5XVMb\n9gAVK1ZPQ35qmwAwaVXJGb9itJ23sx19T0jW1c8aqCwEc0mYISE=\n=0ajx\n-----END PGP SIGNATURE-----",
        "payload": "tree db9d0489960d1b7a859a2a78e11e623e85683495\nparent c8e65ade095b01977c5557e6cf3b0f2d4a6e91e4\nparent 48a5c92f9ef6634375a3f52812cf3d511c37699d\nauthor fanquake <fanquake@gmail.com> 1575902666 -0500\ncommitter fanquake <fanquake@gmail.com> 1575903309 -0500\n\nMerge #17694: ui: disable 3rd-party tx-urls when wallet disabled\n\n48a5c92f9ef6634375a3f52812cf3d511c37699d ui: disable 3rd-party tx-urls when wallet disabled (Harris)\n\nPull request description:\n\n  This PR closes #17683 by removing 3rd-party Url-Label and -TextBox from Display Options in wallet-disabled mode.\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 48a5c92f9ef6634375a3f52812cf3d511c37699d\n  fanquake:\n    ACK 48a5c92f9ef6634375a3f52812cf3d511c37699d - tested with and without wallet (compiled out and `-disablewallet`).\n\nTree-SHA512: 3cc89825409fc0a3eec501c4dab5ff1caaa4ce410746a4b6ab200222fff986f4483eab90cda53a98a144be6acf1b6ca8650ab18242c39446f3335b3a9a537066\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05c23488c2ce6f415ced607dca7e74a27e0200b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05c23488c2ce6f415ced607dca7e74a27e0200b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05c23488c2ce6f415ced607dca7e74a27e0200b5/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8e65ade095b01977c5557e6cf3b0f2d4a6e91e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8e65ade095b01977c5557e6cf3b0f2d4a6e91e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8e65ade095b01977c5557e6cf3b0f2d4a6e91e4"
      },
      {
        "sha": "48a5c92f9ef6634375a3f52812cf3d511c37699d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48a5c92f9ef6634375a3f52812cf3d511c37699d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48a5c92f9ef6634375a3f52812cf3d511c37699d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0f5ba08a5b45ee16091483368850d09015d55b20",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05c23488c2ce6f415ced607dca7e74a27e0200b5/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05c23488c2ce6f415ced607dca7e74a27e0200b5/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=05c23488c2ce6f415ced607dca7e74a27e0200b5",
        "patch": "@@ -77,9 +77,11 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     ui->verticalLayout_Main->removeItem(ui->horizontalSpacer_0_Main);\n #endif\n \n-    /* remove Wallet tab in case of -disablewallet */\n+    /* remove Wallet tab and 3rd party-URL textbox in case of -disablewallet */\n     if (!enableWallet) {\n         ui->tabWidget->removeTab(ui->tabWidget->indexOf(ui->tabWallet));\n+        ui->thirdPartyTxUrlsLabel->setVisible(false);\n+        ui->thirdPartyTxUrls->setVisible(false);\n     }\n \n     /* Display elements init */"
      }
    ]
  },
  {
    "sha": "b0b15317370335b21a29193e9872cfdb3b88f46c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMGIxNTMxNzM3MDMzNWIyMWEyOTE5M2U5ODcyY2ZkYjNiODhmNDZj",
    "commit": {
      "author": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2019-12-09T15:06:00Z"
      },
      "committer": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2019-12-09T15:06:00Z"
      },
      "message": "Adds GitHub Action workflow which duplicates AppVeyor job.",
      "tree": {
        "sha": "9ea5b36673231dbda168028ddd28c4a8b37a417f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ea5b36673231dbda168028ddd28c4a8b37a417f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0b15317370335b21a29193e9872cfdb3b88f46c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEnTzIanL4SUNC6l/RCkG9w/T6/xwFAl3uYtgACgkQCkG9w/T6\n/xwIfQ//Y8ds5eLT+5qhb14UVO0DS0btqrOQf73gxlYh/LWgyGmonLpbgbs2tC16\n91TQU9hFH5fbb0aUsZukVo6gYkxqV5GP+iKg7IkJMvb08YjH2RxDZAlak19J+qbR\njF2C27QKQlBwOK8mw6kreJzaAvfPWAgPE5Bqge9zq8VwlR/M3acYzt22mD5IxBL+\nxCWwno+3CPzgdmpD2r/o4j7qd0K9JWkWJuxGPhXReqldv2oUqRGssbZjsyOULhO8\n5p3jS06CQi662DAlXhPfvcaOz7jvpuAc1fgS9kLJVqsP/JuMuwsEgBLKjwMo5cPo\nqqX+zfp1RzH37j2uy1lJwpj8UnBZyp8iW77h8QJUIEnhcZKjALy0kgojOG9Zan16\nDg1bi+rePIFRKnkePdvZHGdXaCOgaWHrtn+XjfIN4xMA/7AmriM2ZFQaqHKON3zd\nDjvczfRJ2XR+oJ6X3xS5MU6w8udVZnbMHj70wcQhEbBUJRN1wBEpmoRygRXGs8Vn\nXnX4IQbGcYoMFXAlnODuYaHt2nmfIorpZmOhwLKy7sBmmssqa4KLNX1UyY4Rp33W\nevKNUIgZ/R/Rxe0o/aJTdl6fv+6i3xdlpVPhTn2OVGrVMzGapgxLzvLwvs4Pe59F\nuIUYkjT+Ehp+buczp19q7BUbJHzquEaHot0GQS7r9m/OBIf7A0A=\n=Az6H\n-----END PGP SIGNATURE-----",
        "payload": "tree 9ea5b36673231dbda168028ddd28c4a8b37a417f\nparent bb03765e2d554da9dad5b9b314844a2ecb5c62e2\nauthor Aaron Clauson <aaron@sipsorcery.com> 1575903960 +0000\ncommitter Aaron Clauson <aaron@sipsorcery.com> 1575903960 +0000\n\nAdds GitHub Action workflow which duplicates AppVeyor job.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0b15317370335b21a29193e9872cfdb3b88f46c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0b15317370335b21a29193e9872cfdb3b88f46c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0b15317370335b21a29193e9872cfdb3b88f46c/comments",
    "author": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb03765e2d554da9dad5b9b314844a2ecb5c62e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb03765e2d554da9dad5b9b314844a2ecb5c62e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb03765e2d554da9dad5b9b314844a2ecb5c62e2"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 76,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f1d5efaa8d29bed7f76645a01b7726e0502bbcf8",
        "filename": ".github/workflows/ci.yml",
        "status": "added",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0b15317370335b21a29193e9872cfdb3b88f46c/.github/workflows/ci.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0b15317370335b21a29193e9872cfdb3b88f46c/.github/workflows/ci.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/workflows/ci.yml?ref=b0b15317370335b21a29193e9872cfdb3b88f46c",
        "patch": "@@ -0,0 +1,76 @@\n+name: bitcoin-core-ci\n+\n+on:\n+  push:\n+jobs:\n+  build:\n+    runs-on: windows-latest\n+    env:\n+        PYTHONUTF8: 1\n+        QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/v1.4/Qt5.9.8_x64_static_vs2019.zip'\n+        QT_DOWNLOAD_HASH: 'f285cbb02bec3b3f3cc2621e3fa7d5edf0d6a66fa30c57859e583acda954ea80'\n+        QT_LOCAL_PATH: 'C:\\Qt5.9.8_x64_static_vs2019'\n+        VCPKG_INSTALL_PATH: \"$env:VCPKG_INSTALLATION_ROOT/installed\"\n+        PLATFORM: x64\n+    steps:\n+    - uses: actions/checkout@v1\n+\n+    - uses: actions/cache@v1\n+      id: vcpkgcache\n+      with:\n+       path: C:/vcpkg/installed\n+       key: ${{ runner.os }}-vcpkg\n+\n+    - name: Update vcpkg and install packages\n+      if: steps.vcpkgcache.outputs.cache-hit != 'true'\n+      run: |\n+        $env:PACKAGES = Get-Content -Path \"$env:GITHUB_WORKSPACE/build_msvc/vcpkg-packages.txt\"\n+        Write-Host \"vcpkg list: $env:PACKAGES\"\n+        cd $env:VCPKG_INSTALLATION_ROOT\n+        git pull origin master\n+        .\\bootstrap-vcpkg.bat\n+        .\\vcpkg install --triplet $env:PLATFORM-windows-static $env:PACKAGES.split() > $null\n+    - name: Install prebuilt Qt libraries\n+      run: |\n+       if(!(Test-Path -Path ($env:QT_LOCAL_PATH))) {\n+          Write-Host \"Downloading Qt binaries.\";\n+          Invoke-WebRequest -Uri $env:QT_DOWNLOAD_URL -Out qtdownload.zip;\n+          Write-Host \"Qt binaries successfully downloaded, checking hash against $env:QT_DOWNLOAD_HASH...\";\n+          if((Get-FileHash qtdownload.zip).Hash -eq $env:QT_DOWNLOAD_HASH) {\n+            Expand-Archive qtdownload.zip -DestinationPath $env:QT_LOCAL_PATH;\n+            Write-Host \"Qt binary download matched the expected hash.\";\n+          }\n+          else {\n+            Write-Host \"ERROR: Qt binary download did not match the expected hash.\";\n+            exit 1\n+          }\n+        }\n+        else {\n+           Write-Host \"Qt binaries already present.\";\n+        }\n+    - name: Generate project files\n+      run: python build_msvc\\msvc-autogen.py\n+    - name: Setup MSBuild.exe\n+      uses: warrenbuckley/Setup-MSBuild@v1\n+    - name: vcpkg integration\n+      run: C:/vcpkg/vcpkg.exe integrate install\n+    - name: Build\n+      run: msbuild build_msvc\\bitcoin.sln /m /v:n /p:Configuration=Release\n+    - name: Run test_bticoin\n+      shell: cmd\n+      run: src\\test_bitcoin.exe -k stdout -e stdout 2> NUL\n+    - name: Run bench_bitcoin\n+      shell: cmd\n+      run: src\\bench_bitcoin.exe -evals=1 -scaling=0 > NUL\n+    - name: bitcoin-util-test\n+      run: python test\\util\\bitcoin-util-test.py\n+    - name: rpcauth-test\n+      shell: cmd\n+      run: python test\\util\\rpcauth-test.py\n+# This step fails due to character UTF encoding error. If anyone knows how Python deals with Unicode they might be\n+# able to decipher the error message.\n+#    - name: test_runner\n+#      shell: cmd\n+#      run: |\n+#       python test\\functional\\test_runner.py --ansi --ci --quiet --combinedlogslen=4000 --failfast --exclude feature_fee_estimation\n+"
      }
    ]
  },
  {
    "sha": "ac09180128a1d2c7d198fa1e08095a46f54831f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzA5MTgwMTI4YTFkMmM3ZDE5OGZhMWUwODA5NWE0NmY1NDgzMWY5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-09T15:16:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-09T15:16:51Z"
      },
      "message": "Merge #17680: gitian: fixed SC2001 regex\n\nc966ff14c77870378847b9e6063b9671739ddc1f gitian: fixed SC2001 regex (willyk)\n\nPull request description:\n\n  Currently the gitian-win-signer.yml produces OUTFILE names without `-unsigned` stripped out\n  This is due to regex having an`%` in front of it\n  ```\n  $ INFILE=\"bitcoin-0.19.0-win64-setup-unsigned.exe\"\n  $ echo \"${INFILE/%-unsigned}\"\n  bitcoin-0.19.0-win64-setup-unsigned.exe\n  $ echo \"${INFILE/-unsigned}\"\n  bitcoin-0.19.0-win64-setup.exe\n  ```\n\n  Fixes #17361\n\nACKs for top commit:\n  laanwj:\n    ACK c966ff14c77870378847b9e6063b9671739ddc1f\n  hebasto:\n    ACK c966ff14c77870378847b9e6063b9671739ddc1f\n\nTree-SHA512: 954547f9dfa4cab4def5f284d4837c21f0e6fed7454a04e83e6b1b7d3fd3f9661ea657047f0d8162f6591909d32ef2f72e801b2f3a44cbb1131ac344cb913a69",
      "tree": {
        "sha": "92309de9feca17f80ef2ab276d72a2f50d829495",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92309de9feca17f80ef2ab276d72a2f50d829495"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac09180128a1d2c7d198fa1e08095a46f54831f9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3uZWMACgkQHkrtYphs\n0l0TiAf/cBg2xlT4jI5j34O0VjEaM153esxDSwXEV2E+l++vilEVgOpyddBn7Qbj\no4nHweJqhiDSJEDTznJlNOBm0hGFiTMSgjqy7hh1nclXJ0pBExuYznU2xzq1Jf9o\nzJQoEOAFSjE5CKX1sKXAPaoDfwXzILtKkp6fir/+ctbyLMH0aTWkxdoMUfHXGMcN\naXbga71Y9lEenKJuOt93CHInMPB+QVIr/+VSErFdxlgmHPY4TSKeEDp57cpjc/X0\n/N+tMVhWEGx3Eb4yC60XZg+tEQJQygS7Vg5IXeIm8wIfpmneza4p7m47ttwRFfLo\n0NEWAsEtou4+2M3SYGM+ZRnZ+/toTA==\n=jXMF\n-----END PGP SIGNATURE-----",
        "payload": "tree 92309de9feca17f80ef2ab276d72a2f50d829495\nparent 05c23488c2ce6f415ced607dca7e74a27e0200b5\nparent c966ff14c77870378847b9e6063b9671739ddc1f\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1575904604 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1575904611 +0100\n\nMerge #17680: gitian: fixed SC2001 regex\n\nc966ff14c77870378847b9e6063b9671739ddc1f gitian: fixed SC2001 regex (willyk)\n\nPull request description:\n\n  Currently the gitian-win-signer.yml produces OUTFILE names without `-unsigned` stripped out\n  This is due to regex having an`%` in front of it\n  ```\n  $ INFILE=\"bitcoin-0.19.0-win64-setup-unsigned.exe\"\n  $ echo \"${INFILE/%-unsigned}\"\n  bitcoin-0.19.0-win64-setup-unsigned.exe\n  $ echo \"${INFILE/-unsigned}\"\n  bitcoin-0.19.0-win64-setup.exe\n  ```\n\n  Fixes #17361\n\nACKs for top commit:\n  laanwj:\n    ACK c966ff14c77870378847b9e6063b9671739ddc1f\n  hebasto:\n    ACK c966ff14c77870378847b9e6063b9671739ddc1f\n\nTree-SHA512: 954547f9dfa4cab4def5f284d4837c21f0e6fed7454a04e83e6b1b7d3fd3f9661ea657047f0d8162f6591909d32ef2f72e801b2f3a44cbb1131ac344cb913a69\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac09180128a1d2c7d198fa1e08095a46f54831f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac09180128a1d2c7d198fa1e08095a46f54831f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac09180128a1d2c7d198fa1e08095a46f54831f9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05c23488c2ce6f415ced607dca7e74a27e0200b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05c23488c2ce6f415ced607dca7e74a27e0200b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05c23488c2ce6f415ced607dca7e74a27e0200b5"
      },
      {
        "sha": "c966ff14c77870378847b9e6063b9671739ddc1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c966ff14c77870378847b9e6063b9671739ddc1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c966ff14c77870378847b9e6063b9671739ddc1f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "70b7bb111d0751b8b1913e82f4714eeac19c60ad",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac09180128a1d2c7d198fa1e08095a46f54831f9/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac09180128a1d2c7d198fa1e08095a46f54831f9/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=ac09180128a1d2c7d198fa1e08095a46f54831f9",
        "patch": "@@ -36,6 +36,6 @@ script: |\n   make\n   find ${UNSIGNED_DIR} -name \"*-unsigned.exe\" | while read i; do\n     INFILE=\"$(basename \"${i}\")\"\n-    OUTFILE=\"${INFILE/%-unsigned}\"\n+    OUTFILE=\"${INFILE/-unsigned}\"\n     ./osslsigncode attach-signature -in \"${i}\" -out \"${OUTDIR}/${OUTFILE}\" -sigin \"${SIGDIR}/${INFILE}.pem\"\n   done"
      }
    ]
  },
  {
    "sha": "1d6fda65dd4100079a13fddeca3b17b986bb58e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDZmZGE2NWRkNDEwMDA3OWExM2ZkZGVjYTNiMTdiOTg2YmI1OGU3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T17:48:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T17:48:56Z"
      },
      "message": "Merge #17678: depends: Support for S390X and POWER targets\n\n11113247c323c5b98debcb512fb9db9fe5a8e7cf depends: Support for S390X targets (MarcoFalke)\n989fd539d5bf590c5f6070ee2a4a9e2d3018df2c depends: Support for 64-bit POWER targets (Luke Dashjr)\n\nPull request description:\n\n  Failure before:\n\n  ```\n  $ make -C depends HOST=powerpc64-linux-gnu\n  ...\n  ERROR: Feature 'system-zlib' was enabled, but the pre-condition 'libs.zlib' failed.\n\n  ERROR: Feature 'xcb' was enabled, but the pre-condition 'libs.xcb' failed.\n\n  ERROR: Feature 'system-freetype' was enabled, but the pre-condition 'features.freetype && libs.freetype' failed.\n\n  ERROR: Feature 'fontconfig' was enabled, but the pre-condition '!config.win32 && !config.darwin && features.system-freetype && libs.fontconfig' failed.\n  make: *** [funcs.mk:254: /bitcoin/depends/work/build/powerpc64-linux-gnu/qt/5.9.8-95548079095/qtbase/.stamp_configured] Error 3\n\n  $ make -C depends HOST=s390x-linux-gnu\n  ...\n  ERROR: Feature 'system-zlib' was enabled, but the pre-condition 'libs.zlib' failed.\n\n  ERROR: Feature 'xcb' was enabled, but the pre-condition 'libs.xcb' failed.\n\n  ERROR: Feature 'system-freetype' was enabled, but the pre-condition 'features.freetype && libs.freetype' failed.\n\n  ERROR: Feature 'fontconfig' was enabled, but the pre-condition '!config.win32 && !config.darwin && features.system-freetype && libs.fontconfig' failed.\n  make: *** [funcs.mk:254: /bitcoin/depends/work/build/s390x-linux-gnu/qt/5.9.8-79c6d6ca6ec/qtbase/.stamp_configured] Error 3\n  ```\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 11113247c323c5b98debcb512fb9db9fe5a8e7cf\n  dongcarl:\n    tested ACK 11113247c323c5b98debcb512fb9db9fe5a8e7cf\n  practicalswift:\n    ACK 11113247c323c5b98debcb512fb9db9fe5a8e7cf -- diff looks correct\n\nTree-SHA512: f990101ced0ed579168bb25762c1296c9b512c597bab924013af41832670a69ed786c6ec9b654c95fe064187797880a66c575395bc102a914c1bdb323ca7538a",
      "tree": {
        "sha": "fdb18e465a4b6c91bffb4edf7c6645e51a4ab526",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdb18e465a4b6c91bffb4edf7c6645e51a4ab526"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d6fda65dd4100079a13fddeca3b17b986bb58e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhrdwv/e5I9p6f8UfMoVrG7SzCsI1R6wvwj8/cwjXKIIgLpAU48WKMU5UOvkWEY\ngLnTVjhUBbjrEeF+AibG5mBx81ud4MYTxxaAwMhypiu6elILunl+jHHUTAGESOan\n6AKCy0P2jpI5PhdDOCWxxZWAFzbTm4L3eMq79xyYhYojAO2MfsNt8MLMtMZWH32s\nrCwIUVd/AhQ/+57ZG5H3IT1Y2A5uMX6MkugAqHvhNxobGbGh5oyXLv1jmuOEPrqT\nxQVJQi8RAoy1jcHEs+ojf/siwlsDOzf8jBDAcj1RVy4NMNpDBFWZ4wrHywU5YWfB\nZP1mDNreV0cHCT9gb05ckyW7Tdr6r2E7nvSQbFWRe5SgU25ib6FEA9C+hw4DF1Df\n38eK4xr74WrAFKDXwak/jottuHVwo9PIK07Y3tMDwNOfL1H+RcWVwZAEyVuBrqop\n96GsGK7ybsDxDaoHA6ipsP6UHHBEXBHdwOTA3Dt5NYfLIMI9/BALuu0c+792btNS\nzHhzzPUR\n=9gLd\n-----END PGP SIGNATURE-----",
        "payload": "tree fdb18e465a4b6c91bffb4edf7c6645e51a4ab526\nparent ac09180128a1d2c7d198fa1e08095a46f54831f9\nparent 11113247c323c5b98debcb512fb9db9fe5a8e7cf\nauthor MarcoFalke <falke.marco@gmail.com> 1575913725 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575913736 -0500\n\nMerge #17678: depends: Support for S390X and POWER targets\n\n11113247c323c5b98debcb512fb9db9fe5a8e7cf depends: Support for S390X targets (MarcoFalke)\n989fd539d5bf590c5f6070ee2a4a9e2d3018df2c depends: Support for 64-bit POWER targets (Luke Dashjr)\n\nPull request description:\n\n  Failure before:\n\n  ```\n  $ make -C depends HOST=powerpc64-linux-gnu\n  ...\n  ERROR: Feature 'system-zlib' was enabled, but the pre-condition 'libs.zlib' failed.\n\n  ERROR: Feature 'xcb' was enabled, but the pre-condition 'libs.xcb' failed.\n\n  ERROR: Feature 'system-freetype' was enabled, but the pre-condition 'features.freetype && libs.freetype' failed.\n\n  ERROR: Feature 'fontconfig' was enabled, but the pre-condition '!config.win32 && !config.darwin && features.system-freetype && libs.fontconfig' failed.\n  make: *** [funcs.mk:254: /bitcoin/depends/work/build/powerpc64-linux-gnu/qt/5.9.8-95548079095/qtbase/.stamp_configured] Error 3\n\n  $ make -C depends HOST=s390x-linux-gnu\n  ...\n  ERROR: Feature 'system-zlib' was enabled, but the pre-condition 'libs.zlib' failed.\n\n  ERROR: Feature 'xcb' was enabled, but the pre-condition 'libs.xcb' failed.\n\n  ERROR: Feature 'system-freetype' was enabled, but the pre-condition 'features.freetype && libs.freetype' failed.\n\n  ERROR: Feature 'fontconfig' was enabled, but the pre-condition '!config.win32 && !config.darwin && features.system-freetype && libs.fontconfig' failed.\n  make: *** [funcs.mk:254: /bitcoin/depends/work/build/s390x-linux-gnu/qt/5.9.8-79c6d6ca6ec/qtbase/.stamp_configured] Error 3\n  ```\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 11113247c323c5b98debcb512fb9db9fe5a8e7cf\n  dongcarl:\n    tested ACK 11113247c323c5b98debcb512fb9db9fe5a8e7cf\n  practicalswift:\n    ACK 11113247c323c5b98debcb512fb9db9fe5a8e7cf -- diff looks correct\n\nTree-SHA512: f990101ced0ed579168bb25762c1296c9b512c597bab924013af41832670a69ed786c6ec9b654c95fe064187797880a66c575395bc102a914c1bdb323ca7538a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d6fda65dd4100079a13fddeca3b17b986bb58e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d6fda65dd4100079a13fddeca3b17b986bb58e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d6fda65dd4100079a13fddeca3b17b986bb58e7/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac09180128a1d2c7d198fa1e08095a46f54831f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac09180128a1d2c7d198fa1e08095a46f54831f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac09180128a1d2c7d198fa1e08095a46f54831f9"
      },
      {
        "sha": "11113247c323c5b98debcb512fb9db9fe5a8e7cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11113247c323c5b98debcb512fb9db9fe5a8e7cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11113247c323c5b98debcb512fb9db9fe5a8e7cf"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 19,
      "deletions": 3
    },
    "files": [
      {
        "sha": "19c506ce5447d4b9099f741fd33f800d101bcf6d",
        "filename": "depends/.gitignore",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d6fda65dd4100079a13fddeca3b17b986bb58e7/depends/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d6fda65dd4100079a13fddeca3b17b986bb58e7/depends/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/.gitignore?ref=1d6fda65dd4100079a13fddeca3b17b986bb58e7",
        "patch": "@@ -8,5 +8,7 @@ i686*\n mips*\n arm*\n aarch64*\n+powerpc*\n riscv32*\n riscv64*\n+s390x*"
      },
      {
        "sha": "f81bc3001bac1441f23bf7d5a3bc00049f716cff",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d6fda65dd4100079a13fddeca3b17b986bb58e7/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d6fda65dd4100079a13fddeca3b17b986bb58e7/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=1d6fda65dd4100079a13fddeca3b17b986bb58e7",
        "patch": "@@ -191,7 +191,7 @@ $(host_prefix)/share/config.site: check-packages\n check-packages: check-sources\n \n clean-all: clean\n-\t@rm -rf $(SOURCES_PATH) x86_64* i686* mips* arm* aarch64* riscv32* riscv64*\n+\t@rm -rf $(SOURCES_PATH) x86_64* i686* mips* arm* aarch64* powerpc* riscv32* riscv64* s390x*\n \n clean:\n \t@rm -rf $(WORK_PATH) $(BASE_CACHE) $(BUILD)"
      },
      {
        "sha": "93f619983fd99e2327bdbd04aab40f52ee504e8b",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d6fda65dd4100079a13fddeca3b17b986bb58e7/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d6fda65dd4100079a13fddeca3b17b986bb58e7/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=1d6fda65dd4100079a13fddeca3b17b986bb58e7",
        "patch": "@@ -12,13 +12,13 @@ For example:\n \n     make HOST=x86_64-w64-mingw32 -j4\n \n-**Bitcoin's configure script by default will ignore the depends output.** In\n+**Bitcoin Core's configure script by default will ignore the depends output.** In\n order for it to pick up libraries, tools, and settings from the depends build,\n you must point it at the appropriate `--prefix` directory generated by the\n build. In the above example, a prefix dir named x86_64-w64-mingw32 will be\n created. To use it for Bitcoin:\n \n-    ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32\n+    ./configure --prefix=$PWD/depends/x86_64-w64-mingw32\n \n Common `host-platform-triplets` for cross compilation are:\n \n@@ -28,8 +28,11 @@ Common `host-platform-triplets` for cross compilation are:\n - `x86_64-apple-darwin16` for macOS\n - `arm-linux-gnueabihf` for Linux ARM 32 bit\n - `aarch64-linux-gnu` for Linux ARM 64 bit\n+- `powerpc64-linux-gnu` for Linux POWER 64-bit (big endian)\n+- `powerpc64le-linux-gnu` for Linux POWER 64-bit (little endian)\n - `riscv32-linux-gnu` for Linux RISC-V 32 bit\n - `riscv64-linux-gnu` for Linux RISC-V 64 bit\n+- `s390x-linux-gnu` for Linux S390X\n - `armv7a-linux-android` for Android ARM 32 bit\n - `aarch64-linux-android` for Android ARM 64 bit\n - `i686-linux-android` for Android x86 32 bit\n@@ -61,13 +64,21 @@ For linux AARCH64 cross compilation:\n \n     sudo apt-get install g++-aarch64-linux-gnu binutils-aarch64-linux-gnu\n \n+For linux POWER 64-bit cross compilation (there are no packages for 32-bit):\n+\n+    sudo apt-get install g++-powerpc64-linux-gnu binutils-powerpc64-linux-gnu g++-powerpc64le-linux-gnu binutils-powerpc64le-linux-gnu\n+\n For linux RISC-V 64-bit cross compilation (there are no packages for 32-bit):\n \n     sudo apt-get install g++-riscv64-linux-gnu binutils-riscv64-linux-gnu\n \n RISC-V known issue: gcc-7.3.0 and gcc-7.3.1 result in a broken `test_bitcoin` executable (see https://github.com/bitcoin/bitcoin/pull/13543),\n this is apparently fixed in gcc-8.1.0.\n \n+For linux S390X cross compilation:\n+\n+    sudo apt-get install g++-s390x-linux-gnu binutils-s390x-linux-gnu\n+\n ### Dependency Options\n The following can be set when running make: make FOO=bar\n "
      },
      {
        "sha": "2087fec14dcfce0bdb98a282d53cd09993ef90d3",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d6fda65dd4100079a13fddeca3b17b986bb58e7/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d6fda65dd4100079a13fddeca3b17b986bb58e7/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=1d6fda65dd4100079a13fddeca3b17b986bb58e7",
        "patch": "@@ -129,7 +129,10 @@ $(package)_config_opts_arm_linux += -platform linux-g++ -xplatform bitcoin-linux\n $(package)_config_opts_i686_linux  = -xplatform linux-g++-32\n $(package)_config_opts_x86_64_linux = -xplatform linux-g++-64\n $(package)_config_opts_aarch64_linux = -xplatform linux-aarch64-gnu-g++\n+$(package)_config_opts_powerpc64_linux = -platform linux-g++ -xplatform bitcoin-linux-g++\n+$(package)_config_opts_powerpc64le_linux = -platform linux-g++ -xplatform bitcoin-linux-g++\n $(package)_config_opts_riscv64_linux = -platform linux-g++ -xplatform bitcoin-linux-g++\n+$(package)_config_opts_s390x_linux = -platform linux-g++ -xplatform bitcoin-linux-g++\n \n $(package)_config_opts_mingw32 = -no-opengl\n $(package)_config_opts_mingw32 += -no-dbus"
      }
    ]
  },
  {
    "sha": "03e781ff4fd7844692dd4891db6f7322db5d593a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2U3ODFmZjRmZDc4NDQ2OTJkZDQ4OTFkYjZmNzMyMmRiNWQ1OTNh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T18:50:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T18:50:38Z"
      },
      "message": "Merge #17702: gui: Move static placeholder texts to forms\n\na652dc5521e2caf5734ffb797c7f2fc80685fef1 qt: Normalize placeholder to avoid using \"address book\" in sendcoinsentry (Wladimir J. van der Laan)\n67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa gui: Move static placeholder texts to forms (Wladimir J. van der Laan)\n\nPull request description:\n\n  There was an issue around the time of Qt 4.6 when placeholder text was introduced, that caused a compile failure when it was specified in the form.\n\n  As a workaround the placeholder texts were moved to the code.\n\n  Qt 4 hasn't been relevant to us for ages. So move all (non-parametrized) placeholder texts to the form files instead.\n\n  It's better to keep this kind of text content together. Translate/no-translate status is kept as it is.\n\n  Proof that they still work:\n  ![win1](https://user-images.githubusercontent.com/126646/70428014-0e80b300-1a76-11ea-9a6d-be78a0bf14ed.png)\n\n  ![win2](https://user-images.githubusercontent.com/126646/70428019-10e30d00-1a76-11ea-8016-ffa0c4eafe34.png)\n\n  ![win3](https://user-images.githubusercontent.com/126646/70428021-13456700-1a76-11ea-9449-9413487e39f6.png)\n\n  ![win4](https://user-images.githubusercontent.com/126646/70428025-150f2a80-1a76-11ea-92ad-be5f3c171c43.png)\n\nACKs for top commit:\n  hebasto:\n    Re-ACK a652dc5521e2caf5734ffb797c7f2fc80685fef1, `tooltip` and `placeholderText` are identical now.\n  MarcoFalke:\n    ACK a652dc5521e2caf5734ffb797c7f2fc80685fef1 \ud83d\udebf\n  fanquake:\n    ACK a652dc5521e2caf5734ffb797c7f2fc80685fef1 - checked that placeholder text still appears.\n\nTree-SHA512: 7d3c1faeef2eb5d4b195d9d78f2a3f161296d869e5059b5e8d308167e3c6c668a3ebabec93dc592762ba15bfc86d51985e20c4e17f1065c8dce84fec036ff5ee",
      "tree": {
        "sha": "b947bd3ec99b6b7ce966ad2cb781e2044b819f52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b947bd3ec99b6b7ce966ad2cb781e2044b819f52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03e781ff4fd7844692dd4891db6f7322db5d593a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhaPAv9FTa1615tffdnxzjHuFjBpEg4oKurtlkGSbGdrdg4QwXJsTCCgH/u7H54\nhvivQ8CCZXsAnK1M5qy5u9zJ2ZJvTriRJdd+/XkOr17ZLXse5bKNlFev3IjALpLl\nz0gMZFBEHbGzohlzkiNqS0cppm836WZGa4uvsJ497Gd5J9KmLYjmuJzsUZiEaiE6\nZ7h7YqZLTBsBST90VECTbSKc02lOXNsY+i1q37j/tr2Lhde76isEzhiLygvtaPAJ\nQ3TfPlFJUtoCTCY5bPMgd3LIl9EV6WW7o0RBxnLm9f1X7x/+FOffEnvyLzOHcwHC\n2I2IPa2PPYNgwzJ5BHh9qAS2zs+1Hle8EAvSUX2PbiJ9r9BJF9h7G8Sx4AHxebwn\nbVVCs5+YaHVUC0O+3hF9JhrcqFohQL1GKQkIpN7NjX6eZJhrjsBnqLqy9/YUulao\nrc2J9u73uzjV91/1ChZf97X7FCK0012D6eP2gZZ0RgCA9NLaI4yZSyQiWz/fkWFf\nhwFYU5Vu\n=ULEK\n-----END PGP SIGNATURE-----",
        "payload": "tree b947bd3ec99b6b7ce966ad2cb781e2044b819f52\nparent 1d6fda65dd4100079a13fddeca3b17b986bb58e7\nparent a652dc5521e2caf5734ffb797c7f2fc80685fef1\nauthor MarcoFalke <falke.marco@gmail.com> 1575917431 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575917438 -0500\n\nMerge #17702: gui: Move static placeholder texts to forms\n\na652dc5521e2caf5734ffb797c7f2fc80685fef1 qt: Normalize placeholder to avoid using \"address book\" in sendcoinsentry (Wladimir J. van der Laan)\n67f36e0b2ce0f99b90578e7e1dd9e0624026bcfa gui: Move static placeholder texts to forms (Wladimir J. van der Laan)\n\nPull request description:\n\n  There was an issue around the time of Qt 4.6 when placeholder text was introduced, that caused a compile failure when it was specified in the form.\n\n  As a workaround the placeholder texts were moved to the code.\n\n  Qt 4 hasn't been relevant to us for ages. So move all (non-parametrized) placeholder texts to the form files instead.\n\n  It's better to keep this kind of text content together. Translate/no-translate status is kept as it is.\n\n  Proof that they still work:\n  ![win1](https://user-images.githubusercontent.com/126646/70428014-0e80b300-1a76-11ea-9a6d-be78a0bf14ed.png)\n\n  ![win2](https://user-images.githubusercontent.com/126646/70428019-10e30d00-1a76-11ea-8016-ffa0c4eafe34.png)\n\n  ![win3](https://user-images.githubusercontent.com/126646/70428021-13456700-1a76-11ea-9449-9413487e39f6.png)\n\n  ![win4](https://user-images.githubusercontent.com/126646/70428025-150f2a80-1a76-11ea-92ad-be5f3c171c43.png)\n\nACKs for top commit:\n  hebasto:\n    Re-ACK a652dc5521e2caf5734ffb797c7f2fc80685fef1, `tooltip` and `placeholderText` are identical now.\n  MarcoFalke:\n    ACK a652dc5521e2caf5734ffb797c7f2fc80685fef1 \ud83d\udebf\n  fanquake:\n    ACK a652dc5521e2caf5734ffb797c7f2fc80685fef1 - checked that placeholder text still appears.\n\nTree-SHA512: 7d3c1faeef2eb5d4b195d9d78f2a3f161296d869e5059b5e8d308167e3c6c668a3ebabec93dc592762ba15bfc86d51985e20c4e17f1065c8dce84fec036ff5ee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03e781ff4fd7844692dd4891db6f7322db5d593a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03e781ff4fd7844692dd4891db6f7322db5d593a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03e781ff4fd7844692dd4891db6f7322db5d593a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d6fda65dd4100079a13fddeca3b17b986bb58e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d6fda65dd4100079a13fddeca3b17b986bb58e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d6fda65dd4100079a13fddeca3b17b986bb58e7"
      },
      {
        "sha": "a652dc5521e2caf5734ffb797c7f2fc80685fef1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a652dc5521e2caf5734ffb797c7f2fc80685fef1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a652dc5521e2caf5734ffb797c7f2fc80685fef1"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 14,
      "deletions": 7
    },
    "files": [
      {
        "sha": "1b7291ab9dabf87e93b7fef0090bc785e718bd96",
        "filename": "src/qt/forms/openuridialog.ui",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/forms/openuridialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/forms/openuridialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/openuridialog.ui?ref=03e781ff4fd7844692dd4891db6f7322db5d593a",
        "patch": "@@ -24,7 +24,11 @@\n       </widget>\n      </item>\n      <item>\n-      <widget class=\"QValidatedLineEdit\" name=\"uriEdit\"/>\n+      <widget class=\"QValidatedLineEdit\" name=\"uriEdit\">\n+       <property name=\"placeholderText\">\n+        <string notr=\"true\">bitcoin:</string>\n+       </property>\n+      </widget>\n      </item>\n     </layout>\n    </item>"
      },
      {
        "sha": "fea759dee08d0110fb7a64df1a827e54e47a503c",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=03e781ff4fd7844692dd4891db6f7322db5d593a",
        "patch": "@@ -685,6 +685,9 @@\n            <property name=\"toolTip\">\n             <string>Third party URLs (e.g. a block explorer) that appear in the transactions tab as context menu items. %s in the URL is replaced by transaction hash. Multiple URLs are separated by vertical bar |.</string>\n            </property>\n+           <property name=\"placeholderText\">\n+            <string notr=\"true\">https://example.com/tx/%s</string>\n+           </property>\n           </widget>\n          </item>\n         </layout>"
      },
      {
        "sha": "934363af1f1c1ab2c6ac829f416c2d16a8bae69b",
        "filename": "src/qt/forms/sendcoinsentry.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/forms/sendcoinsentry.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/forms/sendcoinsentry.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsentry.ui?ref=03e781ff4fd7844692dd4891db6f7322db5d593a",
        "patch": "@@ -144,6 +144,9 @@\n       <property name=\"toolTip\">\n        <string>Enter a label for this address to add it to the list of used addresses</string>\n       </property>\n+      <property name=\"placeholderText\">\n+       <string>Enter a label for this address to add it to the list of used addresses</string>\n+      </property>\n      </widget>\n     </item>\n     <item row=\"2\" column=\"0\">"
      },
      {
        "sha": "f42d19093b8be35e249112b4f9b2d8f8282d7d03",
        "filename": "src/qt/forms/signverifymessagedialog.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/forms/signverifymessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/forms/signverifymessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/signverifymessagedialog.ui?ref=03e781ff4fd7844692dd4891db6f7322db5d593a",
        "patch": "@@ -121,6 +121,9 @@\n          </property>\n          <item>\n           <widget class=\"QLineEdit\" name=\"signatureOut_SM\">\n+           <property name=\"placeholderText\">\n+            <string>Click \"Sign Message\" to generate signature</string>\n+           </property>\n            <property name=\"font\">\n             <font>\n              <italic>true</italic>"
      },
      {
        "sha": "9dc64bb23a482ce701e1f35844734e5c5814a002",
        "filename": "src/qt/openuridialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/openuridialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/openuridialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.cpp?ref=03e781ff4fd7844692dd4891db6f7322db5d593a",
        "patch": "@@ -15,7 +15,6 @@ OpenURIDialog::OpenURIDialog(QWidget *parent) :\n     ui(new Ui::OpenURIDialog)\n {\n     ui->setupUi(this);\n-    ui->uriEdit->setPlaceholderText(\"bitcoin:\");\n }\n \n OpenURIDialog::~OpenURIDialog()"
      },
      {
        "sha": "3fffb8a288a1fc5345b670846d1ea9813b3b1625",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=03e781ff4fd7844692dd4891db6f7322db5d593a",
        "patch": "@@ -110,8 +110,6 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n             ui->lang->addItem(locale.nativeLanguageName() + QString(\" (\") + langStr + QString(\")\"), QVariant(langStr));\n         }\n     }\n-    ui->thirdPartyTxUrls->setPlaceholderText(\"https://example.com/tx/%s\");\n-\n     ui->unit->setModel(new BitcoinUnits(this));\n \n     /* Widget-to-option mapper */"
      },
      {
        "sha": "610dfbb85a8ed278623985d0722a689c70836bd8",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=03e781ff4fd7844692dd4891db6f7322db5d593a",
        "patch": "@@ -37,7 +37,6 @@ SendCoinsEntry::SendCoinsEntry(const PlatformStyle *_platformStyle, QWidget *par\n \n     if (platformStyle->getUseExtraSpacing())\n         ui->payToLayout->setSpacing(4);\n-    ui->addAsLabel->setPlaceholderText(tr(\"Enter a label for this address to add it to your address book\"));\n \n     // normal bitcoin address field\n     GUIUtil::setupAddressWidget(ui->payTo, this);"
      },
      {
        "sha": "81e9d33a60d2fc9b400a4152b7cd8c7431ed0dd9",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03e781ff4fd7844692dd4891db6f7322db5d593a/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=03e781ff4fd7844692dd4891db6f7322db5d593a",
        "patch": "@@ -35,8 +35,6 @@ SignVerifyMessageDialog::SignVerifyMessageDialog(const PlatformStyle *_platformS\n     ui->verifyMessageButton_VM->setIcon(platformStyle->SingleColorIcon(\":/icons/transaction_0\"));\n     ui->clearButton_VM->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n \n-    ui->signatureOut_SM->setPlaceholderText(tr(\"Click \\\"Sign Message\\\" to generate signature\"));\n-\n     GUIUtil::setupAddressWidget(ui->addressIn_SM, this);\n     GUIUtil::setupAddressWidget(ui->addressIn_VM, this);\n "
      }
    ]
  },
  {
    "sha": "df2b7437596965a5f4008630c1cc08b6a3756924",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjJiNzQzNzU5Njk2NWE1ZjQwMDg2MzBjMWNjMDhiNmEzNzU2OTI0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T18:52:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T18:52:47Z"
      },
      "message": "Merge #17675: tests: Enable tests which are incorrectly skipped when running test_runner.py --usecli\n\n5ac804a9eb0cdbdcff8b50ecfb736f8793cab805 tests: Use a default of supports_cli=True (instead of supports_cli=False) (practicalswift)\n993e38a4e2fa66093314b988dfbe459f46aa5864 tests: Mark functional tests not supporting bitcoin-cli (--usecli) as such (practicalswift)\n\nPull request description:\n\n  Annotate functional tests supporting `bitcoin-cli` (`--usecli`) as such.\n\n  Prior to this commit 74 tests were unnecessarily skipped when running `test_runner.py --usecli`.\n\n  Before:\n\n  ```\n  $ test/functional/test_runner.py --usecli > /dev/null 2>&1\n  $ echo $?\n  0\n  $ test/functional/test_runner.py --usecli 2>&1 | cut -f2 -d'|' | \\\n      grep -E ' (Passed|Skipped) *$' | sort | uniq -c\n        9  \u2713 Passed\n      126  \u25cb Skipped\n  ```\n\n  After:\n\n  ```\n  $ test/functional/test_runner.py --usecli > /dev/null 2>&1\n  $ echo $?\n  0\n  $ test/functional/test_runner.py --usecli 2>&1 | cut -f2 -d'|' | \\\n      grep -E ' (Passed|Skipped) *$' | sort | uniq -c\n       83  \u2713 Passed\n       52  \u25cb Skipped\n  ```\n\n  Context: `--usecli` was introduced in https://github.com/bitcoin/bitcoin/pull/11970/commits/f6ade9ce1a679a026c84e5baa9f8595fa2be78a5\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 5ac804a9eb0cdbdcff8b50ecfb736f8793cab805\n\nTree-SHA512: 249c0b691a74cf201c729df86c3db2b3faefa53b94703941e566943d252c6d14924e935a8da4f592951574235923fbb7cd22612a5e7e02ff6c762c55a2320ca3",
      "tree": {
        "sha": "2062f6412845dd2f5056fe559eda87af6f148dbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2062f6412845dd2f5056fe559eda87af6f148dbe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df2b7437596965a5f4008630c1cc08b6a3756924",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj9IgwAxM/zqU8TDzaoaYqEDKBF4QxJOzpnU35ZayC/iLzx1N8uVJlZsoq58Tk+\nuQB5HQIu0kHCKJ6w+2dkHpiszYs5ogd5WUNiLrzPLXwuaS3PXWavJ/nstlePIwTj\nltULhUilF6VxMHMtuN3myY+hocz31dWAKSu3Kwu7brqzfy3Rp4vVbpAeblkS04uW\nD01pWlbC4kXla0nyVd6KKvzmMliUIq5sZtwdQV3yVWhge2eYKxAbMP4ZJMA2pElc\n8JYJOHfmCjZI/RJc9W6aosBhSS82TKs/fBNRDmQlUsKiaLlr6if2vZ/4tsYjmN/X\nAtFrwxuZCmtn7QwehPo9bNwgL11DKhHQHrnd6BvAGhgbGp8DIR0SjsEEWF2JPMd+\n8UwxbAxOXPBueSTFG1AIPpwiZD7dk/AdLPJ8uSUFFyxWcKiG9FcxCBggbAV6ApuU\nkIqrmQbJizSDlkqwSZyjzueaBn8ZdyHGINIT5DT1laH0h3zqZJ/i4pK2Y+iEkr5e\nYdLjsm4N\n=iFie\n-----END PGP SIGNATURE-----",
        "payload": "tree 2062f6412845dd2f5056fe559eda87af6f148dbe\nparent 03e781ff4fd7844692dd4891db6f7322db5d593a\nparent 5ac804a9eb0cdbdcff8b50ecfb736f8793cab805\nauthor MarcoFalke <falke.marco@gmail.com> 1575917558 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575917567 -0500\n\nMerge #17675: tests: Enable tests which are incorrectly skipped when running test_runner.py --usecli\n\n5ac804a9eb0cdbdcff8b50ecfb736f8793cab805 tests: Use a default of supports_cli=True (instead of supports_cli=False) (practicalswift)\n993e38a4e2fa66093314b988dfbe459f46aa5864 tests: Mark functional tests not supporting bitcoin-cli (--usecli) as such (practicalswift)\n\nPull request description:\n\n  Annotate functional tests supporting `bitcoin-cli` (`--usecli`) as such.\n\n  Prior to this commit 74 tests were unnecessarily skipped when running `test_runner.py --usecli`.\n\n  Before:\n\n  ```\n  $ test/functional/test_runner.py --usecli > /dev/null 2>&1\n  $ echo $?\n  0\n  $ test/functional/test_runner.py --usecli 2>&1 | cut -f2 -d'|' | \\\n      grep -E ' (Passed|Skipped) *$' | sort | uniq -c\n        9  \u2713 Passed\n      126  \u25cb Skipped\n  ```\n\n  After:\n\n  ```\n  $ test/functional/test_runner.py --usecli > /dev/null 2>&1\n  $ echo $?\n  0\n  $ test/functional/test_runner.py --usecli 2>&1 | cut -f2 -d'|' | \\\n      grep -E ' (Passed|Skipped) *$' | sort | uniq -c\n       83  \u2713 Passed\n       52  \u25cb Skipped\n  ```\n\n  Context: `--usecli` was introduced in https://github.com/bitcoin/bitcoin/pull/11970/commits/f6ade9ce1a679a026c84e5baa9f8595fa2be78a5\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 5ac804a9eb0cdbdcff8b50ecfb736f8793cab805\n\nTree-SHA512: 249c0b691a74cf201c729df86c3db2b3faefa53b94703941e566943d252c6d14924e935a8da4f592951574235923fbb7cd22612a5e7e02ff6c762c55a2320ca3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df2b7437596965a5f4008630c1cc08b6a3756924",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df2b7437596965a5f4008630c1cc08b6a3756924",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df2b7437596965a5f4008630c1cc08b6a3756924/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03e781ff4fd7844692dd4891db6f7322db5d593a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03e781ff4fd7844692dd4891db6f7322db5d593a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03e781ff4fd7844692dd4891db6f7322db5d593a"
      },
      {
        "sha": "5ac804a9eb0cdbdcff8b50ecfb736f8793cab805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ac804a9eb0cdbdcff8b50ecfb736f8793cab805"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 50,
      "deletions": 6
    },
    "files": [
      {
        "sha": "16a791177b693e686f2956e8e5f4cf4fbe0f83f8",
        "filename": "test/functional/create_cache.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/create_cache.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/create_cache.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/create_cache.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -16,7 +16,6 @@ class CreateCache(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 0\n-        self.supports_cli = True\n \n     def setup_network(self):\n         pass"
      },
      {
        "sha": "801209b1c00df3f23514737366909a4a7def516c",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -13,6 +13,7 @@ class ConfArgsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.supports_cli = False\n \n     def test_config_file_parser(self):\n         # Assume node is stopped"
      },
      {
        "sha": "c2b4de54f2bfdcdef5133d06bbb64849a64355b2",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -139,6 +139,7 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4', '-addresstype=legacy']]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "5bbdb8cda1b25057f5b2808cc643fee7d47971a4",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -51,6 +51,7 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.rpc_timeout = 480\n+        self.supports_cli = False\n \n         # Set -maxmempool=0 to turn off mempool memory sharing with dbcache\n         # Set -rpcservertimeout=900 to reduce socket disconnects in this"
      },
      {
        "sha": "bd4b271ca7890fa237ce5defbee30e34bed557ec",
        "filename": "test/functional/feature_loadblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_loadblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_loadblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_loadblock.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -26,6 +26,7 @@ class LoadblockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n+        self.supports_cli = False\n \n     def run_test(self):\n         self.nodes[1].setnetworkactive(state=False)"
      },
      {
        "sha": "42e2b5bff2473af8257625ad24590b3493db7de2",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -36,6 +36,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxuploadtarget=800\", \"-acceptnonstdtxn=1\"]]\n+        self.supports_cli = False\n \n         # Cache for utxos, as the listunspent may take a long time later in the test\n         self.utxo_cache = []"
      },
      {
        "sha": "e1e0f005309e5ba17714d5abbabf364855007760",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -78,6 +78,7 @@ class PruneTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 6\n+        self.supports_cli = False\n \n         # Create nodes 0 and 1 to mine.\n         # Create node 2 to test pruning."
      },
      {
        "sha": "9e578f0026dd3f096256b5f5cbf7a5c8c14d4707",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -76,6 +76,7 @@ def set_test_params(self):\n                 \"-limitdescendantsize=101\",\n             ],\n         ]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "bf3c56228e5167f56f556bb62e8232606fb994e3",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -72,6 +72,7 @@ def set_test_params(self):\n                 \"-addresstype=legacy\",\n             ],\n         ]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "9485db9864b913bba6302f863039de04dbf5c30a",
        "filename": "test/functional/feature_shutdown.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_shutdown.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/feature_shutdown.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_shutdown.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -17,6 +17,7 @@ class ShutdownTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.supports_cli = False\n \n     def run_test(self):\n         node = get_rpc_proxy(self.nodes[0].url, 1, timeout=600, coveragedir=self.nodes[0].coverage_dir)"
      },
      {
        "sha": "d007490f800f55cb5fe6d19af13f3d308ead3c99",
        "filename": "test/functional/interface_http.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/interface_http.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/interface_http.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_http.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -13,6 +13,7 @@\n class HTTPBasicsTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n+        self.supports_cli = False\n \n     def setup_network(self):\n         self.setup_nodes()"
      },
      {
        "sha": "e73ec90819f15e5d187b8ffd00e5124b375a26b4",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -44,6 +44,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[\"-rest\"], []]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "e460db39f80eae0ea9a4ce028d6e92284fc084c6",
        "filename": "test/functional/interface_rpc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/interface_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/interface_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rpc.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -22,6 +22,7 @@ class RPCInterfaceTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.supports_cli = False\n \n     def test_getrpcinfo(self):\n         self.log.info(\"Testing getrpcinfo...\")"
      },
      {
        "sha": "9cb6b03ee05e4891fb9b06a3413650e03ea7e628",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -37,6 +37,7 @@ def set_test_params(self):\n         self.extra_args = [[\n             '-txindex',\n         ]] * self.num_nodes\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "39035f7cb1e149a6312e5e71e37e18a7c67974e4",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -18,6 +18,7 @@ def set_test_params(self):\n             \"-maxmempool=5\",\n             \"-spendzeroconfchange=0\",\n         ]]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "7ff8c12cc979c65dc9673b818e8c882f16791d23",
        "filename": "test/functional/mempool_package_onemore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/mempool_package_onemore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/mempool_package_onemore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_onemore.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -19,6 +19,7 @@ class MempoolPackagesTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxorphantx=1000\"]]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "d6498f18a7ec4648bd8ffd3ab66223037105f862",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -27,6 +27,7 @@ def set_test_params(self):\n             [\"-maxorphantx=1000\"],\n             [\"-maxorphantx=1000\", \"-limitancestorcount={}\".format(MAX_ANCESTORS_CUSTOM)],\n         ]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "bfeaa76c7421ad97b74ec2135d74fa57664e9680",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -43,6 +43,7 @@ class MiningTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n+        self.supports_cli = False\n \n     def mine_chain(self):\n         self.log.info('Create some old blocks')"
      },
      {
        "sha": "6d0b241e573c3f407d66ac220f1a6fcf43e0e4f6",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -27,6 +27,7 @@ def run(self):\n class GetBlockTemplateLPTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "1426fdaacb9c829c013c8c795d34ea30cd927d2d",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -18,6 +18,7 @@ def set_test_params(self):\n             \"-printpriority=1\",\n             \"-acceptnonstdtxn=1\",\n         ]] * self.num_nodes\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "1b64b65b827d3e7a773989c4374e90fb8afff792",
        "filename": "test/functional/p2p_disconnect_ban.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/p2p_disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/p2p_disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_disconnect_ban.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -16,6 +16,7 @@\n class DisconnectBanTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.supports_cli = False\n \n     def run_test(self):\n         self.log.info(\"Connect nodes both way\")"
      },
      {
        "sha": "297fa88fbe4bde56f5477b9c7a86ec4db93caa35",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -191,6 +191,7 @@ def set_test_params(self):\n             [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-segwitheight={}\".format(SEGWIT_HEIGHT)],\n             [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=1\", \"-segwitheight=-1\"]\n         ]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "664a15a5ecff9664ccc4a5774c3a0e9f49fadd2b",
        "filename": "test/functional/rpc_bind.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_bind.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_bind.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_bind.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -15,6 +15,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.bind_to_localhost_only = False\n         self.num_nodes = 1\n+        self.supports_cli = False\n \n     def setup_network(self):\n         self.add_nodes(self.num_nodes, None)"
      },
      {
        "sha": "adf6f1ca4f88c808099345e34812ea0c3d4da7af",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -49,6 +49,7 @@ class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.supports_cli = False\n \n     def run_test(self):\n         self.mine_chain()"
      },
      {
        "sha": "aa7f12848cd73b737870dc247b7eab18557b47f5",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -22,6 +22,7 @@ class RpcCreateMultiSigTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "42d7d59d56313282c1eca4beaec729f98057240e",
        "filename": "test/functional/rpc_deriveaddresses.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_deriveaddresses.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_deriveaddresses.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deriveaddresses.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -10,7 +10,6 @@\n class DeriveaddressesTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.supports_cli = 1\n \n     def run_test(self):\n         assert_raises_rpc_error(-5, \"Missing checksum\", self.nodes[0].deriveaddresses, \"a\")"
      },
      {
        "sha": "3ae42cb1f40b27781d9d95d7f6277b6eb210805a",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -31,6 +31,7 @@ def set_test_params(self):\n         # This test isn't testing tx relay. Set whitelist on the peers for\n         # instant tx relay.\n         self.extra_args = [['-whitelist=127.0.0.1']] * self.num_nodes\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "57794ae9731acd492cc3127dec653f578af73531",
        "filename": "test/functional/rpc_getblockstats.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_getblockstats.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_getblockstats.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockstats.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -33,6 +33,7 @@ def add_options(self, parser):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.supports_cli = False\n \n     def get_stats(self):\n         return [self.nodes[0].getblockstats(hash_or_height=self.start_height + i) for i in range(self.max_stat_pos+1)]"
      },
      {
        "sha": "ec8ea5697a56820ddd27b2b7d3cbfeff2a736121",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -13,6 +13,7 @@\n class HelpRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n+        self.supports_cli = False\n \n     def run_test(self):\n         self.test_categories()"
      },
      {
        "sha": "c8517d719ee3dd30327e4f61ce16a887f3f88634",
        "filename": "test/functional/rpc_misc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_misc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_misc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_misc.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -19,6 +19,7 @@\n class RpcMiscTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n+        self.supports_cli = False\n \n     def run_test(self):\n         node = self.nodes[0]"
      },
      {
        "sha": "41b931296902008ff81d6bec6ed84bb2fe73df95",
        "filename": "test/functional/rpc_named_arguments.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_named_arguments.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_named_arguments.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_named_arguments.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -13,6 +13,7 @@\n class NamedArgumentTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n+        self.supports_cli = False\n \n     def run_test(self):\n         node = self.nodes[0]"
      },
      {
        "sha": "368debf35cafe0e491a269e48540f8b5d19adc38",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -45,6 +45,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[\"-minrelaytxfee=0.00001000\"],[\"-minrelaytxfee=0.00000500\"]]\n+        self.supports_cli = False\n \n     def run_test(self):\n         self.log.info('Connect nodes both way')"
      },
      {
        "sha": "8386e47411a5eabf526f413ede56f030adaf352c",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -36,6 +36,7 @@ class PreciousTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.supports_cli = False\n \n     def setup_network(self):\n         self.setup_nodes()"
      },
      {
        "sha": "105923460984b27fe1a72eab6b8df8aa0ef96935",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -32,6 +32,7 @@ def set_test_params(self):\n             [\"-walletrbf=0\"],\n             []\n         ]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "14cad3d1b8b8d126cfcaf29be85813b36672adb5",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -53,6 +53,7 @@ def set_test_params(self):\n             [\"-txindex\"],\n             [\"-txindex\"],\n         ]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "9fd44762d8706d7614cb34b2def0c41ae6e35b2d",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -15,6 +15,7 @@ class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "9f159711713ce4666d63028f966af586969f3cc7",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -14,6 +14,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "3541f96ab74b563af07bbc727e8e30fe0bbaf5a0",
        "filename": "test/functional/rpc_users.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_users.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/rpc_users.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_users.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -35,6 +35,7 @@ def call_with_auth(node, user, password):\n class HTTPBasicsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.supports_cli = False\n \n     def setup_chain(self):\n         super().setup_chain()"
      },
      {
        "sha": "a17e7709f29c31ec68ac65e652194bdccf56cd3d",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -97,7 +97,7 @@ def __init__(self):\n         self.nodes = []\n         self.network_thread = None\n         self.rpc_timeout = 60  # Wait for up to 60 seconds for the RPC server to respond\n-        self.supports_cli = False\n+        self.supports_cli = True\n         self.bind_to_localhost_only = True\n         self.set_test_params()\n         self.parse_args()"
      },
      {
        "sha": "3a81f14b0091049637fece219e997d06db393fa6",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -26,6 +26,7 @@ class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "f08606e622e3fe887314e02292001ee410b5946b",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -83,6 +83,7 @@ def set_test_params(self):\n         # whitelist all peers to speed up tx relay / mempool sync\n         for args in self.extra_args:\n             args.append(\"-whitelist=127.0.0.1\")\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "e0ee33ccdb67d4ba2ed8e3fc65cf85495ea06bba",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -54,6 +54,7 @@ def set_test_params(self):\n             ['-limitdescendantcount=3'],  # Limit mempool descendants as a hack to have wallet txs rejected from the mempool\n             [],\n         ]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "2606afa0e455f71569c99ef0414879ca6dc76d98",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -28,6 +28,7 @@ def set_test_params(self):\n             \"-acceptnonstdtxn=1\",\n         ]] * self.num_nodes\n         self.setup_clean_chain = True\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "7eb756df515015b43d15203e7afe978fd04fd20b",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -40,6 +40,7 @@ def set_test_params(self):\n             \"-deprecatedrpc=totalFee\",\n             \"-addresstype=bech32\",\n         ] for i in range(self.num_nodes)]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "af6e7b67b3a2cc53d19fa918273dc01805035f7b",
        "filename": "test/functional/wallet_bumpfee_totalfee_deprecation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_bumpfee_totalfee_deprecation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_bumpfee_totalfee_deprecation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee_totalfee_deprecation.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -16,6 +16,7 @@ def set_test_params(self):\n             \"-walletrbf={}\".format(i),\n             \"-mintxfee=0.00002\",\n         ] for i in range(self.num_nodes)]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "048b3127ff1149c3c3691c677b23eee5b8709635",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -15,7 +15,6 @@ class CreateWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 1\n-        self.supports_cli = True\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "575b501f50c90e4ae69e6240f3a0a366c2dfe827",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -20,6 +20,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=0']]\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "a8583e2879bc9affb4c845cbf258c1e415393eea",
        "filename": "test/functional/wallet_implicitsegwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_implicitsegwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_implicitsegwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_implicitsegwit.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -41,6 +41,7 @@ def check_implicit_transactions(implicit_keys, implicit_node):\n class ImplicitSegwitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "b8b85b7a19994abcdd809038faf496836fd69c8f",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -145,6 +145,7 @@ def get_rand_amount():\n class ImportRescanTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "dc69cedc443c9e1c55d2d7e6b4a431fa6c4bb7d3",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -19,6 +19,7 @@ class ListSinceBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "85d900f6cc6fa42989cf90510c1c6008f8e43c22",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -24,7 +24,6 @@ class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.supports_cli = True\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "07977855604a71287d210d29d679498216906ef4",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -27,6 +27,7 @@\n class ReorgsRestoreTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "99559090ee5577d15ba5b395cf30fe5e302f48dc",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -16,6 +16,7 @@\n class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "1891cd919038d55ee1f7ea261c16b914ec892d72",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -16,6 +16,7 @@\n class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n+        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "b0c41b27380f4f87f59c3e36f10084dd604d0444",
        "filename": "test/functional/wallet_watchonly.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_watchonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df2b7437596965a5f4008630c1cc08b6a3756924/test/functional/wallet_watchonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_watchonly.py?ref=df2b7437596965a5f4008630c1cc08b6a3756924",
        "patch": "@@ -16,7 +16,6 @@ class CreateWalletWatchonlyTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 1\n-        self.supports_cli = True\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  },
  {
    "sha": "5bf1909dd933e8dc71c4238096c4c36a0f79ce70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmYxOTA5ZGQ5MzNlOGRjNzFjNDIzODA5NmM0YzM2YTBmNzljZTcw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T19:36:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T19:38:28Z"
      },
      "message": "Merge #17682: util: Update tinyformat to upstream\n\n978b25528c5f336e0aade73bd1b320500f257f70 util: Update tinyformat to upstream (Wladimir J. van der Laan)\n\nPull request description:\n\n  Last update was in 2017.\n  Updates tinyformat to upstream commit  c42f/tinyformat@705e3f4e1de922069bf715746d35bd2364b1f98f.\n  Re-apply (and mark) bitcoin core specific changes.\n\n  No changes that affect our use, as far as I can see, but this gets rid of the gcc `-Wimplicit-fallthrough` warnings, at least.\n\nACKs for top commit:\n  MarcoFalke:\n    ACK 978b25528c5f336e0aade73bd1b320500f257f70, extracted our patches based on the last update, did the update to v2.3.0 myself and re-applied the patches. Only diff is NULL/nullptr and explicit \ud83d\udd1d\n\nTree-SHA512: 2ba09e1095878d088520f379d545b40c7286ef199ecbbc17fdd5c85bca447d9b0c7a1829d4038bb6d432cd1ff92ad7bba75c0f2f96c71aeb6fa6031002f1ea1d",
      "tree": {
        "sha": "8f5f4f9b3dfccf5877d01dc9a6df04b47bdffc92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f5f4f9b3dfccf5877d01dc9a6df04b47bdffc92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bf1909dd933e8dc71c4238096c4c36a0f79ce70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgKXAwAmx704keHu9XTX2EEQKuUUiQEfjGyDqOIN1vllNJ579o5w1rNXcDU/Tie\nb/pYNviUDQ/JIuNz4ByJbMcb51xBtSaC6itRm3KHD0Rajom+zGC2k86HvgoghvaQ\nk6AT3mBBg1rKA98OSRZEsAxit84E91UjVoE5EO1Cg2GRMxDt2NuSKIkO7zdSBu6X\n32zhRz+T+SHw58wRDZe8mijl2bww5ZY4I2ChOdK69XlCwqGrMyeNrpusinZJRnMe\nJtRbGM0SAuEMgnN87+7g43YotsLBlzlAUQRSyZNicZjZ7beQXqM4Bq03uK8x9qOS\nWbOOfhGz7zZKRrR6UbgPe5a/z6b6pgu84LRYD2FusIYVYj4cVGLTx+3G6CG4AEhG\nytc8kM+AkqkT3Qnq83ZTTYhAuT0gsF5rFNMytpOZ+cC5lQPBshZmwHY4WqHBZ/om\nkLa2m6Se3sitHFW4GoCsiYPayZEAj8kzRsYVNSCGRUpSjjaQ6nmwRw5tqk+LU/eU\n8/PQf7vY\n=io37\n-----END PGP SIGNATURE-----",
        "payload": "tree 8f5f4f9b3dfccf5877d01dc9a6df04b47bdffc92\nparent df2b7437596965a5f4008630c1cc08b6a3756924\nparent 978b25528c5f336e0aade73bd1b320500f257f70\nauthor MarcoFalke <falke.marco@gmail.com> 1575920175 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575920308 -0500\n\nMerge #17682: util: Update tinyformat to upstream\n\n978b25528c5f336e0aade73bd1b320500f257f70 util: Update tinyformat to upstream (Wladimir J. van der Laan)\n\nPull request description:\n\n  Last update was in 2017.\n  Updates tinyformat to upstream commit  c42f/tinyformat@705e3f4e1de922069bf715746d35bd2364b1f98f.\n  Re-apply (and mark) bitcoin core specific changes.\n\n  No changes that affect our use, as far as I can see, but this gets rid of the gcc `-Wimplicit-fallthrough` warnings, at least.\n\nACKs for top commit:\n  MarcoFalke:\n    ACK 978b25528c5f336e0aade73bd1b320500f257f70, extracted our patches based on the last update, did the update to v2.3.0 myself and re-applied the patches. Only diff is NULL/nullptr and explicit \ud83d\udd1d\n\nTree-SHA512: 2ba09e1095878d088520f379d545b40c7286ef199ecbbc17fdd5c85bca447d9b0c7a1829d4038bb6d432cd1ff92ad7bba75c0f2f96c71aeb6fa6031002f1ea1d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bf1909dd933e8dc71c4238096c4c36a0f79ce70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bf1909dd933e8dc71c4238096c4c36a0f79ce70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bf1909dd933e8dc71c4238096c4c36a0f79ce70/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df2b7437596965a5f4008630c1cc08b6a3756924",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df2b7437596965a5f4008630c1cc08b6a3756924",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df2b7437596965a5f4008630c1cc08b6a3756924"
      },
      {
        "sha": "978b25528c5f336e0aade73bd1b320500f257f70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/978b25528c5f336e0aade73bd1b320500f257f70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/978b25528c5f336e0aade73bd1b320500f257f70"
      }
    ],
    "stats": {
      "total": 459,
      "additions": 278,
      "deletions": 181
    },
    "files": [
      {
        "sha": "be63f2d5d8205a91a564c93fe39aa91dc4d58a3c",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 278,
        "deletions": 181,
        "changes": 459,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bf1909dd933e8dc71c4238096c4c36a0f79ce70/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bf1909dd933e8dc71c4238096c4c36a0f79ce70/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=5bf1909dd933e8dc71c4238096c4c36a0f79ce70",
        "patch": "@@ -33,6 +33,7 @@\n //\n // * Type safety and extensibility for user defined types.\n // * C99 printf() compatibility, to the extent possible using std::ostream\n+// * POSIX extension for positional arguments\n // * Simplicity and minimalism.  A single header file to include and distribute\n //   with your projects.\n // * Augment rather than replace the standard stream formatting mechanism\n@@ -42,7 +43,7 @@\n // Main interface example usage\n // ----------------------------\n //\n-// To print a date to std::cout:\n+// To print a date to std::cout for American usage:\n //\n //   std::string weekday = \"Wednesday\";\n //   const char* month = \"July\";\n@@ -52,6 +53,14 @@\n //\n //   tfm::printf(\"%s, %s %d, %.2d:%.2d\\n\", weekday, month, day, hour, min);\n //\n+// POSIX extension for positional arguments is available.\n+// The ability to rearrange formatting arguments is an important feature\n+// for localization because the word order may vary in different languages.\n+//\n+// Previous example for German usage. Arguments are reordered:\n+//\n+//   tfm::printf(\"%1$s, %3$d. %2$s, %4$d:%5$.2d\\n\", weekday, month, day, hour, min);\n+//\n // The strange types here emphasize the type safety of the interface; it is\n // possible to print a std::string using the \"%s\" conversion, and a\n // size_t using the \"%d\" conversion.  A similar result could be achieved\n@@ -133,12 +142,17 @@ namespace tfm = tinyformat;\n //------------------------------------------------------------------------------\n // Implementation details.\n #include <algorithm>\n-#include <cassert>\n #include <iostream>\n #include <sstream>\n-#include <stdexcept>\n+#include <stdexcept> // Added for Bitcoin Core\n+\n+#ifndef TINYFORMAT_ASSERT\n+#   include <cassert>\n+#   define TINYFORMAT_ASSERT(cond) assert(cond)\n+#endif\n \n #ifndef TINYFORMAT_ERROR\n+#   include <cassert>\n #   define TINYFORMAT_ERROR(reason) assert(0 && reason)\n #endif\n \n@@ -149,13 +163,13 @@ namespace tfm = tinyformat;\n #endif\n \n #if defined(__GLIBCXX__) && __GLIBCXX__ < 20080201\n-//  std::showpos is broken on old libstdc++ as provided with OSX.  See\n+//  std::showpos is broken on old libstdc++ as provided with macOS.  See\n //  http://gcc.gnu.org/ml/libstdc++/2007-11/msg00075.html\n #   define TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n #endif\n \n #ifdef __APPLE__\n-// Workaround OSX linker warning: Xcode uses different default symbol\n+// Workaround macOS linker warning: Xcode uses different default symbol\n // visibilities for static libs vs executables (see issue #25)\n #   define TINYFORMAT_HIDDEN __attribute__((visibility(\"hidden\")))\n #else\n@@ -164,6 +178,7 @@ namespace tfm = tinyformat;\n \n namespace tinyformat {\n \n+// Added for Bitcoin Core\n class format_error: public std::runtime_error\n {\n public:\n@@ -218,7 +233,7 @@ template<int n> struct is_wchar<wchar_t[n]> {};\n template<typename T, typename fmtT, bool convertible = is_convertible<T, fmtT>::value>\n struct formatValueAsType\n {\n-    static void invoke(std::ostream& /*out*/, const T& /*value*/) { assert(0); }\n+    static void invoke(std::ostream& /*out*/, const T& /*value*/) { TINYFORMAT_ASSERT(0); }\n };\n // Specialized version for types that can actually be converted to fmtT, as\n // indicated by the \"convertible\" template parameter.\n@@ -240,8 +255,7 @@ struct formatZeroIntegerWorkaround<T,true>\n {\n     static bool invoke(std::ostream& out, const T& value)\n     {\n-        if (static_cast<int>(value) == 0 && out.flags() & std::ios::showpos)\n-        {\n+        if (static_cast<int>(value) == 0 && out.flags() & std::ios::showpos) {\n             out << \"+0\";\n             return true;\n         }\n@@ -282,7 +296,7 @@ inline void formatTruncated(std::ostream& out, const T& value, int ntrunc)\n inline void formatTruncated(std::ostream& out, type* value, int ntrunc) \\\n {                                                           \\\n     std::streamsize len = 0;                                \\\n-    while(len < ntrunc && value[len] != 0)                  \\\n+    while (len < ntrunc && value[len] != 0)                 \\\n         ++len;                                              \\\n     out.write(value, len);                                  \\\n }\n@@ -328,15 +342,14 @@ inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,\n     // could otherwise lead to a crash when printing a dangling (const char*).\n     const bool canConvertToChar = detail::is_convertible<T,char>::value;\n     const bool canConvertToVoidPtr = detail::is_convertible<T, const void*>::value;\n-    if(canConvertToChar && *(fmtEnd-1) == 'c')\n+    if (canConvertToChar && *(fmtEnd-1) == 'c')\n         detail::formatValueAsType<T, char>::invoke(out, value);\n-    else if(canConvertToVoidPtr && *(fmtEnd-1) == 'p')\n+    else if (canConvertToVoidPtr && *(fmtEnd-1) == 'p')\n         detail::formatValueAsType<T, const void*>::invoke(out, value);\n #ifdef TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n-    else if(detail::formatZeroIntegerWorkaround<T>::invoke(out, value)) /**/;\n+    else if (detail::formatZeroIntegerWorkaround<T>::invoke(out, value)) /**/;\n #endif\n-    else if(ntrunc >= 0)\n-    {\n+    else if (ntrunc >= 0) {\n         // Take care not to overread C strings in truncating conversions like\n         // \"%.4s\" where at most 4 characters may be read.\n         detail::formatTruncated(out, value, ntrunc);\n@@ -351,8 +364,7 @@ inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,\n inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,  \\\n                         const char* fmtEnd, int /**/, charType value) \\\n {                                                                     \\\n-    switch(*(fmtEnd-1))                                               \\\n-    {                                                                 \\\n+    switch (*(fmtEnd-1)) {                                            \\\n         case 'u': case 'd': case 'i': case 'o': case 'X': case 'x':   \\\n             out << static_cast<int>(value); break;                    \\\n         default:                                                      \\\n@@ -490,19 +502,19 @@ namespace detail {\n \n // Type-opaque holder for an argument to format(), with associated actions on\n // the type held as explicit function pointers.  This allows FormatArg's for\n-// each argument to be allocated as a homogenous array inside FormatList\n+// each argument to be allocated as a homogeneous array inside FormatList\n // whereas a naive implementation based on inheritance does not.\n class FormatArg\n {\n     public:\n         FormatArg()\n-             : m_value(nullptr),\n-             m_formatImpl(nullptr),\n-             m_toIntImpl(nullptr)\n-         { }\n+            : m_value(NULL),\n+            m_formatImpl(NULL),\n+            m_toIntImpl(NULL)\n+        { }\n \n         template<typename T>\n-        explicit FormatArg(const T& value)\n+        FormatArg(const T& value)\n             : m_value(static_cast<const void*>(&value)),\n             m_formatImpl(&formatImpl<T>),\n             m_toIntImpl(&toIntImpl<T>)\n@@ -511,15 +523,15 @@ class FormatArg\n         void format(std::ostream& out, const char* fmtBegin,\n                     const char* fmtEnd, int ntrunc) const\n         {\n-            assert(m_value);\n-            assert(m_formatImpl);\n+            TINYFORMAT_ASSERT(m_value);\n+            TINYFORMAT_ASSERT(m_formatImpl);\n             m_formatImpl(out, fmtBegin, fmtEnd, ntrunc, m_value);\n         }\n \n         int toInt() const\n         {\n-            assert(m_value);\n-            assert(m_toIntImpl);\n+            TINYFORMAT_ASSERT(m_value);\n+            TINYFORMAT_ASSERT(m_toIntImpl);\n             return m_toIntImpl(m_value);\n         }\n \n@@ -549,36 +561,68 @@ class FormatArg\n inline int parseIntAndAdvance(const char*& c)\n {\n     int i = 0;\n-    for(;*c >= '0' && *c <= '9'; ++c)\n+    for (;*c >= '0' && *c <= '9'; ++c)\n         i = 10*i + (*c - '0');\n     return i;\n }\n \n-// Print literal part of format string and return next format spec\n-// position.\n+// Parse width or precision `n` from format string pointer `c`, and advance it\n+// to the next character. If an indirection is requested with `*`, the argument\n+// is read from `args[argIndex]` and `argIndex` is incremented (or read\n+// from `args[n]` in positional mode). Returns true if one or more\n+// characters were read.\n+inline bool parseWidthOrPrecision(int& n, const char*& c, bool positionalMode,\n+                                  const detail::FormatArg* args,\n+                                  int& argIndex, int numArgs)\n+{\n+    if (*c >= '0' && *c <= '9') {\n+        n = parseIntAndAdvance(c);\n+    }\n+    else if (*c == '*') {\n+        ++c;\n+        n = 0;\n+        if (positionalMode) {\n+            int pos = parseIntAndAdvance(c) - 1;\n+            if (*c != '$')\n+                TINYFORMAT_ERROR(\"tinyformat: Non-positional argument used after a positional one\");\n+            if (pos >= 0 && pos < numArgs)\n+                n = args[pos].toInt();\n+            else\n+                TINYFORMAT_ERROR(\"tinyformat: Positional argument out of range\");\n+            ++c;\n+        }\n+        else {\n+            if (argIndex < numArgs)\n+                n = args[argIndex++].toInt();\n+            else\n+                TINYFORMAT_ERROR(\"tinyformat: Not enough arguments to read variable width or precision\");\n+        }\n+    }\n+    else {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+// Print literal part of format string and return next format spec position.\n //\n-// Skips over any occurrences of '%%', printing a literal '%' to the\n-// output.  The position of the first % character of the next\n-// nontrivial format spec is returned, or the end of string.\n+// Skips over any occurrences of '%%', printing a literal '%' to the output.\n+// The position of the first % character of the next nontrivial format spec is\n+// returned, or the end of string.\n inline const char* printFormatStringLiteral(std::ostream& out, const char* fmt)\n {\n     const char* c = fmt;\n-    for(;; ++c)\n-    {\n-        switch(*c)\n-        {\n-            case '\\0':\n-                out.write(fmt, c - fmt);\n+    for (;; ++c) {\n+        if (*c == '\\0') {\n+            out.write(fmt, c - fmt);\n+            return c;\n+        }\n+        else if (*c == '%') {\n+            out.write(fmt, c - fmt);\n+            if (*(c+1) != '%')\n                 return c;\n-            case '%':\n-                out.write(fmt, c - fmt);\n-                if(*(c+1) != '%')\n-                    return c;\n-                // for \"%%\", tack trailing % onto next literal section.\n-                fmt = ++c;\n-                break;\n-            default:\n-                break;\n+            // for \"%%\", tack trailing % onto next literal section.\n+            fmt = ++c;\n         }\n     }\n }\n@@ -587,23 +631,43 @@ inline const char* printFormatStringLiteral(std::ostream& out, const char* fmt)\n // Parse a format string and set the stream state accordingly.\n //\n // The format mini-language recognized here is meant to be the one from C99,\n-// with the form \"%[flags][width][.precision][length]type\".\n+// with the form \"%[flags][width][.precision][length]type\" with POSIX\n+// positional arguments extension.\n+//\n+// POSIX positional arguments extension:\n+// Conversions can be applied to the nth argument after the format in\n+// the argument list, rather than to the next unused argument. In this case,\n+// the conversion specifier character % (see below) is replaced by the sequence\n+// \"%n$\", where n is a decimal integer in the range [1,{NL_ARGMAX}],\n+// giving the position of the argument in the argument list. This feature\n+// provides for the definition of format strings that select arguments\n+// in an order appropriate to specific languages.\n+//\n+// The format can contain either numbered argument conversion specifications\n+// (that is, \"%n$\" and \"*m$\"), or unnumbered argument conversion specifications\n+// (that is, % and * ), but not both. The only exception to this is that %%\n+// can be mixed with the \"%n$\" form. The results of mixing numbered and\n+// unnumbered argument specifications in a format string are undefined.\n+// When numbered argument specifications are used, specifying the Nth argument\n+// requires that all the leading arguments, from the first to the (N-1)th,\n+// are specified in the format string.\n+//\n+// In format strings containing the \"%n$\" form of conversion specification,\n+// numbered arguments in the argument list can be referenced from the format\n+// string as many times as required.\n //\n // Formatting options which can't be natively represented using the ostream\n // state are returned in spacePadPositive (for space padded positive numbers)\n // and ntrunc (for truncating conversions).  argIndex is incremented if\n // necessary to pull out variable width and precision.  The function returns a\n // pointer to the character after the end of the current format spec.\n-inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositive,\n+inline const char* streamStateFromFormat(std::ostream& out, bool& positionalMode,\n+                                         bool& spacePadPositive,\n                                          int& ntrunc, const char* fmtStart,\n-                                         const detail::FormatArg* formatters,\n-                                         int& argIndex, int numFormatters)\n+                                         const detail::FormatArg* args,\n+                                         int& argIndex, int numArgs)\n {\n-    if(*fmtStart != '%')\n-    {\n-        TINYFORMAT_ERROR(\"tinyformat: Not enough conversion specifiers in format string\");\n-        return fmtStart;\n-    }\n+    TINYFORMAT_ASSERT(*fmtStart == '%');\n     // Reset stream state to defaults.\n     out.width(0);\n     out.precision(6);\n@@ -616,100 +680,113 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositi\n     bool widthSet = false;\n     int widthExtra = 0;\n     const char* c = fmtStart + 1;\n-    // 1) Parse flags\n-    for(;; ++c)\n-    {\n-        switch(*c)\n-        {\n-            case '#':\n-                out.setf(std::ios::showpoint | std::ios::showbase);\n-                continue;\n-            case '0':\n-                // overridden by left alignment ('-' flag)\n-                if(!(out.flags() & std::ios::left))\n-                {\n-                    // Use internal padding so that numeric values are\n-                    // formatted correctly, eg -00010 rather than 000-10\n-                    out.fill('0');\n-                    out.setf(std::ios::internal, std::ios::adjustfield);\n-                }\n-                continue;\n-            case '-':\n-                out.fill(' ');\n-                out.setf(std::ios::left, std::ios::adjustfield);\n-                continue;\n-            case ' ':\n-                // overridden by show positive sign, '+' flag.\n-                if(!(out.flags() & std::ios::showpos))\n-                    spacePadPositive = true;\n-                continue;\n-            case '+':\n-                out.setf(std::ios::showpos);\n-                spacePadPositive = false;\n-                widthExtra = 1;\n-                continue;\n-            default:\n-                break;\n+\n+    // 1) Parse an argument index (if followed by '$') or a width possibly\n+    // preceded with '0' flag.\n+    if (*c >= '0' && *c <= '9') {\n+        const char tmpc = *c;\n+        int value = parseIntAndAdvance(c);\n+        if (*c == '$') {\n+            // value is an argument index\n+            if (value > 0 && value <= numArgs)\n+                argIndex = value - 1;\n+            else\n+                TINYFORMAT_ERROR(\"tinyformat: Positional argument out of range\");\n+            ++c;\n+            positionalMode = true;\n+        }\n+        else if (positionalMode) {\n+            TINYFORMAT_ERROR(\"tinyformat: Non-positional argument used after a positional one\");\n+        }\n+        else {\n+            if (tmpc == '0') {\n+                // Use internal padding so that numeric values are\n+                // formatted correctly, eg -00010 rather than 000-10\n+                out.fill('0');\n+                out.setf(std::ios::internal, std::ios::adjustfield);\n+            }\n+            if (value != 0) {\n+                // Nonzero value means that we parsed width.\n+                widthSet = true;\n+                out.width(value);\n+            }\n         }\n-        break;\n     }\n-    // 2) Parse width\n-    if(*c >= '0' && *c <= '9')\n-    {\n-        widthSet = true;\n-        out.width(parseIntAndAdvance(c));\n+    else if (positionalMode) {\n+        TINYFORMAT_ERROR(\"tinyformat: Non-positional argument used after a positional one\");\n     }\n-    if(*c == '*')\n-    {\n-        widthSet = true;\n+    // 2) Parse flags and width if we did not do it in previous step.\n+    if (!widthSet) {\n+        // Parse flags\n+        for (;; ++c) {\n+            switch (*c) {\n+                case '#':\n+                    out.setf(std::ios::showpoint | std::ios::showbase);\n+                    continue;\n+                case '0':\n+                    // overridden by left alignment ('-' flag)\n+                    if (!(out.flags() & std::ios::left)) {\n+                        // Use internal padding so that numeric values are\n+                        // formatted correctly, eg -00010 rather than 000-10\n+                        out.fill('0');\n+                        out.setf(std::ios::internal, std::ios::adjustfield);\n+                    }\n+                    continue;\n+                case '-':\n+                    out.fill(' ');\n+                    out.setf(std::ios::left, std::ios::adjustfield);\n+                    continue;\n+                case ' ':\n+                    // overridden by show positive sign, '+' flag.\n+                    if (!(out.flags() & std::ios::showpos))\n+                        spacePadPositive = true;\n+                    continue;\n+                case '+':\n+                    out.setf(std::ios::showpos);\n+                    spacePadPositive = false;\n+                    widthExtra = 1;\n+                    continue;\n+                default:\n+                    break;\n+            }\n+            break;\n+        }\n+        // Parse width\n         int width = 0;\n-        if(argIndex < numFormatters)\n-            width = formatters[argIndex++].toInt();\n-        else\n-            TINYFORMAT_ERROR(\"tinyformat: Not enough arguments to read variable width\");\n-        if(width < 0)\n-        {\n-            // negative widths correspond to '-' flag set\n-            out.fill(' ');\n-            out.setf(std::ios::left, std::ios::adjustfield);\n-            width = -width;\n+        widthSet = parseWidthOrPrecision(width, c, positionalMode,\n+                                         args, argIndex, numArgs);\n+        if (widthSet) {\n+            if (width < 0) {\n+                // negative widths correspond to '-' flag set\n+                out.fill(' ');\n+                out.setf(std::ios::left, std::ios::adjustfield);\n+                width = -width;\n+            }\n+            out.width(width);\n         }\n-        out.width(width);\n-        ++c;\n     }\n     // 3) Parse precision\n-    if(*c == '.')\n-    {\n+    if (*c == '.') {\n         ++c;\n         int precision = 0;\n-        if(*c == '*')\n-        {\n-            ++c;\n-            if(argIndex < numFormatters)\n-                precision = formatters[argIndex++].toInt();\n-            else\n-                TINYFORMAT_ERROR(\"tinyformat: Not enough arguments to read variable precision\");\n-        }\n-        else\n-        {\n-            if(*c >= '0' && *c <= '9')\n-                precision = parseIntAndAdvance(c);\n-            else if(*c == '-') // negative precisions ignored, treated as zero.\n-                parseIntAndAdvance(++c);\n-        }\n-        out.precision(precision);\n-        precisionSet = true;\n+        parseWidthOrPrecision(precision, c, positionalMode,\n+                              args, argIndex, numArgs);\n+        // Presence of `.` indicates precision set, unless the inferred value\n+        // was negative in which case the default is used.\n+        precisionSet = precision >= 0;\n+        if (precisionSet)\n+            out.precision(precision);\n     }\n     // 4) Ignore any C99 length modifier\n-    while(*c == 'l' || *c == 'h' || *c == 'L' ||\n-          *c == 'j' || *c == 'z' || *c == 't')\n+    while (*c == 'l' || *c == 'h' || *c == 'L' ||\n+           *c == 'j' || *c == 'z' || *c == 't') {\n         ++c;\n+    }\n     // 5) We're up to the conversion specifier character.\n     // Set stream flags based on conversion specifier (thanks to the\n     // boost::format class for forging the way here).\n     bool intConversion = false;\n-    switch(*c)\n-    {\n+    switch (*c) {\n         case 'u': case 'd': case 'i':\n             out.setf(std::ios::dec, std::ios::basefield);\n             intConversion = true;\n@@ -738,6 +815,18 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositi\n         case 'f':\n             out.setf(std::ios::fixed, std::ios::floatfield);\n             break;\n+        case 'A':\n+            out.setf(std::ios::uppercase);\n+            // Falls through\n+        case 'a':\n+#           ifdef _MSC_VER\n+            // Workaround https://developercommunity.visualstudio.com/content/problem/520472/hexfloat-stream-output-does-not-ignore-precision-a.html\n+            // by always setting maximum precision on MSVC to avoid precision\n+            // loss for doubles.\n+            out.precision(13);\n+#           endif\n+            out.setf(std::ios::fixed | std::ios::scientific, std::ios::floatfield);\n+            break;\n         case 'G':\n             out.setf(std::ios::uppercase);\n             // Falls through\n@@ -746,17 +835,13 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositi\n             // As in boost::format, let stream decide float format.\n             out.flags(out.flags() & ~std::ios::floatfield);\n             break;\n-        case 'a': case 'A':\n-            TINYFORMAT_ERROR(\"tinyformat: the %a and %A conversion specs \"\n-                             \"are not supported\");\n-            break;\n         case 'c':\n             // Handled as special case inside formatValue()\n             break;\n         case 's':\n-            if(precisionSet)\n+            if (precisionSet)\n                 ntrunc = static_cast<int>(out.precision());\n-            // Make %s print booleans as \"true\" and \"false\"\n+            // Make %s print Booleans as \"true\" and \"false\"\n             out.setf(std::ios::boolalpha);\n             break;\n         case 'n':\n@@ -770,8 +855,7 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositi\n         default:\n             break;\n     }\n-    if(intConversion && precisionSet && !widthSet)\n-    {\n+    if (intConversion && precisionSet && !widthSet) {\n         // \"precision\" for integers gives the minimum number of digits (to be\n         // padded with zeros on the left).  This isn't really supported by the\n         // iostreams, but we can approximately simulate it with the width if\n@@ -786,35 +870,43 @@ inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositi\n \n //------------------------------------------------------------------------------\n inline void formatImpl(std::ostream& out, const char* fmt,\n-                       const detail::FormatArg* formatters,\n-                       int numFormatters)\n+                       const detail::FormatArg* args,\n+                       int numArgs)\n {\n     // Saved stream state\n     std::streamsize origWidth = out.width();\n     std::streamsize origPrecision = out.precision();\n     std::ios::fmtflags origFlags = out.flags();\n     char origFill = out.fill();\n \n-    for (int argIndex = 0; argIndex < numFormatters; ++argIndex)\n-    {\n-        // Parse the format string\n+    // \"Positional mode\" means all format specs should be of the form \"%n$...\"\n+    // with `n` an integer. We detect this in `streamStateFromFormat`.\n+    bool positionalMode = false;\n+    int argIndex = 0;\n+    while (true) {\n         fmt = printFormatStringLiteral(out, fmt);\n+        if (*fmt == '\\0') {\n+            if (!positionalMode && argIndex < numArgs) {\n+                TINYFORMAT_ERROR(\"tinyformat: Not enough conversion specifiers in format string\");\n+            }\n+            break;\n+        }\n         bool spacePadPositive = false;\n         int ntrunc = -1;\n-        const char* fmtEnd = streamStateFromFormat(out, spacePadPositive, ntrunc, fmt,\n-                                                   formatters, argIndex, numFormatters);\n-        if (argIndex >= numFormatters)\n-        {\n-            // Check args remain after reading any variable width/precision\n-            TINYFORMAT_ERROR(\"tinyformat: Not enough format arguments\");\n+        const char* fmtEnd = streamStateFromFormat(out, positionalMode, spacePadPositive, ntrunc, fmt,\n+                                                   args, argIndex, numArgs);\n+        // NB: argIndex may be incremented by reading variable width/precision\n+        // in `streamStateFromFormat`, so do the bounds check here.\n+        if (argIndex >= numArgs) {\n+            TINYFORMAT_ERROR(\"tinyformat: Too many conversion specifiers in format string\");\n             return;\n         }\n-        const FormatArg& arg = formatters[argIndex];\n+        const FormatArg& arg = args[argIndex];\n         // Format the arg into the stream.\n-        if(!spacePadPositive)\n+        if (!spacePadPositive) {\n             arg.format(out, fmt, fmtEnd, ntrunc);\n-        else\n-        {\n+        }\n+        else {\n             // The following is a special case with no direct correspondence\n             // between stream formatting and the printf() behaviour.  Simulate\n             // it crudely by formatting into a temporary string stream and\n@@ -824,18 +916,17 @@ inline void formatImpl(std::ostream& out, const char* fmt,\n             tmpStream.setf(std::ios::showpos);\n             arg.format(tmpStream, fmt, fmtEnd, ntrunc);\n             std::string result = tmpStream.str(); // allocates... yuck.\n-            for(size_t i = 0, iend = result.size(); i < iend; ++i)\n-                if(result[i] == '+') result[i] = ' ';\n+            for (size_t i = 0, iend = result.size(); i < iend; ++i) {\n+                if (result[i] == '+')\n+                    result[i] = ' ';\n+            }\n             out << result;\n         }\n+        if (!positionalMode)\n+            ++argIndex;\n         fmt = fmtEnd;\n     }\n \n-    // Print remaining part of format string.\n-    fmt = printFormatStringLiteral(out, fmt);\n-    if(*fmt != '\\0')\n-        TINYFORMAT_ERROR(\"tinyformat: Too many conversion specifiers in format string\");\n-\n     // Restore stream state\n     out.width(origWidth);\n     out.precision(origPrecision);\n@@ -855,14 +946,14 @@ inline void formatImpl(std::ostream& out, const char* fmt,\n class FormatList\n {\n     public:\n-        FormatList(detail::FormatArg* formatters, int N)\n-            : m_formatters(formatters), m_N(N) { }\n+        FormatList(detail::FormatArg* args, int N)\n+            : m_args(args), m_N(N) { }\n \n         friend void vformat(std::ostream& out, const char* fmt,\n                             const FormatList& list);\n \n     private:\n-        const detail::FormatArg* m_formatters;\n+        const detail::FormatArg* m_args;\n         int m_N;\n };\n \n@@ -879,29 +970,33 @@ class FormatListN : public FormatList\n     public:\n #ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n         template<typename... Args>\n-        explicit FormatListN(const Args&... args)\n+        FormatListN(const Args&... args)\n             : FormatList(&m_formatterStore[0], N),\n             m_formatterStore { FormatArg(args)... }\n         { static_assert(sizeof...(args) == N, \"Number of args must be N\"); }\n #else // C++98 version\n         void init(int) {}\n-#       define TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR(n)       \\\n-                                                               \\\n-        template<TINYFORMAT_ARGTYPES(n)>                       \\\n-        explicit FormatListN(TINYFORMAT_VARARGS(n))            \\\n-            : FormatList(&m_formatterStore[0], n)              \\\n-        { assert(n == N); init(0, TINYFORMAT_PASSARGS(n)); }   \\\n-                                                               \\\n-        template<TINYFORMAT_ARGTYPES(n)>                       \\\n-        void init(int i, TINYFORMAT_VARARGS(n))                \\\n-        {                                                      \\\n-            m_formatterStore[i] = FormatArg(v1);               \\\n-            init(i+1 TINYFORMAT_PASSARGS_TAIL(n));             \\\n+#       define TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR(n)                \\\n+                                                                        \\\n+        template<TINYFORMAT_ARGTYPES(n)>                                \\\n+        FormatListN(TINYFORMAT_VARARGS(n))                              \\\n+            : FormatList(&m_formatterStore[0], n)                       \\\n+        { TINYFORMAT_ASSERT(n == N); init(0, TINYFORMAT_PASSARGS(n)); } \\\n+                                                                        \\\n+        template<TINYFORMAT_ARGTYPES(n)>                                \\\n+        void init(int i, TINYFORMAT_VARARGS(n))                         \\\n+        {                                                               \\\n+            m_formatterStore[i] = FormatArg(v1);                        \\\n+            init(i+1 TINYFORMAT_PASSARGS_TAIL(n));                      \\\n         }\n \n         TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR)\n #       undef TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR\n #endif\n+        FormatListN(const FormatListN& other)\n+            : FormatList(&m_formatterStore[0], N)\n+        { std::copy(&other.m_formatterStore[0], &other.m_formatterStore[N],\n+                    &m_formatterStore[0]); }\n \n     private:\n         FormatArg m_formatterStore[N];\n@@ -956,7 +1051,7 @@ TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_MAKEFORMATLIST)\n /// list of format arguments is held in a single function argument.\n inline void vformat(std::ostream& out, const char* fmt, FormatListRef list)\n {\n-    detail::formatImpl(out, fmt, list.m_formatters, list.m_N);\n+    detail::formatImpl(out, fmt, list.m_args, list.m_N);\n }\n \n \n@@ -993,6 +1088,7 @@ void printfln(const char* fmt, const Args&... args)\n     std::cout << '\\n';\n }\n \n+\n #else // C++98 version\n \n inline void format(std::ostream& out, const char* fmt)\n@@ -1063,6 +1159,7 @@ std::string format(const std::string &fmt, const Args&... args)\n \n } // namespace tinyformat\n \n+// Added for Bitcoin Core:\n /** Format arguments and return the string or write to given std::ostream (see tinyformat::format doc for details) */\n #define strprintf tfm::format\n "
      }
    ]
  },
  {
    "sha": "74c6ad3aabdd278aed05c73f288e254df55792d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGM2YWQzYWFiZGQyNzhhZWQwNWM3M2YyODhlMjU0ZGY1NTc5MmQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T20:07:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T20:07:36Z"
      },
      "message": "Merge #17225: tests: Test serialisation as part of deserialisation fuzzing. Test round-trip equality where possible.\n\n709afb2a7de283a9188e7df51476830012e0a4e5 tests: Test serialisation as part of deserialisation fuzzing. Test round-trip equality where possible. Avoid code repetition. (practicalswift)\n\nPull request description:\n\n  Test serialisation as part of deserialisation fuzzing. Test round-trip equality where possible.\n\nACKs for top commit:\n  MarcoFalke:\n    ACK 709afb2a7de283a9188e7df51476830012e0a4e5 \ud83c\udf72\n\nTree-SHA512: b8c9c24538ee516607608ac685d2e9b01eca5c15213def3fd096b16516db84bfd45516fbee43e25b28cb3481a5d4ec3f7a34713e2da35b2902081ed42b85224d",
      "tree": {
        "sha": "6456f74ccdbf67789db8d04b84750537860154f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6456f74ccdbf67789db8d04b84750537860154f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74c6ad3aabdd278aed05c73f288e254df55792d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjpngv9GfF6t0IKOldCWNWG1OSR9dHlIyHlaV1jd0hLILbHmwFRb3teLwTX4ltP\nzi8vdN4tfau1Bqna93Mjts87cahFKQp4WUzwWy0bDfqKOySwFIw6iXV36Jlmd/2e\nLqIKpGqITISJHVMSt0LZtb9q8TTVZbY4njpKd7sUJ/10WczjHQLqQvyZczOJkhX0\nGwJIIjqlPHMfgpWsV1sKpAKPhqrwj7vq4h0warIfmWm7/DeXLpnX9Kl7Z1UyFZhf\nnatoz/GXLHgliU3Ehi3XmsbRfDnecCPfp7LBkq3ts/2TWaO4g8vfBwYIUPcy97gr\n2uOC5NvzikBvJXbWDP3gae1LOM3vTzYffjg48ho+LxuyQiJVS0c5Ch4ggXOYr84D\ncpNuzjvjZOyvv3BTLnJlMXU7V1VFTSPi6Ol3ZrY9zChDEgYR8kdndeDr4wzJUWfq\nH+mqbPEUOQGgBXa6Dqh0JsVEchwh5wmzLey7UvFajU03OHe/VLbTTyRWSHCFrmmt\nZ+m0wvD+\n=a6aZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 6456f74ccdbf67789db8d04b84750537860154f9\nparent 5bf1909dd933e8dc71c4238096c4c36a0f79ce70\nparent 709afb2a7de283a9188e7df51476830012e0a4e5\nauthor MarcoFalke <falke.marco@gmail.com> 1575922050 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575922056 -0500\n\nMerge #17225: tests: Test serialisation as part of deserialisation fuzzing. Test round-trip equality where possible.\n\n709afb2a7de283a9188e7df51476830012e0a4e5 tests: Test serialisation as part of deserialisation fuzzing. Test round-trip equality where possible. Avoid code repetition. (practicalswift)\n\nPull request description:\n\n  Test serialisation as part of deserialisation fuzzing. Test round-trip equality where possible.\n\nACKs for top commit:\n  MarcoFalke:\n    ACK 709afb2a7de283a9188e7df51476830012e0a4e5 \ud83c\udf72\n\nTree-SHA512: b8c9c24538ee516607608ac685d2e9b01eca5c15213def3fd096b16516db84bfd45516fbee43e25b28cb3481a5d4ec3f7a34713e2da35b2902081ed42b85224d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74c6ad3aabdd278aed05c73f288e254df55792d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74c6ad3aabdd278aed05c73f288e254df55792d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74c6ad3aabdd278aed05c73f288e254df55792d5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bf1909dd933e8dc71c4238096c4c36a0f79ce70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bf1909dd933e8dc71c4238096c4c36a0f79ce70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bf1909dd933e8dc71c4238096c4c36a0f79ce70"
      },
      {
        "sha": "709afb2a7de283a9188e7df51476830012e0a4e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/709afb2a7de283a9188e7df51476830012e0a4e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/709afb2a7de283a9188e7df51476830012e0a4e5"
      }
    ],
    "stats": {
      "total": 254,
      "additions": 98,
      "deletions": 156
    },
    "files": [
      {
        "sha": "bd05283b785e3efc3bf7eb2a496d9dd04ca01393",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 98,
        "deletions": 156,
        "changes": 254,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74c6ad3aabdd278aed05c73f288e254df55792d5/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74c6ad3aabdd278aed05c73f288e254df55792d5/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=74c6ad3aabdd278aed05c73f288e254df55792d5",
        "patch": "@@ -22,6 +22,7 @@\n #include <undo.h>\n #include <version.h>\n \n+#include <exception>\n #include <stdexcept>\n #include <stdint.h>\n #include <unistd.h>\n@@ -36,245 +37,186 @@ void initialize()\n     static const auto verify_handle = MakeUnique<ECCVerifyHandle>();\n }\n \n-void test_one_input(const std::vector<uint8_t>& buffer)\n+namespace {\n+\n+struct invalid_fuzzing_input_exception : public std::exception {\n+};\n+\n+template <typename T>\n+CDataStream Serialize(const T& obj)\n+{\n+    CDataStream ds(SER_NETWORK, INIT_PROTO_VERSION);\n+    ds << obj;\n+    return ds;\n+}\n+\n+template <typename T>\n+T Deserialize(CDataStream ds)\n+{\n+    T obj;\n+    ds >> obj;\n+    return obj;\n+}\n+\n+template <typename T>\n+void DeserializeFromFuzzingInput(const std::vector<uint8_t>& buffer, T& obj)\n {\n     CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n     try {\n-        int nVersion;\n-        ds >> nVersion;\n-        ds.SetVersion(nVersion);\n+        int version;\n+        ds >> version;\n+        ds.SetVersion(version);\n     } catch (const std::ios_base::failure&) {\n-        return;\n+        throw invalid_fuzzing_input_exception();\n     }\n-\n-#if BLOCK_FILTER_DESERIALIZE\n     try {\n-        BlockFilter block_filter;\n-        ds >> block_filter;\n+        ds >> obj;\n     } catch (const std::ios_base::failure&) {\n+        throw invalid_fuzzing_input_exception();\n     }\n-#elif ADDR_INFO_DESERIALIZE\n+    assert(buffer.empty() || !Serialize(obj).empty());\n+}\n+\n+template <typename T>\n+void AssertEqualAfterSerializeDeserialize(const T& obj)\n+{\n+    assert(Deserialize<T>(Serialize(obj)) == obj);\n+}\n+\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n     try {\n+#if BLOCK_FILTER_DESERIALIZE\n+        BlockFilter block_filter;\n+        DeserializeFromFuzzingInput(buffer, block_filter);\n+#elif ADDR_INFO_DESERIALIZE\n         CAddrInfo addr_info;\n-        ds >> addr_info;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, addr_info);\n #elif BLOCK_FILE_INFO_DESERIALIZE\n-    try {\n         CBlockFileInfo block_file_info;\n-        ds >> block_file_info;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, block_file_info);\n #elif BLOCK_HEADER_AND_SHORT_TXIDS_DESERIALIZE\n-    try {\n         CBlockHeaderAndShortTxIDs block_header_and_short_txids;\n-        ds >> block_header_and_short_txids;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, block_header_and_short_txids);\n #elif FEE_RATE_DESERIALIZE\n-    try {\n         CFeeRate fee_rate;\n-        ds >> fee_rate;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, fee_rate);\n+        AssertEqualAfterSerializeDeserialize(fee_rate);\n #elif MERKLE_BLOCK_DESERIALIZE\n-    try {\n         CMerkleBlock merkle_block;\n-        ds >> merkle_block;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, merkle_block);\n #elif OUT_POINT_DESERIALIZE\n-    try {\n         COutPoint out_point;\n-        ds >> out_point;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, out_point);\n+        AssertEqualAfterSerializeDeserialize(out_point);\n #elif PARTIAL_MERKLE_TREE_DESERIALIZE\n-    try {\n         CPartialMerkleTree partial_merkle_tree;\n-        ds >> partial_merkle_tree;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, partial_merkle_tree);\n #elif PUB_KEY_DESERIALIZE\n-    try {\n         CPubKey pub_key;\n-        ds >> pub_key;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, pub_key);\n+        // TODO: The following equivalence should hold for CPubKey? Fix.\n+        // AssertEqualAfterSerializeDeserialize(pub_key);\n #elif SCRIPT_DESERIALIZE\n-    try {\n         CScript script;\n-        ds >> script;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, script);\n #elif SUB_NET_DESERIALIZE\n-    try {\n         CSubNet sub_net;\n-        ds >> sub_net;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, sub_net);\n+        AssertEqualAfterSerializeDeserialize(sub_net);\n #elif TX_IN_DESERIALIZE\n-    try {\n         CTxIn tx_in;\n-        ds >> tx_in;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, tx_in);\n+        AssertEqualAfterSerializeDeserialize(tx_in);\n #elif FLAT_FILE_POS_DESERIALIZE\n-    try {\n         FlatFilePos flat_file_pos;\n-        ds >> flat_file_pos;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, flat_file_pos);\n+        AssertEqualAfterSerializeDeserialize(flat_file_pos);\n #elif KEY_ORIGIN_INFO_DESERIALIZE\n-    try {\n         KeyOriginInfo key_origin_info;\n-        ds >> key_origin_info;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, key_origin_info);\n+        AssertEqualAfterSerializeDeserialize(key_origin_info);\n #elif PARTIALLY_SIGNED_TRANSACTION_DESERIALIZE\n-    try {\n         PartiallySignedTransaction partially_signed_transaction;\n-        ds >> partially_signed_transaction;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, partially_signed_transaction);\n #elif PREFILLED_TRANSACTION_DESERIALIZE\n-    try {\n         PrefilledTransaction prefilled_transaction;\n-        ds >> prefilled_transaction;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, prefilled_transaction);\n #elif PSBT_INPUT_DESERIALIZE\n-    try {\n         PSBTInput psbt_input;\n-        ds >> psbt_input;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, psbt_input);\n #elif PSBT_OUTPUT_DESERIALIZE\n-    try {\n         PSBTOutput psbt_output;\n-        ds >> psbt_output;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, psbt_output);\n #elif BLOCK_DESERIALIZE\n-    try {\n         CBlock block;\n-        ds >> block;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, block);\n #elif BLOCKLOCATOR_DESERIALIZE\n-    try {\n         CBlockLocator bl;\n-        ds >> bl;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, bl);\n #elif BLOCKMERKLEROOT\n-    try {\n         CBlock block;\n-        ds >> block;\n+        DeserializeFromFuzzingInput(buffer, block);\n         bool mutated;\n         BlockMerkleRoot(block, &mutated);\n-    } catch (const std::ios_base::failure&) {\n-    }\n #elif ADDRMAN_DESERIALIZE\n-    try {\n         CAddrMan am;\n-        ds >> am;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, am);\n #elif BLOCKHEADER_DESERIALIZE\n-    try {\n         CBlockHeader bh;\n-        ds >> bh;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, bh);\n #elif BANENTRY_DESERIALIZE\n-    try {\n         CBanEntry be;\n-        ds >> be;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, be);\n #elif TXUNDO_DESERIALIZE\n-    try {\n         CTxUndo tu;\n-        ds >> tu;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, tu);\n #elif BLOCKUNDO_DESERIALIZE\n-    try {\n         CBlockUndo bu;\n-        ds >> bu;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, bu);\n #elif COINS_DESERIALIZE\n-    try {\n         Coin coin;\n-        ds >> coin;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, coin);\n #elif NETADDR_DESERIALIZE\n-    try {\n         CNetAddr na;\n-        ds >> na;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, na);\n+        AssertEqualAfterSerializeDeserialize(na);\n #elif SERVICE_DESERIALIZE\n-    try {\n         CService s;\n-        ds >> s;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, s);\n+        AssertEqualAfterSerializeDeserialize(s);\n #elif MESSAGEHEADER_DESERIALIZE\n-    CMessageHeader::MessageStartChars pchMessageStart = {0x00, 0x00, 0x00, 0x00};\n-    try {\n+        const CMessageHeader::MessageStartChars pchMessageStart = {0x00, 0x00, 0x00, 0x00};\n         CMessageHeader mh(pchMessageStart);\n-        ds >> mh;\n+        DeserializeFromFuzzingInput(buffer, mh);\n         (void)mh.IsValid(pchMessageStart);\n-    } catch (const std::ios_base::failure&) {\n-    }\n #elif ADDRESS_DESERIALIZE\n-    try {\n         CAddress a;\n-        ds >> a;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, a);\n #elif INV_DESERIALIZE\n-    try {\n         CInv i;\n-        ds >> i;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, i);\n #elif BLOOMFILTER_DESERIALIZE\n-    try {\n         CBloomFilter bf;\n-        ds >> bf;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, bf);\n #elif DISKBLOCKINDEX_DESERIALIZE\n-    try {\n         CDiskBlockIndex dbi;\n-        ds >> dbi;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, dbi);\n #elif TXOUTCOMPRESSOR_DESERIALIZE\n-    CTxOut to;\n-    CTxOutCompressor toc(to);\n-    try {\n-        ds >> toc;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        CTxOut to;\n+        CTxOutCompressor toc(to);\n+        DeserializeFromFuzzingInput(buffer, toc);\n #elif BLOCKTRANSACTIONS_DESERIALIZE\n-    try {\n         BlockTransactions bt;\n-        ds >> bt;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, bt);\n #elif BLOCKTRANSACTIONSREQUEST_DESERIALIZE\n-    try {\n         BlockTransactionsRequest btr;\n-        ds >> btr;\n-    } catch (const std::ios_base::failure&) {\n-    }\n+        DeserializeFromFuzzingInput(buffer, btr);\n #else\n #error Need at least one fuzz target to compile\n #endif\n+    } catch (const invalid_fuzzing_input_exception&) {\n+    }\n }"
      }
    ]
  },
  {
    "sha": "347dd76ec87ddbd1913dc7b57729793ac3bb1ab9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDdkZDc2ZWM4N2RkYmQxOTEzZGM3YjU3NzI5NzkzYWMzYmIxYWI5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T20:11:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T20:12:08Z"
      },
      "message": "Merge #17093: tests: Add fuzzing harness for various CTx{In,Out} related functions\n\nd5766f223f627bf2eb731ce8552dfafa2b824378 tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus (practicalswift)\ne75ecb91c730115290e1201371492c2cd334e9b4 tests: Add fuzzing harness for various CTxOut related functions (practicalswift)\nce935292c041162e160d95fc6afeda3dceded2cf tests: Add fuzzing harness for various CTxIn related functions (practicalswift)\n\nPull request description:\n\n  Add fuzzing harness for various `CTx{In,Out}` related functions.\n\n  **Testing this PR**\n\n  Run:\n\n  ```\n  $ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n  $ make\n  $ src/test/fuzz/tx_in\n  \u2026\n  $ src/test/fuzz/tx_out\n  \u2026\n  # And to to quickly verify that the relevant code regions are triggered, that the\n  # fuzzing throughput seems reasonable, etc.\n  $ contrib/devtools/test_fuzzing_harnesses.sh '^tx_'\n  ```\n\n  `test_fuzzing_harnesses.sh` can be found in PR #17000.\n\nTop commit has no ACKs.\n\nTree-SHA512: f1374307a2581ebc3968d012ea2438061bbb84ece068e584fae9750669a6cd003723dde14db88e77c9579281ecd4eaa2a7ff0614f253d8c075e6dd16dd2e68d5",
      "tree": {
        "sha": "186d999201d7265d1920d71f0723c88f9b84a4f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/186d999201d7265d1920d71f0723c88f9b84a4f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgUmAv/aEpfaDwO6ngTDMMipA523z9GVG514XmbbQOj2xDz5Jy2xjSoUixWuunI\nlzmqnCh1ChicmZqwxmaJt0TiYRoAasVxugdN8GlMgPOLwZ0QEtZIz4ywtkxh6fGk\njDNZWXn+qFhlhS2dxAM5k8zNfKbnURXIwiEmAWGPboYYzU9yKXuqxa82IBtaRSjS\ne61n31wJwLjBbI1QvzxbDzpSvMvRpxrycwPHpnGohXbwbyL1xXbDqmf3M2INutt1\nWzV2546kGlVmf06gj7AjX5L/hqpcKvu79w5LmTZznbtNJDecLsb61/H7fAn65RWe\nyfgFjiiuiB8ZO8RvjZqzLKEKAx3j2fbJVXAhCL3deg3UDqT4efIdPu+6vGQa4AXV\nTFYe6TlzSVmR94QawGb7fjTU8LteI9OmTIgYFuAjPxKR8SUx0jlzzW3k0ksF87YU\nj0UtVrF862CunJoigtinQ3r8y9hKxMmuZGwPdKc+7zIgUNyaYC0DLZsNvIIqXv0e\nvHIEnQ4r\n=C2+o\n-----END PGP SIGNATURE-----",
        "payload": "tree 186d999201d7265d1920d71f0723c88f9b84a4f8\nparent 74c6ad3aabdd278aed05c73f288e254df55792d5\nparent d5766f223f627bf2eb731ce8552dfafa2b824378\nauthor MarcoFalke <falke.marco@gmail.com> 1575922319 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575922328 -0500\n\nMerge #17093: tests: Add fuzzing harness for various CTx{In,Out} related functions\n\nd5766f223f627bf2eb731ce8552dfafa2b824378 tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus (practicalswift)\ne75ecb91c730115290e1201371492c2cd334e9b4 tests: Add fuzzing harness for various CTxOut related functions (practicalswift)\nce935292c041162e160d95fc6afeda3dceded2cf tests: Add fuzzing harness for various CTxIn related functions (practicalswift)\n\nPull request description:\n\n  Add fuzzing harness for various `CTx{In,Out}` related functions.\n\n  **Testing this PR**\n\n  Run:\n\n  ```\n  $ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n  $ make\n  $ src/test/fuzz/tx_in\n  \u2026\n  $ src/test/fuzz/tx_out\n  \u2026\n  # And to to quickly verify that the relevant code regions are triggered, that the\n  # fuzzing throughput seems reasonable, etc.\n  $ contrib/devtools/test_fuzzing_harnesses.sh '^tx_'\n  ```\n\n  `test_fuzzing_harnesses.sh` can be found in PR #17000.\n\nTop commit has no ACKs.\n\nTree-SHA512: f1374307a2581ebc3968d012ea2438061bbb84ece068e584fae9750669a6cd003723dde14db88e77c9579281ecd4eaa2a7ff0614f253d8c075e6dd16dd2e68d5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74c6ad3aabdd278aed05c73f288e254df55792d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74c6ad3aabdd278aed05c73f288e254df55792d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74c6ad3aabdd278aed05c73f288e254df55792d5"
      },
      {
        "sha": "d5766f223f627bf2eb731ce8552dfafa2b824378",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5766f223f627bf2eb731ce8552dfafa2b824378",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5766f223f627bf2eb731ce8552dfafa2b824378"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 84,
      "deletions": 0
    },
    "files": [
      {
        "sha": "79f2080554cbdffdc70dcee97b89a30fe81f2c01",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=347dd76ec87ddbd1913dc7b57729793ac3bb1ab9",
        "patch": "@@ -47,7 +47,9 @@ FUZZ_TARGETS = \\\n   test/fuzz/spanparsing \\\n   test/fuzz/sub_net_deserialize \\\n   test/fuzz/transaction \\\n+  test/fuzz/tx_in \\\n   test/fuzz/tx_in_deserialize \\\n+  test/fuzz/tx_out \\\n   test/fuzz/txoutcompressor_deserialize \\\n   test/fuzz/txundo_deserialize\n \n@@ -497,6 +499,18 @@ test_fuzz_tx_in_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_tx_in_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_tx_in_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_tx_in_SOURCES = $(FUZZ_SUITE) test/fuzz/tx_in.cpp\n+test_fuzz_tx_in_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_tx_in_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_tx_in_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_tx_in_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_tx_out_SOURCES = $(FUZZ_SUITE) test/fuzz/tx_out.cpp\n+test_fuzz_tx_out_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_tx_out_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_tx_out_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_tx_out_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n endif # ENABLE_FUZZ\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)"
      },
      {
        "sha": "8e116537d1af53a043d8ac1b44e46ca301184176",
        "filename": "src/test/fuzz/tx_in.cpp",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9/src/test/fuzz/tx_in.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9/src/test/fuzz/tx_in.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/tx_in.cpp?ref=347dd76ec87ddbd1913dc7b57729793ac3bb1ab9",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <core_memusage.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <test/fuzz/fuzz.h>\n+#include <version.h>\n+\n+#include <cassert>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n+    CTxIn tx_in;\n+    try {\n+        int version;\n+        ds >> version;\n+        ds.SetVersion(version);\n+        ds >> tx_in;\n+    } catch (const std::ios_base::failure&) {\n+        return;\n+    }\n+\n+    (void)GetTransactionInputWeight(tx_in);\n+    (void)GetVirtualTransactionInputSize(tx_in);\n+    (void)RecursiveDynamicUsage(tx_in);\n+\n+    (void)tx_in.ToString();\n+}"
      },
      {
        "sha": "aa1338d5ba4120ce33c3d55dc28d359e471bb747",
        "filename": "src/test/fuzz/tx_out.cpp",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9/src/test/fuzz/tx_out.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9/src/test/fuzz/tx_out.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/tx_out.cpp?ref=347dd76ec87ddbd1913dc7b57729793ac3bb1ab9",
        "patch": "@@ -0,0 +1,35 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <core_memusage.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <streams.h>\n+#include <test/fuzz/fuzz.h>\n+#include <version.h>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n+    CTxOut tx_out;\n+    try {\n+        int version;\n+        ds >> version;\n+        ds.SetVersion(version);\n+        ds >> tx_out;\n+    } catch (const std::ios_base::failure&) {\n+        return;\n+    }\n+\n+    const CFeeRate dust_relay_fee{DUST_RELAY_TX_FEE};\n+    (void)GetDustThreshold(tx_out, dust_relay_fee);\n+    (void)IsDust(tx_out, dust_relay_fee);\n+    (void)RecursiveDynamicUsage(tx_out);\n+\n+    (void)tx_out.ToString();\n+    (void)tx_out.IsNull();\n+    tx_out.SetNull();\n+    assert(tx_out.IsNull());\n+}"
      },
      {
        "sha": "6bbe45f00f6086ec405125a221beb2b978403878",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=347dd76ec87ddbd1913dc7b57729793ac3bb1ab9",
        "patch": "@@ -32,6 +32,8 @@\n     \"script_deserialize\",\n     \"sub_net_deserialize\",\n     \"tx_in_deserialize\",\n+    \"tx_in\",\n+    \"tx_out\",\n ]\n \n def main():"
      }
    ]
  },
  {
    "sha": "b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmY5ZTM1NzZhMWVhMTg1NzJlNDgwM2FlYjNmMzkzMzBmMGNiNzU5",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-09T20:02:50Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-09T20:14:20Z"
      },
      "message": "test: re-enable CLI test support by using EncodeDecimal in json.dumps()\n\nAs mentioned in\nhttps://github.com/bitcoin/bitcoin/pull/17675#issuecomment-563188648",
      "tree": {
        "sha": "a37a8044b58bd02b1609d7ef86b36bfbe5740980",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a37a8044b58bd02b1609d7ef86b36bfbe5740980"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3uqxwACgkQLuufXMCV\nJsFXcw/6AlIRSF4bmT3gP2IbqQOsJM6woFT8+cr8H2XAS0fQ02X6kUMUv8E1R7ed\ny+Ik+wd3QPF6KM+UH1CBNZDdcs5DhHKJ1hJ5anYrrBSw1uRl4yM6xeHQ9fCrG1M9\nfveRgKI5aWcIRq5Yy96LK+GsgBnYWWkxWBS0iMc9lmnhm70+DSPh4VH1AWHOzYQt\nye2SIhzVhpLOMYF+rSB3mWsxO3pPrQw6utdz20uy/Y1r+CBGCosagkfWubFDnAIM\nnLd2cJhn1rHwNebTMTczt1S3rd6p/HTiXK6dqgURsREMHUPlgYU8eFP6sMbwCdUL\nZ8Bm3U3Z8SnfUlI4vjSMyHqCKmCtRYGGSGM2clziWqGn4a2cXzDvus5Xaw/AVN61\nc2lMpMPJRzedglkxYbV3xiFafyUgup+mhxONupavAhPqYfprYGJvwF3b8YnV4Rbk\nTU6F5EELKtpEpD2Vh76zF8KBGhP26pcotVZkB4cROTbrG60qKJM+lrKrckdfodzI\n6ySLPFv4+tkMs96u400pHU3ojirz0BMzDG2WYTZVSP3Kr4crY08ncV+oB5H9Ic2/\nMHiJm+DAih8CzqEteUiP+bTa+bz6s7lfwyrn5LeX1OqJmMSGAlrVHdg2f4ZB2mzG\n47vDn9jsjenOgFOu07yp7yjSbPvgirNKg61OdofzJ5SBQcCvIBs=\n=vHVb\n-----END PGP SIGNATURE-----",
        "payload": "tree a37a8044b58bd02b1609d7ef86b36bfbe5740980\nparent 347dd76ec87ddbd1913dc7b57729793ac3bb1ab9\nauthor fanquake <fanquake@gmail.com> 1575921770 -0500\ncommitter fanquake <fanquake@gmail.com> 1575922460 -0500\n\ntest: re-enable CLI test support by using EncodeDecimal in json.dumps()\n\nAs mentioned in\nhttps://github.com/bitcoin/bitcoin/pull/17675#issuecomment-563188648\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "347dd76ec87ddbd1913dc7b57729793ac3bb1ab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 7,
      "deletions": 13
    },
    "files": [
      {
        "sha": "82c7e55245cf3024b9edd6486418ad1d64618f4f",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "patch": "@@ -72,7 +72,6 @@ def set_test_params(self):\n                 \"-addresstype=legacy\",\n             ],\n         ]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "0739d7e29b373eb70ef99613413a296ae280b135",
        "filename": "test/functional/mempool_package_onemore.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/mempool_package_onemore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/mempool_package_onemore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_onemore.py?ref=b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "patch": "@@ -19,7 +19,6 @@ class MempoolPackagesTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxorphantx=1000\"]]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "7014105d88a11070007130ee0a074077ef88f79d",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "patch": "@@ -27,7 +27,6 @@ def set_test_params(self):\n             [\"-maxorphantx=1000\"],\n             [\"-maxorphantx=1000\", \"-limitancestorcount={}\".format(MAX_ANCESTORS_CUSTOM)],\n         ]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "6f1ae0d3ba4fbf9188adf2471c1a695469b8bc8b",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "patch": "@@ -31,7 +31,6 @@ def set_test_params(self):\n         # This test isn't testing tx relay. Set whitelist on the peers for\n         # instant tx relay.\n         self.extra_args = [['-whitelist=127.0.0.1']] * self.num_nodes\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "780758e219b4b8c7ecc49156f7815a25d6438445",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "patch": "@@ -15,7 +15,6 @@ class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "8913b8698d84f0d31479db7e351a55608b0b824e",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "patch": "@@ -14,7 +14,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "604c5739404668a9e2f95a323444ddd3b0436bd8",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "patch": "@@ -30,6 +30,7 @@\n     rpc_url,\n     wait_until,\n     p2p_port,\n+    EncodeDecimal,\n )\n \n BITCOIND_PROC_WAIT_TIMEOUT = 60\n@@ -480,7 +481,7 @@ def arg_to_cli(arg):\n     if isinstance(arg, bool):\n         return str(arg).lower()\n     elif isinstance(arg, dict) or isinstance(arg, list):\n-        return json.dumps(arg)\n+        return json.dumps(arg, default=EncodeDecimal)\n     else:\n         return str(arg)\n "
      },
      {
        "sha": "5bb73aee7e6f07b4aee649fb92fb64a3eece96f8",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "patch": "@@ -190,6 +190,11 @@ def check_json_precision():\n     if satoshis != 2000000000000003:\n         raise RuntimeError(\"JSON encode/decode loses precision\")\n \n+def EncodeDecimal(o):\n+    if isinstance(o, Decimal):\n+        return str(o)\n+    raise TypeError(repr(o) + \" is not JSON serializable\")\n+\n def count_bytes(hex_string):\n     return len(bytearray.fromhex(hex_string))\n "
      },
      {
        "sha": "1122daaf837028c8c633164e52e5497fca600631",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "patch": "@@ -26,7 +26,6 @@ class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "a5f9a047edcc917347267a276daac03939e03206",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "patch": "@@ -54,7 +54,6 @@ def set_test_params(self):\n             ['-limitdescendantcount=3'],  # Limit mempool descendants as a hack to have wallet txs rejected from the mempool\n             [],\n         ]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "0c08655833ea88af9b5047a5840e1d3bf0c6808a",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "patch": "@@ -40,7 +40,6 @@ def set_test_params(self):\n             \"-deprecatedrpc=totalFee\",\n             \"-addresstype=bech32\",\n         ] for i in range(self.num_nodes)]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "b8e097c32e9b0b5eaa7d135718b940c81471fb68",
        "filename": "test/functional/wallet_bumpfee_totalfee_deprecation.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/wallet_bumpfee_totalfee_deprecation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/wallet_bumpfee_totalfee_deprecation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee_totalfee_deprecation.py?ref=b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "patch": "@@ -16,7 +16,6 @@ def set_test_params(self):\n             \"-walletrbf={}\".format(i),\n             \"-mintxfee=0.00002\",\n         ] for i in range(self.num_nodes)]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "6f248c9bd3ef46df35d7b8d5175e9ee1aa387e5f",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "patch": "@@ -19,7 +19,6 @@ class ListSinceBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "f48018e9fbe8fc2ae59ad63e5d36bd4db04f4811",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f9e3576a1ea18572e4803aeb3f39330f0cb759/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "patch": "@@ -27,7 +27,6 @@\n class ReorgsRestoreTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  },
  {
    "sha": "1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTg5YjZhY2FiMTE1YTdmZTdiZDY3ZjhiNGM2ZTNmNTVlNTMyNzRl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T20:20:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-09T20:22:27Z"
      },
      "message": "Merge #17109: tests: Add fuzzing harness for various functions consuming only integrals\n\n597d10ceb9fd2a118c7e551cd6263379691d9295 tests: Add fuzzing harness for various functions consuming only integrals (practicalswift)\n575383b3e1361e60ba88738a34d92b1662f915a7 tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus (practicalswift)\n\nPull request description:\n\n  Add fuzzing harness for various functions consuming only integrals.\n\n  **Testing this PR**\n\n  Run:\n\n  ```\n  $ CC=clang CXX=clang++ ./configure --enable-fuzz \\\n        --with-sanitizers=address,fuzzer,undefined\n  $ make\n  $ src/test/fuzz/integer\n  ```\n\nTop commit has no ACKs.\n\nTree-SHA512: f0ccbd63671636f8e661385b682e16ad287fef8f92e7f91327ee2093afc36fcd424e1646fe90279388e28a760bcc795766eb80cf6375e0f873efff37fc7e2393",
      "tree": {
        "sha": "0c02f0f921baf1b505df0ab7e64e79cce3ba38d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c02f0f921baf1b505df0ab7e64e79cce3ba38d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj1Bwv/RAaRKuWH3EB3SauUfXZIEA20PJd0YN7DTZeK7LCJI2NkBDQsE1ZnKwsa\nRGWkPZUsN2yq+CiMXNUYNcGYlvUTum63OQuzU0E91KrOthuYVyF6ykVM2FZLBl2F\nQ6sG6fkEQzk9VXcVhf/BFnjbCvuvqzTtNGCuL7NVv81WuTJr24P+6f94+J60K0bV\n/7MUVp/n1tjPGseWF/AAk8WwHe9uxaTU0tfUEszOH64zMUuxx8jJ1GnnEnf4p9UZ\nnNhm/eN+LC4xvKpt/54lQnPsN8Y8qU6r59SPAxcCtcu2nnlxk4inNB8MG+0kA5IQ\nfk82L4p9F0Yb5+S8yVIX+R7it2FnxKoeTxyrwXXwn7FiiSVf+VXa4rNAoxPWmyef\nAPFA0lKJRqG2NEdmIrBCh2JaX0Bitgyq47z6x2BBGgzJVk8ln3RS7z5daoOfRULt\nf5FD01d29EDVAbBEX/yXpSKWLD/D4GzzkDFeMHjQlPzPPYHLeCX5SLn2LzEtLcLP\nT1B0iFCt\n=4b9h\n-----END PGP SIGNATURE-----",
        "payload": "tree 0c02f0f921baf1b505df0ab7e64e79cce3ba38d9\nparent 347dd76ec87ddbd1913dc7b57729793ac3bb1ab9\nparent 597d10ceb9fd2a118c7e551cd6263379691d9295\nauthor MarcoFalke <falke.marco@gmail.com> 1575922848 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575922947 -0500\n\nMerge #17109: tests: Add fuzzing harness for various functions consuming only integrals\n\n597d10ceb9fd2a118c7e551cd6263379691d9295 tests: Add fuzzing harness for various functions consuming only integrals (practicalswift)\n575383b3e1361e60ba88738a34d92b1662f915a7 tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus (practicalswift)\n\nPull request description:\n\n  Add fuzzing harness for various functions consuming only integrals.\n\n  **Testing this PR**\n\n  Run:\n\n  ```\n  $ CC=clang CXX=clang++ ./configure --enable-fuzz \\\n        --with-sanitizers=address,fuzzer,undefined\n  $ make\n  $ src/test/fuzz/integer\n  ```\n\nTop commit has no ACKs.\n\nTree-SHA512: f0ccbd63671636f8e661385b682e16ad287fef8f92e7f91327ee2093afc36fcd424e1646fe90279388e28a760bcc795766eb80cf6375e0f873efff37fc7e2393\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "347dd76ec87ddbd1913dc7b57729793ac3bb1ab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/347dd76ec87ddbd1913dc7b57729793ac3bb1ab9"
      },
      {
        "sha": "597d10ceb9fd2a118c7e551cd6263379691d9295",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/597d10ceb9fd2a118c7e551cd6263379691d9295",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/597d10ceb9fd2a118c7e551cd6263379691d9295"
      }
    ],
    "stats": {
      "total": 135,
      "additions": 135,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6edbe7777616f64bc4f34804052ad6557f4a825c",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
        "patch": "@@ -26,6 +26,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/eval_script \\\n   test/fuzz/fee_rate_deserialize \\\n   test/fuzz/flat_file_pos_deserialize \\\n+  test/fuzz/integer \\\n   test/fuzz/inv_deserialize \\\n   test/fuzz/key_origin_info_deserialize \\\n   test/fuzz/merkle_block_deserialize \\\n@@ -367,6 +368,12 @@ test_fuzz_eval_script_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_eval_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_eval_script_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_integer_SOURCES = $(FUZZ_SUITE) test/fuzz/integer.cpp\n+test_fuzz_integer_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_integer_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_integer_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_integer_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n test_fuzz_txoutcompressor_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_txoutcompressor_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXOUTCOMPRESSOR_DESERIALIZE=1\n test_fuzz_txoutcompressor_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "723938bcdb7b13447ad1470cf59836ed6079f107",
        "filename": "src/test/fuzz/integer.cpp",
        "status": "added",
        "additions": 127,
        "deletions": 0,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e/src/test/fuzz/integer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e/src/test/fuzz/integer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/integer.cpp?ref=1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
        "patch": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <compressor.h>\n+#include <consensus/merkle.h>\n+#include <core_io.h>\n+#include <crypto/common.h>\n+#include <crypto/siphash.h>\n+#include <key_io.h>\n+#include <memusage.h>\n+#include <netbase.h>\n+#include <policy/settings.h>\n+#include <pow.h>\n+#include <pubkey.h>\n+#include <rpc/util.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+\n+#include <cassert>\n+#include <limits>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() < sizeof(uint256) + sizeof(uint160)) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const uint256 u256(fuzzed_data_provider.ConsumeBytes<unsigned char>(sizeof(uint256)));\n+    const uint160 u160(fuzzed_data_provider.ConsumeBytes<unsigned char>(sizeof(uint160)));\n+    const uint64_t u64 = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+    const int64_t i64 = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+    const uint32_t u32 = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+    const int32_t i32 = fuzzed_data_provider.ConsumeIntegral<int32_t>();\n+    const uint16_t u16 = fuzzed_data_provider.ConsumeIntegral<uint16_t>();\n+    const int16_t i16 = fuzzed_data_provider.ConsumeIntegral<int16_t>();\n+    const uint8_t u8 = fuzzed_data_provider.ConsumeIntegral<uint8_t>();\n+    const int8_t i8 = fuzzed_data_provider.ConsumeIntegral<int8_t>();\n+    // We cannot assume a specific value of std::is_signed<char>::value:\n+    // ConsumeIntegral<char>() instead of casting from {u,}int8_t.\n+    const char ch = fuzzed_data_provider.ConsumeIntegral<char>();\n+\n+    const Consensus::Params& consensus_params = Params().GetConsensus();\n+    (void)CheckProofOfWork(u256, u32, consensus_params);\n+    (void)CompressAmount(u64);\n+    static const uint256 u256_min(uint256S(\"0000000000000000000000000000000000000000000000000000000000000000\"));\n+    static const uint256 u256_max(uint256S(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\n+    const std::vector<uint256> v256{u256, u256_min, u256_max};\n+    (void)ComputeMerkleRoot(v256);\n+    (void)CountBits(u64);\n+    (void)DecompressAmount(u64);\n+    (void)FormatISO8601Date(i64);\n+    (void)FormatISO8601DateTime(i64);\n+    (void)GetSizeOfCompactSize(u64);\n+    (void)GetSpecialScriptSize(u32);\n+    // (void)GetVirtualTransactionSize(i64, i64); // function defined only for a subset of int64_t inputs\n+    // (void)GetVirtualTransactionSize(i64, i64, u32); // function defined only for a subset of int64_t/uint32_t inputs\n+    (void)HexDigit(ch);\n+    (void)i64tostr(i64);\n+    (void)IsDigit(ch);\n+    (void)IsSpace(ch);\n+    (void)IsSwitchChar(ch);\n+    (void)itostr(i32);\n+    (void)memusage::DynamicUsage(ch);\n+    (void)memusage::DynamicUsage(i16);\n+    (void)memusage::DynamicUsage(i32);\n+    (void)memusage::DynamicUsage(i64);\n+    (void)memusage::DynamicUsage(i8);\n+    (void)memusage::DynamicUsage(u16);\n+    (void)memusage::DynamicUsage(u32);\n+    (void)memusage::DynamicUsage(u64);\n+    (void)memusage::DynamicUsage(u8);\n+    const unsigned char uch = static_cast<unsigned char>(u8);\n+    (void)memusage::DynamicUsage(uch);\n+    (void)MillisToTimeval(i64);\n+    const double d = ser_uint64_to_double(u64);\n+    assert(ser_double_to_uint64(d) == u64);\n+    const float f = ser_uint32_to_float(u32);\n+    assert(ser_float_to_uint32(f) == u32);\n+    (void)SighashToStr(uch);\n+    (void)SipHashUint256(u64, u64, u256);\n+    (void)SipHashUint256Extra(u64, u64, u256, u32);\n+    (void)ToLower(ch);\n+\n+    const arith_uint256 au256 = UintToArith256(u256);\n+    assert(ArithToUint256(au256) == u256);\n+    assert(uint256S(au256.GetHex()) == u256);\n+    (void)au256.bits();\n+    (void)au256.GetCompact(/* fNegative= */ false);\n+    (void)au256.GetCompact(/* fNegative= */ true);\n+    (void)au256.getdouble();\n+    (void)au256.GetHex();\n+    (void)au256.GetLow64();\n+    (void)au256.size();\n+    (void)au256.ToString();\n+\n+    const CKeyID key_id{u160};\n+    const CScriptID script_id{u160};\n+    // CTxDestination = CNoDestination \u222a PKHash \u222a ScriptHash \u222a WitnessV0ScriptHash \u222a WitnessV0KeyHash \u222a WitnessUnknown\n+    const PKHash pk_hash{u160};\n+    const ScriptHash script_hash{u160};\n+    const WitnessV0KeyHash witness_v0_key_hash{u160};\n+    const WitnessV0ScriptHash witness_v0_script_hash{u256};\n+    const std::vector<CTxDestination> destinations{pk_hash, script_hash, witness_v0_key_hash, witness_v0_script_hash};\n+    const SigningProvider store;\n+    for (const CTxDestination& destination : destinations) {\n+        (void)DescribeAddress(destination);\n+        (void)EncodeDestination(destination);\n+        (void)GetKeyForDestination(store, destination);\n+        (void)GetScriptForDestination(destination);\n+        (void)IsValidDestination(destination);\n+    }\n+}"
      },
      {
        "sha": "f6d84a1dcdf0ac38114705c912d4496d4875a77b",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
        "patch": "@@ -20,6 +20,7 @@\n     \"block_header_and_short_txids_deserialize\",\n     \"fee_rate_deserialize\",\n     \"flat_file_pos_deserialize\",\n+    \"integer\",\n     \"key_origin_info_deserialize\",\n     \"merkle_block_deserialize\",\n     \"out_point_deserialize\","
      }
    ]
  },
  {
    "sha": "8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGRjYmI0ZTQxZmE5MWU3ZjgwZWZlNmQ5YzRkNWU5YmIxMzU1MDM2",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-10T13:35:10Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-10T13:35:10Z"
      },
      "message": "build: Remove backticks from configure.ac",
      "tree": {
        "sha": "631571eed31b85a86926ae11c997ce1a99e995d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/631571eed31b85a86926ae11c997ce1a99e995d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3vnw4ACgkQLuufXMCV\nJsF8WRAApKiLFz+DER5huWfMSjTj8mq2n9OlSaH19z4v3Eif3/FjN2ohUlho34/9\nFvELHU0JbeexHpKP5mKX3Zz50DlMcQachpVq6gaGG4GGMAPuxMoKMhB69Wz7vb95\npilgaFOi+IoOtPrYu11KBShiP0ZE9S7WMY3Qjeq1B9ETFG2bDWSohJcYHgnXF33g\nMfX1Gzk6SLZkTUyic956bD7LWDJwQDKQTpR/9Q2+x9bK2H6L7uV/i4y+w3MO+zAv\nYIBmPMl02pXuVcwUzE3sJZahocLkVPATM+3use0/G7yNH8dLddisif+WHzRrLQ++\ndWJA5jbfRQC7/YFFmlU0UvqcrVCdJPQzNim7YjpVa057yBQOuJKlpzcg+xjckl/T\njMC63spYQ9DlUbYNu6KHyv/aXK9W7QRNbpTlO5lo+30LZYK4dzbZvCIncwf12Fu5\nc6lvDElEj4Z/dYnHzY98z14NNeriB8mLGao2aOlHtDfZslh5017uKT4EJfb5eoon\nTZi13acljzoJaLCjyyy0AEGbyiD9PDtmCuktIvc+oWlJD8k4hdPWyKKDKoOvbAys\nHgA7Gtgg2SBSYV55Bx/3F9TxSjmVVe31DClUhQBuRFZJqkPMR6wbo2kIHU0Gvx71\nortudqca0L0RyJlbdGpyV8IK9P/VMhWMTheCZXRF+BZtvCMDhFc=\n=P36E\n-----END PGP SIGNATURE-----",
        "payload": "tree 631571eed31b85a86926ae11c997ce1a99e995d8\nparent 1189b6acab115a7fe7bd67f8b4c6e3f55e53274e\nauthor fanquake <fanquake@gmail.com> 1575984910 -0500\ncommitter fanquake <fanquake@gmail.com> 1575984910 -0500\n\nbuild: Remove backticks from configure.ac\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e3acf6511087906d6afa9e204b69f4b0adf56155",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036",
        "patch": "@@ -555,8 +555,8 @@ case $host in\n          dnl It's safe to add these paths even if the functionality is disabled by\n          dnl the user (--without-wallet or --without-gui for example).\n \n-         bdb_prefix=`$BREW --prefix berkeley-db4 2>/dev/null`\n-         qt5_prefix=`$BREW --prefix qt5 2>/dev/null`\n+         bdb_prefix=$($BREW --prefix berkeley-db4 2>/dev/null)\n+         qt5_prefix=$($BREW --prefix qt5 2>/dev/null)\n          if test x$bdb_prefix != x; then\n            CPPFLAGS=\"$CPPFLAGS -I$bdb_prefix/include\"\n            LIBS=\"$LIBS -L$bdb_prefix/lib\"\n@@ -987,7 +987,7 @@ AC_LINK_IFELSE(\n         [[ #include <cstdlib> ]],\n         [[ int nErr = std::system(\"\"); ]]\n     )],\n-    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_STD__SYSTEM, 1, Define to 1 if you have the `std::system' function.)],\n+    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_STD__SYSTEM, 1, Define to 1 if std::system is available.)],\n     [ AC_MSG_RESULT(no) ]\n )\n \n@@ -997,11 +997,10 @@ AC_LINK_IFELSE(\n         [[ ]],\n         [[ int nErr = ::_wsystem(\"\"); ]]\n     )],\n-    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_WSYSTEM, 1, Define to 1 if you have the `::wsystem' function.)],\n+    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_WSYSTEM, 1, Define to 1 if ::wsystem is available.)],\n     [ AC_MSG_RESULT(no) ]\n )\n \n-# Define to 1 if std::system or ::wsystem (Windows) is available\n AC_DEFINE([HAVE_SYSTEM], [HAVE_STD__SYSTEM || HAVE_WSYSTEM], [std::system or ::wsystem])\n \n LEVELDB_CPPFLAGS="
      }
    ]
  },
  {
    "sha": "3ab18246254019896132d1cdb8af2dcdb213ec3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYWIxODI0NjI1NDAxOTg5NjEzMmQxY2RiOGFmMmRjZGIyMTNlYzNi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-10T13:35:33Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-10T13:35:33Z"
      },
      "message": "build: Use dnl for all comments in configure.ac, rather than #",
      "tree": {
        "sha": "9968697113fc1d7e7f8160a574012d03dede7622",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9968697113fc1d7e7f8160a574012d03dede7622"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ab18246254019896132d1cdb8af2dcdb213ec3b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3vnyUACgkQLuufXMCV\nJsFrYQ//YtioG/e7FFHbfubznrE+A2zmU+yKJ2aJdZUaFsLCCaRhQhyNB+TLoFfL\nI1bHKkLVJOxHkcKHxKX9KfsDcG0yt3Mwf7LhZAiXGl+1p0gQmwpsmkWcgjr1bHov\neKw8uC1DSVtqpwwpD2faeVz4u1TfPaXCYCEPihX3XVDMdYA48kJPflrNF8nBjltr\nG7aO+gOA6+S2jsrKxdxA8HCX9qpjtKcSYVUcUBfGgvZXaq8HbJlrxeZuzJfM84KK\nbH3kxZVlbzQgYWeb7DwWljMEIFohC84a5CzBtlRzZIANWuGLvUBz+lQ7bhPLVfUz\nOvLSMbN1Cnu1zeJAAQ9nFEfpGeybWAfFzw5mxqZMmBGsblr8Xsw9fGiCUvQ1xyOd\nB+Mth5dXWLqd/TrSUmxsB5ONYtn5AxhEEsRW8ZXr1Ll1z6JaazK7s7hP3yGtmsuq\n3Xmo3KuqTILkgyct0oUoQgF7NDGqL9OSGPXPSX50u0j9+MMfNcjPpkAQ0gSaDLEu\noG4VmN+a05+1eXQYbaXKEHpnQN1+cXl+LKVf6eiqsKD8VBqRnCk2nb+3OTzyGLZR\nsqXwa9kvNKbs82JyJMmYj8OQEJyDyT0p0rggjYQSrG7zVP7icFTL6i4+v4O7qCiY\ndyGxK+Nba1X+xXCBdR0S/hrL0bMIkBb8RGbAm1b+FVR7nEFOoYU=\n=V50N\n-----END PGP SIGNATURE-----",
        "payload": "tree 9968697113fc1d7e7f8160a574012d03dede7622\nparent 8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036\nauthor fanquake <fanquake@gmail.com> 1575984933 -0500\ncommitter fanquake <fanquake@gmail.com> 1575984933 -0500\n\nbuild: Use dnl for all comments in configure.ac, rather than #\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ab18246254019896132d1cdb8af2dcdb213ec3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ab18246254019896132d1cdb8af2dcdb213ec3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ab18246254019896132d1cdb8af2dcdb213ec3b/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 50,
      "deletions": 50
    },
    "files": [
      {
        "sha": "e7d14202a7f14ce88279661684027d3215bc075f",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 50,
        "deletions": 50,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ab18246254019896132d1cdb8af2dcdb213ec3b/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ab18246254019896132d1cdb8af2dcdb213ec3b/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=3ab18246254019896132d1cdb8af2dcdb213ec3b",
        "patch": "@@ -243,27 +243,27 @@ AC_ARG_ENABLE(man,\n     enable_man=yes)\n AM_CONDITIONAL(ENABLE_MAN, test \"$enable_man\" != no)\n \n-# Enable debug\n+dnl Enable debug\n AC_ARG_ENABLE([debug],\n     [AS_HELP_STRING([--enable-debug],\n                     [use compiler flags and macros suited for debugging (default is no)])],\n     [enable_debug=$enableval],\n     [enable_debug=no])\n \n-# Enable different -fsanitize options\n+dnl Enable different -fsanitize options\n AC_ARG_WITH([sanitizers],\n     [AS_HELP_STRING([--with-sanitizers],\n                     [comma separated list of extra sanitizers to build with (default is none enabled)])],\n     [use_sanitizers=$withval])\n \n-# Enable gprof profiling\n+dnl Enable gprof profiling\n AC_ARG_ENABLE([gprof],\n     [AS_HELP_STRING([--enable-gprof],\n                     [use gprof profiling compiler flags (default is no)])],\n     [enable_gprof=$enableval],\n     [enable_gprof=no])\n \n-# Turn warnings into errors\n+dnl Turn warnings into errors\n AC_ARG_ENABLE([werror],\n     [AS_HELP_STRING([--enable-werror],\n                     [Treat certain compiler warnings as errors (default is no)])],\n@@ -274,15 +274,15 @@ AC_LANG_PUSH([C++])\n AX_CHECK_COMPILE_FLAG([-Werror],[CXXFLAG_WERROR=\"-Werror\"],[CXXFLAG_WERROR=\"\"])\n \n if test \"x$enable_debug\" = xyes; then\n-  # Clear default -g -O2 flags\n+  dnl Clear default -g -O2 flags\n   if test \"x$CXXFLAGS_overridden\" = xno; then\n \tCXXFLAGS=\"\"\n   fi\n \n-  # Disable all optimizations\n+  dnl Disable all optimizations\n   AX_CHECK_COMPILE_FLAG([-O0], [[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -O0\"]],,[[$CXXFLAG_WERROR]])\n \n-  # Prefer -g3, fall back to -g if that is unavailable.\n+  dnl Prefer -g3, fall back to -g if that is unavailable.\n   AX_CHECK_COMPILE_FLAG(\n     [-g3],\n     [[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -g3\"]],\n@@ -295,19 +295,19 @@ if test \"x$enable_debug\" = xyes; then\n fi\n \n if test x$use_sanitizers != x; then\n-  # First check if the compiler accepts flags. If an incompatible pair like\n-  # -fsanitize=address,thread is used here, this check will fail. This will also\n-  # fail if a bad argument is passed, e.g. -fsanitize=undfeined\n+  dnl First check if the compiler accepts flags. If an incompatible pair like\n+  dnl -fsanitize=address,thread is used here, this check will fail. This will also\n+  dnl fail if a bad argument is passed, e.g. -fsanitize=undfeined\n   AX_CHECK_COMPILE_FLAG(\n     [[-fsanitize=$use_sanitizers]],\n     [[SANITIZER_CXXFLAGS=-fsanitize=$use_sanitizers]],\n     [AC_MSG_ERROR([compiler did not accept requested flags])])\n \n-  # Some compilers (e.g. GCC) require additional libraries like libasan,\n-  # libtsan, libubsan, etc. Make sure linking still works with the sanitize\n-  # flag. This is a separate check so we can give a better error message when\n-  # the sanitize flags are supported by the compiler but the actual sanitizer\n-  # libs are missing.\n+  dnl Some compilers (e.g. GCC) require additional libraries like libasan,\n+  dnl libtsan, libubsan, etc. Make sure linking still works with the sanitize\n+  dnl flag. This is a separate check so we can give a better error message when\n+  dnl the sanitize flags are supported by the compiler but the actual sanitizer\n+  dnl libs are missing.\n   AX_CHECK_LINK_FLAG(\n     [[-fsanitize=$use_sanitizers]],\n     [[SANITIZER_LDFLAGS=-fsanitize=$use_sanitizers]],\n@@ -344,9 +344,9 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wredundant-decls],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wredundant-decls\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wunused-variable],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-variable\"],,[[$CXXFLAG_WERROR]])\n \n-  ## Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n-  ## unknown options if any other warning is produced. Test the -Wfoo case, and\n-  ## set the -Wno-foo case if it works.\n+  dnl Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n+  dnl unknown options if any other warning is produced. Test the -Wfoo case, and\n+  dnl set the -Wno-foo case if it works.\n   AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wself-assign],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n@@ -361,9 +361,9 @@ enable_shani=no\n \n if test \"x$use_asm\" = \"xyes\"; then\n \n-# Check for optional instruction set support. Enabling these does _not_ imply that all code will\n-# be compiled with them, rather that specific objects/libs may use them after checking for runtime\n-# compatibility.\n+dnl Check for optional instruction set support. Enabling these does _not_ imply that all code will\n+dnl be compiled with them, rather that specific objects/libs may use them after checking for runtime\n+dnl compatibility.\n AX_CHECK_COMPILE_FLAG([-msse4.2],[[SSE42_CXXFLAGS=\"-msse4.2\"]],,[[$CXXFLAG_WERROR]])\n AX_CHECK_COMPILE_FLAG([-msse4.1],[[SSE41_CXXFLAGS=\"-msse4.1\"]],,[[$CXXFLAG_WERROR]])\n AX_CHECK_COMPILE_FLAG([-mavx -mavx2],[[AVX2_CXXFLAGS=\"-mavx -mavx2\"]],,[[$CXXFLAG_WERROR]])\n@@ -506,8 +506,8 @@ case $host in\n      AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(libiphlpapi missing))\n      AC_CHECK_LIB([crypt32],      [main],, AC_MSG_ERROR(libcrypt32 missing))\n \n-     # -static is interpreted by libtool, where it has a different meaning.\n-     # In libtool-speak, it's -all-static.\n+     dnl -static is interpreted by libtool, where it has a different meaning.\n+     dnl In libtool-speak, it's -all-static.\n      AX_CHECK_LINK_FLAG([[-static]],[LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"])\n \n      AC_PATH_PROG([MAKENSIS], [makensis], none)\n@@ -673,11 +673,11 @@ AC_C_BIGENDIAN\n dnl Check for pthread compile/link requirements\n AX_PTHREAD\n \n-# The following macro will add the necessary defines to bitcoin-config.h, but\n-# they also need to be passed down to any subprojects. Pull the results out of\n-# the cache and add them to CPPFLAGS.\n+dnl The following macro will add the necessary defines to bitcoin-config.h, but\n+dnl they also need to be passed down to any subprojects. Pull the results out of\n+dnl the cache and add them to CPPFLAGS.\n AC_SYS_LARGEFILE\n-# detect POSIX or GNU variant of strerror_r\n+dnl detect POSIX or GNU variant of strerror_r\n AC_FUNC_STRERROR_R\n \n if test x$ac_cv_sys_file_offset_bits != x &&\n@@ -700,12 +700,12 @@ AX_GCC_FUNC_ATTRIBUTE([dllimport])\n \n if test x$use_glibc_compat != xno; then\n \n-  #glibc absorbed clock_gettime in 2.17. librt (its previous location) is safe to link\n-  #in anyway for back-compat.\n+  dnl glibc absorbed clock_gettime in 2.17. librt (its previous location) is safe to link\n+  dnl in anyway for back-compat.\n   AC_CHECK_LIB([rt],[clock_gettime],, AC_MSG_ERROR(librt missing))\n \n-  #__fdelt_chk's params and return type have changed from long unsigned int to long int.\n-  # See which one is present here.\n+  dnl __fdelt_chk's params and return type have changed from long unsigned int to long int.\n+  dnl See which one is present here.\n   AC_MSG_CHECKING(__fdelt_chk type)\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef _FORTIFY_SOURCE\n                     #undef _FORTIFY_SOURCE\n@@ -741,22 +741,22 @@ if test \"x$enable_gprof\" = xyes; then\n fi\n \n if test x$TARGET_OS != xwindows; then\n-  # All windows code is PIC, forcing it on just adds useless compile warnings\n+  dnl All windows code is PIC, forcing it on just adds useless compile warnings\n   AX_CHECK_COMPILE_FLAG([-fPIC],[PIC_FLAGS=\"-fPIC\"])\n fi\n \n-# All versions of gcc that we commonly use for building are subject to bug\n-# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n-# -fstack-reuse=none for all gcc builds. (Only gcc understands this flag)\n+dnl All versions of gcc that we commonly use for building are subject to bug\n+dnl https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+dnl -fstack-reuse=none for all gcc builds. (Only gcc understands this flag)\n AX_CHECK_COMPILE_FLAG([-fstack-reuse=none],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-reuse=none\"])\n if test x$use_hardening != xno; then\n   use_hardening=yes\n   AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n   AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n \n-  # When enable_debug is yes, all optimizations are disabled.\n-  # However, FORTIFY_SOURCE requires that there is some level of optimization, otherwise it does nothing and just creates a compiler warning.\n-  # Since FORTIFY_SOURCE is a no-op without optimizations, do not enable it when enable_debug is yes.\n+  dnl When enable_debug is yes, all optimizations are disabled.\n+  dnl However, FORTIFY_SOURCE requires that there is some level of optimization, otherwise it does nothing and just creates a compiler warning.\n+  dnl Since FORTIFY_SOURCE is a no-op without optimizations, do not enable it when enable_debug is yes.\n   if test x$enable_debug != xyes; then\n     AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[\n       AX_CHECK_PREPROC_FLAG([-U_FORTIFY_SOURCE],[\n@@ -788,8 +788,8 @@ fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])\n \n-# FD_ZERO may be dependent on a declaration of memcpy, e.g. in SmartOS\n-# check that it fails to build without memcpy, then that it builds with\n+dnl FD_ZERO may be dependent on a declaration of memcpy, e.g. in SmartOS\n+dnl check that it fails to build without memcpy, then that it builds with\n AC_MSG_CHECKING(FD_ZERO memcpy dependence)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     #include <cstddef>\n@@ -827,7 +827,7 @@ AC_CHECK_DECLS([getifaddrs, freeifaddrs],,,\n )\n AC_CHECK_DECLS([strnlen])\n \n-# Check for daemon(3), unrelated to --with-daemon (although used by it)\n+dnl Check for daemon(3), unrelated to --with-daemon (although used by it)\n AC_CHECK_DECLS([daemon])\n \n AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n@@ -893,19 +893,19 @@ if test \"x$use_thread_local\" = xyes || { test \"x$use_thread_local\" = xauto && te\n     [\n      case $host in\n        *mingw*)\n-          # mingw32's implementation of thread_local has also been shown to behave\n-          # erroneously under concurrent usage; see:\n-          # https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n+          dnl mingw32's implementation of thread_local has also been shown to behave\n+          dnl erroneously under concurrent usage; see:\n+          dnl https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n           AC_MSG_RESULT(no)\n           ;;\n         *darwin*)\n-          # TODO enable thread_local on later versions of Darwin where it is\n-          # supported (per https://stackoverflow.com/a/29929949)\n+          dnl TODO enable thread_local on later versions of Darwin where it is\n+          dnl supported (per https://stackoverflow.com/a/29929949)\n           AC_MSG_RESULT(no)\n           ;;\n         *freebsd*)\n-          # FreeBSD's implementation of thread_local is also buggy (per\n-          # https://groups.google.com/d/msg/bsdmailinglist/22ncTZAbDp4/Dii_pII5AwAJ)\n+          dnl FreeBSD's implementation of thread_local is also buggy (per\n+          dnl https://groups.google.com/d/msg/bsdmailinglist/22ncTZAbDp4/Dii_pII5AwAJ)\n           AC_MSG_RESULT(no)\n           ;;\n         *)\n@@ -921,7 +921,7 @@ if test \"x$use_thread_local\" = xyes || { test \"x$use_thread_local\" = xauto && te\n   LDFLAGS=\"$TEMP_LDFLAGS\"\n fi\n \n-# Check for different ways of gathering OS randomness\n+dnl Check for different ways of gathering OS randomness\n AC_MSG_CHECKING(for Linux getrandom syscall)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n   #include <sys/syscall.h>\n@@ -975,7 +975,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <stdint.h>\n  [ AC_MSG_RESULT(no)]\n )\n \n-# Check for reduced exports\n+dnl Check for reduced exports\n if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n   [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])"
      }
    ]
  },
  {
    "sha": "0dc5907d0f0490036c50cb7aee19e31075bbf402",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGM1OTA3ZDBmMDQ5MDAzNmM1MGNiN2FlZTE5ZTMxMDc1YmJmNDAy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-02T08:01:27Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-10T16:39:40Z"
      },
      "message": "tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus",
      "tree": {
        "sha": "83ccd539a4aed3c5707bc9cb57af2becaf62dc47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83ccd539a4aed3c5707bc9cb57af2becaf62dc47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dc5907d0f0490036c50cb7aee19e31075bbf402",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dc5907d0f0490036c50cb7aee19e31075bbf402",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0dc5907d0f0490036c50cb7aee19e31075bbf402",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dc5907d0f0490036c50cb7aee19e31075bbf402/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2d255c0bb44847038daa568c76f3c0ccf4f8c2ba",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dc5907d0f0490036c50cb7aee19e31075bbf402/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dc5907d0f0490036c50cb7aee19e31075bbf402/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=0dc5907d0f0490036c50cb7aee19e31075bbf402",
        "patch": "@@ -24,6 +24,10 @@\n     \"key_origin_info_deserialize\",\n     \"merkle_block_deserialize\",\n     \"out_point_deserialize\",\n+    \"parse_hd_keypath\",\n+    \"parse_numbers\",\n+    \"parse_script\",\n+    \"parse_univalue\",\n     \"partial_merkle_tree_deserialize\",\n     \"partially_signed_transaction_deserialize\",\n     \"prefilled_transaction_deserialize\",\n@@ -32,8 +36,8 @@\n     \"pub_key_deserialize\",\n     \"script_deserialize\",\n     \"sub_net_deserialize\",\n-    \"tx_in_deserialize\",\n     \"tx_in\",\n+    \"tx_in_deserialize\",\n     \"tx_out\",\n ]\n "
      }
    ]
  },
  {
    "sha": "074cb6451b16158589d743488930963bcf4b024c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzRjYjY0NTFiMTYxNTg1ODlkNzQzNDg4OTMwOTYzYmNmNGIwMjRj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-02T11:20:17Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-10T16:39:40Z"
      },
      "message": "tests: Add ParseHDKeypath(...) (bip32) fuzzing harness",
      "tree": {
        "sha": "49b47791d44067fa5c9423e947842e5d08b69b83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49b47791d44067fa5c9423e947842e5d08b69b83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/074cb6451b16158589d743488930963bcf4b024c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/074cb6451b16158589d743488930963bcf4b024c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/074cb6451b16158589d743488930963bcf4b024c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/074cb6451b16158589d743488930963bcf4b024c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0dc5907d0f0490036c50cb7aee19e31075bbf402",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dc5907d0f0490036c50cb7aee19e31075bbf402",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0dc5907d0f0490036c50cb7aee19e31075bbf402"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d84daeaf095f6c4212a582ccbd058d1a291cee12",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/074cb6451b16158589d743488930963bcf4b024c/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/074cb6451b16158589d743488930963bcf4b024c/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=074cb6451b16158589d743488930963bcf4b024c",
        "patch": "@@ -33,6 +33,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/messageheader_deserialize \\\n   test/fuzz/netaddr_deserialize \\\n   test/fuzz/out_point_deserialize \\\n+  test/fuzz/parse_hd_keypath \\\n   test/fuzz/parse_iso8601 \\\n   test/fuzz/partial_merkle_tree_deserialize \\\n   test/fuzz/partially_signed_transaction_deserialize \\\n@@ -518,6 +519,12 @@ test_fuzz_tx_out_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_tx_out_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_tx_out_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_parse_hd_keypath_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_hd_keypath.cpp\n+test_fuzz_parse_hd_keypath_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_parse_hd_keypath_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_parse_hd_keypath_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_parse_hd_keypath_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n endif # ENABLE_FUZZ\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)"
      },
      {
        "sha": "9a23f4b2d43944e3b119f80238b29f4a0293a4fc",
        "filename": "src/test/fuzz/parse_hd_keypath.cpp",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/074cb6451b16158589d743488930963bcf4b024c/src/test/fuzz/parse_hd_keypath.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/074cb6451b16158589d743488930963bcf4b024c/src/test/fuzz/parse_hd_keypath.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/parse_hd_keypath.cpp?ref=074cb6451b16158589d743488930963bcf4b024c",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+#include <util/bip32.h>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    const std::string keypath_str(buffer.begin(), buffer.end());\n+    std::vector<uint32_t> keypath;\n+    (void)ParseHDKeypath(keypath_str, keypath);\n+}"
      }
    ]
  },
  {
    "sha": "fb8c12093aa37f5536a1a4ba341ee8bab4dabe60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjhjMTIwOTNhYTM3ZjU1MzZhMWE0YmEzNDFlZThiYWI0ZGFiZTYw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-02T11:36:08Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-10T16:39:40Z"
      },
      "message": "tests: Add ParseScript(...) (core_io) fuzzing harness",
      "tree": {
        "sha": "25cb483e4584171e9d62bf8e4f6e506fb0a53695",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25cb483e4584171e9d62bf8e4f6e506fb0a53695"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb8c12093aa37f5536a1a4ba341ee8bab4dabe60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb8c12093aa37f5536a1a4ba341ee8bab4dabe60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb8c12093aa37f5536a1a4ba341ee8bab4dabe60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb8c12093aa37f5536a1a4ba341ee8bab4dabe60/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "074cb6451b16158589d743488930963bcf4b024c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/074cb6451b16158589d743488930963bcf4b024c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/074cb6451b16158589d743488930963bcf4b024c"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a54ee21910be7432c3d38ee4cf5468832bc7ced4",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8c12093aa37f5536a1a4ba341ee8bab4dabe60/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8c12093aa37f5536a1a4ba341ee8bab4dabe60/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=fb8c12093aa37f5536a1a4ba341ee8bab4dabe60",
        "patch": "@@ -38,6 +38,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/partial_merkle_tree_deserialize \\\n   test/fuzz/partially_signed_transaction_deserialize \\\n   test/fuzz/prefilled_transaction_deserialize \\\n+  test/fuzz/parse_script \\\n   test/fuzz/psbt \\\n   test/fuzz/psbt_input_deserialize \\\n   test/fuzz/psbt_output_deserialize \\\n@@ -525,6 +526,12 @@ test_fuzz_parse_hd_keypath_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_parse_hd_keypath_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_parse_hd_keypath_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_parse_script_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_script.cpp\n+test_fuzz_parse_script_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_parse_script_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_parse_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_parse_script_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n endif # ENABLE_FUZZ\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)"
      },
      {
        "sha": "21ac1aecf3a97b605788aef546dce7444bfed855",
        "filename": "src/test/fuzz/parse_script.cpp",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8c12093aa37f5536a1a4ba341ee8bab4dabe60/src/test/fuzz/parse_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8c12093aa37f5536a1a4ba341ee8bab4dabe60/src/test/fuzz/parse_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/parse_script.cpp?ref=fb8c12093aa37f5536a1a4ba341ee8bab4dabe60",
        "patch": "@@ -0,0 +1,16 @@\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <core_io.h>\n+#include <script/script.h>\n+#include <test/fuzz/fuzz.h>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    const std::string script_string(buffer.begin(), buffer.end());\n+    try {\n+        (void)ParseScript(script_string);\n+    } catch (const std::runtime_error&) {\n+    }\n+}"
      }
    ]
  },
  {
    "sha": "e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2QyYmNmNWNmN2E1M2U1Y2E2NzFjZmVkMWZlN2I2Y2YwYzE5MWJh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-02T12:01:52Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-10T16:39:40Z"
      },
      "message": "tests: Add fuzzing harnesses for various number parsing functions",
      "tree": {
        "sha": "5cc0081820bbd5b451486131b80769576054d79d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cc0081820bbd5b451486131b80769576054d79d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb8c12093aa37f5536a1a4ba341ee8bab4dabe60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb8c12093aa37f5536a1a4ba341ee8bab4dabe60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb8c12093aa37f5536a1a4ba341ee8bab4dabe60"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a5f740c5030379b336b0989cb6e33fc692b1fe66",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba",
        "patch": "@@ -38,6 +38,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/partial_merkle_tree_deserialize \\\n   test/fuzz/partially_signed_transaction_deserialize \\\n   test/fuzz/prefilled_transaction_deserialize \\\n+  test/fuzz/parse_numbers \\\n   test/fuzz/parse_script \\\n   test/fuzz/psbt \\\n   test/fuzz/psbt_input_deserialize \\\n@@ -532,6 +533,12 @@ test_fuzz_parse_script_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_parse_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_parse_script_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_parse_numbers_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_numbers.cpp\n+test_fuzz_parse_numbers_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_parse_numbers_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_parse_numbers_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_parse_numbers_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n endif # ENABLE_FUZZ\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)"
      },
      {
        "sha": "59f89dc9fbbb99eb49d49b83176d724733c4e03e",
        "filename": "src/test/fuzz/parse_numbers.cpp",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba/src/test/fuzz/parse_numbers.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba/src/test/fuzz/parse_numbers.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/parse_numbers.cpp?ref=e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba",
        "patch": "@@ -0,0 +1,35 @@\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+#include <util/moneystr.h>\n+#include <util/strencodings.h>\n+\n+#include <string>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    const std::string random_string(buffer.begin(), buffer.end());\n+\n+    CAmount amount;\n+    (void)ParseMoney(random_string, amount);\n+\n+    double d;\n+    (void)ParseDouble(random_string, &d);\n+\n+    int32_t i32;\n+    (void)ParseInt32(random_string, &i32);\n+    (void)atoi(random_string);\n+\n+    uint32_t u32;\n+    (void)ParseUInt32(random_string, &u32);\n+\n+    int64_t i64;\n+    (void)atoi64(random_string);\n+    (void)ParseFixedPoint(random_string, 3, &i64);\n+    (void)ParseInt64(random_string, &i64);\n+\n+    uint64_t u64;\n+    (void)ParseUInt64(random_string, &u64);\n+}"
      },
      {
        "sha": "ea9ea7a58df318e848518ff2a350df4544be88bf",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba",
        "patch": "@@ -11,6 +11,7 @@ KNOWN_VIOLATIONS=(\n     \"src/qt/rpcconsole.cpp:.*atoi\"\n     \"src/rest.cpp:.*strtol\"\n     \"src/test/dbwrapper_tests.cpp:.*snprintf\"\n+    \"src/test/fuzz/parse_numbers.cpp:.*atoi\"\n     \"src/torcontrol.cpp:.*atoi\"\n     \"src/torcontrol.cpp:.*strtol\"\n     \"src/util/strencodings.cpp:.*atoi\""
      }
    ]
  },
  {
    "sha": "a1308b7e12e6af7482954e439f594b771eb62b73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTMwOGI3ZTEyZTZhZjc0ODI5NTRlNDM5ZjU5NGI3NzFlYjYyYjcz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-03T09:11:40Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-10T16:39:40Z"
      },
      "message": "tests: Add fuzzing harnesses for various JSON/univalue parsing functions",
      "tree": {
        "sha": "28132fe7345cb3c673bb25c670ec76ff0a5c5f6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28132fe7345cb3c673bb25c670ec76ff0a5c5f6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1308b7e12e6af7482954e439f594b771eb62b73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1308b7e12e6af7482954e439f594b771eb62b73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1308b7e12e6af7482954e439f594b771eb62b73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1308b7e12e6af7482954e439f594b771eb62b73/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 99,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0225edf29e59987d004960c2c02672410f32e220",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1308b7e12e6af7482954e439f594b771eb62b73/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1308b7e12e6af7482954e439f594b771eb62b73/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=a1308b7e12e6af7482954e439f594b771eb62b73",
        "patch": "@@ -40,6 +40,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/prefilled_transaction_deserialize \\\n   test/fuzz/parse_numbers \\\n   test/fuzz/parse_script \\\n+  test/fuzz/parse_univalue \\\n   test/fuzz/psbt \\\n   test/fuzz/psbt_input_deserialize \\\n   test/fuzz/psbt_output_deserialize \\\n@@ -97,6 +98,7 @@ FUZZ_SUITE_LD_COMMON = \\\n  $(LIBTEST_UTIL) \\\n  $(LIBBITCOIN_CONSENSUS) \\\n  $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CLI) \\\n  $(LIBUNIVALUE) \\\n  $(LIBLEVELDB) \\\n  $(LIBLEVELDB_SSE42) \\\n@@ -539,6 +541,12 @@ test_fuzz_parse_numbers_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_parse_numbers_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_parse_numbers_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_parse_univalue_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_univalue.cpp\n+test_fuzz_parse_univalue_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_parse_univalue_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_parse_univalue_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_parse_univalue_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n endif # ENABLE_FUZZ\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)"
      },
      {
        "sha": "3ad112dbad59f65225fdc47c66f8ebd64723e569",
        "filename": "src/test/fuzz/parse_univalue.cpp",
        "status": "added",
        "additions": 91,
        "deletions": 0,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1308b7e12e6af7482954e439f594b771eb62b73/src/test/fuzz/parse_univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1308b7e12e6af7482954e439f594b771eb62b73/src/test/fuzz/parse_univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/parse_univalue.cpp?ref=a1308b7e12e6af7482954e439f594b771eb62b73",
        "patch": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <core_io.h>\n+#include <rpc/client.h>\n+#include <rpc/util.h>\n+#include <test/fuzz/fuzz.h>\n+#include <util/memory.h>\n+\n+#include <limits>\n+#include <string>\n+\n+void initialize()\n+{\n+    static const auto verify_handle = MakeUnique<ECCVerifyHandle>();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    const std::string random_string(buffer.begin(), buffer.end());\n+    bool valid = true;\n+    const UniValue univalue = [&] {\n+        try {\n+            return ParseNonRFCJSONValue(random_string);\n+        } catch (const std::runtime_error&) {\n+            valid = false;\n+            return NullUniValue;\n+        }\n+    }();\n+    if (!valid) {\n+        return;\n+    }\n+    try {\n+        (void)ParseHashO(univalue, \"A\");\n+        (void)ParseHashO(univalue, random_string);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)ParseHashV(univalue, \"A\");\n+        (void)ParseHashV(univalue, random_string);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)ParseHexO(univalue, \"A\");\n+        (void)ParseHexO(univalue, random_string);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)ParseHexUV(univalue, \"A\");\n+        (void)ParseHexUV(univalue, random_string);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)ParseHexV(univalue, \"A\");\n+        (void)ParseHexV(univalue, random_string);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)ParseSighashString(univalue);\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)AmountFromValue(univalue);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        FlatSigningProvider provider;\n+        (void)EvalDescriptorStringOrObject(univalue, provider);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)ParseConfirmTarget(univalue, std::numeric_limits<unsigned int>::max());\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)ParseDescriptorRange(univalue);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+}"
      }
    ]
  },
  {
    "sha": "fab2f351f2311295c9ed893fe883a08a9104144e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWIyZjM1MWYyMzExMjk1YzllZDg5M2ZlODgzYTA4YTkxMDQxNDRl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-25T20:00:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-10T17:04:04Z"
      },
      "message": "doc: Update release process with latest changes",
      "tree": {
        "sha": "0c3cf6142475ed0f7a5b1c134005a0f4e99802bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c3cf6142475ed0f7a5b1c134005a0f4e99802bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab2f351f2311295c9ed893fe883a08a9104144e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjZiwwAiwKeJznVHJouW5v7pI7Q7m11DYqZzsn1Jv04Y8vtH/7RsKUHS0VL/bIM\nXubp1eJu3uABFtQycbN/icIanXhourXmuRrjZ5fsaqYdD4SyTicifTogvA7eUDHc\nIhHS1gNjtDZFGz8/eSAh6c74waEcxlCcmGDDxHqsmXh5mdIJ3gvvCoohwt6G5UG8\nQP6PJXe1eGHN1m0U3q6mImwYUZLt+dZsjeTfxo269ziffElchkGTdDWWh43k0ppt\ng52ZcBy85NhFb4wsEC2BQ/5ypKBg2ukAuqmeaRbAZZ6X/7C76qY9oUYuhuUXudQl\nkgmzVpYd6BzSAcGf7oVarp4qUaupqgy1LO+nVZmhekqp+EhszPqFEVjHGa32uEBl\nKutUYNUoQVuHiWBLYrOTi21Iwxq6EVWyGSYqCS97j+ar+UORaSlkexOklpjamNh0\nUca1MkZg+fRR799YiJeXYJISlwBaGcpx+BV2TFa7SLDgONRcSLombDBHQBqATKAh\nHE+zcIDj\n=SYU0\n-----END PGP SIGNATURE-----",
        "payload": "tree 0c3cf6142475ed0f7a5b1c134005a0f4e99802bb\nparent b983e7e1721fa68cc04c05b1249d5871d66debe5\nauthor MarcoFalke <falke.marco@gmail.com> 1574712044 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575997444 -0500\n\ndoc: Update release process with latest changes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab2f351f2311295c9ed893fe883a08a9104144e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab2f351f2311295c9ed893fe883a08a9104144e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab2f351f2311295c9ed893fe883a08a9104144e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b983e7e1721fa68cc04c05b1249d5871d66debe5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b983e7e1721fa68cc04c05b1249d5871d66debe5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b983e7e1721fa68cc04c05b1249d5871d66debe5"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 9,
      "deletions": 5
    },
    "files": [
      {
        "sha": "9222c51a8993c33a5ebce14fc62d4ef5119b55e7",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2f351f2311295c9ed893fe883a08a9104144e/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2f351f2311295c9ed893fe883a08a9104144e/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=fab2f351f2311295c9ed893fe883a08a9104144e",
        "patch": "@@ -44,7 +44,8 @@ Release Process\n \n #### After branch-off (on the major release branch)\n \n-- Update the versions and the link to the release notes draft in `doc/release-notes.md`.\n+- Update the versions.\n+- Create a pinned meta-issue for testing the release candidate (see [this issue](https://github.com/bitcoin/bitcoin/issues/17079) for an example) and provide a link to it in the release announcements where useful.\n \n #### Before final release\n \n@@ -315,7 +316,7 @@ bitcoin.org (see below for bitcoin.org update instructions).\n     instructions: https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/adding-events-release-notes-and-alerts.md#release-notes\n \n   - After the pull request is merged, the website will automatically show the newest version within 15 minutes, as well\n-    as update the OS download links. Ping @saivann/@harding (saivann/harding on Freenode) in case anything goes wrong\n+    as update the OS download links.\n \n - Update other repositories and websites for new version\n \n@@ -330,7 +331,12 @@ bitcoin.org (see below for bitcoin.org update instructions).\n \n       - Notify BlueMatt so that he can start building [the PPAs](https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin)\n \n-      - Create a new branch for the major release \"0.xx\" (used to build the snap package)\n+      - Push the flatpak to flathub, e.g. https://github.com/flathub/org.bitcoincore.bitcoin-qt/pull/2\n+\n+      - Push the latest version to master (if applicable), e.g. https://github.com/bitcoin-core/packaging/pull/32\n+\n+      - Create a new branch for the major release \"0.xx\" from master (used to build the snap package) and request the\n+        track (if applicable), e.g. https://forum.snapcraft.io/t/track-request-for-bitcoin-core-snap/10112/7\n \n       - Notify MarcoFalke so that he can start building the snap package\n \n@@ -354,8 +360,6 @@ bitcoin.org (see below for bitcoin.org update instructions).\n \n       - Create a [new GitHub release](https://github.com/bitcoin/bitcoin/releases/new) with a link to the archived release notes\n \n-      - Create a pinned meta-issue for testing the release candidate (see [this issue](https://github.com/bitcoin/bitcoin/issues/15555) for an example) and provide a link to it in the release announcements where useful\n-\n - Announce the release:\n \n   - bitcoin-dev and bitcoin-core-dev mailing list"
      }
    ]
  },
  {
    "sha": "fae94785d99ef0f24c9c97a58fce6af0d4a0d452",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWU5NDc4NWQ5OWVmMGYyNGM5Yzk3YTU4ZmNlNmFmMGQ0YTBkNDUy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-10T17:11:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-10T17:12:10Z"
      },
      "message": "Merge #17524: psbt: handle unspendable psbts\n\n773d4572a4864ab7b6380858d07d9579ff6dd9a2 Mark PSBTs spending unspendable outputs as invalid in analysis (Andrew Chow)\n638e40cb6080800c7b0a7f4028f63326acbe4700 Have a PSBTAnalysis state that indicates invalid PSBT (Andrew Chow)\n\nPull request description:\n\n  When analyzing an unspendable PSBT, report that it is unspendable and exit analysis early.\n\nACKs for top commit:\n  Sjors:\n    ACK 773d457\n  instagibbs:\n    After some thought ACK https://github.com/bitcoin/bitcoin/commit/773d4572a4864ab7b6380858d07d9579ff6dd9a2\n\nTree-SHA512: 99b0cb2fa1ea37593fc65a20effe881639d69ddeeecf5197bc87bc7f2220cbeb40f1d429d517e4d27f2e9fb563a00cd845d2b4b1ce05246a75a6cb56fb9b0ba5",
      "tree": {
        "sha": "6c3eb31b910f42f8074e32defc3f2a143cefb913",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c3eb31b910f42f8074e32defc3f2a143cefb913"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae94785d99ef0f24c9c97a58fce6af0d4a0d452",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUixtwv/en4O/9tA8Skklsn6vdeL+oWjh9aSvOVlxwE+xSZVnpnAoXUfshPUY7pU\nxW3eI9lQ4cMynrqM99OydkGoGvgDeVjw16k0aqSsHIN92Q5v/4pmmBb9c3SBzHj/\nEiVSkbBkPFe5dgOFzWxC/X1CYYZw+4KOyx40mw1w0BnPCsLg5CcbV0D6BlFr/R/9\neeKxSIP1aPWipPhsBxk6PPKkOuSmIwRe9GZ73StD/snoBMQDq1mBcM1Zdi0sV77K\nemD8irGJg7lHepxI0cXoD9sVpvmzZc8uUt5VMSHzkodpcz1htf1ny9l07TiQPrsO\ngucQHf8tjjv24gQsaSk+9vT5xWyXTo1baxFeoOMu09gndZhip6Gnq33B2cT3rFhl\nO3YZ4KBvL+lYB7T64P+XvPHeeF1YWjwCegc6Hah/Ck1adyniYI8mQFrn3ChSOvmg\naF9Dbr3TdfQRdciq8SKPDkcxEnMVD15Ni86fSWkZD7f2UK+XBrRCc/QXN9jSWnEG\ncMnUf8ze\n=Z+7b\n-----END PGP SIGNATURE-----",
        "payload": "tree 6c3eb31b910f42f8074e32defc3f2a143cefb913\nparent 1189b6acab115a7fe7bd67f8b4c6e3f55e53274e\nparent 773d4572a4864ab7b6380858d07d9579ff6dd9a2\nauthor MarcoFalke <falke.marco@gmail.com> 1575997888 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1575997930 -0500\n\nMerge #17524: psbt: handle unspendable psbts\n\n773d4572a4864ab7b6380858d07d9579ff6dd9a2 Mark PSBTs spending unspendable outputs as invalid in analysis (Andrew Chow)\n638e40cb6080800c7b0a7f4028f63326acbe4700 Have a PSBTAnalysis state that indicates invalid PSBT (Andrew Chow)\n\nPull request description:\n\n  When analyzing an unspendable PSBT, report that it is unspendable and exit analysis early.\n\nACKs for top commit:\n  Sjors:\n    ACK 773d457\n  instagibbs:\n    After some thought ACK https://github.com/bitcoin/bitcoin/commit/773d4572a4864ab7b6380858d07d9579ff6dd9a2\n\nTree-SHA512: 99b0cb2fa1ea37593fc65a20effe881639d69ddeeecf5197bc87bc7f2220cbeb40f1d429d517e4d27f2e9fb563a00cd845d2b4b1ce05246a75a6cb56fb9b0ba5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae94785d99ef0f24c9c97a58fce6af0d4a0d452",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae94785d99ef0f24c9c97a58fce6af0d4a0d452",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae94785d99ef0f24c9c97a58fce6af0d4a0d452/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e"
      },
      {
        "sha": "773d4572a4864ab7b6380858d07d9579ff6dd9a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/773d4572a4864ab7b6380858d07d9579ff6dd9a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/773d4572a4864ab7b6380858d07d9579ff6dd9a2"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 29,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9a30c3f08303ef05927f5bff365a5f8eac2f7f6b",
        "filename": "src/node/psbt.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae94785d99ef0f24c9c97a58fce6af0d4a0d452/src/node/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae94785d99ef0f24c9c97a58fce6af0d4a0d452/src/node/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.cpp?ref=fae94785d99ef0f24c9c97a58fce6af0d4a0d452",
        "patch": "@@ -7,6 +7,7 @@\n #include <node/psbt.h>\n #include <policy/policy.h>\n #include <policy/settings.h>\n+#include <tinyformat.h>\n \n #include <numeric>\n \n@@ -39,6 +40,11 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n             calc_fee = false;\n         }\n \n+        if (!utxo.IsNull() && utxo.scriptPubKey.IsUnspendable()) {\n+            result.SetInvalid(strprintf(\"PSBT is not valid. Input %u spends unspendable output\", i));\n+            return result;\n+        }\n+\n         // Check if it is final\n         if (!utxo.IsNull() && !PSBTInputSigned(input)) {\n             input_analysis.is_final = false;"
      },
      {
        "sha": "7384dc415cca8734ebfba64f91bddffb59f1ab74",
        "filename": "src/node/psbt.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae94785d99ef0f24c9c97a58fce6af0d4a0d452/src/node/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae94785d99ef0f24c9c97a58fce6af0d4a0d452/src/node/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.h?ref=fae94785d99ef0f24c9c97a58fce6af0d4a0d452",
        "patch": "@@ -30,6 +30,17 @@ struct PSBTAnalysis {\n     Optional<CAmount> fee;                 //!< Amount of fee being paid by the transaction\n     std::vector<PSBTInputAnalysis> inputs; //!< More information about the individual inputs of the transaction\n     PSBTRole next;                         //!< Which of the BIP 174 roles needs to handle the transaction next\n+    std::string error;                     //!< Error message\n+\n+    void SetInvalid(std::string err_msg)\n+    {\n+        estimated_vsize = nullopt;\n+        estimated_feerate = nullopt;\n+        fee = nullopt;\n+        inputs.clear();\n+        next = PSBTRole::CREATOR;\n+        error = err_msg;\n+    }\n };\n \n /**"
      },
      {
        "sha": "9ede62efdf50291c8041b205e797e2b5fa6d0372",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae94785d99ef0f24c9c97a58fce6af0d4a0d452/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae94785d99ef0f24c9c97a58fce6af0d4a0d452/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=fae94785d99ef0f24c9c97a58fce6af0d4a0d452",
        "patch": "@@ -348,6 +348,7 @@ TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector\n \n std::string PSBTRoleName(PSBTRole role) {\n     switch (role) {\n+    case PSBTRole::CREATOR: return \"creator\";\n     case PSBTRole::UPDATER: return \"updater\";\n     case PSBTRole::SIGNER: return \"signer\";\n     case PSBTRole::FINALIZER: return \"finalizer\";"
      },
      {
        "sha": "d507d5b6b79b7f55d0f3fa51220ea12c1225da94",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae94785d99ef0f24c9c97a58fce6af0d4a0d452/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae94785d99ef0f24c9c97a58fce6af0d4a0d452/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=fae94785d99ef0f24c9c97a58fce6af0d4a0d452",
        "patch": "@@ -560,6 +560,7 @@ struct PartiallySignedTransaction\n };\n \n enum class PSBTRole {\n+    CREATOR,\n     UPDATER,\n     SIGNER,\n     FINALIZER,"
      },
      {
        "sha": "6a02984a0e0ba7cbf45b65fc0be7fc644f2c535b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae94785d99ef0f24c9c97a58fce6af0d4a0d452/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae94785d99ef0f24c9c97a58fce6af0d4a0d452/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fae94785d99ef0f24c9c97a58fce6af0d4a0d452",
        "patch": "@@ -1674,6 +1674,7 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n                 \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction in \" + CURRENCY_UNIT + \"/kB. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n                 \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n                 \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+                \"  \\\"error\\\" : \\\"error\\\"               (string) Error message if there is one\"\n                 \"}\\n\"\n             },\n             RPCExamples {\n@@ -1726,7 +1727,7 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n         }\n         inputs_result.push_back(input_univ);\n     }\n-    result.pushKV(\"inputs\", inputs_result);\n+    if (!inputs_result.empty()) result.pushKV(\"inputs\", inputs_result);\n \n     if (psbta.estimated_vsize != nullopt) {\n         result.pushKV(\"estimated_vsize\", (int)*psbta.estimated_vsize);\n@@ -1738,6 +1739,9 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n         result.pushKV(\"fee\", ValueFromAmount(*psbta.fee));\n     }\n     result.pushKV(\"next\", PSBTRoleName(psbta.next));\n+    if (!psbta.error.empty()) {\n+        result.pushKV(\"error\", psbta.error);\n+    }\n \n     return result;\n }"
      },
      {
        "sha": "2cc9650cb221938775ecec52dafe3c4015ac850e",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae94785d99ef0f24c9c97a58fce6af0d4a0d452/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae94785d99ef0f24c9c97a58fce6af0d4a0d452/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=fae94785d99ef0f24c9c97a58fce6af0d4a0d452",
        "patch": "@@ -417,5 +417,10 @@ def test_psbt_input_keys(psbt_input, keys):\n         analyzed = self.nodes[0].analyzepsbt(signed)\n         assert analyzed['inputs'][0]['has_utxo'] and analyzed['inputs'][0]['is_final'] and analyzed['next'] == 'extractor'\n \n+        self.log.info(\"PSBT spending unspendable outputs should have error message and Creator as next\")\n+        analysis = self.nodes[0].analyzepsbt('cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWAEHYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFv8/wADXYP/7//////8JxOh0LR2HAI8AAAAAAAEBIADC6wsAAAAAF2oUt/X69ELjeX2nTof+fZ10l+OyAokDAQcJAwEHEAABAACAAAEBIADC6wsAAAAAF2oUt/X69ELjeX2nTof+fZ10l+OyAokDAQcJAwEHENkMak8AAAAA')\n+        assert_equal(analysis['next'], 'creator')\n+        assert_equal(analysis['error'], 'PSBT is not valid. Input 0 spends unspendable output')\n+\n if __name__ == '__main__':\n     PSBTTest().main()"
      }
    ]
  },
  {
    "sha": "ea756bc48cd5eebc0e508fa7679e31f3e2848d60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTc1NmJjNDhjZDVlZWJjMGU1MDhmYTc2NzllMzFmM2UyODQ4ZDYw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-10T17:49:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-10T17:49:31Z"
      },
      "message": "Merge #17502: test: add unit test for non-standard bare multisig txs\n\n1bb5d517aa616c1d5b5801d2ea36a2de5fb61eba test: add unit test for non-standard bare multisig txs (Sebastian Falbesoner)\n\nPull request description:\n\n  Approaches another missing unit test of issue #17394: Checks that the function `IsStandardTx()` returns rejection reason `\"bare-multisig\"` if any one of the outputs' scriptPubKey has bare multisignature format (i.e. `M <PubKey1> <PubKey2> ... <PubKeyN> N OP_CHECKSIG`, not P2SH!) and the policy flag `fIsBareMultisigStd` is set to false.\n\nACKs for top commit:\n  instagibbs:\n    utACK https://github.com/bitcoin/bitcoin/pull/17502/commits/1bb5d517aa616c1d5b5801d2ea36a2de5fb61eba\n\nTree-SHA512: d7c95e35da16520d6dcd2b4278e2426fedd13f68d1f23c90e85e929774e123fbfcfbccc26df6ad1c0dd61780896fa4b4b3d4e8280c647bb06df2bfcf2ba572fb",
      "tree": {
        "sha": "8303a711b40feeb141aa98736f6348fa9b2ed293",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8303a711b40feeb141aa98736f6348fa9b2ed293"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea756bc48cd5eebc0e508fa7679e31f3e2848d60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiJlAwAnQ9JEkHCQXgZkqCMf+XfCEBytGWITonScUpdDuZwnSPgzM8ujse3ldO1\nupfMWefCAXIZCCIwQuaqSDSGlLKGqc7134r/Da7noul5mjpgenCOd2SRDEHhNjJG\n+R8xwOIMzg1q3glSscevL4OS+hqroXHGcOetWtiL5CK8TFdBWSrjIat7f+2iDBb/\nK+9FgseA15wdkpHex9mRI20ZgcpWIFBHwJ96iV8FMjzgeh2/npH6dodTHXxvzueb\nLOee6MxTomnsgwHxenOniH2TgiEhO0EZ0NCsRshclLUnAyyshtdrNoJn/a/UudOL\nRVSvQkKor+8PGaCUokBDOpzsPZYXPGoObh16m/h9hqHtgW3wnR1r/vuD4Kp+dn8m\nvqKdyvqmXZ/XNVKxmw695MgupA1PbESMJH/bNxEK5oWPg+OPwdV2VZykQgJyEVMh\ndyDO5SRD5956BG033ZI6qQ+ri/Xm4ic/obBEdVH8u3Nro35IwVhyCkZAimB/tmgQ\nHwTWdTUK\n=r1pU\n-----END PGP SIGNATURE-----",
        "payload": "tree 8303a711b40feeb141aa98736f6348fa9b2ed293\nparent fae94785d99ef0f24c9c97a58fce6af0d4a0d452\nparent 1bb5d517aa616c1d5b5801d2ea36a2de5fb61eba\nauthor MarcoFalke <falke.marco@gmail.com> 1576000169 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576000171 -0500\n\nMerge #17502: test: add unit test for non-standard bare multisig txs\n\n1bb5d517aa616c1d5b5801d2ea36a2de5fb61eba test: add unit test for non-standard bare multisig txs (Sebastian Falbesoner)\n\nPull request description:\n\n  Approaches another missing unit test of issue #17394: Checks that the function `IsStandardTx()` returns rejection reason `\"bare-multisig\"` if any one of the outputs' scriptPubKey has bare multisignature format (i.e. `M <PubKey1> <PubKey2> ... <PubKeyN> N OP_CHECKSIG`, not P2SH!) and the policy flag `fIsBareMultisigStd` is set to false.\n\nACKs for top commit:\n  instagibbs:\n    utACK https://github.com/bitcoin/bitcoin/pull/17502/commits/1bb5d517aa616c1d5b5801d2ea36a2de5fb61eba\n\nTree-SHA512: d7c95e35da16520d6dcd2b4278e2426fedd13f68d1f23c90e85e929774e123fbfcfbccc26df6ad1c0dd61780896fa4b4b3d4e8280c647bb06df2bfcf2ba572fb\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea756bc48cd5eebc0e508fa7679e31f3e2848d60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea756bc48cd5eebc0e508fa7679e31f3e2848d60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea756bc48cd5eebc0e508fa7679e31f3e2848d60/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fae94785d99ef0f24c9c97a58fce6af0d4a0d452",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae94785d99ef0f24c9c97a58fce6af0d4a0d452",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fae94785d99ef0f24c9c97a58fce6af0d4a0d452"
      },
      {
        "sha": "1bb5d517aa616c1d5b5801d2ea36a2de5fb61eba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bb5d517aa616c1d5b5801d2ea36a2de5fb61eba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bb5d517aa616c1d5b5801d2ea36a2de5fb61eba"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0939803953d3f09223dd82f01d54d312af3e0ad2",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea756bc48cd5eebc0e508fa7679e31f3e2848d60/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea756bc48cd5eebc0e508fa7679e31f3e2848d60/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=ea756bc48cd5eebc0e508fa7679e31f3e2848d60",
        "patch": "@@ -820,6 +820,17 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     reason.clear();\n     BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n     BOOST_CHECK_EQUAL(reason, \"scriptsig-size\");\n+\n+    // Check bare multisig (standard if policy flag fIsBareMultisigStd is set)\n+    fIsBareMultisigStd = true;\n+    t.vout[0].scriptPubKey = GetScriptForMultisig(1, {key.GetPubKey()}); // simple 1-of-1\n+    t.vin[0].scriptSig = CScript() << std::vector<unsigned char>(65, 0);\n+    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+\n+    fIsBareMultisigStd = false;\n+    reason.clear();\n+    BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n+    BOOST_CHECK_EQUAL(reason, \"bare-multisig\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "fa4b656e973405af3f80064ebe7ea592faea46e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTRiNjU2ZTk3MzQwNWFmM2Y4MDA2NGViZTdlYTU5MmZhZWE0NmUz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-10T18:07:11Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-10T18:03:28Z"
      },
      "message": "doc: Add release notes for 17447\n\nCo-Authored-By: Russell Yanofsky <russ@yanofsky.org>",
      "tree": {
        "sha": "98d7077b0408dc737b8ae1e93baf112552914295",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98d7077b0408dc737b8ae1e93baf112552914295"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4b656e973405af3f80064ebe7ea592faea46e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgnogwAzm5lfPfp77rvAuKrCK8zW9OkpNE9q1QRsvFjVs8jnJgFHNlcZItwbjOP\nUL3YgSydbaHktS9+4igxqdkkR+dxRfObh7mz81d84cv2ec+vG3AMOPnHApvxl9EH\nrGPkfwGkZ14BnPldtJ1rxjxZc7YnJWCrYsVlvETvJeS6ad8WcCFi1t2igfUlPx6z\nW8xJI7SCnfAkW+uXeho2fCAcgVCyBSJYxUEBpOnJ2SN90HevY/8K4KAvtpeAa0Ii\n995MwRR1IYd7VYae5Fd5EA9rJJPkU0/scyeC4lArFK0351vCetVnweNHTTL91e4O\nRIftwG5NhK7VYCTLR/xOA0NtT06YKFjm0HgN+d1T2KPtA8AT8V0d/RpytI1ge1T+\n3pzzTPd2ILKd87uOaO0NLCokMloxxe5Ah58mgvzejIoTYWcj65/ED9VQRBIOD0C/\n5lHpSjW40vIqWJRdaLhel3zITgf1d5u4r7PADbpT81tkaXDuVIEbjFVaqwqRd5UW\ngpqKhwKa\n=F0/H\n-----END PGP SIGNATURE-----",
        "payload": "tree 98d7077b0408dc737b8ae1e93baf112552914295\nparent ea756bc48cd5eebc0e508fa7679e31f3e2848d60\nauthor MarcoFalke <falke.marco@gmail.com> 1576001231 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576001008 -0500\n\ndoc: Add release notes for 17447\n\nCo-Authored-By: Russell Yanofsky <russ@yanofsky.org>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4b656e973405af3f80064ebe7ea592faea46e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4b656e973405af3f80064ebe7ea592faea46e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4b656e973405af3f80064ebe7ea592faea46e3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea756bc48cd5eebc0e508fa7679e31f3e2848d60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea756bc48cd5eebc0e508fa7679e31f3e2848d60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea756bc48cd5eebc0e508fa7679e31f3e2848d60"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cdf83178c6d1ab788f8ceb12b9a87b4a746c2ca6",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4b656e973405af3f80064ebe7ea592faea46e3/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4b656e973405af3f80064ebe7ea592faea46e3/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fa4b656e973405af3f80064ebe7ea592faea46e3",
        "patch": "@@ -104,6 +104,10 @@ Low-level changes\n Tests\n -----\n \n+- It is now an error to use an unqualified `walletdir=path` setting in the config file if running on testnet or regtest\n+  networks. The setting now needs to be qualified as `chain.walletdir=path` or placed in the appropriate `[chain]`\n+  section. (#17447)\n+\n - `-fallbackfee` was 0 (disabled) by default for the main chain, but 0.0002 by default for the test chains. Now it is 0\n   by default for all chains. Testnet and regtest users will have to add `fallbackfee=0.0002` to their configuration if\n   they weren't setting it and they want it to keep working like before. (#16524)"
      }
    ]
  },
  {
    "sha": "2126d6ce6977977be1a3947ae60e0b0fda638a6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTI2ZDZjZTY5Nzc5NzdiZTFhMzk0N2FlNjBlMGIwZmRhNjM4YTZj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-10T18:09:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-10T18:09:05Z"
      },
      "message": "Merge #17561: doc: Changed MiniUPnPc link to https in dependencies.md\n\n5ad4dd1ea131f322dc39db5b4e50b2a2be29d6ff doc: Changed MiniUPnPc link to https in dependencies.md (Marius Kj\u00e6rstad)\n\nPull request description:\n\n  doc: Changed MiniUPnPc link to https in dependencies.md\n\nTop commit has no ACKs.\n\nTree-SHA512: 228ee98c877612468a34d09610999a47257ab1e060f3004a530639f0c29fb473b48e59588ff70297c53a3abeb2bb32bfedbb61e102a7fc10df4bb1b5d0d5893b",
      "tree": {
        "sha": "b07594789943021d9b530bbfd0031ecbf4e2daa8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b07594789943021d9b530bbfd0031ecbf4e2daa8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2126d6ce6977977be1a3947ae60e0b0fda638a6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUidzQwAvS8JoY9PiHk1kygwvrImQMQGR/PNQ1mqeD/VpwdTN7TxrWZEcSpRM82t\n/hB3g312cv7/WTLtLw/d8PSJAbe8IspFRdSDQuYZVZpzBLKO931T0IaBoQ5SLQQI\nLnJjVQM1G514+Qwvdfr2lrEULIpIWWhsob/5/g1IBhDA4xxxgzRVRskiqPYx7oxm\niCc2fxC6KkxxnRzqfDXBITMsq3BKVOrid9vZGH1JBvjdfaASFDVN14vNyCsI9dqV\nq4D9X2gV89VCSok66N6O2t7k53ogh0JTZdi5EQvkLxX9tqe5LQ9JNwgYCb//0/sN\nw7Dy98nzAsTODr+5RuMtD5CyVa/MLpJZI/lhKUsZf76+OAnIi9o0VCKd7bNB7vgH\nzjpKFQvYYVboLsd8gDa3jVH1IuKdAvd9KeiX9M0bfQX6T870vOjw53jcVHxgTUWm\nVglWbWmpJHI8aUkwbAeAPqi9CBsW6kq8CCukyHE/7G0pkGn0yax/7EKcrlAkcQ5z\nXRsddWA8\n=qjNo\n-----END PGP SIGNATURE-----",
        "payload": "tree b07594789943021d9b530bbfd0031ecbf4e2daa8\nparent ea756bc48cd5eebc0e508fa7679e31f3e2848d60\nparent 5ad4dd1ea131f322dc39db5b4e50b2a2be29d6ff\nauthor MarcoFalke <falke.marco@gmail.com> 1576001343 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576001345 -0500\n\nMerge #17561: doc: Changed MiniUPnPc link to https in dependencies.md\n\n5ad4dd1ea131f322dc39db5b4e50b2a2be29d6ff doc: Changed MiniUPnPc link to https in dependencies.md (Marius Kj\u00e6rstad)\n\nPull request description:\n\n  doc: Changed MiniUPnPc link to https in dependencies.md\n\nTop commit has no ACKs.\n\nTree-SHA512: 228ee98c877612468a34d09610999a47257ab1e060f3004a530639f0c29fb473b48e59588ff70297c53a3abeb2bb32bfedbb61e102a7fc10df4bb1b5d0d5893b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2126d6ce6977977be1a3947ae60e0b0fda638a6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2126d6ce6977977be1a3947ae60e0b0fda638a6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2126d6ce6977977be1a3947ae60e0b0fda638a6c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea756bc48cd5eebc0e508fa7679e31f3e2848d60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea756bc48cd5eebc0e508fa7679e31f3e2848d60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea756bc48cd5eebc0e508fa7679e31f3e2848d60"
      },
      {
        "sha": "5ad4dd1ea131f322dc39db5b4e50b2a2be29d6ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ad4dd1ea131f322dc39db5b4e50b2a2be29d6ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ad4dd1ea131f322dc39db5b4e50b2a2be29d6ff"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b739881a7a8d50926660e9f95aa4aa3c1883ab07",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2126d6ce6977977be1a3947ae60e0b0fda638a6c/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2126d6ce6977977be1a3947ae60e0b0fda638a6c/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=2126d6ce6977977be1a3947ae60e0b0fda638a6c",
        "patch": "@@ -16,7 +16,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | libevent | [2.1.11-stable](https://github.com/libevent/libevent/releases) | 2.0.22 | No |  |  |\n | libpng |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n | librsvg | |  |  |  |  |\n-| MiniUPnPc | [2.0.20180203](http://miniupnp.free.fr/files) |  | No |  |  |\n+| MiniUPnPc | [2.0.20180203](https://miniupnp.tuxfamily.org/files) |  | No |  |  |\n | PCRE |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n | Python (tests) |  | [3.5](https://www.python.org/downloads) |  |  |  |\n | qrencode | [3.4.4](https://fukuchi.org/works/qrencode) |  | No |  |  |"
      }
    ]
  },
  {
    "sha": "d5674c5f0f7e51e928a99df0c209d9645924a120",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTY3NGM1ZjBmN2U1MWU5MjhhOTlkZjBjMjA5ZDk2NDU5MjRhMTIw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-10T18:16:11Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-10T18:16:17Z"
      },
      "message": "Merge #17703: build: Improve configure.ac formatting\n\n3ab18246254019896132d1cdb8af2dcdb213ec3b build: Use dnl for all comments in configure.ac, rather than # (fanquake)\n8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036 build: Remove backticks from configure.ac (fanquake)\n\nPull request description:\n\n  Use `dnl` for all comments, rather than `#`.\n  Remove backticks - Their usage for the `bdb_prefix` and `qt5_prefix` commands may have improved backwards compatibility in some cases, however we now require recent versions of macOS. I'm not sure why they were being used in the `HAVE_STD__SYSTEM` and `HAVE_WSYSTEM` defines.\n\nACKs for top commit:\n  dongcarl:\n    ACK 3ab18246254019896132d1cdb8af2dcdb213ec3b\n  hebasto:\n    ACK 3ab18246254019896132d1cdb8af2dcdb213ec3b, I have reviewed the code and it looks OK, I agree it can be merged.\n\nTree-SHA512: 2bcffb52c365acff87a0e6b9527ae31f36fdabb7ea095a8fd261f9a39b2c2848f5dfc148bc38d21e21e7bd761b1a2960e9a96f508c66be84d9569b8a401e812a",
      "tree": {
        "sha": "2898e93f8205fe3a34a426c0aedc35cbe8673fc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2898e93f8205fe3a34a426c0aedc35cbe8673fc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5674c5f0f7e51e928a99df0c209d9645924a120",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhVEgv/ajc8KcOwiXmOQp8L4TbhkMtzwHZMNASpmF+UNHG/d4ePfE3DEiiaxEJP\nRePef6IXece9M7Ihxs877zerTLzVI3beXG0l92uGLsr2xOGuYEoKn08/OcW+srwm\nwwH+fwHz+ZQB6PpONkSXgUN1AwkyX78VHZp3WEH0T7tp4fkPbEZXvJc06wfjWvL0\no3F3GUsu60mRXuQPlch4uq8H6NamMb+ZWnD7LNeFngtEOEuu7dyszvg9eBcAtPp4\nS1VHAvHw8HQhBBKMWFdtGxKi9wp/u7rkWY4a0Dv3z0ls2ZXRsxfBhmwK9SET9tSm\nTPTq0+TPpXZXIaO12RCe0wJ2I3dWUVigYuTGQnDNhPELJC4XLUcyUBqF0ZYQSZGP\nMwvg7mID/aN+YfR7+BGVJunWKKXhR12b28cU9nuU9z1dVCNdN0Tu7/Uk9cPTLVNX\noj0/K0zdB1wODgWHxhIn7ZqRMVf+8XAc4/ZU5fFo2ZdYQqrOC/87q1EpeFYiO1df\n7O8PAarr\n=ZuQ8\n-----END PGP SIGNATURE-----",
        "payload": "tree 2898e93f8205fe3a34a426c0aedc35cbe8673fc1\nparent 2126d6ce6977977be1a3947ae60e0b0fda638a6c\nparent 3ab18246254019896132d1cdb8af2dcdb213ec3b\nauthor MarcoFalke <falke.marco@gmail.com> 1576001771 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576001777 -0500\n\nMerge #17703: build: Improve configure.ac formatting\n\n3ab18246254019896132d1cdb8af2dcdb213ec3b build: Use dnl for all comments in configure.ac, rather than # (fanquake)\n8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036 build: Remove backticks from configure.ac (fanquake)\n\nPull request description:\n\n  Use `dnl` for all comments, rather than `#`.\n  Remove backticks - Their usage for the `bdb_prefix` and `qt5_prefix` commands may have improved backwards compatibility in some cases, however we now require recent versions of macOS. I'm not sure why they were being used in the `HAVE_STD__SYSTEM` and `HAVE_WSYSTEM` defines.\n\nACKs for top commit:\n  dongcarl:\n    ACK 3ab18246254019896132d1cdb8af2dcdb213ec3b\n  hebasto:\n    ACK 3ab18246254019896132d1cdb8af2dcdb213ec3b, I have reviewed the code and it looks OK, I agree it can be merged.\n\nTree-SHA512: 2bcffb52c365acff87a0e6b9527ae31f36fdabb7ea095a8fd261f9a39b2c2848f5dfc148bc38d21e21e7bd761b1a2960e9a96f508c66be84d9569b8a401e812a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5674c5f0f7e51e928a99df0c209d9645924a120",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5674c5f0f7e51e928a99df0c209d9645924a120",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5674c5f0f7e51e928a99df0c209d9645924a120/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2126d6ce6977977be1a3947ae60e0b0fda638a6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2126d6ce6977977be1a3947ae60e0b0fda638a6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2126d6ce6977977be1a3947ae60e0b0fda638a6c"
      },
      {
        "sha": "3ab18246254019896132d1cdb8af2dcdb213ec3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ab18246254019896132d1cdb8af2dcdb213ec3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ab18246254019896132d1cdb8af2dcdb213ec3b"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 54,
      "deletions": 55
    },
    "files": [
      {
        "sha": "e7d14202a7f14ce88279661684027d3215bc075f",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 54,
        "deletions": 55,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5674c5f0f7e51e928a99df0c209d9645924a120/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5674c5f0f7e51e928a99df0c209d9645924a120/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=d5674c5f0f7e51e928a99df0c209d9645924a120",
        "patch": "@@ -243,27 +243,27 @@ AC_ARG_ENABLE(man,\n     enable_man=yes)\n AM_CONDITIONAL(ENABLE_MAN, test \"$enable_man\" != no)\n \n-# Enable debug\n+dnl Enable debug\n AC_ARG_ENABLE([debug],\n     [AS_HELP_STRING([--enable-debug],\n                     [use compiler flags and macros suited for debugging (default is no)])],\n     [enable_debug=$enableval],\n     [enable_debug=no])\n \n-# Enable different -fsanitize options\n+dnl Enable different -fsanitize options\n AC_ARG_WITH([sanitizers],\n     [AS_HELP_STRING([--with-sanitizers],\n                     [comma separated list of extra sanitizers to build with (default is none enabled)])],\n     [use_sanitizers=$withval])\n \n-# Enable gprof profiling\n+dnl Enable gprof profiling\n AC_ARG_ENABLE([gprof],\n     [AS_HELP_STRING([--enable-gprof],\n                     [use gprof profiling compiler flags (default is no)])],\n     [enable_gprof=$enableval],\n     [enable_gprof=no])\n \n-# Turn warnings into errors\n+dnl Turn warnings into errors\n AC_ARG_ENABLE([werror],\n     [AS_HELP_STRING([--enable-werror],\n                     [Treat certain compiler warnings as errors (default is no)])],\n@@ -274,15 +274,15 @@ AC_LANG_PUSH([C++])\n AX_CHECK_COMPILE_FLAG([-Werror],[CXXFLAG_WERROR=\"-Werror\"],[CXXFLAG_WERROR=\"\"])\n \n if test \"x$enable_debug\" = xyes; then\n-  # Clear default -g -O2 flags\n+  dnl Clear default -g -O2 flags\n   if test \"x$CXXFLAGS_overridden\" = xno; then\n \tCXXFLAGS=\"\"\n   fi\n \n-  # Disable all optimizations\n+  dnl Disable all optimizations\n   AX_CHECK_COMPILE_FLAG([-O0], [[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -O0\"]],,[[$CXXFLAG_WERROR]])\n \n-  # Prefer -g3, fall back to -g if that is unavailable.\n+  dnl Prefer -g3, fall back to -g if that is unavailable.\n   AX_CHECK_COMPILE_FLAG(\n     [-g3],\n     [[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -g3\"]],\n@@ -295,19 +295,19 @@ if test \"x$enable_debug\" = xyes; then\n fi\n \n if test x$use_sanitizers != x; then\n-  # First check if the compiler accepts flags. If an incompatible pair like\n-  # -fsanitize=address,thread is used here, this check will fail. This will also\n-  # fail if a bad argument is passed, e.g. -fsanitize=undfeined\n+  dnl First check if the compiler accepts flags. If an incompatible pair like\n+  dnl -fsanitize=address,thread is used here, this check will fail. This will also\n+  dnl fail if a bad argument is passed, e.g. -fsanitize=undfeined\n   AX_CHECK_COMPILE_FLAG(\n     [[-fsanitize=$use_sanitizers]],\n     [[SANITIZER_CXXFLAGS=-fsanitize=$use_sanitizers]],\n     [AC_MSG_ERROR([compiler did not accept requested flags])])\n \n-  # Some compilers (e.g. GCC) require additional libraries like libasan,\n-  # libtsan, libubsan, etc. Make sure linking still works with the sanitize\n-  # flag. This is a separate check so we can give a better error message when\n-  # the sanitize flags are supported by the compiler but the actual sanitizer\n-  # libs are missing.\n+  dnl Some compilers (e.g. GCC) require additional libraries like libasan,\n+  dnl libtsan, libubsan, etc. Make sure linking still works with the sanitize\n+  dnl flag. This is a separate check so we can give a better error message when\n+  dnl the sanitize flags are supported by the compiler but the actual sanitizer\n+  dnl libs are missing.\n   AX_CHECK_LINK_FLAG(\n     [[-fsanitize=$use_sanitizers]],\n     [[SANITIZER_LDFLAGS=-fsanitize=$use_sanitizers]],\n@@ -344,9 +344,9 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wredundant-decls],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wredundant-decls\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wunused-variable],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-variable\"],,[[$CXXFLAG_WERROR]])\n \n-  ## Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n-  ## unknown options if any other warning is produced. Test the -Wfoo case, and\n-  ## set the -Wno-foo case if it works.\n+  dnl Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n+  dnl unknown options if any other warning is produced. Test the -Wfoo case, and\n+  dnl set the -Wno-foo case if it works.\n   AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wself-assign],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n@@ -361,9 +361,9 @@ enable_shani=no\n \n if test \"x$use_asm\" = \"xyes\"; then\n \n-# Check for optional instruction set support. Enabling these does _not_ imply that all code will\n-# be compiled with them, rather that specific objects/libs may use them after checking for runtime\n-# compatibility.\n+dnl Check for optional instruction set support. Enabling these does _not_ imply that all code will\n+dnl be compiled with them, rather that specific objects/libs may use them after checking for runtime\n+dnl compatibility.\n AX_CHECK_COMPILE_FLAG([-msse4.2],[[SSE42_CXXFLAGS=\"-msse4.2\"]],,[[$CXXFLAG_WERROR]])\n AX_CHECK_COMPILE_FLAG([-msse4.1],[[SSE41_CXXFLAGS=\"-msse4.1\"]],,[[$CXXFLAG_WERROR]])\n AX_CHECK_COMPILE_FLAG([-mavx -mavx2],[[AVX2_CXXFLAGS=\"-mavx -mavx2\"]],,[[$CXXFLAG_WERROR]])\n@@ -506,8 +506,8 @@ case $host in\n      AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(libiphlpapi missing))\n      AC_CHECK_LIB([crypt32],      [main],, AC_MSG_ERROR(libcrypt32 missing))\n \n-     # -static is interpreted by libtool, where it has a different meaning.\n-     # In libtool-speak, it's -all-static.\n+     dnl -static is interpreted by libtool, where it has a different meaning.\n+     dnl In libtool-speak, it's -all-static.\n      AX_CHECK_LINK_FLAG([[-static]],[LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"])\n \n      AC_PATH_PROG([MAKENSIS], [makensis], none)\n@@ -555,8 +555,8 @@ case $host in\n          dnl It's safe to add these paths even if the functionality is disabled by\n          dnl the user (--without-wallet or --without-gui for example).\n \n-         bdb_prefix=`$BREW --prefix berkeley-db4 2>/dev/null`\n-         qt5_prefix=`$BREW --prefix qt5 2>/dev/null`\n+         bdb_prefix=$($BREW --prefix berkeley-db4 2>/dev/null)\n+         qt5_prefix=$($BREW --prefix qt5 2>/dev/null)\n          if test x$bdb_prefix != x; then\n            CPPFLAGS=\"$CPPFLAGS -I$bdb_prefix/include\"\n            LIBS=\"$LIBS -L$bdb_prefix/lib\"\n@@ -673,11 +673,11 @@ AC_C_BIGENDIAN\n dnl Check for pthread compile/link requirements\n AX_PTHREAD\n \n-# The following macro will add the necessary defines to bitcoin-config.h, but\n-# they also need to be passed down to any subprojects. Pull the results out of\n-# the cache and add them to CPPFLAGS.\n+dnl The following macro will add the necessary defines to bitcoin-config.h, but\n+dnl they also need to be passed down to any subprojects. Pull the results out of\n+dnl the cache and add them to CPPFLAGS.\n AC_SYS_LARGEFILE\n-# detect POSIX or GNU variant of strerror_r\n+dnl detect POSIX or GNU variant of strerror_r\n AC_FUNC_STRERROR_R\n \n if test x$ac_cv_sys_file_offset_bits != x &&\n@@ -700,12 +700,12 @@ AX_GCC_FUNC_ATTRIBUTE([dllimport])\n \n if test x$use_glibc_compat != xno; then\n \n-  #glibc absorbed clock_gettime in 2.17. librt (its previous location) is safe to link\n-  #in anyway for back-compat.\n+  dnl glibc absorbed clock_gettime in 2.17. librt (its previous location) is safe to link\n+  dnl in anyway for back-compat.\n   AC_CHECK_LIB([rt],[clock_gettime],, AC_MSG_ERROR(librt missing))\n \n-  #__fdelt_chk's params and return type have changed from long unsigned int to long int.\n-  # See which one is present here.\n+  dnl __fdelt_chk's params and return type have changed from long unsigned int to long int.\n+  dnl See which one is present here.\n   AC_MSG_CHECKING(__fdelt_chk type)\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef _FORTIFY_SOURCE\n                     #undef _FORTIFY_SOURCE\n@@ -741,22 +741,22 @@ if test \"x$enable_gprof\" = xyes; then\n fi\n \n if test x$TARGET_OS != xwindows; then\n-  # All windows code is PIC, forcing it on just adds useless compile warnings\n+  dnl All windows code is PIC, forcing it on just adds useless compile warnings\n   AX_CHECK_COMPILE_FLAG([-fPIC],[PIC_FLAGS=\"-fPIC\"])\n fi\n \n-# All versions of gcc that we commonly use for building are subject to bug\n-# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n-# -fstack-reuse=none for all gcc builds. (Only gcc understands this flag)\n+dnl All versions of gcc that we commonly use for building are subject to bug\n+dnl https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+dnl -fstack-reuse=none for all gcc builds. (Only gcc understands this flag)\n AX_CHECK_COMPILE_FLAG([-fstack-reuse=none],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-reuse=none\"])\n if test x$use_hardening != xno; then\n   use_hardening=yes\n   AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n   AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n \n-  # When enable_debug is yes, all optimizations are disabled.\n-  # However, FORTIFY_SOURCE requires that there is some level of optimization, otherwise it does nothing and just creates a compiler warning.\n-  # Since FORTIFY_SOURCE is a no-op without optimizations, do not enable it when enable_debug is yes.\n+  dnl When enable_debug is yes, all optimizations are disabled.\n+  dnl However, FORTIFY_SOURCE requires that there is some level of optimization, otherwise it does nothing and just creates a compiler warning.\n+  dnl Since FORTIFY_SOURCE is a no-op without optimizations, do not enable it when enable_debug is yes.\n   if test x$enable_debug != xyes; then\n     AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[\n       AX_CHECK_PREPROC_FLAG([-U_FORTIFY_SOURCE],[\n@@ -788,8 +788,8 @@ fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])\n \n-# FD_ZERO may be dependent on a declaration of memcpy, e.g. in SmartOS\n-# check that it fails to build without memcpy, then that it builds with\n+dnl FD_ZERO may be dependent on a declaration of memcpy, e.g. in SmartOS\n+dnl check that it fails to build without memcpy, then that it builds with\n AC_MSG_CHECKING(FD_ZERO memcpy dependence)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     #include <cstddef>\n@@ -827,7 +827,7 @@ AC_CHECK_DECLS([getifaddrs, freeifaddrs],,,\n )\n AC_CHECK_DECLS([strnlen])\n \n-# Check for daemon(3), unrelated to --with-daemon (although used by it)\n+dnl Check for daemon(3), unrelated to --with-daemon (although used by it)\n AC_CHECK_DECLS([daemon])\n \n AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n@@ -893,19 +893,19 @@ if test \"x$use_thread_local\" = xyes || { test \"x$use_thread_local\" = xauto && te\n     [\n      case $host in\n        *mingw*)\n-          # mingw32's implementation of thread_local has also been shown to behave\n-          # erroneously under concurrent usage; see:\n-          # https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n+          dnl mingw32's implementation of thread_local has also been shown to behave\n+          dnl erroneously under concurrent usage; see:\n+          dnl https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n           AC_MSG_RESULT(no)\n           ;;\n         *darwin*)\n-          # TODO enable thread_local on later versions of Darwin where it is\n-          # supported (per https://stackoverflow.com/a/29929949)\n+          dnl TODO enable thread_local on later versions of Darwin where it is\n+          dnl supported (per https://stackoverflow.com/a/29929949)\n           AC_MSG_RESULT(no)\n           ;;\n         *freebsd*)\n-          # FreeBSD's implementation of thread_local is also buggy (per\n-          # https://groups.google.com/d/msg/bsdmailinglist/22ncTZAbDp4/Dii_pII5AwAJ)\n+          dnl FreeBSD's implementation of thread_local is also buggy (per\n+          dnl https://groups.google.com/d/msg/bsdmailinglist/22ncTZAbDp4/Dii_pII5AwAJ)\n           AC_MSG_RESULT(no)\n           ;;\n         *)\n@@ -921,7 +921,7 @@ if test \"x$use_thread_local\" = xyes || { test \"x$use_thread_local\" = xauto && te\n   LDFLAGS=\"$TEMP_LDFLAGS\"\n fi\n \n-# Check for different ways of gathering OS randomness\n+dnl Check for different ways of gathering OS randomness\n AC_MSG_CHECKING(for Linux getrandom syscall)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n   #include <sys/syscall.h>\n@@ -975,7 +975,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <stdint.h>\n  [ AC_MSG_RESULT(no)]\n )\n \n-# Check for reduced exports\n+dnl Check for reduced exports\n if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n   [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])\n@@ -987,7 +987,7 @@ AC_LINK_IFELSE(\n         [[ #include <cstdlib> ]],\n         [[ int nErr = std::system(\"\"); ]]\n     )],\n-    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_STD__SYSTEM, 1, Define to 1 if you have the `std::system' function.)],\n+    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_STD__SYSTEM, 1, Define to 1 if std::system is available.)],\n     [ AC_MSG_RESULT(no) ]\n )\n \n@@ -997,11 +997,10 @@ AC_LINK_IFELSE(\n         [[ ]],\n         [[ int nErr = ::_wsystem(\"\"); ]]\n     )],\n-    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_WSYSTEM, 1, Define to 1 if you have the `::wsystem' function.)],\n+    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_WSYSTEM, 1, Define to 1 if ::wsystem is available.)],\n     [ AC_MSG_RESULT(no) ]\n )\n \n-# Define to 1 if std::system or ::wsystem (Windows) is available\n AC_DEFINE([HAVE_SYSTEM], [HAVE_STD__SYSTEM || HAVE_WSYSTEM], [std::system or ::wsystem])\n \n LEVELDB_CPPFLAGS="
      }
    ]
  },
  {
    "sha": "3d6752779f0504e6435fe682f0c06c60b5c4c33b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDY3NTI3NzlmMDUwNGU2NDM1ZmU2ODJmMGMwNmM2MGI1YzRjMzNi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-10T18:30:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-10T18:30:37Z"
      },
      "message": "Merge #17633: tests: Add option --valgrind to run the functional tests under Valgrind\n\n5db506ba5943868cc2c845f717508739b7f05714 tests: Add option --valgrind to run nodes under valgrind in the functional tests (practicalswift)\n\nPull request description:\n\n  What is better than fixing bugs? Fixing entire bug classes of course! :)\n\n  Add option `--valgrind` to run the functional tests under Valgrind.\n\n  Regular functional testing under Valgrind would have caught many of the uninitialized reads we've seen historically.\n\n  Let's kill this bug class once and for all: let's never use an uninitialized value ever again. Or at least not one that would be triggered by running the functional tests! :)\n\n  My hope is that this addition will make it super-easy to run the functional tests under Valgrind and thus increase the probability of people making use of it :)\n\n  Hopefully `test/functional/test_runner.py --valgrind` will become a natural part of the pre-release QA process.\n\n  **Usage:**\n\n  ```\n  $ test/functional/test_runner.py --help\n  \u2026\n    --valgrind            run nodes under the valgrind memory error detector:\n                          expect at least a ~10x slowdown, valgrind 3.14 or\n                          later required\n  ```\n\n  **Live demo:**\n\n  First, let's re-introduce a memory bug by reverting the recent P2P uninitialized read bug fix from PR #17624 (\"net: Fix an uninitialized read in ProcessMessage(\u2026, \"tx\", \u2026) when receiving a transaction we already have\").\n\n  ```\n  $ git diff\n  diff --git a/src/consensus/validation.h b/src/consensus/validation.h\n  index 3401eb64c..940adea33 100644\n  --- a/src/consensus/validation.h\n  +++ b/src/consensus/validation.h\n  @@ -114,7 +114,7 @@ inline ValidationState::~ValidationState() {};\n\n   class TxValidationState : public ValidationState {\n   private:\n  -    TxValidationResult m_result = TxValidationResult::TX_RESULT_UNSET;\n  +    TxValidationResult m_result;\n   public:\n       bool Invalid(TxValidationResult result,\n                    const std::string &reject_reason=\"\",\n  ```\n\n  Second, let's test as normal without Valgrind:\n\n  ```\n  $ test/functional/p2p_segwit.py -l INFO\n  2019-11-28T09:30:42.810000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test__fc8q3qo\n  \u2026\n  2019-11-28T09:31:57.187000Z TestFramework (INFO): Subtest: test_non_standard_witness_blinding (Segwit active = True)\n  \u2026\n  2019-11-28T09:32:08.265000Z TestFramework (INFO): Tests successful\n  ```\n\n  Third, let's test with `--valgrind` and see if the test fail (as we expect) when the unitialized value is used:\n\n  ```\n  $ test/functional/p2p_segwit.py -l INFO --valgrind\n  2019-11-28T09:32:33.018000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_gtjecx2l\n  \u2026\n  2019-11-28T09:40:36.702000Z TestFramework (INFO): Subtest: test_non_standard_witness_blinding (Segwit active = True)\n  2019-11-28T09:40:37.813000Z TestFramework (ERROR): Assertion failed\n  ConnectionRefusedError: [Errno 111] Connection refused\n  ```\n\nACKs for top commit:\n  MarcoFalke:\n    ACK 5db506ba5943868cc2c845f717508739b7f05714\n  jonatack:\n    ACK 5db506ba5943868cc2c845f717508739b7f05714\n\nTree-SHA512: 2eaecacf4da166febad88b2a8ee6d7ac2bcd38d4c1892ca39516b6343e8f8c8814edf5eaf14c90f11a069a0389d24f0713076112ac284de987e72fc5f6cc3795",
      "tree": {
        "sha": "c323b79204c61482640557d2d3ffec5f46c6fcfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c323b79204c61482640557d2d3ffec5f46c6fcfe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d6752779f0504e6435fe682f0c06c60b5c4c33b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjIHwv/de5EL/0QTaop7a2938yb0XNrIEe534X+xR0TpL6HrJ2aP3KFtSzGs2hc\nTa5N96/o14etqOmp+VAcr7tO3rgETCUbo1nWFbl/7Rt5Cp3XFl2dGjQLe3naIOC7\nGhRLa3lcdTCtDc+YkyXe3bmmOtceWgJfhoFQVoaYq7A8YmxC9aAL0Ypype+eR8HB\nVl1CzwGhdgDgxRcBSGXzbJRARTRjRZW5hNAqBaKVqqpQZ+i7SAYL3UWA0Snb2JhC\nFAhkFgVVaLcl8qIS3cjDd35JsAednunQMBYMeJNX6rTmCbH59HjyOXEkpzfKzCXG\nN/nbOCnBzGvV8rSM3ab70naKzY9gdcZs11FqFIgPAYVMvZhjsdlrg/sd5TO55LZc\n6OIWM4M1JxKx5CpPXtMxmStRsgES2/OmebjLD8rM18/oVJSimz5BbydgnS9RQtzA\nu78mvVSYLSjewYjP3MPTh2BeGhBGm8fqwogi49M5wZwasbhQYmoChqHbIKBplv3I\nKmfHGHV4\n=JaM9\n-----END PGP SIGNATURE-----",
        "payload": "tree c323b79204c61482640557d2d3ffec5f46c6fcfe\nparent d5674c5f0f7e51e928a99df0c209d9645924a120\nparent 5db506ba5943868cc2c845f717508739b7f05714\nauthor MarcoFalke <falke.marco@gmail.com> 1576002605 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576002637 -0500\n\nMerge #17633: tests: Add option --valgrind to run the functional tests under Valgrind\n\n5db506ba5943868cc2c845f717508739b7f05714 tests: Add option --valgrind to run nodes under valgrind in the functional tests (practicalswift)\n\nPull request description:\n\n  What is better than fixing bugs? Fixing entire bug classes of course! :)\n\n  Add option `--valgrind` to run the functional tests under Valgrind.\n\n  Regular functional testing under Valgrind would have caught many of the uninitialized reads we've seen historically.\n\n  Let's kill this bug class once and for all: let's never use an uninitialized value ever again. Or at least not one that would be triggered by running the functional tests! :)\n\n  My hope is that this addition will make it super-easy to run the functional tests under Valgrind and thus increase the probability of people making use of it :)\n\n  Hopefully `test/functional/test_runner.py --valgrind` will become a natural part of the pre-release QA process.\n\n  **Usage:**\n\n  ```\n  $ test/functional/test_runner.py --help\n  \u2026\n    --valgrind            run nodes under the valgrind memory error detector:\n                          expect at least a ~10x slowdown, valgrind 3.14 or\n                          later required\n  ```\n\n  **Live demo:**\n\n  First, let's re-introduce a memory bug by reverting the recent P2P uninitialized read bug fix from PR #17624 (\"net: Fix an uninitialized read in ProcessMessage(\u2026, \"tx\", \u2026) when receiving a transaction we already have\").\n\n  ```\n  $ git diff\n  diff --git a/src/consensus/validation.h b/src/consensus/validation.h\n  index 3401eb64c..940adea33 100644\n  --- a/src/consensus/validation.h\n  +++ b/src/consensus/validation.h\n  @@ -114,7 +114,7 @@ inline ValidationState::~ValidationState() {};\n\n   class TxValidationState : public ValidationState {\n   private:\n  -    TxValidationResult m_result = TxValidationResult::TX_RESULT_UNSET;\n  +    TxValidationResult m_result;\n   public:\n       bool Invalid(TxValidationResult result,\n                    const std::string &reject_reason=\"\",\n  ```\n\n  Second, let's test as normal without Valgrind:\n\n  ```\n  $ test/functional/p2p_segwit.py -l INFO\n  2019-11-28T09:30:42.810000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test__fc8q3qo\n  \u2026\n  2019-11-28T09:31:57.187000Z TestFramework (INFO): Subtest: test_non_standard_witness_blinding (Segwit active = True)\n  \u2026\n  2019-11-28T09:32:08.265000Z TestFramework (INFO): Tests successful\n  ```\n\n  Third, let's test with `--valgrind` and see if the test fail (as we expect) when the unitialized value is used:\n\n  ```\n  $ test/functional/p2p_segwit.py -l INFO --valgrind\n  2019-11-28T09:32:33.018000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_gtjecx2l\n  \u2026\n  2019-11-28T09:40:36.702000Z TestFramework (INFO): Subtest: test_non_standard_witness_blinding (Segwit active = True)\n  2019-11-28T09:40:37.813000Z TestFramework (ERROR): Assertion failed\n  ConnectionRefusedError: [Errno 111] Connection refused\n  ```\n\nACKs for top commit:\n  MarcoFalke:\n    ACK 5db506ba5943868cc2c845f717508739b7f05714\n  jonatack:\n    ACK 5db506ba5943868cc2c845f717508739b7f05714\n\nTree-SHA512: 2eaecacf4da166febad88b2a8ee6d7ac2bcd38d4c1892ca39516b6343e8f8c8814edf5eaf14c90f11a069a0389d24f0713076112ac284de987e72fc5f6cc3795\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d6752779f0504e6435fe682f0c06c60b5c4c33b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d6752779f0504e6435fe682f0c06c60b5c4c33b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d6752779f0504e6435fe682f0c06c60b5c4c33b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5674c5f0f7e51e928a99df0c209d9645924a120",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5674c5f0f7e51e928a99df0c209d9645924a120",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5674c5f0f7e51e928a99df0c209d9645924a120"
      },
      {
        "sha": "5db506ba5943868cc2c845f717508739b7f05714",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5db506ba5943868cc2c845f717508739b7f05714",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5db506ba5943868cc2c845f717508739b7f05714"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "da92c6325a721fcee1a43aae52d634b7b7e6d029",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d6752779f0504e6435fe682f0c06c60b5c4c33b/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d6752779f0504e6435fe682f0c06c60b5c4c33b/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=3d6752779f0504e6435fe682f0c06c60b5c4c33b",
        "patch": "@@ -161,6 +161,8 @@ def parse_args(self):\n                             help=\"use bitcoin-cli instead of RPC for all commands\")\n         parser.add_argument(\"--perf\", dest=\"perf\", default=False, action=\"store_true\",\n                             help=\"profile running nodes with perf for the duration of the test\")\n+        parser.add_argument(\"--valgrind\", dest=\"valgrind\", default=False, action=\"store_true\",\n+                            help=\"run nodes under the valgrind memory error detector: expect at least a ~10x slowdown, valgrind 3.14 or later required\")\n         parser.add_argument(\"--randomseed\", type=int,\n                             help=\"set a random seed for deterministically reproducing a previous test run\")\n         self.add_options(parser)\n@@ -398,6 +400,7 @@ def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None):\n                 extra_args=extra_args[i],\n                 use_cli=self.options.usecli,\n                 start_perf=self.options.perf,\n+                use_valgrind=self.options.valgrind,\n             ))\n \n     def start_node(self, i, *args, **kwargs):"
      },
      {
        "sha": "40681790b9cabb28c9ca7fceb7a14bac5e0b0636",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d6752779f0504e6435fe682f0c06c60b5c4c33b/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d6752779f0504e6435fe682f0c06c60b5c4c33b/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=3d6752779f0504e6435fe682f0c06c60b5c4c33b",
        "patch": "@@ -59,7 +59,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, *, chain, rpchost, timewait, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n+    def __init__(self, i, datadir, *, chain, rpchost, timewait, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False, use_valgrind=False):\n         \"\"\"\n         Kwargs:\n             start_perf (bool): If True, begin profiling the node with `perf` as soon as\n@@ -96,6 +96,15 @@ def __init__(self, i, datadir, *, chain, rpchost, timewait, bitcoind, bitcoin_cl\n             \"-debugexclude=leveldb\",\n             \"-uacomment=testnode%d\" % i,\n         ]\n+        if use_valgrind:\n+            default_suppressions_file = os.path.join(\n+                os.path.dirname(os.path.realpath(__file__)),\n+                \"..\", \"..\", \"..\", \"contrib\", \"valgrind.supp\")\n+            suppressions_file = os.getenv(\"VALGRIND_SUPPRESSIONS_FILE\",\n+                                          default_suppressions_file)\n+            self.args = [\"valgrind\", \"--suppressions={}\".format(suppressions_file),\n+                         \"--gen-suppressions=all\", \"--exit-on-first-error=yes\",\n+                         \"--error-exitcode=1\", \"--quiet\"] + self.args\n \n         self.cli = TestNodeCLI(bitcoin_cli, self.datadir)\n         self.use_cli = use_cli"
      }
    ]
  },
  {
    "sha": "7e8b4de0591437e5a964e458c024eacfd013887d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZThiNGRlMDU5MTQzN2U1YTk2NGU0NThjMDI0ZWFjZmQwMTM4ODdk",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-12-10T18:42:59Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-12-10T18:48:53Z"
      },
      "message": "rpc: add missing newline in analyzepsbt rpcresult\n\nfollow-up to 638e40c",
      "tree": {
        "sha": "2e3b5fc3f878b7dd957c502ef128a85270d1115e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e3b5fc3f878b7dd957c502ef128a85270d1115e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e8b4de0591437e5a964e458c024eacfd013887d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3v6KgACgkQT1chs9Dj\nkh0QpQ//USPHF8Mvdpl6KNU3lmDcf64OC6zS0mFqdCTFM+JtT+sdmNfDrLFP1bIL\n1YNuNadwstZjSjt+ij5R69oXAMTXQ1BUse3pq1mi+eYV9skUr6j0qlHZk9PJUnql\nob6GBoMxBaaZaIpcRGBn7xqss1iCGpc8VJPCk9p3X8fBzr0uAkQkvy08AKVUE25v\nKtRR4Qo7qPk2kUh+0YKBYFzTSbqadiQtThebMEgtoprf4DVBW0nOOguHV6CI9aQ8\nFn2V1dbvr+yaUEYv6GVlQ9v3pO7NiACvYr1CkGEJwzncQyl1k8B8q7cD3/08Dn3F\nE6Ww+yuIpCB852w4lKjtn2VSq0jkgazrkAx5nDlq4kpuYIm1UUHiUP23RzEbuX/9\nftE2ALCjZn39Wdx8Rk73v8VCOnsYBEPGMdH1mEmLKsx2W8N1cAx6ebJRx0mIjw+a\nQuGAboEZGu8Tj12Tdm8rb+44mmA8BhMFa0eNnQgxgJr6TWBvWU72K+lmxexDCrLl\ncFutgouxnT3ANeMc3xWggPvl/AMpFVLkxlkvy7SzZeelq4I1emJ0MVvxn2r6sOw3\nCOHeMZBLrQc/B8NEhs7D5WCHOPVxwf/p5rYG7XPimLO0VWVYdanxTEXJU1aVgI0L\nwFYkShufims8+GKKXVXuwd6X6mnwuCZY8lLjpSj+RcKlZ9P4oJQ=\n=56r5\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDa47qNgxYnu/pdcQLiBtPXqu9S5GxP/+0oKYW2kLDERCP/wEAiA4KyaWSzM\nb2LvQnNA6QMI8SCxSeD6+qFQ/kyZTMPm5IesY18LOubEaYUbIfyVGgSEuAjxBF3v\n6KnwCHjhAMx0CobfAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5l\ndGVybml0eXdhbGwuY29t//AQEOFcY5sWcHVlrX/JekxWlAjwIDlYu2HuDpX/f7Y1\nzubVkWgJr+LIWkzBvN3ARUWsOrnjCPEEXe/oqvAI2EI0hyoluwkAg9/jDS75DI4s\nK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmf/8BAe\niM4ZYbe80kwtzIXtByDVCPEEXe/oqvAIm+i2yGSXpQQAg9/jDS75DI4jImh0dHBz\nOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23wELySAURVYEPLLuDIu4Hc2VsI\n8CDD8UuXZgbTQ3xxdiDRYujEN89VrIY2nXN1in7UtjyJOAjxBF3v6KrwCKIknkR1\nDqewAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 2e3b5fc3f878b7dd957c502ef128a85270d1115e\nparent ea756bc48cd5eebc0e508fa7679e31f3e2848d60\nauthor Jon Atack <jon@atack.com> 1576003379 +0100\ncommitter Jon Atack <jon@atack.com> 1576003733 +0100\n\nrpc: add missing newline in analyzepsbt rpcresult\n\nfollow-up to 638e40c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e8b4de0591437e5a964e458c024eacfd013887d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e8b4de0591437e5a964e458c024eacfd013887d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e8b4de0591437e5a964e458c024eacfd013887d/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea756bc48cd5eebc0e508fa7679e31f3e2848d60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea756bc48cd5eebc0e508fa7679e31f3e2848d60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea756bc48cd5eebc0e508fa7679e31f3e2848d60"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3ffeee73de08820bce734058ad7ec91c60e5a26e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e8b4de0591437e5a964e458c024eacfd013887d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e8b4de0591437e5a964e458c024eacfd013887d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=7e8b4de0591437e5a964e458c024eacfd013887d",
        "patch": "@@ -1674,7 +1674,7 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n                 \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction in \" + CURRENCY_UNIT + \"/kB. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n                 \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n                 \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n-                \"  \\\"error\\\" : \\\"error\\\"               (string) Error message if there is one\"\n+                \"  \\\"error\\\" : \\\"error\\\"               (string) Error message if there is one\\n\"\n                 \"}\\n\"\n             },\n             RPCExamples {"
      }
    ]
  },
  {
    "sha": "4863a8ff16787be6b720788c607972a728276e57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODYzYThmZjE2Nzg3YmU2YjcyMDc4OGM2MDc5NzJhNzI4Mjc2ZTU3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-11T11:27:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-11T11:27:51Z"
      },
      "message": "Merge #17698: depends: don't configure xcb_proto\n\ne97f5c18238835bc3a3aee2e9e65b287f1c8b938 depends: don't configure xcb_proto (fanquake)\n\nPull request description:\n\n  xcb_proto's configure doesn't understand `--disable-shared` or\n  `--with-pic`. All the package does it put a stack of XML files into\n  a directory to be used by libxcb.\n\n  Probably enough to close #16354.\n\nACKs for top commit:\n  dongcarl:\n    ACK e97f5c18238835bc3a3aee2e9e65b287f1c8b938\n\nTree-SHA512: 1a49fd7c8269405bbf312be33c1aeaac5f25ef8666829b01dc3c58f3a2a9281c23c42614a7f1cfc3ee260be4ea3e71285869b1cb9c2035dceda336296d9d9dea",
      "tree": {
        "sha": "25639ad1e02e37a8bd9efca01bf25c57e02de953",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25639ad1e02e37a8bd9efca01bf25c57e02de953"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4863a8ff16787be6b720788c607972a728276e57",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3w0rcACgkQHkrtYphs\n0l1VbQf9EjZXdnHYGeThjoj6a2l9z4gj0W2Bm0raWMgTI4JJ8AlgkEM2nFAF1Zuo\nd7g62oLlOqAQ9dcJQIRtZgZtTeEaM48fLymzAwHrRTHh/YmG/EvNtpLeM2TdpF0z\nCriIEsFcQd+0M8iCFumn2fxq+3LH/QpY6uRC8ugHHb94XSQ0SeeZd+RbhCegXDtT\n765sH6ZFBvj512m6NtkhN13Pc/gvCfEGWU2zhx0ZFGWTHzPL1+/nwxa1ORblW4QR\n7DWfg5dBJpkfYdAZq3wBmpCQQL+lRTZqJX6uDTirydFMvH/WNvfP38BSS0ccfxnV\nViFETa8wcjVJmuhNv5RxIsHeUQ/wEQ==\n=kMlH\n-----END PGP SIGNATURE-----",
        "payload": "tree 25639ad1e02e37a8bd9efca01bf25c57e02de953\nparent 3d6752779f0504e6435fe682f0c06c60b5c4c33b\nparent e97f5c18238835bc3a3aee2e9e65b287f1c8b938\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1576063664 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1576063671 +0100\n\nMerge #17698: depends: don't configure xcb_proto\n\ne97f5c18238835bc3a3aee2e9e65b287f1c8b938 depends: don't configure xcb_proto (fanquake)\n\nPull request description:\n\n  xcb_proto's configure doesn't understand `--disable-shared` or\n  `--with-pic`. All the package does it put a stack of XML files into\n  a directory to be used by libxcb.\n\n  Probably enough to close #16354.\n\nACKs for top commit:\n  dongcarl:\n    ACK e97f5c18238835bc3a3aee2e9e65b287f1c8b938\n\nTree-SHA512: 1a49fd7c8269405bbf312be33c1aeaac5f25ef8666829b01dc3c58f3a2a9281c23c42614a7f1cfc3ee260be4ea3e71285869b1cb9c2035dceda336296d9d9dea\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4863a8ff16787be6b720788c607972a728276e57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4863a8ff16787be6b720788c607972a728276e57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4863a8ff16787be6b720788c607972a728276e57/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d6752779f0504e6435fe682f0c06c60b5c4c33b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d6752779f0504e6435fe682f0c06c60b5c4c33b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d6752779f0504e6435fe682f0c06c60b5c4c33b"
      },
      {
        "sha": "e97f5c18238835bc3a3aee2e9e65b287f1c8b938",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e97f5c18238835bc3a3aee2e9e65b287f1c8b938",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e97f5c18238835bc3a3aee2e9e65b287f1c8b938"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 0,
      "deletions": 5
    },
    "files": [
      {
        "sha": "01203a0718af93deff60d84fb337848e79ae661e",
        "filename": "depends/packages/xcb_proto.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4863a8ff16787be6b720788c607972a728276e57/depends/packages/xcb_proto.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4863a8ff16787be6b720788c607972a728276e57/depends/packages/xcb_proto.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/xcb_proto.mk?ref=4863a8ff16787be6b720788c607972a728276e57",
        "patch": "@@ -4,11 +4,6 @@ $(package)_download_path=https://xcb.freedesktop.org/dist\n $(package)_file_name=xcb-proto-$($(package)_version).tar.bz2\n $(package)_sha256_hash=7ef40ddd855b750bc597d2a435da21e55e502a0fefa85b274f2c922800baaf05\n \n-define $(package)_set_vars\n-  $(package)_config_opts=--disable-shared --enable-option-checking\n-  $(package)_config_opts_linux=--with-pic\n-endef\n-\n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef"
      }
    ]
  },
  {
    "sha": "fab9d115cdd2eaae37ec1207ab76795409326683",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI5ZDExNWNkZDJlYWFlMzdlYzEyMDdhYjc2Nzk1NDA5MzI2Njgz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-11T14:44:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-11T14:44:56Z"
      },
      "message": "Merge #17697: CI: GitHub Action workflow which duplicates AppVeyor job\n\nb0b15317370335b21a29193e9872cfdb3b88f46c Adds GitHub Action workflow which duplicates AppVeyor job. (Aaron Clauson)\n\nPull request description:\n\n  As discussed in #17594 this PR contains a GitHub Action workflow file that performs the same job as the current Appveyor CI task except for the Python functional tests. For the latter I've been unable to get them to execute successfully due to a Unicode error. I've tried on and off for a week to get it to work but with no joy.\n\n  It may be that someone more proficient in Python will recognise the error and be able to provide a pointer on how to proceed. I've tried some obvious things like changing the Windows console code page.\n\n  To run this job it should just be a matter of clicking on the GitHub `Actions` tab and enabling workflows. It's also not required that the file is on the `master` branch for the job to run. If anyone else wants to run the job they can pull this PR into their own fork and enable `Actions` (it's free).\n\nTop commit has no ACKs.\n\nTree-SHA512: 8dce7509922ece3438b15ea371ec509a08b507e981a8fb705f1cf5a2b4a147a22ded599942aa95f3bd8d5e98cfc65b50cf3df6171f02dd863659160f1d77ef76",
      "tree": {
        "sha": "43372300b26040e49621e923752807c08680a061",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43372300b26040e49621e923752807c08680a061"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab9d115cdd2eaae37ec1207ab76795409326683",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjcXAwArN+qVBbVkHbzzU2qSE6R+NYDW85DPwjCRTx/QHoSDFgE0O1kJhfeo3T9\nB+RAaNetmizyT34O7Nt6xfD0MWTt7fGePU9OLP1C1IBkwUPmUL+/wj7OpnbasDhK\nNxwrD8g4gBmgI+/9RtFNEsmdjMPo7SIGVh7wtDeeRSscZJ4LYf/xQv6vdLmB4eRY\nZ50vPHms9/l6puMd21Xia7/+1ldzit8mij3CdNEkwH/+d41NX0AkpHgI/vNvj4ZD\n1CnAjbbCErIs6PZxJACxn+or4vmlsdwsyB7zbxkEFqITPa3iWZ/mMCH8FEqtQcu/\nqDIVGUIaCMi71BRXRVgkpsM4GNRulmTkxHoJHVxGlScc+v227LPtfCaVGMnZ2Tbk\nhQLEWcUe5z0h+woF+RKAOX6NB8XGfztjR+SQ71rLaGupfXxoqOFOViJqi+phHSR5\n9K0ntxhO5563MsnSv8vHDs0IcC6ieaAULZet6D0yeILTS/+HCjS309cuXWcT2ZiA\noas/HRPi\n=mRof\n-----END PGP SIGNATURE-----",
        "payload": "tree 43372300b26040e49621e923752807c08680a061\nparent 4863a8ff16787be6b720788c607972a728276e57\nparent b0b15317370335b21a29193e9872cfdb3b88f46c\nauthor MarcoFalke <falke.marco@gmail.com> 1576075466 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576075496 -0500\n\nMerge #17697: CI: GitHub Action workflow which duplicates AppVeyor job\n\nb0b15317370335b21a29193e9872cfdb3b88f46c Adds GitHub Action workflow which duplicates AppVeyor job. (Aaron Clauson)\n\nPull request description:\n\n  As discussed in #17594 this PR contains a GitHub Action workflow file that performs the same job as the current Appveyor CI task except for the Python functional tests. For the latter I've been unable to get them to execute successfully due to a Unicode error. I've tried on and off for a week to get it to work but with no joy.\n\n  It may be that someone more proficient in Python will recognise the error and be able to provide a pointer on how to proceed. I've tried some obvious things like changing the Windows console code page.\n\n  To run this job it should just be a matter of clicking on the GitHub `Actions` tab and enabling workflows. It's also not required that the file is on the `master` branch for the job to run. If anyone else wants to run the job they can pull this PR into their own fork and enable `Actions` (it's free).\n\nTop commit has no ACKs.\n\nTree-SHA512: 8dce7509922ece3438b15ea371ec509a08b507e981a8fb705f1cf5a2b4a147a22ded599942aa95f3bd8d5e98cfc65b50cf3df6171f02dd863659160f1d77ef76\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab9d115cdd2eaae37ec1207ab76795409326683",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab9d115cdd2eaae37ec1207ab76795409326683",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab9d115cdd2eaae37ec1207ab76795409326683/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4863a8ff16787be6b720788c607972a728276e57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4863a8ff16787be6b720788c607972a728276e57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4863a8ff16787be6b720788c607972a728276e57"
      },
      {
        "sha": "b0b15317370335b21a29193e9872cfdb3b88f46c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0b15317370335b21a29193e9872cfdb3b88f46c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0b15317370335b21a29193e9872cfdb3b88f46c"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 76,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f1d5efaa8d29bed7f76645a01b7726e0502bbcf8",
        "filename": ".github/workflows/ci.yml",
        "status": "added",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab9d115cdd2eaae37ec1207ab76795409326683/.github/workflows/ci.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab9d115cdd2eaae37ec1207ab76795409326683/.github/workflows/ci.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/workflows/ci.yml?ref=fab9d115cdd2eaae37ec1207ab76795409326683",
        "patch": "@@ -0,0 +1,76 @@\n+name: bitcoin-core-ci\n+\n+on:\n+  push:\n+jobs:\n+  build:\n+    runs-on: windows-latest\n+    env:\n+        PYTHONUTF8: 1\n+        QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/v1.4/Qt5.9.8_x64_static_vs2019.zip'\n+        QT_DOWNLOAD_HASH: 'f285cbb02bec3b3f3cc2621e3fa7d5edf0d6a66fa30c57859e583acda954ea80'\n+        QT_LOCAL_PATH: 'C:\\Qt5.9.8_x64_static_vs2019'\n+        VCPKG_INSTALL_PATH: \"$env:VCPKG_INSTALLATION_ROOT/installed\"\n+        PLATFORM: x64\n+    steps:\n+    - uses: actions/checkout@v1\n+\n+    - uses: actions/cache@v1\n+      id: vcpkgcache\n+      with:\n+       path: C:/vcpkg/installed\n+       key: ${{ runner.os }}-vcpkg\n+\n+    - name: Update vcpkg and install packages\n+      if: steps.vcpkgcache.outputs.cache-hit != 'true'\n+      run: |\n+        $env:PACKAGES = Get-Content -Path \"$env:GITHUB_WORKSPACE/build_msvc/vcpkg-packages.txt\"\n+        Write-Host \"vcpkg list: $env:PACKAGES\"\n+        cd $env:VCPKG_INSTALLATION_ROOT\n+        git pull origin master\n+        .\\bootstrap-vcpkg.bat\n+        .\\vcpkg install --triplet $env:PLATFORM-windows-static $env:PACKAGES.split() > $null\n+    - name: Install prebuilt Qt libraries\n+      run: |\n+       if(!(Test-Path -Path ($env:QT_LOCAL_PATH))) {\n+          Write-Host \"Downloading Qt binaries.\";\n+          Invoke-WebRequest -Uri $env:QT_DOWNLOAD_URL -Out qtdownload.zip;\n+          Write-Host \"Qt binaries successfully downloaded, checking hash against $env:QT_DOWNLOAD_HASH...\";\n+          if((Get-FileHash qtdownload.zip).Hash -eq $env:QT_DOWNLOAD_HASH) {\n+            Expand-Archive qtdownload.zip -DestinationPath $env:QT_LOCAL_PATH;\n+            Write-Host \"Qt binary download matched the expected hash.\";\n+          }\n+          else {\n+            Write-Host \"ERROR: Qt binary download did not match the expected hash.\";\n+            exit 1\n+          }\n+        }\n+        else {\n+           Write-Host \"Qt binaries already present.\";\n+        }\n+    - name: Generate project files\n+      run: python build_msvc\\msvc-autogen.py\n+    - name: Setup MSBuild.exe\n+      uses: warrenbuckley/Setup-MSBuild@v1\n+    - name: vcpkg integration\n+      run: C:/vcpkg/vcpkg.exe integrate install\n+    - name: Build\n+      run: msbuild build_msvc\\bitcoin.sln /m /v:n /p:Configuration=Release\n+    - name: Run test_bticoin\n+      shell: cmd\n+      run: src\\test_bitcoin.exe -k stdout -e stdout 2> NUL\n+    - name: Run bench_bitcoin\n+      shell: cmd\n+      run: src\\bench_bitcoin.exe -evals=1 -scaling=0 > NUL\n+    - name: bitcoin-util-test\n+      run: python test\\util\\bitcoin-util-test.py\n+    - name: rpcauth-test\n+      shell: cmd\n+      run: python test\\util\\rpcauth-test.py\n+# This step fails due to character UTF encoding error. If anyone knows how Python deals with Unicode they might be\n+# able to decipher the error message.\n+#    - name: test_runner\n+#      shell: cmd\n+#      run: |\n+#       python test\\functional\\test_runner.py --ansi --ci --quiet --combinedlogslen=4000 --failfast --exclude feature_fee_estimation\n+"
      }
    ]
  },
  {
    "sha": "f1d3d3430e3b89e48a879a7645c3c91efa46f156",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWQzZDM0MzBlM2I4OWU0OGE4NzlhNzY0NWMzYzkxZWZhNDZmMTU2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-11T15:40:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-11T15:40:49Z"
      },
      "message": "Merge #17714: rpc: add missing newline in analyzepsbt RPCResult\n\n7e8b4de0591437e5a964e458c024eacfd013887d rpc: add missing newline in analyzepsbt rpcresult (Jon Atack)\n\nPull request description:\n\n  follow-up to 638e40c in #17524\n\n  before\n  ```\n    \"error\" : \"error\"               (string) Error message if there is one}\n  ```\n  after\n  ```\n    \"error\" : \"error\"               (string) Error message if there is one\n  }\n  ```\n\nACKs for top commit:\n  practicalswift:\n    ACK 7e8b4de0591437e5a964e458c024eacfd013887d\n  promag:\n    ACK 7e8b4de0591437e5a964e458c024eacfd013887d.\n  emilengler:\n    ACK 7e8b4de\n\nTree-SHA512: 4cdd365e39d15b7925ea277b7ff3e9bfdc22f5845aa41ca547343b4dabdf319579843a1c7f11fb0edd6abbc31bae2ec96236b83e84f8872bd662848723725e4c",
      "tree": {
        "sha": "d45ff4f5dd34b93bcfeb95d6463729ce6e6cee20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d45ff4f5dd34b93bcfeb95d6463729ce6e6cee20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1d3d3430e3b89e48a879a7645c3c91efa46f156",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUggowv+JxoMPxMPmO1LGPIXo8b20BDtMEYWv7Oh2TSXAO+HTfSMECFKWMvx6ypb\n6Zq+HSPyk9tJ2e+bJw7CQQ/RM8v8+OxvVXQ9DHrjBIcNfzdshz2YU9u10cOK99cX\nTO0Ef7yyacvhXklqcrI1VN0Vw8yg18swaZZHkUNSt/tcXr+eATMbCIcj2qm1UXKs\nW9Do8Qya7jsrcH0GzcGoeqJe9nJ0pd2kF/3zAAeGsaBzFALBAjFPNHd0HkzCH5tc\nmZKcZJF6B61G85J6fsFS8/ecS1gc/ljb8IaLxVXO0sqYqbJPVazd+Hy/YUJQpZ6l\nvY0ShxmN/THak4ZMAkptWXdeUS180tBtAmsZr3EoretWRDnzkn8w+C2PqCRQC/6G\nLw0yJi+8EyzJFaTi025FyE7Il62Wk+/6yGNDlI3CKOJoKSyTcMT8nMKWkE1EDVou\nK3+nQlcYd4RXtiVd3F+NIrE49/OycWRBnI8SChgdqFTqtMHqqGrxjCMrMcm+FndA\nm4VSRwGg\n=qv9T\n-----END PGP SIGNATURE-----",
        "payload": "tree d45ff4f5dd34b93bcfeb95d6463729ce6e6cee20\nparent fab9d115cdd2eaae37ec1207ab76795409326683\nparent 7e8b4de0591437e5a964e458c024eacfd013887d\nauthor MarcoFalke <falke.marco@gmail.com> 1576078845 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576078849 -0500\n\nMerge #17714: rpc: add missing newline in analyzepsbt RPCResult\n\n7e8b4de0591437e5a964e458c024eacfd013887d rpc: add missing newline in analyzepsbt rpcresult (Jon Atack)\n\nPull request description:\n\n  follow-up to 638e40c in #17524\n\n  before\n  ```\n    \"error\" : \"error\"               (string) Error message if there is one}\n  ```\n  after\n  ```\n    \"error\" : \"error\"               (string) Error message if there is one\n  }\n  ```\n\nACKs for top commit:\n  practicalswift:\n    ACK 7e8b4de0591437e5a964e458c024eacfd013887d\n  promag:\n    ACK 7e8b4de0591437e5a964e458c024eacfd013887d.\n  emilengler:\n    ACK 7e8b4de\n\nTree-SHA512: 4cdd365e39d15b7925ea277b7ff3e9bfdc22f5845aa41ca547343b4dabdf319579843a1c7f11fb0edd6abbc31bae2ec96236b83e84f8872bd662848723725e4c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1d3d3430e3b89e48a879a7645c3c91efa46f156",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1d3d3430e3b89e48a879a7645c3c91efa46f156",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1d3d3430e3b89e48a879a7645c3c91efa46f156/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab9d115cdd2eaae37ec1207ab76795409326683",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab9d115cdd2eaae37ec1207ab76795409326683",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab9d115cdd2eaae37ec1207ab76795409326683"
      },
      {
        "sha": "7e8b4de0591437e5a964e458c024eacfd013887d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e8b4de0591437e5a964e458c024eacfd013887d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e8b4de0591437e5a964e458c024eacfd013887d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3ffeee73de08820bce734058ad7ec91c60e5a26e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1d3d3430e3b89e48a879a7645c3c91efa46f156/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1d3d3430e3b89e48a879a7645c3c91efa46f156/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=f1d3d3430e3b89e48a879a7645c3c91efa46f156",
        "patch": "@@ -1674,7 +1674,7 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n                 \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction in \" + CURRENCY_UNIT + \"/kB. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n                 \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n                 \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n-                \"  \\\"error\\\" : \\\"error\\\"               (string) Error message if there is one\"\n+                \"  \\\"error\\\" : \\\"error\\\"               (string) Error message if there is one\\n\"\n                 \"}\\n\"\n             },\n             RPCExamples {"
      }
    ]
  },
  {
    "sha": "14dafcbc13f69eb73fc39a17d9df69399817acdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGRhZmNiYzEzZjY5ZWI3M2ZjMzlhMTdkOWRmNjkzOTk4MTdhY2Rk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-11T18:10:33Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-11T18:10:36Z"
      },
      "message": "Merge #17713: doc: Add release notes for 17447\n\nfa4b656e973405af3f80064ebe7ea592faea46e3 doc: Add release notes for 17447 (MarcoFalke)\n\nPull request description:\n\n  Stolen from https://github.com/bitcoin/bitcoin/pull/17447#issuecomment-553475914\n\nACKs for top commit:\n  promag:\n    ACK fa4b656e973405af3f80064ebe7ea592faea46e3.\n  laanwj:\n    ACK fa4b656e973405af3f80064ebe7ea592faea46e3\n\nTree-SHA512: 5d281c0a85e75c9fae8885faf0e4a2ca4e4f73788f3d214ca65c7c891203a7435cc77fe3046e2d7e3e2226d96c547005f1d970e768d6cd82423f575e07881431",
      "tree": {
        "sha": "8e458791fd302a3557b7a3011c578649c9e13590",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e458791fd302a3557b7a3011c578649c9e13590"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14dafcbc13f69eb73fc39a17d9df69399817acdd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg/6Av/V9mP74fRR7AFDLf1GCZBZeHfXRCU6C5r9bhcEgTkKpUE3jArxAY4QKML\nD4c3lSHbs489zOKEpnZAZ6L4Xs8Wa95K+dQA+vSO8w+WICyppa/xHhV+HlOhkMyQ\nGEsO2EXqLmh/lg83kn2RQIBku9ofG3l48QIo/p0wrBul5BTOJlKLvxAHSGACLaMZ\njWY3oFMuZbHWE2gwPBoUrQpWFwnQM6wsQhMCWlzwZmblPCepNfEDV8rxs8uzJawy\nts2EG3EvsgEE279CdoznZbDaaDoyo0ooS50hRPMOg7At+C6/jAbHKv9XeFYju1Ms\noiRPHpJbffKWjzJnIbizZSDLNEJK13/kTgmjgZqwC0N1Kfz/3lNnA8lQeMETvvxB\n6qEdXRnj3HVvUlBL9dxFmURADGGLwTWpCluuYXtDZyW5Q2NeQMHdLsxDvmqR7fnF\nPLgiGkbnJMQTESPUrNiFgs/5L00dGsWneI3bvo4r6dp/WXwG9RUXBS3dS+Nuw8nA\n6+EAROyF\n=c08A\n-----END PGP SIGNATURE-----",
        "payload": "tree 8e458791fd302a3557b7a3011c578649c9e13590\nparent f1d3d3430e3b89e48a879a7645c3c91efa46f156\nparent fa4b656e973405af3f80064ebe7ea592faea46e3\nauthor MarcoFalke <falke.marco@gmail.com> 1576087833 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576087836 -0500\n\nMerge #17713: doc: Add release notes for 17447\n\nfa4b656e973405af3f80064ebe7ea592faea46e3 doc: Add release notes for 17447 (MarcoFalke)\n\nPull request description:\n\n  Stolen from https://github.com/bitcoin/bitcoin/pull/17447#issuecomment-553475914\n\nACKs for top commit:\n  promag:\n    ACK fa4b656e973405af3f80064ebe7ea592faea46e3.\n  laanwj:\n    ACK fa4b656e973405af3f80064ebe7ea592faea46e3\n\nTree-SHA512: 5d281c0a85e75c9fae8885faf0e4a2ca4e4f73788f3d214ca65c7c891203a7435cc77fe3046e2d7e3e2226d96c547005f1d970e768d6cd82423f575e07881431\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14dafcbc13f69eb73fc39a17d9df69399817acdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14dafcbc13f69eb73fc39a17d9df69399817acdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14dafcbc13f69eb73fc39a17d9df69399817acdd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1d3d3430e3b89e48a879a7645c3c91efa46f156",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1d3d3430e3b89e48a879a7645c3c91efa46f156",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1d3d3430e3b89e48a879a7645c3c91efa46f156"
      },
      {
        "sha": "fa4b656e973405af3f80064ebe7ea592faea46e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4b656e973405af3f80064ebe7ea592faea46e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4b656e973405af3f80064ebe7ea592faea46e3"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cdf83178c6d1ab788f8ceb12b9a87b4a746c2ca6",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14dafcbc13f69eb73fc39a17d9df69399817acdd/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14dafcbc13f69eb73fc39a17d9df69399817acdd/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=14dafcbc13f69eb73fc39a17d9df69399817acdd",
        "patch": "@@ -104,6 +104,10 @@ Low-level changes\n Tests\n -----\n \n+- It is now an error to use an unqualified `walletdir=path` setting in the config file if running on testnet or regtest\n+  networks. The setting now needs to be qualified as `chain.walletdir=path` or placed in the appropriate `[chain]`\n+  section. (#17447)\n+\n - `-fallbackfee` was 0 (disabled) by default for the main chain, but 0.0002 by default for the test chains. Now it is 0\n   by default for all chains. Testnet and regtest users will have to add `fallbackfee=0.0002` to their configuration if\n   they weren't setting it and they want it to keep working like before. (#16524)"
      }
    ]
  },
  {
    "sha": "7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGE5ZTNhODE3MWY5NzZhOWUwMWVlNTVhYjlmZTc5YmQxZjAzM2Qx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-11T18:35:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-11T18:37:15Z"
      },
      "message": "Merge #17050: tests: Add fuzzing harnesses for functions parsing scripts, numbers, JSON and HD keypaths (bip32)\n\na1308b7e12e6af7482954e439f594b771eb62b73 tests: Add fuzzing harnesses for various JSON/univalue parsing functions (practicalswift)\ne3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba tests: Add fuzzing harnesses for various number parsing functions (practicalswift)\nfb8c12093aa37f5536a1a4ba341ee8bab4dabe60 tests: Add ParseScript(...) (core_io) fuzzing harness (practicalswift)\n074cb6451b16158589d743488930963bcf4b024c tests: Add ParseHDKeypath(...) (bip32) fuzzing harness (practicalswift)\n0dc5907d0f0490036c50cb7aee19e31075bbf402 tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus (practicalswift)\n\nPull request description:\n\n  Add fuzzing harnesses for `DecodeRawPSBT(...)`, `ParseHDKeypath(...)`, `ParseScript(...)`, various number parsing functions and various JSON/univalue parsing functions.\n\n  **Testing this PR**\n  As usual the best way to test proposed fuzzing harnesses is to use `test_fuzzing_harnesses.sh` (#17000) to quickly verify that the relevant code regions are triggered, that the fuzzing throughput seems reasonable, etc.\n\n  `test_fuzzing_harnesses.sh 'psbt|hd_keypath|numbers|parse_script|univalue' 10` runs all fuzzers matching the regexp and gives them ten seconds of runtime each.\n\n  ```\n  $ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n  $ make\n  $ contrib/devtools/test_fuzzing_harnesses.sh 'psbt|hd_keypath|numbers|parse_script|univalue' 10\n  Testing fuzzer parse_hd_keypath during 10 second(s)\n  A subset of reached functions:\n          NEW_FUNC[0/2]: 0x55bc23a76940 in ParsePrechecks(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) src/util/strencodings.cpp:267\n          NEW_FUNC[1/2]: 0x55bc23a77300 in ParseUInt32(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int*) src/util/strencodings.cpp:309\n  stat::number_of_executed_units: 34237\n  stat::average_exec_per_sec:     3112\n  stat::new_units_added:          113\n  stat::slowest_unit_time_sec:    0\n  stat::peak_rss_mb:              282\n  Number of unique code paths taken during fuzzing round: 30\n\n  Testing fuzzer parse_numbers during 10 second(s)\n  A subset of reached functions:\n  stat::number_of_executed_units: 31309\n  stat::average_exec_per_sec:     2846\n  stat::new_units_added:          688\n  stat::slowest_unit_time_sec:    0\n  stat::peak_rss_mb:              234\n  Number of unique code paths taken during fuzzing round: 149\n\n  Testing fuzzer parse_script during 10 second(s)\n  A subset of reached functions:\n          NEW_FUNC[1/11]: 0x5636ff61ba00 in IsDigit(char) src/./util/strencodings.h:70\n          NEW_FUNC[0/14]: 0x5636fe6c6280 in CScript::operator<<(opcodetype) src/./script/script.h:448\n          NEW_FUNC[1/14]: 0x5636fe6e0290 in prevector<28u, unsigned char, unsigned int, int>::insert(prevector<28u, unsigned char, unsigned int, int>::iterator, unsigned char const&) src/./prevector.h:342\n          NEW_FUNC[2/14]: 0x5636fe6e1040 in prevector<28u, unsigned char, unsigned int, int>::size() const src/./prevector.h:277\n          NEW_FUNC[3/14]: 0x5636fe6e1250 in prevector<28u, unsigned char, unsigned int, int>::capacity() const src/./prevector.h:295\n          NEW_FUNC[4/14]: 0x5636fe6e1cb0 in prevector<28u, unsigned char, unsigned int, int>::item_ptr(int) src/./prevector.h:196\n          NEW_FUNC[0/10]: 0x5636fe6c5650 in CScript::operator<<(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/./script/script.h:462\n          NEW_FUNC[2/10]: 0x5636fe6e0a20 in void prevector<28u, unsigned char, unsigned int, int>::insert<__gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<unsigned char> > > >(prevector<28u, unsigned char, unsigned int, int>::iterator, __gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<[32/1902]\n  char> > >, __gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<unsigned char> > >) src/./prevector.h:368\n          NEW_FUNC[5/10]: 0x5636fe6e2350 in void prevector<28u, unsigned char, unsigned int, int>::fill<__gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<unsigned char> > > >(unsigned char*, __gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsign\n  ed char const*, std::vector<unsigned char, std::allocator<unsigned char> > >) src/./prevector.h:204\n          NEW_FUNC[0/1]: 0x5636ff8e48b0 in IsHex(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) src/util/strencodings.cpp:61\n          NEW_FUNC[0/2]: 0x5636fe6e1410 in prevector<28u, unsigned char, unsigned int, int>::change_capacity(unsigned int) src/./prevector.h:165\n          NEW_FUNC[1/2]: 0x5636fe6e1f00 in prevector<28u, unsigned char, unsigned int, int>::indirect_ptr(int) src/./prevector.h:161\n          NEW_FUNC[0/1]: 0x5636fe6e0580 in void prevector<28u, unsigned char, unsigned int, int>::insert<unsigned char*>(prevector<28u, unsigned char, unsigned int, int>::iterator, unsigned char*, unsigned char*) src/./prevector.h:368\n          NEW_FUNC[0/3]: 0x5636fe85f0d0 in CScript::push_int64(long) src/./script/script.h:394\n          NEW_FUNC[1/3]: 0x5636fe85f520 in prevector<28u, unsigned char, unsigned int, int>::push_back(unsigned char const&) src/./prevector.h:422\n          NEW_FUNC[2/3]: 0x5636ff8ed730 in atoi64(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) src/util/strencodings.cpp:417\n  stat::number_of_executed_units: 8153\n  stat::average_exec_per_sec:     741\n  stat::new_units_added:          296\n  stat::slowest_unit_time_sec:    0\n  stat::peak_rss_mb:              237\n  Number of unique code paths taken during fuzzing round: 98\n\n  Testing fuzzer parse_univalue during 10 second(s)\n  A subset of reached functions:\n          NEW_FUNC[0/19]: 0x560db8655950 in tinyformat::detail::formatImpl(std::ostream&, char const*, tinyformat::detail::FormatArg const*, int) src/./tinyformat.h:791\n          NEW_FUNC[4/19]: 0x560db86582b0 in tinyformat::detail::printFormatStringLiteral(std::ostream&, char const*) src/./tinyformat.h:564\n          NEW_FUNC[5/19]: 0x560db8658690 in tinyformat::detail::streamStateFromFormat(std::ostream&, bool&, int&, char const*, tinyformat::detail::FormatArg const*, int&, int) src/./tinyformat.h:601\n          NEW_FUNC[6/19]: 0x560db865f090 in tinyformat::detail::FormatArg::format(std::ostream&, char const*, char const*, int) const src/./tinyformat.h:513\n          NEW_FUNC[12/19]: 0x560db8661ba0 in void tinyformat::detail::FormatArg::formatImpl<int>(std::ostream&, char const*, char const*, int, void const*) src/./tinyformat.h:530\n          NEW_FUNC[13/19]: 0x560db8661d90 in void tinyformat::formatValue<int>(std::ostream&, char const*, char const*, int, int const&) src/./tinyformat.h:317\n          NEW_FUNC[14/19]: 0x560db875c8b0 in void tinyformat::detail::FormatArg::formatImpl<unsigned int>(std::ostream&, char const*, char const*, int, void const*) src/./tinyformat.h:530\n          NEW_FUNC[15/19]: 0x560db875caa0 in void tinyformat::formatValue<unsigned int>(std::ostream&, char const*, char const*, int, unsigned int const&) src/./tinyformat.h:317\n          NEW_FUNC[16/19]: 0x560db9473ef0 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > tinyformat::format<int, unsigned int>(char const*, int const&, unsigned int const&) src/./tinyformat.h:976\n          NEW_FUNC[17/19]: 0x560db94749a0 in void tinyformat::format<int, unsigned int>(std::ostream&, char const*, int const&, unsigned int const&) src/./tinyformat.h:968\n          NEW_FUNC[18/19]: 0x560db9474cf0 in tinyformat::detail::FormatListN<2>::FormatListN<int, unsigned int>(int const&, unsigned int const&) src/./tinyformat.h:885\n  stat::number_of_executed_units: 14089\n  stat::average_exec_per_sec:     1280\n  stat::new_units_added:          135\n  stat::slowest_unit_time_sec:    0\n  stat::peak_rss_mb:              356\n  Number of unique code paths taken during fuzzing round: 62\n\n  Testing fuzzer psbt_input_deserialize during 10 second(s)\n  A subset of reached functions:\n          NEW_FUNC[0/46]: 0x557847ce3530 in prevector<28u, unsigned char, unsigned int, int>::~prevector() src/./prevector.h:456\n          NEW_FUNC[3/46]: 0x557847cfdcf0 in prevector<28u, unsigned char, unsigned int, int>::size() const src/./prevector.h:277\n          NEW_FUNC[4/46]: 0x557847cfe0c0 in prevector<28u, unsigned char, unsigned int, int>::change_capacity(unsigned int) src/./prevector.h:165\n          NEW_FUNC[13/46]: 0x557847d3c890 in unsigned long ReadCompactSize<CDataStream>(CDataStream&) src/./serialize.h:290\n          NEW_FUNC[14/46]: 0x557847d47b60 in prevector<28u, unsigned char, unsigned int, int>::resize(unsigned int) src/./prevector.h:311\n          NEW_FUNC[16/46]: 0x557847d48800 in CTxOut::CTxOut() src/./primitives/transaction.h:140\n          NEW_FUNC[17/46]: 0x557847d4b050 in CTxOut::SetNull() src/./primitives/transaction.h:155\n          NEW_FUNC[18/46]: 0x557847d4b140 in CScript::clear() src/./script/script.h:563\n          NEW_FUNC[19/46]: 0x557847d4ead0 in void Unserialize_impl<CDataStream, unsigned char, std::allocator<unsigned char> >(CDataStream&, std::vector<unsigned char, std::allocator<unsigned char> >&, unsigned char const&) src/./serialize.h:746\n          NEW_FUNC[0/58]: 0x557847cfdf00 in prevector<28u, unsigned char, unsigned int, int>::capacity() const src/./prevector.h:295\n          NEW_FUNC[1/58]: 0x557847cfe960 in prevector<28u, unsigned char, unsigned int, int>::item_ptr(int) src/./prevector.h:196\n          NEW_FUNC[2/58]: 0x557847cfebb0 in prevector<28u, unsigned char, unsigned int, int>::indirect_ptr(int) src/./prevector.h:161\n          NEW_FUNC[3/58]: 0x557847d03990 in uint256::uint256() src/./uint256.h:123\n          NEW_FUNC[0/3]: 0x557847d47430 in void CScript::SerializationOp<CDataStream, CSerActionUnserialize>(CDataStream&, CSerActionUnserialize) src/./script/script.h:418\n          NEW_FUNC[1/3]: 0x557847d47730 in void Unserialize_impl<CDataStream, 28u, unsigned char>(CDataStream&, prevector<28u, unsigned char, unsigned int, int>&, unsigned char const&) src/./serialize.h:666\n          NEW_FUNC[2/3]: 0x557847d60dd0 in CDataStream& CDataStream::operator>><CScript&>(CScript&) src/./streams.h:460\n          NEW_FUNC[1/78]: 0x557847cffae0 in prevector<28u, unsigned char, unsigned int, int>::item_ptr(int) const src/./prevector.h:197\n          NEW_FUNC[2/78]: 0x557847cffd30 in prevector<28u, unsigned char, unsigned int, int>::indirect_ptr(int) const src/./prevector.h:162\n          NEW_FUNC[0/1]: 0x557847d65f90 in OverrideStream<CDataStream>& OverrideStream<CDataStream>::operator>><unsigned char&>(unsigned char&) src/./streams.h:46\n          NEW_FUNC[0/3]: 0x557847d470e0 in void SerReadWriteMany<CDataStream, CScript&>(CDataStream&, CSerActionUnserialize, CScript&) src/./serialize.h:989\n          NEW_FUNC[1/3]: 0x557847d4ac50 in void CTxOut::SerializationOp<CDataStream, CSerActionUnserialize>(CDataStream&, CSerActionUnserialize) src/./primitives/transaction.h:149\n          NEW_FUNC[2/3]: 0x557847d5f860 in void UnserializeFromVector<CDataStream, CTxOut>(CDataStream&, CTxOut&) src/./script/sign.h:90\n          NEW_FUNC[0/1]: 0x557847d60840 in void UnserializeFromVector<CDataStream, int>(CDataStream&, int&) src/./script/sign.h:90\n          NEW_FUNC[0/1]: 0x557847d41010 in CMutableTransaction::HasWitness() const src/./primitives/transaction.h:398\n  stat::number_of_executed_units: 13615\n  stat::average_exec_per_sec:     1237\n  stat::new_units_added:          357\n  stat::slowest_unit_time_sec:    0\n  stat::peak_rss_mb:              446\n  Number of unique code paths taken during fuzzing round: 152\n\n  Testing fuzzer psbt_output_deserialize during 10 second(s)\n  A subset of reached functions:\n          NEW_FUNC[0/27]: 0x55c9347e5940 in prevector<28u, unsigned char, unsigned int, int>::~prevector() src/./prevector.h:456\n          NEW_FUNC[5/27]: 0x55c93483eca0 in unsigned long ReadCompactSize<CDataStream>(CDataStream&) src/./serialize.h:290\n          NEW_FUNC[6/27]: 0x55c934850ee0 in void Unserialize_impl<CDataStream, unsigned char, std::allocator<unsigned char> >(CDataStream&, std::vector<unsigned char, std::allocator<unsigned char> >&, unsigned char const&) src/./serialize.h:746\n          NEW_FUNC[14/27]: 0x55c934858500 in PSBTOutput::PSBTOutput() src/./psbt.h:281\n          NEW_FUNC[15/27]: 0x55c934858870 in CDataStream& CDataStream::operator>><PSBTOutput&>(PSBTOutput&) src/./streams.h:460\n          NEW_FUNC[0/1]: 0x55c934800100 in prevector<28u, unsigned char, unsigned int, int>::size() const src/./prevector.h:277\n          NEW_FUNC[0/4]: 0x55c934849840 in void CScript::SerializationOp<CDataStream, CSerActionUnserialize>(CDataStream&, CSerActionUnserialize) src/./script/script.h:418\n          NEW_FUNC[1/4]: 0x55c934849b40 in void Unserialize_impl<CDataStream, 28u, unsigned char>(CDataStream&, prevector<28u, unsigned char, unsigned int, int>&, unsigned char const&) src/./serialize.h:666\n          NEW_FUNC[2/4]: 0x55c934849f70 in prevector<28u, unsigned char, unsigned int, int>::resize(unsigned int) src/./prevector.h:311\n          NEW_FUNC[3/4]: 0x55c93485dc60 in CDataStream& CDataStream::operator>><CScript&>(CScript&) src/./streams.h:460\n          NEW_FUNC[0/3]: 0x55c934800310 in prevector<28u, unsigned char, unsigned int, int>::capacity() const src/./prevector.h:295\n          NEW_FUNC[1/3]: 0x55c934800d70 in prevector<28u, unsigned char, unsigned int, int>::item_ptr(int) src/./prevector.h:196\n          NEW_FUNC[2/3]: 0x55c934849d40 in prevector<28u, unsigned char, unsigned int, int>::resize_uninitialized(unsigned int) src/./prevector.h:381\n          NEW_FUNC[0/1]: 0x55c93485ddd0 in void DeserializeHDKeypaths<CDataStream>(CDataStream&, std::vector<unsigned char, std::allocator<unsigned char> > const&, std::map<CPubKey, KeyOriginInfo, std::less<CPubKey>, std::allocator<std::pair<CPubKey const, KeyOriginInfo> > >&) src/./script/sign.h:103\n  stat::number_of_executed_units: 19130\n  stat::average_exec_per_sec:     1739\n  stat::new_units_added:          195\n  stat::slowest_unit_time_sec:    0\n  stat::peak_rss_mb:              411\n  Number of unique code paths taken during fuzzing round: 64\n\n  Tested fuzz harnesses seem to work as expected.\n  ```\n\nTop commit has no ACKs.\n\nTree-SHA512: baf1630a6e438d02d33c77b9e602c99546b9e8d83705e67c2749e0600039c37707cdf419cee19282f069e8d787c536ed4960f9c47e93bd0f0251495b83780ada",
      "tree": {
        "sha": "1918fdf77a626f733310aef50ebac6657687e943",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1918fdf77a626f733310aef50ebac6657687e943"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg5JAwAyniaMlibAA73/SCchuW9c49rAKE7zE++pa7ii2aLCpNrbD45PWqHjLnS\nwYCccTUNfUVTrEE2F/On2H91/OlUcB8PN3is3OfO7P2B1YX1B5hOZeVqancGzY0H\nP9nPlHhOCm0ISCRBrbLqPlQHFDrEAdzeI9mraQ3qq255Ji3rc13s7q+hNLV/ski8\nNubGE69JAlOSk4oXFzUbamzNUh2z3Suy+1lLQR+3SFBAuW9jab6YwdoEu11gzAnt\naw6vUxkOhStWjzj7JMwxwLn+XdFjeIvNULyixs7q3vZKBlXN3sz0UMx6R/umPnvj\nXdsQvtOpeB65uK97BlOaTrSvvmqjkLdByBcy7kzrLSh/j/Ut6CqpgQkSbLju5vxA\nx0WbSb1cAn6oetVNpoyfH+ZrFAqrYLNoMzts1WDSnsvRq+tnvrzFFF3IpfuS6UDb\nOoI8lOSoxeyEL8JU0oV/PlXbEQ03W5Y1971fqJUuPSk+1Y+xMesL2+VcFpWWnP/2\nhqdZfsZb\n=ZESc\n-----END PGP SIGNATURE-----",
        "payload": "tree 1918fdf77a626f733310aef50ebac6657687e943\nparent 14dafcbc13f69eb73fc39a17d9df69399817acdd\nparent a1308b7e12e6af7482954e439f594b771eb62b73\nauthor MarcoFalke <falke.marco@gmail.com> 1576089320 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576089435 -0500\n\nMerge #17050: tests: Add fuzzing harnesses for functions parsing scripts, numbers, JSON and HD keypaths (bip32)\n\na1308b7e12e6af7482954e439f594b771eb62b73 tests: Add fuzzing harnesses for various JSON/univalue parsing functions (practicalswift)\ne3d2bcf5cf7a53e5ca671cfed1fe7b6cf0c191ba tests: Add fuzzing harnesses for various number parsing functions (practicalswift)\nfb8c12093aa37f5536a1a4ba341ee8bab4dabe60 tests: Add ParseScript(...) (core_io) fuzzing harness (practicalswift)\n074cb6451b16158589d743488930963bcf4b024c tests: Add ParseHDKeypath(...) (bip32) fuzzing harness (practicalswift)\n0dc5907d0f0490036c50cb7aee19e31075bbf402 tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus (practicalswift)\n\nPull request description:\n\n  Add fuzzing harnesses for `DecodeRawPSBT(...)`, `ParseHDKeypath(...)`, `ParseScript(...)`, various number parsing functions and various JSON/univalue parsing functions.\n\n  **Testing this PR**\n  As usual the best way to test proposed fuzzing harnesses is to use `test_fuzzing_harnesses.sh` (#17000) to quickly verify that the relevant code regions are triggered, that the fuzzing throughput seems reasonable, etc.\n\n  `test_fuzzing_harnesses.sh 'psbt|hd_keypath|numbers|parse_script|univalue' 10` runs all fuzzers matching the regexp and gives them ten seconds of runtime each.\n\n  ```\n  $ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n  $ make\n  $ contrib/devtools/test_fuzzing_harnesses.sh 'psbt|hd_keypath|numbers|parse_script|univalue' 10\n  Testing fuzzer parse_hd_keypath during 10 second(s)\n  A subset of reached functions:\n          NEW_FUNC[0/2]: 0x55bc23a76940 in ParsePrechecks(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) src/util/strencodings.cpp:267\n          NEW_FUNC[1/2]: 0x55bc23a77300 in ParseUInt32(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int*) src/util/strencodings.cpp:309\n  stat::number_of_executed_units: 34237\n  stat::average_exec_per_sec:     3112\n  stat::new_units_added:          113\n  stat::slowest_unit_time_sec:    0\n  stat::peak_rss_mb:              282\n  Number of unique code paths taken during fuzzing round: 30\n\n  Testing fuzzer parse_numbers during 10 second(s)\n  A subset of reached functions:\n  stat::number_of_executed_units: 31309\n  stat::average_exec_per_sec:     2846\n  stat::new_units_added:          688\n  stat::slowest_unit_time_sec:    0\n  stat::peak_rss_mb:              234\n  Number of unique code paths taken during fuzzing round: 149\n\n  Testing fuzzer parse_script during 10 second(s)\n  A subset of reached functions:\n          NEW_FUNC[1/11]: 0x5636ff61ba00 in IsDigit(char) src/./util/strencodings.h:70\n          NEW_FUNC[0/14]: 0x5636fe6c6280 in CScript::operator<<(opcodetype) src/./script/script.h:448\n          NEW_FUNC[1/14]: 0x5636fe6e0290 in prevector<28u, unsigned char, unsigned int, int>::insert(prevector<28u, unsigned char, unsigned int, int>::iterator, unsigned char const&) src/./prevector.h:342\n          NEW_FUNC[2/14]: 0x5636fe6e1040 in prevector<28u, unsigned char, unsigned int, int>::size() const src/./prevector.h:277\n          NEW_FUNC[3/14]: 0x5636fe6e1250 in prevector<28u, unsigned char, unsigned int, int>::capacity() const src/./prevector.h:295\n          NEW_FUNC[4/14]: 0x5636fe6e1cb0 in prevector<28u, unsigned char, unsigned int, int>::item_ptr(int) src/./prevector.h:196\n          NEW_FUNC[0/10]: 0x5636fe6c5650 in CScript::operator<<(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/./script/script.h:462\n          NEW_FUNC[2/10]: 0x5636fe6e0a20 in void prevector<28u, unsigned char, unsigned int, int>::insert<__gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<unsigned char> > > >(prevector<28u, unsigned char, unsigned int, int>::iterator, __gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<[32/1902]\n  char> > >, __gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<unsigned char> > >) src/./prevector.h:368\n          NEW_FUNC[5/10]: 0x5636fe6e2350 in void prevector<28u, unsigned char, unsigned int, int>::fill<__gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<unsigned char> > > >(unsigned char*, __gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsign\n  ed char const*, std::vector<unsigned char, std::allocator<unsigned char> > >) src/./prevector.h:204\n          NEW_FUNC[0/1]: 0x5636ff8e48b0 in IsHex(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) src/util/strencodings.cpp:61\n          NEW_FUNC[0/2]: 0x5636fe6e1410 in prevector<28u, unsigned char, unsigned int, int>::change_capacity(unsigned int) src/./prevector.h:165\n          NEW_FUNC[1/2]: 0x5636fe6e1f00 in prevector<28u, unsigned char, unsigned int, int>::indirect_ptr(int) src/./prevector.h:161\n          NEW_FUNC[0/1]: 0x5636fe6e0580 in void prevector<28u, unsigned char, unsigned int, int>::insert<unsigned char*>(prevector<28u, unsigned char, unsigned int, int>::iterator, unsigned char*, unsigned char*) src/./prevector.h:368\n          NEW_FUNC[0/3]: 0x5636fe85f0d0 in CScript::push_int64(long) src/./script/script.h:394\n          NEW_FUNC[1/3]: 0x5636fe85f520 in prevector<28u, unsigned char, unsigned int, int>::push_back(unsigned char const&) src/./prevector.h:422\n          NEW_FUNC[2/3]: 0x5636ff8ed730 in atoi64(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) src/util/strencodings.cpp:417\n  stat::number_of_executed_units: 8153\n  stat::average_exec_per_sec:     741\n  stat::new_units_added:          296\n  stat::slowest_unit_time_sec:    0\n  stat::peak_rss_mb:              237\n  Number of unique code paths taken during fuzzing round: 98\n\n  Testing fuzzer parse_univalue during 10 second(s)\n  A subset of reached functions:\n          NEW_FUNC[0/19]: 0x560db8655950 in tinyformat::detail::formatImpl(std::ostream&, char const*, tinyformat::detail::FormatArg const*, int) src/./tinyformat.h:791\n          NEW_FUNC[4/19]: 0x560db86582b0 in tinyformat::detail::printFormatStringLiteral(std::ostream&, char const*) src/./tinyformat.h:564\n          NEW_FUNC[5/19]: 0x560db8658690 in tinyformat::detail::streamStateFromFormat(std::ostream&, bool&, int&, char const*, tinyformat::detail::FormatArg const*, int&, int) src/./tinyformat.h:601\n          NEW_FUNC[6/19]: 0x560db865f090 in tinyformat::detail::FormatArg::format(std::ostream&, char const*, char const*, int) const src/./tinyformat.h:513\n          NEW_FUNC[12/19]: 0x560db8661ba0 in void tinyformat::detail::FormatArg::formatImpl<int>(std::ostream&, char const*, char const*, int, void const*) src/./tinyformat.h:530\n          NEW_FUNC[13/19]: 0x560db8661d90 in void tinyformat::formatValue<int>(std::ostream&, char const*, char const*, int, int const&) src/./tinyformat.h:317\n          NEW_FUNC[14/19]: 0x560db875c8b0 in void tinyformat::detail::FormatArg::formatImpl<unsigned int>(std::ostream&, char const*, char const*, int, void const*) src/./tinyformat.h:530\n          NEW_FUNC[15/19]: 0x560db875caa0 in void tinyformat::formatValue<unsigned int>(std::ostream&, char const*, char const*, int, unsigned int const&) src/./tinyformat.h:317\n          NEW_FUNC[16/19]: 0x560db9473ef0 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > tinyformat::format<int, unsigned int>(char const*, int const&, unsigned int const&) src/./tinyformat.h:976\n          NEW_FUNC[17/19]: 0x560db94749a0 in void tinyformat::format<int, unsigned int>(std::ostream&, char const*, int const&, unsigned int const&) src/./tinyformat.h:968\n          NEW_FUNC[18/19]: 0x560db9474cf0 in tinyformat::detail::FormatListN<2>::FormatListN<int, unsigned int>(int const&, unsigned int const&) src/./tinyformat.h:885\n  stat::number_of_executed_units: 14089\n  stat::average_exec_per_sec:     1280\n  stat::new_units_added:          135\n  stat::slowest_unit_time_sec:    0\n  stat::peak_rss_mb:              356\n  Number of unique code paths taken during fuzzing round: 62\n\n  Testing fuzzer psbt_input_deserialize during 10 second(s)\n  A subset of reached functions:\n          NEW_FUNC[0/46]: 0x557847ce3530 in prevector<28u, unsigned char, unsigned int, int>::~prevector() src/./prevector.h:456\n          NEW_FUNC[3/46]: 0x557847cfdcf0 in prevector<28u, unsigned char, unsigned int, int>::size() const src/./prevector.h:277\n          NEW_FUNC[4/46]: 0x557847cfe0c0 in prevector<28u, unsigned char, unsigned int, int>::change_capacity(unsigned int) src/./prevector.h:165\n          NEW_FUNC[13/46]: 0x557847d3c890 in unsigned long ReadCompactSize<CDataStream>(CDataStream&) src/./serialize.h:290\n          NEW_FUNC[14/46]: 0x557847d47b60 in prevector<28u, unsigned char, unsigned int, int>::resize(unsigned int) src/./prevector.h:311\n          NEW_FUNC[16/46]: 0x557847d48800 in CTxOut::CTxOut() src/./primitives/transaction.h:140\n          NEW_FUNC[17/46]: 0x557847d4b050 in CTxOut::SetNull() src/./primitives/transaction.h:155\n          NEW_FUNC[18/46]: 0x557847d4b140 in CScript::clear() src/./script/script.h:563\n          NEW_FUNC[19/46]: 0x557847d4ead0 in void Unserialize_impl<CDataStream, unsigned char, std::allocator<unsigned char> >(CDataStream&, std::vector<unsigned char, std::allocator<unsigned char> >&, unsigned char const&) src/./serialize.h:746\n          NEW_FUNC[0/58]: 0x557847cfdf00 in prevector<28u, unsigned char, unsigned int, int>::capacity() const src/./prevector.h:295\n          NEW_FUNC[1/58]: 0x557847cfe960 in prevector<28u, unsigned char, unsigned int, int>::item_ptr(int) src/./prevector.h:196\n          NEW_FUNC[2/58]: 0x557847cfebb0 in prevector<28u, unsigned char, unsigned int, int>::indirect_ptr(int) src/./prevector.h:161\n          NEW_FUNC[3/58]: 0x557847d03990 in uint256::uint256() src/./uint256.h:123\n          NEW_FUNC[0/3]: 0x557847d47430 in void CScript::SerializationOp<CDataStream, CSerActionUnserialize>(CDataStream&, CSerActionUnserialize) src/./script/script.h:418\n          NEW_FUNC[1/3]: 0x557847d47730 in void Unserialize_impl<CDataStream, 28u, unsigned char>(CDataStream&, prevector<28u, unsigned char, unsigned int, int>&, unsigned char const&) src/./serialize.h:666\n          NEW_FUNC[2/3]: 0x557847d60dd0 in CDataStream& CDataStream::operator>><CScript&>(CScript&) src/./streams.h:460\n          NEW_FUNC[1/78]: 0x557847cffae0 in prevector<28u, unsigned char, unsigned int, int>::item_ptr(int) const src/./prevector.h:197\n          NEW_FUNC[2/78]: 0x557847cffd30 in prevector<28u, unsigned char, unsigned int, int>::indirect_ptr(int) const src/./prevector.h:162\n          NEW_FUNC[0/1]: 0x557847d65f90 in OverrideStream<CDataStream>& OverrideStream<CDataStream>::operator>><unsigned char&>(unsigned char&) src/./streams.h:46\n          NEW_FUNC[0/3]: 0x557847d470e0 in void SerReadWriteMany<CDataStream, CScript&>(CDataStream&, CSerActionUnserialize, CScript&) src/./serialize.h:989\n          NEW_FUNC[1/3]: 0x557847d4ac50 in void CTxOut::SerializationOp<CDataStream, CSerActionUnserialize>(CDataStream&, CSerActionUnserialize) src/./primitives/transaction.h:149\n          NEW_FUNC[2/3]: 0x557847d5f860 in void UnserializeFromVector<CDataStream, CTxOut>(CDataStream&, CTxOut&) src/./script/sign.h:90\n          NEW_FUNC[0/1]: 0x557847d60840 in void UnserializeFromVector<CDataStream, int>(CDataStream&, int&) src/./script/sign.h:90\n          NEW_FUNC[0/1]: 0x557847d41010 in CMutableTransaction::HasWitness() const src/./primitives/transaction.h:398\n  stat::number_of_executed_units: 13615\n  stat::average_exec_per_sec:     1237\n  stat::new_units_added:          357\n  stat::slowest_unit_time_sec:    0\n  stat::peak_rss_mb:              446\n  Number of unique code paths taken during fuzzing round: 152\n\n  Testing fuzzer psbt_output_deserialize during 10 second(s)\n  A subset of reached functions:\n          NEW_FUNC[0/27]: 0x55c9347e5940 in prevector<28u, unsigned char, unsigned int, int>::~prevector() src/./prevector.h:456\n          NEW_FUNC[5/27]: 0x55c93483eca0 in unsigned long ReadCompactSize<CDataStream>(CDataStream&) src/./serialize.h:290\n          NEW_FUNC[6/27]: 0x55c934850ee0 in void Unserialize_impl<CDataStream, unsigned char, std::allocator<unsigned char> >(CDataStream&, std::vector<unsigned char, std::allocator<unsigned char> >&, unsigned char const&) src/./serialize.h:746\n          NEW_FUNC[14/27]: 0x55c934858500 in PSBTOutput::PSBTOutput() src/./psbt.h:281\n          NEW_FUNC[15/27]: 0x55c934858870 in CDataStream& CDataStream::operator>><PSBTOutput&>(PSBTOutput&) src/./streams.h:460\n          NEW_FUNC[0/1]: 0x55c934800100 in prevector<28u, unsigned char, unsigned int, int>::size() const src/./prevector.h:277\n          NEW_FUNC[0/4]: 0x55c934849840 in void CScript::SerializationOp<CDataStream, CSerActionUnserialize>(CDataStream&, CSerActionUnserialize) src/./script/script.h:418\n          NEW_FUNC[1/4]: 0x55c934849b40 in void Unserialize_impl<CDataStream, 28u, unsigned char>(CDataStream&, prevector<28u, unsigned char, unsigned int, int>&, unsigned char const&) src/./serialize.h:666\n          NEW_FUNC[2/4]: 0x55c934849f70 in prevector<28u, unsigned char, unsigned int, int>::resize(unsigned int) src/./prevector.h:311\n          NEW_FUNC[3/4]: 0x55c93485dc60 in CDataStream& CDataStream::operator>><CScript&>(CScript&) src/./streams.h:460\n          NEW_FUNC[0/3]: 0x55c934800310 in prevector<28u, unsigned char, unsigned int, int>::capacity() const src/./prevector.h:295\n          NEW_FUNC[1/3]: 0x55c934800d70 in prevector<28u, unsigned char, unsigned int, int>::item_ptr(int) src/./prevector.h:196\n          NEW_FUNC[2/3]: 0x55c934849d40 in prevector<28u, unsigned char, unsigned int, int>::resize_uninitialized(unsigned int) src/./prevector.h:381\n          NEW_FUNC[0/1]: 0x55c93485ddd0 in void DeserializeHDKeypaths<CDataStream>(CDataStream&, std::vector<unsigned char, std::allocator<unsigned char> > const&, std::map<CPubKey, KeyOriginInfo, std::less<CPubKey>, std::allocator<std::pair<CPubKey const, KeyOriginInfo> > >&) src/./script/sign.h:103\n  stat::number_of_executed_units: 19130\n  stat::average_exec_per_sec:     1739\n  stat::new_units_added:          195\n  stat::slowest_unit_time_sec:    0\n  stat::peak_rss_mb:              411\n  Number of unique code paths taken during fuzzing round: 64\n\n  Tested fuzz harnesses seem to work as expected.\n  ```\n\nTop commit has no ACKs.\n\nTree-SHA512: baf1630a6e438d02d33c77b9e602c99546b9e8d83705e67c2749e0600039c37707cdf419cee19282f069e8d787c536ed4960f9c47e93bd0f0251495b83780ada\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14dafcbc13f69eb73fc39a17d9df69399817acdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14dafcbc13f69eb73fc39a17d9df69399817acdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14dafcbc13f69eb73fc39a17d9df69399817acdd"
      },
      {
        "sha": "a1308b7e12e6af7482954e439f594b771eb62b73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1308b7e12e6af7482954e439f594b771eb62b73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1308b7e12e6af7482954e439f594b771eb62b73"
      }
    ],
    "stats": {
      "total": 191,
      "additions": 190,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0225edf29e59987d004960c2c02672410f32e220",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1",
        "patch": "@@ -33,10 +33,14 @@ FUZZ_TARGETS = \\\n   test/fuzz/messageheader_deserialize \\\n   test/fuzz/netaddr_deserialize \\\n   test/fuzz/out_point_deserialize \\\n+  test/fuzz/parse_hd_keypath \\\n   test/fuzz/parse_iso8601 \\\n   test/fuzz/partial_merkle_tree_deserialize \\\n   test/fuzz/partially_signed_transaction_deserialize \\\n   test/fuzz/prefilled_transaction_deserialize \\\n+  test/fuzz/parse_numbers \\\n+  test/fuzz/parse_script \\\n+  test/fuzz/parse_univalue \\\n   test/fuzz/psbt \\\n   test/fuzz/psbt_input_deserialize \\\n   test/fuzz/psbt_output_deserialize \\\n@@ -94,6 +98,7 @@ FUZZ_SUITE_LD_COMMON = \\\n  $(LIBTEST_UTIL) \\\n  $(LIBBITCOIN_CONSENSUS) \\\n  $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CLI) \\\n  $(LIBUNIVALUE) \\\n  $(LIBLEVELDB) \\\n  $(LIBLEVELDB_SSE42) \\\n@@ -518,6 +523,30 @@ test_fuzz_tx_out_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_tx_out_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_tx_out_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_parse_hd_keypath_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_hd_keypath.cpp\n+test_fuzz_parse_hd_keypath_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_parse_hd_keypath_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_parse_hd_keypath_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_parse_hd_keypath_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_parse_script_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_script.cpp\n+test_fuzz_parse_script_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_parse_script_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_parse_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_parse_script_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_parse_numbers_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_numbers.cpp\n+test_fuzz_parse_numbers_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_parse_numbers_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_parse_numbers_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_parse_numbers_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_parse_univalue_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_univalue.cpp\n+test_fuzz_parse_univalue_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_parse_univalue_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_parse_univalue_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_parse_univalue_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n endif # ENABLE_FUZZ\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)"
      },
      {
        "sha": "9a23f4b2d43944e3b119f80238b29f4a0293a4fc",
        "filename": "src/test/fuzz/parse_hd_keypath.cpp",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/src/test/fuzz/parse_hd_keypath.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/src/test/fuzz/parse_hd_keypath.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/parse_hd_keypath.cpp?ref=7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+#include <util/bip32.h>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    const std::string keypath_str(buffer.begin(), buffer.end());\n+    std::vector<uint32_t> keypath;\n+    (void)ParseHDKeypath(keypath_str, keypath);\n+}"
      },
      {
        "sha": "59f89dc9fbbb99eb49d49b83176d724733c4e03e",
        "filename": "src/test/fuzz/parse_numbers.cpp",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/src/test/fuzz/parse_numbers.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/src/test/fuzz/parse_numbers.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/parse_numbers.cpp?ref=7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1",
        "patch": "@@ -0,0 +1,35 @@\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+#include <util/moneystr.h>\n+#include <util/strencodings.h>\n+\n+#include <string>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    const std::string random_string(buffer.begin(), buffer.end());\n+\n+    CAmount amount;\n+    (void)ParseMoney(random_string, amount);\n+\n+    double d;\n+    (void)ParseDouble(random_string, &d);\n+\n+    int32_t i32;\n+    (void)ParseInt32(random_string, &i32);\n+    (void)atoi(random_string);\n+\n+    uint32_t u32;\n+    (void)ParseUInt32(random_string, &u32);\n+\n+    int64_t i64;\n+    (void)atoi64(random_string);\n+    (void)ParseFixedPoint(random_string, 3, &i64);\n+    (void)ParseInt64(random_string, &i64);\n+\n+    uint64_t u64;\n+    (void)ParseUInt64(random_string, &u64);\n+}"
      },
      {
        "sha": "21ac1aecf3a97b605788aef546dce7444bfed855",
        "filename": "src/test/fuzz/parse_script.cpp",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/src/test/fuzz/parse_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/src/test/fuzz/parse_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/parse_script.cpp?ref=7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1",
        "patch": "@@ -0,0 +1,16 @@\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <core_io.h>\n+#include <script/script.h>\n+#include <test/fuzz/fuzz.h>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    const std::string script_string(buffer.begin(), buffer.end());\n+    try {\n+        (void)ParseScript(script_string);\n+    } catch (const std::runtime_error&) {\n+    }\n+}"
      },
      {
        "sha": "3ad112dbad59f65225fdc47c66f8ebd64723e569",
        "filename": "src/test/fuzz/parse_univalue.cpp",
        "status": "added",
        "additions": 91,
        "deletions": 0,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/src/test/fuzz/parse_univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/src/test/fuzz/parse_univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/parse_univalue.cpp?ref=7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1",
        "patch": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <core_io.h>\n+#include <rpc/client.h>\n+#include <rpc/util.h>\n+#include <test/fuzz/fuzz.h>\n+#include <util/memory.h>\n+\n+#include <limits>\n+#include <string>\n+\n+void initialize()\n+{\n+    static const auto verify_handle = MakeUnique<ECCVerifyHandle>();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    const std::string random_string(buffer.begin(), buffer.end());\n+    bool valid = true;\n+    const UniValue univalue = [&] {\n+        try {\n+            return ParseNonRFCJSONValue(random_string);\n+        } catch (const std::runtime_error&) {\n+            valid = false;\n+            return NullUniValue;\n+        }\n+    }();\n+    if (!valid) {\n+        return;\n+    }\n+    try {\n+        (void)ParseHashO(univalue, \"A\");\n+        (void)ParseHashO(univalue, random_string);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)ParseHashV(univalue, \"A\");\n+        (void)ParseHashV(univalue, random_string);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)ParseHexO(univalue, \"A\");\n+        (void)ParseHexO(univalue, random_string);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)ParseHexUV(univalue, \"A\");\n+        (void)ParseHexUV(univalue, random_string);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)ParseHexV(univalue, \"A\");\n+        (void)ParseHexV(univalue, random_string);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)ParseSighashString(univalue);\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)AmountFromValue(univalue);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        FlatSigningProvider provider;\n+        (void)EvalDescriptorStringOrObject(univalue, provider);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)ParseConfirmTarget(univalue, std::numeric_limits<unsigned int>::max());\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+    try {\n+        (void)ParseDescriptorRange(univalue);\n+    } catch (const UniValue&) {\n+    } catch (const std::runtime_error&) {\n+    }\n+}"
      },
      {
        "sha": "2d255c0bb44847038daa568c76f3c0ccf4f8c2ba",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1",
        "patch": "@@ -24,6 +24,10 @@\n     \"key_origin_info_deserialize\",\n     \"merkle_block_deserialize\",\n     \"out_point_deserialize\",\n+    \"parse_hd_keypath\",\n+    \"parse_numbers\",\n+    \"parse_script\",\n+    \"parse_univalue\",\n     \"partial_merkle_tree_deserialize\",\n     \"partially_signed_transaction_deserialize\",\n     \"prefilled_transaction_deserialize\",\n@@ -32,8 +36,8 @@\n     \"pub_key_deserialize\",\n     \"script_deserialize\",\n     \"sub_net_deserialize\",\n-    \"tx_in_deserialize\",\n     \"tx_in\",\n+    \"tx_in_deserialize\",\n     \"tx_out\",\n ]\n "
      },
      {
        "sha": "ea9ea7a58df318e848518ff2a350df4544be88bf",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1",
        "patch": "@@ -11,6 +11,7 @@ KNOWN_VIOLATIONS=(\n     \"src/qt/rpcconsole.cpp:.*atoi\"\n     \"src/rest.cpp:.*strtol\"\n     \"src/test/dbwrapper_tests.cpp:.*snprintf\"\n+    \"src/test/fuzz/parse_numbers.cpp:.*atoi\"\n     \"src/torcontrol.cpp:.*atoi\"\n     \"src/torcontrol.cpp:.*strtol\"\n     \"src/util/strencodings.cpp:.*atoi\""
      }
    ]
  },
  {
    "sha": "a64e97dd476bda7c7981979d045b0d06d6f7ce47",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjRlOTdkZDQ3NmJkYTdjNzk4MTk3OWQwNDViMGQwNmQ2ZjdjZTQ3",
    "commit": {
      "author": {
        "name": "Jan Beich",
        "email": "jbeich@FreeBSD.org",
        "date": "2019-12-02T19:55:10Z"
      },
      "committer": {
        "name": "Jan Beich",
        "email": "jbeich@FreeBSD.org",
        "date": "2019-12-11T18:51:16Z"
      },
      "message": "wallet: unbreak with boost 1.72\n\nwallet/walletutil.cpp:77:23: error: no member named 'level' in 'boost::filesystem::recursive_directory_iterator'\n        } else if (it.level() == 0 && it->symlink_status().type() == fs::regular_file && IsBerkeleyBtree(it...\n                   ~~ ^",
      "tree": {
        "sha": "ad987d204b3fe761342221515b84f38c03bf4d80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad987d204b3fe761342221515b84f38c03bf4d80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a64e97dd476bda7c7981979d045b0d06d6f7ce47",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a64e97dd476bda7c7981979d045b0d06d6f7ce47",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a64e97dd476bda7c7981979d045b0d06d6f7ce47",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a64e97dd476bda7c7981979d045b0d06d6f7ce47/comments",
    "author": {
      "login": "jbeich",
      "id": 11153579,
      "node_id": "MDQ6VXNlcjExMTUzNTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11153579?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbeich",
      "html_url": "https://github.com/jbeich",
      "followers_url": "https://api.github.com/users/jbeich/followers",
      "following_url": "https://api.github.com/users/jbeich/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbeich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbeich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbeich/subscriptions",
      "organizations_url": "https://api.github.com/users/jbeich/orgs",
      "repos_url": "https://api.github.com/users/jbeich/repos",
      "events_url": "https://api.github.com/users/jbeich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbeich/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jbeich",
      "id": 11153579,
      "node_id": "MDQ6VXNlcjExMTUzNTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11153579?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbeich",
      "html_url": "https://github.com/jbeich",
      "followers_url": "https://api.github.com/users/jbeich/followers",
      "following_url": "https://api.github.com/users/jbeich/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbeich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbeich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbeich/subscriptions",
      "organizations_url": "https://api.github.com/users/jbeich/orgs",
      "repos_url": "https://api.github.com/users/jbeich/repos",
      "events_url": "https://api.github.com/users/jbeich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbeich/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35eda631ed3bd23d4a41761a85a96f925d4a6337"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8af81f173bdfbec163256ca343d33809a92424ee",
        "filename": "src/fs.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a64e97dd476bda7c7981979d045b0d06d6f7ce47/src/fs.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a64e97dd476bda7c7981979d045b0d06d6f7ce47/src/fs.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.h?ref=a64e97dd476bda7c7981979d045b0d06d6f7ce47",
        "patch": "@@ -11,7 +11,6 @@\n #include <ext/stdio_filebuf.h>\n #endif\n \n-#define BOOST_FILESYSTEM_NO_DEPRECATED\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n "
      }
    ]
  },
  {
    "sha": "fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWJkNWI0NDRlZjgzYjVjZDBkNjNiMzNiYmY2ZWE0ZTc1NTdkMGVi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-11T18:41:55Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-11T20:30:23Z"
      },
      "message": "ci: Use python 3.7 on Windows Github Actions",
      "tree": {
        "sha": "9f7ce5a1f63723aa61aaaa661134544ba264521f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f7ce5a1f63723aa61aaaa661134544ba264521f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUh2gQv+PpGItgYNDJg5b14GK1GzjnMv5BmCfznXIT7sgYCuURI5ohCWpHhYP1fu\nlayKjah1jzPv0M+8MwfiLd5/wRqQHyxe5BqMqr+J62edxX4qmHxpZxAX/rISfskW\ng7/ErRbrXclK3If7MYNtMq8ltKOy9XT8d5T+VwahtGqomT5qbZWUTjicio/5fCeV\n3eUIQ2ka1vB6BD2H5j7Ul/NOZsGEBjhlitRiuqR4KrjMpqCzBwXBPx1axakGYaZQ\nRqEUfq5bmfJSdkHJz45/6D+hRjofbVkjviwBFRbjOj7q+/JXRCBDQRzpcc6xf2QF\nM3LhzEN/05iF66FlcEL57tyNbBI7IuDhdIUAoEMyWTXxwRZcxiK60LtiFCgd62GI\nSnL8GVGwh3sy1rFbn9swfVzLzSYwpkodcyMb0df2/F8rzx18wLPt1fDtLhH0uPB8\nYCPgZOiBbzogWUvTTBCHaW3PsOnDpO56kekbmpuWf60ER//rfXBQ6X78MgBcXwbd\nqtXNKOq1\n=f6Y8\n-----END PGP SIGNATURE-----",
        "payload": "tree 9f7ce5a1f63723aa61aaaa661134544ba264521f\nparent f1d3d3430e3b89e48a879a7645c3c91efa46f156\nauthor MarcoFalke <falke.marco@gmail.com> 1576089715 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576096223 -0500\n\nci: Use python 3.7 on Windows Github Actions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1d3d3430e3b89e48a879a7645c3c91efa46f156",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1d3d3430e3b89e48a879a7645c3c91efa46f156",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1d3d3430e3b89e48a879a7645c3c91efa46f156"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9756ebba1d7f6ebdadd054196c262848944d464b",
        "filename": ".github/workflows/ci.yml",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb/.github/workflows/ci.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb/.github/workflows/ci.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/workflows/ci.yml?ref=fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb",
        "patch": "@@ -15,6 +15,10 @@ jobs:\n     steps:\n     - uses: actions/checkout@v1\n \n+    - uses: actions/setup-python@v1\n+      with:\n+        python-version: '3.7'  # Needed for PEP 540\n+\n     - uses: actions/cache@v1\n       id: vcpkgcache\n       with:\n@@ -67,10 +71,7 @@ jobs:\n     - name: rpcauth-test\n       shell: cmd\n       run: python test\\util\\rpcauth-test.py\n-# This step fails due to character UTF encoding error. If anyone knows how Python deals with Unicode they might be\n-# able to decipher the error message.\n-#    - name: test_runner\n-#      shell: cmd\n-#      run: |\n-#       python test\\functional\\test_runner.py --ansi --ci --quiet --combinedlogslen=4000 --failfast --exclude feature_fee_estimation\n-\n+    - name: test_runner\n+      shell: cmd\n+      run: |\n+       python test\\functional\\test_runner.py --ansi --ci --quiet --combinedlogslen=4000 --failfast --exclude feature_fee_estimation"
      }
    ]
  },
  {
    "sha": "7414d3820c833566b4f48c6c120a18bf53978c55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDE0ZDM4MjBjODMzNTY2YjRmNDhjNmMxMjBhMThiZjUzOTc4YzU1",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2018-03-22T18:27:49Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2019-12-11T20:33:54Z"
      },
      "message": "Add RPC Whitelist Feature from #12248",
      "tree": {
        "sha": "0d2ca7b09952d9f06660d51ba3bd07f748b49049",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d2ca7b09952d9f06660d51ba3bd07f748b49049"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7414d3820c833566b4f48c6c120a18bf53978c55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7414d3820c833566b4f48c6c120a18bf53978c55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7414d3820c833566b4f48c6c120a18bf53978c55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7414d3820c833566b4f48c6c120a18bf53978c55/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30521302f90e4856a7516867b32a4576fa6d98b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30521302f90e4856a7516867b32a4576fa6d98b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30521302f90e4856a7516867b32a4576fa6d98b3"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 61,
      "deletions": 3
    },
    "files": [
      {
        "sha": "77e09bd5c7d53de9a48a21b34516c11b70043976",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 3,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7414d3820c833566b4f48c6c120a18bf53978c55/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7414d3820c833566b4f48c6c120a18bf53978c55/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=7414d3820c833566b4f48c6c120a18bf53978c55",
        "patch": "@@ -15,8 +15,13 @@\n #include <util/translation.h>\n #include <walletinitinterface.h>\n \n+#include <algorithm>\n+#include <iterator>\n+#include <map>\n #include <memory>\n #include <stdio.h>\n+#include <set>\n+#include <string>\n \n #include <boost/algorithm/string.hpp> // boost::trim\n \n@@ -64,6 +69,9 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n static std::string strRPCUserColonPass;\n /* Stored RPC timer interface (for unregistration) */\n static std::unique_ptr<HTTPRPCTimerInterface> httpRPCTimerInterface;\n+/* RPC Auth Whitelist */\n+static std::map<std::string, std::set<std::string>> g_rpc_whitelist;\n+static bool g_rpc_whitelist_default = false;\n \n static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const UniValue& id)\n {\n@@ -183,18 +191,45 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         jreq.URI = req->GetURI();\n \n         std::string strReply;\n+        bool user_has_whitelist = g_rpc_whitelist.count(jreq.authUser);\n+        if (!user_has_whitelist && g_rpc_whitelist_default) {\n+            LogPrintf(\"RPC User %s not allowed to call any methods\\n\", jreq.authUser);\n+            req->WriteReply(HTTP_FORBIDDEN);\n+            return false;\n+\n         // singleton request\n-        if (valRequest.isObject()) {\n+        } else if (valRequest.isObject()) {\n             jreq.parse(valRequest);\n-\n+            if (user_has_whitelist && !g_rpc_whitelist[jreq.authUser].count(jreq.strMethod)) {\n+                LogPrintf(\"RPC User %s not allowed to call method %s\\n\", jreq.authUser, jreq.strMethod);\n+                req->WriteReply(HTTP_FORBIDDEN);\n+                return false;\n+            }\n             UniValue result = tableRPC.execute(jreq);\n \n             // Send reply\n             strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n \n         // array of requests\n-        } else if (valRequest.isArray())\n+        } else if (valRequest.isArray()) {\n+            if (user_has_whitelist) {\n+                for (unsigned int reqIdx = 0; reqIdx < valRequest.size(); reqIdx++) {\n+                    if (!valRequest[reqIdx].isObject()) {\n+                        throw JSONRPCError(RPC_INVALID_REQUEST, \"Invalid Request object\");\n+                    } else {\n+                        const UniValue& request = valRequest[reqIdx].get_obj();\n+                        // Parse method\n+                        std::string strMethod = find_value(request, \"method\").get_str();\n+                        if (!g_rpc_whitelist[jreq.authUser].count(strMethod)) {\n+                            LogPrintf(\"RPC User %s not allowed to call method %s\\n\", jreq.authUser, strMethod);\n+                            req->WriteReply(HTTP_FORBIDDEN);\n+                            return false;\n+                        }\n+                    }\n+                }\n+            }\n             strReply = JSONRPCExecBatch(jreq, valRequest.get_array());\n+        }\n         else\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n \n@@ -229,6 +264,27 @@ static bool InitRPCAuthentication()\n     {\n         LogPrintf(\"Using rpcauth authentication.\\n\");\n     }\n+\n+    g_rpc_whitelist_default = gArgs.GetBoolArg(\"-rpcwhitelistdefault\", gArgs.IsArgSet(\"-rpcwhitelist\"));\n+    for (const std::string& strRPCWhitelist : gArgs.GetArgs(\"-rpcwhitelist\")) {\n+        auto pos = strRPCWhitelist.find(':');\n+        std::string strUser = strRPCWhitelist.substr(0, pos);\n+        bool intersect = g_rpc_whitelist.count(strUser);\n+        std::set<std::string>& whitelist = g_rpc_whitelist[strUser];\n+        if (pos != std::string::npos) {\n+            std::string strWhitelist = strRPCWhitelist.substr(pos + 1);\n+            std::set<std::string> new_whitelist;\n+            boost::split(new_whitelist, strWhitelist, boost::is_any_of(\", \"));\n+            if (intersect) {\n+                std::set<std::string> tmp_whitelist;\n+                std::set_intersection(new_whitelist.begin(), new_whitelist.end(),\n+                       whitelist.begin(), whitelist.end(), std::inserter(tmp_whitelist, tmp_whitelist.end()));\n+                new_whitelist = std::move(tmp_whitelist);\n+            }\n+            whitelist = std::move(new_whitelist);\n+        }\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "6e4caef673f487124961bd6528f00dae1a1d3952",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7414d3820c833566b4f48c6c120a18bf53978c55/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7414d3820c833566b4f48c6c120a18bf53978c55/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7414d3820c833566b4f48c6c120a18bf53978c55",
        "patch": "@@ -534,6 +534,8 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_BOOL, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n "
      }
    ]
  },
  {
    "sha": "5948398b1866f94bdd19c6791b9b319bdee8b32e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTQ4Mzk4YjE4NjZmOTRiZGQxOWM2NzkxYjliMzE5YmRlZThiMzJl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-11T21:58:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-11T22:00:27Z"
      },
      "message": "Merge #17474: Bugfix: GUI: Recognise NETWORK_LIMITED in formatServicesStr\n\n4341bffb6ef10909f3721329db27c5dc9bc720dd GUI: Refactor formatServicesStr to warn when a ServicesFlag is missing (Luke Dashjr)\ndf77de8c2157fbb4c0898586dacb2215286745c8 Bugfix: GUI: Recognise NETWORK_LIMITED in formatServicesStr (Luke Dashjr)\n\nPull request description:\n\n  Currently, only the bottom 8 service bits are shown in the GUI peer details view.\n\n  `NODE_NETWORK_LIMITED` is the 11th bit (2^10).\n\n  The first commit expands the range to cover the full 64 bits, and properly label `\"NETWORK_LIMITED\"`.\n  The second commit refactors the code so that any future omitted service bits will trigger a compile warning.\n\nACKs for top commit:\n  jonasschnelli:\n    utACK 4341bffb6ef10909f3721329db27c5dc9bc720dd\n  jonasschnelli:\n    Tested ACK 4341bffb6ef10909f3721329db27c5dc9bc720dd\n  hebasto:\n    Concept ACK 4341bffb6ef10909f3721329db27c5dc9bc720dd\n\nTree-SHA512: 8338737d03fbcd92024159aabd7e632d46e13c72436d935b504d2bf7ee92b7d124e89a5917bf64d51c87f12a64de703270c2d7b4c6711fa8ed08ea7887d817c7",
      "tree": {
        "sha": "76e8458b20e5cb8178df48e7223b85fb7999a2f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76e8458b20e5cb8178df48e7223b85fb7999a2f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5948398b1866f94bdd19c6791b9b319bdee8b32e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhg8wv/el7zhe/XMOuMA2JKFNTrKOdAZIPwXH/8+D/VOM+aUxqTLbh6KXSKonWL\nmwVmkgmI2u5z/CcuUyDsXJncp+TWJ4grJlo5Wh8VljKCrV+S+nhbgtB44XjRNImn\nJ36D+Fqimwt1zmcPeXNaLAgIi8MXCoB+nE7eu+mbUI7pv11UDbJ+GexJ3b5LV0t5\nTQhWSbg6I329+/FC+YXSjoHeAXne6MPZC5S3tKf4R+NUw84nyTh94aa1pNyby8Dj\n2xCa9L9dZ0ovqfOkbVeTyXk+GcP/xhix7R5hH2XgT37YPPyZIQMrfm+ph34K2Twe\njU0JxSgX50aVSRW0vU9VycHXDLAkXAImbyz9LZbtzqqIf00hxcx41Ia6IW1WG7FW\nUKU+4Td2BKB65ks02s3O8n2zjrWzLodUGX8sKDKQKBuLfgtOJRLV76WCTl9ca+BT\nXUppiSRZc9l1udUvzBpdOzXMjB7xy+khSPxp9W7Mxqj8+L6JMnVe6fkNDyRzeifW\nwXI27yan\n=/sEA\n-----END PGP SIGNATURE-----",
        "payload": "tree 76e8458b20e5cb8178df48e7223b85fb7999a2f0\nparent 7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1\nparent 4341bffb6ef10909f3721329db27c5dc9bc720dd\nauthor MarcoFalke <falke.marco@gmail.com> 1576101518 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576101627 -0500\n\nMerge #17474: Bugfix: GUI: Recognise NETWORK_LIMITED in formatServicesStr\n\n4341bffb6ef10909f3721329db27c5dc9bc720dd GUI: Refactor formatServicesStr to warn when a ServicesFlag is missing (Luke Dashjr)\ndf77de8c2157fbb4c0898586dacb2215286745c8 Bugfix: GUI: Recognise NETWORK_LIMITED in formatServicesStr (Luke Dashjr)\n\nPull request description:\n\n  Currently, only the bottom 8 service bits are shown in the GUI peer details view.\n\n  `NODE_NETWORK_LIMITED` is the 11th bit (2^10).\n\n  The first commit expands the range to cover the full 64 bits, and properly label `\"NETWORK_LIMITED\"`.\n  The second commit refactors the code so that any future omitted service bits will trigger a compile warning.\n\nACKs for top commit:\n  jonasschnelli:\n    utACK 4341bffb6ef10909f3721329db27c5dc9bc720dd\n  jonasschnelli:\n    Tested ACK 4341bffb6ef10909f3721329db27c5dc9bc720dd\n  hebasto:\n    Concept ACK 4341bffb6ef10909f3721329db27c5dc9bc720dd\n\nTree-SHA512: 8338737d03fbcd92024159aabd7e632d46e13c72436d935b504d2bf7ee92b7d124e89a5917bf64d51c87f12a64de703270c2d7b4c6711fa8ed08ea7887d817c7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5948398b1866f94bdd19c6791b9b319bdee8b32e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5948398b1866f94bdd19c6791b9b319bdee8b32e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5948398b1866f94bdd19c6791b9b319bdee8b32e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1"
      },
      {
        "sha": "4341bffb6ef10909f3721329db27c5dc9bc720dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4341bffb6ef10909f3721329db27c5dc9bc720dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4341bffb6ef10909f3721329db27c5dc9bc720dd"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 22,
      "deletions": 20
    },
    "files": [
      {
        "sha": "db07efb9f99a92746c35928991fbddd1233b4a91",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5948398b1866f94bdd19c6791b9b319bdee8b32e/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5948398b1866f94bdd19c6791b9b319bdee8b32e/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=5948398b1866f94bdd19c6791b9b319bdee8b32e",
        "patch": "@@ -237,6 +237,7 @@ const std::vector<std::string> &getAllNetMessageTypes();\n \n /** nServices flags */\n enum ServiceFlags : uint64_t {\n+    // NOTE: When adding here, be sure to update qt/guiutil.cpp's formatServicesStr too\n     // Nothing\n     NODE_NONE = 0,\n     // NODE_NETWORK means that the node is capable of serving the complete block chain. It is currently"
      },
      {
        "sha": "843de651e51da40acb2dbefbc3f907c13336b6fa",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 20,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5948398b1866f94bdd19c6791b9b319bdee8b32e/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5948398b1866f94bdd19c6791b9b319bdee8b32e/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=5948398b1866f94bdd19c6791b9b319bdee8b32e",
        "patch": "@@ -731,32 +731,33 @@ QString formatDurationStr(int secs)\n     return strList.join(\" \");\n }\n \n+QString serviceFlagToStr(const quint64 mask, const int bit)\n+{\n+    switch (ServiceFlags(mask)) {\n+    case NODE_NONE: abort();  // impossible\n+    case NODE_NETWORK:         return \"NETWORK\";\n+    case NODE_GETUTXO:         return \"GETUTXO\";\n+    case NODE_BLOOM:           return \"BLOOM\";\n+    case NODE_WITNESS:         return \"WITNESS\";\n+    case NODE_NETWORK_LIMITED: return \"NETWORK_LIMITED\";\n+    // Not using default, so we get warned when a case is missing\n+    }\n+    if (bit < 8) {\n+        return QString(\"%1[%2]\").arg(\"UNKNOWN\").arg(mask);\n+    } else {\n+        return QString(\"%1[2^%2]\").arg(\"UNKNOWN\").arg(bit);\n+    }\n+}\n+\n QString formatServicesStr(quint64 mask)\n {\n     QStringList strList;\n \n-    // Just scan the last 8 bits for now.\n-    for (int i = 0; i < 8; i++) {\n-        uint64_t check = 1 << i;\n+    for (int i = 0; i < 64; i++) {\n+        uint64_t check = 1LL << i;\n         if (mask & check)\n         {\n-            switch (check)\n-            {\n-            case NODE_NETWORK:\n-                strList.append(\"NETWORK\");\n-                break;\n-            case NODE_GETUTXO:\n-                strList.append(\"GETUTXO\");\n-                break;\n-            case NODE_BLOOM:\n-                strList.append(\"BLOOM\");\n-                break;\n-            case NODE_WITNESS:\n-                strList.append(\"WITNESS\");\n-                break;\n-            default:\n-                strList.append(QString(\"%1[%2]\").arg(\"UNKNOWN\").arg(check));\n-            }\n+            strList.append(serviceFlagToStr(check, i));\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDI2MzU3MWJlZThjMzZmYmUzYzg1NGI2OWM2ZjMxY2YxZWUzYjli",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-11T22:11:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-11T22:19:33Z"
      },
      "message": "rpc: require second argument only for scantxoutset start action\n\nThe second argument of scanobjects is only required for the start action.\nStop and abort actions do not need this.",
      "tree": {
        "sha": "4d3677942bf18879fef67aedc4707f91e8875094",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d3677942bf18879fef67aedc4707f91e8875094"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "caec316cd4e1aca94ac53ad51bc6d8ff0636e0e2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b",
        "patch": "@@ -2055,7 +2055,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             \"                                      \\\"start\\\" for starting a scan\\n\"\n             \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n             \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n-                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Array of scan objects\\n\"\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects. Required for \\\"start\\\" action\\n\"\n             \"                                  Every scan object is either a string descriptor or an object:\",\n                         {\n                             {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n@@ -2115,6 +2115,11 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n         if (!reserver.reserve()) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n         }\n+\n+        if (request.params.size() < 2) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"scanobjects argument is required for the start action\");\n+        }\n+\n         std::set<CScript> needles;\n         std::map<CScript, std::string> descriptors;\n         CAmount total_in = 0;"
      },
      {
        "sha": "f31e4f43bd8060a605c293c8be40986523813e41",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b",
        "patch": "@@ -116,5 +116,12 @@ def run_test(self):\n         assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"])), [\"pkh([0c5f9a1e/1/1/0]03e1c5b6e650966971d7e71ef2674f80222752740fc1dfd63bbbd220d2da9bd0fb)#cxmct4w8\"])\n         assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1500}])), ['pkh([0c5f9a1e/1/1/0]03e1c5b6e650966971d7e71ef2674f80222752740fc1dfd63bbbd220d2da9bd0fb)#cxmct4w8', 'pkh([0c5f9a1e/1/1/1500]03832901c250025da2aebae2bfb38d5c703a57ab66ad477f9c578bfbcd78abca6f)#vchwd07g', 'pkh([0c5f9a1e/1/1/1]030d820fc9e8211c4169be8530efbc632775d8286167afd178caaf1089b77daba7)#z2t3ypsa'])\n \n+        # Check that status and abort don't need second arg\n+        assert_equal(self.nodes[0].scantxoutset(\"status\"), None)\n+        assert_equal(self.nodes[0].scantxoutset(\"abort\"), False)\n+\n+        # Check that second arg is needed for start\n+        assert_raises_rpc_error(-1, \"scanobjects argument is required for the start action\", self.nodes[0].scantxoutset, \"start\")\n+\n if __name__ == '__main__':\n     ScantxoutsetTest().main()"
      }
    ]
  },
  {
    "sha": "3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjE5NjZlYWQ2YjIzMjRkODYzYWU2YzVkOTk1NmNmNGI5ZTRiMTQ4",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-12T01:10:59Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-12T01:33:28Z"
      },
      "message": "Merge #17705: test: re-enable CLI test support by using EncodeDecimal in json.dumps()\n\nb6f9e3576a1ea18572e4803aeb3f39330f0cb759 test: re-enable CLI test support by using EncodeDecimal in json.dumps() (fanquake)\n\nPull request description:\n\n  As mentioned in https://github.com/bitcoin/bitcoin/pull/17675#issuecomment-563188648.\n\nACKs for top commit:\n  practicalswift:\n    ACK b6f9e3576a1ea18572e4803aeb3f39330f0cb759 assuming Travis is happy too -- diff looks correct :)\n  MarcoFalke:\n    > ACK b6f9e35 assuming Travis is happy too -- diff looks correct :)\n\nTree-SHA512: 79fa535cc1756c8ee610a3d6a316a1c4f036797d6990a5620e44985393a2e52f78450f8e0021d0a148c08705fd1ba765508464a365f9030ae0d2cacbd7a93e19",
      "tree": {
        "sha": "3dcd7aa290a0c65caacb8ec3500531e0216b4cda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3dcd7aa290a0c65caacb8ec3500531e0216b4cda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3xmOgACgkQLuufXMCV\nJsGvmA//XFUoR7SnwHvSTV2B0EQvY2IGX4Z7gRNzkH7BDSLl2WE44/fa5jWJNvuh\nT8ghSYV3jd1M/7fo3HJUTIMzDxjKRXfzP29ZL7MHom5Mxhmg/HfBdTINa+Ap9upL\nA3ofFcznXimpgL4nNv0tWbO26mYridOecPR3OVnSDT9bqthvOOSg9Yn4QH1JiseO\n1SIrq6pQ0gYuC12ORoAKWqPyOSNjcStMbdPU0GjsOoIcWQ788MqEPGkaWx/cA5dL\n9424g3BBc+H2HajhTp1+YsJ6q6rt8KFlviLmUfeM8NG/u7cOsWk826sFn6J52vGE\nedGkYOrLsHnPmHoUDWAPix6qYE3jtXq0tJN1QCcdmtkaizXMdarBELLa/aa7j+A9\n9iPcldVXNCZkfZ5ydP1JELTt/qkyC8f4KxlfPdAvmZ1AT38Mb9ZyyZvEfd2M37TL\nU8dsROB/Lg5v0EROCaU7T51lT+bEvzqkMazbM74yF6Vcv0u3mnywPEy72pHW2/it\n83EJA2ip/ilY0cHuTIlFLgjsIfjZCtj5Xbcpfkkm167kDH9rmePFn5HqrA4SBQoE\no91iO1Y6eVNiJ9jFBxwnwoYHdeRTsozEgz4ttWI1hH+PagkoLaPuDEQov83tnP3i\nb+4yq+kCBv0Kxy5QZFVwyNTqvc1yE7rW1HvTmphEO5ctGJ/7H/k=\n=7qV2\n-----END PGP SIGNATURE-----",
        "payload": "tree 3dcd7aa290a0c65caacb8ec3500531e0216b4cda\nparent 5948398b1866f94bdd19c6791b9b319bdee8b32e\nparent b6f9e3576a1ea18572e4803aeb3f39330f0cb759\nauthor fanquake <fanquake@gmail.com> 1576113059 -0500\ncommitter fanquake <fanquake@gmail.com> 1576114408 -0500\n\nMerge #17705: test: re-enable CLI test support by using EncodeDecimal in json.dumps()\n\nb6f9e3576a1ea18572e4803aeb3f39330f0cb759 test: re-enable CLI test support by using EncodeDecimal in json.dumps() (fanquake)\n\nPull request description:\n\n  As mentioned in https://github.com/bitcoin/bitcoin/pull/17675#issuecomment-563188648.\n\nACKs for top commit:\n  practicalswift:\n    ACK b6f9e3576a1ea18572e4803aeb3f39330f0cb759 assuming Travis is happy too -- diff looks correct :)\n  MarcoFalke:\n    > ACK b6f9e35 assuming Travis is happy too -- diff looks correct :)\n\nTree-SHA512: 79fa535cc1756c8ee610a3d6a316a1c4f036797d6990a5620e44985393a2e52f78450f8e0021d0a148c08705fd1ba765508464a365f9030ae0d2cacbd7a93e19\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5948398b1866f94bdd19c6791b9b319bdee8b32e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5948398b1866f94bdd19c6791b9b319bdee8b32e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5948398b1866f94bdd19c6791b9b319bdee8b32e"
      },
      {
        "sha": "b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6f9e3576a1ea18572e4803aeb3f39330f0cb759",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6f9e3576a1ea18572e4803aeb3f39330f0cb759"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 7,
      "deletions": 13
    },
    "files": [
      {
        "sha": "82c7e55245cf3024b9edd6486418ad1d64618f4f",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "patch": "@@ -72,7 +72,6 @@ def set_test_params(self):\n                 \"-addresstype=legacy\",\n             ],\n         ]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "0739d7e29b373eb70ef99613413a296ae280b135",
        "filename": "test/functional/mempool_package_onemore.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/mempool_package_onemore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/mempool_package_onemore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_onemore.py?ref=3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "patch": "@@ -19,7 +19,6 @@ class MempoolPackagesTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxorphantx=1000\"]]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "7014105d88a11070007130ee0a074077ef88f79d",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "patch": "@@ -27,7 +27,6 @@ def set_test_params(self):\n             [\"-maxorphantx=1000\"],\n             [\"-maxorphantx=1000\", \"-limitancestorcount={}\".format(MAX_ANCESTORS_CUSTOM)],\n         ]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "6f1ae0d3ba4fbf9188adf2471c1a695469b8bc8b",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "patch": "@@ -31,7 +31,6 @@ def set_test_params(self):\n         # This test isn't testing tx relay. Set whitelist on the peers for\n         # instant tx relay.\n         self.extra_args = [['-whitelist=127.0.0.1']] * self.num_nodes\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "780758e219b4b8c7ecc49156f7815a25d6438445",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "patch": "@@ -15,7 +15,6 @@ class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "8913b8698d84f0d31479db7e351a55608b0b824e",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "patch": "@@ -14,7 +14,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "e5c77ae5fa8a13afa6d98e2bbb41148ea1ac94a6",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "patch": "@@ -30,6 +30,7 @@\n     rpc_url,\n     wait_until,\n     p2p_port,\n+    EncodeDecimal,\n )\n \n BITCOIND_PROC_WAIT_TIMEOUT = 60\n@@ -489,7 +490,7 @@ def arg_to_cli(arg):\n     if isinstance(arg, bool):\n         return str(arg).lower()\n     elif isinstance(arg, dict) or isinstance(arg, list):\n-        return json.dumps(arg)\n+        return json.dumps(arg, default=EncodeDecimal)\n     else:\n         return str(arg)\n "
      },
      {
        "sha": "5bb73aee7e6f07b4aee649fb92fb64a3eece96f8",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "patch": "@@ -190,6 +190,11 @@ def check_json_precision():\n     if satoshis != 2000000000000003:\n         raise RuntimeError(\"JSON encode/decode loses precision\")\n \n+def EncodeDecimal(o):\n+    if isinstance(o, Decimal):\n+        return str(o)\n+    raise TypeError(repr(o) + \" is not JSON serializable\")\n+\n def count_bytes(hex_string):\n     return len(bytearray.fromhex(hex_string))\n "
      },
      {
        "sha": "1122daaf837028c8c633164e52e5497fca600631",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "patch": "@@ -26,7 +26,6 @@ class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "a5f9a047edcc917347267a276daac03939e03206",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "patch": "@@ -54,7 +54,6 @@ def set_test_params(self):\n             ['-limitdescendantcount=3'],  # Limit mempool descendants as a hack to have wallet txs rejected from the mempool\n             [],\n         ]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "0c08655833ea88af9b5047a5840e1d3bf0c6808a",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "patch": "@@ -40,7 +40,6 @@ def set_test_params(self):\n             \"-deprecatedrpc=totalFee\",\n             \"-addresstype=bech32\",\n         ] for i in range(self.num_nodes)]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "b8e097c32e9b0b5eaa7d135718b940c81471fb68",
        "filename": "test/functional/wallet_bumpfee_totalfee_deprecation.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/wallet_bumpfee_totalfee_deprecation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/wallet_bumpfee_totalfee_deprecation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee_totalfee_deprecation.py?ref=3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "patch": "@@ -16,7 +16,6 @@ def set_test_params(self):\n             \"-walletrbf={}\".format(i),\n             \"-mintxfee=0.00002\",\n         ] for i in range(self.num_nodes)]\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "6f248c9bd3ef46df35d7b8d5175e9ee1aa387e5f",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "patch": "@@ -19,7 +19,6 @@ class ListSinceBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "f48018e9fbe8fc2ae59ad63e5d36bd4db04f4811",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "patch": "@@ -27,7 +27,6 @@\n class ReorgsRestoreTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n-        self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  },
  {
    "sha": "3914e877c476f4e83816f4bf2e4c68f0fac181b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTE0ZTg3N2M0NzZmNGU4MzgxNmY0YmYyZTRjNjhmMGZhYzE4MWI4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-12T09:55:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-12T09:56:31Z"
      },
      "message": "Merge #17511: Add bounds checks before base58 decoding\n\n5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b Add bounds checks in key_io before DecodeBase58Check (Pieter Wuille)\n2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986 Pass a maximum output length to DecodeBase58 and DecodeBase58Check (Pieter Wuille)\n\nPull request description:\n\n  Fixes #17501.\n\nACKs for top commit:\n  laanwj:\n    code review ACK 5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b\n  practicalswift:\n    ACK 5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b -- code looks correct\n\nTree-SHA512: 4807f4a9508dee9c0f1ad63f56f70f4ec4e6b7e35eb91322a525e3da3828521a41de9b8338a6bf67250803660b480d95fd02ce6b2fe79c4c88bc19b54f9d8889",
      "tree": {
        "sha": "c750ed28993b90b69c3e974785b820e8c31cd5fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c750ed28993b90b69c3e974785b820e8c31cd5fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3914e877c476f4e83816f4bf2e4c68f0fac181b8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3yDs8ACgkQHkrtYphs\n0l1bFgf/SEK08wgcwXJbvj0eQCe9Uhc54IPAm8wox9ayaFoaOddhBXNdHj0Z8Nfe\n4GrK/vnZJSGTJmHBEm/EjnEQONhhTFBSpHLIzx660McBJj7yyrwBhaiBP55NzD1W\nOdPNlqRhzbzFhUqP3jY3q3AKqQANOVlyDgnxDkpNS5cY1+jPJJ35uPBYDBarMAPy\ngqjQipK96TReT3c1BVw6dD74B0CmyuvASjcX0GntBU4d/mbqjmm/u3kOvTxwzNBU\n00/0uOMD6d68hN21SKu33fvdvw0tqwcfM7iJNzWrg9jSirhRLMg6qwAgReUZApLT\nNaWm/7b2Ms0Z73UTOkP6mx9v1v+iKg==\n=FqLr\n-----END PGP SIGNATURE-----",
        "payload": "tree c750ed28993b90b69c3e974785b820e8c31cd5fd\nparent 3f1966ead6b2324d863ae6c5d9956cf4b9e4b148\nparent 5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1576144537 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1576144591 +0100\n\nMerge #17511: Add bounds checks before base58 decoding\n\n5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b Add bounds checks in key_io before DecodeBase58Check (Pieter Wuille)\n2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986 Pass a maximum output length to DecodeBase58 and DecodeBase58Check (Pieter Wuille)\n\nPull request description:\n\n  Fixes #17501.\n\nACKs for top commit:\n  laanwj:\n    code review ACK 5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b\n  practicalswift:\n    ACK 5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b -- code looks correct\n\nTree-SHA512: 4807f4a9508dee9c0f1ad63f56f70f4ec4e6b7e35eb91322a525e3da3828521a41de9b8338a6bf67250803660b480d95fd02ce6b2fe79c4c88bc19b54f9d8889\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3914e877c476f4e83816f4bf2e4c68f0fac181b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3914e877c476f4e83816f4bf2e4c68f0fac181b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3914e877c476f4e83816f4bf2e4c68f0fac181b8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f1966ead6b2324d863ae6c5d9956cf4b9e4b148"
      },
      {
        "sha": "5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 41,
      "deletions": 22
    },
    "files": [
      {
        "sha": "a0149fb64116a2640170a0c9f9359216c02afbed",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3914e877c476f4e83816f4bf2e4c68f0fac181b8/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3914e877c476f4e83816f4bf2e4c68f0fac181b8/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=3914e877c476f4e83816f4bf2e4c68f0fac181b8",
        "patch": "@@ -11,6 +11,8 @@\n #include <assert.h>\n #include <string.h>\n \n+#include <limits>\n+\n /** All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n static const int8_t mapBase58[256] = {\n@@ -32,7 +34,7 @@ static const int8_t mapBase58[256] = {\n     -1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,\n };\n \n-bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n+bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch, int max_ret_len)\n {\n     // Skip leading spaces.\n     while (*psz && IsSpace(*psz))\n@@ -42,6 +44,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n     int length = 0;\n     while (*psz == '1') {\n         zeroes++;\n+        if (zeroes > max_ret_len) return false;\n         psz++;\n     }\n     // Allocate enough space in big-endian base256 representation.\n@@ -62,6 +65,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n         }\n         assert(carry == 0);\n         length = i;\n+        if (length + zeroes > max_ret_len) return false;\n         psz++;\n     }\n     // Skip trailing spaces.\n@@ -71,8 +75,6 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n         return false;\n     // Skip leading zeroes in b256.\n     std::vector<unsigned char>::iterator it = b256.begin() + (size - length);\n-    while (it != b256.end() && *it == 0)\n-        it++;\n     // Copy result into output vector.\n     vch.reserve(zeroes + (b256.end() - it));\n     vch.assign(zeroes, 0x00);\n@@ -126,9 +128,9 @@ std::string EncodeBase58(const std::vector<unsigned char>& vch)\n     return EncodeBase58(vch.data(), vch.data() + vch.size());\n }\n \n-bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)\n+bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len)\n {\n-    return DecodeBase58(str.c_str(), vchRet);\n+    return DecodeBase58(str.c_str(), vchRet, max_ret_len);\n }\n \n std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n@@ -140,9 +142,9 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n     return EncodeBase58(vch);\n }\n \n-bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)\n+bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len)\n {\n-    if (!DecodeBase58(psz, vchRet) ||\n+    if (!DecodeBase58(psz, vchRet, max_ret_len > std::numeric_limits<int>::max() - 4 ? std::numeric_limits<int>::max() : max_ret_len + 4) ||\n         (vchRet.size() < 4)) {\n         vchRet.clear();\n         return false;\n@@ -157,7 +159,7 @@ bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)\n     return true;\n }\n \n-bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)\n+bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret)\n {\n-    return DecodeBase58Check(str.c_str(), vchRet);\n+    return DecodeBase58Check(str.c_str(), vchRet, max_ret);\n }"
      },
      {
        "sha": "90eded4992adb78ac14f96979fb6bf10fa881236",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3914e877c476f4e83816f4bf2e4c68f0fac181b8/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3914e877c476f4e83816f4bf2e4c68f0fac181b8/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=3914e877c476f4e83816f4bf2e4c68f0fac181b8",
        "patch": "@@ -35,13 +35,13 @@ std::string EncodeBase58(const std::vector<unsigned char>& vch);\n  * return true if decoding is successful.\n  * psz cannot be nullptr.\n  */\n-NODISCARD bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n /**\n  * Decode a base58-encoded string (str) into a byte vector (vchRet).\n  * return true if decoding is successful.\n  */\n-NODISCARD bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n /**\n  * Encode a byte vector into a base58-encoded string, including checksum\n@@ -52,12 +52,12 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn);\n  * Decode a base58-encoded string (psz) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-NODISCARD bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n /**\n  * Decode a base58-encoded string (str) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-NODISCARD bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n #endif // BITCOIN_BASE58_H"
      },
      {
        "sha": "d8c9b2e01a203fa46f22c4d563a0ad981396f3bc",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3914e877c476f4e83816f4bf2e4c68f0fac181b8/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3914e877c476f4e83816f4bf2e4c68f0fac181b8/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=3914e877c476f4e83816f4bf2e4c68f0fac181b8",
        "patch": "@@ -47,7 +47,7 @@ static void Base58Decode(benchmark::State& state)\n     const char* addr = \"17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem\";\n     std::vector<unsigned char> vch;\n     while (state.KeepRunning()) {\n-        (void) DecodeBase58(addr, vch);\n+        (void) DecodeBase58(addr, vch, 64);\n     }\n }\n "
      },
      {
        "sha": "af06db7343e3693ec911895536d0dd0185ff04f1",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3914e877c476f4e83816f4bf2e4c68f0fac181b8/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3914e877c476f4e83816f4bf2e4c68f0fac181b8/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=3914e877c476f4e83816f4bf2e4c68f0fac181b8",
        "patch": "@@ -73,7 +73,7 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n-    if (DecodeBase58Check(str, data)) {\n+    if (DecodeBase58Check(str, data, 21)) {\n         // base58-encoded Bitcoin addresses.\n         // Public-key-hash-addresses have version 0 (or 111 testnet).\n         // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n@@ -133,7 +133,7 @@ CKey DecodeSecret(const std::string& str)\n {\n     CKey key;\n     std::vector<unsigned char> data;\n-    if (DecodeBase58Check(str, data)) {\n+    if (DecodeBase58Check(str, data, 34)) {\n         const std::vector<unsigned char>& privkey_prefix = Params().Base58Prefix(CChainParams::SECRET_KEY);\n         if ((data.size() == 32 + privkey_prefix.size() || (data.size() == 33 + privkey_prefix.size() && data.back() == 1)) &&\n             std::equal(privkey_prefix.begin(), privkey_prefix.end(), data.begin())) {\n@@ -164,7 +164,7 @@ CExtPubKey DecodeExtPubKey(const std::string& str)\n {\n     CExtPubKey key;\n     std::vector<unsigned char> data;\n-    if (DecodeBase58Check(str, data)) {\n+    if (DecodeBase58Check(str, data, 78)) {\n         const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n         if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n             key.Decode(data.data() + prefix.size());\n@@ -187,7 +187,7 @@ CExtKey DecodeExtKey(const std::string& str)\n {\n     CExtKey key;\n     std::vector<unsigned char> data;\n-    if (DecodeBase58Check(str, data)) {\n+    if (DecodeBase58Check(str, data, 78)) {\n         const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n         if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n             key.Decode(data.data() + prefix.size());"
      },
      {
        "sha": "96fdf8c86d3facf1a50a70f0ef30c0f6f2a6d99f",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3914e877c476f4e83816f4bf2e4c68f0fac181b8/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3914e877c476f4e83816f4bf2e4c68f0fac181b8/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=3914e877c476f4e83816f4bf2e4c68f0fac181b8",
        "patch": "@@ -7,6 +7,7 @@\n #include <base58.h>\n #include <test/util/setup_common.h>\n #include <util/strencodings.h>\n+#include <util/vector.h>\n \n #include <univalue.h>\n \n@@ -53,17 +54,33 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n         }\n         std::vector<unsigned char> expected = ParseHex(test[0].get_str());\n         std::string base58string = test[1].get_str();\n-        BOOST_CHECK_MESSAGE(DecodeBase58(base58string, result), strTest);\n+        BOOST_CHECK_MESSAGE(DecodeBase58(base58string, result, 256), strTest);\n         BOOST_CHECK_MESSAGE(result.size() == expected.size() && std::equal(result.begin(), result.end(), expected.begin()), strTest);\n     }\n \n-    BOOST_CHECK(!DecodeBase58(\"invalid\", result));\n+    BOOST_CHECK(!DecodeBase58(\"invalid\", result, 100));\n \n     // check that DecodeBase58 skips whitespace, but still fails with unexpected non-whitespace at the end.\n-    BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result));\n-    BOOST_CHECK( DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t \", result));\n+    BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result, 3));\n+    BOOST_CHECK( DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t \", result, 3));\n     std::vector<unsigned char> expected = ParseHex(\"971a55\");\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n }\n \n+BOOST_AUTO_TEST_CASE(base58_random_encode_decode)\n+{\n+    for (int n = 0; n < 1000; ++n) {\n+        unsigned int len = 1 + InsecureRandBits(8);\n+        unsigned int zeroes = InsecureRandBool() ? InsecureRandRange(len + 1) : 0;\n+        auto data = Cat(std::vector<unsigned char>(zeroes, '\\000'), g_insecure_rand_ctx.randbytes(len - zeroes));\n+        auto encoded = EncodeBase58Check(data);\n+        std::vector<unsigned char> decoded;\n+        auto ok_too_small = DecodeBase58Check(encoded, decoded, InsecureRandRange(len));\n+        BOOST_CHECK(!ok_too_small);\n+        auto ok = DecodeBase58Check(encoded, decoded, len + InsecureRandRange(257 - len));\n+        BOOST_CHECK(ok);\n+        BOOST_CHECK(data == decoded);\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "ff7a9992263f5a19f73097c86068b6150d213c23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjdhOTk5MjI2M2Y1YTE5ZjczMDk3Yzg2MDY4YjYxNTBkMjEzYzIz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-11T10:56:34Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-12T11:01:56Z"
      },
      "message": "tests: Add tests for base58-decoding of std::string:s containing non-base58 characters",
      "tree": {
        "sha": "399f1cb4a465a3fd7d09e8335bb044d134241c73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/399f1cb4a465a3fd7d09e8335bb044d134241c73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff7a9992263f5a19f73097c86068b6150d213c23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7a9992263f5a19f73097c86068b6150d213c23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff7a9992263f5a19f73097c86068b6150d213c23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7a9992263f5a19f73097c86068b6150d213c23/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3914e877c476f4e83816f4bf2e4c68f0fac181b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3914e877c476f4e83816f4bf2e4c68f0fac181b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3914e877c476f4e83816f4bf2e4c68f0fac181b8"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "57559fa687b8e404fcdc49668a8c830af815e1ba",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff7a9992263f5a19f73097c86068b6150d213c23/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff7a9992263f5a19f73097c86068b6150d213c23/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=ff7a9992263f5a19f73097c86068b6150d213c23",
        "patch": "@@ -59,12 +59,24 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     }\n \n     BOOST_CHECK(!DecodeBase58(\"invalid\", result, 100));\n+    BOOST_CHECK(!DecodeBase58(std::string(\"invalid\"), result, 100));\n+    BOOST_CHECK(!DecodeBase58(std::string(\"\\0invalid\", 8), result, 100));\n+\n+    BOOST_CHECK(DecodeBase58(std::string(\"good\", 4), result, 100));\n+    BOOST_CHECK(!DecodeBase58(std::string(\"bad0IOl\", 7), result, 100));\n+    BOOST_CHECK(!DecodeBase58(std::string(\"goodbad0IOl\", 11), result, 100));\n+    BOOST_CHECK(!DecodeBase58(std::string(\"good\\0bad0IOl\", 12), result, 100));\n \n     // check that DecodeBase58 skips whitespace, but still fails with unexpected non-whitespace at the end.\n     BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result, 3));\n     BOOST_CHECK( DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t \", result, 3));\n     std::vector<unsigned char> expected = ParseHex(\"971a55\");\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+\n+    BOOST_CHECK(DecodeBase58Check(std::string(\"3vQB7B6MrGQZaxCuFg4oh\", 21), result, 100));\n+    BOOST_CHECK(!DecodeBase58Check(std::string(\"3vQB7B6MrGQZaxCuFg4oi\", 21), result, 100));\n+    BOOST_CHECK(!DecodeBase58Check(std::string(\"3vQB7B6MrGQZaxCuFg4oh0IOl\", 25), result, 100));\n+    BOOST_CHECK(!DecodeBase58Check(std::string(\"3vQB7B6MrGQZaxCuFg4oh\\00IOl\", 26), result, 100));\n }\n \n BOOST_AUTO_TEST_CASE(base58_random_encode_decode)"
      }
    ]
  },
  {
    "sha": "d945c6f5e6f61b6e289ac7da6834c18f1b677b0f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTQ1YzZmNWU2ZjYxYjZlMjg5YWM3ZGE2ODM0YzE4ZjFiNjc3YjBm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-11T11:00:52Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-12T11:01:56Z"
      },
      "message": "util: Don't allow base58-decoding of std::string:s containing non-base58 characters",
      "tree": {
        "sha": "59a127942a439fd1bdb344daf929a0acbdd0e0ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59a127942a439fd1bdb344daf929a0acbdd0e0ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d945c6f5e6f61b6e289ac7da6834c18f1b677b0f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d945c6f5e6f61b6e289ac7da6834c18f1b677b0f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d945c6f5e6f61b6e289ac7da6834c18f1b677b0f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d945c6f5e6f61b6e289ac7da6834c18f1b677b0f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff7a9992263f5a19f73097c86068b6150d213c23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7a9992263f5a19f73097c86068b6150d213c23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff7a9992263f5a19f73097c86068b6150d213c23"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 20,
      "deletions": 1
    },
    "files": [
      {
        "sha": "17d3f86ba8e95884e3e196beba8dbf9036626f37",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d945c6f5e6f61b6e289ac7da6834c18f1b677b0f/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d945c6f5e6f61b6e289ac7da6834c18f1b677b0f/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=d945c6f5e6f61b6e289ac7da6834c18f1b677b0f",
        "patch": "@@ -7,6 +7,7 @@\n #include <hash.h>\n #include <uint256.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n \n #include <assert.h>\n #include <string.h>\n@@ -130,6 +131,9 @@ std::string EncodeBase58(const std::vector<unsigned char>& vch)\n \n bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len)\n {\n+    if (!ValidAsCString(str)) {\n+        return false;\n+    }\n     return DecodeBase58(str.c_str(), vchRet, max_ret_len);\n }\n \n@@ -161,5 +165,8 @@ bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int\n \n bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret)\n {\n+    if (!ValidAsCString(str)) {\n+        return false;\n+    }\n     return DecodeBase58Check(str.c_str(), vchRet, max_ret);\n }"
      },
      {
        "sha": "8f2d05f03be20dee9f61516cb26971abb635e241",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d945c6f5e6f61b6e289ac7da6834c18f1b677b0f/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d945c6f5e6f61b6e289ac7da6834c18f1b677b0f/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=d945c6f5e6f61b6e289ac7da6834c18f1b677b0f",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <util/strencodings.h>\n+#include <util/string.h>\n \n #include <tinyformat.h>\n \n@@ -269,7 +270,7 @@ NODISCARD static bool ParsePrechecks(const std::string& str)\n         return false;\n     if (str.size() >= 1 && (IsSpace(str[0]) || IsSpace(str[str.size()-1]))) // No padding allowed\n         return false;\n-    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n+    if (!ValidAsCString(str)) // No embedded NUL characters allowed\n         return false;\n     return true;\n }"
      },
      {
        "sha": "c6fa08e5b314431d5670ce8a1c39974cf5b016c7",
        "filename": "src/util/string.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d945c6f5e6f61b6e289ac7da6834c18f1b677b0f/src/util/string.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d945c6f5e6f61b6e289ac7da6834c18f1b677b0f/src/util/string.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/string.h?ref=d945c6f5e6f61b6e289ac7da6834c18f1b677b0f",
        "patch": "@@ -5,6 +5,9 @@\n #ifndef BITCOIN_UTIL_STRING_H\n #define BITCOIN_UTIL_STRING_H\n \n+#include <attributes.h>\n+\n+#include <cstring>\n #include <string>\n #include <vector>\n \n@@ -31,4 +34,12 @@ inline std::string Join(const std::vector<std::string>& list, const std::string&\n     return Join(list, separator, [](const std::string& i) { return i; });\n }\n \n+/**\n+ * Check if a string does not contain any embedded NUL (\\0) characters\n+ */\n+NODISCARD inline bool ValidAsCString(const std::string& str) noexcept\n+{\n+    return str.size() == strlen(str.c_str());\n+}\n+\n #endif // BITCOIN_UTIL_STRENCODINGS_H"
      }
    ]
  },
  {
    "sha": "0192bd06523039214e85953b44455d5f017e6c9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTkyYmQwNjUyMzAzOTIxNGU4NTk1M2I0NDQ1NWQ1ZjAxN2U2Yzlk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-12T11:16:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-12T11:17:10Z"
      },
      "message": "Merge #17369: Refactor: Move encryption code between KeyMan and Wallet\n\n7cecf10ac32af0fca206ac5f24f482bdec88cb7d Replace LegacyScriptPubKeyMan::IsCrypted with LegacyScriptPubKeyMan::HasEncryptionKeys (Andrew Chow)\nbf6417142f36a2f75b3a11368bd73fe788ae1ccb Remove SetCrypted() and fUseCrypto; Change IsCrypted()'s implementation (Andrew Chow)\n77a777118eaf78f10a439810d1c08d510a539aa0 Rename EncryptKeys to Encrypt and pass in the encrypted batch to use (Andrew Chow)\n35f962fcf0d5107ae6a3a9348e249a9b18ff7106 Clear mapKeys before encrypting (Andrew Chow)\n14b5efd66ff0afbf3bf9158a724534a9090fc7fc Move fDecryptionThoroughlyChecked from CWallet to LegacyScriptPubKeyMan (Andrew Chow)\n97c0374a46943b2ed38ea24eeeff1f1568dd55b3 Move Unlock implementation to LegacyScriptPubKeyMan (Andrew Chow)\ne576b135d6451101d6a8219f55d80aefa216dc38 Replace LegacyScriptPubKeyMan::vMasterKey with GetDecryptionKey() (Andrew Chow)\nfd9d6eebc1eabb4675a118d19d38283da2dead39 Add GetEncryptionKey() and HasEncryptionKeys() to WalletStorage (Andrew Chow)\n\nPull request description:\n\n  Let wallet class handle locked/unlocked status and master key, and let keyman\n  handle encrypting its data and determining whether there is encrypted data.\n\n  There should be no change in behavior, but state is tracked differently. The\n  fUseCrypto atomic bool is eliminated and replaced with equivalent\n  HasEncryptionKeys checks.\n\n  Split from #17261\n\nACKs for top commit:\n  laanwj:\n    ACK 7cecf10ac32af0fca206ac5f24f482bdec88cb7d\n\nTree-SHA512: 95a997c366ca539abba0c0a7a0015f39d27b55220683d8d86344ff2d926db4724da67700d2c8ec2d82ed75d07404318c6cb81544af8aadeefab312167257e673",
      "tree": {
        "sha": "4c55e06e8de86bc06d5209013caf25739e39071f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c55e06e8de86bc06d5209013caf25739e39071f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0192bd06523039214e85953b44455d5f017e6c9d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3yIbYACgkQHkrtYphs\n0l3hogf9GTsNzjuHtXTkxY663HUbXga6RIAtvtNISri/+q3btkRWs1nbbyC0w+NU\nUOwdmMQtnJENekJEIjnvXGat+CwLmOQ5Mgi7IWiSkNOCYtpmN0cYP5mc04Ospecd\n9FWl+BmCqFipDDu7mkwKkXUb4ggovukb0xk4JGq4YatFlnzKWcZQtZ59NvV9R/EL\niKc1shxxHuUu6vh1KFI6YDMikMkS82RuKGzpZO8C9D9qdYi1JOtwiaRFwn9t+Dhq\nOFexkci/ALD3VkLB7MY3136RVdh9/HAFs2tJNauL9hRZgx4c5HdWRKbygqkgIGae\nL9dAegNxPZfqV6Rp8unDpNoGGNF+0A==\n=2eZ/\n-----END PGP SIGNATURE-----",
        "payload": "tree 4c55e06e8de86bc06d5209013caf25739e39071f\nparent 3914e877c476f4e83816f4bf2e4c68f0fac181b8\nparent 7cecf10ac32af0fca206ac5f24f482bdec88cb7d\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1576149407 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1576149430 +0100\n\nMerge #17369: Refactor: Move encryption code between KeyMan and Wallet\n\n7cecf10ac32af0fca206ac5f24f482bdec88cb7d Replace LegacyScriptPubKeyMan::IsCrypted with LegacyScriptPubKeyMan::HasEncryptionKeys (Andrew Chow)\nbf6417142f36a2f75b3a11368bd73fe788ae1ccb Remove SetCrypted() and fUseCrypto; Change IsCrypted()'s implementation (Andrew Chow)\n77a777118eaf78f10a439810d1c08d510a539aa0 Rename EncryptKeys to Encrypt and pass in the encrypted batch to use (Andrew Chow)\n35f962fcf0d5107ae6a3a9348e249a9b18ff7106 Clear mapKeys before encrypting (Andrew Chow)\n14b5efd66ff0afbf3bf9158a724534a9090fc7fc Move fDecryptionThoroughlyChecked from CWallet to LegacyScriptPubKeyMan (Andrew Chow)\n97c0374a46943b2ed38ea24eeeff1f1568dd55b3 Move Unlock implementation to LegacyScriptPubKeyMan (Andrew Chow)\ne576b135d6451101d6a8219f55d80aefa216dc38 Replace LegacyScriptPubKeyMan::vMasterKey with GetDecryptionKey() (Andrew Chow)\nfd9d6eebc1eabb4675a118d19d38283da2dead39 Add GetEncryptionKey() and HasEncryptionKeys() to WalletStorage (Andrew Chow)\n\nPull request description:\n\n  Let wallet class handle locked/unlocked status and master key, and let keyman\n  handle encrypting its data and determining whether there is encrypted data.\n\n  There should be no change in behavior, but state is tracked differently. The\n  fUseCrypto atomic bool is eliminated and replaced with equivalent\n  HasEncryptionKeys checks.\n\n  Split from #17261\n\nACKs for top commit:\n  laanwj:\n    ACK 7cecf10ac32af0fca206ac5f24f482bdec88cb7d\n\nTree-SHA512: 95a997c366ca539abba0c0a7a0015f39d27b55220683d8d86344ff2d926db4724da67700d2c8ec2d82ed75d07404318c6cb81544af8aadeefab312167257e673\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0192bd06523039214e85953b44455d5f017e6c9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0192bd06523039214e85953b44455d5f017e6c9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0192bd06523039214e85953b44455d5f017e6c9d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3914e877c476f4e83816f4bf2e4c68f0fac181b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3914e877c476f4e83816f4bf2e4c68f0fac181b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3914e877c476f4e83816f4bf2e4c68f0fac181b8"
      },
      {
        "sha": "7cecf10ac32af0fca206ac5f24f482bdec88cb7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cecf10ac32af0fca206ac5f24f482bdec88cb7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cecf10ac32af0fca206ac5f24f482bdec88cb7d"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 75,
      "deletions": 64
    },
    "files": [
      {
        "sha": "b4315014cbabe91423f4ffebc2581913d0d78317",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 30,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0192bd06523039214e85953b44455d5f017e6c9d/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0192bd06523039214e85953b44455d5f017e6c9d/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=0192bd06523039214e85953b44455d5f017e6c9d",
        "patch": "@@ -202,12 +202,11 @@ isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n     assert(false);\n }\n \n-bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n+bool LegacyScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n     {\n         LOCK(cs_KeyStore);\n-        if (!SetCrypted())\n-            return false;\n+        assert(mapKeys.empty());\n \n         bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n         bool keyFail = false;\n@@ -217,7 +216,7 @@ bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n             const CPubKey &vchPubKey = (*mi).second.first;\n             const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n             CKey key;\n-            if (!DecryptKey(vMasterKeyIn, vchCryptedSecret, vchPubKey, key))\n+            if (!DecryptKey(master_key, vchCryptedSecret, vchPubKey, key))\n             {\n                 keyFail = true;\n                 break;\n@@ -233,32 +232,39 @@ bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n         }\n         if (keyFail || (!keyPass && !accept_no_keys))\n             return false;\n-        vMasterKey = vMasterKeyIn;\n         fDecryptionThoroughlyChecked = true;\n     }\n-    NotifyStatusChanged(this);\n     return true;\n }\n \n-bool LegacyScriptPubKeyMan::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n+bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n {\n+    AssertLockHeld(cs_wallet);\n     LOCK(cs_KeyStore);\n-    if (!mapCryptedKeys.empty() || IsCrypted())\n+    encrypted_batch = batch;\n+    if (!mapCryptedKeys.empty()) {\n+        encrypted_batch = nullptr;\n         return false;\n+    }\n \n-    fUseCrypto = true;\n-    for (const KeyMap::value_type& mKey : mapKeys)\n+    KeyMap keys_to_encrypt;\n+    keys_to_encrypt.swap(mapKeys); // Clear mapKeys so AddCryptedKeyInner will succeed.\n+    for (const KeyMap::value_type& mKey : keys_to_encrypt)\n     {\n         const CKey &key = mKey.second;\n         CPubKey vchPubKey = key.GetPubKey();\n         CKeyingMaterial vchSecret(key.begin(), key.end());\n         std::vector<unsigned char> vchCryptedSecret;\n-        if (!EncryptSecret(vMasterKeyIn, vchSecret, vchPubKey.GetHash(), vchCryptedSecret))\n+        if (!EncryptSecret(master_key, vchSecret, vchPubKey.GetHash(), vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n             return false;\n-        if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n+        }\n+        if (!AddCryptedKey(vchPubKey, vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n             return false;\n+        }\n     }\n-    mapKeys.clear();\n+    encrypted_batch = nullptr;\n     return true;\n }\n \n@@ -543,7 +549,7 @@ bool LegacyScriptPubKeyMan::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& s\n         RemoveWatchOnly(script);\n     }\n \n-    if (!IsCrypted()) {\n+    if (!m_storage.HasEncryptionKeys()) {\n         return batch.WriteKey(pubkey,\n                                                  secret.GetPrivKey(),\n                                                  mapKeyMetadata[pubkey.GetID()]);\n@@ -584,7 +590,7 @@ void LegacyScriptPubKeyMan::LoadScriptMetadata(const CScriptID& script_id, const\n bool LegacyScriptPubKeyMan::AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey)\n {\n     LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n+    if (!m_storage.HasEncryptionKeys()) {\n         return FillableSigningProvider::AddKeyPubKey(key, pubkey);\n     }\n \n@@ -594,7 +600,7 @@ bool LegacyScriptPubKeyMan::AddKeyPubKeyInner(const CKey& key, const CPubKey &pu\n \n     std::vector<unsigned char> vchCryptedSecret;\n     CKeyingMaterial vchSecret(key.begin(), key.end());\n-    if (!EncryptSecret(vMasterKey, vchSecret, pubkey.GetHash(), vchCryptedSecret)) {\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), vchSecret, pubkey.GetHash(), vchCryptedSecret)) {\n         return false;\n     }\n \n@@ -612,9 +618,7 @@ bool LegacyScriptPubKeyMan::LoadCryptedKey(const CPubKey &vchPubKey, const std::\n bool LegacyScriptPubKeyMan::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     LOCK(cs_KeyStore);\n-    if (!SetCrypted()) {\n-        return false;\n-    }\n+    assert(mapKeys.empty());\n \n     mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n@@ -741,7 +745,7 @@ void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n bool LegacyScriptPubKeyMan::HaveKey(const CKeyID &address) const\n {\n     LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n+    if (!m_storage.HasEncryptionKeys()) {\n         return FillableSigningProvider::HaveKey(address);\n     }\n     return mapCryptedKeys.count(address) > 0;\n@@ -750,7 +754,7 @@ bool LegacyScriptPubKeyMan::HaveKey(const CKeyID &address) const\n bool LegacyScriptPubKeyMan::GetKey(const CKeyID &address, CKey& keyOut) const\n {\n     LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n+    if (!m_storage.HasEncryptionKeys()) {\n         return FillableSigningProvider::GetKey(address, keyOut);\n     }\n \n@@ -759,7 +763,7 @@ bool LegacyScriptPubKeyMan::GetKey(const CKeyID &address, CKey& keyOut) const\n     {\n         const CPubKey &vchPubKey = (*mi).second.first;\n         const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-        return DecryptKey(vMasterKey, vchCryptedSecret, vchPubKey, keyOut);\n+        return DecryptKey(m_storage.GetEncryptionKey(), vchCryptedSecret, vchPubKey, keyOut);\n     }\n     return false;\n }\n@@ -797,7 +801,7 @@ bool LegacyScriptPubKeyMan::GetWatchPubKey(const CKeyID &address, CPubKey &pubke\n bool LegacyScriptPubKeyMan::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n {\n     LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n+    if (!m_storage.HasEncryptionKeys()) {\n         if (!FillableSigningProvider::GetPubKey(address, vchPubKeyOut)) {\n             return GetWatchPubKey(address, vchPubKeyOut);\n         }\n@@ -1383,7 +1387,7 @@ bool LegacyScriptPubKeyMan::ImportScriptPubKeys(const std::set<CScript>& script_\n std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n {\n     LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n+    if (!m_storage.HasEncryptionKeys()) {\n         return FillableSigningProvider::GetKeys();\n     }\n     std::set<CKeyID> set_address;\n@@ -1397,13 +1401,8 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n LegacyScriptPubKeyMan::LegacyScriptPubKeyMan(CWallet& wallet)\n     : ScriptPubKeyMan(wallet),\n       m_wallet(wallet),\n-      cs_wallet(wallet.cs_wallet),\n-      vMasterKey(wallet.vMasterKey),\n-      fUseCrypto(wallet.fUseCrypto),\n-      fDecryptionThoroughlyChecked(wallet.fDecryptionThoroughlyChecked) {}\n+      cs_wallet(wallet.cs_wallet) {}\n \n-bool LegacyScriptPubKeyMan::SetCrypted() { return m_wallet.SetCrypted(); }\n-bool LegacyScriptPubKeyMan::IsCrypted() const { return m_wallet.IsCrypted(); }\n void LegacyScriptPubKeyMan::NotifyWatchonlyChanged(bool fHaveWatchOnly) const { return m_wallet.NotifyWatchonlyChanged(fHaveWatchOnly); }\n void LegacyScriptPubKeyMan::NotifyCanGetAddressesChanged() const { return m_wallet.NotifyCanGetAddressesChanged(); }\n template<typename... Params> void LegacyScriptPubKeyMan::WalletLogPrintf(const std::string& fmt, const Params&... parameters) const { return m_wallet.WalletLogPrintf(fmt, parameters...); }"
      },
      {
        "sha": "aa5eac3a85489a14b9cdede51b1ef5d5c01388c1",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0192bd06523039214e85953b44455d5f017e6c9d/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0192bd06523039214e85953b44455d5f017e6c9d/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=0192bd06523039214e85953b44455d5f017e6c9d",
        "patch": "@@ -31,6 +31,8 @@ class WalletStorage\n     virtual void UnsetBlankWalletFlag(WalletBatch&) = 0;\n     virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n     virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n     virtual bool IsLocked() const = 0;\n };\n \n@@ -150,6 +152,10 @@ class ScriptPubKeyMan\n     virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n     virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n \n+    //! Check that the given decryption key is valid for this ScriptPubKeyMan, i.e. it decrypts all of the keys handled by it.\n+    virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) { return false; }\n+\n     virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n     virtual void KeepDestination(int64_t index, const OutputType& type) {}\n     virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n@@ -193,6 +199,9 @@ class ScriptPubKeyMan\n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n private:\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n     using WatchOnlySet = std::set<CScript>;\n     using WatchKeyMap = std::map<CKeyID, CPubKey>;\n \n@@ -272,8 +281,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n     isminetype IsMine(const CScript& script) const override;\n \n-    //! will encrypt previously unencrypted keys\n-    bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n+    bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n+    bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n \n     bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n     void KeepDestination(int64_t index, const OutputType& type) override;\n@@ -403,16 +412,11 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     friend class CWallet;\n     friend class ReserveDestination;\n     LegacyScriptPubKeyMan(CWallet& wallet);\n-    bool SetCrypted();\n-    bool IsCrypted() const;\n     void NotifyWatchonlyChanged(bool fHaveWatchOnly) const;\n     void NotifyCanGetAddressesChanged() const;\n     template<typename... Params> void WalletLogPrintf(const std::string& fmt, const Params&... parameters) const;\n     CWallet& m_wallet;\n     CCriticalSection& cs_wallet;\n-    CKeyingMaterial& vMasterKey GUARDED_BY(cs_KeyStore);\n-    std::atomic<bool>& fUseCrypto;\n-    bool& fDecryptionThoroughlyChecked;\n };\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "41a816312aa2ceeb642176b10ebcc6b443bf1bb1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 12,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0192bd06523039214e85953b44455d5f017e6c9d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0192bd06523039214e85953b44455d5f017e6c9d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0192bd06523039214e85953b44455d5f017e6c9d",
        "patch": "@@ -532,8 +532,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     {\n         LOCK(cs_wallet);\n         mapMasterKeys[++nMasterKeyMaxID] = kMasterKey;\n-        assert(!encrypted_batch);\n-        encrypted_batch = new WalletBatch(*database);\n+        WalletBatch* encrypted_batch = new WalletBatch(*database);\n         if (!encrypted_batch->TxnBegin()) {\n             delete encrypted_batch;\n             encrypted_batch = nullptr;\n@@ -542,7 +541,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         encrypted_batch->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n \n         if (auto spk_man = m_spk_man.get()) {\n-            if (!spk_man->EncryptKeys(_vMasterKey)) {\n+            if (!spk_man->Encrypt(_vMasterKey, encrypted_batch)) {\n                 encrypted_batch->TxnAbort();\n                 delete encrypted_batch;\n                 encrypted_batch = nullptr;\n@@ -4003,15 +4002,9 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n     return groups;\n }\n \n-bool CWallet::SetCrypted()\n+bool CWallet::IsCrypted() const\n {\n-    LOCK(cs_KeyStore);\n-    if (fUseCrypto)\n-        return true;\n-    if (!mapKeys.empty())\n-        return false;\n-    fUseCrypto = true;\n-    return true;\n+    return HasEncryptionKeys();\n }\n \n bool CWallet::IsLocked() const\n@@ -4025,7 +4018,7 @@ bool CWallet::IsLocked() const\n \n bool CWallet::Lock()\n {\n-    if (!SetCrypted())\n+    if (!IsCrypted())\n         return false;\n \n     {\n@@ -4037,6 +4030,21 @@ bool CWallet::Lock()\n     return true;\n }\n \n+bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (m_spk_man) {\n+            if (!m_spk_man->CheckDecryptionKey(vMasterKeyIn, accept_no_keys)) {\n+                return false;\n+            }\n+        }\n+        vMasterKey = vMasterKeyIn;\n+    }\n+    NotifyStatusChanged(this);\n+    return true;\n+}\n+\n ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const CScript& script) const\n {\n     return m_spk_man.get();\n@@ -4056,3 +4064,13 @@ LegacyScriptPubKeyMan* CWallet::GetLegacyScriptPubKeyMan() const\n {\n     return m_spk_man.get();\n }\n+\n+const CKeyingMaterial& CWallet::GetEncryptionKey() const\n+{\n+    return vMasterKey;\n+}\n+\n+bool CWallet::HasEncryptionKeys() const\n+{\n+    return !mapMasterKeys.empty();\n+}"
      },
      {
        "sha": "c4511601de6e434a1c68d405797b053ad7813760",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 15,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0192bd06523039214e85953b44455d5f017e6c9d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0192bd06523039214e85953b44455d5f017e6c9d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0192bd06523039214e85953b44455d5f017e6c9d",
        "patch": "@@ -597,14 +597,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n private:\n     CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n \n-    //! if fUseCrypto is true, mapKeys must be empty\n-    //! if fUseCrypto is false, vMasterKey must be empty\n-    std::atomic<bool> fUseCrypto;\n \n-    //! keeps track of whether Unlock has run a thorough check before\n-    bool fDecryptionThoroughlyChecked;\n-\n-    bool SetCrypted();\n     bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false);\n \n     std::atomic<bool> fAbortRescan{false};\n@@ -734,9 +727,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     /** Construct wallet with specified name and database implementation. */\n     CWallet(interfaces::Chain* chain, const WalletLocation& location, std::unique_ptr<WalletDatabase> database)\n-        : fUseCrypto(false),\n-          fDecryptionThoroughlyChecked(false),\n-          m_chain(chain),\n+        : m_chain(chain),\n           m_location(location),\n           database(std::move(database))\n     {\n@@ -746,11 +737,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     {\n         // Should not have slots connected at this point.\n         assert(NotifyUnload.empty());\n-        delete encrypted_batch;\n-        encrypted_batch = nullptr;\n     }\n \n-    bool IsCrypted() const { return fUseCrypto; }\n+    bool IsCrypted() const;\n     bool IsLocked() const override;\n     bool Lock();\n \n@@ -1136,6 +1125,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     LegacyScriptPubKeyMan* GetLegacyScriptPubKeyMan() const;\n \n+    const CKeyingMaterial& GetEncryptionKey() const override;\n+    bool HasEncryptionKeys() const override;\n+\n     // Temporary LegacyScriptPubKeyMan accessors and aliases.\n     friend class LegacyScriptPubKeyMan;\n     std::unique_ptr<LegacyScriptPubKeyMan> m_spk_man = MakeUnique<LegacyScriptPubKeyMan>(*this);\n@@ -1145,8 +1137,6 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     LegacyScriptPubKeyMan::CryptedKeyMap& mapCryptedKeys GUARDED_BY(cs_KeyStore) = m_spk_man->mapCryptedKeys;\n     LegacyScriptPubKeyMan::WatchOnlySet& setWatchOnly GUARDED_BY(cs_KeyStore) = m_spk_man->setWatchOnly;\n     LegacyScriptPubKeyMan::WatchKeyMap& mapWatchKeys GUARDED_BY(cs_KeyStore) = m_spk_man->mapWatchKeys;\n-    WalletBatch*& encrypted_batch GUARDED_BY(cs_wallet) = m_spk_man->encrypted_batch;\n-    using CryptedKeyMap = LegacyScriptPubKeyMan::CryptedKeyMap;\n \n     /** Get last block processed height */\n     int GetLastBlockHeight() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)"
      }
    ]
  },
  {
    "sha": "75a2a4f3574436bb174d6f9a7f9a0d0e8a601cac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWEyYTRmMzU3NDQzNmJiMTc0ZDZmOWE3ZjlhMGQwZThhNjAxY2Fj",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-12T11:57:44Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-12T12:01:51Z"
      },
      "message": "Merge #17726: ci: Use python 3.7 on Windows Github Actions\n\nfabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb ci: Use python 3.7 on Windows Github Actions (MarcoFalke)\n\nPull request description:\n\n  This mirrors the appveyor config https://github.com/bitcoin/bitcoin/blob/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/.appveyor.yml#L10 and is needed for PEP 540\n\nACKs for top commit:\n  sipsorcery:\n    tACK fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb.\n  laanwj:\n    ACK fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb\n\nTree-SHA512: 2d0118bf4eb5ec510d1ad6e287d35bf28cc800101fa18704c119c7bc84f545aaa236ffe45dc425559e6bd896610302a133b2c50ccdcd3ced6e4d6f8302de7cdb",
      "tree": {
        "sha": "1424360c39e0d3bb6c017527efd24fb2cdcd4d7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1424360c39e0d3bb6c017527efd24fb2cdcd4d7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75a2a4f3574436bb174d6f9a7f9a0d0e8a601cac",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3yLC8ACgkQLuufXMCV\nJsGE/w//WXzqq6ydnVC5O4VEMZg/46+4jcg3DCs3vBwEKmNeaj36ZaM+TAdOlloB\nwJgzLyUWk0jv/WLgLprFt26uVOFMOHEuXt5cZQnOImQ3a2PhGlqySe+A96vU3huy\n3yRtef7F3Ua9h7sOB6Z+HTYKGr1nA4mca1zVU8L4rbKFq7d8Lmz5eLGZg++4i9XU\nJYYHyYzHnig0agl+m3eNjnHMNf5nVSH2iLHxFixu3IKHtxslOe5EfQrjRPJUf6WY\ncqjuYqGypqmryrXmX/AX19Q+v3UnLuOnX6+kcFbpnLtinsaYd7c9y5P+bKHRTMBQ\ni6cSSInTx/BU8glwvs4ushbH/h/+WFjKxlTTF1vP0liP9HPE8a2Z233IwP1MIXhE\nBLBYw3jBEgWvUq65I3eVtzx2M1nAApe0Icus5AfnMn3jJI/2QYYVz7cXqqFCOYSk\n/DBI3GluNnujKnGsqqCj8VwFojJ2T3blNzKVSgxnIUyD7yW6X8T9NYwH4N0K5xUl\n5EWsoVgT1iXAyTO2drPoD3Mn3/MQz0XKaq/MekrmS6leYKrqvIXaKDVtSNMyvePR\nGRDDjTEhUkLpmddtU8FsroO3sUSv2P3S0HTZC1uUf9rvoC/trZoLYUsGcRE2L++I\nxwNzYMRVFXSflpXC+m9lhVrA/mbct/T8KQuq0EmIWpi73MaFJXI=\n=5ktp\n-----END PGP SIGNATURE-----",
        "payload": "tree 1424360c39e0d3bb6c017527efd24fb2cdcd4d7d\nparent 0192bd06523039214e85953b44455d5f017e6c9d\nparent fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb\nauthor fanquake <fanquake@gmail.com> 1576151864 -0500\ncommitter fanquake <fanquake@gmail.com> 1576152111 -0500\n\nMerge #17726: ci: Use python 3.7 on Windows Github Actions\n\nfabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb ci: Use python 3.7 on Windows Github Actions (MarcoFalke)\n\nPull request description:\n\n  This mirrors the appveyor config https://github.com/bitcoin/bitcoin/blob/7da9e3a8171f976a9e01ee55ab9fe79bd1f033d1/.appveyor.yml#L10 and is needed for PEP 540\n\nACKs for top commit:\n  sipsorcery:\n    tACK fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb.\n  laanwj:\n    ACK fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb\n\nTree-SHA512: 2d0118bf4eb5ec510d1ad6e287d35bf28cc800101fa18704c119c7bc84f545aaa236ffe45dc425559e6bd896610302a133b2c50ccdcd3ced6e4d6f8302de7cdb\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a2a4f3574436bb174d6f9a7f9a0d0e8a601cac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75a2a4f3574436bb174d6f9a7f9a0d0e8a601cac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a2a4f3574436bb174d6f9a7f9a0d0e8a601cac/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0192bd06523039214e85953b44455d5f017e6c9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0192bd06523039214e85953b44455d5f017e6c9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0192bd06523039214e85953b44455d5f017e6c9d"
      },
      {
        "sha": "fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fabd5b444ef83b5cd0d63b33bbf6ea4e7557d0eb"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9756ebba1d7f6ebdadd054196c262848944d464b",
        "filename": ".github/workflows/ci.yml",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75a2a4f3574436bb174d6f9a7f9a0d0e8a601cac/.github/workflows/ci.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75a2a4f3574436bb174d6f9a7f9a0d0e8a601cac/.github/workflows/ci.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/workflows/ci.yml?ref=75a2a4f3574436bb174d6f9a7f9a0d0e8a601cac",
        "patch": "@@ -15,6 +15,10 @@ jobs:\n     steps:\n     - uses: actions/checkout@v1\n \n+    - uses: actions/setup-python@v1\n+      with:\n+        python-version: '3.7'  # Needed for PEP 540\n+\n     - uses: actions/cache@v1\n       id: vcpkgcache\n       with:\n@@ -67,10 +71,7 @@ jobs:\n     - name: rpcauth-test\n       shell: cmd\n       run: python test\\util\\rpcauth-test.py\n-# This step fails due to character UTF encoding error. If anyone knows how Python deals with Unicode they might be\n-# able to decipher the error message.\n-#    - name: test_runner\n-#      shell: cmd\n-#      run: |\n-#       python test\\functional\\test_runner.py --ansi --ci --quiet --combinedlogslen=4000 --failfast --exclude feature_fee_estimation\n-\n+    - name: test_runner\n+      shell: cmd\n+      run: |\n+       python test\\functional\\test_runner.py --ansi --ci --quiet --combinedlogslen=4000 --failfast --exclude feature_fee_estimation"
      }
    ]
  },
  {
    "sha": "8a01450b642a270e69b4e0e59719179c78f9748d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTAxNDUwYjY0MmEyNzBlNjliNGUwZTU5NzE5MTc5Yzc4Zjk3NDhk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-12T12:03:34Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-12T12:06:21Z"
      },
      "message": "Merge #17598: doc: Update release process with latest changes\n\nfab2f351f2311295c9ed893fe883a08a9104144e doc: Update release process with latest changes (MarcoFalke)\n\nPull request description:\n\n  Mainly adding the reminder to bump the flatpak\n\nACKs for top commit:\n  laanwj:\n    ACK fab2f351f2311295c9ed893fe883a08a9104144e\n  fanquake:\n    ACK fab2f351f2311295c9ed893fe883a08a9104144e\n\nTree-SHA512: fe279a6cdee881e8dd608cb7d09d992c4b668b01b9d0d2dbfaf92f12f3032b8fcb2c256b20fcee861397451add1338f162b6e5fa7b3c21e76c247cc419315284",
      "tree": {
        "sha": "26b32270c5f6aa8de8ed580e26d1db69a9e86b09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26b32270c5f6aa8de8ed580e26d1db69a9e86b09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a01450b642a270e69b4e0e59719179c78f9748d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3yLT0ACgkQLuufXMCV\nJsEzUxAAnauAI2BHm8BtxoGGBu95kHQaRHMNZHJRFfgqwe0/1xIZK2CXO6o3CBoL\nS/oD2i7lUBI1JgpbJ+PIHTk1SRBDHWnvWNBIpq+cNmXbfDxgumMBciSK8V9zrjR/\njJxHDl12qQODY8YzgIVJfR0JiQoelPqP1mYzpjnn2CsgwReXZ6sQ9STw8K8/zsEL\n3sH2DIccIuOAI5DIsRG4WwJ/NdL+hNgs9+AOZ7ZaEsNXtbbR9CtBpeiRJ6nTO8YB\n4xMwSG9r54OZiHtLqYaLqlPA+i8ELUbFaNo3fMP1GHo0rEG8SO1COludLTH/6jRX\nvmQ142GxSS0Ql8XMmhgutGrdeWnsbHH48ZqIpWkkOVGahTftZTVDA57WCGCGpSgy\nVVRCRI59ZsG1U1g4lAZIVNEM4XJY+B5o176+Var3lpdKtpzGa5muMyc7/wT2UW+/\n3E4mjgLjBF6VhaXnEALXsbEPSNAC1+97oLIniy5odHWiBczEEClsgncJQdjYZ1se\nfDpqLkYLzKFpoN95Foxn4J5ZcUNDbqwzi0v9XCI5//Pcp+/0rckBSt5rpfysNWlv\n8LJae8hpAsT3Oi5Q/oLBNJMmiTH1fFbNb+J8PfsPIZNo/37x7tDEROAc50/yEREv\nFqI4IukrdEzMGjtijK8M16LdQNGmKQLtUjhvWsEH7AK0us+dfLQ=\n=kUny\n-----END PGP SIGNATURE-----",
        "payload": "tree 26b32270c5f6aa8de8ed580e26d1db69a9e86b09\nparent 75a2a4f3574436bb174d6f9a7f9a0d0e8a601cac\nparent fab2f351f2311295c9ed893fe883a08a9104144e\nauthor fanquake <fanquake@gmail.com> 1576152214 -0500\ncommitter fanquake <fanquake@gmail.com> 1576152381 -0500\n\nMerge #17598: doc: Update release process with latest changes\n\nfab2f351f2311295c9ed893fe883a08a9104144e doc: Update release process with latest changes (MarcoFalke)\n\nPull request description:\n\n  Mainly adding the reminder to bump the flatpak\n\nACKs for top commit:\n  laanwj:\n    ACK fab2f351f2311295c9ed893fe883a08a9104144e\n  fanquake:\n    ACK fab2f351f2311295c9ed893fe883a08a9104144e\n\nTree-SHA512: fe279a6cdee881e8dd608cb7d09d992c4b668b01b9d0d2dbfaf92f12f3032b8fcb2c256b20fcee861397451add1338f162b6e5fa7b3c21e76c247cc419315284\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a01450b642a270e69b4e0e59719179c78f9748d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a01450b642a270e69b4e0e59719179c78f9748d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a01450b642a270e69b4e0e59719179c78f9748d/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75a2a4f3574436bb174d6f9a7f9a0d0e8a601cac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a2a4f3574436bb174d6f9a7f9a0d0e8a601cac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75a2a4f3574436bb174d6f9a7f9a0d0e8a601cac"
      },
      {
        "sha": "fab2f351f2311295c9ed893fe883a08a9104144e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab2f351f2311295c9ed893fe883a08a9104144e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab2f351f2311295c9ed893fe883a08a9104144e"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 9,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1ffef3e106e0ad3f21e04fdb546cfa3a730f050c",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a01450b642a270e69b4e0e59719179c78f9748d/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a01450b642a270e69b4e0e59719179c78f9748d/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=8a01450b642a270e69b4e0e59719179c78f9748d",
        "patch": "@@ -44,7 +44,8 @@ Release Process\n \n #### After branch-off (on the major release branch)\n \n-- Update the versions and the link to the release notes draft in `doc/release-notes.md`.\n+- Update the versions.\n+- Create a pinned meta-issue for testing the release candidate (see [this issue](https://github.com/bitcoin/bitcoin/issues/17079) for an example) and provide a link to it in the release announcements where useful.\n \n #### Before final release\n \n@@ -315,7 +316,7 @@ bitcoin.org (see below for bitcoin.org update instructions).\n     instructions: https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/adding-events-release-notes-and-alerts.md#release-notes\n \n   - After the pull request is merged, the website will automatically show the newest version within 15 minutes, as well\n-    as update the OS download links. Ping @saivann/@harding (saivann/harding on Freenode) in case anything goes wrong\n+    as update the OS download links.\n \n - Update other repositories and websites for new version\n \n@@ -330,7 +331,12 @@ bitcoin.org (see below for bitcoin.org update instructions).\n \n       - Notify BlueMatt so that he can start building [the PPAs](https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin)\n \n-      - Create a new branch for the major release \"0.xx\" (used to build the snap package)\n+      - Push the flatpak to flathub, e.g. https://github.com/flathub/org.bitcoincore.bitcoin-qt/pull/2\n+\n+      - Push the latest version to master (if applicable), e.g. https://github.com/bitcoin-core/packaging/pull/32\n+\n+      - Create a new branch for the major release \"0.xx\" from master (used to build the snap package) and request the\n+        track (if applicable), e.g. https://forum.snapcraft.io/t/track-request-for-bitcoin-core-snap/10112/7\n \n       - Notify MarcoFalke so that he can start building the snap package\n \n@@ -354,8 +360,6 @@ bitcoin.org (see below for bitcoin.org update instructions).\n \n       - Create a [new GitHub release](https://github.com/bitcoin/bitcoin/releases/new) with a link to the archived release notes\n \n-      - Create a pinned meta-issue for testing the release candidate (see [this issue](https://github.com/bitcoin/bitcoin/issues/15555) for an example) and provide a link to it in the release announcements where useful\n-\n - Announce the release:\n \n   - bitcoin-dev and bitcoin-core-dev mailing list"
      }
    ]
  },
  {
    "sha": "cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjJmNDM5ODc2OTY4MmNkNWEwZjAyNDEyMWE3ZGZkNmMwYWFhMWVm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-12T12:58:42Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-12T13:04:31Z"
      },
      "message": "Merge #17687: cli: fix Fatal LevelDB error when specifying -blockfilterindex=basic twice\n\n034561f9cd4180ea1c165cb02df6c84444a8d692 cli: fix Fatal LevelDB error when specifying -blockfilterindex=basic twice (Harris)\n\nPull request description:\n\n  This PR fixes #17679 by replacing BlockFilterType-vector with a set of the same type to make sure that only unique filter types get inserted.\n\nACKs for top commit:\n  MarcoFalke:\n    ACK 034561f9cd4180ea1c165cb02df6c84444a8d692 \ud83d\udcd6\n  laanwj:\n    ACK 034561f9cd4180ea1c165cb02df6c84444a8d692\n  fanquake:\n    ACK 034561f9cd4180ea1c165cb02df6c84444a8d692 - Tested with `src/bitcoind --blockfilterindex=basic --blockfilterindex=basic`\n\nTree-SHA512: 64ccec4d23528abfbb564f2b41fb846137875260ce06ea461da12175819985964a1a7442788d5ff7282b5de0c5fd46524d9a793788ee3b876626cbdf05b28c16",
      "tree": {
        "sha": "2ca00c673e153b30ddd7d64460df62a574ac543b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ca00c673e153b30ddd7d64460df62a574ac543b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3yOt8ACgkQLuufXMCV\nJsHCqhAAoPNSvjrJXm0RJZT7PutwaceY1nuw3Ht+JPNemqp948H3nwZiq0HxxU+i\nq7OXoLvOLkbEhfGT1M1rD1KGs0a49QmZJG68W/EhwgCRO7nhHzzz7S1HdlUQOgi3\n1TD1a9f5x+rfb3TUezLNVbthpjAmSyfFUAcdAsRb+fpK/K9xrnaSlz5gag5eC5J6\n793r1ukvwaVC1oEbwgMOeH8fDdbZ0okpMpC3+rq3jgP5ayEpAEV6c2UqZfx1Dwp+\nlKScHbspwrAvW46VN9wgownnOAc5T8KsSUT4a8COaPLpIMiZaHNd/tEM6FTIRLQK\nr4bOCsDoo5vE5Ns+JqWmvSNUgTuNK4KtxAV4D3C8ywlHhNB5bYobpwrQq2vDsgRB\ntuOkfFNfGU4CxK4MhI24p9cmmP4GVoqsNE5illOkbn+Ok3anp6s3Wna2/sUO6xNV\n+MwXhWFwLECVKYDPMg3Lk8k54VORNCBwJ4iGt6ZJkjxkEuIFi+3VNai4ojPgZFIt\n1p9kn5jiy+k0NTH3wqmqM9ZuqE5JT3BWo4QVKJGE1hDo/sfykjJCzjYba7ElTIPK\nFSFkv0F/vjY2vE/ekykMWIoj54B4xcxs6ldC2xYaLgBIzpKBH+Y5z09Wdp8dbA3s\nS+GScgdixuqxsa8wkqLWkaGsqbdMyOnnf4GQVGQxSUR0B+wtsWc=\n=9DUO\n-----END PGP SIGNATURE-----",
        "payload": "tree 2ca00c673e153b30ddd7d64460df62a574ac543b\nparent 8a01450b642a270e69b4e0e59719179c78f9748d\nparent 034561f9cd4180ea1c165cb02df6c84444a8d692\nauthor fanquake <fanquake@gmail.com> 1576155522 -0500\ncommitter fanquake <fanquake@gmail.com> 1576155871 -0500\n\nMerge #17687: cli: fix Fatal LevelDB error when specifying -blockfilterindex=basic twice\n\n034561f9cd4180ea1c165cb02df6c84444a8d692 cli: fix Fatal LevelDB error when specifying -blockfilterindex=basic twice (Harris)\n\nPull request description:\n\n  This PR fixes #17679 by replacing BlockFilterType-vector with a set of the same type to make sure that only unique filter types get inserted.\n\nACKs for top commit:\n  MarcoFalke:\n    ACK 034561f9cd4180ea1c165cb02df6c84444a8d692 \ud83d\udcd6\n  laanwj:\n    ACK 034561f9cd4180ea1c165cb02df6c84444a8d692\n  fanquake:\n    ACK 034561f9cd4180ea1c165cb02df6c84444a8d692 - Tested with `src/bitcoind --blockfilterindex=basic --blockfilterindex=basic`\n\nTree-SHA512: 64ccec4d23528abfbb564f2b41fb846137875260ce06ea461da12175819985964a1a7442788d5ff7282b5de0c5fd46524d9a793788ee3b876626cbdf05b28c16\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a01450b642a270e69b4e0e59719179c78f9748d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a01450b642a270e69b4e0e59719179c78f9748d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a01450b642a270e69b4e0e59719179c78f9748d"
      },
      {
        "sha": "034561f9cd4180ea1c165cb02df6c84444a8d692",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/034561f9cd4180ea1c165cb02df6c84444a8d692",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/034561f9cd4180ea1c165cb02df6c84444a8d692"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "5ad22d46eb925aaa46609fd151854ea2318a66bc",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <mutex>\n #include <sstream>\n+#include <set>\n \n #include <blockfilter.h>\n #include <crypto/siphash.h>\n@@ -221,15 +222,14 @@ bool BlockFilterTypeByName(const std::string& name, BlockFilterType& filter_type\n     return false;\n }\n \n-const std::vector<BlockFilterType>& AllBlockFilterTypes()\n+const std::set<BlockFilterType>& AllBlockFilterTypes()\n {\n-    static std::vector<BlockFilterType> types;\n+    static std::set<BlockFilterType> types;\n \n     static std::once_flag flag;\n     std::call_once(flag, []() {\n-            types.reserve(g_filter_types.size());\n             for (auto entry : g_filter_types) {\n-                types.push_back(entry.first);\n+                types.insert(entry.first);\n             }\n         });\n "
      },
      {
        "sha": "828204b87543a7ecb8949aa9f86dd7836553c81a",
        "filename": "src/blockfilter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <stdint.h>\n #include <string>\n+#include <set>\n #include <unordered_set>\n #include <vector>\n \n@@ -97,7 +98,7 @@ const std::string& BlockFilterTypeName(BlockFilterType filter_type);\n bool BlockFilterTypeByName(const std::string& name, BlockFilterType& filter_type);\n \n /** Get a list of known filter types. */\n-const std::vector<BlockFilterType>& AllBlockFilterTypes();\n+const std::set<BlockFilterType>& AllBlockFilterTypes();\n \n /** Get a comma-separated list of known filter type names. */\n const std::string& ListBlockFilterTypes();"
      },
      {
        "sha": "9c91c93e6595e1af0d0d5a2a2a2f4c2337649093",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef",
        "patch": "@@ -58,6 +58,7 @@\n \n #include <stdint.h>\n #include <stdio.h>\n+#include <set>\n \n #ifndef WIN32\n #include <attributes.h>\n@@ -846,7 +847,7 @@ int nUserMaxConnections;\n int nFD;\n ServiceFlags nLocalServices = ServiceFlags(NODE_NETWORK | NODE_NETWORK_LIMITED);\n int64_t peer_connect_timeout;\n-std::vector<BlockFilterType> g_enabled_filter_types;\n+std::set<BlockFilterType> g_enabled_filter_types;\n \n } // namespace\n \n@@ -934,13 +935,12 @@ bool AppInitParameterInteraction()\n         g_enabled_filter_types = AllBlockFilterTypes();\n     } else if (blockfilterindex_value != \"0\") {\n         const std::vector<std::string> names = gArgs.GetArgs(\"-blockfilterindex\");\n-        g_enabled_filter_types.reserve(names.size());\n         for (const auto& name : names) {\n             BlockFilterType filter_type;\n             if (!BlockFilterTypeByName(name, filter_type)) {\n                 return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\").translated, name));\n             }\n-            g_enabled_filter_types.push_back(filter_type);\n+            g_enabled_filter_types.insert(filter_type);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "5096baf26b53db7fff9f4f61553ee225bc128d34",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDk2YmFmMjZiNTNkYjdmZmY5ZjRmNjE1NTNlZTIyNWJjMTI4ZDM0",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2019-12-12T15:11:05Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2019-12-12T15:11:05Z"
      },
      "message": "build: fix typo",
      "tree": {
        "sha": "386e866806f5a39b394206cacd8aaeeadf7dc513",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/386e866806f5a39b394206cacd8aaeeadf7dc513"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5096baf26b53db7fff9f4f61553ee225bc128d34",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl3yWIkACgkQJiaFvHjt\nEftDSQf/XaS9/yGG9x6H/1NGFEbMHPCWHX6Pjx6z9zh4P36E6S80EFSLQNFVM4fJ\nVS8VTTuFiQGSRWlMejRgE5YYGWwQ+s90eUbWkIKfTV/h4Z4zUzUd320BeItn7t1/\nh1Ktfqc7t89IPcE6Nnyw8olJqBJbnGPL4C5CBoPDiQLgHRPeEEj4qAwHCKa5N4PN\ndVixNG0fGTv60DuXrvUiRurGGwe3PK8ZTj5fJYeHGQY58qu4RS2QIvlC3yjMKZ/C\ngRXBQT6h3UYm4RS8Fnd/SKtkC/7FVRrInm0fKiEwyhO9JjL2ngxE/yf8iZDP1zf2\nZD72Vu3BdTSFj7xO3h/+q816J8TlSQ==\n=9+IX\n-----END PGP SIGNATURE-----",
        "payload": "tree 386e866806f5a39b394206cacd8aaeeadf7dc513\nparent cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef\nauthor Harris <brakmic@gmail.com> 1576163465 +0100\ncommitter Harris <brakmic@gmail.com> 1576163465 +0100\n\nbuild: fix typo\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5096baf26b53db7fff9f4f61553ee225bc128d34",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5096baf26b53db7fff9f4f61553ee225bc128d34",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5096baf26b53db7fff9f4f61553ee225bc128d34/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dd1003d8e3c221bdf40c72e598044170587f9bf9",
        "filename": ".github/workflows/ci.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5096baf26b53db7fff9f4f61553ee225bc128d34/.github/workflows/ci.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5096baf26b53db7fff9f4f61553ee225bc128d34/.github/workflows/ci.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/workflows/ci.yml?ref=5096baf26b53db7fff9f4f61553ee225bc128d34",
        "patch": "@@ -60,7 +60,7 @@ jobs:\n       run: C:/vcpkg/vcpkg.exe integrate install\n     - name: Build\n       run: msbuild build_msvc\\bitcoin.sln /m /v:n /p:Configuration=Release\n-    - name: Run test_bticoin\n+    - name: Run test_bitcoin\n       shell: cmd\n       run: src\\test_bitcoin.exe -k stdout -e stdout 2> NUL\n     - name: Run bench_bitcoin"
      }
    ]
  },
  {
    "sha": "54e11a39e14dce11b2869b4610eb175cb7d27b05",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGUxMWEzOWUxNGRjZTExYjI4NjliNDYxMGViMTc1Y2I3ZDI3YjA1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-12T15:54:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-12T15:54:53Z"
      },
      "message": "Merge #17735: ci: fix typo\n\n5096baf26b53db7fff9f4f61553ee225bc128d34 build: fix typo (Harris)\n\nPull request description:\n\n  This PR fixes a typo in .github/workflows/ci.yml.\n\n  test_bticoin => test_bitcoin.\n\nACKs for top commit:\n  practicalswift:\n    ACK 5096baf26b53db7fff9f4f61553ee225bc128d34\n\nTree-SHA512: 478fb906adad493ae75872157d269e5060002878784968cfa44b23973b6fccb30cd643728d081a9ed20cff652a8784a33bc281ca5804935ed3c918200190cc9e",
      "tree": {
        "sha": "386e866806f5a39b394206cacd8aaeeadf7dc513",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/386e866806f5a39b394206cacd8aaeeadf7dc513"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54e11a39e14dce11b2869b4610eb175cb7d27b05",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgoNQv/Z7ctezYX5L+oc8kEYm4ukNofDUsYXvdozO/FsbkC95s/F4iq2HXWtSC8\nKlDt9Xm0E+5PBX/DzG9SPw3zEdksXXE8VN8ILh6wNHQiST8iB/qQ7PK7XcXSPmoB\nDvyVTdI+VBHwohj8XrzPrIROawXhOOhMWmtHRJAqKwYqr2q6VoIpRZabL1HVvft9\nGaG6OUlnZN9OV69zlCpSiscOHvSs6xxEeNUrjNMImrhFqWHJwBLHs/PeDs1DiXXf\nlKAxer4YM6bPW9zLaOmfxEXnIza0lP2WqaHytSVjdBFmd7INk/2D4TZcnsBufO4+\n4NzDO4WCti8ID0Tdo2hjEv/DkWWef0cM53TsIM+qZx7TZlihhzonew5sIa2YI+3R\n8dJP/BMbI4uF07G0wQOOvFQn5mJ2a4x5sjLutmoZboRZVgIz1CjgmcHyP57BnZAX\n0zKTnLG6SGXi8XnWfepIKCZZRyrtNxsLQ8hk220PUyYTgFOv1B2U+oile3stKW87\nhpq1+hzZ\n=XcKY\n-----END PGP SIGNATURE-----",
        "payload": "tree 386e866806f5a39b394206cacd8aaeeadf7dc513\nparent cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef\nparent 5096baf26b53db7fff9f4f61553ee225bc128d34\nauthor MarcoFalke <falke.marco@gmail.com> 1576166091 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576166093 -0500\n\nMerge #17735: ci: fix typo\n\n5096baf26b53db7fff9f4f61553ee225bc128d34 build: fix typo (Harris)\n\nPull request description:\n\n  This PR fixes a typo in .github/workflows/ci.yml.\n\n  test_bticoin => test_bitcoin.\n\nACKs for top commit:\n  practicalswift:\n    ACK 5096baf26b53db7fff9f4f61553ee225bc128d34\n\nTree-SHA512: 478fb906adad493ae75872157d269e5060002878784968cfa44b23973b6fccb30cd643728d081a9ed20cff652a8784a33bc281ca5804935ed3c918200190cc9e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54e11a39e14dce11b2869b4610eb175cb7d27b05",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54e11a39e14dce11b2869b4610eb175cb7d27b05",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54e11a39e14dce11b2869b4610eb175cb7d27b05/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf2f4398769682cd5a0f024121a7dfd6c0aaa1ef"
      },
      {
        "sha": "5096baf26b53db7fff9f4f61553ee225bc128d34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5096baf26b53db7fff9f4f61553ee225bc128d34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5096baf26b53db7fff9f4f61553ee225bc128d34"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dd1003d8e3c221bdf40c72e598044170587f9bf9",
        "filename": ".github/workflows/ci.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54e11a39e14dce11b2869b4610eb175cb7d27b05/.github/workflows/ci.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54e11a39e14dce11b2869b4610eb175cb7d27b05/.github/workflows/ci.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/workflows/ci.yml?ref=54e11a39e14dce11b2869b4610eb175cb7d27b05",
        "patch": "@@ -60,7 +60,7 @@ jobs:\n       run: C:/vcpkg/vcpkg.exe integrate install\n     - name: Build\n       run: msbuild build_msvc\\bitcoin.sln /m /v:n /p:Configuration=Release\n-    - name: Run test_bticoin\n+    - name: Run test_bitcoin\n       shell: cmd\n       run: src\\test_bitcoin.exe -k stdout -e stdout 2> NUL\n     - name: Run bench_bitcoin"
      }
    ]
  },
  {
    "sha": "75d9317bc1aecaab95bf875f8dca97ac3daddff4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWQ5MzE3YmMxYWVjYWFiOTViZjg3NWY4ZGNhOTdhYzNkYWRkZmY0",
    "commit": {
      "author": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2019-12-12T18:51:30Z"
      },
      "committer": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2019-12-12T18:51:30Z"
      },
      "message": "Update msvc build for Visual Studio 2019 v16.4\n\nmsvc warning C4834 for the Bitcoin Core build was introduced by Visual Studio 16.4.0. This PR adds an ignore rule for the warning (it's related to the nodiscard attribute and is not considered relevant).\nAn additional side effect of the msvc compiler update is the prebuilt Qt5.9.8 libraries cannot be linked due to being built with an earlier version of the compiler. To fix this a new Qt5.9.8 version has been compiled and the appveyor job updated to use them. The GitHub Actions job needs to continue to use the original Qt5.9.8 libraries until the latest GitHub Windows image also updates to >= Visual Studio 2019 v16.4.",
      "tree": {
        "sha": "da1633f0f8d6ec9411354feb0380587cd1a71c66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da1633f0f8d6ec9411354feb0380587cd1a71c66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75d9317bc1aecaab95bf875f8dca97ac3daddff4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEnTzIanL4SUNC6l/RCkG9w/T6/xwFAl3yjDIACgkQCkG9w/T6\n/xzwOw//dYkgR/uOlciYtGEunSCkbyHXpv4BITTxrKWAGJNe1lsCu82d+nXh/t5e\n8SdRfrZVyl0qNmK5bIYDbj9h9vdfVqzhv8dvKB1rbjSPTz/z/Z12VJsb/wV/fnFk\nMt2Xsb9o+dNcKEGmCGiIvuNFAqoS9LMZLT8ZfoiAPX4Tjv3Od2vqz7KMCBfvXxHj\nl6z3v+Zwr4opoenOwX5lPSzbSbjtVZTLVYXE6DOYINE/Wfu/bTVYvMOiagFXDD3m\n+UDtKL71lQbHP9XXDGxD+ElbBzzGW9y42I6BlTlPni+4iVZuFbSgMmeajSQzMNrt\nNH0SNWWcF+pmb0qSXBkqAWs5JXZDs6ldfKSzbst2A69pyJFGFJ8yBb1tMiNg2IEp\nYKYDgf7Szn1m+j8fl83cdlqvuB0kJy7NLqizMRJyyMU8/2i99wYhYUiQRsna5WeO\nBelsPnGQ/7Rwapn48KUocPEee1ksHqsbLLJ6S4sRB+K7GIz+0GwP479DWbghzIWR\nu01Z+9XZwTMnaVDbRKZJJFs6S+nka8x9k1p56zpVCMVbNZSh3BYnuHsFD5m4+6j/\nPhdVWJWC6jSTZR/hmFaBo1it9P1w8A7BISwYGZomxeCU/I/trz2uwk8sHtfnYveS\nEOz1mJXvG1UYv5lqqXNoSCTFGMRBNjYn0terTdD1k9gGefyRMxM=\n=SkTa\n-----END PGP SIGNATURE-----",
        "payload": "tree da1633f0f8d6ec9411354feb0380587cd1a71c66\nparent 54e11a39e14dce11b2869b4610eb175cb7d27b05\nauthor Aaron Clauson <aaron@sipsorcery.com> 1576176690 +0000\ncommitter Aaron Clauson <aaron@sipsorcery.com> 1576176690 +0000\n\nUpdate msvc build for Visual Studio 2019 v16.4\n\nmsvc warning C4834 for the Bitcoin Core build was introduced by Visual Studio 16.4.0. This PR adds an ignore rule for the warning (it's related to the nodiscard attribute and is not considered relevant).\nAn additional side effect of the msvc compiler update is the prebuilt Qt5.9.8 libraries cannot be linked due to being built with an earlier version of the compiler. To fix this a new Qt5.9.8 version has been compiled and the appveyor job updated to use them. The GitHub Actions job needs to continue to use the original Qt5.9.8 libraries until the latest GitHub Windows image also updates to >= Visual Studio 2019 v16.4.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75d9317bc1aecaab95bf875f8dca97ac3daddff4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75d9317bc1aecaab95bf875f8dca97ac3daddff4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75d9317bc1aecaab95bf875f8dca97ac3daddff4/comments",
    "author": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54e11a39e14dce11b2869b4610eb175cb7d27b05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54e11a39e14dce11b2869b4610eb175cb7d27b05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54e11a39e14dce11b2869b4610eb175cb7d27b05"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "dacfba658bcb32f96bf86c01bc0b10082a1b7e2a",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75d9317bc1aecaab95bf875f8dca97ac3daddff4/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75d9317bc1aecaab95bf875f8dca97ac3daddff4/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=75d9317bc1aecaab95bf875f8dca97ac3daddff4",
        "patch": "@@ -9,8 +9,8 @@ environment:\n   CLCACHE_SERVER: 1\n   PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n   PYTHONUTF8: 1\n-  QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/v1.4/Qt5.9.8_x64_static_vs2019.zip'\n-  QT_DOWNLOAD_HASH: 'f285cbb02bec3b3f3cc2621e3fa7d5edf0d6a66fa30c57859e583acda954ea80'\n+  QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/v1.6/Qt5.9.8_x64_static_vs2019.zip'\n+  QT_DOWNLOAD_HASH: '9a8c6eb20967873785057fdcd329a657c7f922b0af08c5fde105cc597dd37e21'\n   QT_LOCAL_PATH: 'C:\\Qt5.9.8_x64_static_vs2019'\n   VCPKG_INSTALL_PATH: 'C:\\tools\\vcpkg\\installed'\n cache:"
      },
      {
        "sha": "583cd9f88cc64de5abd2d17156ce92141d86058c",
        "filename": "build_msvc/common.init.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75d9317bc1aecaab95bf875f8dca97ac3daddff4/build_msvc/common.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75d9317bc1aecaab95bf875f8dca97ac3daddff4/build_msvc/common.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.init.vcxproj?ref=75d9317bc1aecaab95bf875f8dca97ac3daddff4",
        "patch": "@@ -107,7 +107,7 @@\n       <WarningLevel>Level3</WarningLevel>\n       <PrecompiledHeader>NotUsing</PrecompiledHeader>\n       <AdditionalOptions>/utf-8 %(AdditionalOptions)</AdditionalOptions>\n-      <DisableSpecificWarnings>4018;4221;4244;4267;4334;4715;4805;</DisableSpecificWarnings>\n+      <DisableSpecificWarnings>4018;4221;4244;4267;4334;4715;4805;4834</DisableSpecificWarnings>\n       <TreatWarningAsError>true</TreatWarningAsError>\n       <PreprocessorDefinitions>ZMQ_STATIC;NOMINMAX;WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;_WIN32_WINNT=0x0601;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>"
      }
    ]
  },
  {
    "sha": "2081442c421cc4376e5d7839f68fbe7630e89103",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDgxNDQyYzQyMWNjNDM3NmU1ZDc4MzlmNjhmYmU3NjMwZTg5MTAz",
    "commit": {
      "author": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-12-12T19:21:54Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2019-12-12T19:52:26Z"
      },
      "message": "test: Add test for rpc_whitelist",
      "tree": {
        "sha": "f6dc56678af8d7eaf188e9671a773125b127c3d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6dc56678af8d7eaf188e9671a773125b127c3d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2081442c421cc4376e5d7839f68fbe7630e89103",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2081442c421cc4376e5d7839f68fbe7630e89103",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2081442c421cc4376e5d7839f68fbe7630e89103",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2081442c421cc4376e5d7839f68fbe7630e89103/comments",
    "author": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7414d3820c833566b4f48c6c120a18bf53978c55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7414d3820c833566b4f48c6c120a18bf53978c55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7414d3820c833566b4f48c6c120a18bf53978c55"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 101,
      "deletions": 0
    },
    "files": [
      {
        "sha": "219132410b5256549a9879ac84aa8d8951ded3e9",
        "filename": "test/functional/rpc_whitelist.py",
        "status": "added",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2081442c421cc4376e5d7839f68fbe7630e89103/test/functional/rpc_whitelist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2081442c421cc4376e5d7839f68fbe7630e89103/test/functional/rpc_whitelist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_whitelist.py?ref=2081442c421cc4376e5d7839f68fbe7630e89103",
        "patch": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+A test for RPC users with restricted permissions\n+\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+import os\n+from test_framework.util import (\n+    get_datadir_path,\n+    assert_equal,\n+    str_to_b64str\n+)\n+import http.client\n+import urllib.parse\n+\n+def rpccall(node, user, method):\n+    url = urllib.parse.urlparse(node.url)\n+    headers = {\"Authorization\": \"Basic \" + str_to_b64str('{}:{}'.format(user[0], user[3]))}\n+    conn = http.client.HTTPConnection(url.hostname, url.port)\n+    conn.connect()\n+    conn.request('POST', '/', '{\"method\": \"' + method + '\"}', headers)\n+    resp = conn.getresponse()\n+    conn.close()\n+    return resp\n+\n+\n+class RPCWhitelistTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_chain(self):\n+        super().setup_chain()\n+        # 0 => Username\n+        # 1 => Password (Hashed)\n+        # 2 => Permissions\n+        # 3 => Password Plaintext\n+        self.users = [\n+            [\"user1\", \"50358aa884c841648e0700b073c32b2e$b73e95fff0748cc0b517859d2ca47d9bac1aa78231f3e48fa9222b612bd2083e\", \"getbestblockhash,getblockcount,\", \"12345\"],\n+            [\"user2\", \"8650ba41296f62092377a38547f361de$4620db7ba063ef4e2f7249853e9f3c5c3592a9619a759e3e6f1c63f2e22f1d21\", \"getblockcount\", \"54321\"]\n+        ]\n+        # For exceptions\n+        self.strange_users = [\n+            # Test empty\n+            [\"strangedude\", \"62d67dffec03836edd698314f1b2be62$c2fb4be29bb0e3646298661123cf2d8629640979cabc268ef05ea613ab54068d\", \":\", \"s7R4nG3R7H1nGZ\"],\n+            [\"strangedude2\", \"575c012c7fe4b1e83b9d809412da3ef7$09f448d0acfc19924dd62ecb96004d3c2d4b91f471030dfe43c6ea64a8f658c1\", \"\", \"s7R4nG3R7H1nGZ\"],\n+            # Test trailing comma\n+            [\"strangedude3\", \"23189c561b5975a56f4cf94030495d61$3a2f6aac26351e2257428550a553c4c1979594e36675bbd3db692442387728c0\", \":getblockcount,\", \"s7R4nG3R7H1nGZ\"],\n+            # Test overwrite\n+            [\"strangedude4\", \"990c895760a70df83949e8278665e19a$8f0906f20431ff24cb9e7f5b5041e4943bdf2a5c02a19ef4960dcf45e72cde1c\", \":getblockcount, getbestblockhash\", \"s7R4nG3R7H1nGZ\"],\n+            [\"strangedude4\", \"990c895760a70df83949e8278665e19a$8f0906f20431ff24cb9e7f5b5041e4943bdf2a5c02a19ef4960dcf45e72cde1c\", \":getblockcount\", \"s7R4nG3R7H1nGZ\"],\n+            # Testing the same permission twice\n+            [\"strangedude5\", \"d12c6e962d47a454f962eb41225e6ec8$2dd39635b155536d3c1a2e95d05feff87d5ba55f2d5ff975e6e997a836b717c9\", \":getblockcount,getblockcount\", \"s7R4nG3R7H1nGZ\"]\n+        ]\n+        # These commands shouldn't be allowed for any user to test failures\n+        self.never_allowed = [\"getnetworkinfo\"]\n+        with open(os.path.join(get_datadir_path(self.options.tmpdir, 0), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+            f.write(\"\\nrpcwhitelistdefault=0\\n\")\n+            for user in self.users:\n+                f.write(\"rpcauth=\" + user[0] + \":\" + user[1] + \"\\n\")\n+                f.write(\"rpcwhitelist=\" + user[0] + \":\" + user[2] + \"\\n\")\n+            # Special cases\n+            for strangedude in self.strange_users:\n+                f.write(\"rpcauth=\" + strangedude[0] + \":\" + strangedude[1] + \"\\n\")\n+                f.write(\"rpcwhitelist=\" + strangedude[0] + strangedude[2] + \"\\n\")\n+\n+\n+    def run_test(self):\n+        for user in self.users:\n+            permissions = user[2].replace(\" \", \"\").split(\",\")\n+            # Pop all empty items\n+            i = 0\n+            while i < len(permissions):\n+                if permissions[i] == '':\n+                    permissions.pop(i)\n+\n+                i += 1\n+            for permission in permissions:\n+                self.log.info(\"[\" + user[0] + \"]: Testing a permitted permission (\" + permission + \")\")\n+                assert_equal(200, rpccall(self.nodes[0], user, permission).status)\n+            for permission in self.never_allowed:\n+                self.log.info(\"[\" + user[0] + \"]: Testing a non permitted permission (\" + permission + \")\")\n+                assert_equal(403, rpccall(self.nodes[0], user, permission).status)\n+        # Now test the strange users\n+        for permission in self.never_allowed:\n+            self.log.info(\"Strange test 1\")\n+            assert_equal(403, rpccall(self.nodes[0], self.strange_users[0], permission).status)\n+        for permission in self.never_allowed:\n+            self.log.info(\"Strange test 2\")\n+            assert_equal(403, rpccall(self.nodes[0], self.strange_users[1], permission).status)\n+        self.log.info(\"Strange test 3\")\n+        assert_equal(200, rpccall(self.nodes[0], self.strange_users[2], \"getblockcount\").status)\n+        self.log.info(\"Strange test 4\")\n+        assert_equal(403, rpccall(self.nodes[0], self.strange_users[3], \"getbestblockhash\").status)\n+        self.log.info(\"Strange test 5\")\n+        assert_equal(200, rpccall(self.nodes[0], self.strange_users[4], \"getblockcount\").status)\n+\n+if __name__ == \"__main__\":\n+    RPCWhitelistTest().main()"
      },
      {
        "sha": "110733c529f5c95778fea8841a1d5bb0edb0bee0",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2081442c421cc4376e5d7839f68fbe7630e89103/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2081442c421cc4376e5d7839f68fbe7630e89103/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=2081442c421cc4376e5d7839f68fbe7630e89103",
        "patch": "@@ -136,6 +136,7 @@\n     'interface_rpc.py',\n     'rpc_psbt.py',\n     'rpc_users.py',\n+    'rpc_whitelist.py',\n     'feature_proxy.py',\n     'rpc_signrawtransaction.py',\n     'wallet_groups.py',"
      }
    ]
  },
  {
    "sha": "c5e318aea6ad098db66e6f174f2790acc197351c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWUzMThhZWE2YWQwOThkYjY2ZTZmMTc0ZjI3OTBhY2MxOTczNTFj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-12T20:55:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-12T20:55:33Z"
      },
      "message": "Merge #17736: Update msvc build for Visual Studio 2019 v16.4\n\n75d9317bc1aecaab95bf875f8dca97ac3daddff4 Update msvc build for Visual Studio 2019 v16.4 (Aaron Clauson)\n\nPull request description:\n\n  msvc warning C4834 for the Bitcoin Core build was introduced by Visual Studio 16.4.0. This PR adds an ignore rule for the warning (it's related to the nodiscard attribute and is not considered relevant).\n\n  An additional side effect of the msvc compiler update is the prebuilt Qt5.9.8 libraries cannot be linked due to being built with an earlier version of the compiler. To fix this a new Qt5.9.8 version has been compiled and the appveyor job updated to use them.\n\n  The GitHub Actions job needs to continue to use the original Qt5.9.8 libraries until the latest GitHub Windows image also updates to >= Visual Studio 2019 v16.4.\n\nTop commit has no ACKs.\n\nTree-SHA512: c28d64d78a968eb0bd614932b2d42d762d68853120c345970072b473e2c43fb34e99865062ae1517b10e76f269de6b8f4eed119cf05d59aa883a3553d6a76812",
      "tree": {
        "sha": "da1633f0f8d6ec9411354feb0380587cd1a71c66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da1633f0f8d6ec9411354feb0380587cd1a71c66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5e318aea6ad098db66e6f174f2790acc197351c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgJzQv+P0aAgs0aeBHe4ibNUVhsKPhZIPRV7iZt4jz4S3iYusosoxlOYiLsZF/N\nq5HmN292aBeRJapawLoduUUJteqk3nUx2c6XNX2E4TZLRFMfGT5Kny54ojxr5cFW\n2OtXLMt/kyG7QXQVxXR2Zb3Bfaltv+qmwcuVyr2T8eullh86PLFzZH401YmwYImR\nywSLiISrm5U15NTx2Vs8/5PwkaIC9ijoNZXiAQPqBt7sf0V/hYLtONTHwroD4v1c\nb+hiVWxBAR4E7u0x7A8jJt/BMrwmehUme924Z33O6R/dAxo822x54dM9xEJdYrNO\niorKIP5VBiI69WQeRobnfxCYbkAYowMS0FUhZKVztOgBkFTabNAeb1O5l+SN/D39\nP1StsZTyGehdT54lxc8GBrH0W4apBwLzxn399kwDlVXySTJ75R6Wli4QFRDe52s+\nChdi+VgIx1cMHiBwezZY+/n57gyXamLjuCRso3MOFQgojRraAxzNIv+VEd3PstXb\nv7ZT3rCj\n=3U+m\n-----END PGP SIGNATURE-----",
        "payload": "tree da1633f0f8d6ec9411354feb0380587cd1a71c66\nparent 54e11a39e14dce11b2869b4610eb175cb7d27b05\nparent 75d9317bc1aecaab95bf875f8dca97ac3daddff4\nauthor MarcoFalke <falke.marco@gmail.com> 1576184130 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576184133 -0500\n\nMerge #17736: Update msvc build for Visual Studio 2019 v16.4\n\n75d9317bc1aecaab95bf875f8dca97ac3daddff4 Update msvc build for Visual Studio 2019 v16.4 (Aaron Clauson)\n\nPull request description:\n\n  msvc warning C4834 for the Bitcoin Core build was introduced by Visual Studio 16.4.0. This PR adds an ignore rule for the warning (it's related to the nodiscard attribute and is not considered relevant).\n\n  An additional side effect of the msvc compiler update is the prebuilt Qt5.9.8 libraries cannot be linked due to being built with an earlier version of the compiler. To fix this a new Qt5.9.8 version has been compiled and the appveyor job updated to use them.\n\n  The GitHub Actions job needs to continue to use the original Qt5.9.8 libraries until the latest GitHub Windows image also updates to >= Visual Studio 2019 v16.4.\n\nTop commit has no ACKs.\n\nTree-SHA512: c28d64d78a968eb0bd614932b2d42d762d68853120c345970072b473e2c43fb34e99865062ae1517b10e76f269de6b8f4eed119cf05d59aa883a3553d6a76812\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5e318aea6ad098db66e6f174f2790acc197351c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5e318aea6ad098db66e6f174f2790acc197351c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5e318aea6ad098db66e6f174f2790acc197351c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54e11a39e14dce11b2869b4610eb175cb7d27b05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54e11a39e14dce11b2869b4610eb175cb7d27b05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54e11a39e14dce11b2869b4610eb175cb7d27b05"
      },
      {
        "sha": "75d9317bc1aecaab95bf875f8dca97ac3daddff4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75d9317bc1aecaab95bf875f8dca97ac3daddff4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75d9317bc1aecaab95bf875f8dca97ac3daddff4"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "dacfba658bcb32f96bf86c01bc0b10082a1b7e2a",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5e318aea6ad098db66e6f174f2790acc197351c/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5e318aea6ad098db66e6f174f2790acc197351c/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=c5e318aea6ad098db66e6f174f2790acc197351c",
        "patch": "@@ -9,8 +9,8 @@ environment:\n   CLCACHE_SERVER: 1\n   PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n   PYTHONUTF8: 1\n-  QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/v1.4/Qt5.9.8_x64_static_vs2019.zip'\n-  QT_DOWNLOAD_HASH: 'f285cbb02bec3b3f3cc2621e3fa7d5edf0d6a66fa30c57859e583acda954ea80'\n+  QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/v1.6/Qt5.9.8_x64_static_vs2019.zip'\n+  QT_DOWNLOAD_HASH: '9a8c6eb20967873785057fdcd329a657c7f922b0af08c5fde105cc597dd37e21'\n   QT_LOCAL_PATH: 'C:\\Qt5.9.8_x64_static_vs2019'\n   VCPKG_INSTALL_PATH: 'C:\\tools\\vcpkg\\installed'\n cache:"
      },
      {
        "sha": "583cd9f88cc64de5abd2d17156ce92141d86058c",
        "filename": "build_msvc/common.init.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5e318aea6ad098db66e6f174f2790acc197351c/build_msvc/common.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5e318aea6ad098db66e6f174f2790acc197351c/build_msvc/common.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.init.vcxproj?ref=c5e318aea6ad098db66e6f174f2790acc197351c",
        "patch": "@@ -107,7 +107,7 @@\n       <WarningLevel>Level3</WarningLevel>\n       <PrecompiledHeader>NotUsing</PrecompiledHeader>\n       <AdditionalOptions>/utf-8 %(AdditionalOptions)</AdditionalOptions>\n-      <DisableSpecificWarnings>4018;4221;4244;4267;4334;4715;4805;</DisableSpecificWarnings>\n+      <DisableSpecificWarnings>4018;4221;4244;4267;4334;4715;4805;4834</DisableSpecificWarnings>\n       <TreatWarningAsError>true</TreatWarningAsError>\n       <PreprocessorDefinitions>ZMQ_STATIC;NOMINMAX;WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;_WIN32_WINNT=0x0601;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>"
      }
    ]
  },
  {
    "sha": "e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmYzMmNiNWM1YzdmMmIxZDFmYzcwMDM1ODdiNjU3M2ZiNTk1MjZh",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-26T18:25:56Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-12-13T01:02:29Z"
      },
      "message": "qa: unify unix epoch time descriptions\n\nto \"UNIX epoch time\".\n\nCall sites updated:\n```\nmocktime\ngetblockheader\ngetblock\npruneblockchain\ngetchaintxstats\ngetblocktemplate\nsetmocktime\ngetpeerinfo\nsetban\ngetnodeaddresses\ngetrawtransaction\nimportmulti\nlisttransactions\nlistsinceblock\ngettransaction\ngetwalletinfo\ngetaddressinfo\n```",
      "tree": {
        "sha": "5a6c59968b478560dc738db8249b6d16a2b2da9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a6c59968b478560dc738db8249b6d16a2b2da9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3y4yYACgkQT1chs9Dj\nkh23txAAuc8b72Ns7xo6ofdbukQD39zmNUOufQ7B3kakg69BUARR18mVCdb/vWfB\nKkcTgj3k6axc93+yX8UAqoNZRmWviij/IV4sPnmYsZF8tw+qn6/QQJgjwG5DepEF\noRDcTrdOIeWQ4Z7Pxc/x1e+fF+gOTJklywDNxOWpzFPnVNismVqpzu8DE2fzkqhz\nwxsENwW+E42PInrYppWf8gOzivHbHgHxzgML9Gc56v7KYbflItGECzaJeVExY71r\nCynJsgCn1hDH/WgwhXMoh1CEcWuFoLf4FOnSTRCLpYuElSjnYSLP9RgpbesL+caM\nBzshGrQMhSWfafCYEwYJJqu3fGoPubDDxQOgkXZHushUngtTeSC0gQzvJSEBMBm8\n49FPcQaJZ6M/g4PXz/lPJlo7LRF1U5oopTb2Iewy0DyaU2SBGhyuc9eYTrMDmeDy\neieX5J9My+caJBMpNh8Bz65XeG4oEv6anc3IPjoiwJAWZ5+/CcI9EogSft71w94e\nSSVb8LmogqwYEhK3YcqaxbA4T7GufqqjZ3utIoSHpXC7cq8E0AOuRUAg/PLzI/S1\nCGb2mZ2KWTzxqfAkwCOQPrIJLanZAfOTFcF41wbvNUK1+2lkf5m+HF/FVQavrIGx\nN10dI32n15mmKSvXzEFDRBhtmxKyfFSaDv/3K8tj5rSJFJOOdWI=\n=jw+0\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIIEYKcXp3uC6WPlNp+oMLfhMY1XAl5qRQ5OmDhtcp3PVCP/wEArGZoovM5tH\n+BlBcaAA5WYI8CCI0wJ4me2ezwsPTdrBI2DM6wQcIVNlO+bVOv5c7s7BgwjxBF3y\n4yfwCEk9qnJWdIO0AIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5l\ndGVybml0eXdhbGwuY29t//AQloOZJM3PwsLVBlHjMpnRIAjwIFSVAystVUiTwUVK\nnb2peUfT+X/9EMJo7lMx0lRnGE3bCPAgwVFCQKIh8Zv5smYIHkbBKF1LdnwWJ/jV\nJjkvdzr4Z7AI8QRd8uMo8AhxgYLOfeDhrgCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQtnOOuZekDWFK3o/K\nJyy5yAjxBF3y4yfwCMiKLALGcJZsAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxl\nbmRhci5jYXRhbGxheHkuY29t8BDjwO5Xtlmq7oz7zgQJHpeBCPAgqXHIw0jyNe1t\n2u4ndC3hbagvqKE6F9tgTeLCffpRkYwI8QRd8uMn8Agi4xpAtQC/eACD3+MNLvkM\njiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 5a6c59968b478560dc738db8249b6d16a2b2da9b\nparent d8a66626d63135fd245d5afc524b88b9a94d208b\nauthor Jon Atack <jon@atack.com> 1574792756 +0100\ncommitter Jon Atack <jon@atack.com> 1576198949 +0100\n\nqa: unify unix epoch time descriptions\n\nto \"UNIX epoch time\".\n\nCall sites updated:\n```\nmocktime\ngetblockheader\ngetblock\npruneblockchain\ngetchaintxstats\ngetblocktemplate\nsetmocktime\ngetpeerinfo\nsetban\ngetnodeaddresses\ngetrawtransaction\nimportmulti\nlisttransactions\nlistsinceblock\ngettransaction\ngetwalletinfo\ngetaddressinfo\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8a66626d63135fd245d5afc524b88b9a94d208b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a66626d63135fd245d5afc524b88b9a94d208b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8a66626d63135fd245d5afc524b88b9a94d208b"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 31,
      "deletions": 23
    },
    "files": [
      {
        "sha": "fe1a65b5e1f501f9836ce37ce193ce934e715d26",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -497,7 +497,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logthreadnames\", strprintf(\"Prepend debug output with name of the originating thread (only available on platforms supporting thread_local) (default: %u)\", DEFAULT_LOGTHREADNAMES), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with \" + UNIX_EPOCH_TIME + \" (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);"
      },
      {
        "sha": "6f97ab8bd14876e5e64de178c8ca059dd53507c3",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -742,8 +742,8 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n             \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n-            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n             \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n             \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n@@ -854,8 +854,8 @@ static UniValue getblock(const JSONRPCRequest& request)\n             \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n             \"     ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n             \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n             \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n@@ -921,7 +921,7 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"pruneblockchain\", \"\",\n                 {\n-                    {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n+                    {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height to prune up to. May be set to a discrete height, or to a \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\"},\n                 },\n                 RPCResult{\n@@ -1573,7 +1573,7 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"time\\\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.\\n\"\n+            \"  \\\"time\\\": xxxxx,                         (numeric) The timestamp for the final block in the window, expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n             \"  \\\"txcount\\\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.\\n\"\n             \"  \\\"window_final_block_hash\\\": \\\"...\\\",      (string) The hash of the final block in the window.\\n\"\n             \"  \\\"window_final_block_height\\\": xxxxx,    (numeric) The height of the final block in the window.\\n\""
      },
      {
        "sha": "fc16a31423d6b2f788b6b338fe6b1d22cdd17abd",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -379,7 +379,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"  \\\"coinbasevalue\\\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)\\n\"\n             \"  \\\"coinbasetxn\\\" : { ... },          (json object) information for coinbase transaction\\n\"\n             \"  \\\"target\\\" : \\\"xxxx\\\",                (string) The hash target\\n\"\n-            \"  \\\"mintime\\\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mintime\\\" : xxx,                  (numeric) The minimum timestamp appropriate for the next block time, expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"  \\\"mutable\\\" : [                     (array of string) list of ways the block template may be changed \\n\"\n             \"     \\\"value\\\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\\n\"\n             \"     ,...\\n\"\n@@ -388,7 +388,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"  \\\"sigoplimit\\\" : n,                 (numeric) limit of sigops in blocks\\n\"\n             \"  \\\"sizelimit\\\" : n,                  (numeric) limit of block size\\n\"\n             \"  \\\"weightlimit\\\" : n,                (numeric) limit of block weight\\n\"\n-            \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"  \\\"bits\\\" : \\\"xxxxxxxx\\\",              (string) compressed target of next block\\n\"\n             \"  \\\"height\\\" : n                      (numeric) The height of the next block\\n\"\n             \"}\\n\""
      },
      {
        "sha": "d967d2bccaa0d1219e18fefe124598c2a77800f9",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -343,7 +343,7 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n             RPCHelpMan{\"setmocktime\",\n                 \"\\nSet the local time to given timestamp (-regtest only)\\n\",\n                 {\n-                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Unix seconds-since-epoch timestamp\\n\"\n+                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, UNIX_EPOCH_TIME + \"\\n\"\n             \"   Pass 0 to go back to using the system time.\"},\n                 },\n                 RPCResults{},"
      },
      {
        "sha": "6ee91f139de9f5bee648064a6345433f870c0638",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -89,11 +89,11 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"         ...\\n\"\n             \"     ],\\n\"\n             \"    \\\"relaytxes\\\":true|false,    (boolean) Whether peer has asked us to relay transactions to it\\n\"\n-            \"    \\\"lastsend\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\\n\"\n-            \"    \\\"lastrecv\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\\n\"\n+            \"    \\\"lastsend\\\": ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the last send\\n\"\n+            \"    \\\"lastrecv\\\": ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the last receive\\n\"\n             \"    \\\"bytessent\\\": n,            (numeric) The total bytes sent\\n\"\n             \"    \\\"bytesrecv\\\": n,            (numeric) The total bytes received\\n\"\n-            \"    \\\"conntime\\\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"    \\\"conntime\\\": ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the connection\\n\"\n             \"    \\\"timeoffset\\\": ttt,         (numeric) The time offset in seconds\\n\"\n             \"    \\\"pingtime\\\": n,             (numeric) ping time (if available)\\n\"\n             \"    \\\"minping\\\": n,              (numeric) minimum observed ping time (if any at all)\\n\"\n@@ -534,7 +534,7 @@ static UniValue setban(const JSONRPCRequest& request)\n                     {\"subnet\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\"},\n                     {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\"},\n                     {\"bantime\", RPCArg::Type::NUM, /* default */ \"0\", \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n-                    {\"absolute\", RPCArg::Type::BOOL, /* default */ \"false\", \"If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\"},\n+                    {\"absolute\", RPCArg::Type::BOOL, /* default */ \"false\", \"If set, the bantime must be an absolute timestamp expressed in \" + UNIX_EPOCH_TIME},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -691,7 +691,7 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n                 RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"time\\\": ttt,                (numeric) Timestamp in seconds since epoch (Jan 1 1970 GMT) keeping track of when the node was last seen\\n\"\n+            \"    \\\"time\\\": ttt,                (numeric) The \" + UNIX_EPOCH_TIME + \" of when the node was last seen\\n\"\n             \"    \\\"services\\\": n,              (numeric) The services offered\\n\"\n             \"    \\\"address\\\": \\\"host\\\",          (string) The address of the node\\n\"\n             \"    \\\"port\\\": n                   (numeric) The port of the node\\n\""
      },
      {
        "sha": "f328f20c7104c2ba4d6d5e22bf061baea5d2737f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -139,7 +139,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n             \"  ],\\n\"\n             \"  \\\"blockhash\\\" : \\\"hash\\\",   (string) the block hash\\n\"\n             \"  \\\"confirmations\\\" : n,      (numeric) The confirmations\\n\"\n-            \"  \\\"blocktime\\\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"blocktime\\\" : ttt         (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"  \\\"time\\\" : ttt,             (numeric) Same as \\\"blocktime\\\"\\n\"\n             \"}\\n\"\n                     },"
      },
      {
        "sha": "78586c22f9b06315faaf856a0b4ec1adcf81f3c0",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -13,6 +13,8 @@\n \n #include <tuple>\n \n+const std::string UNIX_EPOCH_TIME = \"UNIX epoch time\";\n+\n void RPCTypeCheck(const UniValue& params,\n                   const std::list<UniValueType>& typesExpected,\n                   bool fAllowNull)"
      },
      {
        "sha": "065a992a886cd77fdf1dec3aa585b1ab587e9e2a",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -22,6 +22,12 @@\n \n #include <boost/variant.hpp>\n \n+/**\n+ * String used to describe UNIX epoch time in documentation, factored out to a\n+ * constant for consistency.\n+ */\n+extern const std::string UNIX_EPOCH_TIME;\n+\n class FillableSigningProvider;\n class CPubKey;\n class CScript;"
      },
      {
        "sha": "633ac1b16d46e51016136bf01b0dfd7cb59d9788",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -1286,7 +1286,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                     {\"scriptPubKey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of scriptPubKey (string for script, json for address). Should not be provided if using a descriptor\",\n                                         /* oneline_description */ \"\", {\"\\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }\", \"string / json\"}\n                                     },\n-                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n+                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Creation time of the key expressed in \" + UNIX_EPOCH_TIME + \",\\n\"\n         \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n         \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n         \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\""
      },
      {
        "sha": "63cbe02b179e23e2e1670c94910b330d39c7a494",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -1374,14 +1374,14 @@ static const std::string TransactionDescriptionString()\n            \"    \\\"blockhash\\\": \\\"hashvalue\\\",                  (string) The block hash containing the transaction.\\n\"\n            \"    \\\"blockheight\\\": n,                          (numeric) The block height containing the transaction.\\n\"\n            \"    \\\"blockindex\\\": n,                           (numeric) The index of the transaction in the block that includes it.\\n\"\n-           \"    \\\"blocktime\\\": xxx,                          (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\\n\"\n+           \"    \\\"blocktime\\\": xxx,                          (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n            \"    \\\"txid\\\": \\\"transactionid\\\",                   (string) The transaction id.\\n\"\n            \"    \\\"walletconflicts\\\": [                       (array) Conflicting transaction ids.\\n\"\n            \"      \\\"txid\\\",                                  (string) The transaction id.\\n\"\n            \"      ...\\n\"\n            \"    ],\\n\"\n-           \"    \\\"time\\\": xxx,                               (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n-           \"    \\\"timereceived\\\": xxx,                       (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n+           \"    \\\"time\\\": xxx,                               (numeric) The transaction time expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n+           \"    \\\"timereceived\\\": xxx,                       (numeric) The time received expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n            \"    \\\"comment\\\": \\\"...\\\",                          (string) If a comment is associated with the transaction, only present if not empty.\\n\"\n            \"    \\\"bip125-replaceable\\\": \\\"yes|no|unknown\\\",    (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n            \"                                                     may be unknown for unconfirmed transactions not in the mempool\\n\";\n@@ -2428,10 +2428,10 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"unconfirmed_balance\\\": xxx,        (numeric) DEPRECATED. Identical to getbalances().mine.untrusted_pending\\n\"\n             \"  \\\"immature_balance\\\": xxxxxx,        (numeric) DEPRECATED. Identical to getbalances().mine.immature\\n\"\n             \"  \\\"txcount\\\": xxxxxxx,                (numeric) the total number of transactions in the wallet\\n\"\n-            \"  \\\"keypoololdest\\\": xxxxxx,           (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoololdest\\\": xxxxxx,           (numeric) the \" + UNIX_EPOCH_TIME + \" of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,               (numeric) how many new keys are pre-generated (only counts external keys)\\n\"\n             \"  \\\"keypoolsize_hd_internal\\\": xxxx,   (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\\n\"\n-            \"  \\\"unlocked_until\\\": ttt,             (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n+            \"  \\\"unlocked_until\\\": ttt,             (numeric) the \" + UNIX_EPOCH_TIME + \" until which the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,                (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"hdseedid\\\": \\\"<hash160>\\\"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\\n\"\n             \"  \\\"private_keys_enabled\\\": true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)\\n\"\n@@ -3743,7 +3743,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"                                                         hdseedid) and relation to the wallet (ismine, iswatchonly).\\n\"\n             \"  \\\"iscompressed\\\" : true|false,        (boolean, optional) If the pubkey is compressed.\\n\"\n             \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address. Defaults to \\\"\\\". Equivalent to the name field in the labels array.\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key if available, expressed in seconds since Epoch Time (Jan 1 1970 GMT).\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key, if available, expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"             (string, optional) The HD keypath, if the key is HD and available.\\n\"\n             \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) The Hash160 of the HD seed.\\n\"\n             \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingerprint of the master key.\\n\""
      }
    ]
  },
  {
    "sha": "d94d34f05f4ae3efa07de409489d68bbcc216346",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTRkMzRmMDVmNGFlM2VmYTA3ZGU0MDk0ODlkNjhiYmNjMjE2MzQ2",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-12-03T17:35:16Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-12-13T01:05:05Z"
      },
      "message": "doc: update developer notes wrt unix epoch time",
      "tree": {
        "sha": "ca7f60f4c394c0e67af0ca2f863fcde78e44b9dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca7f60f4c394c0e67af0ca2f863fcde78e44b9dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d94d34f05f4ae3efa07de409489d68bbcc216346",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3y48cACgkQT1chs9Dj\nkh3oVRAAu3HR97hypdhHjRc0LBbFR7NZreYJZRWzIrkmefUXJeY0YK3Bpt2p48N1\nvIzl/HPpgV3sJaVy143jojVQmtnlRP3skOEUPGhxbiKol7OQxr6gzQl6CYjI+yTd\nxOlK+HTbVypDhBGdFEn8Df0PagqRIkKbOwStOtfjE4oO9HeYZS0rfHw15RaP18Z/\nrTL1GQ2K7Z8XUnfQPUEvwTCqv7gjsBH30FNtaCHDeaz7hoxxQPV7akuXq2u47qnr\nR7mwWH5Nu9z5GLNcOTdY0VqVYVJ2oocq9BdKZtyKiAqVwU2IeKung6Ekwf7/eecd\nPYbcgtU6GWgrpfX8pyqIcNzWEIWJToj3ldObXVrt0e86ssMpO+lWYsXlwqJsGmn8\nuW9auqbQTelE1wyTVOsZx9xHXBH9dzgESZo4KZb/vug+PzXKFUvjXJnaPyBzHpon\nm3pxQOUTpDHItpBgQpQIjp4sgKCnkv8H/7gpV9/gUGJIRDFLVcRUPHyiaF5ftauP\neQFYB2XICHqGDdpOvY3NpAn01DU9VWfx99JmWZhADDHEAhq4fjQ8mtCzJ/xchvVD\npOEl6Qo1sSd+6urmrD1PIaI6VskVlKA6HyUhoAFK2vjZTWPkRpWuNLSb/odRjKGf\nsxwXxmZxOi3f6RZjq4CNq3Weobgk+CqsS7ifJJZxAin5Tm+9lTw=\n=hQuM\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIJXdqQwhl8r3iM0RAzlGwSW9kK32+6QS5Lj4rxyo/muOCP/wECJ+513xv777\nb3AykES2fnsI8QRd8uPI8AjeBKfLjLu43wCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEGRkNXcXiVFrYCVnCYsO72UI\n8QRd8uPJ8Agn99zBp1VmaQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbf/wEKHHDxmCHSf4RjuEH0Y7pN8I8CAQeSdes+jaUbjv1xAl\niZHLnTX5Fsts+FtqWxkSwionwAjxBF3y48jwCCLCKnpFSDPjAIPf4w0u+QyOLCto\ndHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BDnOqve\nHePqGoahg1ZqKpsjCPAgEVnBC+/WxMCyUE1GwN/OBTNZrL3LBnP4kVNHlgD82/YI\n8QRd8uPJ8AhEf6FyHHR6tQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree ca7f60f4c394c0e67af0ca2f863fcde78e44b9dc\nparent e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a\nauthor Jon Atack <jon@atack.com> 1575394516 +0100\ncommitter Jon Atack <jon@atack.com> 1576199105 +0100\n\ndoc: update developer notes wrt unix epoch time\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d94d34f05f4ae3efa07de409489d68bbcc216346",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d94d34f05f4ae3efa07de409489d68bbcc216346",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d94d34f05f4ae3efa07de409489d68bbcc216346/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "31d9f4e6d41dd3031b9b59a738a1bebcf285f5ad",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94d34f05f4ae3efa07de409489d68bbcc216346/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94d34f05f4ae3efa07de409489d68bbcc216346/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=d94d34f05f4ae3efa07de409489d68bbcc216346",
        "patch": "@@ -1014,7 +1014,7 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n - A RPC method must either be a wallet method or a non-wallet method. Do not\n   introduce new methods that differ in behavior based on the presence of a wallet.\n \n-  - *Rationale*: as well as complicating the implementation and interfering\n+  - *Rationale*: As well as complicating the implementation and interfering\n     with the introduction of multi-wallet, wallet and non-wallet code should be\n     separated to avoid introducing circular dependencies between code units.\n \n@@ -1041,8 +1041,13 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n \n   - *Rationale*: RPC methods registered with the same function pointer will be\n     considered aliases and only the first method name will show up in the\n-    `help` rpc command list.\n+    `help` RPC command list.\n \n   - *Exception*: Using RPC method aliases may be appropriate in cases where a\n     new RPC is replacing a deprecated RPC, to avoid both RPCs confusingly\n     showing up in the command list.\n+\n+- Use the `UNIX_EPOCH_TIME` constant when describing UNIX epoch time or\n+  timestamps in the documentation.\n+\n+  - *Rationale*: User-facing consistency."
      }
    ]
  },
  {
    "sha": "d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGIzMzVjNjBhZjQ2ZWI2MzFiZWIzOGE5ZDZjNGQ1NWU0YzBmZmMz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-13T09:53:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-13T09:53:47Z"
      },
      "message": "Merge #17617: doc: unify unix epoch time descriptions\n\nd94d34f05f4ae3efa07de409489d68bbcc216346 doc: update developer notes wrt unix epoch time (Jon Atack)\ne2f32cb5c5c7f2b1d1fc7003587b6573fb59526a qa: unify unix epoch time descriptions (Jon Atack)\n\nPull request description:\n\n  Closes #17613.\n\n  Updated call sites: mocktime, getblockheader, getblock, pruneblockchain,\n  getchaintxstats, getblocktemplate, setmocktime, getpeerinfo, setban,\n  getnodeaddresses, getrawtransaction, importmulti, listtransactions,\n  listsinceblock, gettransaction, getwalletinfo, getaddressinfo\n\n  Commands for testing manually:\n  ```\n  bitcoind -help-debug | grep -A1 mocktime\n  bitcoin-cli help getblockheader\n  bitcoin-cli help getblock\n  bitcoin-cli help pruneblockchain\n  bitcoin-cli help getchaintxstats\n  bitcoin-cli help getblocktemplate\n  bitcoin-cli help setmocktime\n  bitcoin-cli help getpeerinfo\n  bitcoin-cli help setban\n  bitcoin-cli help getnodeaddresses\n  bitcoin-cli help getrawtransaction\n  bitcoin-cli help importmulti\n  bitcoin-cli help listtransactions\n  bitcoin-cli help listsinceblock\n  bitcoin-cli help gettransaction\n  bitcoin-cli help getwalletinfo\n  bitcoin-cli help getaddressinfo\n  ```\n\nACKs for top commit:\n  laanwj:\n    re-ACK d94d34f05f4ae3efa07de409489d68bbcc216346\n\nTree-SHA512: 060713ea4e20ab72c580f06c5c7e3ef344ad9c2c9cb034987d980a54e3ed2ac0268eb3929806daa5caa7797c45f5305254fd499767db7f22862212cf77acf236",
      "tree": {
        "sha": "ab120430b6d389824fa86b062bd9f45ab84182db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab120430b6d389824fa86b062bd9f45ab84182db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3zX6sACgkQHkrtYphs\n0l3fhwf+OOuAiT8X5YE+D2bYNPpCWNr64B991w1BDkdFSgqEoBf9fY/M+Ef0BKzt\neuFLibCejtQl/qxzS5OpihF4FvrbrzrRUSM5wV3wHid3Qkb5gFtUhfSnzOW0XrBG\nfZzDgv9oLGL6d+kgzceB5IANhyc6XxhqAB5ueBh4QC+0gNRAUeVRcqm1xZV0LfV+\nLByFUrBFHNUv3JpRK6JS9i/Ia+uIQjcV0DADHpzKIqZQIbMjb8lxnlASCRIL8Vz0\nzpWug9mgheJ54QmQtkOkL9N2kuErX38egYAcu25UTcGapD+CanCSrR8LA0wRM1cU\nY8wFGijX9CtMy7VVR6n1HJgESfv98A==\n=W+Fj\n-----END PGP SIGNATURE-----",
        "payload": "tree ab120430b6d389824fa86b062bd9f45ab84182db\nparent c5e318aea6ad098db66e6f174f2790acc197351c\nparent d94d34f05f4ae3efa07de409489d68bbcc216346\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1576230817 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1576230827 +0100\n\nMerge #17617: doc: unify unix epoch time descriptions\n\nd94d34f05f4ae3efa07de409489d68bbcc216346 doc: update developer notes wrt unix epoch time (Jon Atack)\ne2f32cb5c5c7f2b1d1fc7003587b6573fb59526a qa: unify unix epoch time descriptions (Jon Atack)\n\nPull request description:\n\n  Closes #17613.\n\n  Updated call sites: mocktime, getblockheader, getblock, pruneblockchain,\n  getchaintxstats, getblocktemplate, setmocktime, getpeerinfo, setban,\n  getnodeaddresses, getrawtransaction, importmulti, listtransactions,\n  listsinceblock, gettransaction, getwalletinfo, getaddressinfo\n\n  Commands for testing manually:\n  ```\n  bitcoind -help-debug | grep -A1 mocktime\n  bitcoin-cli help getblockheader\n  bitcoin-cli help getblock\n  bitcoin-cli help pruneblockchain\n  bitcoin-cli help getchaintxstats\n  bitcoin-cli help getblocktemplate\n  bitcoin-cli help setmocktime\n  bitcoin-cli help getpeerinfo\n  bitcoin-cli help setban\n  bitcoin-cli help getnodeaddresses\n  bitcoin-cli help getrawtransaction\n  bitcoin-cli help importmulti\n  bitcoin-cli help listtransactions\n  bitcoin-cli help listsinceblock\n  bitcoin-cli help gettransaction\n  bitcoin-cli help getwalletinfo\n  bitcoin-cli help getaddressinfo\n  ```\n\nACKs for top commit:\n  laanwj:\n    re-ACK d94d34f05f4ae3efa07de409489d68bbcc216346\n\nTree-SHA512: 060713ea4e20ab72c580f06c5c7e3ef344ad9c2c9cb034987d980a54e3ed2ac0268eb3929806daa5caa7797c45f5305254fd499767db7f22862212cf77acf236\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5e318aea6ad098db66e6f174f2790acc197351c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5e318aea6ad098db66e6f174f2790acc197351c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5e318aea6ad098db66e6f174f2790acc197351c"
      },
      {
        "sha": "d94d34f05f4ae3efa07de409489d68bbcc216346",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d94d34f05f4ae3efa07de409489d68bbcc216346",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d94d34f05f4ae3efa07de409489d68bbcc216346"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 38,
      "deletions": 25
    },
    "files": [
      {
        "sha": "31d9f4e6d41dd3031b9b59a738a1bebcf285f5ad",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
        "patch": "@@ -1014,7 +1014,7 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n - A RPC method must either be a wallet method or a non-wallet method. Do not\n   introduce new methods that differ in behavior based on the presence of a wallet.\n \n-  - *Rationale*: as well as complicating the implementation and interfering\n+  - *Rationale*: As well as complicating the implementation and interfering\n     with the introduction of multi-wallet, wallet and non-wallet code should be\n     separated to avoid introducing circular dependencies between code units.\n \n@@ -1041,8 +1041,13 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n \n   - *Rationale*: RPC methods registered with the same function pointer will be\n     considered aliases and only the first method name will show up in the\n-    `help` rpc command list.\n+    `help` RPC command list.\n \n   - *Exception*: Using RPC method aliases may be appropriate in cases where a\n     new RPC is replacing a deprecated RPC, to avoid both RPCs confusingly\n     showing up in the command list.\n+\n+- Use the `UNIX_EPOCH_TIME` constant when describing UNIX epoch time or\n+  timestamps in the documentation.\n+\n+  - *Rationale*: User-facing consistency."
      },
      {
        "sha": "3543fcb971b30733b9ecdc43938a2ccfb759e9f8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
        "patch": "@@ -498,7 +498,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logthreadnames\", strprintf(\"Prepend debug output with name of the originating thread (only available on platforms supporting thread_local) (default: %u)\", DEFAULT_LOGTHREADNAMES), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with \" + UNIX_EPOCH_TIME + \" (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);"
      },
      {
        "sha": "6f97ab8bd14876e5e64de178c8ca059dd53507c3",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
        "patch": "@@ -742,8 +742,8 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n             \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n-            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n             \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n             \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n@@ -854,8 +854,8 @@ static UniValue getblock(const JSONRPCRequest& request)\n             \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n             \"     ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n             \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n             \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n@@ -921,7 +921,7 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"pruneblockchain\", \"\",\n                 {\n-                    {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n+                    {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height to prune up to. May be set to a discrete height, or to a \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\"},\n                 },\n                 RPCResult{\n@@ -1573,7 +1573,7 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"time\\\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.\\n\"\n+            \"  \\\"time\\\": xxxxx,                         (numeric) The timestamp for the final block in the window, expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n             \"  \\\"txcount\\\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.\\n\"\n             \"  \\\"window_final_block_hash\\\": \\\"...\\\",      (string) The hash of the final block in the window.\\n\"\n             \"  \\\"window_final_block_height\\\": xxxxx,    (numeric) The height of the final block in the window.\\n\""
      },
      {
        "sha": "fc16a31423d6b2f788b6b338fe6b1d22cdd17abd",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
        "patch": "@@ -379,7 +379,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"  \\\"coinbasevalue\\\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)\\n\"\n             \"  \\\"coinbasetxn\\\" : { ... },          (json object) information for coinbase transaction\\n\"\n             \"  \\\"target\\\" : \\\"xxxx\\\",                (string) The hash target\\n\"\n-            \"  \\\"mintime\\\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mintime\\\" : xxx,                  (numeric) The minimum timestamp appropriate for the next block time, expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"  \\\"mutable\\\" : [                     (array of string) list of ways the block template may be changed \\n\"\n             \"     \\\"value\\\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\\n\"\n             \"     ,...\\n\"\n@@ -388,7 +388,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"  \\\"sigoplimit\\\" : n,                 (numeric) limit of sigops in blocks\\n\"\n             \"  \\\"sizelimit\\\" : n,                  (numeric) limit of block size\\n\"\n             \"  \\\"weightlimit\\\" : n,                (numeric) limit of block weight\\n\"\n-            \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"  \\\"bits\\\" : \\\"xxxxxxxx\\\",              (string) compressed target of next block\\n\"\n             \"  \\\"height\\\" : n                      (numeric) The height of the next block\\n\"\n             \"}\\n\""
      },
      {
        "sha": "d967d2bccaa0d1219e18fefe124598c2a77800f9",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
        "patch": "@@ -343,7 +343,7 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n             RPCHelpMan{\"setmocktime\",\n                 \"\\nSet the local time to given timestamp (-regtest only)\\n\",\n                 {\n-                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Unix seconds-since-epoch timestamp\\n\"\n+                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, UNIX_EPOCH_TIME + \"\\n\"\n             \"   Pass 0 to go back to using the system time.\"},\n                 },\n                 RPCResults{},"
      },
      {
        "sha": "6ee91f139de9f5bee648064a6345433f870c0638",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
        "patch": "@@ -89,11 +89,11 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"         ...\\n\"\n             \"     ],\\n\"\n             \"    \\\"relaytxes\\\":true|false,    (boolean) Whether peer has asked us to relay transactions to it\\n\"\n-            \"    \\\"lastsend\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\\n\"\n-            \"    \\\"lastrecv\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\\n\"\n+            \"    \\\"lastsend\\\": ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the last send\\n\"\n+            \"    \\\"lastrecv\\\": ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the last receive\\n\"\n             \"    \\\"bytessent\\\": n,            (numeric) The total bytes sent\\n\"\n             \"    \\\"bytesrecv\\\": n,            (numeric) The total bytes received\\n\"\n-            \"    \\\"conntime\\\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"    \\\"conntime\\\": ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the connection\\n\"\n             \"    \\\"timeoffset\\\": ttt,         (numeric) The time offset in seconds\\n\"\n             \"    \\\"pingtime\\\": n,             (numeric) ping time (if available)\\n\"\n             \"    \\\"minping\\\": n,              (numeric) minimum observed ping time (if any at all)\\n\"\n@@ -534,7 +534,7 @@ static UniValue setban(const JSONRPCRequest& request)\n                     {\"subnet\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\"},\n                     {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\"},\n                     {\"bantime\", RPCArg::Type::NUM, /* default */ \"0\", \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n-                    {\"absolute\", RPCArg::Type::BOOL, /* default */ \"false\", \"If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\"},\n+                    {\"absolute\", RPCArg::Type::BOOL, /* default */ \"false\", \"If set, the bantime must be an absolute timestamp expressed in \" + UNIX_EPOCH_TIME},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -691,7 +691,7 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n                 RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"time\\\": ttt,                (numeric) Timestamp in seconds since epoch (Jan 1 1970 GMT) keeping track of when the node was last seen\\n\"\n+            \"    \\\"time\\\": ttt,                (numeric) The \" + UNIX_EPOCH_TIME + \" of when the node was last seen\\n\"\n             \"    \\\"services\\\": n,              (numeric) The services offered\\n\"\n             \"    \\\"address\\\": \\\"host\\\",          (string) The address of the node\\n\"\n             \"    \\\"port\\\": n                   (numeric) The port of the node\\n\""
      },
      {
        "sha": "b816a54d2f7f75193167b27b00b5672eddde512f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
        "patch": "@@ -139,7 +139,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n             \"  ],\\n\"\n             \"  \\\"blockhash\\\" : \\\"hash\\\",   (string) the block hash\\n\"\n             \"  \\\"confirmations\\\" : n,      (numeric) The confirmations\\n\"\n-            \"  \\\"blocktime\\\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"blocktime\\\" : ttt         (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"  \\\"time\\\" : ttt,             (numeric) Same as \\\"blocktime\\\"\\n\"\n             \"}\\n\"\n                     },"
      },
      {
        "sha": "78586c22f9b06315faaf856a0b4ec1adcf81f3c0",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
        "patch": "@@ -13,6 +13,8 @@\n \n #include <tuple>\n \n+const std::string UNIX_EPOCH_TIME = \"UNIX epoch time\";\n+\n void RPCTypeCheck(const UniValue& params,\n                   const std::list<UniValueType>& typesExpected,\n                   bool fAllowNull)"
      },
      {
        "sha": "065a992a886cd77fdf1dec3aa585b1ab587e9e2a",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
        "patch": "@@ -22,6 +22,12 @@\n \n #include <boost/variant.hpp>\n \n+/**\n+ * String used to describe UNIX epoch time in documentation, factored out to a\n+ * constant for consistency.\n+ */\n+extern const std::string UNIX_EPOCH_TIME;\n+\n class FillableSigningProvider;\n class CPubKey;\n class CScript;"
      },
      {
        "sha": "633ac1b16d46e51016136bf01b0dfd7cb59d9788",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
        "patch": "@@ -1286,7 +1286,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                     {\"scriptPubKey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of scriptPubKey (string for script, json for address). Should not be provided if using a descriptor\",\n                                         /* oneline_description */ \"\", {\"\\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }\", \"string / json\"}\n                                     },\n-                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n+                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Creation time of the key expressed in \" + UNIX_EPOCH_TIME + \",\\n\"\n         \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n         \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n         \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\""
      },
      {
        "sha": "63cbe02b179e23e2e1670c94910b330d39c7a494",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
        "patch": "@@ -1374,14 +1374,14 @@ static const std::string TransactionDescriptionString()\n            \"    \\\"blockhash\\\": \\\"hashvalue\\\",                  (string) The block hash containing the transaction.\\n\"\n            \"    \\\"blockheight\\\": n,                          (numeric) The block height containing the transaction.\\n\"\n            \"    \\\"blockindex\\\": n,                           (numeric) The index of the transaction in the block that includes it.\\n\"\n-           \"    \\\"blocktime\\\": xxx,                          (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\\n\"\n+           \"    \\\"blocktime\\\": xxx,                          (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n            \"    \\\"txid\\\": \\\"transactionid\\\",                   (string) The transaction id.\\n\"\n            \"    \\\"walletconflicts\\\": [                       (array) Conflicting transaction ids.\\n\"\n            \"      \\\"txid\\\",                                  (string) The transaction id.\\n\"\n            \"      ...\\n\"\n            \"    ],\\n\"\n-           \"    \\\"time\\\": xxx,                               (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n-           \"    \\\"timereceived\\\": xxx,                       (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n+           \"    \\\"time\\\": xxx,                               (numeric) The transaction time expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n+           \"    \\\"timereceived\\\": xxx,                       (numeric) The time received expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n            \"    \\\"comment\\\": \\\"...\\\",                          (string) If a comment is associated with the transaction, only present if not empty.\\n\"\n            \"    \\\"bip125-replaceable\\\": \\\"yes|no|unknown\\\",    (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n            \"                                                     may be unknown for unconfirmed transactions not in the mempool\\n\";\n@@ -2428,10 +2428,10 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"unconfirmed_balance\\\": xxx,        (numeric) DEPRECATED. Identical to getbalances().mine.untrusted_pending\\n\"\n             \"  \\\"immature_balance\\\": xxxxxx,        (numeric) DEPRECATED. Identical to getbalances().mine.immature\\n\"\n             \"  \\\"txcount\\\": xxxxxxx,                (numeric) the total number of transactions in the wallet\\n\"\n-            \"  \\\"keypoololdest\\\": xxxxxx,           (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoololdest\\\": xxxxxx,           (numeric) the \" + UNIX_EPOCH_TIME + \" of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,               (numeric) how many new keys are pre-generated (only counts external keys)\\n\"\n             \"  \\\"keypoolsize_hd_internal\\\": xxxx,   (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\\n\"\n-            \"  \\\"unlocked_until\\\": ttt,             (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n+            \"  \\\"unlocked_until\\\": ttt,             (numeric) the \" + UNIX_EPOCH_TIME + \" until which the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,                (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"hdseedid\\\": \\\"<hash160>\\\"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\\n\"\n             \"  \\\"private_keys_enabled\\\": true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)\\n\"\n@@ -3743,7 +3743,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"                                                         hdseedid) and relation to the wallet (ismine, iswatchonly).\\n\"\n             \"  \\\"iscompressed\\\" : true|false,        (boolean, optional) If the pubkey is compressed.\\n\"\n             \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address. Defaults to \\\"\\\". Equivalent to the name field in the labels array.\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key if available, expressed in seconds since Epoch Time (Jan 1 1970 GMT).\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key, if available, expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"             (string, optional) The HD keypath, if the key is HD and available.\\n\"\n             \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) The Hash160 of the HD seed.\\n\"\n             \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingerprint of the master key.\\n\""
      }
    ]
  },
  {
    "sha": "995b6c83e1ae23bb32bf1b9d19635036b92f54ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTViNmM4M2UxYWUyM2JiMzJiZjFiOWQxOTYzNTAzNmI5MmY1NGVm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-13T10:15:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-13T10:15:28Z"
      },
      "message": "Merge #17721: util: Don't allow Base58 decoding of non-Base58 strings. Add Base58 tests.\n\nd945c6f5e6f61b6e289ac7da6834c18f1b677b0f util: Don't allow base58-decoding of std::string:s containing non-base58 characters (practicalswift)\nff7a9992263f5a19f73097c86068b6150d213c23 tests: Add tests for base58-decoding of std::string:s containing non-base58 characters (practicalswift)\n\nPull request description:\n\n  Don't allow Base58 decoding of non-Base58 strings. Add Base58 tests.\n\n  Fixes #17718.\n\n  Added tests before the Base58 decoding patch:\n\n  ```\n  $ make check\n  \u2026\n  test/base58_tests.cpp(62): error: in \"base58_tests/base58_DecodeBase58\":\n      check !DecodeBase58(std::string(\"\\0invalid\", 8), result) has failed\n  test/base58_tests.cpp(67): error: in \"base58_tests/base58_DecodeBase58\":\n      check !DecodeBase58(std::string(\"good\\0bad0IOl\", 12), result) has failed\n  test/base58_tests.cpp(76): error: in \"base58_tests/base58_DecodeBase58\":\n      check !DecodeBase58Check(std::string(\"3vQB7B6MrGQZaxCuFg4oh\\00IOl\", 26), result) has failed\n  *** 3 failures are detected in the test module \"Bitcoin Core Test Suite\"\n  \u2026\n  $ echo $?\n  1\n  ```\n\n  Added tests before the Base58 decoding patch:\n\n  ```\n  $ make check\n  \u2026\n  OK\n  \u2026\n  $ echo $?\n  0\n  ```\n\nACKs for top commit:\n  MarcoFalke:\n    ACK d945c6f5e6f61b6e289ac7da6834c18f1b677b0f \ud83d\ude93\n  laanwj:\n    ACK d945c6f5e6f61b6e289ac7da6834c18f1b677b0f\n\nTree-SHA512: 78fee3a18718c9cfbf2e4b26daaf8f24b4deca00475b7b254fec7f8be740f8898c696d9cd0eaa7c50bca55909b9dff3b516b6fe4db92dc132dcc0a1c5e3d61af",
      "tree": {
        "sha": "88cbcf8c6f16bfe750efb637984e56157a8731aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88cbcf8c6f16bfe750efb637984e56157a8731aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/995b6c83e1ae23bb32bf1b9d19635036b92f54ef",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3zZMAACgkQHkrtYphs\n0l0jSwf+OLSZ+C12BOl9nLMcjIAvgoYg1cxqvIEa+AQFSU+Gc02DUhpROuWuLs6g\np4BWRkDNDw1rAVyqZVnTkl3uYL7giAdTBvxQ3o0QBnwidCJPzeLvpTKu3r93ryYQ\nWZECiVjroaRdq0XtnOs/0PCBz3rR+kIXswbGTpkrAcyHhD5hQ/qVGCEFcwJtarzG\nii7tsDIwHqQU1pWta93EozmO2bsSwzxNPGIYxkkqEtxX0uSqWLo+CndfBGPjYPp9\nxxwkjzSGSrIQpq6uHlL7dD78nkjtjGV10MwRqvCbW3rcHb1kN2ZSoOy8OGp2KYLX\nOp0AtSmu8li+l8Kb8R29qcbvGF/X3A==\n=5EDb\n-----END PGP SIGNATURE-----",
        "payload": "tree 88cbcf8c6f16bfe750efb637984e56157a8731aa\nparent d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3\nparent d945c6f5e6f61b6e289ac7da6834c18f1b677b0f\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1576232118 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1576232128 +0100\n\nMerge #17721: util: Don't allow Base58 decoding of non-Base58 strings. Add Base58 tests.\n\nd945c6f5e6f61b6e289ac7da6834c18f1b677b0f util: Don't allow base58-decoding of std::string:s containing non-base58 characters (practicalswift)\nff7a9992263f5a19f73097c86068b6150d213c23 tests: Add tests for base58-decoding of std::string:s containing non-base58 characters (practicalswift)\n\nPull request description:\n\n  Don't allow Base58 decoding of non-Base58 strings. Add Base58 tests.\n\n  Fixes #17718.\n\n  Added tests before the Base58 decoding patch:\n\n  ```\n  $ make check\n  \u2026\n  test/base58_tests.cpp(62): error: in \"base58_tests/base58_DecodeBase58\":\n      check !DecodeBase58(std::string(\"\\0invalid\", 8), result) has failed\n  test/base58_tests.cpp(67): error: in \"base58_tests/base58_DecodeBase58\":\n      check !DecodeBase58(std::string(\"good\\0bad0IOl\", 12), result) has failed\n  test/base58_tests.cpp(76): error: in \"base58_tests/base58_DecodeBase58\":\n      check !DecodeBase58Check(std::string(\"3vQB7B6MrGQZaxCuFg4oh\\00IOl\", 26), result) has failed\n  *** 3 failures are detected in the test module \"Bitcoin Core Test Suite\"\n  \u2026\n  $ echo $?\n  1\n  ```\n\n  Added tests before the Base58 decoding patch:\n\n  ```\n  $ make check\n  \u2026\n  OK\n  \u2026\n  $ echo $?\n  0\n  ```\n\nACKs for top commit:\n  MarcoFalke:\n    ACK d945c6f5e6f61b6e289ac7da6834c18f1b677b0f \ud83d\ude93\n  laanwj:\n    ACK d945c6f5e6f61b6e289ac7da6834c18f1b677b0f\n\nTree-SHA512: 78fee3a18718c9cfbf2e4b26daaf8f24b4deca00475b7b254fec7f8be740f8898c696d9cd0eaa7c50bca55909b9dff3b516b6fe4db92dc132dcc0a1c5e3d61af\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/995b6c83e1ae23bb32bf1b9d19635036b92f54ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/995b6c83e1ae23bb32bf1b9d19635036b92f54ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/995b6c83e1ae23bb32bf1b9d19635036b92f54ef/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4b335c60af46eb631beb38a9d6c4d55e4c0ffc3"
      },
      {
        "sha": "d945c6f5e6f61b6e289ac7da6834c18f1b677b0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d945c6f5e6f61b6e289ac7da6834c18f1b677b0f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d945c6f5e6f61b6e289ac7da6834c18f1b677b0f"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 32,
      "deletions": 1
    },
    "files": [
      {
        "sha": "17d3f86ba8e95884e3e196beba8dbf9036626f37",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/995b6c83e1ae23bb32bf1b9d19635036b92f54ef/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/995b6c83e1ae23bb32bf1b9d19635036b92f54ef/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=995b6c83e1ae23bb32bf1b9d19635036b92f54ef",
        "patch": "@@ -7,6 +7,7 @@\n #include <hash.h>\n #include <uint256.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n \n #include <assert.h>\n #include <string.h>\n@@ -130,6 +131,9 @@ std::string EncodeBase58(const std::vector<unsigned char>& vch)\n \n bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len)\n {\n+    if (!ValidAsCString(str)) {\n+        return false;\n+    }\n     return DecodeBase58(str.c_str(), vchRet, max_ret_len);\n }\n \n@@ -161,5 +165,8 @@ bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int\n \n bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret)\n {\n+    if (!ValidAsCString(str)) {\n+        return false;\n+    }\n     return DecodeBase58Check(str.c_str(), vchRet, max_ret);\n }"
      },
      {
        "sha": "57559fa687b8e404fcdc49668a8c830af815e1ba",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/995b6c83e1ae23bb32bf1b9d19635036b92f54ef/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/995b6c83e1ae23bb32bf1b9d19635036b92f54ef/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=995b6c83e1ae23bb32bf1b9d19635036b92f54ef",
        "patch": "@@ -59,12 +59,24 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     }\n \n     BOOST_CHECK(!DecodeBase58(\"invalid\", result, 100));\n+    BOOST_CHECK(!DecodeBase58(std::string(\"invalid\"), result, 100));\n+    BOOST_CHECK(!DecodeBase58(std::string(\"\\0invalid\", 8), result, 100));\n+\n+    BOOST_CHECK(DecodeBase58(std::string(\"good\", 4), result, 100));\n+    BOOST_CHECK(!DecodeBase58(std::string(\"bad0IOl\", 7), result, 100));\n+    BOOST_CHECK(!DecodeBase58(std::string(\"goodbad0IOl\", 11), result, 100));\n+    BOOST_CHECK(!DecodeBase58(std::string(\"good\\0bad0IOl\", 12), result, 100));\n \n     // check that DecodeBase58 skips whitespace, but still fails with unexpected non-whitespace at the end.\n     BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result, 3));\n     BOOST_CHECK( DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t \", result, 3));\n     std::vector<unsigned char> expected = ParseHex(\"971a55\");\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+\n+    BOOST_CHECK(DecodeBase58Check(std::string(\"3vQB7B6MrGQZaxCuFg4oh\", 21), result, 100));\n+    BOOST_CHECK(!DecodeBase58Check(std::string(\"3vQB7B6MrGQZaxCuFg4oi\", 21), result, 100));\n+    BOOST_CHECK(!DecodeBase58Check(std::string(\"3vQB7B6MrGQZaxCuFg4oh0IOl\", 25), result, 100));\n+    BOOST_CHECK(!DecodeBase58Check(std::string(\"3vQB7B6MrGQZaxCuFg4oh\\00IOl\", 26), result, 100));\n }\n \n BOOST_AUTO_TEST_CASE(base58_random_encode_decode)"
      },
      {
        "sha": "8f2d05f03be20dee9f61516cb26971abb635e241",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/995b6c83e1ae23bb32bf1b9d19635036b92f54ef/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/995b6c83e1ae23bb32bf1b9d19635036b92f54ef/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=995b6c83e1ae23bb32bf1b9d19635036b92f54ef",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <util/strencodings.h>\n+#include <util/string.h>\n \n #include <tinyformat.h>\n \n@@ -269,7 +270,7 @@ NODISCARD static bool ParsePrechecks(const std::string& str)\n         return false;\n     if (str.size() >= 1 && (IsSpace(str[0]) || IsSpace(str[str.size()-1]))) // No padding allowed\n         return false;\n-    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n+    if (!ValidAsCString(str)) // No embedded NUL characters allowed\n         return false;\n     return true;\n }"
      },
      {
        "sha": "c6fa08e5b314431d5670ce8a1c39974cf5b016c7",
        "filename": "src/util/string.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/995b6c83e1ae23bb32bf1b9d19635036b92f54ef/src/util/string.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/995b6c83e1ae23bb32bf1b9d19635036b92f54ef/src/util/string.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/string.h?ref=995b6c83e1ae23bb32bf1b9d19635036b92f54ef",
        "patch": "@@ -5,6 +5,9 @@\n #ifndef BITCOIN_UTIL_STRING_H\n #define BITCOIN_UTIL_STRING_H\n \n+#include <attributes.h>\n+\n+#include <cstring>\n #include <string>\n #include <vector>\n \n@@ -31,4 +34,12 @@ inline std::string Join(const std::vector<std::string>& list, const std::string&\n     return Join(list, separator, [](const std::string& i) { return i; });\n }\n \n+/**\n+ * Check if a string does not contain any embedded NUL (\\0) characters\n+ */\n+NODISCARD inline bool ValidAsCString(const std::string& str) noexcept\n+{\n+    return str.size() == strlen(str.c_str());\n+}\n+\n #endif // BITCOIN_UTIL_STRENCODINGS_H"
      }
    ]
  },
  {
    "sha": "988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODhmZTViMWFkYzBjYjU1MWRmYWNkN2QzZWVkZjRiZDdlZGM5MThh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-13T10:25:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-13T10:27:36Z"
      },
      "message": "Merge #12763: Add RPC Whitelist Feature from #12248\n\n2081442c421cc4376e5d7839f68fbe7630e89103 test: Add test for rpc_whitelist (Emil Engler)\n7414d3820c833566b4f48c6c120a18bf53978c55 Add RPC Whitelist Feature from #12248 (Jeremy Rubin)\n\nPull request description:\n\n  Summary\n  ====\n\n  This patch adds the RPC whitelisting feature requested in #12248. RPC Whitelists help enforce application policies for services being built on top of Bitcoin Core (e.g., your Lightning Node maybe shouldn't be adding new peers). The aim of this PR is not to make it advisable to connect your Bitcoin node to arbitrary services, but to reduce risk and prevent unintended access.\n\n  Using RPC Whitelists\n  ====\n  The way it works is you specify (in your bitcoin.conf) configurations such as\n\n  ```\n  rpcauth=user1:4cc74397d6e9972e5ee7671fd241$11849357f26a5be7809c68a032bc2b16ab5dcf6348ef3ed1cf30dae47b8bcc71\n  rpcauth=user2:181b4a25317bff60f3749adee7d6bca0$d9c331474f1322975fa170a2ffbcb176ba11644211746b27c1d317f265dd4ada\n  rpcauth=user3:a6c8a511b53b1edcf69c36984985e$13cfba0e626db19061c9d61fa58e712d0319c11db97ad845fa84517f454f6675\n  rpcwhitelist=user1:getnetworkinfo\n  rpcwhitelist=user2:getnetworkinfo,getwalletinfo, getbestblockhash\n  rpcwhitelistdefault=0\n  ```\n\n  Now user1 can only call getnetworkinfo, user2 can only call getnetworkinfo or getwalletinfo, while user3 can still call all RPCs.\n\n  If any rpcwhitelist is set, act as if all users are subject to whitelists unless rpcwhitelistdefault is set to 0. If rpcwhitelistdefault is set to 1 and no rpcwhitelist is set, act as if all users are subject to whitelists.\n\n  Review Request\n  =====\n  In addition to normal review, would love specific review from someone working on LN (e.g., @ roasbeef) and someone working on an infrastructure team at an exchange (e.g., @ jimpo) to check that this works well with their system.\n\n  Notes\n  =====\n\n  The rpc list is spelling sensitive -- whitespace is stripped though. Spelling errors fail towards the RPC call being blocked, which is safer.\n\n  It was unclear to me if HTTPReq_JSONRPC is the best function to patch this functionality into, or if it would be better to place it in exec or somewhere else.\n\n  It was also unclear to me if it would be preferred to cache the whitelists on startup or parse them on every RPC as is done with multiUserAuthorized. I opted for the cached approach as I thought it was a bit cleaner.\n\n  Future Work\n  =====\n\n  In a future PR, I would like to add an inheritance scheme. This seemed more controversial so I didn't want to include that here. Inheritance semantics are tricky, but it would also make these whitelists easier to read.\n\n  It also might be good to add a `getrpcwhitelist` command to facilitate permission discovery.\n\n  Tests\n  =====\n  Thanks to @ emilengler for adding tests for this feature. The tests cover all cases except for where `rpcwhitelistdefault=1` is used, given difficulties around testing with the current test framework.\n\nACKs for top commit:\n  laanwj:\n    ACK 2081442c421cc4376e5d7839f68fbe7630e89103\n\nTree-SHA512: 0dc1ac6a6f2f4b0be9c9054d495dd17752fe7b3589aeab2c6ac4e1f91cf4e7e355deedcb5d76d707cbb5a949c2f989c871b74d6bf129351f429569a701adbcbf",
      "tree": {
        "sha": "c3331591cc8b82a88bb8289cddd41a52769ee4c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3331591cc8b82a88bb8289cddd41a52769ee4c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3zZ5gACgkQHkrtYphs\n0l3fVQgApJqT/RDj2Oermn5TH7YCC4HpcHZffKF96zFmTffMcyduwwGsoUPXyV22\n7cPjQmH9O7XFcc5irwcciz02InGQy9VNWo/N0Seb9/ke35g9s50YiyHoklqbsvFF\n2N4wNgm453dFwHhdAlMu1oA5HeuMjPC3I7SLbsnlf1GgKhe+D9NguRI7KnGX1Ylh\nhM177QPV08w4PxSzLpA5jvpOamVk1BYVOWZcvJ6oebTdR6ScDmdV1jpcg1oSF8gk\nrDbry7q7/zzoMiTmDzCSFtIHl6Nsbi+1N9JzZtA8rpLMvSDd/z6oGn8LnEDKE0v8\nxiEj5SE4UUWAn49kt0XfSejVG5i3KQ==\n=sQd5\n-----END PGP SIGNATURE-----",
        "payload": "tree c3331591cc8b82a88bb8289cddd41a52769ee4c6\nparent 995b6c83e1ae23bb32bf1b9d19635036b92f54ef\nparent 2081442c421cc4376e5d7839f68fbe7630e89103\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1576232739 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1576232856 +0100\n\nMerge #12763: Add RPC Whitelist Feature from #12248\n\n2081442c421cc4376e5d7839f68fbe7630e89103 test: Add test for rpc_whitelist (Emil Engler)\n7414d3820c833566b4f48c6c120a18bf53978c55 Add RPC Whitelist Feature from #12248 (Jeremy Rubin)\n\nPull request description:\n\n  Summary\n  ====\n\n  This patch adds the RPC whitelisting feature requested in #12248. RPC Whitelists help enforce application policies for services being built on top of Bitcoin Core (e.g., your Lightning Node maybe shouldn't be adding new peers). The aim of this PR is not to make it advisable to connect your Bitcoin node to arbitrary services, but to reduce risk and prevent unintended access.\n\n  Using RPC Whitelists\n  ====\n  The way it works is you specify (in your bitcoin.conf) configurations such as\n\n  ```\n  rpcauth=user1:4cc74397d6e9972e5ee7671fd241$11849357f26a5be7809c68a032bc2b16ab5dcf6348ef3ed1cf30dae47b8bcc71\n  rpcauth=user2:181b4a25317bff60f3749adee7d6bca0$d9c331474f1322975fa170a2ffbcb176ba11644211746b27c1d317f265dd4ada\n  rpcauth=user3:a6c8a511b53b1edcf69c36984985e$13cfba0e626db19061c9d61fa58e712d0319c11db97ad845fa84517f454f6675\n  rpcwhitelist=user1:getnetworkinfo\n  rpcwhitelist=user2:getnetworkinfo,getwalletinfo, getbestblockhash\n  rpcwhitelistdefault=0\n  ```\n\n  Now user1 can only call getnetworkinfo, user2 can only call getnetworkinfo or getwalletinfo, while user3 can still call all RPCs.\n\n  If any rpcwhitelist is set, act as if all users are subject to whitelists unless rpcwhitelistdefault is set to 0. If rpcwhitelistdefault is set to 1 and no rpcwhitelist is set, act as if all users are subject to whitelists.\n\n  Review Request\n  =====\n  In addition to normal review, would love specific review from someone working on LN (e.g., @ roasbeef) and someone working on an infrastructure team at an exchange (e.g., @ jimpo) to check that this works well with their system.\n\n  Notes\n  =====\n\n  The rpc list is spelling sensitive -- whitespace is stripped though. Spelling errors fail towards the RPC call being blocked, which is safer.\n\n  It was unclear to me if HTTPReq_JSONRPC is the best function to patch this functionality into, or if it would be better to place it in exec or somewhere else.\n\n  It was also unclear to me if it would be preferred to cache the whitelists on startup or parse them on every RPC as is done with multiUserAuthorized. I opted for the cached approach as I thought it was a bit cleaner.\n\n  Future Work\n  =====\n\n  In a future PR, I would like to add an inheritance scheme. This seemed more controversial so I didn't want to include that here. Inheritance semantics are tricky, but it would also make these whitelists easier to read.\n\n  It also might be good to add a `getrpcwhitelist` command to facilitate permission discovery.\n\n  Tests\n  =====\n  Thanks to @ emilengler for adding tests for this feature. The tests cover all cases except for where `rpcwhitelistdefault=1` is used, given difficulties around testing with the current test framework.\n\nACKs for top commit:\n  laanwj:\n    ACK 2081442c421cc4376e5d7839f68fbe7630e89103\n\nTree-SHA512: 0dc1ac6a6f2f4b0be9c9054d495dd17752fe7b3589aeab2c6ac4e1f91cf4e7e355deedcb5d76d707cbb5a949c2f989c871b74d6bf129351f429569a701adbcbf\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "995b6c83e1ae23bb32bf1b9d19635036b92f54ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/995b6c83e1ae23bb32bf1b9d19635036b92f54ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/995b6c83e1ae23bb32bf1b9d19635036b92f54ef"
      },
      {
        "sha": "2081442c421cc4376e5d7839f68fbe7630e89103",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2081442c421cc4376e5d7839f68fbe7630e89103",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2081442c421cc4376e5d7839f68fbe7630e89103"
      }
    ],
    "stats": {
      "total": 165,
      "additions": 162,
      "deletions": 3
    },
    "files": [
      {
        "sha": "77e09bd5c7d53de9a48a21b34516c11b70043976",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 3,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a",
        "patch": "@@ -15,8 +15,13 @@\n #include <util/translation.h>\n #include <walletinitinterface.h>\n \n+#include <algorithm>\n+#include <iterator>\n+#include <map>\n #include <memory>\n #include <stdio.h>\n+#include <set>\n+#include <string>\n \n #include <boost/algorithm/string.hpp> // boost::trim\n \n@@ -64,6 +69,9 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n static std::string strRPCUserColonPass;\n /* Stored RPC timer interface (for unregistration) */\n static std::unique_ptr<HTTPRPCTimerInterface> httpRPCTimerInterface;\n+/* RPC Auth Whitelist */\n+static std::map<std::string, std::set<std::string>> g_rpc_whitelist;\n+static bool g_rpc_whitelist_default = false;\n \n static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const UniValue& id)\n {\n@@ -183,18 +191,45 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         jreq.URI = req->GetURI();\n \n         std::string strReply;\n+        bool user_has_whitelist = g_rpc_whitelist.count(jreq.authUser);\n+        if (!user_has_whitelist && g_rpc_whitelist_default) {\n+            LogPrintf(\"RPC User %s not allowed to call any methods\\n\", jreq.authUser);\n+            req->WriteReply(HTTP_FORBIDDEN);\n+            return false;\n+\n         // singleton request\n-        if (valRequest.isObject()) {\n+        } else if (valRequest.isObject()) {\n             jreq.parse(valRequest);\n-\n+            if (user_has_whitelist && !g_rpc_whitelist[jreq.authUser].count(jreq.strMethod)) {\n+                LogPrintf(\"RPC User %s not allowed to call method %s\\n\", jreq.authUser, jreq.strMethod);\n+                req->WriteReply(HTTP_FORBIDDEN);\n+                return false;\n+            }\n             UniValue result = tableRPC.execute(jreq);\n \n             // Send reply\n             strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n \n         // array of requests\n-        } else if (valRequest.isArray())\n+        } else if (valRequest.isArray()) {\n+            if (user_has_whitelist) {\n+                for (unsigned int reqIdx = 0; reqIdx < valRequest.size(); reqIdx++) {\n+                    if (!valRequest[reqIdx].isObject()) {\n+                        throw JSONRPCError(RPC_INVALID_REQUEST, \"Invalid Request object\");\n+                    } else {\n+                        const UniValue& request = valRequest[reqIdx].get_obj();\n+                        // Parse method\n+                        std::string strMethod = find_value(request, \"method\").get_str();\n+                        if (!g_rpc_whitelist[jreq.authUser].count(strMethod)) {\n+                            LogPrintf(\"RPC User %s not allowed to call method %s\\n\", jreq.authUser, strMethod);\n+                            req->WriteReply(HTTP_FORBIDDEN);\n+                            return false;\n+                        }\n+                    }\n+                }\n+            }\n             strReply = JSONRPCExecBatch(jreq, valRequest.get_array());\n+        }\n         else\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n \n@@ -229,6 +264,27 @@ static bool InitRPCAuthentication()\n     {\n         LogPrintf(\"Using rpcauth authentication.\\n\");\n     }\n+\n+    g_rpc_whitelist_default = gArgs.GetBoolArg(\"-rpcwhitelistdefault\", gArgs.IsArgSet(\"-rpcwhitelist\"));\n+    for (const std::string& strRPCWhitelist : gArgs.GetArgs(\"-rpcwhitelist\")) {\n+        auto pos = strRPCWhitelist.find(':');\n+        std::string strUser = strRPCWhitelist.substr(0, pos);\n+        bool intersect = g_rpc_whitelist.count(strUser);\n+        std::set<std::string>& whitelist = g_rpc_whitelist[strUser];\n+        if (pos != std::string::npos) {\n+            std::string strWhitelist = strRPCWhitelist.substr(pos + 1);\n+            std::set<std::string> new_whitelist;\n+            boost::split(new_whitelist, strWhitelist, boost::is_any_of(\", \"));\n+            if (intersect) {\n+                std::set<std::string> tmp_whitelist;\n+                std::set_intersection(new_whitelist.begin(), new_whitelist.end(),\n+                       whitelist.begin(), whitelist.end(), std::inserter(tmp_whitelist, tmp_whitelist.end()));\n+                new_whitelist = std::move(tmp_whitelist);\n+            }\n+            whitelist = std::move(new_whitelist);\n+        }\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "ab5e3b9342be0d8b2d5f248628b33a404f030bb7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a",
        "patch": "@@ -535,6 +535,8 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_BOOL, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n "
      },
      {
        "sha": "219132410b5256549a9879ac84aa8d8951ded3e9",
        "filename": "test/functional/rpc_whitelist.py",
        "status": "added",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a/test/functional/rpc_whitelist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a/test/functional/rpc_whitelist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_whitelist.py?ref=988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a",
        "patch": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+A test for RPC users with restricted permissions\n+\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+import os\n+from test_framework.util import (\n+    get_datadir_path,\n+    assert_equal,\n+    str_to_b64str\n+)\n+import http.client\n+import urllib.parse\n+\n+def rpccall(node, user, method):\n+    url = urllib.parse.urlparse(node.url)\n+    headers = {\"Authorization\": \"Basic \" + str_to_b64str('{}:{}'.format(user[0], user[3]))}\n+    conn = http.client.HTTPConnection(url.hostname, url.port)\n+    conn.connect()\n+    conn.request('POST', '/', '{\"method\": \"' + method + '\"}', headers)\n+    resp = conn.getresponse()\n+    conn.close()\n+    return resp\n+\n+\n+class RPCWhitelistTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_chain(self):\n+        super().setup_chain()\n+        # 0 => Username\n+        # 1 => Password (Hashed)\n+        # 2 => Permissions\n+        # 3 => Password Plaintext\n+        self.users = [\n+            [\"user1\", \"50358aa884c841648e0700b073c32b2e$b73e95fff0748cc0b517859d2ca47d9bac1aa78231f3e48fa9222b612bd2083e\", \"getbestblockhash,getblockcount,\", \"12345\"],\n+            [\"user2\", \"8650ba41296f62092377a38547f361de$4620db7ba063ef4e2f7249853e9f3c5c3592a9619a759e3e6f1c63f2e22f1d21\", \"getblockcount\", \"54321\"]\n+        ]\n+        # For exceptions\n+        self.strange_users = [\n+            # Test empty\n+            [\"strangedude\", \"62d67dffec03836edd698314f1b2be62$c2fb4be29bb0e3646298661123cf2d8629640979cabc268ef05ea613ab54068d\", \":\", \"s7R4nG3R7H1nGZ\"],\n+            [\"strangedude2\", \"575c012c7fe4b1e83b9d809412da3ef7$09f448d0acfc19924dd62ecb96004d3c2d4b91f471030dfe43c6ea64a8f658c1\", \"\", \"s7R4nG3R7H1nGZ\"],\n+            # Test trailing comma\n+            [\"strangedude3\", \"23189c561b5975a56f4cf94030495d61$3a2f6aac26351e2257428550a553c4c1979594e36675bbd3db692442387728c0\", \":getblockcount,\", \"s7R4nG3R7H1nGZ\"],\n+            # Test overwrite\n+            [\"strangedude4\", \"990c895760a70df83949e8278665e19a$8f0906f20431ff24cb9e7f5b5041e4943bdf2a5c02a19ef4960dcf45e72cde1c\", \":getblockcount, getbestblockhash\", \"s7R4nG3R7H1nGZ\"],\n+            [\"strangedude4\", \"990c895760a70df83949e8278665e19a$8f0906f20431ff24cb9e7f5b5041e4943bdf2a5c02a19ef4960dcf45e72cde1c\", \":getblockcount\", \"s7R4nG3R7H1nGZ\"],\n+            # Testing the same permission twice\n+            [\"strangedude5\", \"d12c6e962d47a454f962eb41225e6ec8$2dd39635b155536d3c1a2e95d05feff87d5ba55f2d5ff975e6e997a836b717c9\", \":getblockcount,getblockcount\", \"s7R4nG3R7H1nGZ\"]\n+        ]\n+        # These commands shouldn't be allowed for any user to test failures\n+        self.never_allowed = [\"getnetworkinfo\"]\n+        with open(os.path.join(get_datadir_path(self.options.tmpdir, 0), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+            f.write(\"\\nrpcwhitelistdefault=0\\n\")\n+            for user in self.users:\n+                f.write(\"rpcauth=\" + user[0] + \":\" + user[1] + \"\\n\")\n+                f.write(\"rpcwhitelist=\" + user[0] + \":\" + user[2] + \"\\n\")\n+            # Special cases\n+            for strangedude in self.strange_users:\n+                f.write(\"rpcauth=\" + strangedude[0] + \":\" + strangedude[1] + \"\\n\")\n+                f.write(\"rpcwhitelist=\" + strangedude[0] + strangedude[2] + \"\\n\")\n+\n+\n+    def run_test(self):\n+        for user in self.users:\n+            permissions = user[2].replace(\" \", \"\").split(\",\")\n+            # Pop all empty items\n+            i = 0\n+            while i < len(permissions):\n+                if permissions[i] == '':\n+                    permissions.pop(i)\n+\n+                i += 1\n+            for permission in permissions:\n+                self.log.info(\"[\" + user[0] + \"]: Testing a permitted permission (\" + permission + \")\")\n+                assert_equal(200, rpccall(self.nodes[0], user, permission).status)\n+            for permission in self.never_allowed:\n+                self.log.info(\"[\" + user[0] + \"]: Testing a non permitted permission (\" + permission + \")\")\n+                assert_equal(403, rpccall(self.nodes[0], user, permission).status)\n+        # Now test the strange users\n+        for permission in self.never_allowed:\n+            self.log.info(\"Strange test 1\")\n+            assert_equal(403, rpccall(self.nodes[0], self.strange_users[0], permission).status)\n+        for permission in self.never_allowed:\n+            self.log.info(\"Strange test 2\")\n+            assert_equal(403, rpccall(self.nodes[0], self.strange_users[1], permission).status)\n+        self.log.info(\"Strange test 3\")\n+        assert_equal(200, rpccall(self.nodes[0], self.strange_users[2], \"getblockcount\").status)\n+        self.log.info(\"Strange test 4\")\n+        assert_equal(403, rpccall(self.nodes[0], self.strange_users[3], \"getbestblockhash\").status)\n+        self.log.info(\"Strange test 5\")\n+        assert_equal(200, rpccall(self.nodes[0], self.strange_users[4], \"getblockcount\").status)\n+\n+if __name__ == \"__main__\":\n+    RPCWhitelistTest().main()"
      },
      {
        "sha": "110733c529f5c95778fea8841a1d5bb0edb0bee0",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a",
        "patch": "@@ -136,6 +136,7 @@\n     'interface_rpc.py',\n     'rpc_psbt.py',\n     'rpc_users.py',\n+    'rpc_whitelist.py',\n     'feature_proxy.py',\n     'rpc_signrawtransaction.py',\n     'wallet_groups.py',"
      }
    ]
  },
  {
    "sha": "ccdda96804088ec3ad01aec5ab0ff8e9b05b161b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2RkYTk2ODA0MDg4ZWMzYWQwMWFlYzVhYjBmZjhlOWIwNWIxNjFi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-05T19:11:50Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-13T13:30:26Z"
      },
      "message": "depends: skip building qt proxies",
      "tree": {
        "sha": "f44529eebe7dbf5a4dc3bdf4f0ca6bd848b28196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f44529eebe7dbf5a4dc3bdf4f0ca6bd848b28196"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccdda96804088ec3ad01aec5ab0ff8e9b05b161b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3zknIACgkQLuufXMCV\nJsG43g//WaYenIfU+RTh0tTu3H5t5Iz9J232zIOyH0bYwnE5w8NEgiXs2Jng0XyE\nR7IXO7DkJkJbT2RV4snY0quS36Y2OPZl5zP6uQG3pKF8idDgLL+X+HigijR5kyBr\nmQno53ai7m22q5eyU+8TccXO9QXu4W5qaaUWR07sDKw/861CxiWnNJV11IS56MsI\ngxo3xmsMMcCYiQnKRp716a7EMbEUT4vDtcjhscdE0hp9THWbuPPwH2VnsZYtpBvs\nYJZzwEd44nfCWnDZ/nNNT6T08GYExNAnLG7Xv62aYOD+ZGY3O3wzF23totnSR2Px\n1LJ8HvQXycvKrIACuRo3l9MKyCEn1LnnJlnxUYDVoGEDcSL2sSIzDz/uJ1x/TYcb\nPYWNXznnPRBk4fALg+g0k6TT4giQ1fwqfjhCiXqkCpOYRBErtXfAcfdVbUAGg76x\n0Uycy68CkS0lefbxqmd2YQfkAuffZHKDFgJfxetNdnerKhAOxaCBv9OkydDQqYnc\npzAST6Jj9KHpsQp5xzvDpGMLoKyamMKWm6fnzglP9UrPOy9H3OtM5Z1EZpkCEGJL\nELwnFmnlrgvDoLOizjP9vbRFIDtGnzygWSPMULaoJ0YugxO9OnQZLc3Q5ywywLWO\noHKqWLn8ZYe1u7NAx0yZ0NlJ845ik3rpGXX0eKR3jaFV8hi6ufw=\n=+SnY\n-----END PGP SIGNATURE-----",
        "payload": "tree f44529eebe7dbf5a4dc3bdf4f0ca6bd848b28196\nparent 988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a\nauthor fanquake <fanquake@gmail.com> 1575573110 -0500\ncommitter fanquake <fanquake@gmail.com> 1576243826 -0500\n\ndepends: skip building qt proxies\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccdda96804088ec3ad01aec5ab0ff8e9b05b161b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccdda96804088ec3ad01aec5ab0ff8e9b05b161b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccdda96804088ec3ad01aec5ab0ff8e9b05b161b/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6e1848ee26d004a6b66aaf3c74da5c2a3c37618b",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccdda96804088ec3ad01aec5ab0ff8e9b05b161b/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccdda96804088ec3ad01aec5ab0ff8e9b05b161b/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=ccdda96804088ec3ad01aec5ab0ff8e9b05b161b",
        "patch": "@@ -39,12 +39,14 @@ $(package)_config_opts += -no-iconv\n $(package)_config_opts += -no-kms\n $(package)_config_opts += -no-linuxfb\n $(package)_config_opts += -no-libjpeg\n+$(package)_config_opts += -no-libproxy\n $(package)_config_opts += -no-libudev\n $(package)_config_opts += -no-mtdev\n $(package)_config_opts += -no-openssl\n $(package)_config_opts += -no-openvg\n $(package)_config_opts += -no-reduce-relocations\n $(package)_config_opts += -no-qml-debug\n+$(package)_config_opts += -no-sctp\n $(package)_config_opts += -no-securetransport\n $(package)_config_opts += -no-sql-db2\n $(package)_config_opts += -no-sql-ibase\n@@ -55,6 +57,7 @@ $(package)_config_opts += -no-sql-odbc\n $(package)_config_opts += -no-sql-psql\n $(package)_config_opts += -no-sql-sqlite\n $(package)_config_opts += -no-sql-sqlite2\n+$(package)_config_opts += -no-system-proxies\n $(package)_config_opts += -no-use-gold-linker\n $(package)_config_opts += -no-xinput2\n $(package)_config_opts += -nomake examples"
      }
    ]
  },
  {
    "sha": "29d56c62b7f206d42f0908819ff2e1926737f988",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWQ1NmM2MmI3ZjIwNmQ0MmYwOTA4ODE5ZmYyZTE5MjY3MzdmOTg4",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-05T19:12:21Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-13T13:30:26Z"
      },
      "message": "depends: -optimized-qmake is now -optimized-tools",
      "tree": {
        "sha": "7480e9e075c26c58c4f4cc4758abdec87d0f5e3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7480e9e075c26c58c4f4cc4758abdec87d0f5e3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29d56c62b7f206d42f0908819ff2e1926737f988",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3zknIACgkQLuufXMCV\nJsFXPw/+M6nYiJrlESzXYIoue94dXKQTwm5hgxudMg/DGlaeeo7LLJzOQ0hRYBea\n7tB8OE95O9bpETcDXxF1svwyUqFiNuIRcrjZLqKBL4BO48tfl16cg9CN/adnKyc5\naugSZMp3wTJSMfZEqttCD5nERGRlXnPTUX+A7Rps3CCREO2fbDkje4XZUAC6V1rG\nPYTtPLUzHMUws0KDxEGdcuBlIfXuwYKuGj1SRe2xdmphbYt8bx0uvi9Vh1JxjdNJ\ntySaHjDOa+NUTQPmKeV7cN3dveg0yE8CjtVg+F2UCA9H9VPfEo/Rvahou/llvveV\nxl89vKjxWQRtKI78ZkZQyYjwpSqIX5HguLBeCC0xtELdIkldvXabUvP3Nvw3Zoxj\nO0IW+frU579KYGZrc5CNxk8SFtG/kMLa0cxO6c2bGnA4w1iwBZCovad9D5AdqnZF\n/xjtNX5BYjl8hyFn4CBGZ8JiR3XpqeXl45BCS+18zomj/xooZBZwrixnPwQKz445\n7IEDTatgbKO4pEesT7dFA+nuZH1knv6tLhdF2rAi13zjOs2i4ZyHrFCiIGuOf/kz\n/t5o8lCTXnoQjRLuWCkbZNT22V7HAyGhuSxbEMh6vuSMtL7EyzVXu3XKwXv4Ev6X\n8Z8m+jmMhojJ2294DltK1g53bjGx1fwtEvQR4FdiT+GYmQx1LHQ=\n=Ec2F\n-----END PGP SIGNATURE-----",
        "payload": "tree 7480e9e075c26c58c4f4cc4758abdec87d0f5e3a\nparent ccdda96804088ec3ad01aec5ab0ff8e9b05b161b\nauthor fanquake <fanquake@gmail.com> 1575573141 -0500\ncommitter fanquake <fanquake@gmail.com> 1576243826 -0500\n\ndepends: -optimized-qmake is now -optimized-tools\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29d56c62b7f206d42f0908819ff2e1926737f988",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29d56c62b7f206d42f0908819ff2e1926737f988",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29d56c62b7f206d42f0908819ff2e1926737f988/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccdda96804088ec3ad01aec5ab0ff8e9b05b161b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccdda96804088ec3ad01aec5ab0ff8e9b05b161b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccdda96804088ec3ad01aec5ab0ff8e9b05b161b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1def000f7a73d9febb5745c7c2823b35604db17e",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29d56c62b7f206d42f0908819ff2e1926737f988/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29d56c62b7f206d42f0908819ff2e1926737f988/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=29d56c62b7f206d42f0908819ff2e1926737f988",
        "patch": "@@ -63,7 +63,7 @@ $(package)_config_opts += -no-xinput2\n $(package)_config_opts += -nomake examples\n $(package)_config_opts += -nomake tests\n $(package)_config_opts += -opensource\n-$(package)_config_opts += -optimized-qmake\n+$(package)_config_opts += -optimized-tools\n $(package)_config_opts += -pch\n $(package)_config_opts += -pkg-config\n $(package)_config_opts += -prefix $(host_prefix)"
      }
    ]
  },
  {
    "sha": "244501fc85a1319857efb227093c0e71c1d5a01e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDQ1MDFmYzg1YTEzMTk4NTdlZmIyMjcwOTNjMGU3MWMxZDVhMDFl",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-08T15:28:57Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-13T13:30:26Z"
      },
      "message": "depends: disable unused qt networking features",
      "tree": {
        "sha": "55414de9c98c953d1b38d061ba4ec80f02528cf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55414de9c98c953d1b38d061ba4ec80f02528cf3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/244501fc85a1319857efb227093c0e71c1d5a01e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3zknIACgkQLuufXMCV\nJsG1yQ//TYaRTlbKBg/izli6r4tG+ZmA5vOB1UmV6EtmEgQv2ao7+Od1hwfGJBhB\nCyZQkZreeQGowv+eZQNdDq4hC6IHBIgbM9tD1sa1ynai3RwN9GRUvoPrKIQNSKps\nIWBa9PHrPFdqlpSNQ7XUZ8aPki+aG29z/aBYign/VLF/ueeQrQrwF0p19z799ed+\nTU1jAroKlKGoUka24kO3CJVVfNmjLi/sQVctWU4Gkxl9TkMwT7k2ahEcLXeihWim\nvKm0whbUJEibRiCkvbKoIgmLlxamDbwiMLoRMKEdyb3KRJuUxjVq2//E882L08I9\nf1k1dLNC03ZhDQeQapN12KE9SWBZj2QHc3kt17zNWzq5U0FGqqMRN6P92YsqfBPM\na/O6Qc4VhYUU4pA8vLdY6Xu9hdgchRz+F6Vmqpq4vS3Xi7YfQ/YYDhbTH/iORpO+\ndkxv9hp9kaj5LeyOkU9GAQY1LUMTJ2ht/4L0AwRC72nprqfcw3m5dlivwdxQUDDr\nTxCOzuiTKnF+m1bFzGh45fsnFmydLjjk7E5N4N/2m8KWMbmyfZm3ug0xOq6bN3as\nLqTcQA7E3oflO/r6molSrWyf+VJv+4vCgtLEcQqTsYNkq6nFP62l+yDWXeWoCPla\n5neiwKbLYYibAO1/tx78oBvPy8uwd0fPqjCHS5k+jxj7FvPBes0=\n=u4ky\n-----END PGP SIGNATURE-----",
        "payload": "tree 55414de9c98c953d1b38d061ba4ec80f02528cf3\nparent 29d56c62b7f206d42f0908819ff2e1926737f988\nauthor fanquake <fanquake@gmail.com> 1575818937 -0500\ncommitter fanquake <fanquake@gmail.com> 1576243826 -0500\n\ndepends: disable unused qt networking features\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/244501fc85a1319857efb227093c0e71c1d5a01e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/244501fc85a1319857efb227093c0e71c1d5a01e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/244501fc85a1319857efb227093c0e71c1d5a01e/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29d56c62b7f206d42f0908819ff2e1926737f988",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29d56c62b7f206d42f0908819ff2e1926737f988",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29d56c62b7f206d42f0908819ff2e1926737f988"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "efa76965d5af5f894cb34eb6f0a95f695324446b",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/244501fc85a1319857efb227093c0e71c1d5a01e/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/244501fc85a1319857efb227093c0e71c1d5a01e/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=244501fc85a1319857efb227093c0e71c1d5a01e",
        "patch": "@@ -82,16 +82,20 @@ $(package)_config_opts += -no-feature-dial\n $(package)_config_opts += -no-feature-filesystemwatcher\n $(package)_config_opts += -no-feature-fontcombobox\n $(package)_config_opts += -no-feature-ftp\n+$(package)_config_opts += -no-feature-http\n $(package)_config_opts += -no-feature-image_heuristic_mask\n $(package)_config_opts += -no-feature-keysequenceedit\n $(package)_config_opts += -no-feature-lcdnumber\n+$(package)_config_opts += -no-feature-networkdiskcache\n+$(package)_config_opts += -no-feature-networkproxy\n $(package)_config_opts += -no-feature-pdf\n $(package)_config_opts += -no-feature-printdialog\n $(package)_config_opts += -no-feature-printer\n $(package)_config_opts += -no-feature-printpreviewdialog\n $(package)_config_opts += -no-feature-printpreviewwidget\n $(package)_config_opts += -no-feature-regularexpression\n $(package)_config_opts += -no-feature-sessionmanager\n+$(package)_config_opts += -no-feature-socks5\n $(package)_config_opts += -no-feature-sql\n $(package)_config_opts += -no-feature-statemachine\n $(package)_config_opts += -no-feature-syntaxhighlighter"
      }
    ]
  },
  {
    "sha": "ddecb671f0a41eaa8e6198f7e55172c1256bd978",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGVjYjY3MWYwYTQxZWFhOGU2MTk4ZjdlNTUxNzJjMTI1NmJkOTc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-13T14:39:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-13T14:39:32Z"
      },
      "message": "Merge #17654: Unbreak build with Boost 1.72.0\n\na64e97dd476bda7c7981979d045b0d06d6f7ce47 wallet: unbreak with boost 1.72 (Jan Beich)\n\nPull request description:\n\n  Regressed by https://github.com/boostorg/filesystem/commit/9a14c37d6f95. See [error log](http://package22.nyi.freebsd.org/data/113amd64-default-PR241449/2019-11-27_11h48m22s/logs/bitcoin-0.19.0.1.log).\n  https://github.com/bitcoin/bitcoin/blob/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/fs.h#L14\n\nACKs for top commit:\n  MarcoFalke:\n    ACK a64e97dd476bda7c7981979d045b0d06d6f7ce47\n\nTree-SHA512: 0aad2b8ec211bb81021a2f8cd2059364f949be716ebaf154dd97d5c2f7119f42553892e90e6c375018ff2155b996690c7520374762259778de88014cb531ad3b",
      "tree": {
        "sha": "1e9fc4a10ec452172531492599c146235fa25160",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e9fc4a10ec452172531492599c146235fa25160"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddecb671f0a41eaa8e6198f7e55172c1256bd978",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl3zoqQACgkQHkrtYphs\n0l2TAQf/UwuAYtCs1CR66+uXAzBc400nr2axa/Pa+NbIIBk/0c2zlc88Be7urXIq\neMIvmmG3bEMSMIIOSneXxBfXxNDslDb90Xkxj+sJzlep7zQC0iCdG6ivsZnYGGOz\ncfSZ90VzmY5JY28MtMvrSfZ9t9OWE0EYtwNnUTFIPg5G6ge9vF6PxPrgbRou7lg7\nGe10s8d6QvtNQz+j2Lx7/FTAlirtq8+/T428vCZLFN+xpKYZX4a91EMSugOTpPUP\nV13c+EkRcnNZNaSLEo5oQsZr/eP7/+3UJOpdN/TcDKj6UnqVPlsBrt7f3cppW+l8\nthNXjnmoLBqf8zV8wZj3NNNCMJBA1A==\n=lUMx\n-----END PGP SIGNATURE-----",
        "payload": "tree 1e9fc4a10ec452172531492599c146235fa25160\nparent 988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a\nparent a64e97dd476bda7c7981979d045b0d06d6f7ce47\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1576247951 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1576247972 +0100\n\nMerge #17654: Unbreak build with Boost 1.72.0\n\na64e97dd476bda7c7981979d045b0d06d6f7ce47 wallet: unbreak with boost 1.72 (Jan Beich)\n\nPull request description:\n\n  Regressed by https://github.com/boostorg/filesystem/commit/9a14c37d6f95. See [error log](http://package22.nyi.freebsd.org/data/113amd64-default-PR241449/2019-11-27_11h48m22s/logs/bitcoin-0.19.0.1.log).\n  https://github.com/bitcoin/bitcoin/blob/35eda631ed3bd23d4a41761a85a96f925d4a6337/src/fs.h#L14\n\nACKs for top commit:\n  MarcoFalke:\n    ACK a64e97dd476bda7c7981979d045b0d06d6f7ce47\n\nTree-SHA512: 0aad2b8ec211bb81021a2f8cd2059364f949be716ebaf154dd97d5c2f7119f42553892e90e6c375018ff2155b996690c7520374762259778de88014cb531ad3b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddecb671f0a41eaa8e6198f7e55172c1256bd978",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddecb671f0a41eaa8e6198f7e55172c1256bd978",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddecb671f0a41eaa8e6198f7e55172c1256bd978/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a"
      },
      {
        "sha": "a64e97dd476bda7c7981979d045b0d06d6f7ce47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a64e97dd476bda7c7981979d045b0d06d6f7ce47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a64e97dd476bda7c7981979d045b0d06d6f7ce47"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8af81f173bdfbec163256ca343d33809a92424ee",
        "filename": "src/fs.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddecb671f0a41eaa8e6198f7e55172c1256bd978/src/fs.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddecb671f0a41eaa8e6198f7e55172c1256bd978/src/fs.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.h?ref=ddecb671f0a41eaa8e6198f7e55172c1256bd978",
        "patch": "@@ -11,7 +11,6 @@\n #include <ext/stdio_filebuf.h>\n #endif\n \n-#define BOOST_FILESYSTEM_NO_DEPRECATED\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n "
      }
    ]
  },
  {
    "sha": "a595011f5a3c048b2e3694dfe355aba60cd994e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTk1MDExZjVhM2MwNDhiMmUzNjk0ZGZlMzU1YWJhNjBjZDk5NGU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-15T12:06:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-15T12:07:07Z"
      },
      "message": "Merge #17728: rpc: require second argument only for scantxoutset start action\n\n7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b rpc: require second argument only for scantxoutset start action (Andrew Chow)\n\nPull request description:\n\n  It was reported on [IRC](http://www.erisian.com.au/bitcoin-core-dev/log-2019-12-11.html#l-377) that `scantxoutset`'s API was broken in 0.19.0:\n\n  ```\n  <belcher> i think scantxoutset may have been broken in bitcoin core 0.19 ? regardless of what parameters i run it with (e.g. \"scantxoutset abort\", \"scantxoutset status\") it just returns the help doc, according to the release notes the only change was https://github.com/bitcoin/bitcoin/pull/16285/files but i dont see anything that wouldve broken it, it works fine in 0.18\n  <belcher> im on regtest, in case its important\n  <harding> I can confirm `scantxoutset abort` returns the help doc on latest master.  Waiting for 0.18.1 to start now to attempt to reproduce there.\n  <harding> It looks like it's expecting a second parameter (even though that doesn't make sense with \"abort\").\n  <jonatack> Same for me as well\n  <harding> Can also confirm that `scantxoutset abort` returns the expected result on 0.18.1.\n  ```\n\n  As noted in the conversation, previously, the second argument of `scanobjects` is only required for the `start` action. `Stop` and `abort` actions did not and could work without them.\n\n  It appears that this was broken by #16240 which enforced the size of the arguments to match the listed required arguments.\n\n  To fix this issue, this PR makes the `scanobjects` argument an optional argument. Then only in the `start` action do we check whether the `scanobjects` argument is there and throw an informative error about that. Also a test is added for this case.\n\nACKs for top commit:\n  laanwj:\n    ACK 7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b\n  promag:\n    ACK 7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b.\n\nTree-SHA512: 828bdfe47f4fffa5d00a2cf88db6cea4a2714d9c49276841ca5cbdd1603b87bb6862147b86edcf36d7b40314ddb80b1a07fd399faf288572c55cc788c5cf9526",
      "tree": {
        "sha": "53777b322d815c4b00f8fa00feb8b38cd0419400",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53777b322d815c4b00f8fa00feb8b38cd0419400"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a595011f5a3c048b2e3694dfe355aba60cd994e8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl32IesACgkQHkrtYphs\n0l17nQf/Sz0AdXa7sQ3c715+9d5+yQ0Hf4RfTMdkdY66jfImqcab5h+o6RhEA84q\ng0KUhCtaLNG6Esd9QK8jAxgu+L3LXnLAOY6hvv70MtAkB5zEuY+0RYufTt37olJk\nipQMtaX8q6/Cgvmmgrx6v3I+n8JsuoMM9Wd2z0yX8RFoMyr4vYBBVZe4lLn5YBYX\nILkA8PkqhJIIpmL8aAM6DzHZ7BWf3FwmA6eJM+6vTbLSal2cKKe4x7MdTpHCNQdC\nrU//PU0mUdB14dakGHBToH5hAZqUv35eN5Et0MsImfuJuRTvvlDNYgEqhTnZYwSy\nws+iK7Lq1QkbOYn8UA+Q4cE7nzCGWA==\n=wwxa\n-----END PGP SIGNATURE-----",
        "payload": "tree 53777b322d815c4b00f8fa00feb8b38cd0419400\nparent ddecb671f0a41eaa8e6198f7e55172c1256bd978\nparent 7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1576411619 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1576411627 +0100\n\nMerge #17728: rpc: require second argument only for scantxoutset start action\n\n7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b rpc: require second argument only for scantxoutset start action (Andrew Chow)\n\nPull request description:\n\n  It was reported on [IRC](http://www.erisian.com.au/bitcoin-core-dev/log-2019-12-11.html#l-377) that `scantxoutset`'s API was broken in 0.19.0:\n\n  ```\n  <belcher> i think scantxoutset may have been broken in bitcoin core 0.19 ? regardless of what parameters i run it with (e.g. \"scantxoutset abort\", \"scantxoutset status\") it just returns the help doc, according to the release notes the only change was https://github.com/bitcoin/bitcoin/pull/16285/files but i dont see anything that wouldve broken it, it works fine in 0.18\n  <belcher> im on regtest, in case its important\n  <harding> I can confirm `scantxoutset abort` returns the help doc on latest master.  Waiting for 0.18.1 to start now to attempt to reproduce there.\n  <harding> It looks like it's expecting a second parameter (even though that doesn't make sense with \"abort\").\n  <jonatack> Same for me as well\n  <harding> Can also confirm that `scantxoutset abort` returns the expected result on 0.18.1.\n  ```\n\n  As noted in the conversation, previously, the second argument of `scanobjects` is only required for the `start` action. `Stop` and `abort` actions did not and could work without them.\n\n  It appears that this was broken by #16240 which enforced the size of the arguments to match the listed required arguments.\n\n  To fix this issue, this PR makes the `scanobjects` argument an optional argument. Then only in the `start` action do we check whether the `scanobjects` argument is there and throw an informative error about that. Also a test is added for this case.\n\nACKs for top commit:\n  laanwj:\n    ACK 7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b\n  promag:\n    ACK 7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b.\n\nTree-SHA512: 828bdfe47f4fffa5d00a2cf88db6cea4a2714d9c49276841ca5cbdd1603b87bb6862147b86edcf36d7b40314ddb80b1a07fd399faf288572c55cc788c5cf9526\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a595011f5a3c048b2e3694dfe355aba60cd994e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a595011f5a3c048b2e3694dfe355aba60cd994e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a595011f5a3c048b2e3694dfe355aba60cd994e8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddecb671f0a41eaa8e6198f7e55172c1256bd978",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddecb671f0a41eaa8e6198f7e55172c1256bd978",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddecb671f0a41eaa8e6198f7e55172c1256bd978"
      },
      {
        "sha": "7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d263571bee8c36fbe3c854b69c6f31cf1ee3b9b"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "44f5326b3c2a4f209a4e7170a3493148da6566f9",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a595011f5a3c048b2e3694dfe355aba60cd994e8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a595011f5a3c048b2e3694dfe355aba60cd994e8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=a595011f5a3c048b2e3694dfe355aba60cd994e8",
        "patch": "@@ -2055,7 +2055,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             \"                                      \\\"start\\\" for starting a scan\\n\"\n             \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n             \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n-                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Array of scan objects\\n\"\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects. Required for \\\"start\\\" action\\n\"\n             \"                                  Every scan object is either a string descriptor or an object:\",\n                         {\n                             {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n@@ -2115,6 +2115,11 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n         if (!reserver.reserve()) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n         }\n+\n+        if (request.params.size() < 2) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"scanobjects argument is required for the start action\");\n+        }\n+\n         std::set<CScript> needles;\n         std::map<CScript, std::string> descriptors;\n         CAmount total_in = 0;"
      },
      {
        "sha": "f31e4f43bd8060a605c293c8be40986523813e41",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a595011f5a3c048b2e3694dfe355aba60cd994e8/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a595011f5a3c048b2e3694dfe355aba60cd994e8/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=a595011f5a3c048b2e3694dfe355aba60cd994e8",
        "patch": "@@ -116,5 +116,12 @@ def run_test(self):\n         assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"])), [\"pkh([0c5f9a1e/1/1/0]03e1c5b6e650966971d7e71ef2674f80222752740fc1dfd63bbbd220d2da9bd0fb)#cxmct4w8\"])\n         assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1500}])), ['pkh([0c5f9a1e/1/1/0]03e1c5b6e650966971d7e71ef2674f80222752740fc1dfd63bbbd220d2da9bd0fb)#cxmct4w8', 'pkh([0c5f9a1e/1/1/1500]03832901c250025da2aebae2bfb38d5c703a57ab66ad477f9c578bfbcd78abca6f)#vchwd07g', 'pkh([0c5f9a1e/1/1/1]030d820fc9e8211c4169be8530efbc632775d8286167afd178caaf1089b77daba7)#z2t3ypsa'])\n \n+        # Check that status and abort don't need second arg\n+        assert_equal(self.nodes[0].scantxoutset(\"status\"), None)\n+        assert_equal(self.nodes[0].scantxoutset(\"abort\"), False)\n+\n+        # Check that second arg is needed for start\n+        assert_raises_rpc_error(-1, \"scanobjects argument is required for the start action\", self.nodes[0].scantxoutset, \"start\")\n+\n if __name__ == '__main__':\n     ScantxoutsetTest().main()"
      }
    ]
  },
  {
    "sha": "869b6314fd180856b6054fff28b5de994252c54c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjliNjMxNGZkMTgwODU2YjYwNTRmZmYyOGI1ZGU5OTQyNTJjNTRj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-12-15T15:34:03Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-12-15T16:23:30Z"
      },
      "message": "[qt] remove unused parameter from getWarnings()",
      "tree": {
        "sha": "2dc02dbf6f347591157f3d6c931841bfe5ad2b04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2dc02dbf6f347591157f3d6c931841bfe5ad2b04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/869b6314fd180856b6054fff28b5de994252c54c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/869b6314fd180856b6054fff28b5de994252c54c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/869b6314fd180856b6054fff28b5de994252c54c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/869b6314fd180856b6054fff28b5de994252c54c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a595011f5a3c048b2e3694dfe355aba60cd994e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a595011f5a3c048b2e3694dfe355aba60cd994e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a595011f5a3c048b2e3694dfe355aba60cd994e8"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "5f769df0e68cb67dd40929336e1caa04a90b9493",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/869b6314fd180856b6054fff28b5de994252c54c/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/869b6314fd180856b6054fff28b5de994252c54c/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=869b6314fd180856b6054fff28b5de994252c54c",
        "patch": "@@ -68,7 +68,7 @@ class NodeImpl : public Node\n     std::string getNetwork() override { return Params().NetworkIDString(); }\n     void initLogging() override { InitLogging(); }\n     void initParameterInteraction() override { InitParameterInteraction(); }\n-    std::string getWarnings(const std::string& type) override { return GetWarnings(type); }\n+    std::string getWarnings() override { return GetWarnings(\"gui\"); }\n     uint32_t getLogCategories() override { return LogInstance().GetCategoryMask(); }\n     bool baseInitialize() override\n     {"
      },
      {
        "sha": "6bc4668bebd68148914456c26ce965a0279b33cf",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/869b6314fd180856b6054fff28b5de994252c54c/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/869b6314fd180856b6054fff28b5de994252c54c/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=869b6314fd180856b6054fff28b5de994252c54c",
        "patch": "@@ -78,7 +78,7 @@ class Node\n     virtual void initParameterInteraction() = 0;\n \n     //! Get warnings.\n-    virtual std::string getWarnings(const std::string& type) = 0;\n+    virtual std::string getWarnings() = 0;\n \n     // Get log flags.\n     virtual uint32_t getLogCategories() = 0;"
      },
      {
        "sha": "0021c3dbc798683ae33c37f69c90759ec32b6d91",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/869b6314fd180856b6054fff28b5de994252c54c/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/869b6314fd180856b6054fff28b5de994252c54c/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=869b6314fd180856b6054fff28b5de994252c54c",
        "patch": "@@ -135,7 +135,7 @@ BitcoinCore::BitcoinCore(interfaces::Node& node) :\n void BitcoinCore::handleRunawayException(const std::exception *e)\n {\n     PrintExceptionContinue(e, \"Runaway exception\");\n-    Q_EMIT runawayException(QString::fromStdString(m_node.getWarnings(\"gui\")));\n+    Q_EMIT runawayException(QString::fromStdString(m_node.getWarnings()));\n }\n \n void BitcoinCore::initialize()\n@@ -589,10 +589,10 @@ int GuiMain(int argc, char* argv[])\n         }\n     } catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"Runaway exception\");\n-        app.handleRunawayException(QString::fromStdString(node->getWarnings(\"gui\")));\n+        app.handleRunawayException(QString::fromStdString(node->getWarnings()));\n     } catch (...) {\n         PrintExceptionContinue(nullptr, \"Runaway exception\");\n-        app.handleRunawayException(QString::fromStdString(node->getWarnings(\"gui\")));\n+        app.handleRunawayException(QString::fromStdString(node->getWarnings()));\n     }\n     return rv;\n }"
      },
      {
        "sha": "b84587a99b9b3b4b0a4c561a1d40347b16352f69",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/869b6314fd180856b6054fff28b5de994252c54c/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/869b6314fd180856b6054fff28b5de994252c54c/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=869b6314fd180856b6054fff28b5de994252c54c",
        "patch": "@@ -134,7 +134,7 @@ enum BlockSource ClientModel::getBlockSource() const\n \n QString ClientModel::getStatusBarWarnings() const\n {\n-    return QString::fromStdString(m_node.getWarnings(\"gui\"));\n+    return QString::fromStdString(m_node.getWarnings());\n }\n \n OptionsModel *ClientModel::getOptionsModel()"
      }
    ]
  },
  {
    "sha": "492c6dc1e742a62599dc6d5ba6c3896825b5144f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTJjNmRjMWU3NDJhNjI1OTlkYzZkNWJhNmMzODk2ODI1YjUxNDRm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-12-15T15:44:09Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-12-15T16:24:48Z"
      },
      "message": "util: change GetWarnings parameter to bool\n\nGetWarnings() changes the format of the output warning string based on a\npassed-in string argument that can be set to \"gui\" or \"statusbar\".\nChange the argument to a bool:\n\n- there are only two types of behaviour, so a bool is a more natural\nargument type\n- changing the name to 'verbose' does not set any expectations for the\nhow the calling code will use the returned string (currently,\n'statusbar' is used for RPC warnings, not a status bar)\n- removes some error-handling code for when the passed-in string is not\none of the two strings expected.",
      "tree": {
        "sha": "662494520b876f6da7bbfb85c12ad46de249e92d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/662494520b876f6da7bbfb85c12ad46de249e92d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/492c6dc1e742a62599dc6d5ba6c3896825b5144f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/492c6dc1e742a62599dc6d5ba6c3896825b5144f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/492c6dc1e742a62599dc6d5ba6c3896825b5144f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/492c6dc1e742a62599dc6d5ba6c3896825b5144f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "869b6314fd180856b6054fff28b5de994252c54c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/869b6314fd180856b6054fff28b5de994252c54c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/869b6314fd180856b6054fff28b5de994252c54c"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 23,
      "deletions": 27
    },
    "files": [
      {
        "sha": "c9b820a6ceff70449d7559bebb3d9f9bd43a16ed",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/492c6dc1e742a62599dc6d5ba6c3896825b5144f/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/492c6dc1e742a62599dc6d5ba6c3896825b5144f/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=492c6dc1e742a62599dc6d5ba6c3896825b5144f",
        "patch": "@@ -68,7 +68,7 @@ class NodeImpl : public Node\n     std::string getNetwork() override { return Params().NetworkIDString(); }\n     void initLogging() override { InitLogging(); }\n     void initParameterInteraction() override { InitParameterInteraction(); }\n-    std::string getWarnings() override { return GetWarnings(\"gui\"); }\n+    std::string getWarnings() override { return GetWarnings(true); }\n     uint32_t getLogCategories() override { return LogInstance().GetCategoryMask(); }\n     bool baseInitialize() override\n     {"
      },
      {
        "sha": "1a65cff33238caae8d49517af2aa9d4c7c2567d0",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/492c6dc1e742a62599dc6d5ba6c3896825b5144f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/492c6dc1e742a62599dc6d5ba6c3896825b5144f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=492c6dc1e742a62599dc6d5ba6c3896825b5144f",
        "patch": "@@ -1286,7 +1286,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n     obj.pushKV(\"softforks\",             softforks);\n \n-    obj.pushKV(\"warnings\", GetWarnings(\"statusbar\"));\n+    obj.pushKV(\"warnings\", GetWarnings(false));\n     return obj;\n }\n "
      },
      {
        "sha": "d616445b3113449f4453a92015f643e67bd91da6",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/492c6dc1e742a62599dc6d5ba6c3896825b5144f/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/492c6dc1e742a62599dc6d5ba6c3896825b5144f/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=492c6dc1e742a62599dc6d5ba6c3896825b5144f",
        "patch": "@@ -253,7 +253,7 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n     obj.pushKV(\"networkhashps\",    getnetworkhashps(request));\n     obj.pushKV(\"pooledtx\",         (uint64_t)mempool.size());\n     obj.pushKV(\"chain\",            Params().NetworkIDString());\n-    obj.pushKV(\"warnings\",         GetWarnings(\"statusbar\"));\n+    obj.pushKV(\"warnings\",         GetWarnings(false));\n     return obj;\n }\n "
      },
      {
        "sha": "5e53fa5f5d2b13a91905aece556d463405d87e04",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/492c6dc1e742a62599dc6d5ba6c3896825b5144f/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/492c6dc1e742a62599dc6d5ba6c3896825b5144f/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=492c6dc1e742a62599dc6d5ba6c3896825b5144f",
        "patch": "@@ -522,7 +522,7 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n         }\n     }\n     obj.pushKV(\"localaddresses\", localAddresses);\n-    obj.pushKV(\"warnings\",       GetWarnings(\"statusbar\"));\n+    obj.pushKV(\"warnings\",       GetWarnings(false));\n     return obj;\n }\n "
      },
      {
        "sha": "19bd0d142f3bd6235b31d7676e5406eb850321fa",
        "filename": "src/test/timedata_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/492c6dc1e742a62599dc6d5ba6c3896825b5144f/src/test/timedata_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/492c6dc1e742a62599dc6d5ba6c3896825b5144f/src/test/timedata_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/timedata_tests.cpp?ref=492c6dc1e742a62599dc6d5ba6c3896825b5144f",
        "patch": "@@ -65,7 +65,7 @@ BOOST_AUTO_TEST_CASE(addtimedata)\n         MultiAddTimeData(1, DEFAULT_MAX_TIME_ADJUSTMENT + 1); //filter size 5\n     }\n \n-    BOOST_CHECK(GetWarnings(\"gui\").find(\"clock is wrong\") != std::string::npos);\n+    BOOST_CHECK(GetWarnings(true).find(\"clock is wrong\") != std::string::npos);\n \n     // nTimeOffset is not changed if the median of offsets exceeds DEFAULT_MAX_TIME_ADJUSTMENT\n     BOOST_CHECK_EQUAL(GetTimeOffset(), 0);"
      },
      {
        "sha": "5c74bced5a32be8912efb845da8b6ee554f1d84a",
        "filename": "src/warnings.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/492c6dc1e742a62599dc6d5ba6c3896825b5144f/src/warnings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/492c6dc1e742a62599dc6d5ba6c3896825b5144f/src/warnings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/warnings.cpp?ref=492c6dc1e742a62599dc6d5ba6c3896825b5144f",
        "patch": "@@ -38,41 +38,37 @@ void SetfLargeWorkInvalidChainFound(bool flag)\n     fLargeWorkInvalidChainFound = flag;\n }\n \n-std::string GetWarnings(const std::string& strFor)\n+std::string GetWarnings(bool verbose)\n {\n-    std::string strStatusBar;\n-    std::string strGUI;\n+    std::string warnings_concise;\n+    std::string warnings_verbose;\n     const std::string uiAlertSeperator = \"<hr />\";\n \n     LOCK(cs_warnings);\n \n     if (!CLIENT_VERSION_IS_RELEASE) {\n-        strStatusBar = \"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\";\n-        strGUI = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\").translated;\n+        warnings_concise = \"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\";\n+        warnings_verbose = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\").translated;\n     }\n \n     // Misc warnings like out of disk space and clock is wrong\n     if (strMiscWarning != \"\")\n     {\n-        strStatusBar = strMiscWarning;\n-        strGUI += (strGUI.empty() ? \"\" : uiAlertSeperator) + strMiscWarning;\n+        warnings_concise = strMiscWarning;\n+        warnings_verbose += (warnings_verbose.empty() ? \"\" : uiAlertSeperator) + strMiscWarning;\n     }\n \n     if (fLargeWorkForkFound)\n     {\n-        strStatusBar = \"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\";\n-        strGUI += (strGUI.empty() ? \"\" : uiAlertSeperator) + _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\").translated;\n+        warnings_concise = \"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\";\n+        warnings_verbose += (warnings_verbose.empty() ? \"\" : uiAlertSeperator) + _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\").translated;\n     }\n     else if (fLargeWorkInvalidChainFound)\n     {\n-        strStatusBar = \"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\";\n-        strGUI += (strGUI.empty() ? \"\" : uiAlertSeperator) + _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\").translated;\n+        warnings_concise = \"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\";\n+        warnings_verbose += (warnings_verbose.empty() ? \"\" : uiAlertSeperator) + _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\").translated;\n     }\n \n-    if (strFor == \"gui\")\n-        return strGUI;\n-    else if (strFor == \"statusbar\")\n-        return strStatusBar;\n-    assert(!\"GetWarnings(): invalid parameter\");\n-    return \"error\";\n+    if (verbose) return warnings_verbose;\n+    else return warnings_concise;\n }"
      },
      {
        "sha": "58e5e4cd19c84d50ccc1e166848a92bc63b30676",
        "filename": "src/warnings.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/492c6dc1e742a62599dc6d5ba6c3896825b5144f/src/warnings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/492c6dc1e742a62599dc6d5ba6c3896825b5144f/src/warnings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/warnings.h?ref=492c6dc1e742a62599dc6d5ba6c3896825b5144f",
        "patch": "@@ -13,11 +13,11 @@ void SetfLargeWorkForkFound(bool flag);\n bool GetfLargeWorkForkFound();\n void SetfLargeWorkInvalidChainFound(bool flag);\n /** Format a string that describes several potential problems detected by the core.\n- * @param[in] strFor can have the following values:\n- * - \"statusbar\": get the most important warning\n- * - \"gui\": get all warnings, translated (where possible) for GUI, separated by <hr />\n- * @returns the warning string selected by strFor\n+ * @param[in] verbose bool\n+ * - if true, get all warnings, translated (where possible), separated by <hr />\n+ * - if false, get the most important warning\n+ * @returns the warning string\n  */\n-std::string GetWarnings(const std::string& strFor);\n+std::string GetWarnings(bool verbose);\n \n #endif //  BITCOIN_WARNINGS_H"
      }
    ]
  },
  {
    "sha": "7965e0b41ae03110ad784a1b374f831600c0cca1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTY1ZTBiNDFhZTAzMTEwYWQ3ODRhMWIzNzRmODMxNjAwYzBjY2Ex",
    "commit": {
      "author": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-12-13T13:25:01Z"
      },
      "committer": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-12-15T19:49:49Z"
      },
      "message": "doc: Add release note for RPC Whitelist",
      "tree": {
        "sha": "91ac67b3fda5ab58ad914fa4e5ab95b1fb57295e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91ac67b3fda5ab58ad914fa4e5ab95b1fb57295e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7965e0b41ae03110ad784a1b374f831600c0cca1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE82XmVEpcmrEyk0LUL21BRcVfx8cFAl32jmAACgkQL21BRcVf\nx8deOQ//fZeTjVsPYA8pFuhXpmCk9P4/1iUw2KVvDAZW7YT1ZiNOSIkb/oTxePTh\nCs1046C7PxHSrVqhgSHHvMaLLNIRAay1wWbp/VRaHC0L6CjPRx3jQ9SvvHT52wTS\n+Qh4Y11Jb7Vv/0VbaN8fh9/4L0j/j01aBilr8Q/mCchPkZoXyK7Ie7v98CC6JJm0\nycPvfBNgDjOBXzgD6Swd4o/Nfn2SIkfK1N/K86gFr1dTKxeRf3oTZhisiw9JWMjZ\n1ZwHAzerZrdkpb5VcpU6RTtYSAvyXMv21bJcJH+BMipNjUK/QSbGJGOzZDnlY0P5\nj9dDphWuYC7DEpGUVIJnMOdrJ7UvH+5zSbZvXJXJCJEBjU8gW6vTvmtBbDymGGp+\nUmuY+WnefhCONjebWj7dVL/QSRS14kIpEcTInrcyAom2MGw7R2EBwED+aM8zMLKZ\nrOhyXwgMZTK2+wzXcnVJxCO93F+S2T56NHnCz4FGflBaKYqC9gy9bnK2pu0wx9lb\n1kevFvOBO3O9xKcoFqaisnKKQj4CZcZHw5pkSknGgRSXrOkMNjaRsy7y3gAKk3uf\ntsf/ThrJ+/xUPsAlYnjN4Wlfagvrbn59VGyg6r0qKgq0n3smOF+/PV65vfkpg388\nbiky78U8Ivyk/H3XHPKZ+BPaMyCle0Wmd4TE19FVwOs3ovgbbvU=\n=Bc2r\n-----END PGP SIGNATURE-----",
        "payload": "tree 91ac67b3fda5ab58ad914fa4e5ab95b1fb57295e\nparent 988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a\nauthor Emil Engler <me@emilengler.com> 1576243501 +0100\ncommitter Emil Engler <me@emilengler.com> 1576439389 +0100\n\ndoc: Add release note for RPC Whitelist\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7965e0b41ae03110ad784a1b374f831600c0cca1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7965e0b41ae03110ad784a1b374f831600c0cca1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7965e0b41ae03110ad784a1b374f831600c0cca1/comments",
    "author": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/988fe5b1adc0cb551dfacd7d3eedf4bd7edc918a"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eec1ef9c46f4640eeadbdb4bc31c436c07c7fff3",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7965e0b41ae03110ad784a1b374f831600c0cca1/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7965e0b41ae03110ad784a1b374f831600c0cca1/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=7965e0b41ae03110ad784a1b374f831600c0cca1",
        "patch": "@@ -78,6 +78,9 @@ New RPCs\n New settings\n ------------\n \n+- RPC Whitelist system. It can give certain RPC users permissions to only some RPC calls.\n+It can be set with two command line arguments (`rpcwhitelist` and `rpcwhitelistdefault`). (#12763)\n+\n Updated settings\n ----------------\n "
      }
    ]
  },
  {
    "sha": "7aab8d1024996c7c422bd34a8226df0117b813f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YWFiOGQxMDI0OTk2YzdjNDIyYmQzNGE4MjI2ZGYwMTE3YjgxM2Y3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-12-15T15:53:51Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-12-15T20:05:52Z"
      },
      "message": "[style] Code style fixups in GetWarnings()",
      "tree": {
        "sha": "7bd26ba064525dfce7bafa53860c0a9ee1e0dad8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bd26ba064525dfce7bafa53860c0a9ee1e0dad8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7aab8d1024996c7c422bd34a8226df0117b813f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7aab8d1024996c7c422bd34a8226df0117b813f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7aab8d1024996c7c422bd34a8226df0117b813f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7aab8d1024996c7c422bd34a8226df0117b813f7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "492c6dc1e742a62599dc6d5ba6c3896825b5144f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/492c6dc1e742a62599dc6d5ba6c3896825b5144f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/492c6dc1e742a62599dc6d5ba6c3896825b5144f"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 8,
      "deletions": 11
    },
    "files": [
      {
        "sha": "8df77096f1ddee5fc3045260a64d3349a647e1cb",
        "filename": "src/warnings.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7aab8d1024996c7c422bd34a8226df0117b813f7/src/warnings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7aab8d1024996c7c422bd34a8226df0117b813f7/src/warnings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/warnings.cpp?ref=7aab8d1024996c7c422bd34a8226df0117b813f7",
        "patch": "@@ -42,31 +42,28 @@ std::string GetWarnings(bool verbose)\n {\n     std::string warnings_concise;\n     std::string warnings_verbose;\n-    const std::string uiAlertSeperator = \"<hr />\";\n+    const std::string warning_separator = \"<hr />\";\n \n     LOCK(cs_warnings);\n \n+    // Pre-release build warning\n     if (!CLIENT_VERSION_IS_RELEASE) {\n         warnings_concise = \"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\";\n         warnings_verbose = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\").translated;\n     }\n \n     // Misc warnings like out of disk space and clock is wrong\n-    if (strMiscWarning != \"\")\n-    {\n+    if (strMiscWarning != \"\") {\n         warnings_concise = strMiscWarning;\n-        warnings_verbose += (warnings_verbose.empty() ? \"\" : uiAlertSeperator) + strMiscWarning;\n+        warnings_verbose += (warnings_verbose.empty() ? \"\" : warning_separator) + strMiscWarning;\n     }\n \n-    if (fLargeWorkForkFound)\n-    {\n+    if (fLargeWorkForkFound) {\n         warnings_concise = \"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\";\n-        warnings_verbose += (warnings_verbose.empty() ? \"\" : uiAlertSeperator) + _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\").translated;\n-    }\n-    else if (fLargeWorkInvalidChainFound)\n-    {\n+        warnings_verbose += (warnings_verbose.empty() ? \"\" : warning_separator) + _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\").translated;\n+    } else if (fLargeWorkInvalidChainFound) {\n         warnings_concise = \"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\";\n-        warnings_verbose += (warnings_verbose.empty() ? \"\" : uiAlertSeperator) + _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\").translated;\n+        warnings_verbose += (warnings_verbose.empty() ? \"\" : warning_separator) + _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\").translated;\n     }\n \n     if (verbose) return warnings_verbose;"
      }
    ]
  },
  {
    "sha": "ec8dcb0199c6d6ae47a13abbd158f59532554adb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzhkY2IwMTk5YzZkNmFlNDdhMTNhYmJkMTU4ZjU5NTMyNTU0YWRi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-02T08:01:27Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-15T21:27:38Z"
      },
      "message": "tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus",
      "tree": {
        "sha": "117818094e0120da8d3134d1edcf1ad70745aabe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/117818094e0120da8d3134d1edcf1ad70745aabe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec8dcb0199c6d6ae47a13abbd158f59532554adb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec8dcb0199c6d6ae47a13abbd158f59532554adb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec8dcb0199c6d6ae47a13abbd158f59532554adb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec8dcb0199c6d6ae47a13abbd158f59532554adb/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a595011f5a3c048b2e3694dfe355aba60cd994e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a595011f5a3c048b2e3694dfe355aba60cd994e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a595011f5a3c048b2e3694dfe355aba60cd994e8"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8b503d83bf4ace8bc4fd90b65449bae1ef5ec931",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec8dcb0199c6d6ae47a13abbd158f59532554adb/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec8dcb0199c6d6ae47a13abbd158f59532554adb/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=ec8dcb0199c6d6ae47a13abbd158f59532554adb",
        "patch": "@@ -15,6 +15,7 @@\n # Fuzzers known to lack a seed corpus in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus\n FUZZERS_MISSING_CORPORA = [\n     \"addr_info_deserialize\",\n+    \"block\",\n     \"block_file_info_deserialize\",\n     \"block_filter_deserialize\",\n     \"block_header_and_short_txids_deserialize\","
      }
    ]
  },
  {
    "sha": "893aa207e84b74e7623243967d29f03570fdfd6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTNhYTIwN2U4NGI3NGU3NjIzMjQzOTY3ZDI5ZjAzNTcwZmRmZDZm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-07T12:53:50Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-15T21:38:34Z"
      },
      "message": "tests: Add fuzzing harness for CheckBlock(...) and other CBlock related functions",
      "tree": {
        "sha": "931569ddd3c2140fb5cf4b22da514bd65e4a62a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/931569ddd3c2140fb5cf4b22da514bd65e4a62a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/893aa207e84b74e7623243967d29f03570fdfd6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/893aa207e84b74e7623243967d29f03570fdfd6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/893aa207e84b74e7623243967d29f03570fdfd6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/893aa207e84b74e7623243967d29f03570fdfd6f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec8dcb0199c6d6ae47a13abbd158f59532554adb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec8dcb0199c6d6ae47a13abbd158f59532554adb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec8dcb0199c6d6ae47a13abbd158f59532554adb"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 70,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a8845b4c7d9b677369df516aca85eb10edf136c1",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/893aa207e84b74e7623243967d29f03570fdfd6f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/893aa207e84b74e7623243967d29f03570fdfd6f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=893aa207e84b74e7623243967d29f03570fdfd6f",
        "patch": "@@ -9,6 +9,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/addrman_deserialize \\\n   test/fuzz/banentry_deserialize \\\n   test/fuzz/bech32 \\\n+  test/fuzz/block \\\n   test/fuzz/block_deserialize \\\n   test/fuzz/block_file_info_deserialize \\\n   test/fuzz/block_filter_deserialize \\\n@@ -229,6 +230,12 @@ test_test_bitcoin_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n \n if ENABLE_FUZZ\n+test_fuzz_block_SOURCES = $(FUZZ_SUITE) test/fuzz/block.cpp\n+test_fuzz_block_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_block_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n test_fuzz_block_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_block_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_DESERIALIZE=1\n test_fuzz_block_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "431248de4a7a578fad210db61a566b1446606b3e",
        "filename": "src/test/fuzz/block.cpp",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/893aa207e84b74e7623243967d29f03570fdfd6f/src/test/fuzz/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/893aa207e84b74e7623243967d29f03570fdfd6f/src/test/fuzz/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/block.cpp?ref=893aa207e84b74e7623243967d29f03570fdfd6f",
        "patch": "@@ -0,0 +1,63 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <core_io.h>\n+#include <core_memusage.h>\n+#include <pubkey.h>\n+#include <primitives/block.h>\n+#include <streams.h>\n+#include <test/fuzz/fuzz.h>\n+#include <validation.h>\n+#include <version.h>\n+\n+#include <cassert>\n+#include <string>\n+\n+void initialize()\n+{\n+    const static auto verify_handle = MakeUnique<ECCVerifyHandle>();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n+    CBlock block;\n+    try {\n+        int nVersion;\n+        ds >> nVersion;\n+        ds.SetVersion(nVersion);\n+        ds >> block;\n+    } catch (const std::ios_base::failure&) {\n+        return;\n+    }\n+    const Consensus::Params& consensus_params = Params().GetConsensus();\n+    BlockValidationState validation_state_pow_and_merkle;\n+    const bool valid_incl_pow_and_merkle = CheckBlock(block, validation_state_pow_and_merkle, consensus_params, /* fCheckPOW= */ true, /* fCheckMerkleRoot= */ true);\n+    BlockValidationState validation_state_pow;\n+    const bool valid_incl_pow = CheckBlock(block, validation_state_pow, consensus_params, /* fCheckPOW= */ true, /* fCheckMerkleRoot= */ false);\n+    BlockValidationState validation_state_merkle;\n+    const bool valid_incl_merkle = CheckBlock(block, validation_state_merkle, consensus_params, /* fCheckPOW= */ false, /* fCheckMerkleRoot= */ true);\n+    BlockValidationState validation_state_none;\n+    const bool valid_incl_none = CheckBlock(block, validation_state_none, consensus_params, /* fCheckPOW= */ false, /* fCheckMerkleRoot= */ false);\n+    if (valid_incl_pow_and_merkle) {\n+        assert(valid_incl_pow && valid_incl_merkle && valid_incl_none);\n+    } else if (valid_incl_merkle || valid_incl_pow) {\n+        assert(valid_incl_none);\n+    }\n+    (void)block.GetHash();\n+    (void)block.ToString();\n+    (void)BlockMerkleRoot(block);\n+    if (!block.vtx.empty()) {\n+        // TODO: Avoid array index out of bounds error in BlockWitnessMerkleRoot\n+        //       when block.vtx.empty().\n+        (void)BlockWitnessMerkleRoot(block);\n+    }\n+    (void)GetBlockWeight(block);\n+    (void)GetWitnessCommitmentIndex(block);\n+    (void)RecursiveDynamicUsage(block);\n+}"
      }
    ]
  },
  {
    "sha": "a5089f62bda9a39c1d6cbba285477670f1aa1f3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTA4OWY2MmJkYTlhMzljMWQ2Y2JiYTI4NTQ3NzY3MGYxYWExZjNm",
    "commit": {
      "author": {
        "name": "hackerrdave",
        "email": "davekerrcode@gmail.com",
        "date": "2019-12-16T00:58:51Z"
      },
      "committer": {
        "name": "hackerrdave",
        "email": "davekerrcode@gmail.com",
        "date": "2019-12-16T00:58:51Z"
      },
      "message": "fix directory path for secp256k1 subtree in developer-notes",
      "tree": {
        "sha": "402d33f12fa75f702e1151ef68f5e0ec0e14bdd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/402d33f12fa75f702e1151ef68f5e0ec0e14bdd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5089f62bda9a39c1d6cbba285477670f1aa1f3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5089f62bda9a39c1d6cbba285477670f1aa1f3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5089f62bda9a39c1d6cbba285477670f1aa1f3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5089f62bda9a39c1d6cbba285477670f1aa1f3f/comments",
    "author": {
      "login": "hackerrdave",
      "id": 5226601,
      "node_id": "MDQ6VXNlcjUyMjY2MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5226601?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hackerrdave",
      "html_url": "https://github.com/hackerrdave",
      "followers_url": "https://api.github.com/users/hackerrdave/followers",
      "following_url": "https://api.github.com/users/hackerrdave/following{/other_user}",
      "gists_url": "https://api.github.com/users/hackerrdave/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hackerrdave/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hackerrdave/subscriptions",
      "organizations_url": "https://api.github.com/users/hackerrdave/orgs",
      "repos_url": "https://api.github.com/users/hackerrdave/repos",
      "events_url": "https://api.github.com/users/hackerrdave/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hackerrdave/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hackerrdave",
      "id": 5226601,
      "node_id": "MDQ6VXNlcjUyMjY2MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5226601?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hackerrdave",
      "html_url": "https://github.com/hackerrdave",
      "followers_url": "https://api.github.com/users/hackerrdave/followers",
      "following_url": "https://api.github.com/users/hackerrdave/following{/other_user}",
      "gists_url": "https://api.github.com/users/hackerrdave/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hackerrdave/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hackerrdave/subscriptions",
      "organizations_url": "https://api.github.com/users/hackerrdave/orgs",
      "repos_url": "https://api.github.com/users/hackerrdave/repos",
      "events_url": "https://api.github.com/users/hackerrdave/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hackerrdave/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a595011f5a3c048b2e3694dfe355aba60cd994e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a595011f5a3c048b2e3694dfe355aba60cd994e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a595011f5a3c048b2e3694dfe355aba60cd994e8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b50f552e9203652a5be1f18bbbeda44cc5b0ce30",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5089f62bda9a39c1d6cbba285477670f1aa1f3f/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5089f62bda9a39c1d6cbba285477670f1aa1f3f/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=a5089f62bda9a39c1d6cbba285477670f1aa1f3f",
        "patch": "@@ -820,7 +820,7 @@ Current subtrees include:\n   - **Note**: Follow the instructions in [Upgrading LevelDB](#upgrading-leveldb) when\n     merging upstream changes to the LevelDB subtree.\n \n-- src/libsecp256k1\n+- src/secp256k1\n   - Upstream at https://github.com/bitcoin-core/secp256k1/ ; actively maintained by Core contributors.\n \n - src/crypto/ctaes"
      }
    ]
  },
  {
    "sha": "ccc53e43c5464058171d6291da861a88184b230e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2M1M2U0M2M1NDY0MDU4MTcxZDYyOTFkYTg2MWE4ODE4NGIyMzBl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-16T08:59:48Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-16T09:04:35Z"
      },
      "message": "util: Don't allow ParseMoney(...) of strings with embedded NUL characters",
      "tree": {
        "sha": "8c56fa6e768ea6accbb825c18a4996e64e61803d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c56fa6e768ea6accbb825c18a4996e64e61803d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccc53e43c5464058171d6291da861a88184b230e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc53e43c5464058171d6291da861a88184b230e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccc53e43c5464058171d6291da861a88184b230e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc53e43c5464058171d6291da861a88184b230e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a595011f5a3c048b2e3694dfe355aba60cd994e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a595011f5a3c048b2e3694dfe355aba60cd994e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a595011f5a3c048b2e3694dfe355aba60cd994e8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3e75a2e3e934eeb293d6d656b23e5e8c72d04a21",
        "filename": "src/util/moneystr.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc53e43c5464058171d6291da861a88184b230e/src/util/moneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc53e43c5464058171d6291da861a88184b230e/src/util/moneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/moneystr.cpp?ref=ccc53e43c5464058171d6291da861a88184b230e",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <tinyformat.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n \n std::string FormatMoney(const CAmount& n)\n {\n@@ -32,6 +33,9 @@ std::string FormatMoney(const CAmount& n)\n \n bool ParseMoney(const std::string& str, CAmount& nRet)\n {\n+    if (!ValidAsCString(str)) {\n+        return false;\n+    }\n     return ParseMoney(str.c_str(), nRet);\n }\n "
      }
    ]
  },
  {
    "sha": "93cc18b0f6fa5fa8144079a4f51904d8b3087e94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2NjMThiMGY2ZmE1ZmE4MTQ0MDc5YTRmNTE5MDRkOGIzMDg3ZTk0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-16T09:00:08Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-16T09:04:36Z"
      },
      "message": "util: Don't allow DecodeBase64(...) of strings with embedded NUL characters",
      "tree": {
        "sha": "c8a75cca8c08c8a21df4c7d8267c20c33a84a518",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8a75cca8c08c8a21df4c7d8267c20c33a84a518"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93cc18b0f6fa5fa8144079a4f51904d8b3087e94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93cc18b0f6fa5fa8144079a4f51904d8b3087e94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93cc18b0f6fa5fa8144079a4f51904d8b3087e94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93cc18b0f6fa5fa8144079a4f51904d8b3087e94/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccc53e43c5464058171d6291da861a88184b230e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc53e43c5464058171d6291da861a88184b230e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccc53e43c5464058171d6291da861a88184b230e"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dfd8961cb7173e1e7edbfaeb31fc2ac088d2ee39",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93cc18b0f6fa5fa8144079a4f51904d8b3087e94/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93cc18b0f6fa5fa8144079a4f51904d8b3087e94/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=93cc18b0f6fa5fa8144079a4f51904d8b3087e94",
        "patch": "@@ -191,6 +191,12 @@ std::vector<unsigned char> DecodeBase64(const char* p, bool* pf_invalid)\n \n std::string DecodeBase64(const std::string& str, bool* pf_invalid)\n {\n+    if (!ValidAsCString(str)) {\n+        if (pf_invalid) {\n+            *pf_invalid = true;\n+        }\n+        return {};\n+    }\n     std::vector<unsigned char> vchRet = DecodeBase64(str.c_str(), pf_invalid);\n     return std::string((const char*)vchRet.data(), vchRet.size());\n }"
      }
    ]
  },
  {
    "sha": "a6fc26da55dea3b76bd89fbbca24ded170238674",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmZjMjZkYTU1ZGVhM2I3NmJkODlmYmJjYTI0ZGVkMTcwMjM4Njc0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-16T09:00:20Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-16T09:04:36Z"
      },
      "message": "util: Don't allow DecodeBase32(...) of strings with embedded NUL characters",
      "tree": {
        "sha": "922f1fc5d75cac77a98412608a7321166517af99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/922f1fc5d75cac77a98412608a7321166517af99"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6fc26da55dea3b76bd89fbbca24ded170238674",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6fc26da55dea3b76bd89fbbca24ded170238674",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6fc26da55dea3b76bd89fbbca24ded170238674",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6fc26da55dea3b76bd89fbbca24ded170238674/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93cc18b0f6fa5fa8144079a4f51904d8b3087e94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93cc18b0f6fa5fa8144079a4f51904d8b3087e94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93cc18b0f6fa5fa8144079a4f51904d8b3087e94"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "31719cd975a991040c93f9b744fc3cdf75f8c12a",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6fc26da55dea3b76bd89fbbca24ded170238674/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6fc26da55dea3b76bd89fbbca24ded170238674/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=a6fc26da55dea3b76bd89fbbca24ded170238674",
        "patch": "@@ -266,6 +266,12 @@ std::vector<unsigned char> DecodeBase32(const char* p, bool* pf_invalid)\n \n std::string DecodeBase32(const std::string& str, bool* pf_invalid)\n {\n+    if (!ValidAsCString(str)) {\n+        if (pf_invalid) {\n+            *pf_invalid = true;\n+        }\n+        return {};\n+    }\n     std::vector<unsigned char> vchRet = DecodeBase32(str.c_str(), pf_invalid);\n     return std::string((const char*)vchRet.data(), vchRet.size());\n }"
      }
    ]
  },
  {
    "sha": "137c80d579502e329964d7d1028a9507d4667774",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzdjODBkNTc5NTAyZTMyOTk2NGQ3ZDEwMjhhOTUwN2Q0NjY3Nzc0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-16T09:09:17Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-16T09:23:19Z"
      },
      "message": "tests: Add tests for decoding/parsing of base32, base64 and money strings containing NUL characters",
      "tree": {
        "sha": "7a1752ee0deef0570a1e8825cddb86d6f297175f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a1752ee0deef0570a1e8825cddb86d6f297175f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/137c80d579502e329964d7d1028a9507d4667774",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/137c80d579502e329964d7d1028a9507d4667774",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/137c80d579502e329964d7d1028a9507d4667774",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/137c80d579502e329964d7d1028a9507d4667774/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6fc26da55dea3b76bd89fbbca24ded170238674",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6fc26da55dea3b76bd89fbbca24ded170238674",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6fc26da55dea3b76bd89fbbca24ded170238674"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 27,
      "deletions": 0
    },
    "files": [
      {
        "sha": "690368b177ef10fddc69e6b70b6d38467a172827",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/137c80d579502e329964d7d1028a9507d4667774/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/137c80d579502e329964d7d1028a9507d4667774/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=137c80d579502e329964d7d1028a9507d4667774",
        "patch": "@@ -20,6 +20,17 @@ BOOST_AUTO_TEST_CASE(base32_testvectors)\n         std::string strDec = DecodeBase32(vstrOut[i]);\n         BOOST_CHECK_EQUAL(strDec, vstrIn[i]);\n     }\n+\n+    // Decoding strings with embedded NUL characters should fail\n+    bool failure;\n+    (void)DecodeBase32(std::string(\"invalid\", 7), &failure);\n+    BOOST_CHECK_EQUAL(failure, true);\n+    (void)DecodeBase32(std::string(\"AWSX3VPP\", 8), &failure);\n+    BOOST_CHECK_EQUAL(failure, false);\n+    (void)DecodeBase32(std::string(\"AWSX3VPP\\0invalid\", 16), &failure);\n+    BOOST_CHECK_EQUAL(failure, true);\n+    (void)DecodeBase32(std::string(\"AWSX3VPPinvalid\", 15), &failure);\n+    BOOST_CHECK_EQUAL(failure, true);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "94df4d1955fea3349e454be9a6f043daa34db101",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/137c80d579502e329964d7d1028a9507d4667774/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/137c80d579502e329964d7d1028a9507d4667774/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=137c80d579502e329964d7d1028a9507d4667774",
        "patch": "@@ -20,6 +20,17 @@ BOOST_AUTO_TEST_CASE(base64_testvectors)\n         std::string strDec = DecodeBase64(strEnc);\n         BOOST_CHECK_EQUAL(strDec, vstrIn[i]);\n     }\n+\n+    // Decoding strings with embedded NUL characters should fail\n+    bool failure;\n+    (void)DecodeBase64(std::string(\"invalid\", 7), &failure);\n+    BOOST_CHECK_EQUAL(failure, true);\n+    (void)DecodeBase64(std::string(\"nQB/pZw=\", 8), &failure);\n+    BOOST_CHECK_EQUAL(failure, false);\n+    (void)DecodeBase64(std::string(\"nQB/pZw=\\0invalid\", 16), &failure);\n+    BOOST_CHECK_EQUAL(failure, true);\n+    (void)DecodeBase64(std::string(\"nQB/pZw=invalid\", 15), &failure);\n+    BOOST_CHECK_EQUAL(failure, true);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "a5cbae89b4741df45bb774193e3517ea6f160504",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/137c80d579502e329964d7d1028a9507d4667774/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/137c80d579502e329964d7d1028a9507d4667774/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=137c80d579502e329964d7d1028a9507d4667774",
        "patch": "@@ -1069,6 +1069,11 @@ BOOST_AUTO_TEST_CASE(util_ParseMoney)\n \n     // Parsing negative amounts must fail\n     BOOST_CHECK(!ParseMoney(\"-1\", ret));\n+\n+    // Parsing strings with embedded NUL characters should fail\n+    BOOST_CHECK(!ParseMoney(std::string(\"\\0-1\", 3), ret));\n+    BOOST_CHECK(!ParseMoney(std::string(\"\\01\", 2), ret));\n+    BOOST_CHECK(!ParseMoney(std::string(\"1\\0\", 2), ret));\n }\n \n BOOST_AUTO_TEST_CASE(util_IsHex)"
      }
    ]
  },
  {
    "sha": "c3628e448315c95c2f3ca227eb7003a17162a299",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzYyOGU0NDgzMTVjOTVjMmYzY2EyMjdlYjcwMDNhMTcxNjJhMjk5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-16T10:01:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-16T10:02:09Z"
      },
      "message": "Merge #17743: doc: Add release note for RPC Whitelist\n\n7965e0b41ae03110ad784a1b374f831600c0cca1 doc: Add release note for RPC Whitelist (Emil Engler)\n\nPull request description:\n\n  A release note for #12763\n\nACKs for top commit:\n  laanwj:\n    ACK 7965e0b41ae03110ad784a1b374f831600c0cca1\n\nTree-SHA512: 4ac3e62029a403e64e4cd3183433dc7aa071d42688b689d7cffb8f08dc4b26d2a586d32fa791d2b5679d6b95cd6e34c56e40a5592b9af446ad9429307f7267fe",
      "tree": {
        "sha": "a918019f03a6d01c532c7646c71db9aadc130c99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a918019f03a6d01c532c7646c71db9aadc130c99"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3628e448315c95c2f3ca227eb7003a17162a299",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl33ViEACgkQHkrtYphs\n0l3jZgf/SSovi4ai4J2dZxtSKR3mX5vTehrjYkN0Xhz21Xl75dN34cZ8jwFtJCrY\nNeU7oSj725dhP1UAjk6TYmYz50uJ6a+gqkKQ3R0GYShGmPpNvw3PMxw3i3l+qGXy\nsYRNriVtwaMmY5r+fFNGYKT1uf66RKQNk30plCzq7M6kcGE8rErMno82U1MM7Ibp\nuzHVjVLevfh1PDd76Wou28Us3s/9t+UwSfw3kFDtLm0/Caix4eABEHVl5LSGeSTs\nfON/zBD8uoEjyTlxwHryxjl9TPIRjDEe36s8ANzkFymfqfZCmgbz8qa8pTmsTedt\nN3U8Oc9JSFyYe9cg6rOh0YjJjiu8iw==\n=uWjx\n-----END PGP SIGNATURE-----",
        "payload": "tree a918019f03a6d01c532c7646c71db9aadc130c99\nparent a595011f5a3c048b2e3694dfe355aba60cd994e8\nparent 7965e0b41ae03110ad784a1b374f831600c0cca1\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1576490502 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1576490529 +0100\n\nMerge #17743: doc: Add release note for RPC Whitelist\n\n7965e0b41ae03110ad784a1b374f831600c0cca1 doc: Add release note for RPC Whitelist (Emil Engler)\n\nPull request description:\n\n  A release note for #12763\n\nACKs for top commit:\n  laanwj:\n    ACK 7965e0b41ae03110ad784a1b374f831600c0cca1\n\nTree-SHA512: 4ac3e62029a403e64e4cd3183433dc7aa071d42688b689d7cffb8f08dc4b26d2a586d32fa791d2b5679d6b95cd6e34c56e40a5592b9af446ad9429307f7267fe\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3628e448315c95c2f3ca227eb7003a17162a299",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3628e448315c95c2f3ca227eb7003a17162a299",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3628e448315c95c2f3ca227eb7003a17162a299/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a595011f5a3c048b2e3694dfe355aba60cd994e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a595011f5a3c048b2e3694dfe355aba60cd994e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a595011f5a3c048b2e3694dfe355aba60cd994e8"
      },
      {
        "sha": "7965e0b41ae03110ad784a1b374f831600c0cca1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7965e0b41ae03110ad784a1b374f831600c0cca1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7965e0b41ae03110ad784a1b374f831600c0cca1"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eec1ef9c46f4640eeadbdb4bc31c436c07c7fff3",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3628e448315c95c2f3ca227eb7003a17162a299/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3628e448315c95c2f3ca227eb7003a17162a299/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=c3628e448315c95c2f3ca227eb7003a17162a299",
        "patch": "@@ -78,6 +78,9 @@ New RPCs\n New settings\n ------------\n \n+- RPC Whitelist system. It can give certain RPC users permissions to only some RPC calls.\n+It can be set with two command line arguments (`rpcwhitelist` and `rpcwhitelistdefault`). (#12763)\n+\n Updated settings\n ----------------\n "
      }
    ]
  },
  {
    "sha": "5e4912f99096e9955b332df004662f83885b322f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTQ5MTJmOTkwOTZlOTk1NWIzMzJkZjAwNDY2MmY4Mzg4NWIzMjJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-16T12:25:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-12-16T12:28:57Z"
      },
      "message": "Merge #17730: depends: remove Qt networking features\n\n244501fc85a1319857efb227093c0e71c1d5a01e depends: disable unused qt networking features (fanquake)\n29d56c62b7f206d42f0908819ff2e1926737f988 depends: -optimized-qmake is now -optimized-tools (fanquake)\nccdda96804088ec3ad01aec5ab0ff8e9b05b161b depends: skip building qt proxies (fanquake)\n\nPull request description:\n\n  Somewhat of a followup to removing BIP70 support in #17165. This removes networking features from our Qt build. This also removes the need to link against the `CFNetwork` and `SystemConfiguration` libraries on macOS.\n\n  ```diff\n  src/qt/bitcoin-qt:\n   /usr/lib/libSystem.B.dylib\n   /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n   /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation\n   /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices\n   /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit\n   /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices\n   /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\n  -/System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration\n   /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics\n   /System/Library/Frameworks/Carbon.framework/Versions/A/Carbon\n   /usr/lib/libc++.1.dylib\n  -/System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork\n   /System/Library/Frameworks/CoreText.framework/Versions/A/CoreText\n   /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\n   /usr/lib/libobjc.A.dylib\n  ```\n\n  > Introduced the -optimized-tools option; supersedes -optimized-qmake.\n\n  `optimized-qmake` became `optimized-tools` in Qt 5.6.0. While the former still works, we can use the newer flag.\n\n  A diff of the removed symbols is available [here](https://gist.github.com/fanquake/9c8d5961c91f90a2966191367adfb391).\n\n  We still need to actually build the network module, because we are using `QLocalServer` & `QLocalSocket` in the payment server.\n\nACKs for top commit:\n  Sjors:\n    Code review ACK 244501fc85a1319857efb227093c0e71c1d5a01e: just a rebase (_updated since I accidentally repeated the previous hash_)\n  practicalswift:\n    ACK 244501fc85a1319857efb227093c0e71c1d5a01e -- diff looks correct\n  promag:\n    Code review ACK 244501fc85a1319857efb227093c0e71c1d5a01e.\n\nTree-SHA512: 79734e3c96c40e7e484c86ac4cd4f738c05fcebe4771aeac443883f618a6c766e667909d5f8f14f9bd82f43206387c952458c5fa765cd0830f8beda6e6ac80ae",
      "tree": {
        "sha": "d8f0165a31c5d7eddef90fb0d7fe9fb2a53a6127",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8f0165a31c5d7eddef90fb0d7fe9fb2a53a6127"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e4912f99096e9955b332df004662f83885b322f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl33eIkACgkQHkrtYphs\n0l1d2ggAxEoBLDRIxguuSzO3m4uWJ55anIF7eIP5r1LROX5Y63vpTjzGMjqVOp+n\nXigE6+dKgC6l/J6fxku+USGvsCSMMAbBhP4Q2vH73OzNwC4zpCw/Zhb7jJm0WVrE\nC3cBe0C+wH8kDT9R+JqPhAKjD00MZ6jfIhLCFQy1c83CtgVrJNEm/R6iTgOA+SQj\n0moRyNst1hDYObzVmVM5ZWRaSCA3BXyaJM1HJMI4SqGkQ+FWzlZka9NZh5pMshGT\ntKxXWd/tVg+L47h8LE3eW1iYhx69LCAZ4B/VUjD2twHyzIdLwd+lTDbGkxPA+LH8\nZkc55BfQhP2IgPGqzIOT1saitSlcBA==\n=anZt\n-----END PGP SIGNATURE-----",
        "payload": "tree d8f0165a31c5d7eddef90fb0d7fe9fb2a53a6127\nparent c3628e448315c95c2f3ca227eb7003a17162a299\nparent 244501fc85a1319857efb227093c0e71c1d5a01e\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1576499107 +0100\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1576499337 +0100\n\nMerge #17730: depends: remove Qt networking features\n\n244501fc85a1319857efb227093c0e71c1d5a01e depends: disable unused qt networking features (fanquake)\n29d56c62b7f206d42f0908819ff2e1926737f988 depends: -optimized-qmake is now -optimized-tools (fanquake)\nccdda96804088ec3ad01aec5ab0ff8e9b05b161b depends: skip building qt proxies (fanquake)\n\nPull request description:\n\n  Somewhat of a followup to removing BIP70 support in #17165. This removes networking features from our Qt build. This also removes the need to link against the `CFNetwork` and `SystemConfiguration` libraries on macOS.\n\n  ```diff\n  src/qt/bitcoin-qt:\n   /usr/lib/libSystem.B.dylib\n   /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n   /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation\n   /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices\n   /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit\n   /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices\n   /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\n  -/System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration\n   /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics\n   /System/Library/Frameworks/Carbon.framework/Versions/A/Carbon\n   /usr/lib/libc++.1.dylib\n  -/System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork\n   /System/Library/Frameworks/CoreText.framework/Versions/A/CoreText\n   /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\n   /usr/lib/libobjc.A.dylib\n  ```\n\n  > Introduced the -optimized-tools option; supersedes -optimized-qmake.\n\n  `optimized-qmake` became `optimized-tools` in Qt 5.6.0. While the former still works, we can use the newer flag.\n\n  A diff of the removed symbols is available [here](https://gist.github.com/fanquake/9c8d5961c91f90a2966191367adfb391).\n\n  We still need to actually build the network module, because we are using `QLocalServer` & `QLocalSocket` in the payment server.\n\nACKs for top commit:\n  Sjors:\n    Code review ACK 244501fc85a1319857efb227093c0e71c1d5a01e: just a rebase (_updated since I accidentally repeated the previous hash_)\n  practicalswift:\n    ACK 244501fc85a1319857efb227093c0e71c1d5a01e -- diff looks correct\n  promag:\n    Code review ACK 244501fc85a1319857efb227093c0e71c1d5a01e.\n\nTree-SHA512: 79734e3c96c40e7e484c86ac4cd4f738c05fcebe4771aeac443883f618a6c766e667909d5f8f14f9bd82f43206387c952458c5fa765cd0830f8beda6e6ac80ae\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e4912f99096e9955b332df004662f83885b322f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e4912f99096e9955b332df004662f83885b322f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e4912f99096e9955b332df004662f83885b322f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3628e448315c95c2f3ca227eb7003a17162a299",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3628e448315c95c2f3ca227eb7003a17162a299",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3628e448315c95c2f3ca227eb7003a17162a299"
      },
      {
        "sha": "244501fc85a1319857efb227093c0e71c1d5a01e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/244501fc85a1319857efb227093c0e71c1d5a01e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/244501fc85a1319857efb227093c0e71c1d5a01e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "efa76965d5af5f894cb34eb6f0a95f695324446b",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e4912f99096e9955b332df004662f83885b322f/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e4912f99096e9955b332df004662f83885b322f/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=5e4912f99096e9955b332df004662f83885b322f",
        "patch": "@@ -39,12 +39,14 @@ $(package)_config_opts += -no-iconv\n $(package)_config_opts += -no-kms\n $(package)_config_opts += -no-linuxfb\n $(package)_config_opts += -no-libjpeg\n+$(package)_config_opts += -no-libproxy\n $(package)_config_opts += -no-libudev\n $(package)_config_opts += -no-mtdev\n $(package)_config_opts += -no-openssl\n $(package)_config_opts += -no-openvg\n $(package)_config_opts += -no-reduce-relocations\n $(package)_config_opts += -no-qml-debug\n+$(package)_config_opts += -no-sctp\n $(package)_config_opts += -no-securetransport\n $(package)_config_opts += -no-sql-db2\n $(package)_config_opts += -no-sql-ibase\n@@ -55,12 +57,13 @@ $(package)_config_opts += -no-sql-odbc\n $(package)_config_opts += -no-sql-psql\n $(package)_config_opts += -no-sql-sqlite\n $(package)_config_opts += -no-sql-sqlite2\n+$(package)_config_opts += -no-system-proxies\n $(package)_config_opts += -no-use-gold-linker\n $(package)_config_opts += -no-xinput2\n $(package)_config_opts += -nomake examples\n $(package)_config_opts += -nomake tests\n $(package)_config_opts += -opensource\n-$(package)_config_opts += -optimized-qmake\n+$(package)_config_opts += -optimized-tools\n $(package)_config_opts += -pch\n $(package)_config_opts += -pkg-config\n $(package)_config_opts += -prefix $(host_prefix)\n@@ -79,16 +82,20 @@ $(package)_config_opts += -no-feature-dial\n $(package)_config_opts += -no-feature-filesystemwatcher\n $(package)_config_opts += -no-feature-fontcombobox\n $(package)_config_opts += -no-feature-ftp\n+$(package)_config_opts += -no-feature-http\n $(package)_config_opts += -no-feature-image_heuristic_mask\n $(package)_config_opts += -no-feature-keysequenceedit\n $(package)_config_opts += -no-feature-lcdnumber\n+$(package)_config_opts += -no-feature-networkdiskcache\n+$(package)_config_opts += -no-feature-networkproxy\n $(package)_config_opts += -no-feature-pdf\n $(package)_config_opts += -no-feature-printdialog\n $(package)_config_opts += -no-feature-printer\n $(package)_config_opts += -no-feature-printpreviewdialog\n $(package)_config_opts += -no-feature-printpreviewwidget\n $(package)_config_opts += -no-feature-regularexpression\n $(package)_config_opts += -no-feature-sessionmanager\n+$(package)_config_opts += -no-feature-socks5\n $(package)_config_opts += -no-feature-sql\n $(package)_config_opts += -no-feature-statemachine\n $(package)_config_opts += -no-feature-syntaxhighlighter"
      }
    ]
  },
  {
    "sha": "6b51cce65afd9a6357277c4339d7cf56814e476e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjUxY2NlNjVhZmQ5YTYzNTcyNzdjNDMzOWQ3Y2Y1NjgxNGU0NzZl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-16T15:15:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-16T15:17:17Z"
      },
      "message": "Merge #17753: util: Don't allow Base32/64-decoding or ParseMoney(\u2026) on strings with embedded NUL characters. Add tests.\n\n137c80d579502e329964d7d1028a9507d4667774 tests: Add tests for decoding/parsing of base32, base64 and money strings containing NUL characters (practicalswift)\na6fc26da55dea3b76bd89fbbca24ded170238674 util: Don't allow DecodeBase32(...) of strings with embedded NUL characters (practicalswift)\n93cc18b0f6fa5fa8144079a4f51904d8b3087e94 util: Don't allow DecodeBase64(...) of strings with embedded NUL characters (practicalswift)\nccc53e43c5464058171d6291da861a88184b230e util: Don't allow ParseMoney(...) of strings with embedded NUL characters (practicalswift)\n\nPull request description:\n\n  Don't allow Base32/64-decoding or `ParseMoney(\u2026)` on strings with embedded `NUL` characters. Add tests.\n\n  Added tests before:\n\n  ```\n  $ src/test/test_bitcoin\n  Running 385 test cases...\n  test/base32_tests.cpp(31): error: in \"base32_tests/base32_testvectors\":\n      check failure == true has failed [false != true]\n  test/base64_tests.cpp(31): error: in \"base64_tests/base64_testvectors\":\n      check failure == true has failed [false != true]\n  test/util_tests.cpp(1074): error: in \"util_tests/util_ParseMoney\":\n      check !ParseMoney(std::string(\"\\0-1\", 3), ret) has failed\n  test/util_tests.cpp(1076): error: in \"util_tests/util_ParseMoney\":\n      check !ParseMoney(std::string(\"1\\0\", 2), ret) has failed\n\n  *** 4 failures are detected in the test module \"Bitcoin Core Test Suite\"\n  ```\n\n  Added tests after:\n\n  ```\n  $ src/test/test_bitcoin\n  Running 385 test cases...\n\n  *** No errors detected\n  ```\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 137c80d579502e329964d7d1028a9507d4667774\n\nTree-SHA512: 9486a0d32b4cf686bf5a47a0778338ac571fa39c66ad6d6d6cede58ec798e87bb50a2f9b7fd79ecd1fef1ba284e4073c1b430110967073ff87bdbbde7cada447",
      "tree": {
        "sha": "0455fe615a2033d89cc1f2608869aaeb4155919f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0455fe615a2033d89cc1f2608869aaeb4155919f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b51cce65afd9a6357277c4339d7cf56814e476e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhFhQv+NviC1L6aqlbga+r+BH8vvu9UHvCePn8H0ILRYccQrjllVldGS+v4rEqT\nSSYi9WP/7CzDGSUwFd3Fmdo+PwD8VUQ28uMzl3bPWmYZ7keEqGmiRgJAGlqYXlx9\nmdN4YFShIrXiYUkDL+rPbygofgmj6QIFyRck44nv/QsiBL4dhnwaKwEHE7dc5Sv8\n/zgVDr9zxxivPmGJRvF5QUDET+Lo269kkCDH+A7Pg+EKPZ81b7N3kU79ef/ReuFX\nMQnePq2wSfzV9cwwNsS00oW+fAetzLaH9jM49OPihd/TBPHRD0ZG4mkaoEkWZMZB\nP3ZdUsx/dQ7m5Atkv+GbvM70Nsv3IIEM+5G2xEqg3RzpylKvic5OLgxRZFCU1X8W\nkQKFWOCx5slB7PHPuSXeSzLZEqG7W64Ap4Kktx2aeIM1+h13sfzq2nvSusGzPcIJ\nnvIkXkfGThsC7vqHgJ5xlMIPRHVmsRv9jo7P/NM+dMMHtjVDYxrBKAm7zksWpFBp\nQT0N/aY9\n=F68X\n-----END PGP SIGNATURE-----",
        "payload": "tree 0455fe615a2033d89cc1f2608869aaeb4155919f\nparent 5e4912f99096e9955b332df004662f83885b322f\nparent 137c80d579502e329964d7d1028a9507d4667774\nauthor MarcoFalke <falke.marco@gmail.com> 1576509351 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576509437 -0500\n\nMerge #17753: util: Don't allow Base32/64-decoding or ParseMoney(\u2026) on strings with embedded NUL characters. Add tests.\n\n137c80d579502e329964d7d1028a9507d4667774 tests: Add tests for decoding/parsing of base32, base64 and money strings containing NUL characters (practicalswift)\na6fc26da55dea3b76bd89fbbca24ded170238674 util: Don't allow DecodeBase32(...) of strings with embedded NUL characters (practicalswift)\n93cc18b0f6fa5fa8144079a4f51904d8b3087e94 util: Don't allow DecodeBase64(...) of strings with embedded NUL characters (practicalswift)\nccc53e43c5464058171d6291da861a88184b230e util: Don't allow ParseMoney(...) of strings with embedded NUL characters (practicalswift)\n\nPull request description:\n\n  Don't allow Base32/64-decoding or `ParseMoney(\u2026)` on strings with embedded `NUL` characters. Add tests.\n\n  Added tests before:\n\n  ```\n  $ src/test/test_bitcoin\n  Running 385 test cases...\n  test/base32_tests.cpp(31): error: in \"base32_tests/base32_testvectors\":\n      check failure == true has failed [false != true]\n  test/base64_tests.cpp(31): error: in \"base64_tests/base64_testvectors\":\n      check failure == true has failed [false != true]\n  test/util_tests.cpp(1074): error: in \"util_tests/util_ParseMoney\":\n      check !ParseMoney(std::string(\"\\0-1\", 3), ret) has failed\n  test/util_tests.cpp(1076): error: in \"util_tests/util_ParseMoney\":\n      check !ParseMoney(std::string(\"1\\0\", 2), ret) has failed\n\n  *** 4 failures are detected in the test module \"Bitcoin Core Test Suite\"\n  ```\n\n  Added tests after:\n\n  ```\n  $ src/test/test_bitcoin\n  Running 385 test cases...\n\n  *** No errors detected\n  ```\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 137c80d579502e329964d7d1028a9507d4667774\n\nTree-SHA512: 9486a0d32b4cf686bf5a47a0778338ac571fa39c66ad6d6d6cede58ec798e87bb50a2f9b7fd79ecd1fef1ba284e4073c1b430110967073ff87bdbbde7cada447\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b51cce65afd9a6357277c4339d7cf56814e476e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b51cce65afd9a6357277c4339d7cf56814e476e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b51cce65afd9a6357277c4339d7cf56814e476e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e4912f99096e9955b332df004662f83885b322f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e4912f99096e9955b332df004662f83885b322f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e4912f99096e9955b332df004662f83885b322f"
      },
      {
        "sha": "137c80d579502e329964d7d1028a9507d4667774",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/137c80d579502e329964d7d1028a9507d4667774",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/137c80d579502e329964d7d1028a9507d4667774"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "690368b177ef10fddc69e6b70b6d38467a172827",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b51cce65afd9a6357277c4339d7cf56814e476e/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b51cce65afd9a6357277c4339d7cf56814e476e/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=6b51cce65afd9a6357277c4339d7cf56814e476e",
        "patch": "@@ -20,6 +20,17 @@ BOOST_AUTO_TEST_CASE(base32_testvectors)\n         std::string strDec = DecodeBase32(vstrOut[i]);\n         BOOST_CHECK_EQUAL(strDec, vstrIn[i]);\n     }\n+\n+    // Decoding strings with embedded NUL characters should fail\n+    bool failure;\n+    (void)DecodeBase32(std::string(\"invalid\", 7), &failure);\n+    BOOST_CHECK_EQUAL(failure, true);\n+    (void)DecodeBase32(std::string(\"AWSX3VPP\", 8), &failure);\n+    BOOST_CHECK_EQUAL(failure, false);\n+    (void)DecodeBase32(std::string(\"AWSX3VPP\\0invalid\", 16), &failure);\n+    BOOST_CHECK_EQUAL(failure, true);\n+    (void)DecodeBase32(std::string(\"AWSX3VPPinvalid\", 15), &failure);\n+    BOOST_CHECK_EQUAL(failure, true);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "94df4d1955fea3349e454be9a6f043daa34db101",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b51cce65afd9a6357277c4339d7cf56814e476e/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b51cce65afd9a6357277c4339d7cf56814e476e/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=6b51cce65afd9a6357277c4339d7cf56814e476e",
        "patch": "@@ -20,6 +20,17 @@ BOOST_AUTO_TEST_CASE(base64_testvectors)\n         std::string strDec = DecodeBase64(strEnc);\n         BOOST_CHECK_EQUAL(strDec, vstrIn[i]);\n     }\n+\n+    // Decoding strings with embedded NUL characters should fail\n+    bool failure;\n+    (void)DecodeBase64(std::string(\"invalid\", 7), &failure);\n+    BOOST_CHECK_EQUAL(failure, true);\n+    (void)DecodeBase64(std::string(\"nQB/pZw=\", 8), &failure);\n+    BOOST_CHECK_EQUAL(failure, false);\n+    (void)DecodeBase64(std::string(\"nQB/pZw=\\0invalid\", 16), &failure);\n+    BOOST_CHECK_EQUAL(failure, true);\n+    (void)DecodeBase64(std::string(\"nQB/pZw=invalid\", 15), &failure);\n+    BOOST_CHECK_EQUAL(failure, true);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "a5cbae89b4741df45bb774193e3517ea6f160504",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b51cce65afd9a6357277c4339d7cf56814e476e/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b51cce65afd9a6357277c4339d7cf56814e476e/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=6b51cce65afd9a6357277c4339d7cf56814e476e",
        "patch": "@@ -1069,6 +1069,11 @@ BOOST_AUTO_TEST_CASE(util_ParseMoney)\n \n     // Parsing negative amounts must fail\n     BOOST_CHECK(!ParseMoney(\"-1\", ret));\n+\n+    // Parsing strings with embedded NUL characters should fail\n+    BOOST_CHECK(!ParseMoney(std::string(\"\\0-1\", 3), ret));\n+    BOOST_CHECK(!ParseMoney(std::string(\"\\01\", 2), ret));\n+    BOOST_CHECK(!ParseMoney(std::string(\"1\\0\", 2), ret));\n }\n \n BOOST_AUTO_TEST_CASE(util_IsHex)"
      },
      {
        "sha": "3e75a2e3e934eeb293d6d656b23e5e8c72d04a21",
        "filename": "src/util/moneystr.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b51cce65afd9a6357277c4339d7cf56814e476e/src/util/moneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b51cce65afd9a6357277c4339d7cf56814e476e/src/util/moneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/moneystr.cpp?ref=6b51cce65afd9a6357277c4339d7cf56814e476e",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <tinyformat.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n \n std::string FormatMoney(const CAmount& n)\n {\n@@ -32,6 +33,9 @@ std::string FormatMoney(const CAmount& n)\n \n bool ParseMoney(const std::string& str, CAmount& nRet)\n {\n+    if (!ValidAsCString(str)) {\n+        return false;\n+    }\n     return ParseMoney(str.c_str(), nRet);\n }\n "
      },
      {
        "sha": "31719cd975a991040c93f9b744fc3cdf75f8c12a",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b51cce65afd9a6357277c4339d7cf56814e476e/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b51cce65afd9a6357277c4339d7cf56814e476e/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=6b51cce65afd9a6357277c4339d7cf56814e476e",
        "patch": "@@ -191,6 +191,12 @@ std::vector<unsigned char> DecodeBase64(const char* p, bool* pf_invalid)\n \n std::string DecodeBase64(const std::string& str, bool* pf_invalid)\n {\n+    if (!ValidAsCString(str)) {\n+        if (pf_invalid) {\n+            *pf_invalid = true;\n+        }\n+        return {};\n+    }\n     std::vector<unsigned char> vchRet = DecodeBase64(str.c_str(), pf_invalid);\n     return std::string((const char*)vchRet.data(), vchRet.size());\n }\n@@ -260,6 +266,12 @@ std::vector<unsigned char> DecodeBase32(const char* p, bool* pf_invalid)\n \n std::string DecodeBase32(const std::string& str, bool* pf_invalid)\n {\n+    if (!ValidAsCString(str)) {\n+        if (pf_invalid) {\n+            *pf_invalid = true;\n+        }\n+        return {};\n+    }\n     std::vector<unsigned char> vchRet = DecodeBase32(str.c_str(), pf_invalid);\n     return std::string((const char*)vchRet.data(), vchRet.size());\n }"
      }
    ]
  },
  {
    "sha": "806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDZhMmM2MDJjZGYxZGYxN2IwYjkyMjU4YmIwZDdkY2EyZWUxZWU5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-16T15:23:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-16T15:23:22Z"
      },
      "message": "Merge #17071: tests: Add fuzzing harness for CheckBlock(...) and other CBlock related functions\n\n893aa207e84b74e7623243967d29f03570fdfd6f tests: Add fuzzing harness for CheckBlock(...) and other CBlock related functions (practicalswift)\nec8dcb0199c6d6ae47a13abbd158f59532554adb tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus (practicalswift)\n\nPull request description:\n\n  Add fuzzing harness for `CheckBlock(...)` and other `CBlock` related functions.\n\n  **Testing this PR**\n\n  Run:\n\n  ```\n  $ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n  $ make\n  $ src/test/fuzz/block\n  \u2026\n  # And to to quickly verify that the relevant code regions are triggered, that the\n  # fuzzing throughput seems reasonable, etc.\n  $ contrib/devtools/test_fuzzing_harnesses.sh '^block$'\n  ```\n\n  `test_fuzzing_harnesses.sh` can be found in PR #17000.\n\nTop commit has no ACKs.\n\nTree-SHA512: 275abd46d8ac970b28d8176f59124988b1e07c070173e001acd55995b830333417f301c309199fc589da08a6ac4c03aa74650d5e1638f6e3023dfbd3c9f6921d",
      "tree": {
        "sha": "e86cc56ff189611d6205cd33a86dc9c3c58f3fa1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e86cc56ff189611d6205cd33a86dc9c3c58f3fa1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUh14wv+PsQZLy7QN0iCJoHoz0m15Gip/QYWy4+66lGL9a7SIBpjd/vkds0Y4s+D\n6Uo0a+cBUGMvrjaUgG83DbwBvPcgOwUKkkPwrKY8OoJp6Duzc3BRDjLYHqhX68Vn\niqLNkt67rdajCLDwjbMeKUk577aECuPPpnDOvbhLom+O/NSCqBuqmVmI15tLFkb1\nzOlNKlMNpeg04W4eRGToVmcJbDOUpywmjXr6F2yGuOWCZ3cBZKN01Qh6M766goG0\n5mYcTHEdkfcxTRSQxyuvnLJs3LndbRF6SoCQqMQU8UWE0MChEbRELFCj8JZc8k3X\nglf9U8RV8DeIL5SkILYjEMFRH6sUEyXn1NTENUdkSYVYP2/tZxZwizDzguiu4hze\n7KrdgJUayY3lB5Ea5cTEe4rKluWrijUCWbqb8upnvX9fPIbTmsxwfGkaxFHmz3u/\nXb1SfDXFUtF05Nsh2AmLKl4v3Vo7f9KLCTOVEPqys1gdmmYITkuO3oNeYbmh/hXz\ntM3xGp7e\n=IAJi\n-----END PGP SIGNATURE-----",
        "payload": "tree e86cc56ff189611d6205cd33a86dc9c3c58f3fa1\nparent 6b51cce65afd9a6357277c4339d7cf56814e476e\nparent 893aa207e84b74e7623243967d29f03570fdfd6f\nauthor MarcoFalke <falke.marco@gmail.com> 1576509790 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576509802 -0500\n\nMerge #17071: tests: Add fuzzing harness for CheckBlock(...) and other CBlock related functions\n\n893aa207e84b74e7623243967d29f03570fdfd6f tests: Add fuzzing harness for CheckBlock(...) and other CBlock related functions (practicalswift)\nec8dcb0199c6d6ae47a13abbd158f59532554adb tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus (practicalswift)\n\nPull request description:\n\n  Add fuzzing harness for `CheckBlock(...)` and other `CBlock` related functions.\n\n  **Testing this PR**\n\n  Run:\n\n  ```\n  $ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n  $ make\n  $ src/test/fuzz/block\n  \u2026\n  # And to to quickly verify that the relevant code regions are triggered, that the\n  # fuzzing throughput seems reasonable, etc.\n  $ contrib/devtools/test_fuzzing_harnesses.sh '^block$'\n  ```\n\n  `test_fuzzing_harnesses.sh` can be found in PR #17000.\n\nTop commit has no ACKs.\n\nTree-SHA512: 275abd46d8ac970b28d8176f59124988b1e07c070173e001acd55995b830333417f301c309199fc589da08a6ac4c03aa74650d5e1638f6e3023dfbd3c9f6921d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b51cce65afd9a6357277c4339d7cf56814e476e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b51cce65afd9a6357277c4339d7cf56814e476e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b51cce65afd9a6357277c4339d7cf56814e476e"
      },
      {
        "sha": "893aa207e84b74e7623243967d29f03570fdfd6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/893aa207e84b74e7623243967d29f03570fdfd6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/893aa207e84b74e7623243967d29f03570fdfd6f"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 71,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a8845b4c7d9b677369df516aca85eb10edf136c1",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9",
        "patch": "@@ -9,6 +9,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/addrman_deserialize \\\n   test/fuzz/banentry_deserialize \\\n   test/fuzz/bech32 \\\n+  test/fuzz/block \\\n   test/fuzz/block_deserialize \\\n   test/fuzz/block_file_info_deserialize \\\n   test/fuzz/block_filter_deserialize \\\n@@ -229,6 +230,12 @@ test_test_bitcoin_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n \n if ENABLE_FUZZ\n+test_fuzz_block_SOURCES = $(FUZZ_SUITE) test/fuzz/block.cpp\n+test_fuzz_block_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_block_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n test_fuzz_block_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_block_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_DESERIALIZE=1\n test_fuzz_block_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "431248de4a7a578fad210db61a566b1446606b3e",
        "filename": "src/test/fuzz/block.cpp",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9/src/test/fuzz/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9/src/test/fuzz/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/block.cpp?ref=806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9",
        "patch": "@@ -0,0 +1,63 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <core_io.h>\n+#include <core_memusage.h>\n+#include <pubkey.h>\n+#include <primitives/block.h>\n+#include <streams.h>\n+#include <test/fuzz/fuzz.h>\n+#include <validation.h>\n+#include <version.h>\n+\n+#include <cassert>\n+#include <string>\n+\n+void initialize()\n+{\n+    const static auto verify_handle = MakeUnique<ECCVerifyHandle>();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n+    CBlock block;\n+    try {\n+        int nVersion;\n+        ds >> nVersion;\n+        ds.SetVersion(nVersion);\n+        ds >> block;\n+    } catch (const std::ios_base::failure&) {\n+        return;\n+    }\n+    const Consensus::Params& consensus_params = Params().GetConsensus();\n+    BlockValidationState validation_state_pow_and_merkle;\n+    const bool valid_incl_pow_and_merkle = CheckBlock(block, validation_state_pow_and_merkle, consensus_params, /* fCheckPOW= */ true, /* fCheckMerkleRoot= */ true);\n+    BlockValidationState validation_state_pow;\n+    const bool valid_incl_pow = CheckBlock(block, validation_state_pow, consensus_params, /* fCheckPOW= */ true, /* fCheckMerkleRoot= */ false);\n+    BlockValidationState validation_state_merkle;\n+    const bool valid_incl_merkle = CheckBlock(block, validation_state_merkle, consensus_params, /* fCheckPOW= */ false, /* fCheckMerkleRoot= */ true);\n+    BlockValidationState validation_state_none;\n+    const bool valid_incl_none = CheckBlock(block, validation_state_none, consensus_params, /* fCheckPOW= */ false, /* fCheckMerkleRoot= */ false);\n+    if (valid_incl_pow_and_merkle) {\n+        assert(valid_incl_pow && valid_incl_merkle && valid_incl_none);\n+    } else if (valid_incl_merkle || valid_incl_pow) {\n+        assert(valid_incl_none);\n+    }\n+    (void)block.GetHash();\n+    (void)block.ToString();\n+    (void)BlockMerkleRoot(block);\n+    if (!block.vtx.empty()) {\n+        // TODO: Avoid array index out of bounds error in BlockWitnessMerkleRoot\n+        //       when block.vtx.empty().\n+        (void)BlockWitnessMerkleRoot(block);\n+    }\n+    (void)GetBlockWeight(block);\n+    (void)GetWitnessCommitmentIndex(block);\n+    (void)RecursiveDynamicUsage(block);\n+}"
      },
      {
        "sha": "8b503d83bf4ace8bc4fd90b65449bae1ef5ec931",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9",
        "patch": "@@ -15,6 +15,7 @@\n # Fuzzers known to lack a seed corpus in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus\n FUZZERS_MISSING_CORPORA = [\n     \"addr_info_deserialize\",\n+    \"block\",\n     \"block_file_info_deserialize\",\n     \"block_filter_deserialize\",\n     \"block_header_and_short_txids_deserialize\","
      }
    ]
  },
  {
    "sha": "fa8e650b525e9493bdfa393c0c3e34cb22c78c08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYThlNjUwYjUyNWU5NDkzYmRmYTM5M2MwYzNlMzRjYjIyYzc4YzA4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-22T21:17:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-16T15:45:22Z"
      },
      "message": "rest: Use mempool from node context instead of global",
      "tree": {
        "sha": "19b73eeda69ab1b03ade40dad2d5a9bbbee4486f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19b73eeda69ab1b03ade40dad2d5a9bbbee4486f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa8e650b525e9493bdfa393c0c3e34cb22c78c08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhKjQv/VuhpGreoZdQOOudjvy7fMmXnihwRyI6MD1qf/c3W1rIn1DmLvnZB8+LK\nf84oqeSZg53PLi2eL1MEzy4NydzzgZ8O4doYmFaoi8OI31TFZpYckAjNxI1Zy6Js\nDtE7TY7A+4ocGiuwp95595lyMI3k0EQJslrv+wbwo4CrocRYbxETJUMUKZa0pa5M\nu9sNMkFo3mXRuqieKqQLM+EngfO9iugKVIkb7RaZqiaM17x9FwGxRfbhztWDhnN3\nbPBU2M1QR/Cx2rfFRc0WDNvP7AlwwInWcmyw7WW9Yudt/K9RDdNP77QXM7R834eN\n7RcNs2Z64+zauE9X8LcIi0pu4EwSI+PKxaooiU5xsUj1Rkb6Z7/caGAzZ2/5dX/A\naF2F4WgcoL84HftjOTvwp6h20Fwh5bGdJhFP0BEjfkl1qK2zK2KqOBJiPsLgT/GD\ny6cVwXvLi495wmiek/zQrXd7LKAUMxAxO3afvFY+kGIieenEZ5FU+CPSBqsSQust\ncsk+b5Xj\n=1VTn\n-----END PGP SIGNATURE-----",
        "payload": "tree 19b73eeda69ab1b03ade40dad2d5a9bbbee4486f\nparent fa660d65d7cc401ad5bbfdc076a074de19a79329\nauthor MarcoFalke <falke.marco@gmail.com> 1574457468 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576511122 -0500\n\nrest: Use mempool from node context instead of global\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8e650b525e9493bdfa393c0c3e34cb22c78c08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8e650b525e9493bdfa393c0c3e34cb22c78c08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8e650b525e9493bdfa393c0c3e34cb22c78c08/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa660d65d7cc401ad5bbfdc076a074de19a79329",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa660d65d7cc401ad5bbfdc076a074de19a79329"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 32,
      "deletions": 7
    },
    "files": [
      {
        "sha": "55756ecfdf312ed88fb1c1cfd918b283ff8d9f3b",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 7,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e650b525e9493bdfa393c0c3e34cb22c78c08/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e650b525e9493bdfa393c0c3e34cb22c78c08/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=fa8e650b525e9493bdfa393c0c3e34cb22c78c08",
        "patch": "@@ -8,6 +8,7 @@\n #include <core_io.h>\n #include <httpserver.h>\n #include <index/txindex.h>\n+#include <node/context.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <rpc/blockchain.h>\n@@ -16,6 +17,7 @@\n #include <streams.h>\n #include <sync.h>\n #include <txmempool.h>\n+#include <util/check.h>\n #include <util/strencodings.h>\n #include <validation.h>\n #include <version.h>\n@@ -69,6 +71,24 @@ static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string me\n     return false;\n }\n \n+/**\n+ * Get the node context mempool.\n+ *\n+ * Set the HTTP error and return nullptr if node context\n+ * mempool is not found.\n+ *\n+ * @param[in]  req the HTTP request\n+ * return pointer to the mempool or nullptr if no mempool found\n+ */\n+static CTxMemPool* GetMemPool(HTTPRequest* req)\n+{\n+    if (!g_rpc_node || !g_rpc_node->mempool) {\n+        RESTERR(req, HTTP_NOT_FOUND, \"Mempool disabled or instance not found\");\n+        return nullptr;\n+    }\n+    return g_rpc_node->mempool;\n+}\n+\n static RetFormat ParseDataFormat(std::string& param, const std::string& strReq)\n {\n     const std::string::size_type pos = strReq.rfind('.');\n@@ -295,12 +315,14 @@ static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n+    const CTxMemPool* mempool = GetMemPool(req);\n+    if (!mempool) return false;\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     switch (rf) {\n     case RetFormat::JSON: {\n-        UniValue mempoolInfoObject = MempoolInfoToJSON(::mempool);\n+        UniValue mempoolInfoObject = MempoolInfoToJSON(*mempool);\n \n         std::string strJSON = mempoolInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n@@ -315,14 +337,15 @@ static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n \n static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPart)\n {\n-    if (!CheckWarmup(req))\n-        return false;\n+    if (!CheckWarmup(req)) return false;\n+    const CTxMemPool* mempool = GetMemPool(req);\n+    if (!mempool) return false;\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     switch (rf) {\n     case RetFormat::JSON: {\n-        UniValue mempoolObject = MempoolToJSON(::mempool, true);\n+        UniValue mempoolObject = MempoolToJSON(*mempool, true);\n \n         std::string strJSON = mempoolObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n@@ -500,11 +523,13 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         };\n \n         if (fCheckMemPool) {\n+            const CTxMemPool* mempool = GetMemPool(req);\n+            if (!mempool) return false;\n             // use db+mempool as cache backend in case user likes to query mempool\n-            LOCK2(cs_main, mempool.cs);\n+            LOCK2(cs_main, mempool->cs);\n             CCoinsViewCache& viewChain = ::ChainstateActive().CoinsTip();\n-            CCoinsViewMemPool viewMempool(&viewChain, mempool);\n-            process_utxos(viewMempool, mempool);\n+            CCoinsViewMemPool viewMempool(&viewChain, *mempool);\n+            process_utxos(viewMempool, *mempool);\n         } else {\n             LOCK(cs_main);  // no need to lock mempool!\n             process_utxos(::ChainstateActive().CoinsTip(), CTxMemPool());"
      }
    ]
  },
  {
    "sha": "988eaf2fcb71284c5fc57c7ef755bdafa4b929a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODhlYWYyZmNiNzEyODRjNWZjNTdjN2VmNzU1YmRhZmE0YjkyOWEw",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-16T15:45:29Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-16T16:00:03Z"
      },
      "message": "Merge #17752: doc: fix directory path for secp256k1 subtree in developer-notes\n\na5089f62bda9a39c1d6cbba285477670f1aa1f3f fix directory path for secp256k1 subtree in developer-notes (hackerrdave)\n\nPull request description:\n\n  Documentation update to fix the directory path of the `secp256k1` subtree in the developer notes\n\nACKs for top commit:\n  laanwj:\n    ACK a5089f62bda9a39c1d6cbba285477670f1aa1f3f\n\nTree-SHA512: d0986721d7091af26edaee769db78c9aabac25bbaddb2a1bfa96c7208187226e280e9c38897b5227ee6c9e40d5a1af86bb7c58e72c6a30a94a478c4bf54c086e",
      "tree": {
        "sha": "e59ea8b1765ce0176d2af762535ebbd5e49d62f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e59ea8b1765ce0176d2af762535ebbd5e49d62f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/988eaf2fcb71284c5fc57c7ef755bdafa4b929a0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl33qgMACgkQLuufXMCV\nJsFsixAAm/yHNBDIf3sXlZtdpJeCNIFiFaeJTZdoH58FuKJcl2IR5TCU1SCOoHsy\naX183Ghz91EdCJxD6NO2uvmST1RRBNnm8s9oNAqsXFZoY51dndrm+DbmkJuQG5Lv\np/YtmUiDqNbAmgs+F35OiS/ebd6tsUoEp2G96w3UXn/1XTK2bHG5DQGSGQhRC8XT\nLpva11ku7OZHvwCtUT5MbmBqtcL/PPWd+hKjy2bwSyKJNmbuUjmeqUkIgWy31BQ8\nleZ7fc7j5ynDRa7IeqKyBsV3t+LNMAkiUayFEsaZ2k1UWLMX/fP7xGpx9asOUwa3\nTWkqYFMT9BFsr9OTUkwE0XI0d07/ApA3ifbRbo6vV/uRCrJ4TWaoBifwHtZJvSVV\n3s9P3aSQpep/2GLywD2GELQGGAYTengdSYxzmlou0NuysYnZgyQI/A5LnksdQKSZ\n4pSZLvsecbueBni8ZkaKFFRBWOa1NNdZ4t0W0jFVaKbBfZPBZ6PO74mw0SYtH0d9\nbLqGAO4NfPDg/r+hKBhMzGLzMiZJXAGeQZWC+8wTSFWP1r5jSOcAylzKE8+KUJ98\nV5EnWCPF95OITZGqjbuxSldwmU1WnUikkUY8fQWNos3Q4uceIaKl0IxFJV/f6sMh\n822DUqo/PsIpyfec3ERnPY2G2fNwJe5L7oVq/SKA1g6wCJo/Yvw=\n=miNR\n-----END PGP SIGNATURE-----",
        "payload": "tree e59ea8b1765ce0176d2af762535ebbd5e49d62f7\nparent 806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9\nparent a5089f62bda9a39c1d6cbba285477670f1aa1f3f\nauthor fanquake <fanquake@gmail.com> 1576511129 -0500\ncommitter fanquake <fanquake@gmail.com> 1576512003 -0500\n\nMerge #17752: doc: fix directory path for secp256k1 subtree in developer-notes\n\na5089f62bda9a39c1d6cbba285477670f1aa1f3f fix directory path for secp256k1 subtree in developer-notes (hackerrdave)\n\nPull request description:\n\n  Documentation update to fix the directory path of the `secp256k1` subtree in the developer notes\n\nACKs for top commit:\n  laanwj:\n    ACK a5089f62bda9a39c1d6cbba285477670f1aa1f3f\n\nTree-SHA512: d0986721d7091af26edaee769db78c9aabac25bbaddb2a1bfa96c7208187226e280e9c38897b5227ee6c9e40d5a1af86bb7c58e72c6a30a94a478c4bf54c086e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988eaf2fcb71284c5fc57c7ef755bdafa4b929a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/988eaf2fcb71284c5fc57c7ef755bdafa4b929a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988eaf2fcb71284c5fc57c7ef755bdafa4b929a0/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/806a2c602cdf1df17b0b92258bb0d7dca2ee1ee9"
      },
      {
        "sha": "a5089f62bda9a39c1d6cbba285477670f1aa1f3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5089f62bda9a39c1d6cbba285477670f1aa1f3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5089f62bda9a39c1d6cbba285477670f1aa1f3f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b50f552e9203652a5be1f18bbbeda44cc5b0ce30",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988eaf2fcb71284c5fc57c7ef755bdafa4b929a0/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988eaf2fcb71284c5fc57c7ef755bdafa4b929a0/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=988eaf2fcb71284c5fc57c7ef755bdafa4b929a0",
        "patch": "@@ -820,7 +820,7 @@ Current subtrees include:\n   - **Note**: Follow the instructions in [Upgrading LevelDB](#upgrading-leveldb) when\n     merging upstream changes to the LevelDB subtree.\n \n-- src/libsecp256k1\n+- src/secp256k1\n   - Upstream at https://github.com/bitcoin-core/secp256k1/ ; actively maintained by Core contributors.\n \n - src/crypto/ctaes"
      }
    ]
  },
  {
    "sha": "48d64d73c06f4d5db3ad35bed87388ff0795d511",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGQ2NGQ3M2MwNmY0ZDVkYjNhZDM1YmVkODczODhmZjA3OTVkNTEx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-16T21:02:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-16T21:05:06Z"
      },
      "message": "Merge #17564: rpc: Use mempool from node context instead of global\n\nfa8e650b525e9493bdfa393c0c3e34cb22c78c08 rest: Use mempool from node context instead of global (MarcoFalke)\nfa660d65d7cc401ad5bbfdc076a074de19a79329 node: Use mempool from node context instead of global (MarcoFalke)\nfacbaf092f1ab298943206603cff6e6e3d30d452 rpc: Use mempool from node context instead of global (MarcoFalke)\n\nPull request description:\n\n  Currently they are identical, but in the future we might want to turn\n  the mempool into a unique_ptr. Replacing the global with the mempool\n  pointer from the node context simplifies this step.\n\nACKs for top commit:\n  jnewbery:\n    Code review ACK fa8e650b5\n  ryanofsky:\n    Code review ACK fa8e650b525e9493bdfa393c0c3e34cb22c78c08, Only the discussed REST server changes since the last review.\n\nTree-SHA512: 0836f3f39cf90306455962918446e5f8612e88c32072b92afc30929aea1f17430bbda0e2b3668d36c9d6b97d63a93cf4903185194571108642b7bf5a39b89125",
      "tree": {
        "sha": "a38549f55e4108b7a95cf0d64f1283296c99ee5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a38549f55e4108b7a95cf0d64f1283296c99ee5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48d64d73c06f4d5db3ad35bed87388ff0795d511",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYEACgkQzit1aX5p\npUh1wwv/bj1sjoAGnUFjUdQC+9DevnInvTDGxTC1vmp3IqIKg0cOjgXLWgx8fGPO\nF613HUDa9UBLVTbQ6mrd0dznLlGWvFtDB37nAhYFOzUGUQuB0/JfSEOkdPswNigd\nn3PNd4JqK/HJBd5xhxtgZ88Z+8cHUvOCmTxbEMGxEmBmP75kixDiBYc3hLSphGcM\nmj3jjofJMS4XFpWErcpIIXl6seYM11REMNHzxsE+fSNm6Z3HXtPcDXzUn75y3ujh\n7LJfVOBv5aNL0mPccoalA1rqxzIwtySO9UyiK/SNSrYdoDR+DDmzP+KxFcLuGT0Q\nuY/tk0KTZAyGj+Ki+7ksVpsntd5HF0aw53NUictPok63Q59nOfj80Z5rZ7lg33+5\niZ6NkF8/4D2sRWLuhIw4ZsLtPunizqK458/50KiDgEExq+k0WCyHlG6NsetBpjeG\nxfmzbcRjDYlClxWPsBkmT+B75duIDGYO6lWnJG1tmQlaGQH4nCS6UqlBU7ps9NdJ\nLEmS8krV\n=vwkz\n-----END PGP SIGNATURE-----",
        "payload": "tree a38549f55e4108b7a95cf0d64f1283296c99ee5e\nparent 988eaf2fcb71284c5fc57c7ef755bdafa4b929a0\nparent fa8e650b525e9493bdfa393c0c3e34cb22c78c08\nauthor MarcoFalke <falke.marco@gmail.com> 1576530173 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576530306 -0500\n\nMerge #17564: rpc: Use mempool from node context instead of global\n\nfa8e650b525e9493bdfa393c0c3e34cb22c78c08 rest: Use mempool from node context instead of global (MarcoFalke)\nfa660d65d7cc401ad5bbfdc076a074de19a79329 node: Use mempool from node context instead of global (MarcoFalke)\nfacbaf092f1ab298943206603cff6e6e3d30d452 rpc: Use mempool from node context instead of global (MarcoFalke)\n\nPull request description:\n\n  Currently they are identical, but in the future we might want to turn\n  the mempool into a unique_ptr. Replacing the global with the mempool\n  pointer from the node context simplifies this step.\n\nACKs for top commit:\n  jnewbery:\n    Code review ACK fa8e650b5\n  ryanofsky:\n    Code review ACK fa8e650b525e9493bdfa393c0c3e34cb22c78c08, Only the discussed REST server changes since the last review.\n\nTree-SHA512: 0836f3f39cf90306455962918446e5f8612e88c32072b92afc30929aea1f17430bbda0e2b3668d36c9d6b97d63a93cf4903185194571108642b7bf5a39b89125\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48d64d73c06f4d5db3ad35bed87388ff0795d511",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48d64d73c06f4d5db3ad35bed87388ff0795d511",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48d64d73c06f4d5db3ad35bed87388ff0795d511/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "988eaf2fcb71284c5fc57c7ef755bdafa4b929a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988eaf2fcb71284c5fc57c7ef755bdafa4b929a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/988eaf2fcb71284c5fc57c7ef755bdafa4b929a0"
      },
      {
        "sha": "fa8e650b525e9493bdfa393c0c3e34cb22c78c08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8e650b525e9493bdfa393c0c3e34cb22c78c08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8e650b525e9493bdfa393c0c3e34cb22c78c08"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 68,
      "deletions": 30
    },
    "files": [
      {
        "sha": "ac640aa35a7e80c4f0fd142a72ee74c7d9c50e94",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=48d64d73c06f4d5db3ad35bed87388ff0795d511",
        "patch": "@@ -263,7 +263,7 @@ class ChainImpl : public Chain\n         }\n         return true;\n     }\n-    void findCoins(std::map<COutPoint, Coin>& coins) override { return FindCoins(coins); }\n+    void findCoins(std::map<COutPoint, Coin>& coins) override { return FindCoins(m_node, coins); }\n     double guessVerificationProgress(const uint256& block_hash) override\n     {\n         LOCK(cs_main);"
      },
      {
        "sha": "24695c1afc2f71e3c8d7c987b908af826d3ee107",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=48d64d73c06f4d5db3ad35bed87388ff0795d511",
        "patch": "@@ -167,8 +167,8 @@ class NodeImpl : public Node\n     }\n     int64_t getTotalBytesRecv() override { return m_context.connman ? m_context.connman->GetTotalBytesRecv() : 0; }\n     int64_t getTotalBytesSent() override { return m_context.connman ? m_context.connman->GetTotalBytesSent() : 0; }\n-    size_t getMempoolSize() override { return ::mempool.size(); }\n-    size_t getMempoolDynamicUsage() override { return ::mempool.DynamicMemoryUsage(); }\n+    size_t getMempoolSize() override { return m_context.mempool ? m_context.mempool->size() : 0; }\n+    size_t getMempoolDynamicUsage() override { return m_context.mempool ? m_context.mempool->DynamicMemoryUsage() : 0; }\n     bool getHeaderTip(int& height, int64_t& block_time) override\n     {\n         LOCK(::cs_main);"
      },
      {
        "sha": "f4f86cdbe9667e598714b8ace3b1347eafb6b687",
        "filename": "src/node/coin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/node/coin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/node/coin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.cpp?ref=48d64d73c06f4d5db3ad35bed87388ff0795d511",
        "patch": "@@ -4,14 +4,16 @@\n \n #include <node/coin.h>\n \n+#include <node/context.h>\n #include <txmempool.h>\n #include <validation.h>\n \n-void FindCoins(std::map<COutPoint, Coin>& coins)\n+void FindCoins(const NodeContext& node, std::map<COutPoint, Coin>& coins)\n {\n-    LOCK2(cs_main, ::mempool.cs);\n+    assert(node.mempool);\n+    LOCK2(cs_main, node.mempool->cs);\n     CCoinsViewCache& chain_view = ::ChainstateActive().CoinsTip();\n-    CCoinsViewMemPool mempool_view(&chain_view, ::mempool);\n+    CCoinsViewMemPool mempool_view(&chain_view, *node.mempool);\n     for (auto& coin : coins) {\n         if (!mempool_view.GetCoin(coin.first, coin.second)) {\n             // Either the coin is not in the CCoinsViewCache or is spent. Clear it."
      },
      {
        "sha": "908850e2a5ac3fcbc6b6c35182fea7ae13b6351f",
        "filename": "src/node/coin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/node/coin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/node/coin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.h?ref=48d64d73c06f4d5db3ad35bed87388ff0795d511",
        "patch": "@@ -9,14 +9,16 @@\n \n class COutPoint;\n class Coin;\n+struct NodeContext;\n \n /**\n  * Look up unspent output information. Returns coins in the mempool and in the\n  * current chain UTXO set. Iterates through all the keys in the map and\n  * populates the values.\n  *\n+ * @param[in] node The node context to use for lookup\n  * @param[in,out] coins map to fill\n  */\n-void FindCoins(std::map<COutPoint, Coin>& coins);\n+void FindCoins(const NodeContext& node, std::map<COutPoint, Coin>& coins);\n \n #endif // BITCOIN_NODE_COIN_H"
      },
      {
        "sha": "5e2e50201598b913fa847ff6bdaded844dcd3ec9",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=48d64d73c06f4d5db3ad35bed87388ff0795d511",
        "patch": "@@ -20,6 +20,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     // node.connman is assigned both before chain clients and before RPC server is accepting calls,\n     // and reset after chain clients and RPC sever are stopped. node.connman should never be null here.\n     assert(node.connman);\n+    assert(node.mempool);\n     std::promise<void> promise;\n     uint256 hashTx = tx->GetHash();\n     bool callback_set = false;\n@@ -35,10 +36,10 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         // So if the output does exist, then this transaction exists in the chain.\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n-    if (!mempool.exists(hashTx)) {\n+    if (!node.mempool->exists(hashTx)) {\n         // Transaction is not already in the mempool. Submit it.\n         TxValidationState state;\n-        if (!AcceptToMemoryPool(mempool, state, std::move(tx),\n+        if (!AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n                 nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n             err_string = FormatStateMessage(state);\n             if (state.IsInvalid()) {"
      },
      {
        "sha": "f6d2816ff81e08c0b79c3d20c219d58add7fefde",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=48d64d73c06f4d5db3ad35bed87388ff0795d511",
        "patch": "@@ -134,6 +134,7 @@ void TestGUI(interfaces::Node& node)\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n     node.context()->connman = std::move(test.m_node.connman);\n+    node.context()->mempool = std::move(test.m_node.mempool);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);"
      },
      {
        "sha": "55756ecfdf312ed88fb1c1cfd918b283ff8d9f3b",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 7,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=48d64d73c06f4d5db3ad35bed87388ff0795d511",
        "patch": "@@ -8,6 +8,7 @@\n #include <core_io.h>\n #include <httpserver.h>\n #include <index/txindex.h>\n+#include <node/context.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <rpc/blockchain.h>\n@@ -16,6 +17,7 @@\n #include <streams.h>\n #include <sync.h>\n #include <txmempool.h>\n+#include <util/check.h>\n #include <util/strencodings.h>\n #include <validation.h>\n #include <version.h>\n@@ -69,6 +71,24 @@ static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string me\n     return false;\n }\n \n+/**\n+ * Get the node context mempool.\n+ *\n+ * Set the HTTP error and return nullptr if node context\n+ * mempool is not found.\n+ *\n+ * @param[in]  req the HTTP request\n+ * return pointer to the mempool or nullptr if no mempool found\n+ */\n+static CTxMemPool* GetMemPool(HTTPRequest* req)\n+{\n+    if (!g_rpc_node || !g_rpc_node->mempool) {\n+        RESTERR(req, HTTP_NOT_FOUND, \"Mempool disabled or instance not found\");\n+        return nullptr;\n+    }\n+    return g_rpc_node->mempool;\n+}\n+\n static RetFormat ParseDataFormat(std::string& param, const std::string& strReq)\n {\n     const std::string::size_type pos = strReq.rfind('.');\n@@ -295,12 +315,14 @@ static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n+    const CTxMemPool* mempool = GetMemPool(req);\n+    if (!mempool) return false;\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     switch (rf) {\n     case RetFormat::JSON: {\n-        UniValue mempoolInfoObject = MempoolInfoToJSON(::mempool);\n+        UniValue mempoolInfoObject = MempoolInfoToJSON(*mempool);\n \n         std::string strJSON = mempoolInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n@@ -315,14 +337,15 @@ static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n \n static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPart)\n {\n-    if (!CheckWarmup(req))\n-        return false;\n+    if (!CheckWarmup(req)) return false;\n+    const CTxMemPool* mempool = GetMemPool(req);\n+    if (!mempool) return false;\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     switch (rf) {\n     case RetFormat::JSON: {\n-        UniValue mempoolObject = MempoolToJSON(::mempool, true);\n+        UniValue mempoolObject = MempoolToJSON(*mempool, true);\n \n         std::string strJSON = mempoolObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n@@ -500,11 +523,13 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         };\n \n         if (fCheckMemPool) {\n+            const CTxMemPool* mempool = GetMemPool(req);\n+            if (!mempool) return false;\n             // use db+mempool as cache backend in case user likes to query mempool\n-            LOCK2(cs_main, mempool.cs);\n+            LOCK2(cs_main, mempool->cs);\n             CCoinsViewCache& viewChain = ::ChainstateActive().CoinsTip();\n-            CCoinsViewMemPool viewMempool(&viewChain, mempool);\n-            process_utxos(viewMempool, mempool);\n+            CCoinsViewMemPool viewMempool(&viewChain, *mempool);\n+            process_utxos(viewMempool, *mempool);\n         } else {\n             LOCK(cs_main);  // no need to lock mempool!\n             process_utxos(::ChainstateActive().CoinsTip(), CTxMemPool());"
      },
      {
        "sha": "02f610d841a40c4f22a1457553273b3471b94592",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=48d64d73c06f4d5db3ad35bed87388ff0795d511",
        "patch": "@@ -528,7 +528,7 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n     if (!request.params[0].isNull())\n         fVerbose = request.params[0].get_bool();\n \n-    return MempoolToJSON(::mempool, fVerbose);\n+    return MempoolToJSON(EnsureMemPool(), fVerbose);\n }\n \n static UniValue getmempoolancestors(const JSONRPCRequest& request)\n@@ -566,6 +566,7 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n+    const CTxMemPool& mempool = EnsureMemPool();\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -591,7 +592,7 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n             const CTxMemPoolEntry &e = *ancestorIt;\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n-            entryToJSON(::mempool, info, e);\n+            entryToJSON(mempool, info, e);\n             o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n@@ -633,6 +634,7 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n+    const CTxMemPool& mempool = EnsureMemPool();\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -658,7 +660,7 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n             const CTxMemPoolEntry &e = *descendantIt;\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n-            entryToJSON(::mempool, info, e);\n+            entryToJSON(mempool, info, e);\n             o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n@@ -685,6 +687,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n+    const CTxMemPool& mempool = EnsureMemPool();\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -694,7 +697,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n \n     const CTxMemPoolEntry &e = *it;\n     UniValue info(UniValue::VOBJ);\n-    entryToJSON(::mempool, info, e);\n+    entryToJSON(mempool, info, e);\n     return info;\n }\n \n@@ -1070,6 +1073,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n     CCoinsViewCache* coins_view = &::ChainstateActive().CoinsTip();\n \n     if (fMempool) {\n+        const CTxMemPool& mempool = EnsureMemPool();\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(coins_view, mempool);\n         if (!view.GetCoin(out, coin) || mempool.isSpent(out)) {\n@@ -1448,7 +1452,7 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    return MempoolInfoToJSON(::mempool);\n+    return MempoolInfoToJSON(EnsureMemPool());\n }\n \n static UniValue preciousblock(const JSONRPCRequest& request)\n@@ -1964,11 +1968,13 @@ static UniValue savemempool(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if (!::mempool.IsLoaded()) {\n+    const CTxMemPool& mempool = EnsureMemPool();\n+\n+    if (!mempool.IsLoaded()) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"The mempool was not loaded yet\");\n     }\n \n-    if (!DumpMempool(::mempool)) {\n+    if (!DumpMempool(mempool)) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Unable to dump mempool to disk\");\n     }\n "
      },
      {
        "sha": "5017e5b9d9244f11c9e0f7d31e530a6150a67a78",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=48d64d73c06f4d5db3ad35bed87388ff0795d511",
        "patch": "@@ -244,6 +244,7 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n             }.Check(request);\n \n     LOCK(cs_main);\n+    const CTxMemPool& mempool = EnsureMemPool();\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"blocks\",           (int)::ChainActive().Height());\n@@ -290,7 +291,7 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Priority is no longer supported, dummy argument to prioritisetransaction must be 0.\");\n     }\n \n-    mempool.PrioritiseTransaction(hash, nAmount);\n+    EnsureMemPool().PrioritiseTransaction(hash, nAmount);\n     return true;\n }\n \n@@ -476,6 +477,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, PACKAGE_NAME \" is in initial sync and waiting for blocks...\");\n \n     static unsigned int nTransactionsUpdatedLast;\n+    const CTxMemPool& mempool = EnsureMemPool();\n \n     if (!lpval.isNull())\n     {\n@@ -510,7 +512,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                 if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n                     // Timeout: Check transactions for update\n-                    // without holding ::mempool.cs to avoid deadlocks\n+                    // without holding the mempool lock to avoid deadlocks\n                     if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\n                         break;\n                     checktxtime += std::chrono::seconds(10);"
      },
      {
        "sha": "5be7acce1ca4ae04842521778b576e2853706d69",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=48d64d73c06f4d5db3ad35bed87388ff0795d511",
        "patch": "@@ -636,6 +636,7 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n+        const CTxMemPool& mempool = EnsureMemPool();\n         LOCK(cs_main);\n         LOCK(mempool.cs);\n         CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n@@ -758,7 +759,7 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n     for (const CTxIn& txin : mtx.vin) {\n         coins[txin.prevout]; // Create empty map entry keyed by prevout.\n     }\n-    FindCoins(coins);\n+    FindCoins(*g_rpc_node, coins);\n \n     // Parse the prevtxs array\n     ParsePrevouts(request.params[2], &keystore, coins);\n@@ -890,6 +891,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n         max_raw_tx_fee_rate = CFeeRate(AmountFromValue(request.params[1]));\n     }\n \n+    CTxMemPool& mempool = EnsureMemPool();\n     int64_t virtual_size = GetVirtualTransactionSize(*tx);\n     CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n \n@@ -1508,6 +1510,7 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n+        const CTxMemPool& mempool = EnsureMemPool();\n         LOCK2(cs_main, mempool.cs);\n         CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);"
      },
      {
        "sha": "84a3980b195c82610753b3224574bd68b692a517",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48d64d73c06f4d5db3ad35bed87388ff0795d511/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=48d64d73c06f4d5db3ad35bed87388ff0795d511",
        "patch": "@@ -112,14 +112,10 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     std::string notsigned = r.get_str();\n     std::string privkey1 = \"\\\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\\\"\";\n     std::string privkey2 = \"\\\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\\\"\";\n-    NodeContext node;\n-    node.chain = interfaces::MakeChain(node);\n-    g_rpc_node = &node;\n     r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);\n     r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [\"+privkey1+\",\"+privkey2+\"] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n-    g_rpc_node = nullptr;\n }\n \n BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)"
      }
    ]
  },
  {
    "sha": "f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWZkM2EyN2ZkYTNkYTNlYjQ1ZGU0ZTQ2ZTcxNDU1MDZlMjdkOTZi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-16T21:07:12Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-16T21:07:20Z"
      },
      "message": "Merge #17750: util: change GetWarnings parameter to bool\n\n7aab8d1024996c7c422bd34a8226df0117b813f7 [style] Code style fixups in GetWarnings() (John Newbery)\n492c6dc1e742a62599dc6d5ba6c3896825b5144f util: change GetWarnings parameter to bool (John Newbery)\n869b6314fd180856b6054fff28b5de994252c54c [qt] remove unused parameter from getWarnings() (John Newbery)\n\nPull request description:\n\n  `GetWarnings()` changes the format of the output warning string based on a passed-in string argument that can be set to \"gui\" or \"statusbar\".\n\n  Change the argument to a bool:\n\n  - there are only two types of behaviour, so a bool is a more natural argument type\n  - changing the name to `verbose` does not set any expectations for the how the calling code will use the returned string (currently, `statusbar` is used for RPC warnings, not a status bar)\n  - removes some error-handling code for when the passed-in string is not one of the two strings expected.\n\nACKs for top commit:\n  laanwj:\n    code review ACK 7aab8d1024996c7c422bd34a8226df0117b813f7\n  practicalswift:\n    ACK 7aab8d1024996c7c422bd34a8226df0117b813f7 -- diff looks correct :)\n  MarcoFalke:\n    ACK 7aab8d1024996c7c422bd34a8226df0117b813f7 otherwise.\n  promag:\n    Code review ACK 7aab8d1024996c7c422bd34a8226df0117b813f7.\n\nTree-SHA512: 75882c6e3e44aa9586411b803149b36ba487f4eb9cac3f5c8f07cd9f586870bba4488a51e674cf8147f05718534f482836e6a4e3f66e0d4ef6821900c7dfd04e",
      "tree": {
        "sha": "edec60d7c56858a34fab33f9af907ae855cae56e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edec60d7c56858a34fab33f9af907ae855cae56e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiDnQwAsCM5+N0zeDAdr0RGQfqvD+6gtD8d0ZhXrFDPyBcqXIDopbZRhAF8THPz\nW1GMyEgD9Dj+yKLCwo2SCGOeeL+n9m2CN3EF0MmkRiudSIfux9iJ45uEwDJp+Hub\ntrZFwAVajsu0jSgzXB0R6i6ilb+v0WHJjAqxVc3ZkrhGP5QRUuS+6yr2/R5fH9Qp\nJfvzR1IeT0EmcRF1yxj3l4bwAvuqQJB77wVeJV6CdA6n9hTy1oAgTQEyzww5fKxN\nAjik+up2PP/XuRlBQ+361+TR0GB+NciPPJMIFx1HWPMP/64kpneiQRpBGyYltK8U\nP+DrpwDYenLE8IxnxxjBBEIoClA/JRuVfmQSH0m+h7jMENn8x+y4IFwtYL9CD+Yo\n8AkybzkOiymUWfb/li9mIsDaW/aGxzakD34cumq8CTY6e6n4M5gB1imnlhSIb1SL\nL3yf0oWmAzUwLUbbgsc0qM/8R5qq6cwaNVEDzDmEEYIW/eQXuVSUnzDWaubTto09\n6TebEhlc\n=VfLD\n-----END PGP SIGNATURE-----",
        "payload": "tree edec60d7c56858a34fab33f9af907ae855cae56e\nparent 48d64d73c06f4d5db3ad35bed87388ff0795d511\nparent 7aab8d1024996c7c422bd34a8226df0117b813f7\nauthor MarcoFalke <falke.marco@gmail.com> 1576530432 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576530440 -0500\n\nMerge #17750: util: change GetWarnings parameter to bool\n\n7aab8d1024996c7c422bd34a8226df0117b813f7 [style] Code style fixups in GetWarnings() (John Newbery)\n492c6dc1e742a62599dc6d5ba6c3896825b5144f util: change GetWarnings parameter to bool (John Newbery)\n869b6314fd180856b6054fff28b5de994252c54c [qt] remove unused parameter from getWarnings() (John Newbery)\n\nPull request description:\n\n  `GetWarnings()` changes the format of the output warning string based on a passed-in string argument that can be set to \"gui\" or \"statusbar\".\n\n  Change the argument to a bool:\n\n  - there are only two types of behaviour, so a bool is a more natural argument type\n  - changing the name to `verbose` does not set any expectations for the how the calling code will use the returned string (currently, `statusbar` is used for RPC warnings, not a status bar)\n  - removes some error-handling code for when the passed-in string is not one of the two strings expected.\n\nACKs for top commit:\n  laanwj:\n    code review ACK 7aab8d1024996c7c422bd34a8226df0117b813f7\n  practicalswift:\n    ACK 7aab8d1024996c7c422bd34a8226df0117b813f7 -- diff looks correct :)\n  MarcoFalke:\n    ACK 7aab8d1024996c7c422bd34a8226df0117b813f7 otherwise.\n  promag:\n    Code review ACK 7aab8d1024996c7c422bd34a8226df0117b813f7.\n\nTree-SHA512: 75882c6e3e44aa9586411b803149b36ba487f4eb9cac3f5c8f07cd9f586870bba4488a51e674cf8147f05718534f482836e6a4e3f66e0d4ef6821900c7dfd04e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48d64d73c06f4d5db3ad35bed87388ff0795d511",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48d64d73c06f4d5db3ad35bed87388ff0795d511",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48d64d73c06f4d5db3ad35bed87388ff0795d511"
      },
      {
        "sha": "7aab8d1024996c7c422bd34a8226df0117b813f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7aab8d1024996c7c422bd34a8226df0117b813f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7aab8d1024996c7c422bd34a8226df0117b813f7"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 33,
      "deletions": 40
    },
    "files": [
      {
        "sha": "529fa793dd658d42e48b18c5fcb3ca80415ea4c9",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
        "patch": "@@ -68,7 +68,7 @@ class NodeImpl : public Node\n     std::string getNetwork() override { return Params().NetworkIDString(); }\n     void initLogging() override { InitLogging(); }\n     void initParameterInteraction() override { InitParameterInteraction(); }\n-    std::string getWarnings(const std::string& type) override { return GetWarnings(type); }\n+    std::string getWarnings() override { return GetWarnings(true); }\n     uint32_t getLogCategories() override { return LogInstance().GetCategoryMask(); }\n     bool baseInitialize() override\n     {"
      },
      {
        "sha": "6bc4668bebd68148914456c26ce965a0279b33cf",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
        "patch": "@@ -78,7 +78,7 @@ class Node\n     virtual void initParameterInteraction() = 0;\n \n     //! Get warnings.\n-    virtual std::string getWarnings(const std::string& type) = 0;\n+    virtual std::string getWarnings() = 0;\n \n     // Get log flags.\n     virtual uint32_t getLogCategories() = 0;"
      },
      {
        "sha": "0021c3dbc798683ae33c37f69c90759ec32b6d91",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
        "patch": "@@ -135,7 +135,7 @@ BitcoinCore::BitcoinCore(interfaces::Node& node) :\n void BitcoinCore::handleRunawayException(const std::exception *e)\n {\n     PrintExceptionContinue(e, \"Runaway exception\");\n-    Q_EMIT runawayException(QString::fromStdString(m_node.getWarnings(\"gui\")));\n+    Q_EMIT runawayException(QString::fromStdString(m_node.getWarnings()));\n }\n \n void BitcoinCore::initialize()\n@@ -589,10 +589,10 @@ int GuiMain(int argc, char* argv[])\n         }\n     } catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"Runaway exception\");\n-        app.handleRunawayException(QString::fromStdString(node->getWarnings(\"gui\")));\n+        app.handleRunawayException(QString::fromStdString(node->getWarnings()));\n     } catch (...) {\n         PrintExceptionContinue(nullptr, \"Runaway exception\");\n-        app.handleRunawayException(QString::fromStdString(node->getWarnings(\"gui\")));\n+        app.handleRunawayException(QString::fromStdString(node->getWarnings()));\n     }\n     return rv;\n }"
      },
      {
        "sha": "b84587a99b9b3b4b0a4c561a1d40347b16352f69",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
        "patch": "@@ -134,7 +134,7 @@ enum BlockSource ClientModel::getBlockSource() const\n \n QString ClientModel::getStatusBarWarnings() const\n {\n-    return QString::fromStdString(m_node.getWarnings(\"gui\"));\n+    return QString::fromStdString(m_node.getWarnings());\n }\n \n OptionsModel *ClientModel::getOptionsModel()"
      },
      {
        "sha": "eb5148eebd6a682c246ce0beb61d9054035f017e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
        "patch": "@@ -1290,7 +1290,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n     obj.pushKV(\"softforks\",             softforks);\n \n-    obj.pushKV(\"warnings\", GetWarnings(\"statusbar\"));\n+    obj.pushKV(\"warnings\", GetWarnings(false));\n     return obj;\n }\n "
      },
      {
        "sha": "9f7f7837d3d31ea3c7ed45db3357754bb7056c4e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
        "patch": "@@ -254,7 +254,7 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n     obj.pushKV(\"networkhashps\",    getnetworkhashps(request));\n     obj.pushKV(\"pooledtx\",         (uint64_t)mempool.size());\n     obj.pushKV(\"chain\",            Params().NetworkIDString());\n-    obj.pushKV(\"warnings\",         GetWarnings(\"statusbar\"));\n+    obj.pushKV(\"warnings\",         GetWarnings(false));\n     return obj;\n }\n "
      },
      {
        "sha": "5e53fa5f5d2b13a91905aece556d463405d87e04",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
        "patch": "@@ -522,7 +522,7 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n         }\n     }\n     obj.pushKV(\"localaddresses\", localAddresses);\n-    obj.pushKV(\"warnings\",       GetWarnings(\"statusbar\"));\n+    obj.pushKV(\"warnings\",       GetWarnings(false));\n     return obj;\n }\n "
      },
      {
        "sha": "19bd0d142f3bd6235b31d7676e5406eb850321fa",
        "filename": "src/test/timedata_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/test/timedata_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/test/timedata_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/timedata_tests.cpp?ref=f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
        "patch": "@@ -65,7 +65,7 @@ BOOST_AUTO_TEST_CASE(addtimedata)\n         MultiAddTimeData(1, DEFAULT_MAX_TIME_ADJUSTMENT + 1); //filter size 5\n     }\n \n-    BOOST_CHECK(GetWarnings(\"gui\").find(\"clock is wrong\") != std::string::npos);\n+    BOOST_CHECK(GetWarnings(true).find(\"clock is wrong\") != std::string::npos);\n \n     // nTimeOffset is not changed if the median of offsets exceeds DEFAULT_MAX_TIME_ADJUSTMENT\n     BOOST_CHECK_EQUAL(GetTimeOffset(), 0);"
      },
      {
        "sha": "8df77096f1ddee5fc3045260a64d3349a647e1cb",
        "filename": "src/warnings.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 25,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/warnings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/warnings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/warnings.cpp?ref=f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
        "patch": "@@ -38,41 +38,34 @@ void SetfLargeWorkInvalidChainFound(bool flag)\n     fLargeWorkInvalidChainFound = flag;\n }\n \n-std::string GetWarnings(const std::string& strFor)\n+std::string GetWarnings(bool verbose)\n {\n-    std::string strStatusBar;\n-    std::string strGUI;\n-    const std::string uiAlertSeperator = \"<hr />\";\n+    std::string warnings_concise;\n+    std::string warnings_verbose;\n+    const std::string warning_separator = \"<hr />\";\n \n     LOCK(cs_warnings);\n \n+    // Pre-release build warning\n     if (!CLIENT_VERSION_IS_RELEASE) {\n-        strStatusBar = \"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\";\n-        strGUI = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\").translated;\n+        warnings_concise = \"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\";\n+        warnings_verbose = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\").translated;\n     }\n \n     // Misc warnings like out of disk space and clock is wrong\n-    if (strMiscWarning != \"\")\n-    {\n-        strStatusBar = strMiscWarning;\n-        strGUI += (strGUI.empty() ? \"\" : uiAlertSeperator) + strMiscWarning;\n+    if (strMiscWarning != \"\") {\n+        warnings_concise = strMiscWarning;\n+        warnings_verbose += (warnings_verbose.empty() ? \"\" : warning_separator) + strMiscWarning;\n     }\n \n-    if (fLargeWorkForkFound)\n-    {\n-        strStatusBar = \"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\";\n-        strGUI += (strGUI.empty() ? \"\" : uiAlertSeperator) + _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\").translated;\n-    }\n-    else if (fLargeWorkInvalidChainFound)\n-    {\n-        strStatusBar = \"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\";\n-        strGUI += (strGUI.empty() ? \"\" : uiAlertSeperator) + _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\").translated;\n+    if (fLargeWorkForkFound) {\n+        warnings_concise = \"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\";\n+        warnings_verbose += (warnings_verbose.empty() ? \"\" : warning_separator) + _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\").translated;\n+    } else if (fLargeWorkInvalidChainFound) {\n+        warnings_concise = \"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\";\n+        warnings_verbose += (warnings_verbose.empty() ? \"\" : warning_separator) + _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\").translated;\n     }\n \n-    if (strFor == \"gui\")\n-        return strGUI;\n-    else if (strFor == \"statusbar\")\n-        return strStatusBar;\n-    assert(!\"GetWarnings(): invalid parameter\");\n-    return \"error\";\n+    if (verbose) return warnings_verbose;\n+    else return warnings_concise;\n }"
      },
      {
        "sha": "58e5e4cd19c84d50ccc1e166848a92bc63b30676",
        "filename": "src/warnings.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/warnings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/warnings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/warnings.h?ref=f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
        "patch": "@@ -13,11 +13,11 @@ void SetfLargeWorkForkFound(bool flag);\n bool GetfLargeWorkForkFound();\n void SetfLargeWorkInvalidChainFound(bool flag);\n /** Format a string that describes several potential problems detected by the core.\n- * @param[in] strFor can have the following values:\n- * - \"statusbar\": get the most important warning\n- * - \"gui\": get all warnings, translated (where possible) for GUI, separated by <hr />\n- * @returns the warning string selected by strFor\n+ * @param[in] verbose bool\n+ * - if true, get all warnings, translated (where possible), separated by <hr />\n+ * - if false, get the most important warning\n+ * @returns the warning string\n  */\n-std::string GetWarnings(const std::string& strFor);\n+std::string GetWarnings(bool verbose);\n \n #endif //  BITCOIN_WARNINGS_H"
      }
    ]
  },
  {
    "sha": "94c6f2bba45100abeaf310057a989f8644115eaf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGM2ZjJiYmE0NTEwMGFiZWFmMzEwMDU3YTk4OWY4NjQ0MTE1ZWFm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-16T21:08:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-16T21:08:56Z"
      },
      "message": "Merge #17593: test: move more utility functions into test utility library\n\n78e283e656bf1643944ffdb76185f3468eb25895 [test] move wallet helper functions into test library (Martin Zumsande)\nf613e5dfdafe708f63ebb5193c44e2bc770c6651 [test] move mining helper functions into test library (Martin Zumsande)\n2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd [test] move string helper functions into test library (Martin Zumsande)\n\nPull request description:\n\n  This disbands `test/util.h` and `test/util.cpp` and moves the content into the test utility library recently created in #17542, so that all test utility functions are in one place.\n\n  The content of the original files are split into three modules:\n  1) string helper functions go to `test/util/str`\n  2) mining helper functions go to the newly created `test/util/mining`\n  3) wallet helper functions go to the newly created `test/util/wallet`\n\nACKs for top commit:\n  MarcoFalke:\n    ACK 78e283e656bf1643944ffdb76185f3468eb25895 \ud83d\udd27\n\nTree-SHA512: f182a61e86e76c32bcb84e37f44904d3a4a9c5a321f7a8efdda5368a6623cb8b5a5384ec4f96e67f0357b0c22099f6e3ecd0ac4cb467e3fa3f3128f8d36edfb8",
      "tree": {
        "sha": "1aebc165029778570380ddf57d66cd81a6e132b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1aebc165029778570380ddf57d66cd81a6e132b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94c6f2bba45100abeaf310057a989f8644115eaf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiJVgwAx1NKyJkTaHr+/Z5v9gEnAB/y7BysYm0OPFSs06DVZplTs34pqH4IN3BW\nCRcuzQPjAp8ev5opQ8xsUm+fZEUDpDYsM2xgjK7dfCWtj1Mo2z7livpFoNxPsBvH\n+Ur1VUKKRWMxF/j68gQVhLfcoZdWb/CpBu1R62REpT7IgO7slPTQ5w1ggqLl1Gk4\nqj5Mq3UtP3imYLdB/Y2cpPYt1cm39TXwU9PKdIpVX4XZv5rlTpQwTp1c8wgmQd4j\nqaHYsH/4UmZNEXqyvjQi7K9uHI+p4707sY2CU/Uc9IcFxVa0a5FKIMxgsJqp+byG\nMSBLYjYKItUU0q26vZzL5myqQGlqsihlEslqhTg/CWKU7RjTydN7BKCOGy8Dp+UZ\nTSfparpjDHmj5xwJwsNFOxOG6lJiynXNkkZBEPAp4OET2+u8OIjdTprpujOkhb89\nXs6O7XSnvL8T5+HQyN2/Jg8UcWQoY7L7Ps2QKAscgQe2NES3BGMjoMenZfmLlbK/\nulkYcq/P\n=YWmL\n-----END PGP SIGNATURE-----",
        "payload": "tree 1aebc165029778570380ddf57d66cd81a6e132b3\nparent f9fd3a27fda3da3eb45de4e46e7145506e27d96b\nparent 78e283e656bf1643944ffdb76185f3468eb25895\nauthor MarcoFalke <falke.marco@gmail.com> 1576530532 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576530536 -0500\n\nMerge #17593: test: move more utility functions into test utility library\n\n78e283e656bf1643944ffdb76185f3468eb25895 [test] move wallet helper functions into test library (Martin Zumsande)\nf613e5dfdafe708f63ebb5193c44e2bc770c6651 [test] move mining helper functions into test library (Martin Zumsande)\n2cb4e8bdc7ef75ae8d95c246af1e8e1f9c7045bd [test] move string helper functions into test library (Martin Zumsande)\n\nPull request description:\n\n  This disbands `test/util.h` and `test/util.cpp` and moves the content into the test utility library recently created in #17542, so that all test utility functions are in one place.\n\n  The content of the original files are split into three modules:\n  1) string helper functions go to `test/util/str`\n  2) mining helper functions go to the newly created `test/util/mining`\n  3) wallet helper functions go to the newly created `test/util/wallet`\n\nACKs for top commit:\n  MarcoFalke:\n    ACK 78e283e656bf1643944ffdb76185f3468eb25895 \ud83d\udd27\n\nTree-SHA512: f182a61e86e76c32bcb84e37f44904d3a4a9c5a321f7a8efdda5368a6623cb8b5a5384ec4f96e67f0357b0c22099f6e3ecd0ac4cb467e3fa3f3128f8d36edfb8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94c6f2bba45100abeaf310057a989f8644115eaf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94c6f2bba45100abeaf310057a989f8644115eaf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94c6f2bba45100abeaf310057a989f8644115eaf/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9fd3a27fda3da3eb45de4e46e7145506e27d96b"
      },
      {
        "sha": "78e283e656bf1643944ffdb76185f3468eb25895",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78e283e656bf1643944ffdb76185f3468eb25895",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78e283e656bf1643944ffdb76185f3468eb25895"
      }
    ],
    "stats": {
      "total": 248,
      "additions": 135,
      "deletions": 113
    },
    "files": [
      {
        "sha": "1c97e22de8ca3374954f6f1d5099a52aac8d4d6e",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94c6f2bba45100abeaf310057a989f8644115eaf/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94c6f2bba45100abeaf310057a989f8644115eaf/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=94c6f2bba45100abeaf310057a989f8644115eaf",
        "patch": "@@ -39,9 +39,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/bech32.cpp \\\n   bench/lockedpool.cpp \\\n   bench/poly1305.cpp \\\n-  bench/prevector.cpp \\\n-  test/util.h \\\n-  test/util.cpp\n+  bench/prevector.cpp\n \n nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n "
      },
      {
        "sha": "505d630b7d53ee58192ed70ee82eb3c96ac2a8b4",
        "filename": "src/Makefile.test_util.include",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94c6f2bba45100abeaf310057a989f8644115eaf/src/Makefile.test_util.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94c6f2bba45100abeaf310057a989f8644115eaf/src/Makefile.test_util.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_util.include?ref=94c6f2bba45100abeaf310057a989f8644115eaf",
        "patch": "@@ -10,22 +10,25 @@ EXTRA_LIBRARIES += \\\n TEST_UTIL_H = \\\n     test/util/blockfilter.h \\\n     test/util/logging.h \\\n+    test/util/mining.h \\\n     test/util/setup_common.h \\\n     test/util/str.h \\\n-    test/util/transaction_utils.h\n+    test/util/transaction_utils.h \\\n+    test/util/wallet.h\n \n libtest_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)\n libtest_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libtest_util_a_SOURCES = \\\n   test/util/blockfilter.cpp \\\n   test/util/logging.cpp \\\n+  test/util/mining.cpp \\\n   test/util/setup_common.cpp \\\n   test/util/str.cpp \\\n   test/util/transaction_utils.cpp \\\n+  test/util/wallet.cpp \\\n   $(TEST_UTIL_H)\n \n LIBTEST_UTIL += $(LIBBITCOIN_SERVER)\n LIBTEST_UTIL += $(LIBBITCOIN_COMMON)\n LIBTEST_UTIL += $(LIBBITCOIN_UTIL)\n LIBTEST_UTIL += $(LIBBITCOIN_CRYPTO_BASE)\n-"
      },
      {
        "sha": "184367e1e5d7b3c2cba9d7cac151d6f30845c5ff",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94c6f2bba45100abeaf310057a989f8644115eaf/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94c6f2bba45100abeaf310057a989f8644115eaf/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=94c6f2bba45100abeaf310057a989f8644115eaf",
        "patch": "@@ -5,7 +5,8 @@\n #include <bench/bench.h>\n #include <consensus/validation.h>\n #include <crypto/sha256.h>\n-#include <test/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/wallet.h>\n #include <txmempool.h>\n #include <validation.h>\n "
      },
      {
        "sha": "f39dcc0b71b420ee80e61b31ea7835023134f6bf",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94c6f2bba45100abeaf310057a989f8644115eaf/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94c6f2bba45100abeaf310057a989f8644115eaf/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=94c6f2bba45100abeaf310057a989f8644115eaf",
        "patch": "@@ -6,7 +6,8 @@\n #include <interfaces/chain.h>\n #include <node/context.h>\n #include <optional.h>\n-#include <test/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/wallet.h>\n #include <validationinterface.h>\n #include <wallet/wallet.h>\n "
      },
      {
        "sha": "235420e6ac89381a2d7097c17c64b80c00c08f7e",
        "filename": "src/test/settings_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94c6f2bba45100abeaf310057a989f8644115eaf/src/test/settings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94c6f2bba45100abeaf310057a989f8644115eaf/src/test/settings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/settings_tests.cpp?ref=94c6f2bba45100abeaf310057a989f8644115eaf",
        "patch": "@@ -4,8 +4,9 @@\n \n #include <util/settings.h>\n \n-#include <test/util.h>\n #include <test/util/setup_common.h>\n+#include <test/util/str.h>\n+\n \n #include <boost/test/unit_test.hpp>\n #include <univalue.h>"
      },
      {
        "sha": "f90cb0d623dbd51c26510ac5aa03d8f01ff1cda5",
        "filename": "src/test/util.h",
        "status": "removed",
        "additions": 0,
        "deletions": 70,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/test/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9fd3a27fda3da3eb45de4e46e7145506e27d96b/src/test/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util.h?ref=f9fd3a27fda3da3eb45de4e46e7145506e27d96b",
        "patch": "@@ -1,70 +0,0 @@\n-// Copyright (c) 2019 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_TEST_UTIL_H\n-#define BITCOIN_TEST_UTIL_H\n-\n-#include <memory>\n-#include <string>\n-\n-class CBlock;\n-class CScript;\n-class CTxIn;\n-class CWallet;\n-\n-// Constants //\n-\n-extern const std::string ADDRESS_BCRT1_UNSPENDABLE;\n-\n-// Lower-level utils //\n-\n-/** Returns the generated coin */\n-CTxIn MineBlock(const CScript& coinbase_scriptPubKey);\n-/** Prepare a block to be mined */\n-std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey);\n-\n-\n-// RPC-like //\n-\n-/** Import the address to the wallet */\n-void importaddress(CWallet& wallet, const std::string& address);\n-/** Returns a new address from the wallet */\n-std::string getnewaddress(CWallet& w);\n-/** Returns the generated coin */\n-CTxIn generatetoaddress(const std::string& address);\n-\n-/**\n- * Increment a string. Useful to enumerate all fixed length strings with\n- * characters in [min_char, max_char].\n- */\n-template <typename CharType, size_t StringLength>\n-bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)\n-{\n-    for (CharType& elem : string) {\n-        bool has_next = elem != max_char;\n-        elem = elem < min_char || elem >= max_char ? min_char : CharType(elem + 1);\n-        if (has_next) return true;\n-    }\n-    return false;\n-}\n-\n-/**\n- * Iterate over string values and call function for each string without\n- * successive duplicate characters.\n- */\n-template <typename CharType, size_t StringLength, typename Fn>\n-void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {\n-    for (bool has_next = true; has_next; has_next = NextString(string, min_char, max_char)) {\n-        int prev = -1;\n-        bool skip_string = false;\n-        for (CharType c : string) {\n-            if (c == prev) skip_string = true;\n-            if (skip_string || c < min_char || c > max_char) break;\n-            prev = c;\n-        }\n-        if (!skip_string) fn();\n-    }\n-}\n-\n-#endif // BITCOIN_TEST_UTIL_H"
      },
      {
        "sha": "30f0f5d7e6fe67cf3a74f5c23ffcda9d52078a06",
        "filename": "src/test/util/mining.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 34,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94c6f2bba45100abeaf310057a989f8644115eaf/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94c6f2bba45100abeaf310057a989f8644115eaf/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=94c6f2bba45100abeaf310057a989f8644115eaf",
        "patch": "@@ -2,48 +2,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <test/util.h>\n+#include <test/util/mining.h>\n \n #include <chainparams.h>\n #include <consensus/merkle.h>\n #include <key_io.h>\n #include <miner.h>\n-#include <outputtype.h>\n #include <pow.h>\n #include <script/standard.h>\n #include <validation.h>\n-#include <validationinterface.h>\n-#ifdef ENABLE_WALLET\n-#include <wallet/wallet.h>\n-#endif\n-\n-const std::string ADDRESS_BCRT1_UNSPENDABLE = \"bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3xueyj\";\n-\n-#ifdef ENABLE_WALLET\n-std::string getnewaddress(CWallet& w)\n-{\n-    constexpr auto output_type = OutputType::BECH32;\n-    CTxDestination dest;\n-    std::string error;\n-    if (!w.GetNewDestination(output_type, \"\", dest, error)) assert(false);\n-\n-    return EncodeDestination(dest);\n-}\n-\n-void importaddress(CWallet& wallet, const std::string& address)\n-{\n-    auto spk_man = wallet.GetLegacyScriptPubKeyMan();\n-    LOCK(wallet.cs_wallet);\n-    AssertLockHeld(spk_man->cs_wallet);\n-    const auto dest = DecodeDestination(address);\n-    assert(IsValidDestination(dest));\n-    const auto script = GetScriptForDestination(dest);\n-    wallet.MarkDirty();\n-    assert(!spk_man->HaveWatchOnly(script));\n-    if (!spk_man->AddWatchOnly(script, 0 /* nCreateTime */)) assert(false);\n-    wallet.SetAddressBook(dest, /* label */ \"\", \"receive\");\n-}\n-#endif // ENABLE_WALLET\n \n CTxIn generatetoaddress(const std::string& address)\n {",
        "previous_filename": "src/test/util.cpp"
      },
      {
        "sha": "afe4de684f1bbc4de61dfb383e57c486bd1db89d",
        "filename": "src/test/util/mining.h",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94c6f2bba45100abeaf310057a989f8644115eaf/src/test/util/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94c6f2bba45100abeaf310057a989f8644115eaf/src/test/util/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.h?ref=94c6f2bba45100abeaf310057a989f8644115eaf",
        "patch": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_MINING_H\n+#define BITCOIN_TEST_UTIL_MINING_H\n+\n+#include <memory>\n+#include <string>\n+\n+class CBlock;\n+class CScript;\n+class CTxIn;\n+\n+/** Returns the generated coin */\n+CTxIn MineBlock(const CScript& coinbase_scriptPubKey);\n+\n+/** Prepare a block to be mined */\n+std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey);\n+\n+/** RPC-like helper function, returns the generated coin */\n+CTxIn generatetoaddress(const std::string& address);\n+\n+#endif // BITCOIN_TEST_UTIL_MINING_H"
      },
      {
        "sha": "ef94692df096ec9343007dc33971d42d9732022e",
        "filename": "src/test/util/str.h",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94c6f2bba45100abeaf310057a989f8644115eaf/src/test/util/str.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94c6f2bba45100abeaf310057a989f8644115eaf/src/test/util/str.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/str.h?ref=94c6f2bba45100abeaf310057a989f8644115eaf",
        "patch": "@@ -9,4 +9,37 @@\n \n bool CaseInsensitiveEqual(const std::string& s1, const std::string& s2);\n \n+/**\n+ * Increment a string. Useful to enumerate all fixed length strings with\n+ * characters in [min_char, max_char].\n+ */\n+template <typename CharType, size_t StringLength>\n+bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)\n+{\n+    for (CharType& elem : string) {\n+        bool has_next = elem != max_char;\n+        elem = elem < min_char || elem >= max_char ? min_char : CharType(elem + 1);\n+        if (has_next) return true;\n+    }\n+    return false;\n+}\n+\n+/**\n+ * Iterate over string values and call function for each string without\n+ * successive duplicate characters.\n+ */\n+template <typename CharType, size_t StringLength, typename Fn>\n+void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {\n+    for (bool has_next = true; has_next; has_next = NextString(string, min_char, max_char)) {\n+        int prev = -1;\n+        bool skip_string = false;\n+        for (CharType c : string) {\n+            if (c == prev) skip_string = true;\n+            if (skip_string || c < min_char || c > max_char) break;\n+            prev = c;\n+        }\n+        if (!skip_string) fn();\n+    }\n+}\n+\n #endif // BITCOIN_TEST_UTIL_STR_H"
      },
      {
        "sha": "226d2df6e40ee929728ec87737de9b1c5dbe30bd",
        "filename": "src/test/util/wallet.cpp",
        "status": "added",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94c6f2bba45100abeaf310057a989f8644115eaf/src/test/util/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94c6f2bba45100abeaf310057a989f8644115eaf/src/test/util/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/wallet.cpp?ref=94c6f2bba45100abeaf310057a989f8644115eaf",
        "patch": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/util/wallet.h>\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/standard.h>\n+#ifdef ENABLE_WALLET\n+#include <wallet/wallet.h>\n+#endif\n+\n+const std::string ADDRESS_BCRT1_UNSPENDABLE = \"bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3xueyj\";\n+\n+#ifdef ENABLE_WALLET\n+std::string getnewaddress(CWallet& w)\n+{\n+    constexpr auto output_type = OutputType::BECH32;\n+    CTxDestination dest;\n+    std::string error;\n+    if (!w.GetNewDestination(output_type, \"\", dest, error)) assert(false);\n+\n+    return EncodeDestination(dest);\n+}\n+\n+void importaddress(CWallet& wallet, const std::string& address)\n+{\n+    auto spk_man = wallet.GetLegacyScriptPubKeyMan();\n+    LOCK(wallet.cs_wallet);\n+    AssertLockHeld(spk_man->cs_wallet);\n+    const auto dest = DecodeDestination(address);\n+    assert(IsValidDestination(dest));\n+    const auto script = GetScriptForDestination(dest);\n+    wallet.MarkDirty();\n+    assert(!spk_man->HaveWatchOnly(script));\n+    if (!spk_man->AddWatchOnly(script, 0 /* nCreateTime */)) assert(false);\n+    wallet.SetAddressBook(dest, /* label */ \"\", \"receive\");\n+}\n+#endif // ENABLE_WALLET"
      },
      {
        "sha": "565ef1756a6cdff11e7daf3a4c992ace22535b26",
        "filename": "src/test/util/wallet.h",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94c6f2bba45100abeaf310057a989f8644115eaf/src/test/util/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94c6f2bba45100abeaf310057a989f8644115eaf/src/test/util/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/wallet.h?ref=94c6f2bba45100abeaf310057a989f8644115eaf",
        "patch": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_WALLET_H\n+#define BITCOIN_TEST_UTIL_WALLET_H\n+\n+#include <string>\n+\n+class CWallet;\n+\n+// Constants //\n+\n+extern const std::string ADDRESS_BCRT1_UNSPENDABLE;\n+\n+// RPC-like //\n+\n+/** Import the address to the wallet */\n+void importaddress(CWallet& wallet, const std::string& address);\n+/** Returns a new address from the wallet */\n+std::string getnewaddress(CWallet& w);\n+\n+\n+#endif // BITCOIN_TEST_UTIL_WALLET_H"
      },
      {
        "sha": "c45426a63171620c0263596ebefda75e04fb8000",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94c6f2bba45100abeaf310057a989f8644115eaf/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94c6f2bba45100abeaf310057a989f8644115eaf/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=94c6f2bba45100abeaf310057a989f8644115eaf",
        "patch": "@@ -7,7 +7,7 @@\n #include <clientversion.h>\n #include <sync.h>\n #include <test/util/setup_common.h>\n-#include <test/util.h>\n+#include <test/util/str.h>\n #include <util/moneystr.h>\n #include <util/strencodings.h>\n #include <util/string.h>"
      }
    ]
  },
  {
    "sha": "22d9bae36f2a164acf35765231f1d93364c1c4a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmQ5YmFlMzZmMmExNjRhY2YzNTc2NTIzMWYxZDkzMzY0YzFjNGE5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-02T08:01:27Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-16T22:50:49Z"
      },
      "message": "tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus",
      "tree": {
        "sha": "34710e205bcb80855d70c691242402c7526e9368",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34710e205bcb80855d70c691242402c7526e9368"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22d9bae36f2a164acf35765231f1d93364c1c4a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22d9bae36f2a164acf35765231f1d93364c1c4a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22d9bae36f2a164acf35765231f1d93364c1c4a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22d9bae36f2a164acf35765231f1d93364c1c4a9/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94c6f2bba45100abeaf310057a989f8644115eaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94c6f2bba45100abeaf310057a989f8644115eaf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94c6f2bba45100abeaf310057a989f8644115eaf"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bbdd0474657837dcde33f474a906fede402a8cef",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22d9bae36f2a164acf35765231f1d93364c1c4a9/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22d9bae36f2a164acf35765231f1d93364c1c4a9/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=22d9bae36f2a164acf35765231f1d93364c1c4a9",
        "patch": "@@ -15,12 +15,14 @@\n # Fuzzers known to lack a seed corpus in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus\n FUZZERS_MISSING_CORPORA = [\n     \"addr_info_deserialize\",\n+    \"base_encode_decode\",\n     \"block\",\n     \"block_file_info_deserialize\",\n     \"block_filter_deserialize\",\n     \"block_header_and_short_txids_deserialize\",\n     \"fee_rate_deserialize\",\n     \"flat_file_pos_deserialize\",\n+    \"hex\",\n     \"integer\",\n     \"key_origin_info_deserialize\",\n     \"merkle_block_deserialize\","
      }
    ]
  },
  {
    "sha": "32e27129ff26c7cc10321652d5d2678876081983",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmUyNzEyOWZmMjZjN2NjMTAzMjE2NTJkNWQyNjc4ODc2MDgxOTgz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-11T09:55:00Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-16T22:50:49Z"
      },
      "message": "util: Move TrimString(...). Introduce default pattern (trims whitespace). Add NODISCARD.",
      "tree": {
        "sha": "400fe56c9c3fff072a059f76d47ea16eab926d51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/400fe56c9c3fff072a059f76d47ea16eab926d51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32e27129ff26c7cc10321652d5d2678876081983",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32e27129ff26c7cc10321652d5d2678876081983",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32e27129ff26c7cc10321652d5d2678876081983",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32e27129ff26c7cc10321652d5d2678876081983/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22d9bae36f2a164acf35765231f1d93364c1c4a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22d9bae36f2a164acf35765231f1d93364c1c4a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22d9bae36f2a164acf35765231f1d93364c1c4a9"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 11,
      "deletions": 10
    },
    "files": [
      {
        "sha": "3db8fc8b9888108f880683cacfa7e8023654b488",
        "filename": "src/util/string.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e27129ff26c7cc10321652d5d2678876081983/src/util/string.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e27129ff26c7cc10321652d5d2678876081983/src/util/string.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/string.h?ref=32e27129ff26c7cc10321652d5d2678876081983",
        "patch": "@@ -11,6 +11,16 @@\n #include <string>\n #include <vector>\n \n+NODISCARD inline std::string TrimString(const std::string& str, const std::string& pattern = \" \\f\\n\\r\\t\\v\")\n+{\n+    std::string::size_type front = str.find_first_not_of(pattern);\n+    if (front == std::string::npos) {\n+        return std::string();\n+    }\n+    std::string::size_type end = str.find_last_not_of(pattern);\n+    return str.substr(front, end - front + 1);\n+}\n+\n /**\n  * Join a list of items\n  *"
      },
      {
        "sha": "95458672edf75b729c2ea8e6d87959c534f0d51d",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e27129ff26c7cc10321652d5d2678876081983/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e27129ff26c7cc10321652d5d2678876081983/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=32e27129ff26c7cc10321652d5d2678876081983",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <chainparamsbase.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <util/translation.h>\n \n \n@@ -679,16 +680,6 @@ fs::path GetConfigFile(const std::string& confPath)\n     return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n-static std::string TrimString(const std::string& str, const std::string& pattern)\n-{\n-    std::string::size_type front = str.find_first_not_of(pattern);\n-    if (front == std::string::npos) {\n-        return std::string();\n-    }\n-    std::string::size_type end = str.find_last_not_of(pattern);\n-    return str.substr(front, end - front + 1);\n-}\n-\n static bool GetConfigOptions(std::istream& stream, const std::string& filepath, std::string& error, std::vector<std::pair<std::string, std::string>>& options, std::list<SectionInfo>& sections)\n {\n     std::string str, prefix;"
      }
    ]
  },
  {
    "sha": "526dd78bedcebcf170ce13349eb3e9fc7fbf39bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjZkZDc4YmVkY2ViY2YxNzBjZTEzMzQ5ZWIzZTlmYzdmYmYzOWJi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-23T12:37:59Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-16T22:50:49Z"
      },
      "message": "tests: Add fuzzing harness for various Base{32,58,64} related functions",
      "tree": {
        "sha": "57e9ab512c1d2278bf62b11e3ce3ecc653fea338",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57e9ab512c1d2278bf62b11e3ce3ecc653fea338"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/526dd78bedcebcf170ce13349eb3e9fc7fbf39bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/526dd78bedcebcf170ce13349eb3e9fc7fbf39bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/526dd78bedcebcf170ce13349eb3e9fc7fbf39bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/526dd78bedcebcf170ce13349eb3e9fc7fbf39bb/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32e27129ff26c7cc10321652d5d2678876081983",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32e27129ff26c7cc10321652d5d2678876081983",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32e27129ff26c7cc10321652d5d2678876081983"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 54,
      "deletions": 0
    },
    "files": [
      {
        "sha": "15fc1885f6ecce26bf4f1f965f8a2388daca5a85",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526dd78bedcebcf170ce13349eb3e9fc7fbf39bb/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526dd78bedcebcf170ce13349eb3e9fc7fbf39bb/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=526dd78bedcebcf170ce13349eb3e9fc7fbf39bb",
        "patch": "@@ -8,6 +8,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/address_deserialize \\\n   test/fuzz/addrman_deserialize \\\n   test/fuzz/banentry_deserialize \\\n+  test/fuzz/base_encode_decode \\\n   test/fuzz/bech32 \\\n   test/fuzz/block \\\n   test/fuzz/block_deserialize \\\n@@ -278,6 +279,12 @@ test_fuzz_bech32_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_bech32_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_bech32_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_base_encode_decode_SOURCES = $(FUZZ_SUITE) test/fuzz/base_encode_decode.cpp\n+test_fuzz_base_encode_decode_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_base_encode_decode_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_base_encode_decode_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_base_encode_decode_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n test_fuzz_txundo_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_txundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXUNDO_DESERIALIZE=1\n test_fuzz_txundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "cb0fbdf76f370302db5e15ed3a386fa88d268d62",
        "filename": "src/test/fuzz/base_encode_decode.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526dd78bedcebcf170ce13349eb3e9fc7fbf39bb/src/test/fuzz/base_encode_decode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526dd78bedcebcf170ce13349eb3e9fc7fbf39bb/src/test/fuzz/base_encode_decode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/base_encode_decode.cpp?ref=526dd78bedcebcf170ce13349eb3e9fc7fbf39bb",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+\n+#include <base58.h>\n+#include <util/string.h>\n+#include <util/strencodings.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    const std::string random_encoded_string(buffer.begin(), buffer.end());\n+\n+    std::vector<unsigned char> decoded;\n+    if (DecodeBase58(random_encoded_string, decoded, 100)) {\n+        const std::string encoded_string = EncodeBase58(decoded);\n+        assert(encoded_string == TrimString(encoded_string));\n+        assert(ToLower(encoded_string) == ToLower(TrimString(random_encoded_string)));\n+    }\n+\n+    if (DecodeBase58Check(random_encoded_string, decoded, 100)) {\n+        const std::string encoded_string = EncodeBase58Check(decoded);\n+        assert(encoded_string == TrimString(encoded_string));\n+        assert(ToLower(encoded_string) == ToLower(TrimString(random_encoded_string)));\n+    }\n+\n+    bool pf_invalid;\n+    std::string decoded_string = DecodeBase32(random_encoded_string, &pf_invalid);\n+    if (!pf_invalid) {\n+        const std::string encoded_string = EncodeBase32(decoded_string);\n+        assert(encoded_string == TrimString(encoded_string));\n+        assert(ToLower(encoded_string) == ToLower(TrimString(random_encoded_string)));\n+    }\n+\n+    decoded_string = DecodeBase64(random_encoded_string, &pf_invalid);\n+    if (!pf_invalid) {\n+        const std::string encoded_string = EncodeBase64(decoded_string);\n+        assert(encoded_string == TrimString(encoded_string));\n+        assert(ToLower(encoded_string) == ToLower(TrimString(random_encoded_string)));\n+    }\n+}"
      }
    ]
  },
  {
    "sha": "c18405732e38eadb2c47533c3f982f4605fbfd9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTg0MDU3MzJlMzhlYWRiMmM0NzUzM2MzZjk4MmY0NjA1ZmJmZDlh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-23T15:08:48Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-16T22:50:49Z"
      },
      "message": "tests: Add fuzzing harness for various hex related functions",
      "tree": {
        "sha": "832a046dcc171d260be5a07f87df39d766a5e9f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/832a046dcc171d260be5a07f87df39d766a5e9f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c18405732e38eadb2c47533c3f982f4605fbfd9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c18405732e38eadb2c47533c3f982f4605fbfd9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c18405732e38eadb2c47533c3f982f4605fbfd9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c18405732e38eadb2c47533c3f982f4605fbfd9a/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "526dd78bedcebcf170ce13349eb3e9fc7fbf39bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/526dd78bedcebcf170ce13349eb3e9fc7fbf39bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/526dd78bedcebcf170ce13349eb3e9fc7fbf39bb"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "091ef5034908315493d0e25637e2e81c884ceba6",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c18405732e38eadb2c47533c3f982f4605fbfd9a/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c18405732e38eadb2c47533c3f982f4605fbfd9a/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=c18405732e38eadb2c47533c3f982f4605fbfd9a",
        "patch": "@@ -28,6 +28,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/eval_script \\\n   test/fuzz/fee_rate_deserialize \\\n   test/fuzz/flat_file_pos_deserialize \\\n+  test/fuzz/hex \\\n   test/fuzz/integer \\\n   test/fuzz/inv_deserialize \\\n   test/fuzz/key_origin_info_deserialize \\\n@@ -363,6 +364,12 @@ test_fuzz_address_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_address_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_address_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_hex_SOURCES = $(FUZZ_SUITE) test/fuzz/hex.cpp\n+test_fuzz_hex_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_hex_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_hex_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_hex_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n test_fuzz_inv_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_inv_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DINV_DESERIALIZE=1\n test_fuzz_inv_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "54693180be1fff28fee96da1bbd644e9f1eaf53c",
        "filename": "src/test/fuzz/hex.cpp",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c18405732e38eadb2c47533c3f982f4605fbfd9a/src/test/fuzz/hex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c18405732e38eadb2c47533c3f982f4605fbfd9a/src/test/fuzz/hex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/hex.cpp?ref=c18405732e38eadb2c47533c3f982f4605fbfd9a",
        "patch": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+\n+#include <util/strencodings.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    const std::string random_hex_string(buffer.begin(), buffer.end());\n+    const std::vector<unsigned char> data = ParseHex(random_hex_string);\n+    const std::string hex_data = HexStr(data);\n+    if (IsHex(random_hex_string)) {\n+        assert(ToLower(random_hex_string) == hex_data);\n+    }\n+}"
      }
    ]
  },
  {
    "sha": "03dfa36641077033ffebf8b431945bfc503632a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2RmYTM2NjQxMDc3MDMzZmZlYmY4YjQzMTk0NWJmYzUwMzYzMmE5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-17T00:10:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-17T00:10:58Z"
      },
      "message": "Merge #17229: tests: Add fuzzing harnesses for various Base{32,58,64} and hex related functions\n\nc18405732e38eadb2c47533c3f982f4605fbfd9a tests: Add fuzzing harness for various hex related functions (practicalswift)\n526dd78bedcebcf170ce13349eb3e9fc7fbf39bb tests: Add fuzzing harness for various Base{32,58,64} related functions (practicalswift)\n32e27129ff26c7cc10321652d5d2678876081983 util: Move TrimString(...). Introduce default pattern (trims whitespace). Add NODISCARD. (practicalswift)\n22d9bae36f2a164acf35765231f1d93364c1c4a9 tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus (practicalswift)\n\nPull request description:\n\n  Add fuzzing harnesses for various Base{32,58,64} and hex related functions.\n\n  **Testing this PR**\n\n  Run:\n\n  ```\n  $ CC=clang CXX=clang++ ./configure --enable-fuzz \\\n        --with-sanitizers=address,fuzzer,undefined\n  $ make\n  $ src/test/fuzz/base_encode_decode\n  \u2026\n  $ src/test/fuzz/hex\n  \u2026\n  ```\n\nACKs for top commit:\n  MarcoFalke:\n    ACK c18405732e38eadb2c47533c3f982f4605fbfd9a \ud83d\udd01\n\nTree-SHA512: 4fcbe4f641fc553e43fd5c3c40a6beec0d2ce90c5ffc718213b37fc18aba4c055e51e26f93d01ea1248fd89473d07c9dce77db7f014b47d3abd045f61b5f1905",
      "tree": {
        "sha": "832a046dcc171d260be5a07f87df39d766a5e9f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/832a046dcc171d260be5a07f87df39d766a5e9f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03dfa36641077033ffebf8b431945bfc503632a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj+1AwAkURdLc35dDCZWN9fMy6n8NHQw65n90qYHfq09COfJQGr7nL/Igdr58v5\nsCrTnj+SitBohymAi9IOxtfPBS11Wm6kbECK98Tlm7rQRx/ATPQAj4w9pJkQ7gZb\nuogF4vLWGZ/bYLDFqx0iDYq+1qsgUW2Qs38ITxIICvT1Q/BmDvrIFrKs6ghPSB+1\nHffgTMVI95I3I1wjtzDjfHykvm4q3jF0O8aU4fBc+wF6O932jbQ+Unvw4RYhr+M8\nQSqCMjbZQLc9UkNngULQJnS+IR5ht3isHf+pfkK1JH+yuAzYRRZ6Ut4ss0xUYS/d\n++Cyr9uuy6AcBN4s+XjXze1rO/Kxnt60+YSfkcaUg1NkVaiNShltYA4hWen1vzU7\nXlbqAA0kfQ+puZSM9dwSD7vOTbZPsPbGs/8W67lR6YgiZI86aWlShO5mc4Il14yl\nG8r49msO6+mJGrg4or/QSpvlkShSiTypFqScDg5b8euVOpOKJZIxoN4+wGv7hmYz\njoa3iY8z\n=ADjw\n-----END PGP SIGNATURE-----",
        "payload": "tree 832a046dcc171d260be5a07f87df39d766a5e9f2\nparent 94c6f2bba45100abeaf310057a989f8644115eaf\nparent c18405732e38eadb2c47533c3f982f4605fbfd9a\nauthor MarcoFalke <falke.marco@gmail.com> 1576541452 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1576541458 -0500\n\nMerge #17229: tests: Add fuzzing harnesses for various Base{32,58,64} and hex related functions\n\nc18405732e38eadb2c47533c3f982f4605fbfd9a tests: Add fuzzing harness for various hex related functions (practicalswift)\n526dd78bedcebcf170ce13349eb3e9fc7fbf39bb tests: Add fuzzing harness for various Base{32,58,64} related functions (practicalswift)\n32e27129ff26c7cc10321652d5d2678876081983 util: Move TrimString(...). Introduce default pattern (trims whitespace). Add NODISCARD. (practicalswift)\n22d9bae36f2a164acf35765231f1d93364c1c4a9 tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus (practicalswift)\n\nPull request description:\n\n  Add fuzzing harnesses for various Base{32,58,64} and hex related functions.\n\n  **Testing this PR**\n\n  Run:\n\n  ```\n  $ CC=clang CXX=clang++ ./configure --enable-fuzz \\\n        --with-sanitizers=address,fuzzer,undefined\n  $ make\n  $ src/test/fuzz/base_encode_decode\n  \u2026\n  $ src/test/fuzz/hex\n  \u2026\n  ```\n\nACKs for top commit:\n  MarcoFalke:\n    ACK c18405732e38eadb2c47533c3f982f4605fbfd9a \ud83d\udd01\n\nTree-SHA512: 4fcbe4f641fc553e43fd5c3c40a6beec0d2ce90c5ffc718213b37fc18aba4c055e51e26f93d01ea1248fd89473d07c9dce77db7f014b47d3abd045f61b5f1905\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03dfa36641077033ffebf8b431945bfc503632a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03dfa36641077033ffebf8b431945bfc503632a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03dfa36641077033ffebf8b431945bfc503632a9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94c6f2bba45100abeaf310057a989f8644115eaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94c6f2bba45100abeaf310057a989f8644115eaf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94c6f2bba45100abeaf310057a989f8644115eaf"
      },
      {
        "sha": "c18405732e38eadb2c47533c3f982f4605fbfd9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c18405732e38eadb2c47533c3f982f4605fbfd9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c18405732e38eadb2c47533c3f982f4605fbfd9a"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 96,
      "deletions": 10
    },
    "files": [
      {
        "sha": "091ef5034908315493d0e25637e2e81c884ceba6",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03dfa36641077033ffebf8b431945bfc503632a9/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03dfa36641077033ffebf8b431945bfc503632a9/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=03dfa36641077033ffebf8b431945bfc503632a9",
        "patch": "@@ -8,6 +8,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/address_deserialize \\\n   test/fuzz/addrman_deserialize \\\n   test/fuzz/banentry_deserialize \\\n+  test/fuzz/base_encode_decode \\\n   test/fuzz/bech32 \\\n   test/fuzz/block \\\n   test/fuzz/block_deserialize \\\n@@ -27,6 +28,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/eval_script \\\n   test/fuzz/fee_rate_deserialize \\\n   test/fuzz/flat_file_pos_deserialize \\\n+  test/fuzz/hex \\\n   test/fuzz/integer \\\n   test/fuzz/inv_deserialize \\\n   test/fuzz/key_origin_info_deserialize \\\n@@ -278,6 +280,12 @@ test_fuzz_bech32_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_bech32_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_bech32_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_base_encode_decode_SOURCES = $(FUZZ_SUITE) test/fuzz/base_encode_decode.cpp\n+test_fuzz_base_encode_decode_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_base_encode_decode_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_base_encode_decode_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_base_encode_decode_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n test_fuzz_txundo_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_txundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXUNDO_DESERIALIZE=1\n test_fuzz_txundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n@@ -356,6 +364,12 @@ test_fuzz_address_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_address_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_address_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_hex_SOURCES = $(FUZZ_SUITE) test/fuzz/hex.cpp\n+test_fuzz_hex_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_hex_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_hex_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_hex_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n test_fuzz_inv_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_inv_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DINV_DESERIALIZE=1\n test_fuzz_inv_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "cb0fbdf76f370302db5e15ed3a386fa88d268d62",
        "filename": "src/test/fuzz/base_encode_decode.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03dfa36641077033ffebf8b431945bfc503632a9/src/test/fuzz/base_encode_decode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03dfa36641077033ffebf8b431945bfc503632a9/src/test/fuzz/base_encode_decode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/base_encode_decode.cpp?ref=03dfa36641077033ffebf8b431945bfc503632a9",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+\n+#include <base58.h>\n+#include <util/string.h>\n+#include <util/strencodings.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    const std::string random_encoded_string(buffer.begin(), buffer.end());\n+\n+    std::vector<unsigned char> decoded;\n+    if (DecodeBase58(random_encoded_string, decoded, 100)) {\n+        const std::string encoded_string = EncodeBase58(decoded);\n+        assert(encoded_string == TrimString(encoded_string));\n+        assert(ToLower(encoded_string) == ToLower(TrimString(random_encoded_string)));\n+    }\n+\n+    if (DecodeBase58Check(random_encoded_string, decoded, 100)) {\n+        const std::string encoded_string = EncodeBase58Check(decoded);\n+        assert(encoded_string == TrimString(encoded_string));\n+        assert(ToLower(encoded_string) == ToLower(TrimString(random_encoded_string)));\n+    }\n+\n+    bool pf_invalid;\n+    std::string decoded_string = DecodeBase32(random_encoded_string, &pf_invalid);\n+    if (!pf_invalid) {\n+        const std::string encoded_string = EncodeBase32(decoded_string);\n+        assert(encoded_string == TrimString(encoded_string));\n+        assert(ToLower(encoded_string) == ToLower(TrimString(random_encoded_string)));\n+    }\n+\n+    decoded_string = DecodeBase64(random_encoded_string, &pf_invalid);\n+    if (!pf_invalid) {\n+        const std::string encoded_string = EncodeBase64(decoded_string);\n+        assert(encoded_string == TrimString(encoded_string));\n+        assert(ToLower(encoded_string) == ToLower(TrimString(random_encoded_string)));\n+    }\n+}"
      },
      {
        "sha": "54693180be1fff28fee96da1bbd644e9f1eaf53c",
        "filename": "src/test/fuzz/hex.cpp",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03dfa36641077033ffebf8b431945bfc503632a9/src/test/fuzz/hex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03dfa36641077033ffebf8b431945bfc503632a9/src/test/fuzz/hex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/hex.cpp?ref=03dfa36641077033ffebf8b431945bfc503632a9",
        "patch": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+\n+#include <util/strencodings.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    const std::string random_hex_string(buffer.begin(), buffer.end());\n+    const std::vector<unsigned char> data = ParseHex(random_hex_string);\n+    const std::string hex_data = HexStr(data);\n+    if (IsHex(random_hex_string)) {\n+        assert(ToLower(random_hex_string) == hex_data);\n+    }\n+}"
      },
      {
        "sha": "3db8fc8b9888108f880683cacfa7e8023654b488",
        "filename": "src/util/string.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03dfa36641077033ffebf8b431945bfc503632a9/src/util/string.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03dfa36641077033ffebf8b431945bfc503632a9/src/util/string.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/string.h?ref=03dfa36641077033ffebf8b431945bfc503632a9",
        "patch": "@@ -11,6 +11,16 @@\n #include <string>\n #include <vector>\n \n+NODISCARD inline std::string TrimString(const std::string& str, const std::string& pattern = \" \\f\\n\\r\\t\\v\")\n+{\n+    std::string::size_type front = str.find_first_not_of(pattern);\n+    if (front == std::string::npos) {\n+        return std::string();\n+    }\n+    std::string::size_type end = str.find_last_not_of(pattern);\n+    return str.substr(front, end - front + 1);\n+}\n+\n /**\n  * Join a list of items\n  *"
      },
      {
        "sha": "95458672edf75b729c2ea8e6d87959c534f0d51d",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03dfa36641077033ffebf8b431945bfc503632a9/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03dfa36641077033ffebf8b431945bfc503632a9/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=03dfa36641077033ffebf8b431945bfc503632a9",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <chainparamsbase.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <util/translation.h>\n \n \n@@ -679,16 +680,6 @@ fs::path GetConfigFile(const std::string& confPath)\n     return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n-static std::string TrimString(const std::string& str, const std::string& pattern)\n-{\n-    std::string::size_type front = str.find_first_not_of(pattern);\n-    if (front == std::string::npos) {\n-        return std::string();\n-    }\n-    std::string::size_type end = str.find_last_not_of(pattern);\n-    return str.substr(front, end - front + 1);\n-}\n-\n static bool GetConfigOptions(std::istream& stream, const std::string& filepath, std::string& error, std::vector<std::pair<std::string, std::string>>& options, std::list<SectionInfo>& sections)\n {\n     std::string str, prefix;"
      },
      {
        "sha": "bbdd0474657837dcde33f474a906fede402a8cef",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03dfa36641077033ffebf8b431945bfc503632a9/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03dfa36641077033ffebf8b431945bfc503632a9/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=03dfa36641077033ffebf8b431945bfc503632a9",
        "patch": "@@ -15,12 +15,14 @@\n # Fuzzers known to lack a seed corpus in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus\n FUZZERS_MISSING_CORPORA = [\n     \"addr_info_deserialize\",\n+    \"base_encode_decode\",\n     \"block\",\n     \"block_file_info_deserialize\",\n     \"block_filter_deserialize\",\n     \"block_header_and_short_txids_deserialize\",\n     \"fee_rate_deserialize\",\n     \"flat_file_pos_deserialize\",\n+    \"hex\",\n     \"integer\",\n     \"key_origin_info_deserialize\",\n     \"merkle_block_deserialize\","
      }
    ]
  }
]