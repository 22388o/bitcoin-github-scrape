[
  {
    "sha": "906b6d9da6a6b2e6a5f1d9046b3b9c2c7e490c99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDZiNmQ5ZGE2YTZiMmU2YTVmMWQ5MDQ2YjNiOWMyYzdlNDkwYzk5",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "dev@ariard.me",
        "date": "2021-05-13T16:21:23Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "dev@ariard.me",
        "date": "2021-05-14T18:12:29Z"
      },
      "message": "test: Extend feature_rbf.py with no inherited signaling",
      "tree": {
        "sha": "f9b94ab5030556ef71db6f624c49dceb0134063b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9b94ab5030556ef71db6f624c49dceb0134063b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/906b6d9da6a6b2e6a5f1d9046b3b9c2c7e490c99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/906b6d9da6a6b2e6a5f1d9046b3b9c2c7e490c99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/906b6d9da6a6b2e6a5f1d9046b3b9c2c7e490c99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/906b6d9da6a6b2e6a5f1d9046b3b9c2c7e490c99/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "4741aec1dd28829f45abcc529cddaa0ff04d07a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4741aec1dd28829f45abcc529cddaa0ff04d07a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4741aec1dd28829f45abcc529cddaa0ff04d07a0"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 67,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f0f1c1905ce1b87030ca2d35d1a835d8671c252e",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/906b6d9da6a6b2e6a5f1d9046b3b9c2c7e490c99/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/906b6d9da6a6b2e6a5f1d9046b3b9c2c7e490c99/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=906b6d9da6a6b2e6a5f1d9046b3b9c2c7e490c99",
        "patch": "@@ -115,6 +115,9 @@ def run_test(self):\n         self.log.info(\"Running test prioritised transactions...\")\n         self.test_prioritised_transactions()\n \n+        self.log.info(\"Running test no inherited signaling...\")\n+        self.test_no_inherited_signaling()\n+\n         self.log.info(\"Passed\")\n \n     def test_simple_doublespend(self):\n@@ -563,5 +566,69 @@ def test_rpc(self):\n         assert_equal(json0[\"vin\"][0][\"sequence\"], 4294967293)\n         assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967294)\n \n+    def test_no_inherited_signaling(self):\n+        # Send tx from which to conflict outputs later\n+        base_txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+\n+        # Create an explicitly opt-in parent transaction\n+        optin_parent_tx = self.nodes[0].createrawtransaction([{\n+            'txid': base_txid,\n+            'vout': 0,\n+            \"sequence\": 0xfffffffd,\n+        }], {self.nodes[0].getnewaddress(): Decimal(\"9.99998\")})\n+\n+        optin_parent_tx = self.nodes[0].signrawtransactionwithwallet(optin_parent_tx)\n+\n+        # Broadcast parent tx\n+        optin_parent_txid = self.nodes[0].sendrawtransaction(hexstring=optin_parent_tx[\"hex\"], maxfeerate=0)\n+        assert optin_parent_txid in self.nodes[0].getrawmempool()\n+\n+        replacement_parent_tx = self.nodes[0].createrawtransaction([{\n+            'txid': base_txid,\n+            'vout': 0,\n+            \"sequence\": 0xfffffffd,\n+        }], {self.nodes[0].getnewaddress(): Decimal(\"9.90000\")})\n+\n+        replacement_parent_tx = self.nodes[0].signrawtransactionwithwallet(replacement_parent_tx)\n+\n+        # Test if parent tx can be replaced.\n+        res = self.nodes[0].testmempoolaccept(rawtxs=[replacement_parent_tx['hex']], maxfeerate=0)[0]\n+\n+        # Parent can be replaced.\n+        assert_equal(res['allowed'], True)\n+\n+        # Create an opt-out child tx spending the opt-in parent\n+        optout_child_tx = self.nodes[0].createrawtransaction([{\n+            'txid': optin_parent_txid,\n+            'vout': 0,\n+            \"sequence\": 0xffffffff,\n+        }], {self.nodes[0].getnewaddress(): Decimal(\"9.99990\")})\n+\n+        optout_child_tx = self.nodes[0].signrawtransactionwithwallet(optout_child_tx)\n+\n+        # Broadcast child tx\n+        optout_child_txid = self.nodes[0].sendrawtransaction(hexstring=optout_child_tx[\"hex\"], maxfeerate=0)\n+        assert optout_child_txid in self.nodes[0].getrawmempool()\n+\n+        replacement_child_tx = self.nodes[0].createrawtransaction([{\n+            'txid': optin_parent_txid,\n+            'vout': 0,\n+            \"sequence\": 0xffffffff,\n+        }], {self.nodes[0].getnewaddress(): Decimal(\"9.00000\")})\n+\n+        replacement_child_tx = self.nodes[0].signrawtransactionwithwallet(replacement_child_tx)\n+\n+        # Broadcast replacement child tx\n+        # BIP 125 :\n+        # 1. The original transactions signal replaceability explicitly or through inheritance as described in the above\n+        # Summary section.\n+        # The original transaction (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_txid`) does.\n+        # The replacement transaction (`replacement_child_tx`) should be able to replace the original transaction.\n+        # See CVE-2021-31876 for further explanations.\n+        assert optin_parent_txid in self.nodes[0].getrawmempool()\n+        assert_raises_rpc_error(-26, 'txn-mempool-conflict', self.nodes[0].sendrawtransaction, replacement_child_tx[\"hex\"], 0)\n+\n if __name__ == '__main__':\n     ReplaceByFeeTest().main()"
      }
    ]
  },
  {
    "sha": "2eb0eeda39cab997f9a5f817f7c12e7fffeaf35a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWIwZWVkYTM5Y2FiOTk3ZjlhNWY4MTdmN2MxMmU3ZmZmZWFmMzVh",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "dev@ariard.me",
        "date": "2021-05-13T16:35:33Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "dev@ariard.me",
        "date": "2021-05-14T18:27:30Z"
      },
      "message": "validation: document lack of inherited signaling in RBF policy",
      "tree": {
        "sha": "f5afedca6de0c7643e6d8b3d63ca8c3d460637d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5afedca6de0c7643e6d8b3d63ca8c3d460637d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2eb0eeda39cab997f9a5f817f7c12e7fffeaf35a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eb0eeda39cab997f9a5f817f7c12e7fffeaf35a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2eb0eeda39cab997f9a5f817f7c12e7fffeaf35a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eb0eeda39cab997f9a5f817f7c12e7fffeaf35a/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "906b6d9da6a6b2e6a5f1d9046b3b9c2c7e490c99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/906b6d9da6a6b2e6a5f1d9046b3b9c2c7e490c99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/906b6d9da6a6b2e6a5f1d9046b3b9c2c7e490c99"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9826616cb26ae85655864ec3e264b15d42278d35",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eb0eeda39cab997f9a5f817f7c12e7fffeaf35a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eb0eeda39cab997f9a5f817f7c12e7fffeaf35a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2eb0eeda39cab997f9a5f817f7c12e7fffeaf35a",
        "patch": "@@ -625,10 +625,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                 // is for the sake of multi-party protocols, where we don't\n                 // want a single party to be able to disable replacement.\n                 //\n-                // The opt-out ignores descendants as anyone relying on\n-                // first-seen mempool behavior should be checking all\n-                // unconfirmed ancestors anyway; doing otherwise is hopelessly\n-                // insecure.\n+                // Transactions that don't explicitly signal replaceability are\n+                // *not* replaceable with the current logic, even if one of their\n+                // unconfirmed ancestors signals replaceability. This diverges\n+                // from BIP125's inherited signaling description (see CVE-2021-31876).\n+                // Applications relying on first-seen mempool behavior should\n+                // check all unconfirmed ancestors; otherwise an opt-in ancestor\n+                // might be replaced, causing removal of this descendant.\n                 bool fReplacementOptOut = true;\n                 for (const CTxIn &_txin : ptxConflicting->vin)\n                 {"
      }
    ]
  }
]