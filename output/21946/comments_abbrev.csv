ariard,2021-05-13 18:18:58,"Also, I had a look on the rest of RBF functional test coverage (i.e feature_rbf.py, mempool_accept.py, p2p_invalid_tx.py). AFAICT, the latest check on incremental relay fee increase doesn't seem to have coverage ?",https://github.com/bitcoin/bitcoin/pull/21946#issuecomment-840741662,840741662,
Sjors,2021-05-13 18:20:29,utACK fb2047b,https://github.com/bitcoin/bitcoin/pull/21946#issuecomment-840742529,840742529,
prayank23,2021-05-14 01:07:36,"Concept ACK\n\nMaybe we can mention this in [doc/bips.md](https://github.com/bitcoin/bitcoin/blob/master/doc/bips.md) as well\n\n",https://github.com/bitcoin/bitcoin/pull/21946#issuecomment-840928362,840928362,
ariard,2021-05-14 18:36:52,"Thanks @jonatack and @Sjors, I think I've addressed all your comments at 2eb0eed, but lmk if you've more I'll address them quickly.\n\n@prayank23 \n\nWell in fact there is another well-known supplemental check implemented by our logic not mentioned in the BIP, which is the feerate comparison here : https://github.com/bitcoin/bitcoin/blob/ecf5f2c1a06edd8372402872525f8de1d4277453/src/validation.",https://github.com/bitcoin/bitcoin/pull/21946#issuecomment-841428321,841428321,
ariard,2021-05-14 18:38:34,@MarcoFalke I believe you're aware of few mempool-related RPCs which should be updated in consequence as follow-up of this PR?,https://github.com/bitcoin/bitcoin/pull/21946#issuecomment-841429538,841429538,
jonatack,2021-05-14 20:05:49,ACK 2eb0eeda39cab997f9a5f817f7c12e7fffeaf35a,https://github.com/bitcoin/bitcoin/pull/21946#issuecomment-841473749,841473749,
prayank23,2021-05-17 11:10:53,"> Well in fact there is another well-known supplemental check implemented by our logic not mentioned in the BIP, which is the feerate comparison here :\n> \n> https://github.com/bitcoin/bitcoin/blob/ecf5f2c1a06edd8372402872525f8de1d4277453/src/validation.cpp#L848\n> \n> and absolute fee checks is done on original transactions _and_ their descendants, should we document all of them ?\n\nNot s",https://github.com/bitcoin/bitcoin/pull/21946#issuecomment-842236566,842236566,
benthecarman,2021-05-19 03:44:48,"ACK 2eb0eeda39cab997f9a5f817f7c12e7fffeaf35a\n\nIs a fix for the actual CVE being worked on as well?",https://github.com/bitcoin/bitcoin/pull/21946#issuecomment-843723178,843723178,
ariard,2021-05-21 03:09:34,"@prayank23 \n\nYes, unless you have a strong opinion here, I prefer differences between BIPs and the implementation in another PR, like one adding test coverage for incremental relay fee.\n\n@benthecarman \n\nNot really, as a fix, I'm currently studying moving towards full-rbf. If we do so, there wouldn't be any kind of signaling to proceed at all.\n\nIMO, main motivation to not fix it is ",https://github.com/bitcoin/bitcoin/pull/21946#issuecomment-845619564,845619564,
jonatack,2021-06-08 13:01:12,"This has ACKs by @Sjors, @benthecarman and myself, if anyone would like to have a look.",https://github.com/bitcoin/bitcoin/pull/21946#issuecomment-856746238,856746238,
ajtowns,2021-06-09 03:52:57,"> IMO, main motivation to not fix it is avoiding increasing the DoS surface of the mempool, where at replacement transaction submission you might have to traverse N * `package_ancestor_limits`. With N your number of allowed inputs for a `MAX_STANDARD_TX_WEIGHT`-sized transaction.\n\nAdding a `bool rbf_enabled` to `CTxMemPoolEntry` that's true if the tx signals for rbf or any of its inputs have `",https://github.com/bitcoin/bitcoin/pull/21946#issuecomment-857350921,857350921,
MarcoFalke,2021-06-10 11:03:12,"> @MarcoFalke I believe you're aware of few mempool-related RPCs which should be updated in consequence as follow-up of this PR?\n\nSure, filed as #22209",https://github.com/bitcoin/bitcoin/pull/21946#issuecomment-858526828,858526828,
ariard,2021-06-13 16:14:33,"@ajtowns\n\nIIUC we would have to re-order RBF opt-in checks after fetching parents coins from the cache in `PreChecks`, but I don't believe such re-order would change anything in DoS prevention strategy around mempool acceptance. Any `CTxMemPoolEntry` would inherit `rbf_enable == true` if one of its parent entries have the flag sets so, that way you only check first-depth of ancestors of the re",https://github.com/bitcoin/bitcoin/pull/21946#issuecomment-860235726,860235726,
Sjors,2021-05-13 18:23:43,This is a good place to refer to the CVE so it's clear the behaviour here is _not_ following BIP125.,https://github.com/bitcoin/bitcoin/pull/21946#discussion_r632012684,632012684,test/functional/feature_rbf.py
ariard,2021-05-13 20:30:05,"Yes already add a ref in new document, added another here if you think so.",https://github.com/bitcoin/bitcoin/pull/21946#discussion_r632084985,632084985,test/functional/feature_rbf.py
Sjors,2021-05-14 09:22:49,Probably a good idea; few people will read `validation.cpp` along side this test.,https://github.com/bitcoin/bitcoin/pull/21946#discussion_r632401181,632401181,test/functional/feature_rbf.py
jonatack,2021-05-14 09:56:32,"suggestions, most important one being s/policy/logic|code/, the others are grammar\n```diff\n                 // Transactions that don't explicitly signal replaceability are\n-                // *not* replaceable under this policy, even if one of their\n-                // unconfirmed ancestors signals replaceability. This is diverging\n+                // *not* replaceable with the current l",https://github.com/bitcoin/bitcoin/pull/21946#discussion_r632420199,632420199,src/validation.cpp
jonatack,2021-05-14 10:09:17,"```suggestion\n        # Create an explicitly opt-in parent transaction\n```",https://github.com/bitcoin/bitcoin/pull/21946#discussion_r632426875,632426875,test/functional/feature_rbf.py
jonatack,2021-05-14 10:09:45,"```suggestion\n        # Create an opt-out child tx spending the opt-in parent\n```",https://github.com/bitcoin/bitcoin/pull/21946#discussion_r632427127,632427127,test/functional/feature_rbf.py
