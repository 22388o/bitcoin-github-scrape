jl2012,2016-09-05T06:23:45Z,"fixed a bug in  #4562. It requires 256 cache slots instead of just 6 for the common types, since the nHashType is part of the sighash so each one is unique.\n\nNeed more tests for witness txs.\n",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-244667034,244667034,
sipa,2016-09-05T15:17:53Z,Nice work with the tests so far!\n,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-244769823,244769823,
jl2012,2016-09-06T06:48:11Z,Test updated to cover #8524 \n\nBenchmarking with and without #8524/#8654: https://gist.github.com/jl2012/f3262fd7cf47664ce43f036b9539e831\n,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-244863872,244863872,
NicolasDorier,2016-09-06T09:16:23Z,is it be possible to put the cache as a field of the TransactionChecker rather than as yet another parameter in CheckSig ?\n,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-244895251,244895251,
sipa,2016-09-06T09:19:18Z,"@NicolasDorier I believe so, yes!\n",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-244895937,244895937,
sipa,2016-09-06T09:24:14Z,"@NicolasDorier Actually, no. Not until we outlaw OP_CODESEPARATOR, as the script execution needs to be able to wipe the cache.\n",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-244897129,244897129,
NicolasDorier,2016-09-06T09:37:37Z,"@sipa  you can add a ScriptCode field to SigHashCache, and add a check in CheckSig to use the cache only if the ScriptCode match.\n",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-244900381,244900381,
NicolasDorier,2016-09-06T09:39:53Z,"I hope nobody intend to outlaw OP_CODESEPARATOR, it is a nice way for a signer to sign a particular executed path without requiring multiple public key. May have potential cool things to do with it and MAST, as with MAST we can have lots of different branches.\n",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-244900848,244900848,
sipa,2016-09-06T09:55:26Z,@NicolasDorier Nice idea. Implemented in https://github.com/sipa/bitcoin/commits/sighashcache. (@jl2012: feel free to squash if you like it)\n\nI don't understand what you're suggesting about OP_CODESEPARATOR. Perhaps we should discuss that on IRC instead.\n,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-244904287,244904287,
NicolasDorier,2016-09-06T10:17:17Z,"Code Review ACK for  https://github.com/sipa/bitcoin/commits/sighashcache (this PR + the commit removing the param to CheckSig)\n\nHowever, I'm not sure it is really useful, in a case of O(n^2) hashing attack, having a 10x performance improvement for a 5 second block verification is not going to do huge difference.\n",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-244909080,244909080,
jl2012,2016-09-06T10:52:53Z,"Squashed with @sipa 's patch\n\n@NicolasDorier, the effect would be limited for a miner-initiated attack. However, for standard transaction, 10x could be a make or break difference\n",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-244916025,244916025,
sipa,2016-09-06T11:57:35Z,utACK 9e4cf76412e17efa8fdeb3e7626ccf25b578e036\n,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-244928362,244928362,
NicolasDorier,2016-09-06T12:21:19Z,"@jl2012 as implemented now, the cache is per input. So how can it increase 10x for standard transaction ?\nRight now it improve the case of one input with lots of checksig.\n",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-244933183,244933183,
sipa,2016-09-06T12:23:18Z,@NicolasDorier Please move back-on-forth discussions to IRC.\n,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-244933624,244933624,
NicolasDorier,2016-09-06T14:21:31Z,utACK 9e4cf76\n,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-244965447,244965447,
jl2012,2016-09-08T17:00:17Z,Is this a target of 0.13.1?\n,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-245665593,245665593,
btcdrak,2016-09-09T12:01:00Z,utACK 9e4cf76\n,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-245893847,245893847,
NicolasDorier,2016-09-17T04:25:02Z,"I think it would be even better to tie the lifetime of the cache to the EvalScript function only instead of the TransactionSignatureChecker. Just dropping it as an idea, still utACK 9e4cf76.\n",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-247748254,247748254,
jl2012,2016-09-19T13:01:00Z,"I have an alternative implementation as ed71079 in #8756. It only reuse a sighash for a signature within `CHECKMULTISIG`. It is less risky as we don't need to worry about any unexpected behavior due to OP_CODESEPARATOR and FindAndDelete. Nonetheless, #8756 could provide the same level of sighash attack protection as #8654 combined with #8755.\n",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-247986452,247986452,
jl2012,2016-09-22T15:14:38Z,I think it would take more time to analysis this issue and figure out the best approach. I'm inclined not to include this in 0.13.1\n,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-248933667,248933667,
jl2012,2016-10-29T04:48:20Z,"Tests are updated with FindAndDelete tests. The earlier version (#4562) did not reset the cache after FindAndDelete and the new tests would have caught the bug.\n\nHowever, the tests require the public key recovery code from https://github.com/petertodd/python-bitcoinlib , which may have copyright issues. Any suggestions?\n",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-257070874,257070874,
morcos,2017-01-05T18:35:26Z,"I'm interested in understanding the benchmark results a little bit more.\n\nIt seems there are huge speed ups in big CHECKMULTISIG transactions, but there appear to be a non-neglible slowdown in more regular transactions (the last test in the benchmark).\n\nI'd be concerned that this code will on average be a slow down to block validation.  Has it been benchmarked for typical blocks either dur",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-270720426,270720426,
jl2012,2017-01-05T19:36:07Z,@morcos: good question. I'll try to do some benchmarking in real operation,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-270736382,270736382,
morcos,2017-01-09T19:38:38Z,I did some benchmarking but did not see any noticeable performance difference either way for typical usage,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-271385639,271385639,
laanwj,2017-01-12T19:26:08Z,Untagging this for 0.14 as discussed in the meeting,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-272257421,272257421,
TheBlueMatt,2017-07-11T20:44:53Z,Needs rebase (though if you dont get to it early this week maybe just wait until post-15).,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-314566024,314566024,
kallewoof,2018-02-23T07:40:46Z,"@jl2012 Should this have the ""up for grabs"" label so someone can pick it up, in case you're busy elsewhere?",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-367933687,367933687,
jl2012,2018-02-26T05:45:03Z,"@kallewoof This PR is quite risky (might introduce consensus bug), but not very helpful unless we have the following softforks: 1. limiting SIGHASH to 6 types; 2. disallow OP_CODESEPARATOR; 3. disallow FindAndDelete(). The first one is already a policy and the other two are proposed in #11423. However policy is not enough",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-368396431,368396431,
kallewoof,2018-02-26T06:31:07Z,@jl2012 Got it! Maybe add [WIP] to it so we know not to review it until it's ready for merging.,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-368403464,368403464,
jnewbery,2018-04-04T17:09:52Z,"Recommend we close this PR for now. If the following events happen:\n\n1. limiting SIGHASH to 6 types;\n2. disallow OP_CODESEPARATOR;\n3. disallow FindAndDelete()\n\nwe can reopen.\n\nDoes that sound reasonable @jl2012 ?",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-378674973,378674973,
jl2012,2018-04-05T16:54:53Z,agree with @jnewbery ,https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-379003766,379003766,
Rspigler,2018-11-06T23:48:08Z,"@fanquake shouldn't this and https://github.com/bitcoin/bitcoin/pull/8755 be added to 'Segwit' as well? (If this were merged, #8755 could be merged).",https://github.com/bitcoin/bitcoin/pull/8654#issuecomment-436451427,436451427,
sipa,2016-09-02T15:56:01Z,s/12/6/ ?\n,https://github.com/bitcoin/bitcoin/pull/8654#discussion_r77369779,77369779,src/script/interpreter.h
sipa,2016-09-02T16:03:14Z,"Perhaps add a comment here that sigversion is not used in the `entry` calculation because we know there will only be one sigversion across an entire input. Also, if future extra sighashes are defined, this may need extension (or, alternatively, cache read/write could be skipped for sigversion != 0).\n",https://github.com/bitcoin/bitcoin/pull/8654#discussion_r77370902,77370902,src/script/interpreter.cpp
jl2012,2016-09-02T16:46:20Z,"yes, I changed that to 12 as I thought there are 12 combinations (sw and pre-sw). Later I figured out that was not needed but forgot to change it back\n",https://github.com/bitcoin/bitcoin/pull/8654#discussion_r77376814,77376814,src/script/interpreter.cpp
jl2012,2016-09-02T16:55:07Z,fixed\n,https://github.com/bitcoin/bitcoin/pull/8654#discussion_r77377987,77377987,src/script/interpreter.h
jl2012,2016-09-06T06:49:45Z,See #8667\n,https://github.com/bitcoin/bitcoin/pull/8654#discussion_r77580635,77580635,qa/rpc-tests/test_framework/script.py
