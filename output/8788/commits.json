[
  {
    "sha": "23c32a9694e119f957c124f4501294ae7a5fd99a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2MzMmE5Njk0ZTExOWY5NTdjMTI0ZjQ1MDEyOTRhZTdhNWZkOTlh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-29T16:48:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-19T12:30:14Z"
      },
      "message": "rpc: Change JSONRPCRequest to JSONRPCRequestObj\n\nThis is more consistent with `JSONRPCReplyObj`.",
      "tree": {
        "sha": "37d8d20f815136a82d7e97cb3b8e77d14d42aa38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37d8d20f815136a82d7e97cb3b8e77d14d42aa38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23c32a9694e119f957c124f4501294ae7a5fd99a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYB2dWAAoJECnUvLZBb1PsFMYP/AjaCuk3T9qJZZxEOx8+TaW8\nHgrOmU3y7XEaaGSYGDFLrrWAqa9IqWfWy8eQuzV+8+e6rKJ4FMezj4QrfJyw03Gd\nNtSRICMPfgQG75q5TsPdj1C++L9V5nbkAL+Hr3iyxxyjO2mV4uppJ1ktGiWD8dTa\ntNn++rkSTIislHUH5miB1A1L3NMU9aQUU4uK2vid9Y4gYdve2smf+qjHP4fxdE1B\ntMj8hLKEw5jkPowT+amc21j1bWzVg6ijguzTic3/Mo9F6Dcinmlh2II/xgHkzuGO\n5jQtDcMczzVJajUlVfZiqxkbxYWNtgMO4mU6DVaokOVmopm5CbGgBeBSNBdZ2KMg\n9ljqXv+hVAQNOZjQX4bliNrNqUEjbQIVePr7lUYje/wCKnmQD6m9rNR3T/AQv9xa\niEV9ygfj9nA3XBu9yoCB2sU2cEN+nRvPt5K4ZsnPmydIT/wVu072zz9MlJAwXkJF\nRAV4vfLKVMfIyL5RUZ5+iClD8+Y9R+tO04O312XNDhLrAx90ncDDrZw/tDZWcRd7\nxOczUMvxywotEA5ehTnGY/mojIuTj038hNOloJgGe5fgqISub0gktVMmEJeQtIWc\n4/4wGmL0Tk5CrOUUlET+h6nSE/9gKVJmbS0kbq6orrFoSv/1oBhk2ESPFp3LNeNA\nAWFtNzYbR9mf55sK+aV0\n=nbLP\n-----END PGP SIGNATURE-----",
        "payload": "tree 37d8d20f815136a82d7e97cb3b8e77d14d42aa38\nparent d736a6eb1f91ba88059ff41634bd4ea715d9a1f1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1475167707 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1476880214 +0200\n\nrpc: Change JSONRPCRequest to JSONRPCRequestObj\n\nThis is more consistent with `JSONRPCReplyObj`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23c32a9694e119f957c124f4501294ae7a5fd99a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23c32a9694e119f957c124f4501294ae7a5fd99a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23c32a9694e119f957c124f4501294ae7a5fd99a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d736a6eb1f91ba88059ff41634bd4ea715d9a1f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2d66448d80ac353f7ebf16f1e150f1fd669ea236",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c32a9694e119f957c124f4501294ae7a5fd99a/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c32a9694e119f957c124f4501294ae7a5fd99a/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=23c32a9694e119f957c124f4501294ae7a5fd99a",
        "patch": "@@ -223,7 +223,7 @@ UniValue CallRPC(const string& strMethod, const UniValue& params)\n     evhttp_add_header(output_headers, \"Authorization\", (std::string(\"Basic \") + EncodeBase64(strRPCUserColonPass)).c_str());\n \n     // Attach request data\n-    std::string strRequest = JSONRPCRequest(strMethod, params, 1);\n+    std::string strRequest = JSONRPCRequestObj(strMethod, params, 1).write() + \"\\n\";\n     struct evbuffer * output_buffer = evhttp_request_get_output_buffer(req);\n     assert(output_buffer);\n     evbuffer_add(output_buffer, strRequest.data(), strRequest.size());"
      },
      {
        "sha": "ec186f4fc58888e8b8938fb1699b08df35f7ca06",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c32a9694e119f957c124f4501294ae7a5fd99a/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c32a9694e119f957c124f4501294ae7a5fd99a/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=23c32a9694e119f957c124f4501294ae7a5fd99a",
        "patch": "@@ -26,13 +26,13 @@ using namespace std;\n  * 1.2 spec: http://jsonrpc.org/historical/json-rpc-over-http.html\n  */\n \n-string JSONRPCRequest(const string& strMethod, const UniValue& params, const UniValue& id)\n+UniValue JSONRPCRequestObj(const string& strMethod, const UniValue& params, const UniValue& id)\n {\n     UniValue request(UniValue::VOBJ);\n     request.push_back(Pair(\"method\", strMethod));\n     request.push_back(Pair(\"params\", params));\n     request.push_back(Pair(\"id\", id));\n-    return request.write() + \"\\n\";\n+    return request;\n }\n \n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id)"
      },
      {
        "sha": "c74fa0070fc6d62975d9891180f448f71628dfd5",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c32a9694e119f957c124f4501294ae7a5fd99a/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c32a9694e119f957c124f4501294ae7a5fd99a/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=23c32a9694e119f957c124f4501294ae7a5fd99a",
        "patch": "@@ -77,7 +77,7 @@ enum RPCErrorCode\n     RPC_WALLET_ALREADY_UNLOCKED     = -17, //!< Wallet is already unlocked\n };\n \n-std::string JSONRPCRequest(const std::string& strMethod, const UniValue& params, const UniValue& id);\n+UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id);\n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id);\n std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n UniValue JSONRPCError(int code, const std::string& message);"
      }
    ]
  },
  {
    "sha": "69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWQxYzI1NzY4YTg2NDliZmM3ZWI4ZTljMzViOGZlOTg3NGFjOWZj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-09-22T07:46:41Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-19T12:42:08Z"
      },
      "message": "[RPC] Give RPC commands more information about the RPC request",
      "tree": {
        "sha": "88c4ef2720fc4e88d080c6fc480c341bf118a985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88c4ef2720fc4e88d080c6fc480c341bf118a985"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYB2ojAAoJECnUvLZBb1PsQccQAIo8loOWQy7+6BhZt1uHwCL9\nTLCWxPfJP9ldDpVt9aWnh/h/Iul0g2SgUP9AV4jYNWVDkjS9P9UGYkQik95JJZbA\nMN/72Ci+xThLxm0Zd5IIugSpwHnLARuCqVdAg8/ekQgLI/puYKiBAiVpj00dkzdD\na/amCfAkTDpfXRYJRPAR6soeE+oOkDt474SAw9G3PfKXieTENSUeLHN51d1GkZnx\nEm0HUYbDE3ccUvLG+hUObmUmif9+WJDK3yyOEIAW7AmGjl02r/5wk0hs1WkSWxKI\nRUhYieKWgfNaLySTPJBUSaklaQEqMyFnOwbi4xMn494OQPC2b8cclfOaeS2Q/1JW\nyy81awsiXIDjM6rTKZl/ftWZS2qmTnAmn0DpyGLhigB4FpAzcc1IgZOpBfCBsb2l\nySR/MvU0S4UMi9ylzzNkYEngziCfobO09wJMVNC/qIleEm4iZ/I2LkiNX5zxCyOL\nlOm7JDwN2ScKDvUMczov6tvIF46mbifVqv4HUOlpDRXcJs/HkUjn/GR2I1sIa/Nw\nF9e9Qy/tktT2wUSN8rj7M9mY8ORBecTMvVFKkwoeaZamZjFvYcS6v+lx/Ndw7vhz\nS6KNlmCdGRYM2Xm3+QlhcTFpD8EdD9Q+ZsY7DPYwY6Dk+E9GjLW5w1mI7EaTmbXK\n0F/pLukELQ8pADHT2O/d\n=RGMT\n-----END PGP SIGNATURE-----",
        "payload": "tree 88c4ef2720fc4e88d080c6fc480c341bf118a985\nparent 23c32a9694e119f957c124f4501294ae7a5fd99a\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1474530401 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1476880928 +0200\n\n[RPC] Give RPC commands more information about the RPC request\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23c32a9694e119f957c124f4501294ae7a5fd99a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23c32a9694e119f957c124f4501294ae7a5fd99a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23c32a9694e119f957c124f4501294ae7a5fd99a"
      }
    ],
    "stats": {
      "total": 1105,
      "additions": 558,
      "deletions": 547
    },
    "files": [
      {
        "sha": "54651911aa38d3d9c63f68183de7b8bc6cd766a8",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -172,19 +172,22 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         return false;\n     }\n \n-    JSONRequest jreq;\n+    JSONRPCRequest jreq;\n     try {\n         // Parse request\n         UniValue valRequest;\n         if (!valRequest.read(req->ReadBody()))\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n \n+        // Set the URI\n+        jreq.URI = req->GetURI();\n+\n         std::string strReply;\n         // singleton request\n         if (valRequest.isObject()) {\n             jreq.parse(valRequest);\n \n-            UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n+            UniValue result = tableRPC.execute(jreq);\n \n             // Send reply\n             strReply = JSONRPCReply(result, NullUniValue, jreq.id);"
      },
      {
        "sha": "f10dddf589e2801a8bae700aa6d4f02826fa2c0c",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -246,7 +246,10 @@ bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string\n                         std::string strPrint;\n                         // Convert argument list to JSON objects in method-dependent way,\n                         // and pass it along with the method name to the dispatcher.\n-                        lastResult = tableRPC.execute(stack.back()[0], RPCConvertValues(stack.back()[0], std::vector<std::string>(stack.back().begin() + 1, stack.back().end())));\n+                        JSONRPCRequest req;\n+                        req.params = RPCConvertValues(stack.back()[0], std::vector<std::string>(stack.back().begin() + 1, stack.back().end()));\n+                        req.strMethod = stack.back()[0];\n+                        lastResult = tableRPC.execute(req);\n \n                         state = STATE_COMMAND_EXECUTED;\n                         curarg.clear();"
      },
      {
        "sha": "707dfe69871f7dd8a2b771d1b8fc1eaeb112ab80",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -274,7 +274,7 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n }\n \n // A bit of a hack - dependency on a function defined in rpc/blockchain.cpp\n-UniValue getblockchaininfo(const UniValue& params, bool fHelp);\n+UniValue getblockchaininfo(const JSONRPCRequest& request);\n \n static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n {\n@@ -285,8 +285,8 @@ static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n \n     switch (rf) {\n     case RF_JSON: {\n-        UniValue rpcParams(UniValue::VARR);\n-        UniValue chainInfoObject = getblockchaininfo(rpcParams, false);\n+        JSONRPCRequest jsonRequest;\n+        UniValue chainInfoObject = getblockchaininfo(jsonRequest);\n         string strJSON = chainInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);"
      },
      {
        "sha": "0c827a1e3881d6ad3e053fcb1226237eb01ec510",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 79,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -146,9 +146,9 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     return result;\n }\n \n-UniValue getblockcount(const UniValue& params, bool fHelp)\n+UniValue getblockcount(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getblockcount\\n\"\n             \"\\nReturns the number of blocks in the longest block chain.\\n\"\n@@ -163,9 +163,9 @@ UniValue getblockcount(const UniValue& params, bool fHelp)\n     return chainActive.Height();\n }\n \n-UniValue getbestblockhash(const UniValue& params, bool fHelp)\n+UniValue getbestblockhash(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getbestblockhash\\n\"\n             \"\\nReturns the hash of the best (tip) block in the longest block chain.\\n\"\n@@ -190,9 +190,9 @@ void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)\n \tcond_blockchange.notify_all();\n }\n \n-UniValue waitfornewblock(const UniValue& params, bool fHelp)\n+UniValue waitfornewblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"waitfornewblock\\n\"\n             \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n@@ -209,8 +209,8 @@ UniValue waitfornewblock(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"waitfornewblock\", \"1000\")\n         );\n     int timeout = 0;\n-    if (params.size() > 0)\n-        timeout = params[0].get_int();\n+    if (request.params.size() > 0)\n+        timeout = request.params[0].get_int();\n \n     CUpdatedBlock block;\n     {\n@@ -228,9 +228,9 @@ UniValue waitfornewblock(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue waitforblock(const UniValue& params, bool fHelp)\n+UniValue waitforblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"waitforblock\\n\"\n             \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n@@ -249,10 +249,10 @@ UniValue waitforblock(const UniValue& params, bool fHelp)\n         );\n     int timeout = 0;\n \n-    uint256 hash = uint256S(params[0].get_str());\n+    uint256 hash = uint256S(request.params[0].get_str());\n \n-    if (params.size() > 1)\n-        timeout = params[1].get_int();\n+    if (request.params.size() > 1)\n+        timeout = request.params[1].get_int();\n \n     CUpdatedBlock block;\n     {\n@@ -270,9 +270,9 @@ UniValue waitforblock(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue waitforblockheight(const UniValue& params, bool fHelp)\n+UniValue waitforblockheight(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"waitforblock\\n\"\n             \"\\nWaits for (at least) block height and returns the height and hash\\n\"\n@@ -292,10 +292,10 @@ UniValue waitforblockheight(const UniValue& params, bool fHelp)\n         );\n     int timeout = 0;\n \n-    int height = params[0].get_int();\n+    int height = request.params[0].get_int();\n \n-    if (params.size() > 1)\n-        timeout = params[1].get_int();\n+    if (request.params.size() > 1)\n+        timeout = request.params[1].get_int();\n \n     CUpdatedBlock block;\n     {\n@@ -312,9 +312,9 @@ UniValue waitforblockheight(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue getdifficulty(const UniValue& params, bool fHelp)\n+UniValue getdifficulty(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getdifficulty\\n\"\n             \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\"\n@@ -411,9 +411,9 @@ UniValue mempoolToJSON(bool fVerbose = false)\n     }\n }\n \n-UniValue getrawmempool(const UniValue& params, bool fHelp)\n+UniValue getrawmempool(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"getrawmempool ( verbose )\\n\"\n             \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n@@ -436,15 +436,15 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n         );\n \n     bool fVerbose = false;\n-    if (params.size() > 0)\n-        fVerbose = params[0].get_bool();\n+    if (request.params.size() > 0)\n+        fVerbose = request.params[0].get_bool();\n \n     return mempoolToJSON(fVerbose);\n }\n \n-UniValue getmempoolancestors(const UniValue& params, bool fHelp)\n+UniValue getmempoolancestors(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw runtime_error(\n             \"getmempoolancestors txid (verbose)\\n\"\n             \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\"\n@@ -469,10 +469,10 @@ UniValue getmempoolancestors(const UniValue& params, bool fHelp)\n     }\n \n     bool fVerbose = false;\n-    if (params.size() > 1)\n-        fVerbose = params[1].get_bool();\n+    if (request.params.size() > 1)\n+        fVerbose = request.params[1].get_bool();\n \n-    uint256 hash = ParseHashV(params[0], \"parameter 1\");\n+    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n     LOCK(mempool.cs);\n \n@@ -506,9 +506,9 @@ UniValue getmempoolancestors(const UniValue& params, bool fHelp)\n     }\n }\n \n-UniValue getmempooldescendants(const UniValue& params, bool fHelp)\n+UniValue getmempooldescendants(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw runtime_error(\n             \"getmempooldescendants txid (verbose)\\n\"\n             \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\"\n@@ -533,10 +533,10 @@ UniValue getmempooldescendants(const UniValue& params, bool fHelp)\n     }\n \n     bool fVerbose = false;\n-    if (params.size() > 1)\n-        fVerbose = params[1].get_bool();\n+    if (request.params.size() > 1)\n+        fVerbose = request.params[1].get_bool();\n \n-    uint256 hash = ParseHashV(params[0], \"parameter 1\");\n+    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n     LOCK(mempool.cs);\n \n@@ -570,9 +570,9 @@ UniValue getmempooldescendants(const UniValue& params, bool fHelp)\n     }\n }\n \n-UniValue getmempoolentry(const UniValue& params, bool fHelp)\n+UniValue getmempoolentry(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1) {\n+    if (request.fHelp || request.params.size() != 1) {\n         throw runtime_error(\n             \"getmempoolentry txid\\n\"\n             \"\\nReturns mempool data for given transaction\\n\"\n@@ -588,7 +588,7 @@ UniValue getmempoolentry(const UniValue& params, bool fHelp)\n         );\n     }\n \n-    uint256 hash = ParseHashV(params[0], \"parameter 1\");\n+    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n     LOCK(mempool.cs);\n \n@@ -603,9 +603,9 @@ UniValue getmempoolentry(const UniValue& params, bool fHelp)\n     return info;\n }\n \n-UniValue getblockhash(const UniValue& params, bool fHelp)\n+UniValue getblockhash(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"getblockhash index\\n\"\n             \"\\nReturns hash of block in best-block-chain at index provided.\\n\"\n@@ -620,17 +620,17 @@ UniValue getblockhash(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    int nHeight = params[0].get_int();\n+    int nHeight = request.params[0].get_int();\n     if (nHeight < 0 || nHeight > chainActive.Height())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range\");\n \n     CBlockIndex* pblockindex = chainActive[nHeight];\n     return pblockindex->GetBlockHash().GetHex();\n }\n \n-UniValue getblockheader(const UniValue& params, bool fHelp)\n+UniValue getblockheader(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"getblockheader \\\"hash\\\" ( verbose )\\n\"\n             \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n@@ -664,12 +664,12 @@ UniValue getblockheader(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n \n     bool fVerbose = true;\n-    if (params.size() > 1)\n-        fVerbose = params[1].get_bool();\n+    if (request.params.size() > 1)\n+        fVerbose = request.params[1].get_bool();\n \n     if (mapBlockIndex.count(hash) == 0)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n@@ -687,9 +687,9 @@ UniValue getblockheader(const UniValue& params, bool fHelp)\n     return blockheaderToJSON(pblockindex);\n }\n \n-UniValue getblock(const UniValue& params, bool fHelp)\n+UniValue getblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"getblock \\\"hash\\\" ( verbose )\\n\"\n             \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n@@ -730,12 +730,12 @@ UniValue getblock(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n \n     bool fVerbose = true;\n-    if (params.size() > 1)\n-        fVerbose = params[1].get_bool();\n+    if (request.params.size() > 1)\n+        fVerbose = request.params[1].get_bool();\n \n     if (mapBlockIndex.count(hash) == 0)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n@@ -814,9 +814,9 @@ static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     return true;\n }\n \n-UniValue gettxoutsetinfo(const UniValue& params, bool fHelp)\n+UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"gettxoutsetinfo\\n\"\n             \"\\nReturns statistics about the unspent transaction output set.\\n\"\n@@ -854,9 +854,9 @@ UniValue gettxoutsetinfo(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue gettxout(const UniValue& params, bool fHelp)\n+UniValue gettxout(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 3)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw runtime_error(\n             \"gettxout \\\"txid\\\" n ( includemempool )\\n\"\n             \"\\nReturns details about an unspent transaction output.\\n\"\n@@ -896,12 +896,12 @@ UniValue gettxout(const UniValue& params, bool fHelp)\n \n     UniValue ret(UniValue::VOBJ);\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n-    int n = params[1].get_int();\n+    int n = request.params[1].get_int();\n     bool fMempool = true;\n-    if (params.size() > 2)\n-        fMempool = params[2].get_bool();\n+    if (request.params.size() > 2)\n+        fMempool = request.params[2].get_bool();\n \n     CCoins coins;\n     if (fMempool) {\n@@ -934,11 +934,11 @@ UniValue gettxout(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue verifychain(const UniValue& params, bool fHelp)\n+UniValue verifychain(const JSONRPCRequest& request)\n {\n     int nCheckLevel = GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n     int nCheckDepth = GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n-    if (fHelp || params.size() > 2)\n+    if (request.fHelp || request.params.size() > 2)\n         throw runtime_error(\n             \"verifychain ( checklevel numblocks )\\n\"\n             \"\\nVerifies blockchain database.\\n\"\n@@ -954,10 +954,10 @@ UniValue verifychain(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    if (params.size() > 0)\n-        nCheckLevel = params[0].get_int();\n-    if (params.size() > 1)\n-        nCheckDepth = params[1].get_int();\n+    if (request.params.size() > 0)\n+        nCheckLevel = request.params[0].get_int();\n+    if (request.params.size() > 1)\n+        nCheckDepth = request.params[1].get_int();\n \n     return CVerifyDB().VerifyDB(Params(), pcoinsTip, nCheckLevel, nCheckDepth);\n }\n@@ -1021,9 +1021,9 @@ void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const std::string &name,\n         bip9_softforks.push_back(Pair(name, BIP9SoftForkDesc(consensusParams, id)));\n }\n \n-UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n+UniValue getblockchaininfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getblockchaininfo\\n\"\n             \"Returns an object containing various state info regarding block chain processing.\\n\"\n@@ -1113,9 +1113,9 @@ struct CompareBlocksByHeight\n     }\n };\n \n-UniValue getchaintips(const UniValue& params, bool fHelp)\n+UniValue getchaintips(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getchaintips\\n\"\n             \"Return information about all known tips in the block tree,\"\n@@ -1229,9 +1229,9 @@ UniValue mempoolInfoToJSON()\n     return ret;\n }\n \n-UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n+UniValue getmempoolinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getmempoolinfo\\n\"\n             \"\\nReturns details on the active state of the TX memory pool.\\n\"\n@@ -1251,9 +1251,9 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n     return mempoolInfoToJSON();\n }\n \n-UniValue preciousblock(const UniValue& params, bool fHelp)\n+UniValue preciousblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"preciousblock \\\"hash\\\"\\n\"\n             \"\\nTreats a block as if it were received before others with the same work.\\n\"\n@@ -1267,7 +1267,7 @@ UniValue preciousblock(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"preciousblock\", \"\\\"blockhash\\\"\")\n         );\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n     CBlockIndex* pblockindex;\n \n@@ -1289,9 +1289,9 @@ UniValue preciousblock(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue invalidateblock(const UniValue& params, bool fHelp)\n+UniValue invalidateblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"invalidateblock \\\"hash\\\"\\n\"\n             \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\"\n@@ -1303,7 +1303,7 @@ UniValue invalidateblock(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"invalidateblock\", \"\\\"blockhash\\\"\")\n         );\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n     CValidationState state;\n \n@@ -1327,9 +1327,9 @@ UniValue invalidateblock(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue reconsiderblock(const UniValue& params, bool fHelp)\n+UniValue reconsiderblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"reconsiderblock \\\"hash\\\"\\n\"\n             \"\\nRemoves invalidity status of a block and its descendants, reconsider them for activation.\\n\"\n@@ -1342,7 +1342,7 @@ UniValue reconsiderblock(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n         );\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n \n     {"
      },
      {
        "sha": "d509dd691f55d76e43cf6a58bb5e96cc90648ac1",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 45,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -74,9 +74,9 @@ UniValue GetNetworkHashPS(int lookup, int height) {\n     return workDiff.getdouble() / timeDiff;\n }\n \n-UniValue getnetworkhashps(const UniValue& params, bool fHelp)\n+UniValue getnetworkhashps(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 2)\n+    if (request.fHelp || request.params.size() > 2)\n         throw runtime_error(\n             \"getnetworkhashps ( blocks height )\\n\"\n             \"\\nReturns the estimated network hashes per second based on the last n blocks.\\n\"\n@@ -93,7 +93,7 @@ UniValue getnetworkhashps(const UniValue& params, bool fHelp)\n        );\n \n     LOCK(cs_main);\n-    return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n+    return GetNetworkHashPS(request.params.size() > 0 ? request.params[0].get_int() : 120, request.params.size() > 1 ? request.params[1].get_int() : -1);\n }\n \n UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n@@ -146,9 +146,9 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n     return blockHashes;\n }\n \n-UniValue generate(const UniValue& params, bool fHelp)\n+UniValue generate(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"generate numblocks ( maxtries )\\n\"\n             \"\\nMine up to numblocks blocks immediately (before the RPC call returns)\\n\"\n@@ -162,10 +162,10 @@ UniValue generate(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"generate\", \"11\")\n         );\n \n-    int nGenerate = params[0].get_int();\n+    int nGenerate = request.params[0].get_int();\n     uint64_t nMaxTries = 1000000;\n-    if (params.size() > 1) {\n-        nMaxTries = params[1].get_int();\n+    if (request.params.size() > 1) {\n+        nMaxTries = request.params[1].get_int();\n     }\n \n     boost::shared_ptr<CReserveScript> coinbaseScript;\n@@ -182,9 +182,9 @@ UniValue generate(const UniValue& params, bool fHelp)\n     return generateBlocks(coinbaseScript, nGenerate, nMaxTries, true);\n }\n \n-UniValue generatetoaddress(const UniValue& params, bool fHelp)\n+UniValue generatetoaddress(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 3)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw runtime_error(\n             \"generatetoaddress numblocks address (maxtries)\\n\"\n             \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\"\n@@ -199,13 +199,13 @@ UniValue generatetoaddress(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"generatetoaddress\", \"11 \\\"myaddress\\\"\")\n         );\n \n-    int nGenerate = params[0].get_int();\n+    int nGenerate = request.params[0].get_int();\n     uint64_t nMaxTries = 1000000;\n-    if (params.size() > 2) {\n-        nMaxTries = params[2].get_int();\n+    if (request.params.size() > 2) {\n+        nMaxTries = request.params[2].get_int();\n     }\n \n-    CBitcoinAddress address(params[1].get_str());\n+    CBitcoinAddress address(request.params[1].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Error: Invalid address\");\n     \n@@ -215,9 +215,9 @@ UniValue generatetoaddress(const UniValue& params, bool fHelp)\n     return generateBlocks(coinbaseScript, nGenerate, nMaxTries, false);\n }\n \n-UniValue getmininginfo(const UniValue& params, bool fHelp)\n+UniValue getmininginfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getmininginfo\\n\"\n             \"\\nReturns a json object containing mining-related information.\"\n@@ -248,17 +248,17 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n-    obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n+    obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(request)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n     return obj;\n }\n \n \n // NOTE: Unlike wallet RPC (which use BTC values), mining RPCs follow GBT (BIP 22) in using satoshi amounts\n-UniValue prioritisetransaction(const UniValue& params, bool fHelp)\n+UniValue prioritisetransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 3)\n+    if (request.fHelp || request.params.size() != 3)\n         throw runtime_error(\n             \"prioritisetransaction <txid> <priority delta> <fee delta>\\n\"\n             \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\"\n@@ -279,10 +279,10 @@ UniValue prioritisetransaction(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    uint256 hash = ParseHashStr(params[0].get_str(), \"txid\");\n-    CAmount nAmount = params[2].get_int64();\n+    uint256 hash = ParseHashStr(request.params[0].get_str(), \"txid\");\n+    CAmount nAmount = request.params[2].get_int64();\n \n-    mempool.PrioritiseTransaction(hash, params[0].get_str(), params[1].get_real(), nAmount);\n+    mempool.PrioritiseTransaction(hash, request.params[0].get_str(), request.params[1].get_real(), nAmount);\n     return true;\n }\n \n@@ -315,9 +315,9 @@ std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n     return s;\n }\n \n-UniValue getblocktemplate(const UniValue& params, bool fHelp)\n+UniValue getblocktemplate(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"getblocktemplate ( TemplateRequest )\\n\"\n             \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n@@ -400,9 +400,9 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     UniValue lpval = NullUniValue;\n     std::set<std::string> setClientRules;\n     int64_t nMaxVersionPreVB = -1;\n-    if (params.size() > 0)\n+    if (request.params.size() > 0)\n     {\n-        const UniValue& oparam = params[0].get_obj();\n+        const UniValue& oparam = request.params[0].get_obj();\n         const UniValue& modeval = find_value(oparam, \"mode\");\n         if (modeval.isStr())\n             strMode = modeval.get_str();\n@@ -705,9 +705,9 @@ class submitblock_StateCatcher : public CValidationInterface\n     };\n };\n \n-UniValue submitblock(const UniValue& params, bool fHelp)\n+UniValue submitblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"submitblock \\\"hexdata\\\" ( \\\"jsonparametersobject\\\" )\\n\"\n             \"\\nAttempts to submit new block to network.\\n\"\n@@ -727,7 +727,7 @@ UniValue submitblock(const UniValue& params, bool fHelp)\n         );\n \n     CBlock block;\n-    if (!DecodeHexBlk(block, params[0].get_str()))\n+    if (!DecodeHexBlk(block, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n \n     uint256 hash = block.GetHash();\n@@ -774,9 +774,9 @@ UniValue submitblock(const UniValue& params, bool fHelp)\n     return BIP22ValidationResult(state);\n }\n \n-UniValue estimatefee(const UniValue& params, bool fHelp)\n+UniValue estimatefee(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"estimatefee nblocks\\n\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n@@ -792,9 +792,9 @@ UniValue estimatefee(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"estimatefee\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n-    int nBlocks = params[0].get_int();\n+    int nBlocks = request.params[0].get_int();\n     if (nBlocks < 1)\n         nBlocks = 1;\n \n@@ -805,9 +805,9 @@ UniValue estimatefee(const UniValue& params, bool fHelp)\n     return ValueFromAmount(feeRate.GetFeePerK());\n }\n \n-UniValue estimatepriority(const UniValue& params, bool fHelp)\n+UniValue estimatepriority(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"estimatepriority nblocks\\n\"\n             \"\\nEstimates the approximate priority a zero-fee transaction needs to begin\\n\"\n@@ -823,18 +823,18 @@ UniValue estimatepriority(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"estimatepriority\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n-    int nBlocks = params[0].get_int();\n+    int nBlocks = request.params[0].get_int();\n     if (nBlocks < 1)\n         nBlocks = 1;\n \n     return mempool.estimatePriority(nBlocks);\n }\n \n-UniValue estimatesmartfee(const UniValue& params, bool fHelp)\n+UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"estimatesmartfee nblocks\\n\"\n             \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n@@ -856,9 +856,9 @@ UniValue estimatesmartfee(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"estimatesmartfee\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n-    int nBlocks = params[0].get_int();\n+    int nBlocks = request.params[0].get_int();\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n@@ -868,9 +868,9 @@ UniValue estimatesmartfee(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue estimatesmartpriority(const UniValue& params, bool fHelp)\n+UniValue estimatesmartpriority(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"estimatesmartpriority nblocks\\n\"\n             \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n@@ -892,9 +892,9 @@ UniValue estimatesmartpriority(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"estimatesmartpriority\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n-    int nBlocks = params[0].get_int();\n+    int nBlocks = request.params[0].get_int();\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;"
      },
      {
        "sha": "eaef4856b3c5e5c34a7333a4930d9516bbbac77e",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -39,9 +39,9 @@ using namespace std;\n  *\n  * Or alternatively, create a specific query method for the information.\n  **/\n-UniValue getinfo(const UniValue& params, bool fHelp)\n+UniValue getinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getinfo\\n\"\n             \"\\nDEPRECATED. Returns an object containing various state info.\\n\"\n@@ -148,9 +148,9 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n };\n #endif\n \n-UniValue validateaddress(const UniValue& params, bool fHelp)\n+UniValue validateaddress(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"validateaddress \\\"bitcoinaddress\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n@@ -181,7 +181,7 @@ UniValue validateaddress(const UniValue& params, bool fHelp)\n     LOCK(cs_main);\n #endif\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     bool isValid = address.IsValid();\n \n     UniValue ret(UniValue::VOBJ);\n@@ -278,9 +278,9 @@ CScript _createmultisig_redeemScript(const UniValue& params)\n     return result;\n }\n \n-UniValue createmultisig(const UniValue& params, bool fHelp)\n+UniValue createmultisig(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 2)\n     {\n         string msg = \"createmultisig nrequired [\\\"key\\\",...]\\n\"\n             \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n@@ -310,7 +310,7 @@ UniValue createmultisig(const UniValue& params, bool fHelp)\n     }\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig_redeemScript(params);\n+    CScript inner = _createmultisig_redeemScript(request.params);\n     CScriptID innerID(inner);\n     CBitcoinAddress address(innerID);\n \n@@ -321,9 +321,9 @@ UniValue createmultisig(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue verifymessage(const UniValue& params, bool fHelp)\n+UniValue verifymessage(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 3)\n+    if (request.fHelp || request.params.size() != 3)\n         throw runtime_error(\n             \"verifymessage \\\"bitcoinaddress\\\" \\\"signature\\\" \\\"message\\\"\\n\"\n             \"\\nVerify a signed message\\n\"\n@@ -346,9 +346,9 @@ UniValue verifymessage(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    string strAddress  = params[0].get_str();\n-    string strSign     = params[1].get_str();\n-    string strMessage  = params[2].get_str();\n+    string strAddress  = request.params[0].get_str();\n+    string strSign     = request.params[1].get_str();\n+    string strMessage  = request.params[2].get_str();\n \n     CBitcoinAddress addr(strAddress);\n     if (!addr.IsValid())\n@@ -375,9 +375,9 @@ UniValue verifymessage(const UniValue& params, bool fHelp)\n     return (pubkey.GetID() == keyID);\n }\n \n-UniValue signmessagewithprivkey(const UniValue& params, bool fHelp)\n+UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 2)\n+    if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n             \"signmessagewithprivkey \\\"privkey\\\" \\\"message\\\"\\n\"\n             \"\\nSign a message with the private key of an address\\n\"\n@@ -395,8 +395,8 @@ UniValue signmessagewithprivkey(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"signmessagewithprivkey\", \"\\\"privkey\\\", \\\"my message\\\"\")\n         );\n \n-    string strPrivkey = params[0].get_str();\n-    string strMessage = params[1].get_str();\n+    string strPrivkey = request.params[0].get_str();\n+    string strMessage = request.params[1].get_str();\n \n     CBitcoinSecret vchSecret;\n     bool fGood = vchSecret.SetString(strPrivkey);\n@@ -417,9 +417,9 @@ UniValue signmessagewithprivkey(const UniValue& params, bool fHelp)\n     return EncodeBase64(&vchSig[0], vchSig.size());\n }\n \n-UniValue setmocktime(const UniValue& params, bool fHelp)\n+UniValue setmocktime(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"setmocktime timestamp\\n\"\n             \"\\nSet the local time to given timestamp (-regtest only)\\n\"\n@@ -437,8 +437,8 @@ UniValue setmocktime(const UniValue& params, bool fHelp)\n     // in a long time.\n     LOCK(cs_main);\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n-    SetMockTime(params[0].get_int64());\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n+    SetMockTime(request.params[0].get_int64());\n \n     uint64_t t = GetTime();\n     if(g_connman) {"
      },
      {
        "sha": "2b43f08f0be0a34cfc1d030f7228c69e9bde59a4",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 36,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -23,9 +23,9 @@\n \n using namespace std;\n \n-UniValue getconnectioncount(const UniValue& params, bool fHelp)\n+UniValue getconnectioncount(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getconnectioncount\\n\"\n             \"\\nReturns the number of connections to other nodes.\\n\"\n@@ -42,9 +42,9 @@ UniValue getconnectioncount(const UniValue& params, bool fHelp)\n     return (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL);\n }\n \n-UniValue ping(const UniValue& params, bool fHelp)\n+UniValue ping(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"ping\\n\"\n             \"\\nRequests that a ping be sent to all other nodes, to measure ping time.\\n\"\n@@ -65,9 +65,9 @@ UniValue ping(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue getpeerinfo(const UniValue& params, bool fHelp)\n+UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getpeerinfo\\n\"\n             \"\\nReturns data about each connected network node as a json array of objects.\\n\"\n@@ -184,12 +184,12 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue addnode(const UniValue& params, bool fHelp)\n+UniValue addnode(const JSONRPCRequest& request)\n {\n     string strCommand;\n-    if (params.size() == 2)\n-        strCommand = params[1].get_str();\n-    if (fHelp || params.size() != 2 ||\n+    if (request.params.size() == 2)\n+        strCommand = request.params[1].get_str();\n+    if (request.fHelp || request.params.size() != 2 ||\n         (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n         throw runtime_error(\n             \"addnode \\\"node\\\" \\\"add|remove|onetry\\\"\\n\"\n@@ -206,7 +206,7 @@ UniValue addnode(const UniValue& params, bool fHelp)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    string strNode = params[0].get_str();\n+    string strNode = request.params[0].get_str();\n \n     if (strCommand == \"onetry\")\n     {\n@@ -229,9 +229,9 @@ UniValue addnode(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue disconnectnode(const UniValue& params, bool fHelp)\n+UniValue disconnectnode(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"disconnectnode \\\"node\\\" \\n\"\n             \"\\nImmediately disconnects from the specified node.\\n\"\n@@ -245,16 +245,16 @@ UniValue disconnectnode(const UniValue& params, bool fHelp)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    bool ret = g_connman->DisconnectNode(params[0].get_str());\n+    bool ret = g_connman->DisconnectNode(request.params[0].get_str());\n     if (!ret)\n         throw JSONRPCError(RPC_CLIENT_NODE_NOT_CONNECTED, \"Node not found in connected nodes\");\n \n     return NullUniValue;\n }\n \n-UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n+UniValue getaddednodeinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"getaddednodeinfo ( \\\"node\\\" )\\n\"\n             \"\\nReturns information about the given added node, or all added nodes\\n\"\n@@ -286,10 +286,10 @@ UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n \n     std::vector<AddedNodeInfo> vInfo = g_connman->GetAddedNodeInfo();\n \n-    if (params.size() == 1) {\n+    if (request.params.size() == 1) {\n         bool found = false;\n         for (const AddedNodeInfo& info : vInfo) {\n-            if (info.strAddedNode == params[0].get_str()) {\n+            if (info.strAddedNode == request.params[0].get_str()) {\n                 vInfo.assign(1, info);\n                 found = true;\n                 break;\n@@ -320,9 +320,9 @@ UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue getnettotals(const UniValue& params, bool fHelp)\n+UniValue getnettotals(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 0)\n+    if (request.fHelp || request.params.size() > 0)\n         throw runtime_error(\n             \"getnettotals\\n\"\n             \"\\nReturns information about network traffic, including bytes in, bytes out,\\n\"\n@@ -386,9 +386,9 @@ static UniValue GetNetworksInfo()\n     return networks;\n }\n \n-UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n+UniValue getnetworkinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getnetworkinfo\\n\"\n             \"Returns an object containing various state info regarding P2P networking.\\n\"\n@@ -456,12 +456,12 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n     return obj;\n }\n \n-UniValue setban(const UniValue& params, bool fHelp)\n+UniValue setban(const JSONRPCRequest& request)\n {\n     string strCommand;\n-    if (params.size() >= 2)\n-        strCommand = params[1].get_str();\n-    if (fHelp || params.size() < 2 ||\n+    if (request.params.size() >= 2)\n+        strCommand = request.params[1].get_str();\n+    if (request.fHelp || request.params.size() < 2 ||\n         (strCommand != \"add\" && strCommand != \"remove\"))\n         throw runtime_error(\n                             \"setban \\\"ip(/netmask)\\\" \\\"add|remove\\\" (bantime) (absolute)\\n\"\n@@ -483,16 +483,16 @@ UniValue setban(const UniValue& params, bool fHelp)\n     CNetAddr netAddr;\n     bool isSubnet = false;\n \n-    if (params[0].get_str().find(\"/\") != string::npos)\n+    if (request.params[0].get_str().find(\"/\") != string::npos)\n         isSubnet = true;\n \n     if (!isSubnet) {\n         CNetAddr resolved;\n-        LookupHost(params[0].get_str().c_str(), resolved, false);\n+        LookupHost(request.params[0].get_str().c_str(), resolved, false);\n         netAddr = resolved;\n     }\n     else\n-        LookupSubNet(params[0].get_str().c_str(), subNet);\n+        LookupSubNet(request.params[0].get_str().c_str(), subNet);\n \n     if (! (isSubnet ? subNet.IsValid() : netAddr.IsValid()) )\n         throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Invalid IP/Subnet\");\n@@ -503,11 +503,11 @@ UniValue setban(const UniValue& params, bool fHelp)\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n \n         int64_t banTime = 0; //use standard bantime if not specified\n-        if (params.size() >= 3 && !params[2].isNull())\n-            banTime = params[2].get_int64();\n+        if (request.params.size() >= 3 && !request.params[2].isNull())\n+            banTime = request.params[2].get_int64();\n \n         bool absolute = false;\n-        if (params.size() == 4 && params[3].isTrue())\n+        if (request.params.size() == 4 && request.params[3].isTrue())\n             absolute = true;\n \n         isSubnet ? g_connman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute) : g_connman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n@@ -520,9 +520,9 @@ UniValue setban(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue listbanned(const UniValue& params, bool fHelp)\n+UniValue listbanned(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n                             \"listbanned\\n\"\n                             \"\\nList all banned IPs/Subnets.\\n\"\n@@ -553,9 +553,9 @@ UniValue listbanned(const UniValue& params, bool fHelp)\n     return bannedAddresses;\n }\n \n-UniValue clearbanned(const UniValue& params, bool fHelp)\n+UniValue clearbanned(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n                             \"clearbanned\\n\"\n                             \"\\nClear all banned IPs.\\n\""
      },
      {
        "sha": "0656a617553828fa64bc543a8eb5604c3da877db",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 45,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -126,9 +126,9 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     }\n }\n \n-UniValue getrawtransaction(const UniValue& params, bool fHelp)\n+UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"getrawtransaction \\\"txid\\\" ( verbose )\\n\"\n             \"\\nNOTE: By default this function only works sometimes. This is when the tx is in the mempool\\n\"\n@@ -198,11 +198,11 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    uint256 hash = ParseHashV(params[0], \"parameter 1\");\n+    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n     bool fVerbose = false;\n-    if (params.size() > 1)\n-        fVerbose = (params[1].get_int() != 0);\n+    if (request.params.size() > 1)\n+        fVerbose = (request.params[1].get_int() != 0);\n \n     CTransaction tx;\n     uint256 hashBlock;\n@@ -220,9 +220,9 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue gettxoutproof(const UniValue& params, bool fHelp)\n+UniValue gettxoutproof(const JSONRPCRequest& request)\n {\n-    if (fHelp || (params.size() != 1 && params.size() != 2))\n+    if (request.fHelp || (request.params.size() != 1 && request.params.size() != 2))\n         throw runtime_error(\n             \"gettxoutproof [\\\"txid\\\",...] ( blockhash )\\n\"\n             \"\\nReturns a hex-encoded proof that \\\"txid\\\" was included in a block.\\n\"\n@@ -244,7 +244,7 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n \n     set<uint256> setTxids;\n     uint256 oneTxid;\n-    UniValue txids = params[0].get_array();\n+    UniValue txids = request.params[0].get_array();\n     for (unsigned int idx = 0; idx < txids.size(); idx++) {\n         const UniValue& txid = txids[idx];\n         if (txid.get_str().length() != 64 || !IsHex(txid.get_str()))\n@@ -261,9 +261,9 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n     CBlockIndex* pblockindex = NULL;\n \n     uint256 hashBlock;\n-    if (params.size() > 1)\n+    if (request.params.size() > 1)\n     {\n-        hashBlock = uint256S(params[1].get_str());\n+        hashBlock = uint256S(request.params[1].get_str());\n         if (!mapBlockIndex.count(hashBlock))\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         pblockindex = mapBlockIndex[hashBlock];\n@@ -301,9 +301,9 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n     return strHex;\n }\n \n-UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n+UniValue verifytxoutproof(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"verifytxoutproof \\\"proof\\\"\\n\"\n             \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n@@ -314,7 +314,7 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n             \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid\\n\"\n         );\n \n-    CDataStream ssMB(ParseHexV(params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n+    CDataStream ssMB(ParseHexV(request.params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n     CMerkleBlock merkleBlock;\n     ssMB >> merkleBlock;\n \n@@ -335,9 +335,9 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n     return res;\n }\n \n-UniValue createrawtransaction(const UniValue& params, bool fHelp)\n+UniValue createrawtransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 3)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw runtime_error(\n             \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,\\\"data\\\":\\\"hex\\\",...} ( locktime )\\n\"\n             \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n@@ -373,17 +373,17 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n         );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ)(UniValue::VNUM), true);\n-    if (params[0].isNull() || params[1].isNull())\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ)(UniValue::VNUM), true);\n+    if (request.params[0].isNull() || request.params[1].isNull())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n \n-    UniValue inputs = params[0].get_array();\n-    UniValue sendTo = params[1].get_obj();\n+    UniValue inputs = request.params[0].get_array();\n+    UniValue sendTo = request.params[1].get_obj();\n \n     CMutableTransaction rawTx;\n \n-    if (params.size() > 2 && !params[2].isNull()) {\n-        int64_t nLockTime = params[2].get_int64();\n+    if (request.params.size() > 2 && !request.params[2].isNull()) {\n+        int64_t nLockTime = request.params[2].get_int64();\n         if (nLockTime < 0 || nLockTime > std::numeric_limits<uint32_t>::max())\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, locktime out of range\");\n         rawTx.nLockTime = nLockTime;\n@@ -448,9 +448,9 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n     return EncodeHexTx(rawTx);\n }\n \n-UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n+UniValue decoderawtransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"decoderawtransaction \\\"hexstring\\\"\\n\"\n             \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\"\n@@ -504,11 +504,11 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n \n     CTransaction tx;\n \n-    if (!DecodeHexTx(tx, params[0].get_str(), true))\n+    if (!DecodeHexTx(tx, request.params[0].get_str(), true))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n     UniValue result(UniValue::VOBJ);\n@@ -517,9 +517,9 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue decodescript(const UniValue& params, bool fHelp)\n+UniValue decodescript(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"decodescript \\\"hex\\\"\\n\"\n             \"\\nDecode a hex-encoded script.\\n\"\n@@ -542,12 +542,12 @@ UniValue decodescript(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n \n     UniValue r(UniValue::VOBJ);\n     CScript script;\n-    if (params[0].get_str().size() > 0){\n-        vector<unsigned char> scriptData(ParseHexV(params[0], \"argument\"));\n+    if (request.params[0].get_str().size() > 0){\n+        vector<unsigned char> scriptData(ParseHexV(request.params[0], \"argument\"));\n         script = CScript(scriptData.begin(), scriptData.end());\n     } else {\n         // Empty scripts are valid\n@@ -578,9 +578,9 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n     vErrorsRet.push_back(entry);\n }\n \n-UniValue signrawtransaction(const UniValue& params, bool fHelp)\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 4)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw runtime_error(\n             \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n             \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n@@ -644,9 +644,9 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n #else\n     LOCK(cs_main);\n #endif\n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VARR)(UniValue::VARR)(UniValue::VSTR), true);\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VARR)(UniValue::VARR)(UniValue::VSTR), true);\n \n-    vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n+    vector<unsigned char> txData(ParseHexV(request.params[0], \"argument 1\"));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n     vector<CMutableTransaction> txVariants;\n     while (!ssData.empty()) {\n@@ -687,9 +687,9 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n \n     bool fGivenKeys = false;\n     CBasicKeyStore tempKeystore;\n-    if (params.size() > 2 && !params[2].isNull()) {\n+    if (request.params.size() > 2 && !request.params[2].isNull()) {\n         fGivenKeys = true;\n-        UniValue keys = params[2].get_array();\n+        UniValue keys = request.params[2].get_array();\n         for (unsigned int idx = 0; idx < keys.size(); idx++) {\n             UniValue k = keys[idx];\n             CBitcoinSecret vchSecret;\n@@ -708,8 +708,8 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n #endif\n \n     // Add previous txouts given in the RPC call:\n-    if (params.size() > 1 && !params[1].isNull()) {\n-        UniValue prevTxs = params[1].get_array();\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        UniValue prevTxs = request.params[1].get_array();\n         for (unsigned int idx = 0; idx < prevTxs.size(); idx++) {\n             const UniValue& p = prevTxs[idx];\n             if (!p.isObject())\n@@ -777,7 +777,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n #endif\n \n     int nHashType = SIGHASH_ALL;\n-    if (params.size() > 3 && !params[3].isNull()) {\n+    if (request.params.size() > 3 && !request.params[3].isNull()) {\n         static map<string, int> mapSigHashValues =\n             boost::assign::map_list_of\n             (string(\"ALL\"), int(SIGHASH_ALL))\n@@ -787,7 +787,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             (string(\"SINGLE\"), int(SIGHASH_SINGLE))\n             (string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY))\n             ;\n-        string strHashType = params[3].get_str();\n+        string strHashType = request.params[3].get_str();\n         if (mapSigHashValues.count(strHashType))\n             nHashType = mapSigHashValues[strHashType];\n         else\n@@ -842,9 +842,9 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n+UniValue sendrawtransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"sendrawtransaction \\\"hexstring\\\" ( allowhighfees )\\n\"\n             \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n@@ -866,17 +866,17 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL));\n \n     // parse hex string from parameter\n     CTransaction tx;\n-    if (!DecodeHexTx(tx, params[0].get_str()))\n+    if (!DecodeHexTx(tx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     uint256 hashTx = tx.GetHash();\n \n     bool fLimitFree = false;\n     CAmount nMaxRawTxFee = maxTxFee;\n-    if (params.size() > 1 && params[1].get_bool())\n+    if (request.params.size() > 1 && request.params[1].get_bool())\n         nMaxRawTxFee = 0;\n \n     CCoinsViewCache &view = *pcoinsTip;"
      },
      {
        "sha": "29d0bee1b2789f21c30d343a5fd80d7ab860e802",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -195,10 +195,11 @@ std::string CRPCTable::help(const std::string& strCommand) const\n             continue;\n         try\n         {\n-            UniValue params;\n+            JSONRPCRequest jreq;\n+            jreq.fHelp = true;\n             rpcfn_type pfn = pcmd->actor;\n             if (setDone.insert(pfn).second)\n-                (*pfn)(params, true);\n+                (*pfn)(jreq);\n         }\n         catch (const std::exception& e)\n         {\n@@ -228,9 +229,9 @@ std::string CRPCTable::help(const std::string& strCommand) const\n     return strRet;\n }\n \n-UniValue help(const UniValue& params, bool fHelp)\n+UniValue help(const JSONRPCRequest& jsonRequest)\n {\n-    if (fHelp || params.size() > 1)\n+    if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n         throw runtime_error(\n             \"help ( \\\"command\\\" )\\n\"\n             \"\\nList all commands, or get help for a specified command.\\n\"\n@@ -241,17 +242,17 @@ UniValue help(const UniValue& params, bool fHelp)\n         );\n \n     string strCommand;\n-    if (params.size() > 0)\n-        strCommand = params[0].get_str();\n+    if (jsonRequest.params.size() > 0)\n+        strCommand = jsonRequest.params[0].get_str();\n \n     return tableRPC.help(strCommand);\n }\n \n \n-UniValue stop(const UniValue& params, bool fHelp)\n+UniValue stop(const JSONRPCRequest& jsonRequest)\n {\n     // Accept the deprecated and ignored 'detach' boolean argument\n-    if (fHelp || params.size() > 1)\n+    if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n         throw runtime_error(\n             \"stop\\n\"\n             \"\\nStop Bitcoin server.\");\n@@ -354,7 +355,7 @@ bool RPCIsInWarmup(std::string *outStatus)\n     return fRPCInWarmup;\n }\n \n-void JSONRequest::parse(const UniValue& valRequest)\n+void JSONRPCRequest::parse(const UniValue& valRequest)\n {\n     // Parse request\n     if (!valRequest.isObject())\n@@ -388,11 +389,11 @@ static UniValue JSONRPCExecOne(const UniValue& req)\n {\n     UniValue rpc_result(UniValue::VOBJ);\n \n-    JSONRequest jreq;\n+    JSONRPCRequest jreq;\n     try {\n         jreq.parse(req);\n \n-        UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n+        UniValue result = tableRPC.execute(jreq);\n         rpc_result = JSONRPCReplyObj(result, NullUniValue, jreq.id);\n     }\n     catch (const UniValue& objError)\n@@ -417,7 +418,7 @@ std::string JSONRPCExecBatch(const UniValue& vReq)\n     return ret.write() + \"\\n\";\n }\n \n-UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params) const\n+UniValue CRPCTable::execute(const JSONRPCRequest &request) const\n {\n     // Return immediately if in warmup\n     {\n@@ -427,7 +428,7 @@ UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params\n     }\n \n     // Find method\n-    const CRPCCommand *pcmd = tableRPC[strMethod];\n+    const CRPCCommand *pcmd = tableRPC[request.strMethod];\n     if (!pcmd)\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n \n@@ -436,7 +437,7 @@ UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params\n     try\n     {\n         // Execute\n-        return pcmd->actor(params, false);\n+        return pcmd->actor(request);\n     }\n     catch (const std::exception& e)\n     {"
      },
      {
        "sha": "d8b5097035c91296e10e6fac0df7cea35e470f94",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -41,14 +41,16 @@ struct UniValueType {\n     UniValue::VType type;\n };\n \n-class JSONRequest\n+class JSONRPCRequest\n {\n public:\n     UniValue id;\n     std::string strMethod;\n     UniValue params;\n+    bool fHelp;\n+    std::string URI;\n \n-    JSONRequest() { id = NullUniValue; }\n+    JSONRPCRequest() { id = NullUniValue; }\n     void parse(const UniValue& valRequest);\n };\n \n@@ -122,7 +124,7 @@ void RPCUnsetTimerInterface(RPCTimerInterface *iface);\n  */\n void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds);\n \n-typedef UniValue(*rpcfn_type)(const UniValue& params, bool fHelp);\n+typedef UniValue(*rpcfn_type)(const JSONRPCRequest& jsonRequest);\n \n class CRPCCommand\n {\n@@ -147,12 +149,11 @@ class CRPCTable\n \n     /**\n      * Execute a method.\n-     * @param method   Method to execute\n-     * @param params   UniValue Array of arguments (JSON objects)\n+     * @param request The JSONRPCRequest to execute\n      * @returns Result of the call.\n      * @throws an exception (UniValue) when an error happens.\n      */\n-    UniValue execute(const std::string &method, const UniValue &params) const;\n+    UniValue execute(const JSONRPCRequest &request) const;\n \n     /**\n     * Returns a list of registered commands"
      },
      {
        "sha": "a3d1a2558904d3988e29249dc02ac1d9c4144d7e",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -24,11 +24,14 @@ UniValue CallRPC(string args)\n     boost::split(vArgs, args, boost::is_any_of(\" \\t\"));\n     string strMethod = vArgs[0];\n     vArgs.erase(vArgs.begin());\n-    UniValue params = RPCConvertValues(strMethod, vArgs);\n+    JSONRPCRequest request;\n+    request.strMethod = strMethod;\n+    request.params = RPCConvertValues(strMethod, vArgs);\n+    request.fHelp = false;\n     BOOST_CHECK(tableRPC[strMethod]);\n     rpcfn_type method = tableRPC[strMethod]->actor;\n     try {\n-        UniValue result = (*method)(params, false);\n+        UniValue result = (*method)(request);\n         return result;\n     }\n     catch (const UniValue& objError) {"
      },
      {
        "sha": "8a1bbd56845267b9930ffc5fdce7b6c792d418be",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 50,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -74,12 +74,12 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n-UniValue importprivkey(const UniValue& params, bool fHelp)\n+UniValue importprivkey(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() < 1 || params.size() > 3)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw runtime_error(\n             \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n@@ -104,15 +104,15 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n \n     EnsureWalletIsUnlocked();\n \n-    string strSecret = params[0].get_str();\n+    string strSecret = request.params[0].get_str();\n     string strLabel = \"\";\n-    if (params.size() > 1)\n-        strLabel = params[1].get_str();\n+    if (request.params.size() > 1)\n+        strLabel = request.params[1].get_str();\n \n     // Whether to perform rescan after import\n     bool fRescan = true;\n-    if (params.size() > 2)\n-        fRescan = params[2].get_bool();\n+    if (request.params.size() > 2)\n+        fRescan = request.params[2].get_bool();\n \n     if (fRescan && fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n@@ -184,12 +184,12 @@ void ImportAddress(const CBitcoinAddress& address, const string& strLabel)\n         pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n }\n \n-UniValue importaddress(const UniValue& params, bool fHelp)\n+UniValue importaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() < 1 || params.size() > 4)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw runtime_error(\n             \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n             \"\\nAdds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n@@ -213,31 +213,31 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n \n \n     string strLabel = \"\";\n-    if (params.size() > 1)\n-        strLabel = params[1].get_str();\n+    if (request.params.size() > 1)\n+        strLabel = request.params[1].get_str();\n \n     // Whether to perform rescan after import\n     bool fRescan = true;\n-    if (params.size() > 2)\n-        fRescan = params[2].get_bool();\n+    if (request.params.size() > 2)\n+        fRescan = request.params[2].get_bool();\n \n     if (fRescan && fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n     // Whether to import a p2sh version, too\n     bool fP2SH = false;\n-    if (params.size() > 3)\n-        fP2SH = params[3].get_bool();\n+    if (request.params.size() > 3)\n+        fP2SH = request.params[3].get_bool();\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     if (address.IsValid()) {\n         if (fP2SH)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n         ImportAddress(address, strLabel);\n-    } else if (IsHex(params[0].get_str())) {\n-        std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n+    } else if (IsHex(request.params[0].get_str())) {\n+        std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n         ImportScript(CScript(data.begin(), data.end()), strLabel, fP2SH);\n     } else {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n@@ -252,12 +252,12 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue importprunedfunds(const UniValue& params, bool fHelp)\n+UniValue importprunedfunds(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 2)\n+    if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n             \"importprunedfunds\\n\"\n             \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\"\n@@ -267,12 +267,12 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n         );\n \n     CTransaction tx;\n-    if (!DecodeHexTx(tx, params[0].get_str()))\n+    if (!DecodeHexTx(tx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     uint256 hashTx = tx.GetHash();\n     CWalletTx wtx(pwalletMain,tx);\n \n-    CDataStream ssMB(ParseHexV(params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssMB(ParseHexV(request.params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n     CMerkleBlock merkleBlock;\n     ssMB >> merkleBlock;\n \n@@ -311,12 +311,12 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No addresses in wallet correspond to included transaction\");\n }\n \n-UniValue removeprunedfunds(const UniValue& params, bool fHelp)\n+UniValue removeprunedfunds(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"removeprunedfunds \\\"txid\\\"\\n\"\n             \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will effect wallet balances.\\n\"\n@@ -331,7 +331,7 @@ UniValue removeprunedfunds(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     uint256 hash;\n-    hash.SetHex(params[0].get_str());\n+    hash.SetHex(request.params[0].get_str());\n     vector<uint256> vHash;\n     vHash.push_back(hash);\n     vector<uint256> vHashOut;\n@@ -347,12 +347,12 @@ UniValue removeprunedfunds(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue importpubkey(const UniValue& params, bool fHelp)\n+UniValue importpubkey(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 4)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw runtime_error(\n             \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan )\\n\"\n             \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n@@ -372,20 +372,20 @@ UniValue importpubkey(const UniValue& params, bool fHelp)\n \n \n     string strLabel = \"\";\n-    if (params.size() > 1)\n-        strLabel = params[1].get_str();\n+    if (request.params.size() > 1)\n+        strLabel = request.params[1].get_str();\n \n     // Whether to perform rescan after import\n     bool fRescan = true;\n-    if (params.size() > 2)\n-        fRescan = params[2].get_bool();\n+    if (request.params.size() > 2)\n+        fRescan = request.params[2].get_bool();\n \n     if (fRescan && fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n-    if (!IsHex(params[0].get_str()))\n+    if (!IsHex(request.params[0].get_str()))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n-    std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n+    std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n     CPubKey pubKey(data.begin(), data.end());\n     if (!pubKey.IsFullyValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n@@ -405,12 +405,12 @@ UniValue importpubkey(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue importwallet(const UniValue& params, bool fHelp)\n+UniValue importwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"importwallet \\\"filename\\\"\\n\"\n             \"\\nImports keys from a wallet dump file (see dumpwallet).\\n\"\n@@ -433,7 +433,7 @@ UniValue importwallet(const UniValue& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     ifstream file;\n-    file.open(params[0].get_str().c_str(), std::ios::in | std::ios::ate);\n+    file.open(request.params[0].get_str().c_str(), std::ios::in | std::ios::ate);\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n@@ -512,12 +512,12 @@ UniValue importwallet(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue dumpprivkey(const UniValue& params, bool fHelp)\n+UniValue dumpprivkey(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"dumpprivkey \\\"bitcoinaddress\\\"\\n\"\n             \"\\nReveals the private key corresponding to 'bitcoinaddress'.\\n\"\n@@ -536,7 +536,7 @@ UniValue dumpprivkey(const UniValue& params, bool fHelp)\n \n     EnsureWalletIsUnlocked();\n \n-    string strAddress = params[0].get_str();\n+    string strAddress = request.params[0].get_str();\n     CBitcoinAddress address;\n     if (!address.SetString(strAddress))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n@@ -550,12 +550,12 @@ UniValue dumpprivkey(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue dumpwallet(const UniValue& params, bool fHelp)\n+UniValue dumpwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"dumpwallet \\\"filename\\\"\\n\"\n             \"\\nDumps all wallet keys in a human-readable format.\\n\"\n@@ -571,7 +571,7 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     ofstream file;\n-    file.open(params[0].get_str().c_str());\n+    file.open(request.params[0].get_str().c_str());\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n "
      },
      {
        "sha": "33620aa6ff59e6aa26cecdaaf8dca4bdc941b749",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 243,
        "deletions": 243,
        "changes": 486,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -101,12 +101,12 @@ string AccountFromValue(const UniValue& value)\n     return strAccount;\n }\n \n-UniValue getnewaddress(const UniValue& params, bool fHelp)\n+UniValue getnewaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"getnewaddress ( \\\"account\\\" )\\n\"\n             \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n@@ -125,8 +125,8 @@ UniValue getnewaddress(const UniValue& params, bool fHelp)\n \n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount;\n-    if (params.size() > 0)\n-        strAccount = AccountFromValue(params[0]);\n+    if (request.params.size() > 0)\n+        strAccount = AccountFromValue(request.params[0]);\n \n     if (!pwalletMain->IsLocked())\n         pwalletMain->TopUpKeyPool();\n@@ -153,12 +153,12 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     return CBitcoinAddress(pubKey.GetID());\n }\n \n-UniValue getaccountaddress(const UniValue& params, bool fHelp)\n+UniValue getaccountaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"getaccountaddress \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Returns the current Bitcoin address for receiving payments to this account.\\n\"\n@@ -176,7 +176,7 @@ UniValue getaccountaddress(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     // Parse the account first so we don't generate a key if there's an error\n-    string strAccount = AccountFromValue(params[0]);\n+    string strAccount = AccountFromValue(request.params[0]);\n \n     UniValue ret(UniValue::VSTR);\n \n@@ -185,12 +185,12 @@ UniValue getaccountaddress(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue getrawchangeaddress(const UniValue& params, bool fHelp)\n+UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"getrawchangeaddress\\n\"\n             \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n@@ -220,12 +220,12 @@ UniValue getrawchangeaddress(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue setaccount(const UniValue& params, bool fHelp)\n+UniValue setaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"setaccount \\\"bitcoinaddress\\\" \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Sets the account associated with the given address.\\n\"\n@@ -239,13 +239,13 @@ UniValue setaccount(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     string strAccount;\n-    if (params.size() > 1)\n-        strAccount = AccountFromValue(params[1]);\n+    if (request.params.size() > 1)\n+        strAccount = AccountFromValue(request.params[1]);\n \n     // Only add the account if the address is yours.\n     if (IsMine(*pwalletMain, address.Get()))\n@@ -266,12 +266,12 @@ UniValue setaccount(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue getaccount(const UniValue& params, bool fHelp)\n+UniValue getaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"getaccount \\\"bitcoinaddress\\\"\\n\"\n             \"\\nDEPRECATED. Returns the account associated with the given address.\\n\"\n@@ -286,7 +286,7 @@ UniValue getaccount(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n@@ -298,12 +298,12 @@ UniValue getaccount(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue getaddressesbyaccount(const UniValue& params, bool fHelp)\n+UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"getaddressesbyaccount \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Returns the list of addresses for the given account.\\n\"\n@@ -321,7 +321,7 @@ UniValue getaddressesbyaccount(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    string strAccount = AccountFromValue(params[0]);\n+    string strAccount = AccountFromValue(request.params[0]);\n \n     // Find all addresses that have the given account\n     UniValue ret(UniValue::VARR);\n@@ -369,12 +369,12 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of the wallet and coins were spent in the copy but not marked as spent here.\");\n }\n \n-UniValue sendtoaddress(const UniValue& params, bool fHelp)\n+UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 2 || params.size() > 5)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw runtime_error(\n             \"sendtoaddress \\\"bitcoinaddress\\\" amount ( \\\"comment\\\" \\\"comment-to\\\" subtractfeefromamount )\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n@@ -400,25 +400,25 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     // Amount\n-    CAmount nAmount = AmountFromValue(params[1]);\n+    CAmount nAmount = AmountFromValue(request.params[1]);\n     if (nAmount <= 0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n \n     // Wallet comments\n     CWalletTx wtx;\n-    if (params.size() > 2 && !params[2].isNull() && !params[2].get_str().empty())\n-        wtx.mapValue[\"comment\"] = params[2].get_str();\n-    if (params.size() > 3 && !params[3].isNull() && !params[3].get_str().empty())\n-        wtx.mapValue[\"to\"]      = params[3].get_str();\n+    if (request.params.size() > 2 && !request.params[2].isNull() && !request.params[2].get_str().empty())\n+        wtx.mapValue[\"comment\"] = request.params[2].get_str();\n+    if (request.params.size() > 3 && !request.params[3].isNull() && !request.params[3].get_str().empty())\n+        wtx.mapValue[\"to\"]      = request.params[3].get_str();\n \n     bool fSubtractFeeFromAmount = false;\n-    if (params.size() > 4)\n-        fSubtractFeeFromAmount = params[4].get_bool();\n+    if (request.params.size() > 4)\n+        fSubtractFeeFromAmount = request.params[4].get_bool();\n \n     EnsureWalletIsUnlocked();\n \n@@ -427,12 +427,12 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n-UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n+UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp)\n+    if (request.fHelp)\n         throw runtime_error(\n             \"listaddressgroupings\\n\"\n             \"\\nLists groups of addresses which have had their common ownership\\n\"\n@@ -478,12 +478,12 @@ UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n     return jsonGroupings;\n }\n \n-UniValue signmessage(const UniValue& params, bool fHelp)\n+UniValue signmessage(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 2)\n+    if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n             \"signmessage \\\"bitcoinaddress\\\" \\\"message\\\"\\n\"\n             \"\\nSign a message with the private key of an address\"\n@@ -508,8 +508,8 @@ UniValue signmessage(const UniValue& params, bool fHelp)\n \n     EnsureWalletIsUnlocked();\n \n-    string strAddress = params[0].get_str();\n-    string strMessage = params[1].get_str();\n+    string strAddress = request.params[0].get_str();\n+    string strMessage = request.params[1].get_str();\n \n     CBitcoinAddress addr(strAddress);\n     if (!addr.IsValid())\n@@ -534,12 +534,12 @@ UniValue signmessage(const UniValue& params, bool fHelp)\n     return EncodeBase64(&vchSig[0], vchSig.size());\n }\n \n-UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n+UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"getreceivedbyaddress \\\"bitcoinaddress\\\" ( minconf )\\n\"\n             \"\\nReturns the total amount received by the given bitcoinaddress in transactions with at least minconf confirmations.\\n\"\n@@ -562,7 +562,7 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     // Bitcoin address\n-    CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n+    CBitcoinAddress address = CBitcoinAddress(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     CScript scriptPubKey = GetScriptForDestination(address.Get());\n@@ -571,8 +571,8 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n \n     // Minimum confirmations\n     int nMinDepth = 1;\n-    if (params.size() > 1)\n-        nMinDepth = params[1].get_int();\n+    if (request.params.size() > 1)\n+        nMinDepth = request.params[1].get_int();\n \n     // Tally\n     CAmount nAmount = 0;\n@@ -592,12 +592,12 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n+UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"getreceivedbyaccount \\\"account\\\" ( minconf )\\n\"\n             \"\\nDEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.\\n\"\n@@ -621,11 +621,11 @@ UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n \n     // Minimum confirmations\n     int nMinDepth = 1;\n-    if (params.size() > 1)\n-        nMinDepth = params[1].get_int();\n+    if (request.params.size() > 1)\n+        nMinDepth = request.params[1].get_int();\n \n     // Get the set of pub keys assigned to account\n-    string strAccount = AccountFromValue(params[0]);\n+    string strAccount = AccountFromValue(request.params[0]);\n     set<CTxDestination> setAddress = pwalletMain->GetAccountAddresses(strAccount);\n \n     // Tally\n@@ -649,12 +649,12 @@ UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue getbalance(const UniValue& params, bool fHelp)\n+UniValue getbalance(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 3)\n+    if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n             \"getbalance ( \\\"account\\\" minconf includeWatchonly )\\n\"\n             \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n@@ -678,18 +678,18 @@ UniValue getbalance(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (params.size() == 0)\n+    if (request.params.size() == 0)\n         return  ValueFromAmount(pwalletMain->GetBalance());\n \n     int nMinDepth = 1;\n-    if (params.size() > 1)\n-        nMinDepth = params[1].get_int();\n+    if (request.params.size() > 1)\n+        nMinDepth = request.params[1].get_int();\n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(params.size() > 2)\n-        if(params[2].get_bool())\n+    if(request.params.size() > 2)\n+        if(request.params[2].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n-    if (params[0].get_str() == \"*\") {\n+    if (request.params[0].get_str() == \"*\") {\n         // Calculate total balance a different way from GetBalance()\n         // (GetBalance() sums up all unspent TxOuts)\n         // getbalance and \"getbalance * 1 true\" should return the same number\n@@ -717,19 +717,19 @@ UniValue getbalance(const UniValue& params, bool fHelp)\n         return  ValueFromAmount(nBalance);\n     }\n \n-    string strAccount = AccountFromValue(params[0]);\n+    string strAccount = AccountFromValue(request.params[0]);\n \n     CAmount nBalance = pwalletMain->GetAccountBalance(strAccount, nMinDepth, filter);\n \n     return ValueFromAmount(nBalance);\n }\n \n-UniValue getunconfirmedbalance(const UniValue &params, bool fHelp)\n+UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 0)\n+    if (request.fHelp || request.params.size() > 0)\n         throw runtime_error(\n                 \"getunconfirmedbalance\\n\"\n                 \"Returns the server's total unconfirmed balance\\n\");\n@@ -740,12 +740,12 @@ UniValue getunconfirmedbalance(const UniValue &params, bool fHelp)\n }\n \n \n-UniValue movecmd(const UniValue& params, bool fHelp)\n+UniValue movecmd(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 3 || params.size() > 5)\n+    if (request.fHelp || request.params.size() < 3 || request.params.size() > 5)\n         throw runtime_error(\n             \"move \\\"fromaccount\\\" \\\"toaccount\\\" amount ( minconf \\\"comment\\\" )\\n\"\n             \"\\nDEPRECATED. Move a specified amount from one account in your wallet to another.\\n\"\n@@ -768,17 +768,17 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    string strFrom = AccountFromValue(params[0]);\n-    string strTo = AccountFromValue(params[1]);\n-    CAmount nAmount = AmountFromValue(params[2]);\n+    string strFrom = AccountFromValue(request.params[0]);\n+    string strTo = AccountFromValue(request.params[1]);\n+    CAmount nAmount = AmountFromValue(request.params[2]);\n     if (nAmount <= 0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n-    if (params.size() > 3)\n+    if (request.params.size() > 3)\n         // unused parameter, used to be nMinDepth, keep type-checking it though\n-        (void)params[3].get_int();\n+        (void)request.params[3].get_int();\n     string strComment;\n-    if (params.size() > 4)\n-        strComment = params[4].get_str();\n+    if (request.params.size() > 4)\n+        strComment = request.params[4].get_str();\n \n     if (!pwalletMain->AccountMove(strFrom, strTo, nAmount, strComment))\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n@@ -787,12 +787,12 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue sendfrom(const UniValue& params, bool fHelp)\n+UniValue sendfrom(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 3 || params.size() > 6)\n+    if (request.fHelp || request.params.size() < 3 || request.params.size() > 6)\n         throw runtime_error(\n             \"sendfrom \\\"fromaccount\\\" \\\"tobitcoinaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment-to\\\" )\\n\"\n             \"\\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.\"\n@@ -820,23 +820,23 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    string strAccount = AccountFromValue(params[0]);\n-    CBitcoinAddress address(params[1].get_str());\n+    string strAccount = AccountFromValue(request.params[0]);\n+    CBitcoinAddress address(request.params[1].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    CAmount nAmount = AmountFromValue(params[2]);\n+    CAmount nAmount = AmountFromValue(request.params[2]);\n     if (nAmount <= 0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n     int nMinDepth = 1;\n-    if (params.size() > 3)\n-        nMinDepth = params[3].get_int();\n+    if (request.params.size() > 3)\n+        nMinDepth = request.params[3].get_int();\n \n     CWalletTx wtx;\n     wtx.strFromAccount = strAccount;\n-    if (params.size() > 4 && !params[4].isNull() && !params[4].get_str().empty())\n-        wtx.mapValue[\"comment\"] = params[4].get_str();\n-    if (params.size() > 5 && !params[5].isNull() && !params[5].get_str().empty())\n-        wtx.mapValue[\"to\"]      = params[5].get_str();\n+    if (request.params.size() > 4 && !request.params[4].isNull() && !request.params[4].get_str().empty())\n+        wtx.mapValue[\"comment\"] = request.params[4].get_str();\n+    if (request.params.size() > 5 && !request.params[5].isNull() && !request.params[5].get_str().empty())\n+        wtx.mapValue[\"to\"]      = request.params[5].get_str();\n \n     EnsureWalletIsUnlocked();\n \n@@ -851,12 +851,12 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue sendmany(const UniValue& params, bool fHelp)\n+UniValue sendmany(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 2 || params.size() > 5)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw runtime_error(\n             \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] )\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n@@ -897,20 +897,20 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n     if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    string strAccount = AccountFromValue(params[0]);\n-    UniValue sendTo = params[1].get_obj();\n+    string strAccount = AccountFromValue(request.params[0]);\n+    UniValue sendTo = request.params[1].get_obj();\n     int nMinDepth = 1;\n-    if (params.size() > 2)\n-        nMinDepth = params[2].get_int();\n+    if (request.params.size() > 2)\n+        nMinDepth = request.params[2].get_int();\n \n     CWalletTx wtx;\n     wtx.strFromAccount = strAccount;\n-    if (params.size() > 3 && !params[3].isNull() && !params[3].get_str().empty())\n-        wtx.mapValue[\"comment\"] = params[3].get_str();\n+    if (request.params.size() > 3 && !request.params[3].isNull() && !request.params[3].get_str().empty())\n+        wtx.mapValue[\"comment\"] = request.params[3].get_str();\n \n     UniValue subtractFeeFromAmount(UniValue::VARR);\n-    if (params.size() > 4)\n-        subtractFeeFromAmount = params[4].get_array();\n+    if (request.params.size() > 4)\n+        subtractFeeFromAmount = request.params[4].get_array();\n \n     set<CBitcoinAddress> setAddress;\n     vector<CRecipient> vecSend;\n@@ -968,12 +968,12 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n // Defined in rpc/misc.cpp\n extern CScript _createmultisig_redeemScript(const UniValue& params);\n \n-UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n+UniValue addmultisigaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 2 || params.size() > 3)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n     {\n         string msg = \"addmultisigaddress nrequired [\\\"key\\\",...] ( \\\"account\\\" )\\n\"\n             \"\\nAdd a nrequired-to-sign multisignature address to the wallet.\\n\"\n@@ -1004,11 +1004,11 @@ UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     string strAccount;\n-    if (params.size() > 2)\n-        strAccount = AccountFromValue(params[2]);\n+    if (request.params.size() > 2)\n+        strAccount = AccountFromValue(request.params[2]);\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig_redeemScript(params);\n+    CScript inner = _createmultisig_redeemScript(request.params);\n     CScriptID innerID(inner);\n     pwalletMain->AddCScript(inner);\n \n@@ -1061,12 +1061,12 @@ class Witnessifier : public boost::static_visitor<bool>\n     }\n };\n \n-UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n+UniValue addwitnessaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n     {\n         string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n             \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n@@ -1089,7 +1089,7 @@ UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n         }\n     }\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n@@ -1239,12 +1239,12 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n     return ret;\n }\n \n-UniValue listreceivedbyaddress(const UniValue& params, bool fHelp)\n+UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 3)\n+    if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n             \"listreceivedbyaddress ( minconf includeempty includeWatchonly)\\n\"\n             \"\\nList balances by receiving address.\\n\"\n@@ -1274,15 +1274,15 @@ UniValue listreceivedbyaddress(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    return ListReceived(params, false);\n+    return ListReceived(request.params, false);\n }\n \n-UniValue listreceivedbyaccount(const UniValue& params, bool fHelp)\n+UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 3)\n+    if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n             \"listreceivedbyaccount ( minconf includeempty includeWatchonly)\\n\"\n             \"\\nDEPRECATED. List balances by account.\\n\"\n@@ -1311,7 +1311,7 @@ UniValue listreceivedbyaccount(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    return ListReceived(params, true);\n+    return ListReceived(request.params, true);\n }\n \n static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n@@ -1413,12 +1413,12 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Un\n     }\n }\n \n-UniValue listtransactions(const UniValue& params, bool fHelp)\n+UniValue listtransactions(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 4)\n+    if (request.fHelp || request.params.size() > 4)\n         throw runtime_error(\n             \"listtransactions ( \\\"account\\\" count from includeWatchonly)\\n\"\n             \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n@@ -1480,17 +1480,17 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     string strAccount = \"*\";\n-    if (params.size() > 0)\n-        strAccount = params[0].get_str();\n+    if (request.params.size() > 0)\n+        strAccount = request.params[0].get_str();\n     int nCount = 10;\n-    if (params.size() > 1)\n-        nCount = params[1].get_int();\n+    if (request.params.size() > 1)\n+        nCount = request.params[1].get_int();\n     int nFrom = 0;\n-    if (params.size() > 2)\n-        nFrom = params[2].get_int();\n+    if (request.params.size() > 2)\n+        nFrom = request.params[2].get_int();\n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(params.size() > 3)\n-        if(params[3].get_bool())\n+    if(request.params.size() > 3)\n+        if(request.params[3].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     if (nCount < 0)\n@@ -1540,12 +1540,12 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue listaccounts(const UniValue& params, bool fHelp)\n+UniValue listaccounts(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 2)\n+    if (request.fHelp || request.params.size() > 2)\n         throw runtime_error(\n             \"listaccounts ( minconf includeWatchonly)\\n\"\n             \"\\nDEPRECATED. Returns Object that has account names as keys, account balances as values.\\n\"\n@@ -1571,11 +1571,11 @@ UniValue listaccounts(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     int nMinDepth = 1;\n-    if (params.size() > 0)\n-        nMinDepth = params[0].get_int();\n+    if (request.params.size() > 0)\n+        nMinDepth = request.params[0].get_int();\n     isminefilter includeWatchonly = ISMINE_SPENDABLE;\n-    if(params.size() > 1)\n-        if(params[1].get_bool())\n+    if(request.params.size() > 1)\n+        if(request.params[1].get_bool())\n             includeWatchonly = includeWatchonly | ISMINE_WATCH_ONLY;\n \n     map<string, CAmount> mapAccountBalances;\n@@ -1619,12 +1619,12 @@ UniValue listaccounts(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue listsinceblock(const UniValue& params, bool fHelp)\n+UniValue listsinceblock(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp)\n+    if (request.fHelp)\n         throw runtime_error(\n             \"listsinceblock ( \\\"blockhash\\\" target-confirmations includeWatchonly)\\n\"\n             \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n@@ -1667,26 +1667,26 @@ UniValue listsinceblock(const UniValue& params, bool fHelp)\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n-    if (params.size() > 0)\n+    if (request.params.size() > 0)\n     {\n         uint256 blockId;\n \n-        blockId.SetHex(params[0].get_str());\n+        blockId.SetHex(request.params[0].get_str());\n         BlockMap::iterator it = mapBlockIndex.find(blockId);\n         if (it != mapBlockIndex.end())\n             pindex = it->second;\n     }\n \n-    if (params.size() > 1)\n+    if (request.params.size() > 1)\n     {\n-        target_confirms = params[1].get_int();\n+        target_confirms = request.params[1].get_int();\n \n         if (target_confirms < 1)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n     }\n \n-    if(params.size() > 2)\n-        if(params[2].get_bool())\n+    if(request.params.size() > 2)\n+        if(request.params[2].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n@@ -1711,12 +1711,12 @@ UniValue listsinceblock(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue gettransaction(const UniValue& params, bool fHelp)\n+UniValue gettransaction(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"gettransaction \\\"txid\\\" ( includeWatchonly )\\n\"\n             \"\\nGet detailed information about in-wallet transaction <txid>\\n\"\n@@ -1758,11 +1758,11 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     uint256 hash;\n-    hash.SetHex(params[0].get_str());\n+    hash.SetHex(request.params[0].get_str());\n \n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(params.size() > 1)\n-        if(params[1].get_bool())\n+    if(request.params.size() > 1)\n+        if(request.params[1].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     UniValue entry(UniValue::VOBJ);\n@@ -1791,12 +1791,12 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n     return entry;\n }\n \n-UniValue abandontransaction(const UniValue& params, bool fHelp)\n+UniValue abandontransaction(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"abandontransaction \\\"txid\\\"\\n\"\n             \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n@@ -1815,7 +1815,7 @@ UniValue abandontransaction(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     uint256 hash;\n-    hash.SetHex(params[0].get_str());\n+    hash.SetHex(request.params[0].get_str());\n \n     if (!pwalletMain->mapWallet.count(hash))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n@@ -1826,12 +1826,12 @@ UniValue abandontransaction(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue backupwallet(const UniValue& params, bool fHelp)\n+UniValue backupwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"backupwallet \\\"destination\\\"\\n\"\n             \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\"\n@@ -1844,20 +1844,20 @@ UniValue backupwallet(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    string strDest = params[0].get_str();\n+    string strDest = request.params[0].get_str();\n     if (!pwalletMain->BackupWallet(strDest))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet backup failed!\");\n \n     return NullUniValue;\n }\n \n \n-UniValue keypoolrefill(const UniValue& params, bool fHelp)\n+UniValue keypoolrefill(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"keypoolrefill ( newsize )\\n\"\n             \"\\nFills the keypool.\"\n@@ -1873,10 +1873,10 @@ UniValue keypoolrefill(const UniValue& params, bool fHelp)\n \n     // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n     unsigned int kpSize = 0;\n-    if (params.size() > 0) {\n-        if (params[0].get_int() < 0)\n+    if (request.params.size() > 0) {\n+        if (request.params[0].get_int() < 0)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n-        kpSize = (unsigned int)params[0].get_int();\n+        kpSize = (unsigned int)request.params[0].get_int();\n     }\n \n     EnsureWalletIsUnlocked();\n@@ -1896,12 +1896,12 @@ static void LockWallet(CWallet* pWallet)\n     pWallet->Lock();\n }\n \n-UniValue walletpassphrase(const UniValue& params, bool fHelp)\n+UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n+    if (pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 2))\n         throw runtime_error(\n             \"walletpassphrase \\\"passphrase\\\" timeout\\n\"\n             \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n@@ -1923,17 +1923,17 @@ UniValue walletpassphrase(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (fHelp)\n+    if (request.fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n \n-    // Note that the walletpassphrase is stored in params[0] which is not mlock()ed\n+    // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n     SecureString strWalletPass;\n     strWalletPass.reserve(100);\n     // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make params[0] mlock()'d to begin with.\n-    strWalletPass = params[0].get_str().c_str();\n+    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n+    strWalletPass = request.params[0].get_str().c_str();\n \n     if (strWalletPass.length() > 0)\n     {\n@@ -1947,7 +1947,7 @@ UniValue walletpassphrase(const UniValue& params, bool fHelp)\n \n     pwalletMain->TopUpKeyPool();\n \n-    int64_t nSleepTime = params[1].get_int64();\n+    int64_t nSleepTime = request.params[1].get_int64();\n     LOCK(cs_nWalletUnlockTime);\n     nWalletUnlockTime = GetTime() + nSleepTime;\n     RPCRunLater(\"lockwallet\", boost::bind(LockWallet, pwalletMain), nSleepTime);\n@@ -1956,12 +1956,12 @@ UniValue walletpassphrase(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue walletpassphrasechange(const UniValue& params, bool fHelp)\n+UniValue walletpassphrasechange(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n+    if (pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 2))\n         throw runtime_error(\n             \"walletpassphrasechange \\\"oldpassphrase\\\" \\\"newpassphrase\\\"\\n\"\n             \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\"\n@@ -1975,20 +1975,20 @@ UniValue walletpassphrasechange(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (fHelp)\n+    if (request.fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\");\n \n     // TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make params[0] mlock()'d to begin with.\n+    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n     SecureString strOldWalletPass;\n     strOldWalletPass.reserve(100);\n-    strOldWalletPass = params[0].get_str().c_str();\n+    strOldWalletPass = request.params[0].get_str().c_str();\n \n     SecureString strNewWalletPass;\n     strNewWalletPass.reserve(100);\n-    strNewWalletPass = params[1].get_str().c_str();\n+    strNewWalletPass = request.params[1].get_str().c_str();\n \n     if (strOldWalletPass.length() < 1 || strNewWalletPass.length() < 1)\n         throw runtime_error(\n@@ -2002,12 +2002,12 @@ UniValue walletpassphrasechange(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue walletlock(const UniValue& params, bool fHelp)\n+UniValue walletlock(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 0))\n+    if (pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 0))\n         throw runtime_error(\n             \"walletlock\\n\"\n             \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n@@ -2026,7 +2026,7 @@ UniValue walletlock(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (fHelp)\n+    if (request.fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletlock was called.\");\n@@ -2041,12 +2041,12 @@ UniValue walletlock(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue encryptwallet(const UniValue& params, bool fHelp)\n+UniValue encryptwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (!pwalletMain->IsCrypted() && (fHelp || params.size() != 1))\n+    if (!pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 1))\n         throw runtime_error(\n             \"encryptwallet \\\"passphrase\\\"\\n\"\n             \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\"\n@@ -2072,16 +2072,16 @@ UniValue encryptwallet(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (fHelp)\n+    if (request.fHelp)\n         return true;\n     if (pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an encrypted wallet, but encryptwallet was called.\");\n \n     // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make params[0] mlock()'d to begin with.\n+    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n     SecureString strWalletPass;\n     strWalletPass.reserve(100);\n-    strWalletPass = params[0].get_str().c_str();\n+    strWalletPass = request.params[0].get_str().c_str();\n \n     if (strWalletPass.length() < 1)\n         throw runtime_error(\n@@ -2098,12 +2098,12 @@ UniValue encryptwallet(const UniValue& params, bool fHelp)\n     return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed and a new HD seed was generated (if you are using HD). You need to make a new backup.\";\n }\n \n-UniValue lockunspent(const UniValue& params, bool fHelp)\n+UniValue lockunspent(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"lockunspent unlock ([{\\\"txid\\\":\\\"txid\\\",\\\"vout\\\":n},...])\\n\"\n             \"\\nUpdates list of temporarily unspendable outputs.\\n\"\n@@ -2142,20 +2142,20 @@ UniValue lockunspent(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (params.size() == 1)\n-        RPCTypeCheck(params, boost::assign::list_of(UniValue::VBOOL));\n+    if (request.params.size() == 1)\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VBOOL));\n     else\n-        RPCTypeCheck(params, boost::assign::list_of(UniValue::VBOOL)(UniValue::VARR));\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VBOOL)(UniValue::VARR));\n \n-    bool fUnlock = params[0].get_bool();\n+    bool fUnlock = request.params[0].get_bool();\n \n-    if (params.size() == 1) {\n+    if (request.params.size() == 1) {\n         if (fUnlock)\n             pwalletMain->UnlockAllCoins();\n         return true;\n     }\n \n-    UniValue outputs = params[1].get_array();\n+    UniValue outputs = request.params[1].get_array();\n     for (unsigned int idx = 0; idx < outputs.size(); idx++) {\n         const UniValue& output = outputs[idx];\n         if (!output.isObject())\n@@ -2187,12 +2187,12 @@ UniValue lockunspent(const UniValue& params, bool fHelp)\n     return true;\n }\n \n-UniValue listlockunspent(const UniValue& params, bool fHelp)\n+UniValue listlockunspent(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 0)\n+    if (request.fHelp || request.params.size() > 0)\n         throw runtime_error(\n             \"listlockunspent\\n\"\n             \"\\nReturns list of temporarily unspendable outputs.\\n\"\n@@ -2236,12 +2236,12 @@ UniValue listlockunspent(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue settxfee(const UniValue& params, bool fHelp)\n+UniValue settxfee(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n         throw runtime_error(\n             \"settxfee amount\\n\"\n             \"\\nSet the transaction fee per kB. Overwrites the paytxfee parameter.\\n\"\n@@ -2257,18 +2257,18 @@ UniValue settxfee(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     // Amount\n-    CAmount nAmount = AmountFromValue(params[0]);\n+    CAmount nAmount = AmountFromValue(request.params[0]);\n \n     payTxFee = CFeeRate(nAmount, 1000);\n     return true;\n }\n \n-UniValue getwalletinfo(const UniValue& params, bool fHelp)\n+UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getwalletinfo\\n\"\n             \"Returns an object containing various wallet state info.\\n\"\n@@ -2309,12 +2309,12 @@ UniValue getwalletinfo(const UniValue& params, bool fHelp)\n     return obj;\n }\n \n-UniValue resendwallettransactions(const UniValue& params, bool fHelp)\n+UniValue resendwallettransactions(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"resendwallettransactions\\n\"\n             \"Immediately re-broadcast unconfirmed wallet transactions to all peers.\\n\"\n@@ -2337,12 +2337,12 @@ UniValue resendwallettransactions(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue listunspent(const UniValue& params, bool fHelp)\n+UniValue listunspent(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 3)\n+    if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n             \"listunspent ( minconf maxconf  [\\\"address\\\",...] )\\n\"\n             \"\\nReturns array of unspent transaction outputs\\n\"\n@@ -2379,19 +2379,19 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n         );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VARR));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VARR));\n \n     int nMinDepth = 1;\n-    if (params.size() > 0)\n-        nMinDepth = params[0].get_int();\n+    if (request.params.size() > 0)\n+        nMinDepth = request.params[0].get_int();\n \n     int nMaxDepth = 9999999;\n-    if (params.size() > 1)\n-        nMaxDepth = params[1].get_int();\n+    if (request.params.size() > 1)\n+        nMaxDepth = request.params[1].get_int();\n \n     set<CBitcoinAddress> setAddress;\n-    if (params.size() > 2) {\n-        UniValue inputs = params[2].get_array();\n+    if (request.params.size() > 2) {\n+        UniValue inputs = request.params[2].get_array();\n         for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n             const UniValue& input = inputs[idx];\n             CBitcoinAddress address(input.get_str());\n@@ -2448,12 +2448,12 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n     return results;\n }\n \n-UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n+UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n                             \"fundrawtransaction \\\"hexstring\\\" ( options )\\n\"\n                             \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n@@ -2494,7 +2494,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n                             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n                             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n \n     CTxDestination changeAddress = CNoDestination();\n     int changePosition = -1;\n@@ -2503,15 +2503,15 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     CFeeRate feeRate = CFeeRate(0);\n     bool overrideEstimatedFeerate = false;\n \n-    if (params.size() > 1) {\n-      if (params[1].type() == UniValue::VBOOL) {\n+    if (request.params.size() > 1) {\n+      if (request.params[1].type() == UniValue::VBOOL) {\n         // backward compatibility bool only fallback\n-        includeWatching = params[1].get_bool();\n+        includeWatching = request.params[1].get_bool();\n       }\n       else {\n-        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n \n-        UniValue options = params[1];\n+        UniValue options = request.params[1];\n \n         RPCTypeCheckObj(options,\n             {\n@@ -2551,7 +2551,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n \n     // parse hex string from parameter\n     CTransaction origTx;\n-    if (!DecodeHexTx(origTx, params[0].get_str(), true))\n+    if (!DecodeHexTx(origTx, request.params[0].get_str(), true))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n     if (origTx.vout.size() == 0)\n@@ -2575,14 +2575,14 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n-extern UniValue importprivkey(const UniValue& params, bool fHelp);\n-extern UniValue importaddress(const UniValue& params, bool fHelp);\n-extern UniValue importpubkey(const UniValue& params, bool fHelp);\n-extern UniValue dumpwallet(const UniValue& params, bool fHelp);\n-extern UniValue importwallet(const UniValue& params, bool fHelp);\n-extern UniValue importprunedfunds(const UniValue& params, bool fHelp);\n-extern UniValue removeprunedfunds(const UniValue& params, bool fHelp);\n+extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n+extern UniValue importprivkey(const JSONRPCRequest& request);\n+extern UniValue importaddress(const JSONRPCRequest& request);\n+extern UniValue importpubkey(const JSONRPCRequest& request);\n+extern UniValue dumpwallet(const JSONRPCRequest& request);\n+extern UniValue importwallet(const JSONRPCRequest& request);\n+extern UniValue importprunedfunds(const JSONRPCRequest& request);\n+extern UniValue removeprunedfunds(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           okSafeMode"
      }
    ]
  },
  {
    "sha": "e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzE1NmFkNjFiZTJmZTkzNWZkYjY0ZTlkMGU4NzdmYTBlOWY3Zjll",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-09-22T07:58:13Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-19T12:47:27Z"
      },
      "message": "[RPC] pass HTTP basic authentication username to the JSONRequest object",
      "tree": {
        "sha": "19dcb95789fea3e6d168a7b2e1ecb7d66a5e006f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19dcb95789fea3e6d168a7b2e1ecb7d66a5e006f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYB2tgAAoJECnUvLZBb1PsafcP/2/AD2mPDV0XXO9nkRwFDSKo\nsVQsnuvHBL5cwUAJyMetQTyUfoof7hc4/GQt4XwbRpDNvdLl6mIrvDKeZF6wjHqt\nWTNgltb4wifgBwKszy8r2gnZK/VEU6kejXkk4IalSpvwtKvVYIHctacHIJfLVK94\nWFXwm/JAYnt2+wcNtz8rPRtA5CSLUKKXQg1e8v25Sh+OXfhJLgw3mT5cEnTOQhdy\nU6V9jOQATO6qDpTOhOgv6WGtXWzEgn7a29nmVs8pAe0bZzk7wwge8PQtKk5y5uZP\nZWDceFPRyV59e89d5dP+BTZ0Rq2gVF9aHFHZl9eTBRX0hEs87+PuKuWQkGM2WmWJ\neW1pElofcfS4D59cukqRJs6NxQLXNrkMUSnVEapKmGgC4Qe03g3FhWtVAjZpj9xz\nHYlkRXGAHDHOH0L8k8xuMV2XeJURMF4/135lZPb6xm+cLTc8+phRRblKeEDc+aro\nn6HtZXszsrbi1CdZckHG+7ONCEZ2rroMHWz+tO7x/cFgTkbPrjcpXPJ/i627VcOx\nl2edyYlRckm2Q7LZPpKUorVct5zEHyXwkJ0WjDJNN1LegR5LQ3cYNf+FbtkATCp0\nERjy5FB/zk0lLDg3/aMh0nJJjdGkqp0uqCvjQ5OJji1vp2ixFREt0DKexKuU4PiA\nnilJQKdu9VDZfsWRLy/A\n=aDd/\n-----END PGP SIGNATURE-----",
        "payload": "tree 19dcb95789fea3e6d168a7b2e1ecb7d66a5e006f\nparent 69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1474531093 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1476881247 +0200\n\n[RPC] pass HTTP basic authentication username to the JSONRequest object\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e35acb6cd99ce7b0a6cf9697188ef1ff0c7e165b",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
        "patch": "@@ -127,7 +127,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n     return false;\n }\n \n-static bool RPCAuthorized(const std::string& strAuth)\n+static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUsernameOut)\n {\n     if (strRPCUserColonPass.empty()) // Belt-and-suspenders measure if InitRPCAuthentication was not called\n         return false;\n@@ -136,7 +136,10 @@ static bool RPCAuthorized(const std::string& strAuth)\n     std::string strUserPass64 = strAuth.substr(6);\n     boost::trim(strUserPass64);\n     std::string strUserPass = DecodeBase64(strUserPass64);\n-    \n+\n+    if (strUserPass.find(\":\") != std::string::npos)\n+        strAuthUsernameOut = strUserPass.substr(0, strUserPass.find(\":\"));\n+\n     //Check if authorized under single-user field\n     if (TimingResistantEqual(strUserPass, strRPCUserColonPass)) {\n         return true;\n@@ -159,7 +162,8 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         return false;\n     }\n \n-    if (!RPCAuthorized(authHeader.second)) {\n+    JSONRPCRequest jreq;\n+    if (!RPCAuthorized(authHeader.second, jreq.authUser)) {\n         LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", req->GetPeer().ToString());\n \n         /* Deter brute-forcing\n@@ -172,7 +176,6 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         return false;\n     }\n \n-    JSONRPCRequest jreq;\n     try {\n         // Parse request\n         UniValue valRequest;"
      },
      {
        "sha": "b8b5420626d3baa9e616d1733ac574d5f01ee631",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
        "patch": "@@ -286,6 +286,7 @@ static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n     switch (rf) {\n     case RF_JSON: {\n         JSONRPCRequest jsonRequest;\n+        jsonRequest.params = UniValue(UniValue::VARR);\n         UniValue chainInfoObject = getblockchaininfo(jsonRequest);\n         string strJSON = chainInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");"
      },
      {
        "sha": "c59886222c27621af860c3e97039aab0b68e00c8",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
        "patch": "@@ -49,8 +49,9 @@ class JSONRPCRequest\n     UniValue params;\n     bool fHelp;\n     std::string URI;\n+    std::string authUser;\n \n-    JSONRPCRequest() { id = NullUniValue; }\n+    JSONRPCRequest() { id = NullUniValue; params = NullUniValue; fHelp = false; }\n     void parse(const UniValue& valRequest);\n };\n "
      }
    ]
  }
]