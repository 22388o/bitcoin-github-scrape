[
  {
    "sha": "2ea826cfc46ee8edfca059d0fd95ebe03122f9f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWE4MjZjZmM0NmVlOGVkZmNhMDU5ZDBmZDk1ZWJlMDMxMjJmOWYy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-07-29T15:07:23Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-08-11T14:27:39Z"
      },
      "message": "Add txids with non-standard inputs to reject filter\n\nOur policy checks for non-standard inputs depend only on the non-witness\nportion of a transaction: we look up the scriptPubKey of the input being\nspent from our UTXO set (which is covered by the input txid), and the p2sh\nchecks only rely on the scriptSig portion of the input.\n\nConsequently it's safe to add txids of transactions that fail these checks to\nthe reject filter, as the witness is irrelevant to the failure. This is helpful\nfor any situation where we might request the transaction again via txid (either\nfrom txid-relay peers, or if we might fetch the transaction via txid due to\nparent-fetching of orphans).\n\nFurther, in preparation for future witness versions being deployed on the\nnetwork, ensure that WITNESS_UNKNOWN transactions are rejected in\nAreInputsStandard(), so that transactions spending v1 (or greater) witness\noutputs will fall into this category of having their txid added to the reject\nfilter.\n\nGithub-Pull: #19620\nRebased-From: 7989901c7eb62ca28b3d1e5d5831041a7267e495",
      "tree": {
        "sha": "0eefee233e638da4a88400346cda0410f1d07607",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0eefee233e638da4a88400346cda0410f1d07607"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ea826cfc46ee8edfca059d0fd95ebe03122f9f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ea826cfc46ee8edfca059d0fd95ebe03122f9f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ea826cfc46ee8edfca059d0fd95ebe03122f9f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ea826cfc46ee8edfca059d0fd95ebe03122f9f2/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28a9df7d76a6bdd118cceacf31c5584325f45d8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28a9df7d76a6bdd118cceacf31c5584325f45d8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28a9df7d76a6bdd118cceacf31c5584325f45d8e"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 26,
      "deletions": 6
    },
    "files": [
      {
        "sha": "dbef958e19400b651b21f8131aece2a780a95114",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ea826cfc46ee8edfca059d0fd95ebe03122f9f2/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ea826cfc46ee8edfca059d0fd95ebe03122f9f2/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=2ea826cfc46ee8edfca059d0fd95ebe03122f9f2",
        "patch": "@@ -48,7 +48,8 @@ enum class ValidationInvalidReason {\n     BLOCK_TIME_FUTURE,          //!< block timestamp was > 2 hours in the future (or our clock is bad)\n     BLOCK_CHECKPOINT,        //!< the block failed to meet one of our checkpoints\n     // Only loose txn:\n-    TX_NOT_STANDARD,          //!< didn't meet our local policy rules\n+    TX_INPUTS_NOT_STANDARD,   //!< inputs (covered by txid) failed policy rules\n+    TX_NOT_STANDARD,          //!< otherwise didn't meet our local policy rules\n     TX_MISSING_INPUTS,        //!< a transaction was missing some of its inputs\n     TX_PREMATURE_SPEND,       //!< transaction spends a coinbase too early, or violates locktime/sequence locks\n     /**\n@@ -72,6 +73,7 @@ inline bool IsTransactionReason(ValidationInvalidReason r)\n     return r == ValidationInvalidReason::NONE ||\n            r == ValidationInvalidReason::CONSENSUS ||\n            r == ValidationInvalidReason::RECENT_CONSENSUS_CHANGE ||\n+           r == ValidationInvalidReason::TX_INPUTS_NOT_STANDARD ||\n            r == ValidationInvalidReason::TX_NOT_STANDARD ||\n            r == ValidationInvalidReason::TX_PREMATURE_SPEND ||\n            r == ValidationInvalidReason::TX_MISSING_INPUTS ||"
      },
      {
        "sha": "4a183f0c9ac7daebc9ac2698bbf7d1d540ed4764",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ea826cfc46ee8edfca059d0fd95ebe03122f9f2/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ea826cfc46ee8edfca059d0fd95ebe03122f9f2/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2ea826cfc46ee8edfca059d0fd95ebe03122f9f2",
        "patch": "@@ -1055,6 +1055,7 @@ static bool MaybePunishNode(NodeId nodeid, const CValidationState& state, bool v\n         return true;\n     case ValidationInvalidReason::RECENT_CONSENSUS_CHANGE:\n     case ValidationInvalidReason::BLOCK_TIME_FUTURE:\n+    case ValidationInvalidReason::TX_INPUTS_NOT_STANDARD:\n     case ValidationInvalidReason::TX_NOT_STANDARD:\n     case ValidationInvalidReason::TX_MISSING_INPUTS:\n     case ValidationInvalidReason::TX_PREMATURE_SPEND:\n@@ -1846,10 +1847,15 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n             // Probably non-standard or insufficient fee\n             LogPrint(BCLog::MEMPOOL, \"   removed orphan tx %s\\n\", orphanHash.ToString());\n             assert(IsTransactionReason(orphan_state.GetReason()));\n-            if (!orphanTx.HasWitness() && orphan_state.GetReason() != ValidationInvalidReason::TX_WITNESS_MUTATED) {\n+            if ((!orphanTx.HasWitness() && orphan_state.GetReason() != ValidationInvalidReason::TX_WITNESS_MUTATED) ||\n+                orphan_state.GetReason() == ValidationInvalidReason::TX_INPUTS_NOT_STANDARD) {\n                 // Do not use rejection cache for witness transactions or\n                 // witness-stripped transactions, as they can have been malleated.\n                 // See https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+                // However, if the transaction failed for TX_INPUTS_NOT_STANDARD,\n+                // then we know that the witness was irrelevant to the policy\n+                // failure, since this check depends only on the txid\n+                // (the scriptPubKey being spent is covered by the txid).\n                 assert(recentRejects);\n                 recentRejects->insert(orphanHash);\n             }\n@@ -2574,10 +2580,15 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             }\n         } else {\n             assert(IsTransactionReason(state.GetReason()));\n-            if (!tx.HasWitness() && state.GetReason() != ValidationInvalidReason::TX_WITNESS_MUTATED) {\n+            if ((!tx.HasWitness() && state.GetReason() != ValidationInvalidReason::TX_WITNESS_MUTATED) ||\n+                    state.GetReason() == ValidationInvalidReason::TX_INPUTS_NOT_STANDARD) {\n                 // Do not use rejection cache for witness transactions or\n                 // witness-stripped transactions, as they can have been malleated.\n                 // See https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+                // However, if the transaction failed for TX_INPUTS_NOT_STANDARD,\n+                // then we know that the witness was irrelevant to the policy\n+                // failure, since this check depends only on the txid\n+                // (the scriptPubKey being spent is covered by the txid).\n                 assert(recentRejects);\n                 recentRejects->insert(tx.GetHash());\n                 if (RecursiveDynamicUsage(*ptx) < 100000) {"
      },
      {
        "sha": "636a916602af0bb507328bd0ea4d16baa7120f82",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ea826cfc46ee8edfca059d0fd95ebe03122f9f2/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ea826cfc46ee8edfca059d0fd95ebe03122f9f2/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=2ea826cfc46ee8edfca059d0fd95ebe03122f9f2",
        "patch": "@@ -152,6 +152,8 @@ bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeR\n  * script can be anything; an attacker could use a very\n  * expensive-to-check-upon-redemption script like:\n  *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+ *\n+ * Note that only the non-witness portion of the transaction is checked here.\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n@@ -164,7 +166,11 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n \n         std::vector<std::vector<unsigned char> > vSolutions;\n         txnouttype whichType = Solver(prev.scriptPubKey, vSolutions);\n-        if (whichType == TX_NONSTANDARD) {\n+        if (whichType == TX_NONSTANDARD || whichType == TX_WITNESS_UNKNOWN) {\n+            // WITNESS_UNKNOWN failures are typically also caught with a policy\n+            // flag in the script interpreter, but it can be helpful to catch\n+            // this type of NONSTANDARD transaction earlier in transaction\n+            // validation.\n             return false;\n         } else if (whichType == TX_SCRIPTHASH) {\n             std::vector<std::vector<unsigned char> > stack;"
      },
      {
        "sha": "bdf3c128cc9cfce31c22d4f77df7d12957d437c7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ea826cfc46ee8edfca059d0fd95ebe03122f9f2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ea826cfc46ee8edfca059d0fd95ebe03122f9f2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2ea826cfc46ee8edfca059d0fd95ebe03122f9f2",
        "patch": "@@ -678,8 +678,9 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard pay-to-script-hash in inputs\n-    if (fRequireStandard && !AreInputsStandard(tx, m_view))\n-        return state.Invalid(ValidationInvalidReason::TX_NOT_STANDARD, false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n+    if (fRequireStandard && !AreInputsStandard(tx, m_view)) {\n+        return state.Invalid(ValidationInvalidReason::TX_INPUTS_NOT_STANDARD, false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n+    }\n \n     // Check for non-standard witness in P2WSH\n     if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, m_view))"
      }
    ]
  },
  {
    "sha": "52c3bec1bad4fc602a3911b44de48c6b0dbdfd25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MmMzYmVjMWJhZDRmYzYwMmEzOTExYjQ0ZGU0OGM2YjBkYmRmZDI1",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2020-08-03T18:37:58Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-08-11T14:27:39Z"
      },
      "message": "test addition of unknown segwit spends to txid reject filter\n\nGithub-Pull: #19620\nRebased-From: 9f88ded82b2898ca63d44c08072f1ba52f0e18d7",
      "tree": {
        "sha": "712cf5da762da6e2899628a4e5e51df2ae79ca73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/712cf5da762da6e2899628a4e5e51df2ae79ca73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52c3bec1bad4fc602a3911b44de48c6b0dbdfd25",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52c3bec1bad4fc602a3911b44de48c6b0dbdfd25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52c3bec1bad4fc602a3911b44de48c6b0dbdfd25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52c3bec1bad4fc602a3911b44de48c6b0dbdfd25/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ea826cfc46ee8edfca059d0fd95ebe03122f9f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ea826cfc46ee8edfca059d0fd95ebe03122f9f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ea826cfc46ee8edfca059d0fd95ebe03122f9f2"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "760cedde3af952da53a1d793759b8346ef163853",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52c3bec1bad4fc602a3911b44de48c6b0dbdfd25/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52c3bec1bad4fc602a3911b44de48c6b0dbdfd25/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=52c3bec1bad4fc602a3911b44de48c6b0dbdfd25",
        "patch": "@@ -1391,16 +1391,24 @@ def test_segwit_versions(self):\n         temp_utxo.pop()  # last entry in temp_utxo was the output we just spent\n         temp_utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n-        # Spend everything in temp_utxo back to an OP_TRUE output.\n+        # Spend everything in temp_utxo into an segwit v1 output.\n         tx3 = CTransaction()\n         total_value = 0\n         for i in temp_utxo:\n             tx3.vin.append(CTxIn(COutPoint(i.sha256, i.n), b\"\"))\n             tx3.wit.vtxinwit.append(CTxInWitness())\n             total_value += i.nValue\n         tx3.wit.vtxinwit[-1].scriptWitness.stack = [witness_program]\n-        tx3.vout.append(CTxOut(total_value - 1000, CScript([OP_TRUE])))\n+        tx3.vout.append(CTxOut(total_value - 1000, script_pubkey))\n         tx3.rehash()\n+\n+        # First we test this transaction against fRequireStandard=true node\n+        # making sure the txid is added to the reject filter\n+        self.std_node.announce_tx_and_wait_for_getdata(tx3)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, with_witness=True, accepted=False, reason=\"bad-txns-nonstandard-inputs\")\n+        # Now the node will no longer ask for getdata of this transaction when advertised by same txid\n+        self.std_node.announce_tx_and_wait_for_getdata(tx3, timeout=5, success=False)\n+\n         # Spending a higher version witness output is not allowed by policy,\n         # even with fRequireStandard=false.\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False, reason=\"reserved for soft-fork upgrades\")"
      }
    ]
  }
]