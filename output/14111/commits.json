[
  {
    "sha": "fa402afc6de5be2c561ce098902b04b4092d9269",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQwMmFmYzZkZTViZTJjNTYxY2UwOTg5MDJiMDRiNDA5MmQ5MjY5",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-30T16:49:32Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-22T19:45:37Z"
      },
      "message": "index: Create IndexRunner class for activing indexes.\n\nThe index destructor previously had a memory violation by accessing\nits own address in call to UnregisterValidationInterface. The new\nrunner class is an RAII-style interface for sync thread management\nand validation interface registration.",
      "tree": {
        "sha": "bc7a3b291492a4e216af73541f50bd4a79e3f223",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc7a3b291492a4e216af73541f50bd4a79e3f223"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa402afc6de5be2c561ce098902b04b4092d9269",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa402afc6de5be2c561ce098902b04b4092d9269",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa402afc6de5be2c561ce098902b04b4092d9269",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa402afc6de5be2c561ce098902b04b4092d9269/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "169dced9a42bd741b3265adee23e6a8d1f852227",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/169dced9a42bd741b3265adee23e6a8d1f852227",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/169dced9a42bd741b3265adee23e6a8d1f852227"
      }
    ],
    "stats": {
      "total": 249,
      "additions": 162,
      "deletions": 87
    },
    "files": [
      {
        "sha": "87a622e3864e473a97d3eedf48eeba2e65090f9a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa402afc6de5be2c561ce098902b04b4092d9269/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa402afc6de5be2c561ce098902b04b4092d9269/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fa402afc6de5be2c561ce098902b04b4092d9269",
        "patch": "@@ -132,7 +132,9 @@ BITCOIN_CORE_H = \\\n   httprpc.h \\\n   httpserver.h \\\n   index/base.h \\\n+  index/error.h \\\n   index/txindex.h \\\n+  index/runner.h \\\n   indirectmap.h \\\n   init.h \\\n   interfaces/chain.h \\\n@@ -250,6 +252,7 @@ libbitcoin_server_a_SOURCES = \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   index/base.cpp \\\n+  index/runner.cpp \\\n   index/txindex.cpp \\\n   interfaces/chain.cpp \\\n   interfaces/handler.cpp \\"
      },
      {
        "sha": "1be27ef9ecfb6f08c9c8fe97dbe608f927ef3c9b",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 52,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa402afc6de5be2c561ce098902b04b4092d9269/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa402afc6de5be2c561ce098902b04b4092d9269/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=fa402afc6de5be2c561ce098902b04b4092d9269",
        "patch": "@@ -4,30 +4,16 @@\n \n #include <chainparams.h>\n #include <index/base.h>\n-#include <shutdown.h>\n-#include <tinyformat.h>\n-#include <ui_interface.h>\n+#include <index/error.h>\n+#include <threadinterrupt.h>\n #include <util/system.h>\n #include <validation.h>\n-#include <warnings.h>\n \n constexpr char DB_BEST_BLOCK = 'B';\n \n constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n constexpr int64_t SYNC_LOCATOR_WRITE_INTERVAL = 30; // seconds\n \n-template<typename... Args>\n-static void FatalError(const char* fmt, const Args&... args)\n-{\n-    std::string strMessage = tfm::format(fmt, args...);\n-    SetMiscWarning(strMessage);\n-    LogPrintf(\"*** %s\\n\", strMessage);\n-    uiInterface.ThreadSafeMessageBox(\n-        \"Error: A fatal internal error occurred, see debug.log for details\",\n-        \"\", CClientUIInterface::MSG_ERROR);\n-    StartShutdown();\n-}\n-\n BaseIndex::DB::DB(const fs::path& path, size_t n_cache_size, bool f_memory, bool f_wipe, bool f_obfuscate) :\n     CDBWrapper(path, n_cache_size, f_memory, f_wipe, f_obfuscate)\n {}\n@@ -46,12 +32,6 @@ bool BaseIndex::DB::WriteBestBlock(const CBlockLocator& locator)\n     return Write(DB_BEST_BLOCK, locator);\n }\n \n-BaseIndex::~BaseIndex()\n-{\n-    Interrupt();\n-    Stop();\n-}\n-\n bool BaseIndex::Init()\n {\n     CBlockLocator locator;\n@@ -85,7 +65,7 @@ static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev) EXCLUSIV\n     return chainActive.Next(chainActive.FindFork(pindex_prev));\n }\n \n-void BaseIndex::ThreadSync()\n+void BaseIndex::ThreadSync(CThreadInterrupt* interrupt)\n {\n     const CBlockIndex* pindex = m_best_block_index.load();\n     if (!m_synced) {\n@@ -94,7 +74,7 @@ void BaseIndex::ThreadSync()\n         int64_t last_log_time = 0;\n         int64_t last_locator_write_time = 0;\n         while (true) {\n-            if (m_interrupt) {\n+            if (interrupt && *interrupt) {\n                 WriteBestBlock(pindex);\n                 return;\n             }\n@@ -252,31 +232,3 @@ bool BaseIndex::BlockUntilSyncedToCurrentChain()\n     SyncWithValidationInterfaceQueue();\n     return true;\n }\n-\n-void BaseIndex::Interrupt()\n-{\n-    m_interrupt();\n-}\n-\n-void BaseIndex::Start()\n-{\n-    // Need to register this ValidationInterface before running Init(), so that\n-    // callbacks are not missed if Init sets m_synced to true.\n-    RegisterValidationInterface(this);\n-    if (!Init()) {\n-        FatalError(\"%s: %s failed to initialize\", __func__, GetName());\n-        return;\n-    }\n-\n-    m_thread_sync = std::thread(&TraceThread<std::function<void()>>, GetName(),\n-                                std::bind(&BaseIndex::ThreadSync, this));\n-}\n-\n-void BaseIndex::Stop()\n-{\n-    UnregisterValidationInterface(this);\n-\n-    if (m_thread_sync.joinable()) {\n-        m_thread_sync.join();\n-    }\n-}"
      },
      {
        "sha": "8f6527dc68a0e58f857a654e22537a75973e6336",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 8,
        "deletions": 19,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa402afc6de5be2c561ce098902b04b4092d9269/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa402afc6de5be2c561ce098902b04b4092d9269/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=fa402afc6de5be2c561ce098902b04b4092d9269",
        "patch": "@@ -8,11 +8,11 @@\n #include <dbwrapper.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n-#include <threadinterrupt.h>\n #include <uint256.h>\n #include <validationinterface.h>\n \n class CBlockIndex;\n+class CThreadInterrupt;\n \n /**\n  * Base class for indices of blockchain data. This implements\n@@ -21,6 +21,8 @@ class CBlockIndex;\n  */\n class BaseIndex : public CValidationInterface\n {\n+    friend class IndexRunner;\n+\n protected:\n     class DB : public CDBWrapper\n     {\n@@ -44,15 +46,12 @@ class BaseIndex : public CValidationInterface\n     /// The last block in the chain that the index is in sync with.\n     std::atomic<const CBlockIndex*> m_best_block_index{nullptr};\n \n-    std::thread m_thread_sync;\n-    CThreadInterrupt m_interrupt;\n-\n     /// Sync the index with the block index starting from the current best block.\n     /// Intended to be run in its own thread, m_thread_sync, and can be\n-    /// interrupted with m_interrupt. Once the index gets in sync, the m_synced\n-    /// flag is set and the BlockConnected ValidationInterface callback takes\n-    /// over and the sync thread exits.\n-    void ThreadSync();\n+    /// interrupted with the interrupt parameter. Once the index gets in sync,\n+    /// the m_synced flag is set and the BlockConnected ValidationInterface\n+    /// callback takes over and the sync thread exits.\n+    void ThreadSync(CThreadInterrupt* interrupt);\n \n     /// Write the current chain block locator to the DB.\n     bool WriteBestBlock(const CBlockIndex* block_index);\n@@ -75,24 +74,14 @@ class BaseIndex : public CValidationInterface\n     virtual const char* GetName() const = 0;\n \n public:\n-    /// Destructor interrupts sync thread if running and blocks until it exits.\n-    virtual ~BaseIndex();\n+    virtual ~BaseIndex() = default;\n \n     /// Blocks the current thread until the index is caught up to the current\n     /// state of the block chain. This only blocks if the index has gotten in\n     /// sync once and only needs to process blocks in the ValidationInterface\n     /// queue. If the index is catching up from far behind, this method does\n     /// not block and immediately returns false.\n     bool BlockUntilSyncedToCurrentChain();\n-\n-    void Interrupt();\n-\n-    /// Start initializes the sync state and registers the instance as a\n-    /// ValidationInterface so that it stays in sync with blockchain updates.\n-    void Start();\n-\n-    /// Stops the instance from staying in sync with blockchain updates.\n-    void Stop();\n };\n \n #endif // BITCOIN_INDEX_BASE_H"
      },
      {
        "sha": "abfb48249fb4a47145d8cd2abf3db907ec8aaccb",
        "filename": "src/index/error.h",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa402afc6de5be2c561ce098902b04b4092d9269/src/index/error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa402afc6de5be2c561ce098902b04b4092d9269/src/index/error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/error.h?ref=fa402afc6de5be2c561ce098902b04b4092d9269",
        "patch": "@@ -0,0 +1,28 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_ERROR_H\n+#define BITCOIN_INDEX_ERROR_H\n+\n+#include <string>\n+\n+#include <logging.h>\n+#include <shutdown.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+#endif // BITCOIN_INDEX_ERROR_H"
      },
      {
        "sha": "8104cdfba3cb2a55dc88255f45eb2c1d53ab6ca5",
        "filename": "src/index/runner.cpp",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa402afc6de5be2c561ce098902b04b4092d9269/src/index/runner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa402afc6de5be2c561ce098902b04b4092d9269/src/index/runner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/runner.cpp?ref=fa402afc6de5be2c561ce098902b04b4092d9269",
        "patch": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/base.h>\n+#include <index/error.h>\n+#include <index/runner.h>\n+#include <validationinterface.h>\n+\n+static std::map<BaseIndex*, IndexRunner> g_running_indexes;\n+\n+IndexRunner::IndexRunner(BaseIndex* index) : m_index(index)\n+{\n+    // Need to register this ValidationInterface before running Init(), so that\n+    // callbacks are not missed if Init sets m_synced to true.\n+    RegisterValidationInterface(m_index);\n+    if (!m_index->Init()) {\n+        FatalError(\"%s: %s failed to initialize\", __func__, m_index->GetName());\n+        return;\n+    }\n+\n+    m_thread_sync = std::thread(&TraceThread<std::function<void()>>, m_index->GetName(),\n+                                std::bind(&BaseIndex::ThreadSync, m_index, &m_interrupt));\n+}\n+\n+IndexRunner::~IndexRunner()\n+{\n+    UnregisterValidationInterface(m_index);\n+\n+    Interrupt();\n+    if (m_thread_sync.joinable()) {\n+        m_thread_sync.join();\n+    }\n+}\n+\n+void IndexRunner::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+bool StartIndex(BaseIndex* index)\n+{\n+    if (!index) return false;\n+    auto result = g_running_indexes.emplace(std::piecewise_construct,\n+                                            std::forward_as_tuple(index),\n+                                            std::forward_as_tuple(index));\n+    return result.second;\n+}\n+\n+bool InterruptIndex(BaseIndex* index)\n+{\n+    if (!index) return false;\n+\n+    auto it = g_running_indexes.find(index);\n+    if (it == g_running_indexes.end()) return false;\n+\n+    it->second.Interrupt();\n+    return true;\n+}\n+\n+bool StopIndex(BaseIndex* index)\n+{\n+    if (!index) return false;\n+    return g_running_indexes.erase(index);\n+}"
      },
      {
        "sha": "e76ce8f75b0f51c211049ebf07a3615f4967aa8d",
        "filename": "src/index/runner.h",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa402afc6de5be2c561ce098902b04b4092d9269/src/index/runner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa402afc6de5be2c561ce098902b04b4092d9269/src/index/runner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/runner.h?ref=fa402afc6de5be2c561ce098902b04b4092d9269",
        "patch": "@@ -0,0 +1,44 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_RUNNER_H\n+#define BITCOIN_INDEX_RUNNER_H\n+\n+#include <thread>\n+\n+#include <threadinterrupt.h>\n+\n+class BaseIndex;\n+\n+/**\n+ * RAII interface for activating indexes to stay in sync with blockchain updates.\n+ */\n+class IndexRunner\n+{\n+private:\n+    BaseIndex* m_index;\n+\n+    std::thread m_thread_sync;\n+    CThreadInterrupt m_interrupt;\n+\n+public:\n+\n+    /**\n+     * Start initializes the sync state and registers the index as a ValidationInterface so that it\n+     * stays in sync with blockchain updates.\n+     */\n+    explicit IndexRunner(BaseIndex* index);\n+\n+    /** Stops the instance from staying in sync with blockchain updates. */\n+    ~IndexRunner();\n+\n+    /** Interrupts the sync thread if it is running. */\n+    void Interrupt();\n+};\n+\n+bool StartIndex(BaseIndex* index);\n+bool InterruptIndex(BaseIndex* index);\n+bool StopIndex(BaseIndex* index);\n+\n+#endif // BITCOIN_INDEX_RUNNER_H"
      },
      {
        "sha": "e891d07ad9c7bd81d18328c8c15c237f4ed0cc4a",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa402afc6de5be2c561ce098902b04b4092d9269/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa402afc6de5be2c561ce098902b04b4092d9269/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=fa402afc6de5be2c561ce098902b04b4092d9269",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <index/txindex.h>\n #include <shutdown.h>\n+#include <txdb.h>\n #include <ui_interface.h>\n #include <util/system.h>\n #include <validation.h>"
      },
      {
        "sha": "db476e4906f5a4c216701766b6147f9d7bea5958",
        "filename": "src/index/txindex.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa402afc6de5be2c561ce098902b04b4092d9269/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa402afc6de5be2c561ce098902b04b4092d9269/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=fa402afc6de5be2c561ce098902b04b4092d9269",
        "patch": "@@ -7,7 +7,6 @@\n \n #include <chain.h>\n #include <index/base.h>\n-#include <txdb.h>\n \n /**\n  * TxIndex is used to look up transactions included in the blockchain by hash."
      },
      {
        "sha": "bfd322651bdc6e7c68cf4e41d83dcf668201b8aa",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa402afc6de5be2c561ce098902b04b4092d9269/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa402afc6de5be2c561ce098902b04b4092d9269/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa402afc6de5be2c561ce098902b04b4092d9269",
        "patch": "@@ -22,6 +22,7 @@\n #include <httprpc.h>\n #include <interfaces/chain.h>\n #include <index/txindex.h>\n+#include <index/runner.h>\n #include <key.h>\n #include <validation.h>\n #include <miner.h>\n@@ -184,9 +185,7 @@ void Interrupt()\n     InterruptMapPort();\n     if (g_connman)\n         g_connman->Interrupt();\n-    if (g_txindex) {\n-        g_txindex->Interrupt();\n-    }\n+    InterruptIndex(g_txindex.get());\n }\n \n void Shutdown(InitInterfaces& interfaces)\n@@ -217,7 +216,7 @@ void Shutdown(InitInterfaces& interfaces)\n     // using the other before destroying them.\n     if (peerLogic) UnregisterValidationInterface(peerLogic.get());\n     if (g_connman) g_connman->Stop();\n-    if (g_txindex) g_txindex->Stop();\n+    StopIndex(g_txindex.get());\n \n     StopTorControl();\n \n@@ -1641,7 +1640,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     // ********************************************************* Step 8: start indexers\n     if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n         g_txindex = MakeUnique<TxIndex>(nTxIndexCache, false, fReindex);\n-        g_txindex->Start();\n+        StartIndex(g_txindex.get());\n     }\n \n     // ********************************************************* Step 9: load wallet"
      },
      {
        "sha": "6d2d48b41f8ad6afc24b28afc2bda3636900eee0",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa402afc6de5be2c561ce098902b04b4092d9269/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa402afc6de5be2c561ce098902b04b4092d9269/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=fa402afc6de5be2c561ce098902b04b4092d9269",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <index/runner.h>\n #include <index/txindex.h>\n #include <script/standard.h>\n #include <test/test_bitcoin.h>\n@@ -29,7 +30,7 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n     // BlockUntilSyncedToCurrentChain should return false before txindex is started.\n     BOOST_CHECK(!txindex.BlockUntilSyncedToCurrentChain());\n \n-    txindex.Start();\n+    IndexRunner runner(&txindex);\n \n     // Allow tx index to catch up with the block index.\n     constexpr int64_t timeout_ms = 10 * 1000;\n@@ -68,14 +69,6 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n             BOOST_ERROR(\"Read incorrect tx\");\n         }\n     }\n-\n-    // shutdown sequence (c.f. Shutdown() in init.cpp)\n-    txindex.Stop();\n-\n-    threadGroup.interrupt_all();\n-    threadGroup.join_all();\n-\n-    // Rest of shutdown sequence and destructors happen in ~TestingSetup()\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "5fb4d5662877209703e562f4a4a43b11c1cb5526",
        "filename": "test/lint/lint-format-strings.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa402afc6de5be2c561ce098902b04b4092d9269/test/lint/lint-format-strings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa402afc6de5be2c561ce098902b04b4092d9269/test/lint/lint-format-strings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.py?ref=fa402afc6de5be2c561ce098902b04b4092d9269",
        "patch": "@@ -14,7 +14,7 @@\n \n FALSE_POSITIVES = [\n     (\"src/dbwrapper.cpp\", \"vsnprintf(p, limit - p, format, backup_ap)\"),\n-    (\"src/index/base.cpp\", \"FatalError(const char* fmt, const Args&... args)\"),\n+    (\"src/index/error.h\", \"FatalError(const char* fmt, const Args&... args)\"),\n     (\"src/netbase.cpp\", \"LogConnectFailure(bool manual_connection, const char* fmt, const Args&... args)\"),\n     (\"src/util/system.cpp\", \"strprintf(_(COPYRIGHT_HOLDERS), _(COPYRIGHT_HOLDERS_SUBSTITUTION))\"),\n     (\"src/util/system.cpp\", \"strprintf(COPYRIGHT_HOLDERS, COPYRIGHT_HOLDERS_SUBSTITUTION)\"),"
      }
    ]
  }
]