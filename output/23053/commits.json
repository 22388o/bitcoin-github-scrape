[
  {
    "sha": "56303e382e26ac7096c09152c66894dc3bb4d1fd",
    "node_id": "C_kwDOABII59oAKDU2MzAzZTM4MmUyNmFjNzA5NmMwOTE1MmM2Njg5NGRjM2JiNGQxZmQ",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-09-21T08:35:40Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-10-05T15:38:42Z"
      },
      "message": "[fuzz] Create a FastRandomContext in addrman fuzz tests\n\nDon't reach inside the object-under-test to use its random context.",
      "tree": {
        "sha": "7227c3f7105c350159840b74e2db395d98d76272",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7227c3f7105c350159840b74e2db395d98d76272"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56303e382e26ac7096c09152c66894dc3bb4d1fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56303e382e26ac7096c09152c66894dc3bb4d1fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56303e382e26ac7096c09152c66894dc3bb4d1fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56303e382e26ac7096c09152c66894dc3bb4d1fd/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "113b863f0773999497f952daa6539a03a66a9de3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/113b863f0773999497f952daa6539a03a66a9de3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/113b863f0773999497f952daa6539a03a66a9de3"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 14,
      "deletions": 11
    },
    "files": [
      {
        "sha": "3dc9fdfaa479259864a80d1ac857858266aab8a9",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 11,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56303e382e26ac7096c09152c66894dc3bb4d1fd/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56303e382e26ac7096c09152c66894dc3bb4d1fd/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=56303e382e26ac7096c09152c66894dc3bb4d1fd",
        "patch": "@@ -7,6 +7,7 @@\n #include <addrman_impl.h>\n #include <chainparams.h>\n #include <merkleblock.h>\n+#include <random.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n@@ -50,7 +51,7 @@ class AddrManDeterministic : public AddrMan\n     /**\n      * Generate a random address. Always returns a valid address.\n      */\n-    CNetAddr RandAddr() EXCLUSIVE_LOCKS_REQUIRED(m_impl->cs)\n+    CNetAddr RandAddr(FastRandomContext& fast_random_context) EXCLUSIVE_LOCKS_REQUIRED(m_impl->cs)\n     {\n         CNetAddr addr;\n         if (m_fuzzed_data_provider.remaining_bytes() > 1 && m_fuzzed_data_provider.ConsumeBool()) {\n@@ -62,15 +63,15 @@ class AddrManDeterministic : public AddrMan\n                                                                    {4, ADDR_TORV3_SIZE},\n                                                                    {5, ADDR_I2P_SIZE},\n                                                                    {6, ADDR_CJDNS_SIZE}};\n-            uint8_t net = m_impl->insecure_rand.randrange(5) + 1; // [1..5]\n+            uint8_t net = fast_random_context.randrange(5) + 1; // [1..5]\n             if (net == 3) {\n                 net = 6;\n             }\n \n             CDataStream s(SER_NETWORK, PROTOCOL_VERSION | ADDRV2_FORMAT);\n \n             s << net;\n-            s << m_impl->insecure_rand.randbytes(net_len_map.at(net));\n+            s << fast_random_context.randbytes(net_len_map.at(net));\n \n             s >> addr;\n         }\n@@ -99,24 +100,26 @@ class AddrManDeterministic : public AddrMan\n \n         const size_t num_sources = m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n         CNetAddr prev_source;\n-        // Use insecure_rand inside the loops instead of m_fuzzed_data_provider because when\n-        // the latter is exhausted it just returns 0.\n+        // Generate a FastRandomContext seed to use inside the loops instead of\n+        // m_fuzzed_data_provider. When m_fuzzed_data_provider is exhausted it\n+        // just returns 0.\n+        FastRandomContext fast_random_context{ConsumeUInt256(m_fuzzed_data_provider)};\n         for (size_t i = 0; i < num_sources; ++i) {\n-            const auto source = RandAddr();\n-            const size_t num_addresses = m_impl->insecure_rand.randrange(500) + 1; // [1..500]\n+            const auto source = RandAddr(fast_random_context);\n+            const size_t num_addresses = fast_random_context.randrange(500) + 1; // [1..500]\n \n             for (size_t j = 0; j < num_addresses; ++j) {\n-                const auto addr = CAddress{CService{RandAddr(), 8333}, NODE_NETWORK};\n-                const auto time_penalty = m_impl->insecure_rand.randrange(100000001);\n+                const auto addr = CAddress{CService{RandAddr(fast_random_context), 8333}, NODE_NETWORK};\n+                const auto time_penalty = fast_random_context.randrange(100000001);\n                 m_impl->Add_(addr, source, time_penalty);\n \n                 if (n > 0 && m_impl->mapInfo.size() % n == 0) {\n                     m_impl->Good_(addr, false, GetTime());\n                 }\n \n                 // Add 10% of the addresses from more than one source.\n-                if (m_impl->insecure_rand.randrange(10) == 0 && prev_source.IsValid()) {\n-                    m_impl->Add_({addr}, prev_source, time_penalty);\n+                if (fast_random_context.randrange(10) == 0 && prev_source.IsValid()) {\n+                    m_impl->Add_(addr, prev_source, time_penalty);\n                 }\n             }\n             prev_source = source;"
      }
    ]
  },
  {
    "sha": "491975c596ebce93ae8de192c9ef171f002fac7c",
    "node_id": "C_kwDOABII59oAKDQ5MTk3NWM1OTZlYmNlOTNhZThkZTE5MmM5ZWYxNzFmMDAyZmFjN2M",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-09-21T08:35:40Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-10-05T15:38:42Z"
      },
      "message": "[fuzz] Pass FuzzedDataProvider& into Fill() in addrman fuzz tests\n\nUse a (reference) parameter instead of a data member of\nCAddrManDeterministic. This will allow us to make Fill() a free function\nin a later commit.\n\nAlso remove CAddrManDeterministic.m_fuzzed_data_provider since it's no\nlonger used.",
      "tree": {
        "sha": "c89d88ff5b648072f4717a17555fd6ad20e4264b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c89d88ff5b648072f4717a17555fd6ad20e4264b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/491975c596ebce93ae8de192c9ef171f002fac7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/491975c596ebce93ae8de192c9ef171f002fac7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/491975c596ebce93ae8de192c9ef171f002fac7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/491975c596ebce93ae8de192c9ef171f002fac7c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56303e382e26ac7096c09152c66894dc3bb4d1fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56303e382e26ac7096c09152c66894dc3bb4d1fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56303e382e26ac7096c09152c66894dc3bb4d1fd"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 12,
      "deletions": 14
    },
    "files": [
      {
        "sha": "d797b3dd7a1b9f29585c951b55cc8922a324ce18",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 14,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/491975c596ebce93ae8de192c9ef171f002fac7c/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/491975c596ebce93ae8de192c9ef171f002fac7c/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=491975c596ebce93ae8de192c9ef171f002fac7c",
        "patch": "@@ -39,23 +39,21 @@ FUZZ_TARGET_INIT(data_stream_addr_man, initialize_addrman)\n class AddrManDeterministic : public AddrMan\n {\n public:\n-    FuzzedDataProvider& m_fuzzed_data_provider;\n-\n     explicit AddrManDeterministic(std::vector<bool> asmap, FuzzedDataProvider& fuzzed_data_provider)\n         : AddrMan(std::move(asmap), /* deterministic */ true, /* consistency_check_ratio */ 0)\n-        , m_fuzzed_data_provider(fuzzed_data_provider)\n     {\n         WITH_LOCK(m_impl->cs, m_impl->insecure_rand = FastRandomContext{ConsumeUInt256(fuzzed_data_provider)});\n     }\n \n     /**\n      * Generate a random address. Always returns a valid address.\n      */\n-    CNetAddr RandAddr(FastRandomContext& fast_random_context) EXCLUSIVE_LOCKS_REQUIRED(m_impl->cs)\n+    CNetAddr RandAddr(FuzzedDataProvider& fuzzed_data_provider, FastRandomContext& fast_random_context)\n+        EXCLUSIVE_LOCKS_REQUIRED(m_impl->cs)\n     {\n         CNetAddr addr;\n-        if (m_fuzzed_data_provider.remaining_bytes() > 1 && m_fuzzed_data_provider.ConsumeBool()) {\n-            addr = ConsumeNetAddr(m_fuzzed_data_provider);\n+        if (fuzzed_data_provider.remaining_bytes() > 1 && fuzzed_data_provider.ConsumeBool()) {\n+            addr = ConsumeNetAddr(fuzzed_data_provider);\n         } else {\n             // The networks [1..6] correspond to CNetAddr::BIP155Network (private).\n             static const std::map<uint8_t, uint8_t> net_len_map = {{1, ADDR_IPV4_SIZE},\n@@ -89,27 +87,27 @@ class AddrManDeterministic : public AddrMan\n     /**\n      * Fill this addrman with lots of addresses from lots of sources.\n      */\n-    void Fill()\n+    void Fill(FuzzedDataProvider& fuzzed_data_provider)\n     {\n         LOCK(m_impl->cs);\n \n         // Add some of the addresses directly to the \"tried\" table.\n \n         // 0, 1, 2, 3 corresponding to 0%, 100%, 50%, 33%\n-        const size_t n = m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 3);\n+        const size_t n = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 3);\n \n-        const size_t num_sources = m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n+        const size_t num_sources = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n         CNetAddr prev_source;\n         // Generate a FastRandomContext seed to use inside the loops instead of\n-        // m_fuzzed_data_provider. When m_fuzzed_data_provider is exhausted it\n+        // fuzzed_data_provider. When fuzzed_data_provider is exhausted it\n         // just returns 0.\n-        FastRandomContext fast_random_context{ConsumeUInt256(m_fuzzed_data_provider)};\n+        FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n         for (size_t i = 0; i < num_sources; ++i) {\n-            const auto source = RandAddr(fast_random_context);\n+            const auto source = RandAddr(fuzzed_data_provider, fast_random_context);\n             const size_t num_addresses = fast_random_context.randrange(500) + 1; // [1..500]\n \n             for (size_t j = 0; j < num_addresses; ++j) {\n-                const auto addr = CAddress{CService{RandAddr(fast_random_context), 8333}, NODE_NETWORK};\n+                const auto addr = CAddress{CService{RandAddr(fuzzed_data_provider, fast_random_context), 8333}, NODE_NETWORK};\n                 const auto time_penalty = fast_random_context.randrange(100000001);\n                 m_impl->Add_(addr, source, time_penalty);\n \n@@ -310,7 +308,7 @@ FUZZ_TARGET_INIT(addrman_serdeser, initialize_addrman)\n \n     CDataStream data_stream(SER_NETWORK, PROTOCOL_VERSION);\n \n-    addr_man1.Fill();\n+    addr_man1.Fill(fuzzed_data_provider);\n     data_stream << addr_man1;\n     data_stream >> addr_man2;\n     assert(addr_man1 == addr_man2);"
      }
    ]
  },
  {
    "sha": "90ad8ad61a38dbb1f247a5f3d5f649a856d9938a",
    "node_id": "C_kwDOABII59oAKDkwYWQ4YWQ2MWEzOGRiYjFmMjQ3YTVmM2Q1ZjY0OWE4NTZkOTkzOGE",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-09-21T09:48:32Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-10-05T15:59:07Z"
      },
      "message": "[fuzz] Make RandAddr() a free function in fuzz/addrman.cpp\n\nIt doesn't require access to CAddrManDeterministic",
      "tree": {
        "sha": "bccec98a77f7adb2cc56e5e842790c62c76f53d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bccec98a77f7adb2cc56e5e842790c62c76f53d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90ad8ad61a38dbb1f247a5f3d5f649a856d9938a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90ad8ad61a38dbb1f247a5f3d5f649a856d9938a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90ad8ad61a38dbb1f247a5f3d5f649a856d9938a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90ad8ad61a38dbb1f247a5f3d5f649a856d9938a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "491975c596ebce93ae8de192c9ef171f002fac7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/491975c596ebce93ae8de192c9ef171f002fac7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/491975c596ebce93ae8de192c9ef171f002fac7c"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 38,
      "deletions": 39
    },
    "files": [
      {
        "sha": "7b88e9b6c23cf82f280fd58afa4c47ba8f5cc7db",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 39,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90ad8ad61a38dbb1f247a5f3d5f649a856d9938a/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90ad8ad61a38dbb1f247a5f3d5f649a856d9938a/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=90ad8ad61a38dbb1f247a5f3d5f649a856d9938a",
        "patch": "@@ -36,52 +36,51 @@ FUZZ_TARGET_INIT(data_stream_addr_man, initialize_addrman)\n     }\n }\n \n-class AddrManDeterministic : public AddrMan\n+/**\n+ * Generate a random address. Always returns a valid address.\n+ */\n+CNetAddr RandAddr(FuzzedDataProvider& fuzzed_data_provider, FastRandomContext& fast_random_context)\n {\n-public:\n-    explicit AddrManDeterministic(std::vector<bool> asmap, FuzzedDataProvider& fuzzed_data_provider)\n-        : AddrMan(std::move(asmap), /* deterministic */ true, /* consistency_check_ratio */ 0)\n-    {\n-        WITH_LOCK(m_impl->cs, m_impl->insecure_rand = FastRandomContext{ConsumeUInt256(fuzzed_data_provider)});\n-    }\n+    CNetAddr addr;\n+    if (fuzzed_data_provider.remaining_bytes() > 1 && fuzzed_data_provider.ConsumeBool()) {\n+        addr = ConsumeNetAddr(fuzzed_data_provider);\n+    } else {\n+        // The networks [1..6] correspond to CNetAddr::BIP155Network (private).\n+        static const std::map<uint8_t, uint8_t> net_len_map = {{1, ADDR_IPV4_SIZE},\n+                                                               {2, ADDR_IPV6_SIZE},\n+                                                               {4, ADDR_TORV3_SIZE},\n+                                                               {5, ADDR_I2P_SIZE},\n+                                                               {6, ADDR_CJDNS_SIZE}};\n+        uint8_t net = fast_random_context.randrange(5) + 1; // [1..5]\n+        if (net == 3) {\n+            net = 6;\n+        }\n \n-    /**\n-     * Generate a random address. Always returns a valid address.\n-     */\n-    CNetAddr RandAddr(FuzzedDataProvider& fuzzed_data_provider, FastRandomContext& fast_random_context)\n-        EXCLUSIVE_LOCKS_REQUIRED(m_impl->cs)\n-    {\n-        CNetAddr addr;\n-        if (fuzzed_data_provider.remaining_bytes() > 1 && fuzzed_data_provider.ConsumeBool()) {\n-            addr = ConsumeNetAddr(fuzzed_data_provider);\n-        } else {\n-            // The networks [1..6] correspond to CNetAddr::BIP155Network (private).\n-            static const std::map<uint8_t, uint8_t> net_len_map = {{1, ADDR_IPV4_SIZE},\n-                                                                   {2, ADDR_IPV6_SIZE},\n-                                                                   {4, ADDR_TORV3_SIZE},\n-                                                                   {5, ADDR_I2P_SIZE},\n-                                                                   {6, ADDR_CJDNS_SIZE}};\n-            uint8_t net = fast_random_context.randrange(5) + 1; // [1..5]\n-            if (net == 3) {\n-                net = 6;\n-            }\n+        CDataStream s(SER_NETWORK, PROTOCOL_VERSION | ADDRV2_FORMAT);\n \n-            CDataStream s(SER_NETWORK, PROTOCOL_VERSION | ADDRV2_FORMAT);\n+        s << net;\n+        s << fast_random_context.randbytes(net_len_map.at(net));\n \n-            s << net;\n-            s << fast_random_context.randbytes(net_len_map.at(net));\n+        s >> addr;\n+    }\n \n-            s >> addr;\n-        }\n+    // Return a dummy IPv4 5.5.5.5 if we generated an invalid address.\n+    if (!addr.IsValid()) {\n+        in_addr v4_addr = {};\n+        v4_addr.s_addr = 0x05050505;\n+        addr = CNetAddr{v4_addr};\n+    }\n \n-        // Return a dummy IPv4 5.5.5.5 if we generated an invalid address.\n-        if (!addr.IsValid()) {\n-            in_addr v4_addr = {};\n-            v4_addr.s_addr = 0x05050505;\n-            addr = CNetAddr{v4_addr};\n-        }\n+    return addr;\n+}\n \n-        return addr;\n+class AddrManDeterministic : public AddrMan\n+{\n+public:\n+    explicit AddrManDeterministic(std::vector<bool> asmap, FuzzedDataProvider& fuzzed_data_provider)\n+        : AddrMan(std::move(asmap), /* deterministic */ true, /* consistency_check_ratio */ 0)\n+    {\n+        WITH_LOCK(m_impl->cs, m_impl->insecure_rand = FastRandomContext{ConsumeUInt256(fuzzed_data_provider)});\n     }\n \n     /**"
      }
    ]
  },
  {
    "sha": "640476eb0e17fd4c64d4840ceab229642f1d79d9",
    "node_id": "C_kwDOABII59oAKDY0MDQ3NmViMGUxN2ZkNGM2NGQ0ODQwY2VhYjIyOTY0MmYxZDc5ZDk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-09-21T09:48:32Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-10-05T15:59:09Z"
      },
      "message": "[fuzz] Make Fill() a free function in fuzz/addrman.cpp\n\nAlso rename it to FillAddrman and pass an addrman reference as an\nargument. Change FillAddrman to only use addrman's public interface methods.",
      "tree": {
        "sha": "3b47c5b4d959d9d89b5aa372e6d5f7d017293bf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b47c5b4d959d9d89b5aa372e6d5f7d017293bf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/640476eb0e17fd4c64d4840ceab229642f1d79d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/640476eb0e17fd4c64d4840ceab229642f1d79d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/640476eb0e17fd4c64d4840ceab229642f1d79d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/640476eb0e17fd4c64d4840ceab229642f1d79d9/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90ad8ad61a38dbb1f247a5f3d5f649a856d9938a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90ad8ad61a38dbb1f247a5f3d5f649a856d9938a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90ad8ad61a38dbb1f247a5f3d5f649a856d9938a"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 37,
      "deletions": 41
    },
    "files": [
      {
        "sha": "297656ac3d964da17725627f53037878b1647f55",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 41,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/640476eb0e17fd4c64d4840ceab229642f1d79d9/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/640476eb0e17fd4c64d4840ceab229642f1d79d9/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=640476eb0e17fd4c64d4840ceab229642f1d79d9",
        "patch": "@@ -74,6 +74,42 @@ CNetAddr RandAddr(FuzzedDataProvider& fuzzed_data_provider, FastRandomContext& f\n     return addr;\n }\n \n+/** Fill addrman with lots of addresses from lots of sources.  */\n+void FillAddrman(AddrMan& addrman, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    // Add some of the addresses directly to the \"tried\" table.\n+\n+    // 0, 1, 2, 3 corresponding to 0%, 100%, 50%, 33%\n+    const size_t n = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 3);\n+\n+    const size_t num_sources = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n+    CNetAddr prev_source;\n+    // Generate a FastRandomContext seed to use inside the loops instead of\n+    // fuzzed_data_provider. When fuzzed_data_provider is exhausted it\n+    // just returns 0.\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    for (size_t i = 0; i < num_sources; ++i) {\n+        const auto source = RandAddr(fuzzed_data_provider, fast_random_context);\n+        const size_t num_addresses = fast_random_context.randrange(500) + 1; // [1..500]\n+\n+        for (size_t j = 0; j < num_addresses; ++j) {\n+            const auto addr = CAddress{CService{RandAddr(fuzzed_data_provider, fast_random_context), 8333}, NODE_NETWORK};\n+            const auto time_penalty = fast_random_context.randrange(100000001);\n+            addrman.Add({addr}, source, time_penalty);\n+\n+            if (n > 0 && addrman.size() % n == 0) {\n+                addrman.Good(addr, GetTime());\n+            }\n+\n+            // Add 10% of the addresses from more than one source.\n+            if (fast_random_context.randrange(10) == 0 && prev_source.IsValid()) {\n+                addrman.Add({addr}, prev_source, time_penalty);\n+            }\n+        }\n+        prev_source = source;\n+    }\n+}\n+\n class AddrManDeterministic : public AddrMan\n {\n public:\n@@ -83,46 +119,6 @@ class AddrManDeterministic : public AddrMan\n         WITH_LOCK(m_impl->cs, m_impl->insecure_rand = FastRandomContext{ConsumeUInt256(fuzzed_data_provider)});\n     }\n \n-    /**\n-     * Fill this addrman with lots of addresses from lots of sources.\n-     */\n-    void Fill(FuzzedDataProvider& fuzzed_data_provider)\n-    {\n-        LOCK(m_impl->cs);\n-\n-        // Add some of the addresses directly to the \"tried\" table.\n-\n-        // 0, 1, 2, 3 corresponding to 0%, 100%, 50%, 33%\n-        const size_t n = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 3);\n-\n-        const size_t num_sources = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 50);\n-        CNetAddr prev_source;\n-        // Generate a FastRandomContext seed to use inside the loops instead of\n-        // fuzzed_data_provider. When fuzzed_data_provider is exhausted it\n-        // just returns 0.\n-        FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n-        for (size_t i = 0; i < num_sources; ++i) {\n-            const auto source = RandAddr(fuzzed_data_provider, fast_random_context);\n-            const size_t num_addresses = fast_random_context.randrange(500) + 1; // [1..500]\n-\n-            for (size_t j = 0; j < num_addresses; ++j) {\n-                const auto addr = CAddress{CService{RandAddr(fuzzed_data_provider, fast_random_context), 8333}, NODE_NETWORK};\n-                const auto time_penalty = fast_random_context.randrange(100000001);\n-                m_impl->Add_(addr, source, time_penalty);\n-\n-                if (n > 0 && m_impl->mapInfo.size() % n == 0) {\n-                    m_impl->Good_(addr, false, GetTime());\n-                }\n-\n-                // Add 10% of the addresses from more than one source.\n-                if (fast_random_context.randrange(10) == 0 && prev_source.IsValid()) {\n-                    m_impl->Add_(addr, prev_source, time_penalty);\n-                }\n-            }\n-            prev_source = source;\n-        }\n-    }\n-\n     /**\n      * Compare with another AddrMan.\n      * This compares:\n@@ -307,7 +303,7 @@ FUZZ_TARGET_INIT(addrman_serdeser, initialize_addrman)\n \n     CDataStream data_stream(SER_NETWORK, PROTOCOL_VERSION);\n \n-    addr_man1.Fill(fuzzed_data_provider);\n+    FillAddrman(addr_man1, fuzzed_data_provider);\n     data_stream << addr_man1;\n     data_stream >> addr_man2;\n     assert(addr_man1 == addr_man2);"
      }
    ]
  },
  {
    "sha": "44452110f0fa7cc1bcb941a3c7b5db4b492a7b9c",
    "node_id": "C_kwDOABII59oAKDQ0NDUyMTEwZjBmYTdjYzFiY2I5NDFhM2M3YjVkYjRiNDkyYTdiOWM",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-09-21T10:01:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-10-05T15:59:09Z"
      },
      "message": "[fuzz] Update comment in FillAddrman()\n\nSuggested here: https://github.com/bitcoin/bitcoin/pull/22974#discussion_r711119626",
      "tree": {
        "sha": "5228e1a9e57bfe4c9b9ed2dc64f051645412dc96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5228e1a9e57bfe4c9b9ed2dc64f051645412dc96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44452110f0fa7cc1bcb941a3c7b5db4b492a7b9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44452110f0fa7cc1bcb941a3c7b5db4b492a7b9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44452110f0fa7cc1bcb941a3c7b5db4b492a7b9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44452110f0fa7cc1bcb941a3c7b5db4b492a7b9c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "640476eb0e17fd4c64d4840ceab229642f1d79d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/640476eb0e17fd4c64d4840ceab229642f1d79d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/640476eb0e17fd4c64d4840ceab229642f1d79d9"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8df3707fc96d53dc7f52d7b73ae39466d5ec1399",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44452110f0fa7cc1bcb941a3c7b5db4b492a7b9c/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44452110f0fa7cc1bcb941a3c7b5db4b492a7b9c/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=44452110f0fa7cc1bcb941a3c7b5db4b492a7b9c",
        "patch": "@@ -77,8 +77,7 @@ CNetAddr RandAddr(FuzzedDataProvider& fuzzed_data_provider, FastRandomContext& f\n /** Fill addrman with lots of addresses from lots of sources.  */\n void FillAddrman(AddrMan& addrman, FuzzedDataProvider& fuzzed_data_provider)\n {\n-    // Add some of the addresses directly to the \"tried\" table.\n-\n+    // Add a fraction of the addresses to the \"tried\" table.\n     // 0, 1, 2, 3 corresponding to 0%, 100%, 50%, 33%\n     const size_t n = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 3);\n "
      }
    ]
  }
]