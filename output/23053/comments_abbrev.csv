jnewbery,2021-09-21 10:05:11,@vasild - this addresses your review comment here: https://github.com/bitcoin/bitcoin/pull/22974#pullrequestreview-757542948,https://github.com/bitcoin/bitcoin/pull/23053#issuecomment-923828427,923828427,
jnewbery,2021-09-22 11:02:26,Rebased,https://github.com/bitcoin/bitcoin/pull/23053#issuecomment-924823406,924823406,
DrahtBot,2021-09-22 17:45:29,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22910](https://github.com/bitcoin/bitcoin/pull/22910) ([RFC] Encapsulate asmap in NetGroupManager by jnewbery)\n\nIf you",https://github.com/bitcoin/bitcoin/pull/23053#issuecomment-925145586,925145586,
practicalswift,2021-09-29 14:44:09,Concept ACK,https://github.com/bitcoin/bitcoin/pull/23053#issuecomment-930245531,930245531,
jnewbery,2021-09-29 14:54:31,"I'm moving this to draft for now. It conflicts with #22950, which I think should go in first.",https://github.com/bitcoin/bitcoin/pull/23053#issuecomment-930254875,930254875,
jnewbery,2021-10-04 14:02:19,Rebased on #22950. Leaving as a draft until that PR is merged.,https://github.com/bitcoin/bitcoin/pull/23053#issuecomment-933517415,933517415,
jnewbery,2021-10-05 15:59:49,Rebased. Marking ready for review.,https://github.com/bitcoin/bitcoin/pull/23053#issuecomment-934542047,934542047,
MarcoFalke,2021-10-05 16:14:16,"```\nSUMMARY: ThreadSanitizer: data race /usr/lib/llvm-12/bin/../include/c++/v1/ios:523:12 in std::__1::ios_base::width() const",https://github.com/bitcoin/bitcoin/pull/23053#issuecomment-934555248,934555248,
amitiuttarwar,2021-10-05 16:21:17,concept ACK ,https://github.com/bitcoin/bitcoin/pull/23053#issuecomment-934561170,934561170,
jnewbery,2021-10-05 16:31:00,"> SUMMARY: ThreadSanitizer: data race /usr/lib/llvm-12/bin/../include/c++/v1/ios:523:12 in std::__1::ios_base::width() const\n\n@MarcoFalke - I don't see how that can be related to this PR. The failure is in `validation_chainstate_tests`, which I don't touch here (changes are only in fuzz/addrman.cpp).",https://github.com/bitcoin/bitcoin/pull/23053#issuecomment-934569344,934569344,
theuni,2021-10-05 17:58:18,"utACK 44452110f0fa7cc1bcb941a3c7b5db4b492a7b9c. Agree the failure seems unrelated, looks like some startup race.\n\nThanks very much @vasild for the benchmarks. Indeed it appears the only functional change here is hitting more locks and `test_before_evict` is true, good to know those don't slow things down too much.\n\nIt appears to me that AddrManDeterministic would no longer be required if `",https://github.com/bitcoin/bitcoin/pull/23053#issuecomment-934637311,934637311,
MarcoFalke,2021-10-06 08:27:31,"Correct, the tsan failure is unrelated (known bug with boost). Sorry for missing this. Re-run the task, but it can be ignored either way.",https://github.com/bitcoin/bitcoin/pull/23053#issuecomment-935738754,935738754,
mzumsande,2021-10-07 18:16:58,"ACK 44452110f0fa7cc1bcb941a3c7b5db4b492a7b9c\n\nReviewed the code and did a few hours of fuzzing `addrman_serdeser`, and the results look as expected to me (e.g. addrman of various sizes are created for different fuzzing inputs).\n\nNot related to this PR, but the structure of `src/test/addrman.cpp` is a bit confusing to me, maybe the fuzz target `data_stream_addr_man` should be moved from the",https://github.com/bitcoin/bitcoin/pull/23053#issuecomment-938040184,938040184,
MarcoFalke,2021-09-21 10:21:15,leftover annotation?,https://github.com/bitcoin/bitcoin/pull/23053#discussion_r712902536,712902536,src/test/fuzz/addrman.cpp
jnewbery,2021-09-21 13:13:20,Oops! Fixed now. Thank you.,https://github.com/bitcoin/bitcoin/pull/23053#discussion_r713026697,713026697,src/test/fuzz/addrman.cpp
vasild,2021-09-29 08:31:44,The new code calls `Good()` which calls `Good_(/*test_before_evict=*/true)` whereas the old code passed `false`. I think this is ok.,https://github.com/bitcoin/bitcoin/pull/23053#discussion_r718278611,718278611,src/test/fuzz/addrman.cpp
mzumsande,2021-10-08 00:56:06,"Not related to the changes in this PR, but a general observation on the changed fuzz test:\nI  just noticed that `addrman_serdeser` is currently the slowest (>60 minutes, slower almost by a factor of 2 compared to the second slowest one) of fuzz tests when run for the qa asset corpus ([CI Link](https://cirrus-ci.com/task/5386734323105792?logs=ci#L4657)), so it seems to be the current bottleneck f",https://github.com/bitcoin/bitcoin/pull/23053#discussion_r724628332,724628332,src/test/fuzz/addrman.cpp
