fanquake,2020-11-20 12:24:02,Concept ACK ðŸ§š ,https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-731139816,731139816,
jonatack,2020-11-20 13:56:04,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-731184388,731184388,
laanwj,2020-11-20 15:11:18,I've ported the changes for PPC64 from #14066 in an extra commit.,https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-731226337,731226337,
DrahtBot,2020-11-20 17:05:05,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20451 (lint: run mypy over contrib/devtools by fanquake)\n* #14066 (gitian-linux: Build binaries for 64-bit POWER by luke",https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-731288858,731288858,
laanwj,2020-11-21 12:52:35,"Added mypy annotations. This found a few (small) actual bugs, and might make review easier by clarifying expected types.",https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-731575048,731575048,
theStack,2020-11-22 10:29:23,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-731726897,731726897,
sipa,2020-11-23 04:06:06,Concept ACK.\n\nELF looks remarkably simple!,https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-731915471,731915471,
laanwj,2020-11-23 08:13:16,"> ELF looks remarkably simple!\n\nThe secret is not needing to resolve relocations :slightly_smiling_face: That is where most of the verbose platform specific trickery comes in.\n\nEdit: not only don't we have any security checks that involve relocations and relocated code, so it's unnecessary to parse them, all the bitcoin binaries are compiled as position independent code so there shouldn't ",https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-732000418,732000418,
practicalswift,2020-11-23 10:28:32,Concept ACK: removing dependencies improves robustness,https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-732069985,732069985,
laanwj,2020-11-23 11:22:03,"It's not *really* the dependency that is the problem here. Sure, needing to call out to an utility less is nice, but `readelf` is part of binutils that we require for build. If it had a stable, predictable output format for machine parsing (like git's plumbing/porcelain distinction), this wouldn't be needed. The problem is basing security checks on an ambiguous human-friendly output format.",https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-732098913,732098913,
luke-jr,2020-11-25 00:15:36,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-733342704,733342704,
laanwj,2020-11-26 17:33:48,"Would be nice to get #20476 in first, which adds a test that the symbol check can actually fail.",https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-734418722,734418722,
DrahtBot,2020-11-27 23:02:29,<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds\n\n| File | commit afdfd3c8c1ce96adae11809e3989de381137fee9<br>(master) | commit 2cc79521b7af3cce8118b2a04fbe257764c44708<br>(master and this pull) |\n|--|--|--|\n| *-aarch64-linux-gnu-debug.tar.gz | [`321e361023e8ea7b...`](https://drahtbot.space/guix/bitcoin/bitcoin/afdfd3c8c1ce96adae11809e3989de381137fee9/bitcoin-afdfd3c8c1ce-aarch64-linux,https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-735007499,735007499,
DrahtBot,2020-12-01 05:32:15,<!--a722867cd34abeea1fadc8d60700f111-->\n### Gitian builds\n\n| File | commit e2ff5e7b35d71195278d2a2ed9485f141de33d7a<br>(master) | commit 1c4188e0337fc89fa7a72d99d16c7508f97f5497<br>(master and this pull) |\n|--|--|--|\n| bitcoin-core-linux-22-res.yml | [`44e52af36236879f...`](https://drahtbot.space/gitian/bitcoin/bitcoin/e2ff5e7b35d71195278d2a2ed9485f141de33d7a/bitcoin-core-linux-22-res.yml) | ,https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-736230522,736230522,
laanwj,2020-12-03 11:38:38,"Good to see that both guix and gitian builds (well, the checks) passed for all platforms.",https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-737887967,737887967,
laanwj,2020-12-07 10:07:06,Closing and reopening to re-trigger Travis with #20476 in.,https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-739814787,739814787,
MarcoFalke,2020-12-07 10:36:38,"cirrus won't re-trigger on open-close, but on a push only (e.g. rebase or other any other git push)",https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-739831889,739831889,
laanwj,2020-12-07 20:07:46,"*sigh* okay, added an empty commit to re-trgger CI, please remind me to remove it before merge. \nEdit: it passed, empty commit removed again.",https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-740150914,740150914,
fanquake,2020-12-14 08:47:58,"Just wanted  to note that this will fail the `RELRO` check if run against binaries older than 0.17.x, because they have the deprecated `DT_BIND_NOW` array tag:\n```bash\n/usr/local/opt/binutils/bin/readelf -dw ~/Downloads/bitcoin-0.16.3/bin/bitcoind | rg -i bind\n...\n 0x0000000000000009 (RELAENT)            24 (bytes)\n 0x0000000000000018 (BIND_NOW)           \n 0x000000006ffffffb (FLAGS_1)",https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-744282330,744282330,
laanwj,2020-12-14 15:49:02,"Thanks for testing!\n\nIn contrast to passing, failing is safe in this case. I think it's fine to support the 'new way' only, as this is what we want our binaries to use.\n\n~~Edit: or should we check for *both* to be present because old platforms might ignore the new flag?~~ No, because new toolchains don't set the old flag.",https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-744529370,744529370,
sipa,2020-12-15 21:01:01,"Concept & approach ACK. I have tried the pixie module on a few binaries and seems to give reasonable results, but haven't reviewed the code in detail or verified against any ELF format reference.",https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-745564433,745564433,
laanwj,2020-12-17 12:19:04,"@sipa Thanks for testing and looking at it!\n\nFWIW, verifying it against `elf.h` is probably easier than verifying it against the ELF spec as it follows a similar structure. But I hope the security and symbol-check tests are enough to give confidence that this has the same functionality as the `elfread` based implementation.\n(apart from the deprecated `DT_BIND_NOW` check)",https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-747405748,747405748,
laanwj,2020-12-18 11:16:20,"I'm going to merge this so that #14066 can be rebased on top and we can introduce the POWER architecture binaries in the beginning of the 0.22 window instead of the last minute (or again miss it last minute).\n",https://github.com/bitcoin/bitcoin/pull/20434#issuecomment-748030181,748030181,
laanwj,2020-11-20 16:04:43,"I don't know much about python type specifications but this is wrong now, I think it is `Tuple[List[Tuple[str, str]], int]`.\n\nEdit: resolved now",https://github.com/bitcoin/bitcoin/pull/20434#discussion_r527792317,527792317,contrib/devtools/symbol-check.py
fanquake,2020-11-23 04:08:14,"note: Now that we require Python 3.6, if you want you can also use [variable annotations](https://www.python.org/dev/peps/pep-0526/):\n```suggestion\nEI_NIDENT: int = 16\n```",https://github.com/bitcoin/bitcoin/pull/20434#discussion_r528463386,528463386,contrib/devtools/pixie.py
laanwj,2020-11-23 08:12:28,"Sure but, I added any annotations that `mypy` required of me even with various `--disallow-*` options. I'm not convinced that decorating unambiguous assignments of integers with `: int` adds anything but verbosity.",https://github.com/bitcoin/bitcoin/pull/20434#discussion_r528525781,528525781,contrib/devtools/pixie.py
