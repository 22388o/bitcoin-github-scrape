[
  {
    "sha": "c6c14d91e2ae61275439faada1ff1937a4dd8820",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmMxNGQ5MWUyYWU2MTI3NTQzOWZhYWRhMWZmMTkzN2E0ZGQ4ODIw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-12T16:24:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-14T08:51:17Z"
      },
      "message": "Create a constant for chainstate write period in WriteChainState",
      "tree": {
        "sha": "d835bf39b98634e6907c359b50b491fb201107f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d835bf39b98634e6907c359b50b491fb201107f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6c14d91e2ae61275439faada1ff1937a4dd8820",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6c14d91e2ae61275439faada1ff1937a4dd8820",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c14d91e2ae61275439faada1ff1937a4dd8820",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6c14d91e2ae61275439faada1ff1937a4dd8820/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e257b7c4c4517bc90237d879b40a380a8f596788",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e257b7c4c4517bc90237d879b40a380a8f596788",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e257b7c4c4517bc90237d879b40a380a8f596788"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "451e8f39aa5d45afa1953d217cb0fc69daa7c679",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c14d91e2ae61275439faada1ff1937a4dd8820/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c14d91e2ae61275439faada1ff1937a4dd8820/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c6c14d91e2ae61275439faada1ff1937a4dd8820",
        "patch": "@@ -1866,7 +1866,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n // Update the on-disk chain state.\n bool static WriteChainState(CValidationState &state) {\n     static int64_t nLastWrite = 0;\n-    if (pcoinsTip->GetCacheSize() > nCoinCacheSize || (!IsInitialBlockDownload() && GetTimeMicros() > nLastWrite + 600*1000000)) {\n+    if (pcoinsTip->GetCacheSize() > nCoinCacheSize || (!IsInitialBlockDownload() && GetTimeMicros() > nLastWrite + CHAINSTATE_WRITE_PERIOD*1000000)) {\n         // Typical CCoins structures on disk are around 100 bytes in size.\n         // Pushing a new one to the database can cause it to be written\n         // twice (once in the log, and once in the tables). This is already"
      },
      {
        "sha": "66540709cfefbc0dff519e8a2954a744c977657c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c14d91e2ae61275439faada1ff1937a4dd8820/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c14d91e2ae61275439faada1ff1937a4dd8820/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c6c14d91e2ae61275439faada1ff1937a4dd8820",
        "patch": "@@ -67,6 +67,8 @@ static const int DEFAULT_SCRIPTCHECK_THREADS = 0;\n static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 128;\n /** Timeout in seconds before considering a block download peer unresponsive. */\n static const unsigned int BLOCK_DOWNLOAD_TIMEOUT = 60;\n+/** Time in seconds between chain state flushes, if not in initial block download */\n+static const unsigned int CHAINSTATE_WRITE_PERIOD = 600;\n \n /** \"reject\" message codes **/\n static const unsigned char REJECT_MALFORMED = 0x01;"
      }
    ]
  },
  {
    "sha": "542a3fdec38cb182f07d397c2e3d97d6289fdc5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDJhM2ZkZWMzOGNiMTgyZjA3ZDM5N2MyZTNkOTdkNjI4OWZkYzVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-13T15:00:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-14T08:51:19Z"
      },
      "message": "Add coinscache information to RPC\n\nMakes it possible to measure and compare caching strategies.",
      "tree": {
        "sha": "a4f5ba1afa7b9875518ec0e7cfac45370cfda382",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4f5ba1afa7b9875518ec0e7cfac45370cfda382"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/542a3fdec38cb182f07d397c2e3d97d6289fdc5e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/542a3fdec38cb182f07d397c2e3d97d6289fdc5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/542a3fdec38cb182f07d397c2e3d97d6289fdc5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/542a3fdec38cb182f07d397c2e3d97d6289fdc5e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6c14d91e2ae61275439faada1ff1937a4dd8820",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6c14d91e2ae61275439faada1ff1937a4dd8820",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c14d91e2ae61275439faada1ff1937a4dd8820"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 25,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e09fa904e84f46646c21597ceef882fd99b493df",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/542a3fdec38cb182f07d397c2e3d97d6289fdc5e/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/542a3fdec38cb182f07d397c2e3d97d6289fdc5e/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=542a3fdec38cb182f07d397c2e3d97d6289fdc5e",
        "patch": "@@ -320,14 +320,24 @@ class CCoinsViewBacked : public CCoinsView\n     bool GetStats(CCoinsStats &stats);\n };\n \n+struct CCoinsCacheStats\n+{\n+    CCoinsCacheStats(): positive_hits(0), negative_hits(0), positive_misses(0), negative_misses(0), writes(0) {}\n+    // Counters\n+    uint64_t positive_hits;\n+    uint64_t negative_hits;\n+    uint64_t positive_misses;\n+    uint64_t negative_misses;\n+    uint64_t writes;\n+};\n \n /** CCoinsView that adds a memory cache for transactions to another CCoinsView */\n class CCoinsViewCache : public CCoinsViewBacked\n {\n protected:\n     uint256 hashBlock;\n     CCoinsMap cacheCoins;\n-\n+    CCoinsCacheStats stats;\n public:\n     CCoinsViewCache(CCoinsView &baseIn, bool fDummy = false);\n \n@@ -368,6 +378,8 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n     const CTxOut &GetOutputFor(const CTxIn& input);\n \n+    const CCoinsCacheStats &GetCacheStats() { return stats; }\n+\n private:\n     CCoinsMap::iterator FetchCoins(const uint256 &txid);\n };"
      },
      {
        "sha": "19eec61a2eea1f4d0104e27b1e01a5d1cf3e329e",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/542a3fdec38cb182f07d397c2e3d97d6289fdc5e/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/542a3fdec38cb182f07d397c2e3d97d6289fdc5e/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=542a3fdec38cb182f07d397c2e3d97d6289fdc5e",
        "patch": "@@ -452,13 +452,25 @@ Value getblockchaininfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockchaininfo\", \"\")\n         );\n \n+    Object cache_info;\n+    const CCoinsCacheStats &stats = pcoinsTip->GetCacheStats();\n+    cache_info.push_back(Pair(\"positive_hits\", stats.positive_hits));\n+    cache_info.push_back(Pair(\"negative_hits\", stats.negative_hits));\n+    cache_info.push_back(Pair(\"positive_misses\", stats.positive_misses));\n+    cache_info.push_back(Pair(\"negative_misses\", stats.negative_misses));\n+    cache_info.push_back(Pair(\"writes\", stats.writes));\n+    cache_info.push_back(Pair(\"cache_size\", (int64_t)pcoinsTip->GetCacheSize()));\n+    cache_info.push_back(Pair(\"cache_limit\", (int64_t)nCoinCacheSize));\n+\n     Object obj;\n     obj.push_back(Pair(\"chain\",                 Params().NetworkIDString()));\n     obj.push_back(Pair(\"blocks\",                (int)chainActive.Height()));\n     obj.push_back(Pair(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex()));\n     obj.push_back(Pair(\"difficulty\",            (double)GetDifficulty()));\n     obj.push_back(Pair(\"verificationprogress\",  Checkpoints::GuessVerificationProgress(chainActive.Tip())));\n     obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n+    obj.push_back(Pair(\"coinscache\",            cache_info));\n+\n     return obj;\n }\n "
      }
    ]
  },
  {
    "sha": "4d417c23f5805d97a9e73e3903f314c4e0a4aac9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDQxN2MyM2Y1ODA1ZDk3YTllNzNlMzkwM2YzMTRjNGUwYTRhYWM5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-12T06:52:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-14T08:51:20Z"
      },
      "message": "Split CCoinsView::GetCoins into GetCoins and ModifyCoins\n\nMake intention more clear:\n\n- Call ModifyCoins if you intend to change the coins\n- Call GetCoins to get a const reference to the coins\n\nThis can be used for dirty tracking later on.",
      "tree": {
        "sha": "2cf68457e87c5cbf931d820b34ee6a0ba7aed980",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cf68457e87c5cbf931d820b34ee6a0ba7aed980"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d417c23f5805d97a9e73e3903f314c4e0a4aac9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d417c23f5805d97a9e73e3903f314c4e0a4aac9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d417c23f5805d97a9e73e3903f314c4e0a4aac9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d417c23f5805d97a9e73e3903f314c4e0a4aac9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "542a3fdec38cb182f07d397c2e3d97d6289fdc5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/542a3fdec38cb182f07d397c2e3d97d6289fdc5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/542a3fdec38cb182f07d397c2e3d97d6289fdc5e"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ec39a18bf9d3b63bb84da5d77d8467b3acc5e882",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d417c23f5805d97a9e73e3903f314c4e0a4aac9/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d417c23f5805d97a9e73e3903f314c4e0a4aac9/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=4d417c23f5805d97a9e73e3903f314c4e0a4aac9",
        "patch": "@@ -99,7 +99,13 @@ CCoinsMap::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n     return ret;\n }\n \n-CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) {\n+const CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) {\n+    CCoinsMap::const_iterator it = FetchCoins(txid);\n+    assert(it != cacheCoins.end());\n+    return it->second;\n+}\n+\n+CCoins &CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n     CCoinsMap::iterator it = FetchCoins(txid);\n     assert(it != cacheCoins.end());\n     return it->second;"
      },
      {
        "sha": "30d36774abfbe3e5724d69b8b75774b795d296ae",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d417c23f5805d97a9e73e3903f314c4e0a4aac9/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d417c23f5805d97a9e73e3903f314c4e0a4aac9/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=4d417c23f5805d97a9e73e3903f314c4e0a4aac9",
        "patch": "@@ -352,7 +352,8 @@ class CCoinsViewCache : public CCoinsViewBacked\n     // Return a modifiable reference to a CCoins. Check HaveCoins first.\n     // Many methods explicitly require a CCoinsViewCache because of this method, to reduce\n     // copying.\n-    CCoins &GetCoins(const uint256 &txid);\n+    CCoins &ModifyCoins(const uint256 &txid);\n+    const CCoins &GetCoins(const uint256 &txid);\n \n     // Push the modifications applied to this cache to its base.\n     // Failure to call this method before destruction will cause the changes to be forgotten."
      },
      {
        "sha": "6b2002fcb541818cf5f611e9c34922ef4f48300c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d417c23f5805d97a9e73e3903f314c4e0a4aac9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d417c23f5805d97a9e73e3903f314c4e0a4aac9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4d417c23f5805d97a9e73e3903f314c4e0a4aac9",
        "patch": "@@ -1435,7 +1435,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n     // mark inputs spent\n     if (!tx.IsCoinBase()) {\n         BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n-            CCoins &coins = inputs.GetCoins(txin.prevout.hash);\n+            CCoins &coins = inputs.ModifyCoins(txin.prevout.hash);\n             CTxInUndo undo;\n             ret = coins.Spend(txin.prevout, undo);\n             assert(ret);\n@@ -1590,7 +1590,7 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         // have outputs available even in the block itself, so we handle that case\n         // specially with outsEmpty.\n         CCoins outsEmpty;\n-        CCoins &outs = view.HaveCoins(hash) ? view.GetCoins(hash) : outsEmpty;\n+        CCoins &outs = view.HaveCoins(hash) ? view.ModifyCoins(hash) : outsEmpty;\n         outs.ClearUnspendable();\n \n         CCoins outsBlock = CCoins(tx, pindex->nHeight);"
      },
      {
        "sha": "8610f497e9f2d7c64ed6ce8a38cd66e38a2a9215",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d417c23f5805d97a9e73e3903f314c4e0a4aac9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d417c23f5805d97a9e73e3903f314c4e0a4aac9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4d417c23f5805d97a9e73e3903f314c4e0a4aac9",
        "patch": "@@ -498,7 +498,7 @@ void CTxMemPool::check(CCoinsViewCache *pcoins) const\n                 const CTransaction& tx2 = it2->second.GetTx();\n                 assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());\n             } else {\n-                CCoins &coins = pcoins->GetCoins(txin.prevout.hash);\n+                const CCoins &coins = pcoins->GetCoins(txin.prevout.hash);\n                 assert(coins.IsAvailable(txin.prevout.n));\n             }\n             // Check whether its inputs are marked in mapNextTx."
      }
    ]
  },
  {
    "sha": "15158ca8ebccee899486997c515d4b94e35d049e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTE1OGNhOGViY2NlZTg5OTQ4Njk5N2M1MTVkNGI5NGUzNWQwNDll",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-13T14:10:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-14T08:51:20Z"
      },
      "message": "Implement CCoinsViewCache::GetCoins with FetchCoins\n\nAvoids duplicating logic.\nAlso move the function together with its other overload in the\nimplementation file.",
      "tree": {
        "sha": "aad35487cb5b97ef2b9ea83055408ea7d5ee3d3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aad35487cb5b97ef2b9ea83055408ea7d5ee3d3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15158ca8ebccee899486997c515d4b94e35d049e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15158ca8ebccee899486997c515d4b94e35d049e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15158ca8ebccee899486997c515d4b94e35d049e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15158ca8ebccee899486997c515d4b94e35d049e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d417c23f5805d97a9e73e3903f314c4e0a4aac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d417c23f5805d97a9e73e3903f314c4e0a4aac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d417c23f5805d97a9e73e3903f314c4e0a4aac9"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 9,
      "deletions": 12
    },
    "files": [
      {
        "sha": "1f6407a881e0ba27e22b7bac8248a816ae1bd08d",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15158ca8ebccee899486997c515d4b94e35d049e/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15158ca8ebccee899486997c515d4b94e35d049e/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=15158ca8ebccee899486997c515d4b94e35d049e",
        "patch": "@@ -75,18 +75,6 @@ CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hashBlock(0) { }\n \n-bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) {\n-    if (cacheCoins.count(txid)) {\n-        coins = cacheCoins[txid];\n-        return true;\n-    }\n-    if (base->GetCoins(txid, coins)) {\n-        cacheCoins[txid] = coins;\n-        return true;\n-    }\n-    return false;\n-}\n-\n CCoinsMap::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n     CCoinsMap::iterator it = cacheCoins.find(txid);\n     if (it != cacheCoins.end())\n@@ -99,6 +87,15 @@ CCoinsMap::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n     return ret;\n }\n \n+bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) {\n+    CCoinsMap::iterator it = FetchCoins(txid);\n+    if (it != cacheCoins.end()) {\n+        coins = it->second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n const CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) {\n     CCoinsMap::const_iterator it = FetchCoins(txid);\n     assert(it != cacheCoins.end());"
      }
    ]
  },
  {
    "sha": "2488d413828748cc5500eb8b3c16c1c2f8825f82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDg4ZDQxMzgyODc0OGNjNTUwMGViOGIzYzE2YzFjMmY4ODI1Zjgy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-14T09:32:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-14T09:32:23Z"
      },
      "message": "Adds stats counting to CCoinsViewCache",
      "tree": {
        "sha": "fac5dea943dff9aeb8947ddb1bc14c2fedd63d17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fac5dea943dff9aeb8947ddb1bc14c2fedd63d17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2488d413828748cc5500eb8b3c16c1c2f8825f82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2488d413828748cc5500eb8b3c16c1c2f8825f82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2488d413828748cc5500eb8b3c16c1c2f8825f82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2488d413828748cc5500eb8b3c16c1c2f8825f82/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15158ca8ebccee899486997c515d4b94e35d049e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15158ca8ebccee899486997c515d4b94e35d049e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15158ca8ebccee899486997c515d4b94e35d049e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "acd0ffe97cd88c48fca1de714c53401bd5ed3c34",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2488d413828748cc5500eb8b3c16c1c2f8825f82/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2488d413828748cc5500eb8b3c16c1c2f8825f82/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=2488d413828748cc5500eb8b3c16c1c2f8825f82",
        "patch": "@@ -78,10 +78,17 @@ CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBa\n CCoinsMap::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n     CCoinsMap::iterator it = cacheCoins.find(txid);\n     if (it != cacheCoins.end())\n+    {\n+        stats.positive_hits++;\n         return it;\n+    }\n     CCoins tmp;\n     if (!base->GetCoins(txid,tmp))\n+    {\n+        stats.negative_misses++;\n         return cacheCoins.end();\n+    }\n+    stats.positive_misses++;\n     CCoinsMap::iterator ret = cacheCoins.insert(it, std::make_pair(txid, CCoins()));\n     tmp.swap(ret->second);\n     return ret;\n@@ -143,7 +150,10 @@ bool CCoinsViewCache::BatchWrite(const CCoinsMap &mapCoins, const uint256 &hashB\n bool CCoinsViewCache::Flush() {\n     bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n     if (fOk)\n+    {\n+        stats.writes += cacheWrite.size();\n         cacheCoins.clear();\n+    }\n     return fOk;\n }\n "
      }
    ]
  },
  {
    "sha": "b1b1a5465193e3c50f48d2a7d3a18220b582cb37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWIxYTU0NjUxOTNlM2M1MGY0OGQyYTdkM2ExODIyMGI1ODJjYjM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-13T14:33:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-14T09:44:01Z"
      },
      "message": "Make CCoinsViewCache::FetchCoins return a pointer instead of an iterator\n\nThis makes it possible to use different data structures for different\nparts of the cache.",
      "tree": {
        "sha": "e29211db917509cbecff38b13c7aba294e6247b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e29211db917509cbecff38b13c7aba294e6247b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1b1a5465193e3c50f48d2a7d3a18220b582cb37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1b1a5465193e3c50f48d2a7d3a18220b582cb37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1b1a5465193e3c50f48d2a7d3a18220b582cb37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1b1a5465193e3c50f48d2a7d3a18220b582cb37/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2488d413828748cc5500eb8b3c16c1c2f8825f82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2488d413828748cc5500eb8b3c16c1c2f8825f82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2488d413828748cc5500eb8b3c16c1c2f8825f82"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "22829f820a7c8d158a488edff18b8c5a602af35a",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1b1a5465193e3c50f48d2a7d3a18220b582cb37/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1b1a5465193e3c50f48d2a7d3a18220b582cb37/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=b1b1a5465193e3c50f48d2a7d3a18220b582cb37",
        "patch": "@@ -75,44 +75,44 @@ CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hashBlock(0) { }\n \n-CCoinsMap::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n+CCoins *CCoinsViewCache::FetchCoins(const uint256 &txid) {\n     CCoinsMap::iterator it = cacheCoins.find(txid);\n     if (it != cacheCoins.end())\n     {\n         stats.positive_hits++;\n-        return it;\n+        return &it->second;\n     }\n     CCoins tmp;\n     if (!base->GetCoins(txid,tmp))\n     {\n         stats.negative_misses++;\n-        return cacheCoins.end();\n+        return 0;\n     }\n     stats.positive_misses++;\n     CCoinsMap::iterator ret = cacheCoins.insert(it, std::make_pair(txid, CCoins()));\n     tmp.swap(ret->second);\n-    return ret;\n+    return &ret->second;\n }\n \n bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) {\n-    CCoinsMap::iterator it = FetchCoins(txid);\n-    if (it != cacheCoins.end()) {\n-        coins = it->second;\n+    const CCoins *pcoins = FetchCoins(txid);\n+    if (pcoins) {\n+        coins = *pcoins;\n         return true;\n     }\n     return false;\n }\n \n const CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n-    assert(it != cacheCoins.end());\n-    return it->second;\n+    const CCoins *pcoins = FetchCoins(txid);\n+    assert(pcoins);\n+    return *pcoins;\n }\n \n CCoins &CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n-    CCoinsMap::iterator it = FetchCoins(txid);\n-    assert(it != cacheCoins.end());\n-    return it->second;\n+    CCoins *pcoins = FetchCoins(txid);\n+    assert(pcoins);\n+    return *pcoins;\n }\n \n bool CCoinsViewCache::SetCoins(const uint256 &txid, const CCoins &coins) {\n@@ -121,12 +121,12 @@ bool CCoinsViewCache::SetCoins(const uint256 &txid, const CCoins &coins) {\n }\n \n bool CCoinsViewCache::HaveCoins(const uint256 &txid) {\n-    CCoinsMap::iterator it = FetchCoins(txid);\n+    const CCoins *pcoins = FetchCoins(txid);\n     // We're using vtx.empty() instead of IsPruned here for performance reasons,\n     // as we only care about the case where an transaction was replaced entirely\n     // in a reorganization (which wipes vout entirely, as opposed to spending\n     // which just cleans individual outputs).\n-    return (it != cacheCoins.end() && !it->second.vout.empty());\n+    return (pcoins && !pcoins->vout.empty());\n }\n \n uint256 CCoinsViewCache::GetBestBlock() {\n@@ -151,7 +151,7 @@ bool CCoinsViewCache::Flush() {\n     bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n     if (fOk)\n     {\n-        stats.writes += cacheWrite.size();\n+        stats.writes += cacheCoins.size();\n         cacheCoins.clear();\n     }\n     return fOk;"
      },
      {
        "sha": "6c02d2ac501050e641aba129eb20332e88321112",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1b1a5465193e3c50f48d2a7d3a18220b582cb37/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1b1a5465193e3c50f48d2a7d3a18220b582cb37/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=b1b1a5465193e3c50f48d2a7d3a18220b582cb37",
        "patch": "@@ -382,7 +382,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     const CCoinsCacheStats &GetCacheStats() { return stats; }\n \n private:\n-    CCoinsMap::iterator FetchCoins(const uint256 &txid);\n+    CCoins *FetchCoins(const uint256 &txid);\n };\n \n #endif"
      }
    ]
  },
  {
    "sha": "b935d022640e71c0df70415855903de08dddcaf8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTM1ZDAyMjY0MGU3MWMwZGY3MDQxNTg1NTkwM2RlMDhkZGRjYWY4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-12T07:42:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-14T09:48:15Z"
      },
      "message": "CCoinsViewCache: separate read and write caches\n\nKeep track of entries that are read-only or r/w in separate\ncaches. This is an optimization that avoids writing back all\naccessed entries back to the database on a flush.\n\nAlso makes the way clear for future optimizations such as putting a\nfixed limit on the size of the read cache.",
      "tree": {
        "sha": "51ea607368c2e5cfd231d1963b0b54597afeaf0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51ea607368c2e5cfd231d1963b0b54597afeaf0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b935d022640e71c0df70415855903de08dddcaf8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b935d022640e71c0df70415855903de08dddcaf8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b935d022640e71c0df70415855903de08dddcaf8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b935d022640e71c0df70415855903de08dddcaf8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1b1a5465193e3c50f48d2a7d3a18220b582cb37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1b1a5465193e3c50f48d2a7d3a18220b582cb37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1b1a5465193e3c50f48d2a7d3a18220b582cb37"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 93,
      "deletions": 23
    },
    "files": [
      {
        "sha": "ddbf4c06d0e94ced4e5bf6b0ce064021d8d6d4bc",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 80,
        "deletions": 19,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b935d022640e71c0df70415855903de08dddcaf8/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b935d022640e71c0df70415855903de08dddcaf8/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=b935d022640e71c0df70415855903de08dddcaf8",
        "patch": "@@ -75,23 +75,35 @@ CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hashBlock(0) { }\n \n-CCoins *CCoinsViewCache::FetchCoins(const uint256 &txid) {\n-    CCoinsMap::iterator it = cacheCoins.find(txid);\n-    if (it != cacheCoins.end())\n+const CCoins *CCoinsViewCache::FetchCoins(const uint256 &txid) {\n+    CCoinsMap::const_iterator it;\n+    // First look up the coins in the write cache\n+    it = cacheWrite.find(txid);\n+    if (it != cacheWrite.end())\n     {\n         stats.positive_hits++;\n         return &it->second;\n     }\n+\n+    // Otherwise look up the coins in the read cache\n+    it = cacheRead.find(txid);\n+    if (it != cacheRead.end())\n+    {\n+        stats.positive_hits++;\n+        return &it->second;\n+    }\n+\n+    // If everything missed, fall back to base\n     CCoins tmp;\n-    if (!base->GetCoins(txid,tmp))\n+    if (!base->GetCoins(txid, tmp))\n     {\n         stats.negative_misses++;\n         return 0;\n     }\n     stats.positive_misses++;\n-    CCoinsMap::iterator ret = cacheCoins.insert(it, std::make_pair(txid, CCoins()));\n-    tmp.swap(ret->second);\n-    return &ret->second;\n+    CCoinsMap::iterator itnew = cacheRead.insert(it, std::make_pair(txid, CCoins()));\n+    tmp.swap(itnew->second);\n+    return &itnew->second;\n }\n \n bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) {\n@@ -110,13 +122,43 @@ const CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) {\n }\n \n CCoins &CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n-    CCoins *pcoins = FetchCoins(txid);\n-    assert(pcoins);\n-    return *pcoins;\n+    // If already in the write cache, return a direct reference\n+    CCoinsMap::iterator itw = cacheWrite.find(txid);\n+    if (itw != cacheWrite.end())\n+    {\n+        stats.positive_hits++;\n+        return itw->second;\n+    }\n+\n+    // If in the read cache, swap the entry to the write cache,\n+    // evict it from the read cache\n+    CCoinsMap::iterator itr = cacheRead.find(txid);\n+    if (itr != cacheRead.end())\n+    {\n+        stats.positive_hits++;\n+        itw = cacheWrite.insert(itw, std::make_pair(txid, CCoins()));\n+        itw->second.swap(itr->second);\n+        cacheRead.erase(itr);\n+        return itw->second;\n+    }\n+\n+    // If everything missed, fall back to base. Load the entry\n+    // directly into the write cache. Croak if the coins do not\n+    // exist.\n+    stats.positive_misses++;\n+    CCoins tmp;\n+    bool have = base->GetCoins(txid, tmp);\n+    assert(have);\n+    itw = cacheWrite.insert(itw, std::make_pair(txid, CCoins()));\n+    tmp.swap(itw->second);\n+    return itw->second;\n }\n \n bool CCoinsViewCache::SetCoins(const uint256 &txid, const CCoins &coins) {\n-    cacheCoins[txid] = coins;\n+    // Evict from read cache (if present there), then write to write cache\n+    // (overwriting anything already there)\n+    cacheRead.erase(txid);\n+    cacheWrite[txid] = coins;\n     return true;\n }\n \n@@ -141,24 +183,43 @@ bool CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n }\n \n bool CCoinsViewCache::BatchWrite(const CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n+    LogPrint(\"coinscache\", \"%p: BatchWrite before %i in read cache, %i in write cache\\n\", this, cacheRead.size(), cacheWrite.size());\n     for (CCoinsMap::const_iterator it = mapCoins.begin(); it != mapCoins.end(); it++)\n-        cacheCoins[it->first] = it->second;\n+    {\n+        cacheRead.erase(it->first);\n+        cacheWrite[it->first] = it->second;\n+    }\n     hashBlock = hashBlockIn;\n+    LogPrint(\"coinscache\", \"%p: BatchWrite after %i in read cache, %i in write cache\\n\", this, cacheRead.size(), cacheWrite.size());\n     return true;\n }\n \n-bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n-    if (fOk)\n+bool CCoinsViewCache::Flush(unsigned int flags) {\n+    LogPrint(\"coinscache\", \"%p: Flush before (%i) %i in read cache, %i in write cache\\n\", this, flags, cacheRead.size(), cacheWrite.size());\n+    bool fOk = true;\n+    if (flags & WRITE)\n+    {\n+        stats.writes += cacheWrite.size();\n+        fOk = base->BatchWrite(cacheWrite, hashBlock);\n+        // Flush write cache only if batch write succeeded, but always flush read cache\n+        if (fOk)\n+            cacheWrite.clear();\n+    }\n+    if (flags & READ)\n     {\n-        stats.writes += cacheCoins.size();\n-        cacheCoins.clear();\n+        cacheRead.clear();\n     }\n+    LogPrint(\"coinscache\", \"%p: Flush after %i in read cache, %i in write cache\\n\", this, cacheRead.size(), cacheWrite.size());\n     return fOk;\n }\n \n-unsigned int CCoinsViewCache::GetCacheSize() {\n-    return cacheCoins.size();\n+unsigned int CCoinsViewCache::GetCacheSize(unsigned int flags) {\n+    unsigned int total = 0;\n+    if (flags & WRITE)\n+        total += cacheWrite.size();\n+    if (flags & READ)\n+        total += cacheRead.size();\n+    return total;\n }\n \n const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input)"
      },
      {
        "sha": "021e22bd5ddf9a58cacc19cf3a1ad4501d5a6d5e",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b935d022640e71c0df70415855903de08dddcaf8/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b935d022640e71c0df70415855903de08dddcaf8/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=b935d022640e71c0df70415855903de08dddcaf8",
        "patch": "@@ -336,9 +336,18 @@ class CCoinsViewCache : public CCoinsViewBacked\n {\n protected:\n     uint256 hashBlock;\n-    CCoinsMap cacheCoins;\n     CCoinsCacheStats stats;\n+    // Invariant: an entry should be in either the read cache or the write cache, or neither\n+    CCoinsMap cacheRead;\n+    CCoinsMap cacheWrite;\n+\n public:\n+    enum CacheFlags\n+    {\n+        READ = 1,\n+        WRITE = 2,\n+        READ_AND_WRITE = READ|WRITE\n+    };\n     CCoinsViewCache(CCoinsView &baseIn, bool fDummy = false);\n \n     // Standard CCoinsView methods\n@@ -357,10 +366,10 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n     // Push the modifications applied to this cache to its base.\n     // Failure to call this method before destruction will cause the changes to be forgotten.\n-    bool Flush();\n+    bool Flush(unsigned int flags = READ_AND_WRITE);\n \n     // Calculate the size of the cache (in number of transactions)\n-    unsigned int GetCacheSize();\n+    unsigned int GetCacheSize(unsigned int flags = READ_AND_WRITE);\n \n     /** Amount of bitcoins coming in to a transaction\n         Note that lightweight clients may not know anything besides the hash of previous transactions,\n@@ -382,7 +391,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     const CCoinsCacheStats &GetCacheStats() { return stats; }\n \n private:\n-    CCoins *FetchCoins(const uint256 &txid);\n+    const CCoins *FetchCoins(const uint256 &txid);\n };\n \n #endif"
      }
    ]
  },
  {
    "sha": "cfdd3b64423e08778f225f1867d39a04b7f59256",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmRkM2I2NDQyM2UwODc3OGYyMjVmMTg2N2QzOWEwNGI3ZjU5MjU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-13T17:42:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-14T09:48:18Z"
      },
      "message": "Report rcache and wcache size separately in RPC",
      "tree": {
        "sha": "7fa0a23894ee4bac3710d32b2d8ef0ea489a74db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fa0a23894ee4bac3710d32b2d8ef0ea489a74db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfdd3b64423e08778f225f1867d39a04b7f59256",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdd3b64423e08778f225f1867d39a04b7f59256",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfdd3b64423e08778f225f1867d39a04b7f59256",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdd3b64423e08778f225f1867d39a04b7f59256/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b935d022640e71c0df70415855903de08dddcaf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b935d022640e71c0df70415855903de08dddcaf8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b935d022640e71c0df70415855903de08dddcaf8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "36e8002c44cbeb69c90efd66e23c566138ba99e8",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfdd3b64423e08778f225f1867d39a04b7f59256/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfdd3b64423e08778f225f1867d39a04b7f59256/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=cfdd3b64423e08778f225f1867d39a04b7f59256",
        "patch": "@@ -460,6 +460,8 @@ Value getblockchaininfo(const Array& params, bool fHelp)\n     cache_info.push_back(Pair(\"negative_misses\", stats.negative_misses));\n     cache_info.push_back(Pair(\"writes\", stats.writes));\n     cache_info.push_back(Pair(\"cache_size\", (int64_t)pcoinsTip->GetCacheSize()));\n+    cache_info.push_back(Pair(\"rcache_size\", (int64_t)pcoinsTip->GetCacheSize(CCoinsViewCache::READ)));\n+    cache_info.push_back(Pair(\"wcache_size\", (int64_t)pcoinsTip->GetCacheSize(CCoinsViewCache::WRITE)));\n     cache_info.push_back(Pair(\"cache_limit\", (int64_t)nCoinCacheSize));\n \n     Object obj;"
      }
    ]
  },
  {
    "sha": "3bb0fb2cfde1fe2ecb413126bc9d745dcb6d79af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmIwZmIyY2ZkZTFmZTJlY2I0MTMxMjZiYzlkNzQ1ZGNiNmQ3OWFm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-12T16:13:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-14T09:48:18Z"
      },
      "message": "Change WriteChainState to use cache flags\n\n- Flush READ and WRITE caches if maximum size exceeded (`pcoinsTip->GetCacheSize() > nCoinCacheSize`)\n- Flush WRITE cache periodically if !InitialBlockDownload()",
      "tree": {
        "sha": "d1862a467d7457f819159a73832d0d70665a7e48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1862a467d7457f819159a73832d0d70665a7e48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bb0fb2cfde1fe2ecb413126bc9d745dcb6d79af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bb0fb2cfde1fe2ecb413126bc9d745dcb6d79af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bb0fb2cfde1fe2ecb413126bc9d745dcb6d79af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bb0fb2cfde1fe2ecb413126bc9d745dcb6d79af/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfdd3b64423e08778f225f1867d39a04b7f59256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdd3b64423e08778f225f1867d39a04b7f59256",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfdd3b64423e08778f225f1867d39a04b7f59256"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ad8b6f05cd2d02a7707e1b121c4f7962d3ca02c8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bb0fb2cfde1fe2ecb413126bc9d745dcb6d79af/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bb0fb2cfde1fe2ecb413126bc9d745dcb6d79af/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3bb0fb2cfde1fe2ecb413126bc9d745dcb6d79af",
        "patch": "@@ -1866,17 +1866,23 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n // Update the on-disk chain state.\n bool static WriteChainState(CValidationState &state) {\n     static int64_t nLastWrite = 0;\n-    if (pcoinsTip->GetCacheSize() > nCoinCacheSize || (!IsInitialBlockDownload() && GetTimeMicros() > nLastWrite + CHAINSTATE_WRITE_PERIOD*1000000)) {\n+    unsigned int flush_flags = 0;\n+    if (pcoinsTip->GetCacheSize() > nCoinCacheSize)\n+        flush_flags |= CCoinsViewCache::READ_AND_WRITE;\n+    if (!IsInitialBlockDownload() && GetTimeMicros() > nLastWrite + CHAINSTATE_WRITE_PERIOD*1000000)\n+        flush_flags |= CCoinsViewCache::WRITE;\n+\n+    if (flush_flags) {\n         // Typical CCoins structures on disk are around 100 bytes in size.\n         // Pushing a new one to the database can cause it to be written\n         // twice (once in the log, and once in the tables). This is already\n         // an overestimation, as most will delete an existing entry or\n         // overwrite one. Still, use a conservative safety factor of 2.\n-        if (!CheckDiskSpace(100 * 2 * 2 * pcoinsTip->GetCacheSize()))\n+        if (!CheckDiskSpace(100 * 2 * 2 * pcoinsTip->GetCacheSize(CCoinsViewCache::WRITE)))\n             return state.Error(\"out of disk space\");\n         FlushBlockFile();\n         pblocktree->Sync();\n-        if (!pcoinsTip->Flush())\n+        if (!pcoinsTip->Flush(flush_flags))\n             return state.Abort(_(\"Failed to write to coin database\"));\n         nLastWrite = GetTimeMicros();\n     }"
      }
    ]
  },
  {
    "sha": "133499ead7e6c5cc7daa0ed7a4697c3560de5c77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzM0OTllYWQ3ZTZjNWNjN2RhYTBlZDdhNDY5N2MzNTYwZGU1Yzc3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-13T15:02:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-14T19:12:53Z"
      },
      "message": "Move entries from write to read cache on flush\n\nThere's a large chance that entries will be accessed again after\nbeing written.",
      "tree": {
        "sha": "b5437327b23885c9a4f4c250c6e15a218637b607",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5437327b23885c9a4f4c250c6e15a218637b607"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/133499ead7e6c5cc7daa0ed7a4697c3560de5c77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133499ead7e6c5cc7daa0ed7a4697c3560de5c77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/133499ead7e6c5cc7daa0ed7a4697c3560de5c77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133499ead7e6c5cc7daa0ed7a4697c3560de5c77/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bb0fb2cfde1fe2ecb413126bc9d745dcb6d79af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bb0fb2cfde1fe2ecb413126bc9d745dcb6d79af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bb0fb2cfde1fe2ecb413126bc9d745dcb6d79af"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "421420426957ac9a28d5c2c3f1a7e27c7fc565d8",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/133499ead7e6c5cc7daa0ed7a4697c3560de5c77/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/133499ead7e6c5cc7daa0ed7a4697c3560de5c77/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=133499ead7e6c5cc7daa0ed7a4697c3560de5c77",
        "patch": "@@ -203,7 +203,19 @@ bool CCoinsViewCache::Flush(unsigned int flags) {\n         fOk = base->BatchWrite(cacheWrite, hashBlock);\n         // Flush write cache only if batch write succeeded, but always flush read cache\n         if (fOk)\n-            cacheWrite.clear();\n+        {\n+            // Move entries from write cache to read cache\n+            // Possible optimization is to not do this if we're flushing the\n+            // READ cache as well, but this functionality is not used at the moment\n+            // so we don't optimize for it.\n+            for (CCoinsMap::iterator it = cacheWrite.begin(); it != cacheWrite.end(); )\n+            {\n+                CCoinsMap::iterator itOld = it++;\n+                std::pair<CCoinsMap::iterator,bool> itr = cacheRead.insert(std::make_pair(itOld->first, CCoins()));\n+                itr.first->second.swap(itOld->second);\n+                cacheWrite.erase(itOld);\n+            }\n+        }\n     }\n     if (flags & READ)\n     {"
      }
    ]
  },
  {
    "sha": "71f14baff198750077d1d38869ce768a26d276ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWYxNGJhZmYxOTg3NTAwNzdkMWQzODg2OWNlNzY4YTI2ZDI3NmFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-13T15:20:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-14T19:13:02Z"
      },
      "message": "Cache negative hits",
      "tree": {
        "sha": "a08ff5150994bfc697b1085075f58af96508c803",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a08ff5150994bfc697b1085075f58af96508c803"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71f14baff198750077d1d38869ce768a26d276ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71f14baff198750077d1d38869ce768a26d276ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71f14baff198750077d1d38869ce768a26d276ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71f14baff198750077d1d38869ce768a26d276ab/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "133499ead7e6c5cc7daa0ed7a4697c3560de5c77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133499ead7e6c5cc7daa0ed7a4697c3560de5c77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/133499ead7e6c5cc7daa0ed7a4697c3560de5c77"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "71f44a4f69585fff22c728b2306ba5fa66fa5785",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71f14baff198750077d1d38869ce768a26d276ab/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71f14baff198750077d1d38869ce768a26d276ab/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=71f14baff198750077d1d38869ce768a26d276ab",
        "patch": "@@ -89,6 +89,12 @@ const CCoins *CCoinsViewCache::FetchCoins(const uint256 &txid) {\n     it = cacheRead.find(txid);\n     if (it != cacheRead.end())\n     {\n+        if(it->second.vout.empty()) // Match negative\n+        {\n+            stats.negative_hits++;\n+            return 0;\n+        }\n+\n         stats.positive_hits++;\n         return &it->second;\n     }\n@@ -98,6 +104,7 @@ const CCoins *CCoinsViewCache::FetchCoins(const uint256 &txid) {\n     if (!base->GetCoins(txid, tmp))\n     {\n         stats.negative_misses++;\n+        cacheRead.insert(it, std::make_pair(txid, CCoins())); // Store negative match\n         return 0;\n     }\n     stats.positive_misses++;\n@@ -135,6 +142,7 @@ CCoins &CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n     CCoinsMap::iterator itr = cacheRead.find(txid);\n     if (itr != cacheRead.end())\n     {\n+        assert(!itr->second.vout.empty()); // No negative hits allowed here\n         stats.positive_hits++;\n         itw = cacheWrite.insert(itw, std::make_pair(txid, CCoins()));\n         itw->second.swap(itr->second);"
      }
    ]
  },
  {
    "sha": "5469a9f27cab46dce466294e17e4121a1d2bc5e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDY5YTlmMjdjYWI0NmRjZTQ2NjI5NGUxN2U0MTIxYTFkMmJjNWU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-13T07:20:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-14T19:16:32Z"
      },
      "message": "Change the read cache to a MRU cache",
      "tree": {
        "sha": "e1542ed76fb0caeb35fa4592a9b6e650fd7aaff7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1542ed76fb0caeb35fa4592a9b6e650fd7aaff7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5469a9f27cab46dce466294e17e4121a1d2bc5e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5469a9f27cab46dce466294e17e4121a1d2bc5e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5469a9f27cab46dce466294e17e4121a1d2bc5e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5469a9f27cab46dce466294e17e4121a1d2bc5e8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71f14baff198750077d1d38869ce768a26d276ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71f14baff198750077d1d38869ce768a26d276ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71f14baff198750077d1d38869ce768a26d276ab"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 61,
      "deletions": 20
    },
    "files": [
      {
        "sha": "61c0aa4e3ea8fabd8de3c0748e5ce55e6672292d",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 17,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5469a9f27cab46dce466294e17e4121a1d2bc5e8/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5469a9f27cab46dce466294e17e4121a1d2bc5e8/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=5469a9f27cab46dce466294e17e4121a1d2bc5e8",
        "patch": "@@ -76,39 +76,45 @@ CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hashBlock(0) { }\n \n const CCoins *CCoinsViewCache::FetchCoins(const uint256 &txid) {\n-    CCoinsMap::const_iterator it;\n     // First look up the coins in the write cache\n-    it = cacheWrite.find(txid);\n-    if (it != cacheWrite.end())\n+    CCoinsMap::const_iterator itw = cacheWrite.find(txid);\n+    if (itw != cacheWrite.end())\n     {\n         stats.positive_hits++;\n-        return &it->second;\n+        return &itw->second;\n     }\n \n     // Otherwise look up the coins in the read cache\n-    it = cacheRead.find(txid);\n-    if (it != cacheRead.end())\n+    CCoinsBimap::left_iterator itr = cacheRead.left.find(txid);\n+    if (itr != cacheRead.left.end())\n     {\n-        if(it->second.vout.empty()) // Match negative\n+        // Update the MRU view\n+        cacheRead.right.relocate(\n+            cacheRead.right.end(),\n+            cacheRead.project_right(itr)\n+        );\n+\n+        if(itr->second.vout.empty()) // Match negative\n         {\n             stats.negative_hits++;\n             return 0;\n         }\n \n         stats.positive_hits++;\n-        return &it->second;\n+        return &itr->second;\n     }\n \n-    // If everything missed, fall back to base\n+    // If everything missed, fall back to base, and insert the result of our query\n+    // into the read cache.\n     CCoins tmp;\n     if (!base->GetCoins(txid, tmp))\n     {\n         stats.negative_misses++;\n-        cacheRead.insert(it, std::make_pair(txid, CCoins())); // Store negative match\n+        cacheRead.left.insert(itr, std::make_pair(txid, CCoins())); // Store negative match\n         return 0;\n     }\n     stats.positive_misses++;\n-    CCoinsMap::iterator itnew = cacheRead.insert(it, std::make_pair(txid, CCoins()));\n+    CCoinsBimap::left_iterator itnew = cacheRead.left.insert(itr, std::make_pair(txid, CCoins()));\n     tmp.swap(itnew->second);\n     return &itnew->second;\n }\n@@ -139,14 +145,14 @@ CCoins &CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n \n     // If in the read cache, swap the entry to the write cache,\n     // evict it from the read cache\n-    CCoinsMap::iterator itr = cacheRead.find(txid);\n-    if (itr != cacheRead.end())\n+    CCoinsBimap::left_iterator itr = cacheRead.left.find(txid);\n+    if (itr != cacheRead.left.end())\n     {\n         assert(!itr->second.vout.empty()); // No negative hits allowed here\n         stats.positive_hits++;\n         itw = cacheWrite.insert(itw, std::make_pair(txid, CCoins()));\n         itw->second.swap(itr->second);\n-        cacheRead.erase(itr);\n+        cacheRead.left.erase(itr);\n         return itw->second;\n     }\n \n@@ -165,7 +171,7 @@ CCoins &CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n bool CCoinsViewCache::SetCoins(const uint256 &txid, const CCoins &coins) {\n     // Evict from read cache (if present there), then write to write cache\n     // (overwriting anything already there)\n-    cacheRead.erase(txid);\n+    cacheRead.left.erase(txid);\n     cacheWrite[txid] = coins;\n     return true;\n }\n@@ -194,7 +200,7 @@ bool CCoinsViewCache::BatchWrite(const CCoinsMap &mapCoins, const uint256 &hashB\n     LogPrint(\"coinscache\", \"%p: BatchWrite before %i in read cache, %i in write cache\\n\", this, cacheRead.size(), cacheWrite.size());\n     for (CCoinsMap::const_iterator it = mapCoins.begin(); it != mapCoins.end(); it++)\n     {\n-        cacheRead.erase(it->first);\n+        cacheRead.left.erase(it->first);\n         cacheWrite[it->first] = it->second;\n     }\n     hashBlock = hashBlockIn;\n@@ -219,7 +225,7 @@ bool CCoinsViewCache::Flush(unsigned int flags) {\n             for (CCoinsMap::iterator it = cacheWrite.begin(); it != cacheWrite.end(); )\n             {\n                 CCoinsMap::iterator itOld = it++;\n-                std::pair<CCoinsMap::iterator,bool> itr = cacheRead.insert(std::make_pair(itOld->first, CCoins()));\n+                std::pair<CCoinsBimap::left_iterator,bool> itr = cacheRead.left.insert(std::make_pair(itOld->first, CCoins()));\n                 itr.first->second.swap(itOld->second);\n                 cacheWrite.erase(itOld);\n             }\n@@ -297,3 +303,20 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight)\n     }\n     return tx.ComputePriority(dResult);\n }\n+\n+void CCoinsViewCache::Cleanup(size_t max_entries)\n+{\n+    size_t cache_size = GetCacheSize();\n+    if (cache_size <= max_entries)\n+        return;\n+    size_t excess = cache_size - max_entries;\n+    LogPrint(\"coinscache\", \"%p: Cleanup before %i in read cache, %i in write cache, removing %i excess records\\n\", this, cacheRead.size(), cacheWrite.size(), excess);\n+    CCoinsBimap::right_iterator it = cacheRead.right.begin();\n+    while (excess > 0 && it != cacheRead.right.end())\n+    {\n+        CCoinsBimap::right_iterator itOld = it++;\n+        cacheRead.right.erase(itOld);\n+        excess--;\n+    }\n+    LogPrint(\"coinscache\", \"%p: Cleanup after %i in read cache, %i in write cache\\n\", this, cacheRead.size(), cacheWrite.size());\n+}"
      },
      {
        "sha": "56307fd6a8a7d0d3bf1d6c3df2df53c903e69bb0",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 21,
        "deletions": 3,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5469a9f27cab46dce466294e17e4121a1d2bc5e8/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5469a9f27cab46dce466294e17e4121a1d2bc5e8/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=5469a9f27cab46dce466294e17e4121a1d2bc5e8",
        "patch": "@@ -15,6 +15,10 @@\n #include <boost/foreach.hpp>\n #include <boost/unordered_map.hpp>\n \n+#include <boost/bimap.hpp>\n+#include <boost/bimap/list_of.hpp>\n+#include <boost/bimap/unordered_set_of.hpp>\n+\n /** pruned version of CTransaction: only retains metadata and unspent transaction outputs\n  *\n  * Serialized format:\n@@ -257,6 +261,11 @@ class CCoinsKeyHasher\n \n typedef boost::unordered_map<uint256, CCoins, CCoinsKeyHasher> CCoinsMap;\n \n+typedef boost::bimaps::bimap<\n+    boost::bimaps::unordered_set_of<uint256, CCoinsKeyHasher>,\n+    boost::bimaps::list_of<CCoins>\n+    > CCoinsBimap;\n+\n struct CCoinsStats\n {\n     int nHeight;\n@@ -338,7 +347,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     uint256 hashBlock;\n     CCoinsCacheStats stats;\n     // Invariant: an entry should be in either the read cache or the write cache, or neither\n-    CCoinsMap cacheRead;\n+    CCoinsBimap cacheRead;\n     CCoinsMap cacheWrite;\n \n public:\n@@ -364,10 +373,19 @@ class CCoinsViewCache : public CCoinsViewBacked\n     CCoins &ModifyCoins(const uint256 &txid);\n     const CCoins &GetCoins(const uint256 &txid);\n \n-    // Push the modifications applied to this cache to its base.\n-    // Failure to call this method before destruction will cause the changes to be forgotten.\n+    // Flush the cache. Depending on the provided flags it does either or both\n+    // - Flush the write cache: Push the modifications applied to this cache to its base.\n+    // - Flush the read cache: Remove all entries in one go.\n+    // @note Failure to call this method before destruction will cause the changes to be forgotten.\n+    // @note Call this only when no references to CCoins are held.\n     bool Flush(unsigned int flags = READ_AND_WRITE);\n \n+    // Partial flush of the cache. Removes Least Recently Used records from the\n+    // read cache as long as the total size of the cache exceeds the provided\n+    // maximum size. This does not touch the write cache.\n+    // @note Call this only when no references to CCoins are held.\n+    void Cleanup(size_t max_entries);\n+\n     // Calculate the size of the cache (in number of transactions)\n     unsigned int GetCacheSize(unsigned int flags = READ_AND_WRITE);\n "
      }
    ]
  },
  {
    "sha": "1648f256f7104e7164f8aa81ae81b82bc68918e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjQ4ZjI1NmY3MTA0ZTcxNjRmOGFhODFhZTgxYjgyYmM2ODkxOGUz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-13T07:20:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-14T19:16:34Z"
      },
      "message": "Update VerifyDB and WriteChainState to make use of LRU cleanup",
      "tree": {
        "sha": "6c600becaa1824874fa4b1f4882c5badabbb6a3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c600becaa1824874fa4b1f4882c5badabbb6a3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1648f256f7104e7164f8aa81ae81b82bc68918e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1648f256f7104e7164f8aa81ae81b82bc68918e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1648f256f7104e7164f8aa81ae81b82bc68918e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1648f256f7104e7164f8aa81ae81b82bc68918e3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5469a9f27cab46dce466294e17e4121a1d2bc5e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5469a9f27cab46dce466294e17e4121a1d2bc5e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5469a9f27cab46dce466294e17e4121a1d2bc5e8"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 19,
      "deletions": 8
    },
    "files": [
      {
        "sha": "fbfcc96aaac5c62a6c9485955281bd7c97d252bf",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 8,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1648f256f7104e7164f8aa81ae81b82bc68918e3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1648f256f7104e7164f8aa81ae81b82bc68918e3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1648f256f7104e7164f8aa81ae81b82bc68918e3",
        "patch": "@@ -1866,13 +1866,12 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n // Update the on-disk chain state.\n bool static WriteChainState(CValidationState &state) {\n     static int64_t nLastWrite = 0;\n-    unsigned int flush_flags = 0;\n-    if (pcoinsTip->GetCacheSize() > nCoinCacheSize)\n-        flush_flags |= CCoinsViewCache::READ_AND_WRITE;\n-    if (!IsInitialBlockDownload() && GetTimeMicros() > nLastWrite + CHAINSTATE_WRITE_PERIOD*1000000)\n-        flush_flags |= CCoinsViewCache::WRITE;\n-\n-    if (flush_flags) {\n+    // If the write cache becomes larger than half the total allowed cache\n+    // size, or the last write is longer ago than a specified time (and not in\n+    // initial block download), it's time for a flush to disk\n+    if (pcoinsTip->GetCacheSize(CCoinsViewCache::WRITE) > nCoinCacheSize/2 ||\n+        (!IsInitialBlockDownload() && GetTimeMicros() > nLastWrite + CHAINSTATE_WRITE_PERIOD*1000000LL))\n+    {\n         // Typical CCoins structures on disk are around 100 bytes in size.\n         // Pushing a new one to the database can cause it to be written\n         // twice (once in the log, and once in the tables). This is already\n@@ -1882,10 +1881,12 @@ bool static WriteChainState(CValidationState &state) {\n             return state.Error(\"out of disk space\");\n         FlushBlockFile();\n         pblocktree->Sync();\n-        if (!pcoinsTip->Flush(flush_flags))\n+        if (!pcoinsTip->Flush(CCoinsViewCache::WRITE))\n             return state.Abort(_(\"Failed to write to coin database\"));\n         nLastWrite = GetTimeMicros();\n     }\n+    // Remove excess items from read cache\n+    pcoinsTip->Cleanup(nCoinCacheSize);\n     return true;\n }\n \n@@ -3069,6 +3070,16 @@ bool CVerifyDB::VerifyDB(int nCheckLevel, int nCheckDepth)\n             } else\n                 nGoodTransactions += block.vtx.size();\n         }\n+        // Allow pcoinsTip to retain some entries, as they may come in useful\n+        // during synchronization when the node is running, but don't use so\n+        // much memory that the checking process terminates too soon because\n+        // the total maximum cache size is exceeded.\n+        // Flushing pcoinsTip entirely would have no effect on the verification\n+        // itself as all coins that are accessed by DisconnectBlock are updated\n+        // so also in coins' write cache.\n+        // There is no use in calling coins->Cleanup() -- it will only have\n+        // write cache entries\n+        pcoinsTip->Cleanup(nCoinCacheSize/2);\n     }\n     if (pindexFailure)\n         return error(\"VerifyDB() : *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\\n\", chainActive.Height() - pindexFailure->nHeight + 1, nGoodTransactions);"
      }
    ]
  }
]