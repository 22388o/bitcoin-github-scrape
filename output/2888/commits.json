[
  {
    "sha": "d64eef48a45d1bbbbab5adf39d6ba1fe4537cea1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjRlZWY0OGE0NWQxYmJiYmFiNWFkZjM5ZDZiYTFmZTQ1MzdjZWEx",
    "commit": {
      "author": {
        "name": "coblee",
        "email": "chocobo@alum.mit.edu",
        "date": "2013-05-17T10:57:05Z"
      },
      "committer": {
        "name": "Charlie Lee",
        "email": "coblee@litecoin.org",
        "date": "2013-09-17T03:15:02Z"
      },
      "message": "Add getnetworkhashps to get the calculated network hashrate",
      "tree": {
        "sha": "5cd08161a77f432ccee1ae7cb05d3a4e8d6023d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cd08161a77f432ccee1ae7cb05d3a4e8d6023d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d64eef48a45d1bbbbab5adf39d6ba1fe4537cea1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d64eef48a45d1bbbbab5adf39d6ba1fe4537cea1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d64eef48a45d1bbbbab5adf39d6ba1fe4537cea1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d64eef48a45d1bbbbab5adf39d6ba1fe4537cea1/comments",
    "author": {
      "login": "coblee",
      "id": 999927,
      "node_id": "MDQ6VXNlcjk5OTkyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/999927?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/coblee",
      "html_url": "https://github.com/coblee",
      "followers_url": "https://api.github.com/users/coblee/followers",
      "following_url": "https://api.github.com/users/coblee/following{/other_user}",
      "gists_url": "https://api.github.com/users/coblee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/coblee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/coblee/subscriptions",
      "organizations_url": "https://api.github.com/users/coblee/orgs",
      "repos_url": "https://api.github.com/users/coblee/repos",
      "events_url": "https://api.github.com/users/coblee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/coblee/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "coblee",
      "id": 999927,
      "node_id": "MDQ6VXNlcjk5OTkyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/999927?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/coblee",
      "html_url": "https://github.com/coblee",
      "followers_url": "https://api.github.com/users/coblee/followers",
      "following_url": "https://api.github.com/users/coblee/following{/other_user}",
      "gists_url": "https://api.github.com/users/coblee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/coblee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/coblee/subscriptions",
      "organizations_url": "https://api.github.com/users/coblee/orgs",
      "repos_url": "https://api.github.com/users/coblee/repos",
      "events_url": "https://api.github.com/users/coblee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/coblee/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cc766fa55c0d74916d615c69689e9e798bf0aba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cc766fa55c0d74916d615c69689e9e798bf0aba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cc766fa55c0d74916d615c69689e9e798bf0aba"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 58,
      "deletions": 0
    },
    "files": [
      {
        "sha": "22442b65231751ab9289b83deecdff33a406ef7a",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d64eef48a45d1bbbbab5adf39d6ba1fe4537cea1/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d64eef48a45d1bbbbab5adf39d6ba1fe4537cea1/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=d64eef48a45d1bbbbab5adf39d6ba1fe4537cea1",
        "patch": "@@ -201,6 +201,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"addnode\",                &addnode,                true,      true },\n     { \"getaddednodeinfo\",       &getaddednodeinfo,       true,      true },\n     { \"getdifficulty\",          &getdifficulty,          true,      false },\n+    { \"getnetworkhashps\",       &getnetworkhashps,       true,      false },\n     { \"getgenerate\",            &getgenerate,            true,      false },\n     { \"setgenerate\",            &setgenerate,            true,      false },\n     { \"gethashespersec\",        &gethashespersec,        true,      false },\n@@ -1158,6 +1159,8 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"getaddednodeinfo\"       && n > 0) ConvertTo<bool>(params[0]);\n     if (strMethod == \"setgenerate\"            && n > 0) ConvertTo<bool>(params[0]);\n     if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"getnetworkhashps\"       && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"getnetworkhashps\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n     if (strMethod == \"settxfee\"               && n > 0) ConvertTo<double>(params[0]);\n     if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);"
      },
      {
        "sha": "55365828967cf9eb059165d9aba3a75e6530a56e",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d64eef48a45d1bbbbab5adf39d6ba1fe4537cea1/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d64eef48a45d1bbbbab5adf39d6ba1fe4537cea1/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=d64eef48a45d1bbbbab5adf39d6ba1fe4537cea1",
        "patch": "@@ -153,6 +153,7 @@ extern json_spirit::Value importwallet(const json_spirit::Array& params, bool fH\n \n extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getnetworkhashps(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value gethashespersec(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getmininginfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getwork(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "ca768ad71f835978ec2ab42653ecbbd9ec804c20",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d64eef48a45d1bbbbab5adf39d6ba1fe4537cea1/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d64eef48a45d1bbbbab5adf39d6ba1fe4537cea1/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=d64eef48a45d1bbbbab5adf39d6ba1fe4537cea1",
        "patch": "@@ -27,6 +27,59 @@ void ShutdownRPCMining()\n     delete pMiningKey; pMiningKey = NULL;\n }\n \n+// Return average network hashes per second based on the last 'lookup' blocks,\n+// or from the last difficulty change if 'lookup' is nonpositive.\n+// If 'height' is nonnegative, compute the estimate at the time when a given block was found.\n+Value GetNetworkHashPS(int lookup, int height) {\n+    CBlockIndex *pb = pindexBest;\n+\n+    if (height >= 0 && height < nBestHeight)\n+        pb = FindBlockByHeight(height);\n+\n+    if (pb == NULL || !pb->nHeight)\n+        return 0;\n+\n+    // If lookup is -1, then use blocks since last difficulty change.\n+    if (lookup <= 0)\n+        lookup = pb->nHeight % 2016 + 1;\n+\n+    // If lookup is larger than chain, then set it to chain length.\n+    if (lookup > pb->nHeight)\n+        lookup = pb->nHeight;\n+\n+    CBlockIndex *pb0 = pb;\n+    int64 minTime = pb0->GetBlockTime();\n+    int64 maxTime = minTime;\n+    for (int i = 0; i < lookup; i++) {\n+        pb0 = pb0->pprev;\n+        int64 time = pb0->GetBlockTime();\n+        minTime = std::min(time, minTime);\n+        maxTime = std::max(time, maxTime);\n+    }\n+\n+    // In case there's a situation where minTime == maxTime, we don't want a divide by zero exception.\n+    if (minTime == maxTime)\n+        return 0;\n+\n+    uint256 workDiff = pb->nChainWork - pb0->nChainWork;\n+    int64 timeDiff = maxTime - minTime;\n+\n+    return (boost::int64_t)(workDiff.getdouble() / timeDiff);\n+}\n+\n+Value getnetworkhashps(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() > 2)\n+        throw runtime_error(\n+            \"getnetworkhashps [blocks] [height]\\n\"\n+            \"Returns the estimated network hashes per second based on the last 120 blocks.\\n\"\n+            \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n+            \"Pass in [height] to estimate the network speed at the time when a certain block was found.\");\n+\n+    return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n+}\n+\n+\n Value getgenerate(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -93,6 +146,7 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"generate\",         GetBoolArg(\"-gen\", false)));\n     obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", -1)));\n     obj.push_back(Pair(\"hashespersec\",     gethashespersec(params, false)));\n+    obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"testnet\",          TestNet()));\n     return obj;"
      }
    ]
  }
]