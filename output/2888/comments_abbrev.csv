sipa,2013-08-09T08:35:31Z,This can be implemented much more accurately by computing the nChainWork difference divided by time difference.\n,https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-22382150,22382150,
wtogami,2013-08-09T09:54:49Z,Should this also be squashed into a single commit for Bitcoin?\n,https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-22385340,22385340,
luke-jr,2013-08-20T12:37:11Z,I think the commits here look logical (and don't need to be squished)\n,https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-22941689,22941689,
wtogami,2013-08-20T20:57:58Z,Does @sipa insist on the rewrite to use nChainWork difference?\n,https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-22977265,22977265,
sipa,2013-08-23T22:21:27Z,"@wtogami Yes, I think it's trivial to do right.\n",https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-23194907,23194907,
gmaxwell,2013-08-23T22:41:43Z,Beyond also sharing pieter's concerns wrt doing the calculation with pow() instead of directly. I think the default (no parameter) call having a variable integration window is weird. This means if you call it right after a difficulty change you'll get some insane random number. Had I implemented this I likely would have just had a default of 2016 blocks and no options.\n,https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-23195736,23195736,
jgarzik,2013-08-25T02:41:17Z,"Agree w/ feedback.  Would like to see this merged, after revision.\n",https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-23220758,23220758,
Diapolo,2013-08-29T13:47:51Z,@coblee Any progress on this? Seems to be a nice feature.\n,https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-23490300,23490300,
coblee,2013-08-29T15:43:28Z,I will get to it in a few days. Thanks for all the feedback.\n,https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-23499458,23499458,
wtogami,2013-08-29T22:20:29Z,"https://github.com/litecoin-project/litecoin/pull/69\n@pooler has implemented sipa's requested change.  coblee wants to write tests before submitting this to Bitcoin.  I suggest squashing it a bit to have fewer, cleaner commits for Bitcoin.\n",https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-23528039,23528039,
coblee,2013-09-13T10:07:45Z,"Sorry for the delay, the change is tested and pushed. Please take another look.\n\n@sipa, thanks for the suggestion.\n\n@gmaxwell, the default behavior is to use the previous 120 blocks.\n\nThanks @pooler for the fix.\n",https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-24384876,24384876,
sipa,2013-09-13T10:45:17Z,"Code change looks good.\n\nOne idea (to be discussed, perhaps): shouldn't be use max(block.time for block in blocks) - min(block.time for block in blocks), to avoid weird edge cases with small numbers of blocks and non-causal timestamps?\n",https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-24386588,24386588,
coblee,2013-09-13T12:11:30Z,That's a fair point. I will make that fix. Will also need to handle a divide by zero edge case\n,https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-24390220,24390220,
coblee,2013-09-13T18:16:33Z,"Hmm, I made the change, but looking at it now, I'm not sure it's a good change. Making sure we get correct results for weird edge cases is probably not worth the extra cost in keeping tracking of a min/max over all the blocks, since people won't be calling this method with a small number of blocks. @sipa, what do you think? We can always just do a sanity check to make sure min < max.\n",https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-24413957,24413957,
sipa,2013-09-15T16:04:51Z,"Another idea (just up for discussion, don't rush implementing this): use the median-of-11 as timestamp for the begin and end block, which guarantees monotonicity (by network rule) and is likely a better estimator for actual time as well. The question is of course which window-of-11 to use; if you use 5-before-until-5-after, it's not usable for the last 5 blocks, but likely unbiased. If you use 10-",https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-24474173,24474173,
gmaxwell,2013-09-16T03:05:00Z,@sipa  How does the estimator you use on sipa.be work?\n,https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-24486943,24486943,
coblee,2013-09-17T03:10:54Z,"I still think there's no need to be so precise with getting the time right since this is just an estimate. With a large enough block count, the difference between each of these solutions (just GetBlockTime, min/max, median-of-11) will be minimal. So not worth the extra cpu cycle to get it ""right"".\n",https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-24561302,24561302,
BitcoinPullTester,2013-09-17T04:08:14Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/d64eef48a45d1bbbbab5adf39d6ba1fe4537cea1 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-24562854,24562854,
sipa,2013-09-29T14:34:18Z,"@gmaxwell Exponential window that measures rate and average timestamp of past blocks (which seems to be what you need for a most likelyhood estimator for an poisson process whose rate is an exponential function; I'm certainly not able to do the math for that again, but the resulting formula's became ridiculously simple), which is used to guess the parameters of the hashrate growth curve in every p",https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-25321329,25321329,
sipa,2013-10-01T09:23:50Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/2888#issuecomment-25435765,25435765,
