[
  {
    "sha": "f5fab84aba0a2d3783b404f5de87a5e389678e4a",
    "node_id": "C_kwDOABII59oAKGY1ZmFiODRhYmEwYTJkMzc4M2I0MDRmNWRlODdhNWUzODk2NzhlNGE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-27T18:05:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:15Z"
      },
      "message": "moveonly: move WalletStorage to separate file",
      "tree": {
        "sha": "bf774dc60ea8a44320d45a28898ac8612d6482eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf774dc60ea8a44320d45a28898ac8612d6482eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5fab84aba0a2d3783b404f5de87a5e389678e4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5fab84aba0a2d3783b404f5de87a5e389678e4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5fab84aba0a2d3783b404f5de87a5e389678e4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5fab84aba0a2d3783b404f5de87a5e389678e4a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95d19f8c1a40a7531d2bb00febd245d127293a64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95d19f8c1a40a7531d2bb00febd245d127293a64",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95d19f8c1a40a7531d2bb00febd245d127293a64"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 38,
      "deletions": 20
    },
    "files": [
      {
        "sha": "aba455d03688e96136b3c7b1b65d62964ed98750",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5fab84aba0a2d3783b404f5de87a5e389678e4a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5fab84aba0a2d3783b404f5de87a5e389678e4a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f5fab84aba0a2d3783b404f5de87a5e389678e4a",
        "patch": "@@ -285,6 +285,7 @@ BITCOIN_CORE_H = \\\n   wallet/salvage.h \\\n   wallet/scriptpubkeyman.h \\\n   wallet/spend.h \\\n+  wallet/storage.h \\\n   wallet/sqlite.h \\\n   wallet/transaction.h \\\n   wallet/wallet.h \\"
      },
      {
        "sha": "10a3db44b96d66aa87fe9880306c4e2b2707320c",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 20,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5fab84aba0a2d3783b404f5de87a5e389678e4a/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5fab84aba0a2d3783b404f5de87a5e389678e4a/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=f5fab84aba0a2d3783b404f5de87a5e389678e4a",
        "patch": "@@ -14,6 +14,7 @@\n #include <util/time.h>\n #include <wallet/crypter.h>\n #include <wallet/ismine.h>\n+#include <wallet/storage.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n \n@@ -25,26 +26,6 @@\n enum class OutputType;\n struct bilingual_str;\n \n-// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database.\n-// It provides access to things that are part of the entire wallet and not specific to a ScriptPubKeyMan such as\n-// wallet flags, wallet version, encryption keys, encryption status, and the database itself. This allows a\n-// ScriptPubKeyMan to have callbacks into CWallet without causing a circular dependency.\n-// WalletStorage should be the same for all ScriptPubKeyMans of a wallet.\n-class WalletStorage\n-{\n-public:\n-    virtual ~WalletStorage() = default;\n-    virtual const std::string GetDisplayName() const = 0;\n-    virtual WalletDatabase& GetDatabase() const = 0;\n-    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n-    virtual void UnsetBlankWalletFlag(WalletBatch&) = 0;\n-    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n-    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr) = 0;\n-    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n-    virtual bool HasEncryptionKeys() const = 0;\n-    virtual bool IsLocked() const = 0;\n-};\n-\n //! Default for -keypool\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n "
      },
      {
        "sha": "f32b5c659280b7962d0cce1dd3485b45bea9e1be",
        "filename": "src/wallet/storage.h",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5fab84aba0a2d3783b404f5de87a5e389678e4a/src/wallet/storage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5fab84aba0a2d3783b404f5de87a5e389678e4a/src/wallet/storage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/storage.h?ref=f5fab84aba0a2d3783b404f5de87a5e389678e4a",
        "patch": "@@ -0,0 +1,35 @@\n+// Copyright (c) 2019-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_STORAGE_H\n+#define BITCOIN_WALLET_STORAGE_H\n+\n+#include <wallet/crypter.h>\n+#include <wallet/db.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <string>\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database.\n+// It provides access to things that are part of the entire wallet and not specific to a ScriptPubKeyMan such as\n+// wallet flags, wallet version, encryption keys, encryption status, and the database itself. This allows a\n+// ScriptPubKeyMan to have callbacks into CWallet without causing a circular dependency.\n+// WalletStorage should be the same for all ScriptPubKeyMans of a wallet.\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual WalletDatabase& GetDatabase() const = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void UnsetBlankWalletFlag(WalletBatch&) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+#endif // BITCOIN_WALLET_STORAGE_H"
      },
      {
        "sha": "145a57d95a8c797a1f295db8e5e337813643ab9a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5fab84aba0a2d3783b404f5de87a5e389678e4a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5fab84aba0a2d3783b404f5de87a5e389678e4a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f5fab84aba0a2d3783b404f5de87a5e389678e4a",
        "patch": "@@ -22,6 +22,7 @@\n #include <wallet/coinselection.h>\n #include <wallet/crypter.h>\n #include <wallet/scriptpubkeyman.h>\n+#include <wallet/storage.h>\n #include <wallet/transaction.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>"
      }
    ]
  },
  {
    "sha": "8c1330f2174e505b8d4269d2acda1a2bddbb56f5",
    "node_id": "C_kwDOABII59oAKDhjMTMzMGYyMTc0ZTUwNWI4ZDQyNjlkMmFjZGExYTJiZGRiYjU2ZjU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-26T19:15:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:15Z"
      },
      "message": "Add operator< to CExtPubKey\n\nNeeded to use it in a set",
      "tree": {
        "sha": "35431a40c975af1301670c0c3db21bcac323dc02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35431a40c975af1301670c0c3db21bcac323dc02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c1330f2174e505b8d4269d2acda1a2bddbb56f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c1330f2174e505b8d4269d2acda1a2bddbb56f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c1330f2174e505b8d4269d2acda1a2bddbb56f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c1330f2174e505b8d4269d2acda1a2bddbb56f5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5fab84aba0a2d3783b404f5de87a5e389678e4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5fab84aba0a2d3783b404f5de87a5e389678e4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5fab84aba0a2d3783b404f5de87a5e389678e4a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "049d4f87ced6e4a0e9bd2f608155e94bdf2a40fe",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c1330f2174e505b8d4269d2acda1a2bddbb56f5/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c1330f2174e505b8d4269d2acda1a2bddbb56f5/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=8c1330f2174e505b8d4269d2acda1a2bddbb56f5",
        "patch": "@@ -304,6 +304,7 @@ struct CExtPubKey {\n     {\n         return !(a == b);\n     }\n+    bool operator<(const CExtPubKey& other) const { return memcmp(vchFingerprint, other.vchFingerprint, sizeof(vchFingerprint)) < 0 || pubkey < other.pubkey; }\n \n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;\n     void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);"
      }
    ]
  },
  {
    "sha": "8452f0ebbfe21e9f91bc19050e452f7b0b65a082",
    "node_id": "C_kwDOABII59oAKDg0NTJmMGViYmZlMjFlOWY5MWJjMTkwNTBlNDUyZjdiMGI2NWEwODI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-01T20:08:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:15Z"
      },
      "message": "walletdb: Add HDKey records",
      "tree": {
        "sha": "f4cd1b3e3a1923c1229797b40738af55583f8211",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4cd1b3e3a1923c1229797b40738af55583f8211"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8452f0ebbfe21e9f91bc19050e452f7b0b65a082",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8452f0ebbfe21e9f91bc19050e452f7b0b65a082",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8452f0ebbfe21e9f91bc19050e452f7b0b65a082",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8452f0ebbfe21e9f91bc19050e452f7b0b65a082/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c1330f2174e505b8d4269d2acda1a2bddbb56f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c1330f2174e505b8d4269d2acda1a2bddbb56f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c1330f2174e505b8d4269d2acda1a2bddbb56f5"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 30,
      "deletions": 0
    },
    "files": [
      {
        "sha": "48425faa050025ccecef8a1859bef1cffcf02860",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8452f0ebbfe21e9f91bc19050e452f7b0b65a082/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8452f0ebbfe21e9f91bc19050e452f7b0b65a082/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=8452f0ebbfe21e9f91bc19050e452f7b0b65a082",
        "patch": "@@ -30,6 +30,7 @@ namespace DBKeys {\n const std::string ACENTRY{\"acentry\"};\n const std::string ACTIVEEXTERNALSPK{\"activeexternalspk\"};\n const std::string ACTIVEINTERNALSPK{\"activeinternalspk\"};\n+const std::string ACTIVEHDKEY{\"activehdkey\"};\n const std::string BESTBLOCK_NOMERKLE{\"bestblock_nomerkle\"};\n const std::string BESTBLOCK{\"bestblock\"};\n const std::string CRYPTED_KEY{\"ckey\"};\n@@ -38,6 +39,7 @@ const std::string DEFAULTKEY{\"defaultkey\"};\n const std::string DESTDATA{\"destdata\"};\n const std::string FLAGS{\"flags\"};\n const std::string HDCHAIN{\"hdchain\"};\n+const std::string HDPUBKEY{\"hdxpubkey\"};\n const std::string KEYMETA{\"keymeta\"};\n const std::string KEY{\"key\"};\n const std::string LOCKED_UTXO{\"lockedutxo\"};\n@@ -295,6 +297,29 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n+bool WalletBatch::WriteHDPubKey(const CExtPubKey& extpub)\n+{\n+    std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+    extpub.Encode(xpub.data());\n+\n+    return WriteIC(std::make_pair(DBKeys::HDPUBKEY, xpub), uint8_t(1), false);\n+}\n+\n+bool WalletBatch::WriteActiveHDKey(const CExtPubKey& extpub)\n+{\n+    std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+    extpub.Encode(xpub.data());\n+\n+    if (!WriteIC(DBKeys::ACTIVEHDKEY, xpub, false)) {\n+        std::vector<unsigned char> read_xpub(BIP32_EXTKEY_SIZE);\n+        if (!m_batch->Read(DBKeys::ACTIVEHDKEY, read_xpub)) {\n+            return false;\n+        }\n+        return xpub == read_xpub;\n+    }\n+    return true;\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};"
      },
      {
        "sha": "9dbee9b9c2ea823430b1db3ef475b77cbba1b0e1",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8452f0ebbfe21e9f91bc19050e452f7b0b65a082/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8452f0ebbfe21e9f91bc19050e452f7b0b65a082/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=8452f0ebbfe21e9f91bc19050e452f7b0b65a082",
        "patch": "@@ -55,6 +55,7 @@ namespace DBKeys {\n extern const std::string ACENTRY;\n extern const std::string ACTIVEEXTERNALSPK;\n extern const std::string ACTIVEINTERNALSPK;\n+extern const std::string ACTIVEHDKEY; // Active HD Master key, identified by extended pubkey\n extern const std::string BESTBLOCK;\n extern const std::string BESTBLOCK_NOMERKLE;\n extern const std::string CRYPTED_KEY;\n@@ -63,6 +64,7 @@ extern const std::string DEFAULTKEY;\n extern const std::string DESTDATA;\n extern const std::string FLAGS;\n extern const std::string HDCHAIN;\n+extern const std::string HDPUBKEY; // A HD key, identified by extended pubkey\n extern const std::string KEY;\n extern const std::string KEYMETA;\n extern const std::string LOCKED_UTXO;\n@@ -262,6 +264,9 @@ class WalletBatch\n     bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);\n     bool EraseActiveScriptPubKeyMan(uint8_t type, bool internal);\n \n+    bool WriteHDPubKey(const CExtPubKey& extpub);\n+    bool WriteActiveHDKey(const CExtPubKey& extpub);\n+\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);"
      }
    ]
  },
  {
    "sha": "b464f84bdefa0d9d2a96c8f9b316ea5d69e85fea",
    "node_id": "C_kwDOABII59oAKGI0NjRmODRiZGVmYTBkOWQyYTk2YzhmOWIzMTZlYTVkNjllODVmZWE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-01T20:20:30Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:16Z"
      },
      "message": "walletdb: Add WriteKeyManKey and WriteCryptedKeyManKey\n\nThese functions write new key records for keys handled by a KeyManager",
      "tree": {
        "sha": "d3ae5480966fcfc32890923fee0bdd3fb723f8f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3ae5480966fcfc32890923fee0bdd3fb723f8f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b464f84bdefa0d9d2a96c8f9b316ea5d69e85fea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b464f84bdefa0d9d2a96c8f9b316ea5d69e85fea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b464f84bdefa0d9d2a96c8f9b316ea5d69e85fea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b464f84bdefa0d9d2a96c8f9b316ea5d69e85fea/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8452f0ebbfe21e9f91bc19050e452f7b0b65a082",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8452f0ebbfe21e9f91bc19050e452f7b0b65a082",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8452f0ebbfe21e9f91bc19050e452f7b0b65a082"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 47,
      "deletions": 0
    },
    "files": [
      {
        "sha": "203572d9d383e745304154d5ece26669b6db6911",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b464f84bdefa0d9d2a96c8f9b316ea5d69e85fea/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b464f84bdefa0d9d2a96c8f9b316ea5d69e85fea/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b464f84bdefa0d9d2a96c8f9b316ea5d69e85fea",
        "patch": "@@ -42,6 +42,8 @@ const std::string HDCHAIN{\"hdchain\"};\n const std::string HDPUBKEY{\"hdxpubkey\"};\n const std::string KEYMETA{\"keymeta\"};\n const std::string KEY{\"key\"};\n+const std::string KEYMAN_KEY{\"keyman_key\"};\n+const std::string KEYMAN_CKEY{\"keyman_ckey\"};\n const std::string LOCKED_UTXO{\"lockedutxo\"};\n const std::string MASTER_KEY{\"mkey\"};\n const std::string MINVERSION{\"minversion\"};\n@@ -320,6 +322,46 @@ bool WalletBatch::WriteActiveHDKey(const CExtPubKey& extpub)\n     return true;\n }\n \n+bool WalletBatch::WriteKeyManKey(const CPubKey& pubkey, const CPrivKey& privkey)\n+{\n+    // hash pubkey/privkey to accelerate wallet load\n+    std::vector<unsigned char> key;\n+    key.reserve(pubkey.size() + pubkey.size());\n+    key.insert(key.end(), pubkey.begin(), pubkey.end());\n+    key.insert(key.end(), privkey.begin(), privkey.end());\n+\n+    const auto rec_key = std::make_pair(DBKeys::KEYMAN_KEY, pubkey);\n+    const auto rec_val = std::make_pair(privkey, Hash(key));\n+    if (!WriteIC(rec_key, rec_val, false)) {\n+        std::pair<CPrivKey, uint256> val;\n+        if (!m_batch->Read(rec_key, val)) {\n+            return false;\n+        }\n+        return rec_val == val;\n+    }\n+    return true;\n+}\n+\n+bool WalletBatch::WriteCryptedKeyManKey(const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    // Compute a checksum of the encrypted key\n+    uint256 checksum = Hash(ckey);\n+\n+    const auto key = std::make_pair(DBKeys::KEYMAN_CKEY, pubkey);\n+    if (!WriteIC(key, std::make_pair(ckey, checksum), false)) {\n+        // It may already exist, so try writing just the checksum\n+        std::vector<unsigned char> val;\n+        if (!m_batch->Read(key, val)) {\n+            return false;\n+        }\n+        if (!WriteIC(key, std::make_pair(val, checksum), true)) {\n+            return false;\n+        }\n+    }\n+    EraseIC(std::make_pair(DBKeys::KEYMAN_KEY, pubkey));\n+    return true;\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};"
      },
      {
        "sha": "b3edb566ef8314653cfb07d6424a7f32db18171f",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b464f84bdefa0d9d2a96c8f9b316ea5d69e85fea/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b464f84bdefa0d9d2a96c8f9b316ea5d69e85fea/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=b464f84bdefa0d9d2a96c8f9b316ea5d69e85fea",
        "patch": "@@ -67,6 +67,8 @@ extern const std::string HDCHAIN;\n extern const std::string HDPUBKEY; // A HD key, identified by extended pubkey\n extern const std::string KEY;\n extern const std::string KEYMETA;\n+extern const std::string KEYMAN_KEY;\n+extern const std::string KEYMAN_CKEY;\n extern const std::string LOCKED_UTXO;\n extern const std::string MASTER_KEY;\n extern const std::string MINVERSION;\n@@ -267,6 +269,9 @@ class WalletBatch\n     bool WriteHDPubKey(const CExtPubKey& extpub);\n     bool WriteActiveHDKey(const CExtPubKey& extpub);\n \n+    bool WriteKeyManKey(const CPubKey& pubkey, const CPrivKey& privkey);\n+    bool WriteCryptedKeyManKey(const CPubKey& pubkey, const std::vector<unsigned char>& ckey);\n+\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);"
      }
    ]
  },
  {
    "sha": "d16f3cad18d6e66b4e283d2c40739c08213cc4d4",
    "node_id": "C_kwDOABII59oAKGQxNmYzY2FkMThkNmU2NmI0ZTI4M2QyYzQwNzM5YzA4MjEzY2M0ZDQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-28T21:03:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:16Z"
      },
      "message": "walletdb: Allow duplicate descriptor keys\n\nIf a descriptor (crypted) key is being written and one already exists,\nmake sure that the one being written and the one already on disk\nmatch each other.",
      "tree": {
        "sha": "5b492f544c7427aebe1738da38aee173aa0c1d77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b492f544c7427aebe1738da38aee173aa0c1d77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d16f3cad18d6e66b4e283d2c40739c08213cc4d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d16f3cad18d6e66b4e283d2c40739c08213cc4d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d16f3cad18d6e66b4e283d2c40739c08213cc4d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d16f3cad18d6e66b4e283d2c40739c08213cc4d4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b464f84bdefa0d9d2a96c8f9b316ea5d69e85fea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b464f84bdefa0d9d2a96c8f9b316ea5d69e85fea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b464f84bdefa0d9d2a96c8f9b316ea5d69e85fea"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 19,
      "deletions": 3
    },
    "files": [
      {
        "sha": "40fb7fae78eb17cead819b2526c55e4e3aa33494",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 3,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d16f3cad18d6e66b4e283d2c40739c08213cc4d4/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d16f3cad18d6e66b4e283d2c40739c08213cc4d4/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=d16f3cad18d6e66b4e283d2c40739c08213cc4d4",
        "patch": "@@ -229,13 +229,29 @@ bool WalletBatch::WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubk\n     key.insert(key.end(), pubkey.begin(), pubkey.end());\n     key.insert(key.end(), privkey.begin(), privkey.end());\n \n-    return WriteIC(std::make_pair(DBKeys::WALLETDESCRIPTORKEY, std::make_pair(desc_id, pubkey)), std::make_pair(privkey, Hash(key)), false);\n+    const auto rec_key = std::make_pair(DBKeys::WALLETDESCRIPTORKEY, std::make_pair(desc_id, pubkey));\n+    const auto rec_val = std::make_pair(privkey, Hash(key));\n+    if (!WriteIC(rec_key, rec_val, false)) {\n+        // It may already exist, make sure they are the same\n+        std::pair<CPrivKey, uint256> val;\n+        if (!m_batch->Read(rec_key, val)) {\n+            return false;\n+        }\n+        return rec_val == val;\n+    }\n+    return true;\n }\n \n bool WalletBatch::WriteCryptedDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const std::vector<unsigned char>& secret)\n {\n-    if (!WriteIC(std::make_pair(DBKeys::WALLETDESCRIPTORCKEY, std::make_pair(desc_id, pubkey)), secret, false)) {\n-        return false;\n+    const auto key = std::make_pair(DBKeys::WALLETDESCRIPTORCKEY, std::make_pair(desc_id, pubkey));\n+    if (!WriteIC(key, secret, false)) {\n+        // It may already exist, make sure they are the same\n+        std::vector<unsigned char> val;\n+        if (!m_batch->Read(key, val)) {\n+            return false;\n+        }\n+        return secret == val;\n     }\n     EraseIC(std::make_pair(DBKeys::WALLETDESCRIPTORKEY, std::make_pair(desc_id, pubkey)));\n     return true;"
      }
    ]
  },
  {
    "sha": "b22cad134b8b86bc7494aceb251768aa0764a24f",
    "node_id": "C_kwDOABII59oAKGIyMmNhZDEzNGI4Yjg2YmM3NDk0YWNlYjI1MTc2OGFhMDc2NGEyNGY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-27T23:16:29Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:16Z"
      },
      "message": "descspkm: Track CKeyIDs of our keys\n\nWhen DescriptorScriptPubKeyMan no longer manages its keys, it still\nneeds to know the IDs of its keys.",
      "tree": {
        "sha": "9497f855d3e6d2cc5d8105d9b799c3e3b72366dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9497f855d3e6d2cc5d8105d9b799c3e3b72366dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b22cad134b8b86bc7494aceb251768aa0764a24f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22cad134b8b86bc7494aceb251768aa0764a24f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b22cad134b8b86bc7494aceb251768aa0764a24f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22cad134b8b86bc7494aceb251768aa0764a24f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d16f3cad18d6e66b4e283d2c40739c08213cc4d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d16f3cad18d6e66b4e283d2c40739c08213cc4d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d16f3cad18d6e66b4e283d2c40739c08213cc4d4"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ad2303b845eabc9fa1d263ade827b82a0736f573",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cad134b8b86bc7494aceb251768aa0764a24f/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cad134b8b86bc7494aceb251768aa0764a24f/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=b22cad134b8b86bc7494aceb251768aa0764a24f",
        "patch": "@@ -2208,6 +2208,7 @@ bool DescriptorScriptPubKeyMan::AddKey(const CKeyID& key_id, const CKey& key)\n {\n     LOCK(cs_desc_man);\n     m_map_keys[key_id] = key;\n+    m_set_stored_keys.insert(key_id);\n     return true;\n }\n \n@@ -2219,6 +2220,7 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     }\n \n     m_map_crypted_keys[key_id] = make_pair(pubkey, crypted_key);\n+    m_set_stored_keys.insert(key_id);\n     return true;\n }\n "
      },
      {
        "sha": "5e15ac028151ed0d48f254681b5fd006e56a2c78",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cad134b8b86bc7494aceb251768aa0764a24f/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cad134b8b86bc7494aceb251768aa0764a24f/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=b22cad134b8b86bc7494aceb251768aa0764a24f",
        "patch": "@@ -495,6 +495,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n     using KeyMap = std::map<CKeyID, CKey>;\n \n+    std::set<CKeyID> m_set_stored_keys GUARDED_BY(cs_desc_man); // Set of keys this DescriptorSPKM needs\n     ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n     PubKeyMap m_map_pubkeys GUARDED_BY(cs_desc_man);\n     int32_t m_max_cached_index = -1;"
      }
    ]
  },
  {
    "sha": "14f1184cb047625c2f58b93fe6ce758f7fc5385c",
    "node_id": "C_kwDOABII59oAKDE0ZjExODRjYjA0NzYyNWMyZjU4YjkzZmU2Y2U3NThmN2ZjNTM4NWM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-26T19:03:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:16Z"
      },
      "message": "wallet: Add KeyManager class",
      "tree": {
        "sha": "35368629f260419af3c6f8fb783bd49b95be2df5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35368629f260419af3c6f8fb783bd49b95be2df5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14f1184cb047625c2f58b93fe6ce758f7fc5385c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f1184cb047625c2f58b93fe6ce758f7fc5385c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14f1184cb047625c2f58b93fe6ce758f7fc5385c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f1184cb047625c2f58b93fe6ce758f7fc5385c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b22cad134b8b86bc7494aceb251768aa0764a24f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22cad134b8b86bc7494aceb251768aa0764a24f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b22cad134b8b86bc7494aceb251768aa0764a24f"
      }
    ],
    "stats": {
      "total": 309,
      "additions": 309,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f2efe78c617ca7a0c575cb7b5abd27a84d1cf154",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f1184cb047625c2f58b93fe6ce758f7fc5385c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f1184cb047625c2f58b93fe6ce758f7fc5385c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=14f1184cb047625c2f58b93fe6ce758f7fc5385c",
        "patch": "@@ -279,6 +279,7 @@ BITCOIN_CORE_H = \\\n   wallet/feebumper.h \\\n   wallet/fees.h \\\n   wallet/ismine.h \\\n+  wallet/keyman.h \\\n   wallet/load.h \\\n   wallet/receive.h \\\n   wallet/rpcwallet.h \\\n@@ -407,6 +408,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/feebumper.cpp \\\n   wallet/fees.cpp \\\n   wallet/interfaces.cpp \\\n+  wallet/keyman.cpp \\\n   wallet/load.cpp \\\n   wallet/receive.cpp \\\n   wallet/rpcdump.cpp \\"
      },
      {
        "sha": "c86a7c20f5e226eace8df42c6644c713130e79cf",
        "filename": "src/wallet/keyman.cpp",
        "status": "added",
        "additions": 243,
        "deletions": 0,
        "changes": 243,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f1184cb047625c2f58b93fe6ce758f7fc5385c/src/wallet/keyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f1184cb047625c2f58b93fe6ce758f7fc5385c/src/wallet/keyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.cpp?ref=14f1184cb047625c2f58b93fe6ce758f7fc5385c",
        "patch": "@@ -0,0 +1,243 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked) {\n+            break;\n+        }\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+const std::optional<std::pair<CPubKey, std::vector<unsigned char>>> KeyManager::GetCryptedKey(const CKeyID& id) const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_map_crypted_keys.count(id) == 0) {\n+        return std::nullopt;\n+    }\n+    return m_map_crypted_keys.at(id);\n+}"
      },
      {
        "sha": "b0df9f5e90e265b51f9ee421e8abe9c1d009b006",
        "filename": "src/wallet/keyman.h",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f1184cb047625c2f58b93fe6ce758f7fc5385c/src/wallet/keyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f1184cb047625c2f58b93fe6ce758f7fc5385c/src/wallet/keyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.h?ref=14f1184cb047625c2f58b93fe6ce758f7fc5385c",
        "patch": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_KEYMAN_H\n+#define BITCOIN_WALLET_KEYMAN_H\n+\n+#include <sync.h>\n+#include <wallet/db.h>\n+#include <wallet/storage.h>\n+\n+#include <map>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+class CKey;\n+class CKeyID;\n+class CPubKey;\n+class WalletBatch;\n+\n+class KeyManager\n+{\n+//private:\n+public:\n+    // TODO: Everything up to cs_keyman need to be private, but we make them public so DescriptorScriptPubKeyMan can access these during the transition\n+    WalletStorage& m_storage;\n+\n+    std::map<CKeyID, CKey> m_map_keys GUARDED_BY(cs_keyman);\n+    std::map<CKeyID, CExtPubKey> m_map_xpubs GUARDED_BY(cs_keyman);\n+    std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>> m_map_crypted_keys GUARDED_BY(cs_keyman);\n+\n+    bool m_decryption_thoroughly_checked = false;\n+\n+    CExtPubKey m_active_xpub GUARDED_BY(cs_keyman);\n+\n+    bool AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+    std::vector<unsigned char> AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+\n+//public:\n+    mutable RecursiveMutex cs_keyman;\n+\n+    KeyManager(WalletStorage& storage) : m_storage(storage) {}\n+    KeyManager() = delete;\n+\n+    void GenerateAndSetHDKey();\n+    void SetActiveHDKey(const CExtPubKey& extpub);\n+\n+    bool AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey);\n+    bool AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub);\n+\n+    std::optional<CExtKey> GetActiveHDKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+    const std::optional<std::pair<CPubKey, std::vector<unsigned char>>> GetCryptedKey(const CKeyID& id) const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+\n+    void LoadKey(const CKeyID&, const CKey& key);\n+    bool LoadCryptedKey(const CKeyID&, const CPubKey& pubkey, const std::vector<unsigned char>& ckey);\n+    void LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub);\n+    void LoadActiveHDKey(const CExtPubKey& extpub);\n+\n+    bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys);\n+    bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch);\n+};\n+\n+#endif // BITCOIN_WALLET_KEYMAN_H"
      }
    ]
  },
  {
    "sha": "5710cf0abd8c5422bf6c866784dac1ecaa915f3c",
    "node_id": "C_kwDOABII59oAKDU3MTBjZjBhYmQ4YzU0MjJiZjZjODY2Nzg0ZGFjMWVjYWE5MTVmM2M",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-27T19:15:22Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:16Z"
      },
      "message": "descspkm: Add KeyManager to DescriptorScriptPubKeyMan and use for keys",
      "tree": {
        "sha": "7100130930ba727b2f255599305bdde31a01bd57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7100130930ba727b2f255599305bdde31a01bd57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5710cf0abd8c5422bf6c866784dac1ecaa915f3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5710cf0abd8c5422bf6c866784dac1ecaa915f3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5710cf0abd8c5422bf6c866784dac1ecaa915f3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5710cf0abd8c5422bf6c866784dac1ecaa915f3c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14f1184cb047625c2f58b93fe6ce758f7fc5385c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f1184cb047625c2f58b93fe6ce758f7fc5385c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14f1184cb047625c2f58b93fe6ce758f7fc5385c"
      }
    ],
    "stats": {
      "total": 123,
      "additions": 46,
      "deletions": 77
    },
    "files": [
      {
        "sha": "942d503a84fd111e4c1240d6e65a5432d4c795ae",
        "filename": "src/wallet/keyman.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5710cf0abd8c5422bf6c866784dac1ecaa915f3c/src/wallet/keyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5710cf0abd8c5422bf6c866784dac1ecaa915f3c/src/wallet/keyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.cpp?ref=5710cf0abd8c5422bf6c866784dac1ecaa915f3c",
        "patch": "@@ -233,6 +233,28 @@ bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n     return true;\n }\n \n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[id] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool KeyManager::HavePrivateKeys() const\n+{\n+    LOCK(cs_keyman);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n+}\n+\n const std::optional<std::pair<CPubKey, std::vector<unsigned char>>> KeyManager::GetCryptedKey(const CKeyID& id) const\n {\n     AssertLockHeld(cs_keyman);"
      },
      {
        "sha": "56373da2bb61b192ec844c93bcdae9f6fcbe837c",
        "filename": "src/wallet/keyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5710cf0abd8c5422bf6c866784dac1ecaa915f3c/src/wallet/keyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5710cf0abd8c5422bf6c866784dac1ecaa915f3c/src/wallet/keyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.h?ref=5710cf0abd8c5422bf6c866784dac1ecaa915f3c",
        "patch": "@@ -50,6 +50,7 @@ class KeyManager\n     bool AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub);\n \n     std::optional<CExtKey> GetActiveHDKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+    std::map<CKeyID, CKey> GetKeys() const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n     const std::optional<std::pair<CPubKey, std::vector<unsigned char>>> GetCryptedKey(const CKeyID& id) const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n \n     void LoadKey(const CKeyID&, const CKey& key);\n@@ -59,6 +60,7 @@ class KeyManager\n \n     bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys);\n     bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch);\n+    bool HavePrivateKeys() const;\n };\n \n #endif // BITCOIN_WALLET_KEYMAN_H"
      },
      {
        "sha": "14c1b5feb371ed0842bd759d3d4f2a5c0061e14c",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 71,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5710cf0abd8c5422bf6c866784dac1ecaa915f3c/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5710cf0abd8c5422bf6c866784dac1ecaa915f3c/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=5710cf0abd8c5422bf6c866784dac1ecaa915f3c",
        "patch": "@@ -1668,44 +1668,17 @@ isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n-    LOCK(cs_desc_man);\n-    if (!m_map_keys.empty()) {\n-        return false;\n-    }\n-\n-    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n-    bool keyFail = false;\n-    for (const auto& mi : m_map_crypted_keys) {\n-        const CPubKey &pubkey = mi.second.first;\n-        const std::vector<unsigned char> &crypted_secret = mi.second.second;\n-        CKey key;\n-        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n-            keyFail = true;\n-            break;\n-        }\n-        keyPass = true;\n-        if (m_decryption_thoroughly_checked)\n-            break;\n-    }\n-    if (keyPass && keyFail) {\n-        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n-        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n-    }\n-    if (keyFail || (!keyPass && !accept_no_keys)) {\n-        return false;\n-    }\n-    m_decryption_thoroughly_checked = true;\n-    return true;\n+    return m_keyman.CheckDecryptionKey(master_key, accept_no_keys);\n }\n \n bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n {\n     LOCK(cs_desc_man);\n-    if (!m_map_crypted_keys.empty()) {\n+    if (!m_keyman.m_map_crypted_keys.empty()) {\n         return false;\n     }\n \n-    for (const KeyMap::value_type& key_in : m_map_keys)\n+    for (const KeyMap::value_type& key_in : m_keyman.m_map_keys)\n     {\n         const CKey &key = key_in.second;\n         CPubKey pubkey = key.GetPubKey();\n@@ -1714,10 +1687,10 @@ bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, Walle\n         if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n             return false;\n         }\n-        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        m_keyman.m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n         batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n     }\n-    m_map_keys.clear();\n+    m_keyman.m_map_keys.clear();\n     return true;\n }\n \n@@ -1745,7 +1718,7 @@ std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n     AssertLockHeld(cs_desc_man);\n     if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n         KeyMap keys;\n-        for (auto key_pair : m_map_crypted_keys) {\n+        for (auto key_pair : m_keyman.m_map_crypted_keys) {\n             const CPubKey& pubkey = key_pair.second.first;\n             const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n             CKey key;\n@@ -1754,7 +1727,7 @@ std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n         }\n         return keys;\n     }\n-    return m_map_keys;\n+    return m_keyman.m_map_keys;\n }\n \n bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n@@ -1837,41 +1810,12 @@ void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n \n void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n {\n-    LOCK(cs_desc_man);\n     WalletBatch batch(m_storage.GetDatabase());\n-    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+    if (!m_keyman.AddDescriptorKey(batch, GetID(), key, pubkey)) {\n         throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n     }\n-}\n-\n-bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n-{\n-    AssertLockHeld(cs_desc_man);\n-    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n-\n-    // Check if provided key already exists\n-    if (m_map_keys.find(pubkey.GetID()) != m_map_keys.end() ||\n-        m_map_crypted_keys.find(pubkey.GetID()) != m_map_crypted_keys.end()) {\n-        return true;\n-    }\n-\n-    if (m_storage.HasEncryptionKeys()) {\n-        if (m_storage.IsLocked()) {\n-            return false;\n-        }\n-\n-        std::vector<unsigned char> crypted_secret;\n-        CKeyingMaterial secret(key.begin(), key.end());\n-        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n-            return false;\n-        }\n-\n-        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n-        return batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n-    } else {\n-        m_map_keys[pubkey.GetID()] = key;\n-        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n-    }\n+    LOCK(cs_desc_man);\n+    m_set_stored_keys.insert(pubkey.GetID());\n }\n \n bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type, bool internal)\n@@ -1931,9 +1875,10 @@ bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_\n \n     // Store the master private key, and descriptor\n     WalletBatch batch(m_storage.GetDatabase());\n-    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+    if (!m_keyman.AddDescriptorKey(batch, GetID(), master_key.key, master_key.key.GetPubKey())) {\n         throw std::runtime_error(std::string(__func__) + \": writing descriptor master private key failed\");\n     }\n+    m_set_stored_keys.insert(master_key.key.GetPubKey().GetID());\n     if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n         throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n     }\n@@ -1964,7 +1909,7 @@ bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n {\n     LOCK(cs_desc_man);\n-    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n+    return m_keyman.m_map_keys.size() > 0 || m_keyman.m_map_crypted_keys.size() > 0;\n }\n \n std::optional<int64_t> DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n@@ -2207,19 +2152,19 @@ void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n bool DescriptorScriptPubKeyMan::AddKey(const CKeyID& key_id, const CKey& key)\n {\n     LOCK(cs_desc_man);\n-    m_map_keys[key_id] = key;\n+    m_keyman.m_map_keys[key_id] = key;\n     m_set_stored_keys.insert(key_id);\n     return true;\n }\n \n bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key)\n {\n     LOCK(cs_desc_man);\n-    if (!m_map_keys.empty()) {\n+    if (!m_keyman.m_map_keys.empty()) {\n         return false;\n     }\n \n-    m_map_crypted_keys[key_id] = make_pair(pubkey, crypted_key);\n+    m_keyman.m_map_crypted_keys[key_id] = make_pair(pubkey, crypted_key);\n     m_set_stored_keys.insert(key_id);\n     return true;\n }"
      },
      {
        "sha": "0d1a0434b0e155740eb3c60fe19d0d539e8a0a14",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5710cf0abd8c5422bf6c866784dac1ecaa915f3c/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5710cf0abd8c5422bf6c866784dac1ecaa915f3c/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=5710cf0abd8c5422bf6c866784dac1ecaa915f3c",
        "patch": "@@ -14,6 +14,7 @@\n #include <util/time.h>\n #include <wallet/crypter.h>\n #include <wallet/ismine.h>\n+#include <wallet/keyman.h>\n #include <wallet/storage.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n@@ -500,14 +501,9 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     PubKeyMap m_map_pubkeys GUARDED_BY(cs_desc_man);\n     int32_t m_max_cached_index = -1;\n \n-    KeyMap m_map_keys GUARDED_BY(cs_desc_man);\n-    CryptedKeyMap m_map_crypted_keys GUARDED_BY(cs_desc_man);\n-\n     //! keeps track of whether Unlock has run a thorough check before\n     bool m_decryption_thoroughly_checked = false;\n \n-    bool AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n-\n     KeyMap GetKeys() const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n \n     // Fetch the SigningProvider for the given script and optionally include private keys\n@@ -517,16 +513,20 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     // Fetch the SigningProvider for a given index and optionally include private keys. Called by the above functions.\n     std::unique_ptr<FlatSigningProvider> GetSigningProvider(int32_t index, bool include_private = false) const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n \n+    KeyManager m_keyman;\n+\n protected:\n   WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n \n public:\n     DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n         :   ScriptPubKeyMan(storage),\n+            m_keyman(storage),\n             m_wallet_descriptor(descriptor)\n         {}\n     DescriptorScriptPubKeyMan(WalletStorage& storage)\n-        :   ScriptPubKeyMan(storage)\n+        :   ScriptPubKeyMan(storage),\n+            m_keyman(storage)\n         {}\n \n     mutable RecursiveMutex cs_desc_man;"
      }
    ]
  },
  {
    "sha": "9e0fe3a672286eca04e1a0d172756d800b23bdfe",
    "node_id": "C_kwDOABII59oAKDllMGZlM2E2NzIyODZlY2EwNGUxYTBkMTcyNzU2ZDgwMGIyM2JkZmU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-27T19:55:19Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:16Z"
      },
      "message": "descspkm: Encrypt with KeyManager instead of direct map access",
      "tree": {
        "sha": "d8cdc6b97c5675ae7bf87124e5502d5ea9faad18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8cdc6b97c5675ae7bf87124e5502d5ea9faad18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e0fe3a672286eca04e1a0d172756d800b23bdfe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e0fe3a672286eca04e1a0d172756d800b23bdfe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e0fe3a672286eca04e1a0d172756d800b23bdfe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e0fe3a672286eca04e1a0d172756d800b23bdfe/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5710cf0abd8c5422bf6c866784dac1ecaa915f3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5710cf0abd8c5422bf6c866784dac1ecaa915f3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5710cf0abd8c5422bf6c866784dac1ecaa915f3c"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 9,
      "deletions": 14
    },
    "files": [
      {
        "sha": "89b4e714999385af92b4a3bc0a179d00fb05550a",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e0fe3a672286eca04e1a0d172756d800b23bdfe/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e0fe3a672286eca04e1a0d172756d800b23bdfe/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=9e0fe3a672286eca04e1a0d172756d800b23bdfe",
        "patch": "@@ -1673,24 +1673,19 @@ bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master\n \n bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n {\n-    LOCK(cs_desc_man);\n-    if (!m_keyman.m_map_crypted_keys.empty()) {\n+    LOCK2(cs_desc_man, m_keyman.cs_keyman);\n+\n+    if (!m_keyman.Encrypt(master_key, batch)) {\n         return false;\n     }\n \n-    for (const KeyMap::value_type& key_in : m_keyman.m_map_keys)\n-    {\n-        const CKey &key = key_in.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        CKeyingMaterial secret(key.begin(), key.end());\n-        std::vector<unsigned char> crypted_secret;\n-        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n-            return false;\n-        }\n-        m_keyman.m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n-        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    for (const CKeyID& id : m_set_stored_keys) {\n+        const auto& ckey_pair = m_keyman.GetCryptedKey(id);\n+        assert(ckey_pair != std::nullopt);\n+        const auto& [pubkey, ckey] = *ckey_pair;\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, ckey);\n     }\n-    m_keyman.m_map_keys.clear();\n+\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "57b113c811fadba67218be66cd30b71d180141b3",
    "node_id": "C_kwDOABII59oAKDU3YjExM2M4MTFmYWRiYTY3MjE4YmU2NmNkMzBiNzFkMTgwMTQxYjM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-27T23:55:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:16Z"
      },
      "message": "descspkm: Use KeyManager::LoadKey and LoadCryptedKey when loading",
      "tree": {
        "sha": "b46a1696dfae7076974f36105742a5df7db661a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b46a1696dfae7076974f36105742a5df7db661a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57b113c811fadba67218be66cd30b71d180141b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57b113c811fadba67218be66cd30b71d180141b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57b113c811fadba67218be66cd30b71d180141b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57b113c811fadba67218be66cd30b71d180141b3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e0fe3a672286eca04e1a0d172756d800b23bdfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e0fe3a672286eca04e1a0d172756d800b23bdfe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e0fe3a672286eca04e1a0d172756d800b23bdfe"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 2,
      "deletions": 6
    },
    "files": [
      {
        "sha": "537a361c8cc267c5a3776b974fd51ffb7a771903",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b113c811fadba67218be66cd30b71d180141b3/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b113c811fadba67218be66cd30b71d180141b3/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=57b113c811fadba67218be66cd30b71d180141b3",
        "patch": "@@ -2146,20 +2146,16 @@ void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n \n bool DescriptorScriptPubKeyMan::AddKey(const CKeyID& key_id, const CKey& key)\n {\n-    LOCK(cs_desc_man);\n-    m_keyman.m_map_keys[key_id] = key;\n+    m_keyman.LoadKey(key_id, key);\n     m_set_stored_keys.insert(key_id);\n     return true;\n }\n \n bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key)\n {\n-    LOCK(cs_desc_man);\n-    if (!m_keyman.m_map_keys.empty()) {\n+    if (!m_keyman.LoadCryptedKey(key_id, pubkey, crypted_key)) {\n         return false;\n     }\n-\n-    m_keyman.m_map_crypted_keys[key_id] = make_pair(pubkey, crypted_key);\n     m_set_stored_keys.insert(key_id);\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "eac3a40bc27c36572b76b046d562dc058b6d4d69",
    "node_id": "C_kwDOABII59oAKGVhYzNhNDBiYzI3YzM2NTcyYjc2YjA0NmQ1NjJkYzA1OGI2ZDRkNjk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-28T17:11:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:16Z"
      },
      "message": "descspkm: Replace GetKeys with KeyManager::GetKeys",
      "tree": {
        "sha": "5cf19927146566c23914c25d107195aa26e4c4a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cf19927146566c23914c25d107195aa26e4c4a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eac3a40bc27c36572b76b046d562dc058b6d4d69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac3a40bc27c36572b76b046d562dc058b6d4d69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eac3a40bc27c36572b76b046d562dc058b6d4d69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac3a40bc27c36572b76b046d562dc058b6d4d69/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57b113c811fadba67218be66cd30b71d180141b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57b113c811fadba67218be66cd30b71d180141b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57b113c811fadba67218be66cd30b71d180141b3"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 54,
      "deletions": 68
    },
    "files": [
      {
        "sha": "aa7a953715fdca1f2435730b5c84716859767eda",
        "filename": "src/wallet/keyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eac3a40bc27c36572b76b046d562dc058b6d4d69/src/wallet/keyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eac3a40bc27c36572b76b046d562dc058b6d4d69/src/wallet/keyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.cpp?ref=eac3a40bc27c36572b76b046d562dc058b6d4d69",
        "patch": "@@ -241,11 +241,13 @@ std::map<CKeyID, CKey> KeyManager::GetKeys() const\n         for (const auto& [id, key_pair] : m_map_crypted_keys) {\n             const auto& [pubkey, crypted_secret] = key_pair;\n             CKey key;\n-            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);\n             keys[id] = key;\n         }\n         return keys;\n     }\n+    // If the wallet is encrypted and locked, then this will just be an empty map\n     return m_map_keys;\n }\n "
      },
      {
        "sha": "63b6d976c8b8069824648659586a5e993fd5a10c",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 65,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eac3a40bc27c36572b76b046d562dc058b6d4d69/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eac3a40bc27c36572b76b046d562dc058b6d4d69/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=eac3a40bc27c36572b76b046d562dc058b6d4d69",
        "patch": "@@ -1708,81 +1708,66 @@ void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal,\n     NotifyCanGetAddressesChanged();\n }\n \n-std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n-{\n-    AssertLockHeld(cs_desc_man);\n-    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n-        KeyMap keys;\n-        for (auto key_pair : m_keyman.m_map_crypted_keys) {\n-            const CPubKey& pubkey = key_pair.second.first;\n-            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n-            CKey key;\n-            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n-            keys[pubkey.GetID()] = key;\n-        }\n-        return keys;\n-    }\n-    return m_keyman.m_map_keys;\n-}\n-\n bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n {\n-    LOCK(cs_desc_man);\n     unsigned int target_size;\n     if (size > 0) {\n         target_size = size;\n     } else {\n         target_size = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n     }\n \n-    // Calculate the new range_end\n-    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+    {\n+        LOCK2(cs_desc_man, m_keyman.cs_keyman);\n+        // Calculate the new range_end\n+        int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n \n-    // If the descriptor is not ranged, we actually just want to fill the first cache item\n-    if (!m_wallet_descriptor.descriptor->IsRange()) {\n-        new_range_end = 1;\n-        m_wallet_descriptor.range_end = 1;\n-        m_wallet_descriptor.range_start = 0;\n-    }\n+        // If the descriptor is not ranged, we actually just want to fill the first cache item\n+        if (!m_wallet_descriptor.descriptor->IsRange()) {\n+            new_range_end = 1;\n+            m_wallet_descriptor.range_end = 1;\n+            m_wallet_descriptor.range_start = 0;\n+        }\n \n-    FlatSigningProvider provider;\n-    provider.keys = GetKeys();\n+        FlatSigningProvider provider;\n+        provider.keys = m_keyman.GetKeys();\n \n-    WalletBatch batch(m_storage.GetDatabase());\n-    uint256 id = GetID();\n-    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n-        FlatSigningProvider out_keys;\n-        std::vector<CScript> scripts_temp;\n-        DescriptorCache temp_cache;\n-        // Maybe we have a cached xpub and we can expand from the cache first\n-        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n-            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n-        }\n-        // Add all of the scriptPubKeys to the scriptPubKey set\n-        for (const CScript& script : scripts_temp) {\n-            m_map_script_pub_keys[script] = i;\n-        }\n-        for (const auto& pk_pair : out_keys.pubkeys) {\n-            const CPubKey& pubkey = pk_pair.second;\n-            if (m_map_pubkeys.count(pubkey) != 0) {\n-                // We don't need to give an error here.\n-                // It doesn't matter which of many valid indexes the pubkey has, we just need an index where we can derive it and it's private key\n-                continue;\n+        WalletBatch batch(m_storage.GetDatabase());\n+        uint256 id = GetID();\n+        for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+            FlatSigningProvider out_keys;\n+            std::vector<CScript> scripts_temp;\n+            DescriptorCache temp_cache;\n+            // Maybe we have a cached xpub and we can expand from the cache first\n+            if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+                if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n             }\n-            m_map_pubkeys[pubkey] = i;\n-        }\n-        // Merge and write the cache\n-        DescriptorCache new_items = m_wallet_descriptor.cache.MergeAndDiff(temp_cache);\n-        if (!batch.WriteDescriptorCacheItems(id, new_items)) {\n-            throw std::runtime_error(std::string(__func__) + \": writing cache items failed\");\n+            // Add all of the scriptPubKeys to the scriptPubKey set\n+            for (const CScript& script : scripts_temp) {\n+                m_map_script_pub_keys[script] = i;\n+            }\n+            for (const auto& pk_pair : out_keys.pubkeys) {\n+                const CPubKey& pubkey = pk_pair.second;\n+                if (m_map_pubkeys.count(pubkey) != 0) {\n+                    // We don't need to give an error here.\n+                    // It doesn't matter which of many valid indexes the pubkey has, we just need an index where we can derive it and it's private key\n+                    continue;\n+                }\n+                m_map_pubkeys[pubkey] = i;\n+            }\n+            // Merge and write the cache\n+            DescriptorCache new_items = m_wallet_descriptor.cache.MergeAndDiff(temp_cache);\n+            if (!batch.WriteDescriptorCacheItems(id, new_items)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache items failed\");\n+            }\n+            m_max_cached_index++;\n         }\n-        m_max_cached_index++;\n-    }\n-    m_wallet_descriptor.range_end = new_range_end;\n-    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+        m_wallet_descriptor.range_end = new_range_end;\n+        batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n \n-    // By this point, the cache size should be the size of the entire range\n-    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+        // By this point, the cache size should be the size of the entire range\n+        assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+    }\n \n     NotifyCanGetAddressesChanged();\n     return true;\n@@ -1958,14 +1943,15 @@ std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvid\n std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(int32_t index, bool include_private) const\n {\n     AssertLockHeld(cs_desc_man);\n+    LOCK(m_keyman.cs_keyman);\n     // Get the scripts, keys, and key origins for this script\n     std::unique_ptr<FlatSigningProvider> out_keys = std::make_unique<FlatSigningProvider>();\n     std::vector<CScript> scripts_temp;\n     if (!m_wallet_descriptor.descriptor->ExpandFromCache(index, m_wallet_descriptor.cache, scripts_temp, *out_keys)) return nullptr;\n \n     if (HavePrivateKeys() && include_private) {\n         FlatSigningProvider master_provider;\n-        master_provider.keys = GetKeys();\n+        master_provider.keys = m_keyman.GetKeys();\n         m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n     }\n \n@@ -2194,10 +2180,10 @@ const std::vector<CScript> DescriptorScriptPubKeyMan::GetScriptPubKeys() const\n \n bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out, const bool priv) const\n {\n-    LOCK(cs_desc_man);\n+    LOCK2(cs_desc_man, m_keyman.cs_keyman);\n \n     FlatSigningProvider provider;\n-    provider.keys = GetKeys();\n+    provider.keys = m_keyman.GetKeys();\n \n     if (priv) {\n         // For the private version, always return the master key to avoid\n@@ -2211,7 +2197,7 @@ bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out, const bool\n \n void DescriptorScriptPubKeyMan::UpgradeDescriptorCache()\n {\n-    LOCK(cs_desc_man);\n+    LOCK2(cs_desc_man, m_keyman.cs_keyman);\n     if (m_storage.IsLocked() || m_storage.IsWalletFlagSet(WALLET_FLAG_LAST_HARDENED_XPUB_CACHED)) {\n         return;\n     }\n@@ -2223,7 +2209,7 @@ void DescriptorScriptPubKeyMan::UpgradeDescriptorCache()\n \n     // Expand the descriptor\n     FlatSigningProvider provider;\n-    provider.keys = GetKeys();\n+    provider.keys = m_keyman.GetKeys();\n     FlatSigningProvider out_keys;\n     std::vector<CScript> scripts_temp;\n     DescriptorCache temp_cache;"
      },
      {
        "sha": "222e6c65ba1065c836adf908e44a3e1ea99ec7e2",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eac3a40bc27c36572b76b046d562dc058b6d4d69/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eac3a40bc27c36572b76b046d562dc058b6d4d69/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=eac3a40bc27c36572b76b046d562dc058b6d4d69",
        "patch": "@@ -504,8 +504,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     //! keeps track of whether Unlock has run a thorough check before\n     bool m_decryption_thoroughly_checked = false;\n \n-    KeyMap GetKeys() const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n-\n     // Fetch the SigningProvider for the given script and optionally include private keys\n     std::unique_ptr<FlatSigningProvider> GetSigningProvider(const CScript& script, bool include_private = false) const;\n     // Fetch the SigningProvider for the given pubkey and always include private keys. This should only be called by signing code."
      }
    ]
  },
  {
    "sha": "957ffb14bea06c06e2522794cb39bad79db5caca",
    "node_id": "C_kwDOABII59oAKDk1N2ZmYjE0YmVhMDZjMDZlMjUyMjc5NGNiMzliYWQ3OWRiNWNhY2E",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-28T17:13:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:16Z"
      },
      "message": "descspkm: Replace HavePrivateKeys with KeyManager::HavePrivateKeys()",
      "tree": {
        "sha": "03164e33cfb235400b384fb63f14e3713526a1c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03164e33cfb235400b384fb63f14e3713526a1c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/957ffb14bea06c06e2522794cb39bad79db5caca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/957ffb14bea06c06e2522794cb39bad79db5caca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/957ffb14bea06c06e2522794cb39bad79db5caca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/957ffb14bea06c06e2522794cb39bad79db5caca/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eac3a40bc27c36572b76b046d562dc058b6d4d69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac3a40bc27c36572b76b046d562dc058b6d4d69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac3a40bc27c36572b76b046d562dc058b6d4d69"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "909c8ab400f8bab73eaa05ce88bdf89270c6bd7b",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/957ffb14bea06c06e2522794cb39bad79db5caca/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/957ffb14bea06c06e2522794cb39bad79db5caca/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=957ffb14bea06c06e2522794cb39bad79db5caca",
        "patch": "@@ -1888,8 +1888,7 @@ bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n \n bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n {\n-    LOCK(cs_desc_man);\n-    return m_keyman.m_map_keys.size() > 0 || m_keyman.m_map_crypted_keys.size() > 0;\n+    return m_keyman.HavePrivateKeys();\n }\n \n std::optional<int64_t> DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const"
      }
    ]
  },
  {
    "sha": "487da6a7b25f07317f6345456acbbd1f1e2e4b8f",
    "node_id": "C_kwDOABII59oAKDQ4N2RhNmE3YjI1ZjA3MzE3ZjYzNDU0NTZhY2JiZDFmMWUyZTRiOGY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-28T17:14:22Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:16Z"
      },
      "message": "keyman: Make some members private",
      "tree": {
        "sha": "af430779f58a432c7ed372caee3292347c077d9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af430779f58a432c7ed372caee3292347c077d9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/487da6a7b25f07317f6345456acbbd1f1e2e4b8f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/487da6a7b25f07317f6345456acbbd1f1e2e4b8f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/487da6a7b25f07317f6345456acbbd1f1e2e4b8f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/487da6a7b25f07317f6345456acbbd1f1e2e4b8f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "957ffb14bea06c06e2522794cb39bad79db5caca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/957ffb14bea06c06e2522794cb39bad79db5caca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/957ffb14bea06c06e2522794cb39bad79db5caca"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "28f1e4011242574e08d5b3f54732389de613e43b",
        "filename": "src/wallet/keyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/487da6a7b25f07317f6345456acbbd1f1e2e4b8f/src/wallet/keyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/487da6a7b25f07317f6345456acbbd1f1e2e4b8f/src/wallet/keyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.h?ref=487da6a7b25f07317f6345456acbbd1f1e2e4b8f",
        "patch": "@@ -21,9 +21,7 @@ class WalletBatch;\n \n class KeyManager\n {\n-//private:\n-public:\n-    // TODO: Everything up to cs_keyman need to be private, but we make them public so DescriptorScriptPubKeyMan can access these during the transition\n+private:\n     WalletStorage& m_storage;\n \n     std::map<CKeyID, CKey> m_map_keys GUARDED_BY(cs_keyman);\n@@ -37,7 +35,7 @@ class KeyManager\n     bool AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n     std::vector<unsigned char> AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n \n-//public:\n+public:\n     mutable RecursiveMutex cs_keyman;\n \n     KeyManager(WalletStorage& storage) : m_storage(storage) {}"
      }
    ]
  },
  {
    "sha": "a7205e6fd343dd5ac14ae7fba3a394d125a82dbe",
    "node_id": "C_kwDOABII59oAKGE3MjA1ZTZmZDM0M2RkNWFjMTRhZTdmYmEzYTM5NGQxMjVhODJkYmU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-28T18:37:45Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:48Z"
      },
      "message": "wallet: Have KeyManager in CWallet rather than DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "8b732e041472dc9992215fdb70d5d7dbd4fb0582",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b732e041472dc9992215fdb70d5d7dbd4fb0582"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7205e6fd343dd5ac14ae7fba3a394d125a82dbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7205e6fd343dd5ac14ae7fba3a394d125a82dbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7205e6fd343dd5ac14ae7fba3a394d125a82dbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7205e6fd343dd5ac14ae7fba3a394d125a82dbe/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "487da6a7b25f07317f6345456acbbd1f1e2e4b8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/487da6a7b25f07317f6345456acbbd1f1e2e4b8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/487da6a7b25f07317f6345456acbbd1f1e2e4b8f"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "0b8fdae3e533f2f5380d0537211f3bf897517e43",
        "filename": "src/wallet/external_signer_scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7205e6fd343dd5ac14ae7fba3a394d125a82dbe/src/wallet/external_signer_scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7205e6fd343dd5ac14ae7fba3a394d125a82dbe/src/wallet/external_signer_scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.h?ref=a7205e6fd343dd5ac14ae7fba3a394d125a82dbe",
        "patch": "@@ -12,11 +12,11 @@\n class ExternalSignerScriptPubKeyMan : public DescriptorScriptPubKeyMan\n {\n   public:\n-  ExternalSignerScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n-      :   DescriptorScriptPubKeyMan(storage, descriptor)\n+  ExternalSignerScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor, KeyManager& keyman)\n+      :   DescriptorScriptPubKeyMan(storage, descriptor, keyman)\n       {}\n-  ExternalSignerScriptPubKeyMan(WalletStorage& storage)\n-      :   DescriptorScriptPubKeyMan(storage)\n+  ExternalSignerScriptPubKeyMan(WalletStorage& storage, KeyManager& keyman)\n+      :   DescriptorScriptPubKeyMan(storage, keyman)\n       {}\n \n   /** Provide a descriptor at setup time"
      },
      {
        "sha": "8b3e73efac0240909f7df3417894aee7aa6fd119",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7205e6fd343dd5ac14ae7fba3a394d125a82dbe/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7205e6fd343dd5ac14ae7fba3a394d125a82dbe/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=a7205e6fd343dd5ac14ae7fba3a394d125a82dbe",
        "patch": "@@ -511,20 +511,20 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     // Fetch the SigningProvider for a given index and optionally include private keys. Called by the above functions.\n     std::unique_ptr<FlatSigningProvider> GetSigningProvider(int32_t index, bool include_private = false) const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n \n-    KeyManager m_keyman;\n+    KeyManager& m_keyman;\n \n protected:\n   WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n \n public:\n-    DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+    DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor, KeyManager& keyman)\n         :   ScriptPubKeyMan(storage),\n-            m_keyman(storage),\n+            m_keyman(keyman),\n             m_wallet_descriptor(descriptor)\n         {}\n-    DescriptorScriptPubKeyMan(WalletStorage& storage)\n+    DescriptorScriptPubKeyMan(WalletStorage& storage, KeyManager& keyman)\n         :   ScriptPubKeyMan(storage),\n-            m_keyman(storage)\n+            m_keyman(keyman)\n         {}\n \n     mutable RecursiveMutex cs_desc_man;"
      },
      {
        "sha": "3db9b4d3879c5c046980f152bea2cba1159f3b61",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7205e6fd343dd5ac14ae7fba3a394d125a82dbe/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7205e6fd343dd5ac14ae7fba3a394d125a82dbe/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a7205e6fd343dd5ac14ae7fba3a394d125a82dbe",
        "patch": "@@ -3143,10 +3143,10 @@ void CWallet::ConnectScriptPubKeyManNotifiers()\n void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n {\n     if (IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER)) {\n-        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this, desc));\n+        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this, desc, m_keyman));\n         m_spk_managers[id] = std::move(spk_manager);\n     } else {\n-        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc, m_keyman));\n         m_spk_managers[id] = std::move(spk_manager);\n     }\n }\n@@ -3168,7 +3168,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n \n         for (bool internal : {false, true}) {\n             for (OutputType t : OUTPUT_TYPES) {\n-                auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this));\n+                auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, m_keyman));\n                 if (IsCrypted()) {\n                     if (IsLocked()) {\n                         throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n@@ -3203,7 +3203,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n                     continue;\n                 }\n                 OutputType t =  *desc->GetOutputType();\n-                auto spk_manager = std::unique_ptr<ExternalSignerScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this));\n+                auto spk_manager = std::unique_ptr<ExternalSignerScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this, m_keyman));\n                 spk_manager->SetupDescriptor(std::move(desc));\n                 uint256 id = spk_manager->GetID();\n                 m_spk_managers[id] = std::move(spk_manager);\n@@ -3295,7 +3295,7 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n         WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n         spk_man->UpdateWalletDescriptor(desc);\n     } else {\n-        auto new_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+        auto new_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc, m_keyman));\n         spk_man = new_spk_man.get();\n \n         // Save the descriptor to memory"
      },
      {
        "sha": "c056ddd970ff7ac3994fea1d929d128c12cc5367",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7205e6fd343dd5ac14ae7fba3a394d125a82dbe/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7205e6fd343dd5ac14ae7fba3a394d125a82dbe/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a7205e6fd343dd5ac14ae7fba3a394d125a82dbe",
        "patch": "@@ -341,6 +341,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      */\n     static bool AttachChain(const std::shared_ptr<CWallet>& wallet, interfaces::Chain& chain, const bool rescan_required, bilingual_str& error, std::vector<bilingual_str>& warnings);\n \n+    KeyManager m_keyman;\n+\n public:\n     /**\n      * Main wallet lock.\n@@ -367,7 +369,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n         : m_args(args),\n           m_chain(chain),\n           m_name(name),\n-          m_database(std::move(database))\n+          m_database(std::move(database)),\n+          m_keyman(*this)\n     {\n     }\n "
      }
    ]
  },
  {
    "sha": "bc5b7fdf0880d549304117433ce11c411c2bb556",
    "node_id": "C_kwDOABII59oAKGJjNWI3ZmRmMDg4MGQ1NDkzMDQxMTc0MzNjZTExYzQxMWMyYmI1NTY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-29T16:43:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:49Z"
      },
      "message": "walletdb: Load keys into KeyManager directly",
      "tree": {
        "sha": "4a2f77b5f17e93c011c21dc131b8155916fef4f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a2f77b5f17e93c011c21dc131b8155916fef4f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc5b7fdf0880d549304117433ce11c411c2bb556",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc5b7fdf0880d549304117433ce11c411c2bb556",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc5b7fdf0880d549304117433ce11c411c2bb556",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc5b7fdf0880d549304117433ce11c411c2bb556/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7205e6fd343dd5ac14ae7fba3a394d125a82dbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7205e6fd343dd5ac14ae7fba3a394d125a82dbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7205e6fd343dd5ac14ae7fba3a394d125a82dbe"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 62,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7d6ee75ab99144cb0dabb28c36820326fa67ce8d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc5b7fdf0880d549304117433ce11c411c2bb556/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc5b7fdf0880d549304117433ce11c411c2bb556/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bc5b7fdf0880d549304117433ce11c411c2bb556",
        "patch": "@@ -885,6 +885,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Add a descriptor to the wallet, return a ScriptPubKeyMan & associated output type\n     ScriptPubKeyMan* AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label, bool internal) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    KeyManager& GetKeyManager() { return m_keyman; }\n };\n \n /**"
      },
      {
        "sha": "71b38ee04d7b021cb6b2ed259b044daae46d15d6",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc5b7fdf0880d549304117433ce11c411c2bb556/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc5b7fdf0880d549304117433ce11c411c2bb556/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=bc5b7fdf0880d549304117433ce11c411c2bb556",
        "patch": "@@ -808,6 +808,66 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssKey >> hash;\n             ssKey >> n;\n             pwallet->LockCoin(COutPoint(hash, n));\n+        } else if (strType == DBKeys::ACTIVEHDKEY) {\n+            CExtPubKey extpub;\n+            std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+            ssValue >> xpub;\n+            extpub.Decode(xpub.data());\n+            pwallet->GetKeyManager().LoadActiveHDKey(extpub);\n+        } else if (strType == DBKeys::HDPUBKEY) {\n+            CExtPubKey extpub;\n+            std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+            ssKey >> xpub;\n+            extpub.Decode(xpub.data());\n+            pwallet->GetKeyManager().LoadHDKey(extpub.pubkey.GetID(), extpub);\n+        } else if (strType == DBKeys::KEYMAN_KEY) {\n+            CPubKey pubkey;\n+            ssKey >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n+            CKey key;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            wss.nKeys++;\n+            ssValue >> pkey;\n+            ssValue >> hash;\n+\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> to_hash;\n+            to_hash.reserve(pubkey.size() + pkey.size());\n+            to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n+            to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n+\n+            if (Hash(to_hash) != hash)\n+            {\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n+                return false;\n+            }\n+\n+            if (!key.Load(pkey, pubkey, true))\n+            {\n+                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+                return false;\n+            }\n+            pwallet->GetKeyManager().LoadKey(pubkey.GetID(), key);\n+        } else if (strType == DBKeys::KEYMAN_CKEY) {\n+            CPubKey pubkey;\n+            ssKey >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n+            std::vector<unsigned char> privkey;\n+            ssValue >> privkey;\n+            wss.nCKeys++;\n+\n+            pwallet->GetKeyManager().LoadCryptedKey(pubkey.GetID(), pubkey, privkey);\n+            wss.fIsEncrypted = true;\n         } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n                    strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n                    strType != DBKeys::VERSION && strType != DBKeys::SETTINGS &&"
      }
    ]
  },
  {
    "sha": "8dd7837b33f9ba6127b6b55392661f7b4007db66",
    "node_id": "C_kwDOABII59oAKDhkZDc4MzdiMzNmOWJhNjEyN2I2YjU1MzkyNjYxZjdiNDAwN2RiNjY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-29T17:48:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:10:49Z"
      },
      "message": "wallet: Add flag for using KeyManager\n\nKeyManager will be a backwards compatible background upgrade to\ndescriptor wallets. A flag indicating that the upgrade has occurred is\nadded so that the upgrade (not yet implemented) will only happen once.",
      "tree": {
        "sha": "cddeac05121d21c5edad69a012def4cbea1e99b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cddeac05121d21c5edad69a012def4cbea1e99b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8dd7837b33f9ba6127b6b55392661f7b4007db66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dd7837b33f9ba6127b6b55392661f7b4007db66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8dd7837b33f9ba6127b6b55392661f7b4007db66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dd7837b33f9ba6127b6b55392661f7b4007db66/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc5b7fdf0880d549304117433ce11c411c2bb556",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc5b7fdf0880d549304117433ce11c411c2bb556",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc5b7fdf0880d549304117433ce11c411c2bb556"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 11,
      "deletions": 2
    },
    "files": [
      {
        "sha": "86930af408b3763700bcdaef242b1a6f03bfc88b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dd7837b33f9ba6127b6b55392661f7b4007db66/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dd7837b33f9ba6127b6b55392661f7b4007db66/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=8dd7837b33f9ba6127b6b55392661f7b4007db66",
        "patch": "@@ -785,7 +785,9 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: CPrivKey corrupt\";\n                 return false;\n             }\n-            wss.m_descriptor_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), key));\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN)) {\n+                wss.m_descriptor_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), key));\n+            }\n         } else if (strType == DBKeys::WALLETDESCRIPTORCKEY) {\n             uint256 desc_id;\n             CPubKey pubkey;\n@@ -800,7 +802,9 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> privkey;\n             wss.nCKeys++;\n \n-            wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN)) {\n+                wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n+            }\n             wss.fIsEncrypted = true;\n         } else if (strType == DBKeys::LOCKED_UTXO) {\n             uint256 hash;\n@@ -1088,6 +1092,8 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n+    // TODO: Upgrade to using KeyMan\n+\n     return result;\n }\n "
      },
      {
        "sha": "c8694a1669c4a9b39aa016e873c16a08f39bad3c",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dd7837b33f9ba6127b6b55392661f7b4007db66/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dd7837b33f9ba6127b6b55392661f7b4007db66/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=8dd7837b33f9ba6127b6b55392661f7b4007db66",
        "patch": "@@ -46,6 +46,9 @@ enum WalletFlags : uint64_t {\n     // Indicates that the descriptor cache has been upgraded to cache last hardened xpubs\n     WALLET_FLAG_LAST_HARDENED_XPUB_CACHED = (1ULL << 2),\n \n+    // Indicate that the KeyManager should be used instead of DescSPKM keys\n+    WALLET_FLAG_USES_KEYMAN = (1ULL << 3),\n+\n     // will enforce the rule that the wallet can't contain any private keys (only watch-only/pubkeys)\n     WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),\n "
      }
    ]
  },
  {
    "sha": "1ac6b79287a6da1e0b49cfc0c02472052c72a35f",
    "node_id": "C_kwDOABII59oAKDFhYzZiNzkyODdhNmRhMWUwYjQ5Y2ZjMGMwMjQ3MjA1MmM3MmEzNWY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-29T18:07:39Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:11:12Z"
      },
      "message": "wallet: Use KeyManager to generate master key",
      "tree": {
        "sha": "783de2ee016e0ebd89de0821487681f2e26dc352",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/783de2ee016e0ebd89de0821487681f2e26dc352"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ac6b79287a6da1e0b49cfc0c02472052c72a35f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac6b79287a6da1e0b49cfc0c02472052c72a35f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ac6b79287a6da1e0b49cfc0c02472052c72a35f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac6b79287a6da1e0b49cfc0c02472052c72a35f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8dd7837b33f9ba6127b6b55392661f7b4007db66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dd7837b33f9ba6127b6b55392661f7b4007db66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8dd7837b33f9ba6127b6b55392661f7b4007db66"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "846396f61efcb8cf7a5559f0c116245692e4d477",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac6b79287a6da1e0b49cfc0c02472052c72a35f/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac6b79287a6da1e0b49cfc0c02472052c72a35f/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=1ac6b79287a6da1e0b49cfc0c02472052c72a35f",
        "patch": "@@ -1798,9 +1798,9 @@ void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey\n     m_set_stored_keys.insert(pubkey.GetID());\n }\n \n-bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type, bool internal)\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(OutputType addr_type, bool internal)\n {\n-    LOCK(cs_desc_man);\n+    LOCK2(cs_desc_man, m_keyman.cs_keyman);\n     assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n \n     // Ignore when there is already a descriptor\n@@ -1810,6 +1810,10 @@ bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_\n \n     int64_t creation_time = GetTime();\n \n+    std::optional<CExtKey> extkey = m_keyman.GetActiveHDKey();\n+    assert(extkey != std::nullopt);\n+    CExtKey& master_key = extkey.value();\n+\n     std::string xpub = EncodeExtPubKey(master_key.Neuter());\n \n     // Build descriptor string"
      },
      {
        "sha": "f963da5eda0936973faf59f62195b265c7a97fe5",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac6b79287a6da1e0b49cfc0c02472052c72a35f/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac6b79287a6da1e0b49cfc0c02472052c72a35f/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=1ac6b79287a6da1e0b49cfc0c02472052c72a35f",
        "patch": "@@ -549,7 +549,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool IsHDEnabled() const override;\n \n     //! Setup descriptors based on the given CExtkey\n-    bool SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type, bool internal);\n+    bool SetupDescriptorGeneration(OutputType addr_type, bool internal);\n \n     /** Provide a descriptor at setup time\n     * Returns false if already setup or setup fails, true if setup is successful"
      },
      {
        "sha": "1652246e545b4075b7fd387993791051a6ef6d88",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac6b79287a6da1e0b49cfc0c02472052c72a35f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac6b79287a6da1e0b49cfc0c02472052c72a35f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1ac6b79287a6da1e0b49cfc0c02472052c72a35f",
        "patch": "@@ -3156,15 +3156,11 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n     AssertLockHeld(cs_wallet);\n \n     if (!IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER)) {\n-        // Make a seed\n-        CKey seed_key;\n-        seed_key.MakeNewKey(true);\n-        CPubKey seed = seed_key.GetPubKey();\n-        assert(seed_key.VerifyPubKey(seed));\n-\n-        // Get the extended key\n-        CExtKey master_key;\n-        master_key.SetSeed(seed_key);\n+        {\n+            LOCK(m_keyman.cs_keyman);\n+            m_keyman.GenerateAndSetHDKey();\n+            SetWalletFlag(WALLET_FLAG_USES_KEYMAN);\n+        }\n \n         for (bool internal : {false, true}) {\n             for (OutputType t : OUTPUT_TYPES) {\n@@ -3177,7 +3173,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n                         throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n                     }\n                 }\n-                spk_manager->SetupDescriptorGeneration(master_key, t, internal);\n+                spk_manager->SetupDescriptorGeneration(t, internal);\n                 uint256 id = spk_manager->GetID();\n                 m_spk_managers[id] = std::move(spk_manager);\n                 AddActiveScriptPubKeyMan(id, t, internal);"
      }
    ]
  },
  {
    "sha": "4c80cb8f8cb7a7546aafa205799938e23773640e",
    "node_id": "C_kwDOABII59oAKDRjODBjYjhmOGNiN2E3NTQ2YWFmYTIwNTc5OTkzOGUyMzc3MzY0MGU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-02T20:53:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:11:13Z"
      },
      "message": "descriptor: Be able to get the pubkeys involved in a descriptor",
      "tree": {
        "sha": "630f1ec9d4796cabf717a29871aadab4f42382cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/630f1ec9d4796cabf717a29871aadab4f42382cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c80cb8f8cb7a7546aafa205799938e23773640e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c80cb8f8cb7a7546aafa205799938e23773640e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c80cb8f8cb7a7546aafa205799938e23773640e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c80cb8f8cb7a7546aafa205799938e23773640e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ac6b79287a6da1e0b49cfc0c02472052c72a35f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac6b79287a6da1e0b49cfc0c02472052c72a35f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ac6b79287a6da1e0b49cfc0c02472052c72a35f"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 35,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3ca7d1d97586297bfb845b53f7c11546ef22f3f1",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c80cb8f8cb7a7546aafa205799938e23773640e/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c80cb8f8cb7a7546aafa205799938e23773640e/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=4c80cb8f8cb7a7546aafa205799938e23773640e",
        "patch": "@@ -185,6 +185,12 @@ struct PubkeyProvider\n \n     /** Derive a private key, if private data is available in arg. */\n     virtual bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const = 0;\n+\n+    /** Return all (extended public keys for this PubkeyProvider\n+     * param[out] pubkeys Any public keys\n+     * param[out] ext_pubs Any extended public keys\n+     */\n+    virtual void GetRootPubkey(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const = 0;\n };\n \n class OriginPubkeyProvider final : public PubkeyProvider\n@@ -235,6 +241,10 @@ class OriginPubkeyProvider final : public PubkeyProvider\n     {\n         return m_provider->GetPrivKey(pos, arg, key);\n     }\n+    void GetRootPubkey(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const override\n+    {\n+        m_provider->GetRootPubkey(pubkeys, ext_pubs);\n+    }\n };\n \n /** An object representing a parsed constant public key in a descriptor. */\n@@ -272,6 +282,10 @@ class ConstPubkeyProvider final : public PubkeyProvider\n     {\n         return arg.GetKey(m_pubkey.GetID(), key);\n     }\n+    void GetRootPubkey(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const override\n+    {\n+        pubkeys.insert(m_pubkey);\n+    }\n };\n \n enum class DeriveType {\n@@ -480,6 +494,10 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         key = extkey.key;\n         return true;\n     }\n+    void GetRootPubkey(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const override\n+    {\n+        ext_pubs.insert(m_root_extkey);\n+    }\n };\n \n /** Base class for all Descriptor implementations. */\n@@ -658,6 +676,16 @@ class DescriptorImpl : public Descriptor\n     }\n \n     std::optional<OutputType> GetOutputType() const override { return std::nullopt; }\n+\n+    void GetPubkeys(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const override\n+    {\n+        for (const auto& p : m_pubkey_args) {\n+            p->GetRootPubkey(pubkeys, ext_pubs);\n+        }\n+        for (const auto& arg : m_subdescriptor_args) {\n+            arg->GetPubkeys(pubkeys, ext_pubs);\n+        }\n+    }\n };\n \n /** A parsed addr(A) descriptor. */"
      },
      {
        "sha": "4a66214b6e1f77e225d55c356cd9cf574f997642",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c80cb8f8cb7a7546aafa205799938e23773640e/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c80cb8f8cb7a7546aafa205799938e23773640e/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=4c80cb8f8cb7a7546aafa205799938e23773640e",
        "patch": "@@ -146,6 +146,13 @@ struct Descriptor {\n \n     /** @return The OutputType of the scriptPubKey(s) produced by this descriptor. Or nullopt if indeterminate (multiple or none) */\n     virtual std::optional<OutputType> GetOutputType() const = 0;\n+\n+    /** Return all (extended) public keys for this descriptor, including any from subdescriptors.\n+     *\n+     * @param[out] pubkeys Any public keys\n+     * @param[out] ext_pubs Any extended public keys\n+     */\n+    virtual void GetPubkeys(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const = 0;\n };\n \n /** Parse a `descriptor` string. Included private keys are put in `out`."
      }
    ]
  },
  {
    "sha": "1ecc124021a7afcce51856c4dc50980532fc0dcc",
    "node_id": "C_kwDOABII59oAKDFlY2MxMjQwMjFhN2FmY2NlNTE4NTZjNGRjNTA5ODA1MzJmYzBkY2M",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-01T19:39:04Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:11:13Z"
      },
      "message": "walletdb: Implement upgrading a wallet to use KeyManager",
      "tree": {
        "sha": "27083895437ff43aab7e378ce4d6a251e145d59c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27083895437ff43aab7e378ce4d6a251e145d59c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ecc124021a7afcce51856c4dc50980532fc0dcc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ecc124021a7afcce51856c4dc50980532fc0dcc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ecc124021a7afcce51856c4dc50980532fc0dcc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ecc124021a7afcce51856c4dc50980532fc0dcc/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c80cb8f8cb7a7546aafa205799938e23773640e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c80cb8f8cb7a7546aafa205799938e23773640e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c80cb8f8cb7a7546aafa205799938e23773640e"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 93,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f4ff73a91a74da0aa150d834fadb9e9290af6447",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 1,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ecc124021a7afcce51856c4dc50980532fc0dcc/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ecc124021a7afcce51856c4dc50980532fc0dcc/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=1ecc124021a7afcce51856c4dc50980532fc0dcc",
        "patch": "@@ -1092,7 +1092,99 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n-    // TODO: Upgrade to using KeyMan\n+    // Upgrade to using KeyMan\n+    // Find the keys which are used in single key internal and external descriptors with\n+    // the pre-taproot output types\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) &&\n+        (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN) ||\n+        last_client <= 229999)\n+        ) {\n+        std::map<CExtPubKey, std::pair<std::map<std::string, int>, uint64_t>> descs_keys;\n+        std::map<std::string, int> tmpl = {{\"pkh(\", 0}, {\"sh(wpkh(\", 0}, {\"wpkh(\", 0}};\n+\n+        // Find root xpubs used in pkh(), sh(wpkh()), and wpkh() descriptors\n+        for (const auto& spkm : pwallet->GetAllScriptPubKeyMans()) {\n+            const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+            assert(desc_spkm);\n+            LOCK(desc_spkm->cs_desc_man);\n+            WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+            if (!w_desc.descriptor->IsRange()) {\n+                continue;\n+            }\n+\n+            std::set<CPubKey> desc_pubkeys;\n+            std::set<CExtPubKey> desc_xpubs;\n+            w_desc.descriptor->GetPubkeys(desc_pubkeys, desc_xpubs);\n+            if (desc_xpubs.size() != 1) {\n+                continue;\n+            }\n+            const CExtPubKey& xpub = *desc_xpubs.begin();\n+\n+            if (descs_keys.count(xpub) == 0) {\n+                descs_keys.emplace(xpub, std::make_pair(tmpl, 0));\n+            }\n+\n+            const std::string desc = w_desc.descriptor->ToString();\n+            if (desc.find(\"pkh(\") == 0) {\n+                descs_keys[xpub].first[\"pkh(\"]++;\n+            } else if (desc.find(\"sh(wpkh(\")) {\n+                descs_keys[xpub].first[\"sh(wpkh(\"]++;\n+            } else if (desc.find(\"wpkh(\")) {\n+                descs_keys[xpub].first[\"wpkh(\"]++;\n+            } else {\n+                continue;\n+            }\n+            if (w_desc.creation_time > descs_keys[xpub].second) {\n+                descs_keys[xpub].second = w_desc.creation_time;\n+            }\n+        }\n+\n+        // Find candidate active xpubs\n+        // These are the ones that are used in 2 pkh(), 2 sh(wpkh()), and 2 wpkh() descriptors\n+        uint64_t best_time = 0;\n+        CExtPubKey best_xpub;\n+        for (const auto& [xpub, info] : descs_keys) {\n+            const auto& [dtypes, desc_time] = info;\n+            bool ok = true;\n+            for (const auto& [dtype, count] : dtypes) {\n+                if (count != 2) {\n+                    ok = false;\n+                    break;\n+                }\n+            }\n+            if (ok) {\n+                pwallet->GetKeyManager().LoadHDKey(xpub.pubkey.GetID(), xpub);\n+                WriteHDPubKey(xpub);\n+                if (desc_time > best_time) {\n+                    best_time = desc_time;\n+                    best_xpub = xpub;\n+                }\n+            }\n+        }\n+        if (best_time > 0) {\n+            pwallet->GetKeyManager().SetActiveHDKey(best_xpub);\n+        }\n+\n+        // Load keys into KeyManager\n+        for (const auto& [id_pair, key] : wss.m_descriptor_keys) {\n+            const auto& [desc_id, keyid] = id_pair;\n+\n+            pwallet->GetKeyManager().LoadKey(keyid, key);\n+            WriteKeyManKey(key.GetPubKey(), key.GetPrivKey());\n+        }\n+        for (const auto& [id_pair, key_pair] : wss.m_descriptor_crypt_keys) {\n+            const auto& [desc_id, keyid] = id_pair;\n+            const auto& [pubkey, ckey] = key_pair;\n+\n+            pwallet->GetKeyManager().LoadCryptedKey(keyid, pubkey, ckey);\n+            WriteCryptedKeyManKey(pubkey, ckey);\n+        }\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN)) {\n+            pwallet->SetWalletFlag(WALLET_FLAG_USES_KEYMAN);\n+        }\n+    }\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "edec0d972222d43bea1767a2402371bc1f3e0129",
    "node_id": "C_kwDOABII59oAKGVkZWMwZDk3MjIyMmQ0M2JlYTE3NjdhMjQwMjM3MWJjMWYzZTAxMjk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-01T19:39:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:11:13Z"
      },
      "message": "descspkm: Remove unneeded key loading\n\nKey management will be done entirely by KeyManager, so\nDescriptorScriptPubKeyMan does not need key loading functions.",
      "tree": {
        "sha": "a0f4b63ff02750690ddf0df6f15aa0dcf7583f0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0f4b63ff02750690ddf0df6f15aa0dcf7583f0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edec0d972222d43bea1767a2402371bc1f3e0129",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edec0d972222d43bea1767a2402371bc1f3e0129",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/edec0d972222d43bea1767a2402371bc1f3e0129",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edec0d972222d43bea1767a2402371bc1f3e0129/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ecc124021a7afcce51856c4dc50980532fc0dcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ecc124021a7afcce51856c4dc50980532fc0dcc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ecc124021a7afcce51856c4dc50980532fc0dcc"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 0,
      "deletions": 29
    },
    "files": [
      {
        "sha": "ea923820dd3827840d73b0b41c564f5b3cc9f2a9",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edec0d972222d43bea1767a2402371bc1f3e0129/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edec0d972222d43bea1767a2402371bc1f3e0129/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=edec0d972222d43bea1767a2402371bc1f3e0129",
        "patch": "@@ -2133,22 +2133,6 @@ void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n     }\n }\n \n-bool DescriptorScriptPubKeyMan::AddKey(const CKeyID& key_id, const CKey& key)\n-{\n-    m_keyman.LoadKey(key_id, key);\n-    m_set_stored_keys.insert(key_id);\n-    return true;\n-}\n-\n-bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key)\n-{\n-    if (!m_keyman.LoadCryptedKey(key_id, pubkey, crypted_key)) {\n-        return false;\n-    }\n-    m_set_stored_keys.insert(key_id);\n-    return true;\n-}\n-\n bool DescriptorScriptPubKeyMan::HasWalletDescriptor(const WalletDescriptor& desc) const\n {\n     LOCK(cs_desc_man);"
      },
      {
        "sha": "8ce98d11585acf6d4af2347c8f726f7ecb65c826",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edec0d972222d43bea1767a2402371bc1f3e0129/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edec0d972222d43bea1767a2402371bc1f3e0129/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=edec0d972222d43bea1767a2402371bc1f3e0129",
        "patch": "@@ -579,9 +579,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     void SetCache(const DescriptorCache& cache);\n \n-    bool AddKey(const CKeyID& key_id, const CKey& key);\n-    bool AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key);\n-\n     bool HasWalletDescriptor(const WalletDescriptor& desc) const;\n     void UpdateWalletDescriptor(WalletDescriptor& descriptor);\n     bool CanUpdateToWalletDescriptor(const WalletDescriptor& descriptor, std::string& error);"
      },
      {
        "sha": "bfae2adbb0baec6102f859b62685106acc9bd540",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edec0d972222d43bea1767a2402371bc1f3e0129/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edec0d972222d43bea1767a2402371bc1f3e0129/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=edec0d972222d43bea1767a2402371bc1f3e0129",
        "patch": "@@ -1009,16 +1009,6 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         ((DescriptorScriptPubKeyMan*)spk_man)->SetCache(desc_cache_pair.second);\n     }\n \n-    // Set the descriptor keys\n-    for (auto desc_key_pair : wss.m_descriptor_keys) {\n-        auto spk_man = pwallet->GetScriptPubKeyMan(desc_key_pair.first.first);\n-        ((DescriptorScriptPubKeyMan*)spk_man)->AddKey(desc_key_pair.first.second, desc_key_pair.second);\n-    }\n-    for (auto desc_key_pair : wss.m_descriptor_crypt_keys) {\n-        auto spk_man = pwallet->GetScriptPubKeyMan(desc_key_pair.first.first);\n-        ((DescriptorScriptPubKeyMan*)spk_man)->AddCryptedKey(desc_key_pair.first.second, desc_key_pair.second.first, desc_key_pair.second.second);\n-    }\n-\n     if (rescan_required && result == DBErrors::LOAD_OK) {\n         result = DBErrors::NEED_RESCAN;\n     } else if (fNoncriticalErrors && result == DBErrors::LOAD_OK) {"
      }
    ]
  },
  {
    "sha": "2de95e72667cd4a93fd6fee5b87b8e22b9d56370",
    "node_id": "C_kwDOABII59oAKDJkZTk1ZTcyNjY3Y2Q0YTkzZmQ2ZmVlNWI4N2I4ZTIyYjlkNTYzNzA",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-01T19:47:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:11:13Z"
      },
      "message": "rpc: Add getxpub command",
      "tree": {
        "sha": "bafacf40f3191a85e117d5ec72e32d3bb5243a3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bafacf40f3191a85e117d5ec72e32d3bb5243a3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2de95e72667cd4a93fd6fee5b87b8e22b9d56370",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2de95e72667cd4a93fd6fee5b87b8e22b9d56370",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2de95e72667cd4a93fd6fee5b87b8e22b9d56370",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2de95e72667cd4a93fd6fee5b87b8e22b9d56370/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "edec0d972222d43bea1767a2402371bc1f3e0129",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edec0d972222d43bea1767a2402371bc1f3e0129",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edec0d972222d43bea1767a2402371bc1f3e0129"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 54,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9c0f4f74676f1f0560b519476cfb2aa90e7427d4",
        "filename": "src/wallet/keyman.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2de95e72667cd4a93fd6fee5b87b8e22b9d56370/src/wallet/keyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2de95e72667cd4a93fd6fee5b87b8e22b9d56370/src/wallet/keyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.cpp?ref=2de95e72667cd4a93fd6fee5b87b8e22b9d56370",
        "patch": "@@ -74,6 +74,14 @@ std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n     return master_key;\n }\n \n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n {\n     AssertLockHeld(cs_keyman);"
      },
      {
        "sha": "7dd12ebd2d36d07dd5ccb4176ae3527206371754",
        "filename": "src/wallet/keyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2de95e72667cd4a93fd6fee5b87b8e22b9d56370/src/wallet/keyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2de95e72667cd4a93fd6fee5b87b8e22b9d56370/src/wallet/keyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.h?ref=2de95e72667cd4a93fd6fee5b87b8e22b9d56370",
        "patch": "@@ -48,6 +48,7 @@ class KeyManager\n     bool AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub);\n \n     std::optional<CExtKey> GetActiveHDKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+    std::optional<CExtPubKey> GetActiveHDPubKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n     std::map<CKeyID, CKey> GetKeys() const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n     const std::optional<std::pair<CPubKey, std::vector<unsigned char>>> GetCryptedKey(const CKeyID& id) const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n "
      },
      {
        "sha": "f178751913c26a7ba71a7fc9d0c9cf06f73bb9c0",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2de95e72667cd4a93fd6fee5b87b8e22b9d56370/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2de95e72667cd4a93fd6fee5b87b8e22b9d56370/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2de95e72667cd4a93fd6fee5b87b8e22b9d56370",
        "patch": "@@ -4848,6 +4848,50 @@ static RPCHelpMan walletdisplayaddress()\n }\n #endif // ENABLE_EXTERNAL_SIGNER\n \n+static RPCHelpMan getxpub()\n+{\n+    return RPCHelpMan{\"getxpub\",\n+                \"Returns the xpub most recently used to generate descriptors for this descriptor wallet. \"\n+                \"Not entirely useful right now as it returns the xpub of the root, and there are \"\n+                \"hardened derivation steps involved in normal key derivation.\\n\",\n+                {},\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {\n+                        {RPCResult::Type::STR, \"xpub\", \"The xpub\"},\n+                    }},\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getxpub\", \"\")\n+            + HelpExampleRpc(\"getxpub\", \"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"getxpub is not available for non-descriptor wallets\");\n+    }\n+\n+    const KeyManager& keyman = pwallet->GetKeyManager();\n+    LOCK2(pwallet->cs_wallet, keyman.cs_keyman);\n+\n+    std::optional<CExtPubKey> extpub = keyman.GetActiveHDPubKey();\n+    if (extpub == std::nullopt) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"This wallet does not have an active xpub\");\n+    }\n+    std::string xpub = EncodeExtPubKey(*extpub);\n+\n+    UniValue obj(UniValue::VOBJ);\n+    obj.pushKV(\"xpub\", xpub);\n+\n+    return obj;\n+},\n+    };\n+}\n+\n RPCHelpMan abortrescan();\n RPCHelpMan dumpprivkey();\n RPCHelpMan importprivkey();\n@@ -4889,6 +4933,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             &gettransaction,                 },\n     { \"wallet\",             &getunconfirmedbalance,          },\n     { \"wallet\",             &getbalances,                    },\n+    { \"wallet\",             &getxpub,                        },\n     { \"wallet\",             &getwalletinfo,                  },\n     { \"wallet\",             &importaddress,                  },\n     { \"wallet\",             &importdescriptors,              },"
      }
    ]
  }
]