Sjors,2021-11-02 19:47:15,Concept ACK. This will make #22341 a _lot_ easier.,https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-958114472,958114472,
DrahtBot,2021-11-03 00:08:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23497](https://github.com/bitcoin/bitcoin/pull/23497) (Add `src/node/` and `src/wallet/` code to `node::` and `wallet::`",https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-958482937,958482937,
achow101,2021-11-09 20:01:21,"Thread safety warnings are fixed, not seeing the wallet_transactiontime_rescan.py failure.",https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-964490868,964490868,
Sjors,2021-11-16 12:34:28,"Not seeing any thread warning anymore, so that's good.\n\n`wallet_transactiontime_rescan.py` only fails for me with configuring `--without-bdb`. ",https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-970229451,970229451,
achow101,2021-11-16 17:42:28,"> `wallet_transactiontime_rescan.py` only fails for me with configuring `--without-bdb`.\n\nThis appears to fail on master as well.",https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-970510995,970510995,
achow101,2021-11-17 19:42:10,"> Looks like you got rid of `AddDescriptorKeyWithDB`, but it's still defined in header\n\nFixed\n\n> Also the original function contained an assert for not having `WALLET_FLAG_DISABLE_PRIVATE_KEYS` and it would check if the key already existed (`AddKeyInner` does that now).\n\nAdded that back in.",https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-971913592,971913592,
Sjors,2021-11-05 14:51:53,"1399c27ec5081af7a1f31a9bb750b216cc68c6cf: nit, maybe order by `vchFingerprint < other.vchFingerprint || pubkey < other.pubkey`, in case we ever want to use this to sort by master key.",https://github.com/bitcoin/bitcoin/pull/23417#discussion_r743729962,743729962,src/pubkey.h
Sjors,2021-11-05 15:00:23,"2ed25fe1a512d50065c6e27b23016500f3e6d647\n```\n// The active HD master key, identified by its extended public key\n```",https://github.com/bitcoin/bitcoin/pull/23417#discussion_r743737544,743737544,src/wallet/walletdb.h
Sjors,2021-11-05 15:01:47,"2ed25fe1a512d50065c6e27b23016500f3e6d647\n```\n// An HD master key, identified by its extended public key\n```",https://github.com/bitcoin/bitcoin/pull/23417#discussion_r743738748,743738748,src/wallet/walletdb.h
Sjors,2021-11-05 16:01:58,"1c76661cc73a32cfc5a6185aec1aa954dbad3dd6: assuming we don't back port this, shouldn't it be `last_client <= 229999`. Otherwise we wouldn't upgrade wallets touched by (hypothetical future release) v22.1",https://github.com/bitcoin/bitcoin/pull/23417#discussion_r743788858,743788858,src/wallet/walletdb.cpp
Sjors,2021-11-05 16:06:59,"1c76661: maybe clarify that we're dealing with the xpub at the root level, not the BIP44/49/84 ""account"" level.",https://github.com/bitcoin/bitcoin/pull/23417#discussion_r743792769,743792769,src/wallet/walletdb.cpp
achow101,2021-11-09 19:59:50,Done,https://github.com/bitcoin/bitcoin/pull/23417#discussion_r745968135,745968135,src/pubkey.h
achow101,2021-11-09 19:59:54,Done,https://github.com/bitcoin/bitcoin/pull/23417#discussion_r745968204,745968204,src/wallet/walletdb.h
achow101,2021-11-09 19:59:58,Done,https://github.com/bitcoin/bitcoin/pull/23417#discussion_r745968275,745968275,src/wallet/walletdb.h
achow101,2021-11-09 20:00:52,"Done, also changed this to be either the flag is not set, or the last client is <= 229999. This is to handle the upgrade then downgrade and then upgrade again case.",https://github.com/bitcoin/bitcoin/pull/23417#discussion_r745969175,745969175,src/wallet/walletdb.cpp
achow101,2021-11-09 20:00:58,Done,https://github.com/bitcoin/bitcoin/pull/23417#discussion_r745969252,745969252,src/wallet/walletdb.cpp
Sjors,2021-11-11 15:45:50,"Oops, my example wasn't very smart, because this is comparing pointers...  `unsigned char vchFingerprint[4]`. The `memcmp` approach in `==` above is probably more useful. And we should probably be consistent and compare all the things.",https://github.com/bitcoin/bitcoin/pull/23417#discussion_r747611357,747611357,src/pubkey.h
Sjors,2021-11-11 15:51:06,"```\n /** Return all (extended) public  keys for this descriptor, including any from any subdescriptors.\n     *\n     * @param[out] pubkeys Any public keys.\n     * @param[out] pubkeys Any extended public keys.\n     */\n```\n\nThis recursive function always ends up at `GetRootPubkeys`; any reason why `Root` is not present in this function name?",https://github.com/bitcoin/bitcoin/pull/23417#discussion_r747615584,747615584,src/script/descriptor.h
Sjors,2021-11-11 16:00:11,"```\n /** Return all (extended) public  keys for this descriptor\n     *\n     * @param[out] pubkeys Any public keys.\n     * @param[out] pubkeys Any extended public keys.\n     */\n```",https://github.com/bitcoin/bitcoin/pull/23417#discussion_r747623354,747623354,src/script/descriptor.cpp
Sjors,2021-11-11 16:19:32,"Let's clarify here, or at the documentation for `GetActiveHDKey`, that the corresponding extended private key is reconstructed using this extended public key, which includes the chain code, and the right `KEYMAN_KEY` or `KEYMAN_CKEY` private key.\n\nStill this process seems rather complicated, why not just store the (encrypted) extended private key?",https://github.com/bitcoin/bitcoin/pull/23417#discussion_r747638450,747638450,src/wallet/walletdb.h
achow101,2021-11-11 22:05:13,Not particularly. I believe originally I wanted the underlying function in `PubkeyProvider` to be `GetPubkey` but that was already taken. The `Root` part came from the fact that `GetPubkey` in `BIP32PubkeyProvider` returns a derived key whereas I needed the root extended key.,https://github.com/bitcoin/bitcoin/pull/23417#discussion_r747846801,747846801,src/script/descriptor.h
achow101,2021-11-11 22:37:07,"A lot of places in the codebase do not expect `CExtKey`s when fetching private keys, even in places where BIP 32 derivation ends up being done. They instead take `CKey`s and combine them with `CExtPubKey`s to get the necessary `CExtKey`s. We maintain this same paradigm for ease of implementation.\n\nAdditionally, having all private keys be universally `CKey`s makes it easier to support non-range",https://github.com/bitcoin/bitcoin/pull/23417#discussion_r747861202,747861202,src/wallet/walletdb.h
Sjors,2021-11-12 11:14:02,"Storing both `CExtKey` and `Ckey` (for non-ranged descriptors) could be an approach, but I'm also not sure if that makes the implementation any easier to understand. This is probably the only opportunity to break with the past convention, if we want to.",https://github.com/bitcoin/bitcoin/pull/23417#discussion_r748170446,748170446,src/wallet/walletdb.h
achow101,2021-11-12 20:25:22,Done,https://github.com/bitcoin/bitcoin/pull/23417#discussion_r748565931,748565931,src/pubkey.h
achow101,2021-11-12 20:25:26,Added the comment,https://github.com/bitcoin/bitcoin/pull/23417#discussion_r748565962,748565962,src/script/descriptor.h
achow101,2021-11-12 20:25:40,Done,https://github.com/bitcoin/bitcoin/pull/23417#discussion_r748566173,748566173,src/script/descriptor.cpp
Sjors,2021-11-16 13:47:00,"It would be nice to group the wallet loading and unloading functions.\n\nSimilarly let's separate functions that modify wallet storage from those that don't. ",https://github.com/bitcoin/bitcoin/pull/23417#discussion_r750288077,750288077,src/wallet/keyman.h
Sjors,2021-11-17 13:51:59,"(partly existing code)\nIf an encrypted wallet is locked, rather than fail, this function just returns the `m_map_keys` which happens to be empty. Not sure how I feel about that, but let's at least document (that calling this on a locked wallet returns an empty result).",https://github.com/bitcoin/bitcoin/pull/23417#discussion_r751259808,751259808,src/wallet/keyman.cpp
Sjors,2021-11-17 14:04:32,Clear `m_map_crypted_keys` first?,https://github.com/bitcoin/bitcoin/pull/23417#discussion_r751271168,751271168,src/wallet/keyman.cpp
Sjors,2021-11-17 14:09:21,Nit: move `break` inline or add brackets.,https://github.com/bitcoin/bitcoin/pull/23417#discussion_r751276375,751276375,src/wallet/keyman.cpp
achow101,2021-11-17 19:40:12,I think it's fine to not do this. The caller will `assert(false)` in that case anyways.,https://github.com/bitcoin/bitcoin/pull/23417#discussion_r751578343,751578343,src/wallet/keyman.cpp
achow101,2021-11-17 19:41:23,Done,https://github.com/bitcoin/bitcoin/pull/23417#discussion_r751579190,751579190,src/wallet/keyman.h
achow101,2021-11-17 19:41:34,Added a comment.,https://github.com/bitcoin/bitcoin/pull/23417#discussion_r751579327,751579327,src/wallet/keyman.cpp
achow101,2021-11-17 19:41:46,Done,https://github.com/bitcoin/bitcoin/pull/23417#discussion_r751579474,751579474,src/wallet/keyman.cpp
