[
  {
    "sha": "bbdbe805a25ae7c63e6237b3f30b8379ea29ac22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmRiZTgwNWEyNWFlN2M2M2U2MjM3YjNmMzBiODM3OWVhMjlhYzIy",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-08-28T06:00:21Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-09-05T23:24:59Z"
      },
      "message": "Add iswitness parameter to decode- and fundrawtransaction RPCs",
      "tree": {
        "sha": "938f2bb10a57b878566dc3f8020f2087b2d83234",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/938f2bb10a57b878566dc3f8020f2087b2d83234"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28485c783d826fa6ce14aaf215e82118c1af8db7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28485c783d826fa6ce14aaf215e82118c1af8db7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28485c783d826fa6ce14aaf215e82118c1af8db7"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 45,
      "deletions": 29
    },
    "files": [
      {
        "sha": "946480cfa4c85f1a60edabf0c2abec694ff3fc15",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=bbdbe805a25ae7c63e6237b3f30b8379ea29ac22",
        "patch": "@@ -20,7 +20,7 @@ class UniValue;\n // core_read.cpp\n CScript ParseScript(const std::string& s);\n std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);\n-bool DecodeHexTx(CMutableTransaction& tx, const std::string& strHexTx, bool fTryNoWitness = false);\n+bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness = false, bool try_witness = true);\n bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n uint256 ParseHashUV(const UniValue& v, const std::string& strName);\n uint256 ParseHashStr(const std::string&, const std::string& strName);"
      },
      {
        "sha": "819fd1dd149dcffa5e591e2ad3f06dbc6d689f3e",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=bbdbe805a25ae7c63e6237b3f30b8379ea29ac22",
        "patch": "@@ -108,39 +108,39 @@ bool CheckTxScriptsSanity(const CMutableTransaction& tx)\n     return true;\n }\n \n-bool DecodeHexTx(CMutableTransaction& tx, const std::string& strHexTx, bool fTryNoWitness)\n+bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness, bool try_witness)\n {\n-    if (!IsHex(strHexTx)) {\n+    if (!IsHex(hex_tx)) {\n         return false;\n     }\n \n-    std::vector<unsigned char> txData(ParseHex(strHexTx));\n+    std::vector<unsigned char> txData(ParseHex(hex_tx));\n \n-    if (fTryNoWitness) {\n+    if (try_no_witness) {\n         CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n         try {\n             ssData >> tx;\n-            if (ssData.eof() && CheckTxScriptsSanity(tx)) {\n+            if (ssData.eof() && (!try_witness || CheckTxScriptsSanity(tx))) {\n                 return true;\n             }\n-        }\n-        catch (const std::exception&) {\n+        } catch (const std::exception&) {\n             // Fall through.\n         }\n     }\n \n-    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n-    try {\n-        ssData >> tx;\n-        if (!ssData.empty()) {\n-            return false;\n+    if (try_witness) {\n+        CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+        try {\n+            ssData >> tx;\n+            if (ssData.empty()) {\n+                return true;\n+            }\n+        } catch (const std::exception&) {\n+            // Fall through.\n         }\n     }\n-    catch (const std::exception&) {\n-        return false;\n-    }\n-\n-    return true;\n+    \n+    return false;\n }\n \n bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)"
      },
      {
        "sha": "e73319d146b08a6dc49895ac551f01974e5403d1",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=bbdbe805a25ae7c63e6237b3f30b8379ea29ac22",
        "patch": "@@ -93,11 +93,13 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createrawtransaction\", 1, \"outputs\" },\n     { \"createrawtransaction\", 2, \"locktime\" },\n     { \"createrawtransaction\", 3, \"replaceable\" },\n+    { \"decoderawtransaction\", 1, \"iswitness\" },\n     { \"signrawtransaction\", 1, \"prevtxs\" },\n     { \"signrawtransaction\", 2, \"privkeys\" },\n     { \"sendrawtransaction\", 1, \"allowhighfees\" },\n     { \"combinerawtransaction\", 0, \"txs\" },\n     { \"fundrawtransaction\", 1, \"options\" },\n+    { \"fundrawtransaction\", 2, \"iswitness\" },\n     { \"gettxout\", 1, \"n\" },\n     { \"gettxout\", 2, \"include_mempool\" },\n     { \"gettxoutproof\", 0, \"txids\" },"
      },
      {
        "sha": "249b59bdf83cf13b492eabdddf3761cbbe1076db",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=bbdbe805a25ae7c63e6237b3f30b8379ea29ac22",
        "patch": "@@ -419,13 +419,15 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n \n UniValue decoderawtransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"decoderawtransaction \\\"hexstring\\\"\\n\"\n+            \"decoderawtransaction \\\"hexstring\\\" ( iswitness )\\n\"\n             \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"hexstring\\\"      (string, required) The transaction hex string\\n\"\n+            \"2. iswitness          (boolean, optional) Whether the transaction hex is a serialized witness transaction\\n\"\n+            \"                         If iswitness is not present, heuristic tests will be used in decoding\\n\"\n \n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -473,12 +475,16 @@ UniValue decoderawtransaction(const JSONRPCRequest& request)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(request.params, {UniValue::VSTR});\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL});\n \n     CMutableTransaction mtx;\n \n-    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n+    bool try_witness = request.params[1].isNull() ? true : request.params[1].get_bool();\n+    bool try_no_witness = request.params[1].isNull() ? true : !request.params[1].get_bool();\n+\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), try_no_witness, try_witness)) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     TxToUniv(CTransaction(std::move(mtx)), uint256(), result, false);\n@@ -966,7 +972,7 @@ static const CRPCCommand commands[] =\n   //  --------------------- ------------------------  -----------------------  ----------\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      {\"txid\",\"verbose\"} },\n     { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n-    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   {\"hexstring\"} },\n+    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   {\"hexstring\",\"iswitness\"} },\n     { \"rawtransactions\",    \"decodescript\",           &decodescript,           {\"hexstring\"} },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     {\"hexstring\",\"allowhighfees\"} },\n     { \"rawtransactions\",    \"combinerawtransaction\",  &combinerawtransaction,  {\"txs\"} },"
      },
      {
        "sha": "22de4d8dc4ee15cec2ea1678577ae32a9bbe8aa1",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=bbdbe805a25ae7c63e6237b3f30b8379ea29ac22",
        "patch": "@@ -65,7 +65,9 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"size\").get_int(), 193);\n     BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"version\").get_int(), 1);\n     BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"locktime\").get_int(), 0);\n-    BOOST_CHECK_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" extra\"), std::runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" extra\"), std::runtime_error);\n+    BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" false\"));\n+    BOOST_CHECK_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" false extra\"), std::runtime_error);\n \n     BOOST_CHECK_THROW(CallRPC(\"signrawtransaction\"), std::runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"signrawtransaction null\"), std::runtime_error);"
      },
      {
        "sha": "5f80c57d1317b24169b3a288f2d44684b921923c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bbdbe805a25ae7c63e6237b3f30b8379ea29ac22",
        "patch": "@@ -2812,9 +2812,9 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-                            \"fundrawtransaction \\\"hexstring\\\" ( options )\\n\"\n+                            \"fundrawtransaction \\\"hexstring\\\" ( options iswitness )\\n\"\n                             \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n                             \"This will not modify existing inputs, and will add at most one change output to the outputs.\\n\"\n                             \"No existing outputs will be modified unless \\\"subtractFeeFromOutputs\\\" is specified.\\n\"\n@@ -2849,6 +2849,9 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"         \\\"CONSERVATIVE\\\"\\n\"\n                             \"   }\\n\"\n                             \"                         for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n+                            \"3. iswitness               (boolean, optional) Whether the transaction hex is a serialized witness transaction \\n\"\n+                            \"                              If iswitness is not present, heuristic tests will be used in decoding\\n\"\n+                            \n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n@@ -2881,7 +2884,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         coinControl.fAllowWatchOnly = request.params[1].get_bool();\n       }\n       else {\n-        RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n+        RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ, UniValue::VBOOL});\n \n         UniValue options = request.params[1];\n \n@@ -2949,8 +2952,11 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n     // parse hex string from parameter\n     CMutableTransaction tx;\n-    if (!DecodeHexTx(tx, request.params[0].get_str(), true))\n+    bool try_witness = request.params[2].isNull() ? true : request.params[2].get_bool();\n+    bool try_no_witness = request.params[2].isNull() ? true : !request.params[2].get_bool();\n+    if (!DecodeHexTx(tx, request.params[0].get_str(), try_no_witness, try_witness)) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n \n     if (tx.vout.size() == 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"TX must have at least one output\");\n@@ -3183,7 +3189,7 @@ extern UniValue importmulti(const JSONRPCRequest& request);\n static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           argNames\n     //  --------------------- ------------------------    -----------------------  ----------\n-    { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       {\"hexstring\",\"options\"} },\n+    { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       {\"hexstring\",\"options\",\"iswitness\"} },\n     { \"hidden\",             \"resendwallettransactions\", &resendwallettransactions, {} },\n     { \"wallet\",             \"abandontransaction\",       &abandontransaction,       {\"txid\"} },\n     { \"wallet\",             \"abortrescan\",              &abortrescan,              {} },"
      }
    ]
  },
  {
    "sha": "6f39ac04375a5f6ef803da59ba0b606123d63142",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjM5YWMwNDM3NWE1ZjZlZjgwM2RhNTliYTBiNjA2MTIzZDYzMTQy",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-09-03T09:26:47Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-09-05T23:24:59Z"
      },
      "message": "Add test for decoderawtransaction bool",
      "tree": {
        "sha": "cf97762420e7e0120cec6210108426a1e48b6a03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf97762420e7e0120cec6210108426a1e48b6a03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f39ac04375a5f6ef803da59ba0b606123d63142",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f39ac04375a5f6ef803da59ba0b606123d63142",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f39ac04375a5f6ef803da59ba0b606123d63142",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f39ac04375a5f6ef803da59ba0b606123d63142/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbdbe805a25ae7c63e6237b3f30b8379ea29ac22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbdbe805a25ae7c63e6237b3f30b8379ea29ac22"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "70620059ed2ae3a0a94ed52d2415131737478ca8",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f39ac04375a5f6ef803da59ba0b606123d63142/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f39ac04375a5f6ef803da59ba0b606123d63142/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=6f39ac04375a5f6ef803da59ba0b606123d63142",
        "patch": "@@ -169,6 +169,17 @@ def run_test(self):\n         self.sync_all()\n         assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n \n+        # decoderawtransaction tests\n+        # witness transaction\n+        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000000000000\"\n+        decrawtx = self.nodes[0].decoderawtransaction(encrawtx, True) # decode as witness transaction\n+        assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n+        assert_raises_jsonrpc(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # force decode as non-witness transaction\n+        # non-witness transaction\n+        encrawtx = \"01000000010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f505000000000000000000\"\n+        decrawtx = self.nodes[0].decoderawtransaction(encrawtx, False) # decode as non-witness transaction\n+        assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n+        \n         # getrawtransaction tests\n         # 1. valid parameters - only supply txid\n         txHash = rawTx[\"hash\"]"
      }
    ]
  }
]