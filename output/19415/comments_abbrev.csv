DrahtBot,2020-06-30 02:48:34,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21328 (net, refactor: pass uint16 CService::port as uint16 by jonatack)\n* #17160 (refactor: net: subnet lookup: use sing",https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-651490311,651490311,
naumenkogs,2020-06-30 12:50:56,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-651770190,651770190,
jamesob,2020-08-27 11:26:26,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-681889293,681889293,
Crypt-iQ,2020-09-01 01:39:05,"ACK 954fbb74971a9056043f6f98e09fb8f175244031\n\nCode change is straightforward to reason about.\nUbuntu 18:\n- `./configure --enable-fuzz --with-sanitizers=address,undefined,integer,fuzzer` reports no errors\n- valgrind reports no errors\n\nmacOS v10.15.4:\n- `./configure --enable-fuzz --with-sanitizers=address,fuzzer --disable-asm` reports no errors\n- `./configure --enable-fuzz --with-s",https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-684139879,684139879,
practicalswift,2020-09-17 13:15:40,"Had to rebase after the merge of 15c27c44417ab77a660b53b8574f7eb5261b19f8.\n\nChanged:\n\n```diff\ndiff --git a/src/Makefile.test.include b/src/Makefile.test.include\nindex 73eb9ad56..d9bf704bd 100644\n--- a/src/Makefile.test.include\n+++ b/src/Makefile.test.include\n@@ -755,7 +755,7 @@ test_fuzz_netaddress_SOURCES = test/fuzz/netaddress.cpp\n test_fuzz_netbase_dns_lookup_CPPFLAGS = $(AM",https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-694224795,694224795,
Crypt-iQ,2020-09-20 10:18:54,ACK  6f9bc3f,https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-695769870,695769870,
jonatack,2020-09-21 06:07:04,"Hi @D4nte, try adding `--enable-c++17` (and if that still fails, perhaps add `make distclean`). Edit: oh, for macOS. Not my wheelhouse, but have a look at `doc/fuzzing.md` if the first ideas don't help.",https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-695918328,695918328,
D4nte,2020-09-21 06:37:59,"> Hi @D4nte, try adding `--enable-c++17` (and if that still fails, perhaps add `make distclean`). Edit: oh, for macOS. Not my wheelhouse, but have a look at `doc/fuzzing.md` if the first ideas don't help.\n\nThanks @jonatack, I'll investigate and try again tomorrow. I am not yet that familiar with fuzzing.",https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-695930063,695930063,
Crypt-iQ,2020-09-21 09:06:33,"@D4nte for macOS builds, specifying the `address` and `undefined` sanitizers won't work. This is tracked here https://github.com/bitcoin/bitcoin/issues/19789",https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-695993133,695993133,
D4nte,2020-09-22 04:46:39,"> @D4nte for macOS builds, specifying the `address` and `undefined` sanitizers won't work. This is tracked here #19789\n\nThanks. Ran with `./configure --enable-fuzz --with-sanitizers=fuzzer,undefined CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ --disable-asm` for 6 hours no issue encountered.",https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-696506011,696506011,
Crypt-iQ,2020-09-22 11:57:05,"> > @D4nte for macOS builds, specifying the `address` and `undefined` sanitizers won't work. This is tracked here #19789\n> \n> Thanks. Ran with `./configure --enable-fuzz --with-sanitizers=fuzzer,undefined CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ --disable-asm` for 6 hours no issue encountered.\n\nKeep your seeds! We should PR them to bitcoin-core/qa-assets after t",https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-696673932,696673932,
D4nte,2020-09-23 04:50:24,"> > > @D4nte for macOS builds, specifying the `address` and `undefined` sanitizers won't work. This is tracked here #19789\n> > \n> > \n> > Thanks. Ran with `./configure --enable-fuzz --with-sanitizers=fuzzer,undefined CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ --disable-asm` for 6 hours no issue encountered.\n> \n> Keep your seeds! We should PR them to bitcoin-core/",https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-697132321,697132321,
practicalswift,2020-09-29 14:27:21,Updated: Added more assertions to the fuzzer to test relevant postconditions. Simplified the code that allows for mocking.,https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-700742399,700742399,
practicalswift,2021-01-18 21:59:05,@Crypt-iQ Thanks for reviewing. I believe all feedback should be addressed now: mind re-reviewing one last time (hopefully)? :),https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-762488182,762488182,
Crypt-iQ,2021-01-23 01:32:46,"I get the following complaint when running `--with-sanitizers=integer` because `CService` expects `uint16_t`\n```\nnetbase.cpp:240:37: runtime error: implicit conversion from type 'int' of value 210314121 (32-bit, signed) to type 'uint16_t' (aka 'unsigned short') changed the value to 9097 (16-bit, unsigned)\n```\n\nhttps://github.com/bitcoin/bitcoin/blob/1a22951f545b549b8b9a9266dc61a740a69d4d",https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-765811567,765811567,
Crypt-iQ,2021-01-23 15:39:17,Tested ACK 0f2cfb379d8a04efc15d14ee581d3d1ad8ccfd97,https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-766100113,766100113,
jonatack,2021-03-06 21:51:08,"Concept ACK, will review.\n\n\n> I get the following complaint when running `--with-sanitizers=integer` because `CService` expects `uint16_t`\n> \n> ```\n> netbase.cpp:240:37: runtime error: implicit conversion from type 'int' of value 210314121 (32-bit, signed) to type 'uint16_t' (aka 'unsigned short') changed the value to 9097 (16-bit, unsigned)\n> ```\n> \n> https://github.com/bitcoin/",https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-792068501,792068501,
practicalswift,2021-03-08 23:20:49,"@jonatack @Crypt-iQ Thanks for reviewing. Feedback addressed.\n\nThis PR should now hopefully be ready for final review :)",https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-793162398,793162398,
Crypt-iQ,2021-03-14 23:39:10,cr ACK e5280751890b02abb558b37eb0e0401493f148b4,https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-799002581,799002581,
jonatack,2021-03-15 11:18:06,"ACK  e528075\n\nThanks for the update and `s/aiTrav/ai_trav/` was a nice touchup.",https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-799338212,799338212,
Crypt-iQ,2020-08-03 01:07:56,"This is changed in bfc1455 to `WrappedGetAddrInfo`, why not do that here?",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r464148736,464148736,src/netbase.cpp
practicalswift,2020-08-03 16:33:59,"I could have done it already in the earlier commit. I suggest keeping the current commit order in not invalidate the ACK. Makes sense? :)\n\nThanks a lot for reviewing BTW ❤️ ",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r464526629,464526629,src/netbase.cpp
Crypt-iQ,2020-08-03 18:54:06,Yeah that makes sense. Fuzzing is a labor of love,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r464601204,464601204,src/netbase.cpp
D4nte,2020-09-20 11:04:44,"camelCase is used for the other arguments, is it fine to have an odd snake case argument?",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r491680254,491680254,src/netbase.cpp
jonatack,2020-09-21 06:10:01,"Yes, for new code it's preferred. See `doc/developer-notes.md`, ""Coding Style (C++), Symbol naming conventions"".",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r491809636,491809636,src/netbase.cpp
Crypt-iQ,2021-01-17 22:02:33,this is unused,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559244948,559244948,src/netbase.cpp
Crypt-iQ,2021-01-18 21:48:58,AFAICT `optional.h` isn't used,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559807984,559807984,src/test/fuzz/netbase_dns_lookup.cpp
Crypt-iQ,2021-01-18 21:50:00,The year has updated 🎇,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559808320,559808320,src/test/fuzz/netbase_dns_lookup.cpp
practicalswift,2021-01-18 21:54:30,Thanks! Fixed!,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559809623,559809623,src/netbase.cpp
practicalswift,2021-01-18 21:54:38,Thanks! Fixed!,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559809653,559809653,src/test/fuzz/netbase_dns_lookup.cpp
practicalswift,2021-01-18 21:54:44,Thanks! Fixed!,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559809678,559809678,src/test/fuzz/netbase_dns_lookup.cpp
vasild,2021-02-19 13:31:42,"nit: opening `{` on the same line as `if`. Or, given that `nErr` is not used elsewhere maybe:\n```suggestion\n    if (getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes) != 0) {\n        return {};\n```",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579186499,579186499,src/netbase.cpp
vasild,2021-02-19 13:39:20,"nits: this is not move-only change, so maybe worth fixing the style, opening `{` on the same line.",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579191531,579191531,src/netbase.cpp
vasild,2021-02-19 13:46:06,nit: opening `{` on the same line,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579195920,579195920,src/netbase.cpp
vasild,2021-02-19 13:49:18,"We can quit from this loop earlier if we got enough addresses:\n\n```cpp\n    for (const CNetAddr& resolved : dns_lookup_function(name, fAllowLookup)) { \n        if (nMaxSolutions > 0 && vIP.size() >= nMaxSolutions) { \n            break;\n        } \n        /* Never allow resolving to an internal address. Consider any such result invalid */\n        if (!resolved.IsInternal()) {\n     ",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579198098,579198098,src/netbase.cpp
vasild,2021-02-19 14:44:45,"nit: here and elsewhere in the test, those extra `{` and `}` are not necessary.",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579236111,579236111,src/test/fuzz/netbase_dns_lookup.cpp
vasild,2021-02-19 15:28:48,"This is good as it is. Maybe it would be a bit more convenient to have a single global variable of this type (resolver function) which defaults to `WrappedGetAddrInfo()` and is changed in the tests. Something like:\n\n```cpp\nDNSLookupFn g_dns_lookup = WrappedGetAddrInfo;\n\nbool LookupHost(..., DNSLookupFn dns_lookup_function = g_dns_lookup);\n\n// in the tests\ng_dns_lookup = fuzzed_dns_",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579269477,579269477,src/netbase.h
vasild,2021-02-22 11:59:37,"Actually, there is more to this: using such a global would allow testing methods that call `Lookup*()` themselves. In such cases it would not be possible for the test to override the dns resolver by calling `Lookup*()` with a non-default argument.\n\nFor example `CConnman::ConnectNode()` calls `Lookup()` without passing a non-default resolver to it (of course). If we use `g_dns_lookup`, then a t",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r580194951,580194951,src/netbase.h
practicalswift,2021-02-22 15:58:02,Now updated as suggested.,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r580366674,580366674,src/netbase.cpp
practicalswift,2021-02-22 16:00:18,They are intentional scope delimiters :),https://github.com/bitcoin/bitcoin/pull/19415#discussion_r580368612,580368612,src/test/fuzz/netbase_dns_lookup.cpp
practicalswift,2021-02-22 16:00:37,Good points. Now using `g_dns_lookup` as suggested.,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r580368891,580368891,src/netbase.h
Crypt-iQ,2021-03-07 00:36:51,This comment could be clarified - `vIP` + `nMaxSolutions` aren't used here,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r588951286,588951286,src/netbase.cpp
Crypt-iQ,2021-03-07 00:42:06,"After reading the `getaddrinfo` manpage, I realized `ConsumeNetAddr` can return `CNetAddr` with `m_scope_id` set for non link-local addresses, which is different from `getaddrinfo` behaviour. I'm not an expert here but I think there could be sanity-checking for that in `ConsumeNetAddr`.",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r588951763,588951763,src/test/fuzz/netbase_dns_lookup.cpp
jonatack,2021-03-07 18:07:51,"proposed comment (and maybe simplification, as we're not using `nErr` for anything, otherwise if we keep `nErr` it can be const)\n```diff\n-    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n-    if (nErr) {\n+    // getaddrinfo(3) returns 0 if it succeeds or a non-zero error code.\n+    if (getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes)) {\n```\n",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589066534,589066534,src/netbase.cpp
jonatack,2021-03-07 18:14:42,"here and line 76, can we use [named casts](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-casts-named)?",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589067318,589067318,src/netbase.cpp
jonatack,2021-03-07 18:25:10,"```suggestion\nDNSLookupFn g_dns_lookup{WrappedGetAddrInfo};\n```\n",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589068562,589068562,src/netbase.cpp
jonatack,2021-03-07 18:28:15,"```suggestion\n    struct addrinfo* aiRes{nullptr};\n```",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589068961,589068961,src/netbase.cpp
jonatack,2021-03-07 18:28:30,"```suggestion\n    struct addrinfo* aiTrav{aiRes};\n```",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589068994,589068994,src/netbase.cpp
jonatack,2021-03-07 18:34:47,Can this `if (nMaxSolutions > 0 && vIP.size() >= nMaxSolutions)` check be done before the loop?,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589069675,589069675,src/netbase.cpp
jonatack,2021-03-07 18:37:49,"suggestion, as this uses `CNetAddr` defined in `netaddress.h`\n```diff\n+#include <netaddress.h>\n```\n",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589070071,589070071,src/test/fuzz/netbase_dns_lookup.cpp
practicalswift,2021-03-08 22:40:41,Thanks! Addressed.,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589801035,589801035,src/test/fuzz/netbase_dns_lookup.cpp
practicalswift,2021-03-08 22:41:43,I don't think that is likely to matter in practice (don't hesitate to prove me wrong!). Leaving unchanged for now.,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589801738,589801738,src/test/fuzz/netbase_dns_lookup.cpp
practicalswift,2021-03-08 23:03:27,"Not that I can see: `vIP` is added to within the loop.\n\nPlease provide a diff explaining your suggestion if it still stands :)",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589813913,589813913,src/netbase.cpp
practicalswift,2021-03-08 23:05:56,Made `n_err` const as suggested. Now using the more explicit `if (n_err != 0)` which I find easier to read.,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589815033,589815033,src/netbase.cpp
practicalswift,2021-03-08 23:18:46,Sure. Now using `reinterpret_cast`.,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589821334,589821334,src/netbase.cpp
practicalswift,2021-03-08 23:19:00,Done!,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589821417,589821417,src/netbase.cpp
MarcoFalke,2021-03-15 11:10:40,style-nit: Any reason for this namespace and pointer? Looks like a lambda should be able to do the same in less code and smaller scope,https://github.com/bitcoin/bitcoin/pull/19415#discussion_r594244506,594244506,src/test/fuzz/netbase_dns_lookup.cpp
jonatack,2021-03-15 11:16:23,"You're right, thanks.",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r594247941,594247941,src/netbase.cpp
practicalswift,2021-03-15 15:31:40,"Using a lambda here is a good idea: less code, smaller scope and overall beautiful :)\n\nTBH I don't remember why I didn't do it that way nine months ago when this code was written: a lambda is strictly better AFAICT :)\n\nAddress in PR #21443.",https://github.com/bitcoin/bitcoin/pull/19415#discussion_r594440521,594440521,src/test/fuzz/netbase_dns_lookup.cpp
