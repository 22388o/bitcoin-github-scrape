[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/651490311",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-651490311",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 651490311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MTQ5MDMxMQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-30T02:48:34Z",
    "updated_at": "2021-03-07T09:48:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21328 (net, refactor: pass uint16 CService::port as uint16 by jonatack)\n* #17160 (refactor: net: subnet lookup: use single-result LookupHost() by theStack)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/651490311/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/651770190",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-651770190",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 651770190,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MTc3MDE5MA==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-30T12:50:56Z",
    "updated_at": "2020-06-30T12:50:56Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/651770190/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681889293",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-681889293",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 681889293,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTg4OTI5Mw==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-27T11:26:26Z",
    "updated_at": "2020-08-27T11:26:26Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681889293/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684139879",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-684139879",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 684139879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDEzOTg3OQ==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T01:39:05Z",
    "updated_at": "2020-09-01T01:39:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK 954fbb74971a9056043f6f98e09fb8f175244031\r\n\r\nCode change is straightforward to reason about.\r\nUbuntu 18:\r\n- `./configure --enable-fuzz --with-sanitizers=address,undefined,integer,fuzzer` reports no errors\r\n- valgrind reports no errors\r\n\r\nmacOS v10.15.4:\r\n- `./configure --enable-fuzz --with-sanitizers=address,fuzzer --disable-asm` reports no errors\r\n- `./configure --enable-fuzz --with-sanitizers=undefined,integer,fuzzer` reports the following:\r\n<details>\r\n<summary>implicit-signed-integer-truncation</summary>\r\n\r\n```\r\nnetbase.cpp:240:37: runtime error: implicit conversion from type 'int' of value -1877995509 (32-bit, signed) to type 'uint16_t' (aka 'unsigned short') changed the value to 4107 (16-bit, unsigned)\r\n    #0 0x109a6b73b in Lookup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<CService, std::__1::allocator<CService> >&, int, bool, unsigned int, std::__1::function<boost::optional<std::__1::vector<CNetAddr, std::__1::allocator<CNetAddr> > > (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool)>)+0x7ab (netbase_dns_lookup:x86_64+0x101c0273b)\r\n    #1 0x109a6cad8 in Lookup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, CService&, int, bool, std::__1::function<boost::optional<std::__1::vector<CNetAddr, std::__1::allocator<CNetAddr> > > (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool)>)+0x338 (netbase_dns_lookup:x86_64+0x101c03ad8)\r\n    #2 0x107e73228 in test_one_input(std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > const&)+0x5d8 (netbase_dns_lookup:x86_64+0x10000a228)\r\n    #3 0x10a304841 in LLVMFuzzerTestOneInput+0x151 (netbase_dns_lookup:x86_64+0x10249b841)\r\n    #4 0x10a66fac0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) FuzzerLoop.cpp:556\r\n    #5 0x10a66f205 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) FuzzerLoop.cpp:470\r\n    #6 0x10a6718a7 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::__1::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) FuzzerLoop.cpp:765\r\n    #7 0x10a671c09 in fuzzer::Fuzzer::Loop(std::__1::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) FuzzerLoop.cpp:792\r\n    #8 0x10a65f3ed in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) FuzzerDriver.cpp:829\r\n    #9 0x10a68a0b2 in main FuzzerMain.cpp:19\r\n    #10 0x7fff73778cc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)\r\n\r\nSUMMARY: UndefinedBehaviorSanitizer: implicit-signed-integer-truncation netbase.cpp:240:37 in\r\n\r\n```\r\n</details>",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684139879/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694224795",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-694224795",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 694224795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDIyNDc5NQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-17T13:15:40Z",
    "updated_at": "2020-09-17T13:15:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Had to rebase after the merge of 15c27c44417ab77a660b53b8574f7eb5261b19f8.\r\n\r\nChanged:\r\n\r\n```diff\r\ndiff --git a/src/Makefile.test.include b/src/Makefile.test.include\r\nindex 73eb9ad56..d9bf704bd 100644\r\n--- a/src/Makefile.test.include\r\n+++ b/src/Makefile.test.include\r\n@@ -755,7 +755,7 @@ test_fuzz_netaddress_SOURCES = test/fuzz/netaddress.cpp\r\n test_fuzz_netbase_dns_lookup_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\r\n test_fuzz_netbase_dns_lookup_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\r\n test_fuzz_netbase_dns_lookup_LDADD = $(FUZZ_SUITE_LD_COMMON)\r\n-test_fuzz_netbase_dns_lookup_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\r\n+test_fuzz_netbase_dns_lookup_LDFLAGS = $(FUZZ_SUITE_LDFLAGS_COMMON)\r\n test_fuzz_netbase_dns_lookup_SOURCES = test/fuzz/netbase_dns_lookup.cpp\r\n\r\n test_fuzz_out_point_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DOUT_POINT_DESERIALIZE=1\r\n```\r\n\r\n@Crypt-iQ Thanks a lot for reviewing. May I ask you a re-review and hopefully give your third Tested ACK for this change? :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694224795/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695769870",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-695769870",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 695769870,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTc2OTg3MA==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-20T10:18:54Z",
    "updated_at": "2020-09-20T10:18:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK  6f9bc3f",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695769870/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695918328",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-695918328",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 695918328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTkxODMyOA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-21T06:07:04Z",
    "updated_at": "2020-09-21T06:14:45Z",
    "author_association": "MEMBER",
    "body": "Hi @D4nte, try adding `--enable-c++17` (and if that still fails, perhaps add `make distclean`). Edit: oh, for macOS. Not my wheelhouse, but have a look at `doc/fuzzing.md` if the first ideas don't help.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695918328/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695930063",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-695930063",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 695930063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTkzMDA2Mw==",
    "user": {
      "login": "D4nte",
      "id": 300805,
      "node_id": "MDQ6VXNlcjMwMDgwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/300805?u=7235b6ab5bcae426dac759dba61e3bf4b94b6a38&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/D4nte",
      "html_url": "https://github.com/D4nte",
      "followers_url": "https://api.github.com/users/D4nte/followers",
      "following_url": "https://api.github.com/users/D4nte/following{/other_user}",
      "gists_url": "https://api.github.com/users/D4nte/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/D4nte/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/D4nte/subscriptions",
      "organizations_url": "https://api.github.com/users/D4nte/orgs",
      "repos_url": "https://api.github.com/users/D4nte/repos",
      "events_url": "https://api.github.com/users/D4nte/events{/privacy}",
      "received_events_url": "https://api.github.com/users/D4nte/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-21T06:37:59Z",
    "updated_at": "2020-09-21T06:37:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Hi @D4nte, try adding `--enable-c++17` (and if that still fails, perhaps add `make distclean`). Edit: oh, for macOS. Not my wheelhouse, but have a look at `doc/fuzzing.md` if the first ideas don't help.\r\n\r\nThanks @jonatack, I'll investigate and try again tomorrow. I am not yet that familiar with fuzzing.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695930063/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695993133",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-695993133",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 695993133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTk5MzEzMw==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-21T09:06:33Z",
    "updated_at": "2020-09-21T09:06:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@D4nte for macOS builds, specifying the `address` and `undefined` sanitizers won't work. This is tracked here https://github.com/bitcoin/bitcoin/issues/19789",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695993133/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696506011",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-696506011",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 696506011,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjUwNjAxMQ==",
    "user": {
      "login": "D4nte",
      "id": 300805,
      "node_id": "MDQ6VXNlcjMwMDgwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/300805?u=7235b6ab5bcae426dac759dba61e3bf4b94b6a38&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/D4nte",
      "html_url": "https://github.com/D4nte",
      "followers_url": "https://api.github.com/users/D4nte/followers",
      "following_url": "https://api.github.com/users/D4nte/following{/other_user}",
      "gists_url": "https://api.github.com/users/D4nte/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/D4nte/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/D4nte/subscriptions",
      "organizations_url": "https://api.github.com/users/D4nte/orgs",
      "repos_url": "https://api.github.com/users/D4nte/repos",
      "events_url": "https://api.github.com/users/D4nte/events{/privacy}",
      "received_events_url": "https://api.github.com/users/D4nte/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-22T04:46:39Z",
    "updated_at": "2020-09-22T04:46:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @D4nte for macOS builds, specifying the `address` and `undefined` sanitizers won't work. This is tracked here #19789\r\n\r\nThanks. Ran with `./configure --enable-fuzz --with-sanitizers=fuzzer,undefined CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ --disable-asm` for 6 hours no issue encountered.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696506011/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696673932",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-696673932",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 696673932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjY3MzkzMg==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-22T11:57:05Z",
    "updated_at": "2020-09-22T11:57:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > @D4nte for macOS builds, specifying the `address` and `undefined` sanitizers won't work. This is tracked here #19789\r\n> \r\n> Thanks. Ran with `./configure --enable-fuzz --with-sanitizers=fuzzer,undefined CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ --disable-asm` for 6 hours no issue encountered.\r\n\r\nKeep your seeds! We should PR them to bitcoin-core/qa-assets after this is merged.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696673932/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/697132321",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-697132321",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 697132321,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NzEzMjMyMQ==",
    "user": {
      "login": "D4nte",
      "id": 300805,
      "node_id": "MDQ6VXNlcjMwMDgwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/300805?u=7235b6ab5bcae426dac759dba61e3bf4b94b6a38&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/D4nte",
      "html_url": "https://github.com/D4nte",
      "followers_url": "https://api.github.com/users/D4nte/followers",
      "following_url": "https://api.github.com/users/D4nte/following{/other_user}",
      "gists_url": "https://api.github.com/users/D4nte/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/D4nte/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/D4nte/subscriptions",
      "organizations_url": "https://api.github.com/users/D4nte/orgs",
      "repos_url": "https://api.github.com/users/D4nte/repos",
      "events_url": "https://api.github.com/users/D4nte/events{/privacy}",
      "received_events_url": "https://api.github.com/users/D4nte/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-23T04:50:24Z",
    "updated_at": "2020-09-23T04:50:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > > @D4nte for macOS builds, specifying the `address` and `undefined` sanitizers won't work. This is tracked here #19789\r\n> > \r\n> > \r\n> > Thanks. Ran with `./configure --enable-fuzz --with-sanitizers=fuzzer,undefined CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ --disable-asm` for 6 hours no issue encountered.\r\n> \r\n> Keep your seeds! We should PR them to bitcoin-core/qa-assets after this is merged.\r\n\r\nOk thanks, I did not delete anything. I'll prepare a branch/fork to PR them. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/697132321/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/700742399",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-700742399",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 700742399,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMDc0MjM5OQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-29T14:27:21Z",
    "updated_at": "2020-09-29T14:27:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Updated: Added more assertions to the fuzzer to test relevant postconditions. Simplified the code that allows for mocking.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/700742399/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/762488182",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-762488182",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 762488182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2MjQ4ODE4Mg==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-18T21:59:05Z",
    "updated_at": "2021-01-18T21:59:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Crypt-iQ Thanks for reviewing. I believe all feedback should be addressed now: mind re-reviewing one last time (hopefully)? :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/762488182/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765811567",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-765811567",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 765811567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTgxMTU2Nw==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-23T01:32:46Z",
    "updated_at": "2021-01-23T01:37:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "I get the following complaint when running `--with-sanitizers=integer` because `CService` expects `uint16_t`\r\n```\r\nnetbase.cpp:240:37: runtime error: implicit conversion from type 'int' of value 210314121 (32-bit, signed) to type 'uint16_t' (aka 'unsigned short') changed the value to 9097 (16-bit, unsigned)\r\n```\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/1a22951f545b549b8b9a9266dc61a740a69d4dbe/src/netbase.cpp#L240",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765811567/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/766100113",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-766100113",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 766100113,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NjEwMDExMw==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-23T15:39:17Z",
    "updated_at": "2021-01-23T15:39:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tested ACK 0f2cfb379d8a04efc15d14ee581d3d1ad8ccfd97",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/766100113/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/792068501",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-792068501",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 792068501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MjA2ODUwMQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-06T21:51:08Z",
    "updated_at": "2021-03-06T21:51:08Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, will review.\r\n\r\n\r\n> I get the following complaint when running `--with-sanitizers=integer` because `CService` expects `uint16_t`\r\n> \r\n> ```\r\n> netbase.cpp:240:37: runtime error: implicit conversion from type 'int' of value 210314121 (32-bit, signed) to type 'uint16_t' (aka 'unsigned short') changed the value to 9097 (16-bit, unsigned)\r\n> ```\r\n> \r\n> https://github.com/bitcoin/bitcoin/blob/1a22951f545b549b8b9a9266dc61a740a69d4dbe/src/netbase.cpp#L240\r\n\r\n@Crypt-iQ Good find. This should be fixed with #21328.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/792068501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/793162398",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-793162398",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 793162398,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MzE2MjM5OA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-08T23:20:49Z",
    "updated_at": "2021-03-08T23:20:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jonatack @Crypt-iQ Thanks for reviewing. Feedback addressed.\r\n\r\nThis PR should now hopefully be ready for final review :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/793162398/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799002581",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-799002581",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 799002581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTAwMjU4MQ==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-14T23:39:10Z",
    "updated_at": "2021-03-14T23:39:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "cr ACK e5280751890b02abb558b37eb0e0401493f148b4",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799002581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799338212",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-799338212",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19415",
    "id": 799338212,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTMzODIxMg==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-15T11:18:06Z",
    "updated_at": "2021-03-15T11:18:06Z",
    "author_association": "MEMBER",
    "body": "ACK  e528075\r\n\r\nThanks for the update and `s/aiTrav/ai_trav/` was a nice touchup.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799338212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464148736",
    "pull_request_review_id": 459698955,
    "id": 464148736,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0ODczNg==",
    "diff_hunk": "@@ -61,31 +62,9 @@ std::string GetNetworkName(enum Network net) {\n     }\n }\n \n-bool static LookupIntern(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n-{\n-    vIP.clear();\n-\n-    if (!ValidAsCString(name)) {\n-        return false;\n-    }\n-\n-    {\n-        CNetAddr addr;\n-        // From our perspective, onion addresses are not hostnames but rather\n-        // direct encodings of CNetAddr much like IPv4 dotted-decimal notation\n-        // or IPv6 colon-separated hextet notation. Since we can't use\n-        // getaddrinfo to decode them and it wouldn't make sense to resolve\n-        // them, we return a network address representing it instead. See\n-        // CNetAddr::SetSpecial(const std::string&) for more details.\n-        if (addr.SetSpecial(name)) {\n-            vIP.push_back(addr);\n-            return true;\n-        }\n-    }\n-\n+static Optional<std::vector<CNetAddr>> LookupInternGetAddrInfo(const std::string& name, bool fAllowLookup) {",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "a9582c7dc1e33be065b6e7453bcdf81b973ca9c0",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is changed in bfc1455 to `WrappedGetAddrInfo`, why not do that here?",
    "created_at": "2020-08-03T01:07:56Z",
    "updated_at": "2021-03-08T23:18:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r464148736",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464148736"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r464148736"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464148736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 65,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464526629",
    "pull_request_review_id": 460172066,
    "id": 464526629,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyNjYyOQ==",
    "diff_hunk": "@@ -61,31 +62,9 @@ std::string GetNetworkName(enum Network net) {\n     }\n }\n \n-bool static LookupIntern(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n-{\n-    vIP.clear();\n-\n-    if (!ValidAsCString(name)) {\n-        return false;\n-    }\n-\n-    {\n-        CNetAddr addr;\n-        // From our perspective, onion addresses are not hostnames but rather\n-        // direct encodings of CNetAddr much like IPv4 dotted-decimal notation\n-        // or IPv6 colon-separated hextet notation. Since we can't use\n-        // getaddrinfo to decode them and it wouldn't make sense to resolve\n-        // them, we return a network address representing it instead. See\n-        // CNetAddr::SetSpecial(const std::string&) for more details.\n-        if (addr.SetSpecial(name)) {\n-            vIP.push_back(addr);\n-            return true;\n-        }\n-    }\n-\n+static Optional<std::vector<CNetAddr>> LookupInternGetAddrInfo(const std::string& name, bool fAllowLookup) {",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "a9582c7dc1e33be065b6e7453bcdf81b973ca9c0",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I could have done it already in the earlier commit. I suggest keeping the current commit order in not invalidate the ACK. Makes sense? :)\r\n\r\nThanks a lot for reviewing BTW \u2764\ufe0f ",
    "created_at": "2020-08-03T16:33:59Z",
    "updated_at": "2021-03-08T23:18:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r464526629",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464526629"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r464526629"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464526629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 65,
    "side": "RIGHT",
    "in_reply_to_id": 464148736
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464601204",
    "pull_request_review_id": 460265002,
    "id": 464601204,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwMTIwNA==",
    "diff_hunk": "@@ -61,31 +62,9 @@ std::string GetNetworkName(enum Network net) {\n     }\n }\n \n-bool static LookupIntern(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n-{\n-    vIP.clear();\n-\n-    if (!ValidAsCString(name)) {\n-        return false;\n-    }\n-\n-    {\n-        CNetAddr addr;\n-        // From our perspective, onion addresses are not hostnames but rather\n-        // direct encodings of CNetAddr much like IPv4 dotted-decimal notation\n-        // or IPv6 colon-separated hextet notation. Since we can't use\n-        // getaddrinfo to decode them and it wouldn't make sense to resolve\n-        // them, we return a network address representing it instead. See\n-        // CNetAddr::SetSpecial(const std::string&) for more details.\n-        if (addr.SetSpecial(name)) {\n-            vIP.push_back(addr);\n-            return true;\n-        }\n-    }\n-\n+static Optional<std::vector<CNetAddr>> LookupInternGetAddrInfo(const std::string& name, bool fAllowLookup) {",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "a9582c7dc1e33be065b6e7453bcdf81b973ca9c0",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah that makes sense. Fuzzing is a labor of love",
    "created_at": "2020-08-03T18:54:06Z",
    "updated_at": "2021-03-08T23:18:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r464601204",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464601204"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r464601204"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464601204/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 65,
    "side": "RIGHT",
    "in_reply_to_id": 464148736
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491680254",
    "pull_request_review_id": 492188056,
    "id": 491680254,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4MDI1NA==",
    "diff_hunk": "@@ -204,7 +222,7 @@ bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup)\n  * @returns Whether or not the service string successfully resolved to any\n  *          resulting services.\n  */\n-bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)\n+bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions, std::function<Optional<std::vector<CNetAddr>>(const std::string&, bool)> mockable_dns_lookup_function)",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 175,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "6f9bc3f67bd177cc7a5dc4f93d0c20c2d23307ec",
    "user": {
      "login": "D4nte",
      "id": 300805,
      "node_id": "MDQ6VXNlcjMwMDgwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/300805?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/D4nte",
      "html_url": "https://github.com/D4nte",
      "followers_url": "https://api.github.com/users/D4nte/followers",
      "following_url": "https://api.github.com/users/D4nte/following{/other_user}",
      "gists_url": "https://api.github.com/users/D4nte/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/D4nte/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/D4nte/subscriptions",
      "organizations_url": "https://api.github.com/users/D4nte/orgs",
      "repos_url": "https://api.github.com/users/D4nte/repos",
      "events_url": "https://api.github.com/users/D4nte/events{/privacy}",
      "received_events_url": "https://api.github.com/users/D4nte/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "camelCase is used for the other arguments, is it fine to have an odd snake case argument?",
    "created_at": "2020-09-20T11:04:44Z",
    "updated_at": "2021-03-08T23:18:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r491680254",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491680254"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r491680254"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491680254/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 225,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491809636",
    "pull_request_review_id": 492297764,
    "id": 491809636,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgwOTYzNg==",
    "diff_hunk": "@@ -204,7 +222,7 @@ bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup)\n  * @returns Whether or not the service string successfully resolved to any\n  *          resulting services.\n  */\n-bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)\n+bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions, std::function<Optional<std::vector<CNetAddr>>(const std::string&, bool)> mockable_dns_lookup_function)",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 175,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "6f9bc3f67bd177cc7a5dc4f93d0c20c2d23307ec",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, for new code it's preferred. See `doc/developer-notes.md`, \"Coding Style (C++), Symbol naming conventions\".",
    "created_at": "2020-09-21T06:10:01Z",
    "updated_at": "2021-03-08T23:18:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r491809636",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491809636"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r491809636"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491809636/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 225,
    "side": "RIGHT",
    "in_reply_to_id": 491680254
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559244948",
    "pull_request_review_id": 570098918,
    "id": 559244948,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0NDk0OA==",
    "diff_hunk": "@@ -40,6 +41,55 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n static const int SOCKS5_RECV_TIMEOUT = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup) {\n+    struct addrinfo aiHint;\n+    memset(&aiHint, 0, sizeof(struct addrinfo));\n+\n+    // We want a TCP port, which is a streaming socket type\n+    aiHint.ai_socktype = SOCK_STREAM;\n+    aiHint.ai_protocol = IPPROTO_TCP;\n+    // We don't care which address family (IPv4 or IPv6) is returned\n+    aiHint.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    // return addresses whose family we have an address configured for.\n+    //\n+    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // getaddrinfo to only decode numerical network addresses and suppress\n+    // hostname lookups.\n+    aiHint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+\n+    struct addrinfo *aiRes = nullptr;\n+    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n+    if (nErr)\n+    {\n+        return {};\n+    }\n+\n+    // Traverse the linked list starting with aiTrav, add all non-internal\n+    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.\n+    struct addrinfo *aiTrav = aiRes;\n+    std::vector<CNetAddr> resolved_addresses;\n+    while (aiTrav != nullptr)\n+    {\n+        CNetAddr resolved;",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 42,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "daea0188c64fc39fd2c44a89bb867fe6984b6945",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "this is unused",
    "created_at": "2021-01-17T22:02:33Z",
    "updated_at": "2021-03-08T23:18:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559244948",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559244948"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559244948"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559244948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559807984",
    "pull_request_review_id": 570792503,
    "id": 559807984,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTgwNzk4NA==",
    "diff_hunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <netbase.h>\n+#include <optional.h>",
    "path": "src/test/fuzz/netbase_dns_lookup.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "63e1d7be1e066c4bcf46b20bdd6cca6ea4ba936d",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "AFAICT `optional.h` isn't used",
    "created_at": "2021-01-18T21:48:58Z",
    "updated_at": "2021-03-08T23:18:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559807984",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559807984"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559807984"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559807984/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 6,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559808320",
    "pull_request_review_id": 570792503,
    "id": 559808320,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTgwODMyMA==",
    "diff_hunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2020 The Bitcoin Core developers",
    "path": "src/test/fuzz/netbase_dns_lookup.cpp",
    "position": null,
    "original_position": 1,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "63e1d7be1e066c4bcf46b20bdd6cca6ea4ba936d",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The year has updated \ud83c\udf87",
    "created_at": "2021-01-18T21:50:00Z",
    "updated_at": "2021-03-08T23:18:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559808320",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559808320"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559808320"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559808320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559809623",
    "pull_request_review_id": 570794303,
    "id": 559809623,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTgwOTYyMw==",
    "diff_hunk": "@@ -40,6 +41,55 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n static const int SOCKS5_RECV_TIMEOUT = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup) {\n+    struct addrinfo aiHint;\n+    memset(&aiHint, 0, sizeof(struct addrinfo));\n+\n+    // We want a TCP port, which is a streaming socket type\n+    aiHint.ai_socktype = SOCK_STREAM;\n+    aiHint.ai_protocol = IPPROTO_TCP;\n+    // We don't care which address family (IPv4 or IPv6) is returned\n+    aiHint.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    // return addresses whose family we have an address configured for.\n+    //\n+    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // getaddrinfo to only decode numerical network addresses and suppress\n+    // hostname lookups.\n+    aiHint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+\n+    struct addrinfo *aiRes = nullptr;\n+    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n+    if (nErr)\n+    {\n+        return {};\n+    }\n+\n+    // Traverse the linked list starting with aiTrav, add all non-internal\n+    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.\n+    struct addrinfo *aiTrav = aiRes;\n+    std::vector<CNetAddr> resolved_addresses;\n+    while (aiTrav != nullptr)\n+    {\n+        CNetAddr resolved;",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 42,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "daea0188c64fc39fd2c44a89bb867fe6984b6945",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks! Fixed!",
    "created_at": "2021-01-18T21:54:30Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559809623",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559809623"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559809623"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559809623/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT",
    "in_reply_to_id": 559244948
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559809653",
    "pull_request_review_id": 570794352,
    "id": 559809653,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTgwOTY1Mw==",
    "diff_hunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <netbase.h>\n+#include <optional.h>",
    "path": "src/test/fuzz/netbase_dns_lookup.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "63e1d7be1e066c4bcf46b20bdd6cca6ea4ba936d",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks! Fixed!",
    "created_at": "2021-01-18T21:54:38Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559809653",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559809653"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559809653"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559809653/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 6,
    "side": "RIGHT",
    "in_reply_to_id": 559807984
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559809678",
    "pull_request_review_id": 570794382,
    "id": 559809678,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTgwOTY3OA==",
    "diff_hunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2020 The Bitcoin Core developers",
    "path": "src/test/fuzz/netbase_dns_lookup.cpp",
    "position": null,
    "original_position": 1,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "63e1d7be1e066c4bcf46b20bdd6cca6ea4ba936d",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks! Fixed!",
    "created_at": "2021-01-18T21:54:44Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559809678",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559809678"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r559809678"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559809678/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1,
    "side": "RIGHT",
    "in_reply_to_id": 559808320
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579186499",
    "pull_request_review_id": 594188790,
    "id": 579186499,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTE4NjQ5OQ==",
    "diff_hunk": "@@ -44,6 +44,54 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n static const int SOCKS5_RECV_TIMEOUT = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup) {\n+    struct addrinfo aiHint;\n+    memset(&aiHint, 0, sizeof(struct addrinfo));\n+\n+    // We want a TCP port, which is a streaming socket type\n+    aiHint.ai_socktype = SOCK_STREAM;\n+    aiHint.ai_protocol = IPPROTO_TCP;\n+    // We don't care which address family (IPv4 or IPv6) is returned\n+    aiHint.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    // return addresses whose family we have an address configured for.\n+    //\n+    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // getaddrinfo to only decode numerical network addresses and suppress\n+    // hostname lookups.\n+    aiHint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+\n+    struct addrinfo *aiRes = nullptr;\n+    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n+    if (nErr)\n+    {\n+        return {};",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "522b3b4bc276378f93f1b6109be9c66a7f8bfd38",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: opening `{` on the same line as `if`. Or, given that `nErr` is not used elsewhere maybe:\r\n```suggestion\r\n    if (getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes) != 0) {\r\n        return {};\r\n```",
    "created_at": "2021-02-19T13:31:42Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579186499",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579186499"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579186499"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579186499/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 65,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 64,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579191531",
    "pull_request_review_id": 594188790,
    "id": 579191531,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTE5MTUzMQ==",
    "diff_hunk": "@@ -44,6 +44,54 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n static const int SOCKS5_RECV_TIMEOUT = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup) {\n+    struct addrinfo aiHint;\n+    memset(&aiHint, 0, sizeof(struct addrinfo));\n+\n+    // We want a TCP port, which is a streaming socket type\n+    aiHint.ai_socktype = SOCK_STREAM;\n+    aiHint.ai_protocol = IPPROTO_TCP;\n+    // We don't care which address family (IPv4 or IPv6) is returned\n+    aiHint.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    // return addresses whose family we have an address configured for.\n+    //\n+    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // getaddrinfo to only decode numerical network addresses and suppress\n+    // hostname lookups.\n+    aiHint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+\n+    struct addrinfo *aiRes = nullptr;\n+    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n+    if (nErr)\n+    {\n+        return {};\n+    }\n+\n+    // Traverse the linked list starting with aiTrav, add all non-internal\n+    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.\n+    struct addrinfo *aiTrav = aiRes;\n+    std::vector<CNetAddr> resolved_addresses;\n+    while (aiTrav != nullptr)\n+    {\n+        if (aiTrav->ai_family == AF_INET)\n+        {\n+            assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in));\n+            resolved_addresses.emplace_back(((struct sockaddr_in*)(aiTrav->ai_addr))->sin_addr);\n+        }\n+        if (aiTrav->ai_family == AF_INET6)\n+        {",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 40,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "522b3b4bc276378f93f1b6109be9c66a7f8bfd38",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nits: this is not move-only change, so maybe worth fixing the style, opening `{` on the same line.",
    "created_at": "2021-02-19T13:39:20Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579191531",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579191531"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579191531"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579191531/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 75,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 83,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579195920",
    "pull_request_review_id": 594188790,
    "id": 579195920,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTE5NTkyMA==",
    "diff_hunk": "@@ -108,54 +156,17 @@ bool static LookupIntern(const std::string& name, std::vector<CNetAddr>& vIP, un\n         }\n     }\n \n-    struct addrinfo aiHint;\n-    memset(&aiHint, 0, sizeof(struct addrinfo));\n-\n-    // We want a TCP port, which is a streaming socket type\n-    aiHint.ai_socktype = SOCK_STREAM;\n-    aiHint.ai_protocol = IPPROTO_TCP;\n-    // We don't care which address family (IPv4 or IPv6) is returned\n-    aiHint.ai_family = AF_UNSPEC;\n-    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n-    // return addresses whose family we have an address configured for.\n-    //\n-    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n-    // getaddrinfo to only decode numerical network addresses and suppress\n-    // hostname lookups.\n-    aiHint.ai_flags = fAllowLookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n-    struct addrinfo *aiRes = nullptr;\n-    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n-    if (nErr)\n-        return false;\n-\n-    // Traverse the linked list starting with aiTrav, add all non-internal\n-    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.\n-    struct addrinfo *aiTrav = aiRes;\n-    while (aiTrav != nullptr && (nMaxSolutions == 0 || vIP.size() < nMaxSolutions))\n+    for (const CNetAddr& resolved : dns_lookup_function(name, fAllowLookup))\n     {\n-        CNetAddr resolved;\n-        if (aiTrav->ai_family == AF_INET)\n+        if (nMaxSolutions == 0 || vIP.size() < nMaxSolutions)\n         {",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 97,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "522b3b4bc276378f93f1b6109be9c66a7f8bfd38",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: opening `{` on the same line",
    "created_at": "2021-02-19T13:46:06Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579195920",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579195920"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579195920"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579195920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 159,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 162,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579198098",
    "pull_request_review_id": 594188790,
    "id": 579198098,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTE5ODA5OA==",
    "diff_hunk": "@@ -108,54 +156,17 @@ bool static LookupIntern(const std::string& name, std::vector<CNetAddr>& vIP, un\n         }\n     }\n \n-    struct addrinfo aiHint;\n-    memset(&aiHint, 0, sizeof(struct addrinfo));\n-\n-    // We want a TCP port, which is a streaming socket type\n-    aiHint.ai_socktype = SOCK_STREAM;\n-    aiHint.ai_protocol = IPPROTO_TCP;\n-    // We don't care which address family (IPv4 or IPv6) is returned\n-    aiHint.ai_family = AF_UNSPEC;\n-    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n-    // return addresses whose family we have an address configured for.\n-    //\n-    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n-    // getaddrinfo to only decode numerical network addresses and suppress\n-    // hostname lookups.\n-    aiHint.ai_flags = fAllowLookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n-    struct addrinfo *aiRes = nullptr;\n-    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n-    if (nErr)\n-        return false;\n-\n-    // Traverse the linked list starting with aiTrav, add all non-internal\n-    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.\n-    struct addrinfo *aiTrav = aiRes;\n-    while (aiTrav != nullptr && (nMaxSolutions == 0 || vIP.size() < nMaxSolutions))\n+    for (const CNetAddr& resolved : dns_lookup_function(name, fAllowLookup))",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 92,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "522b3b4bc276378f93f1b6109be9c66a7f8bfd38",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "We can quit from this loop earlier if we got enough addresses:\r\n\r\n```cpp\r\n    for (const CNetAddr& resolved : dns_lookup_function(name, fAllowLookup)) { \r\n        if (nMaxSolutions > 0 && vIP.size() >= nMaxSolutions) { \r\n            break;\r\n        } \r\n        /* Never allow resolving to an internal address. Consider any such result invalid */\r\n        if (!resolved.IsInternal()) {\r\n            vIP.push_back(resolved);\r\n        }   \r\n    } \r\n```",
    "created_at": "2021-02-19T13:49:18Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579198098",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579198098"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579198098"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579198098/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 159,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579236111",
    "pull_request_review_id": 594188790,
    "id": 579236111,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTIzNjExMQ==",
    "diff_hunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <netbase.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+FuzzedDataProvider* fuzzed_data_provider_ptr = nullptr;\n+\n+std::vector<CNetAddr> fuzzed_dns_lookup_function(const std::string& name, bool allow_lookup)\n+{\n+    std::vector<CNetAddr> resolved_addresses;\n+    while (fuzzed_data_provider_ptr->ConsumeBool()) {\n+        resolved_addresses.push_back(ConsumeNetAddr(*fuzzed_data_provider_ptr));\n+    }\n+    return resolved_addresses;\n+}\n+} // namespace\n+\n+FUZZ_TARGET(netbase_dns_lookup)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    fuzzed_data_provider_ptr = &fuzzed_data_provider;\n+    const std::string name = fuzzed_data_provider.ConsumeRandomLengthString(512);\n+    const unsigned int max_results = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+    const bool allow_lookup = fuzzed_data_provider.ConsumeBool();\n+    const int default_port = fuzzed_data_provider.ConsumeIntegral<int>();\n+    {\n+        std::vector<CNetAddr> resolved_addresses;\n+        if (LookupHost(name, resolved_addresses, max_results, allow_lookup, fuzzed_dns_lookup_function)) {\n+            for (const CNetAddr& resolved_address : resolved_addresses) {\n+                assert(!resolved_address.IsInternal());\n+            }\n+        }\n+        assert(resolved_addresses.size() <= max_results || max_results == 0);\n+    }\n+    {\n+        CNetAddr resolved_address;\n+        if (LookupHost(name, resolved_address, allow_lookup, fuzzed_dns_lookup_function)) {\n+            assert(!resolved_address.IsInternal());\n+        }\n+    }\n+    {\n+        std::vector<CService> resolved_services;\n+        if (Lookup(name, resolved_services, default_port, allow_lookup, max_results, fuzzed_dns_lookup_function)) {\n+            for (const CNetAddr& resolved_service : resolved_services) {\n+                assert(!resolved_service.IsInternal());\n+            }\n+        }\n+        assert(resolved_services.size() <= max_results || max_results == 0);\n+    }\n+    {\n+        CService resolved_service;\n+        if (Lookup(name, resolved_service, default_port, allow_lookup, fuzzed_dns_lookup_function)) {\n+            assert(!resolved_service.IsInternal());\n+        }\n+    }\n+    {\n+        CService resolved_service = LookupNumeric(name, default_port, fuzzed_dns_lookup_function);\n+        assert(!resolved_service.IsInternal());\n+    }",
    "path": "src/test/fuzz/netbase_dns_lookup.cpp",
    "position": 69,
    "original_position": 68,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "522b3b4bc276378f93f1b6109be9c66a7f8bfd38",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: here and elsewhere in the test, those extra `{` and `}` are not necessary.",
    "created_at": "2021-02-19T14:44:45Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579236111",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579236111"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579236111"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579236111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 66,
    "original_start_line": 65,
    "start_side": "RIGHT",
    "line": 69,
    "original_line": 69,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579269477",
    "pull_request_review_id": 594298054,
    "id": 579269477,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTI2OTQ3Nw==",
    "diff_hunk": "@@ -50,12 +55,14 @@ bool IsProxy(const CNetAddr &addr);\n bool SetNameProxy(const proxyType &addrProxy);\n bool HaveNameProxy();\n bool GetNameProxy(proxyType &nameProxyOut);\n-bool LookupHost(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup);\n-bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup);\n-bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllowLookup);\n-bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n-CService LookupNumeric(const std::string& name, int portDefault = 0);\n-bool LookupSubNet(const std::string& strSubnet, CSubNet& subnet);\n+\n+using DNSLookupFn = std::function<std::vector<CNetAddr>(const std::string&, bool)>;",
    "path": "src/netbase.h",
    "position": 23,
    "original_position": 23,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "522b3b4bc276378f93f1b6109be9c66a7f8bfd38",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is good as it is. Maybe it would be a bit more convenient to have a single global variable of this type (resolver function) which defaults to `WrappedGetAddrInfo()` and is changed in the tests. Something like:\r\n\r\n```cpp\r\nDNSLookupFn g_dns_lookup = WrappedGetAddrInfo;\r\n\r\nbool LookupHost(..., DNSLookupFn dns_lookup_function = g_dns_lookup);\r\n\r\n// in the tests\r\ng_dns_lookup = fuzzed_dns_lookup_function;\r\n```",
    "created_at": "2021-02-19T15:28:48Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579269477",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579269477"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r579269477"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579269477/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 83,
    "original_line": 83,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580194951",
    "pull_request_review_id": 595276225,
    "id": 580194951,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDE5NDk1MQ==",
    "diff_hunk": "@@ -50,12 +55,14 @@ bool IsProxy(const CNetAddr &addr);\n bool SetNameProxy(const proxyType &addrProxy);\n bool HaveNameProxy();\n bool GetNameProxy(proxyType &nameProxyOut);\n-bool LookupHost(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup);\n-bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup);\n-bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllowLookup);\n-bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n-CService LookupNumeric(const std::string& name, int portDefault = 0);\n-bool LookupSubNet(const std::string& strSubnet, CSubNet& subnet);\n+\n+using DNSLookupFn = std::function<std::vector<CNetAddr>(const std::string&, bool)>;",
    "path": "src/netbase.h",
    "position": 23,
    "original_position": 23,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "522b3b4bc276378f93f1b6109be9c66a7f8bfd38",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Actually, there is more to this: using such a global would allow testing methods that call `Lookup*()` themselves. In such cases it would not be possible for the test to override the dns resolver by calling `Lookup*()` with a non-default argument.\r\n\r\nFor example `CConnman::ConnectNode()` calls `Lookup()` without passing a non-default resolver to it (of course). If we use `g_dns_lookup`, then a test could modify its value to point to a fuzzed resolver and then call `CConnman::ConnectNode()`.",
    "created_at": "2021-02-22T11:59:37Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r580194951",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580194951"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r580194951"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580194951/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 83,
    "original_line": 83,
    "side": "RIGHT",
    "in_reply_to_id": 579269477
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580366674",
    "pull_request_review_id": 595502710,
    "id": 580366674,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDM2NjY3NA==",
    "diff_hunk": "@@ -108,54 +156,17 @@ bool static LookupIntern(const std::string& name, std::vector<CNetAddr>& vIP, un\n         }\n     }\n \n-    struct addrinfo aiHint;\n-    memset(&aiHint, 0, sizeof(struct addrinfo));\n-\n-    // We want a TCP port, which is a streaming socket type\n-    aiHint.ai_socktype = SOCK_STREAM;\n-    aiHint.ai_protocol = IPPROTO_TCP;\n-    // We don't care which address family (IPv4 or IPv6) is returned\n-    aiHint.ai_family = AF_UNSPEC;\n-    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n-    // return addresses whose family we have an address configured for.\n-    //\n-    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n-    // getaddrinfo to only decode numerical network addresses and suppress\n-    // hostname lookups.\n-    aiHint.ai_flags = fAllowLookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n-    struct addrinfo *aiRes = nullptr;\n-    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n-    if (nErr)\n-        return false;\n-\n-    // Traverse the linked list starting with aiTrav, add all non-internal\n-    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.\n-    struct addrinfo *aiTrav = aiRes;\n-    while (aiTrav != nullptr && (nMaxSolutions == 0 || vIP.size() < nMaxSolutions))\n+    for (const CNetAddr& resolved : dns_lookup_function(name, fAllowLookup))",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 92,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "522b3b4bc276378f93f1b6109be9c66a7f8bfd38",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Now updated as suggested.",
    "created_at": "2021-02-22T15:58:02Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r580366674",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580366674"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r580366674"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580366674/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 159,
    "side": "RIGHT",
    "in_reply_to_id": 579198098
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580368612",
    "pull_request_review_id": 595505257,
    "id": 580368612,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDM2ODYxMg==",
    "diff_hunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <netbase.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+FuzzedDataProvider* fuzzed_data_provider_ptr = nullptr;\n+\n+std::vector<CNetAddr> fuzzed_dns_lookup_function(const std::string& name, bool allow_lookup)\n+{\n+    std::vector<CNetAddr> resolved_addresses;\n+    while (fuzzed_data_provider_ptr->ConsumeBool()) {\n+        resolved_addresses.push_back(ConsumeNetAddr(*fuzzed_data_provider_ptr));\n+    }\n+    return resolved_addresses;\n+}\n+} // namespace\n+\n+FUZZ_TARGET(netbase_dns_lookup)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    fuzzed_data_provider_ptr = &fuzzed_data_provider;\n+    const std::string name = fuzzed_data_provider.ConsumeRandomLengthString(512);\n+    const unsigned int max_results = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+    const bool allow_lookup = fuzzed_data_provider.ConsumeBool();\n+    const int default_port = fuzzed_data_provider.ConsumeIntegral<int>();\n+    {\n+        std::vector<CNetAddr> resolved_addresses;\n+        if (LookupHost(name, resolved_addresses, max_results, allow_lookup, fuzzed_dns_lookup_function)) {\n+            for (const CNetAddr& resolved_address : resolved_addresses) {\n+                assert(!resolved_address.IsInternal());\n+            }\n+        }\n+        assert(resolved_addresses.size() <= max_results || max_results == 0);\n+    }\n+    {\n+        CNetAddr resolved_address;\n+        if (LookupHost(name, resolved_address, allow_lookup, fuzzed_dns_lookup_function)) {\n+            assert(!resolved_address.IsInternal());\n+        }\n+    }\n+    {\n+        std::vector<CService> resolved_services;\n+        if (Lookup(name, resolved_services, default_port, allow_lookup, max_results, fuzzed_dns_lookup_function)) {\n+            for (const CNetAddr& resolved_service : resolved_services) {\n+                assert(!resolved_service.IsInternal());\n+            }\n+        }\n+        assert(resolved_services.size() <= max_results || max_results == 0);\n+    }\n+    {\n+        CService resolved_service;\n+        if (Lookup(name, resolved_service, default_port, allow_lookup, fuzzed_dns_lookup_function)) {\n+            assert(!resolved_service.IsInternal());\n+        }\n+    }\n+    {\n+        CService resolved_service = LookupNumeric(name, default_port, fuzzed_dns_lookup_function);\n+        assert(!resolved_service.IsInternal());\n+    }",
    "path": "src/test/fuzz/netbase_dns_lookup.cpp",
    "position": 69,
    "original_position": 68,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "522b3b4bc276378f93f1b6109be9c66a7f8bfd38",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "They are intentional scope delimiters :)",
    "created_at": "2021-02-22T16:00:18Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r580368612",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580368612"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r580368612"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580368612/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 66,
    "original_start_line": 65,
    "start_side": "RIGHT",
    "line": 69,
    "original_line": 69,
    "side": "RIGHT",
    "in_reply_to_id": 579236111
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580368891",
    "pull_request_review_id": 595505616,
    "id": 580368891,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDM2ODg5MQ==",
    "diff_hunk": "@@ -50,12 +55,14 @@ bool IsProxy(const CNetAddr &addr);\n bool SetNameProxy(const proxyType &addrProxy);\n bool HaveNameProxy();\n bool GetNameProxy(proxyType &nameProxyOut);\n-bool LookupHost(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup);\n-bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup);\n-bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllowLookup);\n-bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n-CService LookupNumeric(const std::string& name, int portDefault = 0);\n-bool LookupSubNet(const std::string& strSubnet, CSubNet& subnet);\n+\n+using DNSLookupFn = std::function<std::vector<CNetAddr>(const std::string&, bool)>;",
    "path": "src/netbase.h",
    "position": 23,
    "original_position": 23,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "522b3b4bc276378f93f1b6109be9c66a7f8bfd38",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good points. Now using `g_dns_lookup` as suggested.",
    "created_at": "2021-02-22T16:00:37Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r580368891",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580368891"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r580368891"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580368891/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 83,
    "original_line": 83,
    "side": "RIGHT",
    "in_reply_to_id": 579269477
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588951286",
    "pull_request_review_id": 605798848,
    "id": 588951286,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODk1MTI4Ng==",
    "diff_hunk": "@@ -42,6 +42,53 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n int g_socks5_recv_timeout = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+{\n+    struct addrinfo aiHint;\n+    memset(&aiHint, 0, sizeof(struct addrinfo));\n+\n+    // We want a TCP port, which is a streaming socket type\n+    aiHint.ai_socktype = SOCK_STREAM;\n+    aiHint.ai_protocol = IPPROTO_TCP;\n+    // We don't care which address family (IPv4 or IPv6) is returned\n+    aiHint.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    // return addresses whose family we have an address configured for.\n+    //\n+    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // getaddrinfo to only decode numerical network addresses and suppress\n+    // hostname lookups.\n+    aiHint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+\n+    struct addrinfo* aiRes = nullptr;\n+    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n+    if (nErr) {\n+        return {};\n+    }\n+\n+    // Traverse the linked list starting with aiTrav, add all non-internal\n+    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 29,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "820843247af5292b3c29689ac7f9b5648f10b4d6",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This comment could be clarified - `vIP` + `nMaxSolutions` aren't used here",
    "created_at": "2021-03-07T00:36:51Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r588951286",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588951286"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r588951286"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588951286/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 70,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588951763",
    "pull_request_review_id": 605798848,
    "id": 588951763,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODk1MTc2Mw==",
    "diff_hunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <netbase.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+FuzzedDataProvider* fuzzed_data_provider_ptr = nullptr;\n+\n+std::vector<CNetAddr> fuzzed_dns_lookup_function(const std::string& name, bool allow_lookup)\n+{\n+    std::vector<CNetAddr> resolved_addresses;\n+    while (fuzzed_data_provider_ptr->ConsumeBool()) {\n+        resolved_addresses.push_back(ConsumeNetAddr(*fuzzed_data_provider_ptr));",
    "path": "src/test/fuzz/netbase_dns_lookup.cpp",
    "position": 22,
    "original_position": 21,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "173272bf9247d9531927e80674ef1cdae48bdbf6",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "After reading the `getaddrinfo` manpage, I realized `ConsumeNetAddr` can return `CNetAddr` with `m_scope_id` set for non link-local addresses, which is different from `getaddrinfo` behaviour. I'm not an expert here but I think there could be sanity-checking for that in `ConsumeNetAddr`.",
    "created_at": "2021-03-07T00:42:06Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r588951763",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588951763"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r588951763"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588951763/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 22,
    "original_line": 22,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589066534",
    "pull_request_review_id": 605870638,
    "id": 589066534,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTA2NjUzNA==",
    "diff_hunk": "@@ -42,6 +42,53 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n int g_socks5_recv_timeout = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+{\n+    struct addrinfo aiHint;\n+    memset(&aiHint, 0, sizeof(struct addrinfo));\n+\n+    // We want a TCP port, which is a streaming socket type\n+    aiHint.ai_socktype = SOCK_STREAM;\n+    aiHint.ai_protocol = IPPROTO_TCP;\n+    // We don't care which address family (IPv4 or IPv6) is returned\n+    aiHint.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    // return addresses whose family we have an address configured for.\n+    //\n+    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // getaddrinfo to only decode numerical network addresses and suppress\n+    // hostname lookups.\n+    aiHint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+\n+    struct addrinfo* aiRes = nullptr;\n+    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n+    if (nErr) {",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 24,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "173272bf9247d9531927e80674ef1cdae48bdbf6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "proposed comment (and maybe simplification, as we're not using `nErr` for anything, otherwise if we keep `nErr` it can be const)\r\n```diff\r\n-    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\r\n-    if (nErr) {\r\n+    // getaddrinfo(3) returns 0 if it succeeds or a non-zero error code.\r\n+    if (getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes)) {\r\n```\r\n",
    "created_at": "2021-03-07T18:07:51Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589066534",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589066534"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589066534"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589066534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 65,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589067318",
    "pull_request_review_id": 605870638,
    "id": 589067318,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTA2NzMxOA==",
    "diff_hunk": "@@ -42,6 +42,53 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n int g_socks5_recv_timeout = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+{\n+    struct addrinfo aiHint;\n+    memset(&aiHint, 0, sizeof(struct addrinfo));\n+\n+    // We want a TCP port, which is a streaming socket type\n+    aiHint.ai_socktype = SOCK_STREAM;\n+    aiHint.ai_protocol = IPPROTO_TCP;\n+    // We don't care which address family (IPv4 or IPv6) is returned\n+    aiHint.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    // return addresses whose family we have an address configured for.\n+    //\n+    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // getaddrinfo to only decode numerical network addresses and suppress\n+    // hostname lookups.\n+    aiHint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+\n+    struct addrinfo* aiRes = nullptr;\n+    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n+    if (nErr) {\n+        return {};\n+    }\n+\n+    // Traverse the linked list starting with aiTrav, add all non-internal\n+    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.\n+    struct addrinfo* aiTrav = aiRes;\n+    std::vector<CNetAddr> resolved_addresses;\n+    while (aiTrav != nullptr) {\n+        if (aiTrav->ai_family == AF_INET) {\n+            assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in));\n+            resolved_addresses.emplace_back(((struct sockaddr_in*)(aiTrav->ai_addr))->sin_addr);\n+        }\n+        if (aiTrav->ai_family == AF_INET6) {\n+            assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in6));\n+            struct sockaddr_in6* s6 = (struct sockaddr_in6*)aiTrav->ai_addr;",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "173272bf9247d9531927e80674ef1cdae48bdbf6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "here and line 76, can we use [named casts](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-casts-named)?",
    "created_at": "2021-03-07T18:14:42Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589067318",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589067318"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589067318"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589067318/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 80,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589068562",
    "pull_request_review_id": 605870638,
    "id": 589068562,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTA2ODU2Mg==",
    "diff_hunk": "@@ -42,6 +42,53 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n int g_socks5_recv_timeout = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+{\n+    struct addrinfo aiHint;\n+    memset(&aiHint, 0, sizeof(struct addrinfo));\n+\n+    // We want a TCP port, which is a streaming socket type\n+    aiHint.ai_socktype = SOCK_STREAM;\n+    aiHint.ai_protocol = IPPROTO_TCP;\n+    // We don't care which address family (IPv4 or IPv6) is returned\n+    aiHint.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    // return addresses whose family we have an address configured for.\n+    //\n+    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // getaddrinfo to only decode numerical network addresses and suppress\n+    // hostname lookups.\n+    aiHint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+\n+    struct addrinfo* aiRes = nullptr;\n+    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n+    if (nErr) {\n+        return {};\n+    }\n+\n+    // Traverse the linked list starting with aiTrav, add all non-internal\n+    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.\n+    struct addrinfo* aiTrav = aiRes;\n+    std::vector<CNetAddr> resolved_addresses;\n+    while (aiTrav != nullptr) {\n+        if (aiTrav->ai_family == AF_INET) {\n+            assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in));\n+            resolved_addresses.emplace_back(((struct sockaddr_in*)(aiTrav->ai_addr))->sin_addr);\n+        }\n+        if (aiTrav->ai_family == AF_INET6) {\n+            assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in6));\n+            struct sockaddr_in6* s6 = (struct sockaddr_in6*)aiTrav->ai_addr;\n+            resolved_addresses.emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n+        }\n+        aiTrav = aiTrav->ai_next;\n+    }\n+    freeaddrinfo(aiRes);\n+\n+    return resolved_addresses;\n+}\n+\n+DNSLookupFn g_dns_lookup = WrappedGetAddrInfo;",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 49,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "173272bf9247d9531927e80674ef1cdae48bdbf6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\nDNSLookupFn g_dns_lookup{WrappedGetAddrInfo};\r\n```\r\n",
    "created_at": "2021-03-07T18:25:10Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589068562",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589068562"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589068562"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589068562/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 90,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589068961",
    "pull_request_review_id": 605870638,
    "id": 589068961,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTA2ODk2MQ==",
    "diff_hunk": "@@ -42,6 +42,53 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n int g_socks5_recv_timeout = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+{\n+    struct addrinfo aiHint;\n+    memset(&aiHint, 0, sizeof(struct addrinfo));\n+\n+    // We want a TCP port, which is a streaming socket type\n+    aiHint.ai_socktype = SOCK_STREAM;\n+    aiHint.ai_protocol = IPPROTO_TCP;\n+    // We don't care which address family (IPv4 or IPv6) is returned\n+    aiHint.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    // return addresses whose family we have an address configured for.\n+    //\n+    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // getaddrinfo to only decode numerical network addresses and suppress\n+    // hostname lookups.\n+    aiHint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+\n+    struct addrinfo* aiRes = nullptr;",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 22,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "173272bf9247d9531927e80674ef1cdae48bdbf6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n    struct addrinfo* aiRes{nullptr};\r\n```",
    "created_at": "2021-03-07T18:28:15Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589068961",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589068961"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589068961"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589068961/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 63,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589068994",
    "pull_request_review_id": 605870638,
    "id": 589068994,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTA2ODk5NA==",
    "diff_hunk": "@@ -42,6 +42,53 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n int g_socks5_recv_timeout = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+{\n+    struct addrinfo aiHint;\n+    memset(&aiHint, 0, sizeof(struct addrinfo));\n+\n+    // We want a TCP port, which is a streaming socket type\n+    aiHint.ai_socktype = SOCK_STREAM;\n+    aiHint.ai_protocol = IPPROTO_TCP;\n+    // We don't care which address family (IPv4 or IPv6) is returned\n+    aiHint.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    // return addresses whose family we have an address configured for.\n+    //\n+    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // getaddrinfo to only decode numerical network addresses and suppress\n+    // hostname lookups.\n+    aiHint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+\n+    struct addrinfo* aiRes = nullptr;\n+    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n+    if (nErr) {\n+        return {};\n+    }\n+\n+    // Traverse the linked list starting with aiTrav, add all non-internal\n+    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.\n+    struct addrinfo* aiTrav = aiRes;",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 30,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "173272bf9247d9531927e80674ef1cdae48bdbf6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n    struct addrinfo* aiTrav{aiRes};\r\n```",
    "created_at": "2021-03-07T18:28:30Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589068994",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589068994"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589068994"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589068994/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 71,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589069675",
    "pull_request_review_id": 605870638,
    "id": 589069675,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTA2OTY3NQ==",
    "diff_hunk": "@@ -109,54 +156,16 @@ bool static LookupIntern(const std::string& name, std::vector<CNetAddr>& vIP, un\n         }\n     }\n \n-    struct addrinfo aiHint;\n-    memset(&aiHint, 0, sizeof(struct addrinfo));\n-\n-    // We want a TCP port, which is a streaming socket type\n-    aiHint.ai_socktype = SOCK_STREAM;\n-    aiHint.ai_protocol = IPPROTO_TCP;\n-    // We don't care which address family (IPv4 or IPv6) is returned\n-    aiHint.ai_family = AF_UNSPEC;\n-    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n-    // return addresses whose family we have an address configured for.\n-    //\n-    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n-    // getaddrinfo to only decode numerical network addresses and suppress\n-    // hostname lookups.\n-    aiHint.ai_flags = fAllowLookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n-    struct addrinfo *aiRes = nullptr;\n-    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n-    if (nErr)\n-        return false;\n-\n-    // Traverse the linked list starting with aiTrav, add all non-internal\n-    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.\n-    struct addrinfo *aiTrav = aiRes;\n-    while (aiTrav != nullptr && (nMaxSolutions == 0 || vIP.size() < nMaxSolutions))\n-    {\n-        CNetAddr resolved;\n-        if (aiTrav->ai_family == AF_INET)\n-        {\n-            assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in));\n-            resolved = CNetAddr(((struct sockaddr_in*)(aiTrav->ai_addr))->sin_addr);\n-        }\n-\n-        if (aiTrav->ai_family == AF_INET6)\n-        {\n-            assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in6));\n-            struct sockaddr_in6* s6 = (struct sockaddr_in6*) aiTrav->ai_addr;\n-            resolved = CNetAddr(s6->sin6_addr, s6->sin6_scope_id);\n+    for (const CNetAddr& resolved : dns_lookup_function(name, fAllowLookup)) {\n+        if (nMaxSolutions > 0 && vIP.size() >= nMaxSolutions) {\n+            break;",
    "path": "src/netbase.cpp",
    "position": 103,
    "original_position": 106,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "173272bf9247d9531927e80674ef1cdae48bdbf6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can this `if (nMaxSolutions > 0 && vIP.size() >= nMaxSolutions)` check be done before the loop?",
    "created_at": "2021-03-07T18:34:47Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589069675",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589069675"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589069675"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589069675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 158,
    "original_line": 158,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589070071",
    "pull_request_review_id": 605870638,
    "id": 589070071,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTA3MDA3MQ==",
    "diff_hunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <netbase.h>",
    "path": "src/test/fuzz/netbase_dns_lookup.cpp",
    "position": 6,
    "original_position": 5,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "173272bf9247d9531927e80674ef1cdae48bdbf6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "suggestion, as this uses `CNetAddr` defined in `netaddress.h`\r\n```diff\r\n+#include <netaddress.h>\r\n```\r\n",
    "created_at": "2021-03-07T18:37:49Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589070071",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589070071"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589070071"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589070071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 6,
    "original_line": 6,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589801035",
    "pull_request_review_id": 606775220,
    "id": 589801035,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTgwMTAzNQ==",
    "diff_hunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <netbase.h>",
    "path": "src/test/fuzz/netbase_dns_lookup.cpp",
    "position": 6,
    "original_position": 5,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "173272bf9247d9531927e80674ef1cdae48bdbf6",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks! Addressed.",
    "created_at": "2021-03-08T22:40:41Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589801035",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589801035"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589801035"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589801035/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 6,
    "original_line": 6,
    "side": "RIGHT",
    "in_reply_to_id": 589070071
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589801738",
    "pull_request_review_id": 606775914,
    "id": 589801738,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTgwMTczOA==",
    "diff_hunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <netbase.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+FuzzedDataProvider* fuzzed_data_provider_ptr = nullptr;\n+\n+std::vector<CNetAddr> fuzzed_dns_lookup_function(const std::string& name, bool allow_lookup)\n+{\n+    std::vector<CNetAddr> resolved_addresses;\n+    while (fuzzed_data_provider_ptr->ConsumeBool()) {\n+        resolved_addresses.push_back(ConsumeNetAddr(*fuzzed_data_provider_ptr));",
    "path": "src/test/fuzz/netbase_dns_lookup.cpp",
    "position": 22,
    "original_position": 21,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "173272bf9247d9531927e80674ef1cdae48bdbf6",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think that is likely to matter in practice (don't hesitate to prove me wrong!). Leaving unchanged for now.",
    "created_at": "2021-03-08T22:41:43Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589801738",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589801738"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589801738"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589801738/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 22,
    "original_line": 22,
    "side": "RIGHT",
    "in_reply_to_id": 588951763
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589813913",
    "pull_request_review_id": 606788864,
    "id": 589813913,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTgxMzkxMw==",
    "diff_hunk": "@@ -109,54 +156,16 @@ bool static LookupIntern(const std::string& name, std::vector<CNetAddr>& vIP, un\n         }\n     }\n \n-    struct addrinfo aiHint;\n-    memset(&aiHint, 0, sizeof(struct addrinfo));\n-\n-    // We want a TCP port, which is a streaming socket type\n-    aiHint.ai_socktype = SOCK_STREAM;\n-    aiHint.ai_protocol = IPPROTO_TCP;\n-    // We don't care which address family (IPv4 or IPv6) is returned\n-    aiHint.ai_family = AF_UNSPEC;\n-    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n-    // return addresses whose family we have an address configured for.\n-    //\n-    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n-    // getaddrinfo to only decode numerical network addresses and suppress\n-    // hostname lookups.\n-    aiHint.ai_flags = fAllowLookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n-    struct addrinfo *aiRes = nullptr;\n-    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n-    if (nErr)\n-        return false;\n-\n-    // Traverse the linked list starting with aiTrav, add all non-internal\n-    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.\n-    struct addrinfo *aiTrav = aiRes;\n-    while (aiTrav != nullptr && (nMaxSolutions == 0 || vIP.size() < nMaxSolutions))\n-    {\n-        CNetAddr resolved;\n-        if (aiTrav->ai_family == AF_INET)\n-        {\n-            assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in));\n-            resolved = CNetAddr(((struct sockaddr_in*)(aiTrav->ai_addr))->sin_addr);\n-        }\n-\n-        if (aiTrav->ai_family == AF_INET6)\n-        {\n-            assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in6));\n-            struct sockaddr_in6* s6 = (struct sockaddr_in6*) aiTrav->ai_addr;\n-            resolved = CNetAddr(s6->sin6_addr, s6->sin6_scope_id);\n+    for (const CNetAddr& resolved : dns_lookup_function(name, fAllowLookup)) {\n+        if (nMaxSolutions > 0 && vIP.size() >= nMaxSolutions) {\n+            break;",
    "path": "src/netbase.cpp",
    "position": 103,
    "original_position": 106,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "173272bf9247d9531927e80674ef1cdae48bdbf6",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Not that I can see: `vIP` is added to within the loop.\r\n\r\nPlease provide a diff explaining your suggestion if it still stands :)",
    "created_at": "2021-03-08T23:03:27Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589813913",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589813913"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589813913"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589813913/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 158,
    "original_line": 158,
    "side": "RIGHT",
    "in_reply_to_id": 589069675
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589815033",
    "pull_request_review_id": 606790214,
    "id": 589815033,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTgxNTAzMw==",
    "diff_hunk": "@@ -42,6 +42,53 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n int g_socks5_recv_timeout = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+{\n+    struct addrinfo aiHint;\n+    memset(&aiHint, 0, sizeof(struct addrinfo));\n+\n+    // We want a TCP port, which is a streaming socket type\n+    aiHint.ai_socktype = SOCK_STREAM;\n+    aiHint.ai_protocol = IPPROTO_TCP;\n+    // We don't care which address family (IPv4 or IPv6) is returned\n+    aiHint.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    // return addresses whose family we have an address configured for.\n+    //\n+    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // getaddrinfo to only decode numerical network addresses and suppress\n+    // hostname lookups.\n+    aiHint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+\n+    struct addrinfo* aiRes = nullptr;\n+    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n+    if (nErr) {",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 24,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "173272bf9247d9531927e80674ef1cdae48bdbf6",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Made `n_err` const as suggested. Now using the more explicit `if (n_err != 0)` which I find easier to read.",
    "created_at": "2021-03-08T23:05:56Z",
    "updated_at": "2021-03-08T23:18:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589815033",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589815033"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589815033"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589815033/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 65,
    "side": "RIGHT",
    "in_reply_to_id": 589066534
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589821334",
    "pull_request_review_id": 606797452,
    "id": 589821334,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTgyMTMzNA==",
    "diff_hunk": "@@ -42,6 +42,53 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n int g_socks5_recv_timeout = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+{\n+    struct addrinfo aiHint;\n+    memset(&aiHint, 0, sizeof(struct addrinfo));\n+\n+    // We want a TCP port, which is a streaming socket type\n+    aiHint.ai_socktype = SOCK_STREAM;\n+    aiHint.ai_protocol = IPPROTO_TCP;\n+    // We don't care which address family (IPv4 or IPv6) is returned\n+    aiHint.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    // return addresses whose family we have an address configured for.\n+    //\n+    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // getaddrinfo to only decode numerical network addresses and suppress\n+    // hostname lookups.\n+    aiHint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+\n+    struct addrinfo* aiRes = nullptr;\n+    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n+    if (nErr) {\n+        return {};\n+    }\n+\n+    // Traverse the linked list starting with aiTrav, add all non-internal\n+    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.\n+    struct addrinfo* aiTrav = aiRes;\n+    std::vector<CNetAddr> resolved_addresses;\n+    while (aiTrav != nullptr) {\n+        if (aiTrav->ai_family == AF_INET) {\n+            assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in));\n+            resolved_addresses.emplace_back(((struct sockaddr_in*)(aiTrav->ai_addr))->sin_addr);\n+        }\n+        if (aiTrav->ai_family == AF_INET6) {\n+            assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in6));\n+            struct sockaddr_in6* s6 = (struct sockaddr_in6*)aiTrav->ai_addr;",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "173272bf9247d9531927e80674ef1cdae48bdbf6",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Sure. Now using `reinterpret_cast`.",
    "created_at": "2021-03-08T23:18:46Z",
    "updated_at": "2021-03-08T23:18:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589821334",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589821334"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589821334"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589821334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 80,
    "side": "RIGHT",
    "in_reply_to_id": 589067318
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589821417",
    "pull_request_review_id": 606797552,
    "id": 589821417,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTgyMTQxNw==",
    "diff_hunk": "@@ -42,6 +42,53 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n int g_socks5_recv_timeout = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+{\n+    struct addrinfo aiHint;\n+    memset(&aiHint, 0, sizeof(struct addrinfo));\n+\n+    // We want a TCP port, which is a streaming socket type\n+    aiHint.ai_socktype = SOCK_STREAM;\n+    aiHint.ai_protocol = IPPROTO_TCP;\n+    // We don't care which address family (IPv4 or IPv6) is returned\n+    aiHint.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    // return addresses whose family we have an address configured for.\n+    //\n+    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // getaddrinfo to only decode numerical network addresses and suppress\n+    // hostname lookups.\n+    aiHint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+\n+    struct addrinfo* aiRes = nullptr;\n+    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n+    if (nErr) {\n+        return {};\n+    }\n+\n+    // Traverse the linked list starting with aiTrav, add all non-internal\n+    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.",
    "path": "src/netbase.cpp",
    "position": null,
    "original_position": 29,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "820843247af5292b3c29689ac7f9b5648f10b4d6",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done!",
    "created_at": "2021-03-08T23:19:00Z",
    "updated_at": "2021-03-08T23:19:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589821417",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589821417"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r589821417"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589821417/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 70,
    "side": "RIGHT",
    "in_reply_to_id": 588951286
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594244506",
    "pull_request_review_id": 612071390,
    "id": 594244506,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDI0NDUwNg==",
    "diff_hunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <netaddress.h>\n+#include <netbase.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+FuzzedDataProvider* fuzzed_data_provider_ptr = nullptr;",
    "path": "src/test/fuzz/netbase_dns_lookup.cpp",
    "position": 16,
    "original_position": 16,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "style-nit: Any reason for this namespace and pointer? Looks like a lambda should be able to do the same in less code and smaller scope",
    "created_at": "2021-03-15T11:10:40Z",
    "updated_at": "2021-03-15T11:10:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r594244506",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594244506"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r594244506"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594244506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 16,
    "original_line": 16,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594247941",
    "pull_request_review_id": 612075953,
    "id": 594247941,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDI0Nzk0MQ==",
    "diff_hunk": "@@ -109,54 +156,16 @@ bool static LookupIntern(const std::string& name, std::vector<CNetAddr>& vIP, un\n         }\n     }\n \n-    struct addrinfo aiHint;\n-    memset(&aiHint, 0, sizeof(struct addrinfo));\n-\n-    // We want a TCP port, which is a streaming socket type\n-    aiHint.ai_socktype = SOCK_STREAM;\n-    aiHint.ai_protocol = IPPROTO_TCP;\n-    // We don't care which address family (IPv4 or IPv6) is returned\n-    aiHint.ai_family = AF_UNSPEC;\n-    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n-    // return addresses whose family we have an address configured for.\n-    //\n-    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n-    // getaddrinfo to only decode numerical network addresses and suppress\n-    // hostname lookups.\n-    aiHint.ai_flags = fAllowLookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n-    struct addrinfo *aiRes = nullptr;\n-    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n-    if (nErr)\n-        return false;\n-\n-    // Traverse the linked list starting with aiTrav, add all non-internal\n-    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.\n-    struct addrinfo *aiTrav = aiRes;\n-    while (aiTrav != nullptr && (nMaxSolutions == 0 || vIP.size() < nMaxSolutions))\n-    {\n-        CNetAddr resolved;\n-        if (aiTrav->ai_family == AF_INET)\n-        {\n-            assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in));\n-            resolved = CNetAddr(((struct sockaddr_in*)(aiTrav->ai_addr))->sin_addr);\n-        }\n-\n-        if (aiTrav->ai_family == AF_INET6)\n-        {\n-            assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in6));\n-            struct sockaddr_in6* s6 = (struct sockaddr_in6*) aiTrav->ai_addr;\n-            resolved = CNetAddr(s6->sin6_addr, s6->sin6_scope_id);\n+    for (const CNetAddr& resolved : dns_lookup_function(name, fAllowLookup)) {\n+        if (nMaxSolutions > 0 && vIP.size() >= nMaxSolutions) {\n+            break;",
    "path": "src/netbase.cpp",
    "position": 103,
    "original_position": 106,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "173272bf9247d9531927e80674ef1cdae48bdbf6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You're right, thanks.",
    "created_at": "2021-03-15T11:16:23Z",
    "updated_at": "2021-03-15T11:16:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r594247941",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594247941"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r594247941"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594247941/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 158,
    "original_line": 158,
    "side": "RIGHT",
    "in_reply_to_id": 589069675
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594440521",
    "pull_request_review_id": 612332739,
    "id": 594440521,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDQ0MDUyMQ==",
    "diff_hunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <netaddress.h>\n+#include <netbase.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+FuzzedDataProvider* fuzzed_data_provider_ptr = nullptr;",
    "path": "src/test/fuzz/netbase_dns_lookup.cpp",
    "position": 16,
    "original_position": 16,
    "commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "original_commit_id": "e5280751890b02abb558b37eb0e0401493f148b4",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Using a lambda here is a good idea: less code, smaller scope and overall beautiful :)\r\n\r\nTBH I don't remember why I didn't do it that way nine months ago when this code was written: a lambda is strictly better AFAICT :)\r\n\r\nAddress in PR #21443.",
    "created_at": "2021-03-15T15:31:40Z",
    "updated_at": "2021-03-15T15:34:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r594440521",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594440521"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19415#discussion_r594440521"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19415"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594440521/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 16,
    "original_line": 16,
    "side": "RIGHT",
    "in_reply_to_id": 594244506
  }
]