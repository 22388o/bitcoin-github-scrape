[
  {
    "sha": "fa0dfdf447d5b84a1849dc823d8508463600136a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTBkZmRmNDQ3ZDViODRhMTg0OWRjODIzZDg1MDg0NjM2MDAxMzZh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-29T14:30:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-30T00:28:47Z"
      },
      "message": "refactor: Remove confusing BlockIndex global",
      "tree": {
        "sha": "98276aaab436fa0a748d26ab0a9b893b56607b5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98276aaab436fa0a748d26ab0a9b893b56607b5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0dfdf447d5b84a1849dc823d8508463600136a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjDegv+OcutaV1JsFlEsIRAfa4bXUvP1bW9uJH+uf5wqj6PJX9DfUxdjDATayqV\nrZ7xF0DLzst3CNbE7ywD3V8QO9nr1nVQICxQJ1YBQ+Dgz2lgE96ma47kgjO7Khlf\nc+fW5SKQyBy89Jx0aeZZ4XnEjFXdqPto1bi+BcvsYHpkKIFG3CS+R5P9KMCGYeqe\npFpIcEoWbPs4uOYu+tR2KIrAuBdNEPpR4S+r7EcC53q9Z1tHaMkHVymwdBaWAcKi\nxnIHD/2Cn3AInaPDtm/USrlymclDwFZHdR9FsinsAWeLAZYQDxVqwJBf+U7e0e67\n3tkeXtyTgcy7DIp1jIezC+2mVL2XEAPjUo645iNGjKQtjsdyVgna9LP5sV5+CUOA\nR4wGcaqZ+LohRFoY0EE57lancFuUJzaFwS045SihkpnP8B7hx7sMsOhWdEK5f8bA\n6UOOMZ8tjfo0vyurggZ81xQghNZ11d0bgNgqNxYPtwXR+cuGZHVBbukq7OURYSZ8\nux4hqHc8\n=srEi\n-----END PGP SIGNATURE-----",
        "payload": "tree 98276aaab436fa0a748d26ab0a9b893b56607b5e\nparent 8edfc1715a02cbaf52420d3c4e71f67ff9af0b41\nauthor MarcoFalke <falke.marco@gmail.com> 1593441003 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1593476927 -0400\n\nrefactor: Remove confusing BlockIndex global\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0dfdf447d5b84a1849dc823d8508463600136a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0dfdf447d5b84a1849dc823d8508463600136a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0dfdf447d5b84a1849dc823d8508463600136a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8edfc1715a02cbaf52420d3c4e71f67ff9af0b41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8edfc1715a02cbaf52420d3c4e71f67ff9af0b41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8edfc1715a02cbaf52420d3c4e71f67ff9af0b41"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 22,
      "deletions": 32
    },
    "files": [
      {
        "sha": "40f673ad69e859349d6d43b3b3d4409bf350be85",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0dfdf447d5b84a1849dc823d8508463600136a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0dfdf447d5b84a1849dc823d8508463600136a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa0dfdf447d5b84a1849dc823d8508463600136a",
        "patch": "@@ -1589,7 +1589,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n \n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n-                if (!::BlockIndex().empty() &&\n+                if (!chainman.BlockIndex().empty() &&\n                         !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n                 }\n@@ -1869,8 +1869,8 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n     //// debug print\n     {\n         LOCK(cs_main);\n-        LogPrintf(\"block tree size = %u\\n\", ::BlockIndex().size());\n-        chain_active_height = ::ChainActive().Height();\n+        LogPrintf(\"block tree size = %u\\n\", chainman.BlockIndex().size());\n+        chain_active_height = chainman.ActiveChain().Height();\n     }\n     LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);\n "
      },
      {
        "sha": "6250ca918addd976dcad2179da469b12402a96f2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0dfdf447d5b84a1849dc823d8508463600136a/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0dfdf447d5b84a1849dc823d8508463600136a/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa0dfdf447d5b84a1849dc823d8508463600136a",
        "patch": "@@ -1325,50 +1325,48 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     LOCK(cs_main);\n \n     /*\n-     * Idea:  the set of chain tips is ::ChainActive().tip, plus orphan blocks which do not have another orphan building off of them.\n+     * Idea: The set of chain tips is the active chain tip, plus orphan blocks which do not have another orphan building off of them.\n      * Algorithm:\n      *  - Make one pass through BlockIndex(), picking out the orphan blocks, and also storing a set of the orphan block's pprev pointers.\n      *  - Iterate through the orphan blocks. If the block isn't pointed to by another orphan, it is a chain tip.\n-     *  - add ::ChainActive().Tip()\n+     *  - Add the active chain tip\n      */\n     std::set<const CBlockIndex*, CompareBlocksByHeight> setTips;\n     std::set<const CBlockIndex*> setOrphans;\n     std::set<const CBlockIndex*> setPrevs;\n \n-    for (const std::pair<const uint256, CBlockIndex*>& item : ::BlockIndex())\n-    {\n-        if (!::ChainActive().Contains(item.second)) {\n+    for (const std::pair<const uint256, CBlockIndex*>& item : chainman.BlockIndex()) {\n+        if (!chainman.ActiveChain().Contains(item.second)) {\n             setOrphans.insert(item.second);\n             setPrevs.insert(item.second->pprev);\n         }\n     }\n \n-    for (std::set<const CBlockIndex*>::iterator it = setOrphans.begin(); it != setOrphans.end(); ++it)\n-    {\n+    for (std::set<const CBlockIndex*>::iterator it = setOrphans.begin(); it != setOrphans.end(); ++it) {\n         if (setPrevs.erase(*it) == 0) {\n             setTips.insert(*it);\n         }\n     }\n \n     // Always report the currently active tip.\n-    setTips.insert(::ChainActive().Tip());\n+    setTips.insert(chainman.ActiveChain().Tip());\n \n     /* Construct the output array.  */\n     UniValue res(UniValue::VARR);\n-    for (const CBlockIndex* block : setTips)\n-    {\n+    for (const CBlockIndex* block : setTips) {\n         UniValue obj(UniValue::VOBJ);\n         obj.pushKV(\"height\", block->nHeight);\n         obj.pushKV(\"hash\", block->phashBlock->GetHex());\n \n-        const int branchLen = block->nHeight - ::ChainActive().FindFork(block)->nHeight;\n+        const int branchLen = block->nHeight - chainman.ActiveChain().FindFork(block)->nHeight;\n         obj.pushKV(\"branchlen\", branchLen);\n \n         std::string status;\n-        if (::ChainActive().Contains(block)) {\n+        if (chainman.ActiveChain().Contains(block)) {\n             // This block is part of the currently active chain.\n             status = \"active\";\n         } else if (block->nStatus & BLOCK_FAILED_MASK) {"
      },
      {
        "sha": "100171a0fe8b8355abcffe16f10a4dc73ea7809c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0dfdf447d5b84a1849dc823d8508463600136a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0dfdf447d5b84a1849dc823d8508463600136a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa0dfdf447d5b84a1849dc823d8508463600136a",
        "patch": "@@ -1321,12 +1321,6 @@ bool CChainState::IsInitialBlockDownload() const\n \n static CBlockIndex *pindexBestForkTip = nullptr, *pindexBestForkBase = nullptr;\n \n-BlockMap& BlockIndex()\n-{\n-    LOCK(::cs_main);\n-    return g_chainman.m_blockman.m_block_index;\n-}\n-\n static void AlertNotify(const std::string& strMessage)\n {\n     uiInterface.NotifyAlertChanged();"
      },
      {
        "sha": "a148dacb7cf92fa1dc17a2f5981a762c7488b86a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0dfdf447d5b84a1849dc823d8508463600136a/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0dfdf447d5b84a1849dc823d8508463600136a/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa0dfdf447d5b84a1849dc823d8508463600136a",
        "patch": "@@ -886,9 +886,6 @@ CChainState& ChainstateActive();\n /** Please prefer the identical ChainstateManager::ActiveChain */\n CChain& ChainActive();\n \n-/** Please prefer the identical ChainstateManager::BlockIndex */\n-BlockMap& BlockIndex();\n-\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern std::unique_ptr<CBlockTreeDB> pblocktree;\n "
      },
      {
        "sha": "4ecb1124b589659f555ff48cbf32c102d944ce06",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0dfdf447d5b84a1849dc823d8508463600136a/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0dfdf447d5b84a1849dc823d8508463600136a/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fa0dfdf447d5b84a1849dc823d8508463600136a",
        "patch": "@@ -333,15 +333,16 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     BOOST_CHECK_EQUAL(wtx.GetImmatureCredit(), 50*COIN);\n }\n \n-static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64_t blockTime)\n+static int64_t AddTx(ChainstateManager& chainman, CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64_t blockTime)\n {\n     CMutableTransaction tx;\n     CWalletTx::Confirmation confirm;\n     tx.nLockTime = lockTime;\n     SetMockTime(mockTime);\n     CBlockIndex* block = nullptr;\n     if (blockTime > 0) {\n-        auto inserted = ::BlockIndex().emplace(GetRandHash(), new CBlockIndex);\n+        LOCK(cs_main);\n+        auto inserted = chainman.BlockIndex().emplace(GetRandHash(), new CBlockIndex);\n         assert(inserted.second);\n         const uint256& hash = inserted.first->first;\n         block = inserted.first->second;\n@@ -363,24 +364,24 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n {\n     // New transaction should use clock time if lower than block time.\n-    BOOST_CHECK_EQUAL(AddTx(m_wallet, 1, 100, 120), 100);\n+    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, m_wallet, 1, 100, 120), 100);\n \n     // Test that updating existing transaction does not change smart time.\n-    BOOST_CHECK_EQUAL(AddTx(m_wallet, 1, 200, 220), 100);\n+    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, m_wallet, 1, 200, 220), 100);\n \n     // New transaction should use clock time if there's no block time.\n-    BOOST_CHECK_EQUAL(AddTx(m_wallet, 2, 300, 0), 300);\n+    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, m_wallet, 2, 300, 0), 300);\n \n     // New transaction should use block time if lower than clock time.\n-    BOOST_CHECK_EQUAL(AddTx(m_wallet, 3, 420, 400), 400);\n+    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, m_wallet, 3, 420, 400), 400);\n \n     // New transaction should use latest entry time if higher than\n     // min(block time, clock time).\n-    BOOST_CHECK_EQUAL(AddTx(m_wallet, 4, 500, 390), 400);\n+    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, m_wallet, 4, 500, 390), 400);\n \n     // If there are future entries, new transaction should use time of the\n     // newest entry that is no more than 300 seconds ahead of the clock time.\n-    BOOST_CHECK_EQUAL(AddTx(m_wallet, 5, 50, 600), 300);\n+    BOOST_CHECK_EQUAL(AddTx(*m_node.chainman, m_wallet, 5, 50, 600), 300);\n \n     // Reset mock time for other tests.\n     SetMockTime(0);"
      }
    ]
  }
]