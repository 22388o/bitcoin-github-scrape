[
  {
    "sha": "76ac35f36d87078da62f95b4a1167ec296e37363",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmFjMzVmMzZkODcwNzhkYTYyZjk1YjRhMTE2N2VjMjk2ZTM3MzYz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-01-05T20:58:48Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-01-05T22:17:29Z"
      },
      "message": "c++11: detect and correct for boost builds with an incompatible abi\n\nThis is ugly, but temporary. boost::filesystem will likely be dropped soon\nafter c++11 is enabled. Otherwise, we could simply roll our own copy_file. I've\nfixed this at the buildsystem level for now in order to avoid mixing in\nfunctional changes.\n\nExplanation:\nIf boost (prior to 1.57) was built without c++11, it emulated scoped enums\nusing c++98 constructs. Unfortunately, this implementation detail leaked into\nthe abi. This was fixed in 1.57.\n\nWhen building against that installed version using c++11, the headers pick up\non the native c++11 scoped enum support and enable it, however it will fail to\nlink. This can be worked around by disabling c++11 scoped enums if linking will\nfail.\n\nAdd an autoconf test to determine incompatibility. At build-time, if native\nenums are being used (a c++11 build), and force-disabling them causes a\nsuccessful link, we can be sure that there's an incompatibility and enable the\nwork-around.",
      "tree": {
        "sha": "823c769c50135b102f4e9790d418c1976b628962",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/823c769c50135b102f4e9790d418c1976b628962"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76ac35f36d87078da62f95b4a1167ec296e37363",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76ac35f36d87078da62f95b4a1167ec296e37363",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76ac35f36d87078da62f95b4a1167ec296e37363",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76ac35f36d87078da62f95b4a1167ec296e37363/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "605c17844ea32b6d237db6d83871164dc7d59dab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/605c17844ea32b6d237db6d83871164dc7d59dab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/605c17844ea32b6d237db6d83871164dc7d59dab"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 31,
      "deletions": 0
    },
    "files": [
      {
        "sha": "07f9a4a6f3a02d806d66c12a203ac021743c86f0",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76ac35f36d87078da62f95b4a1167ec296e37363/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76ac35f36d87078da62f95b4a1167ec296e37363/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=76ac35f36d87078da62f95b4a1167ec296e37363",
        "patch": "@@ -619,6 +619,31 @@ if test x$use_boost = xyes; then\n \n BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB $BOOST_CHRONO_LIB\"\n \n+TEMP_LIBS=\"$LIBS\"\n+LIBS=\"$BOOST_LIBS $LIBS\"\n+TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+AC_MSG_CHECKING([for mismatched boost c++11 scoped enums])\n+AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n+  #include \"boost/config.hpp\"\n+  #include \"boost/version.hpp\"\n+  #if !defined(BOOST_NO_SCOPED_ENUMS) && !defined(BOOST_NO_CXX11_SCOPED_ENUMS) && BOOST_VERSION < 105700\n+  #define BOOST_NO_SCOPED_ENUMS\n+  #define BOOST_NO_CXX11_SCOPED_ENUMS\n+  #define CHECK\n+  #endif\n+  #include \"boost/filesystem.hpp\"\n+  ]],[[\n+  #if defined(CHECK)\n+    boost::filesystem::copy_file(\"foo\", \"bar\");\n+  #else\n+    choke;\n+  #endif\n+  ]])],\n+  [AC_MSG_RESULT(mismatched); AC_DEFINE(FORCE_BOOST_EMULATED_SCOPED_ENUMS, 1, [Define this symbol if boost scoped enums are emulated])], [AC_MSG_RESULT(ok)])\n+LIBS=\"$TEMP_LIBS\"\n+CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+\n dnl Boost >= 1.50 uses sleep_for rather than the now-deprecated sleep, however\n dnl it was broken from 1.50 to 1.52 when backed by nanosleep. Use sleep_for if\n dnl a working version is available, else fall back to sleep. sleep was removed"
      },
      {
        "sha": "f0e17769582cb5baf6a113157b1084296186d768",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76ac35f36d87078da62f95b4a1167ec296e37363/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76ac35f36d87078da62f95b4a1167ec296e37363/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=76ac35f36d87078da62f95b4a1167ec296e37363",
        "patch": "@@ -15,6 +15,12 @@\n #include \"utiltime.h\"\n #include \"wallet/wallet.h\"\n \n+#if defined(FORCE_BOOST_EMULATED_SCOPED_ENUMS)\n+#define BOOST_NO_SCOPED_ENUMS\n+#define BOOST_NO_CXX11_SCOPED_ENUMS\n+#endif\n+\n+#include <boost/version.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n #include <boost/scoped_ptr.hpp>"
      }
    ]
  },
  {
    "sha": "89f71c68c0fecf63059f6055ebdd25f1eba4c982",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWY3MWM2OGMwZmVjZjYzMDU5ZjYwNTVlYmRkMjVmMWViYTRjOTgy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-01-05T21:10:13Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-01-05T22:17:29Z"
      },
      "message": "c++11: don't throw from the reverselock destructor\n\nnoexcept is default for destructors as of c++11. By throwing in reverselock's\ndestructor if it's lock has been tampered with, the likely result is\nstd::terminate being called. Indeed that happened before this change.\n\nOnce reverselock has taken another lock (its ctor didn't throw), it makes no\nsense to try to grab or lock the parent lock. That is be broken/undefined\nbehavior depending on the parent lock's implementation, but it shouldn't cause\nthe reverselock to fail to re-lock when destroyed.\n\nTo avoid those problems, simply swap the parent lock's contents with a dummy\nfor the duration of the lock. That will ensure that any undefined behavior is\ncaught at the call-site rather than the reverse lock's destruction.\n\nBarring a failed mutex unlock which would be indicative of a larger problem,\nthe destructor should now never throw.",
      "tree": {
        "sha": "14c1527701d1c08170678d50757aee2e875ef4ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14c1527701d1c08170678d50757aee2e875ef4ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89f71c68c0fecf63059f6055ebdd25f1eba4c982",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89f71c68c0fecf63059f6055ebdd25f1eba4c982",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89f71c68c0fecf63059f6055ebdd25f1eba4c982",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89f71c68c0fecf63059f6055ebdd25f1eba4c982/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76ac35f36d87078da62f95b4a1167ec296e37363",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76ac35f36d87078da62f95b4a1167ec296e37363",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76ac35f36d87078da62f95b4a1167ec296e37363"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 10,
      "deletions": 11
    },
    "files": [
      {
        "sha": "fac1ccb7931ad4a628c82805f5e7fa93985d5b93",
        "filename": "src/reverselock.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89f71c68c0fecf63059f6055ebdd25f1eba4c982/src/reverselock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89f71c68c0fecf63059f6055ebdd25f1eba4c982/src/reverselock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/reverselock.h?ref=89f71c68c0fecf63059f6055ebdd25f1eba4c982",
        "patch": "@@ -15,17 +15,20 @@ class reverse_lock\n \n     explicit reverse_lock(Lock& lock) : lock(lock) {\n         lock.unlock();\n+        lock.swap(templock);\n     }\n \n     ~reverse_lock() {\n-        lock.lock();\n+        templock.lock();\n+        templock.swap(lock);\n     }\n \n private:\n     reverse_lock(reverse_lock const&);\n     reverse_lock& operator=(reverse_lock const&);\n \n     Lock& lock;\n+    Lock templock;\n };\n \n #endif // BITCOIN_REVERSELOCK_H"
      },
      {
        "sha": "8bdff97000f90cc33ee07dad329bb8ac9f84692b",
        "filename": "src/test/reverselock_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89f71c68c0fecf63059f6055ebdd25f1eba4c982/src/test/reverselock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89f71c68c0fecf63059f6055ebdd25f1eba4c982/src/test/reverselock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/reverselock_tests.cpp?ref=89f71c68c0fecf63059f6055ebdd25f1eba4c982",
        "patch": "@@ -42,22 +42,18 @@ BOOST_AUTO_TEST_CASE(reverselock_errors)\n     BOOST_CHECK(failed);\n     BOOST_CHECK(!lock.owns_lock());\n \n-    // Make sure trying to lock a lock after it has been reverse locked fails\n-    failed = false;\n-    bool locked = false;\n+    // Locking the original lock after it has been taken by a reverse lock\n+    // makes no sense. Ensure that the original lock no longer owns the lock\n+    // after giving it to a reverse one.\n \n     lock.lock();\n     BOOST_CHECK(lock.owns_lock());\n-\n-    try {\n+    {\n         reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n-        lock.lock();\n-        locked = true;\n-    } catch(...) {\n-        failed = true;\n+        BOOST_CHECK(!lock.owns_lock());\n     }\n \n-    BOOST_CHECK(locked && failed);\n+    BOOST_CHECK(failed);\n     BOOST_CHECK(lock.owns_lock());\n }\n "
      }
    ]
  },
  {
    "sha": "57d2f62c99e7ec2c1c95809f0f8f7441c3201423",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2QyZjYyYzk5ZTdlYzJjMWM5NTgwOWYwZjhmNzQ0MWMzMjAxNDIz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-01-05T21:25:42Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-01-05T22:17:29Z"
      },
      "message": "c++11: CAccountingEntry must be defined before use in a list\n\nc++11ism. This fixes builds against libc++.",
      "tree": {
        "sha": "85ec92d188b5646b169a0b62c4c24e2f43884afc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85ec92d188b5646b169a0b62c4c24e2f43884afc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57d2f62c99e7ec2c1c95809f0f8f7441c3201423",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57d2f62c99e7ec2c1c95809f0f8f7441c3201423",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57d2f62c99e7ec2c1c95809f0f8f7441c3201423",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57d2f62c99e7ec2c1c95809f0f8f7441c3201423/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89f71c68c0fecf63059f6055ebdd25f1eba4c982",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89f71c68c0fecf63059f6055ebdd25f1eba4c982",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89f71c68c0fecf63059f6055ebdd25f1eba4c982"
      }
    ],
    "stats": {
      "total": 164,
      "additions": 80,
      "deletions": 84
    },
    "files": [
      {
        "sha": "a9d0c3f604b25e0c156dfe6d2a2193c0130977cb",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 80,
        "deletions": 84,
        "changes": 164,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57d2f62c99e7ec2c1c95809f0f8f7441c3201423/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57d2f62c99e7ec2c1c95809f0f8f7441c3201423/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=57d2f62c99e7ec2c1c95809f0f8f7441c3201423",
        "patch": "@@ -59,7 +59,6 @@ static const CAmount nHighTransactionMaxFeeWarning = 100 * nHighTransactionFeeWa\n static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n static const bool DEFAULT_WALLETBROADCAST = true;\n \n-class CAccountingEntry;\n class CBlockIndex;\n class CCoinControl;\n class COutput;\n@@ -445,6 +444,86 @@ class CWalletKey\n     }\n };\n \n+/**\n+ * Internal transfers.\n+ * Database key is acentry<account><counter>.\n+ */\n+class CAccountingEntry\n+{\n+public:\n+    std::string strAccount;\n+    CAmount nCreditDebit;\n+    int64_t nTime;\n+    std::string strOtherAccount;\n+    std::string strComment;\n+    mapValue_t mapValue;\n+    int64_t nOrderPos;  //! position in ordered transaction list\n+    uint64_t nEntryNo;\n+\n+    CAccountingEntry()\n+    {\n+        SetNull();\n+    }\n+\n+    void SetNull()\n+    {\n+        nCreditDebit = 0;\n+        nTime = 0;\n+        strAccount.clear();\n+        strOtherAccount.clear();\n+        strComment.clear();\n+        nOrderPos = -1;\n+        nEntryNo = 0;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        if (!(nType & SER_GETHASH))\n+            READWRITE(nVersion);\n+        //! Note: strAccount is serialized as part of the key, not here.\n+        READWRITE(nCreditDebit);\n+        READWRITE(nTime);\n+        READWRITE(LIMITED_STRING(strOtherAccount, 65536));\n+\n+        if (!ser_action.ForRead())\n+        {\n+            WriteOrderPos(nOrderPos, mapValue);\n+\n+            if (!(mapValue.empty() && _ssExtra.empty()))\n+            {\n+                CDataStream ss(nType, nVersion);\n+                ss.insert(ss.begin(), '\\0');\n+                ss << mapValue;\n+                ss.insert(ss.end(), _ssExtra.begin(), _ssExtra.end());\n+                strComment.append(ss.str());\n+            }\n+        }\n+\n+        READWRITE(LIMITED_STRING(strComment, 65536));\n+\n+        size_t nSepPos = strComment.find(\"\\0\", 0, 1);\n+        if (ser_action.ForRead())\n+        {\n+            mapValue.clear();\n+            if (std::string::npos != nSepPos)\n+            {\n+                CDataStream ss(std::vector<char>(strComment.begin() + nSepPos + 1, strComment.end()), nType, nVersion);\n+                ss >> mapValue;\n+                _ssExtra = std::vector<char>(ss.begin(), ss.end());\n+            }\n+            ReadOrderPos(nOrderPos, mapValue);\n+        }\n+        if (std::string::npos != nSepPos)\n+            strComment.erase(nSepPos);\n+\n+        mapValue.erase(\"n\");\n+    }\n+\n+private:\n+    std::vector<char> _ssExtra;\n+};\n \n \n /** \n@@ -840,87 +919,4 @@ class CAccount\n     }\n };\n \n-\n-\n-/** \n- * Internal transfers.\n- * Database key is acentry<account><counter>.\n- */\n-class CAccountingEntry\n-{\n-public:\n-    std::string strAccount;\n-    CAmount nCreditDebit;\n-    int64_t nTime;\n-    std::string strOtherAccount;\n-    std::string strComment;\n-    mapValue_t mapValue;\n-    int64_t nOrderPos;  //! position in ordered transaction list\n-    uint64_t nEntryNo;\n-\n-    CAccountingEntry()\n-    {\n-        SetNull();\n-    }\n-\n-    void SetNull()\n-    {\n-        nCreditDebit = 0;\n-        nTime = 0;\n-        strAccount.clear();\n-        strOtherAccount.clear();\n-        strComment.clear();\n-        nOrderPos = -1;\n-        nEntryNo = 0;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n-            READWRITE(nVersion);\n-        //! Note: strAccount is serialized as part of the key, not here.\n-        READWRITE(nCreditDebit);\n-        READWRITE(nTime);\n-        READWRITE(LIMITED_STRING(strOtherAccount, 65536));\n-\n-        if (!ser_action.ForRead())\n-        {\n-            WriteOrderPos(nOrderPos, mapValue);\n-\n-            if (!(mapValue.empty() && _ssExtra.empty()))\n-            {\n-                CDataStream ss(nType, nVersion);\n-                ss.insert(ss.begin(), '\\0');\n-                ss << mapValue;\n-                ss.insert(ss.end(), _ssExtra.begin(), _ssExtra.end());\n-                strComment.append(ss.str());\n-            }\n-        }\n-\n-        READWRITE(LIMITED_STRING(strComment, 65536));\n-\n-        size_t nSepPos = strComment.find(\"\\0\", 0, 1);\n-        if (ser_action.ForRead())\n-        {\n-            mapValue.clear();\n-            if (std::string::npos != nSepPos)\n-            {\n-                CDataStream ss(std::vector<char>(strComment.begin() + nSepPos + 1, strComment.end()), nType, nVersion);\n-                ss >> mapValue;\n-                _ssExtra = std::vector<char>(ss.begin(), ss.end());\n-            }\n-            ReadOrderPos(nOrderPos, mapValue);\n-        }\n-        if (std::string::npos != nSepPos)\n-            strComment.erase(nSepPos);\n-\n-        mapValue.erase(\"n\");\n-    }\n-\n-private:\n-    std::vector<char> _ssExtra;\n-};\n-\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "3968922b9623af9da9959adc49a779d6837e1f0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTY4OTIyYjk2MjNhZjlkYTk5NTlhZGM0OWE3NzlkNjgzN2UxZjBj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-01-05T21:27:42Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-01-05T22:17:29Z"
      },
      "message": "c++11: fix libbdb build against libc++ in c++11 mode\n\natomic_init clashes with",
      "tree": {
        "sha": "3c0f10eaf55656dcf38442ea1b57f79306c9f914",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c0f10eaf55656dcf38442ea1b57f79306c9f914"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3968922b9623af9da9959adc49a779d6837e1f0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3968922b9623af9da9959adc49a779d6837e1f0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3968922b9623af9da9959adc49a779d6837e1f0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3968922b9623af9da9959adc49a779d6837e1f0c/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57d2f62c99e7ec2c1c95809f0f8f7441c3201423",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57d2f62c99e7ec2c1c95809f0f8f7441c3201423",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57d2f62c99e7ec2c1c95809f0f8f7441c3201423"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e2f85ad4fcad867d25fab7db70e62d04ee179601",
        "filename": "depends/packages/bdb.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3968922b9623af9da9959adc49a779d6837e1f0c/depends/packages/bdb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3968922b9623af9da9959adc49a779d6837e1f0c/depends/packages/bdb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/bdb.mk?ref=3968922b9623af9da9959adc49a779d6837e1f0c",
        "patch": "@@ -12,7 +12,8 @@ $(package)_config_opts_linux=--with-pic\n endef\n \n define $(package)_preprocess_cmds\n-  sed -i.old 's/__atomic_compare_exchange/__atomic_compare_exchange_db/' dbinc/atomic.h\n+  sed -i.old 's/__atomic_compare_exchange/__atomic_compare_exchange_db/' dbinc/atomic.h && \\\n+  sed -i.old 's/atomic_init/atomic_init_db/' dbinc/atomic.h mp/mp_region.c mp/mp_mvcc.c mp/mp_fget.c mutex/mut_method.c mutex/mut_tas.c\n endef\n \n define $(package)_config_cmds"
      }
    ]
  }
]