[
  {
    "sha": "7918c1b019a36a8f9aa55daae422c6b6723b2a39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTE4YzFiMDE5YTM2YThmOWFhNTVkYWFlNDIyYzZiNjcyM2IyYTM5",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-04-21T16:41:35Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-04-27T00:23:05Z"
      },
      "message": "test: Add CreateWalletFromFile test\n\nAdd unit test calling CreateWalletFromFile, which isn't currently called from\nother unit tests, with some basic checks to make sure it rescans and registers\nfor notifications correctly.\n\nMotivation for this change was to try to write a test that would fail without\nthe early `handleNotifications` call in ef8c6ca60767cac589d98ca57ee33179608ccda8\nfrom https://github.com/bitcoin/bitcoin/pull/16426, but succeed with it:\n\nhttps://github.com/bitcoin/bitcoin/blob/ef8c6ca60767cac589d98ca57ee33179608ccda8/src/wallet/wallet.cpp#L3978-L3986\n\nHowever, writing a full test for the race condition that call prevents isn't\npossible without the locking changes from #16426. So this PR just adds as much\ntest coverage as is possible now.\n\nThis new test is also useful for https://github.com/bitcoin/bitcoin/pull/15719,\nsince it detects the stale notifications.transactionAddedToMempool notifications\nthat PR eliminates.",
      "tree": {
        "sha": "b79c090383a2f68f615cca184550608c4df1d89b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b79c090383a2f68f615cca184550608c4df1d89b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7918c1b019a36a8f9aa55daae422c6b6723b2a39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7918c1b019a36a8f9aa55daae422c6b6723b2a39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7918c1b019a36a8f9aa55daae422c6b6723b2a39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7918c1b019a36a8f9aa55daae422c6b6723b2a39/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eef90c14ed0f559e3f6e187341009270b84f45cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eef90c14ed0f559e3f6e187341009270b84f45cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eef90c14ed0f559e3f6e187341009270b84f45cb"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 131,
      "deletions": 5
    },
    "files": [
      {
        "sha": "65a64f2384e7da9a4fab166580b6507890ddcce0",
        "filename": "src/test/util/logging.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7918c1b019a36a8f9aa55daae422c6b6723b2a39/src/test/util/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7918c1b019a36a8f9aa55daae422c6b6723b2a39/src/test/util/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/logging.cpp?ref=7918c1b019a36a8f9aa55daae422c6b6723b2a39",
        "patch": "@@ -11,13 +11,13 @@\n \n #include <stdexcept>\n \n-DebugLogHelper::DebugLogHelper(std::string message)\n-    : m_message{std::move(message)}\n+DebugLogHelper::DebugLogHelper(std::string message, MatchFn match)\n+    : m_message{std::move(message)}, m_match(std::move(match))\n {\n     m_print_connection = LogInstance().PushBackCallback(\n         [this](const std::string& s) {\n             if (m_found) return;\n-            m_found = s.find(m_message) != std::string::npos;\n+            m_found = s.find(m_message) != std::string::npos && m_match(&s);\n         });\n     noui_test_redirect();\n }\n@@ -26,7 +26,7 @@ void DebugLogHelper::check_found()\n {\n     noui_reconnect();\n     LogInstance().DeleteCallback(m_print_connection);\n-    if (!m_found) {\n+    if (!m_found && m_match(nullptr)) {\n         throw std::runtime_error(strprintf(\"'%s' not found in debug log\\n\", m_message));\n     }\n }"
      },
      {
        "sha": "1fcf7ca305d13b90b346720ecd49f8f5ebcaae19",
        "filename": "src/test/util/logging.h",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7918c1b019a36a8f9aa55daae422c6b6723b2a39/src/test/util/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7918c1b019a36a8f9aa55daae422c6b6723b2a39/src/test/util/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/logging.h?ref=7918c1b019a36a8f9aa55daae422c6b6723b2a39",
        "patch": "@@ -17,10 +17,22 @@ class DebugLogHelper\n     bool m_found{false};\n     std::list<std::function<void(const std::string&)>>::iterator m_print_connection;\n \n+    //! Custom match checking function.\n+    //!\n+    //! Invoked with pointers to lines containing matching strings, and with\n+    //! null if check_found() is called without any successful match.\n+    //!\n+    //! Can return true to enable default DebugLogHelper behavior of:\n+    //! (1) ending search after first successful match, and\n+    //! (2) raising an error in check_found if no match was found\n+    //! Can return false to do the opposite in either case.\n+    using MatchFn = std::function<bool(const std::string* line)>;\n+    MatchFn m_match;\n+\n     void check_found();\n \n public:\n-    DebugLogHelper(std::string message);\n+    DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n     ~DebugLogHelper() { check_found(); }\n };\n "
      },
      {
        "sha": "1215956bb4aef51fa11cc407c5e59b8b6809565e",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 114,
        "deletions": 0,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7918c1b019a36a8f9aa55daae422c6b6723b2a39/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7918c1b019a36a8f9aa55daae422c6b6723b2a39/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=7918c1b019a36a8f9aa55daae422c6b6723b2a39",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <wallet/wallet.h>\n \n+#include <future>\n #include <memory>\n #include <stdint.h>\n #include <vector>\n@@ -12,6 +13,7 @@\n #include <node/context.h>\n #include <policy/policy.h>\n #include <rpc/server.h>\n+#include <test/util/logging.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n #include <wallet/coincontrol.h>\n@@ -26,6 +28,36 @@ extern UniValue importwallet(const JSONRPCRequest& request);\n \n BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n \n+static std::shared_ptr<CWallet> TestLoadWallet(interfaces::Chain& chain)\n+{\n+    std::string error;\n+    std::vector<std::string> warnings;\n+    auto wallet = CWallet::CreateWalletFromFile(chain, WalletLocation(\"\"), error, warnings);\n+    wallet->postInitProcess();\n+    return wallet;\n+}\n+\n+static void TestUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n+{\n+    SyncWithValidationInterfaceQueue();\n+    wallet->m_chain_notifications_handler.reset();\n+    UnloadWallet(std::move(wallet));\n+}\n+\n+static CMutableTransaction TestSimpleSpend(const CTransaction& from, uint32_t index, const CKey& key, const CScript& pubkey)\n+{\n+    CMutableTransaction mtx;\n+    mtx.vout.push_back({from.vout[index].nValue - DEFAULT_TRANSACTION_MAXFEE, pubkey});\n+    mtx.vin.push_back({CTxIn{from.GetHash(), index}});\n+    FillableSigningProvider keystore;\n+    keystore.AddKey(key);\n+    std::map<COutPoint, Coin> coins;\n+    coins[mtx.vin[0].prevout].out = from.vout[index];\n+    std::map<int, std::string> input_errors;\n+    BOOST_CHECK(SignTransaction(mtx, &keystore, coins, SIGHASH_ALL, input_errors));\n+    return mtx;\n+}\n+\n static void AddKey(CWallet& wallet, const CKey& key)\n {\n     auto spk_man = wallet.GetOrCreateLegacyScriptPubKeyMan();\n@@ -658,4 +690,86 @@ BOOST_FIXTURE_TEST_CASE(wallet_descriptor_test, BasicTestingSetup)\n     BOOST_CHECK_EXCEPTION(vr >> w_desc, std::ios_base::failure, malformed_descriptor);\n }\n \n+//! Test CreateWalletFromFile function and its behavior handling potential race\n+//! conditions if it's called the same time an incoming transaction shows up in\n+//! the mempool or a new block.\n+//!\n+//! It isn't possible for a unit test to totally verify there aren't race\n+//! conditions without hooking into the implementation more, so this test just\n+//! verifies that new transactions are detected during loading without any\n+//! notifications at all, to infer that timing of notifications shouldn't\n+//! matter. The test could be extended to cover other scenarios in the future.\n+BOOST_FIXTURE_TEST_CASE(CreateWalletFromFile, TestChain100Setup)\n+{\n+    // Create new wallet with known key and unload it.\n+    auto chain = interfaces::MakeChain(m_node);\n+    auto wallet = TestLoadWallet(*chain);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    AddKey(*wallet, key);\n+    TestUnloadWallet(std::move(wallet));\n+\n+    // Add log hook to detect AddToWallet events from rescans, blockConnected,\n+    // and transactionAddedToMempool notifications\n+    int addtx_count = 0;\n+    DebugLogHelper addtx_counter(\"[default wallet] AddToWallet\", [&](const std::string* s) {\n+        if (s) ++addtx_count;\n+        return false;\n+    });\n+\n+    bool rescan_completed = false;\n+    DebugLogHelper rescan_check(\"[default wallet] Rescan completed\", [&](const std::string* s) {\n+        if (s) {\n+            // For now, just assert that cs_main is being held during the\n+            // rescan, ensuring that a new block couldn't be connected\n+            // that the wallet would miss. After\n+            // https://github.com/bitcoin/bitcoin/pull/16426 when cs_main is no\n+            // longer held, the test can be extended to append a new block here\n+            // and check it's handled correctly.\n+            AssertLockHeld(::cs_main);\n+            rescan_completed = true;\n+        }\n+        return false;\n+    });\n+\n+    // Block the queue to prevent the wallet receiving blockConnected and\n+    // transactionAddedToMempool notifications, and create block and mempool\n+    // transactions paying to the wallet\n+    std::promise<void> promise;\n+    CallFunctionInValidationInterfaceQueue([&promise] {\n+        promise.get_future().wait();\n+    });\n+    std::string error;\n+    m_coinbase_txns.push_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n+    auto block_tx = TestSimpleSpend(*m_coinbase_txns[0], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\n+    m_coinbase_txns.push_back(CreateAndProcessBlock({block_tx}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n+    auto mempool_tx = TestSimpleSpend(*m_coinbase_txns[1], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\n+    BOOST_CHECK(chain->broadcastTransaction(MakeTransactionRef(mempool_tx), DEFAULT_TRANSACTION_MAXFEE, false, error));\n+\n+    // Reload wallet and make sure new transactions are detected despite events\n+    // being blocked\n+    wallet = TestLoadWallet(*chain);\n+    BOOST_CHECK(rescan_completed);\n+    BOOST_CHECK_EQUAL(addtx_count, 2);\n+    unsigned int block_tx_time, mempool_tx_time;\n+    {\n+        LOCK(wallet->cs_wallet);\n+        block_tx_time = wallet->mapWallet.at(block_tx.GetHash()).nTimeReceived;\n+        mempool_tx_time = wallet->mapWallet.at(mempool_tx.GetHash()).nTimeReceived;\n+    }\n+\n+    // Unblock notification queue and make sure stale blockConnected and\n+    // transactionAddedToMempool events are processed\n+    promise.set_value();\n+    SyncWithValidationInterfaceQueue();\n+    BOOST_CHECK_EQUAL(addtx_count, 4);\n+    {\n+        LOCK(wallet->cs_wallet);\n+        BOOST_CHECK_EQUAL(block_tx_time, wallet->mapWallet.at(block_tx.GetHash()).nTimeReceived);\n+        BOOST_CHECK_EQUAL(mempool_tx_time, wallet->mapWallet.at(mempool_tx.GetHash()).nTimeReceived);\n+    }\n+\n+    TestUnloadWallet(std::move(wallet));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]