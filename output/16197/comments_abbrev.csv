MarcoFalke,2019-06-12 21:10:45,"The test is from @sdaftuar, but heavily modified to use mocktime and less nodes. See https://github.com/sdaftuar/bitcoin/commit/db8fc5a2e25b6fcb08924e57f3a3a1acef6611ea",https://github.com/bitcoin/bitcoin/pull/16197#issuecomment-501456805,501456805,
MarcoFalke,2019-06-12 23:18:41,@sipsorcery Any idea why this doesn't compile on msvc?,https://github.com/bitcoin/bitcoin/pull/16197#issuecomment-501488823,501488823,
sipsorcery,2019-06-13 06:17:52,"> @sipsorcery Any idea why this doesn't compile on msvc?\n\n@MarcoFalke I'll be able to have a closer look later. \n\nFrom a quick glance my first guess would be that if there's a clock involved gcc and msvc do things differently, see this [SO question]( https://stackoverflow.com/questions/43276695/stdchronosystem-clock-vs-stdchronohigh-resolution-clock-behavior/43279646).",https://github.com/bitcoin/bitcoin/pull/16197#issuecomment-501564595,501564595,
MarcoFalke,2019-06-13 11:09:57,"The build failure according to appveyor is\n\n```\nc:\projects\bitcoin\src\random.cpp(798): error C2893: Failed to specialize function template 'D GetRandTime(D) noexcept' [C:\projects\bitcoin\build_msvc\libbitcoin_util\libbitcoin_util.vcxproj]\n```\n\nI don't change anything how to deal with clocks. The only thing that changes is the type from `long long` to `microseconds`.",https://github.com/bitcoin/bitcoin/pull/16197#issuecomment-501658192,501658192,
sipsorcery,2019-06-13 19:43:27,"@MarcoFalke adding `noexcept` to the template specialisation on line 675 fixes the msvc build for me.\n\n`675: template std::chrono::microseconds GetRandTime(std::chrono::microseconds) noexcept;`",https://github.com/bitcoin/bitcoin/pull/16197#issuecomment-501851556,501851556,
MarcoFalke,2019-06-13 20:01:19,:pray: :heart: Thx,https://github.com/bitcoin/bitcoin/pull/16197#issuecomment-501857637,501857637,
DrahtBot,2019-06-17 00:29:58,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/16197#issuecomment-502499015,502499015,
Empact,2019-06-17 15:38:11,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16197#issuecomment-502735779,502735779,
jonatack,2019-06-17 18:28:28,Concept ACK. Review in progress.,https://github.com/bitcoin/bitcoin/pull/16197#issuecomment-502798454,502798454,
sdaftuar,2019-07-19 18:05:09,"Concept ACK -- I wasn't sure if others wanted a change like this when I first wrote this code, but I will try to review this since it seems now that others also think this is useful.",https://github.com/bitcoin/bitcoin/pull/16197#issuecomment-513323131,513323131,
practicalswift,2019-07-22 11:12:29,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16197#issuecomment-513748340,513748340,
instagibbs,2019-06-12 21:25:50,probably want to directly mention why nNow is mockable here,https://github.com/bitcoin/bitcoin/pull/16197#discussion_r293124796,293124796,src/net_processing.cpp
MarcoFalke,2019-06-12 22:08:58,"It is *not* mockable\n\nAdded a comment",https://github.com/bitcoin/bitcoin/pull/16197#discussion_r293138070,293138070,src/net_processing.cpp
Empact,2019-06-17 15:39:35,"nit: Maybe a good time to added a `std::chrono::microseconds second{1000000}` declaration so these can be self-documenting? Alternatively, could declare them as `std::chrono::seconds`, `std::chrono::minutes` and allow the compiler to convert them on use.",https://github.com/bitcoin/bitcoin/pull/16197#discussion_r294361931,294361931,src/net_processing.cpp
MarcoFalke,2019-06-17 18:14:57,Good point. Removed the `1000000` factor and used compile time magic to derive it from `std::chrono::seconds` instead.,https://github.com/bitcoin/bitcoin/pull/16197#discussion_r294439015,294439015,src/net_processing.cpp
Empact,2019-06-17 19:57:06,"This works as well fyi:\n\n```diff\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\nindex 7ed8c49c1..0b3219e55 100644\n--- a/src/net_processing.cpp\n+++ b/src/net_processing.cpp\n@@ -67,14 +67,14 @@ static constexpr int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;\n static constexpr int32_t MAX_PEER_TX_IN_FLIGHT = 100;\n /** Maximum number of announced transactions from a peer *",https://github.com/bitcoin/bitcoin/pull/16197#discussion_r294492146,294492146,src/net_processing.cpp
MarcoFalke,2019-06-17 21:05:43,"I know, but it opted for the least difference from the previous code. Also seems safer to use microseconds in combination with `GetRand` (which wouldn't work with seconds)",https://github.com/bitcoin/bitcoin/pull/16197#discussion_r294517226,294517226,src/net_processing.cpp
