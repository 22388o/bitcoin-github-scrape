[
  {
    "sha": "779204029463ed89fa74c52510017954f4cb2411",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzkyMDQwMjk0NjNlZDg5ZmE3NGM1MjUxMDAxNzk1NGY0Y2IyNDEx",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-10-30T02:14:08Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-10-30T02:14:08Z"
      },
      "message": "Update comments in rpcserver to be doxygen compatible",
      "tree": {
        "sha": "5ceb9fc098d64095f4939143485daaac7d89203c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ceb9fc098d64095f4939143485daaac7d89203c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/779204029463ed89fa74c52510017954f4cb2411",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/779204029463ed89fa74c52510017954f4cb2411",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/779204029463ed89fa74c52510017954f4cb2411",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/779204029463ed89fa74c52510017954f4cb2411/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65e4e8427d900b27f579dc12af6c74b3ec628286",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65e4e8427d900b27f579dc12af6c74b3ec628286",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65e4e8427d900b27f579dc12af6c74b3ec628286"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 30,
      "deletions": 31
    },
    "files": [
      {
        "sha": "08ed73f6de62ec9d0738de1dac3310be59b0817b",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/779204029463ed89fa74c52510017954f4cb2411/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/779204029463ed89fa74c52510017954f4cb2411/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=779204029463ed89fa74c52510017954f4cb2411",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"rpcserver.h\"\n@@ -34,7 +34,7 @@ using namespace std;\n static std::string strRPCUserColonPass;\n \n static bool fRPCRunning = false;\n-// These are created by StartRPCThreads, destroyed in StopRPCThreads\n+//! These are created by StartRPCThreads, destroyed in StopRPCThreads\n static asio::io_service* rpc_io_service = NULL;\n static map<string, boost::shared_ptr<deadline_timer> > deadlineTimers;\n static ssl::context* rpc_ssl_context = NULL;\n@@ -134,9 +134,9 @@ vector<unsigned char> ParseHexO(const Object& o, string strKey)\n }\n \n \n-///\n-/// Note: This interface may still be subject to change.\n-///\n+/**\n+ * Note: This interface may still be subject to change.\n+ */\n \n string CRPCTable::help(string strCommand) const\n {\n@@ -232,11 +232,9 @@ Value stop(const Array& params, bool fHelp)\n \n \n \n-//\n-// Call Table\n-//\n-\n-\n+/**\n+ * Call Table\n+ */\n static const CRPCCommand vRPCCommands[] =\n { //  category              name                      actor (function)         okSafeMode threadSafe reqWallet\n   //  --------------------- ------------------------  -----------------------  ---------- ---------- ---------\n@@ -453,7 +451,7 @@ class AcceptedConnectionImpl : public AcceptedConnection\n \n void ServiceConnection(AcceptedConnection *conn);\n \n-// Forward declaration required for RPCListen\n+//! Forward declaration required for RPCListen\n template <typename Protocol, typename SocketAcceptorService>\n static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,\n                              ssl::context& context,\n@@ -669,7 +667,7 @@ void StartRPCThreads()\n \n             fListening = true;\n             rpc_acceptors.push_back(acceptor);\n-            // If dual IPv6/IPv4 bind succesful, skip binding to IPv4 separately\n+            // If dual IPv6/IPv4 bind successful, skip binding to IPv4 separately\n             if(bBindAny && bindAddress == asio::ip::address_v6::any() && !v6_only_error)\n                 break;\n         }"
      },
      {
        "sha": "cc444cef1fad0e092fb2d2b1d6a83f50a1d7c8a6",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 20,
        "deletions": 19,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/779204029463ed89fa74c52510017954f4cb2411/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/779204029463ed89fa74c52510017954f4cb2411/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=779204029463ed89fa74c52510017954f4cb2411",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef _BITCOINRPC_SERVER_H_\n@@ -32,9 +32,10 @@ class AcceptedConnection\n     virtual void close() = 0;\n };\n \n-/* Start RPC threads */\n+/** Start RPC threads */\n void StartRPCThreads();\n-/* Alternative to StartRPCThreads for the GUI, when no server is\n+/**\n+ * Alternative to StartRPCThreads for the GUI, when no server is\n  * used. The RPC thread in this case is only used to handle timeouts.\n  * If real RPC threads have already been started this is a no-op.\n  */\n@@ -44,23 +45,23 @@ void StopRPCThreads();\n /* Query whether RPC is running */\n bool IsRPCRunning();\n \n-/*\n-  Type-check arguments; throws JSONRPCError if wrong type given. Does not check that\n-  the right number of arguments are passed, just that any passed are the correct type.\n-  Use like:  RPCTypeCheck(params, boost::assign::list_of(str_type)(int_type)(obj_type));\n-*/\n+/**\n+ * Type-check arguments; throws JSONRPCError if wrong type given. Does not check that\n+ * the right number of arguments are passed, just that any passed are the correct type.\n+ * Use like:  RPCTypeCheck(params, boost::assign::list_of(str_type)(int_type)(obj_type));\n+ */\n void RPCTypeCheck(const json_spirit::Array& params,\n                   const std::list<json_spirit::Value_type>& typesExpected, bool fAllowNull=false);\n-/*\n-  Check for expected keys/value types in an Object.\n-  Use like: RPCTypeCheck(object, boost::assign::map_list_of(\"name\", str_type)(\"value\", int_type));\n-*/\n+/**\n+ * Check for expected keys/value types in an Object.\n+ * Use like: RPCTypeCheck(object, boost::assign::map_list_of(\"name\", str_type)(\"value\", int_type));\n+ */\n void RPCTypeCheck(const json_spirit::Object& o,\n                   const std::map<std::string, json_spirit::Value_type>& typesExpected, bool fAllowNull=false);\n \n-/*\n-  Run func nSeconds from now. Uses boost deadline timers.\n-  Overrides previous timer <name> (if any).\n+/**\n+ * Run func nSeconds from now. Uses boost deadline timers.\n+ * Overrides previous timer <name> (if any).\n  */\n void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds);\n \n@@ -104,10 +105,10 @@ class CRPCTable\n \n extern const CRPCTable tableRPC;\n \n-//\n-// Utilities: convert hex-encoded Values\n-// (throws error if not hex).\n-//\n+/**\n+ * Utilities: convert hex-encoded Values\n+ * (throws error if not hex).\n+ */\n extern uint256 ParseHashV(const json_spirit::Value& v, std::string strName);\n extern uint256 ParseHashO(const json_spirit::Object& o, std::string strKey);\n extern std::vector<unsigned char> ParseHexV(const json_spirit::Value& v, std::string strName);"
      }
    ]
  }
]