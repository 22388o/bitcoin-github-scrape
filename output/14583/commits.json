[
  {
    "sha": "36c8e68585091d10d8a1d4f97d2db87cd8cedcb2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmM4ZTY4NTg1MDkxZDEwZDhhMWQ0Zjk3ZDJkYjg3Y2Q4Y2VkY2Iy",
    "commit": {
      "author": {
        "name": "Martin Erlandsson",
        "email": "martin@megabit.se",
        "date": "2018-10-25T19:58:08Z"
      },
      "committer": {
        "name": "Martin Erlandsson",
        "email": "martin@megabit.se",
        "date": "2018-10-28T05:01:01Z"
      },
      "message": "Various textual improvements in build docs",
      "tree": {
        "sha": "ae5b861963d84b7aaa7ecae02744ad01c87d9c26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae5b861963d84b7aaa7ecae02744ad01c87d9c26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36c8e68585091d10d8a1d4f97d2db87cd8cedcb2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36c8e68585091d10d8a1d4f97d2db87cd8cedcb2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36c8e68585091d10d8a1d4f97d2db87cd8cedcb2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36c8e68585091d10d8a1d4f97d2db87cd8cedcb2/comments",
    "author": {
      "login": "merland",
      "id": 453092,
      "node_id": "MDQ6VXNlcjQ1MzA5Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/453092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/merland",
      "html_url": "https://github.com/merland",
      "followers_url": "https://api.github.com/users/merland/followers",
      "following_url": "https://api.github.com/users/merland/following{/other_user}",
      "gists_url": "https://api.github.com/users/merland/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/merland/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/merland/subscriptions",
      "organizations_url": "https://api.github.com/users/merland/orgs",
      "repos_url": "https://api.github.com/users/merland/repos",
      "events_url": "https://api.github.com/users/merland/events{/privacy}",
      "received_events_url": "https://api.github.com/users/merland/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "merland",
      "id": 453092,
      "node_id": "MDQ6VXNlcjQ1MzA5Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/453092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/merland",
      "html_url": "https://github.com/merland",
      "followers_url": "https://api.github.com/users/merland/followers",
      "following_url": "https://api.github.com/users/merland/following{/other_user}",
      "gists_url": "https://api.github.com/users/merland/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/merland/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/merland/subscriptions",
      "organizations_url": "https://api.github.com/users/merland/orgs",
      "repos_url": "https://api.github.com/users/merland/repos",
      "events_url": "https://api.github.com/users/merland/events{/privacy}",
      "received_events_url": "https://api.github.com/users/merland/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "754a00d55f30f6112a1b68cb0bec5d59565096d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/754a00d55f30f6112a1b68cb0bec5d59565096d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/754a00d55f30f6112a1b68cb0bec5d59565096d1"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 28,
      "deletions": 30
    },
    "files": [
      {
        "sha": "7ec62ea779ffd2d8c6c0f1b4593472eb961846a9",
        "filename": "doc/build-freebsd.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36c8e68585091d10d8a1d4f97d2db87cd8cedcb2/doc/build-freebsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36c8e68585091d10d8a1d4f97d2db87cd8cedcb2/doc/build-freebsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-freebsd.md?ref=36c8e68585091d10d8a1d4f97d2db87cd8cedcb2",
        "patch": "@@ -29,7 +29,7 @@ git clone https://github.com/bitcoin/bitcoin\n \n ## Building Bitcoin Core\n \n-**Important**: Use `gmake` (the non-GNU `make` will exit with an error).\n+**Important**: Use `gmake` (the non-GNU `make` will exit with an error):\n \n ```\n ./autogen.sh"
      },
      {
        "sha": "48ac0525b941fc94d7c2e27afb3902ed9f8a42a1",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36c8e68585091d10d8a1d4f97d2db87cd8cedcb2/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36c8e68585091d10d8a1d4f97d2db87cd8cedcb2/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=36c8e68585091d10d8a1d4f97d2db87cd8cedcb2",
        "patch": "@@ -36,7 +36,7 @@ BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n It is recommended to use Berkeley DB 4.8. You cannot use the BerkeleyDB library\n from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n If you have to build it yourself, you can use [the installation script included\n-in contrib/](/contrib/install_db4.sh) like so\n+in contrib/](/contrib/install_db4.sh) like so:\n \n ```shell\n ./contrib/install_db4.sh `pwd` CC=cc CXX=c++\n@@ -94,7 +94,7 @@ The standard ulimit restrictions in OpenBSD are very strict:\n \n     data(kbytes)         1572864\n \n-This, unfortunately, in some cases not enough to compile some `.cpp` files in the project,\n+This is, unfortunately, in some cases not enough to compile some `.cpp` files in the project,\n (see issue [#6658](https://github.com/bitcoin/bitcoin/issues/6658)).\n If your user is in the `staff` group the limit can be raised with:\n "
      },
      {
        "sha": "7be21f79211ceffbc8e5a774d9545b053a2a64be",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36c8e68585091d10d8a1d4f97d2db87cd8cedcb2/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36c8e68585091d10d8a1d4f97d2db87cd8cedcb2/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=36c8e68585091d10d8a1d4f97d2db87cd8cedcb2",
        "patch": "@@ -20,28 +20,28 @@ Dependencies\n \n See [dependencies.md](dependencies.md) for a complete overview.\n \n-If you want to build the disk image with `make deploy` (.dmg / optional), you need RSVG\n+If you want to build the disk image with `make deploy` (.dmg / optional), you need RSVG:\n \n     brew install librsvg\n \n Berkeley DB\n -----------\n It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n you can use [the installation script included in contrib/](/contrib/install_db4.sh)\n-like so\n+like so:\n \n ```shell\n ./contrib/install_db4.sh .\n ```\n \n from the root of the repository.\n \n-**Note**: You only need Berkeley DB if the wallet is enabled (see the section *Disable-Wallet mode* below).\n+**Note**: You only need Berkeley DB if the wallet is enabled (see [*Disable-wallet mode*](/doc/build-osx.md#disable-wallet-mode)).\n \n Build Bitcoin Core\n ------------------------\n \n-1. Clone the Bitcoin Core source code and cd into `bitcoin`\n+1. Clone the Bitcoin Core source code:\n \n         git clone https://github.com/bitcoin/bitcoin\n         cd bitcoin\n@@ -80,13 +80,13 @@ Running\n \n Bitcoin Core is now available at `./src/bitcoind`\n \n-Before running, it's recommended that you create an RPC configuration file.\n+Before running, it's recommended that you create an RPC configuration file:\n \n     echo -e \"rpcuser=bitcoinrpc\\nrpcpassword=$(xxd -l 16 -p /dev/urandom)\" > \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n \n     chmod 600 \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n \n-The first time you run bitcoind, it will start downloading the blockchain. This process could take several hours.\n+The first time you run bitcoind, it will start downloading the blockchain. This process could take many hours, or even days on slower than average systems.\n \n You can monitor the download process by looking at the debug.log file:\n "
      },
      {
        "sha": "522e3069ce4b767bb6433ec62b5f2ce41c351610",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36c8e68585091d10d8a1d4f97d2db87cd8cedcb2/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36c8e68585091d10d8a1d4f97d2db87cd8cedcb2/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=36c8e68585091d10d8a1d4f97d2db87cd8cedcb2",
        "patch": "@@ -6,8 +6,8 @@ Some notes on how to build Bitcoin Core in Unix.\n \n Note\n ---------------------\n-Always use absolute paths to configure and compile Bitcoin Core and the dependencies,\n-for example, when specifying the path of the dependency:\n+Always use absolute paths to configure and compile Bitcoin Core and the dependencies.\n+For example, when specifying the path of the dependency:\n \n \t../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX\n \n@@ -24,7 +24,7 @@ make\n make install # optional\n ```\n \n-This will build bitcoin-qt as well if the dependencies are met.\n+This will build bitcoin-qt as well, if the dependencies are met.\n \n Dependencies\n ---------------------\n@@ -87,11 +87,12 @@ You can add the repository and install using the following commands:\n     sudo apt-get install libdb4.8-dev libdb4.8++-dev\n \n Ubuntu and Debian have their own libdb-dev and libdb++-dev packages, but these will install\n-BerkeleyDB 5.1 or later, which break binary wallet compatibility with the distributed executables which\n+BerkeleyDB 5.1 or later. This will break binary wallet compatibility with the distributed executables, which\n are based on BerkeleyDB 4.8. If you do not care about wallet compatibility,\n pass `--with-incompatible-bdb` to configure.\n \n-See the section \"Disable-wallet mode\" to build Bitcoin Core without wallet.\n+To build Bitcoin Core without wallet, see [*Disable-wallet mode*](/doc/build-unix.md#disable-wallet-mode)\n+\n \n Optional (see --with-miniupnpc and --enable-upnp-default):\n \n@@ -161,15 +162,15 @@ Berkeley DB\n -----------\n It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n you can use [the installation script included in contrib/](/contrib/install_db4.sh)\n-like so\n+like so:\n \n ```shell\n ./contrib/install_db4.sh `pwd`\n ```\n \n from the root of the repository.\n \n-**Note**: You only need Berkeley DB if the wallet is enabled (see the section *Disable-Wallet mode* below).\n+**Note**: You only need Berkeley DB if the wallet is enabled (see [*Disable-wallet mode*](/doc/build-unix.md#disable-wallet-mode)).\n \n Boost\n -----\n@@ -193,9 +194,7 @@ Hardening Flags:\n \n \n Hardening enables the following features:\n-\n-* Position Independent Executable\n-    Build position independent code to take advantage of Address Space Layout Randomization\n+* _Position Independent Executable_: Build position independent code to take advantage of Address Space Layout Randomization\n     offered by some kernels. Attackers who can cause execution of code at an arbitrary memory\n     location are thwarted if they don't know where anything useful is located.\n     The stack and heap are randomly located by default, but this allows the code section to be\n@@ -213,8 +212,7 @@ Hardening enables the following features:\n      TYPE\n     ET_DYN\n \n-* Non-executable Stack\n-    If the stack is executable then trivial stack-based buffer overflow exploits are possible if\n+* _Non-executable Stack_: If the stack is executable then trivial stack-based buffer overflow exploits are possible if\n     vulnerable buffers are found. By default, Bitcoin Core should be built with a non-executable stack,\n     but if one of the libraries it uses asks for an executable stack or someone makes a mistake\n     and uses a compiler extension which requires an executable stack, it will silently build an"
      },
      {
        "sha": "fc93a0c6e4ced53ab4b972a9a4444f578cf5a6fd",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36c8e68585091d10d8a1d4f97d2db87cd8cedcb2/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36c8e68585091d10d8a1d4f97d2db87cd8cedcb2/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=36c8e68585091d10d8a1d4f97d2db87cd8cedcb2",
        "patch": "@@ -5,15 +5,15 @@ Below are some notes on how to build Bitcoin Core for Windows.\n \n The options known to work for building Bitcoin Core on Windows are:\n \n-* On Linux using the [Mingw-w64](https://mingw-w64.org/doku.php) cross compiler tool chain. Ubuntu Bionic 18.04 is required\n+* On Linux, using the [Mingw-w64](https://mingw-w64.org/doku.php) cross compiler tool chain. Ubuntu Bionic 18.04 is required\n and is the platform used to build the Bitcoin Core Windows release binaries.\n-* On Windows using [Windows\n+* On Windows, using [Windows\n Subsystem for Linux (WSL)](https://msdn.microsoft.com/commandline/wsl/about) and the Mingw-w64 cross compiler tool chain.\n \n Other options which may work, but which have not been extensively tested are (please contribute instructions):\n \n-* On Windows using a POSIX compatibility layer application such as [cygwin](http://www.cygwin.com/) or [msys2](http://www.msys2.org/).\n-* On Windows using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com).\n+* On Windows, using a POSIX compatibility layer application such as [cygwin](http://www.cygwin.com/) or [msys2](http://www.msys2.org/).\n+* On Windows, using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com).\n \n Installing Windows Subsystem for Linux\n ---------------------------------------\n@@ -69,7 +69,7 @@ See also: [dependencies.md](dependencies.md).\n \n ## Building for 64-bit Windows\n \n-The first step is to install the mingw-w64 cross-compilation tool chain.\n+The first step is to install the mingw-w64 cross-compilation tool chain:\n \n     sudo apt install g++-mingw-w64-x86-64\n \n@@ -81,13 +81,13 @@ Once the toolchain is installed the build steps are common:\n \n Note that for WSL the Bitcoin Core source path MUST be somewhere in the default mount file system, for\n example /usr/src/bitcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n-This means you cannot use a directory that located directly on the host Windows file system to perform the build.\n+This means you cannot use a directory that is located directly on the host Windows file system to perform the build.\n \n Acquire the source in the usual way:\n \n     git clone https://github.com/bitcoin/bitcoin.git\n \n-Once the source code is ready the build steps are below.\n+Once the source code is ready the build steps are below:\n \n     PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n@@ -142,9 +142,9 @@ way. This will install to `c:\\workspace\\bitcoin`, for example:\n Footnotes\n ---------\n \n-<a name=\"footnote1\">1</a>: Starting from Ubuntu Xenial 16.04 both the 32 and 64 bit Mingw-w64 packages install two different\n+<a name=\"footnote1\">1</a>: Starting from Ubuntu Xenial 16.04, both the 32 and 64 bit Mingw-w64 packages install two different\n compiler options to allow a choice between either posix or win32 threads. The default option is win32 threads which is the more\n efficient since it will result in binary code that links directly with the Windows kernel32.lib. Unfortunately, the headers\n-required to support win32 threads conflict with some of the classes in the C++11 standard library in particular std::mutex.\n+required to support win32 threads conflict with some of the classes in the C++11 standard library, in particular std::mutex.\n It's not possible to build the Bitcoin Core code using the win32 version of the Mingw-w64 cross compilers (at least not without\n modifying headers in the Bitcoin Core source code)."
      }
    ]
  }
]