[
  {
    "sha": "259c09d0e72860629d213b598ecc8c2735c6092d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTljMDlkMGU3Mjg2MDYyOWQyMTNiNTk4ZWNjOGMyNzM1YzYwOTJk",
    "commit": {
      "author": {
        "name": "benma",
        "email": "mbencun@gmail.com",
        "date": "2017-03-01T06:12:06Z"
      },
      "committer": {
        "name": "benma",
        "email": "mbencun@gmail.com",
        "date": "2017-03-09T11:20:57Z"
      },
      "message": "AppInitMain: split initialization of Connman into a new function\n\nAn effort to reduce the size of AppInitMain().",
      "tree": {
        "sha": "f402cb350a51de2b819e37e94bd70e6cf3d398b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f402cb350a51de2b819e37e94bd70e6cf3d398b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/259c09d0e72860629d213b598ecc8c2735c6092d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/259c09d0e72860629d213b598ecc8c2735c6092d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/259c09d0e72860629d213b598ecc8c2735c6092d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/259c09d0e72860629d213b598ecc8c2735c6092d/comments",
    "author": {
      "login": "benma",
      "id": 1225267,
      "node_id": "MDQ6VXNlcjEyMjUyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benma",
      "html_url": "https://github.com/benma",
      "followers_url": "https://api.github.com/users/benma/followers",
      "following_url": "https://api.github.com/users/benma/following{/other_user}",
      "gists_url": "https://api.github.com/users/benma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
      "organizations_url": "https://api.github.com/users/benma/orgs",
      "repos_url": "https://api.github.com/users/benma/repos",
      "events_url": "https://api.github.com/users/benma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benma/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "benma",
      "id": 1225267,
      "node_id": "MDQ6VXNlcjEyMjUyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benma",
      "html_url": "https://github.com/benma",
      "followers_url": "https://api.github.com/users/benma/followers",
      "following_url": "https://api.github.com/users/benma/following{/other_user}",
      "gists_url": "https://api.github.com/users/benma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
      "organizations_url": "https://api.github.com/users/benma/orgs",
      "repos_url": "https://api.github.com/users/benma/repos",
      "events_url": "https://api.github.com/users/benma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benma/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3e7db829ecd31b0327cff62048ea83ed97f7063",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3e7db829ecd31b0327cff62048ea83ed97f7063",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3e7db829ecd31b0327cff62048ea83ed97f7063"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 64,
      "deletions": 56
    },
    "files": [
      {
        "sha": "279743f09506cca2dd7209b2cf44ebc32e06accf",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 56,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/259c09d0e72860629d213b598ecc8c2735c6092d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/259c09d0e72860629d213b598ecc8c2735c6092d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=259c09d0e72860629d213b598ecc8c2735c6092d",
        "patch": "@@ -1147,6 +1147,61 @@ bool AppInitSanityChecks()\n     return LockDataDirectory(true);\n }\n \n+static bool InitConnman(bool listen)\n+{\n+    // ********************************************************* Step 6a: connection manager initialization\n+    assert(!g_connman);\n+    g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n+    CConnman& connman = *g_connman;\n+\n+    if (mapMultiArgs.count(\"-whitelist\")) {\n+        BOOST_FOREACH(const std::string& net, mapMultiArgs.at(\"-whitelist\")) {\n+            CSubNet subnet;\n+            LookupSubNet(net.c_str(), subnet);\n+            if (!subnet.IsValid())\n+                return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n+            connman.AddWhitelistedRange(subnet);\n+        }\n+    }\n+\n+    if (listen) {\n+        bool fBound = false;\n+        if (mapMultiArgs.count(\"-bind\")) {\n+            BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-bind\")) {\n+                CService addrBind;\n+                if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n+                    return InitError(ResolveErrMsg(\"bind\", strBind));\n+                fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n+            }\n+        }\n+        if (mapMultiArgs.count(\"-whitebind\")) {\n+            BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-whitebind\")) {\n+                CService addrBind;\n+                if (!Lookup(strBind.c_str(), addrBind, 0, false))\n+                    return InitError(ResolveErrMsg(\"whitebind\", strBind));\n+                if (addrBind.GetPort() == 0)\n+                    return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n+                fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR | BF_WHITELIST));\n+            }\n+        }\n+        if (!mapMultiArgs.count(\"-bind\") && !mapMultiArgs.count(\"-whitebind\")) {\n+            struct in_addr inaddr_any;\n+            inaddr_any.s_addr = INADDR_ANY;\n+            fBound |= Bind(connman, CService(in6addr_any, GetListenPort()), BF_NONE);\n+            fBound |= Bind(connman, CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE);\n+        }\n+        if (!fBound)\n+            return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));\n+    }\n+\n+    if (mapMultiArgs.count(\"-seednode\")) {\n+        BOOST_FOREACH(const std::string& strDest, mapMultiArgs.at(\"-seednode\"))\n+            connman.AddOneShot(strDest);\n+    }\n+\n+    return true;\n+}\n+\n bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n {\n     const CChainParams& chainparams = Params();\n@@ -1210,16 +1265,19 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         return false;\n #endif\n     // ********************************************************* Step 6: network initialization\n+    // see Step 2: parameter interactions for more information about these\n+    fListen = GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n+    fDiscover = GetBoolArg(\"-discover\", true);\n+    fRelayTxes = !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n+\n     // Note that we absolutely cannot open any actual connections\n     // until the very end (\"start node\") as the UTXO/block state\n     // is not yet setup and may end up being set up twice if we\n     // need to reindex later.\n+    if(!InitConnman(fListen))\n+        return false;\n \n-    assert(!g_connman);\n-    g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n-    CConnman& connman = *g_connman;\n-\n-    peerLogic.reset(new PeerLogicValidation(&connman));\n+    peerLogic.reset(new PeerLogicValidation(g_connman.get()));\n     RegisterValidationInterface(peerLogic.get());\n     RegisterNodeSignals(GetNodeSignals());\n \n@@ -1254,16 +1312,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    if (mapMultiArgs.count(\"-whitelist\")) {\n-        BOOST_FOREACH(const std::string& net, mapMultiArgs.at(\"-whitelist\")) {\n-            CSubNet subnet;\n-            LookupSubNet(net.c_str(), subnet);\n-            if (!subnet.IsValid())\n-                return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n-            connman.AddWhitelistedRange(subnet);\n-        }\n-    }\n-\n     // Check for host lookup allowed before parsing any network related parameters\n     fNameLookup = GetBoolArg(\"-dns\", DEFAULT_NAME_LOOKUP);\n \n@@ -1309,41 +1357,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    // see Step 2: parameter interactions for more information about these\n-    fListen = GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n-    fDiscover = GetBoolArg(\"-discover\", true);\n-    fRelayTxes = !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n-\n-    if (fListen) {\n-        bool fBound = false;\n-        if (mapMultiArgs.count(\"-bind\")) {\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-bind\")) {\n-                CService addrBind;\n-                if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n-                    return InitError(ResolveErrMsg(\"bind\", strBind));\n-                fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n-            }\n-        }\n-        if (mapMultiArgs.count(\"-whitebind\")) {\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-whitebind\")) {\n-                CService addrBind;\n-                if (!Lookup(strBind.c_str(), addrBind, 0, false))\n-                    return InitError(ResolveErrMsg(\"whitebind\", strBind));\n-                if (addrBind.GetPort() == 0)\n-                    return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n-                fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR | BF_WHITELIST));\n-            }\n-        }\n-        if (!mapMultiArgs.count(\"-bind\") && !mapMultiArgs.count(\"-whitebind\")) {\n-            struct in_addr inaddr_any;\n-            inaddr_any.s_addr = INADDR_ANY;\n-            fBound |= Bind(connman, CService(in6addr_any, GetListenPort()), BF_NONE);\n-            fBound |= Bind(connman, CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE);\n-        }\n-        if (!fBound)\n-            return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));\n-    }\n-\n     if (mapMultiArgs.count(\"-externalip\")) {\n         BOOST_FOREACH(const std::string& strAddr, mapMultiArgs.at(\"-externalip\")) {\n             CService addrLocal;\n@@ -1354,11 +1367,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    if (mapMultiArgs.count(\"-seednode\")) {\n-        BOOST_FOREACH(const std::string& strDest, mapMultiArgs.at(\"-seednode\"))\n-            connman.AddOneShot(strDest);\n-    }\n-\n #if ENABLE_ZMQ\n     pzmqNotificationInterface = CZMQNotificationInterface::Create();\n \n@@ -1627,7 +1635,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nMaxOutboundTimeframe = nMaxOutboundTimeframe;\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n \n-    if (!connman.Start(scheduler, strNodeError, connOptions))\n+    if (!g_connman->Start(scheduler, strNodeError, connOptions))\n         return InitError(strNodeError);\n \n     // ********************************************************* Step 12: finished"
      }
    ]
  }
]