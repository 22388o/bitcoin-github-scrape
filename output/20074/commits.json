[
  {
    "sha": "1a3f92da41f7a41a1f1eabd246c25e771bfdd29c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTNmOTJkYTQxZjdhNDFhMWYxZWFiZDI0NmMyNWU3NzFiZmRkMjlj",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-06-04T15:56:06Z"
      },
      "committer": {
        "name": "Elliott Jin",
        "email": "elliott.jin@gmail.com",
        "date": "2020-10-03T18:57:29Z"
      },
      "message": "test: p2p_blockfilters tests for BIP157 config args\n\n- add tests for BIP157 configuration options\n- test with tighter extra args\n- fixup the message names\n- clean up log messages",
      "tree": {
        "sha": "a945dd741c466d6b4cda313606b9f283e920c7db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a945dd741c466d6b4cda313606b9f283e920c7db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a3f92da41f7a41a1f1eabd246c25e771bfdd29c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a3f92da41f7a41a1f1eabd246c25e771bfdd29c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a3f92da41f7a41a1f1eabd246c25e771bfdd29c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a3f92da41f7a41a1f1eabd246c25e771bfdd29c/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "robot-dreams",
      "id": 4276679,
      "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-dreams",
      "html_url": "https://github.com/robot-dreams",
      "followers_url": "https://api.github.com/users/robot-dreams/followers",
      "following_url": "https://api.github.com/users/robot-dreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-dreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
      "repos_url": "https://api.github.com/users/robot-dreams/repos",
      "events_url": "https://api.github.com/users/robot-dreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54fc96ffa70ad3a53d32709101b7a2ce064d822e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54fc96ffa70ad3a53d32709101b7a2ce064d822e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54fc96ffa70ad3a53d32709101b7a2ce064d822e"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 20,
      "deletions": 6
    },
    "files": [
      {
        "sha": "6f910fd3b6a26fdeb2e95c47a56a8c14291036fd",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a3f92da41f7a41a1f1eabd246c25e771bfdd29c/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a3f92da41f7a41a1f1eabd246c25e771bfdd29c/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=1a3f92da41f7a41a1f1eabd246c25e771bfdd29c",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n \n Tests that a node configured with -blockfilterindex and -peerblockfilters signals\n-NODE_COMPACT_FILTERS and can serve cfilters, cfheaders and cfcheckpts.\n+NODE_COMPACT_FILTERS and can serve cfilter, cfheaders, and cfcheckpt network messages.\n \"\"\"\n \n from test_framework.messages import (\n@@ -47,11 +47,25 @@ def set_test_params(self):\n         self.rpc_timeout = 480\n         self.num_nodes = 2\n         self.extra_args = [\n-            [\"-blockfilterindex\", \"-peerblockfilters\"],\n-            [\"-blockfilterindex\"],\n+            [\"-blockfilterindex=basic\", \"-peerblockfilters\"],\n+            [\"-blockfilterindex=basic\", \"-peerblockfilters=0\"],\n         ]\n \n     def run_test(self):\n+        self.stop_node(0)\n+\n+        self.log.info('Check that -peerblockfilters without -blockfilterindex raises init error')\n+        err_msg = 'Error: Cannot set -peerblockfilters without -blockfilterindex.'\n+        self.nodes[0].assert_start_raises_init_error(['-blockfilterindex=0', '-peerblockfilters'], err_msg)\n+\n+        self.log.info('Check that passing unknown -blockfilterindex type raises init error')\n+        err_msg = 'Error: Unknown -blockfilterindex value foo.'\n+        self.nodes[0].assert_start_raises_init_error(['-blockfilterindex=foo', '-peerblockfilters'], err_msg)\n+\n+        # Restart and restore default \"chain\" topology\n+        self.start_node(0, extra_args=self.extra_args[0])\n+        self.connect_nodes(1, 0)\n+\n         # Node 0 supports COMPACT_FILTERS, node 1 does not.\n         node0 = self.nodes[0].add_p2p_connection(CFiltersClient())\n         node1 = self.nodes[1].add_p2p_connection(CFiltersClient())\n@@ -78,7 +92,7 @@ def run_test(self):\n         assert int(self.nodes[0].getnetworkinfo()['localservices'], 16) & NODE_COMPACT_FILTERS != 0\n         assert int(self.nodes[1].getnetworkinfo()['localservices'], 16) & NODE_COMPACT_FILTERS == 0\n \n-        self.log.info(\"get cfcheckpt on chain to be re-orged out.\")\n+        self.log.debug(\"get cfcheckpt on chain to be re-orged out.\")\n         request = msg_getcfcheckpt(\n             filter_type=FILTER_TYPE_BASIC,\n             stop_hash=int(stale_block_hash, 16)\n@@ -89,7 +103,7 @@ def run_test(self):\n         assert_equal(response.stop_hash, request.stop_hash)\n         assert_equal(len(response.headers), 1)\n \n-        self.log.info(\"Reorg node 0 to a new chain.\")\n+        self.log.debug(\"Reorg node 0 to a new chain.\")\n         connect_nodes(self.nodes[0], 1)\n         self.sync_blocks(timeout=600)\n \n@@ -195,7 +209,7 @@ def run_test(self):\n         computed_cfhash = uint256_from_str(hash256(cfilter.filter_data))\n         assert_equal(computed_cfhash, stale_cfhashes[999])\n \n-        self.log.info(\"Requests to node 1 without NODE_COMPACT_FILTERS results in disconnection.\")\n+        self.log.info(\"Check that requests without NODE_COMPACT_FILTERS results in disconnection.\")\n         requests = [\n             msg_getcfcheckpt(\n                 filter_type=FILTER_TYPE_BASIC,"
      }
    ]
  }
]