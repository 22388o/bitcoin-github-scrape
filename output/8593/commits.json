[
  {
    "sha": "b50cf347adbf4c499617a812dc51c1e18f7dfb75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTBjZjM0N2FkYmY0YzQ5OTYxN2E4MTJkYzUxYzFlMThmN2RmYjc1",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-08-26T03:57:10Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-09-01T18:23:25Z"
      },
      "message": "Verify all txs unless too big or too much hashing",
      "tree": {
        "sha": "62d19e4de4e37d91796affa9f2b0f9bd3fef60e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62d19e4de4e37d91796affa9f2b0f9bd3fef60e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b50cf347adbf4c499617a812dc51c1e18f7dfb75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b50cf347adbf4c499617a812dc51c1e18f7dfb75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b50cf347adbf4c499617a812dc51c1e18f7dfb75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b50cf347adbf4c499617a812dc51c1e18f7dfb75/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f061415d12ce86bd440ef039394ba734c59fd97d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f061415d12ce86bd440ef039394ba734c59fd97d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f061415d12ce86bd440ef039394ba734c59fd97d"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 55,
      "deletions": 21
    },
    "files": [
      {
        "sha": "17c6ac02f72d701484fd28f533f11ea2e5581ace",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 20,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b50cf347adbf4c499617a812dc51c1e18f7dfb75/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b50cf347adbf4c499617a812dc51c1e18f7dfb75/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b50cf347adbf4c499617a812dc51c1e18f7dfb75",
        "patch": "@@ -1026,6 +1026,22 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n     return nSigOps;\n }\n \n+unsigned int GetAccurateBaseSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs, int flags)\n+{\n+    if (tx.IsCoinBase())\n+        return 0;\n+    unsigned int nSigOps = 0;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        nSigOps += tx.vin[i].scriptSig.GetSigOpCount(true);\n+        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n+        nSigOps += prevout.scriptPubKey.GetSigOpCount(true);\n+        if (flags & SCRIPT_VERIFY_P2SH && prevout.scriptPubKey.IsPayToScriptHash())\n+            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n+    }\n+    return nSigOps;\n+}\n+\n int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags)\n {\n     int64_t nSigOps = GetLegacySigOpCount(tx) * WITNESS_SCALE_FACTOR;\n@@ -1260,6 +1276,34 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n         }\n \n+        int64_t nSigOpsHashing = GetWitnessStrippedTransactionWeight(tx) * GetAccurateBaseSigOpCount(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS) / WITNESS_SCALE_FACTOR;\n+        if (fRequireStandard && nSigOpsHashing > MAX_STANDARD_TX_SIGOPS_HASHING)\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops-hashing\", false,\n+                             strprintf(\"%d\", nSigOpsHashing));\n+\n+        unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n+        if (!Params().RequireStandard()) {\n+            scriptVerifyFlags = GetArg(\"-promiscuousmempoolflags\", scriptVerifyFlags);\n+        }\n+\n+        // Check against previous transactions\n+        PrecomputedTransactionData txdata(tx);\n+        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true, txdata)) {\n+            // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n+            // need to turn both off, and compare against just turning off CLEANSTACK\n+            // to see if the failure is specifically due to witness validation.\n+            if (CheckInputs(tx, state, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, txdata) &&\n+                !CheckInputs(tx, state, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, txdata)) {\n+                // Only the witness is wrong, so the transaction itself may be fine.\n+                state.SetCorruptionPossible();\n+            }\n+            return false;\n+        }\n+\n+        // Now we know the witness is valid. We could check the size with witness\n+        if (fRequireStandard && GetTransactionWeight(tx) >= MAX_STANDARD_TX_WEIGHT)\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"tx-size\");\n+\n         // Check for non-standard pay-to-script-hash in inputs\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n@@ -1489,26 +1533,6 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             }\n         }\n \n-        unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n-        if (!Params().RequireStandard()) {\n-            scriptVerifyFlags = GetArg(\"-promiscuousmempoolflags\", scriptVerifyFlags);\n-        }\n-\n-        // Check against previous transactions\n-        // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        PrecomputedTransactionData txdata(tx);\n-        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true, txdata)) {\n-            // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n-            // need to turn both off, and compare against just turning off CLEANSTACK\n-            // to see if the failure is specifically due to witness validation.\n-            if (CheckInputs(tx, state, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, txdata) &&\n-                !CheckInputs(tx, state, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, txdata)) {\n-                // Only the witness is wrong, so the transaction itself may be fine.\n-                state.SetCorruptionPossible();\n-            }\n-            return false;\n-        }\n-\n         // Check again against just the consensus-critical mandatory script\n         // verification flags, in case of bugs in the standard flags that cause\n         // transactions to pass as valid when they're actually invalid. For"
      },
      {
        "sha": "30229d502cc610bc508cbb81163c51b8f0059f59",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b50cf347adbf4c499617a812dc51c1e18f7dfb75/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b50cf347adbf4c499617a812dc51c1e18f7dfb75/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=b50cf347adbf4c499617a812dc51c1e18f7dfb75",
        "patch": "@@ -67,7 +67,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n     // almost as much to process as they cost the sender in fees, because\n     // computing signature hashes is O(ninputs*txsize). Limiting transactions\n     // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n-    unsigned int sz = GetTransactionWeight(tx);\n+    unsigned int sz = GetWitnessStrippedTransactionWeight(tx);\n     if (sz >= MAX_STANDARD_TX_WEIGHT) {\n         reason = \"tx-size\";\n         return false;"
      },
      {
        "sha": "979ec99b7f5f0fafecc4e7512f4144799fea8e63",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b50cf347adbf4c499617a812dc51c1e18f7dfb75/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b50cf347adbf4c499617a812dc51c1e18f7dfb75/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=b50cf347adbf4c499617a812dc51c1e18f7dfb75",
        "patch": "@@ -30,6 +30,8 @@ static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST/5;\n static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /** Default for -bytespersigop */\n static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n+/** Maximum amount of estimated hashing in base CHECKSIG operations */\n+static const unsigned int MAX_STANDARD_TX_SIGOPS_HASHING = 10000000;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid"
      },
      {
        "sha": "1650531c9cea8c1be00f9278abf079361e8e7697",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b50cf347adbf4c499617a812dc51c1e18f7dfb75/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b50cf347adbf4c499617a812dc51c1e18f7dfb75/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=b50cf347adbf4c499617a812dc51c1e18f7dfb75",
        "patch": "@@ -153,3 +153,8 @@ int64_t GetTransactionWeight(const CTransaction& tx)\n {\n     return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n }\n+\n+int64_t GetWitnessStrippedTransactionWeight(const CTransaction& tx)\n+{\n+    return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR;\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "33e52727d1a7764a4be48f467f0ae6589766238c",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b50cf347adbf4c499617a812dc51c1e18f7dfb75/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b50cf347adbf4c499617a812dc51c1e18f7dfb75/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=b50cf347adbf4c499617a812dc51c1e18f7dfb75",
        "patch": "@@ -464,4 +464,7 @@ struct CMutableTransaction\n /** Compute the weight of a transaction, as defined by BIP 141 */\n int64_t GetTransactionWeight(const CTransaction &tx);\n \n+// Compute the weight of a transaction without witness\n+int64_t GetWitnessStrippedTransactionWeight(const CTransaction &tx);\n+\n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      }
    ]
  }
]