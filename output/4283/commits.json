[
  {
    "sha": "14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDA1NWQ4YTNmZDI1ZWZkOTU4ZmZjODE5YWU2YmYzY2IxZTliYTli",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-03T22:46:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-04T04:09:56Z"
      },
      "message": "Avoid duplicate transaction hashes during validation",
      "tree": {
        "sha": "1a17828a9a9998fbba8b29f70d1a556287e298cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a17828a9a9998fbba8b29f70d1a556287e298cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06a4334a2f78d9c742709455f945c12f721b5927",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06a4334a2f78d9c742709455f945c12f721b5927",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06a4334a2f78d9c742709455f945c12f721b5927"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 31,
      "deletions": 22
    },
    "files": [
      {
        "sha": "79f25c069390b2b60474d88051c2d0e0826670aa",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 15,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b",
        "patch": "@@ -1636,7 +1636,7 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n     // undo transactions in reverse order\n     for (int i = block.vtx.size() - 1; i >= 0; i--) {\n         const CTransaction &tx = block.vtx[i];\n-        uint256 hash = tx.GetHash();\n+        uint256 hash = block.GetTxHash(i);\n \n         // Check that all outputs are available and match the outputs in the block itself\n         // exactly. Note that transactions with only provably unspendable outputs won't\n@@ -1966,6 +1966,7 @@ bool static DisconnectTip(CValidationState &state) {\n     CBlock block;\n     if (!ReadBlockFromDisk(block, pindexDelete))\n         return state.Abort(_(\"Failed to read block\"));\n+    block.BuildMerkleTree();\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n@@ -1980,21 +1981,22 @@ bool static DisconnectTip(CValidationState &state) {\n     if (!WriteChainState(state))\n         return false;\n     // Resurrect mempool transactions from the disconnected block.\n-    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+    for (unsigned int i = 0; i < block.vtx.size(); i++) {\n         // ignore validation errors in resurrected transactions\n-        list<CTransaction> removed;\n+        const CTransaction& tx = block.vtx[i];\n+        vector<pair<uint256, CTransaction> > removed;\n         CValidationState stateDummy; \n         if (!tx.IsCoinBase())\n             if (!AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL))\n-                mempool.remove(tx, removed, true);\n+                mempool.removeWithHash(block.GetTxHash(i), tx, removed, true);\n     }\n     mempool.check(pcoinsTip);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n-    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        SyncWithWallets(tx.GetHash(), tx, NULL);\n+    for (unsigned int i=0; i < block.vtx.size(); i++) {\n+        SyncWithWallets(block.GetTxHash(i), block.vtx[i], NULL);\n     }\n     return true;\n }\n@@ -2026,23 +2028,26 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew) {\n     if (!WriteChainState(state))\n         return false;\n     // Remove conflicting transactions from the mempool.\n-    list<CTransaction> txConflicted;\n-    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        list<CTransaction> unused;\n-        mempool.remove(tx, unused);\n-        mempool.removeConflicts(tx, txConflicted);\n+    vector<pair<uint256, CTransaction> > txConflicted;\n+    {\n+        vector<pair<uint256, CTransaction> > txUnused;\n+        for (unsigned int i=0; i < block.vtx.size(); i++) {\n+            const CTransaction& tx = block.vtx[i];\n+            mempool.removeWithHash(block.GetTxHash(i), tx, txUnused);\n+            mempool.removeConflicts(tx, txConflicted);\n+        }\n     }\n     mempool.check(pcoinsTip);\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew);\n     // Tell wallet about transactions that went from mempool\n     // to conflicted:\n-    BOOST_FOREACH(const CTransaction &tx, txConflicted) {\n-        SyncWithWallets(tx.GetHash(), tx, NULL);\n+    for (vector<pair<uint256, CTransaction> >::const_iterator it = txConflicted.begin(); it != txConflicted.end(); it++) {\n+        SyncWithWallets(it->first, it->second, NULL);\n     }\n     // ... and about transactions that got confirmed:\n-    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        SyncWithWallets(tx.GetHash(), tx, &block);\n+    for (unsigned int i=0; i < block.vtx.size(); i++) {\n+        SyncWithWallets(block.GetTxHash(i), block.vtx[i], &block);\n     }\n     return true;\n }"
      },
      {
        "sha": "38d278d5cda6edcb7236032e44e70a995f0381d5",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b",
        "patch": "@@ -86,12 +86,11 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry)\n }\n \n \n-void CTxMemPool::remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive)\n+void CTxMemPool::removeWithHash(const uint256 &hash, const CTransaction &tx, std::vector<std::pair<uint256,CTransaction> >& removed, bool fRecursive)\n {\n     // Remove transaction from memory pool\n     {\n         LOCK(cs);\n-        uint256 hash = tx.GetHash();\n         if (fRecursive) {\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n                 std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));\n@@ -102,7 +101,7 @@ void CTxMemPool::remove(const CTransaction &tx, std::list<CTransaction>& removed\n         }\n         if (mapTx.count(hash))\n         {\n-            removed.push_front(tx);\n+            removed.push_back(std::make_pair(hash, tx));\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n                 mapNextTx.erase(txin.prevout);\n             mapTx.erase(hash);\n@@ -111,10 +110,14 @@ void CTxMemPool::remove(const CTransaction &tx, std::list<CTransaction>& removed\n     }\n }\n \n-void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed)\n+void CTxMemPool::remove(const CTransaction &tx, std::vector<std::pair<uint256,CTransaction> >& removed, bool fRecursive)\n+{\n+    removeWithHash(tx.GetHash(), tx, removed, fRecursive);\n+}\n+\n+void CTxMemPool::removeConflicts(const CTransaction &tx, std::vector<std::pair<uint256,CTransaction> >& removed)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n-    list<CTransaction> result;\n     LOCK(cs);\n     BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n         std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(txin.prevout);"
      },
      {
        "sha": "fd16352313c4c58be16ea8cd092891dd131207de",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b",
        "patch": "@@ -74,8 +74,9 @@ class CTxMemPool\n     void setSanityCheck(bool _fSanityCheck) { fSanityCheck = _fSanityCheck; }\n \n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry);\n-    void remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive = false);\n-    void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n+    void remove(const CTransaction &tx, std::vector<std::pair<uint256,CTransaction> >& removed, bool fRecursive = false);\n+    void removeWithHash(const uint256 &hash, const CTransaction &tx, std::vector<std::pair<uint256,CTransaction> >& removed, bool fRecursive = false);\n+    void removeConflicts(const CTransaction &tx, std::vector<std::pair<uint256,CTransaction> >& removed);\n     void clear();\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);"
      }
    ]
  },
  {
    "sha": "93655f2e2b8122e11b86f5c63ab130e536fb4e56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzY1NWYyZTJiODEyMmUxMWI4NmY1YzYzYWIxMzBlNTM2ZmI0ZTU2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-03T23:19:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-04T04:09:56Z"
      },
      "message": "Remove some duplicate transaction hashes in wallet",
      "tree": {
        "sha": "478e57f7f9bdad49f6a13129c1f2e4bf6480209a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/478e57f7f9bdad49f6a13129c1f2e4bf6480209a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93655f2e2b8122e11b86f5c63ab130e536fb4e56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93655f2e2b8122e11b86f5c63ab130e536fb4e56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93655f2e2b8122e11b86f5c63ab130e536fb4e56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93655f2e2b8122e11b86f5c63ab130e536fb4e56/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14055d8a3fd25efd958ffc819ae6bf3cb1e9ba9b"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 20,
      "deletions": 20
    },
    "files": [
      {
        "sha": "409710bff76d63a7f18fa5d2528ba5874104aef5",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93655f2e2b8122e11b86f5c63ab130e536fb4e56/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93655f2e2b8122e11b86f5c63ab130e536fb4e56/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=93655f2e2b8122e11b86f5c63ab130e536fb4e56",
        "patch": "@@ -46,7 +46,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     walletdb.WriteAccountingEntry(ae);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n-    pwalletMain->AddToWallet(wtx);\n+    pwalletMain->AddToWallet(wtx.GetHash(), wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n@@ -84,13 +84,13 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n     wtx.mapValue[\"comment\"] = \"y\";\n     --wtx.nLockTime;  // Just to change the hash :)\n-    pwalletMain->AddToWallet(wtx);\n+    pwalletMain->AddToWallet(wtx.GetHash(), wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n     wtx.mapValue[\"comment\"] = \"x\";\n     --wtx.nLockTime;  // Just to change the hash :)\n-    pwalletMain->AddToWallet(wtx);\n+    pwalletMain->AddToWallet(wtx.GetHash(), wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;"
      },
      {
        "sha": "d98ba09eeaf654e3418fee0ad3d497bfe86d6035",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93655f2e2b8122e11b86f5c63ab130e536fb4e56/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93655f2e2b8122e11b86f5c63ab130e536fb4e56/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=93655f2e2b8122e11b86f5c63ab130e536fb4e56",
        "patch": "@@ -464,10 +464,8 @@ void CWallet::MarkDirty()\n     }\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n+bool CWallet::AddToWallet(const uint256& hash, const CWalletTx& wtxIn, bool fFromLoadWallet)\n {\n-    uint256 hash = wtxIn.GetHash();\n-\n     if (fFromLoadWallet)\n     {\n         mapWallet[hash] = wtxIn;\n@@ -529,7 +527,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n                 }\n                 else\n                     LogPrintf(\"AddToWallet() : found %s in block %s not in index\\n\",\n-                             wtxIn.GetHash().ToString(),\n+                             hash.ToString(),\n                              wtxIn.hashBlock.ToString());\n             }\n             AddToSpends(hash);\n@@ -558,7 +556,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n         }\n \n         //// debug print\n-        LogPrintf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n+        LogPrintf(\"AddToWallet %s  %s%s\\n\", hash.ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n \n         // Write to disk\n         if (fInsertedNew || fUpdated)\n@@ -576,7 +574,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n \n         if ( !strCmd.empty())\n         {\n-            boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n+            boost::replace_all(strCmd, \"%s\", hash.GetHex());\n             boost::thread t(runCommand, strCmd); // thread runs free\n         }\n \n@@ -599,7 +597,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const uint256 &hash, const CTransaction&\n             // Get merkle branch if transaction was found in a block\n             if (pblock)\n                 wtx.SetMerkleBranch(pblock);\n-            return AddToWallet(wtx);\n+            return AddToWallet(hash, wtx);\n         }\n     }\n     return false;\n@@ -854,6 +852,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n             ReadBlockFromDisk(block, pindex);\n             BOOST_FOREACH(CTransaction& tx, block.vtx)\n             {\n+                // block.GetTxHash() is not available as we don't rebuild the Merkle tree.\n                 if (AddToWalletIfInvolvingMe(tx.GetHash(), tx, &block, fUpdate))\n                     ret++;\n             }\n@@ -888,12 +887,11 @@ void CWallet::ReacceptWalletTransactions()\n     }\n }\n \n-void CWalletTx::RelayWalletTransaction()\n+void CWalletTx::RelayWalletTransaction(const uint256 &hash)\n {\n     if (!IsCoinBase())\n     {\n         if (GetDepthInMainChain() == 0) {\n-            uint256 hash = GetHash();\n             LogPrintf(\"Relaying wtx %s\\n\", hash.ToString());\n             RelayTransaction((CTransaction)*this, hash);\n         }\n@@ -945,7 +943,7 @@ void CWallet::ResendWalletTransactions()\n         BOOST_FOREACH(PAIRTYPE(const unsigned int, CWalletTx*)& item, mapSorted)\n         {\n             CWalletTx& wtx = *item.second;\n-            wtx.RelayWalletTransaction();\n+            wtx.RelayWalletTransaction(wtx.GetHash());\n         }\n     }\n }\n@@ -1384,6 +1382,8 @@ bool CWallet::CreateTransaction(CScript scriptPubKey, int64_t nValue,\n // Call after CreateTransaction unless you want to abort\n bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n {\n+    uint256 hash = wtxNew.GetHash();\n+\n     {\n         LOCK2(cs_main, cs_wallet);\n         LogPrintf(\"CommitTransaction:\\n%s\", wtxNew.ToString());\n@@ -1398,23 +1398,23 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n             // Add tx to wallet, because if it has change it's also ours,\n             // otherwise just for transaction history.\n-            AddToWallet(wtxNew);\n+            AddToWallet(hash, wtxNew);\n \n             // Notify that old coins are spent\n             set<CWalletTx*> setCoins;\n             BOOST_FOREACH(const CTxIn& txin, wtxNew.vin)\n             {\n                 CWalletTx &coin = mapWallet[txin.prevout.hash];\n                 coin.BindWallet(this);\n-                NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n+                NotifyTransactionChanged(this, txin.prevout.hash, CT_UPDATED);\n             }\n \n             if (fFileBacked)\n                 delete pwalletdb;\n         }\n \n         // Track how many getdata requests our transaction gets\n-        mapRequestCount[wtxNew.GetHash()] = 0;\n+        mapRequestCount[hash] = 0;\n \n         // Broadcast\n         if (!wtxNew.AcceptToMemoryPool(false))\n@@ -1423,7 +1423,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n             LogPrintf(\"CommitTransaction() : Error: Transaction not valid\");\n             return false;\n         }\n-        wtxNew.RelayWalletTransaction();\n+        wtxNew.RelayWalletTransaction(hash);\n     }\n     return true;\n }"
      },
      {
        "sha": "819dfaca589b0bb50a1515da63841e5c7772694b",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93655f2e2b8122e11b86f5c63ab130e536fb4e56/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93655f2e2b8122e11b86f5c63ab130e536fb4e56/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=93655f2e2b8122e11b86f5c63ab130e536fb4e56",
        "patch": "@@ -244,7 +244,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     TxItems OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount = \"\");\n \n     void MarkDirty();\n-    bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet=false);\n+    bool AddToWallet(const uint256 &hash, const CWalletTx& wtxIn, bool fFromLoadWallet=false);\n     void SyncTransaction(const uint256 &hash, const CTransaction& tx, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const uint256 &hash, const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     void EraseFromWallet(const uint256 &hash);\n@@ -698,7 +698,7 @@ class CWalletTx : public CMerkleTx\n     int64_t GetTxTime() const;\n     int GetRequestCount() const;\n \n-    void RelayWalletTransaction();\n+    void RelayWalletTransaction(const uint256 &hash);\n \n     std::set<uint256> GetConflicts() const;\n };"
      },
      {
        "sha": "bc79610ca11a021edef684aa356e85d4a8be1ff9",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93655f2e2b8122e11b86f5c63ab130e536fb4e56/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93655f2e2b8122e11b86f5c63ab130e536fb4e56/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=93655f2e2b8122e11b86f5c63ab130e536fb4e56",
        "patch": "@@ -378,7 +378,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             if (wtx.nOrderPos == -1)\n                 wss.fAnyUnordered = true;\n \n-            pwallet->AddToWallet(wtx, true);\n+            pwallet->AddToWallet(hash, wtx, true);\n             //// debug print\n             //LogPrintf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString());\n             //LogPrintf(\" %12d  %s  %s  %s\\n\","
      }
    ]
  }
]