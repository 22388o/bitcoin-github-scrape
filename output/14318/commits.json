[
  {
    "sha": "0c433faf3d969611bdeae15e190c7bebb4f0f129",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzQzM2ZhZjNkOTY5NjExYmRlYWUxNWUxOTBjN2JlYmI0ZjBmMTI5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-10T20:54:46Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-25T12:03:51Z"
      },
      "message": "Don't relay tx data to peers until after tx announcement\n\nPrior to this commit, we'd respond with tx data for anything in mapRelay,\nregardless of whether the requesting peer was one that we'd sent an INV to\nfor the transaction in question.\n\nClose this privacy leak by maintaining a set of peers to which we've\nrelayed each transaction in mapRelay.",
      "tree": {
        "sha": "593067c068f898c309c1cfc365a187f0774c0045",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/593067c068f898c309c1cfc365a187f0774c0045"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c433faf3d969611bdeae15e190c7bebb4f0f129",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c433faf3d969611bdeae15e190c7bebb4f0f129",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c433faf3d969611bdeae15e190c7bebb4f0f129",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c433faf3d969611bdeae15e190c7bebb4f0f129/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f09bc7ec9859bba6d1df765adb1030d276b8f626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f09bc7ec9859bba6d1df765adb1030d276b8f626",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f09bc7ec9859bba6d1df765adb1030d276b8f626"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "dcb87a6c76e3ce8ed1b462bd46a641d29a1ebfc5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c433faf3d969611bdeae15e190c7bebb4f0f129/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c433faf3d969611bdeae15e190c7bebb4f0f129/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0c433faf3d969611bdeae15e190c7bebb4f0f129",
        "patch": "@@ -30,6 +30,7 @@\n #include <utilstrencodings.h>\n \n #include <memory>\n+#include <unordered_set>\n \n #if defined(NDEBUG)\n # error \"Bitcoin cannot be compiled without assertions.\"\n@@ -153,7 +154,12 @@ namespace {\n     std::atomic<int64_t> g_last_tip_update(0);\n \n     /** Relay map */\n-    typedef std::map<uint256, CTransactionRef> MapRelay;\n+    struct RelayEntry {\n+        explicit RelayEntry(CTransactionRef &&tx) : m_txref(tx) {}\n+        CTransactionRef m_txref;\n+        std::unordered_set<NodeId> m_node_set;\n+    };\n+    typedef std::map<uint256, RelayEntry> MapRelay;\n     MapRelay mapRelay GUARDED_BY(cs_main);\n     /** Expiration-time ordered list of (expire time, relay map entry) pairs. */\n     std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration GUARDED_BY(cs_main);\n@@ -1284,8 +1290,8 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             bool push = false;\n             auto mi = mapRelay.find(inv.hash);\n             int nSendFlags = (inv.type == MSG_TX ? SERIALIZE_TRANSACTION_NO_WITNESS : 0);\n-            if (mi != mapRelay.end()) {\n-                connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n+            if (mi != mapRelay.end() && mi->second.m_node_set.count(pfrom->GetId())) {\n+                connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second.m_txref));\n                 push = true;\n             } else if (pfrom->timeLastMempoolReq) {\n                 auto txinfo = mempool.info(inv.hash);\n@@ -3610,7 +3616,10 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                             vRelayExpiration.pop_front();\n                         }\n \n-                        auto ret = mapRelay.insert(std::make_pair(hash, std::move(txinfo.tx)));\n+                        auto ret = mapRelay.emplace(hash, RelayEntry(std::move(txinfo.tx)));\n+                        // Add this peer to the node map indicating which peers\n+                        // we will allow to download the transaction\n+                        ret.first->second.m_node_set.insert(pto->GetId());\n                         if (ret.second) {\n                             vRelayExpiration.push_back(std::make_pair(nNow + 15 * 60 * 1000000, ret.first));\n                         }"
      }
    ]
  },
  {
    "sha": "736462c26de7a267bdf75c1f86bf12932c604b3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzY0NjJjMjZkZTdhMjY3YmRmNzVjMWY4NmJmMTI5MzJjNjA0YjNk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-15T23:51:20Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-25T12:03:51Z"
      },
      "message": "[qa] Test inter-bucket privacy leakage",
      "tree": {
        "sha": "fb377603d3f7b1106c63f69ff94804c5913d7bcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb377603d3f7b1106c63f69ff94804c5913d7bcb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/736462c26de7a267bdf75c1f86bf12932c604b3d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/736462c26de7a267bdf75c1f86bf12932c604b3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/736462c26de7a267bdf75c1f86bf12932c604b3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/736462c26de7a267bdf75c1f86bf12932c604b3d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c433faf3d969611bdeae15e190c7bebb4f0f129",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c433faf3d969611bdeae15e190c7bebb4f0f129",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c433faf3d969611bdeae15e190c7bebb4f0f129"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 144,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d7cbf3f54b56e8871b7ba7d4732697b75fc9b355",
        "filename": "test/functional/p2p_leak_tx.py",
        "status": "added",
        "additions": 89,
        "deletions": 0,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/736462c26de7a267bdf75c1f86bf12932c604b3d/test/functional/p2p_leak_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/736462c26de7a267bdf75c1f86bf12932c604b3d/test/functional/p2p_leak_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak_tx.py?ref=736462c26de7a267bdf75c1f86bf12932c604b3d",
        "patch": "@@ -0,0 +1,89 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that we don't leak txs to inbound peers that we haven't yet announced to\"\"\"\n+\n+from test_framework.messages import msg_getdata, CInv\n+from test_framework.mininode import mininode_lock, P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    wait_until,\n+)\n+\n+\n+class P2PLeakTxTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        gen_node = self.nodes[0]  # The block and tx generating node\n+        gen_node.generate(1)\n+        self.sync_all()\n+\n+        inbound_peer = self.nodes[0].add_p2p_connection(P2PDataStore())  # An \"attacking\" inbound peer\n+        outbound_peer = self.nodes[1]  # Our outbound peer\n+\n+        # In an adversiarial setting we can generally assume that inbound peers\n+        # are more likely to spy on us than outbound peers. Thus, on average,\n+        # we announce transactions first to outbound peers, then to (all)\n+        # inbound peers. Inbound peers must not be able to request the\n+        # transaction they haven't yet received the announcement for it.\n+        #\n+        # With only one outbound peer, we expect that a tx is first announced\n+        # to (all) inbound peers (and thus present a potential leak) in 28.5% of\n+        # the cases.\n+        #\n+        # Probability( time_ann_inbound < time_ann_outbound )                 =\n+        # \u222b f_in(x)                           * F_out(x)                   dx =\n+        # \u222b (lambda_in * exp(-lambda_in * x)) * (1 - exp(-lambda_out * x)) dx =\n+        # 0.285714\n+        #\n+        # Where,\n+        # * f_in is the pdf of the exponential distribution for inbound peers,\n+        #   with lambda_in = 1 / INVENTORY_BROADCAST_INTERVAL = 1/5\n+        # * F_out is the cdf of the expon. distribuiton for outbound peers,\n+        #   with lambda_out = 1 / (INVENTORY_BROADCAST_INTERVAL >> 1) = 1/2\n+        #\n+        # Due to measurement delays, the actual monte-carlo leak is a bit\n+        # higher. Assume a total delay of 0.6 s (Includes network delays and\n+        # rpc delay to poll the raw mempool)\n+        #\n+        # Probability( time_ann_inbound < time_ann_outbound + 0.6 )           =\n+        # \u222b f_in(x)                           * F_out(x + 0.6)             dx =\n+        # \u222b (lambda_in * exp(-lambda_in * x)) * (1 - exp(-lambda_out * (x+.6))) dx =\n+        # 0.366485\n+        EXPECTED_MEASURED_LEAK = .366485\n+\n+        REPEATS = 100\n+        measured_leak = 0\n+        self.log.info('Start simulation for {} repeats'.format(REPEATS))\n+        for i in range(REPEATS):\n+            self.log.debug('Run {}/{}'.format(i, REPEATS))\n+            txid = gen_node.sendtoaddress(gen_node.getnewaddress(), 0.033)\n+            want_tx = msg_getdata()\n+            want_tx.inv.append(CInv(t=1, h=int(txid, 16)))\n+\n+            wait_until(lambda: txid in outbound_peer.getrawmempool(), lock=mininode_lock)\n+            inbound_peer.send_message(want_tx)\n+            inbound_peer.sync_with_ping()\n+\n+            if inbound_peer.last_message.get('notfound'):\n+                assert_equal(inbound_peer.last_message['notfound'].vec[0].hash, int(txid, 16))\n+                inbound_peer.last_message.pop('notfound')\n+            else:\n+                measured_leak += 1\n+\n+        measured_leak /= REPEATS\n+        self.log.info('Measured leak of {}'.format(measured_leak))\n+\n+        assert_greater_than(EXPECTED_MEASURED_LEAK, measured_leak)\n+\n+\n+if __name__ == '__main__':\n+    P2PLeakTxTest().main()"
      },
      {
        "sha": "549a7c019a703fb4c5e295dd1df01098bd909aeb",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/736462c26de7a267bdf75c1f86bf12932c604b3d/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/736462c26de7a267bdf75c1f86bf12932c604b3d/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=736462c26de7a267bdf75c1f86bf12932c604b3d",
        "patch": "@@ -1160,6 +1160,26 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_mempool()\"\n \n+\n+class msg_notfound():\n+    command = b\"notfound\"\n+\n+    def __init__(self, vec=None):\n+        if vec is None:\n+            self.vec = []\n+        else:\n+            self.vec = vec\n+\n+    def deserialize(self, f):\n+        self.vec = deser_vector(f, CInv)\n+\n+    def serialize(self):\n+        return ser_vector(self.vec)\n+\n+    def __repr__(self):\n+        return \"msg_notfound(vec=%s)\" % (repr(self.vec))\n+\n+\n class msg_sendheaders():\n     command = b\"sendheaders\"\n "
      },
      {
        "sha": "69edff5e5660fc48f9c3cfff2169bdfdb46eb206",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 34,
        "deletions": 1,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/736462c26de7a267bdf75c1f86bf12932c604b3d/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/736462c26de7a267bdf75c1f86bf12932c604b3d/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=736462c26de7a267bdf75c1f86bf12932c604b3d",
        "patch": "@@ -21,7 +21,38 @@\n import sys\n import threading\n \n-from test_framework.messages import CBlockHeader, MIN_VERSION_SUPPORTED, msg_addr, msg_block, MSG_BLOCK, msg_blocktxn, msg_cmpctblock, msg_feefilter, msg_getaddr, msg_getblocks, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_mempool, msg_ping, msg_pong, msg_reject, msg_sendcmpct, msg_sendheaders, msg_tx, MSG_TX, MSG_TYPE_MASK, msg_verack, msg_version, NODE_NETWORK, NODE_WITNESS, sha256\n+from test_framework.messages import (\n+    CBlockHeader,\n+    MIN_VERSION_SUPPORTED,\n+    msg_addr,\n+    msg_block,\n+    MSG_BLOCK,\n+    msg_blocktxn,\n+    msg_cmpctblock,\n+    msg_feefilter,\n+    msg_getaddr,\n+    msg_getblocks,\n+    msg_getblocktxn,\n+    msg_getdata,\n+    msg_getheaders,\n+    msg_headers,\n+    msg_inv,\n+    msg_mempool,\n+    msg_notfound,\n+    msg_ping,\n+    msg_pong,\n+    msg_reject,\n+    msg_sendcmpct,\n+    msg_sendheaders,\n+    msg_tx,\n+    MSG_TX,\n+    MSG_TYPE_MASK,\n+    msg_verack,\n+    msg_version,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    sha256,\n+)\n from test_framework.util import wait_until\n \n logger = logging.getLogger(\"TestFramework.mininode\")\n@@ -40,6 +71,7 @@\n     b\"headers\": msg_headers,\n     b\"inv\": msg_inv,\n     b\"mempool\": msg_mempool,\n+    b\"notfound\": msg_notfound,\n     b\"ping\": msg_ping,\n     b\"pong\": msg_pong,\n     b\"reject\": msg_reject,\n@@ -295,6 +327,7 @@ def on_getdata(self, message): pass\n     def on_getheaders(self, message): pass\n     def on_headers(self, message): pass\n     def on_mempool(self, message): pass\n+    def on_notfound(self, message): pass\n     def on_pong(self, message): pass\n     def on_reject(self, message): pass\n     def on_sendcmpct(self, message): pass"
      },
      {
        "sha": "5a096c0aec8974d9b52b6fb69ca39f402aa758ed",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/736462c26de7a267bdf75c1f86bf12932c604b3d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/736462c26de7a267bdf75c1f86bf12932c604b3d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=736462c26de7a267bdf75c1f86bf12932c604b3d",
        "patch": "@@ -122,6 +122,7 @@\n     'feature_versionbits_warning.py',\n     'rpc_preciousblock.py',\n     'wallet_importprunedfunds.py',\n+    'p2p_leak_tx.py',\n     'rpc_zmq.py',\n     'rpc_signmessage.py',\n     'feature_nulldummy.py',"
      }
    ]
  },
  {
    "sha": "6952b7b46b3b4eee3dad37d5858ecdec34de0aec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTUyYjdiNDZiM2I0ZWVlM2RhZDM3ZDU4NThlY2RlYzM0ZGUwYWVj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-12T19:48:55Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-25T12:35:07Z"
      },
      "message": "Add ancestors of announced transactions to mapRelay\n\nIf we announce a transaction T to a peer, then we should also be willing to\nprovide T's parents to that peer (in case our peer is missing those parents).\nThis should improve propagation of transaction chains.",
      "tree": {
        "sha": "e682bca4af18262eae0efca2ffa578b8bd608080",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e682bca4af18262eae0efca2ffa578b8bd608080"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6952b7b46b3b4eee3dad37d5858ecdec34de0aec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6952b7b46b3b4eee3dad37d5858ecdec34de0aec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6952b7b46b3b4eee3dad37d5858ecdec34de0aec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6952b7b46b3b4eee3dad37d5858ecdec34de0aec/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "736462c26de7a267bdf75c1f86bf12932c604b3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/736462c26de7a267bdf75c1f86bf12932c604b3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/736462c26de7a267bdf75c1f86bf12932c604b3d"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 29,
      "deletions": 6
    },
    "files": [
      {
        "sha": "2c27e009d449d93bc85533be69cfe9045d581dba",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 6,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6952b7b46b3b4eee3dad37d5858ecdec34de0aec/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6952b7b46b3b4eee3dad37d5858ecdec34de0aec/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6952b7b46b3b4eee3dad37d5858ecdec34de0aec",
        "patch": "@@ -164,6 +164,18 @@ namespace {\n     /** Expiration-time ordered list of (expire time, relay map entry) pairs. */\n     std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration GUARDED_BY(cs_main);\n \n+    void AddToMapRelay(CTransactionRef &&txref, NodeId peer, int64_t time_now) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+    {\n+        const uint256& hash = txref->GetHash();\n+        auto ret = mapRelay.emplace(hash, RelayEntry(std::move(txref)));\n+        // Add this peer to the node map indicating which peers we will allow\n+        // to download the transaction\n+        ret.first->second.m_node_set.insert(peer);\n+        if (ret.second) {\n+            vRelayExpiration.push_back(std::make_pair(time_now + 15 * 60 * 1000000, ret.first));\n+        }\n+    }\n+\n     std::atomic<int64_t> nTimeBestReceived(0); // Used only to inform the wallet of when we last received a block\n \n     struct IteratorComparator\n@@ -3616,12 +3628,23 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                             vRelayExpiration.pop_front();\n                         }\n \n-                        auto ret = mapRelay.emplace(hash, RelayEntry(std::move(txinfo.tx)));\n-                        // Add this peer to the node map indicating which peers\n-                        // we will allow to download the transaction\n-                        ret.first->second.m_node_set.insert(pto->GetId());\n-                        if (ret.second) {\n-                            vRelayExpiration.push_back(std::make_pair(nNow + 15 * 60 * 1000000, ret.first));\n+                        AddToMapRelay(std::move(txinfo.tx), pto->GetId(), nNow);\n+\n+                        // Add all ancestors of this transaction to mapRelay as\n+                        // well, so that if a peer is missing a parent\n+                        // transaction, we will provide it on request.\n+                        {\n+                            LOCK(mempool.cs);\n+                            auto tx_iter = mempool.GetIter(hash);\n+                            if (tx_iter) {\n+                                CTxMemPool::setEntries ancestors;\n+                                uint64_t no_limit = std::numeric_limits<uint64_t>::max();\n+                                std::string dummy;\n+                                mempool.CalculateMemPoolAncestors(**tx_iter, ancestors, no_limit, no_limit, no_limit, no_limit, dummy, false);\n+                                for (auto ancestor_it : ancestors) {\n+                                    AddToMapRelay(ancestor_it->GetSharedTx(), pto->GetId(), nNow);\n+                                }\n+                            }\n                         }\n                     }\n                     if (vInv.size() == MAX_INV_SZ) {"
      }
    ]
  },
  {
    "sha": "ae5320cdbb324a988d2f24c0b12363b7a7d76012",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTUzMjBjZGJiMzI0YTk4OGQyZjI0YzBiMTIzNjNiN2E3ZDc2MDEy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-13T21:08:04Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-25T12:42:03Z"
      },
      "message": "[qa] Add test for orphan tx/chain relay",
      "tree": {
        "sha": "1879de5f0379572f080a683d3bc28ca43607e4ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1879de5f0379572f080a683d3bc28ca43607e4ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae5320cdbb324a988d2f24c0b12363b7a7d76012",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae5320cdbb324a988d2f24c0b12363b7a7d76012",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae5320cdbb324a988d2f24c0b12363b7a7d76012",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae5320cdbb324a988d2f24c0b12363b7a7d76012/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6952b7b46b3b4eee3dad37d5858ecdec34de0aec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6952b7b46b3b4eee3dad37d5858ecdec34de0aec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6952b7b46b3b4eee3dad37d5858ecdec34de0aec"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 82,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0914f7d21dcd9e6ec97ed0a27a2b46b39f666b63",
        "filename": "test/functional/p2p_txchain_relay.py",
        "status": "added",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae5320cdbb324a988d2f24c0b12363b7a7d76012/test/functional/p2p_txchain_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae5320cdbb324a988d2f24c0b12363b7a7d76012/test/functional/p2p_txchain_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_txchain_relay.py?ref=ae5320cdbb324a988d2f24c0b12363b7a7d76012",
        "patch": "@@ -0,0 +1,82 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test relay of transaction chains.\n+\n+Ensure that if bitcoind announces a transaction it will also respond\n+to getdata requests for parents of the transaction.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    disconnect_nodes,\n+    sync_blocks\n+)\n+\n+class ChainRelayTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info(\"Generating one utxo for node0\")\n+\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        self.nodes[1].generate(100)\n+        self.sync_all()\n+\n+        # Node0 should now have 1 utxo.\n+        assert_equal(len(self.nodes[0].listunspent()), 1)\n+\n+        assert self.nodes[0].getbalance() > 10 # Should be 50, but doesn't matter\n+\n+        self.log.info(\"Disconnect node0 from node1\")\n+        disconnect_nodes(self.nodes[0], 1)\n+        disconnect_nodes(self.nodes[1], 0)\n+\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 0)\n+\n+        # This next part is sort of a hack -- we're going to reconnect the\n+        # nodes after generating a transaction on node0, and we'll need a way\n+        # to test that the p2p connections are fully up before generating the\n+        # child transaction. To do that we will just test whether a block generated\n+        # on node1 makes it over to node0. Perhaps there's a status field in\n+        # getpeerinfo() that might be sufficient as well (synced_headers or\n+        # something?).\n+        self.log.info(\"Mine a block on node1\")\n+        self.nodes[1].generate(1)\n+\n+        self.log.info(\"Generating new transaction on node0\")\n+        self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1, \"\", \"\", False)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 1)\n+\n+        self.log.info(\"Reconnect node0 to node1\")\n+        connect_nodes(self.nodes[0], 1)\n+\n+        sync_blocks(self.nodes)\n+        # Check that node1's mempool is still empty\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+\n+        self.log.info(\"Generating child transaction on node0\")\n+        txid2 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 2, \"\", \"\", False)\n+        assert_equal(self.nodes[0].getmempoolentry(txid2)['ancestorcount'], 2)\n+\n+        self.log.info(\"Check that both transactions end up on node1\")\n+        self.sync_all()\n+\n+        # sync_all ensures the mempool's are synced, but for avoidance of doubt\n+        # just verify that the child transaction made it to node1\n+        assert txid2 in self.nodes[1].getrawmempool()\n+\n+        self.log.info(\"Node1 successfully synced\")\n+\n+if __name__ == '__main__':\n+    ChainRelayTest().main()"
      }
    ]
  },
  {
    "sha": "6b661802eb2baa206b3ba0f192be39c2b304cc00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjY2MTgwMmViMmJhYTIwNmIzYmEwZjE5MmJlMzljMmIzMDRjYzAw",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-14T13:19:43Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-25T12:42:03Z"
      },
      "message": "[qa] Add p2p_txchain_relay.py to test_runner.py",
      "tree": {
        "sha": "2eddfcbadd3b8dec3e6db44cd882ff4d7e4887dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2eddfcbadd3b8dec3e6db44cd882ff4d7e4887dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b661802eb2baa206b3ba0f192be39c2b304cc00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b661802eb2baa206b3ba0f192be39c2b304cc00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b661802eb2baa206b3ba0f192be39c2b304cc00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b661802eb2baa206b3ba0f192be39c2b304cc00/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae5320cdbb324a988d2f24c0b12363b7a7d76012",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae5320cdbb324a988d2f24c0b12363b7a7d76012",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae5320cdbb324a988d2f24c0b12363b7a7d76012"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "792ff97df2d1a4cb6d2f770c18a935a39ce7c713",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b661802eb2baa206b3ba0f192be39c2b304cc00/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b661802eb2baa206b3ba0f192be39c2b304cc00/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=6b661802eb2baa206b3ba0f192be39c2b304cc00",
        "patch": "@@ -110,6 +110,7 @@\n     'rpc_decodescript.py',\n     'rpc_blockchain.py',\n     'rpc_deprecated.py',\n+    'p2p_txchain_relay.py',\n     'wallet_disable.py',\n     'rpc_net.py',\n     'wallet_keypool.py',"
      }
    ]
  }
]