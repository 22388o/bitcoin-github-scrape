[
  {
    "sha": "524f76a316727edb2df9b668081025b22b25a65d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjRmNzZhMzE2NzI3ZWRiMmRmOWI2NjgwODEwMjViMjJiMjVhNjVk",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-06-06T09:40:23Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-06-06T09:40:23Z"
      },
      "message": "[wallet] allow adding pubkeys from imported private keys to keypool",
      "tree": {
        "sha": "e9258a3f29d4ac0afadb5d5aef8c6c86d2a12196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9258a3f29d4ac0afadb5d5aef8c6c86d2a12196"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/524f76a316727edb2df9b668081025b22b25a65d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlz434kACgkQV/+b28ww\nEAly/A/+OXTzLpNaz6zkCrLxOw9XGyoF4F67S2/3fKCtEiiv/9V1yJmPbNXjhzW+\npDEJeHV/Wz3HqeIVJFhqXs9+xAxVgS2K0n6zLyJZ8PPFfMnPZ5qdBdmA4Vpq9DR+\nKasVMc7oj+zP8QZJsPd8jf61MdbzIrKKxcF3ejQhGksTTiJg8aT2+Bpn69S/TNPw\n/7C3Ur6CTXblWuYtEBuAtvx+ueZglXPAfnagsdsE/V5ZzIMvhNhXvJV7ruby4qUL\niq71pvB/+2Z8jgfXkxg3HpJxF4bNrMf4Ek4mB/89nosktGT9XHvZIGr1vI5IbVzL\nhlXU8u4pv6zg7rF8YO03pkZAS0y4aWgWjNTkAgf5mLBolH7+YkbfNZOrRknbKx6m\nUNB/g9bq5nLa4igrLpZNpmOVR3D5rgLwuQqVyKdmzfyEoNl+xlu7k8nUsrmHARy0\ngsSOJZeZIa4b2GCLxPJs1RiulfNjF/0zb74diVvxRKRsKOIzW6n8QRN+JgxPifkd\nvZe6+XVQ+3qqpHrpF8P7eh8XAjvduLhiQ9Id3ld02PakSdbc9twZf/i9BlkmnnVV\nbnCtIg5heel2uJVtc2EETZktgdT3JJh/J+sNAq0HRs9eVsZibeV7mBGS9a0uINk7\nhApAtYg6yYP7wWfq9snOJkNrFUGWzPq9KcN9qICsq7E3VfO7d1k=\n=CBny\n-----END PGP SIGNATURE-----",
        "payload": "tree e9258a3f29d4ac0afadb5d5aef8c6c86d2a12196\nparent 03858b23fe1d17e681eb18d24602b276020295a0\nauthor Sjors Provoost <sjors@sprovoost.nl> 1559814023 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1559814023 +0200\n\n[wallet] allow adding pubkeys from imported private keys to keypool\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/524f76a316727edb2df9b668081025b22b25a65d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/524f76a316727edb2df9b668081025b22b25a65d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/524f76a316727edb2df9b668081025b22b25a65d/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03858b23fe1d17e681eb18d24602b276020295a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03858b23fe1d17e681eb18d24602b276020295a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03858b23fe1d17e681eb18d24602b276020295a0"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 41,
      "deletions": 52
    },
    "files": [
      {
        "sha": "86fa887ae537e9b055c6cbadbceefc2b5c9c9dce",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/524f76a316727edb2df9b668081025b22b25a65d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/524f76a316727edb2df9b668081025b22b25a65d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=524f76a316727edb2df9b668081025b22b25a65d",
        "patch": "@@ -1194,12 +1194,7 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n         CPubKey pubkey = key.GetPubKey();\n         CKeyID id = pubkey.GetID();\n \n-        // Check if this private key corresponds to a public key from the descriptor\n-        if (!pubkey_map.count(id)) {\n-            warnings.push_back(\"Ignoring irrelevant private key.\");\n-        } else {\n-            privkey_map.emplace(id, key);\n-        }\n+        privkey_map.emplace(id, key);\n     }\n \n     // Check if all the public keys have corresponding private keys in the import for spendability.\n@@ -1237,11 +1232,6 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n         const bool add_keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n \n-        // Add to keypool only works with privkeys disabled\n-        if (add_keypool && !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Keys can only be imported to the keypool when private keys are disabled\");\n-        }\n-\n         ImportData import_data;\n         std::map<CKeyID, CPubKey> pubkey_map;\n         std::map<CKeyID, CKey> privkey_map;\n@@ -1276,10 +1266,11 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         if (!pwallet->ImportScripts(import_data.import_scripts)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding script to wallet\");\n         }\n-        if (!pwallet->ImportPrivKeys(privkey_map, timestamp)) {\n+        if (!pwallet->ImportPrivKeys(privkey_map, add_keypool, internal, timestamp)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n         }\n-        if (!pwallet->ImportPubKeys(ordered_pubkeys, pubkey_map, import_data.key_origins, add_keypool, internal, timestamp)) {\n+        // Add pubkey to keypool only if no private keys are imported\n+        if (!pwallet->ImportPubKeys(ordered_pubkeys, pubkey_map, import_data.key_origins, add_keypool && privkey_map.empty(), internal, timestamp)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n         }\n         if (!pwallet->ImportScriptPubKeys(label, script_pub_keys, have_solving_data, internal, timestamp)) {"
      },
      {
        "sha": "06941b8eb55e9c2c2367fedbc73e9bc8da445444",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/524f76a316727edb2df9b668081025b22b25a65d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/524f76a316727edb2df9b668081025b22b25a65d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=524f76a316727edb2df9b668081025b22b25a65d",
        "patch": "@@ -1630,7 +1630,7 @@ bool CWallet::ImportScripts(const std::set<CScript> scripts)\n     return true;\n }\n \n-bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n+bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n     WalletBatch batch(*database);\n     for (const auto& entry : privkey_map) {\n@@ -1643,6 +1643,9 @@ bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const in\n         if (!HaveKey(id) && !AddKeyPubKeyWithDB(batch, key, pubkey)) {\n             return false;\n         }\n+        if (add_keypool) {\n+             AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+        }\n         UpdateTimeFirstKey(timestamp);\n     }\n     return true;\n@@ -1666,7 +1669,7 @@ bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const st\n         }\n         mapKeyMetadata[id].nCreateTime = timestamp;\n \n-        // Add to keypool only works with pubkeys\n+        // Add pubkey to keypool\n         if (add_keypool) {\n             AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n             NotifyCanGetAddressesChanged();"
      },
      {
        "sha": "ad59ac04b9c4e00e1d13bfdb9d59fa2ddad9abd1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/524f76a316727edb2df9b668081025b22b25a65d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/524f76a316727edb2df9b668081025b22b25a65d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=524f76a316727edb2df9b668081025b22b25a65d",
        "patch": "@@ -1067,7 +1067,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     bool DummySignInput(CTxIn &tx_in, const CTxOut &txout, bool use_max_sig = false) const;\n \n     bool ImportScripts(const std::set<CScript> scripts) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const bool add_keypool, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n "
      },
      {
        "sha": "fd44e9ffed6b07681e5d76c786de2587b4e017ba",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 31,
        "deletions": 36,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/524f76a316727edb2df9b668081025b22b25a65d/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/524f76a316727edb2df9b668081025b22b25a65d/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=524f76a316727edb2df9b668081025b22b25a65d",
        "patch": "@@ -722,57 +722,66 @@ def run_test(self):\n         self.nodes[1].createwallet(wallet_name=\"noprivkeys\", disable_private_keys=True)\n         wrpc = self.nodes[1].get_wallet_rpc(\"noprivkeys\")\n \n-        addr1 = self.nodes[0].getnewaddress()\n-        addr2 = self.nodes[0].getnewaddress()\n+        addr1 = self.nodes[0].getnewaddress(\"\", \"bech32\")\n+        addr2 = self.nodes[0].getnewaddress(\"\", \"bech32\")\n+        priv1 = self.nodes[0].dumpprivkey(addr1)\n+        priv2 = self.nodes[0].dumpprivkey(addr2)\n         pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n         pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n         result = wrpc.importmulti(\n             [{\n                 'desc': descsum_create('wpkh(' + pub1 + ')'),\n                 'keypool': True,\n-                \"timestamp\": \"now\",\n+                'timestamp': 'now'\n             },\n             {\n                 'desc': descsum_create('wpkh(' + pub2 + ')'),\n                 'keypool': True,\n-                \"timestamp\": \"now\",\n+                'internal': True,\n+                'timestamp': 'now'\n             }]\n         )\n         assert result[0]['success']\n         assert result[1]['success']\n-        assert_equal(wrpc.getwalletinfo()[\"keypoolsize\"], 2)\n-        newaddr1 = wrpc.getnewaddress()\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize\"], 1)\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize_hd_internal\"], 1)\n+        newaddr1 = wrpc.getnewaddress(\"\", \"bech32\")\n         assert_equal(addr1, newaddr1)\n-        newaddr2 = wrpc.getnewaddress()\n+        newaddr2 = wrpc.getrawchangeaddress(\"bech32\")\n         assert_equal(addr2, newaddr2)\n \n-        # Import some public keys to the internal keypool of a no privkey wallet\n-        self.log.info(\"Adding pubkey to internal keypool of disableprivkey wallet\")\n-        addr1 = self.nodes[0].getnewaddress()\n-        addr2 = self.nodes[0].getnewaddress()\n-        pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n-        pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n+        # Import those pubkeys to keypool of a (blank) wallet with private keys\n+        self.nodes[1].createwallet(wallet_name=\"blank\", disable_private_keys=False, blank=True)\n+        self.log.info(\"Pubkeys can be added to the keypool of a (blank) wallet with private keys\")\n+        wrpc = self.nodes[1].get_wallet_rpc(\"blank\")\n+        assert wrpc.getwalletinfo()['private_keys_enabled']\n         result = wrpc.importmulti(\n             [{\n-                'desc': descsum_create('wpkh(' + pub1 + ')'),\n+                'desc': descsum_create('wpkh(' + pub1 + ')'), # priv1\n+                'keys': [priv1],\n                 'keypool': True,\n-                'internal': True,\n-                \"timestamp\": \"now\",\n+                'timestamp': 'now',\n             },\n             {\n-                'desc': descsum_create('wpkh(' + pub2 + ')'),\n+                'desc': descsum_create('wpkh(' + pub2 + ')'), # priv2\n+                'keys': [priv2],\n                 'keypool': True,\n                 'internal': True,\n-                \"timestamp\": \"now\",\n+                'timestamp': 'now',\n             }]\n         )\n         assert result[0]['success']\n         assert result[1]['success']\n-        assert_equal(wrpc.getwalletinfo()[\"keypoolsize_hd_internal\"], 2)\n-        newaddr1 = wrpc.getrawchangeaddress()\n+        assert 'warnings' not in result[0]\n+        assert 'warnings' not in result[1]\n+\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize\"], 1)\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize_hd_internal\"], 1)\n+        assert(wrpc.getaddressinfo(newaddr1)['ismine'])\n+        assert(wrpc.getaddressinfo(newaddr2)['ismine'])\n+        newaddr1 = wrpc.getnewaddress(\"\", \"bech32\")\n         assert_equal(addr1, newaddr1)\n-        newaddr2 = wrpc.getrawchangeaddress()\n-        assert_equal(addr2, newaddr2)\n+        assert_raises_rpc_error(-4, \"This wallet has no available keys\", wrpc.getnewaddress, \"\", \"bech32\")\n \n         # Import a multisig and make sure the keys don't go into the keypool\n         self.log.info('Imported scripts with pubkeys should not have their pubkeys go into the keypool')\n@@ -790,20 +799,6 @@ def run_test(self):\n         assert result[0]['success']\n         assert_equal(wrpc.getwalletinfo()[\"keypoolsize\"], 0)\n \n-        # Cannot import those pubkeys to keypool of wallet with privkeys\n-        self.log.info(\"Pubkeys cannot be added to the keypool of a wallet with private keys\")\n-        wrpc = self.nodes[1].get_wallet_rpc(\"\")\n-        assert wrpc.getwalletinfo()['private_keys_enabled']\n-        result = wrpc.importmulti(\n-            [{\n-                'desc': descsum_create('wpkh(' + pub1 + ')'),\n-                'keypool': True,\n-                \"timestamp\": \"now\",\n-            }]\n-        )\n-        assert_equal(result[0]['error']['code'], -8)\n-        assert_equal(result[0]['error']['message'], \"Keys can only be imported to the keypool when private keys are disabled\")\n-\n         # Make sure ranged imports import keys in order\n         self.log.info('Key ranges should be imported in order')\n         wrpc = self.nodes[1].get_wallet_rpc(\"noprivkeys\")"
      }
    ]
  }
]