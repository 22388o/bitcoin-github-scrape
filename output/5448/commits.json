[
  {
    "sha": "028391f08557d77113272e7b3dba4075e2a15cbb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjgzOTFmMDg1NTdkNzcxMTMyNzJlN2IzZGJhNDA3NWUyYTE1Y2Ji",
    "commit": {
      "author": {
        "name": "Rusty Russell",
        "email": "rusty@rustcorp.com.au",
        "date": "2014-12-08T04:17:09Z"
      },
      "committer": {
        "name": "Rusty Russell",
        "email": "rusty@rustcorp.com.au",
        "date": "2015-04-16T07:34:10Z"
      },
      "message": "Use enum for serialization type.\n\nnType gets handed through all these because some things serialize differently\non disk, for hashing or for networking.  But using an int is just lazy\nand opens up the possibility of order mixup, since nVersion is also an int.\n\nFor the overloading hack to default to calling a member function, we\ncan (ab)use the nVersion parameter instead.",
      "tree": {
        "sha": "79775b82e977e5d5ae485a14092b827a52f67d70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79775b82e977e5d5ae485a14092b827a52f67d70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/028391f08557d77113272e7b3dba4075e2a15cbb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/028391f08557d77113272e7b3dba4075e2a15cbb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/028391f08557d77113272e7b3dba4075e2a15cbb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/028391f08557d77113272e7b3dba4075e2a15cbb/comments",
    "author": {
      "login": "rustyrussell",
      "id": 775844,
      "node_id": "MDQ6VXNlcjc3NTg0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rustyrussell",
      "html_url": "https://github.com/rustyrussell",
      "followers_url": "https://api.github.com/users/rustyrussell/followers",
      "following_url": "https://api.github.com/users/rustyrussell/following{/other_user}",
      "gists_url": "https://api.github.com/users/rustyrussell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rustyrussell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
      "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
      "repos_url": "https://api.github.com/users/rustyrussell/repos",
      "events_url": "https://api.github.com/users/rustyrussell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rustyrussell",
      "id": 775844,
      "node_id": "MDQ6VXNlcjc3NTg0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rustyrussell",
      "html_url": "https://github.com/rustyrussell",
      "followers_url": "https://api.github.com/users/rustyrussell/followers",
      "following_url": "https://api.github.com/users/rustyrussell/following{/other_user}",
      "gists_url": "https://api.github.com/users/rustyrussell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rustyrussell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
      "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
      "repos_url": "https://api.github.com/users/rustyrussell/repos",
      "events_url": "https://api.github.com/users/rustyrussell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc8535b7175ea4b1bff49fe6bef32017cf5f472a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc8535b7175ea4b1bff49fe6bef32017cf5f472a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc8535b7175ea4b1bff49fe6bef32017cf5f472a"
      }
    ],
    "stats": {
      "total": 474,
      "additions": 238,
      "deletions": 236
    },
    "files": [
      {
        "sha": "2fc890dbe5ab67689c2e349333a488da7408536f",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -51,7 +51,7 @@ class CAddrInfo : public CAddress\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(*(CAddress*)this);\n         READWRITE(source);\n         READWRITE(nLastSuccess);\n@@ -275,7 +275,7 @@ class CAddrMan\n      * very little in common.\n      */\n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersionDummy) const\n+    void Serialize(Stream &s, SerializeType nType, int nVersionDummy) const\n     {\n         LOCK(cs);\n \n@@ -325,7 +325,7 @@ class CAddrMan\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersionDummy)\n+    void Unserialize(Stream& s, SerializeType nType, int nVersionDummy)\n     {\n         LOCK(cs);\n \n@@ -422,7 +422,7 @@ class CAddrMan\n         Check();\n     }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const\n+    unsigned int GetSerializeSize(SerializeType nType, int nVersion) const\n     {\n         return (CSizeComputer(nType, nVersion) << *this).size();\n     }"
      },
      {
        "sha": "69c26324f3d0707123dc05ab3014ca51f8e31e14",
        "filename": "src/alert.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/alert.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/alert.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -49,7 +49,7 @@ class CUnsignedAlert\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(this->nVersion);\n         nVersion = this->nVersion;\n         READWRITE(nRelayUntil);\n@@ -87,7 +87,7 @@ class CAlert : public CUnsignedAlert\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(vchMsg);\n         READWRITE(vchSig);\n     }"
      },
      {
        "sha": "1402315ef2aaca44d9eddf12f7762d81d2dc3be8",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -46,7 +46,7 @@ class CFeeRate\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(nSatoshisPerK);\n     }\n };"
      },
      {
        "sha": "3c15bc6e41c81d5c967207f87b304e44a4ad0c07",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -69,7 +69,7 @@ class CBloomFilter\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(vData);\n         READWRITE(nHashFuncs);\n         READWRITE(nTweak);"
      },
      {
        "sha": "d55def6f2b06635fe95d518d7b900e4e302ab03c",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -24,7 +24,7 @@ struct CDiskBlockPos\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(VARINT(nFile));\n         READWRITE(VARINT(nPos));\n     }\n@@ -299,7 +299,7 @@ class CDiskBlockIndex : public CBlockIndex\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         if (!(nType & SER_GETHASH))\n             READWRITE(VARINT(nVersion));\n "
      },
      {
        "sha": "78915fb8d712040f043ceddf91ea1adfbe2ec436",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -150,7 +150,7 @@ class CCoins\n         return fCoinBase;\n     }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n+    unsigned int GetSerializeSize(SerializeType nType, int nVersion) const {\n         unsigned int nSize = 0;\n         unsigned int nMaskSize = 0, nMaskCode = 0;\n         CalcMaskSize(nMaskSize, nMaskCode);\n@@ -174,7 +174,7 @@ class CCoins\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n+    void Serialize(Stream &s, SerializeType nType, int nVersion) const {\n         unsigned int nMaskSize = 0, nMaskCode = 0;\n         CalcMaskSize(nMaskSize, nMaskCode);\n         bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n@@ -203,7 +203,7 @@ class CCoins\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n+    void Unserialize(Stream &s, SerializeType nType, int nVersion) {\n         unsigned int nCode = 0;\n         // version\n         ::Unserialize(s, VARINT(this->nVersion), nType, nVersion);"
      },
      {
        "sha": "9b9299ef627b12d90dc34449836db802b8727ab1",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -55,7 +55,7 @@ class CScriptCompressor\n public:\n     CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n+    unsigned int GetSerializeSize(SerializeType nType, int nVersion) const {\n         std::vector<unsigned char> compr;\n         if (Compress(compr))\n             return compr.size();\n@@ -64,7 +64,7 @@ class CScriptCompressor\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n+    void Serialize(Stream &s, SerializeType nType, int nVersion) const {\n         std::vector<unsigned char> compr;\n         if (Compress(compr)) {\n             s << CFlatData(compr);\n@@ -76,7 +76,7 @@ class CScriptCompressor\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n+    void Unserialize(Stream &s, SerializeType nType, int nVersion) {\n         unsigned int nSize = 0;\n         s >> VARINT(nSize);\n         if (nSize < nSpecialScripts) {\n@@ -106,7 +106,7 @@ class CTxOutCompressor\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         if (!ser_action.ForRead()) {\n             uint64_t nVal = CompressAmount(txout.nValue);\n             READWRITE(VARINT(nVal));"
      },
      {
        "sha": "7d1d768044f5b5a66e7758ac9051dc65cd551a1b",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -123,10 +123,10 @@ class CHashWriter\n     CHash256 ctx;\n \n public:\n-    int nType;\n+    SerializeType nType;\n     int nVersion;\n \n-    CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}\n+    CHashWriter(SerializeType nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}\n \n     CHashWriter& write(const char *pch, size_t size) {\n         ctx.Write((const unsigned char*)pch, size);\n@@ -150,7 +150,7 @@ class CHashWriter\n \n /** Compute the 256-bit hash of an object's serialization. */\n template<typename T>\n-uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)\n+uint256 SerializeHash(const T& obj, SerializeType nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)\n {\n     CHashWriter ss(nType, nVersion);\n     ss << obj;"
      },
      {
        "sha": "a1563fb5e1bcb167eebb75a427412b0afb510782",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -217,7 +217,7 @@ struct CDiskTxPos : public CDiskBlockPos\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(*(CDiskBlockPos*)this);\n         READWRITE(VARINT(nTxOffset));\n     }\n@@ -378,7 +378,7 @@ class CBlockFileInfo\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(VARINT(nBlocks));\n         READWRITE(VARINT(nSize));\n         READWRITE(VARINT(nUndoSize));"
      },
      {
        "sha": "e0768d95c5355cbab71508472c12dd4f547fd823",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -85,7 +85,7 @@ class CPartialMerkleTree\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(nTransactions);\n         READWRITE(vHash);\n         std::vector<unsigned char> vBytes;\n@@ -142,7 +142,7 @@ class CMerkleBlock\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(header);\n         READWRITE(txn);\n     }"
      },
      {
        "sha": "39494044dcc66e537105ba9ad7d273294a58155a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -200,7 +200,7 @@ class CNetMessage {\n \n     int64_t nTime;                  // time (in microseconds) of message receipt.\n \n-    CNetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn), vRecv(nTypeIn, nVersionIn) {\n+    CNetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, SerializeType nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn), vRecv(nTypeIn, nVersionIn) {\n         hdrbuf.resize(24);\n         in_data = false;\n         nHdrPos = 0;"
      },
      {
        "sha": "5cc61970646aaaf7e5a75a6865e9db16dfae15b6",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -97,7 +97,7 @@ class CNetAddr\n         ADD_SERIALIZE_METHODS;\n \n         template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n             READWRITE(FLATDATA(ip));\n         }\n };\n@@ -159,7 +159,7 @@ class CService : public CNetAddr\n         ADD_SERIALIZE_METHODS;\n \n         template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n             READWRITE(FLATDATA(ip));\n             unsigned short portN = htons(port);\n             READWRITE(FLATDATA(portN));"
      },
      {
        "sha": "a8130f517c128679a5238a91de0a40d84795a311",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -40,7 +40,7 @@ class CBlockHeader\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(this->nVersion);\n         nVersion = this->nVersion;\n         READWRITE(hashPrevBlock);\n@@ -97,7 +97,7 @@ class CBlock : public CBlockHeader\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(*(CBlockHeader*)this);\n         READWRITE(vtx);\n     }\n@@ -151,7 +151,7 @@ struct CBlockLocator\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(vHave);"
      },
      {
        "sha": "de6632dc1beb320c8bdf45231d1eb1e2ac3a4c0d",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -24,7 +24,7 @@ class COutPoint\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(hash);\n         READWRITE(n);\n     }\n@@ -72,7 +72,7 @@ class CTxIn\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(prevout);\n         READWRITE(scriptSig);\n         READWRITE(nSequence);\n@@ -117,7 +117,7 @@ class CTxOut\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(nValue);\n         READWRITE(scriptPubKey);\n     }\n@@ -204,7 +204,7 @@ class CTransaction\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(*const_cast<int32_t*>(&this->nVersion));\n         nVersion = this->nVersion;\n         READWRITE(*const_cast<std::vector<CTxIn>*>(&vin));\n@@ -265,7 +265,7 @@ struct CMutableTransaction\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(this->nVersion);\n         nVersion = this->nVersion;\n         READWRITE(vin);"
      },
      {
        "sha": "bcb840ecf108edc6284cc5fa0af69e4b45b64850",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -40,7 +40,7 @@ class CMessageHeader\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion)\n     {\n         READWRITE(FLATDATA(pchMessageStart));\n         READWRITE(FLATDATA(pchCommand));\n@@ -97,7 +97,7 @@ class CAddress : public CService\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion)\n     {\n         if (ser_action.ForRead())\n             Init();\n@@ -132,7 +132,7 @@ class CInv\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion)\n     {\n         READWRITE(type);\n         READWRITE(hash);"
      },
      {
        "sha": "178e8183ff5929c60e721d810f22a9c2e5e2ebd4",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -112,19 +112,19 @@ class CPubKey\n     }\n \n     //! Implement serialization, as if this was a byte vector.\n-    unsigned int GetSerializeSize(int nType, int nVersion) const\n+    unsigned int GetSerializeSize(SerializeType nType, int nVersion) const\n     {\n         return size() + 1;\n     }\n     template <typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n+    void Serialize(Stream& s, SerializeType nType, int nVersion) const\n     {\n         unsigned int len = size();\n         ::WriteCompactSize(s, len);\n         s.write((char*)vch, len);\n     }\n     template <typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersion)\n+    void Unserialize(Stream& s, SerializeType nType, int nVersion)\n     {\n         unsigned int len = ::ReadCompactSize(s);\n         if (len <= 65) {"
      },
      {
        "sha": "708874aa4c17bc965e580ea449dd594666270757",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -27,7 +27,7 @@ class RecentRequestEntry\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         unsigned int nDate = date.toTime_t();\n \n         READWRITE(this->nVersion);"
      },
      {
        "sha": "a433e15d0378a3d635d4cd33483fa77d15424af1",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -64,7 +64,7 @@ class SendCoinsRecipient\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         std::string sAddress = address.toStdString();\n         std::string sLabel = label.toStdString();\n         std::string sMessage = message.toStdString();"
      },
      {
        "sha": "35389d16435951492d411b957b6b00cd284b2ef7",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -15,7 +15,7 @@ namespace {\n class TxInputStream\n {\n public:\n-    TxInputStream(int nTypeIn, int nVersionIn, const unsigned char *txTo, size_t txToLen) :\n+    TxInputStream(SerializeType nTypeIn, int nVersionIn, const unsigned char *txTo, size_t txToLen) :\n     m_type(nTypeIn),\n     m_version(nVersionIn),\n     m_data(txTo),\n@@ -47,7 +47,7 @@ class TxInputStream\n     }\n \n private:\n-    const int m_type;\n+    const SerializeType m_type;\n     const int m_version;\n     const unsigned char* m_data;\n     size_t m_remaining;"
      },
      {
        "sha": "7c7fc3bf2cd0e2e0841060468daf2f27c4e47191",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -958,7 +958,7 @@ class CTransactionSignatureSerializer {\n \n     /** Serialize the passed scriptCode, skipping OP_CODESEPARATORs */\n     template<typename S>\n-    void SerializeScriptCode(S &s, int nType, int nVersion) const {\n+    void SerializeScriptCode(S &s, SerializeType nType, int nVersion) const {\n         CScript::const_iterator it = scriptCode.begin();\n         CScript::const_iterator itBegin = it;\n         opcodetype opcode;\n@@ -981,7 +981,7 @@ class CTransactionSignatureSerializer {\n \n     /** Serialize an input of txTo */\n     template<typename S>\n-    void SerializeInput(S &s, unsigned int nInput, int nType, int nVersion) const {\n+    void SerializeInput(S &s, unsigned int nInput, SerializeType nType, int nVersion) const {\n         // In case of SIGHASH_ANYONECANPAY, only the input being signed is serialized\n         if (fAnyoneCanPay)\n             nInput = nIn;\n@@ -1003,7 +1003,7 @@ class CTransactionSignatureSerializer {\n \n     /** Serialize an output of txTo */\n     template<typename S>\n-    void SerializeOutput(S &s, unsigned int nOutput, int nType, int nVersion) const {\n+    void SerializeOutput(S &s, unsigned int nOutput, SerializeType nType, int nVersion) const {\n         if (fHashSingle && nOutput != nIn)\n             // Do not lock-in the txout payee at other indices as txin\n             ::Serialize(s, CTxOut(), nType, nVersion);\n@@ -1013,7 +1013,7 @@ class CTransactionSignatureSerializer {\n \n     /** Serialize txTo */\n     template<typename S>\n-    void Serialize(S &s, int nType, int nVersion) const {\n+    void Serialize(S &s, SerializeType nType, int nVersion) const {\n         // Serialize nVersion\n         ::Serialize(s, txTo.nVersion, nType, nVersion);\n         // Serialize vin"
      },
      {
        "sha": "2c78f4712332c87271b8f861e8b8a6b919cdabd2",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 112,
        "deletions": 112,
        "changes": 224,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -152,7 +152,7 @@ inline float ser_uint32_to_float(uint32_t y)\n // i.e. anything that supports .read(char*, size_t) and .write(char*, size_t)\n //\n \n-enum\n+enum SerializeType\n {\n     // primary actions\n     SER_NETWORK         = (1 << 0),\n@@ -169,62 +169,62 @@ enum\n  * added as members. \n  */\n #define ADD_SERIALIZE_METHODS                                                          \\\n-    size_t GetSerializeSize(int nType, int nVersion) const {                         \\\n+    size_t GetSerializeSize(SerializeType nType, int nVersion) const {          \\\n         CSizeComputer s(nType, nVersion);                                            \\\n         NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize(), nType, nVersion);\\\n         return s.size();                                                             \\\n     }                                                                                \\\n     template<typename Stream>                                                        \\\n-    void Serialize(Stream& s, int nType, int nVersion) const {                       \\\n+    void Serialize(Stream& s, SerializeType nType, int nVersion) const {        \\\n         NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize(), nType, nVersion);\\\n     }                                                                                \\\n     template<typename Stream>                                                        \\\n-    void Unserialize(Stream& s, int nType, int nVersion) {                           \\\n+    void Unserialize(Stream& s, SerializeType nType, int nVersion) {            \\\n         SerializationOp(s, CSerActionUnserialize(), nType, nVersion);                \\\n     }\n \n /*\n  * Basic Types\n  */\n-inline unsigned int GetSerializeSize(char a,      int, int=0) { return 1; }\n-inline unsigned int GetSerializeSize(int8_t a,    int, int=0) { return 1; }\n-inline unsigned int GetSerializeSize(uint8_t a,   int, int=0) { return 1; }\n-inline unsigned int GetSerializeSize(int16_t a,   int, int=0) { return 2; }\n-inline unsigned int GetSerializeSize(uint16_t a,  int, int=0) { return 2; }\n-inline unsigned int GetSerializeSize(int32_t a,   int, int=0) { return 4; }\n-inline unsigned int GetSerializeSize(uint32_t a,  int, int=0) { return 4; }\n-inline unsigned int GetSerializeSize(int64_t a,   int, int=0) { return 8; }\n-inline unsigned int GetSerializeSize(uint64_t a,  int, int=0) { return 8; }\n-inline unsigned int GetSerializeSize(float a,     int, int=0) { return 4; }\n-inline unsigned int GetSerializeSize(double a,    int, int=0) { return 8; }\n-\n-template<typename Stream> inline void Serialize(Stream& s, char a,         int, int=0) { ser_writedata8(s, a); } // TODO Get rid of bare char\n-template<typename Stream> inline void Serialize(Stream& s, int8_t a,       int, int=0) { ser_writedata8(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, uint8_t a,      int, int=0) { ser_writedata8(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, int16_t a,      int, int=0) { ser_writedata16(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, uint16_t a,     int, int=0) { ser_writedata16(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, int32_t a,      int, int=0) { ser_writedata32(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, uint32_t a,     int, int=0) { ser_writedata32(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, int64_t a,      int, int=0) { ser_writedata64(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, uint64_t a,     int, int=0) { ser_writedata64(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, float a,        int, int=0) { ser_writedata32(s, ser_float_to_uint32(a)); }\n-template<typename Stream> inline void Serialize(Stream& s, double a,       int, int=0) { ser_writedata64(s, ser_double_to_uint64(a)); }\n-\n-template<typename Stream> inline void Unserialize(Stream& s, char& a,      int, int=0) { a = ser_readdata8(s); } // TODO Get rid of bare char\n-template<typename Stream> inline void Unserialize(Stream& s, int8_t& a,    int, int=0) { a = ser_readdata8(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a,   int, int=0) { a = ser_readdata8(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, int16_t& a,   int, int=0) { a = ser_readdata16(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a,  int, int=0) { a = ser_readdata16(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, int32_t& a,   int, int=0) { a = ser_readdata32(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a,  int, int=0) { a = ser_readdata32(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, int64_t& a,   int, int=0) { a = ser_readdata64(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a,  int, int=0) { a = ser_readdata64(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, float& a,     int, int=0) { a = ser_uint32_to_float(ser_readdata32(s)); }\n-template<typename Stream> inline void Unserialize(Stream& s, double& a,    int, int=0) { a = ser_uint64_to_double(ser_readdata64(s)); }\n-\n-inline unsigned int GetSerializeSize(bool a, int, int=0)                          { return sizeof(char); }\n-template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; ser_writedata8(s, f); }\n-template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f=ser_readdata8(s); a=f; }\n+inline unsigned int GetSerializeSize(char a,      SerializeType, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(int8_t a,    SerializeType, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(uint8_t a,   SerializeType, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(int16_t a,   SerializeType, int=0) { return 2; }\n+inline unsigned int GetSerializeSize(uint16_t a,  SerializeType, int=0) { return 2; }\n+inline unsigned int GetSerializeSize(int32_t a,   SerializeType, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(uint32_t a,  SerializeType, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(int64_t a,   SerializeType, int=0) { return 8; }\n+inline unsigned int GetSerializeSize(uint64_t a,  SerializeType, int=0) { return 8; }\n+inline unsigned int GetSerializeSize(float a,     SerializeType, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(double a,    SerializeType, int=0) { return 8; }\n+\n+template<typename Stream> inline void Serialize(Stream& s, char a,         SerializeType, int=0) { ser_writedata8(s, a); } // TODO Get rid of bare char\n+template<typename Stream> inline void Serialize(Stream& s, int8_t a,       SerializeType, int=0) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint8_t a,      SerializeType, int=0) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int16_t a,      SerializeType, int=0) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint16_t a,     SerializeType, int=0) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int32_t a,      SerializeType, int=0) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint32_t a,     SerializeType, int=0) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int64_t a,      SerializeType, int=0) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint64_t a,     SerializeType, int=0) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, float a,        SerializeType, int=0) { ser_writedata32(s, ser_float_to_uint32(a)); }\n+template<typename Stream> inline void Serialize(Stream& s, double a,       SerializeType, int=0) { ser_writedata64(s, ser_double_to_uint64(a)); }\n+\n+template<typename Stream> inline void Unserialize(Stream& s, char& a,      SerializeType, int=0) { a = ser_readdata8(s); } // TODO Get rid of bare char\n+template<typename Stream> inline void Unserialize(Stream& s, int8_t& a,    SerializeType, int=0) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a,   SerializeType, int=0) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int16_t& a,   SerializeType, int=0) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a,  SerializeType, int=0) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int32_t& a,   SerializeType, int=0) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a,  SerializeType, int=0) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int64_t& a,   SerializeType, int=0) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a,  SerializeType, int=0) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, float& a,     SerializeType, int=0) { a = ser_uint32_to_float(ser_readdata32(s)); }\n+template<typename Stream> inline void Unserialize(Stream& s, double& a,    SerializeType, int=0) { a = ser_uint64_to_double(ser_readdata64(s)); }\n+\n+inline unsigned int GetSerializeSize(bool a, SerializeType, int=0)                          { return sizeof(char); }\n+template<typename Stream> inline void Serialize(Stream& s, bool a, SerializeType, int=0)    { char f=a; ser_writedata8(s, f); }\n+template<typename Stream> inline void Unserialize(Stream& s, bool& a, SerializeType, int=0) { char f=ser_readdata8(s); a=f; }\n \n \n \n@@ -396,19 +396,19 @@ class CFlatData\n     char* end() { return pend; }\n     const char* end() const { return pend; }\n \n-    unsigned int GetSerializeSize(int, int=0) const\n+    unsigned int GetSerializeSize(SerializeType, int=0) const\n     {\n         return pend - pbegin;\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int, int=0) const\n+    void Serialize(Stream& s, SerializeType, int=0) const\n     {\n         s.write(pbegin, pend - pbegin);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int, int=0)\n+    void Unserialize(Stream& s, SerializeType, int=0)\n     {\n         s.read(pbegin, pend - pbegin);\n     }\n@@ -422,17 +422,17 @@ class CVarInt\n public:\n     CVarInt(I& nIn) : n(nIn) { }\n \n-    unsigned int GetSerializeSize(int, int) const {\n+    unsigned int GetSerializeSize(SerializeType, int) const {\n         return GetSizeOfVarInt<I>(n);\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream &s, int, int) const {\n+    void Serialize(Stream &s, SerializeType, int) const {\n         WriteVarInt<Stream,I>(s, n);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int, int) {\n+    void Unserialize(Stream& s, SerializeType, int) {\n         n = ReadVarInt<Stream,I>(s);\n     }\n };\n@@ -446,7 +446,7 @@ class LimitedString\n     LimitedString(std::string& string) : string(string) {}\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int, int=0)\n+    void Unserialize(Stream& s, SerializeType, int=0)\n     {\n         size_t size = ReadCompactSize(s);\n         if (size > Limit) {\n@@ -458,14 +458,14 @@ class LimitedString\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int, int=0) const\n+    void Serialize(Stream& s, SerializeType, int=0) const\n     {\n         WriteCompactSize(s, string.size());\n         if (!string.empty())\n             s.write((char*)&string[0], string.size());\n     }\n \n-    unsigned int GetSerializeSize(int, int=0) const\n+    unsigned int GetSerializeSize(SerializeType, int=0) const\n     {\n         return GetSizeOfCompactSize(string.size()) + string.size();\n     }\n@@ -481,78 +481,78 @@ CVarInt<I> WrapVarInt(I& n) { return CVarInt<I>(n); }\n /**\n  *  string\n  */\n-template<typename C> unsigned int GetSerializeSize(const std::basic_string<C>& str, int, int=0);\n-template<typename Stream, typename C> void Serialize(Stream& os, const std::basic_string<C>& str, int, int=0);\n-template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_string<C>& str, int, int=0);\n+template<typename C> unsigned int GetSerializeSize(const std::basic_string<C>& str, SerializeType, int=0);\n+template<typename Stream, typename C> void Serialize(Stream& os, const std::basic_string<C>& str, SerializeType, int=0);\n+template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_string<C>& str, SerializeType, int=0);\n \n /**\n  * vector\n  * vectors of unsigned char are a special case and are intended to be serialized as a single opaque blob.\n  */\n-template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n-template<typename T, typename A, typename V> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const V&);\n-template<typename T, typename A> inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion);\n-template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n-template<typename Stream, typename T, typename A, typename V> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const V&);\n-template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion);\n-template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n-template<typename Stream, typename T, typename A, typename V> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const V&);\n-template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion);\n+template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, SerializeType nType, int nVersion, const unsigned char&);\n+template<typename T, typename A, typename V> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, SerializeType nType, int nVersion, const V&);\n+template<typename T, typename A> inline unsigned int GetSerializeSize(const std::vector<T, A>& v, SerializeType nType, int nVersion);\n+template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, SerializeType nType, int nVersion, const unsigned char&);\n+template<typename Stream, typename T, typename A, typename V> void Serialize_impl(Stream& os, const std::vector<T, A>& v, SerializeType nType, int nVersion, const V&);\n+template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v, SerializeType nType, int nVersion);\n+template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, SerializeType nType, int nVersion, const unsigned char&);\n+template<typename Stream, typename T, typename A, typename V> void Unserialize_impl(Stream& is, std::vector<T, A>& v, SerializeType nType, int nVersion, const V&);\n+template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v, SerializeType nType, int nVersion);\n \n /**\n  * others derived from vector\n  */\n-extern inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion);\n-template<typename Stream> void Serialize(Stream& os, const CScript& v, int nType, int nVersion);\n-template<typename Stream> void Unserialize(Stream& is, CScript& v, int nType, int nVersion);\n+extern inline unsigned int GetSerializeSize(const CScript& v, SerializeType nType, int nVersion);\n+template<typename Stream> void Serialize(Stream& os, const CScript& v, SerializeType nType, int nVersion);\n+template<typename Stream> void Unserialize(Stream& is, CScript& v, SerializeType nType, int nVersion);\n \n /**\n  * pair\n  */\n-template<typename K, typename T> unsigned int GetSerializeSize(const std::pair<K, T>& item, int nType, int nVersion);\n-template<typename Stream, typename K, typename T> void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion);\n-template<typename Stream, typename K, typename T> void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion);\n+template<typename K, typename T> unsigned int GetSerializeSize(const std::pair<K, T>& item, SerializeType nType, int nVersion);\n+template<typename Stream, typename K, typename T> void Serialize(Stream& os, const std::pair<K, T>& item, SerializeType nType, int nVersion);\n+template<typename Stream, typename K, typename T> void Unserialize(Stream& is, std::pair<K, T>& item, SerializeType nType, int nVersion);\n \n /**\n  * map\n  */\n-template<typename K, typename T, typename Pred, typename A> unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion);\n-template<typename Stream, typename K, typename T, typename Pred, typename A> void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion);\n-template<typename Stream, typename K, typename T, typename Pred, typename A> void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion);\n+template<typename K, typename T, typename Pred, typename A> unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, SerializeType nType, int nVersion);\n+template<typename Stream, typename K, typename T, typename Pred, typename A> void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, SerializeType nType, int nVersion);\n+template<typename Stream, typename K, typename T, typename Pred, typename A> void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, SerializeType nType, int nVersion);\n \n /**\n  * set\n  */\n-template<typename K, typename Pred, typename A> unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVersion);\n-template<typename Stream, typename K, typename Pred, typename A> void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion);\n-template<typename Stream, typename K, typename Pred, typename A> void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion);\n+template<typename K, typename Pred, typename A> unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, SerializeType nType, int nVersion);\n+template<typename Stream, typename K, typename Pred, typename A> void Serialize(Stream& os, const std::set<K, Pred, A>& m, SerializeType nType, int nVersion);\n+template<typename Stream, typename K, typename Pred, typename A> void Unserialize(Stream& is, std::set<K, Pred, A>& m, SerializeType nType, int nVersion);\n \n \n \n \n \n /**\n  * If none of the specialized versions above matched, default to calling member function.\n- * \"int nType\" is changed to \"long nType\" to keep from getting an ambiguous overload error.\n- * The compiler will only cast int to long if none of the other templates matched.\n+ * \"int nVersion\" is changed to \"long nVersion\" to keep from getting an ambiguous overload error.\n+ * The compiler will only cast enum to long if none of the other templates matched.\n  * Thanks to Boost serialization for this idea.\n  */\n template<typename T>\n-inline unsigned int GetSerializeSize(const T& a, long nType, int nVersion)\n+inline unsigned int GetSerializeSize(const T& a, SerializeType nType, long nVersion)\n {\n-    return a.GetSerializeSize((int)nType, nVersion);\n+    return a.GetSerializeSize(nType, (int)nVersion);\n }\n \n template<typename Stream, typename T>\n-inline void Serialize(Stream& os, const T& a, long nType, int nVersion)\n+inline void Serialize(Stream& os, const T& a, SerializeType nType, long nVersion)\n {\n-    a.Serialize(os, (int)nType, nVersion);\n+    a.Serialize(os, nType, (int)nVersion);\n }\n \n template<typename Stream, typename T>\n-inline void Unserialize(Stream& is, T& a, long nType, int nVersion)\n+inline void Unserialize(Stream& is, T& a, SerializeType nType, long nVersion)\n {\n-    a.Unserialize(is, (int)nType, nVersion);\n+    a.Unserialize(is, nType, (int)nVersion);\n }\n \n \n@@ -563,21 +563,21 @@ inline void Unserialize(Stream& is, T& a, long nType, int nVersion)\n  * string\n  */\n template<typename C>\n-unsigned int GetSerializeSize(const std::basic_string<C>& str, int, int)\n+unsigned int GetSerializeSize(const std::basic_string<C>& str, SerializeType, int)\n {\n     return GetSizeOfCompactSize(str.size()) + str.size() * sizeof(str[0]);\n }\n \n template<typename Stream, typename C>\n-void Serialize(Stream& os, const std::basic_string<C>& str, int, int)\n+void Serialize(Stream& os, const std::basic_string<C>& str, SerializeType, int)\n {\n     WriteCompactSize(os, str.size());\n     if (!str.empty())\n         os.write((char*)&str[0], str.size() * sizeof(str[0]));\n }\n \n template<typename Stream, typename C>\n-void Unserialize(Stream& is, std::basic_string<C>& str, int, int)\n+void Unserialize(Stream& is, std::basic_string<C>& str, SerializeType, int)\n {\n     unsigned int nSize = ReadCompactSize(is);\n     str.resize(nSize);\n@@ -591,13 +591,13 @@ void Unserialize(Stream& is, std::basic_string<C>& str, int, int)\n  * vector\n  */\n template<typename T, typename A>\n-unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n+unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, SerializeType nType, int nVersion, const unsigned char&)\n {\n     return (GetSizeOfCompactSize(v.size()) + v.size() * sizeof(T));\n }\n \n template<typename T, typename A, typename V>\n-unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const V&)\n+unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, SerializeType nType, int nVersion, const V&)\n {\n     unsigned int nSize = GetSizeOfCompactSize(v.size());\n     for (typename std::vector<T, A>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n@@ -606,37 +606,37 @@ unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nV\n }\n \n template<typename T, typename A>\n-inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion)\n+inline unsigned int GetSerializeSize(const std::vector<T, A>& v, SerializeType nType, int nVersion)\n {\n     return GetSerializeSize_impl(v, nType, nVersion, T());\n }\n \n \n template<typename Stream, typename T, typename A>\n-void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n+void Serialize_impl(Stream& os, const std::vector<T, A>& v, SerializeType nType, int nVersion, const unsigned char&)\n {\n     WriteCompactSize(os, v.size());\n     if (!v.empty())\n         os.write((char*)&v[0], v.size() * sizeof(T));\n }\n \n template<typename Stream, typename T, typename A, typename V>\n-void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const V&)\n+void Serialize_impl(Stream& os, const std::vector<T, A>& v, SerializeType nType, int nVersion, const V&)\n {\n     WriteCompactSize(os, v.size());\n     for (typename std::vector<T, A>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n         ::Serialize(os, (*vi), nType, nVersion);\n }\n \n template<typename Stream, typename T, typename A>\n-inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion)\n+inline void Serialize(Stream& os, const std::vector<T, A>& v, SerializeType nType, int nVersion)\n {\n     Serialize_impl(os, v, nType, nVersion, T());\n }\n \n \n template<typename Stream, typename T, typename A>\n-void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n+void Unserialize_impl(Stream& is, std::vector<T, A>& v, SerializeType nType, int nVersion, const unsigned char&)\n {\n     // Limit size per read so bogus size value won't cause out of memory\n     v.clear();\n@@ -652,7 +652,7 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion,\n }\n \n template<typename Stream, typename T, typename A, typename V>\n-void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const V&)\n+void Unserialize_impl(Stream& is, std::vector<T, A>& v, SerializeType nType, int nVersion, const V&)\n {\n     v.clear();\n     unsigned int nSize = ReadCompactSize(is);\n@@ -670,7 +670,7 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion,\n }\n \n template<typename Stream, typename T, typename A>\n-inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion)\n+inline void Unserialize(Stream& is, std::vector<T, A>& v, SerializeType nType, int nVersion)\n {\n     Unserialize_impl(is, v, nType, nVersion, T());\n }\n@@ -680,19 +680,19 @@ inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersio\n /**\n  * others derived from vector\n  */\n-inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion)\n+inline unsigned int GetSerializeSize(const CScript& v, SerializeType nType, int nVersion)\n {\n     return GetSerializeSize((const std::vector<unsigned char>&)v, nType, nVersion);\n }\n \n template<typename Stream>\n-void Serialize(Stream& os, const CScript& v, int nType, int nVersion)\n+void Serialize(Stream& os, const CScript& v, SerializeType nType, int nVersion)\n {\n     Serialize(os, (const std::vector<unsigned char>&)v, nType, nVersion);\n }\n \n template<typename Stream>\n-void Unserialize(Stream& is, CScript& v, int nType, int nVersion)\n+void Unserialize(Stream& is, CScript& v, SerializeType nType, int nVersion)\n {\n     Unserialize(is, (std::vector<unsigned char>&)v, nType, nVersion);\n }\n@@ -703,20 +703,20 @@ void Unserialize(Stream& is, CScript& v, int nType, int nVersion)\n  * pair\n  */\n template<typename K, typename T>\n-unsigned int GetSerializeSize(const std::pair<K, T>& item, int nType, int nVersion)\n+unsigned int GetSerializeSize(const std::pair<K, T>& item, SerializeType nType, int nVersion)\n {\n     return GetSerializeSize(item.first, nType, nVersion) + GetSerializeSize(item.second, nType, nVersion);\n }\n \n template<typename Stream, typename K, typename T>\n-void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion)\n+void Serialize(Stream& os, const std::pair<K, T>& item, SerializeType nType, int nVersion)\n {\n     Serialize(os, item.first, nType, nVersion);\n     Serialize(os, item.second, nType, nVersion);\n }\n \n template<typename Stream, typename K, typename T>\n-void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion)\n+void Unserialize(Stream& is, std::pair<K, T>& item, SerializeType nType, int nVersion)\n {\n     Unserialize(is, item.first, nType, nVersion);\n     Unserialize(is, item.second, nType, nVersion);\n@@ -728,7 +728,7 @@ void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion)\n  * map\n  */\n template<typename K, typename T, typename Pred, typename A>\n-unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion)\n+unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, SerializeType nType, int nVersion)\n {\n     unsigned int nSize = GetSizeOfCompactSize(m.size());\n     for (typename std::map<K, T, Pred, A>::const_iterator mi = m.begin(); mi != m.end(); ++mi)\n@@ -737,15 +737,15 @@ unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int n\n }\n \n template<typename Stream, typename K, typename T, typename Pred, typename A>\n-void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion)\n+void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, SerializeType nType, int nVersion)\n {\n     WriteCompactSize(os, m.size());\n     for (typename std::map<K, T, Pred, A>::const_iterator mi = m.begin(); mi != m.end(); ++mi)\n         Serialize(os, (*mi), nType, nVersion);\n }\n \n template<typename Stream, typename K, typename T, typename Pred, typename A>\n-void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion)\n+void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, SerializeType nType, int nVersion)\n {\n     m.clear();\n     unsigned int nSize = ReadCompactSize(is);\n@@ -764,7 +764,7 @@ void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion\n  * set\n  */\n template<typename K, typename Pred, typename A>\n-unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVersion)\n+unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, SerializeType nType, int nVersion)\n {\n     unsigned int nSize = GetSizeOfCompactSize(m.size());\n     for (typename std::set<K, Pred, A>::const_iterator it = m.begin(); it != m.end(); ++it)\n@@ -773,15 +773,15 @@ unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVer\n }\n \n template<typename Stream, typename K, typename Pred, typename A>\n-void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion)\n+void Serialize(Stream& os, const std::set<K, Pred, A>& m, SerializeType nType, int nVersion)\n {\n     WriteCompactSize(os, m.size());\n     for (typename std::set<K, Pred, A>::const_iterator it = m.begin(); it != m.end(); ++it)\n         Serialize(os, (*it), nType, nVersion);\n }\n \n template<typename Stream, typename K, typename Pred, typename A>\n-void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion)\n+void Unserialize(Stream& is, std::set<K, Pred, A>& m, SerializeType nType, int nVersion)\n {\n     m.clear();\n     unsigned int nSize = ReadCompactSize(is);\n@@ -809,13 +809,13 @@ struct CSerActionUnserialize\n };\n \n template<typename Stream, typename T>\n-inline void SerReadWrite(Stream& s, const T& obj, int nType, int nVersion, CSerActionSerialize ser_action)\n+inline void SerReadWrite(Stream& s, const T& obj, SerializeType nType, int nVersion, CSerActionSerialize ser_action)\n {\n     ::Serialize(s, obj, nType, nVersion);\n }\n \n template<typename Stream, typename T>\n-inline void SerReadWrite(Stream& s, T& obj, int nType, int nVersion, CSerActionUnserialize ser_action)\n+inline void SerReadWrite(Stream& s, T& obj, SerializeType nType, int nVersion, CSerActionUnserialize ser_action)\n {\n     ::Unserialize(s, obj, nType, nVersion);\n }\n@@ -834,10 +834,10 @@ class CSizeComputer\n     size_t nSize;\n \n public:\n-    int nType;\n+    SerializeType nType;\n     int nVersion;\n \n-    CSizeComputer(int nTypeIn, int nVersionIn) : nSize(0), nType(nTypeIn), nVersion(nVersionIn) {}\n+    CSizeComputer(SerializeType nTypeIn, int nVersionIn) : nSize(0), nType(nTypeIn), nVersion(nVersionIn) {}\n \n     CSizeComputer& write(const char *psz, size_t nSize)\n     {"
      },
      {
        "sha": "c338dfa089f9bf3bba30a5c772a33fd77d5f2f5a",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -34,7 +34,7 @@ class CDataStream\n     vector_type vch;\n     unsigned int nReadPos;\n public:\n-    int nType;\n+    SerializeType nType;\n     int nVersion;\n \n     typedef vector_type::allocator_type   allocator_type;\n@@ -47,39 +47,39 @@ class CDataStream\n     typedef vector_type::const_iterator   const_iterator;\n     typedef vector_type::reverse_iterator reverse_iterator;\n \n-    explicit CDataStream(int nTypeIn, int nVersionIn)\n+    explicit CDataStream(SerializeType nTypeIn, int nVersionIn)\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    CDataStream(const_iterator pbegin, const_iterator pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)\n+    CDataStream(const_iterator pbegin, const_iterator pend, SerializeType nTypeIn, int nVersionIn) : vch(pbegin, pend)\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n #if !defined(_MSC_VER) || _MSC_VER >= 1300\n-    CDataStream(const char* pbegin, const char* pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)\n+    CDataStream(const char* pbegin, const char* pend, SerializeType nTypeIn, int nVersionIn) : vch(pbegin, pend)\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n #endif\n \n-    CDataStream(const vector_type& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())\n+    CDataStream(const vector_type& vchIn, SerializeType nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    CDataStream(const std::vector<char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())\n+    CDataStream(const std::vector<char>& vchIn, SerializeType nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())\n+    CDataStream(const std::vector<unsigned char>& vchIn, SerializeType nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    void Init(int nTypeIn, int nVersionIn)\n+    void Init(SerializeType nTypeIn, int nVersionIn)\n     {\n         nReadPos = 0;\n         nType = nTypeIn;\n@@ -210,8 +210,8 @@ class CDataStream\n     CDataStream* rdbuf()         { return this; }\n     int in_avail()               { return size(); }\n \n-    void SetType(int n)          { nType = n; }\n-    int GetType()                { return nType; }\n+    void SetType(SerializeType n)          { nType = n; }\n+    SerializeType GetType()                { return nType; }\n     void SetVersion(int n)       { nVersion = n; }\n     int GetVersion()             { return nVersion; }\n     void ReadVersion()           { *this >> nVersion; }\n@@ -262,7 +262,7 @@ class CDataStream\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n+    void Serialize(Stream& s, SerializeType nType, int nVersion) const\n     {\n         // Special case: stream << stream concatenates like stream += stream\n         if (!vch.empty())\n@@ -320,13 +320,13 @@ class CAutoFile\n     CAutoFile(const CAutoFile&);\n     CAutoFile& operator=(const CAutoFile&);\n \n-    int nType;\n+    SerializeType nType;\n     int nVersion;\n \t\n     FILE* file;\t\n \n public:\n-    CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn)\n+    CAutoFile(FILE* filenew, SerializeType nTypeIn, int nVersionIn)\n     {\n         file = filenew;\n         nType = nTypeIn;\n@@ -365,8 +365,8 @@ class CAutoFile\n     //\n     // Stream subset\n     //\n-    void SetType(int n)          { nType = n; }\n-    int GetType()                { return nType; }\n+    void SetType(SerializeType n)          { nType = n; }\n+    SerializeType GetType()                { return nType; }\n     void SetVersion(int n)       { nVersion = n; }\n     int GetVersion()             { return nVersion; }\n     void ReadVersion()           { *this >> nVersion; }\n@@ -431,7 +431,7 @@ class CBufferedFile\n     CBufferedFile(const CBufferedFile&);\n     CBufferedFile& operator=(const CBufferedFile&);\n \n-    int nType;\n+    SerializeType nType;\n     int nVersion;\n \n     FILE *src;            // source file\n@@ -461,7 +461,7 @@ class CBufferedFile\n     }\n \n public:\n-    CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :\n+    CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, SerializeType nTypeIn, int nVersionIn) :\n         nSrcPos(0), nReadPos(0), nReadLimit((uint64_t)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0)\n     {\n         src = fileIn;"
      },
      {
        "sha": "f8130e8de1c356f3b9622295097a67ef4996ea28",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -17,33 +17,33 @@ BOOST_FIXTURE_TEST_SUITE(serialize_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sizes)\n {\n-    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(char(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(int8_t), GetSerializeSize(int8_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(uint8_t), GetSerializeSize(uint8_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(int16_t), GetSerializeSize(int16_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(uint16_t), GetSerializeSize(uint16_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(int32_t), GetSerializeSize(int32_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(uint32_t), GetSerializeSize(uint32_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(int64_t), GetSerializeSize(int64_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(float), GetSerializeSize(float(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize(double(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(char(0), SER_NETWORK));\n+    BOOST_CHECK_EQUAL(sizeof(int8_t), GetSerializeSize(int8_t(0), SER_NETWORK));\n+    BOOST_CHECK_EQUAL(sizeof(uint8_t), GetSerializeSize(uint8_t(0), SER_NETWORK));\n+    BOOST_CHECK_EQUAL(sizeof(int16_t), GetSerializeSize(int16_t(0), SER_NETWORK));\n+    BOOST_CHECK_EQUAL(sizeof(uint16_t), GetSerializeSize(uint16_t(0), SER_NETWORK));\n+    BOOST_CHECK_EQUAL(sizeof(int32_t), GetSerializeSize(int32_t(0), SER_NETWORK));\n+    BOOST_CHECK_EQUAL(sizeof(uint32_t), GetSerializeSize(uint32_t(0), SER_NETWORK));\n+    BOOST_CHECK_EQUAL(sizeof(int64_t), GetSerializeSize(int64_t(0), SER_NETWORK));\n+    BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), SER_NETWORK));\n+    BOOST_CHECK_EQUAL(sizeof(float), GetSerializeSize(float(0), SER_NETWORK));\n+    BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize(double(0), SER_NETWORK));\n     // Bool is serialized as char\n-    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), SER_NETWORK));\n \n     // Sanity-check GetSerializeSize and c++ type matching\n-    BOOST_CHECK_EQUAL(GetSerializeSize(char(0), 0), 1);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(int8_t(0), 0), 1);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(uint8_t(0), 0), 1);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(int16_t(0), 0), 2);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(uint16_t(0), 0), 2);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(int32_t(0), 0), 4);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(uint32_t(0), 0), 4);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(int64_t(0), 0), 8);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(uint64_t(0), 0), 8);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(float(0), 0), 4);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(double(0), 0), 8);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(bool(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(char(0), SER_NETWORK), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int8_t(0), SER_NETWORK), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint8_t(0), SER_NETWORK), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int16_t(0), SER_NETWORK), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint16_t(0), SER_NETWORK), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int32_t(0), SER_NETWORK), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint32_t(0), SER_NETWORK), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int64_t(0), SER_NETWORK), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint64_t(0), SER_NETWORK), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(float(0), SER_NETWORK), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(double(0), SER_NETWORK), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(bool(0), SER_NETWORK), 1);\n }\n \n BOOST_AUTO_TEST_CASE(floats_conversion)\n@@ -136,13 +136,13 @@ BOOST_AUTO_TEST_CASE(varints)\n     CDataStream::size_type size = 0;\n     for (int i = 0; i < 100000; i++) {\n         ss << VARINT(i);\n-        size += ::GetSerializeSize(VARINT(i), 0, 0);\n+        size += ::GetSerializeSize(VARINT(i), SER_DISK, 0);\n         BOOST_CHECK(size == ss.size());\n     }\n \n     for (uint64_t i = 0;  i < 100000000000ULL; i += 999999937) {\n         ss << VARINT(i);\n-        size += ::GetSerializeSize(VARINT(i), 0, 0);\n+        size += ::GetSerializeSize(VARINT(i), SER_DISK, 0);\n         BOOST_CHECK(size == ss.size());\n     }\n "
      },
      {
        "sha": "6883234c3044a65bf1c72dbdb6f09caa1c121959",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -184,23 +184,23 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(OneL.begin() + 32 == OneL.end());\n     BOOST_CHECK(MaxL.begin() + 32 == MaxL.end());\n     BOOST_CHECK(TmpL.begin() + 32 == TmpL.end());\n-    BOOST_CHECK(R1L.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n-    BOOST_CHECK(ZeroL.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n+    BOOST_CHECK(R1L.GetSerializeSize(SER_NETWORK,PROTOCOL_VERSION) == 32);\n+    BOOST_CHECK(ZeroL.GetSerializeSize(SER_NETWORK,PROTOCOL_VERSION) == 32);\n \n     std::stringstream ss;\n-    R1L.Serialize(ss,0,PROTOCOL_VERSION);\n+    R1L.Serialize(ss,SER_NETWORK,PROTOCOL_VERSION);\n     BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+32));\n-    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    TmpL.Unserialize(ss,SER_NETWORK,PROTOCOL_VERSION);\n     BOOST_CHECK(R1L == TmpL);\n     ss.str(\"\");\n-    ZeroL.Serialize(ss,0,PROTOCOL_VERSION);\n+    ZeroL.Serialize(ss,SER_NETWORK,PROTOCOL_VERSION);\n     BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+32));\n-    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    TmpL.Unserialize(ss,SER_NETWORK,PROTOCOL_VERSION);\n     BOOST_CHECK(ZeroL == TmpL);\n     ss.str(\"\");\n-    MaxL.Serialize(ss,0,PROTOCOL_VERSION);\n+    MaxL.Serialize(ss,SER_NETWORK,PROTOCOL_VERSION);\n     BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+32));\n-    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    TmpL.Unserialize(ss,SER_NETWORK,PROTOCOL_VERSION);\n     BOOST_CHECK(MaxL == TmpL);\n     ss.str(\"\");\n \n@@ -230,22 +230,22 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(OneS.begin() + 20 == OneS.end());\n     BOOST_CHECK(MaxS.begin() + 20 == MaxS.end());\n     BOOST_CHECK(TmpS.begin() + 20 == TmpS.end());\n-    BOOST_CHECK(R1S.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n-    BOOST_CHECK(ZeroS.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n+    BOOST_CHECK(R1S.GetSerializeSize(SER_NETWORK,PROTOCOL_VERSION) == 20);\n+    BOOST_CHECK(ZeroS.GetSerializeSize(SER_NETWORK,PROTOCOL_VERSION) == 20);\n \n-    R1S.Serialize(ss,0,PROTOCOL_VERSION);\n+    R1S.Serialize(ss,SER_NETWORK,PROTOCOL_VERSION);\n     BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+20));\n-    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    TmpS.Unserialize(ss,SER_NETWORK,PROTOCOL_VERSION);\n     BOOST_CHECK(R1S == TmpS);\n     ss.str(\"\");\n-    ZeroS.Serialize(ss,0,PROTOCOL_VERSION);\n+    ZeroS.Serialize(ss,SER_NETWORK,PROTOCOL_VERSION);\n     BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+20));\n-    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    TmpS.Unserialize(ss,SER_NETWORK,PROTOCOL_VERSION);\n     BOOST_CHECK(ZeroS == TmpS);\n     ss.str(\"\");\n-    MaxS.Serialize(ss,0,PROTOCOL_VERSION);\n+    MaxS.Serialize(ss,SER_NETWORK,PROTOCOL_VERSION);\n     BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+20));\n-    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    TmpS.Unserialize(ss,SER_NETWORK,PROTOCOL_VERSION);\n     BOOST_CHECK(MaxS == TmpS);\n     ss.str(\"\");\n }"
      },
      {
        "sha": "9ffd9260b7252c4c54826fc3b0f680b3bd7cd244",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_UINT256_H\n #define BITCOIN_UINT256_H\n \n+#include \"serialize.h\"\n+\n #include <assert.h>\n #include <cstring>\n #include <stdexcept>\n@@ -75,19 +77,19 @@ class base_blob\n         return sizeof(data);\n     }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const\n+    unsigned int GetSerializeSize(SerializeType nType, int nVersion) const\n     {\n         return sizeof(data);\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n+    void Serialize(Stream& s, SerializeType nType, int nVersion) const\n     {\n         s.write((char*)data, sizeof(data));\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersion)\n+    void Unserialize(Stream& s, SerializeType nType, int nVersion)\n     {\n         s.read((char*)data, sizeof(data));\n     }"
      },
      {
        "sha": "9f678a4ba1898790af3948267099a37ab4b26c73",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -27,22 +27,22 @@ class CTxInUndo\n     CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n     CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n+    unsigned int GetSerializeSize(SerializeType nType, int nVersion) const {\n         return ::GetSerializeSize(VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion) +\n                (nHeight > 0 ? ::GetSerializeSize(VARINT(this->nVersion), nType, nVersion) : 0) +\n                ::GetSerializeSize(CTxOutCompressor(REF(txout)), nType, nVersion);\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n+    void Serialize(Stream &s, SerializeType nType, int nVersion) const {\n         ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion);\n         if (nHeight > 0)\n             ::Serialize(s, VARINT(this->nVersion), nType, nVersion);\n         ::Serialize(s, CTxOutCompressor(REF(txout)), nType, nVersion);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n+    void Unserialize(Stream &s, SerializeType nType, int nVersion) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode), nType, nVersion);\n         nHeight = nCode / 2;\n@@ -63,7 +63,7 @@ class CTxUndo\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(vprevout);\n     }\n };\n@@ -77,7 +77,7 @@ class CBlockUndo\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(vtxundo);\n     }\n };"
      },
      {
        "sha": "523e271e52cd44adef60e370478663dea77ff8c5",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -46,7 +46,7 @@ class CMasterKey\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(vchCryptedKey);\n         READWRITE(vchSalt);\n         READWRITE(nDerivationMethod);"
      },
      {
        "sha": "fd4358199d9893c11c579bdb3cb53522f19a5b9d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -83,7 +83,7 @@ class CKeyPool\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(nTime);\n@@ -177,7 +177,7 @@ class CMerkleTx : public CTransaction\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(*(CTransaction*)this);\n         nVersion = this->nVersion;\n         READWRITE(hashBlock);\n@@ -294,7 +294,7 @@ class CWalletTx : public CMerkleTx\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         if (ser_action.ForRead())\n             Init(NULL);\n         char fSpent = false;\n@@ -424,7 +424,7 @@ class CWalletKey\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(vchPrivKey);\n@@ -779,7 +779,7 @@ class CAccount\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(vchPubKey);\n@@ -823,7 +823,7 @@ class CAccountingEntry\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n         //! Note: strAccount is serialized as part of the key, not here."
      },
      {
        "sha": "3b83f9644db3fb3d95002047a7f748ced43f5c00",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028391f08557d77113272e7b3dba4075e2a15cbb/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028391f08557d77113272e7b3dba4075e2a15cbb/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=028391f08557d77113272e7b3dba4075e2a15cbb",
        "patch": "@@ -59,7 +59,7 @@ class CKeyMetadata\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n         READWRITE(this->nVersion);\n         nVersion = this->nVersion;\n         READWRITE(nCreateTime);"
      }
    ]
  },
  {
    "sha": "0ee4acdbd54272161dd957f19d9ebf3c1c402276",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWU0YWNkYmQ1NDI3MjE2MWRkOTU3ZjE5ZDllYmYzYzFjNDAyMjc2",
    "commit": {
      "author": {
        "name": "Rusty Russell",
        "email": "rusty@rustcorp.com.au",
        "date": "2014-12-08T23:36:24Z"
      },
      "committer": {
        "name": "Rusty Russell",
        "email": "rusty@rustcorp.com.au",
        "date": "2015-04-16T07:37:15Z"
      },
      "message": "Make SER_* values a normal enum.\n\ncommit e754cf4133c (Split off CBlockHeader from CBlock) removed\nthe application-specific flags from the serial type, but left\nthe comment and the weird spacing in the values.\n\nMake SER_* a normal enum, and test for (in)equality as expected.\n\nI also changed the weird negative in CAddress serialization from:\n\n        if ((nType & SER_DISK) ||\n            (nVersion >= CADDR_TIME_VERSION && !(nType & SER_GETHASH)))\n\nTo the clearer:\n        if ((nType == SER_DISK) ||\n            (nVersion >= CADDR_TIME_VERSION && (nType == SER_NETWORK)))",
      "tree": {
        "sha": "d9f81222454ca32f9a4aadd54bcf8cdf88ad2f28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9f81222454ca32f9a4aadd54bcf8cdf88ad2f28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ee4acdbd54272161dd957f19d9ebf3c1c402276",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ee4acdbd54272161dd957f19d9ebf3c1c402276",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ee4acdbd54272161dd957f19d9ebf3c1c402276",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ee4acdbd54272161dd957f19d9ebf3c1c402276/comments",
    "author": {
      "login": "rustyrussell",
      "id": 775844,
      "node_id": "MDQ6VXNlcjc3NTg0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rustyrussell",
      "html_url": "https://github.com/rustyrussell",
      "followers_url": "https://api.github.com/users/rustyrussell/followers",
      "following_url": "https://api.github.com/users/rustyrussell/following{/other_user}",
      "gists_url": "https://api.github.com/users/rustyrussell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rustyrussell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
      "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
      "repos_url": "https://api.github.com/users/rustyrussell/repos",
      "events_url": "https://api.github.com/users/rustyrussell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rustyrussell",
      "id": 775844,
      "node_id": "MDQ6VXNlcjc3NTg0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rustyrussell",
      "html_url": "https://github.com/rustyrussell",
      "followers_url": "https://api.github.com/users/rustyrussell/followers",
      "following_url": "https://api.github.com/users/rustyrussell/following{/other_user}",
      "gists_url": "https://api.github.com/users/rustyrussell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rustyrussell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
      "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
      "repos_url": "https://api.github.com/users/rustyrussell/repos",
      "events_url": "https://api.github.com/users/rustyrussell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "028391f08557d77113272e7b3dba4075e2a15cbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/028391f08557d77113272e7b3dba4075e2a15cbb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/028391f08557d77113272e7b3dba4075e2a15cbb"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 12,
      "deletions": 13
    },
    "files": [
      {
        "sha": "07c2b1b453fe73130a7051ba5002d9b9c8d927ed",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee4acdbd54272161dd957f19d9ebf3c1c402276/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee4acdbd54272161dd957f19d9ebf3c1c402276/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=0ee4acdbd54272161dd957f19d9ebf3c1c402276",
        "patch": "@@ -300,7 +300,7 @@ class CDiskBlockIndex : public CBlockIndex\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+        if (nType != SER_GETHASH)\n             READWRITE(VARINT(nVersion));\n \n         READWRITE(VARINT(nHeight));"
      },
      {
        "sha": "29d24bff3c6ab167c4ad5e8e3bef7c5a2a72bcc7",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee4acdbd54272161dd957f19d9ebf3c1c402276/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee4acdbd54272161dd957f19d9ebf3c1c402276/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=0ee4acdbd54272161dd957f19d9ebf3c1c402276",
        "patch": "@@ -152,7 +152,7 @@ struct CBlockLocator\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+        if (nType != SER_GETHASH)\n             READWRITE(nVersion);\n         READWRITE(vHave);\n     }"
      },
      {
        "sha": "dfdcb1750a657ce4d458f1c936e4139387536c12",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee4acdbd54272161dd957f19d9ebf3c1c402276/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee4acdbd54272161dd957f19d9ebf3c1c402276/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=0ee4acdbd54272161dd957f19d9ebf3c1c402276",
        "patch": "@@ -101,10 +101,10 @@ class CAddress : public CService\n     {\n         if (ser_action.ForRead())\n             Init();\n-        if (nType & SER_DISK)\n+        if (nType == SER_DISK)\n             READWRITE(nVersion);\n-        if ((nType & SER_DISK) ||\n-            (nVersion >= CADDR_TIME_VERSION && !(nType & SER_GETHASH)))\n+        if ((nType == SER_DISK) ||\n+            (nVersion >= CADDR_TIME_VERSION && (nType == SER_NETWORK)))\n             READWRITE(nTime);\n         READWRITE(nServices);\n         READWRITE(*(CService*)this);"
      },
      {
        "sha": "33c7cf76f25ef6eceb8df83fa77b3c8d86c8462e",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee4acdbd54272161dd957f19d9ebf3c1c402276/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee4acdbd54272161dd957f19d9ebf3c1c402276/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=0ee4acdbd54272161dd957f19d9ebf3c1c402276",
        "patch": "@@ -154,10 +154,9 @@ inline float ser_uint32_to_float(uint32_t y)\n \n enum SerializeType\n {\n-    // primary actions\n-    SER_NETWORK         = (1 << 0),\n-    SER_DISK            = (1 << 1),\n-    SER_GETHASH         = (1 << 2),\n+    SER_NETWORK,\n+    SER_DISK,\n+    SER_GETHASH\n };\n \n #define READWRITE(obj)      (::SerReadWrite(s, (obj), nType, nVersion, ser_action))"
      },
      {
        "sha": "aa10b42883d38924e60079337f0ba17a72e01db7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee4acdbd54272161dd957f19d9ebf3c1c402276/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee4acdbd54272161dd957f19d9ebf3c1c402276/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0ee4acdbd54272161dd957f19d9ebf3c1c402276",
        "patch": "@@ -84,7 +84,7 @@ class CKeyPool\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+        if (nType != SER_GETHASH)\n             READWRITE(nVersion);\n         READWRITE(nTime);\n         READWRITE(vchPubKey);\n@@ -425,7 +425,7 @@ class CWalletKey\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+        if (nType != SER_GETHASH)\n             READWRITE(nVersion);\n         READWRITE(vchPrivKey);\n         READWRITE(nTimeCreated);\n@@ -780,7 +780,7 @@ class CAccount\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+        if (nType != SER_GETHASH)\n             READWRITE(nVersion);\n         READWRITE(vchPubKey);\n     }\n@@ -824,7 +824,7 @@ class CAccountingEntry\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, SerializeType nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+        if (nType != SER_GETHASH)\n             READWRITE(nVersion);\n         //! Note: strAccount is serialized as part of the key, not here.\n         READWRITE(nCreditDebit);"
      }
    ]
  }
]