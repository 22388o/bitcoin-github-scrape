[
  {
    "sha": "157f0bff4e7e759215ee2cea7343cd02ceead209",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTdmMGJmZjRlN2U3NTkyMTVlZTJjZWE3MzQzY2QwMmNlZWFkMjA5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-29T14:45:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-15T20:23:45Z"
      },
      "message": "rpc: Handle `getinfo` locally in bitcoin-cli w/ `-getinfo`\n\nThis adds the infrastructure `BaseRequestHandler` class that takes care\nof converting bitcoin-cli arguments into a JSON-RPC request object, and\nconverting the reply into a JSON object that can be shown as result.\n\nThis is subsequently used to handle the `-getinfo` option, which sends\na JSON-RPC batch request to the RPC server with\n`[\"getnetworkinfo\", \"getblockchaininfo\", \"getwalletinfo\"]`,\nand after reply combines the result into what looks like a `getinfo`\nresult.\n\nThere have been some requests for a client-side `getinfo` and this\nis my PoC of how to do it. If this is considered a good idea\nsome of the logic could be moved up to rpcclient.cpp and\nused in the GUI console as well.",
      "tree": {
        "sha": "03705b7826836865552182e8562a748fe03e111c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03705b7826836865552182e8562a748fe03e111c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/157f0bff4e7e759215ee2cea7343cd02ceead209",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/157f0bff4e7e759215ee2cea7343cd02ceead209",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/157f0bff4e7e759215ee2cea7343cd02ceead209",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/157f0bff4e7e759215ee2cea7343cd02ceead209/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2ab38bdd57a16e6c708dcc633d9162331c9d311",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2ab38bdd57a16e6c708dcc633d9162331c9d311",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2ab38bdd57a16e6c708dcc633d9162331c9d311"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 118,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c9254f34ba0abf9f30a417159a396dfbbeaf65e2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 100,
        "deletions": 12,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/157f0bff4e7e759215ee2cea7343cd02ceead209/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/157f0bff4e7e759215ee2cea7343cd02ceead209/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=157f0bff4e7e759215ee2cea7343cd02ceead209",
        "patch": "@@ -46,6 +46,7 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcclienttimeout=<n>\", strprintf(_(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\"), DEFAULT_HTTP_CLIENT_TIMEOUT));\n     strUsage += HelpMessageOpt(\"-stdin\", _(\"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases)\"));\n+    strUsage += HelpMessageOpt(\"-getinfo\", _(\"Get general information from the remote server\"));\n \n     return strUsage;\n }\n@@ -189,7 +190,93 @@ static void http_error_cb(enum evhttp_request_error err, void *ctx)\n }\n #endif\n \n-UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n+/** Class that handles the conversion from a command-line to a JSON-RPC request,\n+ * as well as converting back to a JSON object that can be shown as result.\n+ */\n+class BaseRequestHandler\n+{\n+public:\n+    virtual UniValue PrepareRequest(const std::string& strMethod, const std::vector<std::string>& args) = 0;\n+    virtual UniValue ProcessReply(const UniValue &batch_in) = 0;\n+};\n+\n+/** Process getinfo requests */\n+class GetinfoRequestHandler: public BaseRequestHandler\n+{\n+public:\n+    const int ID_NETWORKINFO = 0;\n+    const int ID_BLOCKCHAININFO = 1;\n+    const int ID_WALLETINFO = 2;\n+\n+    /** Create a simulated `getinfo` request. */\n+    UniValue PrepareRequest(const std::string& strMethod, const std::vector<std::string>& args) override\n+    {\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        result.push_back(JSONRPCRequestObj(\"getblockchaininfo\", NullUniValue, ID_BLOCKCHAININFO));\n+        result.push_back(JSONRPCRequestObj(\"getwalletinfo\", NullUniValue, ID_WALLETINFO));\n+        return result;\n+    }\n+\n+    /** Collect values from the batch and form a simulated `getinfo` reply. */\n+    UniValue ProcessReply(const UniValue &batch_in) override\n+    {\n+        UniValue result(UniValue::VOBJ);\n+        std::vector<UniValue> batch = JSONRPCProcessBatchReply(batch_in, 3);\n+        // Errors in getnetworkinfo() and getblockchaininfo() are fatal, pass them on\n+        // getwalletinfo() is allowed to fail in case there is no wallet.\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) {\n+            return batch[ID_NETWORKINFO];\n+        }\n+        if (!batch[ID_BLOCKCHAININFO][\"error\"].isNull()) {\n+            return batch[ID_BLOCKCHAININFO];\n+        }\n+        result.pushKV(\"version\", batch[ID_NETWORKINFO][\"result\"][\"version\"]);\n+        result.pushKV(\"protocolversion\", batch[ID_NETWORKINFO][\"result\"][\"protocolversion\"]);\n+        if (!batch[ID_WALLETINFO].isNull()) {\n+            result.pushKV(\"walletversion\", batch[ID_WALLETINFO][\"result\"][\"walletversion\"]);\n+            result.pushKV(\"balance\", batch[ID_WALLETINFO][\"result\"][\"balance\"]);\n+        }\n+        result.pushKV(\"blocks\", batch[ID_BLOCKCHAININFO][\"result\"][\"blocks\"]);\n+        result.pushKV(\"timeoffset\", batch[ID_NETWORKINFO][\"result\"][\"timeoffset\"]);\n+        result.pushKV(\"connections\", batch[ID_NETWORKINFO][\"result\"][\"connections\"]);\n+        result.pushKV(\"proxy\", batch[ID_NETWORKINFO][\"result\"][\"networks\"][0][\"proxy\"]);\n+        result.pushKV(\"difficulty\", batch[ID_BLOCKCHAININFO][\"result\"][\"difficulty\"]);\n+        result.pushKV(\"testnet\", UniValue(batch[ID_BLOCKCHAININFO][\"result\"][\"chain\"].get_str() == \"test\"));\n+        if (!batch[ID_WALLETINFO].isNull()) {\n+            result.pushKV(\"keypoololdest\", batch[ID_WALLETINFO][\"result\"][\"keypoololdest\"]);\n+            result.pushKV(\"keypoolsize\", batch[ID_WALLETINFO][\"result\"][\"keypoolsize\"]);\n+            if (!batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"].isNull())\n+                result.pushKV(\"unlocked_until\", batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"]);\n+            result.pushKV(\"paytxfee\", batch[ID_WALLETINFO][\"result\"][\"paytxfee\"]);\n+        }\n+        result.pushKV(\"relayfee\", batch[ID_NETWORKINFO][\"result\"][\"relayfee\"]);\n+        result.pushKV(\"errors\", batch[ID_NETWORKINFO][\"result\"][\"warnings\"]);\n+        return JSONRPCReplyObj(result, NullUniValue, 1);\n+    }\n+};\n+\n+/** Process default single requests */\n+class DefaultRequestHandler: public BaseRequestHandler {\n+public:\n+    UniValue PrepareRequest(const std::string& strMethod, const std::vector<std::string>& args) override\n+    {\n+        UniValue params;\n+        if(GetBoolArg(\"-named\", DEFAULT_NAMED)) {\n+            params = RPCConvertNamedValues(strMethod, args);\n+        } else {\n+            params = RPCConvertValues(strMethod, args);\n+        }\n+        return JSONRPCRequestObj(strMethod, params, 1);\n+    }\n+\n+    UniValue ProcessReply(const UniValue &reply) override\n+    {\n+        return reply.get_obj();\n+    }\n+};\n+\n+UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args)\n {\n     std::string host = GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT);\n     int port = GetArg(\"-rpcport\", BaseParams().RPCPort());\n@@ -230,8 +317,8 @@ UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n     evhttp_add_header(output_headers, \"Authorization\", (std::string(\"Basic \") + EncodeBase64(strRPCUserColonPass)).c_str());\n \n     // Attach request data\n-    std::string strRequest = JSONRPCRequestObj(strMethod, params, 1).write() + \"\\n\";\n-    struct evbuffer* output_buffer = evhttp_request_get_output_buffer(req.get());\n+    std::string strRequest = rh->PrepareRequest(strMethod, args).write() + \"\\n\";\n+    struct evbuffer * output_buffer = evhttp_request_get_output_buffer(req.get());\n     assert(output_buffer);\n     evbuffer_add(output_buffer, strRequest.data(), strRequest.size());\n \n@@ -256,7 +343,7 @@ UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n     UniValue valReply(UniValue::VSTR);\n     if (!valReply.read(response.body))\n         throw std::runtime_error(\"couldn't parse reply from server\");\n-    const UniValue& reply = valReply.get_obj();\n+    const UniValue reply = rh->ProcessReply(valReply);\n     if (reply.empty())\n         throw std::runtime_error(\"expected reply to have result, error and id properties\");\n \n@@ -280,23 +367,24 @@ int CommandLineRPC(int argc, char *argv[])\n             while (std::getline(std::cin,line))\n                 args.push_back(line);\n         }\n+        std::unique_ptr<BaseRequestHandler> rh;\n+        if (GetBoolArg(\"-getinfo\", false)) {\n+            rh.reset(new GetinfoRequestHandler());\n+            args.clear();\n+            args.push_back(\"getinfo\");\n+        } else {\n+            rh.reset(new DefaultRequestHandler());\n+        }\n         if (args.size() < 1)\n             throw std::runtime_error(\"too few parameters (need at least command)\");\n         std::string strMethod = args[0];\n         args.erase(args.begin()); // Remove trailing method name from arguments vector\n \n-        UniValue params;\n-        if(GetBoolArg(\"-named\", DEFAULT_NAMED)) {\n-            params = RPCConvertNamedValues(strMethod, args);\n-        } else {\n-            params = RPCConvertValues(strMethod, args);\n-        }\n-\n         // Execute and handle connection failures with -rpcwait\n         const bool fWait = GetBoolArg(\"-rpcwait\", false);\n         do {\n             try {\n-                const UniValue reply = CallRPC(strMethod, params);\n+                const UniValue reply = CallRPC(rh.get(), strMethod, args);\n \n                 // Parse reply\n                 const UniValue& result = find_value(reply, \"result\");"
      },
      {
        "sha": "6ce067ec3abd3dbee051167f4250c329194f5f94",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/157f0bff4e7e759215ee2cea7343cd02ceead209/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/157f0bff4e7e759215ee2cea7343cd02ceead209/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=157f0bff4e7e759215ee2cea7343cd02ceead209",
        "patch": "@@ -124,3 +124,19 @@ void DeleteAuthCookie()\n     }\n }\n \n+std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num)\n+{\n+    if (!in.isArray())\n+        throw std::runtime_error(\"Batch must be an array\");\n+    std::vector<UniValue> batch(num);\n+    for (size_t i=0; i<in.size(); ++i) {\n+        const UniValue &rec = in[i];\n+        if (!rec.isObject())\n+            throw std::runtime_error(\"Batch member must be object\");\n+        size_t id = rec[\"id\"].get_int();\n+        if (id >= num)\n+            throw std::runtime_error(\"Batch member id larger than size\");\n+        batch[id] = rec;\n+    }\n+    return batch;\n+}"
      },
      {
        "sha": "99b55ad67a41bff17b3d9ddfdde3336544b5a63a",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/157f0bff4e7e759215ee2cea7343cd02ceead209/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/157f0bff4e7e759215ee2cea7343cd02ceead209/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=157f0bff4e7e759215ee2cea7343cd02ceead209",
        "patch": "@@ -97,5 +97,7 @@ bool GenerateAuthCookie(std::string *cookie_out);\n bool GetAuthCookie(std::string *cookie_out);\n /** Delete RPC authentication cookie from disk */\n void DeleteAuthCookie();\n+/** Parse JSON-RPC batch reply into a vector */\n+std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num);\n \n #endif // BITCOIN_RPCPROTOCOL_H"
      }
    ]
  }
]