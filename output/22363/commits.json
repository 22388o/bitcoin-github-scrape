[
  {
    "sha": "61b6a017a9f99ef072b2d1980dd547eb20093352",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWI2YTAxN2E5Zjk5ZWYwNzJiMmQxOTgwZGQ1NDdlYjIwMDkzMzUy",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-27T18:14:01Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-28T18:14:01Z"
      },
      "message": "test: wallet util: fix multisig P2SH-P2WSH script creation",
      "tree": {
        "sha": "e4d63641915b91356371f192a90af0925964e653",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4d63641915b91356371f192a90af0925964e653"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61b6a017a9f99ef072b2d1980dd547eb20093352",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61b6a017a9f99ef072b2d1980dd547eb20093352",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61b6a017a9f99ef072b2d1980dd547eb20093352",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61b6a017a9f99ef072b2d1980dd547eb20093352/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c3751a0c940228c46461c4191f1a57153cb9037",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c3751a0c940228c46461c4191f1a57153cb9037",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c3751a0c940228c46461c4191f1a57153cb9037"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d7ab720260d0565ca4ca32191e5414cea2341ac5",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61b6a017a9f99ef072b2d1980dd547eb20093352/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61b6a017a9f99ef072b2d1980dd547eb20093352/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=61b6a017a9f99ef072b2d1980dd547eb20093352",
        "patch": "@@ -106,7 +106,7 @@ def get_multisig(node):\n                     redeem_script=script_code.hex(),\n                     p2wsh_script=witness_script.hex(),\n                     p2wsh_addr=script_to_p2wsh(script_code),\n-                    p2sh_p2wsh_script=CScript([OP_HASH160, witness_script, OP_EQUAL]).hex(),\n+                    p2sh_p2wsh_script=CScript([OP_HASH160, hash160(witness_script), OP_EQUAL]).hex(),\n                     p2sh_p2wsh_addr=script_to_p2sh_p2wsh(script_code))\n \n def test_address(node, address, **kwargs):"
      }
    ]
  },
  {
    "sha": "b57b633b942da162045b1fe7743a8abdfeaf60e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTdiNjMzYjk0MmRhMTYyMDQ1YjFmZTc3NDNhOGFiZGZlYWY2MGUy",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-27T21:03:40Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-28T18:14:07Z"
      },
      "message": "test: use script_util helpers for creating P2PKH scripts",
      "tree": {
        "sha": "bddde7c25becb24afe070ef0a80e6d0c58a4ac26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bddde7c25becb24afe070ef0a80e6d0c58a4ac26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b57b633b942da162045b1fe7743a8abdfeaf60e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b57b633b942da162045b1fe7743a8abdfeaf60e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b57b633b942da162045b1fe7743a8abdfeaf60e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b57b633b942da162045b1fe7743a8abdfeaf60e2/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61b6a017a9f99ef072b2d1980dd547eb20093352",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61b6a017a9f99ef072b2d1980dd547eb20093352",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61b6a017a9f99ef072b2d1980dd547eb20093352"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 21,
      "deletions": 20
    },
    "files": [
      {
        "sha": "e3ec53c3d9f2bb45c2cba378ab23c59d6389eb21",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=b57b633b942da162045b1fe7743a8abdfeaf60e2",
        "patch": "@@ -34,13 +34,14 @@\n     OP_CHECKMULTISIG,\n     OP_CHECKSIG,\n     OP_DROP,\n-    OP_DUP,\n     OP_EQUAL,\n-    OP_EQUALVERIFY,\n     OP_HASH160,\n     OP_TRUE,\n     hash160,\n )\n+from test_framework.script_util import (\n+    key_to_p2pkh_script,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -427,7 +428,7 @@ def run_test(self):\n         op0 = CScript([OP_0])\n         # 2N7MGY19ti4KDMSzRfPAssP6Pxyuxoi6jLe is the P2SH(P2PKH) version of mjoE3sSrb8ByYEvgnC3Aox86u1CHnfJA4V\n         unsolvable_address_key = hex_str_to_bytes(\"02341AEC7587A51CDE5279E0630A531AEA2615A9F80B17E8D9376327BAEAA59E3D\")\n-        unsolvablep2pkh = CScript([OP_DUP, OP_HASH160, hash160(unsolvable_address_key), OP_EQUALVERIFY, OP_CHECKSIG])\n+        unsolvablep2pkh = key_to_p2pkh_script(unsolvable_address_key)\n         unsolvablep2wshp2pkh = CScript([OP_0, sha256(unsolvablep2pkh)])\n         p2shop0 = CScript([OP_HASH160, hash160(op0), OP_EQUAL])\n         p2wshop1 = CScript([OP_0, sha256(op1)])\n@@ -454,7 +455,7 @@ def run_test(self):\n             else:\n                 pubkey = hex_str_to_bytes(v['pubkey'])\n                 p2pk = CScript([pubkey, OP_CHECKSIG])\n-                p2pkh = CScript([OP_DUP, OP_HASH160, hash160(pubkey), OP_EQUALVERIFY, OP_CHECKSIG])\n+                p2pkh = key_to_p2pkh_script(pubkey)\n                 importlist.append(p2pk.hex())\n                 importlist.append(p2pkh.hex())\n                 importlist.append(CScript([OP_0, hash160(pubkey)]).hex())"
      },
      {
        "sha": "f75234a5c723b37924d2790e6e12371273545d9f",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=b57b633b942da162045b1fe7743a8abdfeaf60e2",
        "patch": "@@ -76,6 +76,9 @@\n     is_op_success,\n     taproot_construct,\n )\n+from test_framework.script_util import (\n+    keyhash_to_p2pkh_script,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_raises_rpc_error, assert_equal\n from test_framework.key import generate_privkey, compute_xonly_pubkey, sign_schnorr, tweak_add_privkey, ECKey\n@@ -459,7 +462,7 @@ def make_spender(comment, *, tap=None, witv0=False, script=None, pkh=None, p2sh=\n             assert script is None\n             pubkeyhash = hash160(pkh)\n             spk = CScript([OP_0, pubkeyhash])\n-            conf[\"scriptcode\"] = CScript([OP_DUP, OP_HASH160, pubkeyhash, OP_EQUALVERIFY, OP_CHECKSIG])\n+            conf[\"scriptcode\"] = keyhash_to_p2pkh_script(pubkeyhash)\n             conf[\"script_witv0\"] = None\n             conf[\"inputs\"] = [getter(\"sign\"), pkh]\n         elif script is not None:\n@@ -475,7 +478,7 @@ def make_spender(comment, *, tap=None, witv0=False, script=None, pkh=None, p2sh=\n             # P2PKH\n             assert script is None\n             pubkeyhash = hash160(pkh)\n-            spk = CScript([OP_DUP, OP_HASH160, pubkeyhash, OP_EQUALVERIFY, OP_CHECKSIG])\n+            spk = keyhash_to_p2pkh_script(pubkeyhash)\n             conf[\"scriptcode\"] = spk\n             conf[\"inputs\"] = [getter(\"sign\"), pkh]\n         elif script is not None:"
      },
      {
        "sha": "5b1a884059079b93babbf1f5532c974b56f73a20",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=b57b633b942da162045b1fe7743a8abdfeaf60e2",
        "patch": "@@ -60,11 +60,9 @@\n     OP_CHECKMULTISIG,\n     OP_CHECKSIG,\n     OP_DROP,\n-    OP_DUP,\n     OP_ELSE,\n     OP_ENDIF,\n     OP_EQUAL,\n-    OP_EQUALVERIFY,\n     OP_HASH160,\n     OP_IF,\n     OP_RETURN,\n@@ -77,6 +75,9 @@\n     LegacySignatureHash,\n     hash160,\n )\n+from test_framework.script_util import (\n+    keyhash_to_p2pkh_script,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -100,10 +101,6 @@ def __init__(self, sha256, n, value):\n         self.n = n\n         self.nValue = value\n \n-def get_p2pkh_script(pubkeyhash):\n-    \"\"\"Get the script associated with a P2PKH.\"\"\"\n-    return CScript([CScriptOp(OP_DUP), CScriptOp(OP_HASH160), pubkeyhash, CScriptOp(OP_EQUALVERIFY), CScriptOp(OP_CHECKSIG)])\n-\n def sign_p2pk_witness_input(script, tx_to, in_idx, hashtype, value, key):\n     \"\"\"Add signature for a P2PK witness program.\"\"\"\n     tx_hash = SegwitV0SignatureHash(script, tx_to, in_idx, hashtype, value)\n@@ -1550,7 +1547,7 @@ def test_uncompressed_pubkey(self):\n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue - 1000, script_wsh))\n-        script = get_p2pkh_script(pubkeyhash)\n+        script = keyhash_to_p2pkh_script(pubkeyhash)\n         sig_hash = SegwitV0SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n         signature = key.sign_ecdsa(sig_hash) + b'\\x01'  # 0x1 is SIGHASH_ALL\n         tx2.wit.vtxinwit.append(CTxInWitness())\n@@ -1587,7 +1584,7 @@ def test_uncompressed_pubkey(self):\n         # Test 3: P2SH(P2WSH)\n         # Try to spend the P2SH output created in the last test.\n         # Send it to a P2PKH output, which we'll use in the next test.\n-        script_pubkey = get_p2pkh_script(pubkeyhash)\n+        script_pubkey = keyhash_to_p2pkh_script(pubkeyhash)\n         tx4 = CTransaction()\n         tx4.vin.append(CTxIn(COutPoint(tx3.sha256, 0), script_sig))\n         tx4.vout.append(CTxOut(tx3.vout[0].nValue - 1000, script_pubkey))\n@@ -1754,7 +1751,7 @@ def test_signature_version_1(self):\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n \n-        script = get_p2pkh_script(pubkeyhash)\n+        script = keyhash_to_p2pkh_script(pubkeyhash)\n         sig_hash = SegwitV0SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n         signature = key.sign_ecdsa(sig_hash) + b'\\x01'  # 0x1 is SIGHASH_ALL\n "
      },
      {
        "sha": "74a3e8c89c614bb8eeac230babc31e0efe53ef11",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b57b633b942da162045b1fe7743a8abdfeaf60e2/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=b57b633b942da162045b1fe7743a8abdfeaf60e2",
        "patch": "@@ -21,14 +21,14 @@\n     OP_2,\n     OP_3,\n     OP_CHECKMULTISIG,\n-    OP_CHECKSIG,\n-    OP_DUP,\n     OP_EQUAL,\n-    OP_EQUALVERIFY,\n     OP_HASH160,\n     hash160,\n     sha256,\n )\n+from test_framework.script_util import (\n+    key_to_p2pkh_script,\n+)\n from test_framework.util import hex_str_to_bytes\n \n Key = namedtuple('Key', ['privkey',\n@@ -60,7 +60,7 @@ def get_key(node):\n     pkh = hash160(hex_str_to_bytes(pubkey))\n     return Key(privkey=node.dumpprivkey(addr),\n                pubkey=pubkey,\n-               p2pkh_script=CScript([OP_DUP, OP_HASH160, pkh, OP_EQUALVERIFY, OP_CHECKSIG]).hex(),\n+               p2pkh_script=key_to_p2pkh_script(pubkey).hex(),\n                p2pkh_addr=key_to_p2pkh(pubkey),\n                p2wpkh_script=CScript([OP_0, pkh]).hex(),\n                p2wpkh_addr=key_to_p2wpkh(pubkey),\n@@ -79,7 +79,7 @@ def get_generate_key():\n     pkh = hash160(hex_str_to_bytes(pubkey))\n     return Key(privkey=privkey,\n                pubkey=pubkey,\n-               p2pkh_script=CScript([OP_DUP, OP_HASH160, pkh, OP_EQUALVERIFY, OP_CHECKSIG]).hex(),\n+               p2pkh_script=key_to_p2pkh_script(pubkey).hex(),\n                p2pkh_addr=key_to_p2pkh(pubkey),\n                p2wpkh_script=CScript([OP_0, pkh]).hex(),\n                p2wpkh_addr=key_to_p2wpkh(pubkey),"
      }
    ]
  },
  {
    "sha": "285a65ccfde2e811cfe01e916b998c02ee534a97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODVhNjVjY2ZkZTJlODExY2ZlMDFlOTE2Yjk5OGMwMmVlNTM0YTk3",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-27T21:52:38Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-07-05T18:40:47Z"
      },
      "message": "test: use script_util helpers for creating P2SH scripts",
      "tree": {
        "sha": "969a94f117d2a7ef637d2a06b4ef97c940d9b544",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/969a94f117d2a7ef637d2a06b4ef97c940d9b544"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/285a65ccfde2e811cfe01e916b998c02ee534a97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/285a65ccfde2e811cfe01e916b998c02ee534a97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/285a65ccfde2e811cfe01e916b998c02ee534a97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/285a65ccfde2e811cfe01e916b998c02ee534a97/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b57b633b942da162045b1fe7743a8abdfeaf60e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b57b633b942da162045b1fe7743a8abdfeaf60e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b57b633b942da162045b1fe7743a8abdfeaf60e2"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 57,
      "deletions": 64
    },
    "files": [
      {
        "sha": "c5dc96f9fb6e7d2b9bd8c2bbbe35ed4d8ed63140",
        "filename": "test/functional/data/invalid_txs.py",
        "status": "modified",
        "additions": 20,
        "deletions": 15,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/data/invalid_txs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/data/invalid_txs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/invalid_txs.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -29,27 +29,32 @@\n     CTxOut,\n     MAX_MONEY,\n )\n-from test_framework import script as sc\n from test_framework.blocktools import create_tx_with_script, MAX_BLOCK_SIGOPS\n from test_framework.script import (\n     CScript,\n+    OP_0,\n+    OP_2DIV,\n+    OP_2MUL,\n+    OP_AND,\n     OP_CAT,\n-    OP_SUBSTR,\n-    OP_LEFT,\n-    OP_RIGHT,\n+    OP_CHECKSIG,\n+    OP_DIV,\n     OP_INVERT,\n-    OP_AND,\n+    OP_LEFT,\n+    OP_LSHIFT,\n+    OP_MOD,\n+    OP_MUL,\n     OP_OR,\n+    OP_RIGHT,\n+    OP_RSHIFT,\n+    OP_SUBSTR,\n+    OP_TRUE,\n     OP_XOR,\n-    OP_2MUL,\n-    OP_2DIV,\n-    OP_MUL,\n-    OP_DIV,\n-    OP_MOD,\n-    OP_LSHIFT,\n-    OP_RSHIFT\n )\n-basic_p2sh = sc.CScript([sc.OP_HASH160, sc.hash160(sc.CScript([sc.OP_0])), sc.OP_EQUAL])\n+from test_framework.script_util import (\n+    script_to_p2sh_script,\n+)\n+basic_p2sh = script_to_p2sh_script(CScript([OP_0]))\n \n \n class BadTxTemplate:\n@@ -116,7 +121,7 @@ class SizeTooSmall(BadTxTemplate):\n     def get_tx(self):\n         tx = CTransaction()\n         tx.vin.append(self.valid_txin)\n-        tx.vout.append(CTxOut(0, sc.CScript([sc.OP_TRUE])))\n+        tx.vout.append(CTxOut(0, CScript([OP_TRUE])))\n         tx.calc_sha256()\n         return tx\n \n@@ -217,7 +222,7 @@ class TooManySigops(BadTxTemplate):\n     expect_disconnect = False\n \n     def get_tx(self):\n-        lotsa_checksigs = sc.CScript([sc.OP_CHECKSIG] * (MAX_BLOCK_SIGOPS))\n+        lotsa_checksigs = CScript([OP_CHECKSIG] * (MAX_BLOCK_SIGOPS))\n         return create_tx_with_script(\n             self.spend_tx, 0,\n             script_pub_key=lotsa_checksigs,"
      },
      {
        "sha": "c11eabc91730f47e33585c5537214269574bd42e",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -37,17 +37,17 @@\n     OP_CHECKSIGVERIFY,\n     OP_ELSE,\n     OP_ENDIF,\n-    OP_EQUAL,\n     OP_DROP,\n     OP_FALSE,\n-    OP_HASH160,\n     OP_IF,\n     OP_INVALIDOPCODE,\n     OP_RETURN,\n     OP_TRUE,\n     SIGHASH_ALL,\n     LegacySignatureHash,\n-    hash160,\n+)\n+from test_framework.script_util import (\n+    script_to_p2sh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -469,8 +469,7 @@ def run_test(self):\n \n         # Build the redeem script, hash it, use hash to create the p2sh script\n         redeem_script = CScript([self.coinbase_pubkey] + [OP_2DUP, OP_CHECKSIGVERIFY] * 5 + [OP_CHECKSIG])\n-        redeem_script_hash = hash160(redeem_script)\n-        p2sh_script = CScript([OP_HASH160, redeem_script_hash, OP_EQUAL])\n+        p2sh_script = script_to_p2sh_script(redeem_script)\n \n         # Create a transaction that spends one satoshi to the p2sh_script, the rest to OP_TRUE\n         # This must be signed because it is spending a coinbase"
      },
      {
        "sha": "5322b024141b1dde1e04be449a2c459406446960",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -18,10 +18,10 @@\n     OP_1,\n     OP_2,\n     OP_DROP,\n-    OP_EQUAL,\n-    OP_HASH160,\n     OP_TRUE,\n-    hash160,\n+)\n+from test_framework.script_util import (\n+    script_to_p2sh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -37,8 +37,8 @@\n # time signing.\n REDEEM_SCRIPT_1 = CScript([OP_1, OP_DROP])\n REDEEM_SCRIPT_2 = CScript([OP_2, OP_DROP])\n-P2SH_1 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_1), OP_EQUAL])\n-P2SH_2 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_2), OP_EQUAL])\n+P2SH_1 = script_to_p2sh_script(REDEEM_SCRIPT_1)\n+P2SH_2 = script_to_p2sh_script(REDEEM_SCRIPT_2)\n \n # Associated ScriptSig's to spend satisfy P2SH_1 and P2SH_2\n SCRIPT_SIG = [CScript([OP_TRUE, REDEEM_SCRIPT_1]), CScript([OP_TRUE, REDEEM_SCRIPT_2])]"
      },
      {
        "sha": "dadccbd73ede16d2b828b9523ac7b9153afcf922",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -34,13 +34,12 @@\n     OP_CHECKMULTISIG,\n     OP_CHECKSIG,\n     OP_DROP,\n-    OP_EQUAL,\n-    OP_HASH160,\n     OP_TRUE,\n     hash160,\n )\n from test_framework.script_util import (\n     key_to_p2pkh_script,\n+    script_to_p2sh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -354,7 +353,7 @@ def run_test(self):\n \n         multisig_without_privkey_address = self.nodes[0].addmultisigaddress(2, [pubkeys[3], pubkeys[4]])['address']\n         script = CScript([OP_2, hex_str_to_bytes(pubkeys[3]), hex_str_to_bytes(pubkeys[4]), OP_2, OP_CHECKMULTISIG])\n-        solvable_after_importaddress.append(CScript([OP_HASH160, hash160(script), OP_EQUAL]))\n+        solvable_after_importaddress.append(script_to_p2sh_script(script))\n \n         for i in compressed_spendable_address:\n             v = self.nodes[0].getaddressinfo(i)\n@@ -430,7 +429,7 @@ def run_test(self):\n         unsolvable_address_key = hex_str_to_bytes(\"02341AEC7587A51CDE5279E0630A531AEA2615A9F80B17E8D9376327BAEAA59E3D\")\n         unsolvablep2pkh = key_to_p2pkh_script(unsolvable_address_key)\n         unsolvablep2wshp2pkh = CScript([OP_0, sha256(unsolvablep2pkh)])\n-        p2shop0 = CScript([OP_HASH160, hash160(op0), OP_EQUAL])\n+        p2shop0 = script_to_p2sh_script(op0)\n         p2wshop1 = CScript([OP_0, sha256(op1)])\n         unsolvable_after_importaddress.append(unsolvablep2pkh)\n         unsolvable_after_importaddress.append(unsolvablep2wshp2pkh)\n@@ -616,21 +615,21 @@ def p2sh_address_to_script(self, v):\n         bare = CScript(hex_str_to_bytes(v['hex']))\n         p2sh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n         p2wsh = CScript([OP_0, sha256(bare)])\n-        p2sh_p2wsh = CScript([OP_HASH160, hash160(p2wsh), OP_EQUAL])\n+        p2sh_p2wsh = script_to_p2sh_script(p2wsh)\n         return([bare, p2sh, p2wsh, p2sh_p2wsh])\n \n     def p2pkh_address_to_script(self, v):\n         pubkey = hex_str_to_bytes(v['pubkey'])\n         p2wpkh = CScript([OP_0, hash160(pubkey)])\n-        p2sh_p2wpkh = CScript([OP_HASH160, hash160(p2wpkh), OP_EQUAL])\n+        p2sh_p2wpkh = script_to_p2sh_script(p2wpkh)\n         p2pk = CScript([pubkey, OP_CHECKSIG])\n         p2pkh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n-        p2sh_p2pk = CScript([OP_HASH160, hash160(p2pk), OP_EQUAL])\n-        p2sh_p2pkh = CScript([OP_HASH160, hash160(p2pkh), OP_EQUAL])\n+        p2sh_p2pk = script_to_p2sh_script(p2pk)\n+        p2sh_p2pkh = script_to_p2sh_script(p2pkh)\n         p2wsh_p2pk = CScript([OP_0, sha256(p2pk)])\n         p2wsh_p2pkh = CScript([OP_0, sha256(p2pkh)])\n-        p2sh_p2wsh_p2pk = CScript([OP_HASH160, hash160(p2wsh_p2pk), OP_EQUAL])\n-        p2sh_p2wsh_p2pkh = CScript([OP_HASH160, hash160(p2wsh_p2pkh), OP_EQUAL])\n+        p2sh_p2wsh_p2pk = script_to_p2sh_script(p2wsh_p2pk)\n+        p2sh_p2wsh_p2pkh = script_to_p2sh_script(p2wsh_p2pkh)\n         return [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh]\n \n     def create_and_mine_tx_from_txids(self, txids, success=True):"
      },
      {
        "sha": "fefa369ffec6f519315d3657c88c3fd2042c9ca4",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -57,7 +57,6 @@\n     OP_ENDIF,\n     OP_EQUAL,\n     OP_EQUALVERIFY,\n-    OP_HASH160,\n     OP_IF,\n     OP_NOP,\n     OP_NOT,\n@@ -78,6 +77,7 @@\n )\n from test_framework.script_util import (\n     keyhash_to_p2pkh_script,\n+    script_to_p2sh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_raises_rpc_error, assert_equal\n@@ -499,7 +499,7 @@ def make_spender(comment, *, tap=None, witv0=False, script=None, pkh=None, p2sh=\n     if p2sh:\n         # P2SH wrapper can be combined with anything else\n         conf[\"script_p2sh\"] = spk\n-        spk = CScript([OP_HASH160, hash160(spk), OP_EQUAL])\n+        spk = script_to_p2sh_script(spk)\n \n     conf = {**conf, **kwargs}\n "
      },
      {
        "sha": "43e6a157a4db27523867d626b0c6319d3733167d",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -19,16 +19,17 @@\n     tx_from_hex,\n )\n from test_framework.script import (\n-    hash160,\n     CScript,\n     OP_0,\n     OP_2,\n     OP_3,\n     OP_CHECKMULTISIG,\n-    OP_EQUAL,\n     OP_HASH160,\n     OP_RETURN,\n )\n+from test_framework.script_util import (\n+    script_to_p2sh_script,\n+)\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n@@ -291,7 +292,7 @@ def run_test(self):\n             rawtxs=[tx.serialize().hex()],\n         )\n         tx = tx_from_hex(raw_tx_reference)\n-        output_p2sh_burn = CTxOut(nValue=540, scriptPubKey=CScript([OP_HASH160, hash160(b'burn'), OP_EQUAL]))\n+        output_p2sh_burn = CTxOut(nValue=540, scriptPubKey=script_to_p2sh_script(b'burn'))\n         num_scripts = 100000 // len(output_p2sh_burn.serialize())  # Use enough outputs to make the tx too large for our policy\n         tx.vout = [output_p2sh_burn] * num_scripts\n         self.check_mempool_result("
      },
      {
        "sha": "6a1cb8c1b410a38bf0ba3645ec801e3250a3e5fd",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 8,
        "deletions": 18,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -62,8 +62,6 @@\n     OP_DROP,\n     OP_ELSE,\n     OP_ENDIF,\n-    OP_EQUAL,\n-    OP_HASH160,\n     OP_IF,\n     OP_RETURN,\n     OP_TRUE,\n@@ -77,6 +75,7 @@\n )\n from test_framework.script_util import (\n     keyhash_to_p2pkh_script,\n+    script_to_p2sh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -491,9 +490,7 @@ def test_v0_outputs_arent_spendable(self):\n         witness_program = CScript([OP_TRUE])\n         witness_hash = sha256(witness_program)\n         script_pubkey = CScript([OP_0, witness_hash])\n-\n-        p2sh_pubkey = hash160(script_pubkey)\n-        p2sh_script_pubkey = CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])\n+        p2sh_script_pubkey = script_to_p2sh_script(script_pubkey)\n \n         value = self.utxo[0].nValue // 3\n \n@@ -630,9 +627,7 @@ def test_standardness_v0(self):\n         witness_program = CScript([OP_TRUE])\n         witness_hash = sha256(witness_program)\n         script_pubkey = CScript([OP_0, witness_hash])\n-\n-        p2sh_pubkey = hash160(witness_program)\n-        p2sh_script_pubkey = CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])\n+        p2sh_script_pubkey = script_to_p2sh_script(witness_program)\n \n         # First prepare a p2sh output (so that spending it will pass standardness)\n         p2sh_tx = CTransaction()\n@@ -739,8 +734,7 @@ def test_p2sh_witness(self):\n         witness_program = CScript([OP_DROP, OP_TRUE])\n         witness_hash = sha256(witness_program)\n         p2wsh_pubkey = CScript([OP_0, witness_hash])\n-        p2sh_witness_hash = hash160(p2wsh_pubkey)\n-        script_pubkey = CScript([OP_HASH160, p2sh_witness_hash, OP_EQUAL])\n+        script_pubkey = script_to_p2sh_script(p2wsh_pubkey)\n         script_sig = CScript([p2wsh_pubkey])  # a push of the redeem script\n \n         # Fund the P2SH output\n@@ -1328,9 +1322,8 @@ def test_tx_relay_after_segwit_activation(self):\n \n         # Add too-large for IsStandard witness and check that it does not enter reject filter\n         p2sh_program = CScript([OP_TRUE])\n-        p2sh_pubkey = hash160(p2sh_program)\n         witness_program2 = CScript([b'a' * 400000])\n-        tx3.vout.append(CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])))\n+        tx3.vout.append(CTxOut(tx2.vout[0].nValue - 1000, script_to_p2sh_script(p2sh_program)))\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program2]\n         tx3.rehash()\n \n@@ -1564,8 +1557,7 @@ def test_uncompressed_pubkey(self):\n         # Test 2: P2WSH\n         # Try to spend the P2WSH output created in last test.\n         # Send it to a P2SH(P2WSH) output, which we'll use in the next test.\n-        p2sh_witness_hash = hash160(script_wsh)\n-        script_p2sh = CScript([OP_HASH160, p2sh_witness_hash, OP_EQUAL])\n+        script_p2sh = script_to_p2sh_script(script_wsh)\n         script_sig = CScript([script_wsh])\n \n         tx3 = CTransaction()\n@@ -1803,8 +1795,7 @@ def test_non_standard_witness_blinding(self):\n         # rules (an anyone-can-spend OP_TRUE would be rejected, if not wrapped\n         # in P2SH).\n         p2sh_program = CScript([OP_TRUE])\n-        p2sh_pubkey = hash160(p2sh_program)\n-        script_pubkey = CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])\n+        script_pubkey = script_to_p2sh_script(p2sh_program)\n \n         # Now check that unnecessary witnesses can't be used to blind a node\n         # to a transaction, eg by violating standardness checks.\n@@ -1870,10 +1861,9 @@ def test_non_standard_witness(self):\n         outputvalue = (self.utxo[0].nValue - 1000) // (len(scripts) * 2)\n         for i in scripts:\n             p2wsh = CScript([OP_0, sha256(i)])\n-            p2sh = hash160(p2wsh)\n             p2wsh_scripts.append(p2wsh)\n             tx.vout.append(CTxOut(outputvalue, p2wsh))\n-            tx.vout.append(CTxOut(outputvalue, CScript([OP_HASH160, p2sh, OP_EQUAL])))\n+            tx.vout.append(CTxOut(outputvalue, script_to_p2sh_script(p2wsh)))\n         tx.rehash()\n         txid = tx.sha256\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)"
      },
      {
        "sha": "76f1a1edfcafd429fece816622d85f5a097adad4",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285a65ccfde2e811cfe01e916b998c02ee534a97/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=285a65ccfde2e811cfe01e916b998c02ee534a97",
        "patch": "@@ -21,13 +21,12 @@\n     OP_2,\n     OP_3,\n     OP_CHECKMULTISIG,\n-    OP_EQUAL,\n-    OP_HASH160,\n     hash160,\n     sha256,\n )\n from test_framework.script_util import (\n     key_to_p2pkh_script,\n+    script_to_p2sh_script,\n )\n from test_framework.util import hex_str_to_bytes\n \n@@ -64,7 +63,7 @@ def get_key(node):\n                p2pkh_addr=key_to_p2pkh(pubkey),\n                p2wpkh_script=CScript([OP_0, pkh]).hex(),\n                p2wpkh_addr=key_to_p2wpkh(pubkey),\n-               p2sh_p2wpkh_script=CScript([OP_HASH160, hash160(CScript([OP_0, pkh])), OP_EQUAL]).hex(),\n+               p2sh_p2wpkh_script=script_to_p2sh_script(CScript([OP_0, pkh])).hex(),\n                p2sh_p2wpkh_redeem_script=CScript([OP_0, pkh]).hex(),\n                p2sh_p2wpkh_addr=key_to_p2sh_p2wpkh(pubkey))\n \n@@ -83,7 +82,7 @@ def get_generate_key():\n                p2pkh_addr=key_to_p2pkh(pubkey),\n                p2wpkh_script=CScript([OP_0, pkh]).hex(),\n                p2wpkh_addr=key_to_p2wpkh(pubkey),\n-               p2sh_p2wpkh_script=CScript([OP_HASH160, hash160(CScript([OP_0, pkh])), OP_EQUAL]).hex(),\n+               p2sh_p2wpkh_script=script_to_p2sh_script(CScript([OP_0, pkh])).hex(),\n                p2sh_p2wpkh_redeem_script=CScript([OP_0, pkh]).hex(),\n                p2sh_p2wpkh_addr=key_to_p2sh_p2wpkh(pubkey))\n \n@@ -101,12 +100,12 @@ def get_multisig(node):\n     witness_script = CScript([OP_0, sha256(script_code)])\n     return Multisig(privkeys=[node.dumpprivkey(addr) for addr in addrs],\n                     pubkeys=pubkeys,\n-                    p2sh_script=CScript([OP_HASH160, hash160(script_code), OP_EQUAL]).hex(),\n+                    p2sh_script=script_to_p2sh_script(script_code).hex(),\n                     p2sh_addr=script_to_p2sh(script_code),\n                     redeem_script=script_code.hex(),\n                     p2wsh_script=witness_script.hex(),\n                     p2wsh_addr=script_to_p2wsh(script_code),\n-                    p2sh_p2wsh_script=CScript([OP_HASH160, hash160(witness_script), OP_EQUAL]).hex(),\n+                    p2sh_p2wsh_script=script_to_p2sh_script(witness_script).hex(),\n                     p2sh_p2wsh_addr=script_to_p2sh_p2wsh(script_code))\n \n def test_address(node, address, **kwargs):"
      }
    ]
  },
  {
    "sha": "905d672b743edf31531d095ffe800449eaffec69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDVkNjcyYjc0M2VkZjMxNTMxZDA5NWZmZTgwMDQ0OWVhZmZlYzY5",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-28T18:45:04Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-07-05T18:40:52Z"
      },
      "message": "test: use script_util helpers for creating P2W{PKH,SH} scripts",
      "tree": {
        "sha": "e027a699270a2c863d944573fa30265060516ba4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e027a699270a2c863d944573fa30265060516ba4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/905d672b743edf31531d095ffe800449eaffec69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/905d672b743edf31531d095ffe800449eaffec69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/905d672b743edf31531d095ffe800449eaffec69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/905d672b743edf31531d095ffe800449eaffec69/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "285a65ccfde2e811cfe01e916b998c02ee534a97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/285a65ccfde2e811cfe01e916b998c02ee534a97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/285a65ccfde2e811cfe01e916b998c02ee534a97"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 58,
      "deletions": 80
    },
    "files": [
      {
        "sha": "9cf46d9d11b3d3e1f8f34bcd629c6b69ca005bc5",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/905d672b743edf31531d095ffe800449eaffec69/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/905d672b743edf31531d095ffe800449eaffec69/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=905d672b743edf31531d095ffe800449eaffec69",
        "patch": "@@ -23,7 +23,6 @@\n     CTransaction,\n     CTxIn,\n     CTxOut,\n-    sha256,\n     tx_from_hex,\n )\n from test_framework.script import (\n@@ -35,11 +34,12 @@\n     OP_CHECKSIG,\n     OP_DROP,\n     OP_TRUE,\n-    hash160,\n )\n from test_framework.script_util import (\n     key_to_p2pkh_script,\n+    key_to_p2wpkh_script,\n     script_to_p2sh_script,\n+    script_to_p2wsh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -428,9 +428,9 @@ def run_test(self):\n         # 2N7MGY19ti4KDMSzRfPAssP6Pxyuxoi6jLe is the P2SH(P2PKH) version of mjoE3sSrb8ByYEvgnC3Aox86u1CHnfJA4V\n         unsolvable_address_key = hex_str_to_bytes(\"02341AEC7587A51CDE5279E0630A531AEA2615A9F80B17E8D9376327BAEAA59E3D\")\n         unsolvablep2pkh = key_to_p2pkh_script(unsolvable_address_key)\n-        unsolvablep2wshp2pkh = CScript([OP_0, sha256(unsolvablep2pkh)])\n+        unsolvablep2wshp2pkh = script_to_p2wsh_script(unsolvablep2pkh)\n         p2shop0 = script_to_p2sh_script(op0)\n-        p2wshop1 = CScript([OP_0, sha256(op1)])\n+        p2wshop1 = script_to_p2wsh_script(op1)\n         unsolvable_after_importaddress.append(unsolvablep2pkh)\n         unsolvable_after_importaddress.append(unsolvablep2wshp2pkh)\n         unsolvable_after_importaddress.append(op1)  # OP_1 will be imported as script\n@@ -450,16 +450,16 @@ def run_test(self):\n             if (v['isscript']):\n                 bare = hex_str_to_bytes(v['hex'])\n                 importlist.append(bare.hex())\n-                importlist.append(CScript([OP_0, sha256(bare)]).hex())\n+                importlist.append(script_to_p2wsh_script(bare).hex())\n             else:\n                 pubkey = hex_str_to_bytes(v['pubkey'])\n                 p2pk = CScript([pubkey, OP_CHECKSIG])\n                 p2pkh = key_to_p2pkh_script(pubkey)\n                 importlist.append(p2pk.hex())\n                 importlist.append(p2pkh.hex())\n-                importlist.append(CScript([OP_0, hash160(pubkey)]).hex())\n-                importlist.append(CScript([OP_0, sha256(p2pk)]).hex())\n-                importlist.append(CScript([OP_0, sha256(p2pkh)]).hex())\n+                importlist.append(key_to_p2wpkh_script(pubkey).hex())\n+                importlist.append(script_to_p2wsh_script(p2pk).hex())\n+                importlist.append(script_to_p2wsh_script(p2pkh).hex())\n \n         importlist.append(unsolvablep2pkh.hex())\n         importlist.append(unsolvablep2wshp2pkh.hex())\n@@ -614,20 +614,20 @@ def mine_and_test_listunspent(self, script_list, ismine):\n     def p2sh_address_to_script(self, v):\n         bare = CScript(hex_str_to_bytes(v['hex']))\n         p2sh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n-        p2wsh = CScript([OP_0, sha256(bare)])\n+        p2wsh = script_to_p2wsh_script(bare)\n         p2sh_p2wsh = script_to_p2sh_script(p2wsh)\n         return([bare, p2sh, p2wsh, p2sh_p2wsh])\n \n     def p2pkh_address_to_script(self, v):\n         pubkey = hex_str_to_bytes(v['pubkey'])\n-        p2wpkh = CScript([OP_0, hash160(pubkey)])\n+        p2wpkh = key_to_p2wpkh_script(pubkey)\n         p2sh_p2wpkh = script_to_p2sh_script(p2wpkh)\n         p2pk = CScript([pubkey, OP_CHECKSIG])\n         p2pkh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n         p2sh_p2pk = script_to_p2sh_script(p2pk)\n         p2sh_p2pkh = script_to_p2sh_script(p2pkh)\n-        p2wsh_p2pk = CScript([OP_0, sha256(p2pk)])\n-        p2wsh_p2pkh = CScript([OP_0, sha256(p2pkh)])\n+        p2wsh_p2pk = script_to_p2wsh_script(p2pk)\n+        p2wsh_p2pkh = script_to_p2wsh_script(p2pkh)\n         p2sh_p2wsh_p2pk = script_to_p2sh_script(p2wsh_p2pk)\n         p2sh_p2wsh_p2pkh = script_to_p2sh_script(p2wsh_p2pkh)\n         return [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh]"
      },
      {
        "sha": "17be29c7bfe7dcae358b1ad48a8e6c228edc57a2",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/905d672b743edf31531d095ffe800449eaffec69/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/905d672b743edf31531d095ffe800449eaffec69/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=905d672b743edf31531d095ffe800449eaffec69",
        "patch": "@@ -76,15 +76,16 @@\n     taproot_construct,\n )\n from test_framework.script_util import (\n+    key_to_p2wpkh_script,\n     keyhash_to_p2pkh_script,\n     script_to_p2sh_script,\n+    script_to_p2wsh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_raises_rpc_error, assert_equal\n from test_framework.key import generate_privkey, compute_xonly_pubkey, sign_schnorr, tweak_add_privkey, ECKey\n from test_framework.address import (\n     hash160,\n-    sha256,\n )\n from collections import OrderedDict, namedtuple\n from io import BytesIO\n@@ -461,13 +462,13 @@ def make_spender(comment, *, tap=None, witv0=False, script=None, pkh=None, p2sh=\n             # P2WPKH\n             assert script is None\n             pubkeyhash = hash160(pkh)\n-            spk = CScript([OP_0, pubkeyhash])\n+            spk = key_to_p2wpkh_script(pkh)\n             conf[\"scriptcode\"] = keyhash_to_p2pkh_script(pubkeyhash)\n             conf[\"script_witv0\"] = None\n             conf[\"inputs\"] = [getter(\"sign\"), pkh]\n         elif script is not None:\n             # P2WSH\n-            spk = CScript([OP_0, sha256(script)])\n+            spk = script_to_p2wsh_script(script)\n             conf[\"scriptcode\"] = script\n             conf[\"script_witv0\"] = script\n         else:"
      },
      {
        "sha": "ead9d852febf3bda8d432db11e38e93135027139",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 26,
        "deletions": 42,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/905d672b743edf31531d095ffe800449eaffec69/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/905d672b743edf31531d095ffe800449eaffec69/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=905d672b743edf31531d095ffe800449eaffec69",
        "patch": "@@ -41,7 +41,6 @@\n     ser_vector,\n     sha256,\n     tx_from_hex,\n-    uint256_from_str,\n )\n from test_framework.p2p import (\n     P2PInterface,\n@@ -74,8 +73,10 @@\n     hash160,\n )\n from test_framework.script_util import (\n+    key_to_p2wpkh_script,\n     keyhash_to_p2pkh_script,\n     script_to_p2sh_script,\n+    script_to_p2wsh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -488,8 +489,7 @@ def test_v0_outputs_arent_spendable(self):\n \n         # Create two outputs, a p2wsh and p2sh-p2wsh\n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n         p2sh_script_pubkey = script_to_p2sh_script(script_pubkey)\n \n         value = self.utxo[0].nValue // 3\n@@ -625,8 +625,7 @@ def test_standardness_v0(self):\n         V0 segwit inputs may only be mined after activation, but not before.\"\"\"\n \n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n         p2sh_script_pubkey = script_to_p2sh_script(witness_program)\n \n         # First prepare a p2sh output (so that spending it will pass standardness)\n@@ -654,6 +653,7 @@ def test_standardness_v0(self):\n         test_transaction_acceptance(self.nodes[1], self.std_node, tx, with_witness=True, accepted=True)\n \n         # Now create something that looks like a P2PKH output. This won't be spendable.\n+        witness_hash = sha256(witness_program)\n         script_pubkey = CScript([OP_0, hash160(witness_hash)])\n         tx2 = CTransaction()\n         # tx was accepted, so we spend the second output.\n@@ -732,8 +732,7 @@ def test_p2sh_witness(self):\n \n         # Prepare the p2sh-wrapped witness output\n         witness_program = CScript([OP_DROP, OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        p2wsh_pubkey = CScript([OP_0, witness_hash])\n+        p2wsh_pubkey = script_to_p2wsh_script(witness_program)\n         script_pubkey = script_to_p2sh_script(p2wsh_pubkey)\n         script_sig = CScript([p2wsh_pubkey])  # a push of the redeem script\n \n@@ -828,8 +827,7 @@ def test_witness_commitments(self):\n \n         # Let's construct a witness program\n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n         tx.rehash()\n \n@@ -942,8 +940,7 @@ def test_witness_block_size(self):\n         NUM_OUTPUTS = 50\n \n         witness_program = CScript([OP_2DROP] * NUM_DROPS + [OP_TRUE])\n-        witness_hash = uint256_from_str(sha256(witness_program))\n-        script_pubkey = CScript([OP_0, ser_uint256(witness_hash)])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         prevout = COutPoint(self.utxo[0].sha256, self.utxo[0].n)\n         value = self.utxo[0].nValue\n@@ -1045,8 +1042,7 @@ def test_extra_witness_data(self):\n         block = self.build_next_block()\n \n         witness_program = CScript([OP_DROP, OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         # First try extra witness data on a tx that doesn't require a witness\n         tx = CTransaction()\n@@ -1118,8 +1114,7 @@ def test_max_witness_push_length(self):\n         block = self.build_next_block()\n \n         witness_program = CScript([OP_DROP, OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n@@ -1157,8 +1152,7 @@ def test_max_witness_program_length(self):\n         # This program is 19 max pushes (9937 bytes), then 64 more opcode-bytes.\n         long_witness_program = CScript([b'a' * MAX_SCRIPT_ELEMENT_SIZE] * 19 + [OP_DROP] * 63 + [OP_TRUE])\n         assert len(long_witness_program) == MAX_PROGRAM_LENGTH + 1\n-        long_witness_hash = sha256(long_witness_program)\n-        long_script_pubkey = CScript([OP_0, long_witness_hash])\n+        long_script_pubkey = script_to_p2wsh_script(long_witness_program)\n \n         block = self.build_next_block()\n \n@@ -1181,8 +1175,7 @@ def test_max_witness_program_length(self):\n         # Try again with one less byte in the witness program\n         witness_program = CScript([b'a' * MAX_SCRIPT_ELEMENT_SIZE] * 19 + [OP_DROP] * 62 + [OP_TRUE])\n         assert len(witness_program) == MAX_PROGRAM_LENGTH\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         tx.vout[0] = CTxOut(tx.vout[0].nValue, script_pubkey)\n         tx.rehash()\n@@ -1201,8 +1194,7 @@ def test_witness_input_length(self):\n         \"\"\"Test that vin length must match vtxinwit length.\"\"\"\n \n         witness_program = CScript([OP_DROP, OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         # Create a transaction that splits our utxo into many outputs\n         tx = CTransaction()\n@@ -1309,8 +1301,7 @@ def test_tx_relay_after_segwit_activation(self):\n \n         # Now try to add extra witness data to a valid witness tx.\n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(tx_hash, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue - 1000, script_pubkey))\n@@ -1472,8 +1463,7 @@ def test_premature_coinbase_witness_spend(self):\n         block = self.build_next_block()\n         # Change the output of the block to be a witness output.\n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n         block.vtx[0].vout[0].scriptPubKey = script_pubkey\n         # This next line will rehash the coinbase and update the merkle\n         # root, and solve.\n@@ -1520,7 +1510,7 @@ def test_uncompressed_pubkey(self):\n         # Test 1: P2WPKH\n         # First create a P2WPKH output that uses an uncompressed pubkey\n         pubkeyhash = hash160(pubkey)\n-        script_pkh = CScript([OP_0, pubkeyhash])\n+        script_pkh = key_to_p2wpkh_script(pubkey)\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(utxo.sha256, utxo.n), b\"\"))\n         tx.vout.append(CTxOut(utxo.nValue - 1000, script_pkh))\n@@ -1534,8 +1524,7 @@ def test_uncompressed_pubkey(self):\n         # Now try to spend it. Send it to a P2WSH output, which we'll\n         # use in the next test.\n         witness_program = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n-        witness_hash = sha256(witness_program)\n-        script_wsh = CScript([OP_0, witness_hash])\n+        script_wsh = script_to_p2wsh_script(witness_program)\n \n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n@@ -1613,8 +1602,7 @@ def test_signature_version_1(self):\n         pubkey = key.get_pubkey().get_bytes()\n \n         witness_program = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         # First create a witness output for use in the tests.\n         tx = CTransaction()\n@@ -1733,7 +1721,7 @@ def test_signature_version_1(self):\n \n         # Now test witness version 0 P2PKH transactions\n         pubkeyhash = hash160(pubkey)\n-        script_pkh = CScript([OP_0, pubkeyhash])\n+        script_pkh = key_to_p2wpkh_script(pubkey)\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(temp_utxos[0].sha256, temp_utxos[0].n), b\"\"))\n         tx.vout.append(CTxOut(temp_utxos[0].nValue, script_pkh))\n@@ -1860,7 +1848,7 @@ def test_non_standard_witness(self):\n         # For each script, generate a pair of P2WSH and P2SH-P2WSH output.\n         outputvalue = (self.utxo[0].nValue - 1000) // (len(scripts) * 2)\n         for i in scripts:\n-            p2wsh = CScript([OP_0, sha256(i)])\n+            p2wsh = script_to_p2wsh_script(i)\n             p2wsh_scripts.append(p2wsh)\n             tx.vout.append(CTxOut(outputvalue, p2wsh))\n             tx.vout.append(CTxOut(outputvalue, script_to_p2sh_script(p2wsh)))\n@@ -1877,13 +1865,13 @@ def test_non_standard_witness(self):\n         for i in range(len(scripts)):\n             p2wsh_tx = CTransaction()\n             p2wsh_tx.vin.append(CTxIn(COutPoint(txid, i * 2)))\n-            p2wsh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(hex_str_to_bytes(\"\"))])))\n+            p2wsh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(b\"\")])))\n             p2wsh_tx.wit.vtxinwit.append(CTxInWitness())\n             p2wsh_tx.rehash()\n             p2wsh_txs.append(p2wsh_tx)\n             p2sh_tx = CTransaction()\n             p2sh_tx.vin.append(CTxIn(COutPoint(txid, i * 2 + 1), CScript([p2wsh_scripts[i]])))\n-            p2sh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(hex_str_to_bytes(\"\"))])))\n+            p2sh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(b\"\")])))\n             p2sh_tx.wit.vtxinwit.append(CTxInWitness())\n             p2sh_tx.rehash()\n             p2sh_txs.append(p2sh_tx)\n@@ -1978,8 +1966,7 @@ def test_witness_sigops(self):\n \n         # Keep this under MAX_OPS_PER_SCRIPT (201)\n         witness_program = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKMULTISIG] * 5 + [OP_CHECKSIG] * 193 + [OP_ENDIF])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         sigops_per_script = 20 * 5 + 193 * 1\n         # We'll produce 2 extra outputs, one with a program that would take us\n@@ -1995,14 +1982,12 @@ def test_witness_sigops(self):\n         # N(=MAX_SIGOP_COST//sigops_per_script) outputs of our transaction,\n         # would push us just over the block sigop limit.\n         witness_program_toomany = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKSIG] * (extra_sigops_available + 1) + [OP_ENDIF])\n-        witness_hash_toomany = sha256(witness_program_toomany)\n-        script_pubkey_toomany = CScript([OP_0, witness_hash_toomany])\n+        script_pubkey_toomany = script_to_p2wsh_script(witness_program_toomany)\n \n         # If we spend this script instead, we would exactly reach our sigop\n         # limit (for witness sigops).\n         witness_program_justright = CScript([OP_TRUE, OP_IF, OP_TRUE, OP_ELSE] + [OP_CHECKSIG] * (extra_sigops_available) + [OP_ENDIF])\n-        witness_hash_justright = sha256(witness_program_justright)\n-        script_pubkey_justright = CScript([OP_0, witness_hash_justright])\n+        script_pubkey_justright = script_to_p2wsh_script(witness_program_justright)\n \n         # First split our available utxo into a bunch of outputs\n         split_value = self.utxo[0].nValue // outputs\n@@ -2135,8 +2120,7 @@ def received_wtxidrelay():\n         # Create a Segwit output from the latest UTXO\n         # and announce it to the network\n         witness_program = CScript([OP_TRUE])\n-        witness_hash = sha256(witness_program)\n-        script_pubkey = CScript([OP_0, witness_hash])\n+        script_pubkey = script_to_p2wsh_script(witness_program)\n \n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))"
      },
      {
        "sha": "f3627d1e37b06c01817233635c685535ec6c20c2",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/905d672b743edf31531d095ffe800449eaffec69/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/905d672b743edf31531d095ffe800449eaffec69/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=905d672b743edf31531d095ffe800449eaffec69",
        "patch": "@@ -6,7 +6,6 @@\n \n from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.address import (\n-    check_script,\n     script_to_p2sh,\n     script_to_p2wsh,\n )\n@@ -20,12 +19,10 @@\n )\n from test_framework.messages import (\n     CTxInWitness,\n-    sha256,\n     tx_from_hex,\n )\n from test_framework.script import (\n     CScript,\n-    OP_0,\n     OP_CHECKLOCKTIMEVERIFY,\n     OP_CHECKSIG,\n     OP_CHECKSEQUENCEVERIFY,\n@@ -233,7 +230,7 @@ def verify_txn_with_witness_script(self, tx_type):\n             'P2PKH': key_to_p2pkh_script(embedded_pubkey).hex(),\n             'P2PK': CScript([hex_str_to_bytes(embedded_pubkey), OP_CHECKSIG]).hex()\n         }.get(tx_type, \"Invalid tx_type\")\n-        redeem_script = CScript([OP_0, sha256(check_script(witness_script))]).hex()\n+        redeem_script = script_to_p2wsh_script(witness_script).hex()\n         addr = script_to_p2sh(redeem_script)\n         script_pub_key = self.nodes[1].validateaddress(addr)['scriptPubKey']\n         # Fund that address"
      },
      {
        "sha": "833a2159938255bbe9f24b1ee07dbd64d10b8d3f",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/905d672b743edf31531d095ffe800449eaffec69/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/905d672b743edf31531d095ffe800449eaffec69/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=905d672b743edf31531d095ffe800449eaffec69",
        "patch": "@@ -26,21 +26,22 @@\n     hash256,\n     hex_str_to_bytes,\n     ser_uint256,\n-    sha256,\n     tx_from_hex,\n     uint256_from_str,\n )\n from .script import (\n     CScript,\n     CScriptNum,\n     CScriptOp,\n-    OP_0,\n     OP_1,\n     OP_CHECKMULTISIG,\n     OP_CHECKSIG,\n     OP_RETURN,\n     OP_TRUE,\n-    hash160,\n+)\n+from .script_util import (\n+    key_to_p2wpkh_script,\n+    script_to_p2wsh_script,\n )\n from .util import assert_equal\n \n@@ -206,13 +207,11 @@ def witness_script(use_p2wsh, pubkey):\n     scriptPubKey.\"\"\"\n     if not use_p2wsh:\n         # P2WPKH instead\n-        pubkeyhash = hash160(hex_str_to_bytes(pubkey))\n-        pkscript = CScript([OP_0, pubkeyhash])\n+        pkscript = key_to_p2wpkh_script(pubkey)\n     else:\n         # 1-of-1 multisig\n         witness_program = CScript([OP_1, hex_str_to_bytes(pubkey), OP_1, OP_CHECKMULTISIG])\n-        scripthash = sha256(witness_program)\n-        pkscript = CScript([OP_0, scripthash])\n+        pkscript = script_to_p2wsh_script(witness_program)\n     return pkscript.hex()\n \n def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):"
      },
      {
        "sha": "acbc040741c2feac46cebfbf8ad2d2f5c29fa998",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/905d672b743edf31531d095ffe800449eaffec69/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/905d672b743edf31531d095ffe800449eaffec69/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=905d672b743edf31531d095ffe800449eaffec69",
        "patch": "@@ -17,16 +17,15 @@\n from test_framework.key import ECKey\n from test_framework.script import (\n     CScript,\n-    OP_0,\n     OP_2,\n     OP_3,\n     OP_CHECKMULTISIG,\n-    hash160,\n-    sha256,\n )\n from test_framework.script_util import (\n     key_to_p2pkh_script,\n+    key_to_p2wpkh_script,\n     script_to_p2sh_script,\n+    script_to_p2wsh_script,\n )\n from test_framework.util import hex_str_to_bytes\n \n@@ -56,15 +55,14 @@ def get_key(node):\n     Returns a named tuple of privkey, pubkey and all address and scripts.\"\"\"\n     addr = node.getnewaddress()\n     pubkey = node.getaddressinfo(addr)['pubkey']\n-    pkh = hash160(hex_str_to_bytes(pubkey))\n     return Key(privkey=node.dumpprivkey(addr),\n                pubkey=pubkey,\n                p2pkh_script=key_to_p2pkh_script(pubkey).hex(),\n                p2pkh_addr=key_to_p2pkh(pubkey),\n-               p2wpkh_script=CScript([OP_0, pkh]).hex(),\n+               p2wpkh_script=key_to_p2wpkh_script(pubkey).hex(),\n                p2wpkh_addr=key_to_p2wpkh(pubkey),\n-               p2sh_p2wpkh_script=script_to_p2sh_script(CScript([OP_0, pkh])).hex(),\n-               p2sh_p2wpkh_redeem_script=CScript([OP_0, pkh]).hex(),\n+               p2sh_p2wpkh_script=script_to_p2sh_script(key_to_p2wpkh_script(pubkey)).hex(),\n+               p2sh_p2wpkh_redeem_script=key_to_p2wpkh_script(pubkey).hex(),\n                p2sh_p2wpkh_addr=key_to_p2sh_p2wpkh(pubkey))\n \n def get_generate_key():\n@@ -75,15 +73,14 @@ def get_generate_key():\n     eckey.generate()\n     privkey = bytes_to_wif(eckey.get_bytes())\n     pubkey = eckey.get_pubkey().get_bytes().hex()\n-    pkh = hash160(hex_str_to_bytes(pubkey))\n     return Key(privkey=privkey,\n                pubkey=pubkey,\n                p2pkh_script=key_to_p2pkh_script(pubkey).hex(),\n                p2pkh_addr=key_to_p2pkh(pubkey),\n-               p2wpkh_script=CScript([OP_0, pkh]).hex(),\n+               p2wpkh_script=key_to_p2wpkh_script(pubkey).hex(),\n                p2wpkh_addr=key_to_p2wpkh(pubkey),\n-               p2sh_p2wpkh_script=script_to_p2sh_script(CScript([OP_0, pkh])).hex(),\n-               p2sh_p2wpkh_redeem_script=CScript([OP_0, pkh]).hex(),\n+               p2sh_p2wpkh_script=script_to_p2sh_script(key_to_p2wpkh_script(pubkey)).hex(),\n+               p2sh_p2wpkh_redeem_script=key_to_p2wpkh_script(pubkey).hex(),\n                p2sh_p2wpkh_addr=key_to_p2sh_p2wpkh(pubkey))\n \n def get_multisig(node):\n@@ -97,7 +94,7 @@ def get_multisig(node):\n         addrs.append(addr['address'])\n         pubkeys.append(addr['pubkey'])\n     script_code = CScript([OP_2] + [hex_str_to_bytes(pubkey) for pubkey in pubkeys] + [OP_3, OP_CHECKMULTISIG])\n-    witness_script = CScript([OP_0, sha256(script_code)])\n+    witness_script = script_to_p2wsh_script(script_code)\n     return Multisig(privkeys=[node.dumpprivkey(addr) for addr in addrs],\n                     pubkeys=pubkeys,\n                     p2sh_script=script_to_p2sh_script(script_code).hex(),"
      }
    ]
  }
]