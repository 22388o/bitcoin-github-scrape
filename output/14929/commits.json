[
  {
    "sha": "0297be61acdf1cdd5f56c8371d1718d08229d9b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjk3YmU2MWFjZGYxY2RkNWY1NmM4MzcxZDE3MThkMDgyMjlkOWIz",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2018-12-11T21:07:36Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2019-01-22T21:10:48Z"
      },
      "message": "Allow connections from misbehavior banned peers.\n\nThis allows incoming connections from peers which are only banned\n due to an automatic misbehavior ban if doing so won't fill inbound.\n\nThese peers are preferred for eviction when inbound fills, but may\n still be kept if they fall into the protected classes.  This\n eviction preference lasts the entire life of the connection even\n if the ban expires.\n\nIf they misbehave again they'll still get disconnected.\n\nThe main purpose of banning on misbehavior is to prevent our\n connections from being wasted on unhelpful peers such as ones\n running incompatible consensus rules.  For inbound peers this\n can be better accomplished with eviction preferences.\n\nA secondary purpose was to reduce resource waste from repeated\n abuse but virtually any attacker can get a nearly unlimited\n supply of addresses, so disconnection is about the best we can\n do.",
      "tree": {
        "sha": "add640a4a3c30cb470c7259b2c1018ee94b9a892",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/add640a4a3c30cb470c7259b2c1018ee94b9a892"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0297be61acdf1cdd5f56c8371d1718d08229d9b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0297be61acdf1cdd5f56c8371d1718d08229d9b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0297be61acdf1cdd5f56c8371d1718d08229d9b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0297be61acdf1cdd5f56c8371d1718d08229d9b3/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bad1e0b22c1065c5ab73d74ac96747ecf33dcdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bad1e0b22c1065c5ab73d74ac96747ecf33dcdf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bad1e0b22c1065c5ab73d74ac96747ecf33dcdf"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 44,
      "deletions": 4
    },
    "files": [
      {
        "sha": "47d64a8f31c0860db648f0bccedbc2bf11ce78b3",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 2,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0297be61acdf1cdd5f56c8371d1718d08229d9b3/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0297be61acdf1cdd5f56c8371d1718d08229d9b3/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=0297be61acdf1cdd5f56c8371d1718d08229d9b3",
        "patch": "@@ -67,14 +67,36 @@ void BanMan::ClearBanned()\n     if (m_client_interface) m_client_interface->BannedListChanged();\n }\n \n+int BanMan::IsBannedLevel(CNetAddr net_addr)\n+{\n+    // Returns the most severe level of banning that applies to this address.\n+    // 0 - Not banned\n+    // 1 - Automatic misbehavior ban\n+    // 2 - Any other ban\n+    int level = 0;\n+    auto current_time = GetTime();\n+    LOCK(m_cs_banned);\n+    for (const auto& it : m_banned) {\n+        CSubNet sub_net = it.first;\n+        CBanEntry ban_entry = it.second;\n+\n+        if (current_time < ban_entry.nBanUntil && sub_net.Match(net_addr)) {\n+            if (ban_entry.banReason != BanReasonNodeMisbehaving) return 2;\n+            level = 1;\n+        }\n+    }\n+    return level;\n+}\n+\n bool BanMan::IsBanned(CNetAddr net_addr)\n {\n+    auto current_time = GetTime();\n     LOCK(m_cs_banned);\n     for (const auto& it : m_banned) {\n         CSubNet sub_net = it.first;\n         CBanEntry ban_entry = it.second;\n \n-        if (sub_net.Match(net_addr) && GetTime() < ban_entry.nBanUntil) {\n+        if (current_time < ban_entry.nBanUntil && sub_net.Match(net_addr)) {\n             return true;\n         }\n     }\n@@ -83,11 +105,12 @@ bool BanMan::IsBanned(CNetAddr net_addr)\n \n bool BanMan::IsBanned(CSubNet sub_net)\n {\n+    auto current_time = GetTime();\n     LOCK(m_cs_banned);\n     banmap_t::iterator i = m_banned.find(sub_net);\n     if (i != m_banned.end()) {\n         CBanEntry ban_entry = (*i).second;\n-        if (GetTime() < ban_entry.nBanUntil) {\n+        if (current_time < ban_entry.nBanUntil) {\n             return true;\n         }\n     }"
      },
      {
        "sha": "a1a00309dd9d0f936e30890193760fd5c225aa51",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0297be61acdf1cdd5f56c8371d1718d08229d9b3/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0297be61acdf1cdd5f56c8371d1718d08229d9b3/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=0297be61acdf1cdd5f56c8371d1718d08229d9b3",
        "patch": "@@ -42,6 +42,7 @@ class BanMan\n     void Ban(const CNetAddr& net_addr, const BanReason& ban_reason, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n     void Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n     void ClearBanned();\n+    int IsBannedLevel(CNetAddr net_addr);\n     bool IsBanned(CNetAddr net_addr);\n     bool IsBanned(CSubNet sub_net);\n     bool Unban(const CNetAddr& net_addr);"
      },
      {
        "sha": "be249b4466504a4a41e0a40692ca36b768004c21",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0297be61acdf1cdd5f56c8371d1718d08229d9b3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0297be61acdf1cdd5f56c8371d1718d08229d9b3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0297be61acdf1cdd5f56c8371d1718d08229d9b3",
        "patch": "@@ -764,6 +764,7 @@ struct NodeEvictionCandidate\n     bool fBloomFilter;\n     CAddress addr;\n     uint64_t nKeyedNetGroup;\n+    bool prefer_evict;\n };\n \n static bool ReverseCompareNodeMinPingTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n@@ -832,7 +833,8 @@ bool CConnman::AttemptToEvictConnection()\n             NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n                                                node->nLastBlockTime, node->nLastTXTime,\n                                                HasAllDesirableServiceFlags(node->nServices),\n-                                               node->fRelayTxes, node->pfilter != nullptr, node->addr, node->nKeyedNetGroup};\n+                                               node->fRelayTxes, node->pfilter != nullptr, node->addr, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict};\n             vEvictionCandidates.push_back(candidate);\n         }\n     }\n@@ -857,6 +859,14 @@ bool CConnman::AttemptToEvictConnection()\n \n     if (vEvictionCandidates.empty()) return false;\n \n+    // If any remaining peers are preferred for eviction consider only them.\n+    // This happens after the other preferences since if a peer is really the best by other criteria (esp relaying blocks)\n+    //  then we probably don't want to evict it no matter what.\n+    if (std::any_of(vEvictionCandidates.begin(),vEvictionCandidates.end(),[](NodeEvictionCandidate const &n){return n.prefer_evict;})) {\n+        vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.begin(),vEvictionCandidates.end(),\n+                                  [](NodeEvictionCandidate const &n){return !n.prefer_evict;}),vEvictionCandidates.end());\n+    }\n+\n     // Identify the network group with the most connections and youngest member.\n     // (vEvictionCandidates is already sorted by reverse connect time)\n     uint64_t naMostConnections;\n@@ -937,7 +947,11 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     // on all platforms.  Set it again here just to be sure.\n     SetSocketNoDelay(hSocket);\n \n-    if (m_banman && m_banman->IsBanned(addr) && !whitelisted)\n+    int bannedlevel = m_banman ? m_banman->IsBannedLevel(addr) : 0;\n+\n+    // Don't accept connections from banned peers, but if our inbound slots aren't almost full, accept\n+    // if the only banning reason was an automatic misbehavior ban.\n+    if (!whitelisted && bannedlevel > ((nInbound + 1 < nMaxInbound) ? 1 : 0))\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (banned)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n@@ -961,6 +975,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n+    pnode->m_prefer_evict = bannedlevel > 0;\n     m_msgproc->InitializeNode(pnode);\n \n     LogPrint(BCLog::NET, \"connection from %s accepted\\n\", addr.ToString());"
      },
      {
        "sha": "73b0b9fad3de5edee27de207538f753f3c7053b5",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0297be61acdf1cdd5f56c8371d1718d08229d9b3/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0297be61acdf1cdd5f56c8371d1718d08229d9b3/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0297be61acdf1cdd5f56c8371d1718d08229d9b3",
        "patch": "@@ -651,6 +651,7 @@ class CNode\n     // the network or wire types and the cleaned string used when displayed or logged.\n     std::string strSubVer GUARDED_BY(cs_SubVer), cleanSubVer GUARDED_BY(cs_SubVer);\n     CCriticalSection cs_SubVer; // used for both cleanSubVer and strSubVer\n+    bool m_prefer_evict{false}; // This peer is preferred for eviction.\n     bool fWhitelisted{false}; // This peer can bypass DoS banning.\n     bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n     bool fOneShot{false};"
      }
    ]
  }
]