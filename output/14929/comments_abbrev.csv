gmaxwell,2018-12-11T21:16:15Z,@pstratem @TheBlueMatt ,https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-446364854,446364854,
DrahtBot,2018-12-11T23:22:21Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-446400917,446400917,
gmaxwell,2018-12-31T21:21:31Z,can someone at least give me a concept ack?,https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-450691469,450691469,
sdaftuar,2018-12-31T21:26:31Z,"Yep, Concept ACK.\n\n",https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-450691811,450691811,
laanwj,2019-01-02T11:30:39Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-450841584,450841584,
sdaftuar,2019-01-07T19:13:45Z,"Perhaps we should go further and not bother disconnecting inbound peers who misbehave, and just increase their likelihood of eviction?  One of the changes I've been meaning to propose is to not disconnect inbound peers for relaying an invalid block or header, so that in the event of a future softfork, old peers don't get disconnected for not knowing about the new rules (which risks network partiti",https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-452047659,452047659,
gmaxwell,2019-01-07T20:23:19Z,"@sdaftuar  I think in the long run we should move in that direction, but it's a bigger change that requires more careful consideration.\n\nConsider: disconnecting on an invalid block / header also  potentially helps protect the peer when we're the one that is in the wrong (e.g. rejecting blocks due to corrupt state).  Not a reason to not do it, but perhaps it's a reason to be first really confid",https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-452069259,452069259,
sdaftuar,2019-01-09T16:30:56Z,"ACK\n\nMy only observation from testing is that the interaction between whitelisting and m_prefer_evict is not entirely obvious, but I think this is mostly due to the pre-existing not-well-defined behavior of whitelisting (for instance, I think a whitelisted peer should probably be exempt from eviction, which if I read correctly is not currently the case?  But instead after this PR a peer could ",https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-452760790,452760790,
gmaxwell,2019-01-10T20:20:11Z,"@sdaftuar pre-existing code unconditionally exempts whitelisted peers from consideration for eviction: https://github.com/bitcoin/bitcoin/blob/006a07de4e5c3de36ef84d186315a4a5f23da158/src/net.cpp#L1025\n\nI think the remaining interaction isn't that weird, like if a peer gets eviction pref then gets whitelisted it won't get evicted while whitelisted, but if the whitelisting is removed, the remai",https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-453239321,453239321,
sipa,2019-01-11T20:29:24Z,utACK 006a07de4e5c3de36ef84d186315a4a5f23da158,https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-453647739,453647739,
naumenkogs,2019-01-16T17:46:45Z,"Won't this be a good opportunity to use the same variable for banned and whitelisted? Say \n```IsBannedLevel == -1``` for whitelisted, or better some other naming",https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-454873371,454873371,
gmaxwell,2019-01-16T18:43:28Z,@naumenkogs  I don't think there is any conceptual conflict with having a peer which is both banned and whitelisted. ,https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-454893015,454893015,
naumenkogs,2019-01-16T19:04:59Z,"@gmaxwell but being whitelisted just disables all bans, isn't it?\n\nIt always makes me a bit confusing and I have to go look in the code how exactly these 2 work together.\nPerhaps enforcing a choice would make it more straightforward, not sure.",https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-454900153,454900153,
gmaxwell,2019-01-24T19:40:49Z,"@naumenkogs It disables bans applying, but it doesn't disable being banned, and shouldn't -- unwhitelisting should reveal the underlying banned (or not) state, because of this I don't think they should  share state.",https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-457329528,457329528,
sdaftuar,2019-01-24T19:50:12Z,utACK 0297be61acdf1cdd5f56c8371d1718d08229d9b3,https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-457332512,457332512,
jonasschnelli,2019-01-24T19:59:40Z,"utACK 0297be61acdf1cdd5f56c8371d1718d08229d9b3\nA functional test-script would be nice.",https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-457335816,457335816,
naumenkogs,2019-01-24T20:00:05Z,utACK https://github.com/bitcoin/bitcoin/commit/0297be61acdf1cdd5f56c8371d1718d08229d9b3,https://github.com/bitcoin/bitcoin/pull/14929#issuecomment-457335940,457335940,
promag,2018-12-11T21:24:27Z,`const CNetAddr&`,https://github.com/bitcoin/bitcoin/pull/14929#discussion_r240796231,240796231,src/net.cpp
promag,2018-12-11T21:25:01Z,`const CSubNet&`,https://github.com/bitcoin/bitcoin/pull/14929#discussion_r240796413,240796413,src/net.cpp
promag,2018-12-11T21:25:17Z,`const CBanEntry&`,https://github.com/bitcoin/bitcoin/pull/14929#discussion_r240796489,240796489,src/net.cpp
promag,2018-12-11T21:29:36Z,"Cache `GetTime()` before loop? nit, maybe swap conditions, the 2nd is cheaper?",https://github.com/bitcoin/bitcoin/pull/14929#discussion_r240797856,240797856,src/net.cpp
promag,2018-12-11T21:30:46Z,Should fix formatting.,https://github.com/bitcoin/bitcoin/pull/14929#discussion_r240798241,240798241,src/net.cpp
promag,2018-12-11T21:32:08Z,"nit, initialize here `bool m_prefevict{false};`.",https://github.com/bitcoin/bitcoin/pull/14929#discussion_r240798674,240798674,src/net.h
gmaxwell,2018-12-11T22:35:30Z,It isn't clear what you're asking for here.,https://github.com/bitcoin/bitcoin/pull/14929#discussion_r240817938,240817938,src/net.cpp
gmaxwell,2018-12-11T22:37:10Z,There isn't a single other one initialized there.  I think it would not be good to behave inconsistently in this respect.,https://github.com/bitcoin/bitcoin/pull/14929#discussion_r240818366,240818366,src/net.h
promag,2018-12-11T22:43:55Z,Mainly spaces inconsistencies.,https://github.com/bitcoin/bitcoin/pull/14929#discussion_r240820265,240820265,src/net.cpp
practicalswift,2018-12-12T08:04:07Z,"Should be ""returns"" :-)",https://github.com/bitcoin/bitcoin/pull/14929#discussion_r240912312,240912312,src/net.cpp
promag,2018-12-12T16:14:52Z,Forgot this one?,https://github.com/bitcoin/bitcoin/pull/14929#discussion_r241080757,241080757,src/net.cpp
promag,2018-12-12T16:15:49Z,`const CSubNet& subNet` 🏃 ,https://github.com/bitcoin/bitcoin/pull/14929#discussion_r241081157,241081157,src/net.cpp
laanwj,2019-01-02T11:30:30Z,"One idea I had would be to make this an 'eviction priority' integer instead of a boolean, then choose one of the peers with lowest priority when an eviction is needed. But not necessary unless this is going to be used for other things, as well.",https://github.com/bitcoin/bitcoin/pull/14929#discussion_r244714602,244714602,src/net.h
gmaxwell,2019-01-03T06:25:21Z,I thought of that too!  but thought it was simpler to make it a bool until we had something else to trigger it on.,https://github.com/bitcoin/bitcoin/pull/14929#discussion_r244918377,244918377,src/net.h
sdaftuar,2019-01-07T20:10:44Z,It's not entirely clear to me why we might allow preferred eviction peers to be protected under one of the above criteria -- can you elaborate on that design choice in this comment?,https://github.com/bitcoin/bitcoin/pull/14929#discussion_r245782752,245782752,src/net.cpp
sdaftuar,2019-01-07T20:17:55Z,"nit: `bannedlevel > (nInbound + 1 < nMaxInbound)` is not the most readable code, but I do appreciate the comment.",https://github.com/bitcoin/bitcoin/pull/14929#discussion_r245784672,245784672,src/net.cpp
gmaxwell,2019-01-07T20:25:39Z,"My thought was along the lines of ""we don't ever want to disconnect the last inbound peer to give us a block we accepted, regardless of who it is""-- beyond that, I didn't think it mattered much if they got protected under other criteria.  I'm fully open to changing it, if you have a suggestion for a better behaviour.",https://github.com/bitcoin/bitcoin/pull/14929#discussion_r245786722,245786722,src/net.cpp
sdaftuar,2019-01-07T21:35:39Z,"Seems like fine reasoning, maybe just leave a comment to that effect so that someone could refine this later without wondering why it’s done the current way?",https://github.com/bitcoin/bitcoin/pull/14929#discussion_r245805839,245805839,src/net.cpp
MarcoFalke,2019-01-14T15:40:38Z,nit: Should use a C++11 default member initializer instead (That will also solve the merge conflict),https://github.com/bitcoin/bitcoin/pull/14929#discussion_r247540777,247540777,src/net.cpp
gmaxwell,2019-01-15T00:28:11Z,@MarcoFalke   Please see:   github.com/bitcoin/bitcoin/pull/14929/#discussion_r240818366  (sorry github screws up any effort I make to directly link the comment),https://github.com/bitcoin/bitcoin/pull/14929#discussion_r247721928,247721928,src/net.cpp
gmaxwell,2019-01-15T05:40:21Z,"oh I see, it was conflicted by a PR that went through and changed initialization, though, strangely, incompletely (e.g.  strSubVer)",https://github.com/bitcoin/bitcoin/pull/14929#discussion_r247769848,247769848,src/net.cpp
Sjors,2019-01-24T19:58:00Z,Nit: maybe swap `1` and `2` so we can add other / more detailed specific reasons later?,https://github.com/bitcoin/bitcoin/pull/14929#discussion_r250756034,250756034,src/banman.cpp
gmaxwell,2019-01-27T21:36:26Z,meh.   Trivial to do if there is a need. Without a need otherwise the current order makes more sense to me.,https://github.com/bitcoin/bitcoin/pull/14929#discussion_r251256370,251256370,src/banman.cpp
Sjors,2019-01-29T17:19:30Z,"This data is ephemeral, right? Not saved into `banlist.dat` (which would make it more tedious to change later).",https://github.com/bitcoin/bitcoin/pull/14929#discussion_r251933033,251933033,src/banman.cpp
