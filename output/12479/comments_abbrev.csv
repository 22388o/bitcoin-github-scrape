esotericnonsense,2018-02-18T22:50:05Z,"This is cool. I'd thought about adding a similar concept to getblocktemplate (or some sort of package number or something).\n\nHave you given any thought to performance / done any benchmarking? I'm particularly thinking of what happens when the mempool is in the hundreds of megs as it was not too long ago.",https://github.com/bitcoin/bitcoin/pull/12479#issuecomment-366555403,366555403,
dcousens,2018-02-18T23:33:32Z,"~~NACK, atleast, not by default,  this looks like it might increase the cost of this RPC call. (happy to be proven wrong though)~~\n\n**edit:** maybe, I initially mis-read this as adding the entirety of each spendby TX, not simply the txid,  still,  numbers are nice",https://github.com/bitcoin/bitcoin/pull/12479#issuecomment-366558497,366558497,
conscott,2018-02-19T00:04:38Z,Per suggestion of @dcousens and @esotericnonsense I will perform some timing tests and pull this out into an optional parameter if it's hampering performance significantly. ,https://github.com/bitcoin/bitcoin/pull/12479#issuecomment-366560742,366560742,
sipa,2018-02-19T00:08:50Z,"I looks like it's a single map lookup per reported transaction output, which I don't expect to be all that expensive.\n\nNumbers are better, of course.",https://github.com/bitcoin/bitcoin/pull/12479#issuecomment-366561213,366561213,
dcousens,2018-02-19T01:10:35Z,"revoking my NACK,  I initially mis-interpreted the extent of the added data.\nI'd instead suggest to additionally add the `vout` which spends the TX, not only the `txid`. \n\n",https://github.com/bitcoin/bitcoin/pull/12479#issuecomment-366566215,366566215,
conscott,2018-02-20T22:04:14Z,"Thanks for review @esotericnonsense @promag and @dcousens \n\nI have updated commits from your comments. \n\nIt is correct that this just adds a map lookup per transactions, but I went ahead and tested performance as well. This seems to add about 3% in execution time in my particular test. \n\nThe details are that I [hacked together a test]( https://github.com/bitcoin/bitcoin/commit/55a9289c",https://github.com/bitcoin/bitcoin/pull/12479#issuecomment-367136320,367136320,
morcos,2018-03-05T16:27:56Z,ACK 1dfb4e7,https://github.com/bitcoin/bitcoin/pull/12479#issuecomment-370476764,370476764,
dcousens,2018-03-05T23:38:15Z,"> This also applies to the depends list, in that the current transaction could be spending multiple outputs for a single parent, and I think we want to keep the spends / depends format about the same. What are your thoughts?\n\n@conscott I think that is fine,  I guess it depends on the verbosity required for your application.  The few places I can see this being useful,  I would appreciate the `",https://github.com/bitcoin/bitcoin/pull/12479#issuecomment-370606970,370606970,
sipa,2018-03-06T15:28:22Z,utACK 1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2,https://github.com/bitcoin/bitcoin/pull/12479#issuecomment-370818813,370818813,
esotericnonsense,2018-02-18T22:50:57Z,"Does this repeat tx.GetHash() for every vout?\nPossibly makes sense to do it outside of the loop?\n(Maybe the compiler is more intelligent than I'm imagining)",https://github.com/bitcoin/bitcoin/pull/12479#discussion_r168969166,168969166,src/rpc/blockchain.cpp
promag,2018-02-19T09:59:22Z,"In addition to RPC `getrawmempool`, this also affects `getmempoolentry`, `getmempooldescendants`, `getmempoolancestors` and also REST `/rest/mempool/contents`. If this is intended then update respective tests to test the new field.",https://github.com/bitcoin/bitcoin/pull/12479#discussion_r169028383,169028383,src/rpc/blockchain.cpp
promag,2018-02-19T10:02:04Z,"It's fine as is, see `CTransaction::GetHash()`.",https://github.com/bitcoin/bitcoin/pull/12479#discussion_r169028970,169028970,src/rpc/blockchain.cpp
promag,2018-02-19T10:16:42Z,Looks like alignment is bad.,https://github.com/bitcoin/bitcoin/pull/12479#discussion_r169032461,169032461,src/rpc/blockchain.cpp
conscott,2018-02-19T19:55:35Z,Agreed. I have updated the tests to coverage all these cases. ,https://github.com/bitcoin/bitcoin/pull/12479#discussion_r169161251,169161251,src/rpc/blockchain.cpp
promag,2018-02-21T21:36:51Z,`std::set<uint256>`?,https://github.com/bitcoin/bitcoin/pull/12479#discussion_r169785397,169785397,src/rpc/blockchain.cpp
promag,2018-02-21T21:43:20Z,"Not sure if it matters, but how about `const auto& it = `?",https://github.com/bitcoin/bitcoin/pull/12479#discussion_r169787146,169787146,src/rpc/blockchain.cpp
promag,2018-02-21T21:47:18Z,"Avoid loop below by taking advantage of `insert()` return value:\n```cpp\nif (set_spent.insert(tx_hash).second) {\n    spent.push_back(tx_hash.ToString());\n}\n```",https://github.com/bitcoin/bitcoin/pull/12479#discussion_r169788242,169788242,src/rpc/blockchain.cpp
promag,2018-02-23T22:31:34Z,"Is this test really necessary? If `mapNextTx` contains the outpoint, then the spending transaction should be in the mempool? See `CTxMemPool::addUnchecked()`.\n\nTherefore, maybe:\n - replace with `assert(mempool.exists(tx_hash))`\n - or test and throw an error if not in the mempool (or log something)\n - or even remove the check.\n\nIMO not being in `mempool.mapTx` means that something is ",https://github.com/bitcoin/bitcoin/pull/12479#discussion_r170384663,170384663,src/rpc/blockchain.cpp
promag,2018-02-23T22:31:43Z,"Nit, `++i`.",https://github.com/bitcoin/bitcoin/pull/12479#discussion_r170384689,170384689,src/rpc/blockchain.cpp
junfx,2018-02-24T07:31:25Z,"This for loop iterates tx.vout, does it equal to:\n`auto entryit = mempool.mapTx.find(tx.GetHash());`\n`auto children = mempool.GetMemPoolChildren(entryit);`\n?\n",https://github.com/bitcoin/bitcoin/pull/12479#discussion_r170414529,170414529,src/rpc/blockchain.cpp
conscott,2018-02-24T18:48:48Z,I agree. This was a paranoia check and I debated whether this should be an assert. I think I will update as such. ,https://github.com/bitcoin/bitcoin/pull/12479#discussion_r170429094,170429094,src/rpc/blockchain.cpp
promag,2018-02-24T21:11:11Z,"The index is needed below, to construct the outpoint from the output.",https://github.com/bitcoin/bitcoin/pull/12479#discussion_r170432651,170432651,src/rpc/blockchain.cpp
conscott,2018-02-26T18:36:13Z,I believe @junfx is right. This looks like the more efficient path and I have tested it out. ,https://github.com/bitcoin/bitcoin/pull/12479#discussion_r170691210,170691210,src/rpc/blockchain.cpp
promag,2018-02-26T20:37:57Z,"Right, I've overlooked @junfx suggestion.",https://github.com/bitcoin/bitcoin/pull/12479#discussion_r170727617,170727617,src/rpc/blockchain.cpp
