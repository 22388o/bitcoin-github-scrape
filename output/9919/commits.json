[
  {
    "sha": "45fad466d1b25478b384a3535460b6f679b3788c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWZhZDQ2NmQxYjI1NDc4YjM4NGEzNTM1NDYwYjZmNjc5YjM3ODhj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-04T14:27:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-12T13:59:11Z"
      },
      "message": "rpc: UNIX sockets support\n\nAdd functionality for RPC over UNIX sockets, on platforms that support\nUNIX sockets. This is specified with `:unix:/path/to/socket` to\n`-rpcbind` and `-rpcconnect`. By default the socket path is relative to the\ndata directory.",
      "tree": {
        "sha": "70963c02f78c61b96869304bc426dd86dba4c71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70963c02f78c61b96869304bc426dd86dba4c71e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45fad466d1b25478b384a3535460b6f679b3788c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45fad466d1b25478b384a3535460b6f679b3788c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45fad466d1b25478b384a3535460b6f679b3788c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45fad466d1b25478b384a3535460b6f679b3788c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21833f9456f6ad5bc06321ad6d9590f42ce0195c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21833f9456f6ad5bc06321ad6d9590f42ce0195c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21833f9456f6ad5bc06321ad6d9590f42ce0195c"
      }
    ],
    "stats": {
      "total": 265,
      "additions": 263,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5e2804338ab7af204500fa361ddf22e5b4f6e6c6",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45fad466d1b25478b384a3535460b6f679b3788c/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45fad466d1b25478b384a3535460b6f679b3788c/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=45fad466d1b25478b384a3535460b6f679b3788c",
        "patch": "@@ -601,6 +601,21 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n  [ AC_MSG_RESULT(no)]\n )\n \n+# Check for UNIX sockets\n+AC_MSG_CHECKING(for sockaddr_un)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>\n+  #include <sys/un.h>]],\n+ [[ struct sockaddr_un addr;\n+    addr.sun_family = AF_UNIX; ]])],\n+ [ AC_MSG_RESULT(yes);\n+   AC_DEFINE(HAVE_SOCKADDR_UN, 1,[Define this symbol if the sockaddr_un is available]) \n+   AM_CONDITIONAL([BUILD_EVUNIX],[true])\n+ ],\n+ [ AC_MSG_RESULT(no)\n+   AM_CONDITIONAL([BUILD_EVUNIX],[false])\n+ ]\n+)\n+\n # Check for reduced exports\n if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],"
      },
      {
        "sha": "216cba5b44ab9dd77ff78b8f114c75d03a722ec4",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45fad466d1b25478b384a3535460b6f679b3788c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45fad466d1b25478b384a3535460b6f679b3788c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=45fad466d1b25478b384a3535460b6f679b3788c",
        "patch": "@@ -136,6 +136,7 @@ BITCOIN_CORE_H = \\\n   support/allocators/zeroafterfree.h \\\n   support/cleanse.h \\\n   support/events.h \\\n+  support/evunix.h \\\n   support/lockedpool.h \\\n   sync.h \\\n   threadsafety.h \\\n@@ -211,6 +212,9 @@ libbitcoin_server_a_SOURCES = \\\n   validationinterface.cpp \\\n   versionbits.cpp \\\n   $(BITCOIN_CORE_H)\n+if BUILD_EVUNIX\n+libbitcoin_server_a_SOURCES += support/evunix.cpp\n+endif\n \n if ENABLE_ZMQ\n libbitcoin_zmq_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(ZMQ_CFLAGS)\n@@ -377,6 +381,9 @@ bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPN\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n+if BUILD_EVUNIX\n+bitcoin_cli_SOURCES += support/evunix.cpp\n+endif\n bitcoin_cli_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CFLAGS)\n bitcoin_cli_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)"
      },
      {
        "sha": "d0ebe31e75a143352adcc2ee4cd6819092a97d03",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 2,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45fad466d1b25478b384a3535460b6f679b3788c/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45fad466d1b25478b384a3535460b6f679b3788c/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=45fad466d1b25478b384a3535460b6f679b3788c",
        "patch": "@@ -15,11 +15,14 @@\n #include \"utilstrencodings.h\"\n \n #include <boost/filesystem/operations.hpp>\n+#include <boost/algorithm/string/predicate.hpp>\n #include <stdio.h>\n \n #include <event2/buffer.h>\n #include <event2/keyvalq_struct.h>\n+#include <event2/bufferevent.h>\n #include \"support/events.h\"\n+#include \"support/evunix.h\"\n \n #include <univalue.h>\n \n@@ -195,8 +198,35 @@ UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n     // Obtain event base\n     raii_event_base base = obtain_event_base();\n \n-    // Synchronously look up hostname\n-    raii_evhttp_connection evcon = obtain_evhttp_connection_base(base.get(), host, port);\n+    raii_evhttp_connection evcon;\n+    if (boost::starts_with(host, RPC_ADDR_PREFIX_UNIX)) {\n+#if defined(HAVE_SOCKADDR_UN) && defined(LIBEVENT_EXPERIMENTAL)\n+        // This requires a small patch to libevent to be able to pass in a file\n+        // descriptor of an existing connection, which can be found here:\n+        // https://github.com/libevent/libevent/pull/479\n+        // When this lands into a release, replace the LIBEVENT_EXPERIMENTAL with a\n+        // check on LIBEVENT_VERSION_NUMBER.\n+        boost::filesystem::path name = boost::filesystem::path(host.substr(RPC_ADDR_PREFIX_UNIX.size()));\n+        // If path is not complete, it is interpreted relative to the data directory.\n+        if (!name.is_complete()) {\n+            name = GetDataDir(true) / name;\n+        }\n+        struct bufferevent *bev = evunix_connect(base.get(), name);\n+        if (bev == NULL) {\n+            throw CConnectionFailed(\"couldn't connect to UNIX socket \" + name.string());\n+        }\n+        evcon = raii_evhttp_connection(\n+            evhttp_connection_base_bufferevent_new(base.get(), NULL, bev, \"\", 0)\n+        );\n+#elif defined(HAVE_SOCKADDR_UN)\n+        throw std::runtime_error(\"RPC was asked to connect to a UNIX socket. However, the version of libevent that this utility was compiled with has no support for that.\");\n+#else\n+        throw std::runtime_error(\"RPC was asked to connect to a UNIX socket, which is not supported on this system\");\n+#endif\n+    } else {\n+        // Synchronously look up hostname\n+        evcon = obtain_evhttp_connection_base(base.get(), host, port);\n+    }\n     evhttp_connection_set_timeout(evcon.get(), GetArg(\"-rpcclienttimeout\", DEFAULT_HTTP_CLIENT_TIMEOUT));\n \n     HTTPReply response;"
      },
      {
        "sha": "2bb6ed2f1dbabfd961021620978888355f3975a6",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45fad466d1b25478b384a3535460b6f679b3788c/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45fad466d1b25478b384a3535460b6f679b3788c/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=45fad466d1b25478b384a3535460b6f679b3788c",
        "patch": "@@ -21,12 +21,14 @@\n #include <signal.h>\n #include <future>\n \n+#include <boost/algorithm/string/predicate.hpp>\n #include <event2/event.h>\n #include <event2/http.h>\n #include <event2/thread.h>\n #include <event2/buffer.h>\n #include <event2/util.h>\n #include <event2/keyvalq_struct.h>\n+#include \"support/evunix.h\"\n \n #ifdef EVENT__HAVE_NETINET_IN_H\n #include <netinet/in.h>\n@@ -181,6 +183,10 @@ static WorkQueue<HTTPClosure>* workQueue = 0;\n std::vector<HTTPPathHandler> pathHandlers;\n //! Bound listening sockets\n std::vector<evhttp_bound_socket *> boundSockets;\n+#ifdef HAVE_SOCKADDR_UN\n+//! UNIX sockets to clean up on shutdown\n+std::vector<boost::filesystem::path> cleanupUNIXSockets;\n+#endif\n \n /** Check if a network address is allowed to access the HTTP server */\n static bool ClientAllowed(const CNetAddr& netaddr)\n@@ -331,6 +337,8 @@ static bool HTTPBindAddresses(struct evhttp* http)\n     } else if (mapMultiArgs.count(\"-rpcbind\")) { // Specific bind address\n         const std::vector<std::string>& vbind = mapMultiArgs.at(\"-rpcbind\");\n         for (std::vector<std::string>::const_iterator i = vbind.begin(); i != vbind.end(); ++i) {\n+            if (boost::starts_with(*i, RPC_ADDR_PREFIX_UNIX)) // Skip UNIX sockets here\n+                continue;\n             int port = defaultPort;\n             std::string host;\n             SplitHostPort(*i, port, host);\n@@ -351,6 +359,40 @@ static bool HTTPBindAddresses(struct evhttp* http)\n             LogPrintf(\"Binding RPC on address %s port %i failed.\\n\", i->first, i->second);\n         }\n     }\n+\n+    // UNIX socket binding: this is done in a separate pass because it does not care whether\n+    // `-rpcallowip` is set.\n+    if (mapMultiArgs.count(\"-rpcbind\")) {\n+        const std::vector<std::string>& vbind = mapMultiArgs.at(\"-rpcbind\");\n+        for (std::vector<std::string>::const_iterator i = vbind.begin(); i != vbind.end(); ++i) {\n+            if (boost::starts_with(*i, RPC_ADDR_PREFIX_UNIX)) {\n+#ifdef HAVE_SOCKADDR_UN\n+                boost::filesystem::path name = boost::filesystem::path(i->substr(RPC_ADDR_PREFIX_UNIX.size()));\n+                int fd;\n+                evhttp_bound_socket *bind_handle = 0;\n+\n+                // If path is not complete, it is interpreted relative to the data directory.\n+                if (!name.is_complete()) {\n+                    name = GetDataDir(true) / name;\n+                }\n+\n+                LogPrint(\"http\", \"Binding RPC on UNIX socket %s\\n\", name.string());\n+                if ((fd = evunix_bind_fd(name)) != -1) {\n+                    bind_handle = evhttp_accept_socket_with_handle(http, fd);\n+                }\n+                if (bind_handle) {\n+                    boundSockets.push_back(bind_handle);\n+                    cleanupUNIXSockets.push_back(name);\n+                } else {\n+                    LogPrintf(\"Binding RPC on UNIX socket %s failed.\\n\", name.string());\n+                }\n+#else\n+                LogPrintf(\"WARNING: RPC was asked to bind on UNIX socket, which is not supported on this system\\n\");\n+#endif\n+            }\n+        }\n+    }\n+\n     return !boundSockets.empty();\n }\n \n@@ -505,6 +547,12 @@ void StopHTTPServer()\n         event_base_free(eventBase);\n         eventBase = 0;\n     }\n+#ifdef HAVE_SOCKADDR_UN\n+    //! Clean up UNIX sockets on shutdown\n+    for (const auto& path: cleanupUNIXSockets) {\n+         evunix_remove_socket(path);\n+    }\n+#endif\n     LogPrint(\"http\", \"Stopped HTTP server\\n\");\n }\n \n@@ -619,6 +667,12 @@ CService HTTPRequest::GetPeer()\n         const char* address = \"\";\n         uint16_t port = 0;\n         evhttp_connection_get_peer(con, (char**)&address, &port);\n+        if (!strcmp(address, \"localhost\")) {\n+            /* Special: will get here for UNIX sockets. As we have no way to indicate that,\n+             * just pass localhost IPv6.\n+             */\n+            address = \"::1\";\n+        }\n         peer = LookupNumeric(address, port);\n     }\n     return peer;"
      },
      {
        "sha": "0f768dfdc3c028d791a65d14f746225fa3ca2ef7",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45fad466d1b25478b384a3535460b6f679b3788c/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45fad466d1b25478b384a3535460b6f679b3788c/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=45fad466d1b25478b384a3535460b6f679b3788c",
        "patch": "@@ -15,6 +15,9 @@\n #include <stdint.h>\n #include <fstream>\n \n+/** To bind to a UNIX socket, use this prefix on rpcbind: */\n+const std::string RPC_ADDR_PREFIX_UNIX = \":unix:\";\n+\n /**\n  * JSON-RPC protocol.  Bitcoin speaks version 1.0 for maximum compatibility,\n  * but uses JSON-RPC 1.1/2.0 standards for parts of the 1.0 standard that were"
      },
      {
        "sha": "0aa5f1185ca0df09fb06eec127cb2147048a6ede",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45fad466d1b25478b384a3535460b6f679b3788c/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45fad466d1b25478b384a3535460b6f679b3788c/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=45fad466d1b25478b384a3535460b6f679b3788c",
        "patch": "@@ -88,6 +88,9 @@ UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const Un\n std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n UniValue JSONRPCError(int code, const std::string& message);\n \n+/** To bind to a UNIX socket, use this prefix on rpcbind. */\n+extern const std::string RPC_ADDR_PREFIX_UNIX;\n+\n /** Get name of RPC authentication cookie file */\n boost::filesystem::path GetAuthCookieFile();\n /** Generate a new RPC authentication cookie and write it to disk */"
      },
      {
        "sha": "ab6985ade6c691b304b6f3baae2b640a212205c4",
        "filename": "src/support/evunix.cpp",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45fad466d1b25478b384a3535460b6f679b3788c/src/support/evunix.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45fad466d1b25478b384a3535460b6f679b3788c/src/support/evunix.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/evunix.cpp?ref=45fad466d1b25478b384a3535460b6f679b3788c",
        "patch": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include \"evunix.h\"\n+\n+#include <sys/socket.h>\n+#include <sys/un.h>\n+\n+#include <event2/bufferevent.h>\n+#include <boost/filesystem/operations.hpp>\n+\n+/** Helper function to initialize a sockaddr_un from a path */\n+static bool sockaddr_from_path(struct sockaddr_un *addr, const boost::filesystem::path &path)\n+{\n+    std::string name = path.string();\n+    if (name.size() >= sizeof(addr->sun_path)) {\n+        /* Name too long */\n+        return false;\n+    }\n+    memset(addr, 0, sizeof(struct sockaddr_un));\n+    addr->sun_family = AF_UNIX;\n+    strncpy(addr->sun_path, name.c_str(), sizeof(addr->sun_path)-1);\n+    return true;\n+}\n+\n+bool evunix_remove_socket(const boost::filesystem::path &path)\n+{\n+    if (boost::filesystem::status(path).type() == boost::filesystem::socket_file) {\n+        boost::system::error_code ec;\n+        boost::filesystem::remove(path, ec);\n+        if (ec) { /* error while deleting */\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+int evunix_bind_fd(const boost::filesystem::path &path)\n+{\n+    struct sockaddr_un addr;\n+    if (!sockaddr_from_path(&addr, path)) {\n+        return -1;\n+    }\n+    int fd = socket(AF_UNIX, SOCK_STREAM, 0);\n+    if (fd < 0) {\n+        return -1;\n+    }\n+    /* Remove any previous sockets left behind. listen() will refuse to overwrite\n+     * any file or socket. Remove only sockets, not other files that happen to have\n+     * the same name.\n+     */\n+    if (!evunix_remove_socket(path)) {\n+        close(fd);\n+        return -1;\n+    }\n+    /* Bind and listen */\n+    if (bind(fd, (struct sockaddr*)&addr, sizeof(addr)) < 0) {\n+        close(fd);\n+        return -1;\n+    }\n+    if (listen(fd, 5) < 0) {\n+        close(fd);\n+        return -1;\n+    }\n+    evutil_make_socket_nonblocking(fd);\n+    return fd;\n+}\n+\n+int evunix_connect_fd(const boost::filesystem::path &path)\n+{\n+    struct sockaddr_un addr;\n+    if (!sockaddr_from_path(&addr, path)) {\n+        return -1;\n+    }\n+    int fd = socket(AF_UNIX, SOCK_STREAM, 0);\n+    if (fd < 0) {\n+        return -1;\n+    }\n+    if (connect(fd, (struct sockaddr*)&addr, sizeof(addr)) < 0) {\n+        close(fd);\n+        return -1;\n+    }\n+    evutil_make_socket_nonblocking(fd);\n+    return fd;\n+}\n+\n+struct bufferevent *evunix_bind(struct event_base *base, const boost::filesystem::path &path)\n+{\n+    struct bufferevent *rv;\n+    int fd = evunix_bind_fd(path);\n+    if ((rv = bufferevent_socket_new(base, fd, 0)) == NULL) {\n+        close(fd);\n+        return NULL;\n+    }\n+    return rv;\n+}\n+\n+struct bufferevent *evunix_connect(struct event_base *base, const boost::filesystem::path &path)\n+{\n+    struct bufferevent *rv;\n+    int fd = evunix_connect_fd(path);\n+    if ((rv = bufferevent_socket_new(base, fd, 0)) == NULL) {\n+        close(fd);\n+        return NULL;\n+    }\n+    return rv;\n+}"
      },
      {
        "sha": "e5fd79bbd0270af7573b4d251acd458cd4395bec",
        "filename": "src/support/evunix.h",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45fad466d1b25478b384a3535460b6f679b3788c/src/support/evunix.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45fad466d1b25478b384a3535460b6f679b3788c/src/support/evunix.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/evunix.h?ref=45fad466d1b25478b384a3535460b6f679b3788c",
        "patch": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_EVUNIX_H\n+#define BITCOIN_EVUNIX_H\n+\n+/** Libevent<->UNIX socket bridge functions */\n+\n+#include <boost/filesystem/path.hpp>\n+\n+struct event_base;\n+struct bufferevent;\n+\n+/** Bind on a UNIX socket.\n+ * Returns a bufferevent that can be used to send or receive data on the socket, or NULL\n+ * on failure.\n+ */\n+struct bufferevent *evunix_bind(const boost::filesystem::path &path);\n+\n+/** Bind on a UNIX socket, return fd.\n+ * Return a file descriptor ready to pass to evhttp_accept_socket_with_handle, or -1\n+ * on failure.\n+ */\n+int evunix_bind_fd(const boost::filesystem::path &path);\n+\n+/** Connect to a UNIX socket.\n+ * Returns a bufferevent that can be used to send or receive data on the socket, or NULL\n+ * on failure.\n+ */\n+struct bufferevent *evunix_connect(struct event_base *base, const boost::filesystem::path &path);\n+\n+/** Connect to a UNIX socket, return fd.\n+ * Return a file descriptor ready to use, or -1 on failure.\n+ */\n+int evunix_connect_fd(const boost::filesystem::path &path);\n+\n+/* Remove only sockets, not other files that happen to have\n+ * the same name.\n+ */\n+bool evunix_remove_socket(const boost::filesystem::path &path);\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "6218b113282a7464d2da2d531f2cd69bf919f4de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjE4YjExMzI4MmE3NDY0ZDJkYTJkNTMxZjJjZDY5YmY5MTlmNGRl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-06T14:50:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-12T13:59:17Z"
      },
      "message": "tests: Run RPC tests optionally over UNIX socket",
      "tree": {
        "sha": "0972b4243074c0c0db1cc2d2f28ffae23fa06961",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0972b4243074c0c0db1cc2d2f28ffae23fa06961"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6218b113282a7464d2da2d531f2cd69bf919f4de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6218b113282a7464d2da2d531f2cd69bf919f4de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6218b113282a7464d2da2d531f2cd69bf919f4de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6218b113282a7464d2da2d531f2cd69bf919f4de/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45fad466d1b25478b384a3535460b6f679b3788c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45fad466d1b25478b384a3535460b6f679b3788c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45fad466d1b25478b384a3535460b6f679b3788c"
      }
    ],
    "stats": {
      "total": 213,
      "additions": 163,
      "deletions": 50
    },
    "files": [
      {
        "sha": "59cef159173ad17668abd148cd24707f4f892ee0",
        "filename": "qa/rpc-tests/abandonconflict.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/abandonconflict.py?ref=6218b113282a7464d2da2d531f2cd69bf919f4de",
        "patch": "@@ -23,8 +23,8 @@ def __init__(self):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.00001\"]))\n-        self.nodes.append(start_node(1, self.options.tmpdir))\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.00001\"], rpchost=\"127.0.0.1\"))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [], rpchost=\"127.0.0.1\"))\n         connect_nodes(self.nodes[0], 1)\n \n     def run_test(self):"
      },
      {
        "sha": "67d5db366a938c3e67fa91a41cbe0c6b7eb66353",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=6218b113282a7464d2da2d531f2cd69bf919f4de",
        "patch": "@@ -17,7 +17,7 @@ def __init__(self):\n         self.setup_clean_chain = False\n \n     def setup_network(self):\n-        self.nodes = self.setup_nodes()\n+        self.nodes = self.setup_nodes(rpchost=\"127.0.0.1\")\n \n     def run_test(self):\n "
      },
      {
        "sha": "b0e9b82cec7068e84756e35c6acd968c05129b04",
        "filename": "qa/rpc-tests/multi_rpc.py",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/multi_rpc.py?ref=6218b113282a7464d2da2d531f2cd69bf919f4de",
        "patch": "@@ -18,17 +18,13 @@ def __init__(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 1\n \n-    def setup_chain(self):\n-        super().setup_chain()\n-        #Append rpcauth to bitcoin.conf before initialization\n-        rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n-        rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n-        with open(os.path.join(self.options.tmpdir+\"/node0\", \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n-            f.write(rpcauth+\"\\n\")\n-            f.write(rpcauth2+\"\\n\")\n-\n     def setup_network(self):\n-        self.nodes = self.setup_nodes()\n+        # Pass in extra RPC authentication information\n+        extra_args = [[\n+            \"-rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\",\n+            \"-rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n+        ]]\n+        self.nodes = self.setup_nodes(rpchost='127.0.0.1', extra_args=extra_args)\n \n     def run_test(self):\n "
      },
      {
        "sha": "c5e34294d2fba55a035880300a594756a34e235c",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=6218b113282a7464d2da2d531f2cd69bf919f4de",
        "patch": "@@ -16,6 +16,9 @@ def __init__(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n \n+    def setup_nodes(self):\n+        return start_nodes(self.num_nodes, self.options.tmpdir, rpchost='127.0.0.1')\n+\n     def run_test(self):\n         ###########################\n         # setban/listbanned tests #"
      },
      {
        "sha": "9fe5d488af02d6859ac6ee1d2ee102a595533996",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=6218b113282a7464d2da2d531f2cd69bf919f4de",
        "patch": "@@ -49,7 +49,7 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, rpchost='127.0.0.1')\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)"
      },
      {
        "sha": "18145c224fc9aa002b51a547210426102d05eb5d",
        "filename": "qa/rpc-tests/test_framework/conninfo.py",
        "status": "added",
        "additions": 75,
        "deletions": 0,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/test_framework/conninfo.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/test_framework/conninfo.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/conninfo.py?ref=6218b113282a7464d2da2d531f2cd69bf919f4de",
        "patch": "@@ -0,0 +1,75 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+import os\n+\n+from .uhttpconnection import UHTTPConnection\n+\n+# UNIX socket name for RPC connection (in data directory)\n+RPC_SOCKET_NAME = \"rpc_socket\"\n+\n+class RPCConnectInfo:\n+    '''\n+    Base class for RPC connection info. This class encapsulates both information\n+    required to connect to RPC, as to configure bitcoind to listen on that transport.\n+    '''\n+    def make_connection(self):\n+        '''\n+        Returns the 'connection' argument to pass to the RPCAuthService.\n+        Can be None to let that class figure it out itself.\n+        '''\n+        raise NotImplementedError\n+\n+    @property\n+    def bitcoind_args(self):\n+        '''\n+        Return arguments for setting up bitcoind.\n+        '''\n+        raise NotImplementedError\n+\n+class RPCConnectInfoTCP:\n+    '''RPC connection info for connecting over TCP'''\n+    def __init__(self, node_number, auth, rpchost, rpcport):\n+        self.node_number = node_number # node number is just for informational purposes\n+        self.auth = auth\n+        self.host = '127.0.0.1'\n+        self.port = rpcport\n+        if rpchost: # \"rpchost\" can override both host and port\n+            parts = rpchost.split(':')\n+            self.host = parts[0]\n+            if len(parts) == 2:\n+                self.port = int(parts[1])\n+        self.url = \"http://%s:%s@%s:%d\" % (auth[0], auth[1], self.host, self.port)\n+\n+    def make_connection(self):\n+        # This is done inside the AuthServiceProxy\n+        return None\n+\n+    @property\n+    def bitcoind_args(self):\n+        # rpchost is ignored here because the test will take care of passing in the\n+        # appropriate rpcbind arguments.\n+        return [(\"rpcuser\", self.auth[0]),\n+                (\"rpcpassword\", self.auth[1]),\n+                (\"rpcport\", str(self.port))]\n+\n+class RPCConnectInfoUNIX:\n+    '''RPC connection info for connecting over UNIX socket'''\n+    def __init__(self, node_number, auth, dirname):\n+        self.node_number = node_number\n+        self.auth = auth\n+        self.sockname = os.path.join(dirname, RPC_SOCKET_NAME)\n+        # use \"localhost\" as fake hostname. It doesn't matter.\n+        self.url = \"http://%s:%s@localhost\" % auth\n+\n+    def make_connection(self):\n+        return UHTTPConnection(self.sockname)\n+\n+    @property\n+    def bitcoind_args(self):\n+        return [(\"rpcuser\", self.auth[0]),\n+                (\"rpcpassword\", self.auth[1]),\n+                (\"rpcbind\", \":unix:\"+self.sockname),\n+                (\"rpcconnect\", \":unix:\"+self.sockname)]\n+"
      },
      {
        "sha": "090143dce4703e45951578552a5b6327502d4cd8",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=6218b113282a7464d2da2d531f2cd69bf919f4de",
        "patch": "@@ -51,8 +51,8 @@ def setup_chain(self):\n     def stop_node(self, num_node):\n         stop_node(self.nodes[num_node], num_node)\n \n-    def setup_nodes(self):\n-        return start_nodes(self.num_nodes, self.options.tmpdir)\n+    def setup_nodes(self, rpchost=None, extra_args=None):\n+        return start_nodes(self.num_nodes, self.options.tmpdir, rpchost=rpchost, extra_args=extra_args)\n \n     def setup_network(self, split = False):\n         self.nodes = self.setup_nodes()"
      },
      {
        "sha": "acb49e759a22eade5d258a3f233aff16850685f7",
        "filename": "qa/rpc-tests/test_framework/uhttpconnection.py",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/test_framework/uhttpconnection.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/test_framework/uhttpconnection.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/uhttpconnection.py?ref=6218b113282a7464d2da2d531f2cd69bf919f4de",
        "patch": "@@ -0,0 +1,33 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Inspired by \"HTTP on Unix sockets with Python\"\n+# From: http://7bits.nl/blog/posts/http-on-unix-sockets-with-python\n+import http.client\n+import socket\n+\n+def have_af_unix():\n+    '''Return True if UNIX sockets are available on this platform.'''\n+    try:\n+        socket.AF_UNIX\n+    except AttributeError:\n+        return False\n+    else:\n+        return True\n+\n+class UHTTPConnection(http.client.HTTPConnection):\n+    \"\"\"Subclass of Python library HTTPConnection that\n+       uses a unix-domain socket.\n+    \"\"\"\n+\n+    def __init__(self, path):\n+        http.client.HTTPConnection.__init__(self, 'localhost')\n+        self.path = path\n+\n+    def connect(self):\n+        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n+        sock.connect(self.path)\n+        self.sock = sock\n+"
      },
      {
        "sha": "e2ed7678cd86fc54320f139e834cfef0942c354f",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 40,
        "deletions": 34,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6218b113282a7464d2da2d531f2cd69bf919f4de/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=6218b113282a7464d2da2d531f2cd69bf919f4de",
        "patch": "@@ -23,6 +23,8 @@\n \n from . import coverage\n from .authproxy import AuthServiceProxy, JSONRPCException\n+from .conninfo import RPCConnectInfoTCP, RPCConnectInfoUNIX\n+from .uhttpconnection import have_af_unix\n \n COVERAGE_DIR = None\n \n@@ -69,11 +71,10 @@ def enable_coverage(dirname):\n     COVERAGE_DIR = dirname\n \n \n-def get_rpc_proxy(url, node_number, timeout=None):\n+def get_rpc_proxy(conninfo, timeout=None):\n     \"\"\"\n     Args:\n-        url (str): URL of the RPC server to call\n-        node_number (int): the node number (or id) that this calls to\n+        urlinfo (RPCConnectInfo): Connection info of the RPC server to call\n \n     Kwargs:\n         timeout (int): HTTP timeout in seconds\n@@ -85,12 +86,13 @@ def get_rpc_proxy(url, node_number, timeout=None):\n     proxy_kwargs = {}\n     if timeout is not None:\n         proxy_kwargs['timeout'] = timeout\n+    proxy_kwargs['connection'] = conninfo.make_connection()\n \n-    proxy = AuthServiceProxy(url, **proxy_kwargs)\n-    proxy.url = url  # store URL on proxy for info\n+    proxy = AuthServiceProxy(conninfo.url, **proxy_kwargs)\n+    proxy.url = conninfo.url  # store URL on proxy for info\n \n     coverage_logfile = coverage.get_filename(\n-        COVERAGE_DIR, node_number) if COVERAGE_DIR else None\n+        COVERAGE_DIR, conninfo.node_number) if COVERAGE_DIR else None\n \n     return coverage.AuthServiceProxyWrapper(proxy, coverage_logfile)\n \n@@ -177,36 +179,39 @@ def sync_mempools(rpc_connections, *, wait=1, timeout=60):\n \n bitcoind_processes = {}\n \n-def initialize_datadir(dirname, n):\n+def initialize_datadir(dirname, n, rpchost=None):\n+    '''\n+    Initialize datadir and write bitcoin configuration.\n+    '''\n     datadir = os.path.join(dirname, \"node\"+str(n))\n+    conninfo = conninfo_for(n, rpchost, datadir)\n     if not os.path.isdir(datadir):\n         os.makedirs(datadir)\n-    rpc_u, rpc_p = rpc_auth_pair(n)\n     with open(os.path.join(datadir, \"bitcoin.conf\"), 'w', encoding='utf8') as f:\n         f.write(\"regtest=1\\n\")\n-        f.write(\"rpcuser=\" + rpc_u + \"\\n\")\n-        f.write(\"rpcpassword=\" + rpc_p + \"\\n\")\n         f.write(\"port=\"+str(p2p_port(n))+\"\\n\")\n-        f.write(\"rpcport=\"+str(rpc_port(n))+\"\\n\")\n         f.write(\"listenonion=0\\n\")\n-    return datadir\n+        for (key, value) in conninfo.bitcoind_args:\n+            f.write('%s=%s\\n' % (key, value))\n+    return datadir, conninfo\n \n def rpc_auth_pair(n):\n     return 'rpcuser\ud83d\udcbb' + str(n), 'rpcpass\ud83d\udd11' + str(n)\n \n-def rpc_url(i, rpchost=None):\n-    rpc_u, rpc_p = rpc_auth_pair(i)\n-    host = '127.0.0.1'\n-    port = rpc_port(i)\n-    if rpchost:\n-        parts = rpchost.split(':')\n-        if len(parts) == 2:\n-            host, port = parts\n-        else:\n-            host = rpchost\n-    return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, host, int(port))\n+def conninfo_for(node_number, rpchost, datadir):\n+    '''\n+    Return connection info for connecting to a certain node, by number.\n+    This is where the decision of what transport to use is made.\n+\n+    rpchost: Override host to connect to (if provided, forces connection through TCP).\n+    datadir: Data directory\n+    '''\n+    if have_af_unix() and rpchost is None: # Prefer connecting over a UNIX socket, if available\n+        return RPCConnectInfoUNIX(node_number, rpc_auth_pair(node_number), datadir)\n+    else:\n+        return RPCConnectInfoTCP(node_number, rpc_auth_pair(node_number), rpchost, rpc_port(node_number))\n \n-def wait_for_bitcoind_start(process, url, i):\n+def wait_for_bitcoind_start(process, conninfo):\n     '''\n     Wait for bitcoind to start. This means that RPC is accessible and fully initialized.\n     Raise an exception if bitcoind exits during initialization.\n@@ -215,11 +220,11 @@ def wait_for_bitcoind_start(process, url, i):\n         if process.poll() is not None:\n             raise Exception('bitcoind exited with status %i during initialization' % process.returncode)\n         try:\n-            rpc = get_rpc_proxy(url, i)\n+            rpc = get_rpc_proxy(conninfo)\n             blocks = rpc.getblockcount()\n             break # break out of loop on success\n         except IOError as e:\n-            if e.errno != errno.ECONNREFUSED: # Port not yet open?\n+            if e.errno != errno.ECONNREFUSED and e.errno != errno.ENOENT: # Port not yet open or socket not yet created?\n                 raise # unknown IO error\n         except JSONRPCException as e: # Initialization phase\n             if e.error['code'] != -28: # RPC in warmup?\n@@ -248,20 +253,22 @@ def initialize_chain(test_dir, num_nodes, cachedir):\n                 shutil.rmtree(os.path.join(cachedir,\"node\"+str(i)))\n \n         # Create cache directories, run bitcoinds:\n+        conninfos = []\n         for i in range(MAX_NODES):\n-            datadir=initialize_datadir(cachedir, i)\n+            datadir, conninfo = initialize_datadir(cachedir, i)\n             args = [ os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\"+datadir, \"-discover=0\" ]\n             if i > 0:\n                 args.append(\"-connect=127.0.0.1:\"+str(p2p_port(0)))\n             bitcoind_processes[i] = subprocess.Popen(args)\n             logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-            wait_for_bitcoind_start(bitcoind_processes[i], rpc_url(i), i)\n+            wait_for_bitcoind_start(bitcoind_processes[i], conninfo)\n             logger.debug(\"initialize_chain: RPC successfully started\")\n+            conninfos.append(conninfo)\n \n         rpcs = []\n         for i in range(MAX_NODES):\n             try:\n-                rpcs.append(get_rpc_proxy(rpc_url(i), i))\n+                rpcs.append(get_rpc_proxy(conninfos[i]))\n             except:\n                 sys.stderr.write(\"Error connecting to \"+url+\"\\n\")\n                 sys.exit(1)\n@@ -305,24 +312,23 @@ def initialize_chain_clean(test_dir, num_nodes):\n     Useful if a test case wants complete control over initialization.\n     \"\"\"\n     for i in range(num_nodes):\n-        datadir=initialize_datadir(test_dir, i)\n+        initialize_datadir(test_dir, i)\n \n \n def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n     \"\"\"\n     Start a bitcoind and return RPC connection to it\n     \"\"\"\n-    datadir = os.path.join(dirname, \"node\"+str(i))\n+    datadir,conninfo = initialize_datadir(dirname, i, rpchost)\n     if binary is None:\n         binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n     args = [ binary, \"-datadir=\"+datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-mocktime=\"+str(get_mocktime()) ]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n     logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-    url = rpc_url(i, rpchost)\n-    wait_for_bitcoind_start(bitcoind_processes[i], url, i)\n+    wait_for_bitcoind_start(bitcoind_processes[i], conninfo)\n     logger.debug(\"initialize_chain: RPC successfully started\")\n-    proxy = get_rpc_proxy(url, i, timeout=timewait)\n+    proxy = get_rpc_proxy(conninfo, timeout=timewait)\n \n     if COVERAGE_DIR:\n         coverage.write_all_rpc_commands(COVERAGE_DIR, proxy)"
      }
    ]
  },
  {
    "sha": "f5acc052a8cef7c40d1551b12370eccb2a372094",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWFjYzA1MmE4Y2VmN2M0MGQxNTUxYjEyMzcwZWNjYjJhMzcyMDk0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-07T06:17:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-12T13:59:17Z"
      },
      "message": "tests: Add environment option to force RPC over TCP for tests",
      "tree": {
        "sha": "ea70c2ad56bec66f9a2afa306fa5af6cd7b474bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea70c2ad56bec66f9a2afa306fa5af6cd7b474bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5acc052a8cef7c40d1551b12370eccb2a372094",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5acc052a8cef7c40d1551b12370eccb2a372094",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5acc052a8cef7c40d1551b12370eccb2a372094",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5acc052a8cef7c40d1551b12370eccb2a372094/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6218b113282a7464d2da2d531f2cd69bf919f4de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6218b113282a7464d2da2d531f2cd69bf919f4de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6218b113282a7464d2da2d531f2cd69bf919f4de"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "190b44db5d54900b6824cb92a2fe94adad724155",
        "filename": "qa/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5acc052a8cef7c40d1551b12370eccb2a372094/qa/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5acc052a8cef7c40d1551b12370eccb2a372094/qa/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/README.md?ref=f5acc052a8cef7c40d1551b12370eccb2a372094",
        "patch": "@@ -63,6 +63,10 @@ Possible options, which apply to each individual test run:\n If you set the environment variable `PYTHON_DEBUG=1` you will get some debug\n output (example: `PYTHON_DEBUG=1 qa/pull-tester/rpc-tests.py wallet`).\n \n+To force the tests to use RPC over TCP instead of a UNIX socket (this\n+can be useful for troubleshooting) define the environment variable\n+`BITCOIN_TEST_RPC_TCP` as `1`.\n+\n A 200-block -regtest blockchain and wallets for four nodes\n is created the first time a regression test is run and\n is stored in the cache/ directory. Each node has 25 mature"
      },
      {
        "sha": "458b0e2bffa665f5713228b15ad30932df876f47",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5acc052a8cef7c40d1551b12370eccb2a372094/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5acc052a8cef7c40d1551b12370eccb2a372094/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=f5acc052a8cef7c40d1551b12370eccb2a372094",
        "patch": "@@ -206,7 +206,7 @@ def conninfo_for(node_number, rpchost, datadir):\n     rpchost: Override host to connect to (if provided, forces connection through TCP).\n     datadir: Data directory\n     '''\n-    if have_af_unix() and rpchost is None: # Prefer connecting over a UNIX socket, if available\n+    if have_af_unix() and rpchost is None and not int(os.getenv(\"BITCOIN_TEST_RPC_TCP\",\"0\")): # Prefer connecting over a UNIX socket, if available\n         return RPCConnectInfoUNIX(node_number, rpc_auth_pair(node_number), datadir)\n     else:\n         return RPCConnectInfoTCP(node_number, rpc_auth_pair(node_number), rpchost, rpc_port(node_number))"
      }
    ]
  },
  {
    "sha": "695e854a0444bb5c81b1422494451f17db0b5f1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTVlODU0YTA0NDRiYjVjODFiMTQyMjQ5NDQ1MWYxN2RiMGI1ZjFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-12T13:57:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-12T14:11:39Z"
      },
      "message": "rpc: More robust localhost-UNIX detection\n\nevhttp has no direct support for UNIX sockets thus\nis not able to recognize UNIX peers. Add custom code in\nHTTPRequest::GetPeer and evunix to recognize these connections\nas coming from localhost.\n\nThe previous solution did not work on some libevent versions.",
      "tree": {
        "sha": "ba39c9758d27f5973ca5d8d90ffbd5cbccae2b3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba39c9758d27f5973ca5d8d90ffbd5cbccae2b3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/695e854a0444bb5c81b1422494451f17db0b5f1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/695e854a0444bb5c81b1422494451f17db0b5f1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/695e854a0444bb5c81b1422494451f17db0b5f1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/695e854a0444bb5c81b1422494451f17db0b5f1e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5acc052a8cef7c40d1551b12370eccb2a372094",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5acc052a8cef7c40d1551b12370eccb2a372094",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5acc052a8cef7c40d1551b12370eccb2a372094"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 46,
      "deletions": 6
    },
    "files": [
      {
        "sha": "915c7651c78616d2be7a7e37f41d964a18b8793c",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/695e854a0444bb5c81b1422494451f17db0b5f1e/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/695e854a0444bb5c81b1422494451f17db0b5f1e/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=695e854a0444bb5c81b1422494451f17db0b5f1e",
        "patch": "@@ -663,16 +663,21 @@ CService HTTPRequest::GetPeer()\n     evhttp_connection* con = evhttp_request_get_connection(req);\n     CService peer;\n     if (con) {\n+#ifdef HAVE_SOCKADDR_UN\n+        // evhttp has no way to query what bindsocket a connection\n+        // came in on, so we need this low-level code to be able to\n+        // correctly mark UNIX socket connections as coming from localhost.\n+        struct bufferevent *bev = evhttp_connection_get_bufferevent(con);\n+        if (bev && evunix_is_conn_from_unix(bev)) {\n+            // As we have no way to signify \"UNIX localhost\" here, just return\n+            // IPv6 localhost.\n+            return LookupNumeric(\"::1\", 0);\n+        }\n+#endif\n         // evhttp retains ownership over returned address string\n         const char* address = \"\";\n         uint16_t port = 0;\n         evhttp_connection_get_peer(con, (char**)&address, &port);\n-        if (!strcmp(address, \"localhost\")) {\n-            /* Special: will get here for UNIX sockets. As we have no way to indicate that,\n-             * just pass localhost IPv6.\n-             */\n-            address = \"::1\";\n-        }\n         peer = LookupNumeric(address, port);\n     }\n     return peer;"
      },
      {
        "sha": "dc26be7c3ba346258c4001c42f5b0ae33e5ad5e2",
        "filename": "src/support/evunix.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/695e854a0444bb5c81b1422494451f17db0b5f1e/src/support/evunix.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/695e854a0444bb5c81b1422494451f17db0b5f1e/src/support/evunix.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/evunix.cpp?ref=695e854a0444bb5c81b1422494451f17db0b5f1e",
        "patch": "@@ -84,6 +84,18 @@ int evunix_connect_fd(const boost::filesystem::path &path)\n     return fd;\n }\n \n+bool evunix_is_conn_from_unix_fd(int fd)\n+{\n+    struct sockaddr_un peer_unix;\n+    socklen_t peer_unix_len = sizeof(peer_unix);\n+    if (getpeername(fd, (sockaddr*)&peer_unix, &peer_unix_len) == 0) {\n+        if (peer_unix.sun_family == AF_UNIX) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n struct bufferevent *evunix_bind(struct event_base *base, const boost::filesystem::path &path)\n {\n     struct bufferevent *rv;\n@@ -105,3 +117,12 @@ struct bufferevent *evunix_connect(struct event_base *base, const boost::filesys\n     }\n     return rv;\n }\n+\n+bool evunix_is_conn_from_unix(struct bufferevent *bev)\n+{\n+    int fd;\n+    if ((fd = bufferevent_getfd(bev)) != -1) {\n+        return evunix_is_conn_from_unix_fd(fd);\n+    }\n+    return false;\n+}"
      },
      {
        "sha": "7dd2ad477ccdce2feaf5237e0304fef41e9ea441",
        "filename": "src/support/evunix.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/695e854a0444bb5c81b1422494451f17db0b5f1e/src/support/evunix.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/695e854a0444bb5c81b1422494451f17db0b5f1e/src/support/evunix.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/evunix.h?ref=695e854a0444bb5c81b1422494451f17db0b5f1e",
        "patch": "@@ -11,6 +11,10 @@\n struct event_base;\n struct bufferevent;\n \n+// All these functions come in a plain (high-level) and _fd (low-level)\n+// variant. The plain version takes/yields a libevent bufferevent*, the _fd\n+// functions file descriptor.\n+\n /** Bind on a UNIX socket.\n  * Returns a bufferevent that can be used to send or receive data on the socket, or NULL\n  * on failure.\n@@ -39,4 +43,14 @@ int evunix_connect_fd(const boost::filesystem::path &path);\n  */\n bool evunix_remove_socket(const boost::filesystem::path &path);\n \n+/** Return whether incoming connection fd came in on a UNIX socket.\n+ */\n+bool evunix_is_conn_from_unix_fd(int fd);\n+\n+/** Return whether incoming connection bev came in on a UNIX socket.\n+ * This is a hack because evhttp won't let us know what bound socket a connection\n+ * came in on.\n+ */\n+bool evunix_is_conn_from_unix(struct bufferevent *bev);\n+\n #endif"
      }
    ]
  }
]