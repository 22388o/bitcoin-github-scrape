gmaxwell,2017-03-04T18:44:57Z,Neat.,https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-284172064,284172064,
paveljanik,2017-03-04T19:46:09Z,"This does not compile with `libevent2-2.0.22` which is OK with the current master.\n\n```\nbitcoin-cli.cpp:214:13: error: use of undeclared identifier `evhttp_connection_base_bufferevent_new'\n            evhttp_connection_base_bufferevent_new(base.get(), __null, bev, """", 0)\n            ^\n1 error generated.\n```\n\nhttps://github.com/libevent/libevent/blob/e7ff4ef2b4fc950a765008c18e7428",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-284176052,284176052,
laanwj,2017-03-04T21:05:12Z,"@paveljanik Yes, that needs a version `#ifdef`, that call doesn't exist in older versions of libevent, and on newer ones (until my patch lands) it ignores the current connection and tries to open a new one so that trick doesn't work. I'd recommend testing with my patched libevent. Alternatively comment out the bitcoin-cli change and test connecting with something else:\n- `nc -U <socket>` works, ",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-284180780,284180780,
TheBlueMatt,2017-03-04T21:21:32Z,"For merge we should probably just not have the client version, then?\n\nStill, this is cool - lots of better auth controls can be applied to\nsockets than IPs :)\n\nOn 03/04/17 21:05, Wladimir J. van der Laan wrote:\n> @paveljanik <https://github.com/paveljanik> Yes, that needs a version\n> |#ifdef|, that call doesn't exist in older versions of libevent, and on\n> newer ones (until my patch lands)",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-284182742,284182742,
laanwj,2017-03-04T21:27:58Z,"> For merge we should probably just not have the client version, then?\n\nWould prefer putting it behind `#ifdef EXPERIMENTAL_LIBEVENT` or such, with a comment that it can be replaced with the appropriate version comparison when it lands in a version. That way, people that compile their own stuff can use it already.",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-284183850,284183850,
laanwj,2017-03-05T10:43:13Z,"> Still, this is cool - lots of better auth controls can be applied to\nsockets than IPs :)\n\nIndeed. Default permissions of the socket will be `700` due to our umask setting (can be overridden with `-sysperms`), which seems okay:\n```\nsrwx------  1 user user          0 Mar  5 11:40 socket\n```",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-284219635,284219635,
jonasschnelli,2017-03-06T08:30:38Z,"This is great!\nConcept ACK.",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-284332202,284332202,
laanwj,2017-03-06T16:54:08Z,"Added a commit that makes the tests' RPC run over UNIX sockets on platforms that support it, except for a few tests that make explicit assumptions about running over TCP/IP.",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-284458365,284458365,
jnewbery,2017-03-06T23:41:16Z,"I've been trying to test this locally by running the qa tests. Something that I do quite often is to run the tests with --noshutdown, wait for the test to fail, and use bitcoin-cli to interactively run RPCs on the test nodes:\n\n`bitcoin.conf -conf=<test temp directory>/node<x>/bitcoin.conf`\n\nWith this PR, I'm not able to do that anymore because the conf file doesn't contain the username/pas",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-284571556,284571556,
laanwj,2017-03-07T05:59:38Z,"> With this PR, I'm not able to do that anymore because the conf file doesn't contain the username/password, and even when I add them back in, I get the error:\n\nRight, I could change it to add the options (including `-rpcconnect`) to the bitcoin.conf. \n\n> And even when I add them back in, I get the error:\n\nThe above should work, though. That's exactly how I've been testing it. The conn",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-284629971,284629971,
laanwj,2017-03-07T07:03:02Z,"@jnewbery Okay, added two commits:\n- add `BITCOIN_TEST_RPC_TCP` environment variable to force tests to use TCP instead of UNIX sockets for RPC\n- write connection info to `bitcoin.conf` instead of providing it on the command line. `-conf` should just work, also for UNIX sockets, if your client supports it.\n",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-284639336,284639336,
laanwj,2017-03-09T08:23:27Z,"Needed rebase, so rebased and squashed the squasme: commits.",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-285285667,285285667,
jonasschnelli,2017-03-09T08:32:28Z,"F.I.Y:\nI wanted to test this via binaries built in gitian.\nI could start the daemon (wanted to test in conjunction with Q): ` ./bitcoin-0.14.99/bin/bitcoin-qt -debug=rpc -debug=http -rpcbind=nix:socket --regtest`\n\nHowever the CLI responded with:\n`error: RPC was asked to connect to a UNIX socket. However, the version of libevent that this utility was compiled with has no support for that.",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-285287406,285287406,
laanwj,2017-03-09T08:39:33Z,"> However the CLI responded with:\n\nYes, that's expected. `bitcoin-cli` support needs this patch: https://github.com/laanwj/libevent/commit/403b793771341460b262edb1abc31fae267174bd.patch  as well as defining `-DLIBEVENT_EXPERIMENTAL`\n\nWithout, you should still be able to use the socket with other clients, for example from Python or with curl. The server-side support is not dependent on that",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-285288774,285288774,
laanwj,2017-03-12T12:07:19Z,Rebased (RPC tests logging changes #9768),https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-285940308,285940308,
JeremyRubin,2017-04-05T16:30:53Z,"Oops, I accidentally did my review of this code on the other PR. See here https://github.com/bitcoin/bitcoin/pull/9979#pullrequestreview-31071186",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-291918623,291918623,
jnewbery,2017-05-09T20:58:49Z,"I've had a quick read through the changes to the functional tests, but I'll defer doing a full review until this is rebased. A few general comments:\n\n- I'd prefer a command line argument over and environment variable for `BITCOIN_TEST_RPC_TCP`, partly because adding a command line argument means the help text will be updated and the option will be better documented.\n- there's a response to y",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-300299405,300299405,
laanwj,2017-06-24T11:31:03Z,Closing this for now. I'll probably pick it up again for 0.16.,https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-310833262,310833262,
Sjors,2018-10-26T04:32:17Z,"Concept ACK. c-lightning does this too FWIW.\n\nThis was [briefly discussed](http://www.erisian.com.au/bitcoin-core-dev/log-2018-10-25.html#l-901) during the meeting today. Tag as Up for Grabs?",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-433283269,433283269,
MarcoFalke,2019-10-30T12:51:13Z,"Marked as ""up for grabs""",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-547886324,547886324,
laanwj,2019-10-30T12:56:47Z,"The server side should be easy to pick up.\nAs for the client side I have opened a libevent issue to track this here: https://github.com/libevent/libevent/issues/907\nUnfortunately there is very little interest from their side for this.",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-547888737,547888737,
vinipsmaker,2021-05-15T01:12:42Z,Does it have to be HTTP? Would it be easier to implement if it was pure (line delimited) JSON-RPC over UNIX domain sockets?,https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-841577083,841577083,
michaelfolkson,2021-09-22T15:30:25Z,"> Does it have to be HTTP? Would it be easier to implement if it was pure (line delimited) JSON-RPC over UNIX domain sockets?\n\nThis was discussed today on [IRC](https://gnusha.org/bitcoin-core-dev/2021-09-22.log). In summary, this is what c-lightning does for its UNIX socket support and what Core could potentially do in future for UNIX socket support as an alternative approach to getting a PR ",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-925041016,925041016,
ryanofsky,2021-09-22T16:18:24Z,"> i don't see any problem personally with adding support for unix sockets rpc server / client that uses plain json-rpc lines, if someone wants to work on that\n\nThis seems ok, but without URLs, you would have to decide how to handle wallet endpoints. Maybe create different sockets for different wallets like `<datadir>/wallets/<walletname>/rpc.sock`, or use one socket and accept an extra wallet ",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-925082423,925082423,
JeremyRubin,2021-09-22T16:44:07Z,"> Any non HTTP based UNIX socket support would need to be in addition to the existing HTTP based JSON-RPC rather than as a replacement.\n\ncontestable, i think it would be great to deprecate then remove http support & leave it up to external proxy services.",https://github.com/bitcoin/bitcoin/pull/9919#issuecomment-925101146,925101146,
laanwj,2017-03-04T16:00:20Z,"@theuni This is pretty ugly, but I don't quite know how to do this otherwise. My first intuition was to add the file to `libbitcoin_util_a_SOURCES`, however these can't depend on libevent as that is shared between all executables. There is no library that is shared between just `bitcoind` and `bitcoin-cli` and adding one just for this seems overkill.\n",https://github.com/bitcoin/bitcoin/pull/9919#discussion_r104290785,104290785,src/Makefile.am
ryanofsky,2017-05-05T22:18:32Z,"In commit ""rpc: UNIX sockets support""\n\nMaybe add a sock_from_path function to dedup code between evunix_bind_fd & evunix_connect_fd a little more.",https://github.com/bitcoin/bitcoin/pull/9919#discussion_r115097428,115097428,src/support/evunix.cpp
ryanofsky,2017-05-08T15:11:04Z,"In commit ""rpc: UNIX sockets support""\n\nNaming of BUILD_EVUNIX seems a little unusual. Would expect something more like ENABLE_UNIX_SOCKETS (to be similar to ENABLE_WALLET, ENABLE_QT, ENABLE_ZMQ, etc).\n\nMaybe more to the point though, since BUILD_EVUNIX is only used to control building of a single source file, maybe consider not defining it as build variable at all and just using `#if HAVE_",https://github.com/bitcoin/bitcoin/pull/9919#discussion_r115272000,115272000,configure.ac
ryanofsky,2017-05-08T15:21:12Z,"In commit ""rpc: UNIX sockets support""\n\nMaybe consider deduping the path manipulation code with the same code in bitcoin-cli",https://github.com/bitcoin/bitcoin/pull/9919#discussion_r115274495,115274495,src/httpserver.cpp
ryanofsky,2017-05-08T15:48:03Z,"In commit ""rpc: UNIX sockets support""\n\nSeems like this instead of emulating an NET_IPV6 address, this should have it's own network type in `netaddress.h` similar to `NET_TOR`.",https://github.com/bitcoin/bitcoin/pull/9919#discussion_r115281634,115281634,src/httpserver.cpp
ryanofsky,2017-05-08T16:09:12Z,"In commit ""rpc: UNIX sockets support""\n\nWould it be possible to throw an exception here? Since the path comes from the user's configuration it seems like it would be better to provide a specific error about the path than a generic connect or bind error.",https://github.com/bitcoin/bitcoin/pull/9919#discussion_r115287259,115287259,src/support/evunix.cpp
ryanofsky,2017-05-08T16:23:01Z,"In commit ""rpc: More robust localhost-UNIX detection""\n\nWould it be better to use getsockname than getpeername for this? Seems like maybe that would work even on a socket that isn't connected.",https://github.com/bitcoin/bitcoin/pull/9919#discussion_r115290287,115290287,src/support/evunix.cpp
ryanofsky,2017-05-08T16:31:00Z,"In commit ""tests: Run RPC tests optionally over UNIX socket""\n\nProbably should inherit from RPCConnectInfo. Same with RPCConnectInfoUNIX class below. Doesn't really affect anything, but might make generated documentation / help messages a little better.",https://github.com/bitcoin/bitcoin/pull/9919#discussion_r115292019,115292019,qa/rpc-tests/test_framework/conninfo.py
ryanofsky,2017-05-08T16:32:23Z,"In commit ""tests: Run RPC tests optionally over UNIX socket""\n\ns/urlinfo/conninfo/",https://github.com/bitcoin/bitcoin/pull/9919#discussion_r115292289,115292289,qa/rpc-tests/test_framework/util.py
theuni,2017-06-02T23:26:15Z,"I think this is OK. I think we'll end up with a few wrappers for libevent, so moving those to their own internal helper lib will  make sense.",https://github.com/bitcoin/bitcoin/pull/9919#discussion_r119969216,119969216,src/Makefile.am
theuni,2017-06-02T23:32:51Z,"+1. This seems like another good use-case for NET_INTERNAL from #10446 (or something similar). As a bonus, that would allow us to use associative containers for unix socket addresses, since each path would have its own hash.",https://github.com/bitcoin/bitcoin/pull/9919#discussion_r119969737,119969737,src/httpserver.cpp
theuni,2017-06-02T23:41:17Z,need to disable SIGPIPE here too?,https://github.com/bitcoin/bitcoin/pull/9919#discussion_r119970411,119970411,src/support/evunix.cpp
theuni,2017-06-02T23:54:45Z,should probably .clear() in case this gets called twice.,https://github.com/bitcoin/bitcoin/pull/9919#discussion_r119971386,119971386,src/httpserver.cpp
