[
  {
    "sha": "8dc206a1e2715be83912e039465a049b708b94c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGMyMDZhMWUyNzE1YmU4MzkxMmUwMzk0NjVhMDQ5YjcwOGI5NGMx",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-07T02:21:34Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-09T00:01:35Z"
      },
      "message": "Reject non-canonically-encoded sizes\n\nThe length of vectors, maps, sets, etc are serialized using\nWrite/ReadCompactSize -- which, unfortunately, do not use a\nunique encoding.\n\nSo deserializing and then re-serializing a transaction (for example)\ncan give you different bits than you started with. That doesn't\ncause any problems that we are aware of, but it is exactly the type\nof subtle mismatch that can lead to exploits.\n\nWith this pull, reading a non-canonical CompactSize throws an\nexception, which means nodes will ignore 'tx' or 'block' or\nother messages that are not properly encoded.\n\nPlease check my logic... but this change is safe with respect to\ncausing a network split. Old clients that receive\nnon-canonically-encoded transactions or blocks deserialize\nthem into CTransaction/CBlock structures in memory, and then\nre-serialize them before relaying them to peers.\n\nAnd please check my logic with respect to causing a blockchain\nsplit: there are no CompactSize fields in the block header, so\nthe block hash is always canonical. The merkle root in the block\nheader is computed on a vector<CTransaction>, so\nany non-canonical encoding of the transactions in 'tx' or 'block'\nmessages is erased as they are read into memory by old clients,\nand does not affect the block hash. And, as noted above, old\nclients re-serialize (with canonical encoding) 'tx' and 'block'\nmessages before relaying to peers.",
      "tree": {
        "sha": "c5f8682aeca86134da42cea9dae729faf03ef73a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5f8682aeca86134da42cea9dae729faf03ef73a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8dc206a1e2715be83912e039465a049b708b94c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dc206a1e2715be83912e039465a049b708b94c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8dc206a1e2715be83912e039465a049b708b94c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dc206a1e2715be83912e039465a049b708b94c1/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddd0e2f616be82fb57d68298be796c34268c6ae9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd0e2f616be82fb57d68298be796c34268c6ae9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddd0e2f616be82fb57d68298be796c34268c6ae9"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 66,
      "deletions": 1
    },
    "files": [
      {
        "sha": "71815fc2a2c49958c912f5e31a32c0569c451498",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc206a1e2715be83912e039465a049b708b94c1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc206a1e2715be83912e039465a049b708b94c1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8dc206a1e2715be83912e039465a049b708b94c1",
        "patch": "@@ -3584,7 +3584,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     {\n         vector<uint256> vWorkQueue;\n         vector<uint256> vEraseQueue;\n-        CDataStream vMsg(vRecv);\n         CTransaction tx;\n         vRecv >> tx;\n "
      },
      {
        "sha": "ca3c962240e389dba567429761fa01190fc400e3",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc206a1e2715be83912e039465a049b708b94c1/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc206a1e2715be83912e039465a049b708b94c1/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=8dc206a1e2715be83912e039465a049b708b94c1",
        "patch": "@@ -216,18 +216,24 @@ uint64 ReadCompactSize(Stream& is)\n         unsigned short xSize;\n         READDATA(is, xSize);\n         nSizeRet = xSize;\n+        if (nSizeRet < 253)\n+            throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     else if (chSize == 254)\n     {\n         unsigned int xSize;\n         READDATA(is, xSize);\n         nSizeRet = xSize;\n+        if (nSizeRet < 0x10000u)\n+            throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     else\n     {\n         uint64 xSize;\n         READDATA(is, xSize);\n         nSizeRet = xSize;\n+        if (nSizeRet < 0x100000000LLu)\n+            throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     if (nSizeRet > (uint64)MAX_SIZE)\n         throw std::ios_base::failure(\"ReadCompactSize() : size too large\");"
      },
      {
        "sha": "50139df09e5026f5d512aea5fecc327c5869bbe4",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc206a1e2715be83912e039465a049b708b94c1/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc206a1e2715be83912e039465a049b708b94c1/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=8dc206a1e2715be83912e039465a049b708b94c1",
        "patch": "@@ -39,7 +39,67 @@ BOOST_AUTO_TEST_CASE(varints)\n         ss >> VARINT(j);\n         BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n     }\n+}\n+\n+BOOST_AUTO_TEST_CASE(compactsize)\n+{\n+    CDataStream ss(SER_DISK, 0);\n+    vector<char>::size_type i, j;\n+\n+    for (i = 1; i <= MAX_SIZE; i *= 2)\n+    {\n+        WriteCompactSize(ss, i-1);\n+        WriteCompactSize(ss, i);\n+    }\n+    for (i = 1; i <= MAX_SIZE; i *= 2)\n+    {\n+        j = ReadCompactSize(ss);\n+        BOOST_CHECK_MESSAGE((i-1) == j, \"decoded:\" << j << \" expected:\" << (i-1));\n+        j = ReadCompactSize(ss);\n+        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n+    }\n+}\n+\n+static bool isCanonicalException(const std::ios_base::failure& ex)\n+{\n+    return std::string(\"non-canonical ReadCompactSize()\") == ex.what();\n+}\n+\n+BOOST_AUTO_TEST_CASE(noncanonical)\n+{\n+    // Write some non-canonical CompactSize encodings, and\n+    // make sure an exception is thrown when read back.\n+    CDataStream ss(SER_DISK, 0);\n+    vector<char>::size_type n;\n+\n+    // zero encoded with three bytes:\n+    ss.write(\"\\xfd\\x00\\x00\", 3);\n+    BOOST_CHECK_EXCEPTION(ReadCompactSize(ss), std::ios_base::failure, isCanonicalException);\n+\n+    // 0xfc encoded with three bytes:\n+    ss.write(\"\\xfd\\xfc\\x00\", 3);\n+    BOOST_CHECK_EXCEPTION(ReadCompactSize(ss), std::ios_base::failure, isCanonicalException);\n+\n+    // 0xfd encoded with three bytes is OK:\n+    ss.write(\"\\xfd\\xfd\\x00\", 3);\n+    n = ReadCompactSize(ss);\n+    BOOST_CHECK(n == 0xfd);\n+\n+    // zero encoded with five bytes:\n+    ss.write(\"\\xfe\\x00\\x00\\x00\\x00\", 5);\n+    BOOST_CHECK_EXCEPTION(ReadCompactSize(ss), std::ios_base::failure, isCanonicalException);\n+\n+    // 0xffff encoded with five bytes:\n+    ss.write(\"\\xfe\\xff\\xff\\x00\\x00\", 5);\n+    BOOST_CHECK_EXCEPTION(ReadCompactSize(ss), std::ios_base::failure, isCanonicalException);\n+\n+    // zero encoded with nine bytes:\n+    ss.write(\"\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", 9);\n+    BOOST_CHECK_EXCEPTION(ReadCompactSize(ss), std::ios_base::failure, isCanonicalException);\n \n+    // 0x01ffffff encoded with nine bytes:\n+    ss.write(\"\\xff\\xff\\xff\\xff\\x01\\x00\\x00\\x00\\x00\", 9);\n+    BOOST_CHECK_EXCEPTION(ReadCompactSize(ss), std::ios_base::failure, isCanonicalException);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]