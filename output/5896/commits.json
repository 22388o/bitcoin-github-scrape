[
  {
    "sha": "6c2f37b3510e26ba86569f451edc40a8cbe8dd35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzJmMzdiMzUxMGUyNmJhODY1NjlmNDUxZWRjNDBhOGNiZThkZDM1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-08T15:40:09Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-16T16:28:55Z"
      },
      "message": "[Qt][PoC] introduce \"core-pulse\"\n\n--- this implementation if totally rought and for conceptual reasons only ---\n\nThis is more or less a gimmick.\n\nAdds live information about the full node within a new Qt window.\n* show the last recent blocks (3 blocks)\n* show changes of the mempool\n* show connected peers and sent/recv bytes in form of a line\n\nFurther ideas:\n* calculate and show mempool rate (tx/s)\n* color of the peer could change CNode->nLastSend and CNode->nLastRecv\n* animation when updating (fading, move-in, etc.)\n* mousover interaction (view only), tx details, peer details, etc.\n\nImplementation Cleanup:\n* data should go over ClientModel\n* peers should use\n* avoid updating of all elements\n* make use of CNodeCombinedStats\n* leak checking and performance opti.",
      "tree": {
        "sha": "2ef773380006d13c93d6b9991da06e606b9a28bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ef773380006d13c93d6b9991da06e606b9a28bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c2f37b3510e26ba86569f451edc40a8cbe8dd35",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c2f37b3510e26ba86569f451edc40a8cbe8dd35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c2f37b3510e26ba86569f451edc40a8cbe8dd35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1fb0e1075f626ea23d832b07b2070e0638f4215",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1fb0e1075f626ea23d832b07b2070e0638f4215",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1fb0e1075f626ea23d832b07b2070e0638f4215"
      }
    ],
    "stats": {
      "total": 560,
      "additions": 559,
      "deletions": 1
    },
    "files": [
      {
        "sha": "566238dbd91cc755dbbe98d781ef337914ccf3f0",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=6c2f37b3510e26ba86569f451edc40a8cbe8dd35",
        "patch": "@@ -117,6 +117,7 @@ QT_MOC_CPP = \\\n   qt/moc_overviewpage.cpp \\\n   qt/moc_peertablemodel.cpp \\\n   qt/moc_paymentserver.cpp \\\n+  qt/moc_pulsedialog.cpp \\\n   qt/moc_qvalidatedlineedit.cpp \\\n   qt/moc_qvaluecombobox.cpp \\\n   qt/moc_receivecoinsdialog.cpp \\\n@@ -185,6 +186,7 @@ BITCOIN_QT_H = \\\n   qt/paymentrequestplus.h \\\n   qt/paymentserver.h \\\n   qt/peertablemodel.h \\\n+  qt/pulsedialog.h \\\n   qt/qvalidatedlineedit.h \\\n   qt/qvaluecombobox.h \\\n   qt/receivecoinsdialog.h \\\n@@ -217,6 +219,7 @@ RES_ICONS = \\\n   qt/res/icons/about_qt.png \\\n   qt/res/icons/bitcoin.ico \\\n   qt/res/icons/bitcoin.png \\\n+  qt/res/icons/block.png \\\n   qt/res/icons/clock1.png \\\n   qt/res/icons/clock2.png \\\n   qt/res/icons/clock3.png \\\n@@ -249,6 +252,7 @@ RES_ICONS = \\\n   qt/res/icons/remove.png \\\n   qt/res/icons/send.png \\\n   qt/res/icons/synced.png \\\n+  qt/res/icons/transaction.png \\\n   qt/res/icons/transaction0.png \\\n   qt/res/icons/transaction2.png \\\n   qt/res/icons/transaction_conflicted.png \\\n@@ -257,7 +261,9 @@ RES_ICONS = \\\n   qt/res/icons/tx_output.png \\\n   qt/res/icons/tx_mined.png \\\n   qt/res/icons/warning.png \\\n-  qt/res/icons/verify.png\n+  qt/res/icons/verify.png \\\n+  qt/res/fonts/BebasNeue-Thin.ttf \\\n+  qt/res/fonts/BebasNeue-Regular.ttf\n \n BITCOIN_QT_CPP = \\\n   qt/bitcoinaddressvalidator.cpp \\\n@@ -273,6 +279,7 @@ BITCOIN_QT_CPP = \\\n   qt/optionsdialog.cpp \\\n   qt/optionsmodel.cpp \\\n   qt/peertablemodel.cpp \\\n+  qt/pulsedialog.cpp \\\n   qt/qvalidatedlineedit.cpp \\\n   qt/qvaluecombobox.cpp \\\n   qt/rpcconsole.cpp \\"
      },
      {
        "sha": "5ecd81c8ee6e94d0d938c5083398709bb2e1d6fd",
        "filename": "src/qt/bitcoin.qrc",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/bitcoin.qrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/bitcoin.qrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.qrc?ref=6c2f37b3510e26ba86569f451edc40a8cbe8dd35",
        "patch": "@@ -46,6 +46,8 @@\n         <file alias=\"about_qt\">res/icons/about_qt.png</file>\n         <file alias=\"verify\">res/icons/verify.png</file>\n         <file alias=\"warning\">res/icons/warning.png</file>\n+        <file alias=\"block\">res/icons/block.png</file>\n+        <file alias=\"transaction\">res/icons/transaction.png</file>\n     </qresource>\n     <qresource prefix=\"/movies\">\n         <file alias=\"spinner-000\">res/movies/spinner-000.png</file>\n@@ -85,4 +87,8 @@\n         <file alias=\"spinner-034\">res/movies/spinner-034.png</file>\n         <file alias=\"spinner-035\">res/movies/spinner-035.png</file>\n     </qresource>\n+    <qresource prefix=\"/fonts\">\n+        <file alias=\"BebasNeue-Regular\">res/fonts/BebasNeue-Regular.ttf</file>\n+        <file alias=\"BebasNeue-Thin\">res/fonts/BebasNeue-Thin.ttf</file>\n+    </qresource>\n </RCC>"
      },
      {
        "sha": "42928596ae10cb3ada862cab3355832accd68454",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=6c2f37b3510e26ba86569f451edc40a8cbe8dd35",
        "patch": "@@ -13,6 +13,7 @@\n #include \"openuridialog.h\"\n #include \"optionsdialog.h\"\n #include \"optionsmodel.h\"\n+#include \"pulsedialog.h\"\n #include \"rpcconsole.h\"\n #include \"scicon.h\"\n #include \"utilitydialog.h\"\n@@ -93,6 +94,7 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n     openRPCConsoleAction(0),\n     openAction(0),\n     showHelpMessageAction(0),\n+    showPulseAction(0),\n     trayIcon(0),\n     trayIconMenu(0),\n     notificator(0),\n@@ -343,12 +345,17 @@ void BitcoinGUI::createActions()\n     showHelpMessageAction->setMenuRole(QAction::NoRole);\n     showHelpMessageAction->setStatusTip(tr(\"Show the Bitcoin Core help message to get a list with possible Bitcoin command-line options\"));\n \n+    showPulseAction = new QAction(TextColorIcon(\":/icons/info\"), tr(\"&Pulse\"), this);\n+    showPulseAction->setStatusTip(tr(\"Show live bitcoin informations\"));\n+    \n     connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));\n     connect(aboutAction, SIGNAL(triggered()), this, SLOT(aboutClicked()));\n     connect(aboutQtAction, SIGNAL(triggered()), qApp, SLOT(aboutQt()));\n     connect(optionsAction, SIGNAL(triggered()), this, SLOT(optionsClicked()));\n     connect(toggleHideAction, SIGNAL(triggered()), this, SLOT(toggleHidden()));\n     connect(showHelpMessageAction, SIGNAL(triggered()), this, SLOT(showHelpMessageClicked()));\n+    connect(showPulseAction, SIGNAL(triggered()), this, SLOT(showPulseClicked()));\n+    \n #ifdef ENABLE_WALLET\n     if(walletFrame)\n     {\n@@ -404,6 +411,7 @@ void BitcoinGUI::createMenuBar()\n         help->addAction(openRPCConsoleAction);\n     }\n     help->addAction(showHelpMessageAction);\n+    help->addAction(showPulseAction);\n     help->addSeparator();\n     help->addAction(aboutAction);\n     help->addAction(aboutQtAction);\n@@ -594,6 +602,12 @@ void BitcoinGUI::showHelpMessageClicked()\n     help->show();\n }\n \n+void BitcoinGUI::showPulseClicked()\n+{\n+    PulseDialog *dlg = new PulseDialog(this);\n+    dlg->show();\n+}\n+\n #ifdef ENABLE_WALLET\n void BitcoinGUI::openClicked()\n {"
      },
      {
        "sha": "80a5239066f0adab74ad2c68f87f4da71eecd969",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=6c2f37b3510e26ba86569f451edc40a8cbe8dd35",
        "patch": "@@ -107,6 +107,7 @@ class BitcoinGUI : public QMainWindow\n     QAction *openRPCConsoleAction;\n     QAction *openAction;\n     QAction *showHelpMessageAction;\n+    QAction *showPulseAction;\n \n     QSystemTrayIcon *trayIcon;\n     QMenu *trayIconMenu;\n@@ -193,6 +194,8 @@ private slots:\n     void aboutClicked();\n     /** Show help message dialog */\n     void showHelpMessageClicked();\n+    /** Show pulse dialog */\n+    void showPulseClicked();\n #ifndef Q_OS_MAC\n     /** Handle tray icon clicked */\n     void trayIconActivated(QSystemTrayIcon::ActivationReason reason);"
      },
      {
        "sha": "9fec32306f9541e33f118b00b777a6d2042ed82d",
        "filename": "src/qt/pulsedialog.cpp",
        "status": "added",
        "additions": 463,
        "deletions": 0,
        "changes": 463,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/pulsedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/pulsedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/pulsedialog.cpp?ref=6c2f37b3510e26ba86569f451edc40a8cbe8dd35",
        "patch": "@@ -0,0 +1,463 @@\n+// Copyright (c) 2011-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"pulsedialog.h\"\n+\n+#include \"bitcoinunits.h\"\n+#include \"main.h\"\n+#include \"util.h\"\n+#include \"utiltime.h\"\n+\n+#include <QGraphicsView>\n+#include <QLayout>\n+#include <QLabel>\n+#include <QPropertyAnimation>\n+#include <QGraphicsTextItem>\n+#include <QFontDatabase>\n+#include <QFontDialog>\n+#include <QtAlgorithms>\n+\n+PulseDialog::PulseDialog(QWidget *parent) :\n+    QDialog(parent)\n+{\n+    \n+    std::string bestBlockHeight;\n+    {\n+        LOCK(cs_main);\n+        bestBlockHeight = strprintf(\"%d\", chainActive.Tip()->nHeight);\n+    }\n+    \n+    scene = new QGraphicsScene(this);\n+    gView = new QGraphicsView(scene);\n+    gView->setRenderHints(QPainter::Antialiasing | QPainter::SmoothPixmapTransform);\n+   \n+    scene->setSceneRect(0,0 , 780, 550);\n+    \n+    QVBoxLayout mainLayout;\n+    mainLayout.addWidget(gView);\n+    mainLayout.setSpacing(0);\n+    mainLayout.setMargin(0);\n+    \n+    setLayout(&mainLayout);\n+    LoadFonts();\n+    \n+    RegisterValidationInterface(this);\n+    DrawRecentBlocks();\n+    DrawRecentTx();\n+    DrawPeers();\n+    \n+    connect(this, SIGNAL(signalToUpdate()), SLOT(UpdateOnMainThread()));\n+}\n+\n+PulseDialog::~PulseDialog()\n+{\n+    foreach (QGraphicsItem *item, blocksItems)\n+    {\n+        QGraphicsScene *aScene = item->scene();\n+        if(aScene)\n+            aScene->removeItem(item);\n+    }\n+    \n+    foreach (QGraphicsItem *item, txItems)\n+    {\n+        QGraphicsScene *aScene = item->scene();\n+        if(aScene)\n+            aScene->removeItem(item);\n+    }\n+    \n+    foreach (QGraphicsItem *item, nodeItems)\n+    {\n+        QGraphicsScene *aScene = item->scene();\n+        if(aScene)\n+            aScene->removeItem(item);\n+    }\n+    \n+    delete gView;\n+    delete scene;\n+    \n+}\n+\n+void PulseDialog::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n+{\n+    emit signalToUpdate();\n+}\n+\n+void PulseDialog::BlockChecked(const CBlock&, const CValidationState&) {\n+    emit signalToUpdate();\n+}\n+\n+void PulseDialog::UpdateOnMainThread() {\n+    DrawRecentBlocks();\n+    DrawRecentTx();\n+    DrawPeers();\n+}\n+\n+void PulseDialog::LoadFonts()\n+{\n+    QFontDatabase fDatabase;\n+\n+    fDatabase.addApplicationFont(\":/fonts/BebasNeue-Regular\");\n+    fDatabase.addApplicationFont(\":/fonts/BebasNeue-Thin\");\n+    \n+        QStringList fams = fDatabase.families();\n+        foreach (const QString &family, fams) {\n+            std::string utf8_text = family.toUtf8().constData();\n+            LogPrintf(\"font: %s\\n\", utf8_text);\n+        }\n+    \n+    smallFont           = fDatabase.font(\"Bebas Neue\", \"Regular\", 15);\n+    smallFontLight      = fDatabase.font(\"Bebas Neue Thin\", \"Thin\", 15);\n+    bigFont             = fDatabase.font(\"Bebas Neue Thin\", \"Thin\", 36);\n+    subtitleFont        = fDatabase.font(\"Bebas Neue Thin\", \"Thin\", 48);\n+    \n+    tinyFont   = fDatabase.font(\"Bebas Neue\", \"Regular\", 10);\n+    tinyFont8   = fDatabase.font(\"Bebas Neue\", \"Regular\", 8);\n+}\n+\n+void PulseDialog::DrawRecentTx()\n+{\n+    foreach (QGraphicsItem *item, txItems)\n+    {\n+        QGraphicsScene *aScene = item->scene();\n+        if(aScene)\n+            aScene->removeItem(item);\n+    }\n+\n+    int desiredNumOfMempoolTx = 8;\n+    std::vector<CTxMemPoolEntry> latestMemPoolTx;\n+    \n+    unsigned long memPoolSize = 0;\n+    {\n+        LOCK(mempool.cs);\n+        memPoolSize = mempool.size();\n+        \n+        for(int i = desiredNumOfMempoolTx;i>0;i--)\n+        {\n+            CTxMemPoolEntry currentNewest;\n+            BOOST_FOREACH(const PAIRTYPE(uint256, CTxMemPoolEntry)& entry, mempool.mapTx)\n+            {\n+                const uint256& hash = entry.first;\n+                bool found = false;\n+                BOOST_FOREACH(CTxMemPoolEntry latestTxItem, latestMemPoolTx)\n+                {\n+                    if (latestTxItem.GetTx().GetHash() == hash)\n+                    {\n+                        found = true;\n+                        break;\n+                    }\n+                }\n+                if (found)\n+                    continue;\n+                \n+                const CTxMemPoolEntry& e = entry.second;\n+                \n+                if (e.GetTx().IsCoinBase())\n+                    continue;\n+                \n+                if (e.GetTime() > currentNewest.GetTime())\n+                    currentNewest = e;\n+            }\n+            \n+            if (currentNewest.GetTime() > 0)\n+            {\n+                latestMemPoolTx.push_back(currentNewest);\n+            }\n+        }\n+    }\n+    \n+    float currentY = 190.0;\n+    float deltaX = 0.0;\n+    \n+    std::string title = strprintf(\"Transactions (%d)\",memPoolSize);\n+    QGraphicsTextItem *heightLabel = scene->addText(QString::fromStdString(title),subtitleFont);\n+    heightLabel->setDefaultTextColor(QColor(55,55,55));\n+    heightLabel->setPos(QPointF(deltaX+8,currentY));\n+    txItems.append(heightLabel);\n+    \n+    currentY+=55.0;\n+    BOOST_FOREACH(CTxMemPoolEntry latestTxItem, latestMemPoolTx)\n+    {\n+        std::string hexStr = latestTxItem.GetTx().GetHash().GetHex();\n+        std::string hexStrShort = hexStr.substr(0, 12)+\"\u2026\";\n+        int64_t txAge = GetTime() - latestTxItem.GetTime();\n+        std::string ageStr = strprintf(\"%d\", (int)round(txAge/60.0))+\"min\";\n+        if((int)round(txAge/60) <= 0)\n+            ageStr = \"<1min\";\n+        \n+        QGraphicsPixmapItem *blockIcon = scene->addPixmap(QPixmap(\":/icons/transaction\"));\n+        blockIcon->setPos(QPointF(deltaX+13,currentY+9));\n+        blockIcon->setScale(0.5);\n+        txItems.append(blockIcon);\n+        \n+        QGraphicsRectItem *rectItem = scene->addRect(deltaX+120, currentY+6, 105, 22, QPen(QColor(0, 0, 0)), QBrush(QColor(0,0,0)));\n+        txItems.append(rectItem);\n+        \n+        QGraphicsTextItem *hashText = scene->addText(QString::fromStdString(hexStrShort),smallFontLight);\n+        hashText->setDefaultTextColor(QColor(55,55,55));\n+        hashText->setPos(QPointF(deltaX+35,currentY+8));\n+        txItems.append(hashText);\n+        \n+        QGraphicsTextItem *valueText = scene->addText(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, latestTxItem.GetTx().GetValueOut()),smallFont);\n+        valueText->setDefaultTextColor(QColor(255,255,255));\n+        valueText->setPos(QPointF(deltaX+225-valueText->boundingRect().width(),currentY+8));\n+        txItems.append(valueText);\n+        \n+//        QGraphicsTextItem *ageText = scene->addText(QString::fromStdString(ageStr),smallFont);\n+//        ageText->setDefaultTextColor(QColor(55,55,55));\n+//        ageText->setPos(QPointF(deltaX+290-ageText->boundingRect().width(),currentY+8));\n+//        txItems.append(ageText);\n+        \n+        currentY+=35.0;\n+    }\n+}\n+\n+void PulseDialog::DrawPeers()\n+{\n+//    QList<CNodeCombinedStats> cachedNodeStats;\n+//    /** Column to sort nodes by */\n+//    int sortColumn;\n+//    /** Order (ascending or descending) to sort nodes by */\n+//    Qt::SortOrder sortOrder;\n+//    /** Index of rows by node ID */\n+//    std::map<NodeId, int> mapNodeRows;\n+//    \n+//    /** Pull a full list of peers from vNodes into our cache */\n+//    void refreshPeers()\n+//    {\n+//        {\n+//            TRY_LOCK(cs_vNodes, lockNodes);\n+//            if (!lockNodes)\n+//            {\n+//                // skip the refresh if we can't immediately get the lock\n+//                return;\n+//            }\n+//            cachedNodeStats.clear();\n+//#if QT_VERSION >= 0x040700\n+//            cachedNodeStats.reserve(vNodes.size());\n+//#endif\n+//            BOOST_FOREACH(CNode* pnode, vNodes)\n+//            {\n+//                CNodeCombinedStats stats;\n+//                stats.nodeStateStats.nMisbehavior = 0;\n+//                stats.nodeStateStats.nSyncHeight = -1;\n+//                stats.fNodeStateStatsAvailable = false;\n+//                pnode->copyStats(stats.nodeStats);\n+//                cachedNodeStats.append(stats);\n+//            }\n+//        }\n+//        \n+//        // Try to retrieve the CNodeStateStats for each node.\n+//        {\n+//            TRY_LOCK(cs_main, lockMain);\n+//            if (lockMain)\n+//            {\n+//                BOOST_FOREACH(CNodeCombinedStats &stats, cachedNodeStats)\n+//                stats.fNodeStateStatsAvailable = GetNodeStateStats(stats.nodeStats.nodeid, stats.nodeStateStats);\n+//            }\n+//        }\n+//        \n+//        if (sortColumn >= 0)\n+//            // sort cacheNodeStats (use stable sort to prevent rows jumping around unneceesarily)\n+//            qStableSort(cachedNodeStats.begin(), cachedNodeStats.end(), NodeLessThan(sortColumn, sortOrder));\n+//        \n+//        // build index map\n+//        mapNodeRows.clear();\n+//        int row = 0;\n+//        BOOST_FOREACH(CNodeCombinedStats &stats, cachedNodeStats)\n+//        mapNodeRows.insert(std::pair<NodeId, int>(stats.nodeStats.nodeid, row++));\n+//    }\n+//\n+    \n+    foreach (QGraphicsItem *item, nodeItems)\n+    {\n+        QGraphicsScene *aScene = item->scene();\n+        if(aScene)\n+            aScene->removeItem(item);\n+    }\n+    \n+    \n+\n+    \n+    float currentY = 190.0;\n+    float deltaX = 420.0;\n+    \n+    LOCK(cs_vNodes);\n+    \n+    std::string title = strprintf(\"Nodes (%d)\",vNodes.size());\n+    QGraphicsTextItem *heightLabel = scene->addText(QString::fromStdString(title),subtitleFont);\n+    heightLabel->setDefaultTextColor(QColor(55,55,55));\n+    heightLabel->setPos(QPointF(deltaX,currentY));\n+    nodeItems.append(heightLabel);\n+    currentY+=55.0;\n+    \n+    uint64_t maxSend = 0;\n+    uint64_t maxRecv = 0;\n+    BOOST_FOREACH(CNode* pnode, vNodes)\n+    {\n+        if(pnode->nSendBytes > maxSend)\n+            maxSend = pnode->nSendBytes;\n+        \n+        if(pnode->nRecvBytes > maxRecv)\n+            maxRecv = pnode->nRecvBytes;\n+    }\n+\n+    float rectHeight = 18;\n+    float maxBytesSize = 100;\n+    \n+    BOOST_FOREACH(CNode* pnode, vNodes)\n+    {\n+        // every node has a rect for the ip\n+        QGraphicsRectItem *rectItem = scene->addRect(deltaX+120, currentY, 80, rectHeight, QPen(QColor(0, 0, 0)), QBrush(QColor(0,0,0)));\n+        txItems.append(rectItem);\n+        \n+        QGraphicsTextItem *ipText = scene->addText(QString::fromStdString(pnode->addrName),tinyFont);\n+        ipText->setDefaultTextColor(QColor(255,255,255));\n+        ipText->setPos(QPointF(deltaX+122,currentY+2));\n+        txItems.append(ipText);\n+        \n+        int widthRecv = maxBytesSize/maxRecv*pnode->nRecvBytes;\n+        QGraphicsRectItem *recvItem = scene->addRect(deltaX+120-widthRecv, currentY+5, widthRecv, 2, QPen(QColor(0, 0, 0, 0)), QBrush(QColor(120,20,20)));\n+        txItems.append(recvItem);\n+        \n+        int widthSend = maxBytesSize/maxSend*pnode->nSendBytes;\n+        QGraphicsRectItem *sentItem = scene->addRect(deltaX+120-widthSend, currentY+12, widthSend, 2, QPen(QColor(0, 0, 0, 0)), QBrush(QColor(20,120,20)));\n+        txItems.append(sentItem);\n+        \n+        QGraphicsTextItem *bytesRecvText = scene->addText(FormatBytes(pnode->nRecvBytes),tinyFont8);\n+        bytesRecvText->setDefaultTextColor(QColor(120,20,20));\n+        bytesRecvText->setPos(QPointF(deltaX+120-widthRecv-bytesRecvText->boundingRect().width()-1,currentY-1));\n+        txItems.append(bytesRecvText);\n+        \n+        QGraphicsTextItem *bytesSendText = scene->addText(FormatBytes(pnode->nSendBytes),tinyFont8);\n+        bytesSendText->setDefaultTextColor(QColor(20,120,20));\n+        bytesSendText->setPos(QPointF(deltaX+120-widthSend-bytesSendText->boundingRect().width()-1,currentY+7-1));\n+        txItems.append(bytesSendText);\n+        \n+        currentY+=30;\n+    }\n+}\n+\n+QString PulseDialog::FormatBytes(quint64 bytes)\n+{\n+    if(bytes < 1024)\n+        return QString(tr(\"%1 B\")).arg(bytes);\n+    if(bytes < 1024 * 1024)\n+        return QString(tr(\"%1 KB\")).arg(bytes / 1024);\n+    if(bytes < 1024 * 1024 * 1024)\n+        return QString(tr(\"%1 MB\")).arg(bytes / 1024 / 1024);\n+    \n+    return QString(tr(\"%1 GB\")).arg(bytes / 1024 / 1024 / 1024);\n+}\n+\n+void PulseDialog::DrawRecentBlocks()\n+{\n+    foreach (QGraphicsItem *item, blocksItems)\n+    {\n+        QGraphicsScene *aScene = item->scene();\n+        if(aScene)\n+            aScene->removeItem(item);\n+    }\n+    \n+    float deltaX = 0.0;\n+    float smallFontYDelta = 15.0;\n+    \n+    float currentY = 20;\n+    int maxBlocks = 3;\n+    CBlockIndex *blkIdx = chainActive.Tip();\n+    do\n+    {\n+        std::map<std::string,QGraphicsTextItem> views;\n+        \n+        CBlock block;\n+        if(!ReadBlockFromDisk(block, blkIdx))\n+        {\n+            \n+        }\n+        \n+        std::string heightString = strprintf(\"%d\", blkIdx->nHeight);\n+        std::string nrTxString = strprintf(\"%ud\", (blkIdx->nTx));\n+        std::string hexStr = block.GetHash().GetHex();\n+        std::string hexStrShort = \"\u2026\"+hexStr.substr(hexStr.length()-12);\n+        \n+        int64_t ageInSecs = GetTime() - (int64_t)block.nTime;\n+        std::string timeString = strprintf(\"%ld\", (ageInSecs))+\"s\";\n+        \n+        if(ageInSecs > 3600)\n+            timeString = \"~\"+strprintf(\"%d\", (int)round(ageInSecs/3600)+1)+\"h\";\n+        else if(ageInSecs > 60)\n+            timeString = \"~\"+strprintf(\"%d\", (int)round(ageInSecs/60)+1)+\"m\";\n+        else\n+            timeString = \"<\"+strprintf(\"%d\", (int)floor(ageInSecs/60)+1)+\"m\";\n+        \n+//        QWidget *newWidget = new QWidget;\n+//        QGridLayout *layout = new QGridLayout(this);\n+//        layout->setSpacing(0);\n+//        layout->setMargin(0);\n+//        newWidget->setLayout(layout);\n+        \n+        QGraphicsTextItem *timeValue = scene->addText(QString::fromStdString(timeString),smallFont);\n+        timeValue->setDefaultTextColor(QColor(55,55,55));\n+        timeValue->setPos(QPointF(deltaX+4,currentY+smallFontYDelta));\n+        blocksItems.append(timeValue);\n+        \n+        QGraphicsPixmapItem *blockIcon = scene->addPixmap(QPixmap(\":/icons/block\"));\n+        blockIcon->setPos(QPointF(deltaX+44,currentY+9));\n+        blockIcon->setScale(0.5);\n+        blocksItems.append(blockIcon);\n+\n+        QGraphicsTextItem *heightLabel = scene->addText(QString(\"height\"),smallFont);\n+        heightLabel->setDefaultTextColor(QColor(55,55,55));\n+        heightLabel->setPos(QPointF(deltaX+85,currentY+smallFontYDelta));\n+        blocksItems.append(heightLabel);\n+        \n+        QGraphicsTextItem *heightValue = scene->addText(QString::fromStdString(heightString),bigFont);\n+        heightValue->setDefaultTextColor(QColor(55,55,55));\n+        heightValue->setPos(QPointF(deltaX+210-heightValue->boundingRect().width(),currentY));\n+        blocksItems.append(heightValue);\n+\n+        QGraphicsTextItem *sizeLabel = scene->addText(QString(\"size\"),smallFont);\n+        sizeLabel->setDefaultTextColor(QColor(55,55,55));\n+        sizeLabel->setPos(QPointF(deltaX+237,currentY+smallFontYDelta));\n+        blocksItems.append(sizeLabel);\n+    \n+        QGraphicsTextItem *sizeValue = scene->addText(FormatBytes(::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)),bigFont);\n+        sizeValue->setDefaultTextColor(QColor(55,55,55));\n+        sizeValue->setPos(QPointF(deltaX+347-sizeValue->boundingRect().width(),currentY));\n+        blocksItems.append(sizeValue);\n+        \n+        QGraphicsTextItem *nrTxLabel = scene->addText(QString(\"transactions\"),smallFont);\n+        nrTxLabel->setDefaultTextColor(QColor(55,55,55));\n+        nrTxLabel->setPos(QPointF(deltaX+367,currentY+smallFontYDelta));\n+        blocksItems.append(nrTxLabel);\n+        \n+        QGraphicsTextItem *nrTxValue = scene->addText(QString::fromStdString(nrTxString),bigFont);\n+        nrTxValue->setDefaultTextColor(QColor(55,55,55));\n+        nrTxValue->setPos(QPointF(deltaX+510-nrTxValue->boundingRect().width(),currentY));\n+        blocksItems.append(nrTxValue);\n+        \n+        QGraphicsTextItem *hashLabel = scene->addText(QString(\"hash\"),smallFont);\n+        hashLabel->setDefaultTextColor(QColor(55,55,55));\n+        hashLabel->setPos(QPointF(deltaX+523,currentY+smallFontYDelta));\n+        blocksItems.append(hashLabel);\n+        \n+        QGraphicsTextItem *hashValue = scene->addText(QString::fromStdString(hexStrShort),bigFont);\n+        hashValue->setDefaultTextColor(QColor(55,55,55));\n+        hashValue->setPos(QPointF(deltaX+740-hashValue->boundingRect().width(),currentY));\n+        blocksItems.append(hashValue);\n+        \n+        \n+        currentY+=50.0;\n+        \n+        if (maxBlocks > 1)\n+        {\n+            QPen myPen = QPen(QColor(200, 200, 200, 255));\n+            blocksItems.append(scene->addLine(deltaX+25, currentY-7, deltaX+740, currentY-7, myPen));\n+        }\n+        \n+        maxBlocks--;\n+        if (maxBlocks <= 0)\n+            break;\n+        \n+    } while ((blkIdx = blkIdx->pprev));\n+}"
      },
      {
        "sha": "5ae0e53a9d410e8ae23c2550ab0d3fad4d417c1b",
        "filename": "src/qt/pulsedialog.h",
        "status": "added",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/pulsedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/pulsedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/pulsedialog.h?ref=6c2f37b3510e26ba86569f451edc40a8cbe8dd35",
        "patch": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2011-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_PULSEDIALOG_H\n+#define BITCOIN_QT_PULSEDIALOG_H\n+\n+#include \"main.h\"\n+#include \"validationinterface.h\"\n+\n+#include <QDialog>\n+#include <QWidget>\n+#include <QGraphicsScene>\n+#include <QGraphicsTextItem>\n+#include <QTimer>\n+\n+#include <vector>\n+\n+namespace Ui {\n+    class PulseDialog;\n+}\n+\n+/** Preferences dialog. */\n+class PulseDialog : public QDialog, public CValidationInterface\n+{\n+    Q_OBJECT\n+    \n+public:\n+    PulseDialog(QWidget *parent = 0);\n+    ~PulseDialog();\n+    \n+    void BlockChecked(const CBlock&, const CValidationState&);\n+    void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n+    void DrawRecentBlocks();\n+\n+signals:\n+    void signalToUpdate();\n+public slots:\n+    void UpdateOnMainThread();\n+    \n+private:\n+    void LoadFonts();\n+    void DrawRecentTx();\n+    void DrawPeers();\n+    static QString FormatBytes(quint64 bytes);\n+    \n+    QGraphicsScene *scene;\n+    QGraphicsView *gView;\n+    QTimer *timer;\n+    \n+    std::vector<std::map<std::string, QGraphicsTextItem *> > blockViews;\n+    \n+    QList<QGraphicsItem *> blocksItems;\n+    QList<QGraphicsItem *> txItems;\n+    QList<QGraphicsItem *> nodeItems;\n+    \n+    QFont smallFont;\n+    QFont smallFontLight;\n+    QFont tinyFont;\n+    QFont tinyFont8;\n+    QFont bigFont;\n+    QFont subtitleFont;\n+};\n+\n+#endif // BITCOIN_QT_PULSEDIALOG_H"
      },
      {
        "sha": "2fff54cd5b387843a27f9232ebb768f9ec1e7585",
        "filename": "src/qt/res/fonts/BebasNeue-Regular.ttf",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/res/fonts/BebasNeue-Regular.ttf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/res/fonts/BebasNeue-Regular.ttf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/fonts/BebasNeue-Regular.ttf?ref=6c2f37b3510e26ba86569f451edc40a8cbe8dd35"
      },
      {
        "sha": "df57d511b274abec6ff3119025a325e3bb7bc5ee",
        "filename": "src/qt/res/fonts/BebasNeue-Thin.ttf",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/res/fonts/BebasNeue-Thin.ttf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/res/fonts/BebasNeue-Thin.ttf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/fonts/BebasNeue-Thin.ttf?ref=6c2f37b3510e26ba86569f451edc40a8cbe8dd35"
      },
      {
        "sha": "74462df3ab00e5ce41a0236e2e05be8757b3c666",
        "filename": "src/qt/res/icons/block.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/res/icons/block.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/res/icons/block.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/block.png?ref=6c2f37b3510e26ba86569f451edc40a8cbe8dd35"
      },
      {
        "sha": "3749ffabf34a7fc2fe16a310f6c36ef46cf0799c",
        "filename": "src/qt/res/icons/transaction.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/res/icons/transaction.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c2f37b3510e26ba86569f451edc40a8cbe8dd35/src/qt/res/icons/transaction.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/transaction.png?ref=6c2f37b3510e26ba86569f451edc40a8cbe8dd35"
      }
    ]
  }
]