jonasschnelli,2015-11-20T12:28:52Z,"Also includes a simple mempool limiting RPC test, PR passed this new test (confirmations = 0) as well as the `txn_doublespend.py` (confirmations = -1).\n",https://github.com/bitcoin/bitcoin/pull/7067#issuecomment-158384251,158384251,
jonasschnelli,2015-11-20T13:57:35Z,Added two commits:\n- 4006e1e69a932544bae8cb704e10b2f8bf49494c reaccept/rebroadcast all wtx with a height of 0 (the current code only reaccepted wtx with a height of < 0 which is the indicator for conflicted wtx). IMO it shouldn't hurt if we try to `AcceptToMemoryPool()` an already existing wtx.\n- 88c1ed7f7a7e62032e629e701353031eeb977cab does prevent wtxs from being markt as conflicted if they al,https://github.com/bitcoin/bitcoin/pull/7067#issuecomment-158409063,158409063,
instagibbs,2015-11-20T14:20:19Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/7067#issuecomment-158413502,158413502,
jonasschnelli,2015-11-24T12:03:56Z,"@gmaxwell: Thanks for testing!\nYour absolutely right. The test order was wrong. Fixed, .. now lets see if travis can pass the `walletbackup.py` RPC test.\n",https://github.com/bitcoin/bitcoin/pull/7067#issuecomment-159248089,159248089,
gmaxwell,2015-11-24T12:18:45Z,"Reviewing, haven't tested. Will test when robo tests pass! :) \n",https://github.com/bitcoin/bitcoin/pull/7067#issuecomment-159250754,159250754,
jonasschnelli,2015-11-25T14:46:56Z,binaries if some likes to test without self-compiling: https://bitcoin.jonasschnelli.ch/pulls/7067/\n,https://github.com/bitcoin/bitcoin/pull/7067#issuecomment-159629461,159629461,
sipa,2015-11-28T12:58:43Z,See alternative (but more invasive change) in #7105.\n,https://github.com/bitcoin/bitcoin/pull/7067#issuecomment-160292293,160292293,
jonasschnelli,2015-11-28T14:42:56Z,Closing in favor of #7105\n,https://github.com/bitcoin/bitcoin/pull/7067#issuecomment-160306231,160306231,
sipa,2015-11-26T15:47:45Z,The conflicted check can move up here (no need to compute depth in that case).\n,https://github.com/bitcoin/bitcoin/pull/7067#discussion_r45990609,45990609,src/wallet/wallet.cpp
sipa,2015-11-26T15:50:35Z,"This is recursive logic. You're computing the value of the conflicted flag based on the output of GetDepthInMainChain, while conflicted is used to determine the output value of it. I know it doesn't matter here because you check for 0 or -1, but it's be much cleaner to call the INTERNAL version here, I think?\n",https://github.com/bitcoin/bitcoin/pull/7067#discussion_r45990851,45990851,src/wallet/wallet.cpp
sipa,2015-11-26T15:51:10Z,Iterating over all wallet transactions on every block update? That seems very inefficient...\n,https://github.com/bitcoin/bitcoin/pull/7067#discussion_r45990901,45990901,src/wallet/wallet.cpp
sipa,2015-11-26T15:51:29Z,"This accesses pcoinsTip, so it also needs to lock cs_main.\n",https://github.com/bitcoin/bitcoin/pull/7067#discussion_r45990941,45990941,src/main.cpp
jonasschnelli,2015-11-26T16:01:53Z,"This PR changes `GetDepthInMainChain()` that it only calls `GetDepthInMainChainINTERNAL`, _plus_ it evaluates the boolean cache flag if the transaction is conflicted.\nShould be okay IMO.\n",https://github.com/bitcoin/bitcoin/pull/7067#discussion_r45991952,45991952,src/wallet/wallet.cpp
jonasschnelli,2015-11-26T16:02:53Z,Right.. but this only gets when fInitialSync = false. But I agree and I could not found a better solution...\n,https://github.com/bitcoin/bitcoin/pull/7067#discussion_r45992043,45992043,src/wallet/wallet.cpp
jtimon,2015-11-26T16:09:14Z,You could have a `const CTxMemPool& pool` parameter instead of using the global mempool (like AcceptToMemoryPool).\nThe same goes for pcoinsTip.\n,https://github.com/bitcoin/bitcoin/pull/7067#discussion_r45992532,45992532,src/main.cpp
sipa,2015-11-26T16:17:26Z,I don't disagree that it is okay. But it's extremely ugly (and very easily turned into an inconsistent result if the logic ever gets changed).\n,https://github.com/bitcoin/bitcoin/pull/7067#discussion_r45993334,45993334,src/wallet/wallet.cpp
