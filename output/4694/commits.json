[
  {
    "sha": "661e047781308bbd19ce53c1f0e50fcad26cfd1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjFlMDQ3NzgxMzA4YmJkMTljZTUzYzFmMGU1MGZjYWQyNmNmZDFk",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-08-13T11:32:31Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-06T06:41:44Z"
      },
      "message": "Don't hash what you're not going to sign",
      "tree": {
        "sha": "57f8798b26aaf26cec09d86e4e2eece6cd673158",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57f8798b26aaf26cec09d86e4e2eece6cd673158"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/661e047781308bbd19ce53c1f0e50fcad26cfd1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/661e047781308bbd19ce53c1f0e50fcad26cfd1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/661e047781308bbd19ce53c1f0e50fcad26cfd1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/661e047781308bbd19ce53c1f0e50fcad26cfd1d/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5505a1b13f75af9f0f6421b42d97c06e079db345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5505a1b13f75af9f0f6421b42d97c06e079db345",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5505a1b13f75af9f0f6421b42d97c06e079db345"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 7,
      "deletions": 11
    },
    "files": [
      {
        "sha": "787081d061ba5927c502d10f7c0c69859beb2aa3",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/661e047781308bbd19ce53c1f0e50fcad26cfd1d/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/661e047781308bbd19ce53c1f0e50fcad26cfd1d/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=661e047781308bbd19ce53c1f0e50fcad26cfd1d",
        "patch": "@@ -52,15 +52,18 @@ bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint2\n // unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.\n // Returns false if scriptPubKey could not be completely satisfied.\n //\n-bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType,\n-                  CScript& scriptSigRet, txnouttype& whichTypeRet)\n+bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType, CScript& scriptSigRet, txnouttype& whichTypeRet)\n {\n     scriptSigRet.clear();\n \n     vector<valtype> vSolutions;\n     if (!Solver(scriptPubKey, whichTypeRet, vSolutions))\n         return false;\n \n+    // Leave out the signature from the hash, since a signature can't sign itself.\n+    // The checksig op will also drop the signatures from its hash.\n+    uint256 hash = SignatureHash(scriptPubKey, txTo, nIn, nHashType);\n+\n     CKeyID keyID;\n     switch (whichTypeRet)\n     {\n@@ -96,12 +99,8 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     assert(nIn < txTo.vin.size());\n     CTxIn& txin = txTo.vin[nIn];\n \n-    // Leave out the signature from the hash, since a signature can't sign itself.\n-    // The checksig op will also drop the signatures from its hash.\n-    uint256 hash = SignatureHash(fromPubKey, txTo, nIn, nHashType);\n-\n     txnouttype whichType;\n-    if (!Solver(keystore, fromPubKey, hash, nHashType, txin.scriptSig, whichType))\n+    if (!Solver(keystore, fromPubKey, txTo, nIn, nHashType, txin.scriptSig, whichType))\n         return false;\n \n     if (whichType == TX_SCRIPTHASH)\n@@ -111,12 +110,9 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n         // and then the serialized subscript:\n         CScript subscript = txin.scriptSig;\n \n-        // Recompute txn hash using subscript in place of scriptPubKey:\n-        uint256 hash2 = SignatureHash(subscript, txTo, nIn, nHashType);\n-\n         txnouttype subType;\n         bool fSolved =\n-            Solver(keystore, subscript, hash2, nHashType, txin.scriptSig, subType) && subType != TX_SCRIPTHASH;\n+            Solver(keystore, subscript, txTo, nIn, nHashType, txin.scriptSig, subType) && subType != TX_SCRIPTHASH;\n         // Append serialized subscript whether or not it is completely signed:\n         txin.scriptSig << static_cast<valtype>(subscript);\n         if (!fSolved) return false;"
      }
    ]
  },
  {
    "sha": "d9a2c22a0b0f6d9e62f62dee881413e6a36ebe0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWEyYzIyYTBiMGY2ZDllNjJmNjJkZWU4ODE0MTNlNmEzNmViZTBj",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-08-13T13:27:45Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-06T17:57:36Z"
      },
      "message": "Refactor SignSignature and higher level Solver",
      "tree": {
        "sha": "b465867e0475e50867a2257f5425fb2ee7fc65b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b465867e0475e50867a2257f5425fb2ee7fc65b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9a2c22a0b0f6d9e62f62dee881413e6a36ebe0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9a2c22a0b0f6d9e62f62dee881413e6a36ebe0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9a2c22a0b0f6d9e62f62dee881413e6a36ebe0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9a2c22a0b0f6d9e62f62dee881413e6a36ebe0c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "661e047781308bbd19ce53c1f0e50fcad26cfd1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/661e047781308bbd19ce53c1f0e50fcad26cfd1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/661e047781308bbd19ce53c1f0e50fcad26cfd1d"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 18,
      "deletions": 19
    },
    "files": [
      {
        "sha": "2c997bdb0a3c4557e01ee44d319051a9beb73f46",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 19,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9a2c22a0b0f6d9e62f62dee881413e6a36ebe0c/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9a2c22a0b0f6d9e62f62dee881413e6a36ebe0c/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=d9a2c22a0b0f6d9e62f62dee881413e6a36ebe0c",
        "patch": "@@ -52,23 +52,20 @@ bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint2\n // unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.\n // Returns false if scriptPubKey could not be completely satisfied.\n //\n-bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType, CScript& scriptSigRet, txnouttype& whichTypeRet)\n+bool SignSignature(const CKeyStore& keystore, const CScript& scriptPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType, CScript& scriptSigRet, const txnouttype& whichType, const vector<valtype> vSolutions)\n {\n     scriptSigRet.clear();\n \n-    vector<valtype> vSolutions;\n-    if (!Solver(scriptPubKey, whichTypeRet, vSolutions))\n-        return false;\n-\n     // Leave out the signature from the hash, since a signature can't sign itself.\n     // The checksig op will also drop the signatures from its hash.\n     uint256 hash = SignatureHash(scriptPubKey, txTo, nIn, nHashType);\n \n     CKeyID keyID;\n-    switch (whichTypeRet)\n+    switch (whichType)\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n+    case TX_SCRIPTHASH:\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n@@ -84,9 +81,6 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, CMutableTran\n             scriptSigRet << vch;\n         }\n         return true;\n-    case TX_SCRIPTHASH:\n-        return keystore.GetCScript(uint160(vSolutions[0]), scriptSigRet);\n-\n     case TX_MULTISIG:\n         scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n         return (SignN(vSolutions, keystore, hash, nHashType, scriptSigRet));\n@@ -100,26 +94,31 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     CTxIn& txin = txTo.vin[nIn];\n \n     txnouttype whichType;\n-    if (!Solver(keystore, fromPubKey, txTo, nIn, nHashType, txin.scriptSig, whichType))\n+    vector<valtype> vSolutions;\n+    if (!Solver(fromPubKey, whichType, vSolutions))\n         return false;\n \n+    bool fSolved;\n     if (whichType == TX_SCRIPTHASH)\n     {\n-        // Solver returns the subscript that need to be evaluated;\n-        // the final scriptSig is the signatures from that\n-        // and then the serialized subscript:\n-        CScript subscript = txin.scriptSig;\n+        // The keystore contains the subscript that needs to be evaluated\n+        CScript subscript;\n+        if (!keystore.GetCScript(uint160(vSolutions[0]), subscript))\n+            return false;\n \n         txnouttype subType;\n-        bool fSolved =\n-            Solver(keystore, subscript, txTo, nIn, nHashType, txin.scriptSig, subType) && subType != TX_SCRIPTHASH;\n-        // Append serialized subscript whether or not it is completely signed:\n+        vSolutions.clear();\n+        fSolved = Solver(subscript, subType, vSolutions);\n+        fSolved = fSolved && SignSignature(keystore, subscript, txTo, nIn, nHashType, txin.scriptSig, subType, vSolutions);\n+        // The final scriptSig are the signatures from the subscript and then\n+        // the serialized subscript whether or not it is completely signed:\n         txin.scriptSig << static_cast<valtype>(subscript);\n-        if (!fSolved) return false;\n+    } else {\n+         fSolved = SignSignature(keystore, fromPubKey, txTo, nIn, nHashType, txin.scriptSig, whichType, vSolutions);\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(txTo, nIn));\n+    return fSolved && VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(txTo, nIn));\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)"
      }
    ]
  }
]