[
  {
    "sha": "faf3044029363148b155e4747a2dcb3dc55dbd32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWYzMDQ0MDI5MzYzMTQ4YjE1NWU0NzQ3YTJkY2IzZGM1NWRiZDMy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-10-05T15:39:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-10-05T15:48:30Z"
      },
      "message": "p2p: Disconnect, not discourage, misbehaving NODE_BLOOM peers\n\nReceiving an oversized FILERLOAD or FILTERADD message is about as costly\nas receiving any large-sized unknown message. Light clients are already\npreferred for eviction, so no need to additionally discourage them.",
      "tree": {
        "sha": "651bf56088a96fe3cd0bda7d2df90f5dc5d81808",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/651bf56088a96fe3cd0bda7d2df90f5dc5d81808"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf3044029363148b155e4747a2dcb3dc55dbd32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgC+wwAuTXk0DwoFMN571DltW56LcUBSiargzca/afN/R9rg+plRL/RPvXOwHuT\nT3ipHtwdH+hwNAmPimSLQdQtCwpbIZhg1N1XF+rMgPj+qJsl3Jynawv9CWXpfpiS\na8Od/Y6Yj7QM7MSF2T3lYf3vXdI15fR78bGAVQjmcsAQPG0hVAojC9u4mlTghvB+\nDpMbmjS/66eMiNleyoCceIC1rCXymIA9ew/WsPhzOSEHR8zWdVRLrPdDOouPs9uw\nHb3GaB3pqX2hkTbEdMauPtFIkZtnZwDcVOYL/3jNiRnVP/wY3AeN4E/n8Rps1wXx\n447AGmmN//CJANQA/g33YKUxpVCtNW4pc2m7XRHN5kMjAZqFDZw2NCyGkWkZoTh+\nVKLVhn9qEq2EG5CJhLCFr03NTOgsGlEitfdxCrw689NEecnPmWzSi+cPhMVy8x5l\nMAPCWBRIzZmBp6L7AhTsioJjYzoLzNS8jzx3lE2FcJ5rf+5tcQ+QWDtVoIBBYjzy\nplaY9AhQ\n=A6Em\n-----END PGP SIGNATURE-----",
        "payload": "tree 651bf56088a96fe3cd0bda7d2df90f5dc5d81808\nparent 875e1ccc9fe01e026e564dfd39a64d9a4b332a89\nauthor MarcoFalke <falke.marco@gmail.com> 1601912359 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1601912910 +0200\n\np2p: Disconnect, not discourage, misbehaving NODE_BLOOM peers\n\nReceiving an oversized FILERLOAD or FILTERADD message is about as costly\nas receiving any large-sized unknown message. Light clients are already\npreferred for eviction, so no need to additionally discourage them.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf3044029363148b155e4747a2dcb3dc55dbd32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf3044029363148b155e4747a2dcb3dc55dbd32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf3044029363148b155e4747a2dcb3dc55dbd32/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "875e1ccc9fe01e026e564dfd39a64d9a4b332a89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/875e1ccc9fe01e026e564dfd39a64d9a4b332a89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/875e1ccc9fe01e026e564dfd39a64d9a4b332a89"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 25,
      "deletions": 24
    },
    "files": [
      {
        "sha": "228277a90035ff86494aa75952f207b79dddf197",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf3044029363148b155e4747a2dcb3dc55dbd32/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf3044029363148b155e4747a2dcb3dc55dbd32/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=faf3044029363148b155e4747a2dcb3dc55dbd32",
        "patch": "@@ -3688,7 +3688,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         if (!filter.IsWithinSizeConstraints())\n         {\n             // There is no excuse for sending a too-large filter\n-            Misbehaving(pfrom.GetId(), 100, \"too-large bloom filter\");\n+            pfrom.fDisconnect = true;\n         }\n         else if (pfrom.m_tx_relay != nullptr)\n         {\n@@ -3709,20 +3709,16 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n \n         // Nodes must NEVER send a data item > 520 bytes (the max size for a script data object,\n         // and thus, the maximum size any matched object can have) in a filteradd message\n-        bool bad = false;\n         if (vData.size() > MAX_SCRIPT_ELEMENT_SIZE) {\n-            bad = true;\n+            pfrom.fDisconnect = true;\n         } else if (pfrom.m_tx_relay != nullptr) {\n             LOCK(pfrom.m_tx_relay->cs_filter);\n             if (pfrom.m_tx_relay->pfilter) {\n                 pfrom.m_tx_relay->pfilter->insert(vData);\n             } else {\n-                bad = true;\n+                pfrom.fDisconnect = true;\n             }\n         }\n-        if (bad) {\n-            Misbehaving(pfrom.GetId(), 100, \"bad filteradd message\");\n-        }\n         return;\n     }\n "
      },
      {
        "sha": "d214101f21575a519335f602187452b92c50ff63",
        "filename": "test/functional/p2p_filter.py",
        "status": "modified",
        "additions": 22,
        "deletions": 17,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf3044029363148b155e4747a2dcb3dc55dbd32/test/functional/p2p_filter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf3044029363148b155e4747a2dcb3dc55dbd32/test/functional/p2p_filter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_filter.py?ref=faf3044029363148b155e4747a2dcb3dc55dbd32",
        "patch": "@@ -91,32 +91,33 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n-    def test_size_limits(self, filter_peer):\n+    def test_size_limits(self):\n+        filter_peer = self.nodes[0].add_p2p_connection(P2PBloomFilter())\n         self.log.info('Check that too large filter is rejected')\n-        with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n+        with self.nodes[0].assert_debug_log(['disconnecting peer']):\n+            filter_peer = self.send_and_wait_for_disconnect(filter_peer, msg_filterload(data=b'\\xbb' * (MAX_BLOOM_FILTER_SIZE + 1)))\n \n         self.log.info('Check that max size filter is accepted')\n-        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['disconnecting peer']):\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb' * (MAX_BLOOM_FILTER_SIZE)))\n         filter_peer.send_and_ping(msg_filterclear())\n \n         self.log.info('Check that filter with too many hash functions is rejected')\n-        with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n+        with self.nodes[0].assert_debug_log(['disconnecting peer']):\n+            filter_peer = self.send_and_wait_for_disconnect(filter_peer, msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS + 1))\n \n         self.log.info('Check that filter with max hash functions is accepted')\n-        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['disconnecting peer']):\n             filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n         # Don't send filterclear until next two filteradd checks are done\n \n         self.log.info('Check that max size data element to add to the filter is accepted')\n-        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['disconnecting peer']):\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc' * (MAX_SCRIPT_ELEMENT_SIZE)))\n \n         self.log.info('Check that too large data element to add to the filter is rejected')\n-        with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n+        with self.nodes[0].assert_debug_log(['disconnecting peer']):\n+            filter_peer = self.send_and_wait_for_disconnect(filter_peer, msg_filteradd(data=b'\\xcc' * (MAX_SCRIPT_ELEMENT_SIZE + 1)))\n \n         filter_peer.send_and_ping(msg_filterclear())\n \n@@ -197,21 +198,25 @@ def test_filter(self, filter_peer):\n             assert not filter_peer.tx_received\n \n         self.log.info('Check that sending \"filteradd\" if no filter is set is treated as misbehavior')\n-        with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_peer.send_and_ping(msg_filteradd(data=b'letsmisbehave'))\n+        with self.nodes[0].assert_debug_log(['disconnecting peer']):\n+            filter_peer = self.send_and_wait_for_disconnect(filter_peer, msg_filteradd(data=b'letsmisbehave'))\n \n         self.log.info(\"Check that division-by-zero remote crash bug [CVE-2013-5700] is fixed\")\n         filter_peer.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n         filter_peer.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n         self.nodes[0].disconnect_p2ps()\n \n+    def send_and_wait_for_disconnect(self, filter_peer, msg):\n+        filter_peer.send_message(msg)\n+        filter_peer.wait_for_disconnect()\n+        return self.nodes[0].add_p2p_connection(filter_peer.__class__())\n+\n     def run_test(self):\n-        filter_peer = self.nodes[0].add_p2p_connection(P2PBloomFilter())\n         self.log.info('Test filter size limits')\n-        self.test_size_limits(filter_peer)\n+        self.test_size_limits()\n \n         self.log.info('Test BIP 37 for a node with fRelay = True (default)')\n-        self.test_filter(filter_peer)\n+        self.test_filter(self.nodes[0].add_p2p_connection(P2PBloomFilter()))\n         self.nodes[0].disconnect_p2ps()\n \n         self.log.info('Test BIP 37 for a node with fRelay = False')"
      }
    ]
  }
]