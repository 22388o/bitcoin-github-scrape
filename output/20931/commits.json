[
  {
    "sha": "faea902721daf07236f62421d88fc4516366068c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWVhOTAyNzIxZGFmMDcyMzZmNjI0MjFkODhmYzQ1MTYzNjYwNjhj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-14T09:45:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-14T09:40:43Z"
      },
      "message": "doc: Add historic 0.21.0 release notes",
      "tree": {
        "sha": "6ff5bcdbb032065833ddf8e7eba1b109ed22d35d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ff5bcdbb032065833ddf8e7eba1b109ed22d35d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faea902721daf07236f62421d88fc4516366068c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhfagwAjGBNq1rNgw1oYjVwQNlrhOLls+ImacR3DrtkFvb16uM1PuezOJofsQyP\nsPTEQZQR1VxYP6NEHoYDAdiWB3M5wc8RUWa8KZh9v4gOVmXwn0Ix3bC4SmuC0oz0\n16jAZSTbW0v1A3b78Njc0X1glE9gvOeWKOu32RruLW7fUikJ8Ac5Uv4zYXLBCUSw\nk7FwcE4XqiWaliG9gh6tHZ/K1pwIDjzX86T253bL9Ef1kR94lEPdABoRWlNb8gbl\nBv+wnVABBcueTcJCHMGrIxb3ny+ptlK4nKxuTdMqCX71Uh7I3Z14p5suA9Mvgn9A\nRF1DuHUMyRiJRBf4LAGHmQHuDO6OLuBYwS5rYg6z/E3f1Eh21TuxetQaTszeJZ0W\nDr6N0QovTXK1HUblDYdzCBATiiSWNstttSjILz0+V3yBYzgWu7/dz0rU2jxFbwyn\nSyIYVGIP/ghkUsYFy7i88Q6LFqlAbIWCg2bP0OlpbwsjJBSexgYckFOLeRGpSL/4\n8hdAxwTz\n=AQkl\n-----END PGP SIGNATURE-----",
        "payload": "tree 6ff5bcdbb032065833ddf8e7eba1b109ed22d35d\nparent cb2c578451770a29395f79f7077c362e1f54dfdd\nauthor MarcoFalke <falke.marco@gmail.com> 1610617516 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1610617243 +0100\n\ndoc: Add historic 0.21.0 release notes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faea902721daf07236f62421d88fc4516366068c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faea902721daf07236f62421d88fc4516366068c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faea902721daf07236f62421d88fc4516366068c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb2c578451770a29395f79f7077c362e1f54dfdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb2c578451770a29395f79f7077c362e1f54dfdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb2c578451770a29395f79f7077c362e1f54dfdd"
      }
    ],
    "stats": {
      "total": 1336,
      "additions": 1336,
      "deletions": 0
    },
    "files": [
      {
        "sha": "66aee77643bacee6e31dfeb73dfce5a3e3a14efb",
        "filename": "doc/release-notes/release-notes-0.21.0.md",
        "status": "added",
        "additions": 1336,
        "deletions": 0,
        "changes": 1336,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faea902721daf07236f62421d88fc4516366068c/doc/release-notes/release-notes-0.21.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faea902721daf07236f62421d88fc4516366068c/doc/release-notes/release-notes-0.21.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.21.0.md?ref=faea902721daf07236f62421d88fc4516366068c",
        "patch": "@@ -0,0 +1,1336 @@\n+0.21.0 Release Notes\n+====================\n+\n+Bitcoin Core version 0.21.0 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.21.0/>\n+\n+This release includes new features, various bug fixes and performance\n+improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes in some cases), then run the\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+Upgrading directly from a version of Bitcoin Core that has reached its EOL is\n+possible, but it might take some time if the data directory needs to be migrated. Old\n+wallet versions of Bitcoin Core are generally supported.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is supported and extensively tested on operating systems\n+using the Linux kernel, macOS 10.12+, and Windows 7 and newer.  Bitcoin\n+Core should also work on most other Unix-like systems but is not as\n+frequently tested on them.  It is not recommended to use Bitcoin Core on\n+unsupported systems.\n+\n+From Bitcoin Core 0.20.0 onwards, macOS versions earlier than 10.12 are no\n+longer supported. Additionally, Bitcoin Core does not yet change appearance\n+when macOS \"dark mode\" is activated.\n+\n+The node's known peers are persisted to disk in a file called `peers.dat`. The\n+format of this file has been changed in a backwards-incompatible way in order to\n+accommodate the storage of Tor v3 and other BIP155 addresses. This means that if\n+the file is modified by 0.21.0 or newer then older versions will not be able to\n+read it. Those old versions, in the event of a downgrade, will log an error\n+message \"Incorrect keysize in addrman deserialization\" and will continue normal\n+operation as if the file was missing, creating a new empty one. (#19954, #20284)\n+\n+Notable changes\n+===============\n+\n+P2P and network changes\n+-----------------------\n+\n+- The mempool now tracks whether transactions submitted via the wallet or RPCs\n+  have been successfully broadcast. Every 10-15 minutes, the node will try to\n+  announce unbroadcast transactions until a peer requests it via a `getdata`\n+  message or the transaction is removed from the mempool for other reasons.\n+  The node will not track the broadcast status of transactions submitted to the\n+  node using P2P relay. This version reduces the initial broadcast guarantees\n+  for wallet transactions submitted via P2P to a node running the wallet. (#18038)\n+\n+- The size of the set of transactions that peers have announced and we consider\n+  for requests has been reduced from 100000 to 5000 (per peer), and further\n+  announcements will be ignored when that limit is reached. If you need to dump\n+  (very) large batches of transactions, exceptions can be made for trusted\n+  peers using the \"relay\" network permission. For localhost for example it can\n+  be enabled using the command line option `-whitelist=relay@127.0.0.1`.\n+  (#19988)\n+\n+- This release adds support for Tor version 3 hidden services, and rumoring them\n+  over the network to other peers using\n+  [BIP155](https://github.com/bitcoin/bips/blob/master/bip-0155.mediawiki).\n+  Version 2 hidden services are still fully supported by Bitcoin Core, but the\n+  Tor network will start\n+  [deprecating](https://blog.torproject.org/v2-deprecation-timeline) them in the\n+  coming months. (#19954)\n+\n+- The Tor onion service that is automatically created by setting the\n+  `-listenonion` configuration parameter will now be created as a Tor v3 service\n+  instead of Tor v2. The private key that was used for Tor v2 (if any) will be\n+  left untouched in the `onion_private_key` file in the data directory (see\n+  `-datadir`) and can be removed if not needed. Bitcoin Core will no longer\n+  attempt to read it. The private key for the Tor v3 service will be saved in a\n+  file named `onion_v3_private_key`. To use the deprecated Tor v2 service (not\n+  recommended), the `onion_private_key` can be copied over\n+  `onion_v3_private_key`, e.g.\n+  `cp -f onion_private_key onion_v3_private_key`. (#19954)\n+\n+- The client writes a file (`anchors.dat`) at shutdown with the network addresses\n+  of the node\u2019s two outbound block-relay-only peers (so called \"anchors\"). The\n+  next time the node starts, it reads this file and attempts to reconnect to those\n+  same two peers. This prevents an attacker from using node restarts to trigger a\n+  complete change in peers, which would be something they could use as part of an\n+  eclipse attack. (#17428)\n+\n+- This release adds support for serving\n+  [BIP157](https://github.com/bitcoin/bips/blob/master/bip-0157.mediawiki) compact\n+  filters to peers on the network when enabled using\n+  `-blockfilterindex=1 -peercfilters=1`. (#16442)\n+\n+- This release adds support for signets\n+  ([BIP325](https://github.com/bitcoin/bips/blob/master/bip-0325.mediawiki)) in\n+  addition to the existing mainnet, testnet, and regtest networks. Signets are\n+  centrally-controlled test networks, allowing them to be more predictable\n+  test environments than the older testnet. One public signet is maintained, and\n+  selectable using `-signet`. It is also possible to create personal signets.\n+  (#18267).\n+\n+- This release implements\n+  [BIP339](https://github.com/bitcoin/bips/blob/master/bip-0339.mediawiki)\n+  wtxid relay. When negotiated, transactions are announced using their wtxid\n+  instead of their txid. (#18044).\n+\n+- This release implements the proposed Taproot consensus rules\n+  ([BIP341](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki) and\n+  [BIP342](https://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki)),\n+  without activation on mainnet. Experimentation with Taproot can be done on\n+  signet, where its rules are already active. (#19553)\n+\n+Updated RPCs\n+------------\n+\n+- The `getpeerinfo` RPC has a new `network` field that provides the type of\n+  network (\"ipv4\", \"ipv6\", or \"onion\") that the peer connected through. (#20002)\n+\n+- The `getpeerinfo` RPC now has additional `last_block` and `last_transaction`\n+  fields that return the UNIX epoch time of the last block and the last *valid*\n+  transaction received from each peer. (#19731)\n+\n+- `getnetworkinfo` now returns two new fields, `connections_in` and\n+  `connections_out`, that provide the number of inbound and outbound peer\n+  connections. These new fields are in addition to the existing `connections`\n+  field, which returns the total number of peer connections. (#19405)\n+\n+- Exposed transaction version numbers are now treated as unsigned 32-bit\n+  integers instead of signed 32-bit integers. This matches their treatment in\n+  consensus logic. Versions greater than 2 continue to be non-standard\n+  (matching previous behavior of smaller than 1 or greater than 2 being\n+  non-standard). Note that this includes the `joinpsbt` command, which combines\n+  partially-signed transactions by selecting the highest version number.\n+  (#16525)\n+\n+- `getmempoolinfo` now returns an additional `unbroadcastcount` field. The\n+  mempool tracks locally submitted transactions until their initial broadcast\n+  is acknowledged by a peer. This field returns the count of transactions\n+  waiting for acknowledgement.\n+\n+- Mempool RPCs such as `getmempoolentry` and `getrawmempool` with\n+  `verbose=true` now return an additional `unbroadcast` field. This indicates\n+  whether initial broadcast of the transaction has been acknowledged by a\n+  peer. `getmempoolancestors` and `getmempooldescendants` are also updated.\n+\n+- The `getpeerinfo` RPC no longer returns the `banscore` field unless the configuration\n+  option `-deprecatedrpc=banscore` is used. The `banscore` field will be fully\n+  removed in the next major release. (#19469)\n+\n+- The `testmempoolaccept` RPC returns `vsize` and a `fees` object with the `base` fee\n+  if the transaction would pass validation. (#19940)\n+\n+- The `getpeerinfo` RPC now returns a `connection_type` field. This indicates\n+  the type of connection established with the peer. It will return one of six\n+  options. For more information, see the `getpeerinfo` help documentation.\n+  (#19725)\n+\n+- The `getpeerinfo` RPC no longer returns the `addnode` field by default. This\n+  field will be fully removed in the next major release.  It can be accessed\n+  with the configuration option `-deprecatedrpc=getpeerinfo_addnode`. However,\n+  it is recommended to instead use the `connection_type` field (it will return\n+  `manual` when addnode is true). (#19725)\n+\n+- The `getpeerinfo` RPC no longer returns the `whitelisted` field by default. \n+  This field will be fully removed in the next major release. It can be accessed \n+  with the configuration option `-deprecatedrpc=getpeerinfo_whitelisted`. However, \n+  it is recommended to instead use the `permissions` field to understand if specific \n+  privileges have been granted to the peer. (#19770)\n+\n+- The `walletcreatefundedpsbt` RPC call will now fail with\n+  `Insufficient funds` when inputs are manually selected but are not enough to cover\n+  the outputs and fee. Additional inputs can automatically be added through the\n+  new `add_inputs` option. (#16377)\n+\n+- The `fundrawtransaction` RPC now supports `add_inputs` option that when `false`\n+  prevents adding more inputs if necessary and consequently the RPC fails.\n+\n+Changes to Wallet or GUI related RPCs can be found in the GUI or Wallet section below.\n+\n+New RPCs\n+--------\n+\n+- The `getindexinfo` RPC returns the actively running indices of the node,\n+  including their current sync status and height. It also accepts an `index_name`\n+  to specify returning the status of that index only. (#19550)\n+\n+Build System\n+------------\n+\n+Updated settings\n+----------------\n+\n+- The same ZeroMQ notification (e.g. `-zmqpubhashtx=address`) can now be\n+  specified multiple times to publish the same notification to different ZeroMQ\n+  sockets. (#18309)\n+\n+- The `-banscore` configuration option, which modified the default threshold for\n+  disconnecting and discouraging misbehaving peers, has been removed as part of\n+  changes in 0.20.1 and in this release to the handling of misbehaving peers.\n+  Refer to \"Changes regarding misbehaving peers\" in the 0.20.1 release notes for\n+  details. (#19464)\n+\n+- The `-debug=db` logging category, which was deprecated in 0.20 and replaced by\n+  `-debug=walletdb` to distinguish it from `coindb`, has been removed. (#19202)\n+\n+- A `download` permission has been extracted from the `noban` permission. For\n+  compatibility, `noban` implies the `download` permission, but this may change\n+  in future releases. Refer to the help of the affected settings `-whitebind`\n+  and `-whitelist` for more details. (#19191)\n+\n+- Netmasks that contain 1-bits after 0-bits (the 1-bits are not contiguous on\n+  the left side, e.g. 255.0.255.255) are no longer accepted. They are invalid\n+  according to RFC 4632. Netmasks are used in the `-rpcallowip` and `-whitelist`\n+  configuration options and in the `setban` RPC. (#19628)\n+\n+- The `-blocksonly` setting now completely disables fee estimation. (#18766)\n+\n+Changes to Wallet or GUI related settings can be found in the GUI or Wallet section below.\n+\n+Tools and Utilities\n+-------------------\n+\n+- A new `bitcoin-cli -netinfo` command provides a network peer connections\n+  dashboard that displays data from the `getpeerinfo` and `getnetworkinfo` RPCs\n+  in a human-readable format. An optional integer argument from `0` to `4` may\n+  be passed to see increasing levels of detail. (#19643)\n+\n+- A new `bitcoin-cli -generate` command, equivalent to RPC `generatenewaddress`\n+  followed by `generatetoaddress`, can generate blocks for command line testing\n+  purposes. This is a client-side version of the former `generate` RPC. See the\n+  help for details. (#19133)\n+\n+- The `bitcoin-cli -getinfo` command now displays the wallet name and balance for\n+  each of the loaded wallets when more than one is loaded (e.g. in multiwallet\n+  mode) and a wallet is not specified with `-rpcwallet`. (#18594)\n+\n+- The `connections` field of `bitcoin-cli -getinfo` is now expanded to return a JSON\n+  object with `in`, `out` and `total` numbers of peer connections. It previously\n+  returned a single integer value for the total number of peer connections. (#19405)\n+\n+New settings\n+------------\n+\n+- The `startupnotify` option is used to specify a command to\n+  execute when Bitcoin Core has finished with its startup\n+  sequence. (#15367)\n+\n+Wallet\n+------\n+\n+- Backwards compatibility has been dropped for two `getaddressinfo` RPC\n+  deprecations, as notified in the 0.20 release notes. The deprecated `label`\n+  field has been removed as well as the deprecated `labels` behavior of\n+  returning a JSON object containing `name` and `purpose` key-value pairs. Since\n+  0.20, the `labels` field returns a JSON array of label names. (#19200)\n+\n+- To improve wallet privacy, the frequency of wallet rebroadcast attempts is\n+  reduced from approximately once every 15 minutes to once every 12-36 hours.\n+  To maintain a similar level of guarantee for initial broadcast of wallet\n+  transactions, the mempool tracks these transactions as a part of the newly\n+  introduced unbroadcast set. See the \"P2P and network changes\" section for\n+  more information on the unbroadcast set. (#18038)\n+\n+- The `sendtoaddress` and `sendmany` RPCs accept an optional `verbose=True`\n+  argument to also return the fee reason about the sent tx. (#19501)\n+\n+- The wallet can create a transaction without change even when the keypool is\n+  empty. Previously it failed. (#17219)\n+\n+- The `-salvagewallet` startup option has been removed. A new `salvage` command\n+  has been added to the `bitcoin-wallet` tool which performs the salvage\n+  operations that `-salvagewallet` did. (#18918)\n+\n+- A new configuration flag `-maxapsfee` has been added, which sets the max\n+  allowed avoid partial spends (APS) fee. It defaults to 0 (i.e. fee is the\n+  same with and without APS). Setting it to -1 will disable APS, unless\n+  `-avoidpartialspends` is set. (#14582)\n+\n+- The wallet will now avoid partial spends (APS) by default, if this does not\n+  result in a difference in fees compared to the non-APS variant. The allowed\n+  fee threshold can be adjusted using the new `-maxapsfee` configuration\n+  option. (#14582)\n+\n+- The `createwallet`, `loadwallet`, and `unloadwallet` RPCs now accept\n+  `load_on_startup` options to modify the settings list. Unless these options\n+  are explicitly set to true or false, the list is not modified, so the RPC\n+  methods remain backwards compatible. (#15937)\n+\n+- A new `send` RPC with similar syntax to `walletcreatefundedpsbt`, including\n+  support for coin selection and a custom fee rate, is added. The `send` RPC is\n+  experimental and may change in subsequent releases. (#16378)\n+\n+- The `estimate_mode` parameter is now case-insensitive in the `bumpfee`,\n+  `fundrawtransaction`, `sendmany`, `sendtoaddress`, `send` and\n+  `walletcreatefundedpsbt` RPCs. (#11413)\n+\n+- The `bumpfee` RPC now uses `conf_target` rather than `confTarget` in the\n+  options. (#11413)\n+\n+- `fundrawtransaction` and `walletcreatefundedpsbt` when used with the\n+  `lockUnspents` argument now lock manually selected coins, in addition to\n+  automatically selected coins. Note that locked coins are never used in\n+  automatic coin selection, but can still be manually selected. (#18244)\n+\n+- The `-zapwallettxes` startup option has been removed and its functionality\n+  removed from the wallet.  This option was originally intended to allow for\n+  rescuing wallets which were affected by a malleability attack. More recently,\n+  it has been used in the fee bumping of transactions that did not signal RBF.\n+  This functionality has been superseded with the abandon transaction feature. (#19671)\n+\n+- The error code when no wallet is loaded, but a wallet RPC is called, has been\n+  changed from `-32601` (method not found) to `-18` (wallet not found).\n+  (#20101)\n+\n+### Automatic wallet creation removed\n+\n+Bitcoin Core will no longer automatically create new wallets on startup. It will\n+load existing wallets specified by `-wallet` options on the command line or in\n+`bitcoin.conf` or `settings.json` files. And by default it will also load a\n+top-level unnamed (\"\") wallet. However, if specified wallets don't exist,\n+Bitcoin Core will now just log warnings instead of creating new wallets with\n+new keys and addresses like previous releases did.\n+\n+New wallets can be created through the GUI (which has a more prominent create\n+wallet option), through the `bitcoin-cli createwallet` or `bitcoin-wallet\n+create` commands, or the `createwallet` RPC. (#15454, #20186)\n+\n+### Experimental Descriptor Wallets\n+\n+Please note that Descriptor Wallets are still experimental and not all expected functionality\n+is available. Additionally there may be some bugs and current functions may change in the future.\n+Bugs and missing functionality can be reported to the [issue tracker](https://github.com/bitcoin/bitcoin/issues).\n+\n+0.21 introduces a new type of wallet - Descriptor Wallets. Descriptor Wallets store\n+scriptPubKey information using output descriptors. This is in contrast to the Legacy Wallet\n+structure where keys are used to implicitly generate scriptPubKeys and addresses. Because of this\n+shift to being script based instead of key based, many of the confusing things that Legacy\n+Wallets do are not possible with Descriptor Wallets. Descriptor Wallets use a definition\n+of \"mine\" for scripts which is simpler and more intuitive than that used by Legacy Wallets.\n+Descriptor Wallets also uses different semantics for watch-only things and imports.\n+\n+As Descriptor Wallets are a new type of wallet, their introduction does not affect existing wallets.\n+Users who already have a Bitcoin Core wallet can continue to use it as they did before without\n+any change in behavior. Newly created Legacy Wallets (which remains the default type of wallet) will\n+behave as they did in previous versions of Bitcoin Core.\n+\n+The differences between Descriptor Wallets and Legacy Wallets are largely limited to non user facing\n+things. They are intended to behave similarly except for the import/export and watchonly functionality\n+as described below.\n+\n+#### Creating Descriptor Wallets\n+\n+Descriptor wallets are not the default type of wallet.\n+\n+In the GUI, a checkbox has been added to the Create Wallet Dialog to indicate that a\n+Descriptor Wallet should be created. And a `descriptors` option has been added to `createwallet` RPC.\n+Setting `descriptors` to `true` will create a Descriptor Wallet instead of a Legacy Wallet.\n+\n+Without those options being set, a Legacy Wallet will be created instead.\n+\n+#### `IsMine` Semantics\n+\n+`IsMine` refers to the function used to determine whether a script belongs to the wallet.\n+This is used to determine whether an output belongs to the wallet. `IsMine` in Legacy Wallets\n+returns true if the wallet would be able to sign an input that spends an output with that script.\n+Since keys can be involved in a variety of different scripts, this definition for `IsMine` can\n+lead to many unexpected scripts being considered part of the wallet.\n+\n+With Descriptor Wallets, descriptors explicitly specify the set of scripts that are owned by\n+the wallet. Since descriptors are deterministic and easily enumerable, users will know exactly\n+what scripts the wallet will consider to belong to it. Additionally the implementation of `IsMine`\n+in Descriptor Wallets is far simpler than for Legacy Wallets. Notably, in Legacy Wallets, `IsMine`\n+allowed for users to take one type of address (e.g. P2PKH), mutate it into another address type\n+(e.g. P2WPKH), and the wallet would still detect outputs sending to the new address type\n+even without that address being requested from the wallet. Descriptor Wallets do not\n+allow for this and will only watch for the addresses that were explicitly requested from the wallet.\n+\n+These changes to `IsMine` will make it easier to reason about what scripts the wallet will\n+actually be watching for in outputs. However for the vast majority of users, this change is\n+largely transparent and will not have noticeable effect.\n+\n+#### Imports and Exports\n+\n+In Legacy Wallets, raw scripts and keys could be imported to the wallet. Those imported scripts\n+and keys are treated separately from the keys generated by the wallet. This complicates the `IsMine`\n+logic as it has to distinguish between spendable and watchonly.\n+\n+Descriptor Wallets handle importing scripts and keys differently. Only complete descriptors can be\n+imported. These descriptors are then added to the wallet as if it were a descriptor generated by\n+the wallet itself. This simplifies the `IsMine` logic so that it no longer has to distinguish\n+between spendable and watchonly. As such, the watchonly model for Descriptor Wallets is also\n+different and described in more detail in the next section.\n+\n+To import into a Descriptor Wallet, a new `importdescriptors` RPC has been added that uses a syntax\n+similar to that of `importmulti`.\n+\n+As Legacy Wallets and Descriptor Wallets use different mechanisms for storing and importing scripts and keys\n+the existing import RPCs have been disabled for descriptor wallets.\n+New export RPCs for Descriptor Wallets have not yet been added.\n+\n+The following RPCs are disabled for Descriptor Wallets:\n+\n+* `importprivkey`\n+* `importpubkey`\n+* `importaddress`\n+* `importwallet`\n+* `dumpprivkey`\n+* `dumpwallet`\n+* `importmulti`\n+* `addmultisigaddress`\n+* `sethdseed`\n+\n+#### Watchonly Wallets\n+\n+A Legacy Wallet contains both private keys and scripts that were being watched.\n+Those watched scripts would not contribute to your normal balance. In order to see the watchonly\n+balance and to use watchonly things in transactions, an `include_watchonly` option was added\n+to many RPCs that would allow users to do that. However it is easy to forget to include this option.\n+\n+Descriptor Wallets move to a per-wallet watchonly model. Instead an entire wallet is considered to be\n+watchonly depending on whether it was created with private keys disabled. This eliminates the need\n+to distinguish between things that are watchonly and things that are not within a wallet itself.\n+\n+This change does have a caveat. If a Descriptor Wallet with private keys *enabled* has\n+a multiple key descriptor without all of the private keys (e.g. `multi(...)` with only one private key),\n+then the wallet will fail to sign and broadcast transactions. Such wallets would need to use the PSBT\n+workflow but the typical GUI Send, `sendtoaddress`, etc. workflows would still be available, just\n+non-functional.\n+\n+This issue is worsened if the wallet contains both single key (e.g. `wpkh(...)`) descriptors and such\n+multiple key descriptors as some transactions could be signed and broadcast and others not. This is\n+due to some transactions containing only single key inputs, while others would contain both single\n+key and multiple key inputs, depending on which are available and how the coin selection algorithm\n+selects inputs. However this is not considered to be a supported use case; multisigs\n+should be in their own wallets which do not already have descriptors. Although users cannot export\n+descriptors with private keys for now as explained earlier.\n+\n+#### BIP 44/49/84 Support\n+\n+The change to using descriptors changes the default derivation paths used by Bitcoin Core\n+to adhere to BIP 44/49/84. Descriptors with different derivation paths can be imported without\n+issue.\n+\n+#### SQLite Database Backend\n+\n+Descriptor wallets use SQLite for the wallet file instead of the Berkeley DB used in legacy wallets.\n+This will break compatibility with any existing tooling that operates on wallets, however compatibility\n+was already being broken by the move to descriptors.\n+\n+### Wallet RPC changes\n+\n+- The `upgradewallet` RPC replaces the `-upgradewallet` command line option.\n+  (#15761)\n+\n+- The `settxfee` RPC will fail if the fee was set higher than the `-maxtxfee`\n+  command line setting. The wallet will already fail to create transactions\n+  with fees higher than `-maxtxfee`. (#18467)\n+\n+- A new `fee_rate` parameter/option denominated in satoshis per vbyte (sat/vB)\n+  is introduced to the `sendtoaddress`, `sendmany`, `fundrawtransaction` and\n+  `walletcreatefundedpsbt` RPCs as well as to the experimental new `send`\n+  RPC. The legacy `feeRate` option in `fundrawtransaction` and\n+  `walletcreatefundedpsbt` still exists for setting a fee rate in BTC per 1,000\n+  vbytes (BTC/kvB), but it is expected to be deprecated soon to avoid\n+  confusion. For these RPCs, the fee rate error message is updated from BTC/kB\n+  to sat/vB and the help documentation in BTC/kB is updated to BTC/kvB. The\n+  `send` and `sendtoaddress` RPC examples are updated to aid users in creating\n+  transactions with explicit fee rates. (#20305, #11413)\n+\n+- The `bumpfee` RPC `fee_rate` option is changed from BTC/kvB to sat/vB and the\n+  help documentation is updated. Users are warned that this is a breaking API\n+  change, but it should be relatively benign: the large (100,000 times)\n+  difference between BTC/kvB and sat/vB units means that a transaction with a\n+  fee rate mistakenly calculated in BTC/kvB rather than sat/vB should raise an\n+  error due to the fee rate being set too low. In the worst case, the\n+  transaction may send at 1 sat/vB, but as Replace-by-Fee (BIP125 RBF) is active\n+  by default when an explicit fee rate is used, the transaction fee can be\n+  bumped. (#20305)\n+\n+GUI changes\n+-----------\n+\n+- Wallets created or loaded in the GUI will now be automatically loaded on\n+  startup, so they don't need to be manually reloaded next time Bitcoin Core is\n+  started. The list of wallets to load on startup is stored in\n+  `\\<datadir\\>/settings.json` and augments any command line or `bitcoin.conf`\n+  `-wallet=` settings that specify more wallets to load. Wallets that are\n+  unloaded in the GUI get removed from the settings list so they won't load\n+  again automatically next startup. (#19754)\n+\n+- The GUI Peers window no longer displays a \"Ban Score\" field. This is part of\n+  changes in 0.20.1 and in this release to the handling of misbehaving\n+  peers. Refer to \"Changes regarding misbehaving peers\" in the 0.20.1 release\n+  notes for details. (#19512)\n+\n+Low-level changes\n+=================\n+\n+RPC\n+---\n+\n+- To make RPC `sendtoaddress` more consistent with `sendmany` the following error\n+    `sendtoaddress` codes were changed from `-4` to `-6`:\n+  - Insufficient funds\n+  - Fee estimation failed\n+  - Transaction has too long of a mempool chain\n+\n+- The `sendrawtransaction` error code for exceeding `maxfeerate` has been changed from\n+  `-26` to `-25`. The error string has been changed from \"absurdly-high-fee\" to\n+  \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate).\" The\n+  `testmempoolaccept` RPC returns `max-fee-exceeded` rather than `absurdly-high-fee`\n+  as the `reject-reason`. (#19339)\n+\n+- To make wallet and rawtransaction RPCs more consistent, the error message for\n+  exceeding maximum feerate has been changed to \"Fee exceeds maximum configured by user\n+  (e.g. -maxtxfee, maxfeerate).\" (#19339)\n+\n+Tests\n+-----\n+\n+- The BIP 325 default signet can be enabled by the `-chain=signet` or `-signet`\n+  setting. The settings `-signetchallenge` and `-signetseednode` allow\n+  enabling a custom signet.\n+\n+- The `generateblock` RPC allows testers using regtest mode to\n+  generate blocks that consist of a custom set of transactions. (#17693)\n+\n+0.21.0 change log\n+=================\n+\n+### Consensus\n+- #18267 BIP-325: Signet (kallewoof)\n+- #20016 uint256: 1 is a constant (ajtowns)\n+- #20006 Fix misleading error message: Clean stack rule (sanket1729)\n+- #19953 Implement BIP 340-342 validation (Schnorr/taproot/tapscript) (sipa)\n+- #20169 Taproot follow-up: Make ComputeEntrySchnorr and ComputeEntryECDSA const to clarify contract (practicalswift)\n+\n+### Policy\n+- #18766 Disable fee estimation in blocksonly mode (darosior)\n+- #19630 Cleanup fee estimation code (darosior)\n+- #20165 Only relay Taproot spends if next block has it active (sipa)\n+\n+### Mining\n+- #17946 Fix GBT: Restore \"!segwit\" and \"csv\" to \"rules\" key (luke-jr)\n+\n+### Privacy\n+- #16432 Add privacy to the Overview page (hebasto)\n+- #18861 Do not answer GETDATA for to-be-announced tx (sipa)\n+- #18038 Mempool tracks locally submitted transactions to improve wallet privacy (amitiuttarwar)\n+- #19109 Only allow getdata of recently announced invs (sipa)\n+\n+### Block and transaction handling\n+- #17737 Add ChainstateManager, remove BlockManager global (jamesob)\n+- #18960 indexes: Add compact block filter headers cache (jnewbery)\n+- #13204 Faster sigcache nonce (JeremyRubin)\n+- #19088 Use std::chrono throughout some validation functions (fanquake)\n+- #19142 Make VerifyDB level 4 interruptible (MarcoFalke)\n+- #17994 Flush undo files after last block write (kallewoof)\n+- #18990 log: Properly log txs rejected from mempool (MarcoFalke)\n+- #18984 Remove unnecessary input blockfile SetPos (dgenr8)\n+- #19526 log: Avoid treating remote misbehvior as local system error (MarcoFalke)\n+- #18044 Use wtxid for transaction relay (sdaftuar)\n+- #18637 coins: allow cache resize after init (jamesob)\n+- #19854 Avoid locking CTxMemPool::cs recursively in simple cases (hebasto)\n+- #19478 Remove CTxMempool::mapLinks data structure member (JeremyRubin)\n+- #19927 Reduce direct `g_chainman` usage (dongcarl)\n+- #19898 log: print unexpected version warning in validation log category (n-thumann)\n+- #20036 signet: Add assumed values for default signet (MarcoFalke)\n+- #20048 chainparams: do not log signet startup messages for other chains (jonatack)\n+- #19339 re-delegate absurd fee checking from mempool to clients (glozow)\n+- #20035 signet: Fix uninitialized read in validation (MarcoFalke)\n+- #20157 Bugfix: chainparams: Add missing (always enabled) Taproot deployment for Signet (luke-jr)\n+- #20263 Update assumed chain params (MarcoFalke)\n+- #20372 Avoid signed integer overflow when loading a mempool.dat file with a malformed time field (practicalswift)\n+- #18621 script: Disallow silent bool -> cscript conversion (MarcoFalke)\n+- #18612, #18732 script: Remove undocumented and unused operator+ (MarcoFalke)\n+- #19317 Add a left-justified width field to `log2_work` component for a uniform debug.log output (jamesgmorgan)\n+\n+### P2P protocol and network code\n+- #18544 Limit BIP37 filter lifespan (active between `filterload`..`filterclear`) (theStack)\n+- #18806 Remove is{Empty,Full} flags from CBloomFilter, clarify CVE fix (theStack)\n+- #18512 Improve asmap checks and add sanity check (sipa)\n+- #18877 Serve cfcheckpt requests (jnewbery)\n+- #18895 Unbroadcast followups: rpcs, nLastResend, mempool sanity check (gzhao408)\n+- #19010 net processing: Add support for `getcfheaders` (jnewbery)\n+- #16939 Delay querying DNS seeds (ajtowns)\n+- #18807 Unbroadcast follow-ups (amitiuttarwar)\n+- #19044 Add support for getcfilters (jnewbery)\n+- #19084 improve code documentation for dns seed behaviour (ajtowns)\n+- #19260 disconnect peers that send filterclear + update existing filter msg disconnect logic (gzhao408)\n+- #19284 Add seed.bitcoin.wiz.biz to DNS seeds (wiz)\n+- #19322 split PushInventory() (jnewbery)\n+- #19204 Reduce inv traffic during IBD (MarcoFalke)\n+- #19470 banlist: log post-swept banlist size at startup (fanquake)\n+- #19191 Extract download permission from noban (MarcoFalke)\n+- #14033 Drop `CADDR_TIME_VERSION` checks now that `MIN_PEER_PROTO_VERSION` is greater (Empact)\n+- #19464 net, rpc: remove -banscore option, deprecate banscore in getpeerinfo (jonatack)\n+- #19514 [net/net processing] check banman pointer before dereferencing (jnewbery)\n+- #19512 banscore updates to gui, tests, release notes (jonatack)\n+- #19360 improve encapsulation of CNetAddr (vasild)\n+- #19217 disambiguate block-relay-only variable names from blocksonly variables (glowang)\n+- #19473 Add -networkactive option (hebasto)\n+- #19472 [net processing] Reduce `cs_main` scope in MaybeDiscourageAndDisconnect() (jnewbery)\n+- #19583 clean up Misbehaving() (jnewbery)\n+- #19534 save the network type explicitly in CNetAddr (vasild)\n+- #19569 Enable fetching of orphan parents from wtxid peers (sipa)\n+- #18991 Cache responses to GETADDR to prevent topology leaks (naumenkogs)\n+- #19596 Deduplicate parent txid loop of requested transactions and missing parents of orphan transactions (sdaftuar)\n+- #19316 Cleanup logic around connection types (amitiuttarwar)\n+- #19070 Signal support for compact block filters with `NODE_COMPACT_FILTERS` (jnewbery)\n+- #19705 Shrink CAddress from 48 to 40 bytes on x64 (vasild)\n+- #19704 Move ProcessMessage() to PeerLogicValidation (jnewbery)\n+- #19628 Change CNetAddr::ip to have flexible size (vasild)\n+- #19797 Remove old check for 3-byte shifted IP addresses from pre-0.2.9 nodes (#19797)\n+- #19607 Add Peer struct for per-peer data in net processing (jnewbery)\n+- #19857 improve nLastBlockTime and nLastTXTime documentation (jonatack)\n+- #19724 Cleanup connection types- followups (amitiuttarwar)\n+- #19670 Protect localhost and block-relay-only peers from eviction (sdaftuar)\n+- #19728 Increase the ip address relay branching factor for unreachable networks (sipa)\n+- #19879 Miscellaneous wtxid followups (amitiuttarwar)\n+- #19697 Improvements on ADDR caching (naumenkogs)\n+- #17785 Unify Send and Receive protocol versions (hebasto)\n+- #19845 CNetAddr: add support to (un)serialize as ADDRv2 (vasild)\n+- #19107 Move all header verification into the network layer, extend logging (troygiorshev)\n+- #20003 Exit with error message if -proxy is specified without arguments (instead of continuing without proxy server) (practicalswift)\n+- #19991 Use alternative port for incoming Tor connections (hebasto)\n+- #19723 Ignore unknown messages before VERACK (sdaftuar)\n+- #19954 Complete the BIP155 implementation and upgrade to TORv3 (vasild)\n+- #20119 BIP155 follow-ups (sipa)\n+- #19988 Overhaul transaction request logic (sipa)\n+- #17428 Try to preserve outbound block-relay-only connections during restart (hebasto)\n+- #19911 Guard `vRecvGetData` with `cs_vRecv` and `orphan_work_set` with `g_cs_orphans` (narula)\n+- #19753 Don't add AlreadyHave transactions to recentRejects (troygiorshev)\n+- #20187 Test-before-evict bugfix and improvements for block-relay-only peers (sdaftuar)\n+- #20237 Hardcoded seeds update for 0.21 (laanwj)\n+- #20212 Fix output of peer address in version message (vasild)\n+- #20284 Ensure old versions don't parse peers.dat (vasild)\n+- #20405 Avoid calculating onion address checksum when version is not 3 (lontivero)\n+- #20564 Don't send 'sendaddrv2' to pre-70016 software, and send before 'verack' (sipa)\n+- #20660 Move signet onion seed from v2 to v3 (Sjors)\n+\n+### Wallet\n+- #18262 Exit selection when `best_waste` is 0 (achow101)\n+- #17824 Prefer full destination groups in coin selection (fjahr)\n+- #17219 Allow transaction without change if keypool is empty (Sjors)\n+- #15761 Replace -upgradewallet startup option with upgradewallet RPC (achow101)\n+- #18671 Add BlockUntilSyncedToCurrentChain to dumpwallet (MarcoFalke)\n+- #16528 Native Descriptor Wallets using DescriptorScriptPubKeyMan (achow101)\n+- #18777 Recommend absolute path for dumpwallet (MarcoFalke)\n+- #16426 Reverse `cs_main`, `cs_wallet` lock order and reduce `cs_main` locking (ariard)\n+- #18699 Avoid translating RPC errors (MarcoFalke)\n+- #18782 Make sure no DescriptorScriptPubKeyMan or WalletDescriptor members are left uninitialized after construction (practicalswift)\n+- #9381 Remove CWalletTx merging logic from AddToWallet (ryanofsky)\n+- #16946 Include a checksum of encrypted private keys (achow101)\n+- #17681 Keep inactive seeds after sethdseed and derive keys from them as needed (achow101)\n+- #18918 Move salvagewallet into wallettool (achow101)\n+- #14988 Fix for confirmed column in csv export for payment to self transactions (benthecarman)\n+- #18275 Error if an explicit fee rate was given but the needed fee rate differed (kallewoof)\n+- #19054 Skip hdKeypath of 'm' when determining inactive hd seeds (achow101)\n+- #17938 Disallow automatic conversion between disparate hash types (Empact)\n+- #19237 Check size after unserializing a pubkey (elichai)\n+- #11413 sendtoaddress/sendmany: Add explicit feerate option (kallewoof)\n+- #18850 Fix ZapSelectTx to sync wallet spends (bvbfan)\n+- #18923 Never schedule MaybeCompactWalletDB when `-flushwallet` is off (MarcoFalke)\n+- #19441 walletdb: Don't reinitialize desc cache with multiple cache entries (achow101)\n+- #18907 walletdb: Don't remove database transaction logs and instead error (achow101)\n+- #19334 Introduce WalletDatabase abstract class (achow101)\n+- #19335 Cleanup and separate BerkeleyDatabase and BerkeleyBatch (achow101)\n+- #19102 Introduce and use DummyDatabase instead of dummy BerkeleyDatabase (achow101)\n+- #19568 Wallet should not override signing errors (fjahr)\n+- #17204 Do not turn `OP_1NEGATE` in scriptSig into `0x0181` in signing code (sipa) (meshcollider)\n+- #19457 Cleanup wallettool salvage and walletdb extraneous declarations (achow101)\n+- #15937 Add loadwallet and createwallet `load_on_startup` options (ryanofsky)\n+- #16841 Replace GetScriptForWitness with GetScriptForDestination (meshcollider)\n+- #14582 always do avoid partial spends if fees are within a specified range (kallewoof)\n+- #19743 -maxapsfee follow-up (kallewoof)\n+- #19289 GetWalletTx and IsMine require `cs_wallet` lock (promag)\n+- #19671 Remove -zapwallettxes (achow101)\n+- #19805 Avoid deserializing unused records when salvaging (achow101)\n+- #19754 wallet, gui: Reload previously loaded wallets on startup (achow101)\n+- #19738 Avoid multiple BerkeleyBatch in DelAddressBook (promag)\n+- #19919 bugfix: make LoadWallet assigns status always (AkioNak)\n+- #16378 The ultimate send RPC (Sjors)\n+- #15454 Remove the automatic creation and loading of the default wallet (achow101)\n+- #19501 `send*` RPCs in the wallet returns the \"fee reason\" (stackman27)\n+- #20130 Remove db mode string (S3RK)\n+- #19077 Add sqlite as an alternative wallet database and use it for new descriptor wallets (achow101)\n+- #20125 Expose database format in getwalletinfo (promag)\n+- #20198 Show name, format and if uses descriptors in bitcoin-wallet tool (jonasschnelli)\n+- #20216 Fix buffer over-read in SQLite file magic check (theStack)\n+- #20186 Make -wallet setting not create wallets (ryanofsky)\n+- #20230 Fix bug when just created encrypted wallet cannot get address (hebasto)\n+- #20282 Change `upgradewallet` return type to be an object (jnewbery)\n+- #20220 Explicit fee rate follow-ups/fixes for 0.21 (jonatack)\n+- #20199 Ignore (but warn) on duplicate -wallet parameters (jonasschnelli)\n+- #20324 Set DatabaseStatus::SUCCESS in MakeSQLiteDatabase (MarcoFalke)\n+- #20266 Fix change detection of imported internal descriptors (achow101)\n+- #20153 Do not import a descriptor with hardened derivations into a watch-only wallet (S3RK)\n+- #20344 Fix scanning progress calculation for single block range (theStack)\n+- #19502 Bugfix: Wallet: Soft-fail exceptions within ListWalletDir file checks (luke-jr)\n+- #20378 Fix potential division by 0 in WalletLogPrintf (jonasschnelli)\n+- #18836 Upgradewallet fixes and additional tests (achow101)\n+- #20139 Do not return warnings from UpgradeWallet() (stackman27)\n+- #20305 Introduce `fee_rate` sat/vB param/option (jonatack)\n+- #20426 Allow zero-fee fundrawtransaction/walletcreatefundedpsbt and other fixes (jonatack)\n+- #20573 wallet, bugfix: allow send with string `fee_rate` amounts (jonatack)\n+\n+### RPC and other APIs\n+- #18574 cli: Call getbalances.ismine.trusted instead of getwalletinfo.balance (jonatack)\n+- #17693 Add `generateblock` to mine a custom set of transactions (andrewtoth)\n+- #18495 Remove deprecated migration code (vasild)\n+- #18493 Remove deprecated \"size\" from mempool txs (vasild)\n+- #18467 Improve documentation and return value of settxfee (fjahr)\n+- #18607 Fix named arguments in documentation (MarcoFalke)\n+- #17831 doc: Fix and extend getblockstats examples (asoltys)\n+- #18785 Prevent valgrind false positive in `rest_blockhash_by_height` (ryanofsky)\n+- #18999 log: Remove \"No rpcpassword set\" from logs (MarcoFalke)\n+- #19006 Avoid crash when `g_thread_http` was never started (MarcoFalke)\n+- #18594 cli: Display multiwallet balances in -getinfo (jonatack)\n+- #19056 Make gettxoutsetinfo/GetUTXOStats interruptible (MarcoFalke)\n+- #19112 Remove special case for unknown service flags (MarcoFalke)\n+- #18826 Expose txinwitness for coinbase in JSON form from RPC (rvagg)\n+- #19282 Rephrase generatetoaddress help, and use `PACKAGE_NAME` (luke-jr)\n+- #16377 don't automatically append inputs in walletcreatefundedpsbt (Sjors)\n+- #19200 Remove deprecated getaddressinfo fields (jonatack)\n+- #19133 rpc, cli, test: add bitcoin-cli -generate command (jonatack)\n+- #19469 Deprecate banscore field in getpeerinfo (jonatack)\n+- #16525 Dump transaction version as an unsigned integer in RPC/TxToUniv (TheBlueMatt)\n+- #19555 Deduplicate WriteHDKeypath() used in decodepsbt (theStack)\n+- #19589 Avoid useless mempool query in gettxoutproof (MarcoFalke)\n+- #19585 RPCResult Type of MempoolEntryDescription should be OBJ (stylesuxx)\n+- #19634 Document getwalletinfo's `unlocked_until` field as optional (justinmoon)\n+- #19658 Allow RPC to fetch all addrman records and add records to addrman (jnewbery)\n+- #19696 Fix addnode remove command error (fjahr)\n+- #18654 Separate bumpfee's psbt creation function into psbtbumpfee (achow101)\n+- #19655 Catch listsinceblock `target_confirmations` exceeding block count (adaminsky)\n+- #19644 Document returned error fields as optional if applicable (theStack)\n+- #19455 rpc generate: print useful help and error message (jonatack)\n+- #19550 Add listindices RPC (fjahr)\n+- #19169 Validate provided keys for `query_options` parameter in listunspent (PastaPastaPasta)\n+- #18244 fundrawtransaction and walletcreatefundedpsbt also lock manually selected coins (Sjors)\n+- #14687 zmq: Enable TCP keepalive (mruddy)\n+- #19405 Add network in/out connections to `getnetworkinfo` and `-getinfo` (jonatack)\n+- #19878 rawtransaction: Fix argument in combinerawtransaction help message (pinheadmz)\n+- #19940 Return fee and vsize from testmempoolaccept (gzhao408)\n+- #13686 zmq: Small cleanups in the ZMQ code (domob1812)\n+- #19386, #19528, #19717, #19849, #19994 Assert that RPCArg names are equal to CRPCCommand ones (MarcoFalke)\n+- #19725 Add connection type to getpeerinfo, improve logs (amitiuttarwar)\n+- #19969 Send RPC bug fix and touch-ups (Sjors)\n+- #18309 zmq: Add support to listen on multiple interfaces (n-thumann)\n+- #20055 Set HTTP Content-Type in bitcoin-cli (laanwj)\n+- #19956 Improve invalid vout value rpc error message (n1rna)\n+- #20101 Change no wallet loaded message to be clearer (achow101)\n+- #19998 Add `via_tor` to `getpeerinfo` output (hebasto)\n+- #19770 getpeerinfo: Deprecate \"whitelisted\" field (replaced by \"permissions\") (luke-jr)\n+- #20120 net, rpc, test, bugfix: update GetNetworkName, GetNetworksInfo, regression tests (jonatack)\n+- #20595 Improve heuristic hex transaction decoding (sipa)\n+- #20731 Add missing description of vout in getrawtransaction help text (benthecarman)\n+- #19328 Add gettxoutsetinfo `hash_type` option (fjahr)\n+- #19731 Expose nLastBlockTime/nLastTXTime as last `block/last_transaction` in getpeerinfo (jonatack)\n+- #19572 zmq: Create \"sequence\" notifier, enabling client-side mempool tracking (instagibbs)\n+- #20002 Expose peer network in getpeerinfo; simplify/improve -netinfo (jonatack)\n+\n+### GUI\n+- #17905 Avoid redundant tx status updates (ryanofsky)\n+- #18646 Use `PACKAGE_NAME` in exception message (fanquake)\n+- #17509 Save and load PSBT (Sjors)\n+- #18769 Remove bug fix for Qt < 5.5 (10xcryptodev)\n+- #15768 Add close window shortcut (IPGlider)\n+- #16224 Bilingual GUI error messages (hebasto)\n+- #18922 Do not translate InitWarning messages in debug.log (hebasto)\n+- #18152 Use NotificationStatus enum for signals to GUI (hebasto)\n+- #18587 Avoid wallet tryGetBalances calls in WalletModel::pollBalanceChanged (ryanofsky)\n+- #17597 Fix height of QR-less ReceiveRequestDialog (hebasto)\n+- #17918 Hide non PKHash-Addresses in signing address book (emilengler)\n+- #17956 Disable unavailable context menu items in transactions tab (kristapsk)\n+- #17968 Ensure that ModalOverlay is resized properly (hebasto)\n+- #17993 Balance/TxStatus polling update based on last block hash (furszy)\n+- #18424 Use parent-child relation to manage lifetime of OptionsModel object (hebasto)\n+- #18452 Fix shutdown when `waitfor*` cmds are called from RPC console (hebasto)\n+- #15202 Add Close All Wallets action (promag)\n+- #19132 lock `cs_main`, `m_cached_tip_mutex` in that order (vasild)\n+- #18898 Display warnings as rich text (hebasto)\n+- #19231 add missing translation.h include to fix build (fanquake)\n+- #18027 \"PSBT Operations\" dialog (gwillen)\n+- #19256 Change combiner for signals to `optional_last_value` (fanquake)\n+- #18896 Reset toolbar after all wallets are closed (hebasto)\n+- #18993 increase console command max length (10xcryptodev)\n+- #19323 Fix regression in *txoutset* in GUI console (hebasto)\n+- #19210 Get rid of cursor in out-of-focus labels (hebasto)\n+- #19011 Reduce `cs_main` lock accumulation during GUI startup (jonasschnelli)\n+- #19844 Remove usage of boost::bind (fanquake)\n+- #20479 Fix QPainter non-determinism on macOS (0.21 backport) (laanwj)\n+- gui#6 Do not truncate node flag strings in debugwindow peers details tab (Saibato)\n+- gui#8 Fix regression in TransactionTableModel (hebasto)\n+- gui#17 doc: Remove outdated comment in TransactionTablePriv (MarcoFalke)\n+- gui#20 Wrap tooltips in the intro window (hebasto)\n+- gui#30 Disable the main window toolbar when the modal overlay is shown (hebasto)\n+- gui#34 Show permissions instead of whitelisted (laanwj)\n+- gui#35 Parse params directly instead of through node (ryanofsky)\n+- gui#39 Add visual accenting for the 'Create new receiving address' button (hebasto)\n+- gui#40 Clarify block height label (hebasto)\n+- gui#43 bugfix: Call setWalletActionsEnabled(true) only for the first wallet (hebasto)\n+- gui#97 Relax GUI freezes during IBD (jonasschnelli)\n+- gui#71 Fix visual quality of text in QR image (hebasto)\n+- gui#96 Slight improve create wallet dialog (Sjors)\n+- gui#102 Fix SplashScreen crash when run with -disablewallet (hebasto)\n+- gui#116 Fix unreasonable default size of the main window without loaded wallets (hebasto)\n+- gui#120 Fix multiwallet transaction notifications (promag)\n+\n+### Build system\n+- #18504 Drop bitcoin-tx and bitcoin-wallet dependencies on libevent (ryanofsky)\n+- #18586 Bump gitian descriptors to 0.21 (laanwj)\n+- #17595 guix: Enable building for `x86_64-w64-mingw32` target (dongcarl)\n+- #17929 add linker optimisation flags to gitian & guix (Linux) (fanquake)\n+- #18556 Drop make dist in gitian builds (hebasto)\n+- #18088 ensure we aren't using GNU extensions (fanquake)\n+- #18741 guix: Make source tarball using git-archive (dongcarl)\n+- #18843 warn on potentially uninitialized reads (vasild)\n+- #17874 make linker checks more robust (fanquake)\n+- #18535 remove -Qunused-arguments workaround for clang + ccache (fanquake)\n+- #18743 Add --sysroot option to mac os native compile flags (ryanofsky)\n+- #18216 test, build: Enable -Werror=sign-compare (Empact)\n+- #18928 don't pass -w when building for Windows (fanquake)\n+- #16710 Enable -Wsuggest-override if available (hebasto)\n+- #18738 Suppress -Wdeprecated-copy warnings (hebasto)\n+- #18862 Remove fdelt_chk back-compat code and sanity check (fanquake)\n+- #18887 enable -Werror=gnu (vasild)\n+- #18956 enforce minimum required Windows version (7) (fanquake)\n+- #18958 guix: Make V=1 more powerful for debugging (dongcarl)\n+- #18677 Multiprocess build support (ryanofsky)\n+- #19094 Only allow ASCII identifiers (laanwj)\n+- #18820 Propagate well-known vars into depends (dongcarl)\n+- #19173 turn on --enable-c++17 by --enable-fuzz (vasild)\n+- #18297 Use pkg-config in BITCOIN_QT_CONFIGURE for all hosts including Windows (hebasto)\n+- #19301 don't warn when doxygen isn't found (fanquake)\n+- #19240 macOS toolchain simplification and bump (dongcarl)\n+- #19356 Fix search for brew-installed BDB 4 on OS X (gwillen)\n+- #19394 Remove unused `RES_IMAGES` (Bushstar)\n+- #19403 improve `__builtin_clz*` detection (fanquake)\n+- #19375 target Windows 7 when building libevent and fix ipv6 usage (fanquake)\n+- #19331 Do not include server symbols in wallet (MarcoFalke)\n+- #19257 remove BIP70 configure option (fanquake)\n+- #18288 Add MemorySanitizer (MSan) in Travis to detect use of uninitialized memory (practicalswift)\n+- #18307 Require pkg-config for all of the hosts (hebasto)\n+- #19445 Update msvc build to use ISO standard C++17 (sipsorcery)\n+- #18882 fix -Wformat-security check when compiling with GCC (fanquake)\n+- #17919 Allow building with system clang (dongcarl)\n+- #19553 pass -fcommon when building genisoimage (fanquake)\n+- #19565 call `AC_PATH_TOOL` for dsymutil in macOS cross-compile (fanquake)\n+- #19530 build LTO support into Apple's ld64 (theuni)\n+- #19525 add -Wl,-z,separate-code to hardening flags (fanquake)\n+- #19667 set minimum required Boost to 1.58.0 (fanquake)\n+- #19672 make clean removes .gcda and .gcno files from fuzz directory (Crypt-iQ)\n+- #19622 Drop ancient hack in gitian-linux descriptor (hebasto)\n+- #19688 Add support for llvm-cov (hebasto)\n+- #19718 Add missed gcov files to 'make clean' (hebasto)\n+- #19719 Add Werror=range-loop-analysis (MarcoFalke)\n+- #19015 Enable some commonly enabled compiler diagnostics (practicalswift)\n+- #19689 build, qt: Add Qt version checking (hebasto)\n+- #17396 modest Android improvements (icota)\n+- #18405 Drop all of the ZeroMQ patches (hebasto)\n+- #15704 Move Win32 defines to configure.ac to ensure they are globally defined (luke-jr)\n+- #19761 improve sed robustness by not using sed (fanquake)\n+- #19758 Drop deprecated and unused `GUARDED_VAR` and `PT_GUARDED_VAR` annotations (hebasto)\n+- #18921 add stack-clash and control-flow protection options to hardening flags (fanquake)\n+- #19803 Bugfix: Define and use `HAVE_FDATASYNC` correctly outside LevelDB (luke-jr)\n+- #19685 CMake invocation cleanup (dongcarl)\n+- #19861 add /usr/local/ to `LCOV_FILTER_PATTERN` for macOS builds (Crypt-iQ)\n+- #19916 allow user to specify `DIR_FUZZ_SEED_CORPUS` for `cov_fuzz` (Crypt-iQ)\n+- #19944 Update secp256k1 subtree (including BIP340 support) (sipa)\n+- #19558 Split pthread flags out of ldflags and dont use when building libconsensus (fanquake)\n+- #19959 patch qt libpng to fix powerpc build (fanquake)\n+- #19868 Fix target name (hebasto)\n+- #19960 The vcpkg tool has introduced a proper way to use manifests (sipsorcery)\n+- #20065 fuzz: Configure check for main function (MarcoFalke)\n+- #18750 Optionally skip external warnings (vasild)\n+- #20147 Update libsecp256k1 (endomorphism, test improvements) (sipa)\n+- #20156 Make sqlite support optional (compile-time) (luke-jr)\n+- #20318 Ensure source tarball has leading directory name (MarcoFalke)\n+- #20447 Patch `qt_intersect_spans` to avoid non-deterministic behavior in LLVM 8 (achow101)\n+- #20505 Avoid secp256k1.h include from system (dergoegge)\n+- #20527 Do not ignore Homebrew's SQLite on macOS (hebasto)\n+- #20478 Don't set BDB flags when configuring without (jonasschnelli)\n+- #20563 Check that Homebrew's berkeley-db4 package is actually installed (hebasto)\n+- #19493 Fix clang build on Mac (bvbfan)\n+\n+### Tests and QA\n+- #18593 Complete impl. of `msg_merkleblock` and `wait_for_merkleblock` (theStack)\n+- #18609 Remove REJECT message code (hebasto)\n+- #18584 Check that the version message does not leak the local address (MarcoFalke)\n+- #18597 Extend `wallet_dump` test to cover comments (MarcoFalke)\n+- #18596 Try once more when RPC connection fails on Windows (MarcoFalke)\n+- #18451 shift coverage from getunconfirmedbalance to getbalances (jonatack)\n+- #18631 appveyor: Disable functional tests for now (MarcoFalke)\n+- #18628 Add various low-level p2p tests (MarcoFalke)\n+- #18615 Avoid accessing free'd memory in `validation_chainstatemanager_tests` (MarcoFalke)\n+- #18571 fuzz: Disable debug log file (MarcoFalke)\n+- #18653 add coverage for bitcoin-cli -rpcwait (jonatack)\n+- #18660 Verify findCommonAncestor always initializes outputs (ryanofsky)\n+- #17669 Have coins simulation test also use CCoinsViewDB (jamesob)\n+- #18662 Replace gArgs with local argsman in bench (MarcoFalke)\n+- #18641 Create cached blocks not in the future (MarcoFalke)\n+- #18682 fuzz: `http_request` workaround for libevent < 2.1.1 (theStack)\n+- #18692 Bump timeout in `wallet_import_rescan` (MarcoFalke)\n+- #18695 Replace boost::mutex with std::mutex (hebasto)\n+- #18633 Properly raise FailedToStartError when rpc shutdown before warmup finished (MarcoFalke)\n+- #18675 Don't initialize PrecomputedTransactionData in txvalidationcache tests (jnewbery)\n+- #18691 Add `wait_for_cookie_credentials()` to framework for rpcwait tests (jonatack)\n+- #18672 Add further BIP37 size limit checks to `p2p_filter.py` (theStack)\n+- #18721 Fix linter issue (hebasto)\n+- #18384 More specific `feature_segwit` test error messages and fixing incorrect comments (gzhao408)\n+- #18575 bench: Remove requirement that all benches use same testing setup (MarcoFalke)\n+- #18690 Check object hashes in `wait_for_getdata` (robot-visions)\n+- #18712 display command line options passed to `send_cli()` in debug log (jonatack)\n+- #18745 Check submitblock return values (MarcoFalke)\n+- #18756 Use `wait_for_getdata()` in `p2p_compactblocks.py` (theStack)\n+- #18724 Add coverage for -rpcwallet cli option (jonatack)\n+- #18754 bench: Add caddrman benchmarks (vasild)\n+- #18585 Use zero-argument super() shortcut (Python 3.0+) (theStack)\n+- #18688 fuzz: Run in parallel (MarcoFalke)\n+- #18770 Remove raw-tx byte juggling in `mempool_reorg` (MarcoFalke)\n+- #18805 Add missing `sync_all` to `wallet_importdescriptors.py` (achow101)\n+- #18759 bench: Start nodes with -nodebuglogfile (MarcoFalke)\n+- #18774 Added test for upgradewallet RPC (brakmic)\n+- #18485 Add `mempool_updatefromblock.py` (hebasto)\n+- #18727 Add CreateWalletFromFile test (ryanofsky)\n+- #18726 Check misbehavior more independently in `p2p_filter.py` (robot-visions)\n+- #18825 Fix message for `ECC_InitSanityCheck` test (fanquake)\n+- #18576 Use unittest for `test_framework` unit testing (gzhao408)\n+- #18828 Strip down previous releases boilerplate (MarcoFalke)\n+- #18617 Add factor option to adjust test timeouts (brakmic)\n+- #18855 `feature_backwards_compatibility.py` test downgrade after upgrade (achow101)\n+- #18864 Add v0.16.3 backwards compatibility test, bump v0.19.0.1 to v0.19.1 (Sjors)\n+- #18917 fuzz: Fix vector size problem in system fuzzer (brakmic)\n+- #18901 fuzz: use std::optional for `sep_pos_opt` variable (brakmic)\n+- #18888 Remove RPCOverloadWrapper boilerplate (MarcoFalke)\n+- #18952 Avoid os-dependent path (fametrano)\n+- #18938 Fill fuzzing coverage gaps for functions in consensus/validation.h, primitives/block.h and util/translation.h (practicalswift)\n+- #18986 Add capability to disable RPC timeout in functional tests (rajarshimaitra)\n+- #18530 Add test for -blocksonly and -whitelistforcerelay param interaction (glowang)\n+- #19014 Replace `TEST_PREVIOUS_RELEASES` env var with `test_framework` option (MarcoFalke)\n+- #19052 Don't limit fuzzing inputs to 1 MB for afl-fuzz (now: \u221e \u2200 fuzzers) (practicalswift)\n+- #19060 Remove global `wait_until` from `p2p_getdata` (MarcoFalke)\n+- #18926 Pass ArgsManager into `getarg_tests` (glowang)\n+- #19110 Explain that a bug should be filed when the tests fail (MarcoFalke)\n+- #18965 Implement `base58_decode` (10xcryptodev)\n+- #16564 Always define the `raii_event_tests` test suite (candrews)\n+- #19122 Add missing `sync_blocks` to `wallet_hd` (MarcoFalke)\n+- #18875 fuzz: Stop nodes in `process_message*` fuzzers (MarcoFalke)\n+- #18974 Check that invalid witness destinations can not be imported (MarcoFalke)\n+- #18210 Type hints in Python tests (kiminuo)\n+- #19159 Make valgrind.supp work on aarch64 (MarcoFalke)\n+- #19082 Moved the CScriptNum asserts into the unit test in script.py (gillichu)\n+- #19172 Do not swallow flake8 exit code (hebasto)\n+- #19188 Avoid overwriting the NodeContext member of the testing setup [-Wshadow-field] (MarcoFalke)\n+- #18890 `disconnect_nodes` should warn if nodes were already disconnected (robot-visions)\n+- #19227 change blacklist to blocklist (TrentZ)\n+- #19230 Move base58 to own module to break circular dependency (sipa)\n+- #19083 `msg_mempool`, `fRelay`, and other bloomfilter tests (gzhao408)\n+- #16756 Connection eviction logic tests (mzumsande)\n+- #19177 Fix and clean `p2p_invalid_messages` functional tests (troygiorshev)\n+- #19264 Don't import asyncio to test magic bytes (jnewbery)\n+- #19178 Make `mininode_lock` non-reentrant (jnewbery)\n+- #19153 Mempool compatibility test (S3RK)\n+- #18434 Add a test-security target and run it in CI (fanquake)\n+- #19252 Wait for disconnect in `disconnect_p2ps` + bloomfilter test followups (gzhao408)\n+- #19298 Add missing `sync_blocks` (MarcoFalke)\n+- #19304 Check that message sends successfully when header is split across two buffers (troygiorshev)\n+- #19208 move `sync_blocks` and `sync_mempool` functions to `test_framework.py` (ycshao)\n+- #19198 Check that peers with forcerelay permission are not asked to feefilter (MarcoFalke)\n+- #19351 add two edge case tests for CSubNet (vasild)\n+- #19272 net, test: invalid p2p messages and test framework improvements (jonatack)\n+- #19348 Bump linter versions (duncandean)\n+- #19366 Provide main(\u2026) function in fuzzer. Allow building uninstrumented harnesses with --enable-fuzz (practicalswift)\n+- #19412 move `TEST_RUNNER_EXTRA` into native tsan setup (fanquake)\n+- #19368 Improve functional tests compatibility with BSD/macOS (S3RK)\n+- #19028 Set -logthreadnames in unit tests (MarcoFalke)\n+- #18649 Add std::locale::global to list of locale dependent functions (practicalswift)\n+- #19140 Avoid fuzzer-specific nullptr dereference in libevent when handling PROXY requests (practicalswift)\n+- #19214 Auto-detect SHA256 implementation in benchmarks (sipa)\n+- #19353 Fix mistakenly swapped \"previous\" and \"current\" lock orders (hebasto)\n+- #19533 Remove unnecessary `cs_mains` in `denialofservice_tests` (jnewbery)\n+- #19423 add functional test for txrelay during and after IBD (gzhao408)\n+- #16878 Fix non-deterministic coverage of test `DoS_mapOrphans` (davereikher)\n+- #19548 fuzz: add missing overrides to `signature_checker` (jonatack)\n+- #19562 Fix fuzzer compilation on macOS (freenancial)\n+- #19370 Static asserts for consistency of fee defaults (domob1812)\n+- #19599 clean `message_count` and `last_message` (troygiorshev)\n+- #19597 test decodepsbt fee calculation (count input value only once per UTXO) (theStack)\n+- #18011 Replace current benchmarking framework with nanobench (martinus)\n+- #19489 Fail `wait_until` early if connection is lost (MarcoFalke)\n+- #19340 Preserve the `LockData` initial state if \"potential deadlock detected\" exception thrown (hebasto)\n+- #19632 Catch decimal.InvalidOperation from `TestNodeCLI#send_cli` (Empact)\n+- #19098 Remove duplicate NodeContext hacks (ryanofsky)\n+- #19649 Restore test case for p2p transaction blinding (instagibbs)\n+- #19657 Wait until `is_connected` in `add_p2p_connection` (MarcoFalke)\n+- #19631 Wait for 'cmpctblock' in `p2p_compactblocks` when it is expected (Empact)\n+- #19674 use throwaway _ variable for unused loop counters (theStack)\n+- #19709 Fix 'make cov' with clang (hebasto)\n+- #19564 `p2p_feefilter` improvements (logging, refactoring, speedup) (theStack)\n+- #19756 add `sync_all` to fix race condition in wallet groups test (kallewoof)\n+- #19727 Removing unused classes from `p2p_leak.py` (dhruv)\n+- #19722 Add test for getblockheader verboseness (torhte)\n+- #19659 Add a seed corpus generation option to the fuzzing `test_runner` (darosior)\n+- #19775 Activate segwit in TestChain100Setup (MarcoFalke)\n+- #19760 Remove confusing mininode terminology (jnewbery)\n+- #19752 Update `wait_until` usage in tests not to use the one from utils (slmtpz)\n+- #19839 Set appveyor VM version to previous Visual Studio 2019 release (sipsorcery)\n+- #19830 Add tsan supp for leveldb::DBImpl::DeleteObsoleteFiles (MarcoFalke)\n+- #19710 bench: Prevent thread oversubscription and decreases the variance of result values (hebasto)\n+- #19842 Update the vcpkg checkout commit ID in appveyor config (sipsorcery)\n+- #19507 Expand functional zmq transaction tests (instagibbs)\n+- #19816 Rename wait until helper to `wait_until_helper` (MarcoFalke)\n+- #19859 Fixes failing functional test by changing version (n-thumann)\n+- #19887 Fix flaky `wallet_basic` test (fjahr)\n+- #19897 Change `FILE_CHAR_BLOCKLIST` to `FILE_CHARS_DISALLOWED` (verretor)\n+- #19800 Mockwallet (MarcoFalke)\n+- #19922 Run `rpc_txoutproof.py` even with wallet disabled (MarcoFalke)\n+- #19936 batch rpc with params (instagibbs)\n+- #19971 create default wallet in extended tests (Sjors)\n+- #19781 add parameterized constructor for `msg_sendcmpct()` (theStack)\n+- #19963 Clarify blocksonly whitelistforcerelay test (t-bast)\n+- #20022 Use explicit p2p objects where available (guggero)\n+- #20028 Check that invalid peer traffic is accounted for (MarcoFalke)\n+- #20004 Add signet witness commitment section parse tests (MarcoFalke)\n+- #20034 Get rid of default wallet hacks (ryanofsky)\n+- #20069 Mention commit id in scripted diff error (laanwj)\n+- #19947 Cover `change_type` option of \"walletcreatefundedpsbt\" RPC (guggero)\n+- #20126 `p2p_leak_tx.py` improvements (use MiniWallet, add `p2p_lock` acquires) (theStack)\n+- #20129 Don't export `in6addr_loopback` (vasild)\n+- #20131 Remove unused nVersion=1 in p2p tests (MarcoFalke)\n+- #20161 Minor Taproot follow-ups (sipa)\n+- #19401 Use GBT to get block versions correct (luke-jr)\n+- #20159 `mining_getblocktemplate_longpoll.py` improvements (use MiniWallet, add logging) (theStack)\n+- #20039 Convert amounts from float to decimal (prayank23)\n+- #20112 Speed up `wallet_resendwallettransactions` with mockscheduler RPC (MarcoFalke)\n+- #20247 fuzz: Check for addrv1 compatibility before using addrv1 serializer. Fuzz addrv2 serialization (practicalswift)\n+- #20167 Add test for -blockversion (MarcoFalke)\n+- #19877 Clarify `rpc_net` & `p2p_disconnect_ban functional` tests (amitiuttarwar)\n+- #20258 Remove getnettotals/getpeerinfo consistency test (jnewbery)\n+- #20242 fuzz: Properly initialize PrecomputedTransactionData (MarcoFalke)\n+- #20262 Skip --descriptor tests if sqlite is not compiled (achow101)\n+- #18788 Update more tests to work with descriptor wallets (achow101)\n+- #20289 fuzz: Check for addrv1 compatibility before using addrv1 serializer/deserializer on CService (practicalswift)\n+- #20290 fuzz: Fix DecodeHexTx fuzzing harness issue (practicalswift)\n+- #20245 Run `script_assets_test` even if built --with-libs=no (MarcoFalke)\n+- #20300 fuzz: Add missing `ECC_Start` to `descriptor_parse` test (S3RK)\n+- #20283 Only try witness deser when checking for witness deser failure (MarcoFalke)\n+- #20303 fuzz: Assert expected DecodeHexTx behaviour when using legacy decoding (practicalswift)\n+- #20316 Fix `wallet_multiwallet` test issue on Windows (MarcoFalke)\n+- #20326 Fix `ecdsa_verify` in test framework (stepansnigirev)\n+- #20328 cirrus: Skip tasks on the gui repo main branch (MarcoFalke)\n+- #20355 fuzz: Check for addrv1 compatibility before using addrv1 serializer/deserializer on CSubNet (practicalswift)\n+- #20332 Mock IBD in `net_processing` fuzzers (MarcoFalke)\n+- #20218 Suppress `epoll_ctl` data race (MarcoFalke)\n+- #20375 fuzz: Improve coverage for CPartialMerkleTree fuzzing harness (practicalswift)\n+- #19669 contrib: Fixup valgrind suppressions file (MarcoFalke)\n+- #18879 valgrind: remove outdated suppressions (fanquake)\n+- #19226 Add BerkeleyDatabase tsan suppression (MarcoFalke)\n+- #20379 Remove no longer needed UBSan suppression (float divide-by-zero in validation.cpp) (practicalswift)\n+- #18190, #18736, #18744, #18775, #18783, #18867, #18994, #19065,\n+  #19067, #19143, #19222, #19247, #19286, #19296, #19379, #19934,\n+  #20188, #20395 Add fuzzing harnessses (practicalswift)\n+- #18638 Use mockable time for ping/pong, add tests (MarcoFalke)\n+- #19951 CNetAddr scoped ipv6 test coverage, rename scopeId to `m_scope_id` (jonatack)\n+- #20027 Use mockable time everywhere in `net_processing` (sipa)\n+- #19105 Add Muhash3072 implementation in Python (fjahr)\n+- #18704, #18752, #18753, #18765, #18839, #18866, #18873, #19022,\n+  #19023, #19429, #19552, #19778, #20176, #20179, #20214, #20292,\n+  #20299, #20322 Fix intermittent test issues (MarcoFalke)\n+- #20390 CI/Cirrus: Skip `merge_base` step for non-PRs (luke-jr)\n+- #18634 ci: Add fuzzbuzz integration configuration file (practicalswift)\n+- #18591 Add C++17 build to Travis (sipa)\n+- #18581, #18667, #18798, #19495, #19519, #19538 CI improvements (hebasto)\n+- #18683, #18705, #18735, #18778, #18799, #18829, #18912, #18929,\n+  #19008, #19041, #19164, #19201, #19267, #19276, #19321, #19371,\n+  #19427, #19730, #19746, #19881, #20294, #20339, #20368 CI improvements (MarcoFalke)\n+- #20489, #20506 MSVC CI improvements (sipsorcery)\n+\n+### Miscellaneous\n+- #18713 scripts: Add macho stack canary check to security-check.py (fanquake)\n+- #18629 scripts: Add pe .reloc section check to security-check.py (fanquake)\n+- #18437 util: `Detect posix_fallocate()` instead of assuming (vasild)\n+- #18413 script: Prevent ub when computing abs value for num opcode serialize (pierreN)\n+- #18443 lockedpool: avoid sensitive data in core files (FreeBSD) (vasild)\n+- #18885 contrib: Move optimize-pngs.py script to the maintainer repo (MarcoFalke)\n+- #18317 Serialization improvements step 6 (all except wallet/gui) (sipa)\n+- #16127 More thread safety annotation coverage (ajtowns)\n+- #19228 Update libsecp256k1 subtree (sipa)\n+- #19277 util: Add assert identity function (MarcoFalke)\n+- #19491 util: Make assert work with any value (MarcoFalke)\n+- #19205 script: `previous_release.sh` rewritten in python (bliotti)\n+- #15935 Add <datadir>/settings.json persistent settings storage (ryanofsky)\n+- #19439 script: Linter to check commit message formatting (Ghorbanian)\n+- #19654 lint: Improve commit message linter in travis (fjahr)\n+- #15382 util: Add runcommandparsejson (Sjors)\n+- #19614 util: Use `have_fdatasync` to determine fdatasync() use (fanquake)\n+- #19813 util, ci: Hard code previous release tarball checksums (hebasto)\n+- #19841 Implement Keccak and `SHA3_256` (sipa)\n+- #19643 Add -netinfo peer connections dashboard (jonatack)\n+- #15367 feature: Added ability for users to add a startup command (benthecarman)\n+- #19984 log: Remove static log message \"Initializing chainstate Chainstate [ibd] @ height -1 (null)\" (practicalswift)\n+- #20092 util: Do not use gargs global in argsmanager member functions (hebasto)\n+- #20168 contrib: Fix `gen_key_io_test_vectors.py` imports (MarcoFalke)\n+- #19624 Warn on unknown `rw_settings` (MarcoFalke)\n+- #20257 Update secp256k1 subtree to latest master (sipa)\n+- #20346 script: Modify security-check.py to use \"==\" instead of \"is\" for literal comparison (tylerchambers)\n+- #18881 Prevent UB in DeleteLock() function (hebasto)\n+- #19180, #19189, #19190, #19220, #19399 Replace RecursiveMutex with Mutex (hebasto)\n+- #19347 Make `cs_inventory` nonrecursive (jnewbery)\n+- #19773 Avoid recursive lock in IsTrusted (promag)\n+- #18790 Improve thread naming (hebasto)\n+- #20140 Restore compatibility with old CSubNet serialization (sipa)\n+- #17775 DecodeHexTx: Try case where txn has inputs first (instagibbs)\n+\n+### Documentation\n+- #18502 Update docs for getbalance (default minconf should be 0) (uzyn)\n+- #18632 Fix macos comments in release-notes (MarcoFalke)\n+- #18645 Update thread information in developer docs (jnewbery)\n+- #18709 Note why we can't use `thread_local` with glibc back compat (fanquake)\n+- #18410 Improve commenting for coins.cpp|h (jnewbery)\n+- #18157 fixing init.md documentation to not require rpcpassword (jkcd)\n+- #18739 Document how to fuzz Bitcoin Core using Honggfuzz (practicalswift)\n+- #18779 Better explain GNU ld's dislike of ld64's options (fanquake)\n+- #18663 Mention build docs in README.md (saahilshangle)\n+- #18810 Update rest info on block size and json (chrisabrams)\n+- #18939 Add c++17-enable flag to fuzzing instructions (mzumsande)\n+- #18957 Add a link from ZMQ doc to ZMQ example in contrib/ (meeDamian)\n+- #19058 Drop protobuf stuff (hebasto)\n+- #19061 Add link to Visual Studio build readme (maitrebitcoin)\n+- #19072 Expand section on Getting Started (MarcoFalke)\n+- #18968 noban precludes maxuploadtarget disconnects (MarcoFalke)\n+- #19005 Add documentation for 'checklevel' argument in 'verifychain' RPC\u2026 (kcalvinalvin)\n+- #19192 Extract net permissions doc (MarcoFalke)\n+- #19071 Separate repository for the gui (MarcoFalke)\n+- #19018 fixing description of the field sequence in walletcreatefundedpsbt RPC method (limpbrains)\n+- #19367 Span pitfalls (sipa)\n+- #19408 Windows WSL build recommendation to temporarily disable Win32 PE support (sipsorcery)\n+- #19407 explain why passing -mlinker-version is required when cross-compiling (fanquake)\n+- #19452 afl fuzzing comment about afl-gcc and afl-g++ (Crypt-iQ)\n+- #19258 improve subtree check instructions (Sjors)\n+- #19474 Use precise permission flags where possible (MarcoFalke)\n+- #19494 CONTRIBUTING.md improvements (jonatack)\n+- #19268 Add non-thread-safe note to FeeFilterRounder::round() (hebasto)\n+- #19547 Update macOS cross compilation dependencies for Focal (hebasto)\n+- #19617 Clang 8 or later is required with `FORCE_USE_SYSTEM_CLANG` (fanquake)\n+- #19639 Remove Reference Links #19582 (RobertHosking)\n+- #19605 Set `CC_FOR_BUILD` when building on OpenBSD (fanquake)\n+- #19765 Fix getmempoolancestors RPC result doc (MarcoFalke)\n+- #19786 Remove label from good first issue template (MarcoFalke)\n+- #19646 Updated outdated help command for getblocktemplate (jakeleventhal)\n+- #18817 Document differences in bitcoind and bitcoin-qt locale handling (practicalswift)\n+- #19870 update PyZMQ install instructions, fix `zmq_sub.py` file permissions (jonatack)\n+- #19903 Update build-openbsd.md with GUI support (grubles)\n+- #19241 help: Generate checkpoint height from chainparams (luke-jr)\n+- #18949 Add CODEOWNERS file to automatically nominate PR reviewers (adamjonas)\n+- #20014 Mention signet in -help output (hebasto)\n+- #20015 Added default signet config for linearize script (gr0kchain)\n+- #19958 Better document features of feelers (naumenkogs)\n+- #19871 Clarify scope of eviction protection of outbound block-relay peers (ariard)\n+- #20076 Update and improve files.md (hebasto)\n+- #20107 Collect release-notes snippets (MarcoFalke)\n+- #20109 Release notes and followups from 19339 (glozow)\n+- #20090 Tiny followups to new getpeerinfo connection type field (amitiuttarwar)\n+- #20152 Update wallet files in files.md (hebasto)\n+- #19124 Document `ALLOW_HOST_PACKAGES` dependency option (skmcontrib)\n+- #20271 Document that wallet salvage is experimental (MarcoFalke)\n+- #20281 Correct getblockstats documentation for `(sw)total_weight` (shesek)\n+- #20279 release process updates/fixups (jonatack)\n+- #20238 Missing comments for signet parameters (decryp2kanon)\n+- #20756 Add missing field (permissions) to the getpeerinfo help (amitiuttarwar)\n+- #20668 warn that incoming conns are unlikely when not using default ports (adamjonas)\n+- #19961 tor.md updates (jonatack)\n+- #19050 Add warning for rest interface limitation (fjahr)\n+- #19390 doc/REST-interface: Remove stale info (luke-jr)\n+- #19344 docs: update testgen usage example (Bushstar)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- 10xcryptodev\n+- Aaron Clauson\n+- Aaron Hook\n+- Adam Jonas\n+- Adam Soltys\n+- Adam Stein\n+- Akio Nakamura\n+- Alex Willmer\n+- Amir Ghorbanian\n+- Amiti Uttarwar\n+- Andrew Chow\n+- Andrew Toth\n+- Anthony Fieroni\n+- Anthony Towns\n+- Antoine Poinsot\n+- Antoine Riard\n+- Ben Carman\n+- Ben Woosley\n+- Benoit Verret\n+- Brian Liotti\n+- Bushstar\n+- Calvin Kim\n+- Carl Dong\n+- Chris Abrams\n+- Chris L\n+- Christopher Coverdale\n+- codeShark149\n+- Cory Fields\n+- Craig Andrews\n+- Damian Mee\n+- Daniel Kraft\n+- Danny Lee\n+- David Reikher\n+- DesWurstes\n+- Dhruv Mehta\n+- Duncan Dean\n+- Elichai Turkel\n+- Elliott Jin\n+- Emil Engler\n+- Ethan Heilman\n+- eugene\n+- Fabian Jahr\n+- fanquake\n+- Ferdinando M. Ametrano\n+- freenancial\n+- furszy\n+- Gillian Chu\n+- Gleb Naumenko\n+- Glenn Willen\n+- Gloria Zhao\n+- glowang\n+- gr0kchain\n+- Gregory Sanders\n+- grubles\n+- gzhao408\n+- Harris\n+- Hennadii Stepanov\n+- Hugo Nguyen\n+- Igor Cota\n+- Ivan Metlushko\n+- Ivan Vershigora\n+- Jake Leventhal\n+- James O'Beirne\n+- Jeremy Rubin\n+- jgmorgan\n+- Jim Posen\n+- \u201cjkcd\u201d\n+- jmorgan\n+- John Newbery\n+- Johnson Lau\n+- Jon Atack\n+- Jonas Schnelli\n+- Jonathan Schoeller\n+- Jo\u00e3o Barbosa\n+- Justin Moon\n+- kanon\n+- Karl-Johan Alm\n+- Kiminuo\n+- Kristaps Kaupe\n+- lontivero\n+- Luke Dashjr\n+- Marcin Jachymiak\n+- MarcoFalke\n+- Martin Ankerl\n+- Martin Zumsande\n+- maskoficarus\n+- Matt Corallo\n+- Matthew Zipkin\n+- MeshCollider\n+- Miguel Herranz\n+- MIZUTA Takeshi\n+- mruddy\n+- Nadav Ivgi\n+- Neha Narula\n+- Nicolas Thumann\n+- Niklas G\u00f6gge\n+- Nima Yazdanmehr\n+- nsa\n+- nthumann\n+- Oliver Gugger\n+- pad\n+- pasta\n+- Peter Bushnell\n+- pierrenn\n+- Pieter Wuille\n+- practicalswift\n+- Prayank\n+- Ra\u00fal Mart\u00ednez (RME)\n+- RandyMcMillan\n+- Rene Pickhardt\n+- Riccardo Masutti\n+- Robert\n+- Rod Vagg\n+- Roy Shao\n+- Russell Yanofsky\n+- Saahil Shangle\n+- sachinkm77\n+- saibato\n+- Samuel Dobson\n+- sanket1729\n+- Sebastian Falbesoner\n+- Seleme Topuz\n+- Sishir Giri\n+- Sjors Provoost\n+- skmcontrib\n+- Stepan Snigirev\n+- Stephan Oeste\n+- Suhas Daftuar\n+- t-bast\n+- Tom Harding\n+- Torhte Butler\n+- TrentZ\n+- Troy Giorshev\n+- tryphe\n+- Tyler Chambers\n+- U-Zyn Chua\n+- Vasil Dimov\n+- wiz\n+- Wladimir J. van der Laan\n+\n+As well as to everyone that helped with translations on\n+[Transifex](https://www.transifex.com/bitcoin/bitcoin/)."
      }
    ]
  }
]