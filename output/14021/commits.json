[
  {
    "sha": "c45415f73a095665a8ff6172b57eb818cf572547",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDU0MTVmNzNhMDk1NjY1YThmZjYxNzJiNTdlYjgxOGNmNTcyNTQ3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:23:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T19:00:28Z"
      },
      "message": "Refactor keymetadata writing to a separate method",
      "tree": {
        "sha": "087b8e9989497930c5bb0d862b80139a8c498f2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/087b8e9989497930c5bb0d862b80139a8c498f2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c45415f73a095665a8ff6172b57eb818cf572547",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45415f73a095665a8ff6172b57eb818cf572547",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c45415f73a095665a8ff6172b57eb818cf572547",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45415f73a095665a8ff6172b57eb818cf572547/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b1df4ba0bec3ff5f6195eb63221a751197f2a57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b1df4ba0bec3ff5f6195eb63221a751197f2a57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b1df4ba0bec3ff5f6195eb63221a751197f2a57"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6e7b944e49666a83b11ca2e97427516b188afb4f",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45415f73a095665a8ff6172b57eb818cf572547/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45415f73a095665a8ff6172b57eb818cf572547/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=c45415f73a095665a8ff6172b57eb818cf572547",
        "patch": "@@ -57,9 +57,14 @@ bool WalletBatch::EraseTx(uint256 hash)\n     return EraseIC(std::make_pair(std::string(\"tx\"), hash));\n }\n \n+bool WalletBatch::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)\n+{\n+    return WriteIC(std::make_pair(std::string(\"keymeta\"), pubkey), meta, overwrite);\n+}\n+\n bool WalletBatch::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)\n {\n-    if (!WriteIC(std::make_pair(std::string(\"keymeta\"), vchPubKey), keyMeta, false)) {\n+    if (!WriteKeyMetadata(keyMeta, vchPubKey, false)) {\n         return false;\n     }\n \n@@ -76,7 +81,7 @@ bool WalletBatch::WriteCryptedKey(const CPubKey& vchPubKey,\n                                 const std::vector<unsigned char>& vchCryptedSecret,\n                                 const CKeyMetadata &keyMeta)\n {\n-    if (!WriteIC(std::make_pair(std::string(\"keymeta\"), vchPubKey), keyMeta)) {\n+    if (!WriteKeyMetadata(keyMeta, vchPubKey, true)) {\n         return false;\n     }\n "
      },
      {
        "sha": "2e8d9b16ba4be2cc3a8589944195523956cb4bd0",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45415f73a095665a8ff6172b57eb818cf572547/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45415f73a095665a8ff6172b57eb818cf572547/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=c45415f73a095665a8ff6172b57eb818cf572547",
        "patch": "@@ -177,6 +177,7 @@ class WalletBatch\n     bool WriteTx(const CWalletTx& wtx);\n     bool EraseTx(uint256 hash);\n \n+    bool WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite);\n     bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata &keyMeta);\n     bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, const CKeyMetadata &keyMeta);\n     bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey);"
      }
    ]
  },
  {
    "sha": "e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzY1MmQzZjY0MjEyYTZhZjY4ZmM3ZDc4ODQxMWQyOGZjYmRiZDBh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:23:43Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T19:00:28Z"
      },
      "message": "Add WriteHDKeypath function and move *HDKeypath to util/bip32.{h,cpp}\n\nCreates new files util/bip32.h and util/bip32.cpp for containing\nBIP 32 stuff.\nMoves FormatKeyPath from descriptor.cpp to util/bip32.\nAdds a wrapper around it to prepent the 'm' for when just the\nBIP 32 style keypath is needed.",
      "tree": {
        "sha": "6fefe2f16e7e29c4af58765fad34064d758de483",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fefe2f16e7e29c4af58765fad34064d758de483"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c45415f73a095665a8ff6172b57eb818cf572547",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45415f73a095665a8ff6172b57eb818cf572547",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c45415f73a095665a8ff6172b57eb818cf572547"
      }
    ],
    "stats": {
      "total": 152,
      "additions": 95,
      "deletions": 57
    },
    "files": [
      {
        "sha": "e3f5734c0b8b6e1f72b8c726d9371f6ae82774eb",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -196,6 +196,7 @@ BITCOIN_CORE_H = \\\n   txmempool.h \\\n   ui_interface.h \\\n   undo.h \\\n+  util/bip32.h \\\n   util/bytevectorhash.h \\\n   util/system.h \\\n   util/memory.h \\\n@@ -456,6 +457,7 @@ libbitcoin_util_a_SOURCES = \\\n   support/cleanse.cpp \\\n   sync.cpp \\\n   threadinterrupt.cpp \\\n+  util/bip32.cpp \\\n   util/bytevectorhash.cpp \\\n   util/system.cpp \\\n   util/moneystr.cpp \\"
      },
      {
        "sha": "3c7fa7b80698379dd0d83eaca2ad173197fdef10",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -26,6 +26,7 @@\n #include <script/sign.h>\n #include <script/standard.h>\n #include <uint256.h>\n+#include <util/bip32.h>\n #include <util/strencodings.h>\n #include <validation.h>\n #include <validationinterface.h>"
      },
      {
        "sha": "532a8028a2895049fd5610ae4d16d4dee9f816ed",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -10,6 +10,7 @@\n #include <script/standard.h>\n \n #include <span.h>\n+#include <util/bip32.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n \n@@ -25,16 +26,6 @@ namespace {\n \n typedef std::vector<uint32_t> KeyPath;\n \n-std::string FormatKeyPath(const KeyPath& path)\n-{\n-    std::string ret;\n-    for (auto i : path) {\n-        ret += strprintf(\"/%i\", (i << 1) >> 1);\n-        if (i >> 31) ret += '\\'';\n-    }\n-    return ret;\n-}\n-\n /** Interface for public key objects in descriptors. */\n struct PubkeyProvider\n {\n@@ -63,7 +54,7 @@ class OriginPubkeyProvider final : public PubkeyProvider\n \n     std::string OriginString() const\n     {\n-        return HexStr(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint)) + FormatKeyPath(m_origin.path);\n+        return HexStr(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint)) + FormatHDKeypath(m_origin.path);\n     }\n \n public:\n@@ -184,7 +175,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n     std::string ToString() const override\n     {\n-        std::string ret = EncodeExtPubKey(m_extkey) + FormatKeyPath(m_path);\n+        std::string ret = EncodeExtPubKey(m_extkey) + FormatHDKeypath(m_path);\n         if (IsRange()) {\n             ret += \"/*\";\n             if (m_derive == DeriveType::HARDENED) ret += '\\'';\n@@ -195,7 +186,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     {\n         CExtKey key;\n         if (!GetExtKey(arg, key)) return false;\n-        out = EncodeExtKey(key) + FormatKeyPath(m_path);\n+        out = EncodeExtKey(key) + FormatHDKeypath(m_path);\n         if (IsRange()) {\n             out += \"/*\";\n             if (m_derive == DeriveType::HARDENED) out += '\\'';"
      },
      {
        "sha": "6f176dd5ec30defcfcf4360d2f89b285d2a6d23e",
        "filename": "src/util/bip32.cpp",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/bip32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/bip32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bip32.cpp?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sstream>\n+#include <stdio.h>\n+#include <tinyformat.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+\n+\n+bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath)\n+{\n+    std::stringstream ss(keypath_str);\n+    std::string item;\n+    bool first = true;\n+    while (std::getline(ss, item, '/')) {\n+        if (item.compare(\"m\") == 0) {\n+            if (first) {\n+                first = false;\n+                continue;\n+            }\n+            return false;\n+        }\n+        // Finds whether it is hardened\n+        uint32_t path = 0;\n+        size_t pos = item.find(\"'\");\n+        if (pos != std::string::npos) {\n+            // The hardened tick can only be in the last index of the string\n+            if (pos != item.size() - 1) {\n+                return false;\n+            }\n+            path |= 0x80000000;\n+            item = item.substr(0, item.size() - 1); // Drop the last character which is the hardened tick\n+        }\n+\n+        // Ensure this is only numbers\n+        if (item.find_first_not_of( \"0123456789\" ) != std::string::npos) {\n+            return false;\n+        }\n+        uint32_t number;\n+        if (!ParseUInt32(item, &number)) {\n+            return false;\n+        }\n+        path |= number;\n+\n+        keypath.push_back(path);\n+        first = false;\n+    }\n+    return true;\n+}\n+\n+std::string FormatHDKeypath(const std::vector<uint32_t>& path)\n+{\n+    std::string ret;\n+    for (auto i : path) {\n+        ret += strprintf(\"/%i\", (i << 1) >> 1);\n+        if (i >> 31) ret += '\\'';\n+    }\n+    return ret;\n+}\n+\n+std::string WriteHDKeypath(const std::vector<uint32_t>& keypath)\n+{\n+    return \"m\" + FormatHDKeypath(keypath);\n+}"
      },
      {
        "sha": "7e58b79f38ab73f9c4613fc0c25f15a154c6b7ad",
        "filename": "src/util/bip32.h",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/bip32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/bip32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bip32.h?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_BIP32_H\n+#define BITCOIN_UTIL_BIP32_H\n+\n+#include <attributes.h>\n+#include <string>\n+#include <vector>\n+\n+/** Parse an HD keypaths like \"m/7/0'/2000\". */\n+NODISCARD bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath);\n+\n+/** Write HD keypaths as strings */\n+std::string WriteHDKeypath(const std::vector<uint32_t>& keypath);\n+std::string FormatHDKeypath(const std::vector<uint32_t>& path);\n+\n+#endif // BITCOIN_UTIL_BIP32_H"
      },
      {
        "sha": "0acbb4f117fafaf0b0a99f196348f6032aec5282",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 41,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -546,47 +546,6 @@ bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)\n     return true;\n }\n \n-bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath)\n-{\n-    std::stringstream ss(keypath_str);\n-    std::string item;\n-    bool first = true;\n-    while (std::getline(ss, item, '/')) {\n-        if (item.compare(\"m\") == 0) {\n-            if (first) {\n-                first = false;\n-                continue;\n-            }\n-            return false;\n-        }\n-        // Finds whether it is hardened\n-        uint32_t path = 0;\n-        size_t pos = item.find(\"'\");\n-        if (pos != std::string::npos) {\n-            // The hardened tick can only be in the last index of the string\n-            if (pos != item.size() - 1) {\n-                return false;\n-            }\n-            path |= 0x80000000;\n-            item = item.substr(0, item.size() - 1); // Drop the last character which is the hardened tick\n-        }\n-\n-        // Ensure this is only numbers\n-        if (item.find_first_not_of( \"0123456789\" ) != std::string::npos) {\n-            return false;\n-        }\n-        uint32_t number;\n-        if (!ParseUInt32(item, &number)) {\n-            return false;\n-        }\n-        path |= number;\n-\n-        keypath.push_back(path);\n-        first = false;\n-    }\n-    return true;\n-}\n-\n void Downcase(std::string& str)\n {\n     std::transform(str.begin(), str.end(), str.begin(), [](char c){return ToLower(c);});"
      },
      {
        "sha": "cf770440941cbd528fa131194a0631c1d5148368",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -197,9 +197,6 @@ bool ConvertBits(const O& outfn, I it, I end) {\n     return true;\n }\n \n-/** Parse an HD keypaths like \"m/7/0'/2000\". */\n-NODISCARD bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath);\n-\n /**\n  * Converts the given character to its lowercase equivalent.\n  * This function is locale independent. It only converts uppercase"
      },
      {
        "sha": "21edd9686c3b0c8030badc7b89a636863c4d8eee",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -27,6 +27,7 @@\n #include <script/sign.h>\n #include <shutdown.h>\n #include <timedata.h>\n+#include <util/bip32.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n #include <wallet/coincontrol.h>"
      },
      {
        "sha": "2a3149de465595532d7c0188bbb8c86eb887d5c9",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <key_io.h>\n #include <script/sign.h>\n+#include <util/bip32.h>\n #include <util/strencodings.h>\n #include <wallet/psbtwallet.h>\n #include <wallet/rpcwallet.h>"
      },
      {
        "sha": "69e8b08359385f842fb255f06679255c160ae9c8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -27,6 +27,7 @@\n #include <shutdown.h>\n #include <timedata.h>\n #include <txmempool.h>\n+#include <util/bip32.h>\n #include <util/moneystr.h>\n #include <wallet/fees.h>\n "
      }
    ]
  },
  {
    "sha": "bac8c676a727b4216ffcf4c430858bb93fda302e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWM4YzY3NmE3MjdiNDIxNmZmY2Y0YzQzMDg1OGJiOTNmZGEzMDJl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:23:39Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T19:00:29Z"
      },
      "message": "Add a method to CWallet to write just CKeyMetadata",
      "tree": {
        "sha": "ed1b8573a9ae38bf3f60b257619107bfe0dab93e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed1b8573a9ae38bf3f60b257619107bfe0dab93e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bac8c676a727b4216ffcf4c430858bb93fda302e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bac8c676a727b4216ffcf4c430858bb93fda302e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bac8c676a727b4216ffcf4c430858bb93fda302e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bac8c676a727b4216ffcf4c430858bb93fda302e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7652d3f64212a6af68fc7d788411d28fcbdbd0a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4c5ac2a821bec2c74425c6d3699dc491c29ce094",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac8c676a727b4216ffcf4c430858bb93fda302e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac8c676a727b4216ffcf4c430858bb93fda302e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bac8c676a727b4216ffcf4c430858bb93fda302e",
        "patch": "@@ -349,6 +349,12 @@ void CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata\n     m_script_metadata[script_id] = meta;\n }\n \n+// Writes a keymetadata for a public key. overwrite specifies whether to overwrite an existing metadata for that key if there exists one.\n+bool CWallet::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)\n+{\n+    return WalletBatch(*database).WriteKeyMetadata(meta, pubkey, overwrite);\n+}\n+\n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);"
      },
      {
        "sha": "18bcc9af9c16d7fa7c8f803b887c515da69e88c5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac8c676a727b4216ffcf4c430858bb93fda302e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac8c676a727b4216ffcf4c430858bb93fda302e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bac8c676a727b4216ffcf4c430858bb93fda302e",
        "patch": "@@ -776,6 +776,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     // Map from Script ID to key metadata (for watch-only keys).\n     std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_wallet);\n \n+    bool WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, bool overwrite);\n+\n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n     unsigned int nMasterKeyMaxID = 0;"
      }
    ]
  },
  {
    "sha": "345bff6013e0d1a7eb0a08a071723b27f0460b77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDViZmY2MDEzZTBkMWE3ZWIwYTA4YTA3MTcyM2IyN2YwNDYwYjc3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-12T15:41:36Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T19:00:29Z"
      },
      "message": "Remove hdmasterkeyid",
      "tree": {
        "sha": "fea47b5196838378e3d55fc868595b0509b28788",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fea47b5196838378e3d55fc868595b0509b28788"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/345bff6013e0d1a7eb0a08a071723b27f0460b77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/345bff6013e0d1a7eb0a08a071723b27f0460b77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/345bff6013e0d1a7eb0a08a071723b27f0460b77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/345bff6013e0d1a7eb0a08a071723b27f0460b77/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bac8c676a727b4216ffcf4c430858bb93fda302e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bac8c676a727b4216ffcf4c430858bb93fda302e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bac8c676a727b4216ffcf4c430858bb93fda302e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 0,
      "deletions": 9
    },
    "files": [
      {
        "sha": "b460405821f00d12fb76e2686f72e3d948525169",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/345bff6013e0d1a7eb0a08a071723b27f0460b77/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/345bff6013e0d1a7eb0a08a071723b27f0460b77/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=345bff6013e0d1a7eb0a08a071723b27f0460b77",
        "patch": "@@ -2419,7 +2419,6 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"unlocked_until\\\": ttt,             (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,                (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"hdseedid\\\": \\\"<hash160>\\\"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\\n\"\n-            \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\"       (string, optional) alias for hdseedid retained for backwards-compatibility. Will be removed in V0.18.\\n\"\n             \"  \\\"private_keys_enabled\\\": true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)\\n\"\n             \"}\\n\"\n                 },\n@@ -2457,7 +2456,6 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     obj.pushKV(\"paytxfee\", ValueFromAmount(pwallet->m_pay_tx_fee.GetFeePerK()));\n     if (!seed_id.IsNull()) {\n         obj.pushKV(\"hdseedid\", seed_id.GetHex());\n-        obj.pushKV(\"hdmasterkeyid\", seed_id.GetHex());\n     }\n     obj.pushKV(\"private_keys_enabled\", !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n     return obj;\n@@ -3661,7 +3659,6 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"      (string, optional) The Hash160 of the HD seed\\n\"\n-            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) alias for hdseedid maintained for backwards compatibility. Will be removed in V0.18.\\n\"\n             \"  \\\"labels\\\"                      (object) Array of labels associated with the address.\\n\"\n             \"    [\\n\"\n             \"      { (json object of label data)\\n\"\n@@ -3727,7 +3724,6 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n         if (!meta->hdKeypath.empty()) {\n             ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n             ret.pushKV(\"hdseedid\", meta->hd_seed_id.GetHex());\n-            ret.pushKV(\"hdmasterkeyid\", meta->hd_seed_id.GetHex());\n         }\n     }\n "
      },
      {
        "sha": "61245e5104e8184712adefa8a59bd89486183c61",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/345bff6013e0d1a7eb0a08a071723b27f0460b77/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/345bff6013e0d1a7eb0a08a071723b27f0460b77/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=345bff6013e0d1a7eb0a08a071723b27f0460b77",
        "patch": "@@ -27,7 +27,6 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         # Make sure we use hd, keep masterkeyid\n         masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n-        assert_equal(masterkeyid, self.nodes[1].getwalletinfo()['hdmasterkeyid'])\n         assert_equal(len(masterkeyid), 40)\n \n         # create an internal key\n@@ -53,7 +52,6 @@ def run_test(self):\n             hd_info = self.nodes[1].getaddressinfo(hd_add)\n             assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info[\"hdseedid\"], masterkeyid)\n-            assert_equal(hd_info[\"hdmasterkeyid\"], masterkeyid)\n             self.nodes[0].sendtoaddress(hd_add, 1)\n             self.nodes[0].generate(1)\n         self.nodes[0].sendtoaddress(non_hd_add, 1)\n@@ -83,7 +81,6 @@ def run_test(self):\n             hd_info_2 = self.nodes[1].getaddressinfo(hd_add_2)\n             assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info_2[\"hdseedid\"], masterkeyid)\n-            assert_equal(hd_info_2[\"hdmasterkeyid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()"
      },
      {
        "sha": "11161962680841c00f4066b323352a896926f8ab",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/345bff6013e0d1a7eb0a08a071723b27f0460b77/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/345bff6013e0d1a7eb0a08a071723b27f0460b77/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=345bff6013e0d1a7eb0a08a071723b27f0460b77",
        "patch": "@@ -21,7 +21,6 @@ def run_test(self):\n         addr_before_encrypting = nodes[0].getnewaddress()\n         addr_before_encrypting_data = nodes[0].getaddressinfo(addr_before_encrypting)\n         wallet_info_old = nodes[0].getwalletinfo()\n-        assert_equal(wallet_info_old['hdseedid'], wallet_info_old['hdmasterkeyid'])\n         assert(addr_before_encrypting_data['hdseedid'] == wallet_info_old['hdseedid'])\n \n         # Encrypt wallet and wait to terminate\n@@ -30,7 +29,6 @@ def run_test(self):\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].getaddressinfo(addr)\n         wallet_info = nodes[0].getwalletinfo()\n-        assert_equal(wallet_info['hdseedid'], wallet_info['hdmasterkeyid'])\n         assert(addr_before_encrypting_data['hdseedid'] != wallet_info['hdseedid'])\n         assert(addr_data['hdseedid'] == wallet_info['hdseedid'])\n         assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)"
      }
    ]
  },
  {
    "sha": "eab63bc264a35cf21738e8535773e3d36524c3fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWI2M2JjMjY0YTM1Y2YyMTczOGU4NTM1NzczZTNkMzY1MjRjM2Zl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:23:37Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T22:58:25Z"
      },
      "message": "Store key origin info in key metadata\n\nStore the master key fingerprint and derivation path in the\nkey metadata. hdKeypath is kept to indicate the seed and for\nbackwards compatibility, but all key derivation path output\nuses the key origin info instead of hdKeypath.",
      "tree": {
        "sha": "557800411c6e5918e1768b0c215cb1fe68df54f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/557800411c6e5918e1768b0c215cb1fe68df54f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eab63bc264a35cf21738e8535773e3d36524c3fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eab63bc264a35cf21738e8535773e3d36524c3fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eab63bc264a35cf21738e8535773e3d36524c3fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eab63bc264a35cf21738e8535773e3d36524c3fe/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "345bff6013e0d1a7eb0a08a071723b27f0460b77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/345bff6013e0d1a7eb0a08a071723b27f0460b77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/345bff6013e0d1a7eb0a08a071723b27f0460b77"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 100,
      "deletions": 18
    },
    "files": [
      {
        "sha": "3e9a3b38c66fd4e20c158d944853f37afdd7ae5f",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eab63bc264a35cf21738e8535773e3d36524c3fe/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eab63bc264a35cf21738e8535773e3d36524c3fe/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=eab63bc264a35cf21738e8535773e3d36524c3fe",
        "patch": "@@ -22,13 +22,27 @@ struct CMutableTransaction;\n \n struct KeyOriginInfo\n {\n-    unsigned char fingerprint[4];\n+    unsigned char fingerprint[4]; //!< First 32 bits of the Hash160 of the public key at the root of the path\n     std::vector<uint32_t> path;\n \n     friend bool operator==(const KeyOriginInfo& a, const KeyOriginInfo& b)\n     {\n         return std::equal(std::begin(a.fingerprint), std::end(a.fingerprint), std::begin(b.fingerprint)) && a.path == b.path;\n     }\n+\n+    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n+    {\n+        READWRITE(fingerprint);\n+        READWRITE(path);\n+    }\n+\n+    void clear()\n+    {\n+        memset(fingerprint, 0, 4);\n+        path.clear();\n+    }\n };\n \n /** An interface to be implemented by keystores that support signing. */"
      },
      {
        "sha": "8ed912ed1ed1940a684b27ab7dfc510e0fa13c33",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=eab63bc264a35cf21738e8535773e3d36524c3fe",
        "patch": "@@ -13,6 +13,7 @@\n #include <script/script.h>\n #include <script/standard.h>\n #include <sync.h>\n+#include <util/bip32.h>\n #include <util/system.h>\n #include <util/time.h>\n #include <validation.h>\n@@ -850,7 +851,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n             } else {\n                 file << \"change=1\";\n             }\n-            file << strprintf(\" # addr=%s%s\\n\", strAddr, (pwallet->mapKeyMetadata[keyid].hdKeypath.size() > 0 ? \" hdkeypath=\"+pwallet->mapKeyMetadata[keyid].hdKeypath : \"\"));\n+            file << strprintf(\" # addr=%s%s\\n\", strAddr, (pwallet->mapKeyMetadata[keyid].has_key_origin ? \" hdkeypath=\"+WriteHDKeypath(pwallet->mapKeyMetadata[keyid].key_origin.path) : \"\"));\n         }\n     }\n     file << \"\\n\";"
      },
      {
        "sha": "b5df70d5606c0583ee8763845eefae1f36b475a5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=eab63bc264a35cf21738e8535773e3d36524c3fe",
        "patch": "@@ -3659,6 +3659,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"      (string, optional) The Hash160 of the HD seed\\n\"\n+            \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingperint of the master key.\\n\"\n             \"  \\\"labels\\\"                      (object) Array of labels associated with the address.\\n\"\n             \"    [\\n\"\n             \"      { (json object of label data)\\n\"\n@@ -3721,9 +3722,10 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     }\n     if (meta) {\n         ret.pushKV(\"timestamp\", meta->nCreateTime);\n-        if (!meta->hdKeypath.empty()) {\n-            ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n+        if (meta->has_key_origin) {\n+            ret.pushKV(\"hdkeypath\", WriteHDKeypath(meta->key_origin.path));\n             ret.pushKV(\"hdseedid\", meta->hd_seed_id.GetHex());\n+            ret.pushKV(\"hdmasterfingerprint\", HexStr(meta->key_origin.fingerprint, meta->key_origin.fingerprint + 4));\n         }\n     }\n "
      },
      {
        "sha": "399490ea9f0a02149a2594df65125a1711de9afc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 11,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=eab63bc264a35cf21738e8535773e3d36524c3fe",
        "patch": "@@ -256,16 +256,25 @@ void CWallet::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey\n         if (internal) {\n             chainChildKey.Derive(childKey, hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n             metadata.hdKeypath = \"m/0'/1'/\" + std::to_string(hdChain.nInternalChainCounter) + \"'\";\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(1 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n             hdChain.nInternalChainCounter++;\n         }\n         else {\n             chainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n             metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n             hdChain.nExternalChainCounter++;\n         }\n     } while (HaveKey(childKey.key.GetPubKey().GetID()));\n     secret = childKey.key;\n     metadata.hd_seed_id = hdChain.seed_id;\n+    CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+    std::copy(master_id.begin(), master_id.begin() + 4, metadata.key_origin.fingerprint);\n+    metadata.has_key_origin = true;\n     // update the chain model in the database\n     if (!batch.WriteHDChain(hdChain))\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n@@ -355,6 +364,41 @@ bool CWallet::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey,\n     return WalletBatch(*database).WriteKeyMetadata(meta, pubkey, overwrite);\n }\n \n+void CWallet::UpgradeKeyMetadata()\n+{\n+    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+        return;\n+    }\n+\n+    for (auto& meta_pair : mapKeyMetadata) {\n+        CKeyMetadata& meta = meta_pair.second;\n+        if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n+            CKey key;\n+            GetKey(meta.hd_seed_id, key);\n+            CExtKey masterKey;\n+            masterKey.SetSeed(key.begin(), key.size());\n+            // Add to map\n+            CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+            std::copy(master_id.begin(), master_id.begin() + 4, meta.key_origin.fingerprint);\n+            if (!ParseHDKeypath(meta.hdKeypath, meta.key_origin.path)) {\n+                throw std::runtime_error(\"Invalid stored hdKeypath\");\n+            }\n+            meta.has_key_origin = true;\n+            if (meta.nVersion < CKeyMetadata::VERSION_WITH_KEY_ORIGIN) {\n+                meta.nVersion = CKeyMetadata::VERSION_WITH_KEY_ORIGIN;\n+            }\n+\n+            // Write meta to wallet\n+            CPubKey pubkey;\n+            if (GetPubKey(meta_pair.first, pubkey)) {\n+                WriteKeyMetadata(meta, pubkey, true);\n+            }\n+        }\n+    }\n+    SetWalletFlag(WALLET_FLAG_KEY_ORIGIN_METADATA);\n+}\n+\n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n@@ -453,8 +497,11 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_key\n                 return false;\n             if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, _vMasterKey))\n                 continue; // try another master key\n-            if (CCryptoKeyStore::Unlock(_vMasterKey, accept_no_keys))\n+            if (CCryptoKeyStore::Unlock(_vMasterKey, accept_no_keys)) {\n+                // Now that we've unlocked, upgrade the key metadata\n+                UpgradeKeyMetadata();\n                 return true;\n+            }\n         }\n     }\n     return false;\n@@ -1414,6 +1461,7 @@ CPubKey CWallet::DeriveNewSeed(const CKey& key)\n \n     // set the hd keypath to \"s\" -> Seed, refers the seed to itself\n     metadata.hdKeypath     = \"s\";\n+    metadata.has_key_origin = false;\n     metadata.hd_seed_id = seed.GetID();\n \n     {\n@@ -4494,16 +4542,9 @@ bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n             meta = it->second;\n         }\n     }\n-    if (!meta.hdKeypath.empty()) {\n-        if (!ParseHDKeypath(meta.hdKeypath, info.path)) return false;\n-        // Get the proper master key id\n-        CKey key;\n-        GetKey(meta.hd_seed_id, key);\n-        CExtKey masterKey;\n-        masterKey.SetSeed(key.begin(), key.size());\n-        // Compute identifier\n-        CKeyID masterid = masterKey.key.GetPubKey().GetID();\n-        std::copy(masterid.begin(), masterid.begin() + 4, info.fingerprint);\n+    if (meta.has_key_origin) {\n+        std::copy(meta.key_origin.fingerprint, meta.key_origin.fingerprint + 4, info.fingerprint);\n+        info.path = meta.key_origin.path;\n     } else { // Single pubkeys get the master fingerprint of themselves\n         std::copy(keyID.begin(), keyID.begin() + 4, info.fingerprint);\n     }"
      },
      {
        "sha": "ad6d72afb699b276d66cc17815fa4f99ef9bbfef",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=eab63bc264a35cf21738e8535773e3d36524c3fe",
        "patch": "@@ -135,6 +135,9 @@ enum WalletFlags : uint64_t {\n     // wallet flags in the upper section (> 1 << 31) will lead to not opening the wallet if flag is unknown\n     // unknown wallet flags in the lower section <= (1 << 31) will be tolerated\n \n+    // Indicates that the metadata has already been upgraded to contain key origins\n+    WALLET_FLAG_KEY_ORIGIN_METADATA = (1ULL << 1),\n+\n     // will enforce the rule that the wallet can't contain any private keys (only watch-only/pubkeys)\n     WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),\n \n@@ -151,7 +154,7 @@ enum WalletFlags : uint64_t {\n     WALLET_FLAG_BLANK_WALLET = (1ULL << 33),\n };\n \n-static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET;\n+static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_KEY_ORIGIN_METADATA;\n \n /** A key pool entry */\n class CKeyPool\n@@ -868,6 +871,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     //! Load metadata (used by LoadWallet)\n     void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n     void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      },
      {
        "sha": "2783f83fd6070aa186c1e82ae87b3fefed5f298c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=eab63bc264a35cf21738e8535773e3d36524c3fe",
        "patch": "@@ -534,6 +534,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     if (wss.fAnyUnordered)\n         result = pwallet->ReorderTransactions();\n \n+    // Upgrade all of the wallet keymetadata to have the hd master key id\n+    // This operation is not atomic, but if it fails, updated entries are still backwards compatible with older software\n+    try {\n+        pwallet->UpgradeKeyMetadata();\n+    } catch (...) {\n+        result = DBErrors::CORRUPT;\n+    }\n+\n     return result;\n }\n "
      },
      {
        "sha": "0532a55ff583cbc7f9af5926321def7470bee71e",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=eab63bc264a35cf21738e8535773e3d36524c3fe",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <amount.h>\n #include <primitives/transaction.h>\n+#include <script/sign.h>\n #include <wallet/db.h>\n #include <key.h>\n \n@@ -93,11 +94,14 @@ class CKeyMetadata\n public:\n     static const int VERSION_BASIC=1;\n     static const int VERSION_WITH_HDDATA=10;\n-    static const int CURRENT_VERSION=VERSION_WITH_HDDATA;\n+    static const int VERSION_WITH_KEY_ORIGIN = 12;\n+    static const int CURRENT_VERSION=VERSION_WITH_KEY_ORIGIN;\n     int nVersion;\n     int64_t nCreateTime; // 0 means unknown\n-    std::string hdKeypath; //optional HD/bip32 keypath\n+    std::string hdKeypath; //optional HD/bip32 keypath. Still used to determine whether a key is a seed. Also kept for backwards compatibility\n     CKeyID hd_seed_id; //id of the HD seed used to derive this key\n+    KeyOriginInfo key_origin; // Key origin info with path and fingerprint\n+    bool has_key_origin = false; //< Whether the key_origin is useful\n \n     CKeyMetadata()\n     {\n@@ -120,6 +124,11 @@ class CKeyMetadata\n             READWRITE(hdKeypath);\n             READWRITE(hd_seed_id);\n         }\n+        if (this->nVersion >= VERSION_WITH_KEY_ORIGIN)\n+        {\n+            READWRITE(key_origin);\n+            READWRITE(has_key_origin);\n+        }\n     }\n \n     void SetNull()\n@@ -128,6 +137,8 @@ class CKeyMetadata\n         nCreateTime = 0;\n         hdKeypath.clear();\n         hd_seed_id.SetNull();\n+        key_origin.clear();\n+        has_key_origin = false;\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "3d235dff5df106070e41e3a99cf9fb847a27e14a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDIzNWRmZjVkZjEwNjA3MGU0MWUzYTk5Y2Y5ZmI4NDdhMjdlMTRh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:23:45Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T22:58:25Z"
      },
      "message": "Implement a function to add KeyOriginInfo to a wallet",
      "tree": {
        "sha": "d9484067ce57ec5b8b33c86daf5d105e932c7a27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9484067ce57ec5b8b33c86daf5d105e932c7a27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d235dff5df106070e41e3a99cf9fb847a27e14a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d235dff5df106070e41e3a99cf9fb847a27e14a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d235dff5df106070e41e3a99cf9fb847a27e14a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d235dff5df106070e41e3a99cf9fb847a27e14a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eab63bc264a35cf21738e8535773e3d36524c3fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eab63bc264a35cf21738e8535773e3d36524c3fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eab63bc264a35cf21738e8535773e3d36524c3fe"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4df4e0981e4994e4838babfd8ca7f172d442b7f2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d235dff5df106070e41e3a99cf9fb847a27e14a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d235dff5df106070e41e3a99cf9fb847a27e14a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3d235dff5df106070e41e3a99cf9fb847a27e14a",
        "patch": "@@ -4550,3 +4550,13 @@ bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n     }\n     return true;\n }\n+\n+bool CWallet::AddKeyOrigin(const CPubKey& pubkey, const KeyOriginInfo& info)\n+{\n+    LOCK(cs_wallet);\n+    std::copy(info.fingerprint, info.fingerprint + 4, mapKeyMetadata[pubkey.GetID()].key_origin.fingerprint);\n+    mapKeyMetadata[pubkey.GetID()].key_origin.path = info.path;\n+    mapKeyMetadata[pubkey.GetID()].has_key_origin = true;\n+    mapKeyMetadata[pubkey.GetID()].hdKeypath = WriteHDKeypath(info.path);\n+    return WriteKeyMetadata(mapKeyMetadata[pubkey.GetID()], pubkey, true);\n+}"
      },
      {
        "sha": "3c5e475bd91f59e1327abcb14e038765bda0e8b7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d235dff5df106070e41e3a99cf9fb847a27e14a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d235dff5df106070e41e3a99cf9fb847a27e14a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3d235dff5df106070e41e3a99cf9fb847a27e14a",
        "patch": "@@ -1219,6 +1219,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     /** Implement lookup of key origin information through wallet key metadata. */\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+\n+    /** Add a KeyOriginInfo to the wallet */\n+    bool AddKeyOrigin(const CPubKey& pubkey, const KeyOriginInfo& info);\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "02d6586d7a0f1a0886010e733760ce59cf0935c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmQ2NTg2ZDdhMGYxYTA4ODYwMTBlNzMzNzYwY2U1OWNmMDkzNWMz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:23:48Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T22:58:25Z"
      },
      "message": "Import KeyOriginData when importing descriptors",
      "tree": {
        "sha": "671c976b1b5070346667a3af67b26602fee0a9af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/671c976b1b5070346667a3af67b26602fee0a9af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02d6586d7a0f1a0886010e733760ce59cf0935c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d6586d7a0f1a0886010e733760ce59cf0935c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02d6586d7a0f1a0886010e733760ce59cf0935c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d6586d7a0f1a0886010e733760ce59cf0935c3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d235dff5df106070e41e3a99cf9fb847a27e14a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d235dff5df106070e41e3a99cf9fb847a27e14a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d235dff5df106070e41e3a99cf9fb847a27e14a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5ceba397041520a0f1263ee5ef613dc659b56908",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02d6586d7a0f1a0886010e733760ce59cf0935c3/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02d6586d7a0f1a0886010e733760ce59cf0935c3/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=02d6586d7a0f1a0886010e733760ce59cf0935c3",
        "patch": "@@ -888,6 +888,7 @@ struct ImportData\n     // Output data\n     std::set<CScript> import_scripts;\n     std::map<CKeyID, bool> used_keys; //!< Import these private keys if available (the value indicates whether if the key is required for solvability)\n+    std::map<CKeyID, KeyOriginInfo> key_origins;\n };\n \n enum class ScriptContext\n@@ -1158,7 +1159,7 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n     }\n \n     std::copy(out_keys.pubkeys.begin(), out_keys.pubkeys.end(), std::inserter(pubkey_map, pubkey_map.end()));\n-\n+    import_data.key_origins.insert(out_keys.origins.begin(), out_keys.origins.end());\n     for (size_t i = 0; i < priv_keys.size(); ++i) {\n         const auto& str = priv_keys[i].get_str();\n         CKey key = DecodeSecret(str);\n@@ -1261,6 +1262,11 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             if (!pwallet->GetPubKey(id, temp) && !pwallet->AddWatchOnly(GetScriptForRawPubKey(pubkey), timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n+            const auto& key_orig_it = import_data.key_origins.find(id);\n+            if (key_orig_it != import_data.key_origins.end()) {\n+                pwallet->AddKeyOrigin(pubkey, key_orig_it->second);\n+            }\n+            pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n         }\n \n         for (const CScript& script : script_pub_keys) {"
      }
    ]
  },
  {
    "sha": "4c75a69f36a7630342e68b12999115e6b6b1e1e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Yzc1YTY5ZjM2YTc2MzAzNDJlNjhiMTI5OTkxMTVlNmI2YjFlMWUw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:23:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T22:58:25Z"
      },
      "message": "Test importing descriptors with key origin information",
      "tree": {
        "sha": "9c962e7c35ae025d6534368ad8df5e527c348db6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c962e7c35ae025d6534368ad8df5e527c348db6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c75a69f36a7630342e68b12999115e6b6b1e1e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c75a69f36a7630342e68b12999115e6b6b1e1e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c75a69f36a7630342e68b12999115e6b6b1e1e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c75a69f36a7630342e68b12999115e6b6b1e1e0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02d6586d7a0f1a0886010e733760ce59cf0935c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d6586d7a0f1a0886010e733760ce59cf0935c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02d6586d7a0f1a0886010e733760ce59cf0935c3"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 65,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ee59ef0966244ac5870ee8b81712a968a31d614b",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c75a69f36a7630342e68b12999115e6b6b1e1e0/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c75a69f36a7630342e68b12999115e6b6b1e1e0/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=4c75a69f36a7630342e68b12999115e6b6b1e1e0",
        "patch": "@@ -626,5 +626,70 @@ def run_test(self):\n                      iswatchonly=False)\n \n \n+        # Import pubkeys with key origin info\n+        self.log.info(\"Addresses should have hd keypath and master key id after import with key origin\")\n+        pub_addr = self.nodes[1].getnewaddress()\n+        pub_addr = self.nodes[1].getnewaddress()\n+        info = self.nodes[1].getaddressinfo(pub_addr)\n+        pub = info['pubkey']\n+        pub_keypath = info['hdkeypath']\n+        pub_fpr = info['hdmasterfingerprint']\n+        result = self.nodes[0].importmulti(\n+            [{\n+                'desc' : \"wpkh([\" + pub_fpr + pub_keypath[1:] +\"]\" + pub + \")\",\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        pub_import_info = self.nodes[0].getaddressinfo(pub_addr)\n+        assert_equal(pub_import_info['hdmasterfingerprint'], pub_fpr)\n+        assert_equal(pub_import_info['pubkey'], pub)\n+        assert_equal(pub_import_info['hdkeypath'], pub_keypath)\n+\n+        # Import privkeys with key origin info\n+        priv_addr = self.nodes[1].getnewaddress()\n+        info = self.nodes[1].getaddressinfo(priv_addr)\n+        priv = self.nodes[1].dumpprivkey(priv_addr)\n+        priv_keypath = info['hdkeypath']\n+        priv_fpr = info['hdmasterfingerprint']\n+        result = self.nodes[0].importmulti(\n+            [{\n+                'desc' : \"wpkh([\" + priv_fpr + priv_keypath[1:] + \"]\" + priv + \")\",\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        priv_import_info = self.nodes[0].getaddressinfo(priv_addr)\n+        assert_equal(priv_import_info['hdmasterfingerprint'], priv_fpr)\n+        assert_equal(priv_import_info['hdkeypath'], priv_keypath)\n+\n+        # Make sure the key origin info are still there after a restart\n+        self.stop_nodes()\n+        self.start_nodes()\n+        import_info = self.nodes[0].getaddressinfo(pub_addr)\n+        assert_equal(import_info['hdmasterfingerprint'], pub_fpr)\n+        assert_equal(import_info['hdkeypath'], pub_keypath)\n+        import_info = self.nodes[0].getaddressinfo(priv_addr)\n+        assert_equal(import_info['hdmasterfingerprint'], priv_fpr)\n+        assert_equal(import_info['hdkeypath'], priv_keypath)\n+\n+        # Check legacy import does not import key origin info\n+        self.log.info(\"Legacy imports don't have key origin info\")\n+        pub_addr = self.nodes[1].getnewaddress()\n+        info = self.nodes[1].getaddressinfo(pub_addr)\n+        pub = info['pubkey']\n+        result = self.nodes[0].importmulti(\n+            [{\n+                'scriptPubKey': {'address': pub_addr},\n+                'pubkeys': [pub],\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        pub_import_info = self.nodes[0].getaddressinfo(pub_addr)\n+        assert_equal(pub_import_info['pubkey'], pub)\n+        assert 'hdmasterfingerprint' not in pub_import_info\n+        assert 'hdkeypath' not in pub_import_info\n+\n if __name__ == '__main__':\n     ImportMultiTest().main()"
      }
    ]
  },
  {
    "sha": "cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjM1MTFiOWQ1ZjNkOGE4NmUwOTBlYmVkNWE0YWVhZjc1ODQzMGI4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-13T21:07:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T22:58:25Z"
      },
      "message": "Add release notes for importing key origin info change",
      "tree": {
        "sha": "981278e3ab253e29a95999601254917ff5c7d5e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/981278e3ab253e29a95999601254917ff5c7d5e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c75a69f36a7630342e68b12999115e6b6b1e1e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c75a69f36a7630342e68b12999115e6b6b1e1e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c75a69f36a7630342e68b12999115e6b6b1e1e0"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4797a95bdb8cd9cda7f853ce405980ce359f9720",
        "filename": "doc/release-notes-14021.md",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8/doc/release-notes-14021.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8/doc/release-notes-14021.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14021.md?ref=cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8",
        "patch": "@@ -0,0 +1,11 @@\n+Miscellaneous RPC Changes\n+-------------------------\n+- Descriptors with key origin information imported through `importmulti` will have their key origin information stored in the wallet for use with creating PSBTs.\n+- If `bip32derivs` of both `walletprocesspsbt` and `walletcreatefundedpsbt` is set to true but the key metadata for a public key has not been updated yet, then that key will have a derivation path as if it were just an independent key (i.e. no derivation path and its master fingerprint is itself)\n+\n+Miscellaneous Wallet changes\n+----------------------------\n+\n+- The key metadata will need to be upgraded the first time that the HD seed is available.\n+For unencrypted wallets this will occur on wallet loading.\n+For encrypted wallets this will occur the first time the wallet is unlocked."
      }
    ]
  }
]