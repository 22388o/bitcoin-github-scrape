instagibbs,2018-08-22T13:19:05Z,Nice! strong concept ACK,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-415028681,415028681,
achow101,2018-08-25T15:56:53Z,Fixed a bug where the keymetadata wasn't being written to the wallet file. Also added a test for that case.,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-415978714,415978714,
achow101,2018-08-28T21:48:36Z,Rebased and also changed the keymeta stuff to add the hd master key id at key generation and when the wallet is first loaded.,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-416752152,416752152,
achow101,2018-09-04T13:08:16Z,Rebased,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-418360569,418360569,
laanwj,2018-09-13T14:54:10Z,"Concept ACK, thanks for working on this",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-421036433,421036433,
achow101,2018-10-15T21:07:05Z,I will rework this to not require #14019 as soon as I have time (in a few days),https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-430013400,430013400,
achow101,2018-10-30T04:27:31Z,Closing for now due to the big changes to importmulti from #14454 and #14565. Perhaps it would be better to put more effort into supporting this through output descriptors rather than adding more data to importmulti.,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-434167968,434167968,
Sjors,2018-11-05T18:40:10Z,"+1 for only supporting this with descriptors. Suggest rebasing on #14491, as that currently doesn't save origin info into the wallet.",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-435986356,435986356,
achow101,2018-11-06T05:51:07Z,Rebased onto #14491 ,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-436138880,436138880,
Sjors,2018-11-06T08:45:06Z,"@achow101 can you do a `git commit -a --amend --date ""$(date)""` on your own commits so that they appear _after_ the unmerged upstream stuff? It's a bit hard to tell now which commits to review.",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-436174156,436174156,
Sjors,2018-11-06T09:51:18Z,"Seeing some warnings (might be upstream):\n<img width=""1155"" alt=""schermafbeelding 2018-11-06 om 10 33 51"" src=""https://user-images.githubusercontent.com/10217/48055268-7b5cb600-e1af-11e8-85f3-90d2c15bce87.png"">\n\nKey origin info from `importmulti` now nicely shows up now in `getaddressinfo`. However, like the upstream PR, it generate invalid psbt's. I tried with a watch-only wallet, manually ",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-436193667,436193667,
Sjors,2018-11-06T10:04:04Z,"If we narrow this PR to `WALLET_FLAG_DISABLE_PRIVATE_KEYS` wallets, would that allow you to just reuse `hdseedid` rather than undeprecating and repurposing `hdmasterkeyid `?\n\nAnd/or if we set `hdseedid` during `importmulti`, would that save you from having to upgrade the wallet version? I.e. get rid of  b0c7bbd4c460fdeb5a91d34f75e96eb115e37598?",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-436197671,436197671,
achow101,2018-11-06T14:21:32Z,"> If we narrow this PR to WALLET_FLAG_DISABLE_PRIVATE_KEYS wallets, would that allow you to just reuse hdseedid rather than undeprecating and repurposing hdmasterkeyid ?\n\nYes, but I don't really like that. It would mean that hdseedid has two meanings, depending on whether private keys are disabled. It's definition would not be consistent.",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-436268852,436268852,
achow101,2018-11-06T14:41:15Z,@Sjors I've updated the dates on my commits and fixed the lock issue I believe. I am unable to replicate the creation of invalid PSBTs though. The PSBTs I have created for testing are correct.,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-436275588,436275588,
Sjors,2018-11-06T15:47:01Z,"Isn't the only difference between `hdseedid` and `hdmasterkeyid` that the key with `hdseedid` MAY be present in the wallet (for `!WALLET_FLAG_DISABLE_PRIVATE_KEYS`)? It MAY also be absent for keys generated before `encryptwallet` (which replaces the wallet seed). They both refer to a master key that generated a set of keys in the wallet.\n\nIf we migrate to a descriptor based wallet, there would",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-436300283,436300283,
achow101,2018-11-06T16:01:36Z,"`hdseedid` is the ID of the seed. To get the master key id, the seed needs to be used to generate the master private key, and then the `masterkeyid` generated from that. There's one extra step of abstraction. The hd seed is not the same as the master private key.",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-436306115,436306115,
Sjors,2018-11-07T10:28:46Z,"@achow101 ah, I didn't know about the extra step from seed to master key. That makes sense then.",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-436578136,436578136,
DrahtBot,2018-11-09T06:09:52Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14075](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14075.html) (Import watch only pubkeys to the keypool if",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-437260776,437260776,
Sjors,2018-11-20T17:19:33Z,"Without meaning to expand the number of PR's we need to keep track of, but if this is merged then the `dumpwallet` improvement in #11803 should be updated to look for `master_key_id`. Currently it won't print `master_key_id` and skips origin info.",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-440356170,440356170,
achow101,2018-12-16T07:13:56Z,Rebased,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-447622669,447622669,
achow101,2018-12-24T15:27:50Z,Rebased,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-449746584,449746584,
achow101,2019-02-11T01:58:05Z,"> Why are you hardcoding a maximum derivation depth of 4?\n\nI'm not. Where do you see that it does?",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-462203035,462203035,
Sjors,2019-02-11T08:39:05Z,"@achow101 oops, I was confusing the fingerprint (fixed size 4) with path (already a vector). All good then!\n\nutACK 7f84a25, changes since last tACK:\n* more comments\n* using insert:\n<img width=""639"" alt=""schermafbeelding 2019-02-11 om 09 37 44"" src=""https://user-images.githubusercontent.com/10217/52552515-d1f61380-2de0-11e9-99e4-1e10040becf6.png"">\n",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-462251161,462251161,
laanwj,2019-02-12T09:12:08Z,"> In order to make this easier to use, the `hdmasterkeyid` field in `getaddressinfo` has been changed to actually give the HD master key id instead of the seed id\n\nThis is no longer true with the code change, please update the post (as it will be included in git).",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-462678416,462678416,
achow101,2019-02-12T17:06:23Z,Addressed comments and updated OP,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-462845331,462845331,
Sjors,2019-02-13T09:01:58Z,"@achow101 wrote inline:\n> Adding a `null` field would cause a lot of code churn. Instead I've changed `CKeyMetadata` to have a boolean that indicates whether the `key_origin` is valid. Let me know what you think of that; if it's good, I'll squash the commit down.\n\n@ajtowns wrote:\n> Looks better to me\n\nAgreed, utACK 4908b37 (modulo squash)\n",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463115589,463115589,
achow101,2019-02-13T15:35:59Z,Squashed,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463245398,463245398,
instagibbs,2019-02-13T16:05:02Z,"Explicit null key_origin is welcomed change.\n\nI don't think you have addressed the encrypted wallet migration issue with your preferred fix?",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463257287,463257287,
achow101,2019-02-13T18:30:33Z,"> I don't think you have addressed the encrypted wallet migration issue with your preferred fix?\n\nHmm. I thought I pushed that. It must've gotten lost in a rebase somewhere. Pushed it now.",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463312820,463312820,
instagibbs,2019-02-13T18:35:25Z,utACK https://github.com/bitcoin/bitcoin/pull/14021/commits/4486b36762a7ab395d1f01b941d83243af6450d4,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463314468,463314468,
Sjors,2019-02-13T19:35:54Z,"@instagibbs wrote inline:\n\n> Since this is called on load, does the user need to unlock an encrypted wallet?\n\n@achow101 wrote:\n> There are a few options to solve this. We could not upgrade the key metadata if we can't calculate the master key id. Or we could use the hd seed id instead if the correct master key id can't be calculated.\n\n> I am tending to go towards the second solution.",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463337032,463337032,
instagibbs,2019-02-13T19:40:54Z,@Sjors would it make the first unlock surprisingly long?,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463338878,463338878,
Sjors,2019-02-13T19:53:47Z,"I'm assuming updating metadata entries is extremely fast, but haven't tested that. You could potentially spit out a warning on first unlock (although that might stress out applications that consume std::out).",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463343546,463343546,
achow101,2019-02-13T20:08:43Z,"> I don't like this approach; more assumptions than necessary. It seems safer to also run this from `CWallet::Unlock`.\n\nThere's a bit of a problem with doing that. If the wallet is not unlocked but a user decides to use `walletprocesspsbt` with `bip32derivs` set to `true`, then the resulting psbt will have a bogus master key fingerprint. It's writing uninitialized memory to the psbt. This is b",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463348875,463348875,
achow101,2019-02-13T21:16:49Z,"I've reverted that change. In the new push, the key metadata will be upgraded on unlocking the wallet or on loading if the wallet is unencrypted. However, due to the issue I mentioned earlier, I've changed `GetKeyOrigin` to return the `KeyOriginInfo` for keys whose metadata has not been upgraded to just be as if it were an independent key.\n\nI also added release notes which mention this change.",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463374961,463374961,
Sjors,2019-02-14T09:47:53Z,"tACK b384060ff modulo squash.\n\nAppVeyor failure is same as on master.",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463562487,463562487,
achow101,2019-02-14T15:21:33Z,Squashed,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463666656,463666656,
Sjors,2019-02-14T15:47:56Z,utACK a8a7103,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463677315,463677315,
instagibbs,2019-02-14T19:05:20Z,utACK https://github.com/bitcoin/bitcoin/pull/14021/commits/8fff73cb092e609505f6a0a14c2fe4d8d80479dd,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463751352,463751352,
instagibbs,2019-02-14T19:52:33Z,"only change is WALLET_FLAG_KEY_ORIGIN_METADATA flag from 0 to 1.\n\nre-utACK https://github.com/bitcoin/bitcoin/pull/14021/commits/1b1c6aa276f24ff85392915c3b557e2343c88252",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463768524,463768524,
Sjors,2019-02-14T19:52:44Z,utACK 1b1c6aa,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463768588,463768588,
ajtowns,2019-02-14T22:06:53Z,utACK 1b1c6aa276f24ff85392915c3b557e2343c88252,https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463819661,463819661,
achow101,2019-02-14T22:52:20Z,"oops, screwed up that most recent push, don't merge yet",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463835198,463835198,
meshcollider,2019-02-14T23:10:25Z,"Changes since @sipa's are just nit-fixes, a new test, and a missing brace bugfix :+1:",https://github.com/bitcoin/bitcoin/pull/14021#issuecomment-463840215,463840215,
luke-jr,2018-08-29T17:48:14Z,Why?,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r213773700,213773700,src/utilstrencodings.cpp
instagibbs,2018-08-29T18:20:46Z,why not? This is quite standard.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r213784592,213784592,src/utilstrencodings.cpp
achow101,2018-08-29T20:34:54Z,"It's fairly standard to use `h` or `H` as the indicator, not just `'`. In fact, the BIP uses `H`, but as a subscript. `'` is not actually used as the indicator for hardened in the BIP even though that is what everyone uses.\n\nThe main reason for allowing this is so that you don't have to do any annoying escaping stuff for the `'` when entering the keypaths on the command line.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r213824850,213824850,src/utilstrencodings.cpp
practicalswift,2018-11-09T08:34:53Z,Should be const reference?,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r232174140,232174140,src/util/strencodings.h
practicalswift,2018-11-09T08:35:20Z,Should be const reference?,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r232174240,232174240,src/util/strencodings.cpp
meshcollider,2018-11-18T07:11:05Z,"IMO this function name is misleading, it is not ""writing"" anywhere, it is a formatting function",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r234431398,234431398,src/util/strencodings.cpp
meshcollider,2018-11-18T07:29:06Z,why not `std::copy()`?,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r234431839,234431839,src/wallet/wallet.cpp
meshcollider,2018-11-18T09:04:15Z,"`master_key_id` will often be only filled with the fingerprint rather than the entire ID, perhaps make a note in the help text above or only output the first 4 bytes in that case rather than a lot of zeroes too?\n\nAn alternative is to just always store the fingerprint in metadata, never the whole key, because I don't think it's used anywhere else.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r234434357,234434357,src/wallet/rpcwallet.cpp
meshcollider,2018-11-18T09:11:38Z,Why call twice? Is it just to have a non-zero keypath index? Perhaps add comment if deliberate,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r234434577,234434577,test/functional/wallet_importmulti.py
achow101,2018-12-24T19:20:56Z,I've changed this to use the fingerprint by adding `KeyOriginInfo` to `CKeyMetadata`.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r243854205,243854205,src/wallet/rpcwallet.cpp
achow101,2018-12-24T19:21:04Z,Added a comment.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r243854211,243854211,test/functional/wallet_importmulti.py
Sjors,2019-02-09T12:19:11Z,Nit: add documentation,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255297110,255297110,src/wallet/walletdb.h
Sjors,2019-02-09T12:25:57Z,"Nit: `ALso`\n\nSee above comment, I prefer adding a `bool` to explicitly track if a key is a seed. ",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255297257,255297257,src/wallet/walletdb.h
Sjors,2019-02-09T12:29:03Z,Note for other reviewers: we process `hdKeyPath` and add `key_origin` equivalents in `CWallet::UpgradeKeyMetadata()`. So there's no case where `key_origin.IsNull()` without also `meta->hdKeypath.empty()` ,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255297318,255297318,src/wallet/rpcwallet.cpp
Sjors,2019-02-09T12:29:37Z,"Nit: `key_origin` should have a `ToString()` method (you're adding something like this in a later commit, though that's for the whole origin)",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255297333,255297333,src/wallet/rpcwallet.cpp
Sjors,2019-02-09T12:49:23Z,Nit: why not make `fingerprint` a ~ `std::vector<unsigned char>` and use `clear()` on it too?,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255297793,255297793,src/script/sign.h
Sjors,2019-02-09T13:19:09Z,"Nit: add comment to explain what `hdKeypath != ""s""` means.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255298564,255298564,src/wallet/wallet.cpp
Sjors,2019-02-09T13:26:39Z,"Nit: suggest adding a comment to `unsigned char fingerprint[4];` above:\n```\n// BIP32 defines the key identifier as the RIPEMD160 after SHA256 of\n// the serialized ECDSA public key K, ignoring the chain code. The first 32 bits\n// of this is the key fingerprint.\n```",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255298753,255298753,src/script/sign.h
Sjors,2019-02-09T13:36:27Z,"Nit: add ` This wallet can't be safely upgraded and can't be opened by this version of Bitcoin Core.`\n\nIs this entire upgrade atomic, or is it atomic per `WriteKeyMetadata`? Otherwise you might end up with some upgraded keys and then an error. Then the previous version of the wallet can't open it anymore (if only for the user to call `dumpwallet`). In that case it's safer to call `ParseHDKeypa",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255298989,255298989,src/wallet/wallet.cpp
Sjors,2019-02-09T13:44:39Z,"nit-ish: let's just add a boolean `IsSeed` to `metadata`, so we don't have to keep `hdKeypath` around forever (can be done later, but would require another upgrade function).",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255299218,255299218,src/wallet/wallet.cpp
Sjors,2019-02-09T13:53:52Z,"Didn't the imported keys already have a metadata entry? If so, then shouldn't you only replace the timestamp if absent? ",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255299383,255299383,src/wallet/rpcdump.cpp
achow101,2019-02-11T02:03:57Z,A `key_origin` `ToString()` method would print both the fingerprint and path. This only needs the fingerprint.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255369781,255369781,src/wallet/rpcwallet.cpp
achow101,2019-02-11T02:04:21Z,Arrays use less space. This field doesn't need to be dynamic.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255369801,255369801,src/script/sign.h
achow101,2019-02-11T02:09:51Z,It is atomic per `WriteKeyMetadata`. However I believe that the changes to `CKeyMetadata` are backwards compatible. My understanding of the serialization code is that data at the end of the stream is ignored. So upgraded `CKeyMetadata` should still be open-able in older software.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255370086,255370086,src/wallet/wallet.cpp
achow101,2019-02-11T02:10:18Z,We need to keep `hdKeypath` forever as `CKeyMetadata` is backwards compatible. Might as well use it.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255370121,255370121,src/wallet/wallet.cpp
achow101,2019-02-11T02:12:20Z,"Only new things can be imported, so there shouldn't already be an existing metadata entry.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255370262,255370262,src/wallet/rpcdump.cpp
achow101,2019-02-11T02:17:03Z,Added a comment,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255370532,255370532,src/wallet/walletdb.h
achow101,2019-02-11T02:17:12Z,Fixed typo,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255370544,255370544,src/wallet/walletdb.h
achow101,2019-02-11T02:17:20Z,Done,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255370557,255370557,src/wallet/wallet.cpp
achow101,2019-02-11T02:17:27Z,Added a comment,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255370567,255370567,src/script/sign.h
instagibbs,2019-02-11T03:02:40Z,I don't think the space savings is worth dealing with IsNull verbosity and the magic number(4).,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255373437,255373437,src/script/sign.h
instagibbs,2019-02-11T03:12:41Z,This needs a description of what it's doing.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255374083,255374083,src/wallet/wallet.h
instagibbs,2019-02-11T03:15:34Z,"Since this is called on load, does the user need to unlock an encrypted wallet?",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255374325,255374325,src/wallet/wallet.cpp
instagibbs,2019-02-11T03:20:56Z,why no 11 :(,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255374743,255374743,src/wallet/walletdb.h
achow101,2019-02-11T04:15:47Z,This was something that was already here and I don't think it is necessary to change it.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255378656,255378656,src/script/sign.h
achow101,2019-02-11T04:19:41Z,Hmm. I think it will. There is currently no way to get the master key fingerprint without generating it from the hd seed.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255378943,255378943,src/wallet/wallet.cpp
achow101,2019-02-11T04:20:27Z,A previous version of this pr used version 11 and I did not want to cause wallets that had tested that pr to become unusable.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255379004,255379004,src/wallet/walletdb.h
achow101,2019-02-11T04:24:38Z,Done,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255379287,255379287,src/wallet/wallet.h
Sjors,2019-02-11T08:29:07Z,"Yes, I also noticed I was able to open (non-blank) 0.18 wallets in 0.17.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255408499,255408499,src/wallet/wallet.cpp
Sjors,2019-02-11T08:31:11Z,From my experience older hww branch wallets are already unusable so I wouldn't worry too much about that :-),https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255409004,255409004,src/wallet/walletdb.h
instagibbs,2019-02-11T15:49:44Z,"I'd like to know what's going to happen here, but we should at least be checking the result here to not calculate bogus data, yes?",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255566362,255566362,src/wallet/wallet.cpp
achow101,2019-02-11T18:09:06Z,"I think it will write bogus data.\n\nThere are a few options to solve this. We could not upgrade the key metadata if we can't calculate the master key id. Or we could use the hd seed id instead if the correct master key id can't be calculated.\n\nI am tending to go towards the second solution. While it technically is not the master key id, this information is really only used for/needed for de",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255628568,255628568,src/wallet/wallet.cpp
ajtowns,2019-02-12T00:09:06Z,"This PR removes some but not all of the hdmasterkeyid fields, suggest having a separate commit that removes all of them at once.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255749209,255749209,src/wallet/rpcwallet.cpp
ajtowns,2019-02-12T00:52:44Z,"This is a bit confusing. `fingerprint` has a 1 in 4 billion chance of legitimately being [0,0,0,0] from what I can see, and there's a code path that sets `fingerprint` but clears `path` (script/descriptor.cpp:ConstPubkeyProvider::GetPubKey). So I think this function has a small chance of returning inconsistent results.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255759286,255759286,src/script/sign.h
ajtowns,2019-02-12T00:56:33Z,Add `EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)` annotation?,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255760040,255760040,src/wallet/wallet.h
ajtowns,2019-02-12T01:06:19Z,"This throws `std::runtime_error` on an invalid hdKeypath, should that be caught here and translated into `DBErrors::CORRUPT` ? Also, should this be done before any writing so that if the wallet can't be loaded, it isn't changed first making it harder to debug?",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255762003,255762003,src/wallet/walletdb.cpp
ajtowns,2019-02-12T01:39:14Z,Naming it `FormatHDKeypath` and `const& keypath` would seem more consistent with `ParseHDKeypath`,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255769750,255769750,src/util/strencodings.cpp
ajtowns,2019-02-12T02:09:11Z,"If hdKeypath is being kept forever, does it actually make sense to have the key_origin added to CKeyMetadata? You can calculate key_origin from hdKeypath using ParseHDKeypath() if needed, but everywhere that uses key_origin is converting it back to a string via WriteHdKeypath already as far as I can see? AddKeyOrigin is already filling out hdKeyPath so it would still achieve the point of the PR by",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255775399,255775399,src/wallet/wallet.cpp
laanwj,2019-02-12T09:06:07Z,`//!<` please so that it shows up in doxygen,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255858577,255858577,src/script/sign.h
laanwj,2019-02-12T09:08:41Z,:+1: Don't special-case values that can actually occur,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255859863,255859863,src/script/sign.h
laanwj,2019-02-12T09:10:46Z,"It was never the intent for `strencodings.cpp` to gain so many bitcoin-application-specific utilities, and this application is very narrow. Maybe make a new header with bip32/key specific utils?",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255860751,255860751,src/util/strencodings.cpp
Sjors,2019-02-12T10:17:39Z,Can we mandate that `KeyOriginInfo` must always contain a `fingerprint`? So in that case justing checking `path.empty()` is enough. Otherwise we need another boolean that's also serialised.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255886794,255886794,src/script/sign.h
Sjors,2019-02-12T10:21:27Z,"@ajtowns the new metadata is still readable by older wallets: \nhttps://github.com/bitcoin/bitcoin/pull/14021#discussion_r255298989\n\nThat said, I also have a preference for atomically updating as a general pattern.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r255888246,255888246,src/wallet/walletdb.cpp
achow101,2019-02-12T15:34:16Z,"How else then would we determine that a KeyOriginInfo is null?\n\n> Can we mandate that `KeyOriginInfo` must always contain a `fingerprint`? So in that case justing checking `path.empty()` is enough.\n\nI don't think so. It is perfectly valid to have a fingerprint and no path. This indicates that the path is just `m`.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256008462,256008462,src/script/sign.h
achow101,2019-02-12T17:04:39Z,Done,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256053193,256053193,src/wallet/rpcwallet.cpp
achow101,2019-02-12T17:04:45Z,Done,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256053238,256053238,src/wallet/wallet.h
achow101,2019-02-12T17:05:08Z,I've added a catch for the `std::runtime_error`,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256053416,256053416,src/wallet/walletdb.cpp
achow101,2019-02-12T17:05:22Z,Done,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256053508,256053508,src/script/sign.h
achow101,2019-02-12T17:05:35Z,"Moved to `bip32.{h,cpp}`",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256053597,256053597,src/util/strencodings.cpp
achow101,2019-02-12T17:10:16Z,`CWallet::GetKeyOrigin` uses the `key_origin` in `CKeyMetadata`. I strongly prefer storing key origin info in this form instead of having to parse strings every time key origin info is needed to build a PSBT.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256055595,256055595,src/wallet/wallet.cpp
Sjors,2019-02-12T17:55:17Z,"So then it seems we need an explicit ""null"" for the fingerprint to indicate it's not set.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256074011,256074011,src/script/sign.h
Sjors,2019-02-12T18:04:15Z,"Nit: add comment that this is not atomic, but that individually updated keymetadata entries don't prevent older wallets from loading.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256077622,256077622,src/wallet/walletdb.cpp
achow101,2019-02-13T00:04:19Z,"Adding a `null` field would cause a lot of code churn. Instead I've changed `CKeyMetadata` to have a boolean that indicates whether the `key_origin` is valid. Let me know what you think of that; if it's good, I'll squash the commit down.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256199347,256199347,src/script/sign.h
ajtowns,2019-02-13T04:43:20Z,You could use sizeof(fingerprint) to get rid of the magic number 4? But seems fine as is to me.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256245833,256245833,src/script/sign.h
ajtowns,2019-02-13T04:47:24Z,Looks better to me,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256246301,256246301,src/script/sign.h
achow101,2019-02-13T15:35:53Z,Done,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256450134,256450134,src/wallet/walletdb.cpp
instagibbs,2019-02-13T15:42:54Z,all instances(aside from notes) indeed appear to be deleted,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256453705,256453705,src/wallet/rpcwallet.cpp
instagibbs,2019-02-14T17:55:21Z,This means wallets will iterate through all key metadata every unlock?,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256943332,256943332,src/wallet/wallet.cpp
Sjors,2019-02-14T18:07:44Z,Perhaps a more efficient approach is to set a wallet flag once all metadata is upgraded?,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256947738,256947738,src/wallet/wallet.cpp
instagibbs,2019-02-14T18:37:27Z,"This is a point in favor of atomicity, then marking as complete.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256959443,256959443,src/wallet/wallet.cpp
achow101,2019-02-14T18:59:06Z,I've added a non-mandatory wallet flag which is set upon the upgrade's completion. This will make sure that the upgrade happens only once.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256967413,256967413,src/wallet/wallet.cpp
Sjors,2019-02-14T19:39:34Z,Should this say `upper section (> 0 << 31)` ?,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256982599,256982599,src/wallet/wallet.h
Sjors,2019-02-14T19:42:47Z,Maybe use `1`? https://github.com/bitcoin/bitcoin/pull/13756/files#diff-12635a58447c65585f51d32b7e04075bR140,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256983753,256983753,src/wallet/wallet.h
achow101,2019-02-14T19:45:21Z,"Not my problem :p\n\nAlso, no, it shouldn't. Shifting 0 is still 0.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256984744,256984744,src/wallet/wallet.h
achow101,2019-02-14T19:48:47Z,Done,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r256986042,256986042,src/wallet/wallet.h
sipa,2019-02-14T22:15:43Z,"That's correct. If you don't deserialize things at the end of a stream, they just get ignored.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r257035083,257035083,src/wallet/wallet.cpp
sipa,2019-02-14T22:16:54Z,"It seems there is an `IsLocked()` at the top now, so you've picked the first solution (not upgrading when locked)? If so, I prefer that.",https://github.com/bitcoin/bitcoin/pull/14021#discussion_r257035420,257035420,src/wallet/wallet.cpp
sipa,2019-02-14T22:23:06Z,Should this be called when `id` is not a member of `import_data.key_origins`? The non-descriptor imports won't have this map entries created.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r257037367,257037367,src/wallet/rpcdump.cpp
sipa,2019-02-14T22:23:57Z,Typo: `it's` -> `its`,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r257037603,257037603,doc/release-notes-14021.md
achow101,2019-02-14T22:49:52Z,It should check that. I've added the check and a test for this.,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r257045244,257045244,src/wallet/rpcdump.cpp
achow101,2019-02-14T22:49:57Z,Done,https://github.com/bitcoin/bitcoin/pull/14021#discussion_r257045258,257045258,doc/release-notes-14021.md
