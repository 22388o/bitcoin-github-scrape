[
  {
    "sha": "ccf84bb9c10b4397f1a2aed6cf83fa0172c5cf7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2Y4NGJiOWMxMGI0Mzk3ZjFhMmFlZDZjZjgzZmEwMTcyYzVjZjdm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-03-02T21:14:39Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-06-05T14:59:58Z"
      },
      "message": "Move birthday optimization out of ScanForWalletTransactions\n\nThis change has no effect on wallet behavior.\n\nOn wallet startup, the transaction scan avoids reading any blocks with\ntimestamps older than the wallet birthday (less than nTimeFirstKey -\nTIMESTAMP_WINDOW). This block skipping code currently resides in\nCWallet::ScanForWalletTransactions but it doesn't really belong there because\nit makes the implementation unnecessarily fragile and hard to understand, and\nit never has any effect except at startup (because all other callers do their\nrescans based on timestamps other than, but always greater or equal to,\nnTimeFirstKey).",
      "tree": {
        "sha": "2d463e44174e21d1d741059a926941f56ea42117",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d463e44174e21d1d741059a926941f56ea42117"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccf84bb9c10b4397f1a2aed6cf83fa0172c5cf7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccf84bb9c10b4397f1a2aed6cf83fa0172c5cf7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccf84bb9c10b4397f1a2aed6cf83fa0172c5cf7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccf84bb9c10b4397f1a2aed6cf83fa0172c5cf7f/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e654d61d94ee11bb363964a827cab9738a6cedca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e654d61d94ee11bb363964a827cab9738a6cedca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e654d61d94ee11bb363964a827cab9738a6cedca"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "880a6a8bd78e5a6cf8760c853f13da1fb7e37816",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccf84bb9c10b4397f1a2aed6cf83fa0172c5cf7f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccf84bb9c10b4397f1a2aed6cf83fa0172c5cf7f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ccf84bb9c10b4397f1a2aed6cf83fa0172c5cf7f",
        "patch": "@@ -1479,11 +1479,6 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n         fAbortRescan = false;\n         fScanningWallet = true;\n \n-        // no need to read and scan block, if block was created before\n-        // our wallet birthday (as adjusted for block time variability)\n-        while (pindex && nTimeFirstKey && (pindex->GetBlockTime() < (nTimeFirstKey - TIMESTAMP_WINDOW)))\n-            pindex = chainActive.Next(pindex);\n-\n         ShowProgress(_(\"Rescanning...\"), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n         double dProgressStart = GuessVerificationProgress(chainParams.TxData(), pindex);\n         double dProgressTip = GuessVerificationProgress(chainParams.TxData(), chainActive.Tip());\n@@ -3880,6 +3875,13 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n         uiInterface.InitMessage(_(\"Rescanning...\"));\n         LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n+\n+        // No need to read and scan block if block was created before\n+        // our wallet birthday (as adjusted for block time variability)\n+        while (pindexRescan && walletInstance->nTimeFirstKey && (pindexRescan->GetBlockTime() < (walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW))) {\n+            pindexRescan = chainActive.Next(pindexRescan);\n+        }\n+\n         nStart = GetTimeMillis();\n         walletInstance->ScanForWalletTransactions(pindexRescan, true);\n         LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);"
      }
    ]
  },
  {
    "sha": "9bb66ab66013fc3024fad00bceeb22a330b5bc1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmI2NmFiNjYwMTNmYzMwMjRmYWQwMGJjZWViMjJhMzMwYjViYzFi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-03-02T20:24:50Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-06-05T14:59:58Z"
      },
      "message": "Add RescanFromTime method and use from rpcdump\n\nNo change in behavior.",
      "tree": {
        "sha": "a4cf946a662c3d302685421a1b46935b8876ab58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4cf946a662c3d302685421a1b46935b8876ab58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bb66ab66013fc3024fad00bceeb22a330b5bc1b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bb66ab66013fc3024fad00bceeb22a330b5bc1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bb66ab66013fc3024fad00bceeb22a330b5bc1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bb66ab66013fc3024fad00bceeb22a330b5bc1b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccf84bb9c10b4397f1a2aed6cf83fa0172c5cf7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccf84bb9c10b4397f1a2aed6cf83fa0172c5cf7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccf84bb9c10b4397f1a2aed6cf83fa0172c5cf7f"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 44,
      "deletions": 17
    },
    "files": [
      {
        "sha": "9359887e0dece6cd537320db5c854b98d82e8206",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 17,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bb66ab66013fc3024fad00bceeb22a330b5bc1b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bb66ab66013fc3024fad00bceeb22a330b5bc1b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9bb66ab66013fc3024fad00bceeb22a330b5bc1b",
        "patch": "@@ -149,7 +149,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         pwallet->UpdateTimeFirstKey(1);\n \n         if (fRescan) {\n-            pwallet->ScanForWalletTransactions(chainActive.Genesis(), true);\n+            pwallet->RescanFromTime(TIMESTAMP_MIN, true /* update */);\n         }\n     }\n \n@@ -279,7 +279,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n \n     if (fRescan)\n     {\n-        pwallet->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwallet->RescanFromTime(TIMESTAMP_MIN, true /* update */);\n         pwallet->ReacceptWalletTransactions();\n     }\n \n@@ -437,7 +437,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n     if (fRescan)\n     {\n-        pwallet->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwallet->RescanFromTime(TIMESTAMP_MIN, true /* update */);\n         pwallet->ReacceptWalletTransactions();\n     }\n \n@@ -537,11 +537,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n     file.close();\n     pwallet->ShowProgress(\"\", 100); // hide progress dialog in GUI\n     pwallet->UpdateTimeFirstKey(nTimeBegin);\n-\n-    CBlockIndex *pindex = chainActive.FindEarliestAtLeast(nTimeBegin - TIMESTAMP_WINDOW);\n-\n-    LogPrintf(\"Rescanning last %i blocks\\n\", pindex ? chainActive.Height() - pindex->nHeight + 1 : 0);\n-    pwallet->ScanForWalletTransactions(pindex);\n+    pwallet->RescanFromTime(nTimeBegin - TIMESTAMP_WINDOW, false /* update */);\n     pwallet->MarkDirty();\n \n     if (!fGood)\n@@ -1117,14 +1113,10 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     }\n \n     if (fRescan && fRunScan && requests.size()) {\n-        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(std::max<int64_t>(nLowestTimestamp - TIMESTAMP_WINDOW, 0)) : chainActive.Genesis();\n-        CBlockIndex* scanFailed = nullptr;\n-        if (pindex) {\n-            scanFailed = pwallet->ScanForWalletTransactions(pindex, true);\n-            pwallet->ReacceptWalletTransactions();\n-        }\n+        int64_t scannedTime = pwallet->RescanFromTime(nLowestTimestamp - TIMESTAMP_WINDOW, true /* update */);\n+        pwallet->ReacceptWalletTransactions();\n \n-        if (scanFailed) {\n+        if (scannedTime > nLowestTimestamp - TIMESTAMP_WINDOW) {\n             std::vector<UniValue> results = response.getValues();\n             response.clear();\n             response.setArray();\n@@ -1134,7 +1126,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                 // range, or if the import result already has an error set, let\n                 // the result stand unmodified. Otherwise replace the result\n                 // with an error message.\n-                if (GetImportTimestamp(request, now) - TIMESTAMP_WINDOW > scanFailed->GetBlockTimeMax() || results.at(i).exists(\"error\")) {\n+                if (scannedTime <= GetImportTimestamp(request, now) - TIMESTAMP_WINDOW || results.at(i).exists(\"error\")) {\n                     response.push_back(results.at(i));\n                 } else {\n                     UniValue result = UniValue(UniValue::VOBJ);\n@@ -1150,7 +1142,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                       \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n                                       \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n                                       \"and -rescan options).\",\n-                                GetImportTimestamp(request, now), scanFailed->GetBlockTimeMax(), TIMESTAMP_WINDOW)));\n+                                GetImportTimestamp(request, now), scannedTime - 1, TIMESTAMP_WINDOW)));\n                     response.push_back(std::move(result));\n                 }\n                 ++i;"
      },
      {
        "sha": "06f8fc045884067fdf0471068fdbd613cdb0603f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bb66ab66013fc3024fad00bceeb22a330b5bc1b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bb66ab66013fc3024fad00bceeb22a330b5bc1b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9bb66ab66013fc3024fad00bceeb22a330b5bc1b",
        "patch": "@@ -221,6 +221,10 @@ bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigne\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n }\n \n+/**\n+ * Update wallet first key creation time. This should be called whenever keys\n+ * are added to the wallet, with the oldest key creation time.\n+ */\n void CWallet::UpdateTimeFirstKey(int64_t nCreateTime)\n {\n     AssertLockHeld(cs_wallet);\n@@ -1458,6 +1462,34 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n \n }\n \n+/**\n+ * Scan active chain for relevant transactions after importing keys. This should\n+ * be called whenever new keys are added to the wallet, with the oldest key\n+ * creation time minus TIMESTAMP_WINDOW.\n+ *\n+ * @return Earliest timestamp that could be successfully scanned from. Timestamp\n+ * returned may be higher than startTime if some blocks could not be read.\n+ */\n+int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(cs_wallet);\n+\n+    // Find starting block. May be null if nCreateTime is greater than the\n+    // highest blockchain timestamp, in which case there is nothing that needs\n+    // to be scanned.\n+    CBlockIndex* const startBlock = chainActive.FindEarliestAtLeast(startTime);\n+    LogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+\n+    if (startBlock) {\n+        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, update);\n+        if (failedBlock) {\n+            return failedBlock->GetBlockTimeMax() + 1;\n+        }\n+    }\n+    return startTime;\n+}\n+\n /**\n  * Scan the block chain (starting in pindexStart) for transactions\n  * from or to us. If fUpdate is true, found transactions that already"
      },
      {
        "sha": "b6459f765c6c4731eac795211df4a61f6fa94618",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bb66ab66013fc3024fad00bceeb22a330b5bc1b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bb66ab66013fc3024fad00bceeb22a330b5bc1b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9bb66ab66013fc3024fad00bceeb22a330b5bc1b",
        "patch": "@@ -67,6 +67,8 @@ static const bool DEFAULT_USE_HD_WALLET = true;\n \n extern const char * DEFAULT_WALLET_DAT;\n \n+static const int64_t TIMESTAMP_MIN = 0;\n+\n class CBlockIndex;\n class CCoinControl;\n class COutput;\n@@ -918,6 +920,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n+    int64_t RescanFromTime(int64_t startTime, bool update);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;"
      }
    ]
  },
  {
    "sha": "5b2be2b787f26ce8a87b742890e43b02cc4779d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjJiZTJiNzg3ZjI2Y2U4YTg3Yjc0Mjg5MGU0M2IwMmNjNDc3OWQx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-06-22T21:14:40Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-06-22T21:14:40Z"
      },
      "message": "Make CWallet::RescanFromTime comment less ambiguous",
      "tree": {
        "sha": "5b09a4485248a64a8ed3370d633e65018b3ba6de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b09a4485248a64a8ed3370d633e65018b3ba6de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b2be2b787f26ce8a87b742890e43b02cc4779d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b2be2b787f26ce8a87b742890e43b02cc4779d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b2be2b787f26ce8a87b742890e43b02cc4779d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b2be2b787f26ce8a87b742890e43b02cc4779d1/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bb66ab66013fc3024fad00bceeb22a330b5bc1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bb66ab66013fc3024fad00bceeb22a330b5bc1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bb66ab66013fc3024fad00bceeb22a330b5bc1b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d65a31ee913b76ba6346617ff62a884a6c29654a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b2be2b787f26ce8a87b742890e43b02cc4779d1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b2be2b787f26ce8a87b742890e43b02cc4779d1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5b2be2b787f26ce8a87b742890e43b02cc4779d1",
        "patch": "@@ -1468,7 +1468,7 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n  * creation time minus TIMESTAMP_WINDOW.\n  *\n  * @return Earliest timestamp that could be successfully scanned from. Timestamp\n- * returned may be higher than startTime if some blocks could not be read.\n+ * returned will be higher than startTime if relevant blocks could not be read.\n  */\n int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n {"
      }
    ]
  },
  {
    "sha": "deaf48b046e573f6774d19e74b58918ed777cb14",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWFmNDhiMDQ2ZTU3M2Y2Nzc0ZDE5ZTc0YjU4OTE4ZWQ3NzdjYjE0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-06-22T21:16:24Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-06-22T21:16:24Z"
      },
      "message": "Handle TIMESTAMP_WINDOW within CWallet::RescanFromTime\n\nThis way CWallet::RescanFromTime callers don't need to subtract\nTIMESTAMP_WINDOW themselves.\n\nThis is pure refactoring, there is no change in behavior.",
      "tree": {
        "sha": "53ce45e371b51b474fbde5a09cef25efa12bdd57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53ce45e371b51b474fbde5a09cef25efa12bdd57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/deaf48b046e573f6774d19e74b58918ed777cb14",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deaf48b046e573f6774d19e74b58918ed777cb14",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/deaf48b046e573f6774d19e74b58918ed777cb14",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deaf48b046e573f6774d19e74b58918ed777cb14/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b2be2b787f26ce8a87b742890e43b02cc4779d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b2be2b787f26ce8a87b742890e43b02cc4779d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b2be2b787f26ce8a87b742890e43b02cc4779d1"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "d8fdbd39172a2230a833c45d4f2bf733cd764bd7",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deaf48b046e573f6774d19e74b58918ed777cb14/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deaf48b046e573f6774d19e74b58918ed777cb14/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=deaf48b046e573f6774d19e74b58918ed777cb14",
        "patch": "@@ -537,7 +537,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n     file.close();\n     pwallet->ShowProgress(\"\", 100); // hide progress dialog in GUI\n     pwallet->UpdateTimeFirstKey(nTimeBegin);\n-    pwallet->RescanFromTime(nTimeBegin - TIMESTAMP_WINDOW, false /* update */);\n+    pwallet->RescanFromTime(nTimeBegin, false /* update */);\n     pwallet->MarkDirty();\n \n     if (!fGood)\n@@ -1113,10 +1113,10 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     }\n \n     if (fRescan && fRunScan && requests.size()) {\n-        int64_t scannedTime = pwallet->RescanFromTime(nLowestTimestamp - TIMESTAMP_WINDOW, true /* update */);\n+        int64_t scannedTime = pwallet->RescanFromTime(nLowestTimestamp, true /* update */);\n         pwallet->ReacceptWalletTransactions();\n \n-        if (scannedTime > nLowestTimestamp - TIMESTAMP_WINDOW) {\n+        if (scannedTime > nLowestTimestamp) {\n             std::vector<UniValue> results = response.getValues();\n             response.clear();\n             response.setArray();\n@@ -1126,7 +1126,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                 // range, or if the import result already has an error set, let\n                 // the result stand unmodified. Otherwise replace the result\n                 // with an error message.\n-                if (scannedTime <= GetImportTimestamp(request, now) - TIMESTAMP_WINDOW || results.at(i).exists(\"error\")) {\n+                if (scannedTime <= GetImportTimestamp(request, now) || results.at(i).exists(\"error\")) {\n                     response.push_back(results.at(i));\n                 } else {\n                     UniValue result = UniValue(UniValue::VOBJ);\n@@ -1142,7 +1142,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                       \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n                                       \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n                                       \"and -rescan options).\",\n-                                GetImportTimestamp(request, now), scannedTime - 1, TIMESTAMP_WINDOW)));\n+                                GetImportTimestamp(request, now), scannedTime - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));\n                     response.push_back(std::move(result));\n                 }\n                 ++i;"
      },
      {
        "sha": "a4197caeb6ec65c577065c0931c63a9abf13423f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deaf48b046e573f6774d19e74b58918ed777cb14/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deaf48b046e573f6774d19e74b58918ed777cb14/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=deaf48b046e573f6774d19e74b58918ed777cb14",
        "patch": "@@ -1465,7 +1465,7 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n /**\n  * Scan active chain for relevant transactions after importing keys. This should\n  * be called whenever new keys are added to the wallet, with the oldest key\n- * creation time minus TIMESTAMP_WINDOW.\n+ * creation time.\n  *\n  * @return Earliest timestamp that could be successfully scanned from. Timestamp\n  * returned will be higher than startTime if relevant blocks could not be read.\n@@ -1478,13 +1478,13 @@ int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* const startBlock = chainActive.FindEarliestAtLeast(startTime);\n+    CBlockIndex* const startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n     LogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n \n     if (startBlock) {\n         const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, update);\n         if (failedBlock) {\n-            return failedBlock->GetBlockTimeMax() + 1;\n+            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;"
      }
    ]
  }
]