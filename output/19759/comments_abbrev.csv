hebasto,2020-08-18 11:19:52,"The `m_` prefix is useful for the internal class code insofar it clear distinguishes a data member from local and global variables.\nI don't thinks this is required for structs. And `struct.m_data` looks ugly for me.\n\nSorry.",https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-675419648,675419648,
ryanofsky,2020-08-18 11:26:54,"I don't like this change. It ignores the way struct and classes are used differently, and the reason `m_` and `g_` prefixes were introduced, which was to make it possible to distinguish local variable references from member variable and global variable references. For example with:\n\n```c++\nvar = 3;\nm_var = 3;\ng_var = 3;\n```\n\nthe prefixes help you see without looking things up that ",https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-675422614,675422614,
jnewbery,2020-08-18 12:38:50,"I'm happy with either convention:\n\n`- Class and struct member variables have an 'm_' prefix.`\n\nor \n\n`- Class member variables have an 'm_' prefix (struct members do not have the 'm_' prefix since they're usually not accessed with implicit 'this').`\n\nbut want it to be documented to avoid wasting time in review. Very happy to change it to the second version if that's what people pref",https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-675453206,675453206,
hebasto,2020-08-18 12:41:57,"> I'm happy with either convention:\n> \n> `- Class and struct member variables have an 'm_' prefix.`\n> \n> or\n> \n> `- Class member variables have an 'm_' prefix (struct members do not have the 'm_' prefix since they're usually not accessed with implicit 'this').`\n> \n> but want it to be documented to avoid wasting time in review. Very happy to change it to the second version if that's",https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-675454696,675454696,
jnewbery,2020-08-18 12:48:30,"I should also note that many people already seem to be following the convention of prefixing struct members with `m_`. See for example:\n\n- [CNodeState and its sub-structs](https://github.com/bitcoin/bitcoin/blob/a2a250c7d07bcb80cefca9dd4a7ce57f41291334/src/net_processing.cpp#L276)\n- [CConnman::Options](https://github.com/bitcoin/bitcoin/blob/a2a250c7d07bcb80cefca9dd4a7ce57f41291334/src/net.h",https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-675457735,675457735,
promag,2020-08-23 22:50:32,"> but want it to be documented to avoid wasting time in review. Very happy to change it to the second version if that's what people prefer.\n\n👍 \n\n> I should also note that many people already seem to be following the convention of prefixing struct members with `m_`.\n\nBecause it's in the developer notes?\n\nFWIW I also prefer to skip `m_` prefix in structs.\n\n\n",https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-678834932,678834932,
theStack,2020-08-24 18:24:22,"I think the division of opinions is partly caused by the fact that there is no clear definition of what a `struct` is in C++. Semantically it is clear, but is it really helpful to call a class with default public membership still a struct if you add member functions?\n\nIf there is no member functions (e.g. [CNodeStats](https://github.com/bitcoin/bitcoin/blob/a2a250c7d07bcb80cefca9dd4a7ce57f4129",https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-679290303,679290303,
ajtowns,2020-09-02 00:43:53,"> If there is no member functions (e.g. [CNodeStats](https://github.com/bitcoin/bitcoin/blob/a2a250c7d07bcb80cefca9dd4a7ce57f41291334/src/net.h#L614)), I tend to agree with hebasto and ryanofsky that the `m_` is pointless and doesn't add value in readability. If there is at least one member function (e.g. [CNodeState](https://github.com/bitcoin/bitcoin/blob/a2a250c7d07bcb80cefca9dd4a7ce57f41291334",https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-685210368,685210368,
sipa,2020-09-02 01:35:23,"FWIW, when this rule was added, I intended it to apply to both structs and classes. There seem to be good reasons to not have it apply to member variables which are intended to be part of the public interface (which I guess would be a struct-like object), and it hasn't been consistently applied, so I don't think it's a big setback to change the rule to not have the m_ prefix for such types.\n\nI",https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-685228788,685228788,
jnewbery,2020-09-24 08:11:05,"I have a preference for applying to rules to both structs and classes for one reason only: simplicity. It's a far simpler rule to consistently apply the rule ""prefix all member variables with m_"", than ""if you have non-static member functions other than constructors, it should be a class and data members should be prefixed with m_; otherwise it should be a struct, and data members should be unpref",https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-698189188,698189188,
ryanofsky,2020-09-24 11:40:16,"I don't want to follow a strange rule that everybody agrees does not improve readability, and that I've never seen any other C or C++ project require, or even follow inadvertently.\n\n`m_` improves readability when implicit _`this`_ is used, and not in other cases. There is a big difference between public data structures and classes with private state. Thousands of pages have been written about ",https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-698290053,698290053,
jnewbery,2020-09-24 12:22:58,"Ok, closing this. It seems to be antagonizing people unnecessarily. I don't think adding guidance about when to use `class` or `struct` belongs in the **Symbol naming conventions** section, but if @ryanofsky wants to add it somewhere else in the developer docs, I'm happy to review.\n\n> If you want to invent a new rule that people don't like, that is new in 47 years of C programming\n\nIt does",https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-698309403,698309403,
vasild,2020-09-29 13:28:05,FWIW the [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html#Structs_vs._Classes) makes a clear distinction when to use `struct` and when `class` and they have different naming rules for member variables.,https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-700702839,700702839,
flack,2020-08-18 09:19:23,"```suggestion\n    - Class and struct member variables have an `m_` prefix.\n```",https://github.com/bitcoin/bitcoin/pull/19759#discussion_r472038645,472038645,doc/developer-notes.md
jnewbery,2020-08-18 09:22:32,thanks. Done.,https://github.com/bitcoin/bitcoin/pull/19759#discussion_r472040564,472040564,doc/developer-notes.md
