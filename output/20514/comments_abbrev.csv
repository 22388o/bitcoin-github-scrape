naumenkogs,2020-11-27 07:13:50,"utACK.\n\nI assume this code won't fail a node if you feed it an older anchors.dat format? At least I think it should not.\n\nPushing it to 0.21 solves it at scale, but we probably want to handle even corner cases.\n",https://github.com/bitcoin/bitcoin/pull/20514#issuecomment-734683947,734683947,
sipa,2020-11-27 07:21:15,"@naumenkogs Yes, it should be as deserialization uses the version number written in the CAddress record. So anchors.dat from rc1 or rc2 should be read correctly.\n\nStill, it seems there aren't any tests for the anchoring functionality, so it'd be good if someone wrote one, or it gets tested manually.",https://github.com/bitcoin/bitcoin/pull/20514#issuecomment-734686623,734686623,
jonatack,2020-11-27 10:57:50,"Concept ACK, could use test coverage.",https://github.com/bitcoin/bitcoin/pull/20514#issuecomment-734776843,734776843,
vasild,2020-11-27 11:05:54,"> it's very possible I've misread the code - this is split across addrdb/netaddress/net\n\nI think you read it correctly (or at least I read it in the same way). It will deserialize 0s from disk which will be invalid addresses which later will be skipped gracefully:\n\nhttps://github.com/bitcoin/bitcoin/blob/50091592dd875a1c94030dbed74112b003732d68/src/net.cpp#L1971-L1975",https://github.com/bitcoin/bitcoin/pull/20514#issuecomment-734780212,734780212,
jnewbery,2020-11-27 11:06:10,"> it uses the client version stored in the CAddress records to decide which deserializer to use.\n\n> anchors.dat from rc1 or rc2 should be read correctly.\n\n@sipa I don't understand this. With this PR, we always unserialize anchors.dat using a CAutoFile with version ADDRV2_FORMAT. I think the version stored in the CAddress will be used to deserialize the services in the CAddress, but the und",https://github.com/bitcoin/bitcoin/pull/20514#issuecomment-734780327,734780327,
vasild,2020-11-27 11:14:38,"I think the inconsistency in `CAddress` deserialization should be fixed in one way (#20509) or another:\n\n<details>\n<summary>fix CAddress deser inconsistency</summary>\n\n```diff\ndiff --git i/src/protocol.h w/src/protocol.h\nindex 309fac621..634a1a91a 100644\n--- i/src/protocol.h\n+++ w/src/protocol.h\n@@ -367,17 +367,17 @@ public:\n     CAddress(CService ipIn, ServiceFlags nServices",https://github.com/bitcoin/bitcoin/pull/20514#issuecomment-734783860,734783860,
hebasto,2020-11-27 11:22:23,">  * Work just fine if there is ever addrv3 format\n\nFuture proof is good.",https://github.com/bitcoin/bitcoin/pull/20514#issuecomment-734787077,734787077,
vasild,2020-11-27 12:21:16,"> I think the same problem exists for banlist.dat - we'll always serialize/deserialize in addrv1 format.\n\nTrue that we will always ser/deser in addrv1, but that is not a problem because the banlist contains `CSubNet` objects which must be either IPv4 or IPv6 (no Tor v3 involved):\n\nhttps://github.com/bitcoin/bitcoin/blob/e2ff5e7b35d71195278d2a2ed9485f141de33d7a/src/netaddress.cpp#L992-L995",https://github.com/bitcoin/bitcoin/pull/20514#issuecomment-734809739,734809739,
jnewbery,2020-11-27 12:25:30,"> that is not a problem because the banlist contains CSubNet objects which must be either IPv4 or IPv6 (no Tor v3 involved)\n\nAh good. Thanks @vasild!",https://github.com/bitcoin/bitcoin/pull/20514#issuecomment-734811296,734811296,
sipa,2020-11-27 16:56:00,@vasild Did you see #20516?,https://github.com/bitcoin/bitcoin/pull/20514#issuecomment-734920438,734920438,
sipa,2020-11-27 17:03:43,"@jnewbery Oops, yes, that is only true when combined with #20516, or with @vasild's patch above.",https://github.com/bitcoin/bitcoin/pull/20514#issuecomment-734922990,734922990,
sipa,2020-11-27 19:01:01,"> If I'm right, then I don't think we necessarily need to fix this for 0.21. We didn't have anchor connections or torv3 before, so the fact that they don't work together isn't a regression and can always be fixed up later\n\nThat's fair, and you've shown that this PR as-is actually makes things worse, as it'll fail to deserialize the `CService` object.\n\nTo fix it, we'll either need @vasild's",https://github.com/bitcoin/bitcoin/pull/20514#issuecomment-734954531,734954531,
vasild,2020-11-27 10:01:04,"Maybe this comment should be updated, given that now `ADDRV2_FORMAT` is also used here instead of `CLIENT_VERSION`:\n\nhttps://github.com/bitcoin/bitcoin/blob/50091592dd875a1c94030dbed74112b003732d68/src/netaddress.h#L26-L32",https://github.com/bitcoin/bitcoin/pull/20514#discussion_r531498359,531498359,src/addrdb.cpp
vasild,2020-11-27 10:18:00,"I think this will not deserialize properly `anchors.dat` from before this PR.\n* `CLIENT_VERSION` is something like `219900`\n* `ADDRV2_FORMAT` is `0x20000000`\n\nIn `anchors.dat` before this PR we have `CAddress` entries which contain `version=219900` and addresses serialized in addrv1 format.\n\nWith this PR we will set the stream version to `ADDRV2_FORMAT` during [deserialize](https://git",https://github.com/bitcoin/bitcoin/pull/20514#discussion_r531507712,531507712,src/addrdb.cpp
jnewbery,2020-11-27 10:32:02,"I think in this case the file checksum will mismatch and we won't load any anchors at all, which is ok (anchors.dat is not in any release and losing the file isn't a problem).",https://github.com/bitcoin/bitcoin/pull/20514#discussion_r531515369,531515369,src/addrdb.cpp
vasild,2020-11-27 10:44:57,"My point is that it will not be able to read ""old"" `anchors.dat` (I am not sure of the exact way it will fail, maybe it will be indeed checksum failure).\n\nI mention this because the comments above give the impression that ""old"" `anchors.dat` would be readable.",https://github.com/bitcoin/bitcoin/pull/20514#discussion_r531523841,531523841,src/addrdb.cpp
jnewbery,2020-11-27 10:46:13,"I'd prefer this (and DeserializeFileDB) to not have a default argument. There are only three places where they're called, and it seems better to be explicit in those places.",https://github.com/bitcoin/bitcoin/pull/20514#discussion_r531524544,531524544,src/addrdb.cpp
hebasto,2020-11-27 10:47:47,"> This should be compatible with (v1) addresses stored by 0.21.0rc{1,2} as well...\n\nSuch compatibility shouldn't be a point for the reason mentioned by @jnewbery.",https://github.com/bitcoin/bitcoin/pull/20514#discussion_r531525415,531525415,src/addrdb.cpp
