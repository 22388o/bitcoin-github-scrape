[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545104442",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545104442",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 545104442,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTEwNDQ0Mg==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-22T18:55:58Z",
    "updated_at": "2019-10-22T18:55:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is it known to be true that every call to LogPrint has no expressions with\nside effects?\n\nOn Tue, Oct 22, 2019, 11:28 AM Jeffrey Czyz <notifications@github.com>\nwrote:\n\n> Calling LogPrint with a category that is not enabled results in\n> evaluating the remaining function arguments, which may be arbitrarily\n> complex (and possibly expensive) expressions. Defining LogPrint as a\n> macro prevents this unnecessary expression evaluation.\n>\n> This is a partial revert of #14209\n> <https://github.com/bitcoin/bitcoin/pull/14209>. The decision to revert\n> is discussed\n> in #16688 <https://github.com/bitcoin/bitcoin/pull/16688>, which adds\n> verbose logging for validation event notification.\n> ------------------------------\n> You can view, comment on, or merge this pull request online at:\n>\n>   https://github.com/bitcoin/bitcoin/pull/17218\n> Commit Summary\n>\n>    - Replace the LogPrint function with a macro\n>\n> File Changes\n>\n>    - *M* src/logging.h\n>    <https://github.com/bitcoin/bitcoin/pull/17218/files#diff-0> (12)\n>\n> Patch Links:\n>\n>    - https://github.com/bitcoin/bitcoin/pull/17218.patch\n>    - https://github.com/bitcoin/bitcoin/pull/17218.diff\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/17218?email_source=notifications&email_token=AAGYN67LZZ4C7NCSPBAFEVDQP5A4VA5CNFSM4JDTSZXKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HTSVB2A>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAGYN67C6XATDCTWFXGPE6TQP5A4VANCNFSM4JDTSZXA>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545104442/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545131818",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545131818",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 545131818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTEzMTgxOA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-22T20:08:15Z",
    "updated_at": "2019-10-22T20:08:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is this a pure optimisation PR, or can we think of reasons beyond that?\r\n\r\nDo we have any examples of slow `LogPrint(\u2026)` calls where this would make a significant difference?\r\n\r\nCan we benchmark this in any way?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545131818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545153543",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545153543",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 545153543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTE1MzU0Mw==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-22T21:01:46Z",
    "updated_at": "2019-10-22T21:01:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've thought about it a bit and I think for the reason I gave above I'd\nwant to NACK this change.\n\nIf there are motivating examples for not evaluating the calls, they should\nbe fixed one by one.\n\nIt would also seem like perfect forwarding and inline can help with some of\nthese concerns too to nudge the compiler to defer constructing strings or\nwhatever.\n\nOn Tue, Oct 22, 2019, 1:47 PM Jeffrey Czyz <notifications@github.com> wrote:\n\n> *@jkczyz* commented on this pull request.\n> ------------------------------\n>\n> In src/logging.h\n> <https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337741803>:\n>\n> > @@ -155,12 +155,10 @@ static inline void LogPrintf(const char* fmt, const Args&... args)\n>      }\n>  }\n>\n> -template <typename... Args>\n> -static inline void LogPrint(const BCLog::LogFlags& category, const Args&... args)\n> -{\n> -    if (LogAcceptCategory((category))) {\n> -        LogPrintf(args...);\n> -    }\n> -}\n> +#define LogPrint(category, ...) do { \\\n>\n> Done in 8734c85\n> <https://github.com/bitcoin/bitcoin/commit/8734c856f85cb506fa97596383dd7e7b9edd7e03>\n> .\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/17218?email_source=notifications&email_token=AAGYN6ZCEVD7RSKFT4WLQPTQP5RGBA5CNFSM4JDTSZXKYY3PNVWWK3TUL52HS4DFWFIHK3DMKJSXC5LFON2FEZLWNFSXPKTDN5WW2ZLOORPWSZGOCI2YLLA#discussion_r337741803>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAGYN636IOUCRCYGJ2VKPFDQP5RGBANCNFSM4JDTSZXA>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545153543/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545174764",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545174764",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 545174764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTE3NDc2NA==",
    "user": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-22T22:00:29Z",
    "updated_at": "2019-10-22T22:00:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Is it known to be true that every call to LogPrint has no expressions with side effects?\r\n\r\nI grepped over call sites to check if anything suspicious stood out, but I did not thoroughly check if each expression was free of side effects.\r\n\r\nNote that this PR simply reverts the unintended behavioral change of #14209. Any side effects would have been introduced by that PR or subsequent changes.\r\n\r\n> If there are motivating examples for not evaluating the calls, they should\r\nbe fixed one by one.\r\n\r\nThe motivating example is #16688. I think this change is relatively low risk and restores the previous behavior of `LogPrint`. The alternative of adding a separate logging function would move the codebase into a worse state, IMHO. That should be weighed against the perceived risk of removing any unintended side effects.\r\n\r\n> It would also seem like perfect forwarding and inline can help with some of\r\nthese concerns too to nudge the compiler to defer constructing strings or\r\nwhatever.\r\n\r\nI don't believe perfect forwarding will prevent an argument expression from being evaluated, which is the reason for the PR. The compiler is also free to ignore `inline`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545174764/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545180347",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545180347",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 545180347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTE4MDM0Nw==",
    "user": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-22T22:19:02Z",
    "updated_at": "2019-10-22T22:19:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Is this a pure optimisation PR, or can we think of reasons beyond that?\r\n> \r\n> Do we have any examples of slow `LogPrint(\u2026)` calls where this would make a significant difference?\r\n> \r\n> Can we benchmark this in any way?\r\n\r\nI see it more as restoring the previous behavior of only paying for the logging that you want. Thus, anyone is free to add very verbose logging to their module without others incurring a cost when logging for that category isn't enabled.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545180347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545188419",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545188419",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 545188419,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTE4ODQxOQ==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-22T22:48:31Z",
    "updated_at": "2019-10-22T22:48:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah didn't catch that it's reverting behavior.\n\nI think that given that it's a revert it's more ok.\n\nIt's tricky to tell by glance if there are no side effects because of\natomics autoderef loading and stuff, which is why I felt it deserves\ncareful consideration.\n\nI don't care to bikeshed too much, but I think that making it IF_CAT(cat,\nexpr) would be semantic in terms of implying the arguments may not be\nevaluated, and then expr can be an unconditional Logprint. But that's a few\nextra characters... I wouldn't object if expr is passed to LogPrint in the\nmacro, but feel it's a bit harder to comprehend at a glance.\n\nOn Tue, Oct 22, 2019, 3:34 PM Jeffrey Czyz <notifications@github.com> wrote:\n\n> *@jkczyz* commented on this pull request.\n> ------------------------------\n>\n> In src/logging.h\n> <https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337779900>:\n>\n> > @@ -155,12 +155,10 @@ static inline void LogPrintf(const char* fmt, const Args&... args)\n>      }\n>  }\n>\n> -template <typename... Args>\n> -static inline void LogPrint(const BCLog::LogFlags& category, const Args&... args)\n> -{\n> -    if (LogAcceptCategory((category))) {\n> -        LogPrintf(args...);\n> -    }\n> -}\n> +#define LogPrint(category, ...) do { \\\n>\n> Ah, I thought you were suggesting LogPrint, LogPrintf, and LOG_CATEGORY.\n>\n> I'm not completely opposed to changing call sites to LOG_CATEGORY (and\n> checking for side effects in the process). But I would like to be sure such\n> a change would be welcome before putting in the work. :)\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/17218?email_source=notifications&email_token=AAGYN67PZ3X5Z2MVSRXTJFDQP55W5A5CNFSM4JDTSZXKYY3PNVWWK3TUL52HS4DFWFIHK3DMKJSXC5LFON2FEZLWNFSXPKTDN5WW2ZLOORPWSZGOCI3EIYQ#discussion_r337779900>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAGYN6Z3TFDBZLZOUXAEQITQP55W5ANCNFSM4JDTSZXA>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545188419/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545283628",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545283628",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 545283628,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTI4MzYyOA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-23T06:08:22Z",
    "updated_at": "2019-10-23T06:09:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I see it more as restoring the previous behavior of only paying for the logging that you want. Thus, anyone is free to add very verbose logging to their module without others incurring a cost when logging for that category isn't enabled.\r\n\r\nIn other types of software that is universally a good idea, but it could be argued that in Bitcoin Core we want to make sure that execution of consensus critical code should be as identical as possible across clients. See sipas arguments in #4576 regarding always evaluating arguments to not have uncertainty what performance impact consistency checks.\r\n\r\nWhen it comes to consensus critical code it could be argued that consistency in taken code paths is often more important than raw execution speed.\r\n\r\nIf we want to put that principle aside we should have good reasons for doing so: that's why it is important to benchmark a change like this. Is the performance impact measurable in practice?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545283628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545333791",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545333791",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 545333791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTMzMzc5MQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-23T08:35:04Z",
    "updated_at": "2019-10-23T09:17:08Z",
    "author_association": "MEMBER",
    "body": "~~Concept NACK, this used to be a macro in the past. We changed it to a function for argument hygiene as is common in modern C++.~~\r\n\r\n~~If you really need to log in performance-critical contexts, then you could do a special thing there, but I'm very much against changing the general log system for this.~~\r\n\r\nNever mind, I was confused here. It still uses an internal function for that. The whole point here was to be able to shortcut in case logging for the category was disabled\u2026\r\n\r\nI think the assumption in  #14209 was that an inline was just as good as a macro in this regard. Have you benchmarked this?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545333791/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545369956",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545369956",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 545369956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTM2OTk1Ng==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-23T10:05:57Z",
    "updated_at": "2019-10-23T10:06:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think the assumption in #14209 was that an inline was just as good as a macro in this regard. Have you benchmarked this?\r\n\r\nPracticalswift asked the same question yesterday and this hasn't been benchmarked yet. It might be the case that performance is roughly equivalent, but if by \"just as good\" you mean actually equivalent, it's probably not a good assumption that compilers are going to be able to deduce that calls like `pindex->GetBlockHash().GetHex()` have no side-effects and inline them out.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545369956/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545540333",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545540333",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 545540333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTU0MDMzMw==",
    "user": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-23T17:00:54Z",
    "updated_at": "2019-11-01T19:35:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > I see it more as restoring the previous behavior of only paying for the logging that you want. Thus, anyone is free to add very verbose logging to their module without others incurring a cost when logging for that category isn't enabled.\r\n> \r\n> In other types of software that is universally a good idea, but it could be argued that in Bitcoin Core we want to make sure that execution of consensus critical code should be as identical as possible across clients. See sipas arguments in #4576 regarding always evaluating arguments to not have uncertainty what performance impact consistency checks.\r\n> \r\n> When it comes to consensus critical code it could be argued that consistency in taken code paths is often more important than raw execution speed.\r\n\r\n~~Hmmm, in that case the current behavior is actually inconsistent. If the compiler decides to inline the code at a particular call site, then the arguments will not be evaluated whereas they will be evaluated at call sites that are not inlined.~~\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545540333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545542648",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545542648",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 545542648,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTU0MjY0OA==",
    "user": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-23T17:06:45Z",
    "updated_at": "2019-10-23T17:06:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > I think the assumption in #14209 was that an inline was just as good as a macro in this regard. Have you benchmarked this?\r\n> \r\n> Practicalswift asked the same question yesterday and this hasn't been benchmarked yet. It might be the case that performance is roughly equivalent, but if by \"just as good\" you mean actually equivalent, it's probably not a good assumption that compilers are going to be able to deduce that calls like `pindex->GetBlockHash().GetHex()` have no side-effects and inline them out.\r\n\r\nCorrect, I have not benchmarked the code. I'm not even sure how to adequately devise such a benchmark given the compiler can decide which call sites will have the code inlined. At very least, use of a macro will result in consistent behavior with regards to argument evaluation.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545542648/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545558546",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545558546",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 545558546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTU1ODU0Ng==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-23T17:45:20Z",
    "updated_at": "2019-10-23T17:45:20Z",
    "author_association": "CONTRIBUTOR",
    "body": ">t's probably not a good assumption that compilers are going to be able to deduce that calls like pindex->GetBlockHash().GetHex() have no side-effects and inline them out.\r\n\r\nMaybe we should look at the gnu::pure attribute (which have pretty wide support in gcc/clang/llvm and others, except MSVC) and noexcept, which would allow the compiler to better optimize such functions if this is an issue https://stackoverflow.com/questions/2798188/pure-const-function-attributes-in-different-compilers",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545558546/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547645300",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-547645300",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 547645300,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzY0NTMwMA==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-29T21:49:55Z",
    "updated_at": "2019-10-29T21:49:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, uh, no real direct input but at one point while reworking the logging for categories I changed the handling around and benchmarking as a function vs macro vs a few other things and found measurably slower validation (in particular early chain IBD which is already pretty fast), it was also easy to see it doing string parsing in the disassembly.\r\n\r\nThere is another option beyond making this a macro:  find the few performance critical logging spots and block them off with category tests (potentially just copying the current logging state into a local variable).  This should be even faster than the macro, since you could eliminate many logging lines with potentially just one access to the contended global state.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547645300/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547983806",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-547983806",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 547983806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0Nzk4MzgwNg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-30T16:07:35Z",
    "updated_at": "2019-10-30T16:07:54Z",
    "author_association": "MEMBER",
    "body": "I think it's fine to do this. I strongly doubt there is any logging (especially categorized debug logging) with important side-effects. Not too long ago this was a macro. At least I've always treated it as one.\r\n\r\nIf @marcofalke's concerns in #14209 no longer hold, ACK.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547983806/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548004387",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548004387",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 548004387,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODAwNDM4Nw==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-30T16:49:59Z",
    "updated_at": "2019-10-30T16:49:59Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. I think it's safer if this lives as a macro for the reasons described in the original post, and this especially shouldn't be controversial since (as others have noted) this was up until fairly recently a macro.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548004387/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548020087",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548020087",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 548020087,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODAyMDA4Nw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-30T17:22:35Z",
    "updated_at": "2019-10-30T17:22:35Z",
    "author_association": "MEMBER",
    "body": "My motivation for #14209  was to get code coverage test run, which was impossible prior to my fix. I don't care whether it is a function or macro.\r\n\r\nSomeone should do a benchmark, though if the rationale for this change is \"speed up\".",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548020087/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548048802",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548048802",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 548048802,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODA0ODgwMg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-30T18:22:23Z",
    "updated_at": "2019-10-31T08:46:06Z",
    "author_association": "MEMBER",
    "body": "> Someone should do a benchmark, though if the rationale for this change is \"speed up\".\r\n\r\nFrom what I understand  it's not a benchmark issue but a conceptual one. Macros don't have the guarantee to evaluate their arguments, but functions (even inline functions) do. Given arguments that are expensive to compute (e.g. string formatting, allocation, conversions), that's will always make a difference in the disabled case.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548048802/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548523902",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548523902",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 548523902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODUyMzkwMg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-31T19:04:05Z",
    "updated_at": "2019-10-31T19:04:05Z",
    "author_association": "MEMBER",
    "body": "Our bench runner has a full testing setup, so in theory `LogPrint*` could be microbenched",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548523902/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548573442",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548573442",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 548573442,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODU3MzQ0Mg==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-31T21:20:08Z",
    "updated_at": "2019-10-31T21:20:08Z",
    "author_association": "MEMBER",
    "body": "ACK 8734c856f85cb506fa97596383dd7e7b9edd7e03\r\n\r\n> My motivation for #14209 was to get code coverage test run, which was impossible prior to my fix. I don't care whether it is a function or macro.\r\n\r\nWhether it is a function or macro seems completely orthogonal to this. The simple fix in #14209 would have just been to remove the ifdef preprocessor directive added here: https://github.com/bitcoin/bitcoin/commit/c8914b9dbbf6106dac3c62769f7ce3bacd8fbf9b#diff-772f489c7d0a32de3badbfbcb5fd200dR133.\r\n\r\nThe renaming `LogPrintf` -> `LOG_CATEGORY` suggested here https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337957363 seems like a good follow-up.\r\n\r\nHere are all the `LogPrintf` changes since #14209 was merged:\r\n\r\n```\r\ngit log fae3fbd61a89c7a35bc0eda91b1df61371dc0936..HEAD -SLogPrintf -p | grep \"^[+-]\" | grep LogPrintf\r\n-                pwallet->WalletLogPrintf(\"Skipping import of %s (key already present)\\n\", EncodeDestination(PKHash(keyid)));\r\n+                pwallet->WalletLogPrintf(\"Error importing key for %s\\n\", EncodeDestination(PKHash(keyid)));\r\n-                pwallet->WalletLogPrintf(\"Skipping import of %s (script already present)\\n\", HexStr(script));\r\n+        LogPrintf(\"Error reading from database: %s\\n\", e.what());\r\n-            LogPrintf(\"Error reading from database: %s\\n\", e.what());\r\n+            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\r\n+            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\r\n+            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));\r\n-            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\r\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\r\n-    // This can be called during exceptions by LogPrintf(), so we cache the\r\n-    // This can be called during exceptions by LogPrintf(), so we cache the\r\n-    LogPrintf(\"\\n\\n\\n\\n\\n\");\r\n-        LogPrintf(\"%s: Connecting genesis block...\\n\", __func__);\r\n-            LogPrintf(\"%s: failed to activate chain (%s)\\n\", __func__, FormatStateMessage(state));\r\n-    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\r\n+    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\r\n+        LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\r\n+            LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\r\n+            LogPrintf(\"%s: Failed to truncate filter file %d\\n\", __func__, pos.nFile);\r\n+            LogPrintf(\"%s: Failed to commit filter file %d\\n\", __func__, pos.nFile);\r\n+        LogPrintf(\"%s: out of disk space\\n\", __func__);\r\n+        LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\r\n+    if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), path.string());\r\n+            LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), it->path().string());\r\n+                LogPrintf(\"%s\\n\", e.what());\r\n+                LogPrintf(\"Pre-allocating up to position 0x%x in %s%05u.dat\\n\", new_size, m_prefix, pos.nFile);\r\n-                    LogPrintf(\"Pre-allocating up to position 0x%x in blk%05u.dat\\n\", nNewChunks * BLOCKFILE_CHUNK_SIZE, pos.nFile);\r\n-                LogPrintf(\"Pre-allocating up to position 0x%x in rev%05u.dat\\n\", nNewChunks * UNDOFILE_CHUNK_SIZE, pos.nFile);\r\n+        LogPrintf(\"Unable to open file %s\\n\", path.string());\r\n+            LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\r\n-        LogPrintf(\"Unable to open file %s\\n\", path.string());\r\n-            LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\r\n+        LogPrintf(\"Using RdSeed as additional entropy source\\n\");\r\n+            LogPrintf(\"%s: Unable to remove PID file: File does not exist\\n\", __func__);\r\n-        LogPrintf(\"%s: Unable to remove pidfile: %s\\n\", __func__, e.what());\r\n+        LogPrintf(\"%s: Unable to remove PID file: %s\\n\", __func__, e.what());\r\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\r\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\r\n+        LogPrintf(\"Invalid or missing banlist.dat; recreating\\n\");\r\n-        LogPrintf(\"Invalid or missing banlist.dat; recreating\\n\");\r\n-            LogPrintf(\"HTTP event loop did not exit within allotted time, sending loopbreak\\n\");\r\n+                LogPrintf(\"WARNING: the RPC server is not safe to expose to untrusted networks such as the public internet\\n\");\r\n+            LogPrintf(\"WARNING: option -rpcallowip was specified without -rpcbind; this doesn't usually make sense\\n\");\r\n-        LogPrintf(\"Warning: Config setting for %s only applied on %s network when in [%s] section.\\n\", arg, m_network, m_network);\r\n+- #10265 `ff13f59` Make sure pindex is non-null before possibly referencing in LogPrintf call. (Karl-Johan Alm)\r\n+                LogPrintf(\"Setting version bits activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\r\n-                    LogPrintf(\"Setting version bits activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\r\n+                LogPrintf(\"[%d%%]...\", percentageDone); /* Continued */\r\n```\r\n\r\nNone of the new logs with printf args have side-effects:\r\n\r\n```\r\n+            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));   // HexStr() has no side-effects\r\n+            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));   // HexStr() has no side-effects\r\n+            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));   // HexStr() has no side-effects\r\n+        LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",    // BlockFilterTypeName() has no side-effects\r\n+            LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);   // no side-effects\r\n+            LogPrintf(\"%s: Failed to truncate filter file %d\\n\", __func__, pos.nFile);   // no side-effects\r\n+            LogPrintf(\"%s: Failed to commit filter file %d\\n\", __func__, pos.nFile);   // no side-effects\r\n+        LogPrintf(\"%s: out of disk space\\n\", __func__);   // no side-effects\r\n+        LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);   // no side-effects\r\n+    if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), path.string());   // boost::system::error_code::message() and boost::filesystem::path::string() have no side-effects\r\n+            LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), it->path().string());   // boost::system::error_code::message() and boost::filesystem::path::string() have no side-effects\r\n+                LogPrintf(\"%s\\n\", e.what());   // std::exception::what() has no side-effects\r\n+                LogPrintf(\"Pre-allocating up to position 0x%x in %s%05u.dat\\n\", new_size, m_prefix, pos.nFile);   // no side-effects\r\n+                LogPrintf(\"[%d%%]...\", percentageDone); /* Continued */   // no side-effects\r\n```\r\n\r\nSo merging this is at least as safe as we were prior to #14209.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548573442/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548601061",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548601061",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 548601061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODYwMTA2MQ==",
    "user": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-31T22:56:09Z",
    "updated_at": "2019-10-31T22:59:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Our bench runner has a full testing setup, so in theory `LogPrint*` could be microbenched\r\n\r\nI ran the following benchmark configured with --enable-debug:\r\n\r\n```c++\r\n#include <bench/bench.h>\r\n#include <logging.h>\r\n#include <validation.h>\r\n\r\nstatic void BenchmarkLogPrint(benchmark::State& state)\r\n{\r\n    LOCK(cs_main);\r\n    CBlockIndex* tip = ::ChainActive().Tip();\r\n    assert(tip != nullptr);\r\n\r\n    while (state.KeepRunning()) {\r\n        LogPrint(BCLog::NET, \"%s: new block hash=%s\", __func__, tip->GetBlockHash().ToString());\r\n    }\r\n}\r\n\r\nBENCHMARK(BenchmarkLogPrint, 10 * 1000 * 1000);\r\n```\r\n\r\n`LogPrint` as an inline function:\r\n\r\n```\r\n# Benchmark, evals, iterations, total, min, max, median\r\nBenchmarkLogPrint, 5, 10000000, 28.4183, 5.64534e-07, 5.76267e-07, 5.66845e-07\r\n```\r\n\r\n`LogPrint` as a macro:\r\n\r\n```\r\n# Benchmark, evals, iterations, total, min, max, median\r\nBenchmarkLogPrint, 5, 10000000, 0.356953, 6.8946e-09, 7.80663e-09, 6.92364e-09\r\n```\r\n\r\nLooks like it's a couple of orders of magnitude faster as a macro. Let me know if there is something more representative to run.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548601061/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548677025",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548677025",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 548677025,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODY3NzAyNQ==",
    "user": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-01T06:02:13Z",
    "updated_at": "2019-11-01T06:02:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The renaming `LogPrintf` -> `LOG_CATEGORY` suggested here [#17218 (comment)](https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337957363) seems like a good follow-up.\r\n> \r\n> Here are all the `LogPrintf` changes since #14209 was merged:\r\n> \r\n\r\nI believe we want `LogPrint` here as `LogPrintf` is the unconditional one.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548677025/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548781220",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548781220",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 548781220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODc4MTIyMA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-01T13:07:10Z",
    "updated_at": "2019-11-01T13:07:10Z",
    "author_association": "MEMBER",
    "body": "re-run ci",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548781220/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548792608",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548792608",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17218",
    "id": 548792608,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODc5MjYwOA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-01T13:44:49Z",
    "updated_at": "2019-11-01T13:44:49Z",
    "author_association": "MEMBER",
    "body": "> I believe we want LogPrint here as LogPrintf is the unconditional one.\r\n\r\nOops. You're right. Same exercise for LogPrint:\r\n\r\n```\r\n+        LogPrint(BCLog::NET, \"peer=%d: %s\\n\", nodeid, message);  // no side-effects\r\n+        LogPrint(BCLog::NET, \"CHECKSUM ERROR (%s, %u bytes), expected %s was %s\\n\",  // no side-effects (SanitizeString() and HexString() args are const)\r\n+            LogPrint(BCLog::NET, \"Ignoring \\\"getaddr\\\" from block-relay-only connection. peer=%d\\n\", pfrom->GetId());  // no side-effects (GetId() is const)\r\n+                    LogPrint(BCLog::NET, \"timeout of inflight tx %s from peer=%d\\n\", it->first.ToString(), pto->GetId());  // no side-effects (GetId() is const)\r\n+            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());  // no side-effects (std::exception::what() is const)\r\n+            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());  // no side-effects (std::exception::what() is const)\r\n+        LogPrint(BCLog::NET, \"peer=%d: %s\\n\", nodeid, message);  // no side-effects\r\n+            LogPrint(BCLog::NET, \"Unexpected cmpctblock message received from peer %d\\n\", pfrom->GetId());  // no side-effects (GetId() is const)\r\n+            LogPrint(BCLog::NET, \"Unexpected blocktxn message received from peer %d\\n\", pfrom->GetId());  // no side-effects (GetId() is const)\r\n+            LogPrint(BCLog::NET, \"Unexpected headers message received from peer %d\\n\", pfrom->GetId());  // no side-effects (GetId() is const)\r\n+            LogPrint(BCLog::NET, \"Unexpected block message received from peer %d\\n\", pfrom->GetId());  // no side-effects (GetId() is const)\r\n+                    LogPrint(BCLog::ADDRMAN, \"Unable to test; swapping %s for %s in tried table anyway\\n\", info_new.ToString(), info_old.ToString());  // no side-effects (ToString() is const)\r\n+        LogPrint(BCLog::ZMQ, \"zmq: Outbound message high water mark for %s at %s is %d\\n\", type, address, outbound_message_high_water_mark);  // no side-effects\r\n+        LogPrint(BCLog::HTTP, \"HTTP request from %s rejected: Client network is not allowed RPC access\\n\",  // no side-effects (GetPeer() and ToString() are const)\r\n+        LogPrint(BCLog::HTTP, \"HTTP request from %s rejected: Unknown HTTP request method\\n\",  // no side-effects (GetPeer() and ToString() are const)\r\n+        LogPrint(BCLog::ZMQ, \"zmq: Outbound message high water mark for %s at %s is %d\\n\", type, address, outbound_message_high_water_mark);  // no side-effects\r\n+    LogPrint(BCLog::ZMQ, \"zmq: version %d.%d.%d\\n\", major, minor, patch);  // no side-effects\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548792608/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337702226",
    "pull_request_review_id": 305446649,
    "id": 337702226,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzcwMjIyNg==",
    "diff_hunk": "@@ -155,12 +155,10 @@ static inline void LogPrintf(const char* fmt, const Args&... args)\n     }\n }\n \n-template <typename... Args>\n-static inline void LogPrint(const BCLog::LogFlags& category, const Args&... args)\n-{\n-    if (LogAcceptCategory((category))) {\n-        LogPrintf(args...);\n-    }\n-}\n+#define LogPrint(category, ...) do { \\",
    "path": "src/logging.h",
    "position": null,
    "original_position": 11,
    "commit_id": "8734c856f85cb506fa97596383dd7e7b9edd7e03",
    "original_commit_id": "93e8f7a833a03a0add51612d1fcac557af51359c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Just a suggestion, but it might be good to leave existing LogPrint function alone, and instead just add a new `LOG_CATEGORY(category, format, ...)` macro. This would avoid issue the Jeremy raised about side effects in existing code, and also be nicer in my opinion because uppercase naming would be more consistent with other macros.",
    "created_at": "2019-10-22T19:16:14Z",
    "updated_at": "2019-10-22T20:45:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337702226",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337702226"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337702226"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337702226/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 158,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337705213",
    "pull_request_review_id": 305450473,
    "id": 337705213,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzcwNTIxMw==",
    "diff_hunk": "@@ -155,12 +155,10 @@ static inline void LogPrintf(const char* fmt, const Args&... args)\n     }\n }\n \n-template <typename... Args>\n-static inline void LogPrint(const BCLog::LogFlags& category, const Args&... args)\n-{\n-    if (LogAcceptCategory((category))) {\n-        LogPrintf(args...);\n-    }\n-}\n+#define LogPrint(category, ...) do { \\",
    "path": "src/logging.h",
    "position": null,
    "original_position": 11,
    "commit_id": "8734c856f85cb506fa97596383dd7e7b9edd7e03",
    "original_commit_id": "93e8f7a833a03a0add51612d1fcac557af51359c",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'd prefer to see a developer comment to explain why this is a macro (not a function like `LogPrintf` just a few lines up).\r\n\r\noptional: You may install `clang-format` and run the https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy script to align the newline continuation chars `\\`.",
    "created_at": "2019-10-22T19:23:26Z",
    "updated_at": "2019-10-22T20:45:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337705213",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337705213"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337705213"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337705213/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 158,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337741803",
    "pull_request_review_id": 305497516,
    "id": 337741803,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzc0MTgwMw==",
    "diff_hunk": "@@ -155,12 +155,10 @@ static inline void LogPrintf(const char* fmt, const Args&... args)\n     }\n }\n \n-template <typename... Args>\n-static inline void LogPrint(const BCLog::LogFlags& category, const Args&... args)\n-{\n-    if (LogAcceptCategory((category))) {\n-        LogPrintf(args...);\n-    }\n-}\n+#define LogPrint(category, ...) do { \\",
    "path": "src/logging.h",
    "position": null,
    "original_position": 11,
    "commit_id": "8734c856f85cb506fa97596383dd7e7b9edd7e03",
    "original_commit_id": "93e8f7a833a03a0add51612d1fcac557af51359c",
    "user": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done in 8734c85.",
    "created_at": "2019-10-22T20:47:08Z",
    "updated_at": "2019-10-22T20:47:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337741803",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337741803"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337741803"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337741803/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 158,
    "side": "RIGHT",
    "in_reply_to_id": 337705213
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337746958",
    "pull_request_review_id": 305504169,
    "id": 337746958,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzc0Njk1OA==",
    "diff_hunk": "@@ -155,12 +155,10 @@ static inline void LogPrintf(const char* fmt, const Args&... args)\n     }\n }\n \n-template <typename... Args>\n-static inline void LogPrint(const BCLog::LogFlags& category, const Args&... args)\n-{\n-    if (LogAcceptCategory((category))) {\n-        LogPrintf(args...);\n-    }\n-}\n+#define LogPrint(category, ...) do { \\",
    "path": "src/logging.h",
    "position": null,
    "original_position": 11,
    "commit_id": "8734c856f85cb506fa97596383dd7e7b9edd7e03",
    "original_commit_id": "93e8f7a833a03a0add51612d1fcac557af51359c",
    "user": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "My feeling is that providing two ways to log where one is subtly different than the other adds unnecessary cognitive load to readers and reviewers. Will address Jeremey's comment in a follow-up.",
    "created_at": "2019-10-22T20:58:23Z",
    "updated_at": "2019-10-22T20:58:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337746958",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337746958"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337746958"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337746958/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 158,
    "side": "RIGHT",
    "in_reply_to_id": 337702226
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337775930",
    "pull_request_review_id": 305541239,
    "id": 337775930,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzc3NTkzMA==",
    "diff_hunk": "@@ -155,12 +155,10 @@ static inline void LogPrintf(const char* fmt, const Args&... args)\n     }\n }\n \n-template <typename... Args>\n-static inline void LogPrint(const BCLog::LogFlags& category, const Args&... args)\n-{\n-    if (LogAcceptCategory((category))) {\n-        LogPrintf(args...);\n-    }\n-}\n+#define LogPrint(category, ...) do { \\",
    "path": "src/logging.h",
    "position": null,
    "original_position": 11,
    "commit_id": "8734c856f85cb506fa97596383dd7e7b9edd7e03",
    "original_commit_id": "93e8f7a833a03a0add51612d1fcac557af51359c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> My feeling is that providing two ways to log where one is subtly different than the other adds unnecessary cognitive load to readers and reviewers. Will address Jeremey's comment in a follow-up.\r\n\r\nIf the concern is cognitive load, I'd think the current:\r\n\r\n- `LogPrintf` - log unconditionally\r\n- `LogPrint` - log for category\r\n\r\nis more confusing than what I'm proposing:\r\n\r\n- `LogPrintf` - log unconditionally\r\n- `LOG_CATEGORY` - log for category with macro magic\r\n\r\nBut if it would take a long time to deprecate `LogPrint` (not sure why it would), then I agree inconsistency would not look nice in the interim.\r\n\r\nI don't feel strongly any way about this, so please ignore this suggestion if doesn't suit you.",
    "created_at": "2019-10-22T22:19:05Z",
    "updated_at": "2019-10-22T22:20:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337775930",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337775930"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337775930"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337775930/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 158,
    "side": "RIGHT",
    "in_reply_to_id": 337702226
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337779900",
    "pull_request_review_id": 305546338,
    "id": 337779900,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzc3OTkwMA==",
    "diff_hunk": "@@ -155,12 +155,10 @@ static inline void LogPrintf(const char* fmt, const Args&... args)\n     }\n }\n \n-template <typename... Args>\n-static inline void LogPrint(const BCLog::LogFlags& category, const Args&... args)\n-{\n-    if (LogAcceptCategory((category))) {\n-        LogPrintf(args...);\n-    }\n-}\n+#define LogPrint(category, ...) do { \\",
    "path": "src/logging.h",
    "position": null,
    "original_position": 11,
    "commit_id": "8734c856f85cb506fa97596383dd7e7b9edd7e03",
    "original_commit_id": "93e8f7a833a03a0add51612d1fcac557af51359c",
    "user": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah, I thought you were suggesting `LogPrint`, `LogPrintf`, and `LOG_CATEGORY`.\r\n\r\nI'm not completely opposed to changing call sites to `LOG_CATEGORY` (and checking for side effects in the process). But I would like to be sure such a change would be welcome before putting in the work. :)",
    "created_at": "2019-10-22T22:34:02Z",
    "updated_at": "2019-10-22T22:34:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337779900",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337779900"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337779900"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337779900/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 158,
    "side": "RIGHT",
    "in_reply_to_id": 337702226
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337957363",
    "pull_request_review_id": 305771888,
    "id": 337957363,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzk1NzM2Mw==",
    "diff_hunk": "@@ -155,12 +155,10 @@ static inline void LogPrintf(const char* fmt, const Args&... args)\n     }\n }\n \n-template <typename... Args>\n-static inline void LogPrint(const BCLog::LogFlags& category, const Args&... args)\n-{\n-    if (LogAcceptCategory((category))) {\n-        LogPrintf(args...);\n-    }\n-}\n+#define LogPrint(category, ...) do { \\",
    "path": "src/logging.h",
    "position": null,
    "original_position": 11,
    "commit_id": "8734c856f85cb506fa97596383dd7e7b9edd7e03",
    "original_commit_id": "93e8f7a833a03a0add51612d1fcac557af51359c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> I would like to be sure such a change would be welcome before putting in the work. :)\r\n\r\nTo be clear, suggestion is _not_ to do more work. My suggestion is:\r\n\r\n1. Add your new macro with a name like `LOG_CATEGORY`, to be clear that it is a macro and not something that evaluated like a normal function.\r\n2. Leave `LogPrint` alone, mark it deprecated and add a note like \"LOG_CATEGORY is preferred over LogPrint in new code as a more performant alternative\"\r\n\r\nSeparately after that, I do not think it would take a lot of work to replace instances of `LogPrint` and remove it. We could start with a simple [scripted-diff](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#scripted-diffs) to replace simple variable references that obviously don't have side effects.\r\n\r\n```sh\r\ngit grep -l LogPrint | xargs sed -i 's/LogPrint\\((BCLog::[A-Z]\\+, \"[^\"]\\+\"\\(, [A-Za-z_]\\+\\)*)\\)/LOG_CATEGORY\\1/g'\r\n```\r\n\r\nAs for organizing these changes, I might consider closing this PR, and instead adding the new macro directly where you intend to use it in #16688.",
    "created_at": "2019-10-23T10:01:33Z",
    "updated_at": "2019-10-23T10:01:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337957363",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337957363"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337957363"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337957363/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 158,
    "side": "RIGHT",
    "in_reply_to_id": 337702226
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338171908",
    "pull_request_review_id": 306051754,
    "id": 338171908,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE3MTkwOA==",
    "diff_hunk": "@@ -155,12 +155,10 @@ static inline void LogPrintf(const char* fmt, const Args&... args)\n     }\n }\n \n-template <typename... Args>\n-static inline void LogPrint(const BCLog::LogFlags& category, const Args&... args)\n-{\n-    if (LogAcceptCategory((category))) {\n-        LogPrintf(args...);\n-    }\n-}\n+#define LogPrint(category, ...) do { \\",
    "path": "src/logging.h",
    "position": null,
    "original_position": 11,
    "commit_id": "8734c856f85cb506fa97596383dd7e7b9edd7e03",
    "original_commit_id": "93e8f7a833a03a0add51612d1fcac557af51359c",
    "user": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Understood. I would be fine with that assuming there is agreement that `LogPrint` should be deprecated in favor of the `LOG_CATEGORY` macro.",
    "created_at": "2019-10-23T17:10:17Z",
    "updated_at": "2019-10-23T17:10:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r338171908",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338171908"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17218#discussion_r338171908"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17218"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338171908/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 158,
    "side": "RIGHT",
    "in_reply_to_id": 337702226
  }
]