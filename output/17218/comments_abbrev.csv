JeremyRubin,2019-10-22 18:55:58,"Is it known to be true that every call to LogPrint has no expressions with\nside effects?\n\nOn Tue, Oct 22, 2019, 11:28 AM Jeffrey Czyz <notifications@github.com>\nwrote:\n\n> Calling LogPrint with a category that is not enabled results in\n> evaluating the remaining function arguments, which may be arbitrarily\n> complex (and possibly expensive) expressions. Defining LogPrint as a\n> macro preve",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545104442,545104442,
practicalswift,2019-10-22 20:08:15,"Is this a pure optimisation PR, or can we think of reasons beyond that?\n\nDo we have any examples of slow `LogPrint(…)` calls where this would make a significant difference?\n\nCan we benchmark this in any way?\n",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545131818,545131818,
JeremyRubin,2019-10-22 21:01:46,"I've thought about it a bit and I think for the reason I gave above I'd\nwant to NACK this change.\n\nIf there are motivating examples for not evaluating the calls, they should\nbe fixed one by one.\n\nIt would also seem like perfect forwarding and inline can help with some of\nthese concerns too to nudge the compiler to defer constructing strings or\nwhatever.\n\nOn Tue, Oct 22, 2019, 1:47 PM Jef",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545153543,545153543,
jkczyz,2019-10-22 22:00:29,"> Is it known to be true that every call to LogPrint has no expressions with side effects?\n\nI grepped over call sites to check if anything suspicious stood out, but I did not thoroughly check if each expression was free of side effects.\n\nNote that this PR simply reverts the unintended behavioral change of #14209. Any side effects would have been introduced by that PR or subsequent changes.",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545174764,545174764,
jkczyz,2019-10-22 22:19:02,"> Is this a pure optimisation PR, or can we think of reasons beyond that?\n> \n> Do we have any examples of slow `LogPrint(…)` calls where this would make a significant difference?\n> \n> Can we benchmark this in any way?\n\nI see it more as restoring the previous behavior of only paying for the logging that you want. Thus, anyone is free to add very verbose logging to their module without o",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545180347,545180347,
JeremyRubin,2019-10-22 22:48:31,"Ah didn't catch that it's reverting behavior.\n\nI think that given that it's a revert it's more ok.\n\nIt's tricky to tell by glance if there are no side effects because of\natomics autoderef loading and stuff, which is why I felt it deserves\ncareful consideration.\n\nI don't care to bikeshed too much, but I think that making it IF_CAT(cat,\nexpr) would be semantic in terms of implying the argum",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545188419,545188419,
practicalswift,2019-10-23 06:08:22,"> I see it more as restoring the previous behavior of only paying for the logging that you want. Thus, anyone is free to add very verbose logging to their module without others incurring a cost when logging for that category isn't enabled.\n\nIn other types of software that is universally a good idea, but it could be argued that in Bitcoin Core we want to make sure that execution of consensus cr",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545283628,545283628,
laanwj,2019-10-23 08:35:04,"~~Concept NACK, this used to be a macro in the past. We changed it to a function for argument hygiene as is common in modern C++.~~\n\n~~If you really need to log in performance-critical contexts, then you could do a special thing there, but I'm very much against changing the general log system for this.~~\n\nNever mind, I was confused here. It still uses an internal function for that. The who",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545333791,545333791,
ryanofsky,2019-10-23 10:05:57,"> I think the assumption in #14209 was that an inline was just as good as a macro in this regard. Have you benchmarked this?\n\nPracticalswift asked the same question yesterday and this hasn't been benchmarked yet. It might be the case that performance is roughly equivalent, but if by ""just as good"" you mean actually equivalent, it's probably not a good assumption that compilers are going to be ",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545369956,545369956,
jkczyz,2019-10-23 17:00:54,"> > I see it more as restoring the previous behavior of only paying for the logging that you want. Thus, anyone is free to add very verbose logging to their module without others incurring a cost when logging for that category isn't enabled.\n> \n> In other types of software that is universally a good idea, but it could be argued that in Bitcoin Core we want to make sure that execution of consen",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545540333,545540333,
jkczyz,2019-10-23 17:06:45,"> > I think the assumption in #14209 was that an inline was just as good as a macro in this regard. Have you benchmarked this?\n> \n> Practicalswift asked the same question yesterday and this hasn't been benchmarked yet. It might be the case that performance is roughly equivalent, but if by ""just as good"" you mean actually equivalent, it's probably not a good assumption that compilers are going ",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545542648,545542648,
JeremyRubin,2019-10-23 17:45:20,">t's probably not a good assumption that compilers are going to be able to deduce that calls like pindex->GetBlockHash().GetHex() have no side-effects and inline them out.\n\nMaybe we should look at the gnu::pure attribute (which have pretty wide support in gcc/clang/llvm and others, except MSVC) and noexcept, which would allow the compiler to better optimize such functions if this is an issue h",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-545558546,545558546,
gmaxwell,2019-10-29 21:49:55,"So, uh, no real direct input but at one point while reworking the logging for categories I changed the handling around and benchmarking as a function vs macro vs a few other things and found measurably slower validation (in particular early chain IBD which is already pretty fast), it was also easy to see it doing string parsing in the disassembly.\n\nThere is another option beyond making this a ",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-547645300,547645300,
laanwj,2019-10-30 16:07:35,"I think it's fine to do this. I strongly doubt there is any logging (especially categorized debug logging) with important side-effects. Not too long ago this was a macro. At least I've always treated it as one.\n\nIf @marcofalke's concerns in #14209 no longer hold, ACK.",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-547983806,547983806,
jamesob,2019-10-30 16:49:59,"Concept ACK. I think it's safer if this lives as a macro for the reasons described in the original post, and this especially shouldn't be controversial since (as others have noted) this was up until fairly recently a macro.",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548004387,548004387,
MarcoFalke,2019-10-30 17:22:35,"My motivation for #14209  was to get code coverage test run, which was impossible prior to my fix. I don't care whether it is a function or macro.\n\nSomeone should do a benchmark, though if the rationale for this change is ""speed up"".",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548020087,548020087,
laanwj,2019-10-30 18:22:23,"> Someone should do a benchmark, though if the rationale for this change is ""speed up"".\n\nFrom what I understand  it's not a benchmark issue but a conceptual one. Macros don't have the guarantee to evaluate their arguments, but functions (even inline functions) do. Given arguments that are expensive to compute (e.g. string formatting, allocation, conversions), that's will always make a differen",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548048802,548048802,
MarcoFalke,2019-10-31 19:04:05,"Our bench runner has a full testing setup, so in theory `LogPrint*` could be microbenched",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548523902,548523902,
jnewbery,2019-10-31 21:20:08,"ACK 8734c856f85cb506fa97596383dd7e7b9edd7e03\n\n> My motivation for #14209 was to get code coverage test run, which was impossible prior to my fix. I don't care whether it is a function or macro.\n\nWhether it is a function or macro seems completely orthogonal to this. The simple fix in #14209 would have just been to remove the ifdef preprocessor directive added here: https://github.com/bitcoi",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548573442,548573442,
jkczyz,2019-10-31 22:56:09,"> Our bench runner has a full testing setup, so in theory `LogPrint*` could be microbenched\n\nI ran the following benchmark configured with --enable-debug:\n\n```c++\n#include <bench/bench.h>\n#include <logging.h>\n#include <validation.h>\n\nstatic void BenchmarkLogPrint(benchmark::State& state)\n{\n    LOCK(cs_main);\n    CBlockIndex* tip = ::ChainActive().Tip();\n    assert(tip != ",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548601061,548601061,
jkczyz,2019-11-01 06:02:13,"> The renaming `LogPrintf` -> `LOG_CATEGORY` suggested here [#17218 (comment)](https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337957363) seems like a good follow-up.\n> \n> Here are all the `LogPrintf` changes since #14209 was merged:\n> \n\nI believe we want `LogPrint` here as `LogPrintf` is the unconditional one.\n\n",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548677025,548677025,
MarcoFalke,2019-11-01 13:07:10,re-run ci,https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548781220,548781220,
jnewbery,2019-11-01 13:44:49,"> I believe we want LogPrint here as LogPrintf is the unconditional one.\n\nOops. You're right. Same exercise for LogPrint:\n\n```\n+        LogPrint(BCLog::NET, ""peer=%d: %s\n"", nodeid, message);  // no side-effects\n+        LogPrint(BCLog::NET, ""CHECKSUM ERROR (%s, %u bytes), expected %s was %s\n"",  // no side-effects (SanitizeString() and HexString() args are const)\n+            LogPri",https://github.com/bitcoin/bitcoin/pull/17218#issuecomment-548792608,548792608,
ryanofsky,2019-10-22 19:16:14,"Just a suggestion, but it might be good to leave existing LogPrint function alone, and instead just add a new `LOG_CATEGORY(category, format, ...)` macro. This would avoid issue the Jeremy raised about side effects in existing code, and also be nicer in my opinion because uppercase naming would be more consistent with other macros.",https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337702226,337702226,src/logging.h
MarcoFalke,2019-10-22 19:23:26,"I'd prefer to see a developer comment to explain why this is a macro (not a function like `LogPrintf` just a few lines up).\n\noptional: You may install `clang-format` and run the https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy script to align the newline continuation chars `\`.",https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337705213,337705213,src/logging.h
jkczyz,2019-10-22 20:47:08,Done in 8734c85.,https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337741803,337741803,src/logging.h
jkczyz,2019-10-22 20:58:23,My feeling is that providing two ways to log where one is subtly different than the other adds unnecessary cognitive load to readers and reviewers. Will address Jeremey's comment in a follow-up.,https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337746958,337746958,src/logging.h
ryanofsky,2019-10-22 22:19:05,"> My feeling is that providing two ways to log where one is subtly different than the other adds unnecessary cognitive load to readers and reviewers. Will address Jeremey's comment in a follow-up.\n\nIf the concern is cognitive load, I'd think the current:\n\n- `LogPrintf` - log unconditionally\n- `LogPrint` - log for category\n\nis more confusing than what I'm proposing:\n\n- `LogPrintf`",https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337775930,337775930,src/logging.h
jkczyz,2019-10-22 22:34:02,"Ah, I thought you were suggesting `LogPrint`, `LogPrintf`, and `LOG_CATEGORY`.\n\nI'm not completely opposed to changing call sites to `LOG_CATEGORY` (and checking for side effects in the process). But I would like to be sure such a change would be welcome before putting in the work. :)",https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337779900,337779900,src/logging.h
ryanofsky,2019-10-23 10:01:33,"> I would like to be sure such a change would be welcome before putting in the work. :)\n\nTo be clear, suggestion is _not_ to do more work. My suggestion is:\n\n1. Add your new macro with a name like `LOG_CATEGORY`, to be clear that it is a macro and not something that evaluated like a normal function.\n2. Leave `LogPrint` alone, mark it deprecated and add a note like ""LOG_CATEGORY is prefer",https://github.com/bitcoin/bitcoin/pull/17218#discussion_r337957363,337957363,src/logging.h
jkczyz,2019-10-23 17:10:17,Understood. I would be fine with that assuming there is agreement that `LogPrint` should be deprecated in favor of the `LOG_CATEGORY` macro.,https://github.com/bitcoin/bitcoin/pull/17218#discussion_r338171908,338171908,src/logging.h
