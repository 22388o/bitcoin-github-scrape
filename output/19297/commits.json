[
  {
    "sha": "d33934120ea5f91421bc4aa71187e954c580e988",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzM5MzQxMjBlYTVmOTE0MjFiYzRhYTcxMTg3ZTk1NGM1ODBlOTg4",
    "commit": {
      "author": {
        "name": "glowang",
        "email": "wanggloria21@gmail.com",
        "date": "2020-06-13T23:10:08Z"
      },
      "committer": {
        "name": "glowang",
        "email": "wanggloria21@gmail.com",
        "date": "2020-07-25T18:58:19Z"
      },
      "message": "WIP rough outline for rewriting the generate function.\n\nTODO: investigate why created keypaths do not increase incrementally/consistently",
      "tree": {
        "sha": "6d85cef0695b8a09470272bdff7b64ef2db3c3e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d85cef0695b8a09470272bdff7b64ef2db3c3e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d33934120ea5f91421bc4aa71187e954c580e988",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d33934120ea5f91421bc4aa71187e954c580e988",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d33934120ea5f91421bc4aa71187e954c580e988",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d33934120ea5f91421bc4aa71187e954c580e988/comments",
    "author": {
      "login": "glowang",
      "id": 38899812,
      "node_id": "MDQ6VXNlcjM4ODk5ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/38899812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glowang",
      "html_url": "https://github.com/glowang",
      "followers_url": "https://api.github.com/users/glowang/followers",
      "following_url": "https://api.github.com/users/glowang/following{/other_user}",
      "gists_url": "https://api.github.com/users/glowang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glowang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glowang/subscriptions",
      "organizations_url": "https://api.github.com/users/glowang/orgs",
      "repos_url": "https://api.github.com/users/glowang/repos",
      "events_url": "https://api.github.com/users/glowang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glowang/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glowang",
      "id": 38899812,
      "node_id": "MDQ6VXNlcjM4ODk5ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/38899812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glowang",
      "html_url": "https://github.com/glowang",
      "followers_url": "https://api.github.com/users/glowang/followers",
      "following_url": "https://api.github.com/users/glowang/following{/other_user}",
      "gists_url": "https://api.github.com/users/glowang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glowang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glowang/subscriptions",
      "organizations_url": "https://api.github.com/users/glowang/orgs",
      "repos_url": "https://api.github.com/users/glowang/repos",
      "events_url": "https://api.github.com/users/glowang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glowang/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40a04814d130dfc9131af3f568eb44533e2bcbfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40a04814d130dfc9131af3f568eb44533e2bcbfc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40a04814d130dfc9131af3f568eb44533e2bcbfc"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "81f005f067bab4c0ecfaa88075cf44076132e1e6",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d33934120ea5f91421bc4aa71187e954c580e988/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d33934120ea5f91421bc4aa71187e954c580e988/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=d33934120ea5f91421bc4aa71187e954c580e988",
        "patch": "@@ -27,6 +27,7 @@\n from .util import (\n     MAX_NODES,\n     append_config,\n+    assert_equal,\n     delete_cookie_file,\n     get_auth_cookie,\n     get_rpc_proxy,\n@@ -130,6 +131,7 @@ def __init__(self, i, datadir, *, chain, rpchost, timewait, timeout_factor, bitc\n \n         self.p2ps = []\n         self.timeout_factor = timeout_factor\n+        self.hdkeypathnonce =0\n \n     AddressKeyPair = collections.namedtuple('AddressKeyPair', ['address', 'key'])\n     PRIV_KEYS = [\n@@ -294,8 +296,18 @@ def wait_for_cookie_credentials(self):\n         self._raise_assertion_error(\"Unable to retrieve cookie credentials after {}s\".format(self.rpc_timeout))\n \n     def generate(self, nblocks, maxtries=1000000):\n-        self.log.debug(\"TestNode.generate() dispatches `generate` call to `generatetoaddress`\")\n-        return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries)\n+        # if wallet is not compiled, blocks are generated to an address or descriptor using an HD seed\n+        hd_address = self.getnewaddress()\n+        hd_info = self.getaddressinfo(hd_address)\n+        if self.getwalletinfo()[\"descriptors\"]:\n+            #TODO: figure out how to make sure the keypath does increase & is unique\n+            assert_equal(hd_info[\"hdkeypath\"], \"m/84'/1'/0'/0/\" + str(self.hdkeypathnonce))\n+            self.hdkeypathnonce += 1 \n+            self.generatetodescriptor(nblocks, hd_address, maxtries)\n+        else:\n+            assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(self.hdkeypathnonce)+\"'\")          \n+            self.hdkeypathnonce += 1\n+            self.generatetoaddress(nblocks, hd_address, maxtries)\n \n     def get_wallet_rpc(self, wallet_name):\n         if self.use_cli:"
      }
    ]
  },
  {
    "sha": "41ce9805ebf1141fcf06b4cbd936fad6548082ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWNlOTgwNWViZjExNDFmY2YwNmI0Y2JkOTM2ZmFkNjU0ODA4MmFj",
    "commit": {
      "author": {
        "name": "glowang",
        "email": "wanggloria21@gmail.com",
        "date": "2020-06-20T21:36:51Z"
      },
      "committer": {
        "name": "glowang",
        "email": "wanggloria21@gmail.com",
        "date": "2020-07-25T18:58:20Z"
      },
      "message": "WIP",
      "tree": {
        "sha": "73705233a138faca68f8b13a0cbe861b7736ae90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73705233a138faca68f8b13a0cbe861b7736ae90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41ce9805ebf1141fcf06b4cbd936fad6548082ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41ce9805ebf1141fcf06b4cbd936fad6548082ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41ce9805ebf1141fcf06b4cbd936fad6548082ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41ce9805ebf1141fcf06b4cbd936fad6548082ac/comments",
    "author": {
      "login": "glowang",
      "id": 38899812,
      "node_id": "MDQ6VXNlcjM4ODk5ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/38899812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glowang",
      "html_url": "https://github.com/glowang",
      "followers_url": "https://api.github.com/users/glowang/followers",
      "following_url": "https://api.github.com/users/glowang/following{/other_user}",
      "gists_url": "https://api.github.com/users/glowang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glowang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glowang/subscriptions",
      "organizations_url": "https://api.github.com/users/glowang/orgs",
      "repos_url": "https://api.github.com/users/glowang/repos",
      "events_url": "https://api.github.com/users/glowang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glowang/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glowang",
      "id": 38899812,
      "node_id": "MDQ6VXNlcjM4ODk5ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/38899812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glowang",
      "html_url": "https://github.com/glowang",
      "followers_url": "https://api.github.com/users/glowang/followers",
      "following_url": "https://api.github.com/users/glowang/following{/other_user}",
      "gists_url": "https://api.github.com/users/glowang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glowang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glowang/subscriptions",
      "organizations_url": "https://api.github.com/users/glowang/orgs",
      "repos_url": "https://api.github.com/users/glowang/repos",
      "events_url": "https://api.github.com/users/glowang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glowang/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d33934120ea5f91421bc4aa71187e954c580e988",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d33934120ea5f91421bc4aa71187e954c580e988",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d33934120ea5f91421bc4aa71187e954c580e988"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 10,
      "deletions": 11
    },
    "files": [
      {
        "sha": "bc43d56f56d6ca485b026065e613e0de356b841c",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41ce9805ebf1141fcf06b4cbd936fad6548082ac/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41ce9805ebf1141fcf06b4cbd936fad6548082ac/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=41ce9805ebf1141fcf06b4cbd936fad6548082ac",
        "patch": "@@ -297,18 +297,17 @@ def wait_for_cookie_credentials(self):\n \n     def generate(self, nblocks, maxtries=1000000):\n         # if wallet is not compiled, blocks are generated to an address or descriptor using an HD seed\n-        hd_address = self.getnewaddress()\n-        hd_info = self.getaddressinfo(hd_address)\n-        if self.getwalletinfo()[\"descriptors\"]:\n-            #TODO: figure out how to make sure the keypath does increase & is unique\n-            assert_equal(hd_info[\"hdkeypath\"], \"m/84'/1'/0'/0/\" + str(self.hdkeypathnonce))\n-            self.hdkeypathnonce += 1 \n-            self.generatetodescriptor(nblocks, hd_address, maxtries)\n-        else:\n-            assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(self.hdkeypathnonce)+\"'\")          \n+        if '-disablewallet' in self.extra_args:\n+            xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n+            finger_print = \"d34db33f\"\n+            keypath = \"/44'/0'/0'/0/\" + str(self.hdkeypathnonce)\n+            desc = \"pkh([\" + finger_print + keypath + \"]\" + xpub+ \"/1)\" \n             self.hdkeypathnonce += 1\n-            self.generatetoaddress(nblocks, hd_address, maxtries)\n-\n+            return self.generatetodescriptor(nblocks, desc, maxtries)\n+        else:\n+            hd_address = self.getnewaddress()\n+            return self.generatetoaddress(nblocks, hd_address, maxtries)\n+          \n     def get_wallet_rpc(self, wallet_name):\n         if self.use_cli:\n             return RPCOverloadWrapper(self.cli(\"-rpcwallet={}\".format(wallet_name)), True, self.descriptors)"
      }
    ]
  },
  {
    "sha": "671ae41c4301d098cc468c1d9910799fb1df4feb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzFhZTQxYzQzMDFkMDk4Y2M0NjhjMWQ5OTEwNzk5ZmIxZGY0ZmVi",
    "commit": {
      "author": {
        "name": "glowang",
        "email": "wanggloria21@gmail.com",
        "date": "2020-08-17T23:07:43Z"
      },
      "committer": {
        "name": "glowang",
        "email": "wanggloria21@gmail.com",
        "date": "2020-08-17T23:10:40Z"
      },
      "message": "Preset HD seed for testnode if wallet is compiled",
      "tree": {
        "sha": "034e137573de89bbe239344e56849cde8376ff67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/034e137573de89bbe239344e56849cde8376ff67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/671ae41c4301d098cc468c1d9910799fb1df4feb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/671ae41c4301d098cc468c1d9910799fb1df4feb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/671ae41c4301d098cc468c1d9910799fb1df4feb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/671ae41c4301d098cc468c1d9910799fb1df4feb/comments",
    "author": {
      "login": "glowang",
      "id": 38899812,
      "node_id": "MDQ6VXNlcjM4ODk5ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/38899812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glowang",
      "html_url": "https://github.com/glowang",
      "followers_url": "https://api.github.com/users/glowang/followers",
      "following_url": "https://api.github.com/users/glowang/following{/other_user}",
      "gists_url": "https://api.github.com/users/glowang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glowang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glowang/subscriptions",
      "organizations_url": "https://api.github.com/users/glowang/orgs",
      "repos_url": "https://api.github.com/users/glowang/repos",
      "events_url": "https://api.github.com/users/glowang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glowang/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glowang",
      "id": 38899812,
      "node_id": "MDQ6VXNlcjM4ODk5ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/38899812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glowang",
      "html_url": "https://github.com/glowang",
      "followers_url": "https://api.github.com/users/glowang/followers",
      "following_url": "https://api.github.com/users/glowang/following{/other_user}",
      "gists_url": "https://api.github.com/users/glowang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glowang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glowang/subscriptions",
      "organizations_url": "https://api.github.com/users/glowang/orgs",
      "repos_url": "https://api.github.com/users/glowang/repos",
      "events_url": "https://api.github.com/users/glowang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glowang/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41ce9805ebf1141fcf06b4cbd936fad6548082ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41ce9805ebf1141fcf06b4cbd936fad6548082ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41ce9805ebf1141fcf06b4cbd936fad6548082ac"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4aee28a21291e9c4bca3d23a3bc5ec0a385bfff6",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/671ae41c4301d098cc468c1d9910799fb1df4feb/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/671ae41c4301d098cc468c1d9910799fb1df4feb/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=671ae41c4301d098cc468c1d9910799fb1df4feb",
        "patch": "@@ -379,6 +379,7 @@ def setup_nodes(self):\n                 wallet_name = w.split('=', 1)[1]\n                 n.createwallet(wallet_name=wallet_name, descriptors=self.options.descriptors)\n         self.import_deterministic_coinbase_privkeys()\n+        self.import_hd_seed()\n         if not self.setup_clean_chain:\n             for n in self.nodes:\n                 assert_equal(n.getblockchaininfo()[\"blocks\"], 199)\n@@ -403,6 +404,16 @@ def import_deterministic_coinbase_privkeys(self):\n \n             n.importprivkey(privkey=n.get_deterministic_priv_key().key, label='coinbase')\n \n+    # Preset an HD seed for nodes, if the nodes have wallet compiled\n+    def import_hd_seed(self):\n+        for n in self.nodes:\n+            try:\n+                n.getwalletinfo()\n+            except JSONRPCException as e:\n+                assert str(e).startswith('Method not found')\n+                continue\n+            n.sethdseed()\n+\n     def run_test(self):\n         \"\"\"Tests must override this method to define test logic\"\"\"\n         raise NotImplementedError"
      }
    ]
  },
  {
    "sha": "de1d6c83cf2ddb44cf91dace2d476574ebf7e2b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTFkNmM4M2NmMmRkYjQ0Y2Y5MWRhY2UyZDQ3NjU3NGViZjdlMmI1",
    "commit": {
      "author": {
        "name": "glowang",
        "email": "wanggloria21@gmail.com",
        "date": "2020-08-17T23:44:57Z"
      },
      "committer": {
        "name": "glowang",
        "email": "wanggloria21@gmail.com",
        "date": "2020-08-17T23:44:57Z"
      },
      "message": "WIP",
      "tree": {
        "sha": "b42c2084d9528fe86bbb8296861c6260fc51e358",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b42c2084d9528fe86bbb8296861c6260fc51e358"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de1d6c83cf2ddb44cf91dace2d476574ebf7e2b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de1d6c83cf2ddb44cf91dace2d476574ebf7e2b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de1d6c83cf2ddb44cf91dace2d476574ebf7e2b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de1d6c83cf2ddb44cf91dace2d476574ebf7e2b5/comments",
    "author": {
      "login": "glowang",
      "id": 38899812,
      "node_id": "MDQ6VXNlcjM4ODk5ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/38899812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glowang",
      "html_url": "https://github.com/glowang",
      "followers_url": "https://api.github.com/users/glowang/followers",
      "following_url": "https://api.github.com/users/glowang/following{/other_user}",
      "gists_url": "https://api.github.com/users/glowang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glowang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glowang/subscriptions",
      "organizations_url": "https://api.github.com/users/glowang/orgs",
      "repos_url": "https://api.github.com/users/glowang/repos",
      "events_url": "https://api.github.com/users/glowang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glowang/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glowang",
      "id": 38899812,
      "node_id": "MDQ6VXNlcjM4ODk5ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/38899812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glowang",
      "html_url": "https://github.com/glowang",
      "followers_url": "https://api.github.com/users/glowang/followers",
      "following_url": "https://api.github.com/users/glowang/following{/other_user}",
      "gists_url": "https://api.github.com/users/glowang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glowang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glowang/subscriptions",
      "organizations_url": "https://api.github.com/users/glowang/orgs",
      "repos_url": "https://api.github.com/users/glowang/repos",
      "events_url": "https://api.github.com/users/glowang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glowang/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "671ae41c4301d098cc468c1d9910799fb1df4feb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/671ae41c4301d098cc468c1d9910799fb1df4feb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/671ae41c4301d098cc468c1d9910799fb1df4feb"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 34,
      "deletions": 13
    },
    "files": [
      {
        "sha": "9769da07286466d5ba634999928e3439635a2bc3",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 34,
        "deletions": 13,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de1d6c83cf2ddb44cf91dace2d476574ebf7e2b5/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de1d6c83cf2ddb44cf91dace2d476574ebf7e2b5/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=de1d6c83cf2ddb44cf91dace2d476574ebf7e2b5",
        "patch": "@@ -134,7 +134,7 @@ def __init__(self, i, datadir, *, chain, rpchost, timewait, timeout_factor, bitc\n         self.hdkeypathnonce =0\n \n     AddressKeyPair = collections.namedtuple('AddressKeyPair', ['address', 'key'])\n-    PRIV_KEYS = [\n+    PRIV_KEYS = [ #seed and xpub, regtest node, call sethdseed, make upseed using random strings => \n             # address , privkey\n             AddressKeyPair('mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z', 'cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW'),\n             AddressKeyPair('msX6jQXvxiNhx3Q62PKeLPrhrqZQdSimTg', 'cUxsWyKyZ9MAQTaAhUQWJmBbSvHMwSmuv59KgxQV7oZQU3PXN3KE'),\n@@ -149,12 +149,24 @@ def __init__(self, i, datadir, *, chain, rpchost, timewait, timeout_factor, bitc\n             AddressKeyPair('mpFAHDjX7KregM3rVotdXzQmkbwtbQEnZ6', 'cT7qK7g1wkYEMvKowd2ZrX1E5f6JQ7TM246UfqbCiyF7kZhorpX3'),\n             AddressKeyPair('mzRe8QZMfGi58KyWCse2exxEFry2sfF2Y7', 'cPiRWE8KMjTRxH1MWkPerhfoHFn5iHPWVK5aPqjW8NxmdwenFinJ'),\n     ]\n-\n+    SeedXpubPair = collections.namedtuple('SeedXPubPair', ['seed', 'xpub'])\n+    XPUBS = [\n+        # how to go from hdseed to xpub, by calling getnewaddress?\n+        # run cli?\n+        # can you make up your ownhd seed\n+        # if not, how to pregenerate key\n+        # maybe checkout DeriveNewSeed\n+    ]\n     def get_deterministic_priv_key(self):\n         \"\"\"Return a deterministic priv key in base58, that only depends on the node's index\"\"\"\n         assert len(self.PRIV_KEYS) == MAX_NODES\n         return self.PRIV_KEYS[self.index]\n \n+    def get_deterministic_hd_seed(self):\n+        \"\"\"Return a deterministic hd seed, that only depends on the node's index\"\"\"\n+        assert len(self.PRIV_KEYS) == MAX_NODES\n+        return self.PRIV_KEYS[self.index]\n+\n     def _node_msg(self, msg: str) -> str:\n         \"\"\"Return a modified msg that identifies this node by its index as a debugging aid.\"\"\"\n         return \"[node %d] %s\" % (self.index, msg)\n@@ -296,17 +308,26 @@ def wait_for_cookie_credentials(self):\n         self._raise_assertion_error(\"Unable to retrieve cookie credentials after {}s\".format(self.rpc_timeout))\n \n     def generate(self, nblocks, maxtries=1000000):\n-        # if wallet is not compiled, blocks are generated to an address or descriptor using an HD seed\n-        if '-disablewallet' in self.extra_args:\n-            xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n-            finger_print = \"d34db33f\"\n-            keypath = \"/44'/0'/0'/0/\" + str(self.hdkeypathnonce)\n-            desc = \"pkh([\" + finger_print + keypath + \"]\" + xpub+ \"/1)\" \n-            self.hdkeypathnonce += 1\n-            return self.generatetodescriptor(nblocks, desc, maxtries)\n-        else:\n-            hd_address = self.getnewaddress()\n-            return self.generatetoaddress(nblocks, hd_address, maxtries)\n+        # # if wallet is not compiled, blocks are generated to an address or descriptor using an HD seed\n+        # # the seeds and corresponding xpubs have been pregenerated\n+        # if '-disablewallet' in self.extra_args:\n+        #     print('############')\n+        #     xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n+        #     finger_print = \"d34db33f\"\n+        #     keypath = \"/44'/0'/0'/0/\" + str(self.hdkeypathnonce)\n+        #     desc = \"pkh([\" + finger_print + keypath + \"]\" + xpub+ \"/1)\" \n+        #     self.hdkeypathnonce += 1\n+        #     return self.generatetodescriptor(nblocks, desc, maxtries)\n+        # # if wallet has been compiled, the hd seed has been preset in the test_framework\n+        # else:\n+        #     print('*************')\n+        #     finger_print = self.hdinfo\n+        #     hd_address = self.getnewaddress()\n+        #     return self.generatetoaddress(nblocks, hd_address, maxtries)\n+        #     #wallet, hd seed = descriptor'\n+        self.log.debug(\"TestNode.generate() dispatches `generate` call to `generatetoaddress`\")\n+        return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries)\n+            \n           \n     def get_wallet_rpc(self, wallet_name):\n         if self.use_cli:"
      }
    ]
  }
]