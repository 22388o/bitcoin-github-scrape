MarcoFalke,2020-06-16 16:00:21,You may find the issue if you inspect the log generated by the `--tracerpc -l DEBUG` options,https://github.com/bitcoin/bitcoin/pull/19297#issuecomment-644856144,644856144,
glowang,2020-06-17 18:07:17,"> You may find the issue if you inspect the log generated by the `--tracerpc -l DEBUG` options\n\nThanks Marco, really helpful!",https://github.com/bitcoin/bitcoin/pull/19297#issuecomment-645534269,645534269,
DrahtBot,2020-08-20 22:39:40,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20034 (test: Get rid of default wallet hacks by ryanofsky)\n* #19168 (Refactor: Improve setup_clean_chain semantics by fj",https://github.com/bitcoin/bitcoin/pull/19297#issuecomment-677941932,677941932,
jnewbery,2020-06-16 17:36:03,"`getnewaddress` is a wallet RPC. If you want this to work when the wallet isn't compiled, you'll need to generate the HD keys in the python test framework.",https://github.com/bitcoin/bitcoin/pull/19297#discussion_r441025889,441025889,test/functional/test_framework/test_node.py
glowang,2020-06-17 15:18:34,"I added `hdkeypathnonce` here to make sure a new key path is used. But I realized that incrementing the counter variable like this won't work, because many test files would call `getnewaddress()` outside of `generate()`. These new keys generated out of band also belong to the family of our HD tree, but our counter variable will not be aware of this. \n(like feature_segwit.py). \n\nHence, althou",https://github.com/bitcoin/bitcoin/pull/19297#discussion_r441628005,441628005,test/functional/test_framework/test_node.py
glowang,2020-06-17 15:31:04,"Thanks John! Would you mind giving an example of where this is done currently? I looked around in the test_framework and just the functional test dir in general, but I couldn't find any example of generating hd keys without wallet. Or maybe this is a function that doesn't exist in the functional test dir yet and we can write it?",https://github.com/bitcoin/bitcoin/pull/19297#discussion_r441636962,441636962,test/functional/test_framework/test_node.py
MarcoFalke,2020-06-17 16:43:47,"The RPC has non-wallet descriptor RPCs: https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#support-for-output-descriptors-in-bitcoin-core\n\nIf I had to guess, you are probably looking for `deriveaddresses`",https://github.com/bitcoin/bitcoin/pull/19297#discussion_r441683031,441683031,test/functional/test_framework/test_node.py
jnewbery,2020-06-18 18:37:16,"I was thinking that the keys would be generated in the python test framework. I just assumed that we'd have some HD key generation code to test BIP32, but it appears I was wrong.\n\nMarco's suggestion to use the `deriveaddress` seems ok, but I don't think you even need to do that. I think you can just pass the descriptor with keypath in to `generatetodescriptor`",https://github.com/bitcoin/bitcoin/pull/19297#discussion_r442426297,442426297,test/functional/test_framework/test_node.py
glowang,2020-07-04 19:42:40,"Once I generate to a new address, many tests that check whether the wallet addr number matches up start failing. I think this is because the getnewaddress is messing up the address count for some tests. But at the same time, we also don't want to generate to deterministic addresses either... I'm not sure what direction I should take here...",https://github.com/bitcoin/bitcoin/pull/19297#discussion_r449800108,449800108,test/functional/test_framework/test_node.py
