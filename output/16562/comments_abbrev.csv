DrahtBot,2019-08-07 18:29:15,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/16562#issuecomment-519216431,519216431,
jonasschnelli,2019-08-08 07:09:59,"@promag: yes. You'r right. The insert/reallocation was stupid. Slighly changed the approach. It is now also avoiding the behavior change.\n\nAlso removed the unused return value (will eventually come back with the v2 implementation).",https://github.com/bitcoin/bitcoin/pull/16562#issuecomment-519396930,519396930,
dongcarl,2020-01-22 20:01:10,Rebased this PR for you as well: https://github.com/bitcoin/bitcoin/compare/master...dongcarl:2020-01-net_refactor_2-rebased,https://github.com/bitcoin/bitcoin/pull/16562#issuecomment-577360291,577360291,
jonasschnelli,2020-01-30 10:32:31,Thanks @dongcarl. Pushed your rebased version.,https://github.com/bitcoin/bitcoin/pull/16562#issuecomment-580189960,580189960,
dongcarl,2020-02-04 18:18:30,"ACK 16d6113f4faa901e248adb693d4768a9e5019a16 FWIW\n\n-----\nPossible followup:\n\nAdd properly formatted Doxygen comments (something like what's already in the abstract class) for, and/or rename `TransportSerializer::prepareForTransport` as the name can be misinterpreted as: ""do ***everything*** that we need to do before we send it to transport layer.""",https://github.com/bitcoin/bitcoin/pull/16562#issuecomment-582045415,582045415,
ariard,2020-02-25 01:34:43,"Code review ACK 16d6113\n\n> I'm not exactly sure which should be used here(they should be the same but maybe there's some DOS vector i'm missing)\n\n@elichai I don't think there is a risk of DoS here, `serializerHeader` as all `CMessageHeader` components have a fixed-length. Bandwidth-DoS is already left unbounded (see default of `-maxuploadtarget`)",https://github.com/bitcoin/bitcoin/pull/16562#issuecomment-590636105,590636105,
practicalswift,2020-02-27 18:29:05,"Any chance we can move forward with the `V1TransportSerializer` fuzzer in #17771 to get additional robustness testing of this code before proceeding with the `V1TransportSerializer` refactoring(s)?\n\nIt should hopefully be trivial to review :)",https://github.com/bitcoin/bitcoin/pull/16562#issuecomment-592108283,592108283,
jonasschnelli,2020-03-02 10:00:13,@practicalswift: are you working on fuzz testing the serializing part?,https://github.com/bitcoin/bitcoin/pull/16562#issuecomment-593320569,593320569,
dhruv,2021-05-24 14:20:20,"> @practicalswift: are you working on fuzz testing the serializing part?\n\n@jonasschnelli: I've attempt to extend the test to serialization in #22029. I've also discovered that the deserialization does not proceed 60-70% of the time due to a failed checksum test. Will try to address that and increase coverage in another commit this week.",https://github.com/bitcoin/bitcoin/pull/16562#issuecomment-847075641,847075641,
promag,2019-08-07 23:12:12,"Return value is currently ignored, either make it `void` or `assert(result)`?",https://github.com/bitcoin/bitcoin/pull/16562#discussion_r311799717,311799717,src/net.h
ariard,2019-08-14 22:32:12,Do you expect serializer to keep state between call and so need to clean it with a destructor? (or just a good practice),https://github.com/bitcoin/bitcoin/pull/16562#discussion_r314112055,314112055,src/net.h
ariard,2019-08-14 22:36:29,"This change would mean we initialize serializer at `ConnectNode`/`AcceptConnection`, if we make an outbound connection, thanks to `NODE_P2P_V2` we can be sure to have right serializer, but in case of inbound we may need to update it. Maybe comment this logic here?",https://github.com/bitcoin/bitcoin/pull/16562#discussion_r314113214,314113214,src/net.h
ariard,2019-08-14 22:43:46,"nit: Comments could be better for public interfaces, parent class could list the abstract operations a transport protocol may realize like header construction, error-correction computation, payload encryption and then for transport subclass would list the concrete sequence of operations implemented? ",https://github.com/bitcoin/bitcoin/pull/16562#discussion_r314115186,314115186,src/net.h
practicalswift,2019-08-15 08:03:25,Should be `override`?,https://github.com/bitcoin/bitcoin/pull/16562#discussion_r314209934,314209934,src/net.cpp
jonasschnelli,2019-08-15 13:21:17,"Thanks for the comment.\nYour concerns are valid but not part of this PR.\nFor a BIP324 (NODE_P2P_V2) inbound connection (also outbound) we always start with a V1 serializer/deserializer to perform the handshake. I think the handshake/a.k.a. protocol upgrade belongs to the V1 protocol.\n\nOnce the handshake has been completed, we exchange the node objects serializer/deserializer with a V2 inst",https://github.com/bitcoin/bitcoin/pull/16562#discussion_r314303709,314303709,src/net.h
jonasschnelli,2019-08-15 13:53:48,Slightly improved...,https://github.com/bitcoin/bitcoin/pull/16562#discussion_r314317248,314317248,src/net.h
jonasschnelli,2019-08-15 13:54:00,Thanks. Fixed.,https://github.com/bitcoin/bitcoin/pull/16562#discussion_r314317330,314317330,src/net.cpp
ariard,2019-08-15 14:34:58,"You mean the handshake belongs to the V1 protocol because we are using V1 messages to exchange 32-byte public keys between initiator/responder as defined in V2 BIP ? That makes sense and it's already implicit in the BIP, ""After a successful handshake, messages MUST use the ""v2 messages structure"", but maybe put a word about this at the beginning of handshake section, just to be really obvious.",https://github.com/bitcoin/bitcoin/pull/16562#discussion_r314336313,314336313,src/net.h
jonasschnelli,2019-08-15 15:13:35,"Since we keep the instances in an std::unique_ptr, we need to have a virtual destructor.",https://github.com/bitcoin/bitcoin/pull/16562#discussion_r314356997,314356997,src/net.h
MarcoFalke,2020-02-27 18:09:48,"Any reason this needs to call the copy(or move) constructor?\n```suggestion\n    m_serializer = MakeUnique<V1TransportSerializer>();\n```",https://github.com/bitcoin/bitcoin/pull/16562#discussion_r385281785,385281785,src/net.cpp
