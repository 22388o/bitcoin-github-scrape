practicalswift,2020-09-07 19:38:18,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19911#issuecomment-688486654,688486654,
narula,2020-09-07 22:46:48,The thread sanitizer is complaining about locking order; I'm looking into it.,https://github.com/bitcoin/bitcoin/pull/19911#issuecomment-688531736,688531736,
hebasto,2020-09-08 08:34:41,"@narula \n> The thread sanitizer is complaining about locking order; I'm looking into it.\n\nCould I suggest some code reorganization to keep locking order constant:\nhttps://github.com/hebasto/bitcoin/commits/pr19911-0908 ?",https://github.com/bitcoin/bitcoin/pull/19911#issuecomment-688712793,688712793,
narula,2020-09-14 13:54:40,"I've pushed a new series of commits which move `vRecvGetData` and `orphan_work_set` to `Peer` and then guard them appropriately. It's a bit more of a change, but happy to help move things over there if that's the end goal. \n\n> I do have some commits that move both `vRecvGetData` and `orphan_work_set` to the `Peer` struct in https://github.com/jnewbery/bitcoin/commits/2020-06-cs-main-split-need",https://github.com/bitcoin/bitcoin/pull/19911#issuecomment-692068452,692068452,
DrahtBot,2020-09-19 13:45:36,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20158 (tree-wide: De-globalize ChainstateManager by dongcarl)\n* #19910 (net processing: Move peer_map to PeerManager by ",https://github.com/bitcoin/bitcoin/pull/19911#issuecomment-695215436,695215436,
jnewbery,2020-09-30 14:30:22,Sorry - needs rebase :grimacing: ,https://github.com/bitcoin/bitcoin/pull/19911#issuecomment-701428765,701428765,
narula,2020-09-30 18:29:25,This is rebased and I think all comments have been addressed.,https://github.com/bitcoin/bitcoin/pull/19911#issuecomment-701565791,701565791,
narula,2020-10-14 14:11:32,"> In commit _Move m_orphan_work_set to net_processing_, you're not removing CNode::m_orphan_work_set.\n> \n> Other than that, looks good!\n\nGood catch, I lost that in the last rebase! Fixed.",https://github.com/bitcoin/bitcoin/pull/19911#issuecomment-708430130,708430130,
jnewbery,2020-10-14 14:35:41,Code review ACK da0988daf1d665a4644ad3f1ddf3f8a8bdd88cde,https://github.com/bitcoin/bitcoin/pull/19911#issuecomment-708445514,708445514,
jnewbery,2020-10-14 15:56:57,"> Mind making the first rename commit a scripted-diff as well?\n\nIt can't be, since `orphan_work_set` is currently used as the name for both a member variable and a local variable.",https://github.com/bitcoin/bitcoin/pull/19911#issuecomment-708497125,708497125,
hebasto,2020-10-14 15:59:23,"> > Mind making the first rename commit a scripted-diff as well?\n> \n> It can't be, since `orphan_work_set` is currently used as the name for both a member variable and a local variable.\n\nIndeed. Sorry.",https://github.com/bitcoin/bitcoin/pull/19911#issuecomment-708498683,708498683,
narula,2020-10-15 19:19:57,"I think all comments have been addressed except the remaining review comments which I can summarize to the following nits:\n\n1) change `if (peer == nullptr)` to `if (!peer)` in the places where I add a new `nullptr` check\n2) fix up an existing if without braces: https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504759682 in a line I touch\n\nI don't think these are important, and I ",https://github.com/bitcoin/bitcoin/pull/19911#issuecomment-709539465,709539465,
MarcoFalke,2020-10-17 16:17:49,"review ACK da0988daf1d665a4644ad3f1ddf3f8a8bdd88cde üê¨\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nreview ACK da0988daf1d665a4644ad3f1ddf3f8a8bdd88cde üê¨\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUh3Kwv/Z92YkezB0vKDt8zCSK2kekyViu2esvi5EQIv",https://github.com/bitcoin/bitcoin/pull/19911#issuecomment-711038096,711038096,
jnewbery,2020-09-07 19:54:50,"Consider using the `WITH_LOCK` macro for simple one-line statements:\n\n```suggestion\n            WITH_LOCK(pfrom.cs_vRecv, pfrom.vRecvGetData.push_back(inv));\n```",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r484555699,484555699,src/net_processing.cpp
jnewbery,2020-09-07 20:14:20,"style: consider adding braces to if blocks when touching code, to conform with the current style guide.",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r484558805,484558805,src/net_processing.cpp
narula,2020-09-07 21:15:47,done!,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r484568250,484568250,src/net_processing.cpp
narula,2020-09-07 21:16:00,done! did not do so to adjacent code i wasn't touching.,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r484568297,484568297,src/net_processing.cpp
hebasto,2020-09-08 07:28:11,"```suggestion\nstatic void ProcessGetData(CNode& pfrom, const CChainParams& chainparams, CConnman& connman, CTxMemPool& mempool, const std::atomic<bool>& interruptMsgProc)\n    EXCLUSIVE_LOCKS_REQUIRED(!cs_main, pfrom.cs_vRecv)\n```",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r484707451,484707451,src/net_processing.cpp
jnewbery,2020-09-08 08:19:36,"I don't think it's right to reuse this mutex to guard `vRecvGetData` (despite the name similarities). `cs_vRecv` was added in 321d0fc6b6624c65508f8b9059418cb936f0bbbe to guard `nRecvBytes` and `mapRecvBytesPerMsgCmd`, which are statistics used in the net layer. `vRecvGetData` is a data structure used in the application layer (and should eventually move to the `Peer` struct), so should be guarded b",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r484737211,484737211,src/net.h
jnewbery,2020-09-08 09:54:05,I don't think `cs_main` is required here.,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r484795962,484795962,src/net_processing.cpp
hebasto,2020-09-08 09:59:50,"> ... `vRecvGetData` is a data structure used in the application layer (and should eventually move to the `Peer` struct)...\n\nMaybe start from moving, and then introduce a mutex?",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r484799322,484799322,src/net.h
jnewbery,2020-09-08 10:39:48,"> Maybe start from moving, and then introduce a mutex?\n\nI think that's probably the cleanest order, but I don't want to scope-creep @narula's PR if she thinks it's better to add the mutex first. I can do the move later.",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r484820843,484820843,src/net.h
narula,2020-09-08 22:49:57,"Thanks @hebasto! TIL. It's certainly shorter, but I'm worried people might miss the `!` if reading quickly, and think this function requires `cs_main`.\n\nCould you share why you suggest switching from `void static` to `static void`? Is it for general cleanup?",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r485237497,485237497,src/net_processing.cpp
hebasto,2020-09-09 05:44:56,"> Thanks @hebasto! TIL. It's certainly shorter, but I'm worried people might miss the `!` if reading quickly, and think this function requires `cs_main`.\n\nIt is not about ""shorter"" :)\nSee:\n- https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#excludes\n- https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#negative-capabilities\n\n> Could you share why you suggest switching from `voi",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r485351754,485351754,src/net_processing.cpp
narula,2020-09-13 22:29:35,right!,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r487585290,487585290,src/net_processing.cpp
hebasto,2020-09-14 07:14:13,"> I don't think it's right to reuse this mutex to guard `vRecvGetData` (despite the name similarities).\n\nI agree on not reusing of irrelevant mutex. To keep this PR focused, would it more correctly to introduce a new `Mutex m_recvgetdata_mutex`?",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r487697265,487697265,src/net.h
jnewbery,2020-09-14 08:24:48,"This would be a slight sequencing change, but perhaps we should either call `ProcessGetData()` here, or not call it in the `GETDATA` processing for consistency. It seems from this comment that the only reason we weren't calling `ProcessGetData()` here was that `cs_main` was being held, which is no longer the case.",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r487736372,487736372,src/net_processing.cpp
narula,2020-09-14 13:51:22,I agree on a new mutex; I was wondering about that but assumed @sipa had some reason for suggesting using `cs_vRecv` to guard it in the first place. ,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r487935532,487935532,src/net.h
narula,2020-09-14 13:55:26,Would this be a behavior change?,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r487939860,487939860,src/net_processing.cpp
jnewbery,2020-09-14 15:33:44,"`PeerRef` is a shared pointer, so by passing it by value here, you're incrementing the ref count, and decrementing it again when you leave the function, which incurs a performance cost, since those operations need to be atomic.\n\nThis function doesn't need to take shared ownership of the underlying `Peer` object, so you should pass by `Peer&` (see http://isocpp.github.io/CppCoreGuidelines/CppCo",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r488028390,488028390,src/net_processing.cpp
jnewbery,2020-09-14 15:35:06,I think it's probably safer to just return if you can't find the `Peer` object here (as all other instances of `GetPeerRef()` except the `FinalizeNode()` call do) rather than assert.,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r488029389,488029389,src/net_processing.cpp
narula,2020-09-30 00:19:44,thanks for the pointer! fixed.,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r497173268,497173268,src/net_processing.cpp
narula,2020-09-30 00:19:53,addressed.,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r497173408,497173408,src/net_processing.cpp
jnewbery,2020-09-30 11:27:17,"In commit ""Move m_orphan_work_set to net_processing"": I think you should put this call at the top of `ProcessMessage()` in this commit, rather than putting it here, and then moving it up in a later commit.\n\nAlternatively, you could change the `ProcessMessage()` signature to take a `Peer&`. I don't think that's necessary, but you may prefer it to fetching the `PeerRef` in `ProcessMessages()` an",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r497435407,497435407,src/net_processing.cpp
jnewbery,2020-09-30 11:48:23,"Since you're touching every line that `vRecvGetData` is on already, you may as well add a scripted-diff commit to this branch that updates the name to modern style guidelines, e.g. something like `m_get_data_requests` or similar. Same for the mutex name - it could be renamed to `m_get_data_requests_mutex` or similar.",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r497446364,497446364,src/net_processing.cpp
narula,2020-09-30 18:26:43,done,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r497715142,497715142,src/net_processing.cpp
narula,2020-09-30 18:28:55,"done. I am fine with calling `GetPeerRef` again, so will leave as is and not change the signature of `ProcessMessage()`.",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r497716433,497716433,src/net_processing.cpp
jnewbery,2020-10-08 18:03:59,"Rather than splitting this logic up (hoisting the `CInv` declaration above the code block, fetching the `type` inside the `cs_main` scope, and then putting the rest of the logic outside the cs_main scope), I recommend you keep all the logic together:\n\n```diff\n--- a/src/net_processing.cpp\n+++ b/src/net_processing.cpp\n@@ -2872,8 +2872,6 @@ void PeerManager::ProcessMessage(CNode& pfrom, con",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r501913124,501913124,src/net_processing.cpp
jnewbery,2020-10-08 18:05:06,Just realised you add this as `cs_vRecvGetData` in one commit and then change it with a scripted diff in the subsequent commit. You can just name it `m_getdata_requests_mutex` in the first commit!,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r501913848,501913848,src/net_processing.cpp
narula,2020-10-13 22:46:25,"Agreed, this is nicer! Changed. \n\nInterestingly, your exact suggestion didn't work: I had to move the assignment to `inv.type` inside the `WITH_LOCK` macro. I got the following error the other way:\n\n```\n./sync.h:257:45: note: expanded from macro 'WITH_LOCK'\n#define WITH_LOCK(cs, code) [&] { LOCK(cs); code; }()\n                                            ^~~~\nnet_processing.cpp:2934",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504301257,504301257,src/net_processing.cpp
jnewbery,2020-10-14 08:42:20,"It looks like you missed out the `return` from inside the `WITH_LOCK` macro's second argument:\n\n`        inv.type = WITH_LOCK(cs_main, return State(pfrom.GetId())->fWantsCmpctWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK);`\n\nBut your way is also fine!",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504504603,504504603,src/net_processing.cpp
hebasto,2020-10-14 14:55:18,"8803aee66813d27ddbdfce937ab9c35f8f7c35bc\n\nTo describe a member `//!` is [recommended](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-doxygen-compatible-comments):\n```suggestion\n    //! Set of txids to reconsider once their parent transactions have been accepted.\n```",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504745752,504745752,src/net_processing.cpp
hebasto,2020-10-14 14:56:06,"8803aee66813d27ddbdfce937ab9c35f8f7c35bc, nit:\n```suggestion\n    if (!peer) return;\n```",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504746443,504746443,src/net_processing.cpp
hebasto,2020-10-14 14:58:28,"8803aee66813d27ddbdfce937ab9c35f8f7c35bc, nit:\n```suggestion\n    if (!peer) return false;\n```",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504748385,504748385,src/net_processing.cpp
hebasto,2020-10-14 15:08:07,"673247b58cd1252ab7e99f7d63ead05cc100cef2, nit:\n```suggestion\n    std::set<uint256> m_orphan_work_set GUARDED_BY(::g_cs_orphans);\n```",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504755912,504755912,src/net_processing.cpp
hebasto,2020-10-14 15:08:55,"673247b58cd1252ab7e99f7d63ead05cc100cef2, nit:\n```suggestion\n        LOCK(::g_cs_orphans);\n```",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504756533,504756533,src/net_processing.cpp
hebasto,2020-10-14 15:10:26,"2d9f2fca43aadcdda4d644cddab36dca88b40b97\n\nTo describe a member `//!` is [recommended](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-doxygen-compatible-comments):\n```suggestion\n    //! Work queue of items requested by this peer.\n```",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504757740,504757740,src/net_processing.cpp
hebasto,2020-10-14 15:11:02,"2d9f2fca43aadcdda4d644cddab36dca88b40b97, nit:\n```suggestion\n    if (!peer) return;\n```",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504758200,504758200,src/net_processing.cpp
hebasto,2020-10-14 15:11:33,"2d9f2fca43aadcdda4d644cddab36dca88b40b97, nit:\n```suggestion\n    auto it = peer->vRecvGetData.begin();\n```",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504758581,504758581,src/net_processing.cpp
hebasto,2020-10-14 15:12:59,"2d9f2fca43aadcdda4d644cddab36dca88b40b97\n\nnit: add braces or make one line?",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504759682,504759682,src/net_processing.cpp
hebasto,2020-10-14 15:14:32,"ba951812ec0cc8ebee5911a582f188525b76ff0a\n\nTo describe a member `//!` is [recommended](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-doxygen-compatible-comments):\n```suggestion\n    //! Protects vRecvGetData.\n```",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504760847,504760847,src/net_processing.cpp
hebasto,2020-10-14 15:29:51,"I think this could change behavior as between two consequent `::cs_main` holding the guarded state could be changed.\n\nMaybe just place `State` call into the guarded block above?",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504772681,504772681,src/net_processing.cpp
jnewbery,2020-10-14 15:54:21,Whether a peer prefers witness data is independent from whether the block can be fetched from disk. The fact that they both happen to be guarded by cs_main is more of a historic accident than anything else. I think it's fine to release and retake cs_main here.,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504790496,504790496,src/net_processing.cpp
jnewbery,2020-10-14 15:55:59,I see lots of examples of `/**` being used for member comments throughout the codebase. We should update the developer docs to say both styles are allowed rather than try to change all comments to fit to one style.,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504791695,504791695,src/net_processing.cpp
hebasto,2020-10-14 15:56:28,@jnewbery Thanks!,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504792094,504792094,src/net_processing.cpp
hebasto,2020-10-14 15:57:15,Agree.,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504792680,504792680,src/net_processing.cpp
narula,2020-10-14 21:13:56,"I'm trying to be consistent with other ways this is checked in the file, for example https://github.com/bitcoin/bitcoin/blob/8803aee66813d27ddbdfce937ab9c35f8f7c35bc/src/net_processing.cpp#L999 and https://github.com/bitcoin/bitcoin/blob/8803aee66813d27ddbdfce937ab9c35f8f7c35bc/src/net_processing.cpp#L1146",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r504975677,504975677,src/net_processing.cpp
narula,2020-10-14 22:06:37,Resolution: I'll leave this as is.,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r505006941,505006941,src/net_processing.cpp
narula,2020-10-14 22:07:12,"As noted above, leaving this as is.",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r505007383,505007383,src/net_processing.cpp
narula,2020-10-14 22:21:35,"Thank you for the suggestion! Could you point me towards anything which indicates why this might be preferred? Based on my understanding, it seems like a style preference. 1) Globals are already prefixed with `g_` making it very unlikely to have a conflicting local variable 2) I don't see anywhere else in the codebase using this operator for globals.",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r505018501,505018501,src/net_processing.cpp
hebasto,2020-10-15 06:19:35,"`git grep ::cs` or https://github.com/bitcoin/bitcoin/blob/f2e6d14430137a271d153348d207df6ab8086bc6/src/init.cpp#L216\n\n> Based on my understanding, it seems like a style preference.\n\nCorrect. Feel free to ignore this nit.",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r505192691,505192691,src/net_processing.cpp
hebasto,2020-10-15 06:27:10,I don't think it is required to be consistent with a bad style of the surrounding code. Are we going to check every raw/smart pointer against `nullptr` explicitly everywhere in the code?,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r505198649,505198649,src/net_processing.cpp
jnewbery,2020-10-15 09:06:01,"I think both are fine. We don't express a preference in our style guide. I think @hebasto's suggestion is more idiomatic, and if I were writing those lines again, I'd use the `!ptr` form.",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r505377863,505377863,src/net_processing.cpp
jnewbery,2020-10-15 09:08:11,"We don't have guidance about `auto` usage in our style guide. I personally think `auto` should only be used if the type is immediately obvious from the surrounding code, and it's saving redundant and verbose keystrokes. ",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r505379547,505379547,src/net_processing.cpp
hebasto,2020-10-15 09:19:50,"> We don't have guidance about `auto` usage in our style guide.\n\nYes. And I think we should have it.\n\n> I personally think `auto` should only be used if the type is immediately obvious from the surrounding code, and it's saving redundant and verbose keystrokes.\n\nhttps://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r505388279,505388279,src/net_processing.cpp
jnewbery,2020-10-15 10:23:52,"Thanks @hebasto. I hadn't seen that particular blog post before, but I am familiar with the arguments for and against `auto`. Scott Meyers also dedicates a chapter to it in Exceptional Modern C++.\n\nHere, I think it's useful to explicitly name the type, since `CInv` is part of the interface. Sure, we could switch out `std::deque` for another container at some point, but to know what `it->IsGenT",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r505431669,505431669,src/net_processing.cpp
hebasto,2020-10-15 10:30:56,ok.,https://github.com/bitcoin/bitcoin/pull/19911#discussion_r505435886,505435886,src/net_processing.cpp
narula,2020-10-15 19:14:00,"That is a very interesting post! I'm not sure I entirely agree with his reasoning against the readability argument, but perhaps we could debate that somewhere else :) I think this could go either way, and I prefer having the type explicit.",https://github.com/bitcoin/bitcoin/pull/19911#discussion_r505779994,505779994,src/net_processing.cpp
