[
  {
    "sha": "9c47cb29f9f525ee58acc629825a97075156d764",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzQ3Y2IyOWY5ZjUyNWVlNThhY2M2Mjk4MjVhOTcwNzUxNTZkNzY0",
    "commit": {
      "author": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2020-09-13T23:07:49Z"
      },
      "committer": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2020-10-13T21:38:38Z"
      },
      "message": "[Rename only] Rename orphan_work_set to m_orphan_work_set.\n\nThis helps distinguish the member from any local variables.",
      "tree": {
        "sha": "3b11d9d10e8ae9020a2e6304f77d983bac1f6418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b11d9d10e8ae9020a2e6304f77d983bac1f6418"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c47cb29f9f525ee58acc629825a97075156d764",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c47cb29f9f525ee58acc629825a97075156d764",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c47cb29f9f525ee58acc629825a97075156d764",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c47cb29f9f525ee58acc629825a97075156d764/comments",
    "author": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec0453cd57736df33e9f50c004d88bea10428ad5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec0453cd57736df33e9f50c004d88bea10428ad5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec0453cd57736df33e9f50c004d88bea10428ad5"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c357d33165a098bab8d5ea6f3b5771e2852865f6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c47cb29f9f525ee58acc629825a97075156d764/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c47cb29f9f525ee58acc629825a97075156d764/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9c47cb29f9f525ee58acc629825a97075156d764",
        "patch": "@@ -1042,7 +1042,7 @@ class CNode\n     // Whether a ping is requested.\n     std::atomic<bool> fPingQueued{false};\n \n-    std::set<uint256> orphan_work_set;\n+    std::set<uint256> m_orphan_work_set;\n \n     CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn, ConnectionType conn_type_in, bool inbound_onion = false);\n     ~CNode();"
      },
      {
        "sha": "7b5805c93ecdeaffbf8344faf4a50e93cead8ebe",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c47cb29f9f525ee58acc629825a97075156d764/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c47cb29f9f525ee58acc629825a97075156d764/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9c47cb29f9f525ee58acc629825a97075156d764",
        "patch": "@@ -3052,7 +3052,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                 auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(txid, i));\n                 if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n                     for (const auto& elem : it_by_prev->second) {\n-                        pfrom.orphan_work_set.insert(elem->first);\n+                        pfrom.m_orphan_work_set.insert(elem->first);\n                     }\n                 }\n             }\n@@ -3069,7 +3069,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             }\n \n             // Recursively process any orphan transactions that depended on this one\n-            ProcessOrphanTx(pfrom.orphan_work_set);\n+            ProcessOrphanTx(pfrom.m_orphan_work_set);\n         }\n         else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)\n         {\n@@ -3868,9 +3868,9 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n     if (!pfrom->vRecvGetData.empty())\n         ProcessGetData(*pfrom, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n \n-    if (!pfrom->orphan_work_set.empty()) {\n+    if (!pfrom->m_orphan_work_set.empty()) {\n         LOCK2(cs_main, g_cs_orphans);\n-        ProcessOrphanTx(pfrom->orphan_work_set);\n+        ProcessOrphanTx(pfrom->m_orphan_work_set);\n     }\n \n     if (pfrom->fDisconnect)\n@@ -3879,7 +3879,7 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n     // this maintains the order of responses\n     // and prevents vRecvGetData to grow unbounded\n     if (!pfrom->vRecvGetData.empty()) return true;\n-    if (!pfrom->orphan_work_set.empty()) return true;\n+    if (!pfrom->m_orphan_work_set.empty()) return true;\n \n     // Don't bother if send buffer is too full to respond anyway\n     if (pfrom->fPauseSend)"
      }
    ]
  },
  {
    "sha": "8803aee66813d27ddbdfce937ab9c35f8f7c35bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODAzYWVlNjY4MTNkMjdkZGJkZmNlOTM3YWI5YzM1ZjhmN2MzNWJj",
    "commit": {
      "author": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2020-09-13T23:29:50Z"
      },
      "committer": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2020-10-14T14:08:37Z"
      },
      "message": "Move m_orphan_work_set to net_processing",
      "tree": {
        "sha": "9f5864917c7b147c9a4e0bf0f19e64dc079b3e4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f5864917c7b147c9a4e0bf0f19e64dc079b3e4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8803aee66813d27ddbdfce937ab9c35f8f7c35bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8803aee66813d27ddbdfce937ab9c35f8f7c35bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8803aee66813d27ddbdfce937ab9c35f8f7c35bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8803aee66813d27ddbdfce937ab9c35f8f7c35bc/comments",
    "author": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c47cb29f9f525ee58acc629825a97075156d764",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c47cb29f9f525ee58acc629825a97075156d764",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c47cb29f9f525ee58acc629825a97075156d764"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 13,
      "deletions": 7
    },
    "files": [
      {
        "sha": "da82fe9a2e811631c7c294e0d47e5e4455d429b1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8803aee66813d27ddbdfce937ab9c35f8f7c35bc/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8803aee66813d27ddbdfce937ab9c35f8f7c35bc/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8803aee66813d27ddbdfce937ab9c35f8f7c35bc",
        "patch": "@@ -1042,8 +1042,6 @@ class CNode\n     // Whether a ping is requested.\n     std::atomic<bool> fPingQueued{false};\n \n-    std::set<uint256> m_orphan_work_set;\n-\n     CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn, ConnectionType conn_type_in, bool inbound_onion = false);\n     ~CNode();\n     CNode(const CNode&) = delete;"
      },
      {
        "sha": "ab3c323b0fd6b3218a159f2d5975b4741f519e7e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8803aee66813d27ddbdfce937ab9c35f8f7c35bc/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8803aee66813d27ddbdfce937ab9c35f8f7c35bc/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8803aee66813d27ddbdfce937ab9c35f8f7c35bc",
        "patch": "@@ -512,6 +512,9 @@ struct Peer {\n     /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n     bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n \n+    /** Set of txids to reconsider once their parent transactions have been accepted **/\n+    std::set<uint256> m_orphan_work_set;\n+\n     Peer(NodeId id) : m_id(id) {}\n };\n \n@@ -2363,6 +2366,8 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    PeerRef peer = GetPeerRef(pfrom.GetId());\n+    if (peer == nullptr) return;\n \n     if (msg_type == NetMsgType::VERSION) {\n         // Each connection can only send one version message\n@@ -3052,7 +3057,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                 auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(txid, i));\n                 if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n                     for (const auto& elem : it_by_prev->second) {\n-                        pfrom.m_orphan_work_set.insert(elem->first);\n+                        peer->m_orphan_work_set.insert(elem->first);\n                     }\n                 }\n             }\n@@ -3069,7 +3074,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             }\n \n             // Recursively process any orphan transactions that depended on this one\n-            ProcessOrphanTx(pfrom.m_orphan_work_set);\n+            ProcessOrphanTx(peer->m_orphan_work_set);\n         }\n         else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)\n         {\n@@ -3865,12 +3870,15 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n {\n     bool fMoreWork = false;\n \n+    PeerRef peer = GetPeerRef(pfrom->GetId());\n+    if (peer == nullptr) return false;\n+\n     if (!pfrom->vRecvGetData.empty())\n         ProcessGetData(*pfrom, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n \n-    if (!pfrom->m_orphan_work_set.empty()) {\n+    if (!peer->m_orphan_work_set.empty()) {\n         LOCK2(cs_main, g_cs_orphans);\n-        ProcessOrphanTx(pfrom->m_orphan_work_set);\n+        ProcessOrphanTx(peer->m_orphan_work_set);\n     }\n \n     if (pfrom->fDisconnect)\n@@ -3879,7 +3887,7 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n     // this maintains the order of responses\n     // and prevents vRecvGetData to grow unbounded\n     if (!pfrom->vRecvGetData.empty()) return true;\n-    if (!pfrom->m_orphan_work_set.empty()) return true;\n+    if (!peer->m_orphan_work_set.empty()) return true;\n \n     // Don't bother if send buffer is too full to respond anyway\n     if (pfrom->fPauseSend)"
      }
    ]
  },
  {
    "sha": "673247b58cd1252ab7e99f7d63ead05cc100cef2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzMyNDdiNThjZDEyNTJhYjdlOTlmN2Q2M2VhZDA1Y2MxMDBjZWYy",
    "commit": {
      "author": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2020-09-13T23:34:52Z"
      },
      "committer": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2020-10-14T14:08:44Z"
      },
      "message": "Lock before checking if orphan_work_set is empty; indicate it is guarded",
      "tree": {
        "sha": "455a12748f64272b30c9c207182ae9d58336bb25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/455a12748f64272b30c9c207182ae9d58336bb25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/673247b58cd1252ab7e99f7d63ead05cc100cef2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/673247b58cd1252ab7e99f7d63ead05cc100cef2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/673247b58cd1252ab7e99f7d63ead05cc100cef2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/673247b58cd1252ab7e99f7d63ead05cc100cef2/comments",
    "author": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8803aee66813d27ddbdfce937ab9c35f8f7c35bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8803aee66813d27ddbdfce937ab9c35f8f7c35bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8803aee66813d27ddbdfce937ab9c35f8f7c35bc"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1a50c68a268ebbc870b65b30c96d669af3132c88",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/673247b58cd1252ab7e99f7d63ead05cc100cef2/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/673247b58cd1252ab7e99f7d63ead05cc100cef2/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=673247b58cd1252ab7e99f7d63ead05cc100cef2",
        "patch": "@@ -513,7 +513,7 @@ struct Peer {\n     bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n \n     /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set;\n+    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n \n     Peer(NodeId id) : m_id(id) {}\n };\n@@ -3876,9 +3876,11 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n     if (!pfrom->vRecvGetData.empty())\n         ProcessGetData(*pfrom, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n \n-    if (!peer->m_orphan_work_set.empty()) {\n+    {\n         LOCK2(cs_main, g_cs_orphans);\n-        ProcessOrphanTx(peer->m_orphan_work_set);\n+        if (!peer->m_orphan_work_set.empty()) {\n+            ProcessOrphanTx(peer->m_orphan_work_set);\n+        }\n     }\n \n     if (pfrom->fDisconnect)\n@@ -3887,7 +3889,10 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n     // this maintains the order of responses\n     // and prevents vRecvGetData to grow unbounded\n     if (!pfrom->vRecvGetData.empty()) return true;\n-    if (!peer->m_orphan_work_set.empty()) return true;\n+    {\n+        LOCK(g_cs_orphans);\n+        if (!peer->m_orphan_work_set.empty()) return true;\n+    }\n \n     // Don't bother if send buffer is too full to respond anyway\n     if (pfrom->fPauseSend)"
      }
    ]
  },
  {
    "sha": "2d9f2fca43aadcdda4d644cddab36dca88b40b97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDlmMmZjYTQzYWFkY2RkYTRkNjQ0Y2RkYWIzNmRjYTg4YjQwYjk3",
    "commit": {
      "author": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2020-09-14T00:11:24Z"
      },
      "committer": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2020-10-14T14:08:44Z"
      },
      "message": "Move vRecvGetData to net processing",
      "tree": {
        "sha": "0dd29941947137eee36c3017e838b1d8f6d3c61e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0dd29941947137eee36c3017e838b1d8f6d3c61e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d9f2fca43aadcdda4d644cddab36dca88b40b97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d9f2fca43aadcdda4d644cddab36dca88b40b97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d9f2fca43aadcdda4d644cddab36dca88b40b97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d9f2fca43aadcdda4d644cddab36dca88b40b97/comments",
    "author": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "673247b58cd1252ab7e99f7d63ead05cc100cef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/673247b58cd1252ab7e99f7d63ead05cc100cef2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/673247b58cd1252ab7e99f7d63ead05cc100cef2"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 16,
      "deletions": 10
    },
    "files": [
      {
        "sha": "cd7a7c7c733088ad707f0fed3f33a6604fa359e6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d9f2fca43aadcdda4d644cddab36dca88b40b97/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d9f2fca43aadcdda4d644cddab36dca88b40b97/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2d9f2fca43aadcdda4d644cddab36dca88b40b97",
        "patch": "@@ -848,7 +848,6 @@ class CNode\n \n     RecursiveMutex cs_sendProcessing;\n \n-    std::deque<CInv> vRecvGetData;\n     uint64_t nRecvBytes GUARDED_BY(cs_vRecv){0};\n \n     std::atomic<int64_t> nLastSend{0};"
      },
      {
        "sha": "3b632cf20b3702497aef2cfcdb09ca4eb5fe831c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d9f2fca43aadcdda4d644cddab36dca88b40b97/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d9f2fca43aadcdda4d644cddab36dca88b40b97/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2d9f2fca43aadcdda4d644cddab36dca88b40b97",
        "patch": "@@ -515,6 +515,9 @@ struct Peer {\n     /** Set of txids to reconsider once their parent transactions have been accepted **/\n     std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n \n+    /** Work queue of items requested by this peer **/\n+    std::deque<CInv> vRecvGetData;\n+\n     Peer(NodeId id) : m_id(id) {}\n };\n \n@@ -1754,7 +1757,10 @@ void static ProcessGetData(CNode& pfrom, const CChainParams& chainparams, CConnm\n {\n     AssertLockNotHeld(cs_main);\n \n-    std::deque<CInv>::iterator it = pfrom.vRecvGetData.begin();\n+    PeerRef peer = GetPeerRef(pfrom.GetId());\n+    if (peer == nullptr) return;\n+\n+    std::deque<CInv>::iterator it = peer->vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n     const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n \n@@ -1766,7 +1772,7 @@ void static ProcessGetData(CNode& pfrom, const CChainParams& chainparams, CConnm\n     // Process as many TX items from the front of the getdata queue as\n     // possible, since they're common and it's efficient to batch process\n     // them.\n-    while (it != pfrom.vRecvGetData.end() && it->IsGenTxMsg()) {\n+    while (it != peer->vRecvGetData.end() && it->IsGenTxMsg()) {\n         if (interruptMsgProc) return;\n         // The send buffer provides backpressure. If there's no space in\n         // the buffer, pause processing until the next call.\n@@ -1814,7 +1820,7 @@ void static ProcessGetData(CNode& pfrom, const CChainParams& chainparams, CConnm\n \n     // Only process one BLOCK item per call, since they're uncommon and can be\n     // expensive to process.\n-    if (it != pfrom.vRecvGetData.end() && !pfrom.fPauseSend) {\n+    if (it != peer->vRecvGetData.end() && !pfrom.fPauseSend) {\n         const CInv &inv = *it++;\n         if (inv.IsGenBlkMsg()) {\n             ProcessGetBlockData(pfrom, chainparams, inv, connman);\n@@ -1823,7 +1829,7 @@ void static ProcessGetData(CNode& pfrom, const CChainParams& chainparams, CConnm\n         // and continue processing the queue on the next call.\n     }\n \n-    pfrom.vRecvGetData.erase(pfrom.vRecvGetData.begin(), it);\n+    peer->vRecvGetData.erase(peer->vRecvGetData.begin(), it);\n \n     if (!vNotFound.empty()) {\n         // Let the peer know that we didn't find what it asked for, so it doesn't\n@@ -2805,7 +2811,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             LogPrint(BCLog::NET, \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom.GetId());\n         }\n \n-        pfrom.vRecvGetData.insert(pfrom.vRecvGetData.end(), vInv.begin(), vInv.end());\n+        peer->vRecvGetData.insert(peer->vRecvGetData.end(), vInv.begin(), vInv.end());\n         ProcessGetData(pfrom, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n         return;\n     }\n@@ -2914,7 +2920,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             CInv inv;\n             inv.type = State(pfrom.GetId())->fWantsCmpctWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK;\n             inv.hash = req.blockhash;\n-            pfrom.vRecvGetData.push_back(inv);\n+            peer->vRecvGetData.push_back(inv);\n             // The message processing loop will go around again (without pausing) and we'll respond then (without cs_main)\n             return;\n         }\n@@ -3873,8 +3879,9 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n     PeerRef peer = GetPeerRef(pfrom->GetId());\n     if (peer == nullptr) return false;\n \n-    if (!pfrom->vRecvGetData.empty())\n+    if (!peer->vRecvGetData.empty()) {\n         ProcessGetData(*pfrom, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n+    }\n \n     {\n         LOCK2(cs_main, g_cs_orphans);\n@@ -3888,7 +3895,7 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n \n     // this maintains the order of responses\n     // and prevents vRecvGetData to grow unbounded\n-    if (!pfrom->vRecvGetData.empty()) return true;\n+    if (!peer->vRecvGetData.empty()) return true;\n     {\n         LOCK(g_cs_orphans);\n         if (!peer->m_orphan_work_set.empty()) return true;\n@@ -3921,7 +3928,7 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n         ProcessMessage(*pfrom, msg_type, msg.m_recv, msg.m_time, interruptMsgProc);\n         if (interruptMsgProc)\n             return false;\n-        if (!pfrom->vRecvGetData.empty())\n+        if (!peer->vRecvGetData.empty())\n             fMoreWork = true;\n     } catch (const std::exception& e) {\n         LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' (%s) caught\\n\", __func__, SanitizeString(msg_type), nMessageSize, e.what(), typeid(e).name());"
      }
    ]
  },
  {
    "sha": "ba951812ec0cc8ebee5911a582f188525b76ff0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTk1MTgxMmVjMGNjOGViZWU1OTExYTU4MmYxODg1MjViNzZmZjBh",
    "commit": {
      "author": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2020-09-14T00:34:41Z"
      },
      "committer": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2020-10-14T14:08:44Z"
      },
      "message": "Guard vRecvGetData (now in net processing) with its own mutex\n\nThis requires slightly reorganizing the logic in GETBLOCKTXN to\nmaintain locking order.",
      "tree": {
        "sha": "9089072724b2405be3120af33ab49abd131cfd2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9089072724b2405be3120af33ab49abd131cfd2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba951812ec0cc8ebee5911a582f188525b76ff0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba951812ec0cc8ebee5911a582f188525b76ff0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba951812ec0cc8ebee5911a582f188525b76ff0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba951812ec0cc8ebee5911a582f188525b76ff0a/comments",
    "author": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d9f2fca43aadcdda4d644cddab36dca88b40b97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d9f2fca43aadcdda4d644cddab36dca88b40b97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d9f2fca43aadcdda4d644cddab36dca88b40b97"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 57,
      "deletions": 44
    },
    "files": [
      {
        "sha": "162d48456675fc8b7e9f751e102e865e34aa3f52",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 44,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba951812ec0cc8ebee5911a582f188525b76ff0a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba951812ec0cc8ebee5911a582f188525b76ff0a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ba951812ec0cc8ebee5911a582f188525b76ff0a",
        "patch": "@@ -515,8 +515,10 @@ struct Peer {\n     /** Set of txids to reconsider once their parent transactions have been accepted **/\n     std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n \n+    /** Protects vRecvGetData **/\n+    Mutex m_getdata_requests_mutex;\n     /** Work queue of items requested by this peer **/\n-    std::deque<CInv> vRecvGetData;\n+    std::deque<CInv> vRecvGetData GUARDED_BY(m_getdata_requests_mutex);\n \n     Peer(NodeId id) : m_id(id) {}\n };\n@@ -1753,14 +1755,11 @@ static CTransactionRef FindTxForGetData(const CTxMemPool& mempool, const CNode&\n     return {};\n }\n \n-void static ProcessGetData(CNode& pfrom, const CChainParams& chainparams, CConnman& connman, CTxMemPool& mempool, const std::atomic<bool>& interruptMsgProc) LOCKS_EXCLUDED(cs_main)\n+void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainparams, CConnman& connman, CTxMemPool& mempool, const std::atomic<bool>& interruptMsgProc) EXCLUSIVE_LOCKS_REQUIRED(!cs_main, peer.m_getdata_requests_mutex)\n {\n     AssertLockNotHeld(cs_main);\n \n-    PeerRef peer = GetPeerRef(pfrom.GetId());\n-    if (peer == nullptr) return;\n-\n-    std::deque<CInv>::iterator it = peer->vRecvGetData.begin();\n+    std::deque<CInv>::iterator it = peer.vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n     const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n \n@@ -1772,7 +1771,7 @@ void static ProcessGetData(CNode& pfrom, const CChainParams& chainparams, CConnm\n     // Process as many TX items from the front of the getdata queue as\n     // possible, since they're common and it's efficient to batch process\n     // them.\n-    while (it != peer->vRecvGetData.end() && it->IsGenTxMsg()) {\n+    while (it != peer.vRecvGetData.end() && it->IsGenTxMsg()) {\n         if (interruptMsgProc) return;\n         // The send buffer provides backpressure. If there's no space in\n         // the buffer, pause processing until the next call.\n@@ -1820,7 +1819,7 @@ void static ProcessGetData(CNode& pfrom, const CChainParams& chainparams, CConnm\n \n     // Only process one BLOCK item per call, since they're uncommon and can be\n     // expensive to process.\n-    if (it != peer->vRecvGetData.end() && !pfrom.fPauseSend) {\n+    if (it != peer.vRecvGetData.end() && !pfrom.fPauseSend) {\n         const CInv &inv = *it++;\n         if (inv.IsGenBlkMsg()) {\n             ProcessGetBlockData(pfrom, chainparams, inv, connman);\n@@ -1829,7 +1828,7 @@ void static ProcessGetData(CNode& pfrom, const CChainParams& chainparams, CConnm\n         // and continue processing the queue on the next call.\n     }\n \n-    peer->vRecvGetData.erase(peer->vRecvGetData.begin(), it);\n+    peer.vRecvGetData.erase(peer.vRecvGetData.begin(), it);\n \n     if (!vNotFound.empty()) {\n         // Let the peer know that we didn't find what it asked for, so it doesn't\n@@ -2811,8 +2810,12 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             LogPrint(BCLog::NET, \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom.GetId());\n         }\n \n-        peer->vRecvGetData.insert(peer->vRecvGetData.end(), vInv.begin(), vInv.end());\n-        ProcessGetData(pfrom, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n+        {\n+            LOCK(peer->m_getdata_requests_mutex);\n+            peer->vRecvGetData.insert(peer->vRecvGetData.end(), vInv.begin(), vInv.end());\n+            ProcessGetData(pfrom, *peer, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n+        }\n+\n         return;\n     }\n \n@@ -2900,36 +2903,38 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             return;\n         }\n \n-        LOCK(cs_main);\n+        {\n+            LOCK(cs_main);\n \n-        const CBlockIndex* pindex = LookupBlockIndex(req.blockhash);\n-        if (!pindex || !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n-            LogPrint(BCLog::NET, \"Peer %d sent us a getblocktxn for a block we don't have\\n\", pfrom.GetId());\n-            return;\n-        }\n+            const CBlockIndex* pindex = LookupBlockIndex(req.blockhash);\n+            if (!pindex || !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n+                LogPrint(BCLog::NET, \"Peer %d sent us a getblocktxn for a block we don't have\\n\", pfrom.GetId());\n+                return;\n+            }\n \n-        if (pindex->nHeight < ::ChainActive().Height() - MAX_BLOCKTXN_DEPTH) {\n-            // If an older block is requested (should never happen in practice,\n-            // but can happen in tests) send a block response instead of a\n-            // blocktxn response. Sending a full block response instead of a\n-            // small blocktxn response is preferable in the case where a peer\n-            // might maliciously send lots of getblocktxn requests to trigger\n-            // expensive disk reads, because it will require the peer to\n-            // actually receive all the data read from disk over the network.\n-            LogPrint(BCLog::NET, \"Peer %d sent us a getblocktxn for a block > %i deep\\n\", pfrom.GetId(), MAX_BLOCKTXN_DEPTH);\n-            CInv inv;\n-            inv.type = State(pfrom.GetId())->fWantsCmpctWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK;\n-            inv.hash = req.blockhash;\n-            peer->vRecvGetData.push_back(inv);\n-            // The message processing loop will go around again (without pausing) and we'll respond then (without cs_main)\n-            return;\n-        }\n+            if (pindex->nHeight >= ::ChainActive().Height() - MAX_BLOCKTXN_DEPTH) {\n+                CBlock block;\n+                bool ret = ReadBlockFromDisk(block, pindex, m_chainparams.GetConsensus());\n+                assert(ret);\n \n-        CBlock block;\n-        bool ret = ReadBlockFromDisk(block, pindex, m_chainparams.GetConsensus());\n-        assert(ret);\n+                SendBlockTransactions(pfrom, block, req);\n+                return;\n+            }\n+        }\n \n-        SendBlockTransactions(pfrom, block, req);\n+        // If an older block is requested (should never happen in practice,\n+        // but can happen in tests) send a block response instead of a\n+        // blocktxn response. Sending a full block response instead of a\n+        // small blocktxn response is preferable in the case where a peer\n+        // might maliciously send lots of getblocktxn requests to trigger\n+        // expensive disk reads, because it will require the peer to\n+        // actually receive all the data read from disk over the network.\n+        LogPrint(BCLog::NET, \"Peer %d sent us a getblocktxn for a block > %i deep\\n\", pfrom.GetId(), MAX_BLOCKTXN_DEPTH);\n+        CInv inv;\n+        WITH_LOCK(cs_main, inv.type = State(pfrom.GetId())->fWantsCmpctWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK);\n+        inv.hash = req.blockhash;\n+        WITH_LOCK(peer->m_getdata_requests_mutex, peer->vRecvGetData.push_back(inv));\n+        // The message processing loop will go around again (without pausing) and we'll respond then\n         return;\n     }\n \n@@ -3879,8 +3884,11 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n     PeerRef peer = GetPeerRef(pfrom->GetId());\n     if (peer == nullptr) return false;\n \n-    if (!peer->vRecvGetData.empty()) {\n-        ProcessGetData(*pfrom, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n+    {\n+        LOCK(peer->m_getdata_requests_mutex);\n+        if (!peer->vRecvGetData.empty()) {\n+            ProcessGetData(*pfrom, *peer, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n+        }\n     }\n \n     {\n@@ -3895,7 +3903,11 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n \n     // this maintains the order of responses\n     // and prevents vRecvGetData to grow unbounded\n-    if (!peer->vRecvGetData.empty()) return true;\n+    {\n+        LOCK(peer->m_getdata_requests_mutex);\n+        if (!peer->vRecvGetData.empty()) return true;\n+    }\n+\n     {\n         LOCK(g_cs_orphans);\n         if (!peer->m_orphan_work_set.empty()) return true;\n@@ -3926,10 +3938,11 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n \n     try {\n         ProcessMessage(*pfrom, msg_type, msg.m_recv, msg.m_time, interruptMsgProc);\n-        if (interruptMsgProc)\n-            return false;\n-        if (!peer->vRecvGetData.empty())\n-            fMoreWork = true;\n+        if (interruptMsgProc) return false;\n+        {\n+            LOCK(peer->m_getdata_requests_mutex);\n+            if (!peer->vRecvGetData.empty()) fMoreWork = true;\n+        }\n     } catch (const std::exception& e) {\n         LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' (%s) caught\\n\", __func__, SanitizeString(msg_type), nMessageSize, e.what(), typeid(e).name());\n     } catch (...) {"
      }
    ]
  },
  {
    "sha": "da0988daf1d665a4644ad3f1ddf3f8a8bdd88cde",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTA5ODhkYWYxZDY2NWE0NjQ0YWQzZjFkZGYzZjhhOGJkZDg4Y2Rl",
    "commit": {
      "author": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2020-09-30T18:23:28Z"
      },
      "committer": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2020-10-14T14:08:44Z"
      },
      "message": "scripted-diff: rename vRecvGetData\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/vRecvGetData/m_getdata_requests/g' src/net_processing.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "ea731c8943fa94fc4092757b1234af51b8d91d8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea731c8943fa94fc4092757b1234af51b8d91d8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da0988daf1d665a4644ad3f1ddf3f8a8bdd88cde",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da0988daf1d665a4644ad3f1ddf3f8a8bdd88cde",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da0988daf1d665a4644ad3f1ddf3f8a8bdd88cde",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da0988daf1d665a4644ad3f1ddf3f8a8bdd88cde/comments",
    "author": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba951812ec0cc8ebee5911a582f188525b76ff0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba951812ec0cc8ebee5911a582f188525b76ff0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba951812ec0cc8ebee5911a582f188525b76ff0a"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "83bea58fe96c02c57f8ddcef21ca282fc7c75e12",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da0988daf1d665a4644ad3f1ddf3f8a8bdd88cde/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da0988daf1d665a4644ad3f1ddf3f8a8bdd88cde/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=da0988daf1d665a4644ad3f1ddf3f8a8bdd88cde",
        "patch": "@@ -515,10 +515,10 @@ struct Peer {\n     /** Set of txids to reconsider once their parent transactions have been accepted **/\n     std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n \n-    /** Protects vRecvGetData **/\n+    /** Protects m_getdata_requests **/\n     Mutex m_getdata_requests_mutex;\n     /** Work queue of items requested by this peer **/\n-    std::deque<CInv> vRecvGetData GUARDED_BY(m_getdata_requests_mutex);\n+    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     Peer(NodeId id) : m_id(id) {}\n };\n@@ -1759,7 +1759,7 @@ void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainpa\n {\n     AssertLockNotHeld(cs_main);\n \n-    std::deque<CInv>::iterator it = peer.vRecvGetData.begin();\n+    std::deque<CInv>::iterator it = peer.m_getdata_requests.begin();\n     std::vector<CInv> vNotFound;\n     const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n \n@@ -1771,7 +1771,7 @@ void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainpa\n     // Process as many TX items from the front of the getdata queue as\n     // possible, since they're common and it's efficient to batch process\n     // them.\n-    while (it != peer.vRecvGetData.end() && it->IsGenTxMsg()) {\n+    while (it != peer.m_getdata_requests.end() && it->IsGenTxMsg()) {\n         if (interruptMsgProc) return;\n         // The send buffer provides backpressure. If there's no space in\n         // the buffer, pause processing until the next call.\n@@ -1819,7 +1819,7 @@ void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainpa\n \n     // Only process one BLOCK item per call, since they're uncommon and can be\n     // expensive to process.\n-    if (it != peer.vRecvGetData.end() && !pfrom.fPauseSend) {\n+    if (it != peer.m_getdata_requests.end() && !pfrom.fPauseSend) {\n         const CInv &inv = *it++;\n         if (inv.IsGenBlkMsg()) {\n             ProcessGetBlockData(pfrom, chainparams, inv, connman);\n@@ -1828,7 +1828,7 @@ void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainpa\n         // and continue processing the queue on the next call.\n     }\n \n-    peer.vRecvGetData.erase(peer.vRecvGetData.begin(), it);\n+    peer.m_getdata_requests.erase(peer.m_getdata_requests.begin(), it);\n \n     if (!vNotFound.empty()) {\n         // Let the peer know that we didn't find what it asked for, so it doesn't\n@@ -2812,7 +2812,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n \n         {\n             LOCK(peer->m_getdata_requests_mutex);\n-            peer->vRecvGetData.insert(peer->vRecvGetData.end(), vInv.begin(), vInv.end());\n+            peer->m_getdata_requests.insert(peer->m_getdata_requests.end(), vInv.begin(), vInv.end());\n             ProcessGetData(pfrom, *peer, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n         }\n \n@@ -2933,7 +2933,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         CInv inv;\n         WITH_LOCK(cs_main, inv.type = State(pfrom.GetId())->fWantsCmpctWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK);\n         inv.hash = req.blockhash;\n-        WITH_LOCK(peer->m_getdata_requests_mutex, peer->vRecvGetData.push_back(inv));\n+        WITH_LOCK(peer->m_getdata_requests_mutex, peer->m_getdata_requests.push_back(inv));\n         // The message processing loop will go around again (without pausing) and we'll respond then\n         return;\n     }\n@@ -3886,7 +3886,7 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n \n     {\n         LOCK(peer->m_getdata_requests_mutex);\n-        if (!peer->vRecvGetData.empty()) {\n+        if (!peer->m_getdata_requests.empty()) {\n             ProcessGetData(*pfrom, *peer, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n         }\n     }\n@@ -3902,10 +3902,10 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n         return false;\n \n     // this maintains the order of responses\n-    // and prevents vRecvGetData to grow unbounded\n+    // and prevents m_getdata_requests to grow unbounded\n     {\n         LOCK(peer->m_getdata_requests_mutex);\n-        if (!peer->vRecvGetData.empty()) return true;\n+        if (!peer->m_getdata_requests.empty()) return true;\n     }\n \n     {\n@@ -3941,7 +3941,7 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n         if (interruptMsgProc) return false;\n         {\n             LOCK(peer->m_getdata_requests_mutex);\n-            if (!peer->vRecvGetData.empty()) fMoreWork = true;\n+            if (!peer->m_getdata_requests.empty()) fMoreWork = true;\n         }\n     } catch (const std::exception& e) {\n         LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' (%s) caught\\n\", __func__, SanitizeString(msg_type), nMessageSize, e.what(), typeid(e).name());"
      }
    ]
  }
]