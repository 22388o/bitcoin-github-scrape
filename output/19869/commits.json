[
  {
    "sha": "3a1c487e600c549199b9d79802ce7103ee8ede7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTFjNDg3ZTYwMGM1NDkxOTliOWQ3OTgwMmNlNzEwM2VlOGVkZTdm",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-09-04T10:22:10Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-10-05T08:00:24Z"
      },
      "message": "Wait less if last feeler candidate wasn't tried\n\nWe should distinguish the case when we selected a feeler\nand attempted connecting to it from the case when we didn't\neven try: maybe the record was invalid, or too many attempts\nwere made. In the latter case, make next feeler attempt sooner.",
      "tree": {
        "sha": "4af59077fe44bafea13164987abd09c4562502ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4af59077fe44bafea13164987abd09c4562502ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a1c487e600c549199b9d79802ce7103ee8ede7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a1c487e600c549199b9d79802ce7103ee8ede7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a1c487e600c549199b9d79802ce7103ee8ede7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a1c487e600c549199b9d79802ce7103ee8ede7f/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dde104963b3ba2e24bb3b383351ddcbef52a0240",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dde104963b3ba2e24bb3b383351ddcbef52a0240",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dde104963b3ba2e24bb3b383351ddcbef52a0240"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 20,
      "deletions": 5
    },
    "files": [
      {
        "sha": "cca2b6db6af74e64a894e59ca5dc0a9521e2c5c6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a1c487e600c549199b9d79802ce7103ee8ede7f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a1c487e600c549199b9d79802ce7103ee8ede7f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3a1c487e600c549199b9d79802ce7103ee8ede7f",
        "patch": "@@ -1861,7 +1861,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n     int64_t nStart = GetTime();\n \n     // Minimum time before next feeler connection (in microseconds).\n-    int64_t nNextFeeler = PoissonNextSend(nStart*1000*1000, FEELER_INTERVAL);\n+    int64_t nNextFeeler = PoissonNextSend(nStart * 1000 * 1000, FEELER_ATTEMPT_INTERVAL);\n     while (!interruptNet)\n     {\n         ProcessAddrFetch();\n@@ -1942,7 +1942,12 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         } else if (GetTryNewOutboundPeer()) {\n             // OUTBOUND_FULL_RELAY\n         } else if (nTime > nNextFeeler) {\n-            nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n+            // We don't know whether feeler connection will be attempted in this iteration,\n+            // or we will skip this candidate due to one of the pre-validation rules.\n+            // Thus, we schedule the next feeler connection with a shorter interval now,\n+            // but we will reschedule if for later if current candidate will be actually\n+            // attempted to connect to.\n+            nNextFeeler = PoissonNextSend(nTime, FEELER_SKIP_INTERVAL);\n             conn_type = ConnectionType::FEELER;\n             fFeeler = true;\n         } else {\n@@ -2007,6 +2012,8 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         if (addrConnect.IsValid()) {\n \n             if (fFeeler) {\n+                nNextFeeler = PoissonNextSend(nTime, FEELER_ATTEMPT_INTERVAL);\n+\n                 // Add small amount of random noise before connection to avoid synchronization.\n                 int randsleep = GetRandInt(FEELER_SLEEP_WINDOW * 1000);\n                 if (!interruptNet.sleep_for(std::chrono::milliseconds(randsleep)))"
      },
      {
        "sha": "0b265689d66c282dd7057b48ed8b52f2f5a416b4",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a1c487e600c549199b9d79802ce7103ee8ede7f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a1c487e600c549199b9d79802ce7103ee8ede7f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3a1c487e600c549199b9d79802ce7103ee8ede7f",
        "patch": "@@ -51,8 +51,16 @@ static const bool DEFAULT_WHITELISTFORCERELAY = false;\n \n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n static const int TIMEOUT_INTERVAL = 20 * 60;\n-/** Run the feeler connection loop once every 2 minutes or 120 seconds. **/\n-static const int FEELER_INTERVAL = 120;\n+/** Delay of the next feeler consideration if a current candidate was attempted to connect to. **/\n+static const int FEELER_ATTEMPT_INTERVAL = 120;\n+/**\n+ * Delay of the next feeler consideration if a current candidate was not attempted to connect to.\n+ * For example, if a selected feeler didn't pass pre-validation (e.g., last time it was tried was too recent),\n+ * we won't even try to connect.\n+ */\n+static const int FEELER_SKIP_INTERVAL = 20;\n+static_assert(FEELER_ATTEMPT_INTERVAL >= FEELER_SKIP_INTERVAL,\n+\"FEELER_SKIP_INTERVAL should not exceed FEELER_ATTEMPT_INTERVAL to enforce effective feeler selection\");\n /** The maximum number of addresses from our addrman to return in response to a getaddr message. */\n static constexpr size_t MAX_ADDR_TO_SEND = 1000;\n /** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n@@ -163,7 +171,7 @@ enum class ConnectionType {\n      * Note that in the literature (\"Eclipse Attacks on Bitcoin\u2019s Peer-to-Peer Network\")\n      * only the latter feature is referred to as \"feeler connections\",\n      * although in our codebase feeler connections encompass test-before-evict as well.\n-     * We make these connections approximately every FEELER_INTERVAL:\n+     * We periodically make these connections:\n      * first we resolve previously found collisions if they exist (test-before-evict),\n      * otherwise connect to a node from the new table.\n      */"
      }
    ]
  },
  {
    "sha": "69ed426924f272572c9b2f2f43bafe5ca1eadcac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWVkNDI2OTI0ZjI3MjU3MmM5YjJmMmY0M2JhZmU1Y2ExZWFkY2Fj",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-09-04T10:39:19Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-10-05T08:00:25Z"
      },
      "message": "Make feeler intervals mockable",
      "tree": {
        "sha": "f022b005fda1258dcc0247cf55e5e05816da6bfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f022b005fda1258dcc0247cf55e5e05816da6bfd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69ed426924f272572c9b2f2f43bafe5ca1eadcac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69ed426924f272572c9b2f2f43bafe5ca1eadcac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69ed426924f272572c9b2f2f43bafe5ca1eadcac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69ed426924f272572c9b2f2f43bafe5ca1eadcac/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a1c487e600c549199b9d79802ce7103ee8ede7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a1c487e600c549199b9d79802ce7103ee8ede7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a1c487e600c549199b9d79802ce7103ee8ede7f"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "4626ffc750900f20c25eacf142260d82b5ec82d7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69ed426924f272572c9b2f2f43bafe5ca1eadcac/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69ed426924f272572c9b2f2f43bafe5ca1eadcac/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=69ed426924f272572c9b2f2f43bafe5ca1eadcac",
        "patch": "@@ -1857,11 +1857,11 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         }\n     }\n \n-    // Initiate network connections\n-    int64_t nStart = GetTime();\n+    auto start_time = GetTime<std::chrono::microseconds>();\n+    // Minimum time before next feeler connection.\n+    auto next_feeler_time = PoissonNextSend(start_time, FEELER_ATTEMPT_INTERVAL);\n \n-    // Minimum time before next feeler connection (in microseconds).\n-    int64_t nNextFeeler = PoissonNextSend(nStart * 1000 * 1000, FEELER_ATTEMPT_INTERVAL);\n+    // Initiate network connections\n     while (!interruptNet)\n     {\n         ProcessAddrFetch();\n@@ -1877,7 +1877,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Note that we only do this if we started with an empty peers.dat,\n         // (in which case we will query DNS seeds immediately) *and* the DNS\n         // seeds have not returned any results.\n-        if (addrman.size() == 0 && (GetTime() - nStart > 60)) {\n+        if (addrman.size() == 0 && (GetTime<std::chrono::microseconds>() - start_time > std::chrono::seconds(60))) {\n             static bool done = false;\n             if (!done) {\n                 LogPrintf(\"Adding fixed seed nodes as DNS doesn't seem to be available.\\n\");\n@@ -1923,7 +1923,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         }\n \n         ConnectionType conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n-        int64_t nTime = GetTimeMicros();\n+        auto current_time = GetTime<std::chrono::microseconds>();\n         bool fFeeler = false;\n \n         // Determine what type of connection to open. Opening\n@@ -1941,13 +1941,13 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             conn_type = ConnectionType::BLOCK_RELAY;\n         } else if (GetTryNewOutboundPeer()) {\n             // OUTBOUND_FULL_RELAY\n-        } else if (nTime > nNextFeeler) {\n+        } else if (current_time > next_feeler_time) {\n             // We don't know whether feeler connection will be attempted in this iteration,\n             // or we will skip this candidate due to one of the pre-validation rules.\n             // Thus, we schedule the next feeler connection with a shorter interval now,\n             // but we will reschedule if for later if current candidate will be actually\n             // attempted to connect to.\n-            nNextFeeler = PoissonNextSend(nTime, FEELER_SKIP_INTERVAL);\n+            next_feeler_time = PoissonNextSend(current_time, FEELER_SKIP_INTERVAL);\n             conn_type = ConnectionType::FEELER;\n             fFeeler = true;\n         } else {\n@@ -2012,7 +2012,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         if (addrConnect.IsValid()) {\n \n             if (fFeeler) {\n-                nNextFeeler = PoissonNextSend(nTime, FEELER_ATTEMPT_INTERVAL);\n+                next_feeler_time = PoissonNextSend(current_time, FEELER_ATTEMPT_INTERVAL);\n \n                 // Add small amount of random noise before connection to avoid synchronization.\n                 int randsleep = GetRandInt(FEELER_SLEEP_WINDOW * 1000);"
      },
      {
        "sha": "82618f7987efba5dc114f69759afea38582e874a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69ed426924f272572c9b2f2f43bafe5ca1eadcac/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69ed426924f272572c9b2f2f43bafe5ca1eadcac/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=69ed426924f272572c9b2f2f43bafe5ca1eadcac",
        "patch": "@@ -52,15 +52,15 @@ static const bool DEFAULT_WHITELISTFORCERELAY = false;\n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n static const int TIMEOUT_INTERVAL = 20 * 60;\n /** Delay of the next feeler consideration if a current candidate was attempted to connect to. **/\n-static const int FEELER_ATTEMPT_INTERVAL = 120;\n+static constexpr std::chrono::minutes FEELER_ATTEMPT_INTERVAL{2};\n /**\n  * Delay of the next feeler consideration if a current candidate was not attempted to connect to.\n  * For example, if a selected feeler didn't pass pre-validation (e.g., last time it was tried was too recent),\n  * we won't even try to connect.\n  */\n-static const int FEELER_SKIP_INTERVAL = 20;\n+static constexpr std::chrono::seconds FEELER_SKIP_INTERVAL{20};\n static_assert(FEELER_ATTEMPT_INTERVAL >= FEELER_SKIP_INTERVAL,\n-\"FEELER_SKIP_INTERVAL should not exceed FEELER_ATTEMPT_INTERVAL to enforce effective feeler selection\");\n+\"FEELER_SKIP_INTERVAL should not exceed FEELER_ATTEMPT_INTERVAL to have effective feeler selection\");\n /** The maximum number of addresses from our addrman to return in response to a getaddr message. */\n static constexpr size_t MAX_ADDR_TO_SEND = 1000;\n /** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */"
      }
    ]
  },
  {
    "sha": "9feba975c1c27e4b81f38e9e1a1cd2dbe97a0cbb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmViYTk3NWMxYzI3ZTRiODFmMzhlOWUxYTFjZDJkYmU5N2EwY2Ji",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-09-04T10:46:12Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-10-05T08:00:25Z"
      },
      "message": "Drop unnecessary random noise in feeler intervals\n\nFeeler intervals are already poisson-randomized, no need\nto add extra random noise.",
      "tree": {
        "sha": "e5deb3b7a1257544f96d0d924832b252e8a8087a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5deb3b7a1257544f96d0d924832b252e8a8087a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9feba975c1c27e4b81f38e9e1a1cd2dbe97a0cbb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9feba975c1c27e4b81f38e9e1a1cd2dbe97a0cbb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9feba975c1c27e4b81f38e9e1a1cd2dbe97a0cbb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9feba975c1c27e4b81f38e9e1a1cd2dbe97a0cbb/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69ed426924f272572c9b2f2f43bafe5ca1eadcac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69ed426924f272572c9b2f2f43bafe5ca1eadcac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69ed426924f272572c9b2f2f43bafe5ca1eadcac"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "09b1a70c26e8bd2f610354ebac0f16bf0a014a03",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9feba975c1c27e4b81f38e9e1a1cd2dbe97a0cbb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9feba975c1c27e4b81f38e9e1a1cd2dbe97a0cbb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9feba975c1c27e4b81f38e9e1a1cd2dbe97a0cbb",
        "patch": "@@ -65,9 +65,6 @@ static constexpr std::chrono::seconds DNSSEEDS_DELAY_FEW_PEERS{11};\n static constexpr std::chrono::minutes DNSSEEDS_DELAY_MANY_PEERS{5};\n static constexpr int DNSSEEDS_DELAY_PEER_THRESHOLD = 1000; // \"many\" vs \"few\" peers\n \n-// We add a random period time (0 to 1 seconds) to feeler connections to prevent synchronization.\n-#define FEELER_SLEEP_WINDOW 1\n-\n // MSG_NOSIGNAL is not available on some platforms, if it doesn't exist define it as 0\n #if !defined(MSG_NOSIGNAL)\n #define MSG_NOSIGNAL 0\n@@ -2013,11 +2010,6 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n \n             if (fFeeler) {\n                 next_feeler_time = PoissonNextSend(current_time, FEELER_ATTEMPT_INTERVAL);\n-\n-                // Add small amount of random noise before connection to avoid synchronization.\n-                int randsleep = GetRandInt(FEELER_SLEEP_WINDOW * 1000);\n-                if (!interruptNet.sleep_for(std::chrono::milliseconds(randsleep)))\n-                    return;\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n "
      }
    ]
  }
]