[
  {
    "sha": "46fa880f18c9d8fd7173f35f3748ea3399819d44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmZhODgwZjE4YzlkOGZkNzE3M2YzNWYzNzQ4ZWEzMzk5ODE5ZDQ0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-04T20:42:33Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-18T17:07:42Z"
      },
      "message": "Make functions in validation.cpp static:\n\n- ReceivedBlockTransactions\n- AcceptToMemoryPoolWorker\n- AcceptToMemoryPoolWithTime\n\nalso pass Consensus::Params to them directly",
      "tree": {
        "sha": "1524c1f5344555b82ca6e77460b8d2cdd6d7da53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1524c1f5344555b82ca6e77460b8d2cdd6d7da53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46fa880f18c9d8fd7173f35f3748ea3399819d44",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY9kfeAAoJEIhmwY6hyUSiwUsP/ihxHDsVkMskA1xp0jTk7yLO\n4iPO5ysWK3FNcwO1QmJ8JmpIwFw/ATgve4xgQvSrw1g+MJkNFOd5x/2d67HJgjmb\nKmoP4hZN7L0e/eGmLNBX3gJz27m+YyYQ90ZS83WuqDh/1wIUlrcVxwa4vkW9nxaa\nOBEglOVKSS4OgVDkNi0b1T+3AiauPvxRtu/iWr8uTXNes53+fz2B4hc12C96uvv8\nqft8TefGIza1kTihZbnR+OJkS232PPfkRHfMCmPuWonEitRi4knnv+EOeB0e1qFF\nCUEI+aD5fvgYcQhhIzCm5J/l6JwF1MOIRkTyztbtc6DLv/ErQEW2THCjKk5kBfY1\nS5D/Xgp6WoGx7L4n+7RmUFKFWSBs0KNQbWbqxg9rY9SLvRc7rn0hE3Yk4+fL/EtA\nO7YJGAFPuQ23m7T1vBfu5NBcU9Dbt/jLQrZzgaVlLrQXlOd4dKyBYfggXeWLNnG/\nzaK+Cu6rHwcO3oGOsaCY3gVOR5Q+BhxphsGzzXjg1qqfdwGxPlclzJpq9j8xP7cV\njKGLD5IKC2E2MXMv8X+ZgeokTfCd7bynY4jexW0QqjtmvJc9rj6HSQZOXIbzfBH4\nPw2evbdMwbXldTCq36W8LmXDgseSb950HQ5ZjRSgoHjwDGUQLLy7ucdx9axlGme5\nOJljaruzWn10pI/YMi6T\n=tFNg\n-----END PGP SIGNATURE-----",
        "payload": "tree 1524c1f5344555b82ca6e77460b8d2cdd6d7da53\nparent 9111df9673beb6d6616d491a5478f09b5f14d040\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1491338553 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1492535262 +0200\n\nMake functions in validation.cpp static:\n\n- ReceivedBlockTransactions\n- AcceptToMemoryPoolWorker\n- AcceptToMemoryPoolWithTime\n\nalso pass Consensus::Params to them directly\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46fa880f18c9d8fd7173f35f3748ea3399819d44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46fa880f18c9d8fd7173f35f3748ea3399819d44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46fa880f18c9d8fd7173f35f3748ea3399819d44/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9111df9673beb6d6616d491a5478f09b5f14d040",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9111df9673beb6d6616d491a5478f09b5f14d040",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9111df9673beb6d6616d491a5478f09b5f14d040"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 14,
      "deletions": 16
    },
    "files": [
      {
        "sha": "ba63bc3e8f9afe6ddbd0bc80c9086d51668c36ad",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 11,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46fa880f18c9d8fd7173f35f3748ea3399819d44/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46fa880f18c9d8fd7173f35f3748ea3399819d44/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=46fa880f18c9d8fd7173f35f3748ea3399819d44",
        "patch": "@@ -537,7 +537,7 @@ static bool IsCurrentForFeeEstimation()\n     return true;\n }\n \n-bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,\n+static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n                               bool fOverrideMempoolLimit, const CAmount& nAbsurdFee, std::vector<uint256>& vHashTxnToUncache)\n {\n@@ -555,7 +555,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         return state.DoS(100, false, REJECT_INVALID, \"coinbase\");\n \n     // Reject transactions with witness before segregated witness activates (override with -prematurewitness)\n-    bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus());\n+    bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus());\n     if (!GetBoolArg(\"-prematurewitness\",false) && tx.HasWitness() && !witnessEnabled) {\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n     }\n@@ -884,7 +884,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n \n         unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n-        if (!Params().RequireStandard()) {\n+        if (!chainparams.RequireStandard()) {\n             scriptVerifyFlags = GetArg(\"-promiscuousmempoolflags\", scriptVerifyFlags);\n         }\n \n@@ -954,12 +954,13 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     return true;\n }\n \n-bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n+/** (try to) add transaction to memory pool with a specified acceptance time **/\n+static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n                         bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n     std::vector<uint256> vHashTxToUncache;\n-    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, nAcceptTime, plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n+    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, fLimitFree, pfMissingInputs, nAcceptTime, plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n     if (!res) {\n         BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)\n             pcoinsTip->Uncache(hashTx);\n@@ -974,7 +975,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n                         bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n-    return AcceptToMemoryPoolWithTime(pool, state, tx, fLimitFree, pfMissingInputs, GetTime(), plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee);\n+    const CChainParams& chainparams = Params();\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, fLimitFree, pfMissingInputs, GetTime(), plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee);\n }\n \n /** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n@@ -2677,15 +2679,15 @@ CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n }\n \n /** Mark a block as having its data received and checked (up to BLOCK_VALID_TRANSACTIONS). */\n-bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos)\n+static bool ReceivedBlockTransactions(const Consensus::Params& consensusParams, const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos)\n {\n     pindexNew->nTx = block.vtx.size();\n     pindexNew->nChainTx = 0;\n     pindexNew->nFile = pos.nFile;\n     pindexNew->nDataPos = pos.nPos;\n     pindexNew->nUndoPos = 0;\n     pindexNew->nStatus |= BLOCK_HAVE_DATA;\n-    if (IsWitnessEnabled(pindexNew->pprev, Params().GetConsensus())) {\n+    if (IsWitnessEnabled(pindexNew->pprev, consensusParams)) {\n         pindexNew->nStatus |= BLOCK_OPT_WITNESS;\n     }\n     pindexNew->RaiseValidity(BLOCK_VALID_TRANSACTIONS);\n@@ -3207,7 +3209,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n                 AbortNode(state, \"Failed to write block\");\n-        if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n+        if (!ReceivedBlockTransactions(chainparams.GetConsensus(), block, state, pindex, blockPos))\n             return error(\"AcceptBlock(): ReceivedBlockTransactions failed\");\n     } catch (const std::runtime_error& e) {\n         return AbortNode(state, std::string(\"System error: \") + e.what());\n@@ -3838,7 +3840,7 @@ bool InitBlockIndex(const CChainParams& chainparams)\n             if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n                 return error(\"LoadBlockIndex(): writing genesis block to disk failed\");\n             CBlockIndex *pindex = AddToBlockIndex(block);\n-            if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n+            if (!ReceivedBlockTransactions(chainparams.GetConsensus(), block, state, pindex, blockPos))\n                 return error(\"LoadBlockIndex(): genesis block not accepted\");\n             // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n             return FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n@@ -4177,6 +4179,7 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n \n bool LoadMempool(void)\n {\n+    const CChainParams& chainparams = Params();\n     int64_t nExpiryTimeout = GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n     FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat\", \"rb\");\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n@@ -4213,7 +4216,7 @@ bool LoadMempool(void)\n             CValidationState state;\n             if (nTime + nExpiryTimeout > nNow) {\n                 LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(mempool, state, tx, true, NULL, nTime);\n+                AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, true, NULL, nTime, NULL, false, 0);\n                 if (state.IsValid()) {\n                     ++count;\n                 } else {"
      },
      {
        "sha": "9f9a0a227bf7bc8588f06180b32dcd52fe4df6ed",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46fa880f18c9d8fd7173f35f3748ea3399819d44/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46fa880f18c9d8fd7173f35f3748ea3399819d44/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=46fa880f18c9d8fd7173f35f3748ea3399819d44",
        "patch": "@@ -322,11 +322,6 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced = NULL,\n                         bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n \n-/** (try to) add transaction to memory pool with a specified acceptance time **/\n-bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced = NULL,\n-                        bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n-\n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);\n "
      }
    ]
  },
  {
    "sha": "8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTc2ZjU3MjYxZDFiZWE4MmZmZWQ4YWQzZjZjZDY2N2JjMWIxOWI0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-11-07T22:31:55Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-18T17:10:44Z"
      },
      "message": "Globals: Pass Consensus::Params through CBlockTreeDB::LoadBlockIndexGuts()",
      "tree": {
        "sha": "ccdd61e80a14c8015717592c9c839d0d3ee3f39c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccdd61e80a14c8015717592c9c839d0d3ee3f39c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY9kiUAAoJEIhmwY6hyUSihVwP/A5vuMzr3XdMdSllypf+TK/M\n6CuebOV88RoOAMSpBG7oFllnFVZXvLks+EnZJ6Oc0LfkeTY1AUcpW3BRyHqJwwKr\nT0acjtIGhwwMd08fsFraSXyFjf+Xdtqsk3mDem82GwPQoxy/9fwdWj7KrqIejq7X\nR/kYRiyZlpk1r9BgtQx0t4i91H7iWpYBgT9tr8WupgN9G8lh6AC84VDR3PQMXCUB\n3q0s9IrplYXn7kUxY2RQfFWZKiNdidTBN+0nFP/VQI/7rM2V/VTzxXbA7K5Qj+IV\nXhTv+S1UGYNCBzogKETDLzg+4M4oKphGuNu7muPl0J9QlHViZ3sD+y6FSIx+xmp+\nBeOhe1zPqdqq9bECxfYDjrYNacrRe6ItJAtIZNP4cMn6aW5R7KoYZZ+3ook8tqeV\nVH2aGHraTa5bMEqDCeYFUBYsCSvGSP/z2YCiBsqCDOBh3J72prTgXKJ6FjmBxn+v\nVl1ndWRPjZBnJNBP00nInmVaEDZ1QjO24kZwYeAbqiaOk4KRvWlzlPSvrPnJC6AZ\nk9ZD4Xcpq4kJJK0avPGEjlVhsm5XG/8WlTYDxoy/tqT/HzRm1hskYkzl1fVbXiSK\nCPZ6fkxNxbhEHkYI/S615AoCx30sf2We3Zc+2//oX8vgker2OWoKUBoacOvKACmY\ngQkB7MNJckKZ90yUptDg\n=E4L1\n-----END PGP SIGNATURE-----",
        "payload": "tree ccdd61e80a14c8015717592c9c839d0d3ee3f39c\nparent 46fa880f18c9d8fd7173f35f3748ea3399819d44\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1478557915 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1492535444 +0200\n\nGlobals: Pass Consensus::Params through CBlockTreeDB::LoadBlockIndexGuts()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46fa880f18c9d8fd7173f35f3748ea3399819d44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46fa880f18c9d8fd7173f35f3748ea3399819d44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46fa880f18c9d8fd7173f35f3748ea3399819d44"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "508aaf472bfaef1bd6d285335d57dfee0eb2a3f0",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4",
        "patch": "@@ -169,7 +169,7 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n     return true;\n }\n \n-bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256&)> insertBlockIndex)\n+bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams, boost::function<CBlockIndex*(const uint256&)> insertBlockIndex)\n {\n     std::unique_ptr<CDBIterator> pcursor(NewIterator());\n \n@@ -197,8 +197,8 @@ bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n-                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, Params().GetConsensus()))\n-                    return error(\"LoadBlockIndex(): CheckProofOfWork failed: %s\", pindexNew->ToString());\n+                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, consensusParams))\n+                    return error(\"%s: CheckProofOfWork failed: %s\", __func__, pindexNew->ToString());\n \n                 pcursor->Next();\n             } else {"
      },
      {
        "sha": "aa33a94ce75d28ebf46ef00e5eb5ab6cb864aecb",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4",
        "patch": "@@ -122,7 +122,7 @@ class CBlockTreeDB : public CDBWrapper\n     bool WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> > &list);\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n-    bool LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n+    bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, boost::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n };\n \n #endif // BITCOIN_TXDB_H"
      },
      {
        "sha": "d114e8e346ac7a76be3d53123f615b74e1316093",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4",
        "patch": "@@ -3482,7 +3482,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n \n bool static LoadBlockIndexDB(const CChainParams& chainparams)\n {\n-    if (!pblocktree->LoadBlockIndexGuts(InsertBlockIndex))\n+    if (!pblocktree->LoadBlockIndexGuts(chainparams.GetConsensus(), InsertBlockIndex))\n         return false;\n \n     boost::this_thread::interruption_point();"
      }
    ]
  },
  {
    "sha": "4fc1544309e370f47057381f6f5b0cf5b17ab614",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmMxNTQ0MzA5ZTM3MGY0NzA1NzM4MWY2ZjViMGNmNWIxN2FiNjE0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-04T22:05:26Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-18T17:14:05Z"
      },
      "message": "Wallet: Pass Consensus::Params and ChainTxData to:\n\n- CWallet::ScanForWalletTransactions\n- CWallet::CreateWalletFromFile and InitLoadWallet\n\nalso make CWallet::CreateWalletFromFile private",
      "tree": {
        "sha": "de33b0ce9aeb532bb009beb285bc8f4d97ad0246",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de33b0ce9aeb532bb009beb285bc8f4d97ad0246"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fc1544309e370f47057381f6f5b0cf5b17ab614",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY9kldAAoJEIhmwY6hyUSi8f4P/2hSbH4h1Nhqiw+9+PR40mmT\nyA0gDT4vyncgLqGwa9m4wwXygTiLsf3RfpqiWmlYWlSLqkUcoiHXto/XbcQssXbc\n3PNXg9phmrK3UeC2vyT1rvPEpkSQqlaVTOdnhjHyRpxacmhtdParQHJqu1PWvXrX\n5L6/mYzia5slMwvo+BEcHYe5Pgjlg/RA8uToZ+Zepigo4hadE5jin250aN+SvNx3\n1603acRmZQZ5H7EEharq0LGSiX0apl6R9e9YtLzyxdUoumjsMJov5lBi3m7oRnxt\nJ2nJ67meGXiG1jOUurNeEWjpk/pZu+Kj2R412sZ3pznw9rPGChFINgcBmPSJGVmR\n2cS/VabxlUf+IP6nYOaTFDg90j9aLcUsbsjwyIyXAJJ+Mg59fZ7vpC8al7SipYcQ\nauxORWFqL5yyZWMoR8UMmuWV2U4f7SebMUs70OLsuuLgC+lzHDw281zoQchz0RVU\n/sZMqbnC9K9Vg5sitLKMce6EKBREB81zOpaYMP/KPx1SAC/ZKMrjOC0O44Kei/1i\nVmiNJ7qGslaN/aRyfxBOK86hazZ5ehqnD2OKQSQeQ3UVqeK0ojqdLmKH7yK3gWod\nQ1WPmbgk1s95CWivwGg6thsJ0tgSyfj9HgkJgmxmWDpPL6cP8ilL6yZv+RnaKioN\nGOcYuR3pqhWr0rcqYMtj\n=Sc9H\n-----END PGP SIGNATURE-----",
        "payload": "tree de33b0ce9aeb532bb009beb285bc8f4d97ad0246\nparent 8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1491343526 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1492535645 +0200\n\nWallet: Pass Consensus::Params and ChainTxData to:\n\n- CWallet::ScanForWalletTransactions\n- CWallet::CreateWalletFromFile and InitLoadWallet\n\nalso make CWallet::CreateWalletFromFile private\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fc1544309e370f47057381f6f5b0cf5b17ab614",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4fc1544309e370f47057381f6f5b0cf5b17ab614",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fc1544309e370f47057381f6f5b0cf5b17ab614/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a76f57261d1bea82ffed8ad3f6cd667bc1b19b4"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 30,
      "deletions": 25
    },
    "files": [
      {
        "sha": "d7e17c59d9bd01607101bb4fca3e7c56b6a76056",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fc1544309e370f47057381f6f5b0cf5b17ab614/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fc1544309e370f47057381f6f5b0cf5b17ab614/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4fc1544309e370f47057381f6f5b0cf5b17ab614",
        "patch": "@@ -1555,7 +1555,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // ********************************************************* Step 8: load wallet\n #ifdef ENABLE_WALLET\n-    if (!CWallet::InitLoadWallet())\n+    if (!CWallet::InitLoadWallet(chainparams.GetConsensus(), chainparams.TxData()))\n         return false;\n #else\n     LogPrintf(\"No wallet support compiled in!\\n\");"
      },
      {
        "sha": "ace856f4b62db39c81519eaa48e8d4bd0efc6feb",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fc1544309e370f47057381f6f5b0cf5b17ab614/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fc1544309e370f47057381f6f5b0cf5b17ab614/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=4fc1544309e370f47057381f6f5b0cf5b17ab614",
        "patch": "@@ -84,6 +84,7 @@ void WalletTests::walletTests()\n {\n     // Set up wallet and chain with 101 blocks (1 mature block for spending).\n     TestChain100Setup test;\n+    const CChainParams& chainParams = Params();\n     test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     bitdb.MakeMock();\n     CWallet wallet(\"wallet_test.dat\");\n@@ -94,7 +95,7 @@ void WalletTests::walletTests()\n         wallet.SetAddressBook(test.coinbaseKey.GetPubKey().GetID(), \"\", \"receive\");\n         wallet.AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n     }\n-    wallet.ScanForWalletTransactions(chainActive.Genesis(), true);\n+    wallet.ScanForWalletTransactions(chainParams.GetConsensus(), chainParams.TxData(), chainActive.Genesis(), true);\n     wallet.SetBroadcastTransactions(true);\n \n     // Create widgets for sending coins and listing transactions."
      },
      {
        "sha": "7ec6fa49ee5b88eafe6ba216d8b6a61620e1c9e6",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fc1544309e370f47057381f6f5b0cf5b17ab614/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fc1544309e370f47057381f6f5b0cf5b17ab614/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=4fc1544309e370f47057381f6f5b0cf5b17ab614",
        "patch": "@@ -149,7 +149,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         pwallet->UpdateTimeFirstKey(1);\n \n         if (fRescan) {\n-            pwallet->ScanForWalletTransactions(chainActive.Genesis(), true);\n+            pwallet->ScanForWalletTransactions(Params().GetConsensus(), Params().TxData(), chainActive.Genesis(), true);\n         }\n     }\n \n@@ -279,7 +279,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n \n     if (fRescan)\n     {\n-        pwallet->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwallet->ScanForWalletTransactions(Params().GetConsensus(), Params().TxData(), chainActive.Genesis(), true);\n         pwallet->ReacceptWalletTransactions();\n     }\n \n@@ -437,7 +437,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n     if (fRescan)\n     {\n-        pwallet->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwallet->ScanForWalletTransactions(Params().GetConsensus(), Params().TxData(), chainActive.Genesis(), true);\n         pwallet->ReacceptWalletTransactions();\n     }\n \n@@ -544,7 +544,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n     pwallet->UpdateTimeFirstKey(nTimeBegin);\n \n     LogPrintf(\"Rescanning last %i blocks\\n\", chainActive.Height() - pindex->nHeight + 1);\n-    pwallet->ScanForWalletTransactions(pindex);\n+    pwallet->ScanForWalletTransactions(Params().GetConsensus(), Params().TxData(), pindex);\n     pwallet->MarkDirty();\n \n     if (!fGood)\n@@ -1123,7 +1123,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(std::max<int64_t>(nLowestTimestamp - TIMESTAMP_WINDOW, 0)) : chainActive.Genesis();\n         CBlockIndex* scannedRange = nullptr;\n         if (pindex) {\n-            scannedRange = pwallet->ScanForWalletTransactions(pindex, true);\n+            scannedRange = pwallet->ScanForWalletTransactions(Params().GetConsensus(), Params().TxData(), pindex, true);\n             pwallet->ReacceptWalletTransactions();\n         }\n "
      },
      {
        "sha": "01485cea8396588bc8cdaa58bb3e19444e1d46b9",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fc1544309e370f47057381f6f5b0cf5b17ab614/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fc1544309e370f47057381f6f5b0cf5b17ab614/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=4fc1544309e370f47057381f6f5b0cf5b17ab614",
        "patch": "@@ -9,6 +9,7 @@\n #include <utility>\n #include <vector>\n \n+#include \"chainparams.h\"\n #include \"rpc/server.h\"\n #include \"test/test_bitcoin.h\"\n #include \"validation.h\"\n@@ -361,6 +362,7 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n \n BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n {\n+    const CChainParams& chainParams = Params();\n     LOCK(cs_main);\n \n     // Cap last block file size, and mine new block in a new block file.\n@@ -375,7 +377,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n         CWallet wallet;\n         LOCK(wallet.cs_wallet);\n         wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n-        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip));\n+        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(chainParams.GetConsensus(), chainParams.TxData(), oldTip));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n     }\n \n@@ -389,7 +391,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n         CWallet wallet;\n         LOCK(wallet.cs_wallet);\n         wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n-        BOOST_CHECK_EQUAL(newTip, wallet.ScanForWalletTransactions(oldTip));\n+        BOOST_CHECK_EQUAL(newTip, wallet.ScanForWalletTransactions(chainParams.GetConsensus(), chainParams.TxData(), oldTip));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n     }\n "
      },
      {
        "sha": "fabc8a1212d2d7d60baedba41088a7ab7e52ebe1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fc1544309e370f47057381f6f5b0cf5b17ab614/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fc1544309e370f47057381f6f5b0cf5b17ab614/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4fc1544309e370f47057381f6f5b0cf5b17ab614",
        "patch": "@@ -1545,11 +1545,10 @@ void CWalletTx::GetAccountAmounts(const std::string& strAccount, CAmount& nRecei\n  * successfully scanned.\n  *\n  */\n-CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n+CBlockIndex* CWallet::ScanForWalletTransactions(const Consensus::Params& consensusParams, const ChainTxData& chainTxData, CBlockIndex* pindexStart, bool fUpdate)\n {\n     CBlockIndex* ret = nullptr;\n     int64_t nNow = GetTime();\n-    const CChainParams& chainParams = Params();\n \n     CBlockIndex* pindex = pindexStart;\n     {\n@@ -1563,15 +1562,15 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n             pindex = chainActive.Next(pindex);\n \n         ShowProgress(_(\"Rescanning...\"), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        double dProgressStart = GuessVerificationProgress(chainParams.TxData(), pindex);\n-        double dProgressTip = GuessVerificationProgress(chainParams.TxData(), chainActive.Tip());\n+        double dProgressStart = GuessVerificationProgress(chainTxData, pindex);\n+        double dProgressTip = GuessVerificationProgress(chainTxData, chainActive.Tip());\n         while (pindex && !fAbortRescan)\n         {\n             if (pindex->nHeight % 100 == 0 && dProgressTip - dProgressStart > 0.0)\n-                ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((GuessVerificationProgress(chainParams.TxData(), pindex) - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n+                ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((GuessVerificationProgress(chainTxData, pindex) - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n \n             CBlock block;\n-            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n+            if (ReadBlockFromDisk(block, pindex, consensusParams)) {\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n                     AddToWalletIfInvolvingMe(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n                 }\n@@ -1584,11 +1583,11 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n             pindex = chainActive.Next(pindex);\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n+                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainTxData, pindex));\n             }\n         }\n         if (pindex && fAbortRescan) {\n-            LogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n+            LogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainTxData, pindex));\n         }\n         ShowProgress(_(\"Rescanning...\"), 100); // hide progress dialog in GUI\n \n@@ -3696,7 +3695,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     return strUsage;\n }\n \n-CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n+CWallet* CWallet::CreateWalletFromFile(const Consensus::Params& consensusParams, const ChainTxData& chainTxData, const std::string walletFile)\n {\n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;\n@@ -3835,7 +3834,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         uiInterface.InitMessage(_(\"Rescanning...\"));\n         LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n         nStart = GetTimeMillis();\n-        walletInstance->ScanForWalletTransactions(pindexRescan, true);\n+        walletInstance->ScanForWalletTransactions(consensusParams, chainTxData, pindexRescan, true);\n         LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n         walletInstance->SetBestChain(chainActive.GetLocator());\n         CWalletDB::IncrementUpdateCounter();\n@@ -3877,7 +3876,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     return walletInstance;\n }\n \n-bool CWallet::InitLoadWallet()\n+bool CWallet::InitLoadWallet(const Consensus::Params& consensusParams, const ChainTxData& chainTxData)\n {\n     if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n         pwalletMain = NULL;\n@@ -3893,7 +3892,7 @@ bool CWallet::InitLoadWallet()\n         return InitError(_(\"Invalid characters in -wallet filename\"));\n     }\n \n-    CWallet * const pwallet = CreateWalletFromFile(walletFile);\n+    CWallet * const pwallet = CreateWalletFromFile(consensusParams, chainTxData, walletFile);\n     if (!pwallet) {\n         return false;\n     }"
      },
      {
        "sha": "debcfba66aa67722595d017dcef9b6a7e54689b8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fc1544309e370f47057381f6f5b0cf5b17ab614/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fc1544309e370f47057381f6f5b0cf5b17ab614/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=4fc1544309e370f47057381f6f5b0cf5b17ab614",
        "patch": "@@ -66,8 +66,10 @@ static const bool DEFAULT_USE_HD_WALLET = true;\n \n extern const char * DEFAULT_WALLET_DAT;\n \n+namespace Consensus { struct Params; };\n class CBlockIndex;\n class CCoinControl;\n+class ChainTxData;\n class COutput;\n class CReserveKey;\n class CScript;\n@@ -719,6 +721,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     // the next block comes in\n     uint256 hashPrevBestCoinbase;\n \n+    /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n+    static CWallet* CreateWalletFromFile(const Consensus::Params& consensusParams, const ChainTxData& chainTxData, const std::string walletFile);\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -897,7 +902,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n-    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n+    CBlockIndex* ScanForWalletTransactions(const Consensus::Params& consensusParams, const ChainTxData& chainTxData, CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);\n@@ -1070,9 +1075,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* Returns the wallets help message */\n     static std::string GetWalletHelpString(bool showDebug);\n \n-    /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static CWallet* CreateWalletFromFile(const std::string walletFile);\n-    static bool InitLoadWallet();\n+    static bool InitLoadWallet(const Consensus::Params& consensusParams, const ChainTxData& chainTxData);\n \n     /**\n      * Wallet post-init setup"
      }
    ]
  },
  {
    "sha": "557fc7bb8246d2b2ea8799e2ca83e10986574f1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTdmYzdiYjgyNDZkMmIyZWE4Nzk5ZTJjYTgzZTEwOTg2NTc0ZjFl",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-05T00:49:20Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-18T17:14:06Z"
      },
      "message": "Pass CChainParams to AcceptToMemoryPool (both)\n\nBoth validation::AcceptToMemoryPool() and CMerkleTx::AcceptToMemoryPool",
      "tree": {
        "sha": "2ab465c6371335e7003d3cf5b125f9348909e179",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ab465c6371335e7003d3cf5b125f9348909e179"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/557fc7bb8246d2b2ea8799e2ca83e10986574f1e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY9kleAAoJEIhmwY6hyUSiwPQP/0OdNqz6v5Re3ZU4nIALpdfj\neBnCVqw3Qiq+SXcrqcx6UwkygvAum4dN6spDfX7IGhCN+oNpc5lkH7cTcJdJSSRU\nOnfaZSM6yv4R1h17EG3aqH+pGeP+3ATjtX1GK3AUDGjdUllIlsUkTnSmid3CrQNl\nUSML87CFw9S6BHRLy5C357lOKd6g82B0eVHRN7HKcmF9NV9Scda4wLh27QMxVuF6\nNUoJS8BqilmTl0CNfqKelZ6NAPzdTF2VaP4sm6lz98tzkX51q49ZKpYyCXs4sAVd\nOXR4XWxsm4XTbtZ9XHTt53rW/yp8wYLaCdjQSA4uFRdabjbYiX3BrZ6hbcmyQ8D7\n4fyomZpy1pWi1g8hD/VUs1jhTO1U9T/S9uMgYsjxT6aPq5IYquBmBkBIZmVHIbwI\ntFdZ+LishUvn2K4deXMCLzrlR7l6qh8+20mzmRz+FcEliGTi4JvotdaE4y1iEUXi\n1otVFqKhO9vLjzjnQSer3eY8glHzfe0xdz+sk1+/e5RYHqWecNpUxm/gTSYiaLWP\nRSVre1mrFBZU0SdOmCeu9pVOVGklhIrmWxlAFeLk7SjThEN9bNgYJaenQdRQX1Kl\n5EldQ2ZXEcOccHAQGPKzI1LUISQVbzeJGfuGJ7JbuSv8mkgkFEEps7jbuemBiVS7\nAqweQnjWlKT2kLzujidI\n=XEdJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 2ab465c6371335e7003d3cf5b125f9348909e179\nparent 4fc1544309e370f47057381f6f5b0cf5b17ab614\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1491353360 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1492535646 +0200\n\nPass CChainParams to AcceptToMemoryPool (both)\n\nBoth validation::AcceptToMemoryPool() and CMerkleTx::AcceptToMemoryPool\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557fc7bb8246d2b2ea8799e2ca83e10986574f1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/557fc7bb8246d2b2ea8799e2ca83e10986574f1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557fc7bb8246d2b2ea8799e2ca83e10986574f1e/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fc1544309e370f47057381f6f5b0cf5b17ab614",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fc1544309e370f47057381f6f5b0cf5b17ab614",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fc1544309e370f47057381f6f5b0cf5b17ab614"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 18,
      "deletions": 14
    },
    "files": [
      {
        "sha": "e58bc1e17b5553272d99958e4052cfded5246e73",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557fc7bb8246d2b2ea8799e2ca83e10986574f1e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557fc7bb8246d2b2ea8799e2ca83e10986574f1e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=557fc7bb8246d2b2ea8799e2ca83e10986574f1e",
        "patch": "@@ -1818,7 +1818,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         std::list<CTransactionRef> lRemovedTxn;\n \n-        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, ptx, true, &fMissingInputs, &lRemovedTxn)) {\n+        if (!AlreadyHave(inv) && AcceptToMemoryPool(chainparams, mempool, state, ptx, true, &fMissingInputs, &lRemovedTxn)) {\n             mempool.check(pcoinsTip);\n             RelayTransaction(tx, connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n@@ -1856,7 +1856,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n                     if (setMisbehaving.count(fromPeer))\n                         continue;\n-                    if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, true, &fMissingInputs2, &lRemovedTxn)) {\n+                    if (AcceptToMemoryPool(chainparams, mempool, stateDummy, porphanTx, true, &fMissingInputs2, &lRemovedTxn)) {\n                         LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx, connman);\n                         for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {"
      },
      {
        "sha": "4b977bb71df5022a3d9f80e97ee7199e444a980f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557fc7bb8246d2b2ea8799e2ca83e10986574f1e/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557fc7bb8246d2b2ea8799e2ca83e10986574f1e/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=557fc7bb8246d2b2ea8799e2ca83e10986574f1e",
        "patch": "@@ -908,7 +908,7 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         // push to local node and sync with wallets\n         CValidationState state;\n         bool fMissingInputs;\n-        if (!AcceptToMemoryPool(mempool, state, std::move(tx), fLimitFree, &fMissingInputs, NULL, false, nMaxRawTxFee)) {\n+        if (!AcceptToMemoryPool(Params(), mempool, state, std::move(tx), fLimitFree, &fMissingInputs, NULL, false, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n             } else {"
      },
      {
        "sha": "81fac14cb17ae70942148b1cb7f44403eaffb595",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557fc7bb8246d2b2ea8799e2ca83e10986574f1e/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557fc7bb8246d2b2ea8799e2ca83e10986574f1e/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=557fc7bb8246d2b2ea8799e2ca83e10986574f1e",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"validation.h\"\n@@ -23,7 +24,7 @@ ToMemPool(CMutableTransaction& tx)\n     LOCK(cs_main);\n \n     CValidationState state;\n-    return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), false, NULL, NULL, true, 0);\n+    return AcceptToMemoryPool(Params(), mempool, state, MakeTransactionRef(tx), false, NULL, NULL, true, 0);\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "277b1f1ed7fc07894b7cfe52520057441995fee5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557fc7bb8246d2b2ea8799e2ca83e10986574f1e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557fc7bb8246d2b2ea8799e2ca83e10986574f1e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=557fc7bb8246d2b2ea8799e2ca83e10986574f1e",
        "patch": "@@ -971,11 +971,10 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n     return res;\n }\n \n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n+bool AcceptToMemoryPool(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n                         bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n-    const CChainParams& chainparams = Params();\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, fLimitFree, pfMissingInputs, GetTime(), plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee);\n }\n \n@@ -2148,7 +2147,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n             const CTransaction& tx = *it;\n             // ignore validation errors in resurrected transactions\n             CValidationState stateDummy;\n-            if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, it, false, NULL, NULL, true)) {\n+            if (tx.IsCoinBase() || !AcceptToMemoryPool(chainparams, mempool, stateDummy, it, false, NULL, NULL, true)) {\n                 mempool.removeRecursive(tx, MemPoolRemovalReason::REORG);\n             } else if (mempool.exists(tx.GetHash())) {\n                 vHashUpdate.push_back(tx.GetHash());"
      },
      {
        "sha": "f6f7281b3a2794820a15be76c2da6810929cc633",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557fc7bb8246d2b2ea8799e2ca83e10986574f1e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557fc7bb8246d2b2ea8799e2ca83e10986574f1e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=557fc7bb8246d2b2ea8799e2ca83e10986574f1e",
        "patch": "@@ -318,7 +318,7 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n \n /** (try to) add transaction to memory pool\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n+bool AcceptToMemoryPool(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced = NULL,\n                         bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n "
      },
      {
        "sha": "851607566dd50e3b9120c947174839cf56eb9816",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557fc7bb8246d2b2ea8799e2ca83e10986574f1e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557fc7bb8246d2b2ea8799e2ca83e10986574f1e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=557fc7bb8246d2b2ea8799e2ca83e10986574f1e",
        "patch": "@@ -1598,6 +1598,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(const Consensus::Params& consens\n \n void CWallet::ReacceptWalletTransactions()\n {\n+    const CChainParams& chainparams = Params();\n     // If transactions aren't being broadcasted, don't let them into local mempool either\n     if (!fBroadcastTransactions)\n         return;\n@@ -1625,18 +1626,19 @@ void CWallet::ReacceptWalletTransactions()\n \n         LOCK(mempool.cs);\n         CValidationState state;\n-        wtx.AcceptToMemoryPool(maxTxFee, state);\n+        wtx.AcceptToMemoryPool(chainparams, maxTxFee, state);\n     }\n }\n \n bool CWalletTx::RelayWalletTransaction(CConnman* connman)\n {\n+    const CChainParams& chainparams = Params();\n     assert(pwallet->GetBroadcastTransactions());\n     if (!IsCoinBase() && !isAbandoned() && GetDepthInMainChain() == 0)\n     {\n         CValidationState state;\n         /* GetDepthInMainChain already catches known conflicts. */\n-        if (InMempool() || AcceptToMemoryPool(maxTxFee, state)) {\n+        if (InMempool() || AcceptToMemoryPool(chainparams, maxTxFee, state)) {\n             LogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n             if (connman) {\n                 CInv inv(MSG_TX, GetHash());\n@@ -2745,6 +2747,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n  */\n bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman, CValidationState& state)\n {\n+    const CChainParams& chainparams = Params();\n     {\n         LOCK2(cs_main, cs_wallet);\n         LogPrintf(\"CommitTransaction:\\n%s\", wtxNew.tx->ToString());\n@@ -2771,7 +2774,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n         if (fBroadcastTransactions)\n         {\n             // Broadcast\n-            if (!wtxNew.AcceptToMemoryPool(maxTxFee, state)) {\n+            if (!wtxNew.AcceptToMemoryPool(chainparams, maxTxFee, state)) {\n                 LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", state.GetRejectReason());\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n@@ -4091,7 +4094,7 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n+bool CMerkleTx::AcceptToMemoryPool(const CChainParams& chainparams, const CAmount& nAbsurdFee, CValidationState& state)\n {\n-    return ::AcceptToMemoryPool(mempool, state, tx, true, NULL, NULL, false, nAbsurdFee);\n+    return ::AcceptToMemoryPool(chainparams, mempool, state, tx, true, NULL, NULL, false, nAbsurdFee);\n }"
      },
      {
        "sha": "e73e1c466f38eb3fb8736fa32696d6af7109f3d6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557fc7bb8246d2b2ea8799e2ca83e10986574f1e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557fc7bb8246d2b2ea8799e2ca83e10986574f1e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=557fc7bb8246d2b2ea8799e2ca83e10986574f1e",
        "patch": "@@ -68,6 +68,7 @@ extern const char * DEFAULT_WALLET_DAT;\n \n namespace Consensus { struct Params; };\n class CBlockIndex;\n+class CChainParams;\n class CCoinControl;\n class ChainTxData;\n class COutput;\n@@ -249,7 +250,7 @@ class CMerkleTx\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state);\n+    bool AcceptToMemoryPool(const CChainParams& chainparams, const CAmount& nAbsurdFee, CValidationState& state);\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n     void setAbandoned() { hashBlock = ABANDON_HASH; }"
      }
    ]
  },
  {
    "sha": "d859f3f62af5ae79da4d42080e6c5d2bacd6b471",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODU5ZjNmNjJhZjVhZTc5ZGE0ZDQyMDgwZTZjNWQyYmFjZDZiNDcx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-05T01:24:41Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-18T17:14:07Z"
      },
      "message": "Pass CChainParams to CWallet::ReacceptWalletTransactions",
      "tree": {
        "sha": "fae418388b1bd243a45d2037322933f49bf4809b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fae418388b1bd243a45d2037322933f49bf4809b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d859f3f62af5ae79da4d42080e6c5d2bacd6b471",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY9klfAAoJEIhmwY6hyUSibwkQAOX/0vv76bI3LsWlbu3HN9cA\nB/r/TKuV13T7ulkIdKUXSzYBMKfI5PQjQJ7ghoyihojn3KxKqrZheCewAQQoMHlo\njscYTwlck/KWz0Ugs++xtTiXTObiZ2E+ViBLtxa3Dk+LSENWUdpnTX/C/bunmT2g\nNrP1Mus3Qoq6VgVJsD2kY/NdaPCA8LFlpOBmI7pP3S5tH28lJJU/xcKlZVq1JK1J\n8EBOJjgAkOP38vYB7Ktfe0wh4HZWlpv/CQeuLCuk7zPDg8PincTmJ0IXwuxNf9iq\nlIUtzkMhricU+S1FcNS/IToQ8NimnrLqAEG4v3bwENR0mJN/Y5N+oR3yRAeBPZI3\nTwLXyZlAIA4d1MBzeTiwM3x67LRLmDSbKqnaCeo/1NqXypFyo5nEYXBcSxzn20fP\ni0gHoPYgCBqX1ZBBFuH3cUg3i5JFFcwD18Izm9TFGnUrrnjD0sytwKnTvN2GemHB\neETHB0ljcVJzdolQgOomkiEcEQmK72Yfd6FiY9Q+1TftCUWoL1Yht78IGKmPgrQn\nPOU6PVEvs0i4LB2doy6fBaV7RNNd2TmKSR0zICeT3UrF0kvf5CSrDUOa2GtPCe5K\nUc9L2gErrS5cOYNtcldE8arPOn6wxChODyrJOHzxHEoAN7FJAkOpA8V8CHYT5gOJ\nB1cBCqDWPFuyBjp6B6+s\n=Gtyo\n-----END PGP SIGNATURE-----",
        "payload": "tree fae418388b1bd243a45d2037322933f49bf4809b\nparent 557fc7bb8246d2b2ea8799e2ca83e10986574f1e\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1491355481 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1492535647 +0200\n\nPass CChainParams to CWallet::ReacceptWalletTransactions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d859f3f62af5ae79da4d42080e6c5d2bacd6b471",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d859f3f62af5ae79da4d42080e6c5d2bacd6b471",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d859f3f62af5ae79da4d42080e6c5d2bacd6b471/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "557fc7bb8246d2b2ea8799e2ca83e10986574f1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557fc7bb8246d2b2ea8799e2ca83e10986574f1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/557fc7bb8246d2b2ea8799e2ca83e10986574f1e"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "79c0805e688267612c417f5662c223017f9340fc",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d859f3f62af5ae79da4d42080e6c5d2bacd6b471/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d859f3f62af5ae79da4d42080e6c5d2bacd6b471/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=d859f3f62af5ae79da4d42080e6c5d2bacd6b471",
        "patch": "@@ -280,7 +280,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n     if (fRescan)\n     {\n         pwallet->ScanForWalletTransactions(Params().GetConsensus(), Params().TxData(), chainActive.Genesis(), true);\n-        pwallet->ReacceptWalletTransactions();\n+        pwallet->ReacceptWalletTransactions(Params());\n     }\n \n     return NullUniValue;\n@@ -438,7 +438,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     if (fRescan)\n     {\n         pwallet->ScanForWalletTransactions(Params().GetConsensus(), Params().TxData(), chainActive.Genesis(), true);\n-        pwallet->ReacceptWalletTransactions();\n+        pwallet->ReacceptWalletTransactions(Params());\n     }\n \n     return NullUniValue;\n@@ -1124,7 +1124,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         CBlockIndex* scannedRange = nullptr;\n         if (pindex) {\n             scannedRange = pwallet->ScanForWalletTransactions(Params().GetConsensus(), Params().TxData(), pindex, true);\n-            pwallet->ReacceptWalletTransactions();\n+            pwallet->ReacceptWalletTransactions(Params());\n         }\n \n         if (!scannedRange || scannedRange->nHeight > pindex->nHeight) {"
      },
      {
        "sha": "19aa84353a25ef98a50cc868e28103bd73594cdb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d859f3f62af5ae79da4d42080e6c5d2bacd6b471/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d859f3f62af5ae79da4d42080e6c5d2bacd6b471/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d859f3f62af5ae79da4d42080e6c5d2bacd6b471",
        "patch": "@@ -1596,9 +1596,8 @@ CBlockIndex* CWallet::ScanForWalletTransactions(const Consensus::Params& consens\n     return ret;\n }\n \n-void CWallet::ReacceptWalletTransactions()\n+void CWallet::ReacceptWalletTransactions(const CChainParams& chainparams)\n {\n-    const CChainParams& chainparams = Params();\n     // If transactions aren't being broadcasted, don't let them into local mempool either\n     if (!fBroadcastTransactions)\n         return;\n@@ -3908,9 +3907,10 @@ std::atomic<bool> CWallet::fFlushScheduled(false);\n \n void CWallet::postInitProcess(CScheduler& scheduler)\n {\n+    const CChainParams& chainparams = Params();\n     // Add wallet transactions that aren't already in a block to mempool\n     // Do this here as mempool requires genesis block to be loaded\n-    ReacceptWalletTransactions();\n+    ReacceptWalletTransactions(chainparams);\n \n     // Run a thread to flush wallet periodically\n     if (!CWallet::fFlushScheduled.exchange(true)) {"
      },
      {
        "sha": "38b16fc954c6bdbf67bb46fcf2e53209a432b294",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d859f3f62af5ae79da4d42080e6c5d2bacd6b471/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d859f3f62af5ae79da4d42080e6c5d2bacd6b471/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d859f3f62af5ae79da4d42080e6c5d2bacd6b471",
        "patch": "@@ -904,7 +904,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     CBlockIndex* ScanForWalletTransactions(const Consensus::Params& consensusParams, const ChainTxData& chainTxData, CBlockIndex* pindexStart, bool fUpdate = false);\n-    void ReacceptWalletTransactions();\n+    void ReacceptWalletTransactions(const CChainParams& chainparams);\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);\n     CAmount GetBalance() const;"
      }
    ]
  },
  {
    "sha": "0ec8546c12bc02a23ee10c8354cd8bafa0b6f80f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWM4NTQ2YzEyYmMwMmEyM2VlMTBjODM1NGNkOGJhZmEwYjZmODBm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-04-06T14:56:49Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-18T17:14:08Z"
      },
      "message": "TODO: grep Params() in main.cpp TODO list",
      "tree": {
        "sha": "9cccbb41f9115e1823cf577e88f87aed2eefe811",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cccbb41f9115e1823cf577e88f87aed2eefe811"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ec8546c12bc02a23ee10c8354cd8bafa0b6f80f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY9klgAAoJEIhmwY6hyUSi44EQAKztZbrPTfwAChj2WIHpxj/s\ne50brR0g6iuN8FvwbbMNmveG98OMfLwGdzDhA69w5E0henAzS44bvDhrOTi7efqS\nnu8pcXrpMSzgWyTZbq1v9kg/rmrVUJbP8NO2wb3iaYKpvb8A/z1ABrUdfxymKjGu\nMVZLuFRw1ZlYr09TRUZkL0XdQdWy/g7iUh4erfx3/VTSmG4E4gDF4VfrFv5QrWDw\n2eVixYAJkg7AgQtUwpuVnGH3bH/w4/Q7fSZlURk1yySNN5ENMlp/k/S0qHjxcxRG\nh1dJbKG+iEOP5EQErxaBhBxKe160Cf/3m4Jciprbp/0t3CL4HsFzO/YPZYUJbPeU\neLvpHizyvFHDk/4FXM2qv893lNwjLg2ghu+FXURwDHaP+XE7+N9EcPp5OXnNvZ4h\nooe/VAZrV8EHOYSVKuiQyveH30Sg0Pka5LlUkRJZ13DTu0IHc/LK8Beee+6edvjK\nDhUSszbYza1EoQ9BR6U2TnKAycAF2EWhNDudWD9RMKvmA+YGdxwhrei0UnNnHh4T\n0mcQnD9pvgFsQ5W4uUw+CqWHAXwmI//dCrS4CDen06fLBzm2CoAfJu+20J9dOSCs\nMKv3bKgOS4pAC4niw6YIFoPqXiEhIYON7DFqSrXY8vniQAi7eoAOrx0oNyvNhGsK\nsgpMYjNEwNCnMYY4ym/s\n=frpY\n-----END PGP SIGNATURE-----",
        "payload": "tree 9cccbb41f9115e1823cf577e88f87aed2eefe811\nparent d859f3f62af5ae79da4d42080e6c5d2bacd6b471\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1459954609 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1492535648 +0200\n\nTODO: grep Params() in main.cpp TODO list\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec8546c12bc02a23ee10c8354cd8bafa0b6f80f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ec8546c12bc02a23ee10c8354cd8bafa0b6f80f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec8546c12bc02a23ee10c8354cd8bafa0b6f80f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d859f3f62af5ae79da4d42080e6c5d2bacd6b471",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d859f3f62af5ae79da4d42080e6c5d2bacd6b471",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d859f3f62af5ae79da4d42080e6c5d2bacd6b471"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "853661a2203ff942891bf06dc1bb9e6b83f3c439",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec8546c12bc02a23ee10c8354cd8bafa0b6f80f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec8546c12bc02a23ee10c8354cd8bafa0b6f80f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0ec8546c12bc02a23ee10c8354cd8bafa0b6f80f",
        "patch": "@@ -1121,7 +1121,7 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)\n \n bool IsInitialBlockDownload()\n {\n-    const CChainParams& chainParams = Params();\n+    const CChainParams& chainParams = Params(); // TODO make parameter (disruptive) s/chainParams/chainparams/\n \n     // Once this function has returned false, it must remain false.\n     static std::atomic<bool> latchToFalse{false};\n@@ -1939,7 +1939,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n  */\n bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode, int nManualPruneHeight) {\n     int64_t nMempoolUsage = mempool.DynamicMemoryUsage();\n-    const CChainParams& chainparams = Params();\n+    const CChainParams& chainparams = Params(); // TODO make parameter\n     LOCK2(cs_main, cs_LastBlockFile);\n     static int64_t nLastWrite = 0;\n     static int64_t nLastFlush = 0;\n@@ -4178,7 +4178,7 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n \n bool LoadMempool(void)\n {\n-    const CChainParams& chainparams = Params();\n+    const CChainParams& chainparams = Params(); // TODO make parameter\n     int64_t nExpiryTimeout = GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n     FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat\", \"rb\");\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);"
      }
    ]
  },
  {
    "sha": "9b00b070def2c0f289e148c0b9e54387021668ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjAwYjA3MGRlZjJjMGYyODllMTQ4YzBiOWU1NDM4NzAyMTY2OGVh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-05T01:56:32Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-18T17:14:09Z"
      },
      "message": "TODO: s/Params()/chainparams/ in net.cpp",
      "tree": {
        "sha": "ce59b7c440857dcba9a98521b00e28b5def43ced",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce59b7c440857dcba9a98521b00e28b5def43ced"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b00b070def2c0f289e148c0b9e54387021668ea",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY9klhAAoJEIhmwY6hyUSip2UQAM95zxxUYWFIwf4vZG6+Hwsi\nI308Z95OuDJkpa8lQziHJGv+LvJrXOtABrKx9mT31gAxn3jSKv9hqRLTy25+yQos\n+/agOAdnXzfueabShH2xFehfSXOImwLtCsavHWEjbi7+F2bJzSEgtobr4B3cQwB7\nmwd93cS2I+oZxKQbYh9f7OlDkxJqwLCnFxuIZpLUUBC3G7kBuaNv69vfVnnDKMxj\nLHYZPZaR3g2P36U7sNHMXU06It2QfMOWZ6Mph0XNAadDk6lzeN1hY1Y8j2P70sQu\n8tZ+YR80wLXsQTYxYYjhHyXSZPnPufuTiFqgZ9VGYZGhL5/iLBA39zsa8KY5Z3wZ\nVWMd51xs6EI0RLmUEz8QUutRdxGtAAgJmo5BTrBbHcJ9Kww1Tl4VL8LFGC3Guml3\nc/H2gK5q38ALPPnvjGRk/zB1wHf6cqsyJ/Z5CRFLf35BgSQvz5crTCyC06il9rzZ\nTem1wKlv4hFxxAZey9py3RG0bB+OtWZFLdnwiTs1evdHtcnW6BaQG3p7TlylvTyT\nMXevt15tSyDyiykBxSTYCnDxcG8c+OlD8owMKAnUZxfOUKxM5zmM6Ngac41OwTDD\ntQu73gslPoTruBv9yGixFGDzqzANIHNRPPjvIinp9gHemIben3rt+QrqKMk6ksae\nBDWtIP9tBPwe3WzoCecq\n=AGqN\n-----END PGP SIGNATURE-----",
        "payload": "tree ce59b7c440857dcba9a98521b00e28b5def43ced\nparent 0ec8546c12bc02a23ee10c8354cd8bafa0b6f80f\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1491357392 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1492535649 +0200\n\nTODO: s/Params()/chainparams/ in net.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b00b070def2c0f289e148c0b9e54387021668ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b00b070def2c0f289e148c0b9e54387021668ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b00b070def2c0f289e148c0b9e54387021668ea/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ec8546c12bc02a23ee10c8354cd8bafa0b6f80f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec8546c12bc02a23ee10c8354cd8bafa0b6f80f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ec8546c12bc02a23ee10c8354cd8bafa0b6f80f"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 18,
      "deletions": 10
    },
    "files": [
      {
        "sha": "02c422f2f722131024bccda1dda8c7e7877b9660",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 10,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b00b070def2c0f289e148c0b9e54387021668ea/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b00b070def2c0f289e148c0b9e54387021668ea/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9b00b070def2c0f289e148c0b9e54387021668ea",
        "patch": "@@ -93,7 +93,8 @@ void CConnman::AddOneShot(const std::string& strDest)\n \n unsigned short GetListenPort()\n {\n-    return (unsigned short)(GetArg(\"-port\", Params().GetDefaultPort()));\n+    const CChainParams& chainparams = Params(); // TODO make parameter\n+    return (unsigned short)(GetArg(\"-port\", chainparams.GetDefaultPort()));\n }\n \n // find 'best' local address for a particular peer\n@@ -342,6 +343,7 @@ bool CConnman::CheckIncomingNonce(uint64_t nonce)\n \n CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure)\n {\n+    const CChainParams& chainparams = Params(); // TODO make parameter\n     if (pszDest == NULL) {\n         if (IsLocal(addrConnect))\n             return NULL;\n@@ -363,7 +365,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     // Connect\n     SOCKET hSocket;\n     bool proxyConnectionFailed = false;\n-    if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, Params().GetDefaultPort(), nConnectTimeout, &proxyConnectionFailed) :\n+    if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, chainparams.GetDefaultPort(), nConnectTimeout, &proxyConnectionFailed) :\n                   ConnectSocket(addrConnect, hSocket, nConnectTimeout, &proxyConnectionFailed))\n     {\n         if (!IsSelectableSocket(hSocket)) {\n@@ -686,6 +688,7 @@ void CNode::copyStats(CNodeStats &stats)\n \n bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete)\n {\n+    const CChainParams& chainparams = Params(); // TODO make parameter\n     complete = false;\n     int64_t nTimeMicros = GetTimeMicros();\n     LOCK(cs_vRecv);\n@@ -696,7 +699,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n         // get current incomplete message, or create a new one\n         if (vRecvMsg.empty() ||\n             vRecvMsg.back().complete())\n-            vRecvMsg.push_back(CNetMessage(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+            vRecvMsg.push_back(CNetMessage(chainparams.MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n \n         CNetMessage& msg = vRecvMsg.back();\n \n@@ -1559,6 +1562,7 @@ static std::string GetDNSHost(const CDNSSeedData& data, ServiceFlags* requiredSe\n \n void CConnman::ThreadDNSAddressSeed()\n {\n+    const CChainParams& chainparams = Params(); // TODO make parameter\n     // goal: only query DNS seeds if address need is acute\n     // Avoiding DNS seeds when we don't need them improves user privacy by\n     //  creating fewer identifying DNS requests, reduces trust by giving seeds\n@@ -1579,7 +1583,7 @@ void CConnman::ThreadDNSAddressSeed()\n         }\n     }\n \n-    const std::vector<CDNSSeedData> &vSeeds = Params().DNSSeeds();\n+    const std::vector<CDNSSeedData> &vSeeds = chainparams.DNSSeeds();\n     int found = 0;\n \n     LogPrintf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n@@ -1599,7 +1603,7 @@ void CConnman::ThreadDNSAddressSeed()\n                 BOOST_FOREACH(const CNetAddr& ip, vIPs)\n                 {\n                     int nOneDay = 24*3600;\n-                    CAddress addr = CAddress(CService(ip, Params().GetDefaultPort()), requiredServiceBits);\n+                    CAddress addr = CAddress(CService(ip, chainparams.GetDefaultPort()), requiredServiceBits);\n                     addr.nTime = GetTime() - 3*nOneDay - GetRand(4*nOneDay); // use a random age between 3 and 7 days old\n                     vAdd.push_back(addr);\n                     found++;\n@@ -1671,6 +1675,7 @@ void CConnman::ProcessOneShot()\n \n void CConnman::ThreadOpenConnections()\n {\n+    const CChainParams& chainparams = Params(); // TODO make parameter\n     // Connect to specific addresses\n     if (mapMultiArgs.count(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0)\n     {\n@@ -1715,7 +1720,7 @@ void CConnman::ThreadOpenConnections()\n                 LogPrintf(\"Adding fixed seed nodes as DNS doesn't seem to be available.\\n\");\n                 CNetAddr local;\n                 LookupHost(\"127.0.0.1\", local, false);\n-                addrman.Add(convertSeed6(Params().FixedSeeds()), local);\n+                addrman.Add(convertSeed6(chainparams.FixedSeeds()), local);\n                 done = true;\n             }\n         }\n@@ -1800,7 +1805,7 @@ void CConnman::ThreadOpenConnections()\n                 continue;\n \n             // do not allow non-default ports, unless after 50 invalid addresses selected already\n-            if (addr.GetPort() != Params().GetDefaultPort() && nTries < 50)\n+            if (addr.GetPort() != chainparams.GetDefaultPort() && nTries < 50)\n                 continue;\n \n             addrConnect = addr;\n@@ -1824,6 +1829,7 @@ void CConnman::ThreadOpenConnections()\n \n std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n {\n+    const CChainParams& chainparams = Params(); // TODO make parameter\n     std::vector<AddedNodeInfo> ret;\n \n     std::list<std::string> lAddresses(0);\n@@ -1852,7 +1858,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n     }\n \n     BOOST_FOREACH(const std::string& strAddNode, lAddresses) {\n-        CService service(LookupNumeric(strAddNode.c_str(), Params().GetDefaultPort()));\n+        CService service(LookupNumeric(strAddNode.c_str(), chainparams.GetDefaultPort()));\n         if (service.IsValid()) {\n             // strAddNode is an IP:port\n             auto it = mapConnected.find(service);\n@@ -1877,6 +1883,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n \n void CConnman::ThreadOpenAddedConnections()\n {\n+    const CChainParams& chainparams = Params(); // TODO make parameter\n     {\n         LOCK(cs_vAddedNodes);\n         if (mapMultiArgs.count(\"-addnode\"))\n@@ -1898,7 +1905,7 @@ void CConnman::ThreadOpenAddedConnections()\n                 // If strAddedNode is an IP/port, decode it immediately, so\n                 // OpenNetworkConnection can detect existing connections to that IP/port.\n                 tried = true;\n-                CService service(LookupNumeric(info.strAddedNode.c_str(), Params().GetDefaultPort()));\n+                CService service(LookupNumeric(info.strAddedNode.c_str(), chainparams.GetDefaultPort()));\n                 OpenNetworkConnection(CAddress(service, NODE_NONE), false, &grant, info.strAddedNode.c_str(), false, false, true);\n                 if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n                     return;\n@@ -2744,14 +2751,15 @@ bool CConnman::NodeFullyConnected(const CNode* pnode)\n \n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n+    const CChainParams& chainparams = Params(); // TODO make parameter\n     size_t nMessageSize = msg.data.size();\n     size_t nTotalSize = nMessageSize + CMessageHeader::HEADER_SIZE;\n     LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.command.c_str()), nMessageSize, pnode->id);\n \n     std::vector<unsigned char> serializedHeader;\n     serializedHeader.reserve(CMessageHeader::HEADER_SIZE);\n     uint256 hash = Hash(msg.data.data(), msg.data.data() + nMessageSize);\n-    CMessageHeader hdr(Params().MessageStart(), msg.command.c_str(), nMessageSize);\n+    CMessageHeader hdr(chainparams.MessageStart(), msg.command.c_str(), nMessageSize);\n     memcpy(hdr.pchChecksum, hash.begin(), CMessageHeader::CHECKSUM_SIZE);\n \n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, serializedHeader, 0, hdr};"
      }
    ]
  }
]