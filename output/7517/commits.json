[
  {
    "sha": "b0ff8572aeb8211ad30f24ca42d20a46debb5e9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMGZmODU3MmFlYjgyMTFhZDMwZjI0Y2E0MmQyMGE0NmRlYmI1ZTlk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-11T15:16:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-11T15:16:40Z"
      },
      "message": "test: Move non-generated script_invalid test to the correct place\n\nThis test was introduced in 9fadf1c874f938f87395495776dbae896551873d,\nbut accidentally added in the autogenerated area.",
      "tree": {
        "sha": "19122af82532e49a5aceacde0877ce688919fe03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19122af82532e49a5aceacde0877ce688919fe03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0ff8572aeb8211ad30f24ca42d20a46debb5e9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0ff8572aeb8211ad30f24ca42d20a46debb5e9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0ff8572aeb8211ad30f24ca42d20a46debb5e9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0ff8572aeb8211ad30f24ca42d20a46debb5e9d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f3f4af4cc2b92b8758858d0a1c13635065eb379",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f3f4af4cc2b92b8758858d0a1c13635065eb379",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f3f4af4cc2b92b8758858d0a1c13635065eb379"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "54767f46d0dda643f138db5cd4bece2e3b355978",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0ff8572aeb8211ad30f24ca42d20a46debb5e9d/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0ff8572aeb8211ad30f24ca42d20a46debb5e9d/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=b0ff8572aeb8211ad30f24ca42d20a46debb5e9d",
        "patch": "@@ -521,6 +521,12 @@\n     \"STRICTENC\",\n     \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but first signature invalid.\"\n ],\n+[\n+    \"0 0x47 0x304402205451ce65ad844dbb978b8bdedf5082e33b43cae8279c30f2c74d9e9ee49a94f802203fe95a7ccf74da7a232ee523ef4a53cb4d14bdd16289680cdb97a63819b8f42f01 0x46 0x304402205451ce65ad844dbb978b8bdedf5082e33b43cae8279c30f2c74d9e9ee49a94f802203fe95a7ccf74da7a232ee523ef4a53cb4d14bdd16289680cdb97a63819b8f42f\",\n+    \"2 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 3 CHECKMULTISIG\",\n+    \"P2SH,STRICTENC\",\n+    \"2-of-3 with one valid and one invalid signature due to parse error, nSigs > validSigs\"\n+],\n \n [\"Increase DERSIG test coverage\"],\n [\"0x4a 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Overly long signature is incorrectly encoded for DERSIG\"],\n@@ -791,12 +797,6 @@\n     \"SIGPUSHONLY\",\n     \"P2SH(P2PK) with non-push scriptSig\"\n ],\n-[\n-    \"0 0x47 0x304402205451ce65ad844dbb978b8bdedf5082e33b43cae8279c30f2c74d9e9ee49a94f802203fe95a7ccf74da7a232ee523ef4a53cb4d14bdd16289680cdb97a63819b8f42f01 0x46 0x304402205451ce65ad844dbb978b8bdedf5082e33b43cae8279c30f2c74d9e9ee49a94f802203fe95a7ccf74da7a232ee523ef4a53cb4d14bdd16289680cdb97a63819b8f42f\",\n-    \"2 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 3 CHECKMULTISIG\",\n-    \"P2SH,STRICTENC\",\n-    \"2-of-3 with one valid and one invalid signature due to parse error, nSigs > validSigs\"\n-],\n [\n     \"11 0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n     \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\","
      }
    ]
  },
  {
    "sha": "2317ad7c56c6f5a55984459947f69cc3bfbe340a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzE3YWQ3YzU2YzZmNWE1NTk4NDQ1OTk0N2Y2OWNjM2JmYmUzNDBh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-11T15:38:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-11T16:33:28Z"
      },
      "message": "test: Re-introduce JSON pretty printing in test builder",
      "tree": {
        "sha": "4d39192a268a34917ddc29c83fde6aa305f1c960",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d39192a268a34917ddc29c83fde6aa305f1c960"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2317ad7c56c6f5a55984459947f69cc3bfbe340a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2317ad7c56c6f5a55984459947f69cc3bfbe340a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2317ad7c56c6f5a55984459947f69cc3bfbe340a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2317ad7c56c6f5a55984459947f69cc3bfbe340a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0ff8572aeb8211ad30f24ca42d20a46debb5e9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0ff8572aeb8211ad30f24ca42d20a46debb5e9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0ff8572aeb8211ad30f24ca42d20a46debb5e9d"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "527bb52f8c35664d3127c6af93243e799eebb082",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2317ad7c56c6f5a55984459947f69cc3bfbe340a/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2317ad7c56c6f5a55984459947f69cc3bfbe340a/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=2317ad7c56c6f5a55984459947f69cc3bfbe340a",
        "patch": "@@ -585,11 +585,11 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n         for (unsigned int idx = 0; idx < json_good.size(); idx++) {\n             const UniValue& tv = json_good[idx];\n-            tests_good.insert(tv.get_array().write());\n+            tests_good.insert(tv.get_array().write(1,4));\n         }\n         for (unsigned int idx = 0; idx < json_bad.size(); idx++) {\n             const UniValue& tv = json_bad[idx];\n-            tests_bad.insert(tv.get_array().write());\n+            tests_bad.insert(tv.get_array().write(1,4));\n         }\n     }\n \n@@ -608,7 +608,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n     }\n     BOOST_FOREACH(TestBuilder& test, bad) {\n         test.Test(false);\n-        std::string str = test.GetJSON().write();\n+        std::string str = test.GetJSON().write(1,4);\n #ifndef UPDATE_JSON_TESTS\n         if (tests_bad.count(str) == 0) {\n             BOOST_CHECK_MESSAGE(false, \"Missing auto script_invalid test: \" + test.GetComment());"
      }
    ]
  },
  {
    "sha": "0ecb3401fe157cb0779d3970c6080b463b1b0ed2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWNiMzQwMWZlMTU3Y2IwNzc5ZDM5NzBjNjA4MGI0NjNiMWIwZWQy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-11T15:38:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-11T16:33:28Z"
      },
      "message": "test: Script_error checking in script_invalid tests\n\nCheck the returned script_error. Add expected script_error\nfor generated as well as custom tests.\n\nThe specific error is not part of consensus, however\nit could avoid unclear reporting issues such as #6862 in the future.\n\nFixes #7513.",
      "tree": {
        "sha": "2cedcea501a1efc285660ff319b73e1bdfdb433c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cedcea501a1efc285660ff319b73e1bdfdb433c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ecb3401fe157cb0779d3970c6080b463b1b0ed2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ecb3401fe157cb0779d3970c6080b463b1b0ed2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ecb3401fe157cb0779d3970c6080b463b1b0ed2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ecb3401fe157cb0779d3970c6080b463b1b0ed2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2317ad7c56c6f5a55984459947f69cc3bfbe340a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2317ad7c56c6f5a55984459947f69cc3bfbe340a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2317ad7c56c6f5a55984459947f69cc3bfbe340a"
      }
    ],
    "stats": {
      "total": 1222,
      "additions": 677,
      "deletions": 545
    },
    "files": [
      {
        "sha": "9e91132984ead759c7f72f4e804d222f543f2421",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 554,
        "deletions": 491,
        "changes": 1045,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ecb3401fe157cb0779d3970c6080b463b1b0ed2/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ecb3401fe157cb0779d3970c6080b463b1b0ed2/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=0ecb3401fe157cb0779d3970c6080b463b1b0ed2"
      },
      {
        "sha": "c0e159bb63d915b74a39b4f5a04e59ee4e38ac64",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 54,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ecb3401fe157cb0779d3970c6080b463b1b0ed2/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ecb3401fe157cb0779d3970c6080b463b1b0ed2/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=0ecb3401fe157cb0779d3970c6080b463b1b0ed2",
        "patch": "@@ -52,6 +52,64 @@ read_json(const std::string& jsondata)\n     return v.get_array();\n }\n \n+struct ScriptErrorDesc\n+{\n+    ScriptError_t err;\n+    const char *name;\n+};\n+\n+static ScriptErrorDesc script_errors[]={\n+    {SCRIPT_ERR_OK, \"OK\"},\n+    {SCRIPT_ERR_UNKNOWN_ERROR, \"UNKNOWN_ERROR\"},\n+    {SCRIPT_ERR_EVAL_FALSE, \"EVAL_FALSE\"},\n+    {SCRIPT_ERR_OP_RETURN, \"OP_RETURN\"},\n+    {SCRIPT_ERR_SCRIPT_SIZE, \"SCRIPT_SIZE\"},\n+    {SCRIPT_ERR_PUSH_SIZE, \"PUSH_SIZE\"},\n+    {SCRIPT_ERR_OP_COUNT, \"OP_COUNT\"},\n+    {SCRIPT_ERR_STACK_SIZE, \"STACK_SIZE\"},\n+    {SCRIPT_ERR_SIG_COUNT, \"SIG_COUNT\"},\n+    {SCRIPT_ERR_PUBKEY_COUNT, \"PUBKEY_COUNT\"},\n+    {SCRIPT_ERR_VERIFY, \"VERIFY\"},\n+    {SCRIPT_ERR_EQUALVERIFY, \"EQUALVERIFY\"},\n+    {SCRIPT_ERR_CHECKMULTISIGVERIFY, \"CHECKMULTISIGVERIFY\"},\n+    {SCRIPT_ERR_CHECKSIGVERIFY, \"CHECKSIGVERIFY\"},\n+    {SCRIPT_ERR_NUMEQUALVERIFY, \"NUMEQUALVERIFY\"},\n+    {SCRIPT_ERR_BAD_OPCODE, \"BAD_OPCODE\"},\n+    {SCRIPT_ERR_DISABLED_OPCODE, \"DISABLED_OPCODE\"},\n+    {SCRIPT_ERR_INVALID_STACK_OPERATION, \"INVALID_STACK_OPERATION\"},\n+    {SCRIPT_ERR_INVALID_ALTSTACK_OPERATION, \"INVALID_ALTSTACK_OPERATION\"},\n+    {SCRIPT_ERR_UNBALANCED_CONDITIONAL, \"UNBALANCED_CONDITIONAL\"},\n+    {SCRIPT_ERR_NEGATIVE_LOCKTIME, \"NEGATIVE_LOCKTIME\"},\n+    {SCRIPT_ERR_UNSATISFIED_LOCKTIME, \"UNSATISFIED_LOCKTIME\"},\n+    {SCRIPT_ERR_SIG_HASHTYPE, \"SIG_HASHTYPE\"},\n+    {SCRIPT_ERR_SIG_DER, \"SIG_DER\"},\n+    {SCRIPT_ERR_MINIMALDATA, \"MINIMALDATA\"},\n+    {SCRIPT_ERR_SIG_PUSHONLY, \"SIG_PUSHONLY\"},\n+    {SCRIPT_ERR_SIG_HIGH_S, \"SIG_HIGH_S\"},\n+    {SCRIPT_ERR_SIG_NULLDUMMY, \"SIG_NULLDUMMY\"},\n+    {SCRIPT_ERR_PUBKEYTYPE, \"PUBKEYTYPE\"},\n+    {SCRIPT_ERR_CLEANSTACK, \"CLEANSTACK\"},\n+    {SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS, \"DISCOURAGE_UPGRADABLE_NOPS\"}\n+};\n+\n+const char *FormatScriptError(ScriptError_t err)\n+{\n+    for (unsigned int i=0; i<ARRAYLEN(script_errors); ++i)\n+        if (script_errors[i].err == err)\n+            return script_errors[i].name;\n+    BOOST_ERROR(\"Unknown scripterror enumeration value, update script_errors in script_tests.cpp.\");\n+    return \"\";\n+}\n+\n+ScriptError_t ParseScriptError(const std::string &name)\n+{\n+    for (unsigned int i=0; i<ARRAYLEN(script_errors); ++i)\n+        if (script_errors[i].name == name)\n+            return script_errors[i].err;\n+    BOOST_ERROR(\"Unknown scripterror \\\"\" << name << \"\\\" in test description\");\n+    return SCRIPT_ERR_UNKNOWN_ERROR;\n+}\n+\n BOOST_FIXTURE_TEST_SUITE(script_tests, BasicTestingSetup)\n \n CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n@@ -87,13 +145,13 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n     return txSpend;\n }\n \n-void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message)\n+void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message, int scriptError)\n {\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n     BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n-    BOOST_CHECK_MESSAGE(expect == (err == SCRIPT_ERR_OK), std::string(ScriptErrorString(err)) + \": \" + message);\n+    BOOST_CHECK_MESSAGE(scriptError == -1 || err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << tx2;\n@@ -187,6 +245,7 @@ class TestBuilder\n     std::vector<unsigned char> push;\n     std::string comment;\n     int flags;\n+    int scriptError;\n \n     void DoPush()\n     {\n@@ -204,7 +263,7 @@ class TestBuilder\n     }\n \n public:\n-    TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_)\n+    TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_), scriptError(-1)\n     {\n         if (P2SH) {\n             creditTx = BuildCreditingTransaction(CScript() << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL);\n@@ -214,6 +273,12 @@ class TestBuilder\n         spendTx = BuildSpendingTransaction(CScript(), creditTx);\n     }\n \n+    TestBuilder& ScriptError(ScriptError_t err)\n+    {\n+        scriptError = err;\n+        return *this;\n+    }\n+\n     TestBuilder& Add(const CScript& script)\n     {\n         DoPush();\n@@ -288,7 +353,7 @@ class TestBuilder\n     {\n         TestBuilder copy = *this; // Make a copy so we can rollback the push.\n         DoPush();\n-        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, flags, expect, comment);\n+        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, flags, expect, comment, expect ? SCRIPT_ERR_OK : scriptError);\n         *this = copy;\n         return *this;\n     }\n@@ -301,6 +366,8 @@ class TestBuilder\n         array.push_back(FormatScript(creditTx.vout[0].scriptPubKey));\n         array.push_back(FormatScriptFlags(flags));\n         array.push_back(comment);\n+        if (scriptError != -1)\n+            array.push_back(FormatScriptError((ScriptError_t)scriptError));\n         return array;\n     }\n \n@@ -328,99 +395,99 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               ).PushSig(keys.key0));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                               \"P2PK, bad sig\", 0\n-                             ).PushSig(keys.key0).DamagePush(10));\n+                             ).PushSig(keys.key0).DamagePush(10).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                                \"P2PKH\", 0\n                               ).PushSig(keys.key1).Push(keys.pubkey1C));\n     bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey2C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                               \"P2PKH, bad pubkey\", 0\n-                             ).PushSig(keys.key2).Push(keys.pubkey2C).DamagePush(5));\n+                             ).PushSig(keys.key2).Push(keys.pubkey2C).DamagePush(5).ScriptError(SCRIPT_ERR_EQUALVERIFY));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                                \"P2PK anyonecanpay\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                               \"P2PK anyonecanpay marked with normal hashtype\", 0\n-                             ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY).EditPush(70, \"81\", \"01\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY).EditPush(70, \"81\", \"01\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n                                \"P2SH(P2PK)\", SCRIPT_VERIFY_P2SH, true\n                               ).PushSig(keys.key0).PushRedeem());\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n                               \"P2SH(P2PK), bad redeemscript\", SCRIPT_VERIFY_P2SH, true\n-                             ).PushSig(keys.key0).PushRedeem().DamagePush(10));\n+                             ).PushSig(keys.key0).PushRedeem().DamagePush(10).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                                \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\", 0, true\n                               ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n     bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                               \"P2SH(P2PKH), bad sig\", SCRIPT_VERIFY_P2SH, true\n-                             ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n+                             ).PushSig(keys.key0).DamagePush(10).PushRedeem().ScriptError(SCRIPT_ERR_EQUALVERIFY));\n \n     good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                                \"3-of-3\", 0\n                               ).Num(0).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n     bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                               \"3-of-3, 2 sigs\", 0\n-                             ).Num(0).PushSig(keys.key0).PushSig(keys.key1).Num(0));\n+                             ).Num(0).PushSig(keys.key0).PushSig(keys.key1).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                                \"P2SH(2-of-3)\", SCRIPT_VERIFY_P2SH, true\n                               ).Num(0).PushSig(keys.key1).PushSig(keys.key2).PushRedeem());\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                               \"P2SH(2-of-3), 1 sig\", SCRIPT_VERIFY_P2SH, true\n-                             ).Num(0).PushSig(keys.key1).Num(0).PushRedeem());\n+                             ).Num(0).PushSig(keys.key1).Num(0).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                                \"P2PK with too much R padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"P2PK with too much R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                                \"P2PK with too much S padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"P2PK with too much S padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\").ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                                \"P2PK with too little R padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"P2PK with too little R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                                \"P2PK NOT with bad sig with too much R padding but no DERSIG\", 0\n                               ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with bad sig with too much R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10).ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with too much R padding but no DERSIG\", 0\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with too much R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_SIG_DER));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                                \"BIP66 example 1, without DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"BIP66 example 1, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n                               \"BIP66 example 2, without DERSIG\", 0\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n                               \"BIP66 example 2, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"BIP66 example 3, without DERSIG\", 0\n-                             ).Num(0));\n+                             ).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"BIP66 example 3, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0));\n+                             ).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n                                \"BIP66 example 4, without DERSIG\", 0\n                               ).Num(0));\n@@ -429,46 +496,46 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               ).Num(0));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"BIP66 example 5, without DERSIG\", 0\n-                             ).Num(1));\n+                             ).Num(1).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"BIP66 example 5, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(1));\n+                             ).Num(1).ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n                                \"BIP66 example 6, without DERSIG\", 0\n                               ).Num(1));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n                               \"BIP66 example 6, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(1));\n+                             ).Num(1).ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                                \"BIP66 example 7, without DERSIG\", 0\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                               \"BIP66 example 7, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                               \"BIP66 example 8, without DERSIG\", 0\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                               \"BIP66 example 8, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                               \"BIP66 example 9, without DERSIG\", 0\n-                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                               \"BIP66 example 9, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                                \"BIP66 example 10, without DERSIG\", 0\n                               ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                               \"BIP66 example 10, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                               \"BIP66 example 11, without DERSIG\", 0\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                               \"BIP66 example 11, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                                \"BIP66 example 12, without DERSIG\", 0\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n@@ -480,33 +547,33 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                \"P2PK with multi-byte hashtype, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n+                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\").ScriptError(SCRIPT_ERR_SIG_DER));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                \"P2PK with high S but no LOW_S\", 0\n                               ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                               \"P2PK with high S\", SCRIPT_VERIFY_LOW_S\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 32, 33).ScriptError(SCRIPT_ERR_SIG_HIGH_S));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n                                \"P2PK with hybrid pubkey but no STRICTENC\", 0\n                               ).PushSig(keys.key0, SIGHASH_ALL));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n                               \"P2PK with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key0, SIGHASH_ALL));\n+                             ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with hybrid pubkey but no STRICTENC\", 0\n-                             ).PushSig(keys.key0, SIGHASH_ALL));\n+                             ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key0, SIGHASH_ALL));\n+                             ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                                \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\", 0\n                               ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with invalid hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n+                             ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n     good.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey0H) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                                \"1-of-2 with the second 1 hybrid pubkey and no STRICTENC\", 0\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n@@ -515,62 +582,61 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n     bad.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0H) << OP_2 << OP_CHECKMULTISIG,\n                               \"1-of-2 with the first 1 hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                                \"P2PK with undefined hashtype but no STRICTENC\", 0\n                               ).PushSig(keys.key1, 5));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                               \"P2PK with undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key1, 5));\n+                             ).PushSig(keys.key1, 5).ScriptError(SCRIPT_ERR_SIG_HASHTYPE));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n                                \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\", 0\n                               ).PushSig(keys.key1, 5).DamagePush(10));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with invalid sig and undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key1, 5).DamagePush(10));\n+                             ).PushSig(keys.key1, 5).DamagePush(10).ScriptError(SCRIPT_ERR_SIG_HASHTYPE));\n \n     good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                                \"3-of-3 with nonzero dummy but no NULLDUMMY\", 0\n                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n     bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                               \"3-of-3 with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n-                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_NULLDUMMY));\n     good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n                                \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\", 0\n                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n     bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n                               \"3-of-3 NOT with invalid sig with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n-                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n+                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10).ScriptError(SCRIPT_ERR_SIG_NULLDUMMY));\n \n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                                \"2-of-2 with two identical keys and sigs pushed using OP_DUP but no SIGPUSHONLY\", 0\n                               ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                               \"2-of-2 with two identical keys and sigs pushed using OP_DUP\", SCRIPT_VERIFY_SIGPUSHONLY\n-                             ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP));\n+                             ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP).ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                               \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\", 0\n-                             ).PushSig(keys.key2).PushRedeem());\n+                             ).PushSig(keys.key2).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                               \"P2SH(P2PK) with non-push scriptSig\", SCRIPT_VERIFY_SIGPUSHONLY\n-                             ).PushSig(keys.key2).PushRedeem());\n+                             ).PushSig(keys.key2).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                                \"2-of-2 with two identical keys and sigs pushed\", SCRIPT_VERIFY_SIGPUSHONLY\n                               ).Num(0).PushSig(keys.key1).PushSig(keys.key1));\n-\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                                \"P2PK with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH\n                               ).Num(11).PushSig(keys.key0));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                               \"P2PK with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH\n-                             ).Num(11).PushSig(keys.key0));\n+                             ).Num(11).PushSig(keys.key0).ScriptError(SCRIPT_ERR_CLEANSTACK));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                                \"P2SH with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH, true\n                               ).Num(11).PushSig(keys.key0).PushRedeem());\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                               \"P2SH with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n-                             ).Num(11).PushSig(keys.key0).PushRedeem());\n+                             ).Num(11).PushSig(keys.key0).PushRedeem().ScriptError(SCRIPT_ERR_CLEANSTACK));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                                \"P2SH with CLEANSTACK\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n                               ).PushSig(keys.key0).PushRedeem());\n@@ -598,7 +664,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n     BOOST_FOREACH(TestBuilder& test, good) {\n         test.Test(true);\n-        std::string str = test.GetJSON().write();\n+        std::string str = test.GetJSON().write(1,4);\n #ifndef UPDATE_JSON_TESTS\n         if (tests_good.count(str) == 0) {\n             BOOST_CHECK_MESSAGE(false, \"Missing auto script_valid test: \" + test.GetComment());\n@@ -652,15 +718,14 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n \n-        DoTest(scriptPubKey, scriptSig, scriptflags, true, strTest);\n+        DoTest(scriptPubKey, scriptSig, scriptflags, true, strTest, SCRIPT_ERR_OK);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(script_invalid)\n {\n     // Scripts that should evaluate as invalid\n     UniValue tests = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n-\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         string strTest = test.write();\n@@ -676,8 +741,12 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n         string scriptPubKeyString = test[1].get_str();\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n+        int scriptError = -1; // Expected script error is optional, and follows comment\n+        if (test.size() >= 5 && test[4].get_str() != \"\") {\n+            scriptError = ParseScriptError(test[4].get_str());\n+        }\n \n-        DoTest(scriptPubKey, scriptSig, scriptflags, false, strTest);\n+        DoTest(scriptPubKey, scriptSig, scriptflags, false, strTest, scriptError);\n     }\n }\n "
      }
    ]
  }
]