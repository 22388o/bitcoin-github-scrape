[
  {
    "sha": "1356a45ef042e7bd3d539fbb606d6b1be547d00f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzU2YTQ1ZWYwNDJlN2JkM2Q1MzlmYmI2MDZkNmIxYmU1NDdkMDBm",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-10T14:01:33Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-11T16:40:16Z"
      },
      "message": "test: complete impl. of msg_merkleblock and wait_for_merkleblock\n\nImplements the missing initialization/serialization methods for\nmsg_merkleblock, based on the already present class CMerkleBlock.\nAlso changes the method wait_for_merkleblock() to be more precise by waiting\nfor a merkleblock with a specified blockhash instead of an arbitrary one.\n\nIn the BIP37 test p2p_filter.py, this new method is used to make the test of\nreceiving merkleblock and tx if a filter is set to be more precise, by checking\nif they also arrive in the right order.",
      "tree": {
        "sha": "d263fcb1b68bc14ebcc0d7fa92f13bef00307ddb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d263fcb1b68bc14ebcc0d7fa92f13bef00307ddb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1356a45ef042e7bd3d539fbb606d6b1be547d00f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1356a45ef042e7bd3d539fbb606d6b1be547d00f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1356a45ef042e7bd3d539fbb606d6b1be547d00f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1356a45ef042e7bd3d539fbb606d6b1be547d00f/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75917591c840ca61f5e2c6f5858e6882e834a911",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75917591c840ca61f5e2c6f5858e6882e834a911",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75917591c840ca61f5e2c6f5858e6882e834a911"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 20,
      "deletions": 14
    },
    "files": [
      {
        "sha": "aa2c92c2771963226fbeb6af852e4aa8f7cddb84",
        "filename": "test/functional/p2p_filter.py",
        "status": "modified",
        "additions": 4,
        "deletions": 10,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1356a45ef042e7bd3d539fbb606d6b1be547d00f/test/functional/p2p_filter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1356a45ef042e7bd3d539fbb606d6b1be547d00f/test/functional/p2p_filter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_filter.py?ref=1356a45ef042e7bd3d539fbb606d6b1be547d00f",
        "patch": "@@ -14,10 +14,7 @@\n     msg_filteradd,\n     msg_filterclear,\n )\n-from test_framework.mininode import (\n-    P2PInterface,\n-    mininode_lock,\n-)\n+from test_framework.mininode import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n \n \n@@ -69,18 +66,15 @@ def run_test(self):\n         filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n \n         self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n-        filter_node.merkleblock_received = False\n         block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n         txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_merkleblock(int(block_hash, 16))\n         filter_node.wait_for_tx(txid)\n-        assert filter_node.merkleblock_received\n \n         self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n-        with mininode_lock:\n-            filter_node.last_message.pop(\"merkleblock\", None)\n         filter_node.tx_received = False\n-        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n-        filter_node.wait_for_merkleblock()\n+        block_hash = self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())[0]\n+        filter_node.wait_for_merkleblock(int(block_hash, 16))\n         assert not filter_node.tx_received\n \n         self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')"
      },
      {
        "sha": "45b49bcf9e51c6511104d351b129927142ceba6f",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1356a45ef042e7bd3d539fbb606d6b1be547d00f/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1356a45ef042e7bd3d539fbb606d6b1be547d00f/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=1356a45ef042e7bd3d539fbb606d6b1be547d00f",
        "patch": "@@ -1321,10 +1321,23 @@ def __repr__(self):\n \n \n class msg_merkleblock:\n+    __slots__ = (\"merkleblock\",)\n     command = b\"merkleblock\"\n \n+    def __init__(self, merkleblock=None):\n+        if merkleblock is None:\n+            self.merkleblock = CMerkleBlock()\n+        else:\n+            self.merkleblock = merkleblock\n+\n     def deserialize(self, f):\n-        pass  # Placeholder for now\n+        self.merkleblock.deserialize(f)\n+\n+    def serialize(self):\n+        return self.merkleblock.serialize()\n+\n+    def __repr__(self):\n+        return \"msg_merkleblock(merkleblock=%s)\" % (repr(self.merkleblock))\n \n \n class msg_filterload:"
      },
      {
        "sha": "b17254faf82e06a10e75d4cc59fddce746834823",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1356a45ef042e7bd3d539fbb606d6b1be547d00f/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1356a45ef042e7bd3d539fbb606d6b1be547d00f/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=1356a45ef042e7bd3d539fbb606d6b1be547d00f",
        "patch": "@@ -397,14 +397,13 @@ def test_function():\n \n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n-    def wait_for_merkleblock(self, timeout=60):\n+    def wait_for_merkleblock(self, blockhash, timeout=60):\n         def test_function():\n             assert self.is_connected\n             last_filtered_block = self.last_message.get('merkleblock')\n             if not last_filtered_block:\n                 return False\n-            # TODO change this method to take a hash value and only return true if the correct block has been received\n-            return True\n+            return last_filtered_block.merkleblock.header.rehash() == blockhash\n \n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n "
      }
    ]
  },
  {
    "sha": "854382885f18aa9a95cdde3d11591b05c305ad3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTQzODI4ODVmMThhYTlhOTVjZGRlM2QxMTU5MWIwNWMzMDVhZDNm",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-11T13:53:01Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-11T16:40:28Z"
      },
      "message": "refactor: test: improve wait_for{header,merkleblock} interface\n\nThe interfaces for the methods wait_for_header() and wait_for_merkleblock() are\nchanged to take a hex string instead of an integer, improving type safety and\nremoving the burden from the caller to always do the transformation via\n`int(...)`. As suggested by MarcoFalke in\nhttps://github.com/bitcoin/bitcoin/pull/18593#discussion_r407062253",
      "tree": {
        "sha": "7339ed096397a4dec598d5117f0b74bce45b8a83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7339ed096397a4dec598d5117f0b74bce45b8a83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/854382885f18aa9a95cdde3d11591b05c305ad3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/854382885f18aa9a95cdde3d11591b05c305ad3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/854382885f18aa9a95cdde3d11591b05c305ad3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/854382885f18aa9a95cdde3d11591b05c305ad3f/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1356a45ef042e7bd3d539fbb606d6b1be547d00f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1356a45ef042e7bd3d539fbb606d6b1be547d00f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1356a45ef042e7bd3d539fbb606d6b1be547d00f"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b73d5784aa1d4e840aaff347dffecf17f2952104",
        "filename": "test/functional/p2p_filter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/854382885f18aa9a95cdde3d11591b05c305ad3f/test/functional/p2p_filter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/854382885f18aa9a95cdde3d11591b05c305ad3f/test/functional/p2p_filter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_filter.py?ref=854382885f18aa9a95cdde3d11591b05c305ad3f",
        "patch": "@@ -68,13 +68,13 @@ def run_test(self):\n         self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n         block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n         txid = self.nodes[0].getblock(block_hash)['tx'][0]\n-        filter_node.wait_for_merkleblock(int(block_hash, 16))\n+        filter_node.wait_for_merkleblock(block_hash)\n         filter_node.wait_for_tx(txid)\n \n         self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n         filter_node.tx_received = False\n         block_hash = self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())[0]\n-        filter_node.wait_for_merkleblock(int(block_hash, 16))\n+        filter_node.wait_for_merkleblock(block_hash)\n         assert not filter_node.tx_received\n \n         self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')"
      },
      {
        "sha": "58be703bf656b655448bc70d3f9c5ff51971e85e",
        "filename": "test/functional/p2p_invalid_locator.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/854382885f18aa9a95cdde3d11591b05c305ad3f/test/functional/p2p_invalid_locator.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/854382885f18aa9a95cdde3d11591b05c305ad3f/test/functional/p2p_invalid_locator.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_locator.py?ref=854382885f18aa9a95cdde3d11591b05c305ad3f",
        "patch": "@@ -34,7 +34,7 @@ def run_test(self):\n             msg.locator.vHave = [int(node.getblockhash(i - 1), 16) for i in range(block_count, block_count - (MAX_LOCATOR_SZ), -1)]\n             node.p2p.send_message(msg)\n             if type(msg) == msg_getheaders:\n-                node.p2p.wait_for_header(int(node.getbestblockhash(), 16))\n+                node.p2p.wait_for_header(node.getbestblockhash())\n             else:\n                 node.p2p.wait_for_block(int(node.getbestblockhash(), 16))\n "
      },
      {
        "sha": "beda7eeabad18232c42816afb70c6b81f7edc39a",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/854382885f18aa9a95cdde3d11591b05c305ad3f/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/854382885f18aa9a95cdde3d11591b05c305ad3f/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=854382885f18aa9a95cdde3d11591b05c305ad3f",
        "patch": "@@ -393,7 +393,7 @@ def test_function():\n             last_headers = self.last_message.get('headers')\n             if not last_headers:\n                 return False\n-            return last_headers.headers[0].rehash() == blockhash\n+            return last_headers.headers[0].rehash() == int(blockhash, 16)\n \n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n@@ -403,7 +403,7 @@ def test_function():\n             last_filtered_block = self.last_message.get('merkleblock')\n             if not last_filtered_block:\n                 return False\n-            return last_filtered_block.merkleblock.header.rehash() == blockhash\n+            return last_filtered_block.merkleblock.header.rehash() == int(blockhash, 16)\n \n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n "
      }
    ]
  }
]