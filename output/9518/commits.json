[
  {
    "sha": "918d1fb86b687693b4f248c14238676300872749",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MThkMWZiODZiNjg3NjkzYjRmMjQ4YzE0MjM4Njc2MzAwODcyNzQ5",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-01-11T19:25:32Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-01-11T19:25:32Z"
      },
      "message": "Return height of last block pruned by pruneblockchain RPC\n\nChange suggested by Jonas Schnelli <dev@jonasschnelli.ch> in\nhttps://github.com/bitcoin/bitcoin/pull/7871#discussion_r95577623",
      "tree": {
        "sha": "16848c527b9124b42eafe3ce851e95273f2f6d46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16848c527b9124b42eafe3ce851e95273f2f6d46"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/918d1fb86b687693b4f248c14238676300872749",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/918d1fb86b687693b4f248c14238676300872749",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/918d1fb86b687693b4f248c14238676300872749",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/918d1fb86b687693b4f248c14238676300872749/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2e624d9ce54d5d0f1fc0b1934c798804d7d7cff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2e624d9ce54d5d0f1fc0b1934c798804d7d7cff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2e624d9ce54d5d0f1fc0b1934c798804d7d7cff"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 32,
      "deletions": 8
    },
    "files": [
      {
        "sha": "05e72e607863ec82c57650f6956d2e81f62ef1cd",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 22,
        "deletions": 5,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/918d1fb86b687693b4f248c14238676300872749/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/918d1fb86b687693b4f248c14238676300872749/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=918d1fb86b687693b4f248c14238676300872749",
        "patch": "@@ -16,6 +16,8 @@\n import time\n import os\n \n+MIN_BLOCKS_TO_KEEP = 288\n+\n \n def calc_usage(blockdir):\n     return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f)) / (1024. * 1024.)\n@@ -241,6 +243,21 @@ def height(index):\n             else:\n                 return index\n \n+        def prune(index, expected_ret=None):\n+            ret = node.pruneblockchain(height(index))\n+            # Check the return value. When use_timestamp is True, just check\n+            # that the return value is less than or equal to the expected\n+            # value, because when more than one block is generated per second,\n+            # a timestamp will not be granular enough to uniquely identify an\n+            # individual block.\n+            if expected_ret is None:\n+                expected_ret = index\n+            if use_timestamp:\n+                assert_greater_than(ret, 0)\n+                assert_greater_than(expected_ret + 1, ret)\n+            else:\n+                assert_equal(ret, expected_ret)\n+\n         def has_block(index):\n             return os.path.isfile(self.options.tmpdir + \"/node{}/regtest/blocks/blk{:05}.dat\".format(node_number, index))\n \n@@ -264,30 +281,30 @@ def has_block(index):\n             pass\n \n         # height=100 too low to prune first block file so this is a no-op\n-        node.pruneblockchain(height(100))\n+        prune(100)\n         if not has_block(0):\n             raise AssertionError(\"blk00000.dat is missing when should still be there\")\n \n         # height=500 should prune first file\n-        node.pruneblockchain(height(500))\n+        prune(500)\n         if has_block(0):\n             raise AssertionError(\"blk00000.dat is still there, should be pruned by now\")\n         if not has_block(1):\n             raise AssertionError(\"blk00001.dat is missing when should still be there\")\n \n         # height=650 should prune second file\n-        node.pruneblockchain(height(650))\n+        prune(650)\n         if has_block(1):\n             raise AssertionError(\"blk00001.dat is still there, should be pruned by now\")\n \n         # height=1000 should not prune anything more, because tip-288 is in blk00002.dat.\n-        node.pruneblockchain(height(1000))\n+        prune(1000, 1001 - MIN_BLOCKS_TO_KEEP)\n         if not has_block(2):\n             raise AssertionError(\"blk00002.dat is still there, should be pruned by now\")\n \n         # advance the tip so blk00002.dat and blk00003.dat can be pruned (the last 288 blocks should now be in blk00004.dat)\n         node.generate(288)\n-        node.pruneblockchain(height(1000))\n+        prune(1000)\n         if has_block(2):\n             raise AssertionError(\"blk00002.dat is still there, should be pruned by now\")\n         if has_block(3):"
      },
      {
        "sha": "8a912ff3df87d79a476a5cb40de541496f738058",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/918d1fb86b687693b4f248c14238676300872749/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/918d1fb86b687693b4f248c14238676300872749/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=918d1fb86b687693b4f248c14238676300872749",
        "patch": "@@ -820,7 +820,12 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n         throw runtime_error(\n             \"pruneblockchain\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or to a unix timestamp to prune based on block time.\\n\");\n+            \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or to a unix timestamp to prune based on block time.\\n\"\n+            \"\\nResult:\\n\"\n+            \"n    (numeric) Height of the last block pruned.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"pruneblockchain\", \"1000\")\n+            + HelpExampleRpc(\"pruneblockchain\", \"1000\"));\n \n     if (!fPruneMode)\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Cannot prune blocks because node is not in prune mode.\");\n@@ -847,11 +852,13 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Blockchain is too short for pruning.\");\n     else if (height > chainHeight)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Blockchain is shorter than the attempted prune height.\");\n-    else if (height > chainHeight - MIN_BLOCKS_TO_KEEP)\n+    else if (height > chainHeight - MIN_BLOCKS_TO_KEEP) {\n         LogPrint(\"rpc\", \"Attempt to prune blocks close to the tip.  Retaining the minimum number of blocks.\");\n+        height = chainHeight - MIN_BLOCKS_TO_KEEP;\n+    }\n \n     PruneBlockFilesManual(height);\n-    return NullUniValue;\n+    return uint64_t(height);\n }\n \n UniValue gettxoutsetinfo(const JSONRPCRequest& request)"
      }
    ]
  }
]