[
  {
    "sha": "df9b2bb97dab8d3179625608fcf3900d1ca0384b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjliMmJiOTdkYWI4ZDMxNzk2MjU2MDhmY2YzOTAwZDFjYTAzODRi",
    "commit": {
      "author": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2016-11-09T21:02:38Z"
      },
      "committer": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2016-11-09T21:02:38Z"
      },
      "message": "Remove requireGreater argment from TxConfirmStats::EstimateMedianVal()\n\nTxConfirmStats::EstimateMedianVal() is only ever called with\nrequireGreater set to true so that function argument can be removed,\nalong with the logic which depends on its value.",
      "tree": {
        "sha": "950cbb31265b9b717d2c4268269a2ce814924c1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/950cbb31265b9b717d2c4268269a2ce814924c1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df9b2bb97dab8d3179625608fcf3900d1ca0384b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df9b2bb97dab8d3179625608fcf3900d1ca0384b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df9b2bb97dab8d3179625608fcf3900d1ca0384b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df9b2bb97dab8d3179625608fcf3900d1ca0384b/comments",
    "author": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb156100f9b43a0f50db57a659b92a84e3f7907e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb156100f9b43a0f50db57a659b92a84e3f7907e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb156100f9b43a0f50db57a659b92a84e3f7907e"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 17,
      "deletions": 24
    },
    "files": [
      {
        "sha": "1e507a6ac8fa199e0e15ce81697e3ed1047916e9",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 21,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9b2bb97dab8d3179625608fcf3900d1ca0384b/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9b2bb97dab8d3179625608fcf3900d1ca0384b/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=df9b2bb97dab8d3179625608fcf3900d1ca0384b",
        "patch": "@@ -76,7 +76,7 @@ void TxConfirmStats::UpdateMovingAverages()\n \n // returns -1 on error conditions\n double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n-                                         double successBreakPoint, bool requireGreater,\n+                                         double successBreakPoint,\n                                          unsigned int nBlockHeight)\n {\n     // Counters for a bucket (or range of buckets)\n@@ -86,28 +86,25 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n \n     int maxbucketindex = buckets.size() - 1;\n \n-    // requireGreater means we are looking for the lowest feerate such that all higher\n+    // We are looking for the lowest feerate such that all higher\n     // values pass, so we start at maxbucketindex (highest feerate) and look at successively\n-    // smaller buckets until we reach failure.  Otherwise, we are looking for the highest\n-    // feerate such that all lower values fail, and we go in the opposite direction.\n-    unsigned int startbucket = requireGreater ? maxbucketindex : 0;\n-    int step = requireGreater ? -1 : 1;\n+    // smaller buckets until we reach failure.\n \n     // We'll combine buckets until we have enough samples.\n     // The near and far variables will define the range we've combined\n     // The best variables are the last range we saw which still had a high\n     // enough confirmation rate to count as success.\n     // The cur variables are the current range we're counting.\n-    unsigned int curNearBucket = startbucket;\n-    unsigned int bestNearBucket = startbucket;\n-    unsigned int curFarBucket = startbucket;\n-    unsigned int bestFarBucket = startbucket;\n+    unsigned int curNearBucket = maxbucketindex;\n+    unsigned int bestNearBucket = maxbucketindex;\n+    unsigned int curFarBucket = maxbucketindex;\n+    unsigned int bestFarBucket = maxbucketindex;\n \n     bool foundAnswer = false;\n     unsigned int bins = unconfTxs.size();\n \n-    // Start counting from highest(default) or lowest feerate transactions\n-    for (int bucket = startbucket; bucket >= 0 && bucket <= maxbucketindex; bucket += step) {\n+    // Start counting from highest feerate transactions\n+    for (int bucket = maxbucketindex; bucket >= 0; bucket--) {\n         curFarBucket = bucket;\n         nConf += confAvg[confTarget - 1][bucket];\n         totalNum += txCtAvg[bucket];\n@@ -122,9 +119,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n             double curPct = nConf / (totalNum + extraNum);\n \n             // Check to see if we are no longer getting confirmed at the success rate\n-            if (requireGreater && curPct < successBreakPoint)\n-                break;\n-            if (!requireGreater && curPct > successBreakPoint)\n+            if (curPct < successBreakPoint)\n                 break;\n \n             // Otherwise update the cumulative stats, and the bucket variables\n@@ -136,7 +131,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n                 extraNum = 0;\n                 bestNearBucket = curNearBucket;\n                 bestFarBucket = curFarBucket;\n-                curNearBucket = bucket + step;\n+                curNearBucket = bucket - 1;\n             }\n         }\n     }\n@@ -165,9 +160,9 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n         }\n     }\n \n-    LogPrint(\"estimatefee\", \"%3d: For conf success %s %4.2f need feerate %s: %12.5g from buckets %8g - %8g  Cur Bucket stats %6.2f%%  %8.1f/(%.1f+%d mempool)\\n\",\n-             confTarget, requireGreater ? \">\" : \"<\", successBreakPoint,\n-             requireGreater ? \">\" : \"<\", median, buckets[minBucket], buckets[maxBucket],\n+    LogPrint(\"estimatefee\", \"%3d: For conf success > %4.2f need feerate >: %12.5g from buckets %8g - %8g  Cur Bucket stats %6.2f%%  %8.1f/(%.1f+%d mempool)\\n\",\n+             confTarget, successBreakPoint,\n+             median, buckets[minBucket], buckets[maxBucket],\n              100 * nConf / (totalNum + extraNum), nConf, totalNum, extraNum);\n \n     return median;\n@@ -407,7 +402,7 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n     if (confTarget <= 0 || (unsigned int)confTarget > feeStats.GetMaxConfirms())\n         return CFeeRate(0);\n \n-    double median = feeStats.EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    double median = feeStats.EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, nBestSeenHeight);\n \n     if (median < 0)\n         return CFeeRate(0);\n@@ -425,7 +420,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n \n     double median = -1;\n     while (median < 0 && (unsigned int)confTarget <= feeStats.GetMaxConfirms()) {\n-        median = feeStats.EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+        median = feeStats.EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, nBestSeenHeight);\n     }\n \n     if (answerFoundAtTarget)"
      },
      {
        "sha": "5644956207ae67464381761524f3d8a6c44cdb4b",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9b2bb97dab8d3179625608fcf3900d1ca0384b/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9b2bb97dab8d3179625608fcf3900d1ca0384b/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=df9b2bb97dab8d3179625608fcf3900d1ca0384b",
        "patch": "@@ -144,12 +144,10 @@ class TxConfirmStats\n      * @param confTarget target number of confirmations\n      * @param sufficientTxVal required average number of transactions per block in a bucket range\n      * @param minSuccess the success probability we require\n-     * @param requireGreater return the lowest feerate such that all higher values pass minSuccess OR\n-     *        return the highest feerate such that all lower values fail minSuccess\n      * @param nBlockHeight the current block height\n      */\n     double EstimateMedianVal(int confTarget, double sufficientTxVal,\n-                             double minSuccess, bool requireGreater, unsigned int nBlockHeight);\n+                             double minSuccess, unsigned int nBlockHeight);\n \n     /** Return the max number of confirms we're tracking */\n     unsigned int GetMaxConfirms() { return confAvg.size(); }"
      }
    ]
  }
]