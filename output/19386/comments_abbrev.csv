DrahtBot,2020-06-26 20:26:15,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18606 (test: checks that bitcoin-cli autocomplete is in sync by pierreN)\n\nIf you consider this pull request important, ",https://github.com/bitcoin/bitcoin/pull/19386#issuecomment-650384229,650384229,
laanwj,2020-06-29 14:27:33,"Concept ACK.\n\n>   Here or follow up, makes sense to also assert type of returned UniValue?\n\nFWIW I dislike the idea of doing this at run-time. We don't want RPC to suddenly crash because an argument doesn't match its specified type in the help.\nThe extra checking also adds overhead on every RPC call.\nIt might make sense for something that is enabled with other heavier debug checks, ena",https://github.com/bitcoin/bitcoin/pull/19386#issuecomment-651157811,651157811,
MarcoFalke,2020-06-29 14:38:26,">  It might make sense for something that is enabled with other heavier debug checks, enabled during the tests.\n\nGood idea. This could be hidden behind `--enable-debug` or some other option\n\n> The CLI table could be spit out by some command line flag to bitcoin, however because of cross-compilation we don't want the build process to depend on being able to run the generated executable (and",https://github.com/bitcoin/bitcoin/pull/19386#issuecomment-651164029,651164029,
MarcoFalke,2020-06-30 19:36:01,Addressed feedback. Sorry for the intermediate force-pushes,https://github.com/bitcoin/bitcoin/pull/19386#issuecomment-652000512,652000512,
MarcoFalke,2020-07-03 15:54:31,"> So suggestion from #19386 (comment) doesn't get lost, I think HandleRequest(request) method could call Check(request), so every individual method doesn't have to check its own arguments.\n\nThanks. Fixed and force pushed",https://github.com/bitcoin/bitcoin/pull/19386#issuecomment-653605788,653605788,
laanwj,2020-07-15 15:06:38,"ACK fa7592bfa8691eb0289b21da3571709a18391b0f\n\n>  Makes sense. I think I will keep the linter/test around, but make it less fragile by removing the regex parsing, which has been broken in the past at least once.\n\nI agree. The regexs were a quick hack. More robust parsing would definitely make sense. It's too bad that there's no portable/low-dependency way to get the C++ syntax tree and extr",https://github.com/bitcoin/bitcoin/pull/19386#issuecomment-658823973,658823973,
ryanofsky,2020-06-30 14:43:12,"In commit ""rpc: Add CRPCCommand constructor which takes RPCHelpMan"" (fac1bf1a08ea9cb5a62889e61696d9503338c105)\n\nIMO, it'd be nicer if this were not a macro. Seems like this could be a RPCHelpMan method or standalone function:\n\n```c++\nUniValue HandleRequest(const RPCHelpMan& man, const JSONRPCRequest& request)\n{\n    return man.m_fun(request);\n}\n```\n\nAlso, maybe in the future i",https://github.com/bitcoin/bitcoin/pull/19386#discussion_r447739187,447739187,src/rpc/util.h
ryanofsky,2020-06-30 14:48:28,"In commit ""rpc: Add CRPCCommand constructor which takes RPCHelpMan"" (fac1bf1a08ea9cb5a62889e61696d9503338c105)\n\nI think `RPCMethod m_method` would be more obvious naming than `RPCMethod m_fun`. Also in the future I'd consider a broader name cleanup, like renaming `RPCHelpMan` to `RPCMethod` and renaming `RPCMethod` to `RPCMethodImpl`",https://github.com/bitcoin/bitcoin/pull/19386#discussion_r447743298,447743298,src/rpc/util.h
ryanofsky,2020-06-30 14:56:08,"In commit ""rpc: Update server to use new RPCHelpMan"" (fa0ae5063f4d4eae429b33d4375fd8101adb8150)\n\nThis is just being kept for consistency right? It seems like it should be redundant with the self.Check call immediately above.",https://github.com/bitcoin/bitcoin/pull/19386#discussion_r447749612,447749612,src/rpc/server.cpp
ryanofsky,2020-06-30 15:05:02,"In commit "" rpc: Assert that passed arg names are equal to hardcoded ones (server)"" (fac2edbd5fc8075647e90e90d49b3cd910bdbbb7)\n\nIt seems like it might be cleaner if instead of adding a new HiddenArg struct, and new RPCHelpMan constructor and special case code for m_hidden_arg in GetArgNames, this just added a new `RPCArg::Type::HIDDEN` type. This would also support multiple hidden args, or hid",https://github.com/bitcoin/bitcoin/pull/19386#discussion_r447756565,447756565,src/rpc/util.h
MarcoFalke,2020-06-30 17:19:28,"Hidden args should not be a thing, because I can't imagine a use case for them.\n\nIf they are needed for testing, a new (hidden) RPC method with un-hidden RPC arguments should be added.",https://github.com/bitcoin/bitcoin/pull/19386#discussion_r447851960,447851960,src/rpc/util.h
MarcoFalke,2020-06-30 18:14:56,thx. Done in faaeb2b0b347b40ce456a951eec5e820587e5b02,https://github.com/bitcoin/bitcoin/pull/19386#discussion_r447886121,447886121,src/rpc/util.h
MarcoFalke,2020-06-30 18:15:30,"Thanks, renamed to `RPCMethodImpl` in faaeb2b0b347b40ce456a951eec5e820587e5b02",https://github.com/bitcoin/bitcoin/pull/19386#discussion_r447886463,447886463,src/rpc/util.h
MarcoFalke,2020-06-30 18:21:32,"thx, done in fa87adf7c6433517a8ed56f0c93560bc9837ad64",https://github.com/bitcoin/bitcoin/pull/19386#discussion_r447890090,447890090,src/rpc/server.cpp
ryanofsky,2020-07-02 19:04:09,"re: https://github.com/bitcoin/bitcoin/pull/19386#discussion_r447851960\n\n> Hidden args should not be a thing, because I can't imagine a use case for them.\n> \n> If they are needed for testing, a new (hidden) RPC method with un-hidden RPC arguments should be added.\n\nBeyond testing, undocumented hidden args also seem useful as a way of removing options we no longer want to support like wa",https://github.com/bitcoin/bitcoin/pull/19386#discussion_r449214349,449214349,src/rpc/util.h
MarcoFalke,2020-07-02 20:26:38,"> Beyond testing, undocumented hidden args also seem useful as a way of removing options\n\nI disagree. The RPC interface seems the wrong place to hide options in the documentation but then still accept them. For deprecation we use `-rpcdeprecated` and proper updates to the documentation to say an argument has been deprecated or is discouraged. (Edit: Making an option hidden will only hide the d",https://github.com/bitcoin/bitcoin/pull/19386#discussion_r449249758,449249758,src/rpc/util.h
