[
  {
    "sha": "fa481b19b6032bd48aaa7fab4371667b6f84864a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ4MWIxOWI2MDMyYmQ0OGFhYTdmYWI0MzcxNjY3YjZmODQ4NjRh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-20T17:26:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-20T17:36:47Z"
      },
      "message": "net: Remove -whitelistforcerelay",
      "tree": {
        "sha": "4094aed5783d9d268310bd25f8f2036463b72356",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4094aed5783d9d268310bd25f8f2036463b72356"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa481b19b6032bd48aaa7fab4371667b6f84864a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhqsAv/ZZuPzusK6ke3CdODn1TzS52QyMDCuyuPlFHnvqVddXDQkUm60KgAj8kV\ncgqAAEzKfnEFKb/1W10/E7/fAXS84Uj2Nv/3Q4HbtmpJzBZ8tyu4eKMQjIgGf6d9\nHW9mMTgUVdU1sac93adYNo/hO9JS5Cjmxv0gBk/06kBRhwcQEyNpaH9Cl2r6rvdg\nOixDHR53ZiRT1vOWSMHsYSJ+Qhg4FKc2I5HuCE8Uu3tCfiHBRGwS4U5V4SQjBw30\nWKw2cth2xMzBKMlCPCsRNRh+rQ/z4cxhfzGhSv+zsAYDMfy+p/ONpYZ/8ycsteBf\n3LTCynKnSERIidyuS6rqeHWSAjw1bAuN09DUeaHNE+XSLLCFYFHGO89A5msXkmDf\nHqCtcEqXLxIssll7J3Cv0fQJQ3ImlEgXXngVMyhc6bqjGAyhV7uAv7RGFdFhOvQ+\n253Of/aiA7OMPlzGJCg+RDmkQL+7fhFZwPA0uoycZ+3H1QXJX7uUTJ/og7cYCgRK\nMN0cHV/U\n=6XOX\n-----END PGP SIGNATURE-----",
        "payload": "tree 4094aed5783d9d268310bd25f8f2036463b72356\nparent 149b3477ecff4ff9c50cd38724c86cb6ae4d3276\nauthor MarcoFalke <falke.marco@gmail.com> 1558373201 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1558373807 -0400\n\nnet: Remove -whitelistforcerelay\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa481b19b6032bd48aaa7fab4371667b6f84864a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa481b19b6032bd48aaa7fab4371667b6f84864a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa481b19b6032bd48aaa7fab4371667b6f84864a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "149b3477ecff4ff9c50cd38724c86cb6ae4d3276",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/149b3477ecff4ff9c50cd38724c86cb6ae4d3276",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/149b3477ecff4ff9c50cd38724c86cb6ae4d3276"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 1,
      "deletions": 41
    },
    "files": [
      {
        "sha": "20c37f3235daf59fb9d43cacd680ccedf2c4e510",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa481b19b6032bd48aaa7fab4371667b6f84864a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa481b19b6032bd48aaa7fab4371667b6f84864a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa481b19b6032bd48aaa7fab4371667b6f84864a",
        "patch": "@@ -528,7 +528,6 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-mempoolreplacement\", strprintf(\"Enable transaction replacement in the memory pool (default: %u)\", DEFAULT_ENABLE_REPLACEMENT), false, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Force relay of transactions from whitelisted peers even if the transactions were already in the mempool or violate local relay policy (default: %d)\", DEFAULT_WHITELISTFORCERELAY), false, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-whitelistrelay\", strprintf(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), false, OptionsCategory::NODE_RELAY);\n \n \n@@ -832,12 +831,6 @@ void InitParameterInteraction()\n         if (gArgs.SoftSetBoolArg(\"-whitelistrelay\", false))\n             LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -whitelistrelay=0\\n\", __func__);\n     }\n-\n-    // Forcing relay from whitelisted hosts implies we will accept relays from them in the first place.\n-    if (gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n-        if (gArgs.SoftSetBoolArg(\"-whitelistrelay\", true))\n-            LogPrintf(\"%s: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1\\n\", __func__);\n-    }\n }\n \n static std::string ResolveErrMsg(const char * const optname, const std::string& strBind)"
      },
      {
        "sha": "594323b13da30f7c59fd0dabbfca45f51d5dbb66",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 32,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa481b19b6032bd48aaa7fab4371667b6f84864a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa481b19b6032bd48aaa7fab4371667b6f84864a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa481b19b6032bd48aaa7fab4371667b6f84864a",
        "patch": "@@ -968,17 +968,6 @@ void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIV\n         LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d)%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n }\n \n-/**\n- * Returns true if the given validation state result may result in a peer\n- * banning/disconnecting us. We use this to determine which unaccepted\n- * transactions from a whitelisted peer that we can safely relay.\n- */\n-static bool TxRelayMayResultInDisconnect(const CValidationState& state)\n-{\n-    assert(IsTransactionReason(state.GetReason()));\n-    return state.GetReason() == ValidationInvalidReason::CONSENSUS;\n-}\n-\n /**\n  * Potentially ban a node based on the contents of a CValidationState object\n  *\n@@ -988,8 +977,6 @@ static bool TxRelayMayResultInDisconnect(const CValidationState& state)\n  * txs, the peer should not be punished. See BIP 152.\n  *\n  * @return Returns true if the peer was punished (probably disconnected)\n- *\n- * Changes here may need to be reflected in TxRelayMayResultInDisconnect().\n  */\n static bool MaybePunishNode(NodeId nodeid, const CValidationState& state, bool via_compact_block, const std::string& message = \"\") {\n     switch (state.GetReason()) {\n@@ -2539,22 +2526,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             } else if (tx.HasWitness() && RecursiveDynamicUsage(*ptx) < 100000) {\n                 AddToCompactExtraTransactions(ptx);\n             }\n-\n-            if (pfrom->fWhitelisted && gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n-                // Always relay transactions received from whitelisted peers, even\n-                // if they were already in the mempool or rejected from it due\n-                // to policy, allowing the node to function as a gateway for\n-                // nodes hidden behind it.\n-                //\n-                // Never relay transactions that might result in being\n-                // disconnected (or banned).\n-                if (state.IsInvalid() && TxRelayMayResultInDisconnect(state)) {\n-                    LogPrintf(\"Not relaying invalid transaction %s from whitelisted peer=%d (%s)\\n\", tx.GetHash().ToString(), pfrom->GetId(), FormatStateMessage(state));\n-                } else {\n-                    LogPrintf(\"Force relaying tx %s from whitelisted peer=%d\\n\", tx.GetHash().ToString(), pfrom->GetId());\n-                    RelayTransaction(tx, connman);\n-                }\n-            }\n         }\n \n         for (const CTransactionRef& removedTx : lRemovedTxn)\n@@ -3986,9 +3957,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         //\n         // Message: feefilter\n         //\n-        // We don't want white listed peers to filter txs to us if we have -whitelistforcerelay\n-        if (pto->nVersion >= FEEFILTER_VERSION && gArgs.GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n-            !(pto->fWhitelisted && gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY))) {\n+        if (pto->nVersion >= FEEFILTER_VERSION && gArgs.GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER)) {\n             CAmount currentFilter = mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n             int64_t timeNow = GetTimeMicros();\n             if (timeNow > pto->nextSendTimeFeeFilter) {"
      },
      {
        "sha": "29c1558d0ec989c6919d075b81471d9599a8c799",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa481b19b6032bd48aaa7fab4371667b6f84864a/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa481b19b6032bd48aaa7fab4371667b6f84864a/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa481b19b6032bd48aaa7fab4371667b6f84864a",
        "patch": "@@ -49,8 +49,6 @@ struct LockPoints;\n \n /** Default for -whitelistrelay. */\n static const bool DEFAULT_WHITELISTRELAY = true;\n-/** Default for -whitelistforcerelay. */\n-static const bool DEFAULT_WHITELISTFORCERELAY = false;\n /** Default for -minrelaytxfee, minimum relay fee for transactions */\n static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n /** Default for -limitancestorcount, max number of in-mempool ancestors */"
      }
    ]
  }
]