[
  {
    "sha": "fc289b7898fb90d4800675b69c0bb9b42df5599f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzI4OWI3ODk4ZmI5MGQ0ODAwNjc1YjY5YzBiYjliNDJkZjU1OTlm",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-04-11T23:42:15Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-04-19T13:04:37Z"
      },
      "message": "wallet: Refactor WalletRescanReserver to use wallet reference",
      "tree": {
        "sha": "d23ed832298fd2e74d934e5cf554328e7e9028b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d23ed832298fd2e74d934e5cf554328e7e9028b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc289b7898fb90d4800675b69c0bb9b42df5599f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc289b7898fb90d4800675b69c0bb9b42df5599f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc289b7898fb90d4800675b69c0bb9b42df5599f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc289b7898fb90d4800675b69c0bb9b42df5599f/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b470c758470fd97ccb42d0348a32942afa2a3ec8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b470c758470fd97ccb42d0348a32942afa2a3ec8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b470c758470fd97ccb42d0348a32942afa2a3ec8"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 23,
      "deletions": 23
    },
    "files": [
      {
        "sha": "94a1e0a63dbb634458e924237eae22638261707f",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc289b7898fb90d4800675b69c0bb9b42df5599f/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc289b7898fb90d4800675b69c0bb9b42df5599f/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=fc289b7898fb90d4800675b69c0bb9b42df5599f",
        "patch": "@@ -152,7 +152,7 @@ void TestGUI(interfaces::Node& node)\n         wallet->SetLastBlockProcessed(105, ::ChainActive().Tip()->GetBlockHash());\n     }\n     {\n-        WalletRescanReserver reserver(wallet.get());\n+        WalletRescanReserver reserver(*wallet);\n         reserver.reserve();\n         CWallet::ScanResult result = wallet->ScanForWalletTransactions(Params().GetConsensus().hashGenesisBlock, 0 /* block height */, {} /* max height */, reserver, true /* fUpdate */);\n         QCOMPARE(result.status, CWallet::ScanResult::SUCCESS);"
      },
      {
        "sha": "ceb7a7d28771aa0c61113f1bd66a729977073b79",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc289b7898fb90d4800675b69c0bb9b42df5599f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc289b7898fb90d4800675b69c0bb9b42df5599f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fc289b7898fb90d4800675b69c0bb9b42df5599f",
        "patch": "@@ -130,7 +130,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n \n     EnsureLegacyScriptPubKeyMan(*wallet, true);\n \n-    WalletRescanReserver reserver(pwallet);\n+    WalletRescanReserver reserver(*pwallet);\n     bool fRescan = true;\n     {\n         auto locked_chain = pwallet->chain().lock();\n@@ -274,7 +274,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled when blocks are pruned\");\n     }\n \n-    WalletRescanReserver reserver(pwallet);\n+    WalletRescanReserver reserver(*pwallet);\n     if (fRescan && !reserver.reserve()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n@@ -474,7 +474,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled when blocks are pruned\");\n     }\n \n-    WalletRescanReserver reserver(pwallet);\n+    WalletRescanReserver reserver(*pwallet);\n     if (fRescan && !reserver.reserve()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n@@ -549,7 +549,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing wallets is disabled when blocks are pruned\");\n     }\n \n-    WalletRescanReserver reserver(pwallet);\n+    WalletRescanReserver reserver(*pwallet);\n     if (!reserver.reserve()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n@@ -1365,7 +1365,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         }\n     }\n \n-    WalletRescanReserver reserver(pwallet);\n+    WalletRescanReserver reserver(*pwallet);\n     if (fRescan && !reserver.reserve()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }"
      },
      {
        "sha": "4e05b3769beb0ef7b1ff4e6eea6097deea57359e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc289b7898fb90d4800675b69c0bb9b42df5599f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc289b7898fb90d4800675b69c0bb9b42df5599f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fc289b7898fb90d4800675b69c0bb9b42df5599f",
        "patch": "@@ -3540,7 +3540,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    WalletRescanReserver reserver(pwallet);\n+    WalletRescanReserver reserver(*pwallet);\n     if (!reserver.reserve()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }"
      },
      {
        "sha": "9e1c1ce0be3a5b89a64fbc4f176632c1afefdc5b",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc289b7898fb90d4800675b69c0bb9b42df5599f/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc289b7898fb90d4800675b69c0bb9b42df5599f/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fc289b7898fb90d4800675b69c0bb9b42df5599f",
        "patch": "@@ -54,7 +54,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n-        WalletRescanReserver reserver(&wallet);\n+        WalletRescanReserver reserver(wallet);\n         reserver.reserve();\n         CWallet::ScanResult result = wallet.ScanForWalletTransactions({} /* start_block */, 0 /* start_height */, {} /* max_height */, reserver, false /* update */);\n         BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::FAILURE);\n@@ -73,7 +73,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n-        WalletRescanReserver reserver(&wallet);\n+        WalletRescanReserver reserver(wallet);\n         reserver.reserve();\n         CWallet::ScanResult result = wallet.ScanForWalletTransactions(oldTip->GetBlockHash(), oldTip->nHeight, {} /* max_height */, reserver, false /* update */);\n         BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::SUCCESS);\n@@ -96,7 +96,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n-        WalletRescanReserver reserver(&wallet);\n+        WalletRescanReserver reserver(wallet);\n         reserver.reserve();\n         CWallet::ScanResult result = wallet.ScanForWalletTransactions(oldTip->GetBlockHash(), oldTip->nHeight, {} /* max_height */, reserver, false /* update */);\n         BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::FAILURE);\n@@ -118,7 +118,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n-        WalletRescanReserver reserver(&wallet);\n+        WalletRescanReserver reserver(wallet);\n         reserver.reserve();\n         CWallet::ScanResult result = wallet.ScanForWalletTransactions(oldTip->GetBlockHash(), oldTip->nHeight, {} /* max_height */, reserver, false /* update */);\n         BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::FAILURE);\n@@ -463,7 +463,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         AddKey(*wallet, coinbaseKey);\n-        WalletRescanReserver reserver(wallet.get());\n+        WalletRescanReserver reserver(*wallet);\n         reserver.reserve();\n         CWallet::ScanResult result = wallet->ScanForWalletTransactions(::ChainActive().Genesis()->GetBlockHash(), 0 /* start_height */, {} /* max_height */, reserver, false /* update */);\n         BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::SUCCESS);"
      },
      {
        "sha": "7a6deab1a8c2ebd69e3a5db39fe76bf2e1ec3ac9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc289b7898fb90d4800675b69c0bb9b42df5599f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc289b7898fb90d4800675b69c0bb9b42df5599f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fc289b7898fb90d4800675b69c0bb9b42df5599f",
        "patch": "@@ -4023,7 +4023,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n \n         {\n-            WalletRescanReserver reserver(walletInstance.get());\n+            WalletRescanReserver reserver(*walletInstance);\n             if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(locked_chain->getBlockHash(rescan_height), rescan_height, {} /* max height */, reserver, true /* update */).status)) {\n                 error = _(\"Failed to rescan the wallet during initialization\").translated;\n                 return nullptr;"
      },
      {
        "sha": "176c483572a8cd759298cbc647d662046a9b8f40",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc289b7898fb90d4800675b69c0bb9b42df5599f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc289b7898fb90d4800675b69c0bb9b42df5599f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fc289b7898fb90d4800675b69c0bb9b42df5599f",
        "patch": "@@ -1244,35 +1244,35 @@ void MaybeResendWalletTxs();\n class WalletRescanReserver\n {\n private:\n-    CWallet* m_wallet;\n+    CWallet& m_wallet;\n     bool m_could_reserve;\n public:\n-    explicit WalletRescanReserver(CWallet* w) : m_wallet(w), m_could_reserve(false) {}\n+    explicit WalletRescanReserver(CWallet& w) : m_wallet(w), m_could_reserve(false) {}\n \n     bool reserve()\n     {\n         assert(!m_could_reserve);\n-        std::lock_guard<std::mutex> lock(m_wallet->mutexScanning);\n-        if (m_wallet->fScanningWallet) {\n+        std::lock_guard<std::mutex> lock(m_wallet.mutexScanning);\n+        if (m_wallet.fScanningWallet) {\n             return false;\n         }\n-        m_wallet->m_scanning_start = GetTimeMillis();\n-        m_wallet->m_scanning_progress = 0;\n-        m_wallet->fScanningWallet = true;\n+        m_wallet.m_scanning_start = GetTimeMillis();\n+        m_wallet.m_scanning_progress = 0;\n+        m_wallet.fScanningWallet = true;\n         m_could_reserve = true;\n         return true;\n     }\n \n     bool isReserved() const\n     {\n-        return (m_could_reserve && m_wallet->fScanningWallet);\n+        return (m_could_reserve && m_wallet.fScanningWallet);\n     }\n \n     ~WalletRescanReserver()\n     {\n-        std::lock_guard<std::mutex> lock(m_wallet->mutexScanning);\n+        std::lock_guard<std::mutex> lock(m_wallet.mutexScanning);\n         if (m_could_reserve) {\n-            m_wallet->fScanningWallet = false;\n+            m_wallet.fScanningWallet = false;\n         }\n     }\n };"
      }
    ]
  }
]