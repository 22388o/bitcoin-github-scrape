[
  {
    "sha": "3c21db7b78fb0a27a0ea61b64eede8af0972791f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzIxZGI3Yjc4ZmIwYTI3YTBlYTYxYjY0ZWVkZThhZjA5NzI3OTFm",
    "commit": {
      "author": {
        "name": "Gloria Zhao",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-03-19T17:52:13Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-04-21T15:17:42Z"
      },
      "message": "[test] add 8 error messages to feature_segwit and change version to type\n\nP2WPKH witness program without signature -> throws \"hash mismatch\" error\nP2WSH witness program without signature -> throws \"empty witness\" error\nsame errors for P2SH_P2WPKH and P2SH_P2WSH respectively when passed redeemScript but no signature\nP2SH_P2WPKH and P2SH_P2WSH with no signature fail with \"Operation not valid with current stack size\" when not signed due to missing input\nchange VER to TYPE and constants WIT_V0 to P2WPKH=0 and WIT_V1 to P2WSH=1",
      "tree": {
        "sha": "df0831fab7d566deb93b8aba549edaba8995367d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df0831fab7d566deb93b8aba549edaba8995367d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c21db7b78fb0a27a0ea61b64eede8af0972791f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c21db7b78fb0a27a0ea61b64eede8af0972791f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c21db7b78fb0a27a0ea61b64eede8af0972791f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c21db7b78fb0a27a0ea61b64eede8af0972791f/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54a7ef612a3b69984d521432f8a694a682c76090",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54a7ef612a3b69984d521432f8a694a682c76090",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54a7ef612a3b69984d521432f8a694a682c76090"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 24,
      "deletions": 24
    },
    "files": [
      {
        "sha": "0686835accd27ac395a3aeb2317952173bf9911f",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c21db7b78fb0a27a0ea61b64eede8af0972791f/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c21db7b78fb0a27a0ea61b64eede8af0972791f/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=3c21db7b78fb0a27a0ea61b64eede8af0972791f",
        "patch": "@@ -28,8 +28,8 @@\n \n NODE_0 = 0\n NODE_2 = 2\n-WIT_V0 = 0\n-WIT_V1 = 1\n+P2WPKH = 0\n+P2WSH = 1\n \n def getutxo(txid):\n     utxo = {}\n@@ -117,8 +117,8 @@ def run_test(self):\n \n         balance_presetup = self.nodes[0].getbalance()\n         self.pubkey = []\n-        p2sh_ids = []  # p2sh_ids[NODE][VER] is an array of txids that spend to a witness version VER pkscript to an address for NODE embedded in p2sh\n-        wit_ids = []  # wit_ids[NODE][VER] is an array of txids that spend to a witness version VER pkscript to an address for NODE via bare witness\n+        p2sh_ids = [] # p2sh_ids[NODE][TYPE] is an array of txids that spend to P2WPKH (TYPE=0) or P2WSH (TYPE=1) scripts to an address for NODE embedded in p2sh\n+        wit_ids = [] # wit_ids[NODE][TYPE] is an array of txids that spend to P2WPKH (TYPE=0) or P2WSH (TYPE=1) scripts to an address for NODE via bare witness\n         for i in range(3):\n             newaddress = self.nodes[i].getnewaddress()\n             self.pubkey.append(self.nodes[i].getaddressinfo(newaddress)[\"pubkey\"])\n@@ -151,14 +151,14 @@ def run_test(self):\n         self.sync_blocks()\n \n         self.log.info(\"Verify witness txs are skipped for mining before the fork\")\n-        self.skip_mine(self.nodes[2], wit_ids[NODE_2][WIT_V0][0], True)  # block 424\n-        self.skip_mine(self.nodes[2], wit_ids[NODE_2][WIT_V1][0], True)  # block 425\n-        self.skip_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][0], True)  # block 426\n-        self.skip_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][0], True)  # block 427\n+        self.skip_mine(self.nodes[2], wit_ids[NODE_2][P2WPKH][0], True)  # block 424\n+        self.skip_mine(self.nodes[2], wit_ids[NODE_2][P2WSH][0], True)  # block 425\n+        self.skip_mine(self.nodes[2], p2sh_ids[NODE_2][P2WPKH][0], True)  # block 426\n+        self.skip_mine(self.nodes[2], p2sh_ids[NODE_2][P2WSH][0], True)  # block 427\n \n         self.log.info(\"Verify unsigned p2sh witness txs without a redeem script are invalid\")\n-        self.fail_accept(self.nodes[2], \"mandatory-script-verify-flag\", p2sh_ids[NODE_2][WIT_V0][1], False)\n-        self.fail_accept(self.nodes[2], \"mandatory-script-verify-flag\", p2sh_ids[NODE_2][WIT_V1][1], False)\n+        self.fail_accept(self.nodes[2], \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\", p2sh_ids[NODE_2][P2WPKH][1], sign=False)\n+        self.fail_accept(self.nodes[2], \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\", p2sh_ids[NODE_2][P2WSH][1], sign=False)\n \n         self.nodes[2].generate(4)  # blocks 428-431\n \n@@ -172,13 +172,13 @@ def run_test(self):\n \n         self.log.info(\"Verify default node can't accept txs with missing witness\")\n         # unsigned, no scriptsig\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", wit_ids[NODE_0][WIT_V0][0], False)\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", wit_ids[NODE_0][WIT_V1][0], False)\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V0][0], False)\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V1][0], False)\n+        self.fail_accept(self.nodes[0], \"non-mandatory-script-verify-flag (Witness program hash mismatch)\", wit_ids[NODE_0][P2WPKH][0], sign=False)\n+        self.fail_accept(self.nodes[0], \"non-mandatory-script-verify-flag (Witness program was passed an empty witness)\", wit_ids[NODE_0][P2WSH][0], sign=False)\n+        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\", p2sh_ids[NODE_0][P2WPKH][0], sign=False)\n+        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\", p2sh_ids[NODE_0][P2WSH][0], sign=False)\n         # unsigned with redeem script\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V0][0], False, witness_script(False, self.pubkey[0]))\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V1][0], False, witness_script(True, self.pubkey[0]))\n+        self.fail_accept(self.nodes[0], \"non-mandatory-script-verify-flag (Witness program hash mismatch)\", p2sh_ids[NODE_0][P2WPKH][0], sign=False, redeem_script=witness_script(False, self.pubkey[0]))\n+        self.fail_accept(self.nodes[0], \"non-mandatory-script-verify-flag (Witness program was passed an empty witness)\", p2sh_ids[NODE_0][P2WSH][0], sign=False, redeem_script=witness_script(True, self.pubkey[0]))\n \n         self.log.info(\"Verify block and transaction serialization rpcs return differing serializations depending on rpc serialization flag\")\n         assert self.nodes[2].getblock(blockhash, False) != self.nodes[0].getblock(blockhash, False)\n@@ -193,16 +193,16 @@ def run_test(self):\n             assert self.nodes[0].getrawtransaction(tx_id, False, blockhash) == tx.serialize_without_witness().hex()\n \n         self.log.info(\"Verify witness txs without witness data are invalid after the fork\")\n-        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program hash mismatch)', wit_ids[NODE_2][WIT_V0][2], sign=False)\n-        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program was passed an empty witness)', wit_ids[NODE_2][WIT_V1][2], sign=False)\n-        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program hash mismatch)', p2sh_ids[NODE_2][WIT_V0][2], sign=False, redeem_script=witness_script(False, self.pubkey[2]))\n-        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program was passed an empty witness)', p2sh_ids[NODE_2][WIT_V1][2], sign=False, redeem_script=witness_script(True, self.pubkey[2]))\n+        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program hash mismatch)', wit_ids[NODE_2][P2WPKH][2], sign=False)\n+        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program was passed an empty witness)', wit_ids[NODE_2][P2WSH][2], sign=False)\n+        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program hash mismatch)', p2sh_ids[NODE_2][P2WPKH][2], sign=False, redeem_script=witness_script(False, self.pubkey[2]))\n+        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program was passed an empty witness)', p2sh_ids[NODE_2][P2WSH][2], sign=False, redeem_script=witness_script(True, self.pubkey[2]))\n \n         self.log.info(\"Verify default node can now use witness txs\")\n-        self.success_mine(self.nodes[0], wit_ids[NODE_0][WIT_V0][0], True)  # block 432\n-        self.success_mine(self.nodes[0], wit_ids[NODE_0][WIT_V1][0], True)  # block 433\n-        self.success_mine(self.nodes[0], p2sh_ids[NODE_0][WIT_V0][0], True)  # block 434\n-        self.success_mine(self.nodes[0], p2sh_ids[NODE_0][WIT_V1][0], True)  # block 435\n+        self.success_mine(self.nodes[0], wit_ids[NODE_0][P2WPKH][0], True)  # block 432\n+        self.success_mine(self.nodes[0], wit_ids[NODE_0][P2WSH][0], True)  # block 433\n+        self.success_mine(self.nodes[0], p2sh_ids[NODE_0][P2WPKH][0], True)  # block 434\n+        self.success_mine(self.nodes[0], p2sh_ids[NODE_0][P2WSH][0], True)  # block 435\n \n         self.log.info(\"Verify sigops are counted in GBT with BIP141 rules after the fork\")\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)"
      }
    ]
  }
]