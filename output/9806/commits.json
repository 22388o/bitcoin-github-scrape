[
  {
    "sha": "c889147288139d2588cd5176f80cf94ac8104a4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODg5MTQ3Mjg4MTM5ZDI1ODhjZDUxNzZmODBjZjk0YWM4MTA0YTRk",
    "commit": {
      "author": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-10-05T20:30:01Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-04-27T23:19:46Z"
      },
      "message": "txoutsbyaddress index",
      "tree": {
        "sha": "d1139b0bdcdc464a0a7e2f569f17390e049b1337",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1139b0bdcdc464a0a7e2f569f17390e049b1337"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c889147288139d2588cd5176f80cf94ac8104a4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c889147288139d2588cd5176f80cf94ac8104a4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c889147288139d2588cd5176f80cf94ac8104a4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c889147288139d2588cd5176f80cf94ac8104a4d/comments",
    "author": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c924011f535c46b3bc02bef8b7e2a8ad559d78d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c924011f535c46b3bc02bef8b7e2a8ad559d78d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c924011f535c46b3bc02bef8b7e2a8ad559d78d"
      }
    ],
    "stats": {
      "total": 1029,
      "additions": 948,
      "deletions": 81
    },
    "files": [
      {
        "sha": "40c21f77413b72d239ccfb481004e9a30aa09274",
        "filename": "qa/rpc-tests/txoutsbyaddress.sh",
        "status": "added",
        "additions": 163,
        "deletions": 0,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/qa/rpc-tests/txoutsbyaddress.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/qa/rpc-tests/txoutsbyaddress.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txoutsbyaddress.sh?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -0,0 +1,163 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2013-2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# Test -txoutsbyaddressindex\n+\n+if [ $# -lt 1 ]; then\n+        echo \"Usage: $0 path_to_binaries\"\n+        echo \"e.g. $0 ../../src\"\n+        exit 1\n+fi\n+\n+set -f\n+\n+BITCOIND=${1}/bitcoind\n+CLI=${1}/bitcoin-cli\n+\n+DIR=\"${BASH_SOURCE%/*}\"\n+SENDANDWAIT=\"${DIR}/send.sh\"\n+if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n+. \"$DIR/util.sh\"\n+\n+D=$(mktemp -d test.XXXXX)\n+\n+D1=${D}/node1\n+CreateDataDir \"$D1\" port=11000 rpcport=11001\n+B1ARGS=\"-datadir=$D1\"\n+$BITCOIND $B1ARGS -txoutsbyaddressindex -sendfreetransactions=1 &\n+B1PID=$!\n+\n+D2=${D}/node2\n+CreateDataDir \"$D2\" port=11010 rpcport=11011\n+B2ARGS=\"-datadir=$D2\"\n+$BITCOIND $B2ARGS -sendfreetransactions=1 &\n+B2PID=$!\n+\n+D3=${D}/node3\n+CreateDataDir \"$D3\" port=11020 rpcport=11021\n+B3ARGS=\"-datadir=$D3\"\n+$BITCOIND $B3ARGS -sendfreetransactions=1 &\n+B3PID=$!\n+\n+# Wait until all three nodes are at the same block number\n+function WaitBlocks {\n+    while :\n+    do\n+        sleep 1\n+        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n+        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n+        declare -i BLOCKS3=$( GetBlocks $B3ARGS )\n+        if (( BLOCKS1 == BLOCKS2 && BLOCKS2 == BLOCKS3 ))\n+        then\n+            break\n+        fi\n+    done\n+}\n+\n+function WaitBlocks2 {\n+    while :\n+    do\n+        sleep 1\n+        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n+        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n+        if (( BLOCKS1 == BLOCKS2 ))\n+        then\n+            break\n+        fi\n+    done\n+}\n+\n+function CleanUp {\n+$CLI $B3ARGS stop > /dev/null 2>&1\n+wait $B3PID\n+$CLI $B2ARGS stop > /dev/null 2>&1\n+wait $B2PID\n+$CLI $B1ARGS stop > /dev/null 2>&1\n+wait $B1PID\n+\n+rm -rf $D\n+}\n+\n+function ErrorAndExit {\n+echo \"$@\" 1>&2;\n+CleanUp\n+exit 1\n+}\n+\n+echo \"Generating test blockchain...\"\n+\n+# mining\n+$CLI $B2ARGS addnode \"127.0.0.1:11000\" \"onetry\"\n+$CLI $B3ARGS addnode \"127.0.0.1:11000\" \"onetry\"\n+$CLI $B1ARGS generate 101\n+WaitBlocks\n+CheckBalance \"$B1ARGS\" 50\n+\n+# TX1: send from node1 to node2\n+# - check if txout from tx1 is there\n+address=$($CLI $B2ARGS getnewaddress)\n+txid1=$($CLI $B1ARGS sendtoaddress $address 10)\n+$CLI $B1ARGS generate 1\n+WaitBlocks\n+CheckBalance \"$B1ARGS\" 90\n+CheckBalance \"$B2ARGS\" 10\n+txouts=$($CLI $B1ARGS gettxoutsbyaddress 1 \"[\\\"\"\"$address\"\"\\\"]\")\n+txid=$(ExtractKey \"txid\" \"$txouts\")\n+if [ -z \"$txid\" ] || [ $txid != $txid1 ] ; then\n+   ErrorAndExit \"wrong txid1: $txid != $txid1\"\n+fi\n+\n+# stop node 3\n+$CLI $B3ARGS stop > /dev/null 2>&1\n+wait $B3PID\n+\n+# TX2: send from node2 to node1\n+# - check if txout from tx1 is gone\n+# - check if txout from tx2 is there\n+address2=$($CLI $B1ARGS getnewaddress)\n+txid2=$($CLI $B2ARGS sendtoaddress $address2 5)\n+$CLI $B2ARGS generate 1\n+WaitBlocks2\n+CheckBalance \"$B1ARGS\" 145\n+txouts=$($CLI $B1ARGS gettxoutsbyaddress 1 \"[\\\"\"\"$address\"\"\\\"]\")\n+txid=$(ExtractKey \"txid\" \"$txouts\")\n+if [ ! -z \"$txid\" ] ; then\n+   ErrorAndExit \"txid not empty: $txid\"\n+fi\n+txouts=$($CLI $B1ARGS gettxoutsbyaddress 1 \"[\\\"\"\"$address2\"\"\\\"]\")\n+txid=$(ExtractKey \"txid\" \"$txouts\")\n+if [ -z \"$txid\" ] || [ $txid != $txid2 ] ; then\n+   ErrorAndExit \"wrong txid2: $txid != $txid2\"\n+fi\n+\n+# start node 3\n+$BITCOIND $B3ARGS &\n+B3PID=$!\n+\n+# mine 10 blocks alone to have the longest chain\n+$CLI $B3ARGS generate 10\n+$CLI $B1ARGS addnode \"127.0.0.1:11020\" \"onetry\"\n+$CLI $B2ARGS addnode \"127.0.0.1:11020\" \"onetry\"\n+$CLI $B3ARGS generate 1\n+WaitBlocks\n+\n+# TX2 must be reverted\n+# - check if txout from tx1 is there again\n+# - check if txout from tx2 is gone\n+CheckBalance \"$B1ARGS\" 640\n+txouts=$($CLI $B1ARGS gettxoutsbyaddress 1 \"[\\\"\"\"$address\"\"\\\"]\")\n+txid=$(ExtractKey \"txid\" \"$txouts\")\n+if [ -z \"$txid\" ] || [ $txid != $txid1 ] ; then\n+   ErrorAndExit \"wrong txid1 : $txid != $txid1\"\n+fi\n+txouts=$($CLI $B1ARGS gettxoutsbyaddress 1 \"[\\\"\"\"$address2\"\"\\\"]\")\n+txid=$(ExtractKey \"txid\" \"$txouts\")\n+if [ ! -z \"$txid\" ] ; then\n+   ErrorAndExit \"txid is not empty: $txid\"\n+fi\n+\n+echo \"Tests successful, cleaning up\"\n+CleanUp\n+exit 0"
      },
      {
        "sha": "5c16be936c95063fe03ccfdd13719ab624455407",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -89,6 +89,8 @@ BITCOIN_CORE_H = \\\n   checkqueue.h \\\n   clientversion.h \\\n   coins.h \\\n+  coinsbyscript.h \\\n+  coinstats.h \\\n   compat.h \\\n   compat/byteswap.h \\\n   compat/endian.h \\\n@@ -305,6 +307,8 @@ libbitcoin_common_a_SOURCES = \\\n   base58.cpp \\\n   chainparams.cpp \\\n   coins.cpp \\\n+  coinsbyscript.cpp \\\n+  coinstats.cpp \\\n   compressor.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\"
      },
      {
        "sha": "563aaed9646fa5d2ed589dddd33c9c4754eeaf7d",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -96,7 +96,7 @@ static void MempoolEviction(benchmark::State& state)\n     tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n     tx7.vout[1].nValue = 10 * COIN;\n \n-    CTxMemPool pool;\n+    CTxMemPool pool(false);\n \n     while (state.KeepRunning()) {\n         AddTx(tx1, 10000LL, pool);"
      },
      {
        "sha": "92ad633494d3f2cb01bbc978d4907b0d4588de25",
        "filename": "src/coinsbyscript.cpp",
        "status": "added",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/coinsbyscript.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/coinsbyscript.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinsbyscript.cpp?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -0,0 +1,50 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinsbyscript.h\"\n+#include \"txdb.h\"\n+#include \"hash.h\"\n+\n+#include <assert.h>\n+\n+CCoinsViewByScript::CCoinsViewByScript(CCoinsViewDB* viewIn) : base(viewIn) { }\n+\n+bool CCoinsViewByScript::GetCoinsByScript(const CScript &script, CCoinsByScript &coins) {\n+    const uint160 key = CCoinsViewByScript::getKey(script);\n+    if (cacheCoinsByScript.count(key)) {\n+        coins = cacheCoinsByScript[key];\n+        return true;\n+    }\n+    if (base->GetCoinsByHashOfScript(key, coins)) {\n+        cacheCoinsByScript[key] = coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+CCoinsMapByScript::iterator CCoinsViewByScript::FetchCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    const uint160 key = CCoinsViewByScript::getKey(script);\n+    CCoinsMapByScript::iterator it = cacheCoinsByScript.find(key);\n+    if (it != cacheCoinsByScript.end())\n+        return it;\n+    CCoinsByScript tmp;\n+    if (!base->GetCoinsByHashOfScript(key, tmp))\n+    {\n+        if (fRequireExisting)\n+            return cacheCoinsByScript.end();\n+    }\n+    CCoinsMapByScript::iterator ret = cacheCoinsByScript.insert(it, std::make_pair(key, CCoinsByScript()));\n+    tmp.swap(ret->second);\n+    return ret;\n+}\n+\n+CCoinsByScript &CCoinsViewByScript::GetCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    CCoinsMapByScript::iterator it = FetchCoinsByScript(script, fRequireExisting);\n+    assert(it != cacheCoinsByScript.end());\n+    return it->second;\n+}\n+\n+uint160 CCoinsViewByScript::getKey(const CScript &script) {\n+    return Hash160(script);\n+}"
      },
      {
        "sha": "637ec8d99adf8847721c92786d0416b25cf3a768",
        "filename": "src/coinsbyscript.h",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/coinsbyscript.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/coinsbyscript.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinsbyscript.h?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -0,0 +1,63 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COINSBYSCRIPT_H\n+#define BITCOIN_COINSBYSCRIPT_H\n+\n+#include \"coins.h\"\n+#include \"primitives/transaction.h\"\n+#include \"serialize.h\"\n+#include \"uint256.h\"\n+\n+class CCoinsViewDB;\n+class CScript;\n+\n+class CCoinsByScript\n+{\n+public:\n+    // unspent transaction outputs\n+    std::set<COutPoint> setCoins;\n+\n+    // empty constructor\n+    CCoinsByScript() { }\n+\n+    bool IsEmpty() const {\n+        return (setCoins.empty());\n+    }\n+\n+    void swap(CCoinsByScript &to) {\n+        to.setCoins.swap(setCoins);\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(setCoins);\n+    }\n+};\n+\n+typedef std::map<uint160, CCoinsByScript> CCoinsMapByScript; // uint160 = hash of script\n+\n+/** Adds a memory cache for coins by address */\n+class CCoinsViewByScript\n+{\n+private:\n+    CCoinsViewDB *base;\n+\n+public:\n+    CCoinsMapByScript cacheCoinsByScript; // accessed also from CCoinsViewDB in txdb.cpp\n+    CCoinsViewByScript(CCoinsViewDB* baseIn);\n+\n+    bool GetCoinsByScript(const CScript &script, CCoinsByScript &coins);\n+\n+    // Return a modifiable reference to a CCoinsByScript.\n+    CCoinsByScript &GetCoinsByScript(const CScript &script, bool fRequireExisting = true);\n+\n+    static uint160 getKey(const CScript &script); // we use the hash of the script as key in the database\n+\n+private:\n+    CCoinsMapByScript::iterator FetchCoinsByScript(const CScript &script, bool fRequireExisting);\n+};\n+\n+#endif // BITCOIN_COINSBYSCRIPT_H"
      },
      {
        "sha": "c39fd035b098b34ca90ad9c665669b10a0b9abe2",
        "filename": "src/coinstats.cpp",
        "status": "added",
        "additions": 68,
        "deletions": 0,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinstats.cpp?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -0,0 +1,68 @@\n+// Copyright (c) 2014-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinstats.h\"\n+#include \"validation.h\"\n+\n+#include <stdint.h>\n+\n+#include <boost/thread/thread.hpp> // boost::thread::interrupt\n+\n+using namespace std;\n+\n+//! Calculate statistics about the unspent transaction output set\n+bool GetUTXOStats(CCoinsView *view, CCoinsViewDB *viewdb, CCoinsStats &stats)\n+{\n+    boost::scoped_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n+\n+    CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n+    stats.hashBlock = pcursor->GetBestBlock();\n+    {\n+        LOCK(cs_main);\n+        stats.nHeight = mapBlockIndex.find(stats.hashBlock)->second->nHeight;\n+    }\n+    ss << stats.hashBlock;\n+    CAmount nTotalAmount = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        uint256 key;\n+        CCoins coins;\n+        if (pcursor->GetKey(key) && pcursor->GetValue(coins)) {\n+            stats.nTransactions++;\n+            ss << key;\n+            for (unsigned int i=0; i<coins.vout.size(); i++) {\n+                const CTxOut &out = coins.vout[i];\n+                if (!out.IsNull()) {\n+                    stats.nTransactionOutputs++;\n+                    ss << VARINT(i+1);\n+                    ss << out;\n+                    nTotalAmount += out.nValue;\n+                }\n+            }\n+            stats.nSerializedSize += 32 + pcursor->GetValueSize();\n+            ss << VARINT(0);\n+        } else {\n+            return error(\"%s: unable to read value\", __func__);\n+        }\n+        pcursor->Next();\n+    }\n+    stats.hashSerialized = ss.GetHash();\n+    stats.nTotalAmount = nTotalAmount;\n+\n+    boost::scoped_ptr<CDBIterator> pcursordb(viewdb->RawCursor());\n+    pcursordb->Seek('d');\n+    while (pcursordb->Valid()) {\n+        boost::this_thread::interruption_point();\n+        std::pair<char, uint160> key;\n+        CCoinsByScript coinsByScript;\n+        if (pcursordb->GetKey(key) && key.first == 'd' && pcursordb->GetValue(coinsByScript)) {\n+            stats.nAddresses++;\n+            stats.nAddressesOutputs += coinsByScript.setCoins.size();\n+        } else {\n+            return error(\"%s: unable to read value\", __func__);\n+        }\n+        pcursordb->Next();\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "29faf6df64005224572ede7503d7ff5c03cef3eb",
        "filename": "src/coinstats.h",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinstats.h?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -0,0 +1,28 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COINSTATS_H\n+#define BITCOIN_COINSTATS_H\n+\n+#include \"coins.h\"\n+#include \"txdb.h\"\n+\n+struct CCoinsStats\n+{\n+    int nHeight;\n+    uint256 hashBlock;\n+    uint64_t nTransactions;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nAddresses;\n+    uint64_t nAddressesOutputs; // equal nTransactionOutputs (if addressindex is enabled)\n+    uint64_t nSerializedSize;\n+    uint256 hashSerialized;\n+    CAmount nTotalAmount;\n+\n+    CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nAddresses(0), nAddressesOutputs(0), nSerializedSize(0), nTotalAmount(0) {}\n+};\n+\n+bool GetUTXOStats(CCoinsView *view, CCoinsViewDB *viewdb, CCoinsStats &stats);\n+\n+#endif // BITCOIN_COINSTATS_H"
      },
      {
        "sha": "6966cbe1f0f3a6ae814ca5432f71a2954aa23e5e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 1,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -11,6 +11,7 @@\n \n #include \"addrman.h\"\n #include \"amount.h\"\n+#include \"coinstats.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n@@ -162,7 +163,6 @@ class CCoinsViewErrorCatcher : public CCoinsViewBacked\n     // Writes do not need similar protection, as failure to write is handled by the caller.\n };\n \n-static CCoinsViewDB *pcoinsdbview = NULL;\n static CCoinsViewErrorCatcher *pcoinscatcher = NULL;\n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n \n@@ -233,6 +233,8 @@ void Shutdown()\n         pcoinscatcher = NULL;\n         delete pcoinsdbview;\n         pcoinsdbview = NULL;\n+        delete pcoinsByScript;\n+        pcoinsByScript = NULL;\n         delete pblocktree;\n         pblocktree = NULL;\n     }\n@@ -369,6 +371,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n     strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX));\n+    strUsage += HelpMessageOpt(\"-txoutsbyaddressindex\", strprintf(_(\"Maintain an address to unspent outputs index (rpc: gettxoutsbyaddress). The index is built on first use. (default: %u)\"), 0));\n \n     strUsage += HelpMessageGroup(_(\"Connection options:\"));\n     strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open\"));\n@@ -1485,6 +1488,61 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     }\n                 }\n \n+                // Check -txoutsbyaddressindex\n+                pcoinsdbview->ReadFlag(\"txoutsbyaddressindex\", fTxOutsByAddressIndex);\n+                if (IsArgSet(\"-txoutsbyaddressindex\"))\n+                {\n+                    if (GetBoolArg(\"-txoutsbyaddressindex\", false))\n+                    {\n+                        // build index\n+                        if (!fTxOutsByAddressIndex)\n+                        {\n+                            if (!pcoinsdbview->DeleteAllCoinsByScript())\n+                            {\n+                                strLoadError = _(\"Error deleting txoutsbyaddressindex\");\n+                                break;\n+                            }\n+                            if (!pcoinsdbview->GenerateAllCoinsByScript())\n+                            {\n+                                strLoadError = _(\"Error building txoutsbyaddressindex\");\n+                                break;\n+                            }\n+                            CCoinsStats stats;\n+                            if (!GetUTXOStats(pcoinsTip, pcoinsdbview, stats))\n+                            {\n+                                strLoadError = _(\"Error GetUTXOStats for txoutsbyaddressindex\");\n+                                break;\n+                            }\n+                            if (stats.nTransactionOutputs != stats.nAddressesOutputs)\n+                            {\n+                                strLoadError = _(\"Error compare stats for txoutsbyaddressindex\");\n+                                break;\n+                            }\n+                            pcoinsdbview->WriteFlag(\"txoutsbyaddressindex\", true);\n+                            fTxOutsByAddressIndex = true;\n+                        }\n+                    }\n+                    else\n+                    {\n+                        if (fTxOutsByAddressIndex)\n+                        {\n+                            // remove index\n+                            pcoinsdbview->DeleteAllCoinsByScript();\n+                            pcoinsdbview->WriteFlag(\"txoutsbyaddressindex\", false);\n+                            fTxOutsByAddressIndex = false;\n+                        }\n+                    }\n+                }\n+                else if (fTxOutsByAddressIndex)\n+                    return InitError(_(\"You need to provide -txoutsbyaddressindex. Do -txoutsbyaddressindex=0 to delete the index.\"));\n+\n+                // Init -txoutsbyaddressindex\n+                if (fTxOutsByAddressIndex)\n+                {\n+                    pcoinsByScript = new CCoinsViewByScript(pcoinsdbview);\n+                    pcoinsdbview->SetCoinsViewByScript(pcoinsByScript);\n+                }\n+\n                 uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                 if (fHavePruned && GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                     LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\","
      },
      {
        "sha": "18cda164ae1a2b6b3c7a548e44d894347abfa64e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 174,
        "deletions": 55,
        "changes": 229,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -6,11 +6,13 @@\n #include \"rpc/blockchain.h\"\n \n #include \"amount.h\"\n+#include \"base58.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"coins.h\"\n #include \"consensus/validation.h\"\n+#include \"coinstats.h\"\n #include \"validation.h\"\n #include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n@@ -21,11 +23,14 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"hash.h\"\n+#include \"txdb.h\"\n+#include \"dbwrapper.h\"\n \n #include <stdint.h>\n \n #include <univalue.h>\n \n+#include <boost/assign/list_of.hpp>\n #include <boost/thread/thread.hpp> // boost::thread::interrupt\n \n #include <mutex>\n@@ -760,60 +765,6 @@ UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, pblockindex);\n }\n \n-struct CCoinsStats\n-{\n-    int nHeight;\n-    uint256 hashBlock;\n-    uint64_t nTransactions;\n-    uint64_t nTransactionOutputs;\n-    uint64_t nSerializedSize;\n-    uint256 hashSerialized;\n-    CAmount nTotalAmount;\n-\n-    CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), nTotalAmount(0) {}\n-};\n-\n-//! Calculate statistics about the unspent transaction output set\n-static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n-{\n-    std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n-\n-    CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n-    stats.hashBlock = pcursor->GetBestBlock();\n-    {\n-        LOCK(cs_main);\n-        stats.nHeight = mapBlockIndex.find(stats.hashBlock)->second->nHeight;\n-    }\n-    ss << stats.hashBlock;\n-    CAmount nTotalAmount = 0;\n-    while (pcursor->Valid()) {\n-        boost::this_thread::interruption_point();\n-        uint256 key;\n-        CCoins coins;\n-        if (pcursor->GetKey(key) && pcursor->GetValue(coins)) {\n-            stats.nTransactions++;\n-            ss << key;\n-            for (unsigned int i=0; i<coins.vout.size(); i++) {\n-                const CTxOut &out = coins.vout[i];\n-                if (!out.IsNull()) {\n-                    stats.nTransactionOutputs++;\n-                    ss << VARINT(i+1);\n-                    ss << out;\n-                    nTotalAmount += out.nValue;\n-                }\n-            }\n-            stats.nSerializedSize += 32 + pcursor->GetValueSize();\n-            ss << VARINT(0);\n-        } else {\n-            return error(\"%s: unable to read value\", __func__);\n-        }\n-        pcursor->Next();\n-    }\n-    stats.hashSerialized = ss.GetHash();\n-    stats.nTotalAmount = nTotalAmount;\n-    return true;\n-}\n-\n UniValue pruneblockchain(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n@@ -876,6 +827,8 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             \"  \\\"bestblock\\\": \\\"hex\\\",   (string) the best block hash hex\\n\"\n             \"  \\\"transactions\\\": n,      (numeric) The number of transactions\\n\"\n             \"  \\\"txouts\\\": n,            (numeric) The number of output transactions\\n\"\n+            \"  \\\"addresses\\\": n,         (numeric) The number of addresses and scripts. Only if -txoutsbyaddressindex=1\\n\"\n+            \"  \\\"txoutsbyaddress\\\": n,   (numeric) The number of output transactions. Only if -txoutsbyaddressindex=1\\n\"\n             \"  \\\"bytes_serialized\\\": n,  (numeric) The serialized size\\n\"\n             \"  \\\"hash_serialized\\\": \\\"hash\\\",   (string) The serialized hash\\n\"\n             \"  \\\"total_amount\\\": x.xxx          (numeric) The total amount\\n\"\n@@ -889,11 +842,13 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n \n     CCoinsStats stats;\n     FlushStateToDisk();\n-    if (GetUTXOStats(pcoinsTip, stats)) {\n+    if (GetUTXOStats(pcoinsTip, pcoinsdbview, stats)) {\n         ret.push_back(Pair(\"height\", (int64_t)stats.nHeight));\n         ret.push_back(Pair(\"bestblock\", stats.hashBlock.GetHex()));\n         ret.push_back(Pair(\"transactions\", (int64_t)stats.nTransactions));\n         ret.push_back(Pair(\"txouts\", (int64_t)stats.nTransactionOutputs));\n+        ret.push_back(Pair(\"addresses\", (int64_t)stats.nAddresses));\n+        ret.push_back(Pair(\"txoutsbyaddress\", (int64_t)stats.nAddressesOutputs));\n         ret.push_back(Pair(\"bytes_serialized\", (int64_t)stats.nSerializedSize));\n         ret.push_back(Pair(\"hash_serialized\", stats.hashSerialized.GetHex()));\n         ret.push_back(Pair(\"total_amount\", ValueFromAmount(stats.nTotalAmount)));\n@@ -983,6 +938,169 @@ UniValue gettxout(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue gettxoutsbyaddress(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw runtime_error(\n+            \"gettxoutsbyaddress ( minconf [\\\"address\\\",...] count from )\\n\"\n+            \"\\nReturns a list of unspent transaction outputs by address (or script).\\n\"\n+            \"The list is ordered by confirmations in descending order.\\n\"\n+            \"Note that passing minconf=0 will include the mempool.\\n\"\n+            \"\\nTo use this function, you must start bitcoin with the -txoutsbyaddressindex parameter.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. minconf          (numeric) Minimum confirmations\\n\"\n+            \"2. \\\"addresses\\\"    (string) A json array of bitcoin addresses (or scripts)\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"   (string) bitcoin address (or script)\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. count            (numeric, optional, default=999999999) The number of outputs to return\\n\"\n+            \"4. from             (numeric, optional, default=0) The number of outputs to skip\\n\"\n+            \"\\nResult\\n\"\n+            \"[                   (array of json object)\\n\"\n+            \"  {\\n\"\n+            \"    \\\"confirmations\\\" : n,        (numeric) The number of confirmations\\n\"\n+            \"    \\\"txid\\\" : \\\"txid\\\",          (string)  The transaction id \\n\"\n+            \"    \\\"vout\\\" : n,                 (numeric) The vout value\\n\"\n+            \"    \\\"value\\\" : x.xxx,            (numeric) The transaction value in btc\\n\"\n+            \"    \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"       \\\"asm\\\" : \\\"code\\\",        (string) \\n\"\n+            \"       \\\"hex\\\" : \\\"hex\\\",         (string) \\n\"\n+            \"       \\\"reqSigs\\\" : n,           (numeric) Number of required signatures\\n\"\n+            \"       \\\"type\\\" : \\\"pubkeyhash\\\", (string) The type, eg pubkeyhash\\n\"\n+            \"       \\\"addresses\\\" : [          (array of string) array of bitcoin addresses\\n\"\n+            \"          \\\"bitcoinaddress\\\"      (string) bitcoin address\\n\"\n+            \"          ,...\\n\"\n+            \"       ]\\n\"\n+            \"    },\\n\"\n+            \"    \\\"version\\\" : n,              (numeric) The transaction version\\n\"\n+            \"    \\\"coinbase\\\" : true|false     (boolean) Coinbase or not\\n\"\n+            \"    \\\"bestblockhash\\\" : \\\"hash\\\", (string)  The block hash of the best block\\n\"\n+            \"    \\\"bestblockheight\\\" : n,      (numeric) The block height of the best block\\n\"\n+            \"    \\\"bestblocktime\\\" : n,        (numeric) The block time of the best block\\n\"\n+            \"    \\\"blockhash\\\" : \\\"hash\\\",     (string)  The block hash of the block the tx is in (only if confirmations > 0)\\n\"\n+            \"    \\\"blockheight\\\" : n,          (numeric) The block height of the block the tx is in (only if confirmations > 0)\\n\"\n+            \"    \\\"blocktime\\\" : ttt,          (numeric) The block time in seconds since 1.1.1970 GMT (only if confirmations > 0)\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"gettxoutsbyaddress\", \"6 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+            + \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"gettxoutsbyaddress\", \"6, \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+        );\n+\n+    if (!fTxOutsByAddressIndex)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"To use this function, you must start bitcoin with the -txoutsbyaddressindex parameter.\");\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VARR)(UniValue::VNUM)(UniValue::VNUM));\n+\n+    UniValue vObjects(UniValue::VARR);\n+    vector<pair<int, unsigned int> > vSort;\n+    int nMinDepth = request.params[0].get_int();\n+    UniValue inputs = request.params[1].get_array();\n+\n+    int nCount = 999999999;\n+    if (request.params.size() > 2)\n+        nCount = request.params[2].get_int();\n+    int nFrom = 0;\n+    if (request.params.size() > 3)\n+        nFrom = request.params[3].get_int();\n+\n+    if (nMinDepth < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative minconf\");\n+    if (nCount < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative count\");\n+    if (nFrom < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative from\");\n+\n+    for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n+        const UniValue& input = inputs[idx];\n+        CScript script;\n+        CBitcoinAddress address(input.get_str());\n+        if (address.IsValid()) {\n+            script = GetScriptForDestination(address.Get());\n+        } else if (IsHex(input.get_str())) {\n+            std::vector<unsigned char> data(ParseHex(input.get_str()));\n+            script = CScript(data.begin(), data.end());\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script: \" + input.get_str());\n+        }\n+\n+        CCoinsByScript coinsByScript;\n+        pcoinsByScript->GetCoinsByScript(script, coinsByScript);\n+\n+        if (nMinDepth == 0)\n+            mempool.GetCoinsByScript(script, coinsByScript);\n+\n+        BOOST_FOREACH(const COutPoint &outpoint, coinsByScript.setCoins)\n+        {\n+            CCoins coins;\n+            if (nMinDepth == 0)\n+            {\n+                LOCK(mempool.cs);\n+                CCoinsViewMemPool view(pcoinsTip, mempool);\n+                if (!view.GetCoins(outpoint.hash, coins))\n+                    continue;\n+                mempool.pruneSpent(outpoint.hash, coins); // TODO: this should be done by the CCoinsViewMemPool\n+            }\n+            else if (!pcoinsTip->GetCoins(outpoint.hash, coins))\n+                continue;\n+\n+            if (outpoint.n < coins.vout.size() && !coins.vout[outpoint.n].IsNull() && !coins.vout[outpoint.n].scriptPubKey.IsUnspendable())\n+            {\n+                // should not happen\n+                if ((unsigned int)coins.nHeight != MEMPOOL_HEIGHT && (!chainActive[coins.nHeight] || !chainActive[coins.nHeight]->phashBlock))\n+                    throw JSONRPCError(RPC_INTERNAL_ERROR, \"Internal Error: !chainActive[coins.nHeight]\");\n+\n+                BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n+                CBlockIndex *pindex = it->second;\n+\n+                int nConfirmations = 0;\n+                if ((unsigned int)coins.nHeight != MEMPOOL_HEIGHT)\n+                    nConfirmations = pindex->nHeight - coins.nHeight + 1;\n+                if (nConfirmations < nMinDepth)\n+                    continue;\n+\n+                UniValue oScriptPubKey(UniValue::VOBJ);\n+                ScriptPubKeyToJSON(coins.vout[outpoint.n].scriptPubKey, oScriptPubKey, true);\n+\n+                UniValue o(UniValue::VOBJ);\n+                o.push_back(Pair(\"confirmations\", nConfirmations));\n+                o.push_back(Pair(\"txid\", outpoint.hash.GetHex()));\n+                o.push_back(Pair(\"vout\", (int)outpoint.n));\n+                o.push_back(Pair(\"value\", ValueFromAmount(coins.vout[outpoint.n].nValue)));\n+                o.push_back(Pair(\"scriptPubKey\", oScriptPubKey));\n+                o.push_back(Pair(\"version\", coins.nVersion));\n+                o.push_back(Pair(\"coinbase\", coins.fCoinBase));\n+                o.push_back(Pair(\"bestblockhash\", pindex->GetBlockHash().GetHex()));\n+                o.push_back(Pair(\"bestblockheight\", pindex->nHeight));\n+                o.push_back(Pair(\"bestblocktime\", pindex->GetBlockTime()));\n+                if ((unsigned int)coins.nHeight != MEMPOOL_HEIGHT)\n+                {\n+                    o.push_back(Pair(\"blockhash\", chainActive[coins.nHeight]->GetBlockHash().GetHex()));\n+                    o.push_back(Pair(\"blockheight\", coins.nHeight));\n+                    o.push_back(Pair(\"blocktime\", chainActive[coins.nHeight]->GetBlockTime()));\n+                }\n+                vObjects.push_back(o);\n+                vSort.push_back(make_pair(coins.nHeight, (unsigned int)vObjects.size() - 1));\n+            }\n+        }\n+    }\n+\n+    UniValue results(UniValue::VARR);\n+    sort(vSort.begin(), vSort.end());\n+    for (unsigned int i = (unsigned int)nFrom; i < vSort.size(); i++)\n+    {\n+        if (i == (unsigned int)nCount + (unsigned int)nFrom)\n+            break;\n+\n+        results.push_back(vObjects[vSort[i].second]);\n+    }\n+\n+    return results;\n+}\n+\n UniValue verifychain(const JSONRPCRequest& request)\n {\n     int nCheckLevel = GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n@@ -1432,6 +1550,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true,  {} },\n     { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true,  {\"verbose\"} },\n     { \"blockchain\",         \"gettxout\",               &gettxout,               true,  {\"txid\",\"n\",\"include_mempool\"} },\n+    { \"blockchain\",         \"gettxoutsbyaddress\",     &gettxoutsbyaddress,     true  },\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,  {} },\n     { \"blockchain\",         \"pruneblockchain\",        &pruneblockchain,        true,  {\"height\"} },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            true,  {\"checklevel\",\"nblocks\"} },"
      },
      {
        "sha": "be0715eae3cddc2d6f37673c84f61897069d78dd",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -91,6 +91,10 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"gettxout\", 1, \"n\" },\n     { \"gettxout\", 2, \"include_mempool\" },\n     { \"gettxoutproof\", 0, \"txids\" },\n+    { \"gettxoutsbyaddress\", 0 },\n+    { \"gettxoutsbyaddress\", 1 },\n+    { \"gettxoutsbyaddress\", 2 },\n+    { \"gettxoutsbyaddress\", 3 },\n     { \"lockunspent\", 0, \"unlock\" },\n     { \"lockunspent\", 1, \"transactions\" },\n     { \"importprivkey\", 2, \"rescan\" },"
      },
      {
        "sha": "c5c55d1b16dd6af80f1576f08818769003e69141",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -57,7 +57,7 @@ static CBlock BuildBlockTestCase() {\n \n BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n {\n-    CTxMemPool pool;\n+    CTxMemPool pool(false);\n     TestMemPoolEntryHelper entry;\n     CBlock block(BuildBlockTestCase());\n \n@@ -156,7 +156,7 @@ class TestHeaderAndShortIDs {\n \n BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n {\n-    CTxMemPool pool;\n+    CTxMemPool pool(false);\n     TestMemPoolEntryHelper entry;\n     CBlock block(BuildBlockTestCase());\n \n@@ -222,7 +222,7 @@ BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n \n BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)\n {\n-    CTxMemPool pool;\n+    CTxMemPool pool(false);\n     TestMemPoolEntryHelper entry;\n     CBlock block(BuildBlockTestCase());\n \n@@ -272,7 +272,7 @@ BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)\n \n BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)\n {\n-    CTxMemPool pool;\n+    CTxMemPool pool(false);\n     CMutableTransaction coinbase;\n     coinbase.vin.resize(1);\n     coinbase.vin[0].scriptSig.resize(10);"
      },
      {
        "sha": "73802fb3db5671b1ab4350b7a0d9bea12ce5321f",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -53,8 +53,8 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n         txGrandChild[i].vout[0].nValue = 11000LL;\n     }\n \n-\n-    CTxMemPool testPool;\n+    bool fTxOutsByAddressIndex = false;\n+    CTxMemPool testPool(fTxOutsByAddressIndex);\n \n     // Nothing in pool, remove should do nothing:\n     unsigned int poolSize = testPool.size();\n@@ -118,7 +118,7 @@ void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder)\n \n BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n {\n-    CTxMemPool pool;\n+    CTxMemPool pool(false);\n     TestMemPoolEntryHelper entry;\n \n     /* 3rd highest fee */\n@@ -319,7 +319,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n {\n-    CTxMemPool pool;\n+    CTxMemPool pool(false);\n     TestMemPoolEntryHelper entry;\n \n     /* 3rd highest fee */\n@@ -430,7 +430,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n \n BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n {\n-    CTxMemPool pool;\n+    CTxMemPool pool(false);\n     TestMemPoolEntryHelper entry;\n \n     CMutableTransaction tx1 = CMutableTransaction();"
      },
      {
        "sha": "f8b24f00443007d4455e29b26711065ce450ca74",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -17,7 +17,8 @@ BOOST_FIXTURE_TEST_SUITE(policyestimator_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n {\n     CBlockPolicyEstimator feeEst;\n-    CTxMemPool mpool(&feeEst);\n+    bool fTxOutsByAddressIndex = false;\n+    CTxMemPool mpool(fTxOutsByAddressIndex, &feeEst);\n     TestMemPoolEntryHelper entry;\n     CAmount basefee(2000);\n     CAmount deltaFee(100);"
      },
      {
        "sha": "834b0f34f8aaed26e750d96456dea0d565f7a396",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 183,
        "deletions": 1,
        "changes": 184,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -9,6 +9,7 @@\n #include \"hash.h\"\n #include \"pow.h\"\n #include \"uint256.h\"\n+#include \"ui_interface.h\"\n \n #include <stdint.h>\n \n@@ -25,14 +26,23 @@ static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n \n-CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe, true) \n+CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe, true)\n {\n+    pcoinsViewByScript = NULL;\n+}\n+\n+void CCoinsViewDB::SetCoinsViewByScript(CCoinsViewByScript* pcoinsViewByScriptIn) {\n+    pcoinsViewByScript = pcoinsViewByScriptIn;\n }\n \n bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n     return db.Read(std::make_pair(DB_COINS, txid), coins);\n }\n \n+bool CCoinsViewDB::GetCoinsByHashOfScript(const uint160 &hash, CCoinsByScript &coins) const {\n+    return db.Read(make_pair('d', hash), coins);\n+}\n+\n bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n     return db.Exists(std::make_pair(DB_COINS, txid));\n }\n@@ -60,13 +70,37 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n     }\n+    if (pcoinsViewByScript) // only if -txoutsbyaddressindex\n+    {\n+        for (CCoinsMapByScript::iterator it = pcoinsViewByScript->cacheCoinsByScript.begin(); it != pcoinsViewByScript->cacheCoinsByScript.end();) {\n+            if (it->second.IsEmpty())\n+                batch.Erase(make_pair('d', it->first));\n+            else\n+                batch.Write(make_pair('d', it->first), it->second);\n+            CCoinsMapByScript::iterator itOld = it++;\n+            pcoinsViewByScript->cacheCoinsByScript.erase(itOld);\n+        }\n+        pcoinsViewByScript->cacheCoinsByScript.clear();\n+    }\n     if (!hashBlock.IsNull())\n         batch.Write(DB_BEST_BLOCK, hashBlock);\n \n     LogPrint(BCLog::COINDB, \"Committing %u changed transactions (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);\n     return db.WriteBatch(batch);\n }\n \n+bool CCoinsViewDB::WriteFlag(const std::string &name, bool fValue) {\n+    return db.Write(std::make_pair('F', name), fValue ? '1' : '0');\n+}\n+\n+bool CCoinsViewDB::ReadFlag(const std::string &name, bool &fValue) {\n+    char ch;\n+    if (!db.Read(std::make_pair('F', name), ch))\n+        return false;\n+    fValue = ch == '1';\n+    return true;\n+}\n+\n CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n }\n \n@@ -90,6 +124,11 @@ bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n     return Read(DB_LAST_BLOCK, nFile);\n }\n \n+CDBIterator *CCoinsViewDB::RawCursor() const\n+{\n+    return const_cast<CDBWrapper*>(&db)->NewIterator();\n+}\n+\n CCoinsViewCursor *CCoinsViewDB::Cursor() const\n {\n     CCoinsViewDBCursor *i = new CCoinsViewDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator(), GetBestBlock());\n@@ -134,6 +173,149 @@ void CCoinsViewDBCursor::Next()\n         keyTmp.first = 0; // Invalidate cached key after last record so that Valid() and GetKey() return false\n }\n \n+int64_t CCoinsViewDB::GetPrefixCount(char prefix) const\n+{\n+    boost::scoped_ptr<CDBIterator> pcursor(RawCursor());\n+    pcursor->Seek(prefix);\n+\n+    int64_t i = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            char key;\n+            if (!pcursor->GetKey(key) || key != prefix)\n+                break;\n+            i++;\n+            pcursor->Next();\n+        } catch (std::exception &e) {\n+            return 0;\n+        }\n+    }\n+    return i;\n+}\n+\n+bool CCoinsViewDB::DeleteAllCoinsByScript()\n+{\n+    boost::scoped_ptr<CDBIterator> pcursor(RawCursor());\n+    pcursor->Seek('d');\n+\n+    std::vector<uint160> v;\n+    int64_t i = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            std::pair<char, uint160> key;\n+            if (!pcursor->GetKey(key) || key.first != 'd')\n+                break;\n+            v.push_back(key.second);\n+            if (v.size() >= 10000)\n+            {\n+                i += v.size();\n+                CDBBatch batch(db);\n+                BOOST_FOREACH(const uint160& hash, v)\n+                    batch.Erase(make_pair('d', hash)); // delete\n+                db.WriteBatch(batch);\n+                v.clear();\n+            }\n+\n+            pcursor->Next();\n+        } catch (std::exception &e) {\n+            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        }\n+    }\n+    if (!v.empty())\n+    {\n+        i += v.size();\n+        CDBBatch batch(db);\n+        BOOST_FOREACH(const uint160& hash, v)\n+            batch.Erase(make_pair('d', hash)); // delete\n+        db.WriteBatch(batch);\n+    }\n+    if (i > 0)\n+        LogPrintf(\"Address index with %d addresses successfully deleted.\\n\", i);\n+\n+    return true;\n+}\n+\n+bool CCoinsViewDB::GenerateAllCoinsByScript()\n+{\n+    LogPrintf(\"Building address index for -txoutsbyaddressindex. Be patient...\\n\");\n+    int64_t nTxCount = GetPrefixCount('c');\n+\n+    boost::scoped_ptr<CDBIterator> pcursor(RawCursor());\n+    pcursor->Seek('c');\n+\n+    CCoinsMapByScript mapCoinsByScript;\n+    int64_t i = 0;\n+    int64_t progress = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            if (progress % 1000 == 0 && nTxCount > 0)\n+                uiInterface.ShowProgress(_(\"Building address index...\"), (int)(((double)progress / (double)nTxCount) * (double)100));\n+            progress++;\n+\n+            std::pair<char, uint256> key;\n+            CCoins coins;\n+            if (!pcursor->GetKey(key) || key.first != 'c')\n+                break;\n+            uint256 txhash = key.second;\n+            if (!pcursor->GetValue(coins))\n+                break;\n+\n+            for (unsigned int j = 0; j < coins.vout.size(); j++)\n+            {\n+                if (coins.vout[j].IsNull() || coins.vout[j].scriptPubKey.IsUnspendable())\n+                    continue;\n+\n+                const uint160 key = CCoinsViewByScript::getKey(coins.vout[j].scriptPubKey);\n+                if (!mapCoinsByScript.count(key))\n+                {\n+                    CCoinsByScript coinsByScript;\n+                    GetCoinsByHashOfScript(key, coinsByScript);\n+                    mapCoinsByScript.insert(make_pair(key, coinsByScript));\n+                }\n+                mapCoinsByScript[key].setCoins.insert(COutPoint(txhash, (uint32_t)j));\n+                i++;\n+            }\n+\n+            if (mapCoinsByScript.size() >= 10000)\n+            {\n+                CDBBatch batch(db);\n+                for (CCoinsMapByScript::iterator it = mapCoinsByScript.begin(); it != mapCoinsByScript.end();) {\n+                    if (it->second.IsEmpty())\n+                        batch.Erase(make_pair('d', it->first));\n+                    else\n+                        batch.Write(make_pair('d', it->first), it->second);\n+                    CCoinsMapByScript::iterator itOld = it++;\n+                    mapCoinsByScript.erase(itOld);\n+                }\n+                db.WriteBatch(batch);\n+                mapCoinsByScript.clear();\n+            }\n+\n+            pcursor->Next();\n+        } catch (std::exception &e) {\n+            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        }\n+    }\n+    if (!mapCoinsByScript.empty())\n+    {\n+       CDBBatch batch(db);\n+       for (CCoinsMapByScript::iterator it = mapCoinsByScript.begin(); it != mapCoinsByScript.end();) {\n+           if (it->second.IsEmpty())\n+               batch.Erase(make_pair('d', it->first));\n+           else\n+               batch.Write(make_pair('d', it->first), it->second);\n+           CCoinsMapByScript::iterator itOld = it++;\n+           mapCoinsByScript.erase(itOld);\n+       }\n+       db.WriteBatch(batch);\n+    }\n+    LogPrintf(\"Address index with %d outputs successfully built.\\n\", i);\n+    return true;\n+}\n+\n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n     CDBBatch batch(*this);\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {"
      },
      {
        "sha": "a2a27c1db4f5ae68cc9e33fc09adecd9d76a9f82",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -9,6 +9,7 @@\n #include \"coins.h\"\n #include \"dbwrapper.h\"\n #include \"chain.h\"\n+#include \"coinsbyscript.h\"\n \n #include <map>\n #include <string>\n@@ -70,15 +71,25 @@ struct CDiskTxPos : public CDiskBlockPos\n /** CCoinsView backed by the coin database (chainstate/) */\n class CCoinsViewDB : public CCoinsView\n {\n+private:\n+    CCoinsViewByScript* pcoinsViewByScript;\n protected:\n     CDBWrapper db;\n public:\n     CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n+    bool GetCoinsByHashOfScript(const uint160 &hash, CCoinsByScript &coins) const;\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+    bool WriteFlag(const std::string &name, bool fValue);\n+    bool ReadFlag(const std::string &name, bool &fValue);\n+    int64_t GetPrefixCount(char prefix) const;\n+    bool DeleteAllCoinsByScript();   // removes txoutsbyaddressindex\n+    bool GenerateAllCoinsByScript(); // creates txoutsbyaddressindex\n+    void SetCoinsViewByScript(CCoinsViewByScript* pcoinsViewByScriptIn);\n+    CDBIterator *RawCursor() const;\n     CCoinsViewCursor *Cursor() const;\n };\n "
      },
      {
        "sha": "3361edb210d8ec8c4f3d4c9c86fa55eb614bb52d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 1,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -331,7 +331,7 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n     assert(int(nSigOpCostWithAncestors) >= 0);\n }\n \n-CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator) :\n+CTxMemPool::CTxMemPool(const bool& _fTxOutsByAddressIndex, CBlockPolicyEstimator* estimator) :\n     nTransactionsUpdated(0), minerPolicyEstimator(estimator)\n {\n     _clear(); //lock free clear\n@@ -361,6 +361,17 @@ unsigned int CTxMemPool::GetTransactionsUpdated() const\n     return nTransactionsUpdated;\n }\n \n+void CTxMemPool::GetCoinsByScript(const CScript& script, CCoinsByScript& coinsByScript) const\n+{\n+    LOCK(cs);\n+    CCoinsMapByScript::const_iterator it = mapCoinsByScript.find(CCoinsViewByScript::getKey(script));\n+    if (it != mapCoinsByScript.end())\n+    {\n+        BOOST_FOREACH(const COutPoint &outpoint, it->second.setCoins)\n+            coinsByScript.setCoins.insert(outpoint);\n+    }\n+}\n+\n void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n {\n     LOCK(cs);\n@@ -423,6 +434,11 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     vTxHashes.emplace_back(tx.GetWitnessHash(), newit);\n     newit->vTxHashesIdx = vTxHashes.size() - 1;\n \n+    if (fTxOutsByAddressIndex)\n+        for (unsigned int i = 0; i < tx.vout.size(); i++)\n+            if (!tx.vout[i].IsNull() && !tx.vout[i].scriptPubKey.IsUnspendable())\n+                mapCoinsByScript[CCoinsViewByScript::getKey(tx.vout[i].scriptPubKey)].setCoins.insert(COutPoint(hash, (uint32_t)i));\n+\n     return true;\n }\n \n@@ -485,6 +501,24 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n     // Remove transaction from memory pool\n     {\n         LOCK(cs);\n+\n+        if (fTxOutsByAddressIndex)\n+        {\n+            for (unsigned int i = 0; i < origTx.vout.size(); i++)\n+            {\n+                if (origTx.vout[i].IsNull() || origTx.vout[i].scriptPubKey.IsUnspendable())\n+                    continue;\n+\n+                CCoinsMapByScript::iterator it = mapCoinsByScript.find(CCoinsViewByScript::getKey(origTx.vout[i].scriptPubKey));\n+                if (it != mapCoinsByScript.end())\n+                {\n+                    it->second.setCoins.erase(COutPoint(origTx.GetHash(), (uint32_t)i));\n+                    if (it->second.setCoins.empty())\n+                        mapCoinsByScript.erase(it);\n+                }\n+            }\n+        }\n+\n         setEntries txToRemove;\n         txiter origit = mapTx.find(origTx.GetHash());\n         if (origit != mapTx.end()) {"
      },
      {
        "sha": "b2297f67e21063ed49189478dedc80618d647ad5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -16,6 +16,7 @@\n #include \"amount.h\"\n #include \"coins.h\"\n #include \"indirectmap.h\"\n+#include \"coinsbyscript.h\"\n #include \"primitives/transaction.h\"\n #include \"sync.h\"\n #include \"random.h\"\n@@ -415,6 +416,8 @@ class CTxMemPool\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n     uint64_t totalTxSize;      //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n+    const bool& fTxOutsByAddressIndex;\n+    CCoinsMapByScript mapCoinsByScript; // only used if -txoutsbyaddressindex\n     uint64_t cachedInnerUsage; //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n     mutable int64_t lastRollingFeeUpdate;\n@@ -496,7 +499,7 @@ class CTxMemPool\n \n     /** Create a new CTxMemPool.\n      */\n-    CTxMemPool(CBlockPolicyEstimator* estimator = nullptr);\n+    CTxMemPool(const bool& _fTxOutsByAddressIndex, CBlockPolicyEstimator* estimator = nullptr);\n \n     /**\n      * If sanity-checking is turned on, check makes sure the pool is\n@@ -526,6 +529,7 @@ class CTxMemPool\n     void pruneSpent(const uint256& hash, CCoins &coins);\n     unsigned int GetTransactionsUpdated() const;\n     void AddTransactionsUpdated(unsigned int n);\n+    void GetCoinsByScript(const CScript& script, CCoinsByScript& coinsByScript) const;\n     /**\n      * Check that none of this transactions inputs are in the mempool, and thus\n      * the tx is not dependent on other mempool transactions to be included in a block."
      },
      {
        "sha": "e43cbfc67749de051220d26fd1254f08d99fcae9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 11,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -65,6 +65,7 @@ int nScriptCheckThreads = 0;\n std::atomic_bool fImporting(false);\n bool fReindex = false;\n bool fTxIndex = false;\n+bool fTxOutsByAddressIndex = false;\n bool fHavePruned = false;\n bool fPruneMode = false;\n bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n@@ -82,7 +83,7 @@ CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n \n CBlockPolicyEstimator feeEstimator;\n-CTxMemPool mempool(&feeEstimator);\n+CTxMemPool mempool(fTxOutsByAddressIndex, &feeEstimator);\n \n static void CheckBlockIndex(const Consensus::Params& consensusParams);\n \n@@ -175,6 +176,8 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n }\n \n CCoinsViewCache *pcoinsTip = NULL;\n+CCoinsViewDB *pcoinsdbview = NULL;\n+CCoinsViewByScript *pcoinsByScript = NULL;\n CBlockTreeDB *pblocktree = NULL;\n \n enum FlushStateMode {\n@@ -1530,7 +1533,7 @@ bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint\n  *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n  *  will be true if no problems were found. Otherwise, the return value will be false in case\n  *  of problems. Note that in any case, coins may be modified. */\n-static bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean = NULL)\n+static bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& view, CBlockUndo& blockUndo, bool* pfClean = NULL)\n {\n     assert(pindex->GetBlockHash() == view.GetBestBlock());\n \n@@ -1539,7 +1542,6 @@ static bool DisconnectBlock(const CBlock& block, CValidationState& state, const\n \n     bool fClean = true;\n \n-    CBlockUndo blockUndo;\n     CDiskBlockPos pos = pindex->GetUndoPos();\n     if (pos.IsNull())\n         return error(\"DisconnectBlock(): no undo data available\");\n@@ -1687,7 +1689,7 @@ static int64_t nTimeTotal = 0;\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n-                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false)\n+                  CCoinsViewCache& view, const CChainParams& chainparams, CBlockUndo& blockundo, bool fJustCheck = false)\n {\n     AssertLockHeld(cs_main);\n     assert(pindex);\n@@ -1808,8 +1810,6 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(BCLog::BENCH, \"    - Fork checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001);\n \n-    CBlockUndo blockundo;\n-\n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n     std::vector<int> prevheights;\n@@ -2054,6 +2054,60 @@ void PruneAndFlush() {\n     FlushStateToDisk(state, FLUSH_STATE_NONE);\n }\n \n+void static UpdateAddressIndex(const CTxOut& txout, const COutPoint& outpoint, bool fInsert)\n+{\n+    if (!txout.IsNull() && !txout.scriptPubKey.IsUnspendable())\n+    {\n+        CCoinsByScript &coinsByScript = pcoinsByScript->GetCoinsByScript(txout.scriptPubKey, !fInsert);\n+        if (fInsert)\n+            coinsByScript.setCoins.insert(outpoint);\n+        else\n+            coinsByScript.setCoins.erase(outpoint);\n+    }\n+}\n+\n+void static UpdateAddressIndex(const CBlock& block, CBlockUndo& blockundo, bool fConnect)\n+{\n+    if (!fTxOutsByAddressIndex)\n+        return;\n+\n+    assert(block.vtx.size() > 0);\n+    unsigned int i = 0;\n+    if (!fConnect)\n+        i = block.vtx.size() - 1; // iterate backwards\n+\n+    while (true)\n+    {\n+        const CTransaction &tx = *block.vtx[i];\n+\n+        if (i > 0)\n+        {\n+            for (unsigned int j = 0; j < tx.vin.size(); j++)\n+                UpdateAddressIndex(blockundo.vtxundo[i-1].vprevout[j].txout, tx.vin[j].prevout, !fConnect);\n+        }\n+\n+        for (unsigned int j = 0; j < tx.vout.size(); j++)\n+        {\n+            CTxOut& txout = const_cast<CTxOut&>(tx.vout[j]);\n+            const COutPoint outpoint(tx.GetHash(),((uint32_t)j));\n+            UpdateAddressIndex(txout, outpoint, fConnect);\n+        }\n+\n+        if (fConnect)\n+        {\n+            if (i == block.vtx.size() - 1)\n+                break;\n+            i++;\n+        }\n+        else\n+        {\n+            if (i == 0)\n+                break;\n+            i--;\n+        }\n+    }\n+}\n+\n /** Update chainActive and related internal data structures. */\n void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n     chainActive.SetTip(pindexNew);\n@@ -2130,11 +2184,13 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n+        CBlockUndo blockUndo;\n         CCoinsViewCache view(pcoinsTip);\n-        if (!DisconnectBlock(block, state, pindexDelete, view))\n+        if (!DisconnectBlock(block, state, pindexDelete, view, blockUndo))\n             return error(\"DisconnectTip(): DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n         bool flushed = view.Flush();\n         assert(flushed);\n+        UpdateAddressIndex(block, blockUndo, false);\n     }\n     LogPrint(BCLog::BENCH, \"- Disconnect block: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n     // Write the chain state to disk, if necessary.\n@@ -2267,8 +2323,9 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     int64_t nTime3;\n     LogPrint(BCLog::BENCH, \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * 0.001, nTimeReadFromDisk * 0.000001);\n     {\n+        CBlockUndo blockundo;\n         CCoinsViewCache view(pcoinsTip);\n-        bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainparams);\n+        bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainparams, blockundo);\n         GetMainSignals().BlockChecked(blockConnecting, state);\n         if (!rv) {\n             if (state.IsInvalid())\n@@ -2279,6 +2336,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n         LogPrint(BCLog::BENCH, \"  - Connect total: %.2fms [%.2fs]\\n\", (nTime3 - nTime2) * 0.001, nTimeConnectTotal * 0.000001);\n         bool flushed = view.Flush();\n         assert(flushed);\n+        UpdateAddressIndex(*pblock, blockundo, true);\n     }\n     int64_t nTime4 = GetTimeMicros(); nTimeFlush += nTime4 - nTime3;\n     LogPrint(BCLog::BENCH, \"  - Flush: %.2fms [%.2fs]\\n\", (nTime4 - nTime3) * 0.001, nTimeFlush * 0.000001);\n@@ -3261,6 +3319,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n         return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n     CCoinsViewCache viewNew(pcoinsTip);\n+    CBlockUndo blockundo;\n     CBlockIndex indexDummy(block);\n     indexDummy.pprev = pindexPrev;\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n@@ -3272,7 +3331,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n-    if (!ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n+    if (!ConnectBlock(block, state, &indexDummy, viewNew, chainparams, blockundo, true))\n         return false;\n     assert(state.IsValid());\n \n@@ -3657,7 +3716,8 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && pindex == pindexState && (coins.DynamicMemoryUsage() + pcoinsTip->DynamicMemoryUsage()) <= nCoinCacheUsage) {\n             bool fClean = true;\n-            if (!DisconnectBlock(block, state, pindex, coins, &fClean))\n+            CBlockUndo undo;\n+            if (!DisconnectBlock(block, state, pindex, coins, undo, &fClean))\n                 return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             pindexState = pindex->pprev;\n             if (!fClean) {\n@@ -3680,9 +3740,10 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             uiInterface.ShowProgress(_(\"Verifying blocks...\"), std::max(1, std::min(99, 100 - (int)(((double)(chainActive.Height() - pindex->nHeight)) / (double)nCheckDepth * 50))));\n             pindex = chainActive.Next(pindex);\n             CBlock block;\n+            CBlockUndo undo;\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-            if (!ConnectBlock(block, state, pindex, coins, chainparams))\n+            if (!ConnectBlock(block, state, pindex, coins, chainparams, undo))\n                 return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         }\n     }"
      },
      {
        "sha": "274adffd1ae103ea91a846ae5f8bf57f2166dfe3",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c889147288139d2588cd5176f80cf94ac8104a4d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c889147288139d2588cd5176f80cf94ac8104a4d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=c889147288139d2588cd5176f80cf94ac8104a4d",
        "patch": "@@ -13,6 +13,7 @@\n #include \"amount.h\"\n #include \"coins.h\"\n #include \"fs.h\"\n+#include \"coinsbyscript.h\"\n #include \"protocol.h\" // For CMessageHeader::MessageStartChars\n #include \"script/script_error.h\"\n #include \"sync.h\"\n@@ -33,6 +34,7 @@\n \n class CBlockIndex;\n class CBlockTreeDB;\n+class CBlockUndo;\n class CBloomFilter;\n class CChainParams;\n class CInv;\n@@ -166,6 +168,7 @@ extern std::atomic_bool fImporting;\n extern bool fReindex;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n+extern bool fTxOutsByAddressIndex;\n extern bool fIsBareMultisigStd;\n extern bool fRequireStandard;\n extern bool fCheckBlockIndex;\n@@ -484,6 +487,14 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime);\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n+/** Context-independent validity checks */\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n+bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+\n+/** Context-dependent validity checks */\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n+\n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n@@ -525,6 +536,12 @@ extern CChain chainActive;\n /** Global variable that points to the active CCoinsView (protected by cs_main) */\n extern CCoinsViewCache *pcoinsTip;\n \n+/** Global variable that points to the active CCoinsView (protected by cs_main) */\n+extern CCoinsViewDB *pcoinsdbview;\n+\n+/** Only used if -txoutsbyaddressindex */\n+extern CCoinsViewByScript *pcoinsByScript;\n+\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern CBlockTreeDB *pblocktree;\n "
      }
    ]
  },
  {
    "sha": "536eb705b78dde70916138f1888a8af9384c0181",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzZlYjcwNWI3OGRkZTcwOTE2MTM4ZjE4ODhhOGFmOTM4NGMwMTgx",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2016-09-03T09:11:34Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-04-27T23:19:46Z"
      },
      "message": "move txoutsbyaddress index to its own database",
      "tree": {
        "sha": "1acd767610d20a8856c7f11e5fbefc48b1e05ad3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1acd767610d20a8856c7f11e5fbefc48b1e05ad3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/536eb705b78dde70916138f1888a8af9384c0181",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536eb705b78dde70916138f1888a8af9384c0181",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/536eb705b78dde70916138f1888a8af9384c0181",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536eb705b78dde70916138f1888a8af9384c0181/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c889147288139d2588cd5176f80cf94ac8104a4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c889147288139d2588cd5176f80cf94ac8104a4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c889147288139d2588cd5176f80cf94ac8104a4d"
      }
    ],
    "stats": {
      "total": 522,
      "additions": 318,
      "deletions": 204
    },
    "files": [
      {
        "sha": "8462cc2800dbcf7d8c0d8fc470b1167649c337e4",
        "filename": "src/coinsbyscript.cpp",
        "status": "modified",
        "additions": 230,
        "deletions": 2,
        "changes": 232,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/536eb705b78dde70916138f1888a8af9384c0181/src/coinsbyscript.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/536eb705b78dde70916138f1888a8af9384c0181/src/coinsbyscript.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinsbyscript.cpp?ref=536eb705b78dde70916138f1888a8af9384c0181",
        "patch": "@@ -1,14 +1,23 @@\n-// Copyright (c) 2014 The Bitcoin developers\n+// Copyright (c) 2014-2016 The Bitcoin developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"coinsbyscript.h\"\n #include \"txdb.h\"\n #include \"hash.h\"\n+#include \"ui_interface.h\"\n \n #include <assert.h>\n \n-CCoinsViewByScript::CCoinsViewByScript(CCoinsViewDB* viewIn) : base(viewIn) { }\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static const char DB_COINS_BYSCRIPT = 'd';\n+static const char DB_FLAG = 'F';\n+static const char DB_BEST_BLOCK = 'B';\n+\n+CCoinsViewByScript::CCoinsViewByScript(CCoinsViewByScriptDB* viewIn) : base(viewIn) { }\n \n bool CCoinsViewByScript::GetCoinsByScript(const CScript &script, CCoinsByScript &coins) {\n     const uint160 key = CCoinsViewByScript::getKey(script);\n@@ -48,3 +57,222 @@ CCoinsByScript &CCoinsViewByScript::GetCoinsByScript(const CScript &script, bool\n uint160 CCoinsViewByScript::getKey(const CScript &script) {\n     return Hash160(script);\n }\n+\n+uint256 CCoinsViewByScript::GetBestBlock() const {\n+    return hashBlock;\n+}\n+\n+void CCoinsViewByScript::SetBestBlock(const uint256 &hashBlockIn) {\n+    hashBlock = hashBlockIn;\n+}\n+\n+bool CCoinsViewByScript::Flush() {\n+    bool fOk = base->BatchWrite(this, hashBlock);\n+    return fOk;\n+}\n+\n+CCoinsViewByScriptDB::CCoinsViewByScriptDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"coinsbyscript\", nCacheSize, fMemory, fWipe, true)\n+{\n+}\n+\n+bool CCoinsViewByScriptDB::GetCoinsByHashOfScript(const uint160 &hash, CCoinsByScript &coins) const {\n+    return db.Read(make_pair(DB_COINS_BYSCRIPT, hash), coins);\n+}\n+\n+bool CCoinsViewByScriptDB::BatchWrite(CCoinsViewByScript* pcoinsViewByScriptIn, const uint256 &hashBlock) {\n+    CDBBatch batch(db);\n+    size_t count = 0;\n+    for (CCoinsMapByScript::iterator it = pcoinsViewByScriptIn->cacheCoinsByScript.begin(); it != pcoinsViewByScriptIn->cacheCoinsByScript.end();) {\n+        if (it->second.IsEmpty())\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+        else\n+            batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+        CCoinsMapByScript::iterator itOld = it++;\n+        pcoinsViewByScriptIn->cacheCoinsByScript.erase(itOld);\n+        count++;\n+    }\n+    pcoinsViewByScriptIn->cacheCoinsByScript.clear();\n+\n+    if (!hashBlock.IsNull())\n+        batch.Write(DB_BEST_BLOCK, hashBlock);\n+\n+    LogPrint(\"coindb\", \"Committing %u coin address indexes to coin database...\\n\", (unsigned int)count);\n+    return db.WriteBatch(batch);\n+}\n+\n+bool CCoinsViewByScriptDB::WriteFlag(const std::string &name, bool fValue) {\n+    return db.Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n+}\n+\n+bool CCoinsViewByScriptDB::ReadFlag(const std::string &name, bool &fValue) {\n+    char ch;\n+    if (!db.Read(std::make_pair(DB_FLAG, name), ch))\n+        return false;\n+    fValue = ch == '1';\n+    return true;\n+}\n+\n+CCoinsViewByScriptDBCursor *CCoinsViewByScriptDB::Cursor() const\n+{\n+    CCoinsViewByScriptDBCursor *i = new CCoinsViewByScriptDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator());\n+    /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n+       only need read operations on it, use a const-cast to get around\n+       that restriction.  */\n+    i->pcursor->Seek(DB_COINS_BYSCRIPT);\n+    if (!i->pcursor->Valid())\n+        // If db empty then set this cursor invalid\n+        i->keyTmp.first = 0;\n+    else\n+        // Cache key of first record\n+        i->pcursor->GetKey(i->keyTmp);\n+    return i;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetKey(uint160 &key) const\n+{\n+    // Return cached key\n+    if (keyTmp.first == DB_COINS_BYSCRIPT) {\n+        key = keyTmp.second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetValue(CCoinsByScript &coins) const\n+{\n+    return pcursor->GetValue(coins);\n+}\n+\n+unsigned int CCoinsViewByScriptDBCursor::GetValueSize() const\n+{\n+    return pcursor->GetValueSize();\n+}\n+\n+bool CCoinsViewByScriptDBCursor::Valid() const\n+{\n+    return keyTmp.first == DB_COINS_BYSCRIPT;\n+}\n+\n+void CCoinsViewByScriptDBCursor::Next()\n+{\n+    pcursor->Next();\n+    if (!pcursor->Valid() || !pcursor->GetKey(keyTmp))\n+        keyTmp.first = 0; // Invalidate cached key after last record so that Valid() and GetKey() return false\n+}\n+\n+bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n+{\n+    boost::scoped_ptr<CCoinsViewByScriptDBCursor> pcursor(Cursor());\n+\n+    std::vector<uint160> v;\n+    int64_t i = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            uint160 hash;\n+            if (!pcursor->GetKey(hash))\n+                break;\n+            v.push_back(hash);\n+            if (v.size() >= 10000)\n+            {\n+                i += v.size();\n+                CDBBatch batch(db);\n+                BOOST_FOREACH(const uint160& hash, v)\n+                    batch.Erase(make_pair(DB_COINS_BYSCRIPT, hash)); // delete\n+                db.WriteBatch(batch);\n+                v.clear();\n+            }\n+\n+            pcursor->Next();\n+        } catch (std::exception &e) {\n+            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        }\n+    }\n+    if (!v.empty())\n+    {\n+        i += v.size();\n+        CDBBatch batch(db);\n+        BOOST_FOREACH(const uint160& hash, v)\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, hash)); // delete\n+        db.WriteBatch(batch);\n+    }\n+    if (i > 0)\n+        LogPrintf(\"Address index with %d addresses successfully deleted.\\n\", i);\n+\n+    return true;\n+}\n+\n+bool CCoinsViewByScriptDB::GenerateAllCoinsByScript(CCoinsViewDB* coinsIn)\n+{\n+    LogPrintf(\"Building address index for -txoutsbyaddressindex. Be patient...\\n\");\n+    int64_t nTxCount = coinsIn->CountCoins();\n+\n+    boost::scoped_ptr<CCoinsViewCursor> pcursor(coinsIn->Cursor());\n+\n+    CCoinsMapByScript mapCoinsByScript;\n+    int64_t i = 0;\n+    int64_t progress = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            if (progress % 1000 == 0 && nTxCount > 0)\n+                uiInterface.ShowProgress(_(\"Building address index...\"), (int)(((double)progress / (double)nTxCount) * (double)100));\n+            progress++;\n+\n+            uint256 txhash;\n+            CCoins coins;\n+            if (!pcursor->GetKey(txhash) || !pcursor->GetValue(coins))\n+                break;\n+\n+            for (unsigned int j = 0; j < coins.vout.size(); j++)\n+            {\n+                if (coins.vout[j].IsNull() || coins.vout[j].scriptPubKey.IsUnspendable())\n+                    continue;\n+\n+                const uint160 key = CCoinsViewByScript::getKey(coins.vout[j].scriptPubKey);\n+                if (!mapCoinsByScript.count(key))\n+                {\n+                    CCoinsByScript coinsByScript;\n+                    GetCoinsByHashOfScript(key, coinsByScript);\n+                    mapCoinsByScript.insert(make_pair(key, coinsByScript));\n+                }\n+                mapCoinsByScript[key].setCoins.insert(COutPoint(txhash, (uint32_t)j));\n+                i++;\n+            }\n+\n+            if (mapCoinsByScript.size() >= 10000)\n+            {\n+                CDBBatch batch(db);\n+                for (CCoinsMapByScript::iterator it = mapCoinsByScript.begin(); it != mapCoinsByScript.end();) {\n+                    if (it->second.IsEmpty())\n+                        batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+                    else\n+                        batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+                    CCoinsMapByScript::iterator itOld = it++;\n+                    mapCoinsByScript.erase(itOld);\n+                }\n+                db.WriteBatch(batch);\n+                mapCoinsByScript.clear();\n+            }\n+\n+            pcursor->Next();\n+        } catch (std::exception &e) {\n+            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        }\n+    }\n+    if (!mapCoinsByScript.empty())\n+    {\n+       CDBBatch batch(db);\n+       for (CCoinsMapByScript::iterator it = mapCoinsByScript.begin(); it != mapCoinsByScript.end();) {\n+           if (it->second.IsEmpty())\n+               batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+           else\n+               batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+           CCoinsMapByScript::iterator itOld = it++;\n+           mapCoinsByScript.erase(itOld);\n+       }\n+       db.WriteBatch(batch);\n+    }\n+    LogPrintf(\"Address index with %d outputs successfully built.\\n\", i);\n+    return true;\n+}"
      },
      {
        "sha": "5a2d12943ea2dbdcc58dbf1870189a8d56065da8",
        "filename": "src/coinsbyscript.h",
        "status": "modified",
        "additions": 58,
        "deletions": 4,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/536eb705b78dde70916138f1888a8af9384c0181/src/coinsbyscript.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/536eb705b78dde70916138f1888a8af9384c0181/src/coinsbyscript.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinsbyscript.h?ref=536eb705b78dde70916138f1888a8af9384c0181",
        "patch": "@@ -1,16 +1,18 @@\n-// Copyright (c) 2014 The Bitcoin developers\n+// Copyright (c) 2014-2016 The Bitcoin developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_COINSBYSCRIPT_H\n #define BITCOIN_COINSBYSCRIPT_H\n \n #include \"coins.h\"\n+#include \"dbwrapper.h\"\n #include \"primitives/transaction.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n class CCoinsViewDB;\n+class CCoinsViewByScriptDB;\n class CScript;\n \n class CCoinsByScript\n@@ -43,11 +45,13 @@ typedef std::map<uint160, CCoinsByScript> CCoinsMapByScript; // uint160 = hash o\n class CCoinsViewByScript\n {\n private:\n-    CCoinsViewDB *base;\n+    CCoinsViewByScriptDB *base;\n+\n+    mutable uint256 hashBlock;\n \n public:\n-    CCoinsMapByScript cacheCoinsByScript; // accessed also from CCoinsViewDB in txdb.cpp\n-    CCoinsViewByScript(CCoinsViewDB* baseIn);\n+    CCoinsMapByScript cacheCoinsByScript; // accessed also from CCoinsViewByScriptDB\n+    CCoinsViewByScript(CCoinsViewByScriptDB* baseIn);\n \n     bool GetCoinsByScript(const CScript &script, CCoinsByScript &coins);\n \n@@ -56,8 +60,58 @@ class CCoinsViewByScript\n \n     static uint160 getKey(const CScript &script); // we use the hash of the script as key in the database\n \n+    void SetBestBlock(const uint256 &hashBlock);\n+    uint256 GetBestBlock() const;\n+\n+    /**\n+     * Push the modifications applied to this cache to its base.\n+     * Failure to call this method before destruction will cause the changes to be forgotten.\n+     * If false is returned, the state of this cache (and its backing view) will be undefined.\n+     */\n+    bool Flush();\n+\n private:\n     CCoinsMapByScript::iterator FetchCoinsByScript(const CScript &script, bool fRequireExisting);\n };\n \n+/** Cursor for iterating over a CCoinsViewByScriptDB */\n+class CCoinsViewByScriptDBCursor \n+{\n+public:\n+    ~CCoinsViewByScriptDBCursor() {}\n+\n+    bool GetKey(uint160 &key) const;\n+    bool GetValue(CCoinsByScript &coins) const;\n+    unsigned int GetValueSize() const;\n+\n+    bool Valid() const;\n+    void Next();\n+\n+private:\n+    CCoinsViewByScriptDBCursor(CDBIterator* pcursorIn):\n+        pcursor(pcursorIn) {}\n+    uint256 hashBlock;\n+    boost::scoped_ptr<CDBIterator> pcursor;\n+    std::pair<char, uint160> keyTmp;\n+\n+    friend class CCoinsViewByScriptDB;\n+};\n+\n+/** coinsbyscript database (coinsbyscript/) */\n+class CCoinsViewByScriptDB \n+{\n+protected:\n+    CDBWrapper db;\n+public:\n+    CCoinsViewByScriptDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+\n+    bool GetCoinsByHashOfScript(const uint160 &hash, CCoinsByScript &coins) const;\n+    bool BatchWrite(CCoinsViewByScript* pcoinsViewByScriptIn, const uint256 &hashBlock);\n+    bool WriteFlag(const std::string &name, bool fValue);\n+    bool ReadFlag(const std::string &name, bool &fValue);\n+    bool DeleteAllCoinsByScript();   // removes txoutsbyaddressindex\n+    bool GenerateAllCoinsByScript(CCoinsViewDB* coinsIn); // creates txoutsbyaddressindex\n+    CCoinsViewByScriptDBCursor *Cursor() const;\n+};\n+\n #endif // BITCOIN_COINSBYSCRIPT_H"
      },
      {
        "sha": "34328955b453e6c7af3fe732a32e3358e59df8f2",
        "filename": "src/coinstats.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/536eb705b78dde70916138f1888a8af9384c0181/src/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/536eb705b78dde70916138f1888a8af9384c0181/src/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinstats.cpp?ref=536eb705b78dde70916138f1888a8af9384c0181",
        "patch": "@@ -12,7 +12,7 @@\n using namespace std;\n \n //! Calculate statistics about the unspent transaction output set\n-bool GetUTXOStats(CCoinsView *view, CCoinsViewDB *viewdb, CCoinsStats &stats)\n+bool GetUTXOStats(CCoinsView *view, CCoinsViewByScriptDB *viewbyscriptdb, CCoinsStats &stats)\n {\n     boost::scoped_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n \n@@ -50,13 +50,12 @@ bool GetUTXOStats(CCoinsView *view, CCoinsViewDB *viewdb, CCoinsStats &stats)\n     stats.hashSerialized = ss.GetHash();\n     stats.nTotalAmount = nTotalAmount;\n \n-    boost::scoped_ptr<CDBIterator> pcursordb(viewdb->RawCursor());\n-    pcursordb->Seek('d');\n+    boost::scoped_ptr<CCoinsViewByScriptDBCursor> pcursordb(viewbyscriptdb->Cursor());\n     while (pcursordb->Valid()) {\n         boost::this_thread::interruption_point();\n-        std::pair<char, uint160> key;\n+        uint160 hash;\n         CCoinsByScript coinsByScript;\n-        if (pcursordb->GetKey(key) && key.first == 'd' && pcursordb->GetValue(coinsByScript)) {\n+        if (pcursordb->GetKey(hash) && pcursordb->GetValue(coinsByScript)) {\n             stats.nAddresses++;\n             stats.nAddressesOutputs += coinsByScript.setCoins.size();\n         } else {"
      },
      {
        "sha": "bac4f3db34e4844200b9a3fbbb271ef2884a3026",
        "filename": "src/coinstats.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/536eb705b78dde70916138f1888a8af9384c0181/src/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/536eb705b78dde70916138f1888a8af9384c0181/src/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinstats.h?ref=536eb705b78dde70916138f1888a8af9384c0181",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"coins.h\"\n #include \"txdb.h\"\n+#include \"coinsbyscript.h\"\n \n struct CCoinsStats\n {\n@@ -23,6 +24,6 @@ struct CCoinsStats\n     CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nAddresses(0), nAddressesOutputs(0), nSerializedSize(0), nTotalAmount(0) {}\n };\n \n-bool GetUTXOStats(CCoinsView *view, CCoinsViewDB *viewdb, CCoinsStats &stats);\n+bool GetUTXOStats(CCoinsView *view, CCoinsViewByScriptDB *viewbyscriptdb, CCoinsStats &stats);\n \n #endif // BITCOIN_COINSTATS_H"
      },
      {
        "sha": "e71ba48e0e2a295ee788cec690a248660410b925",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/536eb705b78dde70916138f1888a8af9384c0181/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/536eb705b78dde70916138f1888a8af9384c0181/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=536eb705b78dde70916138f1888a8af9384c0181",
        "patch": "@@ -163,6 +163,7 @@ class CCoinsViewErrorCatcher : public CCoinsViewBacked\n     // Writes do not need similar protection, as failure to write is handled by the caller.\n };\n \n+static CCoinsViewDB *pcoinsdbview = NULL;\n static CCoinsViewErrorCatcher *pcoinscatcher = NULL;\n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n \n@@ -235,6 +236,8 @@ void Shutdown()\n         pcoinsdbview = NULL;\n         delete pcoinsByScript;\n         pcoinsByScript = NULL;\n+        delete pcoinsByScriptDB;\n+        pcoinsByScriptDB = NULL;\n         delete pblocktree;\n         pblocktree = NULL;\n     }\n@@ -1441,6 +1444,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n                 pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex || fReindexChainState);\n+                pcoinsByScriptDB = new CCoinsViewByScriptDB(nCoinDBCache, false, false);\n                 pcoinscatcher = new CCoinsViewErrorCatcher(pcoinsdbview);\n                 pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n \n@@ -1489,26 +1493,26 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 }\n \n                 // Check -txoutsbyaddressindex\n-                pcoinsdbview->ReadFlag(\"txoutsbyaddressindex\", fTxOutsByAddressIndex);\n+                pcoinsByScriptDB->ReadFlag(\"txoutsbyaddressindex\", fTxOutsByAddressIndex);\n                 if (IsArgSet(\"-txoutsbyaddressindex\"))\n                 {\n                     if (GetBoolArg(\"-txoutsbyaddressindex\", false))\n                     {\n                         // build index\n                         if (!fTxOutsByAddressIndex)\n                         {\n-                            if (!pcoinsdbview->DeleteAllCoinsByScript())\n+                            if (!pcoinsByScriptDB->DeleteAllCoinsByScript())\n                             {\n                                 strLoadError = _(\"Error deleting txoutsbyaddressindex\");\n                                 break;\n                             }\n-                            if (!pcoinsdbview->GenerateAllCoinsByScript())\n+                            if (!pcoinsByScriptDB->GenerateAllCoinsByScript(pcoinsdbview))\n                             {\n                                 strLoadError = _(\"Error building txoutsbyaddressindex\");\n                                 break;\n                             }\n                             CCoinsStats stats;\n-                            if (!GetUTXOStats(pcoinsTip, pcoinsdbview, stats))\n+                            if (!GetUTXOStats(pcoinsTip, pcoinsByScriptDB, stats))\n                             {\n                                 strLoadError = _(\"Error GetUTXOStats for txoutsbyaddressindex\");\n                                 break;\n@@ -1518,7 +1522,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                                 strLoadError = _(\"Error compare stats for txoutsbyaddressindex\");\n                                 break;\n                             }\n-                            pcoinsdbview->WriteFlag(\"txoutsbyaddressindex\", true);\n+                            pcoinsByScriptDB->WriteFlag(\"txoutsbyaddressindex\", true);\n                             fTxOutsByAddressIndex = true;\n                         }\n                     }\n@@ -1527,8 +1531,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                         if (fTxOutsByAddressIndex)\n                         {\n                             // remove index\n-                            pcoinsdbview->DeleteAllCoinsByScript();\n-                            pcoinsdbview->WriteFlag(\"txoutsbyaddressindex\", false);\n+                            pcoinsByScriptDB->DeleteAllCoinsByScript();\n+                            pcoinsByScriptDB->WriteFlag(\"txoutsbyaddressindex\", false);\n                             fTxOutsByAddressIndex = false;\n                         }\n                     }\n@@ -1538,10 +1542,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 // Init -txoutsbyaddressindex\n                 if (fTxOutsByAddressIndex)\n-                {\n-                    pcoinsByScript = new CCoinsViewByScript(pcoinsdbview);\n-                    pcoinsdbview->SetCoinsViewByScript(pcoinsByScript);\n-                }\n+                    pcoinsByScript = new CCoinsViewByScript(pcoinsByScriptDB);\n \n                 uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                 if (fHavePruned && GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {"
      },
      {
        "sha": "fddf7955ea242227a275d9a0b1b5f81441b146e1",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/536eb705b78dde70916138f1888a8af9384c0181/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/536eb705b78dde70916138f1888a8af9384c0181/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=536eb705b78dde70916138f1888a8af9384c0181",
        "patch": "@@ -842,7 +842,7 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n \n     CCoinsStats stats;\n     FlushStateToDisk();\n-    if (GetUTXOStats(pcoinsTip, pcoinsdbview, stats)) {\n+    if (GetUTXOStats(pcoinsTip, pcoinsByScriptDB, stats)) {\n         ret.push_back(Pair(\"height\", (int64_t)stats.nHeight));\n         ret.push_back(Pair(\"bestblock\", stats.hashBlock.GetHex()));\n         ret.push_back(Pair(\"transactions\", (int64_t)stats.nTransactions));"
      },
      {
        "sha": "90f48b346b9ee65f66eb36b5feba67f5f7505588",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 166,
        "changes": 168,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/536eb705b78dde70916138f1888a8af9384c0181/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/536eb705b78dde70916138f1888a8af9384c0181/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=536eb705b78dde70916138f1888a8af9384c0181",
        "patch": "@@ -28,21 +28,12 @@ static const char DB_LAST_BLOCK = 'l';\n \n CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe, true)\n {\n-    pcoinsViewByScript = NULL;\n-}\n-\n-void CCoinsViewDB::SetCoinsViewByScript(CCoinsViewByScript* pcoinsViewByScriptIn) {\n-    pcoinsViewByScript = pcoinsViewByScriptIn;\n }\n \n bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n     return db.Read(std::make_pair(DB_COINS, txid), coins);\n }\n \n-bool CCoinsViewDB::GetCoinsByHashOfScript(const uint160 &hash, CCoinsByScript &coins) const {\n-    return db.Read(make_pair('d', hash), coins);\n-}\n-\n bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n     return db.Exists(std::make_pair(DB_COINS, txid));\n }\n@@ -70,37 +61,13 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n     }\n-    if (pcoinsViewByScript) // only if -txoutsbyaddressindex\n-    {\n-        for (CCoinsMapByScript::iterator it = pcoinsViewByScript->cacheCoinsByScript.begin(); it != pcoinsViewByScript->cacheCoinsByScript.end();) {\n-            if (it->second.IsEmpty())\n-                batch.Erase(make_pair('d', it->first));\n-            else\n-                batch.Write(make_pair('d', it->first), it->second);\n-            CCoinsMapByScript::iterator itOld = it++;\n-            pcoinsViewByScript->cacheCoinsByScript.erase(itOld);\n-        }\n-        pcoinsViewByScript->cacheCoinsByScript.clear();\n-    }\n     if (!hashBlock.IsNull())\n         batch.Write(DB_BEST_BLOCK, hashBlock);\n \n     LogPrint(BCLog::COINDB, \"Committing %u changed transactions (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);\n     return db.WriteBatch(batch);\n }\n \n-bool CCoinsViewDB::WriteFlag(const std::string &name, bool fValue) {\n-    return db.Write(std::make_pair('F', name), fValue ? '1' : '0');\n-}\n-\n-bool CCoinsViewDB::ReadFlag(const std::string &name, bool &fValue) {\n-    char ch;\n-    if (!db.Read(std::make_pair('F', name), ch))\n-        return false;\n-    fValue = ch == '1';\n-    return true;\n-}\n-\n CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n }\n \n@@ -124,11 +91,6 @@ bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n     return Read(DB_LAST_BLOCK, nFile);\n }\n \n-CDBIterator *CCoinsViewDB::RawCursor() const\n-{\n-    return const_cast<CDBWrapper*>(&db)->NewIterator();\n-}\n-\n CCoinsViewCursor *CCoinsViewDB::Cursor() const\n {\n     CCoinsViewDBCursor *i = new CCoinsViewDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator(), GetBestBlock());\n@@ -173,18 +135,14 @@ void CCoinsViewDBCursor::Next()\n         keyTmp.first = 0; // Invalidate cached key after last record so that Valid() and GetKey() return false\n }\n \n-int64_t CCoinsViewDB::GetPrefixCount(char prefix) const\n+int64_t CCoinsViewDB::CountCoins() const\n {\n-    boost::scoped_ptr<CDBIterator> pcursor(RawCursor());\n-    pcursor->Seek(prefix);\n+    boost::scoped_ptr<CCoinsViewCursor> pcursor(Cursor());\n \n     int64_t i = 0;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         try {\n-            char key;\n-            if (!pcursor->GetKey(key) || key != prefix)\n-                break;\n             i++;\n             pcursor->Next();\n         } catch (std::exception &e) {\n@@ -194,128 +152,6 @@ int64_t CCoinsViewDB::GetPrefixCount(char prefix) const\n     return i;\n }\n \n-bool CCoinsViewDB::DeleteAllCoinsByScript()\n-{\n-    boost::scoped_ptr<CDBIterator> pcursor(RawCursor());\n-    pcursor->Seek('d');\n-\n-    std::vector<uint160> v;\n-    int64_t i = 0;\n-    while (pcursor->Valid()) {\n-        boost::this_thread::interruption_point();\n-        try {\n-            std::pair<char, uint160> key;\n-            if (!pcursor->GetKey(key) || key.first != 'd')\n-                break;\n-            v.push_back(key.second);\n-            if (v.size() >= 10000)\n-            {\n-                i += v.size();\n-                CDBBatch batch(db);\n-                BOOST_FOREACH(const uint160& hash, v)\n-                    batch.Erase(make_pair('d', hash)); // delete\n-                db.WriteBatch(batch);\n-                v.clear();\n-            }\n-\n-            pcursor->Next();\n-        } catch (std::exception &e) {\n-            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n-        }\n-    }\n-    if (!v.empty())\n-    {\n-        i += v.size();\n-        CDBBatch batch(db);\n-        BOOST_FOREACH(const uint160& hash, v)\n-            batch.Erase(make_pair('d', hash)); // delete\n-        db.WriteBatch(batch);\n-    }\n-    if (i > 0)\n-        LogPrintf(\"Address index with %d addresses successfully deleted.\\n\", i);\n-\n-    return true;\n-}\n-\n-bool CCoinsViewDB::GenerateAllCoinsByScript()\n-{\n-    LogPrintf(\"Building address index for -txoutsbyaddressindex. Be patient...\\n\");\n-    int64_t nTxCount = GetPrefixCount('c');\n-\n-    boost::scoped_ptr<CDBIterator> pcursor(RawCursor());\n-    pcursor->Seek('c');\n-\n-    CCoinsMapByScript mapCoinsByScript;\n-    int64_t i = 0;\n-    int64_t progress = 0;\n-    while (pcursor->Valid()) {\n-        boost::this_thread::interruption_point();\n-        try {\n-            if (progress % 1000 == 0 && nTxCount > 0)\n-                uiInterface.ShowProgress(_(\"Building address index...\"), (int)(((double)progress / (double)nTxCount) * (double)100));\n-            progress++;\n-\n-            std::pair<char, uint256> key;\n-            CCoins coins;\n-            if (!pcursor->GetKey(key) || key.first != 'c')\n-                break;\n-            uint256 txhash = key.second;\n-            if (!pcursor->GetValue(coins))\n-                break;\n-\n-            for (unsigned int j = 0; j < coins.vout.size(); j++)\n-            {\n-                if (coins.vout[j].IsNull() || coins.vout[j].scriptPubKey.IsUnspendable())\n-                    continue;\n-\n-                const uint160 key = CCoinsViewByScript::getKey(coins.vout[j].scriptPubKey);\n-                if (!mapCoinsByScript.count(key))\n-                {\n-                    CCoinsByScript coinsByScript;\n-                    GetCoinsByHashOfScript(key, coinsByScript);\n-                    mapCoinsByScript.insert(make_pair(key, coinsByScript));\n-                }\n-                mapCoinsByScript[key].setCoins.insert(COutPoint(txhash, (uint32_t)j));\n-                i++;\n-            }\n-\n-            if (mapCoinsByScript.size() >= 10000)\n-            {\n-                CDBBatch batch(db);\n-                for (CCoinsMapByScript::iterator it = mapCoinsByScript.begin(); it != mapCoinsByScript.end();) {\n-                    if (it->second.IsEmpty())\n-                        batch.Erase(make_pair('d', it->first));\n-                    else\n-                        batch.Write(make_pair('d', it->first), it->second);\n-                    CCoinsMapByScript::iterator itOld = it++;\n-                    mapCoinsByScript.erase(itOld);\n-                }\n-                db.WriteBatch(batch);\n-                mapCoinsByScript.clear();\n-            }\n-\n-            pcursor->Next();\n-        } catch (std::exception &e) {\n-            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n-        }\n-    }\n-    if (!mapCoinsByScript.empty())\n-    {\n-       CDBBatch batch(db);\n-       for (CCoinsMapByScript::iterator it = mapCoinsByScript.begin(); it != mapCoinsByScript.end();) {\n-           if (it->second.IsEmpty())\n-               batch.Erase(make_pair('d', it->first));\n-           else\n-               batch.Write(make_pair('d', it->first), it->second);\n-           CCoinsMapByScript::iterator itOld = it++;\n-           mapCoinsByScript.erase(itOld);\n-       }\n-       db.WriteBatch(batch);\n-    }\n-    LogPrintf(\"Address index with %d outputs successfully built.\\n\", i);\n-    return true;\n-}\n-\n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n     CDBBatch batch(*this);\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {"
      },
      {
        "sha": "17042641741d04e6013a310f635b907bcc2009ff",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/536eb705b78dde70916138f1888a8af9384c0181/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/536eb705b78dde70916138f1888a8af9384c0181/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=536eb705b78dde70916138f1888a8af9384c0181",
        "patch": "@@ -71,25 +71,16 @@ struct CDiskTxPos : public CDiskBlockPos\n /** CCoinsView backed by the coin database (chainstate/) */\n class CCoinsViewDB : public CCoinsView\n {\n-private:\n-    CCoinsViewByScript* pcoinsViewByScript;\n protected:\n     CDBWrapper db;\n public:\n     CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool GetCoinsByHashOfScript(const uint160 &hash, CCoinsByScript &coins) const;\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n-    bool WriteFlag(const std::string &name, bool fValue);\n-    bool ReadFlag(const std::string &name, bool &fValue);\n-    int64_t GetPrefixCount(char prefix) const;\n-    bool DeleteAllCoinsByScript();   // removes txoutsbyaddressindex\n-    bool GenerateAllCoinsByScript(); // creates txoutsbyaddressindex\n-    void SetCoinsViewByScript(CCoinsViewByScript* pcoinsViewByScriptIn);\n-    CDBIterator *RawCursor() const;\n+    int64_t CountCoins() const;\n     CCoinsViewCursor *Cursor() const;\n };\n "
      },
      {
        "sha": "e59ea0ba8f6091f9ed3939fba47bc528d46ded04",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/536eb705b78dde70916138f1888a8af9384c0181/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/536eb705b78dde70916138f1888a8af9384c0181/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=536eb705b78dde70916138f1888a8af9384c0181",
        "patch": "@@ -176,7 +176,7 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n }\n \n CCoinsViewCache *pcoinsTip = NULL;\n-CCoinsViewDB *pcoinsdbview = NULL;\n+CCoinsViewByScriptDB *pcoinsByScriptDB = NULL;\n CCoinsViewByScript *pcoinsByScript = NULL;\n CBlockTreeDB *pblocktree = NULL;\n \n@@ -2030,6 +2030,10 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode, int n\n         // Flush the chainstate (which may refer to block index entries).\n         if (!pcoinsTip->Flush())\n             return AbortNode(state, \"Failed to write to coin database\");\n+        if (fTxOutsByAddressIndex) {\n+            if (!pcoinsByScript->Flush())\n+                return AbortNode(state, \"Failed to write to coin database\");\n+        }\n         nLastFlush = nNow;\n     }\n     if (fDoFullFlush || ((mode == FLUSH_STATE_ALWAYS || mode == FLUSH_STATE_PERIODIC) && nNow > nLastSetChain + (int64_t)DATABASE_WRITE_INTERVAL * 1000000)) {\n@@ -2106,6 +2110,8 @@ void static UpdateAddressIndex(const CBlock& block, CBlockUndo& blockundo, bool\n             i--;\n         }\n     }\n+\n+    pcoinsByScript->SetBestBlock(block.GetHash());\n }\n \n /** Update chainActive and related internal data structures. */"
      },
      {
        "sha": "3d871edc7de2e4e09788acb4929ffa9e5dd69aa3",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/536eb705b78dde70916138f1888a8af9384c0181/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/536eb705b78dde70916138f1888a8af9384c0181/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=536eb705b78dde70916138f1888a8af9384c0181",
        "patch": "@@ -536,10 +536,8 @@ extern CChain chainActive;\n /** Global variable that points to the active CCoinsView (protected by cs_main) */\n extern CCoinsViewCache *pcoinsTip;\n \n-/** Global variable that points to the active CCoinsView (protected by cs_main) */\n-extern CCoinsViewDB *pcoinsdbview;\n-\n /** Only used if -txoutsbyaddressindex */\n+extern CCoinsViewByScriptDB *pcoinsByScriptDB;\n extern CCoinsViewByScript *pcoinsByScript;\n \n /** Global variable that points to the active block tree (protected by cs_main) */"
      }
    ]
  },
  {
    "sha": "3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYWU4YWEwOThkZmRmZDBiZjQ1NGQ2Y2FmZGRjYjJjZTZiNTc3NzE1",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2016-09-03T09:16:28Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-04-27T23:19:46Z"
      },
      "message": "add txoutsbyaddress querying via rest interface",
      "tree": {
        "sha": "334adae85b57373a42e11ce868ece0f2f157e8ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/334adae85b57373a42e11ce868ece0f2f157e8ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "536eb705b78dde70916138f1888a8af9384c0181",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536eb705b78dde70916138f1888a8af9384c0181",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/536eb705b78dde70916138f1888a8af9384c0181"
      }
    ],
    "stats": {
      "total": 256,
      "additions": 198,
      "deletions": 58
    },
    "files": [
      {
        "sha": "c3c73becb1887b07eb1b8a893ea4aebdd1c42885",
        "filename": "src/coinsbyscript.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715/src/coinsbyscript.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715/src/coinsbyscript.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinsbyscript.cpp?ref=3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715",
        "patch": "@@ -96,7 +96,7 @@ bool CCoinsViewByScriptDB::BatchWrite(CCoinsViewByScript* pcoinsViewByScriptIn,\n     if (!hashBlock.IsNull())\n         batch.Write(DB_BEST_BLOCK, hashBlock);\n \n-    LogPrint(\"coindb\", \"Committing %u coin address indexes to coin database...\\n\", (unsigned int)count);\n+    LogPrint(BCLog::COINDB, \"Committing %u coin address indexes to coin database...\\n\", (unsigned int)count);\n     return db.WriteBatch(batch);\n }\n "
      },
      {
        "sha": "47849d24aea143eabd752f2f766f580eb4f3675f",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 135,
        "deletions": 0,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"base58.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"primitives/block.h\"\n@@ -22,6 +23,7 @@\n #include <univalue.h>\n \n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n+static const size_t MAX_GETTXOUTSBYADDRESS_SCRIPTS = 15; //allow a max of 15 scripts to be queried at once\n \n enum RetFormat {\n     RF_UNDEF,\n@@ -59,6 +61,7 @@ struct CCoin {\n /* Defined in rawtransaction.cpp */\n void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n+void CoinsByScriptToJSON(const CCoinsByScript& coinsByScript, int nMinDepth, UniValue& vObjects, std::vector<std::pair<int, unsigned int>>& vSort, bool fIncludeHex);\n \n static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string message)\n {\n@@ -598,6 +601,137 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n+static bool rest_gettxoutsbyaddress(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    if (!fTxOutsByAddressIndex)\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"To use this function, you must start bitcoin with the -txoutsbyaddressindex parameter.\");\n+\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    if (param.length() > 1)\n+    {\n+        std::string strUriParams = param.substr(1);\n+        boost::split(uriParts, strUriParams, boost::is_any_of(\"/\"));\n+    }\n+\n+    // throw exception in case of a empty request\n+    std::string strRequestMutable = req->ReadBody();\n+    if (strRequestMutable.length() == 0 && uriParts.size() == 0)\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Error: empty request\");\n+\n+    bool fInputParsed = false;\n+    bool fCheckMemPool = false;\n+    std::vector<CScript> vScripts;\n+\n+    // parse/deserialize input\n+    // input-format = output-format, rest/gettxoutsbyaddress/bin requires binary input, gives binary output, ...\n+\n+    if (uriParts.size() > 0)\n+    {\n+\n+        //inputs is sent over URI scheme (/rest/gettxoutsbyaddress/checkmempool/addr1/addr2/...)\n+        if (uriParts.size() > 0 && uriParts[0] == \"checkmempool\")\n+            fCheckMemPool = true;\n+\n+        for (size_t i = (fCheckMemPool) ? 1 : 0; i < uriParts.size(); i++)\n+        {\n+            CScript script;\n+            CBitcoinAddress address(uriParts[i]);\n+            if (address.IsValid()) {\n+                script = GetScriptForDestination(address.Get());\n+            } else if (IsHex(uriParts[i])) {\n+                std::vector<unsigned char> data(ParseHex(uriParts[i]));\n+                script = CScript(data.begin(), data.end());\n+            } else {\n+                return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid Bitcoin address or script: \" + uriParts[i]);\n+            }\n+\n+            vScripts.push_back(script);\n+        }\n+\n+        if (vScripts.size() > 0)\n+            fInputParsed = true;\n+        else\n+            return RESTERR(req, HTTP_BAD_REQUEST, \"Error: empty request\");\n+    }\n+\n+    switch (rf) {\n+    case RF_HEX: {\n+        // convert hex to bin, continue then with bin part\n+        std::vector<unsigned char> strRequestV = ParseHex(strRequestMutable);\n+        strRequestMutable.assign(strRequestV.begin(), strRequestV.end());\n+    }\n+\n+    case RF_BINARY: {\n+        try {\n+            //deserialize only if user sent a request\n+            if (strRequestMutable.size() > 0)\n+            {\n+                if (fInputParsed) //don't allow sending input over URI and HTTP RAW DATA\n+                    return RESTERR(req, HTTP_BAD_REQUEST, \"Combination of URI scheme inputs and raw post data is not allowed\");\n+\n+                CDataStream oss(SER_NETWORK, PROTOCOL_VERSION);\n+                oss << strRequestMutable;\n+                oss >> fCheckMemPool;\n+                //DN: TODO: fix serialization\n+                //oss >> vScripts;\n+            }\n+        } catch (const std::ios_base::failure& e) {\n+            // abort in case of unreadable binary data\n+            return RESTERR(req, HTTP_BAD_REQUEST, \"Parse error\");\n+        }\n+        break;\n+    }\n+\n+    case RF_JSON: {\n+        if (!fInputParsed)\n+            return RESTERR(req, HTTP_BAD_REQUEST, \"Error: empty request\");\n+        break;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+    }\n+    }\n+\n+    // limit max scriptis\n+    if (vScripts.size() > MAX_GETTXOUTSBYADDRESS_SCRIPTS)\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Error: max scripts exceeded (max: %d, tried: %d)\", MAX_GETTXOUTSBYADDRESS_SCRIPTS, vScripts.size()));\n+\n+    int nMinDepth = fCheckMemPool ? 0 : 1;\n+    UniValue vObjects(UniValue::VARR);\n+    std::vector<std::pair<int, unsigned int> > vSort;\n+\n+    BOOST_FOREACH(const CScript &script, vScripts)\n+    {\n+        CCoinsByScript coinsByScript;\n+        pcoinsByScript->GetCoinsByScript(script, coinsByScript);\n+\n+        if (nMinDepth == 0)\n+            mempool.GetCoinsByScript(script, coinsByScript);\n+\n+        CoinsByScriptToJSON(coinsByScript, nMinDepth, vObjects, vSort, true); \n+    }\n+\n+    //DN: TODO: BIN and HEX\n+\n+    UniValue results(UniValue::VARR);\n+    sort(vSort.begin(), vSort.end());\n+    for (unsigned int i = 0; i < vSort.size(); i++)\n+    {\n+        results.push_back(vObjects[vSort[i].second]);\n+    }\n+\n+    // return json string\n+    std::string strJSON = results.write() + \"\\n\";\n+    req->WriteHeader(\"Content-Type\", \"application/json\");\n+    req->WriteReply(HTTP_OK, strJSON);\n+    return true;\n+}\n+\n static const struct {\n     const char* prefix;\n     bool (*handler)(HTTPRequest* req, const std::string& strReq);\n@@ -610,6 +744,7 @@ static const struct {\n       {\"/rest/mempool/contents\", rest_mempool_contents},\n       {\"/rest/headers/\", rest_headers},\n       {\"/rest/getutxos\", rest_getutxos},\n+      {\"/rest/gettxoutsbyaddress\", rest_gettxoutsbyaddress},\n };\n \n bool StartREST()"
      },
      {
        "sha": "982f4520f8e50731b0166212d338ef624cbf6f4e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 55,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715",
        "patch": "@@ -48,6 +48,7 @@ static CUpdatedBlock latestblock;\n \n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n+void CoinsByScriptToJSON(const CCoinsByScript& coinsByScript, int nMinDepth, UniValue& vObjects, std::vector<std::pair<int, unsigned int>>& vSort, bool fIncludeHex);\n \n double GetDifficulty(const CBlockIndex* blockindex)\n {\n@@ -941,7 +942,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n UniValue gettxoutsbyaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n-        throw runtime_error(\n+        throw std::runtime_error(\n             \"gettxoutsbyaddress ( minconf [\\\"address\\\",...] count from )\\n\"\n             \"\\nReturns a list of unspent transaction outputs by address (or script).\\n\"\n             \"The list is ordered by confirmations in descending order.\\n\"\n@@ -996,7 +997,7 @@ UniValue gettxoutsbyaddress(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VARR)(UniValue::VNUM)(UniValue::VNUM));\n \n     UniValue vObjects(UniValue::VARR);\n-    vector<pair<int, unsigned int> > vSort;\n+    std::vector<std::pair<int, unsigned int> > vSort;\n     int nMinDepth = request.params[0].get_int();\n     UniValue inputs = request.params[1].get_array();\n \n@@ -1033,59 +1034,7 @@ UniValue gettxoutsbyaddress(const JSONRPCRequest& request)\n         if (nMinDepth == 0)\n             mempool.GetCoinsByScript(script, coinsByScript);\n \n-        BOOST_FOREACH(const COutPoint &outpoint, coinsByScript.setCoins)\n-        {\n-            CCoins coins;\n-            if (nMinDepth == 0)\n-            {\n-                LOCK(mempool.cs);\n-                CCoinsViewMemPool view(pcoinsTip, mempool);\n-                if (!view.GetCoins(outpoint.hash, coins))\n-                    continue;\n-                mempool.pruneSpent(outpoint.hash, coins); // TODO: this should be done by the CCoinsViewMemPool\n-            }\n-            else if (!pcoinsTip->GetCoins(outpoint.hash, coins))\n-                continue;\n-\n-            if (outpoint.n < coins.vout.size() && !coins.vout[outpoint.n].IsNull() && !coins.vout[outpoint.n].scriptPubKey.IsUnspendable())\n-            {\n-                // should not happen\n-                if ((unsigned int)coins.nHeight != MEMPOOL_HEIGHT && (!chainActive[coins.nHeight] || !chainActive[coins.nHeight]->phashBlock))\n-                    throw JSONRPCError(RPC_INTERNAL_ERROR, \"Internal Error: !chainActive[coins.nHeight]\");\n-\n-                BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n-                CBlockIndex *pindex = it->second;\n-\n-                int nConfirmations = 0;\n-                if ((unsigned int)coins.nHeight != MEMPOOL_HEIGHT)\n-                    nConfirmations = pindex->nHeight - coins.nHeight + 1;\n-                if (nConfirmations < nMinDepth)\n-                    continue;\n-\n-                UniValue oScriptPubKey(UniValue::VOBJ);\n-                ScriptPubKeyToJSON(coins.vout[outpoint.n].scriptPubKey, oScriptPubKey, true);\n-\n-                UniValue o(UniValue::VOBJ);\n-                o.push_back(Pair(\"confirmations\", nConfirmations));\n-                o.push_back(Pair(\"txid\", outpoint.hash.GetHex()));\n-                o.push_back(Pair(\"vout\", (int)outpoint.n));\n-                o.push_back(Pair(\"value\", ValueFromAmount(coins.vout[outpoint.n].nValue)));\n-                o.push_back(Pair(\"scriptPubKey\", oScriptPubKey));\n-                o.push_back(Pair(\"version\", coins.nVersion));\n-                o.push_back(Pair(\"coinbase\", coins.fCoinBase));\n-                o.push_back(Pair(\"bestblockhash\", pindex->GetBlockHash().GetHex()));\n-                o.push_back(Pair(\"bestblockheight\", pindex->nHeight));\n-                o.push_back(Pair(\"bestblocktime\", pindex->GetBlockTime()));\n-                if ((unsigned int)coins.nHeight != MEMPOOL_HEIGHT)\n-                {\n-                    o.push_back(Pair(\"blockhash\", chainActive[coins.nHeight]->GetBlockHash().GetHex()));\n-                    o.push_back(Pair(\"blockheight\", coins.nHeight));\n-                    o.push_back(Pair(\"blocktime\", chainActive[coins.nHeight]->GetBlockTime()));\n-                }\n-                vObjects.push_back(o);\n-                vSort.push_back(make_pair(coins.nHeight, (unsigned int)vObjects.size() - 1));\n-            }\n-        }\n+        CoinsByScriptToJSON(coinsByScript, nMinDepth, vObjects, vSort, true); \n     }\n \n     UniValue results(UniValue::VARR);"
      },
      {
        "sha": "f9f86bb6bec8be3b7483accd76acbbb1a1784fbd",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715",
        "patch": "@@ -37,4 +37,3 @@ UniValue mempoolToJSON(bool fVerbose = false);\n UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n \n #endif\n-"
      },
      {
        "sha": "d9147837fe1eee066fe42fda375c9d08c3949bdf",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715",
        "patch": "@@ -122,6 +122,63 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     }\n }\n \n+void CoinsByScriptToJSON(const CCoinsByScript& coinsByScript, int nMinDepth, UniValue& vObjects, std::vector<std::pair<int, unsigned int>>& vSort, bool fIncludeHex)\n+{\n+    BOOST_FOREACH(const COutPoint &outpoint, coinsByScript.setCoins)\n+    {\n+        CCoins coins;\n+        if (nMinDepth == 0)\n+        {\n+            LOCK(mempool.cs);\n+            CCoinsViewMemPool view(pcoinsTip, mempool);\n+            if (!view.GetCoins(outpoint.hash, coins))\n+                continue;\n+            mempool.pruneSpent(outpoint.hash, coins); // TODO: this should be done by the CCoinsViewMemPool\n+        }\n+        else if (!pcoinsTip->GetCoins(outpoint.hash, coins))\n+            continue;\n+\n+        if (outpoint.n < coins.vout.size() && !coins.vout[outpoint.n].IsNull() && !coins.vout[outpoint.n].scriptPubKey.IsUnspendable())\n+        {\n+            // should not happen\n+            if ((unsigned int)coins.nHeight != MEMPOOL_HEIGHT && (!chainActive[coins.nHeight] || !chainActive[coins.nHeight]->phashBlock))\n+                throw JSONRPCError(RPC_INTERNAL_ERROR, \"Internal Error: !chainActive[coins.nHeight]\");\n+\n+            BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n+            CBlockIndex *pindex = it->second;\n+\n+            int nConfirmations = 0;\n+            if ((unsigned int)coins.nHeight != MEMPOOL_HEIGHT)\n+                nConfirmations = pindex->nHeight - coins.nHeight + 1;\n+            if (nConfirmations < nMinDepth)\n+                continue;\n+\n+            UniValue oScriptPubKey(UniValue::VOBJ);\n+            ScriptPubKeyToJSON(coins.vout[outpoint.n].scriptPubKey, oScriptPubKey, fIncludeHex);\n+\n+            UniValue o(UniValue::VOBJ);\n+            o.push_back(Pair(\"confirmations\", nConfirmations));\n+            o.push_back(Pair(\"txid\", outpoint.hash.GetHex()));\n+            o.push_back(Pair(\"vout\", (int)outpoint.n));\n+            o.push_back(Pair(\"value\", ValueFromAmount(coins.vout[outpoint.n].nValue)));\n+            o.push_back(Pair(\"scriptPubKey\", oScriptPubKey));\n+            o.push_back(Pair(\"version\", coins.nVersion));\n+            o.push_back(Pair(\"coinbase\", coins.fCoinBase));\n+            o.push_back(Pair(\"bestblockhash\", pindex->GetBlockHash().GetHex()));\n+            o.push_back(Pair(\"bestblockheight\", pindex->nHeight));\n+            o.push_back(Pair(\"bestblocktime\", pindex->GetBlockTime()));\n+            if ((unsigned int)coins.nHeight != MEMPOOL_HEIGHT)\n+            {\n+                o.push_back(Pair(\"blockhash\", chainActive[coins.nHeight]->GetBlockHash().GetHex()));\n+                o.push_back(Pair(\"blockheight\", coins.nHeight));\n+                o.push_back(Pair(\"blocktime\", chainActive[coins.nHeight]->GetBlockTime()));\n+            }\n+            vObjects.push_back(o);\n+            vSort.push_back(std::make_pair(coins.nHeight, (unsigned int)vObjects.size() - 1));\n+        }\n+    }\n+}\n+\n UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)"
      },
      {
        "sha": "f962c828970877400734e8898b58cecdcf08852f",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715",
        "patch": "@@ -332,7 +332,7 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n }\n \n CTxMemPool::CTxMemPool(const bool& _fTxOutsByAddressIndex, CBlockPolicyEstimator* estimator) :\n-    nTransactionsUpdated(0), minerPolicyEstimator(estimator)\n+    nTransactionsUpdated(0), fTxOutsByAddressIndex(_fTxOutsByAddressIndex), minerPolicyEstimator(estimator)\n {\n     _clear(); //lock free clear\n "
      }
    ]
  },
  {
    "sha": "44f9b4a168b2e006b45b3ff6d34cb5689984ef61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NGY5YjRhMTY4YjJlMDA2YjQ1YjNmZjZkMzRjYjU2ODk5ODRlZjYx",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2016-09-03T11:08:19Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-04-27T23:19:46Z"
      },
      "message": "C++11: s/boost::scoped_ptr/std::unique_ptr/",
      "tree": {
        "sha": "cfbae9abdf132102d5e21d1665de1dd481225201",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfbae9abdf132102d5e21d1665de1dd481225201"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44f9b4a168b2e006b45b3ff6d34cb5689984ef61",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44f9b4a168b2e006b45b3ff6d34cb5689984ef61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44f9b4a168b2e006b45b3ff6d34cb5689984ef61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44f9b4a168b2e006b45b3ff6d34cb5689984ef61/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ae8aa098dfdfd0bf454d6cafddcb2ce6b577715"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "bd842147db2aa52829daf17659bd22d6bbdba866",
        "filename": "src/coinsbyscript.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44f9b4a168b2e006b45b3ff6d34cb5689984ef61/src/coinsbyscript.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44f9b4a168b2e006b45b3ff6d34cb5689984ef61/src/coinsbyscript.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinsbyscript.cpp?ref=44f9b4a168b2e006b45b3ff6d34cb5689984ef61",
        "patch": "@@ -162,7 +162,7 @@ void CCoinsViewByScriptDBCursor::Next()\n \n bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n {\n-    boost::scoped_ptr<CCoinsViewByScriptDBCursor> pcursor(Cursor());\n+    std::unique_ptr<CCoinsViewByScriptDBCursor> pcursor(Cursor());\n \n     std::vector<uint160> v;\n     int64_t i = 0;\n@@ -207,7 +207,7 @@ bool CCoinsViewByScriptDB::GenerateAllCoinsByScript(CCoinsViewDB* coinsIn)\n     LogPrintf(\"Building address index for -txoutsbyaddressindex. Be patient...\\n\");\n     int64_t nTxCount = coinsIn->CountCoins();\n \n-    boost::scoped_ptr<CCoinsViewCursor> pcursor(coinsIn->Cursor());\n+    std::unique_ptr<CCoinsViewCursor> pcursor(coinsIn->Cursor());\n \n     CCoinsMapByScript mapCoinsByScript;\n     int64_t i = 0;"
      },
      {
        "sha": "124e601d2840f822076a81428018f66b78e63f25",
        "filename": "src/coinsbyscript.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44f9b4a168b2e006b45b3ff6d34cb5689984ef61/src/coinsbyscript.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44f9b4a168b2e006b45b3ff6d34cb5689984ef61/src/coinsbyscript.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinsbyscript.h?ref=44f9b4a168b2e006b45b3ff6d34cb5689984ef61",
        "patch": "@@ -91,7 +91,7 @@ class CCoinsViewByScriptDBCursor\n     CCoinsViewByScriptDBCursor(CDBIterator* pcursorIn):\n         pcursor(pcursorIn) {}\n     uint256 hashBlock;\n-    boost::scoped_ptr<CDBIterator> pcursor;\n+    std::unique_ptr<CDBIterator> pcursor;\n     std::pair<char, uint160> keyTmp;\n \n     friend class CCoinsViewByScriptDB;"
      },
      {
        "sha": "b8d3d3206c82a26bd71ed42eb493a195230531ee",
        "filename": "src/coinstats.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44f9b4a168b2e006b45b3ff6d34cb5689984ef61/src/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44f9b4a168b2e006b45b3ff6d34cb5689984ef61/src/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinstats.cpp?ref=44f9b4a168b2e006b45b3ff6d34cb5689984ef61",
        "patch": "@@ -14,7 +14,7 @@ using namespace std;\n //! Calculate statistics about the unspent transaction output set\n bool GetUTXOStats(CCoinsView *view, CCoinsViewByScriptDB *viewbyscriptdb, CCoinsStats &stats)\n {\n-    boost::scoped_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n+    std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n \n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n     stats.hashBlock = pcursor->GetBestBlock();\n@@ -50,7 +50,7 @@ bool GetUTXOStats(CCoinsView *view, CCoinsViewByScriptDB *viewbyscriptdb, CCoins\n     stats.hashSerialized = ss.GetHash();\n     stats.nTotalAmount = nTotalAmount;\n \n-    boost::scoped_ptr<CCoinsViewByScriptDBCursor> pcursordb(viewbyscriptdb->Cursor());\n+    std::unique_ptr<CCoinsViewByScriptDBCursor> pcursordb(viewbyscriptdb->Cursor());\n     while (pcursordb->Valid()) {\n         boost::this_thread::interruption_point();\n         uint160 hash;"
      },
      {
        "sha": "e5dd8456ded7d0e27a6b814eed2c660f6229183f",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44f9b4a168b2e006b45b3ff6d34cb5689984ef61/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44f9b4a168b2e006b45b3ff6d34cb5689984ef61/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=44f9b4a168b2e006b45b3ff6d34cb5689984ef61",
        "patch": "@@ -137,7 +137,7 @@ void CCoinsViewDBCursor::Next()\n \n int64_t CCoinsViewDB::CountCoins() const\n {\n-    boost::scoped_ptr<CCoinsViewCursor> pcursor(Cursor());\n+    std::unique_ptr<CCoinsViewCursor> pcursor(Cursor());\n \n     int64_t i = 0;\n     while (pcursor->Valid()) {"
      }
    ]
  },
  {
    "sha": "a2873c261c565b00e9ad8827d8d8eb9b5e55733e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjg3M2MyNjFjNTY1YjAwZTlhZDg4MjdkOGQ4ZWI5YjVlNTU3MzNl",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2016-09-15T06:24:22Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-04-27T23:21:37Z"
      },
      "message": "convert txoutsbyaddress test to python",
      "tree": {
        "sha": "3e455044994b5da0470862f8c3f75fd31cd46816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e455044994b5da0470862f8c3f75fd31cd46816"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2873c261c565b00e9ad8827d8d8eb9b5e55733e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2873c261c565b00e9ad8827d8d8eb9b5e55733e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2873c261c565b00e9ad8827d8d8eb9b5e55733e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2873c261c565b00e9ad8827d8d8eb9b5e55733e/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44f9b4a168b2e006b45b3ff6d34cb5689984ef61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44f9b4a168b2e006b45b3ff6d34cb5689984ef61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44f9b4a168b2e006b45b3ff6d34cb5689984ef61"
      }
    ],
    "stats": {
      "total": 270,
      "additions": 105,
      "deletions": 165
    },
    "files": [
      {
        "sha": "2213b1d64779e8a5fd9c18cb1a1ec7053c7c8f2e",
        "filename": "qa/rpc-tests/txoutsbyaddress.py",
        "status": "added",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2873c261c565b00e9ad8827d8d8eb9b5e55733e/qa/rpc-tests/txoutsbyaddress.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2873c261c565b00e9ad8827d8d8eb9b5e55733e/qa/rpc-tests/txoutsbyaddress.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txoutsbyaddress.py?ref=a2873c261c565b00e9ad8827d8d8eb9b5e55733e",
        "patch": "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+\n+class TxOutsByAddressTest(BitcoinTestFramework):\n+    \"\"\"Tests -txoutsbyaddressindex\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+\n+    def setup_network(self, split=False):\n+        print(\"Setup network...\")\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-txoutsbyaddressindex\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir))\n+        self.nodes.append(start_node(2, self.options.tmpdir))\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        print(\"Generating test blockchain...\")\n+\n+        # Check that there's no UTXO on any of the nodes\n+        for node in self.nodes:\n+            assert_equal(len(node.listunspent()), 0)\n+\n+        # mining\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[2], 0)\n+        self.nodes[0].generate(101)\n+        self.sync_all()\n+        assert_equal(self.nodes[0].getbalance(), 50)\n+\n+        # TX1: send from node0 to node1\n+        # - check if txout from tx1 is there\n+        address = self.nodes[1].getnewaddress()\n+        txid1 = self.nodes[0].sendtoaddress(address, 10)\n+        self.nodes[0].generate(101) # node will collect its own fee\n+        self.sync_all()\n+        assert_equal(self.nodes[0].getbalance(), 5090)\n+        assert_equal(self.nodes[1].getbalance(), 10)\n+        txouts = self.nodes[0].gettxoutsbyaddress(1, (address,))\n+        txid = txouts[0][\"txid\"]\n+        assert_is_hash_string(txid)\n+        assert_equal(txid, txid1)\n+\n+        # stop node 2\n+        stop_node(self.nodes[2], 2)\n+        self.nodes.pop()\n+\n+        # TX2: send from node1 to node0\n+        # - check if txout from tx1 is gone\n+        # - check if txout from tx2 is there\n+        address2 = self.nodes[0].getnewaddress()\n+        txid2 = self.nodes[1].sendtoaddress(address2, 5)\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        assert_equal(self.nodes[0].getbalance(), 5145)\n+        txouts = self.nodes[0].gettxoutsbyaddress(1, (address,))\n+        assert_equal(txouts, [])\n+        txouts = self.nodes[0].gettxoutsbyaddress(1, (address2,))\n+        txid = txouts[0][\"txid\"]\n+        assert_is_hash_string(txid)\n+        assert_equal(txid, txid2)\n+\n+        # start node 2\n+        self.nodes.append(start_node(2, self.options.tmpdir, self.args))\n+\n+        # mine 10 blocks alone to have the longest chain\n+        self.nodes[2].generate(10)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[1], 2)\n+        self.nodes[2].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # TX2 must be reverted\n+        # - check if txout from tx1 is there again\n+        # - check if txout from tx2 is gone\n+        assert_equal(self.nodes[0].getbalance(), 5640)\n+        txouts = self.nodes[0].gettxoutsbyaddress(1, (address,))\n+        txid = txouts[0][\"txid\"]\n+        assert_is_hash_string(txid)\n+        assert_equal(txid, txid1)\n+        txouts = self.nodes[0].gettxoutsbyaddress(1, (address2,))\n+        assert_equal(txouts, [])\n+\n+if __name__ == '__main__':\n+    TxOutsByAddressTest().main()\n+"
      },
      {
        "sha": "40c21f77413b72d239ccfb481004e9a30aa09274",
        "filename": "qa/rpc-tests/txoutsbyaddress.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 163,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44f9b4a168b2e006b45b3ff6d34cb5689984ef61/qa/rpc-tests/txoutsbyaddress.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44f9b4a168b2e006b45b3ff6d34cb5689984ef61/qa/rpc-tests/txoutsbyaddress.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txoutsbyaddress.sh?ref=44f9b4a168b2e006b45b3ff6d34cb5689984ef61",
        "patch": "@@ -1,163 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2013-2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Test -txoutsbyaddressindex\n-\n-if [ $# -lt 1 ]; then\n-        echo \"Usage: $0 path_to_binaries\"\n-        echo \"e.g. $0 ../../src\"\n-        exit 1\n-fi\n-\n-set -f\n-\n-BITCOIND=${1}/bitcoind\n-CLI=${1}/bitcoin-cli\n-\n-DIR=\"${BASH_SOURCE%/*}\"\n-SENDANDWAIT=\"${DIR}/send.sh\"\n-if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n-. \"$DIR/util.sh\"\n-\n-D=$(mktemp -d test.XXXXX)\n-\n-D1=${D}/node1\n-CreateDataDir \"$D1\" port=11000 rpcport=11001\n-B1ARGS=\"-datadir=$D1\"\n-$BITCOIND $B1ARGS -txoutsbyaddressindex -sendfreetransactions=1 &\n-B1PID=$!\n-\n-D2=${D}/node2\n-CreateDataDir \"$D2\" port=11010 rpcport=11011\n-B2ARGS=\"-datadir=$D2\"\n-$BITCOIND $B2ARGS -sendfreetransactions=1 &\n-B2PID=$!\n-\n-D3=${D}/node3\n-CreateDataDir \"$D3\" port=11020 rpcport=11021\n-B3ARGS=\"-datadir=$D3\"\n-$BITCOIND $B3ARGS -sendfreetransactions=1 &\n-B3PID=$!\n-\n-# Wait until all three nodes are at the same block number\n-function WaitBlocks {\n-    while :\n-    do\n-        sleep 1\n-        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n-        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n-        declare -i BLOCKS3=$( GetBlocks $B3ARGS )\n-        if (( BLOCKS1 == BLOCKS2 && BLOCKS2 == BLOCKS3 ))\n-        then\n-            break\n-        fi\n-    done\n-}\n-\n-function WaitBlocks2 {\n-    while :\n-    do\n-        sleep 1\n-        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n-        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n-        if (( BLOCKS1 == BLOCKS2 ))\n-        then\n-            break\n-        fi\n-    done\n-}\n-\n-function CleanUp {\n-$CLI $B3ARGS stop > /dev/null 2>&1\n-wait $B3PID\n-$CLI $B2ARGS stop > /dev/null 2>&1\n-wait $B2PID\n-$CLI $B1ARGS stop > /dev/null 2>&1\n-wait $B1PID\n-\n-rm -rf $D\n-}\n-\n-function ErrorAndExit {\n-echo \"$@\" 1>&2;\n-CleanUp\n-exit 1\n-}\n-\n-echo \"Generating test blockchain...\"\n-\n-# mining\n-$CLI $B2ARGS addnode \"127.0.0.1:11000\" \"onetry\"\n-$CLI $B3ARGS addnode \"127.0.0.1:11000\" \"onetry\"\n-$CLI $B1ARGS generate 101\n-WaitBlocks\n-CheckBalance \"$B1ARGS\" 50\n-\n-# TX1: send from node1 to node2\n-# - check if txout from tx1 is there\n-address=$($CLI $B2ARGS getnewaddress)\n-txid1=$($CLI $B1ARGS sendtoaddress $address 10)\n-$CLI $B1ARGS generate 1\n-WaitBlocks\n-CheckBalance \"$B1ARGS\" 90\n-CheckBalance \"$B2ARGS\" 10\n-txouts=$($CLI $B1ARGS gettxoutsbyaddress 1 \"[\\\"\"\"$address\"\"\\\"]\")\n-txid=$(ExtractKey \"txid\" \"$txouts\")\n-if [ -z \"$txid\" ] || [ $txid != $txid1 ] ; then\n-   ErrorAndExit \"wrong txid1: $txid != $txid1\"\n-fi\n-\n-# stop node 3\n-$CLI $B3ARGS stop > /dev/null 2>&1\n-wait $B3PID\n-\n-# TX2: send from node2 to node1\n-# - check if txout from tx1 is gone\n-# - check if txout from tx2 is there\n-address2=$($CLI $B1ARGS getnewaddress)\n-txid2=$($CLI $B2ARGS sendtoaddress $address2 5)\n-$CLI $B2ARGS generate 1\n-WaitBlocks2\n-CheckBalance \"$B1ARGS\" 145\n-txouts=$($CLI $B1ARGS gettxoutsbyaddress 1 \"[\\\"\"\"$address\"\"\\\"]\")\n-txid=$(ExtractKey \"txid\" \"$txouts\")\n-if [ ! -z \"$txid\" ] ; then\n-   ErrorAndExit \"txid not empty: $txid\"\n-fi\n-txouts=$($CLI $B1ARGS gettxoutsbyaddress 1 \"[\\\"\"\"$address2\"\"\\\"]\")\n-txid=$(ExtractKey \"txid\" \"$txouts\")\n-if [ -z \"$txid\" ] || [ $txid != $txid2 ] ; then\n-   ErrorAndExit \"wrong txid2: $txid != $txid2\"\n-fi\n-\n-# start node 3\n-$BITCOIND $B3ARGS &\n-B3PID=$!\n-\n-# mine 10 blocks alone to have the longest chain\n-$CLI $B3ARGS generate 10\n-$CLI $B1ARGS addnode \"127.0.0.1:11020\" \"onetry\"\n-$CLI $B2ARGS addnode \"127.0.0.1:11020\" \"onetry\"\n-$CLI $B3ARGS generate 1\n-WaitBlocks\n-\n-# TX2 must be reverted\n-# - check if txout from tx1 is there again\n-# - check if txout from tx2 is gone\n-CheckBalance \"$B1ARGS\" 640\n-txouts=$($CLI $B1ARGS gettxoutsbyaddress 1 \"[\\\"\"\"$address\"\"\\\"]\")\n-txid=$(ExtractKey \"txid\" \"$txouts\")\n-if [ -z \"$txid\" ] || [ $txid != $txid1 ] ; then\n-   ErrorAndExit \"wrong txid1 : $txid != $txid1\"\n-fi\n-txouts=$($CLI $B1ARGS gettxoutsbyaddress 1 \"[\\\"\"\"$address2\"\"\\\"]\")\n-txid=$(ExtractKey \"txid\" \"$txouts\")\n-if [ ! -z \"$txid\" ] ; then\n-   ErrorAndExit \"txid is not empty: $txid\"\n-fi\n-\n-echo \"Tests successful, cleaning up\"\n-CleanUp\n-exit 0"
      },
      {
        "sha": "21c533da14b166f81851709b0808145032e2758f",
        "filename": "src/coinstats.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2873c261c565b00e9ad8827d8d8eb9b5e55733e/src/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2873c261c565b00e9ad8827d8d8eb9b5e55733e/src/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinstats.cpp?ref=a2873c261c565b00e9ad8827d8d8eb9b5e55733e",
        "patch": "@@ -20,8 +20,13 @@ bool GetUTXOStats(CCoinsView *view, CCoinsViewByScriptDB *viewbyscriptdb, CCoins\n     stats.hashBlock = pcursor->GetBestBlock();\n     {\n         LOCK(cs_main);\n-        stats.nHeight = mapBlockIndex.find(stats.hashBlock)->second->nHeight;\n+        BlockMap::const_iterator iter = mapBlockIndex.find(stats.hashBlock);\n+        if (iter == mapBlockIndex.end())\n+            stats.nHeight = 0;\n+        else\n+            stats.nHeight = iter->second->nHeight;\n     }\n+\n     ss << stats.hashBlock;\n     CAmount nTotalAmount = 0;\n     while (pcursor->Valid()) {"
      },
      {
        "sha": "a36b4c052a619bf4c6cecd00812e1a3b23a06451",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2873c261c565b00e9ad8827d8d8eb9b5e55733e/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2873c261c565b00e9ad8827d8d8eb9b5e55733e/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=a2873c261c565b00e9ad8827d8d8eb9b5e55733e",
        "patch": "@@ -99,7 +99,8 @@ CCoinsViewCursor *CCoinsViewDB::Cursor() const\n        that restriction.  */\n     i->pcursor->Seek(DB_COINS);\n     // Cache key of first record\n-    i->pcursor->GetKey(i->keyTmp);\n+    if (!i->pcursor->Valid() || !i->pcursor->GetKey(i->keyTmp))\n+        i->keyTmp.first = 0; \n     return i;\n }\n "
      },
      {
        "sha": "9dd21e325218b2bd329b6ffe92a9a20f6a9f19fd",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2873c261c565b00e9ad8827d8d8eb9b5e55733e/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2873c261c565b00e9ad8827d8d8eb9b5e55733e/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=a2873c261c565b00e9ad8827d8d8eb9b5e55733e",
        "patch": "@@ -110,6 +110,7 @@\n     'listsinceblock.py',\n     'p2p-leaktests.py',\n     'import-abort-rescan.py',\n+    'txoutsbyaddress.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      }
    ]
  },
  {
    "sha": "ddddc03455e45d1d0b9ce5e46d650b3448719a8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGRkYzAzNDU1ZTQ1ZDFkMGI5Y2U1ZTQ2ZDY1MGIzNDQ4NzE5YThj",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2016-09-15T10:40:16Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-04-27T23:21:37Z"
      },
      "message": "- add txoutsbyaddress REST interface tests\n - remove skeleton HEX/BIN format support from REST interface for gettxoutsbyaddress endpoint",
      "tree": {
        "sha": "46835a4a346709284a0c004995b0a4d6ac87c06b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46835a4a346709284a0c004995b0a4d6ac87c06b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddddc03455e45d1d0b9ce5e46d650b3448719a8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddddc03455e45d1d0b9ce5e46d650b3448719a8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddddc03455e45d1d0b9ce5e46d650b3448719a8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddddc03455e45d1d0b9ce5e46d650b3448719a8c/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2873c261c565b00e9ad8827d8d8eb9b5e55733e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2873c261c565b00e9ad8827d8d8eb9b5e55733e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2873c261c565b00e9ad8827d8d8eb9b5e55733e"
      }
    ],
    "stats": {
      "total": 135,
      "additions": 93,
      "deletions": 42
    },
    "files": [
      {
        "sha": "83810909d67c13623e3f2902c96867541ac1dbb8",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 32,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddddc03455e45d1d0b9ce5e46d650b3448719a8c/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddddc03455e45d1d0b9ce5e46d650b3448719a8c/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=ddddc03455e45d1d0b9ce5e46d650b3448719a8c",
        "patch": "@@ -628,7 +628,7 @@ static bool rest_gettxoutsbyaddress(HTTPRequest* req, const std::string& strURIP\n     std::vector<CScript> vScripts;\n \n     // parse/deserialize input\n-    // input-format = output-format, rest/gettxoutsbyaddress/bin requires binary input, gives binary output, ...\n+    // only json format supported\n \n     if (uriParts.size() > 0)\n     {\n@@ -660,44 +660,17 @@ static bool rest_gettxoutsbyaddress(HTTPRequest* req, const std::string& strURIP\n     }\n \n     switch (rf) {\n-    case RF_HEX: {\n-        // convert hex to bin, continue then with bin part\n-        std::vector<unsigned char> strRequestV = ParseHex(strRequestMutable);\n-        strRequestMutable.assign(strRequestV.begin(), strRequestV.end());\n-    }\n-\n-    case RF_BINARY: {\n-        try {\n-            //deserialize only if user sent a request\n-            if (strRequestMutable.size() > 0)\n-            {\n-                if (fInputParsed) //don't allow sending input over URI and HTTP RAW DATA\n-                    return RESTERR(req, HTTP_BAD_REQUEST, \"Combination of URI scheme inputs and raw post data is not allowed\");\n-\n-                CDataStream oss(SER_NETWORK, PROTOCOL_VERSION);\n-                oss << strRequestMutable;\n-                oss >> fCheckMemPool;\n-                //DN: TODO: fix serialization\n-                //oss >> vScripts;\n-            }\n-        } catch (const std::ios_base::failure& e) {\n-            // abort in case of unreadable binary data\n-            return RESTERR(req, HTTP_BAD_REQUEST, \"Parse error\");\n-        }\n-        break;\n-    }\n-\n     case RF_JSON: {\n         if (!fInputParsed)\n             return RESTERR(req, HTTP_BAD_REQUEST, \"Error: empty request\");\n         break;\n     }\n     default: {\n-        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: json)\");\n     }\n     }\n \n-    // limit max scriptis\n+    // limit max scripts\n     if (vScripts.size() > MAX_GETTXOUTSBYADDRESS_SCRIPTS)\n         return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Error: max scripts exceeded (max: %d, tried: %d)\", MAX_GETTXOUTSBYADDRESS_SCRIPTS, vScripts.size()));\n \n@@ -716,8 +689,6 @@ static bool rest_gettxoutsbyaddress(HTTPRequest* req, const std::string& strURIP\n         CoinsByScriptToJSON(coinsByScript, nMinDepth, vObjects, vSort, true); \n     }\n \n-    //DN: TODO: BIN and HEX\n-\n     UniValue results(UniValue::VARR);\n     sort(vSort.begin(), vSort.end());\n     for (unsigned int i = 0; i < vSort.size(); i++)"
      },
      {
        "sha": "5f131f688cc5bac4f5323363acfa419fdb7885a7",
        "filename": "test/functional/rest.py",
        "status": "modified",
        "additions": 90,
        "deletions": 10,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddddc03455e45d1d0b9ce5e46d650b3448719a8c/test/functional/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddddc03455e45d1d0b9ce5e46d650b3448719a8c/test/functional/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rest.py?ref=ddddc03455e45d1d0b9ce5e46d650b3448719a8c",
        "patch": "@@ -49,7 +49,8 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        args = [\"-txoutsbyaddressindex\"]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [args, args, args])\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n@@ -67,7 +68,8 @@ def run_test(self):\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n \n-        txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n+        address = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(address, 0.1)\n         self.sync_all()\n         self.nodes[2].generate(1)\n         self.sync_all()\n@@ -128,8 +130,6 @@ def run_test(self):\n         assert_equal(json_obj['bitmap'], \"10\")\n \n         #test binary response\n-        bb_hash = self.nodes[0].getbestblockhash()\n-\n         binaryRequest = b'\\x01\\x02'\n         binaryRequest += hex_str_to_bytes(txid)\n         binaryRequest += pack(\"i\", n)\n@@ -152,8 +152,9 @@ def run_test(self):\n         ############################\n \n         # do a tx and don't sync\n-        txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+txid+self.FORMAT_SEPARATOR+\"json\")\n+        address2 = self.nodes[1].getnewaddress()\n+        txid2 = self.nodes[0].sendtoaddress(address2, 0.1)\n+        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+txid2+self.FORMAT_SEPARATOR+\"json\")\n         json_obj = json.loads(json_string)\n         vintx = json_obj['vin'][0]['txid'] # get the vin to later check for utxo (should be spent by then)\n         # get n of 0.1 outpoint\n@@ -162,12 +163,12 @@ def run_test(self):\n             if vout['value'] == 0.1:\n                 n = vout['n']\n \n-        json_request = '/'+txid+'-'+str(n)\n+        json_request = '/'+txid2+'-'+str(n)\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 0) #there should be a outpoint because it has just added to the mempool\n \n-        json_request = '/checkmempool/'+txid+'-'+str(n)\n+        json_request = '/checkmempool/'+txid2+'-'+str(n)\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1) #there should be a outpoint because it has just added to the mempool\n@@ -187,21 +188,100 @@ def run_test(self):\n         #test limits\n         json_request = '/checkmempool/'\n         for x in range(0, 20):\n-            json_request += txid+'-'+str(n)+'/'\n+            json_request += txid2+'-'+str(n)+'/'\n         json_request = json_request.rstrip(\"/\")\n         response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n         assert_equal(response.status, 400) #must be a 400 because we exceeding the limits\n \n         json_request = '/checkmempool/'\n         for x in range(0, 15):\n-            json_request += txid+'-'+str(n)+'/'\n+            json_request += txid2+'-'+str(n)+'/'\n         json_request = json_request.rstrip(\"/\")\n         response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n         assert_equal(response.status, 200) #must be a 200 because we are within the limits\n \n         self.nodes[0].generate(1) #generate block to not affect upcoming tests\n         self.sync_all()\n \n+\n+        ##############################################\n+        # GETTXOUTSBYADDRESS: query an unspent txout #\n+        ##############################################\n+        json_request = '/checkmempool/'+address\n+        json_string = http_get_call(url.hostname, url.port, '/rest/gettxoutsbyaddress'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+\n+        #make sure there is just one txout\n+        assert_equal(len(json_obj), 1)\n+        txout = json_obj[0]\n+\n+        #check details\n+        assert_equal(txout['blockhash'], bb_hash)\n+        assert_equal(txout['txid'], txid)\n+        assert_equal(txout['value'], 0.1)\n+\n+\n+        #####################################################\n+        # GETTXOUTSBYADDRESS: query multiple unspent txouts #\n+        #####################################################\n+        json_request = '/checkmempool/'+address+'/'+address2\n+        json_string = http_get_call(url.hostname, url.port, '/rest/gettxoutsbyaddress'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+\n+        #make sure there are two txouts\n+        assert_equal(len(json_obj), 2)\n+        txout1 = json_obj[0]\n+        txout2 = json_obj[1]\n+\n+        #check details\n+        assert_equal(txout1['txid'], txid)\n+        assert_equal(txout1['value'], 0.1)\n+        assert_equal(txout2['txid'], txid2)\n+        assert_equal(txout2['value'], 0.1)\n+\n+\n+        ############################################\n+        # GETTXOUTSBYADDRESS: query unseen address #\n+        ############################################\n+\n+        json_request = '/checkmempool/'+self.nodes[0].getnewaddress()\n+        json_string = http_get_call(url.hostname, url.port, '/rest/gettxoutsbyaddress'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+\n+        #make sure there are no txouts (brand new address)\n+        assert_equal(len(json_obj), 0) \n+\n+\n+        ########################################\n+        # GETTXOUTSBYADDRESS: invalid requests #\n+        ########################################\n+\n+\n+        #do some invalid requests\n+        json_request = '{\"checkmempool'\n+        response = http_post_call(url.hostname, url.port, '/rest/gettxoutsbyaddress'+self.FORMAT_SEPARATOR+'json', json_request, True)\n+        assert_equal(response.status, 400) #must be a 400 because we send a invalid json request\n+\n+        json_request = '/checkmempool/xxxx'\n+        response = http_post_call(url.hostname, url.port, '/rest/gettxoutsbyaddress'+self.FORMAT_SEPARATOR+'json', json_request, True)\n+        assert_equal(response.status, 400) #must be a 400 because we send a invalid json request\n+\n+        #test limits\n+        json_request = '/checkmempool/'\n+        for x in range(0, 20):\n+            json_request += address+'/'\n+        json_request = json_request.rstrip(\"/\")\n+        response = http_post_call(url.hostname, url.port, '/rest/gettxoutsbyaddress'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n+        assert_equal(response.status, 400) #must be a 400 because we exceeding the limits\n+\n+        json_request = '/checkmempool/'\n+        for x in range(0, 15):\n+            json_request += address+'/'\n+        json_request = json_request.rstrip(\"/\")\n+        response = http_post_call(url.hostname, url.port, '/rest/gettxoutsbyaddress'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n+        assert_equal(response.status, 200) #must be a 200 because we are within the limits\n+\n+\n         ################\n         # /rest/block/ #\n         ################"
      }
    ]
  },
  {
    "sha": "113402255c0c938f49d499e8d2e44cd9d981359d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTM0MDIyNTVjMGM5MzhmNDlkNDk5ZThkMmU0NGNkOWQ5ODEzNTlk",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2016-09-17T04:55:52Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-04-27T23:21:37Z"
      },
      "message": "address test review nits",
      "tree": {
        "sha": "90e1058ef90c7314d5e2325e3198b5265346d30c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90e1058ef90c7314d5e2325e3198b5265346d30c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/113402255c0c938f49d499e8d2e44cd9d981359d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/113402255c0c938f49d499e8d2e44cd9d981359d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/113402255c0c938f49d499e8d2e44cd9d981359d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/113402255c0c938f49d499e8d2e44cd9d981359d/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddddc03455e45d1d0b9ce5e46d650b3448719a8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddddc03455e45d1d0b9ce5e46d650b3448719a8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddddc03455e45d1d0b9ce5e46d650b3448719a8c"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 7,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a84224e2c51e5533438f60fcc0db75fb0a1e584e",
        "filename": "qa/rpc-tests/txoutsbyaddress.py",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/113402255c0c938f49d499e8d2e44cd9d981359d/qa/rpc-tests/txoutsbyaddress.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/113402255c0c938f49d499e8d2e44cd9d981359d/qa/rpc-tests/txoutsbyaddress.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txoutsbyaddress.py?ref=113402255c0c938f49d499e8d2e44cd9d981359d",
        "patch": "@@ -14,15 +14,14 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.extra_args = [[\"-txoutsbyaddressindex\"], [], []]\n \n     def setup_network(self, split=False):\n         print(\"Setup network...\")\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-txoutsbyaddressindex\"]))\n-        self.nodes.append(start_node(1, self.options.tmpdir))\n-        self.nodes.append(start_node(2, self.options.tmpdir))\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[2], 0)\n         self.is_network_split = False\n-        self.sync_all()\n \n     def run_test(self):\n         print(\"Generating test blockchain...\")\n@@ -32,8 +31,6 @@ def run_test(self):\n             assert_equal(len(node.listunspent()), 0)\n \n         # mining\n-        connect_nodes(self.nodes[1], 0)\n-        connect_nodes(self.nodes[2], 0)\n         self.nodes[0].generate(101)\n         self.sync_all()\n         assert_equal(self.nodes[0].getbalance(), 50)\n@@ -71,7 +68,7 @@ def run_test(self):\n         assert_equal(txid, txid2)\n \n         # start node 2\n-        self.nodes.append(start_node(2, self.options.tmpdir, self.args))\n+        self.nodes.append(start_node(2, self.options.tmpdir, self.extra_args[2]))\n \n         # mine 10 blocks alone to have the longest chain\n         self.nodes[2].generate(10)"
      },
      {
        "sha": "e00d76efe276f1829a1e12ea6e657d89ca20cf07",
        "filename": "test/functional/rest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/113402255c0c938f49d499e8d2e44cd9d981359d/test/functional/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/113402255c0c938f49d499e8d2e44cd9d981359d/test/functional/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rest.py?ref=113402255c0c938f49d499e8d2e44cd9d981359d",
        "patch": "@@ -47,15 +47,14 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.extra_args = [[\"-txoutsbyaddressindex\"]] * 3\n \n     def setup_network(self, split=False):\n-        args = [\"-txoutsbyaddressindex\"]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [args, args, args])\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n         self.is_network_split=False\n-        self.sync_all()\n \n     def run_test(self):\n         url = urllib.parse.urlparse(self.nodes[0].url)"
      }
    ]
  },
  {
    "sha": "efa276b55d958f642429bb3fe55115aedde770e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmEyNzZiNTVkOTU4ZjY0MjQyOWJiM2ZlNTUxMTVhZWRkZTc3MGU3",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2016-10-01T00:10:46Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-04-27T23:21:37Z"
      },
      "message": "rename -txoutsbyaddress to -txoutindex",
      "tree": {
        "sha": "ebbf9881a650c89854c7c3e0d146d855e57c3bf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ebbf9881a650c89854c7c3e0d146d855e57c3bf8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efa276b55d958f642429bb3fe55115aedde770e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efa276b55d958f642429bb3fe55115aedde770e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efa276b55d958f642429bb3fe55115aedde770e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efa276b55d958f642429bb3fe55115aedde770e7/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "113402255c0c938f49d499e8d2e44cd9d981359d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/113402255c0c938f49d499e8d2e44cd9d981359d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/113402255c0c938f49d499e8d2e44cd9d981359d"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 49,
      "deletions": 49
    },
    "files": [
      {
        "sha": "44969a812965ac11edf0da8f5659f57b594544a5",
        "filename": "qa/rpc-tests/txoutsbyaddress.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efa276b55d958f642429bb3fe55115aedde770e7/qa/rpc-tests/txoutsbyaddress.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efa276b55d958f642429bb3fe55115aedde770e7/qa/rpc-tests/txoutsbyaddress.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txoutsbyaddress.py?ref=efa276b55d958f642429bb3fe55115aedde770e7",
        "patch": "@@ -8,13 +8,13 @@\n \n \n class TxOutsByAddressTest(BitcoinTestFramework):\n-    \"\"\"Tests -txoutsbyaddressindex\"\"\"\n+    \"\"\"Tests -txoutindex\"\"\"\n \n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        self.extra_args = [[\"-txoutsbyaddressindex\"], [], []]\n+        self.extra_args = [[\"-txoutindex\"], [], []]\n \n     def setup_network(self, split=False):\n         print(\"Setup network...\")"
      },
      {
        "sha": "dc61351f4597a8c44e19b322ff49e5d08c2db983",
        "filename": "src/coinsbyscript.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efa276b55d958f642429bb3fe55115aedde770e7/src/coinsbyscript.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efa276b55d958f642429bb3fe55115aedde770e7/src/coinsbyscript.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinsbyscript.cpp?ref=efa276b55d958f642429bb3fe55115aedde770e7",
        "patch": "@@ -204,7 +204,7 @@ bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n \n bool CCoinsViewByScriptDB::GenerateAllCoinsByScript(CCoinsViewDB* coinsIn)\n {\n-    LogPrintf(\"Building address index for -txoutsbyaddressindex. Be patient...\\n\");\n+    LogPrintf(\"Building address index for -txoutindex. Be patient...\\n\");\n     int64_t nTxCount = coinsIn->CountCoins();\n \n     std::unique_ptr<CCoinsViewCursor> pcursor(coinsIn->Cursor());"
      },
      {
        "sha": "236edb418952dc1deb5723c8e817a5170492fe38",
        "filename": "src/coinsbyscript.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efa276b55d958f642429bb3fe55115aedde770e7/src/coinsbyscript.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efa276b55d958f642429bb3fe55115aedde770e7/src/coinsbyscript.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinsbyscript.h?ref=efa276b55d958f642429bb3fe55115aedde770e7",
        "patch": "@@ -109,8 +109,8 @@ class CCoinsViewByScriptDB\n     bool BatchWrite(CCoinsViewByScript* pcoinsViewByScriptIn, const uint256 &hashBlock);\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n-    bool DeleteAllCoinsByScript();   // removes txoutsbyaddressindex\n-    bool GenerateAllCoinsByScript(CCoinsViewDB* coinsIn); // creates txoutsbyaddressindex\n+    bool DeleteAllCoinsByScript();   // removes txoutindex\n+    bool GenerateAllCoinsByScript(CCoinsViewDB* coinsIn); // creates txoutindex\n     CCoinsViewByScriptDBCursor *Cursor() const;\n };\n "
      },
      {
        "sha": "df23c75341035c30678d2eb011f00fd60bfc73bd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efa276b55d958f642429bb3fe55115aedde770e7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efa276b55d958f642429bb3fe55115aedde770e7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=efa276b55d958f642429bb3fe55115aedde770e7",
        "patch": "@@ -374,7 +374,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n     strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX));\n-    strUsage += HelpMessageOpt(\"-txoutsbyaddressindex\", strprintf(_(\"Maintain an address to unspent outputs index (rpc: gettxoutsbyaddress). The index is built on first use. (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-txoutindex\", strprintf(_(\"Maintain an address to unspent outputs index (rpc: gettxoutsbyaddress). The index is built on first use. (default: %u)\"), 0));\n \n     strUsage += HelpMessageGroup(_(\"Connection options:\"));\n     strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open\"));\n@@ -1492,56 +1492,56 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     }\n                 }\n \n-                // Check -txoutsbyaddressindex\n-                pcoinsByScriptDB->ReadFlag(\"txoutsbyaddressindex\", fTxOutsByAddressIndex);\n-                if (IsArgSet(\"-txoutsbyaddressindex\"))\n+                // Check -txoutindex\n+                pcoinsByScriptDB->ReadFlag(\"txoutindex\", fTxOutIndex);\n+                if (IsArgSet(\"-txoutindex\"))\n                 {\n-                    if (GetBoolArg(\"-txoutsbyaddressindex\", false))\n+                    if (GetBoolArg(\"-txoutindex\", false))\n                     {\n                         // build index\n-                        if (!fTxOutsByAddressIndex)\n+                        if (!fTxOutIndex)\n                         {\n                             if (!pcoinsByScriptDB->DeleteAllCoinsByScript())\n                             {\n-                                strLoadError = _(\"Error deleting txoutsbyaddressindex\");\n+                                strLoadError = _(\"Error deleting txoutindex\");\n                                 break;\n                             }\n                             if (!pcoinsByScriptDB->GenerateAllCoinsByScript(pcoinsdbview))\n                             {\n-                                strLoadError = _(\"Error building txoutsbyaddressindex\");\n+                                strLoadError = _(\"Error building txoutindex\");\n                                 break;\n                             }\n                             CCoinsStats stats;\n                             if (!GetUTXOStats(pcoinsTip, pcoinsByScriptDB, stats))\n                             {\n-                                strLoadError = _(\"Error GetUTXOStats for txoutsbyaddressindex\");\n+                                strLoadError = _(\"Error GetUTXOStats for txoutindex\");\n                                 break;\n                             }\n                             if (stats.nTransactionOutputs != stats.nAddressesOutputs)\n                             {\n-                                strLoadError = _(\"Error compare stats for txoutsbyaddressindex\");\n+                                strLoadError = _(\"Error compare stats for txoutindex\");\n                                 break;\n                             }\n-                            pcoinsByScriptDB->WriteFlag(\"txoutsbyaddressindex\", true);\n-                            fTxOutsByAddressIndex = true;\n+                            pcoinsByScriptDB->WriteFlag(\"txoutindex\", true);\n+                            fTxOutIndex = true;\n                         }\n                     }\n                     else\n                     {\n-                        if (fTxOutsByAddressIndex)\n+                        if (fTxOutIndex)\n                         {\n                             // remove index\n                             pcoinsByScriptDB->DeleteAllCoinsByScript();\n-                            pcoinsByScriptDB->WriteFlag(\"txoutsbyaddressindex\", false);\n-                            fTxOutsByAddressIndex = false;\n+                            pcoinsByScriptDB->WriteFlag(\"txoutindex\", false);\n+                            fTxOutIndex = false;\n                         }\n                     }\n                 }\n-                else if (fTxOutsByAddressIndex)\n-                    return InitError(_(\"You need to provide -txoutsbyaddressindex. Do -txoutsbyaddressindex=0 to delete the index.\"));\n+                else if (fTxOutIndex)\n+                    return InitError(_(\"You need to provide -txoutindex. Do -txoutindex=0 to delete the index.\"));\n \n-                // Init -txoutsbyaddressindex\n-                if (fTxOutsByAddressIndex)\n+                // Init -txoutindex\n+                if (fTxOutIndex)\n                     pcoinsByScript = new CCoinsViewByScript(pcoinsByScriptDB);\n \n                 uiInterface.InitMessage(_(\"Verifying blocks...\"));"
      },
      {
        "sha": "c3dafe129d5286398018cd37755fdd96c7139e3e",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efa276b55d958f642429bb3fe55115aedde770e7/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efa276b55d958f642429bb3fe55115aedde770e7/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=efa276b55d958f642429bb3fe55115aedde770e7",
        "patch": "@@ -605,8 +605,8 @@ static bool rest_gettxoutsbyaddress(HTTPRequest* req, const std::string& strURIP\n {\n     if (!CheckWarmup(req))\n         return false;\n-    if (!fTxOutsByAddressIndex)\n-        return RESTERR(req, HTTP_BAD_REQUEST, \"To use this function, you must start bitcoin with the -txoutsbyaddressindex parameter.\");\n+    if (!fTxOutIndex)\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"To use this function, you must start bitcoin with the -txoutindex parameter.\");\n \n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);"
      },
      {
        "sha": "dc18f5569cc9658b84f4123a4fb9e9f8a3be3fb0",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efa276b55d958f642429bb3fe55115aedde770e7/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efa276b55d958f642429bb3fe55115aedde770e7/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=efa276b55d958f642429bb3fe55115aedde770e7",
        "patch": "@@ -828,8 +828,8 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             \"  \\\"bestblock\\\": \\\"hex\\\",   (string) the best block hash hex\\n\"\n             \"  \\\"transactions\\\": n,      (numeric) The number of transactions\\n\"\n             \"  \\\"txouts\\\": n,            (numeric) The number of output transactions\\n\"\n-            \"  \\\"addresses\\\": n,         (numeric) The number of addresses and scripts. Only if -txoutsbyaddressindex=1\\n\"\n-            \"  \\\"txoutsbyaddress\\\": n,   (numeric) The number of output transactions. Only if -txoutsbyaddressindex=1\\n\"\n+            \"  \\\"addresses\\\": n,         (numeric) The number of addresses and scripts. Only if -txoutindex=1\\n\"\n+            \"  \\\"txoutsbyaddress\\\": n,   (numeric) The number of output transactions. Only if -txoutindex=1\\n\"\n             \"  \\\"bytes_serialized\\\": n,  (numeric) The serialized size\\n\"\n             \"  \\\"hash_serialized\\\": \\\"hash\\\",   (string) The serialized hash\\n\"\n             \"  \\\"total_amount\\\": x.xxx          (numeric) The total amount\\n\"\n@@ -947,7 +947,7 @@ UniValue gettxoutsbyaddress(const JSONRPCRequest& request)\n             \"\\nReturns a list of unspent transaction outputs by address (or script).\\n\"\n             \"The list is ordered by confirmations in descending order.\\n\"\n             \"Note that passing minconf=0 will include the mempool.\\n\"\n-            \"\\nTo use this function, you must start bitcoin with the -txoutsbyaddressindex parameter.\\n\"\n+            \"\\nTo use this function, you must start bitcoin with the -txoutindex parameter.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf          (numeric) Minimum confirmations\\n\"\n             \"2. \\\"addresses\\\"    (string) A json array of bitcoin addresses (or scripts)\\n\"\n@@ -991,8 +991,8 @@ UniValue gettxoutsbyaddress(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"gettxoutsbyaddress\", \"6, \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n         );\n \n-    if (!fTxOutsByAddressIndex)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"To use this function, you must start bitcoin with the -txoutsbyaddressindex parameter.\");\n+    if (!fTxOutIndex)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"To use this function, you must start bitcoin with the -txoutindex parameter.\");\n \n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VARR)(UniValue::VNUM)(UniValue::VNUM));\n "
      },
      {
        "sha": "5d1a3028dded0d97beac20ff0a921ef971607246",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efa276b55d958f642429bb3fe55115aedde770e7/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efa276b55d958f642429bb3fe55115aedde770e7/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=efa276b55d958f642429bb3fe55115aedde770e7",
        "patch": "@@ -53,8 +53,8 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n         txGrandChild[i].vout[0].nValue = 11000LL;\n     }\n \n-    bool fTxOutsByAddressIndex = false;\n-    CTxMemPool testPool(fTxOutsByAddressIndex);\n+    bool fTxOutIndex = false;\n+    CTxMemPool testPool(fTxOutIndex);\n \n     // Nothing in pool, remove should do nothing:\n     unsigned int poolSize = testPool.size();"
      },
      {
        "sha": "40dbaa56d5e54ffb988d1d0011cad2186b3d9a7d",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efa276b55d958f642429bb3fe55115aedde770e7/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efa276b55d958f642429bb3fe55115aedde770e7/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=efa276b55d958f642429bb3fe55115aedde770e7",
        "patch": "@@ -17,8 +17,8 @@ BOOST_FIXTURE_TEST_SUITE(policyestimator_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n {\n     CBlockPolicyEstimator feeEst;\n-    bool fTxOutsByAddressIndex = false;\n-    CTxMemPool mpool(fTxOutsByAddressIndex, &feeEst);\n+    bool fTxOutIndex = false;\n+    CTxMemPool mpool(fTxOutIndex, &feeEst);\n     TestMemPoolEntryHelper entry;\n     CAmount basefee(2000);\n     CAmount deltaFee(100);"
      },
      {
        "sha": "f00c5bd3e7d22e850ec839a84b9a705dbd7506ef",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efa276b55d958f642429bb3fe55115aedde770e7/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efa276b55d958f642429bb3fe55115aedde770e7/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=efa276b55d958f642429bb3fe55115aedde770e7",
        "patch": "@@ -331,8 +331,8 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n     assert(int(nSigOpCostWithAncestors) >= 0);\n }\n \n-CTxMemPool::CTxMemPool(const bool& _fTxOutsByAddressIndex, CBlockPolicyEstimator* estimator) :\n-    nTransactionsUpdated(0), fTxOutsByAddressIndex(_fTxOutsByAddressIndex), minerPolicyEstimator(estimator)\n+CTxMemPool::CTxMemPool(const bool& _fTxOutIndex, CBlockPolicyEstimator* estimator) :\n+    nTransactionsUpdated(0), fTxOutIndex(_fTxOutIndex), minerPolicyEstimator(estimator)\n {\n     _clear(); //lock free clear\n \n@@ -434,7 +434,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     vTxHashes.emplace_back(tx.GetWitnessHash(), newit);\n     newit->vTxHashesIdx = vTxHashes.size() - 1;\n \n-    if (fTxOutsByAddressIndex)\n+    if (fTxOutIndex)\n         for (unsigned int i = 0; i < tx.vout.size(); i++)\n             if (!tx.vout[i].IsNull() && !tx.vout[i].scriptPubKey.IsUnspendable())\n                 mapCoinsByScript[CCoinsViewByScript::getKey(tx.vout[i].scriptPubKey)].setCoins.insert(COutPoint(hash, (uint32_t)i));\n@@ -502,7 +502,7 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n     {\n         LOCK(cs);\n \n-        if (fTxOutsByAddressIndex)\n+        if (fTxOutIndex)\n         {\n             for (unsigned int i = 0; i < origTx.vout.size(); i++)\n             {"
      },
      {
        "sha": "507c72967e52d21164fd9c8f0c722d7b94d7a41c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efa276b55d958f642429bb3fe55115aedde770e7/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efa276b55d958f642429bb3fe55115aedde770e7/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=efa276b55d958f642429bb3fe55115aedde770e7",
        "patch": "@@ -416,8 +416,8 @@ class CTxMemPool\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n     uint64_t totalTxSize;      //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n-    const bool& fTxOutsByAddressIndex;\n-    CCoinsMapByScript mapCoinsByScript; // only used if -txoutsbyaddressindex\n+    const bool& fTxOutIndex;\n+    CCoinsMapByScript mapCoinsByScript; // only used if -txoutindex\n     uint64_t cachedInnerUsage; //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n     mutable int64_t lastRollingFeeUpdate;\n@@ -499,7 +499,7 @@ class CTxMemPool\n \n     /** Create a new CTxMemPool.\n      */\n-    CTxMemPool(const bool& _fTxOutsByAddressIndex, CBlockPolicyEstimator* estimator = nullptr);\n+    CTxMemPool(const bool& _fTxOutIndex, CBlockPolicyEstimator* estimator = nullptr);\n \n     /**\n      * If sanity-checking is turned on, check makes sure the pool is"
      },
      {
        "sha": "c07b1869c412dec066d44bfb2da6041476810b3f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efa276b55d958f642429bb3fe55115aedde770e7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efa276b55d958f642429bb3fe55115aedde770e7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=efa276b55d958f642429bb3fe55115aedde770e7",
        "patch": "@@ -65,7 +65,7 @@ int nScriptCheckThreads = 0;\n std::atomic_bool fImporting(false);\n bool fReindex = false;\n bool fTxIndex = false;\n-bool fTxOutsByAddressIndex = false;\n+bool fTxOutIndex = false;\n bool fHavePruned = false;\n bool fPruneMode = false;\n bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n@@ -83,7 +83,7 @@ CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n \n CBlockPolicyEstimator feeEstimator;\n-CTxMemPool mempool(fTxOutsByAddressIndex, &feeEstimator);\n+CTxMemPool mempool(fTxOutIndex, &feeEstimator);\n \n static void CheckBlockIndex(const Consensus::Params& consensusParams);\n \n@@ -2030,7 +2030,7 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode, int n\n         // Flush the chainstate (which may refer to block index entries).\n         if (!pcoinsTip->Flush())\n             return AbortNode(state, \"Failed to write to coin database\");\n-        if (fTxOutsByAddressIndex) {\n+        if (fTxOutIndex) {\n             if (!pcoinsByScript->Flush())\n                 return AbortNode(state, \"Failed to write to coin database\");\n         }\n@@ -2072,7 +2072,7 @@ void static UpdateAddressIndex(const CTxOut& txout, const COutPoint& outpoint, b\n \n void static UpdateAddressIndex(const CBlock& block, CBlockUndo& blockundo, bool fConnect)\n {\n-    if (!fTxOutsByAddressIndex)\n+    if (!fTxOutIndex)\n         return;\n \n     assert(block.vtx.size() > 0);"
      },
      {
        "sha": "990388af95bef543e0a6d18ff21dd752a7eb42bf",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efa276b55d958f642429bb3fe55115aedde770e7/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efa276b55d958f642429bb3fe55115aedde770e7/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=efa276b55d958f642429bb3fe55115aedde770e7",
        "patch": "@@ -168,7 +168,7 @@ extern std::atomic_bool fImporting;\n extern bool fReindex;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n-extern bool fTxOutsByAddressIndex;\n+extern bool fTxOutIndex;\n extern bool fIsBareMultisigStd;\n extern bool fRequireStandard;\n extern bool fCheckBlockIndex;\n@@ -536,7 +536,7 @@ extern CChain chainActive;\n /** Global variable that points to the active CCoinsView (protected by cs_main) */\n extern CCoinsViewCache *pcoinsTip;\n \n-/** Only used if -txoutsbyaddressindex */\n+/** Only used if -txoutindex */\n extern CCoinsViewByScriptDB *pcoinsByScriptDB;\n extern CCoinsViewByScript *pcoinsByScript;\n "
      },
      {
        "sha": "a714db5d9283dcced0d6a46c0d321b8f819fd73f",
        "filename": "test/functional/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efa276b55d958f642429bb3fe55115aedde770e7/test/functional/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efa276b55d958f642429bb3fe55115aedde770e7/test/functional/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rest.py?ref=efa276b55d958f642429bb3fe55115aedde770e7",
        "patch": "@@ -47,7 +47,7 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        self.extra_args = [[\"-txoutsbyaddressindex\"]] * 3\n+        self.extra_args = [[\"-txoutindex\"]] * 3\n \n     def setup_network(self, split=False):\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)"
      }
    ]
  },
  {
    "sha": "30460d5847910edd4134294121afeb7571e3da9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDQ2MGQ1ODQ3OTEwZWRkNDEzNDI5NDEyMWFmZWI3NTcxZTNkYTlk",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2016-10-01T00:26:57Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-04-27T23:21:37Z"
      },
      "message": "set executable bit",
      "tree": {
        "sha": "4cbefa0694d69378d9c452434114ee43aaf5a496",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cbefa0694d69378d9c452434114ee43aaf5a496"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30460d5847910edd4134294121afeb7571e3da9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30460d5847910edd4134294121afeb7571e3da9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30460d5847910edd4134294121afeb7571e3da9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30460d5847910edd4134294121afeb7571e3da9d/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efa276b55d958f642429bb3fe55115aedde770e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efa276b55d958f642429bb3fe55115aedde770e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efa276b55d958f642429bb3fe55115aedde770e7"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": null,
        "filename": "qa/rpc-tests/txoutsbyaddress.py",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30460d5847910edd4134294121afeb7571e3da9d/qa/rpc-tests/txoutsbyaddress.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30460d5847910edd4134294121afeb7571e3da9d/qa/rpc-tests/txoutsbyaddress.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txoutsbyaddress.py?ref=30460d5847910edd4134294121afeb7571e3da9d"
      }
    ]
  },
  {
    "sha": "6caf075e7e207997d9073db4f7829b0983b1b099",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2FmMDc1ZTdlMjA3OTk3ZDkwNzNkYjRmNzgyOWIwOTgzYjFiMDk5",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2016-10-01T06:14:03Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-04-27T23:21:37Z"
      },
      "message": "add doc for gettxoutsbyaddress REST endpoint",
      "tree": {
        "sha": "1c2608509266a85865f343d898c4902b969bc7ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c2608509266a85865f343d898c4902b969bc7ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6caf075e7e207997d9073db4f7829b0983b1b099",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6caf075e7e207997d9073db4f7829b0983b1b099",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6caf075e7e207997d9073db4f7829b0983b1b099",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6caf075e7e207997d9073db4f7829b0983b1b099/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30460d5847910edd4134294121afeb7571e3da9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30460d5847910edd4134294121afeb7571e3da9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30460d5847910edd4134294121afeb7571e3da9d"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 68,
      "deletions": 0
    },
    "files": [
      {
        "sha": "714151718770ba02e9041be1913a46d9cfa1f4c3",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 68,
        "deletions": 0,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6caf075e7e207997d9073db4f7829b0983b1b099/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6caf075e7e207997d9073db4f7829b0983b1b099/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=6caf075e7e207997d9073db4f7829b0983b1b099",
        "patch": "@@ -79,6 +79,74 @@ $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff76\n }\n ```\n \n+####Query UTXO set (by address/script)\n+`GET /rest/gettxoutsbyaddress/<checkmempool>/<address>/<address>/.../<address>.json`\n+\n+The gettxoutsbyaddress command allows querying of the UTXO set given a set of addresses (or script).\n+\n+To use this function, you must start bitcoin with the -txoutindex parameter.\n+\n+Output:\n+```\n+[                                 (array of json object)\n+  {\n+    \\\"confirmations\\\" : n,        (numeric) The number of confirmations\n+    \\\"txid\\\" : \\\"txid\\\",          (string)  The transaction id \n+    \\\"vout\\\" : n,                 (numeric) The vout value\n+    \\\"value\\\" : x.xxx,            (numeric) The transaction value in btc\n+    \\\"scriptPubKey\\\" : {          (json object)\n+       \\\"asm\\\" : \\\"code\\\",        (string) \n+       \\\"hex\\\" : \\\"hex\\\",         (string) \n+       \\\"reqSigs\\\" : n,           (numeric) Number of required signatures\n+       \\\"type\\\" : \\\"pubkeyhash\\\", (string) The type, eg pubkeyhash\n+       \\\"addresses\\\" : [          (array of string) array of bitcoin addresses\n+          \\\"bitcoinaddress\\\"      (string) bitcoin address\n+          ,...\n+       ]\n+    },\n+    \\\"version\\\" : n,              (numeric) The transaction version\n+    \\\"coinbase\\\" : true|false     (boolean) Coinbase or not\n+    \\\"bestblockhash\\\" : \\\"hash\\\", (string)  The block hash of the best block\n+    \\\"bestblockheight\\\" : n,      (numeric) The block height of the best block\n+    \\\"bestblocktime\\\" : n,        (numeric) The block time of the best block\n+    \\\"blockhash\\\" : \\\"hash\\\",     (string)  The block hash of the block the tx is in (only if confirmations > 0)\n+    \\\"blockheight\\\" : n,          (numeric) The block height of the block the tx is in (only if confirmations > 0)\n+    \\\"blocktime\\\" : ttt,          (numeric) The block time in seconds since 1.1.1970 GMT (only if confirmations > 0)\n+  }\n+  ,...\n+]\n+```\n+\n+Example:\n+```\n+$ curl localhost:18332/rest/gettxoutsbyaddress/checkmempool/mvkA8gYrKUmXFiuFpoxNGjMjYcV9oCkwGV.json 2>/dev/null | json_pp\n+[\n+   {\n+      \"confirmations\" : 721918,\n+      \"txid\" : \"75bc54c673ed535db361a6e89c08bf7256d1378e2c645229d469d41042356e54\",\n+      \"vout\" : 0,\n+      \"value\" : 0.001,\n+      \"scriptPubKey\" : {\n+         \"asm\" : \"OP_DUP OP_HASH160 a7092d2dc8778b56d4c352697081c687b451ab6d OP_EQUALVERIFY OP_CHECKSIG\",\n+         \"hex\" : \"76a914a7092d2dc8778b56d4c352697081c687b451ab6d88ac\",\n+         \"reqSigs\" : 1,\n+         \"type\" : \"pubkeyhash\",\n+         \"addresses\" : [\n+            \"mvkA8gYrKUmXFiuFpoxNGjMjYcV9oCkwGV\"\n+         ]\n+      },\n+      \"version\" : 1,\n+      \"coinbase\" : false,\n+      \"bestblockhash\" : \"00000000007872ee19923a5604d86a6c9bfa3041c417a7ecf60dc034387b173f\",\n+      \"blockheight\" : 244755,\n+      \"bestblocktime\" : 1475309084,\n+      \"blockhash\" : \"000000000001c163caa76dbc16c7b383fb10257829b3617c5a1ffb91ea3824db\",\n+      \"bestblockheight\" : 966672,\n+      \"blocktime\" : 1400786412,\n+   }\n+]\n+```\n+\n ####Memory pool\n `GET /rest/mempool/info.json`\n "
      }
    ]
  },
  {
    "sha": "cb43d8a924448c4097cbbc3242ca91134f884d47",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjQzZDhhOTI0NDQ4YzQwOTdjYmJjMzI0MmNhOTExMzRmODg0ZDQ3",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2017-01-05T22:31:02Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-04-27T23:21:37Z"
      },
      "message": "fix up a change missed by the rebase",
      "tree": {
        "sha": "ac3a90ed4f246fb483d953e6b9eb22ef76411c79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac3a90ed4f246fb483d953e6b9eb22ef76411c79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb43d8a924448c4097cbbc3242ca91134f884d47",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb43d8a924448c4097cbbc3242ca91134f884d47",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb43d8a924448c4097cbbc3242ca91134f884d47",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb43d8a924448c4097cbbc3242ca91134f884d47/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6caf075e7e207997d9073db4f7829b0983b1b099",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6caf075e7e207997d9073db4f7829b0983b1b099",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6caf075e7e207997d9073db4f7829b0983b1b099"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "781f4e1e25c4e4707b37656099c495f89565b916",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb43d8a924448c4097cbbc3242ca91134f884d47/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb43d8a924448c4097cbbc3242ca91134f884d47/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cb43d8a924448c4097cbbc3242ca91134f884d47",
        "patch": "@@ -1439,6 +1439,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 UnloadBlockIndex();\n                 delete pcoinsTip;\n                 delete pcoinsdbview;\n+                delete pcoinsByScriptDB;\n                 delete pcoinscatcher;\n                 delete pblocktree;\n "
      },
      {
        "sha": "0c49ecc2670bb0c384fa0c5515a0edc39ad742fc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb43d8a924448c4097cbbc3242ca91134f884d47/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb43d8a924448c4097cbbc3242ca91134f884d47/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=cb43d8a924448c4097cbbc3242ca91134f884d47",
        "patch": "@@ -2075,6 +2075,7 @@ void static UpdateAddressIndex(const CBlock& block, CBlockUndo& blockundo, bool\n     if (!fTxOutIndex)\n         return;\n \n+    assert(&block != nullptr);\n     assert(block.vtx.size() > 0);\n     unsigned int i = 0;\n     if (!fConnect)\n@@ -2342,7 +2343,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n         LogPrint(BCLog::BENCH, \"  - Connect total: %.2fms [%.2fs]\\n\", (nTime3 - nTime2) * 0.001, nTimeConnectTotal * 0.000001);\n         bool flushed = view.Flush();\n         assert(flushed);\n-        UpdateAddressIndex(*pblock, blockundo, true);\n+        UpdateAddressIndex(blockConnecting, blockundo, true);\n     }\n     int64_t nTime4 = GetTimeMicros(); nTimeFlush += nTime4 - nTime3;\n     LogPrint(BCLog::BENCH, \"  - Flush: %.2fms [%.2fs]\\n\", (nTime4 - nTime3) * 0.001, nTimeFlush * 0.000001);"
      }
    ]
  },
  {
    "sha": "80bf01465aeba768e04410289f0985e098742992",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGJmMDE0NjVhZWJhNzY4ZTA0NDEwMjg5ZjA5ODVlMDk4NzQyOTky",
    "commit": {
      "author": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-02-20T01:45:41Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-04-27T23:21:37Z"
      },
      "message": "Fixup to remove errors and warnings",
      "tree": {
        "sha": "ce00abec72bce4f33bbd12ead0813f57bbb5bf53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce00abec72bce4f33bbd12ead0813f57bbb5bf53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80bf01465aeba768e04410289f0985e098742992",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80bf01465aeba768e04410289f0985e098742992",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80bf01465aeba768e04410289f0985e098742992",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80bf01465aeba768e04410289f0985e098742992/comments",
    "author": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb43d8a924448c4097cbbc3242ca91134f884d47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb43d8a924448c4097cbbc3242ca91134f884d47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb43d8a924448c4097cbbc3242ca91134f884d47"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 7,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ac82a0ef77546ef289c96083d34dfb9faaa4fb16",
        "filename": "src/coinsbyscript.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80bf01465aeba768e04410289f0985e098742992/src/coinsbyscript.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80bf01465aeba768e04410289f0985e098742992/src/coinsbyscript.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinsbyscript.cpp?ref=80bf01465aeba768e04410289f0985e098742992",
        "patch": "@@ -177,8 +177,8 @@ bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n             {\n                 i += v.size();\n                 CDBBatch batch(db);\n-                BOOST_FOREACH(const uint160& hash, v)\n-                    batch.Erase(make_pair(DB_COINS_BYSCRIPT, hash)); // delete\n+                BOOST_FOREACH(const uint160& _hash, v)\n+                    batch.Erase(make_pair(DB_COINS_BYSCRIPT, _hash)); // delete\n                 db.WriteBatch(batch);\n                 v.clear();\n             }"
      },
      {
        "sha": "a34d5f93731ba395a5dbe39f4ed0f727a889323d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80bf01465aeba768e04410289f0985e098742992/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80bf01465aeba768e04410289f0985e098742992/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=80bf01465aeba768e04410289f0985e098742992",
        "patch": "@@ -1499,7 +1499,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true,  {} },\n     { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true,  {\"verbose\"} },\n     { \"blockchain\",         \"gettxout\",               &gettxout,               true,  {\"txid\",\"n\",\"include_mempool\"} },\n-    { \"blockchain\",         \"gettxoutsbyaddress\",     &gettxoutsbyaddress,     true  },\n+    { \"blockchain\",         \"gettxoutsbyaddress\",     &gettxoutsbyaddress,     true,  {\"minconf\", \"addresses\", \"count\", \"from\"} },\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,  {} },\n     { \"blockchain\",         \"pruneblockchain\",        &pruneblockchain,        true,  {\"height\"} },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            true,  {\"checklevel\",\"nblocks\"} },"
      },
      {
        "sha": "28e06c3b289d513c0fa98c2e8483360532b372b3",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80bf01465aeba768e04410289f0985e098742992/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80bf01465aeba768e04410289f0985e098742992/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=80bf01465aeba768e04410289f0985e098742992",
        "patch": "@@ -91,10 +91,10 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"gettxout\", 1, \"n\" },\n     { \"gettxout\", 2, \"include_mempool\" },\n     { \"gettxoutproof\", 0, \"txids\" },\n-    { \"gettxoutsbyaddress\", 0 },\n-    { \"gettxoutsbyaddress\", 1 },\n-    { \"gettxoutsbyaddress\", 2 },\n-    { \"gettxoutsbyaddress\", 3 },\n+    { \"gettxoutsbyaddress\", 0, \"minconf\" },\n+    { \"gettxoutsbyaddress\", 1, \"addresses\" },\n+    { \"gettxoutsbyaddress\", 2, \"count\" },\n+    { \"gettxoutsbyaddress\", 3, \"from\" },\n     { \"lockunspent\", 0, \"unlock\" },\n     { \"lockunspent\", 1, \"transactions\" },\n     { \"importprivkey\", 2, \"rescan\" },"
      },
      {
        "sha": "4dc00d3d9f1b066eb010d84205182761d8d5fbc4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80bf01465aeba768e04410289f0985e098742992/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80bf01465aeba768e04410289f0985e098742992/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=80bf01465aeba768e04410289f0985e098742992",
        "patch": "@@ -2075,7 +2075,6 @@ void static UpdateAddressIndex(const CBlock& block, CBlockUndo& blockundo, bool\n     if (!fTxOutIndex)\n         return;\n \n-    assert(&block != nullptr);\n     assert(block.vtx.size() > 0);\n     unsigned int i = 0;\n     if (!fConnect)"
      }
    ]
  },
  {
    "sha": "82a9ea7c5bc8e22a3137bd39f663a82ac645d70d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmE5ZWE3YzViYzhlMjJhMzEzN2JkMzlmNjYzYTgyYWM2NDVkNzBk",
    "commit": {
      "author": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-03-18T18:43:57Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-04-27T23:21:37Z"
      },
      "message": "Replace PR\u2019s remaining Boost calls with C++11",
      "tree": {
        "sha": "8659cf0f6caa7ec1a0eba544ba625144fe7058ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8659cf0f6caa7ec1a0eba544ba625144fe7058ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82a9ea7c5bc8e22a3137bd39f663a82ac645d70d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82a9ea7c5bc8e22a3137bd39f663a82ac645d70d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82a9ea7c5bc8e22a3137bd39f663a82ac645d70d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82a9ea7c5bc8e22a3137bd39f663a82ac645d70d/comments",
    "author": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80bf01465aeba768e04410289f0985e098742992",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80bf01465aeba768e04410289f0985e098742992",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80bf01465aeba768e04410289f0985e098742992"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "cc4062faf0517c62f759dfb7e3e297bb03161ef7",
        "filename": "src/coinsbyscript.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82a9ea7c5bc8e22a3137bd39f663a82ac645d70d/src/coinsbyscript.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82a9ea7c5bc8e22a3137bd39f663a82ac645d70d/src/coinsbyscript.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinsbyscript.cpp?ref=82a9ea7c5bc8e22a3137bd39f663a82ac645d70d",
        "patch": "@@ -177,8 +177,11 @@ bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n             {\n                 i += v.size();\n                 CDBBatch batch(db);\n-                BOOST_FOREACH(const uint160& _hash, v)\n+                for(auto& av: v)\n+                {\n+                    const uint160& _hash = av;\n                     batch.Erase(make_pair(DB_COINS_BYSCRIPT, _hash)); // delete\n+                }\n                 db.WriteBatch(batch);\n                 v.clear();\n             }\n@@ -192,8 +195,11 @@ bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n     {\n         i += v.size();\n         CDBBatch batch(db);\n-        BOOST_FOREACH(const uint160& hash, v)\n+        for(auto& av: v)\n+        {\n+            const uint160& hash = av;\n             batch.Erase(make_pair(DB_COINS_BYSCRIPT, hash)); // delete\n+        }\n         db.WriteBatch(batch);\n     }\n     if (i > 0)"
      },
      {
        "sha": "5b375e5adf253633d4ac721ea0709b9b15d522f5",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82a9ea7c5bc8e22a3137bd39f663a82ac645d70d/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82a9ea7c5bc8e22a3137bd39f663a82ac645d70d/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=82a9ea7c5bc8e22a3137bd39f663a82ac645d70d",
        "patch": "@@ -678,8 +678,9 @@ static bool rest_gettxoutsbyaddress(HTTPRequest* req, const std::string& strURIP\n     UniValue vObjects(UniValue::VARR);\n     std::vector<std::pair<int, unsigned int> > vSort;\n \n-    BOOST_FOREACH(const CScript &script, vScripts)\n+    for(auto& scriptObj: vScripts)\n     {\n+        const CScript& script = scriptObj;\n         CCoinsByScript coinsByScript;\n         pcoinsByScript->GetCoinsByScript(script, coinsByScript);\n "
      },
      {
        "sha": "9bd9292ca269545675a32bb09b45f7b58b7e4558",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82a9ea7c5bc8e22a3137bd39f663a82ac645d70d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82a9ea7c5bc8e22a3137bd39f663a82ac645d70d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=82a9ea7c5bc8e22a3137bd39f663a82ac645d70d",
        "patch": "@@ -367,8 +367,7 @@ void CTxMemPool::GetCoinsByScript(const CScript& script, CCoinsByScript& coinsBy\n     CCoinsMapByScript::const_iterator it = mapCoinsByScript.find(CCoinsViewByScript::getKey(script));\n     if (it != mapCoinsByScript.end())\n     {\n-        BOOST_FOREACH(const COutPoint &outpoint, it->second.setCoins)\n-            coinsByScript.setCoins.insert(outpoint);\n+        coinsByScript.setCoins.insert(it->second.setCoins.begin(), it->second.setCoins.end());\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "bd5c62976d06a91ff2db009eae43d12ece0f963b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDVjNjI5NzZkMDZhOTFmZjJkYjAwOWVhZTQzZDEyZWNlMGY5NjNi",
    "commit": {
      "author": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-03-22T01:39:23Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-04-27T23:21:37Z"
      },
      "message": "Fixup - Move file missed by a rebase",
      "tree": {
        "sha": "36d7248743eee1af53c32661e3720db73baa8124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36d7248743eee1af53c32661e3720db73baa8124"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd5c62976d06a91ff2db009eae43d12ece0f963b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd5c62976d06a91ff2db009eae43d12ece0f963b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd5c62976d06a91ff2db009eae43d12ece0f963b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd5c62976d06a91ff2db009eae43d12ece0f963b/comments",
    "author": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82a9ea7c5bc8e22a3137bd39f663a82ac645d70d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82a9ea7c5bc8e22a3137bd39f663a82ac645d70d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82a9ea7c5bc8e22a3137bd39f663a82ac645d70d"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "44969a812965ac11edf0da8f5659f57b594544a5",
        "filename": "test/functional/txoutsbyaddress.py",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd5c62976d06a91ff2db009eae43d12ece0f963b/test/functional/txoutsbyaddress.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd5c62976d06a91ff2db009eae43d12ece0f963b/test/functional/txoutsbyaddress.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txoutsbyaddress.py?ref=bd5c62976d06a91ff2db009eae43d12ece0f963b",
        "previous_filename": "qa/rpc-tests/txoutsbyaddress.py"
      }
    ]
  },
  {
    "sha": "77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2FhN2UwOTFkZmMyYmI1ZDJkN2YyZTk1ZGYzOGI2MzdjYWJmNmFl",
    "commit": {
      "author": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-03-23T00:40:49Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2017-04-27T23:23:16Z"
      },
      "message": "Code feedback cleanup\n\n- Switched getutxosbyaddress to getutxoindex, and altered the files as needed to reflect this change.\n- Switched CCoinsMapByScript key from uint160 to CScriptID.\n- Various C++11-related changes.\n- Removed a try/catch case from CCoinsViewDB::CountCoins().\n- Changed a const ref in CTxMemPool to a const copy to prevent a possible subtle error.\n- Added a default value (false) for UTXO indexing under CTxMemPool.",
      "tree": {
        "sha": "093b435a5d9d182e6e9ef3c6dd7c422a9700c850",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/093b435a5d9d182e6e9ef3c6dd7c422a9700c850"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/comments",
    "author": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd5c62976d06a91ff2db009eae43d12ece0f963b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd5c62976d06a91ff2db009eae43d12ece0f963b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd5c62976d06a91ff2db009eae43d12ece0f963b"
      }
    ],
    "stats": {
      "total": 188,
      "additions": 90,
      "deletions": 98
    },
    "files": [
      {
        "sha": "d960d8836dae75a42849446cd1c0ad9afac71f3e",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -80,9 +80,9 @@ $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff76\n ```\n \n ####Query UTXO set (by address/script)\n-`GET /rest/gettxoutsbyaddress/<checkmempool>/<address>/<address>/.../<address>.json`\n+`GET /rest/getutxoindex/<checkmempool>/<address>/<address>/.../<address>.json`\n \n-The gettxoutsbyaddress command allows querying of the UTXO set given a set of addresses (or script).\n+The getutxoindex command allows querying of the UTXO set given a set of addresses (or script).\n \n To use this function, you must start bitcoin with the -txoutindex parameter.\n \n@@ -119,7 +119,7 @@ Output:\n \n Example:\n ```\n-$ curl localhost:18332/rest/gettxoutsbyaddress/checkmempool/mvkA8gYrKUmXFiuFpoxNGjMjYcV9oCkwGV.json 2>/dev/null | json_pp\n+$ curl localhost:18332/rest/getutxoindex/checkmempool/mvkA8gYrKUmXFiuFpoxNGjMjYcV9oCkwGV.json 2>/dev/null | json_pp\n [\n    {\n       \"confirmations\" : 721918,"
      },
      {
        "sha": "78d0fe51b5b43a08266586d5548a4dc3ac6078e9",
        "filename": "src/coinsbyscript.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 21,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/coinsbyscript.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/coinsbyscript.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinsbyscript.cpp?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -20,32 +20,32 @@ static const char DB_BEST_BLOCK = 'B';\n CCoinsViewByScript::CCoinsViewByScript(CCoinsViewByScriptDB* viewIn) : base(viewIn) { }\n \n bool CCoinsViewByScript::GetCoinsByScript(const CScript &script, CCoinsByScript &coins) {\n-    const uint160 key = CCoinsViewByScript::getKey(script);\n+    const CScriptID key = CScriptID(script);\n     if (cacheCoinsByScript.count(key)) {\n         coins = cacheCoinsByScript[key];\n         return true;\n     }\n-    if (base->GetCoinsByHashOfScript(key, coins)) {\n+    if (base->GetCoinsByScriptID(key, coins)) {\n         cacheCoinsByScript[key] = coins;\n         return true;\n     }\n     return false;\n }\n \n CCoinsMapByScript::iterator CCoinsViewByScript::FetchCoinsByScript(const CScript &script, bool fRequireExisting) {\n-    const uint160 key = CCoinsViewByScript::getKey(script);\n+    const CScriptID key = CScriptID(script);\n     CCoinsMapByScript::iterator it = cacheCoinsByScript.find(key);\n     if (it != cacheCoinsByScript.end())\n         return it;\n+\n     CCoinsByScript tmp;\n-    if (!base->GetCoinsByHashOfScript(key, tmp))\n+    if (!base->GetCoinsByScriptID(key, tmp))\n     {\n         if (fRequireExisting)\n             return cacheCoinsByScript.end();\n     }\n-    CCoinsMapByScript::iterator ret = cacheCoinsByScript.insert(it, std::make_pair(key, CCoinsByScript()));\n-    tmp.swap(ret->second);\n-    return ret;\n+\n+    return cacheCoinsByScript.emplace_hint(it, key, tmp);\n }\n \n CCoinsByScript &CCoinsViewByScript::GetCoinsByScript(const CScript &script, bool fRequireExisting) {\n@@ -54,10 +54,6 @@ CCoinsByScript &CCoinsViewByScript::GetCoinsByScript(const CScript &script, bool\n     return it->second;\n }\n \n-uint160 CCoinsViewByScript::getKey(const CScript &script) {\n-    return Hash160(script);\n-}\n-\n uint256 CCoinsViewByScript::GetBestBlock() const {\n     return hashBlock;\n }\n@@ -75,8 +71,8 @@ CCoinsViewByScriptDB::CCoinsViewByScriptDB(size_t nCacheSize, bool fMemory, bool\n {\n }\n \n-bool CCoinsViewByScriptDB::GetCoinsByHashOfScript(const uint160 &hash, CCoinsByScript &coins) const {\n-    return db.Read(make_pair(DB_COINS_BYSCRIPT, hash), coins);\n+bool CCoinsViewByScriptDB::GetCoinsByScriptID(const CScriptID &scriptID, CCoinsByScript &coins) const {\n+    return db.Read(make_pair(DB_COINS_BYSCRIPT, scriptID), coins);\n }\n \n bool CCoinsViewByScriptDB::BatchWrite(CCoinsViewByScript* pcoinsViewByScriptIn, const uint256 &hashBlock) {\n@@ -96,7 +92,7 @@ bool CCoinsViewByScriptDB::BatchWrite(CCoinsViewByScript* pcoinsViewByScriptIn,\n     if (!hashBlock.IsNull())\n         batch.Write(DB_BEST_BLOCK, hashBlock);\n \n-    LogPrint(BCLog::COINDB, \"Committing %u coin address indexes to coin database...\\n\", (unsigned int)count);\n+    LogPrint(BCLog::COINDB, \"Committing %zu coin address indexes to coin database...\\n\", (unsigned int)count);\n     return db.WriteBatch(batch);\n }\n \n@@ -128,7 +124,7 @@ CCoinsViewByScriptDBCursor *CCoinsViewByScriptDB::Cursor() const\n     return i;\n }\n \n-bool CCoinsViewByScriptDBCursor::GetKey(uint160 &key) const\n+bool CCoinsViewByScriptDBCursor::GetKey(CScriptID &key) const\n {\n     // Return cached key\n     if (keyTmp.first == DB_COINS_BYSCRIPT) {\n@@ -164,12 +160,12 @@ bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n {\n     std::unique_ptr<CCoinsViewByScriptDBCursor> pcursor(Cursor());\n \n-    std::vector<uint160> v;\n+    std::vector<CScriptID> v;\n     int64_t i = 0;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         try {\n-            uint160 hash;\n+            CScriptID hash;\n             if (!pcursor->GetKey(hash))\n                 break;\n             v.push_back(hash);\n@@ -179,7 +175,7 @@ bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n                 CDBBatch batch(db);\n                 for(auto& av: v)\n                 {\n-                    const uint160& _hash = av;\n+                    const CScriptID& _hash = av;\n                     batch.Erase(make_pair(DB_COINS_BYSCRIPT, _hash)); // delete\n                 }\n                 db.WriteBatch(batch);\n@@ -197,7 +193,7 @@ bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n         CDBBatch batch(db);\n         for(auto& av: v)\n         {\n-            const uint160& hash = av;\n+            const CScriptID& hash = av;\n             batch.Erase(make_pair(DB_COINS_BYSCRIPT, hash)); // delete\n         }\n         db.WriteBatch(batch);\n@@ -235,11 +231,11 @@ bool CCoinsViewByScriptDB::GenerateAllCoinsByScript(CCoinsViewDB* coinsIn)\n                 if (coins.vout[j].IsNull() || coins.vout[j].scriptPubKey.IsUnspendable())\n                     continue;\n \n-                const uint160 key = CCoinsViewByScript::getKey(coins.vout[j].scriptPubKey);\n+                const CScriptID key = CScriptID(coins.vout[j].scriptPubKey);\n                 if (!mapCoinsByScript.count(key))\n                 {\n                     CCoinsByScript coinsByScript;\n-                    GetCoinsByHashOfScript(key, coinsByScript);\n+                    GetCoinsByScriptID(key, coinsByScript);\n                     mapCoinsByScript.insert(make_pair(key, coinsByScript));\n                 }\n                 mapCoinsByScript[key].setCoins.insert(COutPoint(txhash, (uint32_t)j));"
      },
      {
        "sha": "c9404e69665c593c233cc9d56592c3948623fae0",
        "filename": "src/coinsbyscript.h",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/coinsbyscript.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/coinsbyscript.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinsbyscript.h?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -10,6 +10,7 @@\n #include \"primitives/transaction.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n+#include \"script/standard.h\"\n \n class CCoinsViewDB;\n class CCoinsViewByScriptDB;\n@@ -39,7 +40,7 @@ class CCoinsByScript\n     }\n };\n \n-typedef std::map<uint160, CCoinsByScript> CCoinsMapByScript; // uint160 = hash of script\n+typedef std::map<CScriptID, CCoinsByScript> CCoinsMapByScript;\n \n /** Adds a memory cache for coins by address */\n class CCoinsViewByScript\n@@ -58,8 +59,6 @@ class CCoinsViewByScript\n     // Return a modifiable reference to a CCoinsByScript.\n     CCoinsByScript &GetCoinsByScript(const CScript &script, bool fRequireExisting = true);\n \n-    static uint160 getKey(const CScript &script); // we use the hash of the script as key in the database\n-\n     void SetBestBlock(const uint256 &hashBlock);\n     uint256 GetBestBlock() const;\n \n@@ -80,7 +79,7 @@ class CCoinsViewByScriptDBCursor\n public:\n     ~CCoinsViewByScriptDBCursor() {}\n \n-    bool GetKey(uint160 &key) const;\n+    bool GetKey(CScriptID &key) const;\n     bool GetValue(CCoinsByScript &coins) const;\n     unsigned int GetValueSize() const;\n \n@@ -92,7 +91,7 @@ class CCoinsViewByScriptDBCursor\n         pcursor(pcursorIn) {}\n     uint256 hashBlock;\n     std::unique_ptr<CDBIterator> pcursor;\n-    std::pair<char, uint160> keyTmp;\n+    std::pair<char, CScriptID> keyTmp;\n \n     friend class CCoinsViewByScriptDB;\n };\n@@ -105,7 +104,7 @@ class CCoinsViewByScriptDB\n public:\n     CCoinsViewByScriptDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n-    bool GetCoinsByHashOfScript(const uint160 &hash, CCoinsByScript &coins) const;\n+    bool GetCoinsByScriptID(const CScriptID &scriptID, CCoinsByScript &coins) const;\n     bool BatchWrite(CCoinsViewByScript* pcoinsViewByScriptIn, const uint256 &hashBlock);\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);"
      },
      {
        "sha": "82882bd0f84d97ff14abefa627a92eedc831b32b",
        "filename": "src/coinstats.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinstats.cpp?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -58,7 +58,7 @@ bool GetUTXOStats(CCoinsView *view, CCoinsViewByScriptDB *viewbyscriptdb, CCoins\n     std::unique_ptr<CCoinsViewByScriptDBCursor> pcursordb(viewbyscriptdb->Cursor());\n     while (pcursordb->Valid()) {\n         boost::this_thread::interruption_point();\n-        uint160 hash;\n+        CScriptID hash;\n         CCoinsByScript coinsByScript;\n         if (pcursordb->GetKey(hash) && pcursordb->GetValue(coinsByScript)) {\n             stats.nAddresses++;"
      },
      {
        "sha": "64e8beec7760eddb38c173cfba824271fc15edb9",
        "filename": "src/coinstats.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinstats.h?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -11,17 +11,17 @@\n \n struct CCoinsStats\n {\n-    int nHeight;\n+    int nHeight{};\n     uint256 hashBlock;\n-    uint64_t nTransactions;\n-    uint64_t nTransactionOutputs;\n-    uint64_t nAddresses;\n-    uint64_t nAddressesOutputs; // equal nTransactionOutputs (if addressindex is enabled)\n-    uint64_t nSerializedSize;\n+    uint64_t nTransactions{};\n+    uint64_t nTransactionOutputs{};\n+    uint64_t nAddresses{};\n+    uint64_t nAddressesOutputs{}; // equal nTransactionOutputs (if addressindex is enabled)\n+    uint64_t nSerializedSize{};\n     uint256 hashSerialized;\n-    CAmount nTotalAmount;\n+    CAmount nTotalAmount{};\n \n-    CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nAddresses(0), nAddressesOutputs(0), nSerializedSize(0), nTotalAmount(0) {}\n+    CCoinsStats() {}\n };\n \n bool GetUTXOStats(CCoinsView *view, CCoinsViewByScriptDB *viewbyscriptdb, CCoinsStats &stats);"
      },
      {
        "sha": "498ee3b75fcd89254ec0cd18cfe0f5c793650db7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -374,7 +374,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n     strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX));\n-    strUsage += HelpMessageOpt(\"-txoutindex\", strprintf(_(\"Maintain an address to unspent outputs index (rpc: gettxoutsbyaddress). The index is built on first use. (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-txoutindex\", strprintf(_(\"Maintain an address to unspent outputs index (rpc: getutxoindex). The index is built on first use. (default: %u)\"), 0));\n \n     strUsage += HelpMessageGroup(_(\"Connection options:\"));\n     strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open\"));"
      },
      {
        "sha": "16b89a854d6fc7d21c0c426f49d4cb2832003055",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -23,7 +23,7 @@\n #include <univalue.h>\n \n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n-static const size_t MAX_GETTXOUTSBYADDRESS_SCRIPTS = 15; //allow a max of 15 scripts to be queried at once\n+static const size_t MAX_GETUTXOINDEX_SCRIPTS = 15; //allow a max of 15 scripts to be queried at once\n \n enum RetFormat {\n     RF_UNDEF,\n@@ -601,7 +601,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n-static bool rest_gettxoutsbyaddress(HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_getutxoindex(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n@@ -633,7 +633,7 @@ static bool rest_gettxoutsbyaddress(HTTPRequest* req, const std::string& strURIP\n     if (uriParts.size() > 0)\n     {\n \n-        //inputs is sent over URI scheme (/rest/gettxoutsbyaddress/checkmempool/addr1/addr2/...)\n+        //inputs is sent over URI scheme (/rest/getutxoindex/checkmempool/addr1/addr2/...)\n         if (uriParts.size() > 0 && uriParts[0] == \"checkmempool\")\n             fCheckMemPool = true;\n \n@@ -671,8 +671,8 @@ static bool rest_gettxoutsbyaddress(HTTPRequest* req, const std::string& strURIP\n     }\n \n     // limit max scripts\n-    if (vScripts.size() > MAX_GETTXOUTSBYADDRESS_SCRIPTS)\n-        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Error: max scripts exceeded (max: %d, tried: %d)\", MAX_GETTXOUTSBYADDRESS_SCRIPTS, vScripts.size()));\n+    if (vScripts.size() > MAX_GETUTXOINDEX_SCRIPTS)\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Error: max scripts exceeded (max: %d, tried: %d)\", MAX_GETUTXOINDEX_SCRIPTS, vScripts.size()));\n \n     int nMinDepth = fCheckMemPool ? 0 : 1;\n     UniValue vObjects(UniValue::VARR);\n@@ -716,7 +716,7 @@ static const struct {\n       {\"/rest/mempool/contents\", rest_mempool_contents},\n       {\"/rest/headers/\", rest_headers},\n       {\"/rest/getutxos\", rest_getutxos},\n-      {\"/rest/gettxoutsbyaddress\", rest_gettxoutsbyaddress},\n+      {\"/rest/getutxoindex\", rest_getutxoindex},\n };\n \n bool StartREST()"
      },
      {
        "sha": "443f148e3f0e8a558aa2d265a36e46ce15101ac9",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -829,7 +829,7 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             \"  \\\"transactions\\\": n,      (numeric) The number of transactions\\n\"\n             \"  \\\"txouts\\\": n,            (numeric) The number of output transactions\\n\"\n             \"  \\\"addresses\\\": n,         (numeric) The number of addresses and scripts. Only if -txoutindex=1\\n\"\n-            \"  \\\"txoutsbyaddress\\\": n,   (numeric) The number of output transactions. Only if -txoutindex=1\\n\"\n+            \"  \\\"utxoindex\\\": n,   (numeric) The number of output transactions. Only if -txoutindex=1\\n\"\n             \"  \\\"bytes_serialized\\\": n,  (numeric) The serialized size\\n\"\n             \"  \\\"hash_serialized\\\": \\\"hash\\\",   (string) The serialized hash\\n\"\n             \"  \\\"total_amount\\\": x.xxx          (numeric) The total amount\\n\"\n@@ -849,7 +849,7 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n         ret.push_back(Pair(\"transactions\", (int64_t)stats.nTransactions));\n         ret.push_back(Pair(\"txouts\", (int64_t)stats.nTransactionOutputs));\n         ret.push_back(Pair(\"addresses\", (int64_t)stats.nAddresses));\n-        ret.push_back(Pair(\"txoutsbyaddress\", (int64_t)stats.nAddressesOutputs));\n+        ret.push_back(Pair(\"utxoindex\", (int64_t)stats.nAddressesOutputs));\n         ret.push_back(Pair(\"bytes_serialized\", (int64_t)stats.nSerializedSize));\n         ret.push_back(Pair(\"hash_serialized\", stats.hashSerialized.GetHex()));\n         ret.push_back(Pair(\"total_amount\", ValueFromAmount(stats.nTotalAmount)));\n@@ -939,11 +939,11 @@ UniValue gettxout(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue gettxoutsbyaddress(const JSONRPCRequest& request)\n+UniValue getutxoindex(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"gettxoutsbyaddress ( minconf [\\\"address\\\",...] count from )\\n\"\n+            \"getutxoindex ( minconf [\\\"address\\\",...] count from )\\n\"\n             \"\\nReturns a list of unspent transaction outputs by address (or script).\\n\"\n             \"The list is ordered by confirmations in descending order.\\n\"\n             \"Note that passing minconf=0 will include the mempool.\\n\"\n@@ -986,9 +986,9 @@ UniValue gettxoutsbyaddress(const JSONRPCRequest& request)\n             \"  ,...\\n\"\n             \"]\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"gettxoutsbyaddress\", \"6 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+            + HelpExampleCli(\"getutxoindex\", \"6 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n             + \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"gettxoutsbyaddress\", \"6, \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+            + HelpExampleRpc(\"getutxoindex\", \"6, \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n         );\n \n     if (!fTxOutIndex)\n@@ -1499,7 +1499,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true,  {} },\n     { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true,  {\"verbose\"} },\n     { \"blockchain\",         \"gettxout\",               &gettxout,               true,  {\"txid\",\"n\",\"include_mempool\"} },\n-    { \"blockchain\",         \"gettxoutsbyaddress\",     &gettxoutsbyaddress,     true,  {\"minconf\", \"addresses\", \"count\", \"from\"} },\n+    { \"blockchain\",         \"getutxoindex\",           &getutxoindex,           true,  {\"minconf\", \"addresses\", \"count\", \"from\"} },\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,  {} },\n     { \"blockchain\",         \"pruneblockchain\",        &pruneblockchain,        true,  {\"height\"} },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            true,  {\"checklevel\",\"nblocks\"} },"
      },
      {
        "sha": "8c32dfb55408b9f16a59b115b5ae233572e67d38",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -91,10 +91,10 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"gettxout\", 1, \"n\" },\n     { \"gettxout\", 2, \"include_mempool\" },\n     { \"gettxoutproof\", 0, \"txids\" },\n-    { \"gettxoutsbyaddress\", 0, \"minconf\" },\n-    { \"gettxoutsbyaddress\", 1, \"addresses\" },\n-    { \"gettxoutsbyaddress\", 2, \"count\" },\n-    { \"gettxoutsbyaddress\", 3, \"from\" },\n+    { \"getutxoindex\", 0, \"minconf\" },\n+    { \"getutxoindex\", 1, \"addresses\" },\n+    { \"getutxoindex\", 2, \"count\" },\n+    { \"getutxoindex\", 3, \"from\" },\n     { \"lockunspent\", 0, \"unlock\" },\n     { \"lockunspent\", 1, \"transactions\" },\n     { \"importprivkey\", 2, \"rescan\" },"
      },
      {
        "sha": "e802d89f534bd48ed0bbac2fbcee84597a31068c",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -53,8 +53,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n         txGrandChild[i].vout[0].nValue = 11000LL;\n     }\n \n-    bool fTxOutIndex = false;\n-    CTxMemPool testPool(fTxOutIndex);\n+    CTxMemPool testPool(false);\n \n     // Nothing in pool, remove should do nothing:\n     unsigned int poolSize = testPool.size();"
      },
      {
        "sha": "72698aff37bcba816165a445ca019ad1c11b965e",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -143,12 +143,8 @@ int64_t CCoinsViewDB::CountCoins() const\n     int64_t i = 0;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n-        try {\n-            i++;\n-            pcursor->Next();\n-        } catch (std::exception &e) {\n-            return 0;\n-        }\n+        i++;\n+        pcursor->Next();\n     }\n     return i;\n }"
      },
      {
        "sha": "583326ff03865a1d16cb09c001929daa4f35b098",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -332,7 +332,7 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n }\n \n CTxMemPool::CTxMemPool(const bool& _fTxOutIndex, CBlockPolicyEstimator* estimator) :\n-    nTransactionsUpdated(0), fTxOutIndex(_fTxOutIndex), minerPolicyEstimator(estimator)\n+    nTransactionsUpdated(0), minerPolicyEstimator(estimator), fTxOutIndex(_fTxOutIndex)\n {\n     _clear(); //lock free clear\n \n@@ -364,7 +364,7 @@ unsigned int CTxMemPool::GetTransactionsUpdated() const\n void CTxMemPool::GetCoinsByScript(const CScript& script, CCoinsByScript& coinsByScript) const\n {\n     LOCK(cs);\n-    CCoinsMapByScript::const_iterator it = mapCoinsByScript.find(CCoinsViewByScript::getKey(script));\n+    CCoinsMapByScript::const_iterator it = mapCoinsByScript.find(CScriptID(script));\n     if (it != mapCoinsByScript.end())\n     {\n         coinsByScript.setCoins.insert(it->second.setCoins.begin(), it->second.setCoins.end());\n@@ -436,7 +436,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     if (fTxOutIndex)\n         for (unsigned int i = 0; i < tx.vout.size(); i++)\n             if (!tx.vout[i].IsNull() && !tx.vout[i].scriptPubKey.IsUnspendable())\n-                mapCoinsByScript[CCoinsViewByScript::getKey(tx.vout[i].scriptPubKey)].setCoins.insert(COutPoint(hash, (uint32_t)i));\n+                mapCoinsByScript[CScriptID(tx.vout[i].scriptPubKey)].setCoins.insert(COutPoint(hash, (uint32_t)i));\n \n     return true;\n }\n@@ -508,7 +508,7 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n                 if (origTx.vout[i].IsNull() || origTx.vout[i].scriptPubKey.IsUnspendable())\n                     continue;\n \n-                CCoinsMapByScript::iterator it = mapCoinsByScript.find(CCoinsViewByScript::getKey(origTx.vout[i].scriptPubKey));\n+                CCoinsMapByScript::iterator it = mapCoinsByScript.find(CScriptID(origTx.vout[i].scriptPubKey));\n                 if (it != mapCoinsByScript.end())\n                 {\n                     it->second.setCoins.erase(COutPoint(origTx.GetHash(), (uint32_t)i));"
      },
      {
        "sha": "3a3ec9005fc26670f782f1e743bfa3fca1f2e8cb",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -416,7 +416,7 @@ class CTxMemPool\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n     uint64_t totalTxSize;      //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n-    const bool& fTxOutIndex;\n+    const bool fTxOutIndex;\n     CCoinsMapByScript mapCoinsByScript; // only used if -txoutindex\n     uint64_t cachedInnerUsage; //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n "
      },
      {
        "sha": "47e4cfcac72cd9f0d6e1be5e0bac46c42ee381cc",
        "filename": "test/functional/rest.py",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/test/functional/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/test/functional/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rest.py?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -203,11 +203,11 @@ def run_test(self):\n         self.sync_all()\n \n \n-        ##############################################\n-        # GETTXOUTSBYADDRESS: query an unspent txout #\n-        ##############################################\n+        ########################################\n+        # GETUTXOINDEX: query an unspent txout #\n+        ########################################\n         json_request = '/checkmempool/'+address\n-        json_string = http_get_call(url.hostname, url.port, '/rest/gettxoutsbyaddress'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxoindex'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n \n         #make sure there is just one txout\n@@ -220,11 +220,11 @@ def run_test(self):\n         assert_equal(txout['value'], 0.1)\n \n \n-        #####################################################\n-        # GETTXOUTSBYADDRESS: query multiple unspent txouts #\n-        #####################################################\n+        ###############################################\n+        # GETUTXOINDEX: query multiple unspent txouts #\n+        ###############################################\n         json_request = '/checkmempool/'+address+'/'+address2\n-        json_string = http_get_call(url.hostname, url.port, '/rest/gettxoutsbyaddress'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxoindex'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n \n         #make sure there are two txouts\n@@ -239,45 +239,45 @@ def run_test(self):\n         assert_equal(txout2['value'], 0.1)\n \n \n-        ############################################\n-        # GETTXOUTSBYADDRESS: query unseen address #\n-        ############################################\n+        ######################################\n+        # GETUTXOINDEX: query unseen address #\n+        ######################################\n \n         json_request = '/checkmempool/'+self.nodes[0].getnewaddress()\n-        json_string = http_get_call(url.hostname, url.port, '/rest/gettxoutsbyaddress'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxoindex'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n \n         #make sure there are no txouts (brand new address)\n         assert_equal(len(json_obj), 0) \n \n \n-        ########################################\n-        # GETTXOUTSBYADDRESS: invalid requests #\n-        ########################################\n+        ##################################\n+        # GETUTXOINDEX: invalid requests #\n+        ##################################\n \n \n         #do some invalid requests\n         json_request = '{\"checkmempool'\n-        response = http_post_call(url.hostname, url.port, '/rest/gettxoutsbyaddress'+self.FORMAT_SEPARATOR+'json', json_request, True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxoindex'+self.FORMAT_SEPARATOR+'json', json_request, True)\n         assert_equal(response.status, 400) #must be a 400 because we send a invalid json request\n \n         json_request = '/checkmempool/xxxx'\n-        response = http_post_call(url.hostname, url.port, '/rest/gettxoutsbyaddress'+self.FORMAT_SEPARATOR+'json', json_request, True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxoindex'+self.FORMAT_SEPARATOR+'json', json_request, True)\n         assert_equal(response.status, 400) #must be a 400 because we send a invalid json request\n \n         #test limits\n         json_request = '/checkmempool/'\n         for x in range(0, 20):\n             json_request += address+'/'\n         json_request = json_request.rstrip(\"/\")\n-        response = http_post_call(url.hostname, url.port, '/rest/gettxoutsbyaddress'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxoindex'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n         assert_equal(response.status, 400) #must be a 400 because we exceeding the limits\n \n         json_request = '/checkmempool/'\n         for x in range(0, 15):\n             json_request += address+'/'\n         json_request = json_request.rstrip(\"/\")\n-        response = http_post_call(url.hostname, url.port, '/rest/gettxoutsbyaddress'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxoindex'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n         assert_equal(response.status, 200) #must be a 200 because we are within the limits\n \n "
      },
      {
        "sha": "aac7a6a58a68e30c40dda643f066372868ae90e2",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -110,7 +110,7 @@\n     'listsinceblock.py',\n     'p2p-leaktests.py',\n     'import-abort-rescan.py',\n-    'txoutsbyaddress.py',\n+    'utxoindex.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      },
      {
        "sha": "7f0d17e5a51f62d7b914690c8560c81880c4331d",
        "filename": "test/functional/utxoindex.py",
        "status": "renamed",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/test/functional/utxoindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae/test/functional/utxoindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/utxoindex.py?ref=77aa7e091dfc2bb5d2d7f2e95df38b637cabf6ae",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.util import *\n \n \n-class TxOutsByAddressTest(BitcoinTestFramework):\n+class UTXOIndexTest(BitcoinTestFramework):\n     \"\"\"Tests -txoutindex\"\"\"\n \n     def __init__(self):\n@@ -43,12 +43,14 @@ def run_test(self):\n         self.sync_all()\n         assert_equal(self.nodes[0].getbalance(), 5090)\n         assert_equal(self.nodes[1].getbalance(), 10)\n-        txouts = self.nodes[0].gettxoutsbyaddress(1, (address,))\n+        txouts = self.nodes[0].getutxoindex(1, (address,))\n         txid = txouts[0][\"txid\"]\n         assert_is_hash_string(txid)\n         assert_equal(txid, txid1)\n \n-        # stop node 2\n+        # Stop node 2. We want to restart it later and orphan a node 1 block in\n+        # order to test txoutindex handling the reorg. In other words, node 2 is\n+        # stopped so that it won't build on a node 1 block.\n         stop_node(self.nodes[2], 2)\n         self.nodes.pop()\n \n@@ -60,9 +62,9 @@ def run_test(self):\n         self.nodes[1].generate(1)\n         self.sync_all()\n         assert_equal(self.nodes[0].getbalance(), 5145)\n-        txouts = self.nodes[0].gettxoutsbyaddress(1, (address,))\n+        txouts = self.nodes[0].getutxoindex(1, (address,))\n         assert_equal(txouts, [])\n-        txouts = self.nodes[0].gettxoutsbyaddress(1, (address2,))\n+        txouts = self.nodes[0].getutxoindex(1, (address2,))\n         txid = txouts[0][\"txid\"]\n         assert_is_hash_string(txid)\n         assert_equal(txid, txid2)\n@@ -81,13 +83,13 @@ def run_test(self):\n         # - check if txout from tx1 is there again\n         # - check if txout from tx2 is gone\n         assert_equal(self.nodes[0].getbalance(), 5640)\n-        txouts = self.nodes[0].gettxoutsbyaddress(1, (address,))\n+        txouts = self.nodes[0].getutxoindex(1, (address,))\n         txid = txouts[0][\"txid\"]\n         assert_is_hash_string(txid)\n         assert_equal(txid, txid1)\n-        txouts = self.nodes[0].gettxoutsbyaddress(1, (address2,))\n+        txouts = self.nodes[0].getutxoindex(1, (address2,))\n         assert_equal(txouts, [])\n \n if __name__ == '__main__':\n-    TxOutsByAddressTest().main()\n+    UTXOIndexTest().main()\n ",
        "previous_filename": "test/functional/txoutsbyaddress.py"
      }
    ]
  }
]