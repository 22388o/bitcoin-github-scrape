[
  {
    "sha": "51567290d7225d1728f06afd2dd73bd0a17396c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTU2NzI5MGQ3MjI1ZDE3MjhmMDZhZmQyZGQ3M2JkMGExNzM5NmM2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-30T15:26:48Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-05T17:23:50Z"
      },
      "message": "Remove network thread from test scripts",
      "tree": {
        "sha": "7a03daca622d6f498064b305c81d0aff7cb7bf0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a03daca622d6f498064b305c81d0aff7cb7bf0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51567290d7225d1728f06afd2dd73bd0a17396c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51567290d7225d1728f06afd2dd73bd0a17396c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51567290d7225d1728f06afd2dd73bd0a17396c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51567290d7225d1728f06afd2dd73bd0a17396c6/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7e73eafa139c29a38f73ab697e2e967a386908d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e73eafa139c29a38f73ab697e2e967a386908d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e73eafa139c29a38f73ab697e2e967a386908d"
      }
    ],
    "stats": {
      "total": 157,
      "additions": 29,
      "deletions": 128
    },
    "files": [
      {
        "sha": "287cb0ebe1f347855863ca0b11df59fe51d6f471",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -52,10 +52,6 @@ events of interest arrive.\n * You can pass the same handler to multiple ```NodeConn```'s if you like, or pass\n different ones to each -- whatever makes the most sense for your test.\n \n-* Call ```NetworkThread.start()``` after all ```NodeConn``` objects are created to\n-start the networking thread.  (Continue with the test logic in your existing\n-thread.)\n-\n * RPC calls are available in p2p tests.\n \n * Can be used to write free-form tests, where specific p2p-protocol behavior"
      },
      {
        "sha": "c96c4f22c69701366e1758d12bcf90700f9f191c",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -38,7 +38,6 @@\n                                      CTransaction,\n                                      CTxIn,\n                                      CTxOut,\n-                                     NetworkThread,\n                                      NodeConn,\n                                      NodeConnCB,\n                                      msg_block,\n@@ -100,9 +99,6 @@ def run_test(self):\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n         node0.add_connection(connections[0])\n \n-        NetworkThread().start()  # Start up network handling in another thread\n-        node0.wait_for_verack()\n-\n         # Build the blockchain\n         self.tip = int(self.nodes[0].getbestblockhash(), 16)\n         self.block_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time'] + 1\n@@ -167,14 +163,12 @@ def run_test(self):\n         node1 = BaseNode()  # connects to node1\n         connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], node1))\n         node1.add_connection(connections[1])\n-        node1.wait_for_verack()\n \n         self.nodes.append(start_node(2, self.options.tmpdir,\n                                      [\"-assumevalid=\" + hex(block102.sha256)]))\n         node2 = BaseNode()  # connects to node2\n         connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n         node2.add_connection(connections[2])\n-        node2.wait_for_verack()\n \n         # send header lists to all three nodes\n         node0.send_header_for_blocks(self.blocks[0:2000])"
      },
      {
        "sha": "5a8cee8478e57d31f99eeb37769bbd589539a99b",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -18,7 +18,7 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.mininode import CTransaction\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP\n@@ -49,7 +49,6 @@ def setup_network(self):\n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)\n         test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n         test.run()\n \n     def create_transaction(self, node, coinbase, to_address, amount):"
      },
      {
        "sha": "0fa09c8b5c6125ea24eab5a3c4568ace3d65229d",
        "filename": "test/functional/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-112-113-p2p.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -45,7 +45,7 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.mininode import ToHex, CTransaction\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import *\n@@ -105,7 +105,6 @@ def setup_network(self):\n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)\n         test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n         test.run()\n \n     def send_generic_input_tx(self, node, coinbases):"
      },
      {
        "sha": "a934ec9ec0b34080c06ff368118b63c63afef593",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -19,7 +19,7 @@\n from test_framework.blockstore import BlockStore\n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.mininode import CTransaction\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n@@ -41,7 +41,6 @@ def setup_network(self):\n     def run_test(self):\n         self.test = TestManager(self, self.options.tmpdir)\n         self.test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n         self.test.run()\n \n     def create_transaction(self, node, coinbase, to_address, amount):\n@@ -200,14 +199,11 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance([[block, False]])\n \n         # Restart all\n-        self.test.clear_all_connections()\n         stop_nodes(self.nodes)\n         shutil.rmtree(self.options.tmpdir + \"/node0\")\n         self.setup_chain()\n         self.setup_network()\n         self.test.add_all_connections(self.nodes)\n-        NetworkThread().start()\n-        self.test.test_nodes[0].wait_for_verack()\n \n     def get_tests(self):\n         for test in itertools.chain("
      },
      {
        "sha": "d45432a45097a1caf2fb9732d94fdca4a28dbf51",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -18,7 +18,7 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.mininode import CTransaction\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript\n@@ -56,7 +56,6 @@ def setup_network(self):\n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)\n         test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n         test.run()\n \n     def create_transaction(self, node, coinbase, to_address, amount):"
      },
      {
        "sha": "5cafd8eb3e83d3ba55bdf94c21cd87e6cc5ba8f8",
        "filename": "test/functional/invalidblockrequest.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidblockrequest.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -32,7 +32,6 @@ def run_test(self):\n         test.add_all_connections(self.nodes)\n         self.tip = None\n         self.block_time = None\n-        NetworkThread().start() # Start up network handling in another thread\n         test.run()\n \n     def get_tests(self):"
      },
      {
        "sha": "4129ad29184fa658f57588e19763e5eda34cd16d",
        "filename": "test/functional/invalidtxrequest.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidtxrequest.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -28,7 +28,6 @@ def run_test(self):\n         test.add_all_connections(self.nodes)\n         self.tip = None\n         self.block_time = None\n-        NetworkThread().start() # Start up network handling in another thread\n         test.run()\n \n     def get_tests(self):"
      },
      {
        "sha": "31eff87bf7f79468cdd8440e63eccca50dac1d7a",
        "filename": "test/functional/maxblocksinflight.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxblocksinflight.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -86,7 +86,6 @@ def run_test(self):\n         # pass log handler through to the test manager object\n         test.log = self.log\n         test.add_new_connection(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test))\n-        NetworkThread().start()  # Start up network handling in another thread\n         test.run()\n \n if __name__ == '__main__':"
      },
      {
        "sha": "713258782bd806084c8db1de5b1c76008de1f452",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 18,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -27,7 +27,7 @@ def __init__(self):\n         self.block_receive_map = {}\n \n     def add_connection(self, conn):\n-        self.connection = conn\n+        super().add_connection(conn)\n         self.peer_disconnected = False\n \n     def on_inv(self, conn, message):\n@@ -44,15 +44,6 @@ def on_block(self, conn, message):\n         except KeyError as e:\n             self.block_receive_map[message.block.sha256] = 1\n \n-    # Spin until verack message is received from the node.\n-    # We use this to signal that our test can begin. This\n-    # is called from the testing thread, so it needs to acquire\n-    # the global lock.\n-    def wait_for_verack(self):\n-        def veracked():\n-            return self.verack_received\n-        return wait_until(veracked, timeout=10)\n-\n     def wait_for_disconnect(self):\n         def disconnected():\n             return self.peer_disconnected\n@@ -104,11 +95,6 @@ def run_test(self):\n             connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_nodes[i]))\n             test_nodes[i].add_connection(connections[i])\n \n-        NetworkThread().start() # Start up network handling in another thread\n-        [x.wait_for_verack() for x in test_nodes]\n-\n-        # Test logic begins here\n-\n         # Now mine a big block\n         mine_large_block(self.nodes[0], self.utxo_cache)\n \n@@ -201,9 +187,6 @@ def run_test(self):\n             connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_nodes[i]))\n             test_nodes[i].add_connection(connections[i])\n \n-        NetworkThread().start() # Start up network handling in another thread\n-        [x.wait_for_verack() for x in test_nodes]\n-\n         #retrieve 20 blocks which should be enough to break the 1MB limit\n         getdata_request.inv = [CInv(2, big_new_block)]\n         for i in range(20):"
      },
      {
        "sha": "2f2e9259ed002b746bc1125f4faa6869bd3e0a92",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -15,7 +15,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.mininode import CTransaction\n from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n from test_framework.script import CScript\n from io import BytesIO\n@@ -53,7 +53,6 @@ def run_test(self):\n         self.wit_address = self.nodes[0].addwitnessaddress(self.address)\n         self.wit_ms_address = self.nodes[0].addwitnessaddress(self.ms_address)\n \n-        NetworkThread().start() # Start up network handling in another thread\n         self.coinbase_blocks = self.nodes[0].generate(2) # Block 2\n         coinbase_txid = []\n         for i in self.coinbase_blocks:"
      },
      {
        "sha": "5bf00bb40080c92ebd6b4a61858683fca5b14e79",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -63,24 +63,10 @@ def __init__(self):\n         self.ping_counter = 1\n         self.last_pong = msg_pong()\n \n-    def add_connection(self, conn):\n-        self.connection = conn\n-\n     # Track the last getdata message we receive (used in the test)\n     def on_getdata(self, conn, message):\n         self.last_getdata = message\n \n-    # Spin until verack message is received from the node.\n-    # We use this to signal that our test can begin. This\n-    # is called from the testing thread, so it needs to acquire\n-    # the global lock.\n-    def wait_for_verack(self):\n-        while True:\n-            with mininode_lock:\n-                if self.verack_received:\n-                    return\n-            time.sleep(0.05)\n-\n     # Wrapper for the NodeConn's send_message function\n     def send_message(self, message):\n         self.connection.send_message(message)\n@@ -121,12 +107,6 @@ def run_test(self):\n         test_node.add_connection(connections[0])\n         white_node.add_connection(connections[1])\n \n-        NetworkThread().start() # Start up network handling in another thread\n-\n-        # Test logic begins here\n-        test_node.wait_for_verack()\n-        white_node.wait_for_verack()\n-\n         # 1. Have both nodes mine a block (leave IBD)\n         [ n.generate(1) for n in self.nodes ]\n         tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]"
      },
      {
        "sha": "24a622fd00473ea468a095eab9b90d5ae486e1a9",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -857,11 +857,6 @@ def run_test(self):\n         self.segwit_node.add_connection(connections[1])\n         self.old_node.add_connection(connections[2])\n \n-        NetworkThread().start()  # Start up network handling in another thread\n-\n-        # Test logic begins here\n-        self.test_node.wait_for_verack()\n-\n         # We will need UTXOs to construct transactions in later tests.\n         self.make_utxos()\n "
      },
      {
        "sha": "f7fadaf49b45be98b806e0797e0ed55405fa668c",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -68,8 +68,6 @@ def run_test(self):\n         test_node = TestNode()\n         connection = NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node)\n         test_node.add_connection(connection)\n-        NetworkThread().start()\n-        test_node.wait_for_verack()\n \n         # Test that invs are received for all txs at feerate of 20 sat/byte\n         node1.settxfee(Decimal(\"0.00020000\"))"
      },
      {
        "sha": "b94cbbba9c2aa74c0662884b5d97b2cbd2f1579e",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -69,7 +69,6 @@ def add_options(self, parser):\n     def run_test(self):\n         self.test = TestManager(self, self.options.tmpdir)\n         self.test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n         self.test.run()\n \n     def add_transactions_to_block(self, block, tx_list):"
      },
      {
        "sha": "5bc937380186a892a78a7bfdaec2d3ed2115062d",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -24,9 +24,6 @@ def __init__(self):\n         self.unexpected_msg = False\n         self.connected = False\n \n-    def add_connection(self, conn):\n-        self.connection = conn\n-\n     def send_message(self, message):\n         self.connection.send_message(message)\n \n@@ -115,11 +112,9 @@ def run_test(self):\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_bannode, send_version=False))\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_idlenode, send_version=False))\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_verack_idlenode))\n-        no_version_bannode.add_connection(connections[0])\n-        no_version_idlenode.add_connection(connections[1])\n-        no_verack_idlenode.add_connection(connections[2])\n-\n-        NetworkThread().start()  # Start up network handling in another thread\n+        no_version_bannode.add_connection(connections[0], wait_for_verack=False)\n+        no_version_idlenode.add_connection(connections[1], wait_for_verack=False)\n+        no_verack_idlenode.add_connection(connections[2], wait_for_verack=False)\n \n         assert(wait_until(lambda: no_version_bannode.connected and no_version_idlenode.connected and no_verack_idlenode.version_received, timeout=10))\n "
      },
      {
        "sha": "07cde47daf558862d8267502e8dbfaa7f59bc2aa",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -21,7 +21,7 @@ def __init__(self):\n         self.block_receive_map = {}\n \n     def add_connection(self, conn):\n-        self.connection = conn\n+        super().add_connection(conn)\n         self.peer_disconnected = False\n \n     def on_inv(self, conn, message):\n@@ -38,15 +38,6 @@ def on_block(self, conn, message):\n         except KeyError as e:\n             self.block_receive_map[message.block.sha256] = 1\n \n-    # Spin until verack message is received from the node.\n-    # We use this to signal that our test can begin. This\n-    # is called from the testing thread, so it needs to acquire\n-    # the global lock.\n-    def wait_for_verack(self):\n-        def veracked():\n-            return self.verack_received\n-        return wait_until(veracked, timeout=10)\n-\n     def wait_for_disconnect(self):\n         def disconnected():\n             return self.peer_disconnected\n@@ -83,8 +74,6 @@ def run_test(self):\n         aTestNode = TestNode()\n         node = NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], aTestNode)\n         aTestNode.add_connection(node)\n-        NetworkThread().start()\n-        aTestNode.wait_for_verack()\n \n         #request mempool\n         aTestNode.send_mempool()"
      },
      {
        "sha": "4a903fb85999ab12bb1be79a079b23a53f539d6f",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -42,9 +42,6 @@ def __init__(self):\n         self.getdataset = set()\n         self.last_reject = None\n \n-    def add_connection(self, conn):\n-        self.connection = conn\n-\n     # Wrapper for the NodeConn's send_message function\n     def send_message(self, message):\n         self.connection.send_message(message)\n@@ -1957,14 +1954,9 @@ def run_test(self):\n         self.old_node.add_connection(self.connections[1])\n         self.std_node.add_connection(self.connections[2])\n \n-        NetworkThread().start() # Start up network handling in another thread\n-\n         # Keep a place to store utxo's that can be used in later tests\n         self.utxo = []\n \n-        # Test logic begins here\n-        self.test_node.wait_for_verack()\n-\n         self.log.info(\"Starting tests before segwit lock in:\")\n \n         self.test_witness_services() # Verifies NODE_WITNESS"
      },
      {
        "sha": "8ecb97dbb9b61507e48bbb13b87102db86a3e48c",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -66,10 +66,8 @@ def run_test(self):\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.no_version_node, send_version=False))\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.no_send_node, send_version=False))\n         self.no_verack_node.add_connection(connections[0])\n-        self.no_version_node.add_connection(connections[1])\n-        self.no_send_node.add_connection(connections[2])\n-\n-        NetworkThread().start()  # Start up network handling in another thread\n+        self.no_version_node.add_connection(connections[1], wait_for_verack=False)\n+        self.no_send_node.add_connection(connections[2], wait_for_verack=False)\n \n         sleep(1)\n "
      },
      {
        "sha": "25ef90fb4b34ffdc5f4c44e0aee75334ca2835a4",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -33,9 +33,6 @@ def __init__(self):\n         self.ping_counter = 1\n         self.last_pong = msg_pong()\n \n-    def add_connection(self, conn):\n-        self.connection = conn\n-\n     def on_inv(self, conn, message):\n         pass\n \n@@ -90,11 +87,6 @@ def run_test(self):\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node))\n         test_node.add_connection(connections[0])\n \n-        NetworkThread().start() # Start up network handling in another thread\n-\n-        # Test logic begins here\n-        test_node.wait_for_verack()\n-\n         # 1. Have the node mine one period worth of blocks\n         self.nodes[0].generate(VB_PERIOD)\n "
      },
      {
        "sha": "b86f85b1af915ba3c159bbc3782c0506bc4fdcf0",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -273,12 +273,6 @@ def run_test(self):\n         inv_node.add_connection(connections[0])\n         test_node.add_connection(connections[1])\n \n-        NetworkThread().start() # Start up network handling in another thread\n-\n-        # Test logic begins here\n-        inv_node.wait_for_verack()\n-        test_node.wait_for_verack()\n-\n         tip = int(self.nodes[0].getbestblockhash(), 16)\n \n         # PART 1"
      },
      {
        "sha": "328c8e9b889a386b572f43162aa1e3645f355bcb",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -62,6 +62,7 @@ def on_close(self, conn):\n         self.closed = True\n \n     def add_connection(self, conn):\n+        super().add_connection(conn)\n         self.conn = conn\n \n     def on_headers(self, conn, message):\n@@ -191,11 +192,6 @@ def disconnected():\n             return all(node.closed for node in self.test_nodes)\n         return wait_until(disconnected, timeout=10)\n \n-    def wait_for_verack(self):\n-        def veracked():\n-            return all(node.verack_received for node in self.test_nodes)\n-        return wait_until(veracked, timeout=10)\n-\n     def wait_for_pings(self, counter):\n         def received_pongs():\n             return all(node.received_ping_response(counter) for node in self.test_nodes)\n@@ -296,9 +292,6 @@ def check_mempool(self, txhash, outcome):\n             return True\n \n     def run(self):\n-        # Wait until verack is received\n-        self.wait_for_verack()\n-\n         test_number = 1\n         for test_instance in self.test_generator.get_tests():\n             # We use these variables to keep track of the last block"
      },
      {
        "sha": "4b70aa22748cb2383fa9b7d8bdcfedc548164137",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -1551,8 +1551,13 @@ def on_version(self, conn, message):\n     # Helper functions\n     ##################\n \n-    def add_connection(self, conn):\n+    def add_connection(self, conn, wait_for_verack=True):\n+        \"\"\"Add a P2P connection to the node, wait for it to open and (optionally) wait for a verack.\"\"\"\n         self.connection = conn\n+        while conn.state != \"connected\":\n+            time.sleep(0.1)\n+        if wait_for_verack:\n+            self.wait_for_verack()\n \n     # Wrapper for the NodeConn's send_message function\n     def send_message(self, message):\n@@ -1779,8 +1784,12 @@ def disconnect_node(self):\n \n \n class NetworkThread(Thread):\n+    def __init__(self):\n+        super().__init__()\n+        self.test_running = True\n+\n     def run(self):\n-        while mininode_socket_map:\n+        while mininode_socket_map or self.test_running:\n             # We check for whether to disconnect outside of the asyncore\n             # loop to workaround the behavior of asyncore when using\n             # select"
      },
      {
        "sha": "caf3d0656fa8aab5994eb60145f5bc714c8163a9",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51567290d7225d1728f06afd2dd73bd0a17396c6/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=51567290d7225d1728f06afd2dd73bd0a17396c6",
        "patch": "@@ -27,6 +27,7 @@\n     PortSeed,\n )\n from .authproxy import JSONRPCException\n+from .mininode import NetworkThread\n \n class BitcoinTestFramework(object):\n \n@@ -148,6 +149,8 @@ def main(self):\n         try:\n             self.setup_chain()\n             self.setup_network()\n+            self.network_thread = NetworkThread()\n+            self.network_thread.start()\n             self.run_test()\n             success = True\n         except JSONRPCException as e:\n@@ -161,6 +164,8 @@ def main(self):\n         except KeyboardInterrupt as e:\n             self.log.warning(\"Exiting after keyboard interrupt\")\n \n+        self.network_thread.test_running = False\n+\n         if not self.options.noshutdown:\n             self.log.info(\"Stopping nodes\")\n             stop_nodes(self.nodes)"
      }
    ]
  },
  {
    "sha": "acc20754077906db3ddf25813b425ffd0375c9f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2MyMDc1NDA3NzkwNmRiM2RkZjI1ODEzYjQyNWZmZDAzNzVjOWYx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-04T18:30:44Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-05T17:23:50Z"
      },
      "message": "fixup",
      "tree": {
        "sha": "40254d7c5e3088c5546de30226d24df5a35d5ef7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40254d7c5e3088c5546de30226d24df5a35d5ef7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acc20754077906db3ddf25813b425ffd0375c9f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acc20754077906db3ddf25813b425ffd0375c9f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acc20754077906db3ddf25813b425ffd0375c9f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acc20754077906db3ddf25813b425ffd0375c9f1/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51567290d7225d1728f06afd2dd73bd0a17396c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51567290d7225d1728f06afd2dd73bd0a17396c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51567290d7225d1728f06afd2dd73bd0a17396c6"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 14,
      "deletions": 11
    },
    "files": [
      {
        "sha": "f98ecacff9e6822ca553d009f06200fd4da8ccea",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 14,
        "deletions": 11,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acc20754077906db3ddf25813b425ffd0375c9f1/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acc20754077906db3ddf25813b425ffd0375c9f1/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=acc20754077906db3ddf25813b425ffd0375c9f1",
        "patch": "@@ -1789,17 +1789,20 @@ def __init__(self):\n         self.test_running = True\n \n     def run(self):\n-        while mininode_socket_map or self.test_running:\n-            # We check for whether to disconnect outside of the asyncore\n-            # loop to workaround the behavior of asyncore when using\n-            # select\n-            disconnected = []\n-            for fd, obj in mininode_socket_map.items():\n-                if obj.disconnect:\n-                    disconnected.append(obj)\n-            [ obj.handle_close() for obj in disconnected ]\n-            asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n-\n+        while True:\n+            with mininode_lock:\n+                # We check for whether to disconnect outside of the asyncore\n+                # loop to workaround the behavior of asyncore when using\n+                # select\n+                disconnected = []\n+                for fd, obj in mininode_socket_map.items():\n+                    if obj.disconnect:\n+                        disconnected.append(obj)\n+                [obj.handle_close() for obj in disconnected]\n+                asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n+                if not self.test_running:\n+                    break\n+            time.sleep(0.1)\n \n # An exception we can raise if we detect a potential disconnect\n # (p2p or rpc) before the test is complete"
      }
    ]
  },
  {
    "sha": "d543b533e85486676185dce277195d17186f21f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTQzYjUzM2U4NTQ4NjY3NjE4NWRjZTI3NzE5NWQxNzE4NmYyMWYz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-04T21:30:32Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-05T17:23:50Z"
      },
      "message": "fixup: sync-ping on connect\n\nto make sure that our verack has been processed",
      "tree": {
        "sha": "b2b8e5d07dff1b065a67a84bbaac5647214e7e42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2b8e5d07dff1b065a67a84bbaac5647214e7e42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d543b533e85486676185dce277195d17186f21f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d543b533e85486676185dce277195d17186f21f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d543b533e85486676185dce277195d17186f21f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d543b533e85486676185dce277195d17186f21f3/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acc20754077906db3ddf25813b425ffd0375c9f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acc20754077906db3ddf25813b425ffd0375c9f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acc20754077906db3ddf25813b425ffd0375c9f1"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6403d8dfb300918aaa28a5f5b276426e5d8d170c",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d543b533e85486676185dce277195d17186f21f3/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d543b533e85486676185dce277195d17186f21f3/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=d543b533e85486676185dce277195d17186f21f3",
        "patch": "@@ -1469,6 +1469,7 @@ def serialize(self):\n # Reimplement the on_* functions to provide handling for events\n class NodeConnCB(object):\n     def __init__(self):\n+        self.version_received = False\n         self.verack_received = False\n         # deliver_sleep_time is helpful for debugging race conditions in p2p\n         # tests; it causes message delivery to sleep for the specified time\n@@ -1541,6 +1542,7 @@ def on_verack(self, conn, message):\n         self.verack_received = True\n \n     def on_version(self, conn, message):\n+        self.version_received = True\n         if message.nVersion >= 209:\n             conn.send_message(msg_verack())\n         conn.ver_send = min(MY_VERSION, message.nVersion)\n@@ -1554,10 +1556,15 @@ def on_version(self, conn, message):\n     def add_connection(self, conn, wait_for_verack=True):\n         \"\"\"Add a P2P connection to the node, wait for it to open and (optionally) wait for a verack.\"\"\"\n         self.connection = conn\n-        while conn.state != \"connected\":\n+        while conn.state != \"connected\" and not self.version_received:\n             time.sleep(0.1)\n         if wait_for_verack:\n             self.wait_for_verack()\n+            # at this point we've already received a version\n+            # message. Sync-ping to make sure that our verack\n+            # has been processed and that the node considers\n+            # us fully connected.\n+            self.sync_with_ping()\n \n     # Wrapper for the NodeConn's send_message function\n     def send_message(self, message):"
      }
    ]
  }
]