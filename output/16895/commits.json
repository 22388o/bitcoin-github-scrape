[
  {
    "sha": "dd92677895de134c77b318cf7e27e2471a10842c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDkyNjc3ODk1ZGUxMzRjNzdiMzE4Y2Y3ZTI3ZTI0NzFhMTA4NDJj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-03-25T21:00:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Output a descriptor in createmultisig",
      "tree": {
        "sha": "a4c7b7feb113e12370c57d412c419c4aa6154627",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4c7b7feb113e12370c57d412c419c4aa6154627"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd92677895de134c77b318cf7e27e2471a10842c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd92677895de134c77b318cf7e27e2471a10842c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd92677895de134c77b318cf7e27e2471a10842c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd92677895de134c77b318cf7e27e2471a10842c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44c2400bccbc6e77416e9debbeedbeed5cdc0eac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44c2400bccbc6e77416e9debbeedbeed5cdc0eac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44c2400bccbc6e77416e9debbeedbeed5cdc0eac"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "29b8e69af36137109584b1c3d97ccd2ba55c49ac",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd92677895de134c77b318cf7e27e2471a10842c/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd92677895de134c77b318cf7e27e2471a10842c/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=dd92677895de134c77b318cf7e27e2471a10842c",
        "patch": "@@ -83,6 +83,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new multisig address.\\n\"\n             \"  \\\"redeemScript\\\":\\\"script\\\"       (string) The string value of the hex-encoded redemption script.\\n\"\n+            \"  \\\"descriptor\\\":\\\"descriptor\\\"     (string) The descriptor for the P2SH address for this multisig\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -119,9 +120,13 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     CScript inner;\n     const CTxDestination dest = AddAndGetMultisigDestination(required, pubkeys, output_type, keystore, inner);\n \n+    // Make the descriptor\n+    std::unique_ptr<Descriptor> descriptor = InferDescriptor(GetScriptForDestination(dest), keystore);\n+\n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"address\", EncodeDestination(dest));\n     result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));\n+    result.pushKV(\"descriptor\", descriptor->ToString());\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "83a61b78f0320e03991a611d2fba56ab28404d97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2E2MWI3OGYwMzIwZTAzOTkxYTYxMWQyZmJhNTZhYjI4NDA0ZDk3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-16T17:34:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Introduce SetType function to tell ScriptPubKeyMans the type and internal-ness of it",
      "tree": {
        "sha": "43fc911d04791619c2841f0e4f18816237ef568b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43fc911d04791619c2841f0e4f18816237ef568b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83a61b78f0320e03991a611d2fba56ab28404d97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83a61b78f0320e03991a611d2fba56ab28404d97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83a61b78f0320e03991a611d2fba56ab28404d97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83a61b78f0320e03991a611d2fba56ab28404d97/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd92677895de134c77b318cf7e27e2471a10842c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd92677895de134c77b318cf7e27e2471a10842c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd92677895de134c77b318cf7e27e2471a10842c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c624a49e9b4d832abe61d73517a6a006de90c647",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83a61b78f0320e03991a611d2fba56ab28404d97/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83a61b78f0320e03991a611d2fba56ab28404d97/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=83a61b78f0320e03991a611d2fba56ab28404d97",
        "patch": "@@ -1426,3 +1426,5 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}"
      },
      {
        "sha": "a72f820cf259f9d4a8039fe19bcd6f6d6345c6de",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83a61b78f0320e03991a611d2fba56ab28404d97/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83a61b78f0320e03991a611d2fba56ab28404d97/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=83a61b78f0320e03991a611d2fba56ab28404d97",
        "patch": "@@ -212,6 +212,8 @@ class ScriptPubKeyMan\n \n     virtual uint256 GetID() const { return uint256(); }\n \n+    virtual void SetType(OutputType type, bool internal) {}\n+\n     /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n     template<typename... Params>\n     void WalletLogPrintf(std::string fmt, Params... parameters) const {\n@@ -352,6 +354,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     uint256 GetID() const override;\n \n+    void SetType(OutputType type, bool internal) override;\n+\n     // Map from Key ID to key metadata.\n     std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n "
      }
    ]
  },
  {
    "sha": "3f6cbc5bb16f8a021bbe88d998b12698205aaeac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjZjYmM1YmIxNmY4YTAyMWJiZTg4ZDk5OGIxMjY5ODIwNWFhZWFj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-05T22:16:48Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Introduce DescriptorScriptPubKeyMan as a dummy class",
      "tree": {
        "sha": "003a63d5c0bc6f99e195f58f7ad34065688c3f86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/003a63d5c0bc6f99e195f58f7ad34065688c3f86"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f6cbc5bb16f8a021bbe88d998b12698205aaeac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f6cbc5bb16f8a021bbe88d998b12698205aaeac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f6cbc5bb16f8a021bbe88d998b12698205aaeac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f6cbc5bb16f8a021bbe88d998b12698205aaeac/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83a61b78f0320e03991a611d2fba56ab28404d97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83a61b78f0320e03991a611d2fba56ab28404d97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83a61b78f0320e03991a611d2fba56ab28404d97"
      }
    ],
    "stats": {
      "total": 162,
      "additions": 162,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a194955b02b995216f1bd12972e17fb4679a1f83",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 113,
        "deletions": 0,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f6cbc5bb16f8a021bbe88d998b12698205aaeac/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f6cbc5bb16f8a021bbe88d998b12698205aaeac/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=3f6cbc5bb16f8a021bbe88d998b12698205aaeac",
        "patch": "@@ -1428,3 +1428,116 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n }\n \n void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    return false;\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    return false;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    return false;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    return false;\n+}\n+\n+void DescriptorScriptPubKeyMan::KeepDestination(int64_t index)\n+{\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    return false;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+}\n+\n+bool DescriptorScriptPubKeyMan::SetupGeneration(bool force)\n+{\n+    return false;\n+}\n+\n+bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n+{\n+    return false;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal)\n+{\n+    return false;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Upgrade(int prev_version, std::string& error)\n+{\n+    return false;\n+}\n+\n+bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    return false;\n+}\n+\n+void DescriptorScriptPubKeyMan::RewriteDB()\n+{\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime()\n+{\n+    return GetTime();\n+}\n+\n+size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys()\n+{\n+    return 0;\n+}\n+\n+unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n+{\n+    return 0;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n+{\n+    return 0;\n+}\n+\n+std::unique_ptr<SigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script) const\n+{\n+    return nullptr;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n+{\n+    return false;\n+}\n+\n+const CKeyMetadata* DescriptorScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n+{\n+    return nullptr;\n+}\n+\n+uint256 DescriptorScriptPubKeyMan::GetID() const\n+{\n+    return uint256();\n+}\n+\n+void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal) {}"
      },
      {
        "sha": "245e4e5930ef18487c5f05706f4f98c23f27bf82",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f6cbc5bb16f8a021bbe88d998b12698205aaeac/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f6cbc5bb16f8a021bbe88d998b12698205aaeac/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=3f6cbc5bb16f8a021bbe88d998b12698205aaeac",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n #define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n \n+#include <script/descriptor.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <wallet/crypter.h>\n@@ -467,4 +468,52 @@ class LegacySigningProvider : public SigningProvider\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n+    bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n+    bool IsHDEnabled() const override;\n+\n+    bool SetupGeneration(bool force = false) override;\n+\n+    bool Upgrade(int prev_version, std::string& error) override;\n+\n+    bool HavePrivateKeys() const override;\n+\n+    void RewriteDB() override;\n+\n+    int64_t GetOldestKeyPoolTime() override;\n+    size_t KeypoolCountExternalKeys() override;\n+    unsigned int GetKeyPoolSize() const override;\n+\n+    int64_t GetTimeFirstKey() const override;\n+\n+    const CKeyMetadata* GetMetadata(const CTxDestination& dest) const override;\n+\n+    bool CanGetAddresses(bool internal = false) override;\n+\n+    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const override;\n+\n+    bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n+\n+    uint256 GetID() const override;\n+\n+    void SetType(OutputType type, bool internal) override;\n+};\n+\n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      }
    ]
  },
  {
    "sha": "949e0734d4be3cec2e8bc213392044554f6afc5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDllMDczNGQ0YmUzY2VjMmU4YmMyMTMzOTIwNDQ1NTRmNmFmYzVl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-06T02:32:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Add WALLET_FLAG_DESCRIPTORS",
      "tree": {
        "sha": "baa00e51663d7749babc4bf7ddbfba27255f0aa7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/baa00e51663d7749babc4bf7ddbfba27255f0aa7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/949e0734d4be3cec2e8bc213392044554f6afc5e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/949e0734d4be3cec2e8bc213392044554f6afc5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/949e0734d4be3cec2e8bc213392044554f6afc5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/949e0734d4be3cec2e8bc213392044554f6afc5e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f6cbc5bb16f8a021bbe88d998b12698205aaeac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f6cbc5bb16f8a021bbe88d998b12698205aaeac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f6cbc5bb16f8a021bbe88d998b12698205aaeac"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f24323c78bf373e8fd8cd76786115392fda8993e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/949e0734d4be3cec2e8bc213392044554f6afc5e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/949e0734d4be3cec2e8bc213392044554f6afc5e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=949e0734d4be3cec2e8bc213392044554f6afc5e",
        "patch": "@@ -108,7 +108,8 @@ static constexpr uint64_t KNOWN_WALLET_FLAGS =\n         WALLET_FLAG_AVOID_REUSE\n     |   WALLET_FLAG_BLANK_WALLET\n     |   WALLET_FLAG_KEY_ORIGIN_METADATA\n-    |   WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n+    |   WALLET_FLAG_DISABLE_PRIVATE_KEYS\n+    |   WALLET_FLAG_DESCRIPTORS;\n \n static constexpr uint64_t MUTABLE_WALLET_FLAGS =\n         WALLET_FLAG_AVOID_REUSE;\n@@ -118,6 +119,7 @@ static const std::map<std::string,WalletFlags> WALLET_FLAG_MAP{\n     {\"blank\", WALLET_FLAG_BLANK_WALLET},\n     {\"key_origin_metadata\", WALLET_FLAG_KEY_ORIGIN_METADATA},\n     {\"disable_private_keys\", WALLET_FLAG_DISABLE_PRIVATE_KEYS},\n+    {\"descriptor_wallet\", WALLET_FLAG_DESCRIPTORS},\n };\n \n extern const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS;"
      },
      {
        "sha": "4f1f4c79ddc9464314e700b241097a63613ec8e1",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/949e0734d4be3cec2e8bc213392044554f6afc5e/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/949e0734d4be3cec2e8bc213392044554f6afc5e/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=949e0734d4be3cec2e8bc213392044554f6afc5e",
        "patch": "@@ -55,6 +55,9 @@ enum WalletFlags : uint64_t {\n     //! bitcoin from opening the wallet, thinking it was newly created, and\n     //! then improperly reinitializing it.\n     WALLET_FLAG_BLANK_WALLET = (1ULL << 33),\n+\n+    //! Indicate that this wallet supports DescriptorScriptPubKeyMan\n+    WALLET_FLAG_DESCRIPTORS = (1ULL << 34),\n };\n \n //! Get the path of the wallet directory."
      }
    ]
  },
  {
    "sha": "cf3bc7a5508b9514dcb9e72c819ade187aa69bd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjNiYzdhNTUwOGI5NTE0ZGNiOWU3MmM4MTlhZGUxODdhYTY5YmQ3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T15:21:31Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Return nullptr from GetLegacyScriptPubKeyMan if descriptor wallet",
      "tree": {
        "sha": "4ad0b873b0a906a673d4052d892d3c9d6cce3ffa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ad0b873b0a906a673d4052d892d3c9d6cce3ffa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf3bc7a5508b9514dcb9e72c819ade187aa69bd7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf3bc7a5508b9514dcb9e72c819ade187aa69bd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf3bc7a5508b9514dcb9e72c819ade187aa69bd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf3bc7a5508b9514dcb9e72c819ade187aa69bd7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "949e0734d4be3cec2e8bc213392044554f6afc5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/949e0734d4be3cec2e8bc213392044554f6afc5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/949e0734d4be3cec2e8bc213392044554f6afc5e"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7701d7ab3ed1ea473d2b799fc82b894f906b361b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf3bc7a5508b9514dcb9e72c819ade187aa69bd7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf3bc7a5508b9514dcb9e72c819ade187aa69bd7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cf3bc7a5508b9514dcb9e72c819ade187aa69bd7",
        "patch": "@@ -4183,6 +4183,9 @@ std::unique_ptr<SigningProvider> CWallet::GetSigningProvider(const CScript& scri\n \n LegacyScriptPubKeyMan* CWallet::GetLegacyScriptPubKeyMan() const\n {\n+    if (IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        return nullptr;\n+    }\n     // Legacy wallets only have one ScriptPubKeyMan which is a LegacyScriptPubKeyMan.\n     // Everything in m_internal_spk_managers and m_external_spk_managers point to the same legacyScriptPubKeyMan.\n     auto it = m_internal_spk_managers.find(OutputType::LEGACY);\n@@ -4198,7 +4201,7 @@ LegacyScriptPubKeyMan* CWallet::GetOrCreateLegacyScriptPubKeyMan()\n \n void CWallet::SetupLegacyScriptPubKeyMan()\n {\n-    if (!m_internal_spk_managers.empty() || !m_external_spk_managers.empty() || !m_spk_managers.empty()) {\n+    if (!m_internal_spk_managers.empty() || !m_external_spk_managers.empty() || !m_spk_managers.empty() || IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n         return;\n     }\n "
      }
    ]
  },
  {
    "sha": "e40a833c3bffb0cf723357238eb809398e3e5237",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDBhODMzYzNiZmZiMGNmNzIzMzU3MjM4ZWI4MDkzOThlM2U1MjM3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-17T21:54:15Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Create LegacyScriptPubKeyMan when not a descriptor wallet",
      "tree": {
        "sha": "f5799c1f1848984dfd8d3f9c21f16eaf686b91c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5799c1f1848984dfd8d3f9c21f16eaf686b91c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e40a833c3bffb0cf723357238eb809398e3e5237",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e40a833c3bffb0cf723357238eb809398e3e5237",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e40a833c3bffb0cf723357238eb809398e3e5237",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e40a833c3bffb0cf723357238eb809398e3e5237/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf3bc7a5508b9514dcb9e72c819ade187aa69bd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf3bc7a5508b9514dcb9e72c819ade187aa69bd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf3bc7a5508b9514dcb9e72c819ade187aa69bd7"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 39,
      "deletions": 9
    },
    "files": [
      {
        "sha": "2323c3475fe2b2526838b83f2a28bb23dea42675",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e40a833c3bffb0cf723357238eb809398e3e5237/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e40a833c3bffb0cf723357238eb809398e3e5237/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=e40a833c3bffb0cf723357238eb809398e3e5237",
        "patch": "@@ -1486,11 +1486,6 @@ bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal)\n     return false;\n }\n \n-bool DescriptorScriptPubKeyMan::Upgrade(int prev_version, std::string& error)\n-{\n-    return false;\n-}\n-\n bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n {\n     return false;"
      },
      {
        "sha": "18e975c57358145227a2e1e2f8d559838b233f0d",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e40a833c3bffb0cf723357238eb809398e3e5237/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e40a833c3bffb0cf723357238eb809398e3e5237/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=e40a833c3bffb0cf723357238eb809398e3e5237",
        "patch": "@@ -491,8 +491,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool SetupGeneration(bool force = false) override;\n \n-    bool Upgrade(int prev_version, std::string& error) override;\n-\n     bool HavePrivateKeys() const override;\n \n     void RewriteDB() override;"
      },
      {
        "sha": "11c0f134ff7801e350d1581bb78108b72fef659a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e40a833c3bffb0cf723357238eb809398e3e5237/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e40a833c3bffb0cf723357238eb809398e3e5237/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e40a833c3bffb0cf723357238eb809398e3e5237",
        "patch": "@@ -3734,8 +3734,10 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         walletInstance->SetWalletFlags(wallet_creation_flags, false);\n \n-        // Always create LegacyScriptPubKeyMan for now\n-        walletInstance->SetupLegacyScriptPubKeyMan();\n+        // Only create LegacyScriptPubKeyMan when not descriptor wallet\n+        if (!(wallet_creation_flags & WALLET_FLAG_DESCRIPTORS)) {\n+            walletInstance->SetupLegacyScriptPubKeyMan();\n+        }\n \n         if (!(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n             LOCK(walletInstance->cs_wallet);"
      },
      {
        "sha": "3f4a671e707057b8622e0dc9571e3672ed2e8fe0",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e40a833c3bffb0cf723357238eb809398e3e5237/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e40a833c3bffb0cf723357238eb809398e3e5237/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=e40a833c3bffb0cf723357238eb809398e3e5237",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_WALLET_WALLETUTIL_H\n \n #include <fs.h>\n+#include <script/descriptor.h>\n \n #include <vector>\n \n@@ -86,4 +87,38 @@ class WalletLocation final\n     bool Exists() const;\n };\n \n+/** Descriptor with some wallet metadata */\n+class WalletDescriptor\n+{\n+public:\n+    std::shared_ptr<Descriptor> descriptor;\n+    uint64_t creation_time;\n+    int32_t range_start; // First item in range; start of range, inclusive, i.e. [range_start, range_end)\n+    int32_t range_end; // Item after the last; end of range, exclusive, i.e. [range_start, range_end)\n+    int32_t next_index; // Position of the next item to generate\n+    std::vector<std::vector<unsigned char>> cache;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        if (ser_action.ForRead()) {\n+            std::string desc;\n+            std::string error;\n+            READWRITE(desc);\n+            FlatSigningProvider keys;\n+            descriptor = Parse(desc, keys, error, true);\n+        } else {\n+            READWRITE(descriptor->ToString());\n+        }\n+        READWRITE(creation_time);\n+        READWRITE(next_index);\n+        READWRITE(range_start);\n+        READWRITE(range_end);\n+    }\n+\n+    WalletDescriptor() {}\n+    WalletDescriptor(std::shared_ptr<Descriptor> descriptor, uint64_t creation_time, int32_t range_start, int32_t range_end, int32_t next_index) : descriptor(descriptor), creation_time(creation_time), range_start(range_start), range_end(range_end), next_index(next_index) {}\n+};\n+\n #endif // BITCOIN_WALLET_WALLETUTIL_H"
      }
    ]
  },
  {
    "sha": "b502a15a956b8747879213059d45cc00cf46960e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTAyYTE1YTk1NmI4NzQ3ODc5MjEzMDU5ZDQ1Y2MwMGNmNDY5NjBl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-05T22:33:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Add a lock cs_desc_man for DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "30dbc7e5ae56fbd8f9704d2a33c9d38b07c37e01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30dbc7e5ae56fbd8f9704d2a33c9d38b07c37e01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b502a15a956b8747879213059d45cc00cf46960e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b502a15a956b8747879213059d45cc00cf46960e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b502a15a956b8747879213059d45cc00cf46960e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b502a15a956b8747879213059d45cc00cf46960e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e40a833c3bffb0cf723357238eb809398e3e5237",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e40a833c3bffb0cf723357238eb809398e3e5237",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e40a833c3bffb0cf723357238eb809398e3e5237"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "540f26a44093dfcd4012c9f96b5e397627bc1250",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b502a15a956b8747879213059d45cc00cf46960e/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b502a15a956b8747879213059d45cc00cf46960e/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=b502a15a956b8747879213059d45cc00cf46960e",
        "patch": "@@ -473,6 +473,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n public:\n     using ScriptPubKeyMan::ScriptPubKeyMan;\n \n+    mutable RecursiveMutex cs_desc_man;\n+\n     bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n     isminetype IsMine(const CScript& script) const override;\n "
      }
    ]
  },
  {
    "sha": "c3bf86b9af794ffe363cc40c5c9ebc7185114c2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2JmODZiOWFmNzk0ZmZlMzYzY2M0MGM1YzllYmM3MTg1MTE0YzJk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T19:34:37Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Store WalletDescriptor in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "6ce1b97a5d3445a9985899ad3cffd3a55c49882f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ce1b97a5d3445a9985899ad3cffd3a55c49882f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3bf86b9af794ffe363cc40c5c9ebc7185114c2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3bf86b9af794ffe363cc40c5c9ebc7185114c2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3bf86b9af794ffe363cc40c5c9ebc7185114c2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3bf86b9af794ffe363cc40c5c9ebc7185114c2d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b502a15a956b8747879213059d45cc00cf46960e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b502a15a956b8747879213059d45cc00cf46960e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b502a15a956b8747879213059d45cc00cf46960e"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8a13f3bc8ff96b3cdedeba33e7e103f1ca9674fb",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3bf86b9af794ffe363cc40c5c9ebc7185114c2d/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3bf86b9af794ffe363cc40c5c9ebc7185114c2d/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=c3bf86b9af794ffe363cc40c5c9ebc7185114c2d",
        "patch": "@@ -470,8 +470,17 @@ class LegacySigningProvider : public SigningProvider\n \n class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n {\n+private:\n+    WalletDescriptor descriptor GUARDED_BY(cs_desc_man);\n+\n+    using ScriptPubKeyMap = std::map<CScript, uint32_t>; // Map of scripts to descriptor range index\n+\n+    ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n public:\n-    using ScriptPubKeyMan::ScriptPubKeyMan;\n+    DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+        :   ScriptPubKeyMan(storage),\n+            descriptor(descriptor)\n+        {}\n \n     mutable RecursiveMutex cs_desc_man;\n "
      },
      {
        "sha": "063de7214bba311d7da8998568c384f16419954e",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3bf86b9af794ffe363cc40c5c9ebc7185114c2d/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3bf86b9af794ffe363cc40c5c9ebc7185114c2d/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=c3bf86b9af794ffe363cc40c5c9ebc7185114c2d",
        "patch": "@@ -60,8 +60,10 @@ extern const std::string CRYPTED_KEY;\n extern const std::string CSCRIPT;\n extern const std::string DEFAULTKEY;\n extern const std::string DESTDATA;\n+extern const std::string EXTERNALSPK;\n extern const std::string FLAGS;\n extern const std::string HDCHAIN;\n+extern const std::string INTERNALSPK;\n extern const std::string KEY;\n extern const std::string KEYMETA;\n extern const std::string MASTER_KEY;\n@@ -74,6 +76,7 @@ extern const std::string PURPOSE;\n extern const std::string SETTINGS;\n extern const std::string TX;\n extern const std::string VERSION;\n+extern const std::string WALLETDESCRIPTOR;\n extern const std::string WATCHMETA;\n extern const std::string WATCHS;\n } // namespace DBKeys"
      }
    ]
  },
  {
    "sha": "9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yjk5YjUyYWQ0YWIzZTRmNDQyMTZmZjI4MDhlYzUzYmZlMzhiM2Qy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T19:41:31Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Add LoadDescriptorScriptPubKeyMan and SetActiveScriptPubKeyMan to CWallet",
      "tree": {
        "sha": "7d4a0ef3168dc25c632bdd1e6128e890f85e0d7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d4a0ef3168dc25c632bdd1e6128e890f85e0d7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3bf86b9af794ffe363cc40c5c9ebc7185114c2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3bf86b9af794ffe363cc40c5c9ebc7185114c2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3bf86b9af794ffe363cc40c5c9ebc7185114c2d"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 67,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b0f2aed6da510ce4f93deddba51862b88c49642a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2",
        "patch": "@@ -4232,3 +4232,25 @@ void CWallet::ConnectScriptPubKeyManNotifiers()\n         spk_man->NotifyCanGetAddressesChanged.connect(NotifyCanGetAddressesChanged);\n     }\n }\n+\n+void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n+{\n+    auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+    m_spk_managers[id] = std::move(spk_manager);\n+}\n+\n+void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly)\n+{\n+    auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n+    auto spk_man = m_spk_managers.at(id).get();\n+    spk_man->SetType(type, internal);\n+    spk_mans[type] = spk_man;\n+\n+    if (!memonly) {\n+        WalletBatch batch(*database);\n+        if (!batch.WriteActiveScriptPubKeyMan(static_cast<uint8_t>(type), id, internal)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing active ScriptPubKeyMan id failed\");\n+        }\n+    }\n+    NotifyCanGetAddressesChanged();\n+}"
      },
      {
        "sha": "02378b5416cc0455d9545cfaf8f509983070f6f9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2",
        "patch": "@@ -1186,6 +1186,12 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     //! Connect the signals from ScriptPubKeyMans to the signals in CWallet\n     void ConnectScriptPubKeyManNotifiers();\n+\n+    //! Instantiate a descriptor ScriptPubKeyMan from the WalletDescriptor and load it\n+    void LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc);\n+\n+    //! Sets the active ScriptPubKeyMan for the specified type and internal\n+    void SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly = false);\n };\n \n /**"
      },
      {
        "sha": "3d30c4356f0de31dddd9a788d2a862c61c4d80de",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2",
        "patch": "@@ -27,8 +27,10 @@ const std::string CRYPTED_KEY{\"ckey\"};\n const std::string CSCRIPT{\"cscript\"};\n const std::string DEFAULTKEY{\"defaultkey\"};\n const std::string DESTDATA{\"destdata\"};\n+const std::string EXTERNALSPK{\"externalspk\"};\n const std::string FLAGS{\"flags\"};\n const std::string HDCHAIN{\"hdchain\"};\n+const std::string INTERNALSPK{\"internalspk\"};\n const std::string KEYMETA{\"keymeta\"};\n const std::string KEY{\"key\"};\n const std::string MASTER_KEY{\"mkey\"};\n@@ -41,6 +43,7 @@ const std::string PURPOSE{\"purpose\"};\n const std::string SETTINGS{\"settings\"};\n const std::string TX{\"tx\"};\n const std::string VERSION{\"version\"};\n+const std::string WALLETDESCRIPTOR{\"walletdescriptor\"};\n const std::string WATCHMETA{\"watchmeta\"};\n const std::string WATCHS{\"watchs\"};\n } // namespace DBKeys\n@@ -179,6 +182,15 @@ bool WalletBatch::WriteMinVersion(int nVersion)\n     return WriteIC(DBKeys::MINVERSION, nVersion);\n }\n \n+bool WalletBatch::WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal)\n+{\n+    std::string key = DBKeys::EXTERNALSPK;\n+    if (internal) {\n+        key = DBKeys::INTERNALSPK;\n+    }\n+    return WriteIC(make_pair(key, type), id);\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};\n@@ -189,6 +201,8 @@ class CWalletScanState {\n     bool fIsEncrypted{false};\n     bool fAnyUnordered{false};\n     std::vector<uint256> vWalletUpgrade;\n+    std::map<OutputType, uint256> m_external_spk_managers;\n+    std::map<OutputType, uint256> m_internal_spk_managers;\n \n     CWalletScanState() {\n     }\n@@ -402,6 +416,21 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         } else if (strType == DBKeys::OLD_KEY) {\n             strErr = \"Found unsupported 'wkey' record, try loading with version 0.18\";\n             return false;\n+        } else if (strType == DBKeys::EXTERNALSPK || strType == DBKeys::INTERNALSPK) {\n+            uint8_t type;\n+            ssKey >> type;\n+            uint256 id;\n+            ssValue >> id;\n+\n+            bool internal = strType == DBKeys::INTERNALSPK;\n+            auto& spk_mans = internal ? wss.m_internal_spk_managers : wss.m_external_spk_managers;\n+            spk_mans[static_cast<OutputType>(type)] = id;\n+        } else if (strType == DBKeys::WALLETDESCRIPTOR) {\n+            uint256 id;\n+            ssKey >> id;\n+            WalletDescriptor desc;\n+            ssValue >> desc;\n+            pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n         } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n                    strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n                    strType != DBKeys::VERSION && strType != DBKeys::SETTINGS) {\n@@ -495,6 +524,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         result = DBErrors::CORRUPT;\n     }\n \n+    // Set the active ScriptPubKeyMans\n+    for (auto spk_man_pair : wss.m_external_spk_managers) {\n+        pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, false, true);\n+    }\n+    for (auto spk_man_pair : wss.m_internal_spk_managers) {\n+        pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, true, true);\n+    }\n+\n     if (fNoncriticalErrors && result == DBErrors::LOAD_OK)\n         result = DBErrors::NONCRITICAL_ERROR;\n "
      },
      {
        "sha": "84b2396c1aed22c93457c47bb3cebee7144bf269",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2",
        "patch": "@@ -248,6 +248,8 @@ class WalletBatch\n     /// Erase destination data tuple from wallet database\n     bool EraseDestData(const std::string &address, const std::string &key);\n \n+    bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);\n+\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);"
      }
    ]
  },
  {
    "sha": "25d49c00c1dc9637ffe0d0f861c55a0d7d491916",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWQ0OWMwMGMxZGM5NjM3ZmZlMGQwZjg2MWM1NWEwZDdkNDkxOTE2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-05T22:33:55Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Implement IsMine for DescriptorScriptPubKeyMan\n\nAdds a set of scriptPubKeys that DescriptorScriptPubKeyMan tracks.\nIf the given script is in that set, it is considered ISMINE_SPENDABLE",
      "tree": {
        "sha": "37aa59d20cfda8800a72586b21cc1e9435e93bd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37aa59d20cfda8800a72586b21cc1e9435e93bd5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25d49c00c1dc9637ffe0d0f861c55a0d7d491916",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d49c00c1dc9637ffe0d0f861c55a0d7d491916",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25d49c00c1dc9637ffe0d0f861c55a0d7d491916",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d49c00c1dc9637ffe0d0f861c55a0d7d491916/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b99b52ad4ab3e4f44216ff2808ec53bfe38b3d2"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5eb93283064be2183e2c5539e692d7a325241c55",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d49c00c1dc9637ffe0d0f861c55a0d7d491916/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d49c00c1dc9637ffe0d0f861c55a0d7d491916/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=25d49c00c1dc9637ffe0d0f861c55a0d7d491916",
        "patch": "@@ -1436,6 +1436,10 @@ bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDest\n \n isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n {\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n     return ISMINE_NO;\n }\n \n@@ -1522,7 +1526,7 @@ std::unique_ptr<SigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(c\n \n bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n {\n-    return false;\n+    return IsMine(script);\n }\n \n const CKeyMetadata* DescriptorScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const"
      },
      {
        "sha": "398306cbbf207e9e2c7a7b7784e173e25366fa91",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d49c00c1dc9637ffe0d0f861c55a0d7d491916/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d49c00c1dc9637ffe0d0f861c55a0d7d491916/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=25d49c00c1dc9637ffe0d0f861c55a0d7d491916",
        "patch": "@@ -473,7 +473,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n private:\n     WalletDescriptor descriptor GUARDED_BY(cs_desc_man);\n \n-    using ScriptPubKeyMap = std::map<CScript, uint32_t>; // Map of scripts to descriptor range index\n+    using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n \n     ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n public:"
      }
    ]
  },
  {
    "sha": "172a4eb3d0719b2652a63300e52193d92d2363d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzJhNGViM2QwNzE5YjI2NTJhNjMzMDBlNTIxOTNkOTJkMjM2M2Qx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T20:25:10Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Implement MarkUnusedAddresses in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "99041dd745b248eee357f3b7ca49467e9ee4a4aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99041dd745b248eee357f3b7ca49467e9ee4a4aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/172a4eb3d0719b2652a63300e52193d92d2363d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/172a4eb3d0719b2652a63300e52193d92d2363d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/172a4eb3d0719b2652a63300e52193d92d2363d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/172a4eb3d0719b2652a63300e52193d92d2363d1/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25d49c00c1dc9637ffe0d0f861c55a0d7d491916",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d49c00c1dc9637ffe0d0f861c55a0d7d491916",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25d49c00c1dc9637ffe0d0f861c55a0d7d491916"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "074989fd7ab55109db4b4b1ff83a88ecdf9db519",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/172a4eb3d0719b2652a63300e52193d92d2363d1/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/172a4eb3d0719b2652a63300e52193d92d2363d1/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=172a4eb3d0719b2652a63300e52193d92d2363d1",
        "patch": "@@ -1473,6 +1473,17 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n \n void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n {\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item, mark all keypool items up to this item as used\\n\", __func__);\n+            descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n }\n \n bool DescriptorScriptPubKeyMan::SetupGeneration(bool force)"
      }
    ]
  },
  {
    "sha": "32f97aa7ee13bcc3f6aabff14372c46a823ab75f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmY5N2FhN2VlMTNiY2MzZjZhYWJmZjE0MzcyYzQ2YTgyM2FiNzVm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T21:05:05Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Implement IsHDEnabled in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "29157744d44d8088717604d3c8cc556d6c9f36fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29157744d44d8088717604d3c8cc556d6c9f36fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32f97aa7ee13bcc3f6aabff14372c46a823ab75f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32f97aa7ee13bcc3f6aabff14372c46a823ab75f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32f97aa7ee13bcc3f6aabff14372c46a823ab75f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32f97aa7ee13bcc3f6aabff14372c46a823ab75f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "172a4eb3d0719b2652a63300e52193d92d2363d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/172a4eb3d0719b2652a63300e52193d92d2363d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/172a4eb3d0719b2652a63300e52193d92d2363d1"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ebfda805afbaab1198c7df4bc085043a48e88c52",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32f97aa7ee13bcc3f6aabff14372c46a823ab75f/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32f97aa7ee13bcc3f6aabff14372c46a823ab75f/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=32f97aa7ee13bcc3f6aabff14372c46a823ab75f",
        "patch": "@@ -1493,7 +1493,8 @@ bool DescriptorScriptPubKeyMan::SetupGeneration(bool force)\n \n bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    return descriptor.descriptor->IsRange();\n }\n \n bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal)"
      }
    ]
  },
  {
    "sha": "632f0f1c5a856a4d9da0bd404b86f809221519ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzJmMGYxYzVhODU2YTRkOWRhMGJkNDA0Yjg2ZjgwOTIyMTUxOWJh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T21:28:17Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Implement GetID for DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "81d6dd0d2ef9145bd6d826656d22cf92e58cb88b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81d6dd0d2ef9145bd6d826656d22cf92e58cb88b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/632f0f1c5a856a4d9da0bd404b86f809221519ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/632f0f1c5a856a4d9da0bd404b86f809221519ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/632f0f1c5a856a4d9da0bd404b86f809221519ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/632f0f1c5a856a4d9da0bd404b86f809221519ba/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32f97aa7ee13bcc3f6aabff14372c46a823ab75f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32f97aa7ee13bcc3f6aabff14372c46a823ab75f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32f97aa7ee13bcc3f6aabff14372c46a823ab75f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1db7677da717aeab60bd6906df3d1891cc31e7e3",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/632f0f1c5a856a4d9da0bd404b86f809221519ba/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/632f0f1c5a856a4d9da0bd404b86f809221519ba/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=632f0f1c5a856a4d9da0bd404b86f809221519ba",
        "patch": "@@ -1548,7 +1548,11 @@ const CKeyMetadata* DescriptorScriptPubKeyMan::GetMetadata(const CTxDestination&\n \n uint256 DescriptorScriptPubKeyMan::GetID() const\n {\n-    return uint256();\n+    LOCK(cs_desc_man);\n+    std::string desc_str = descriptor.descriptor->ToString();\n+    uint256 id;\n+    CSHA256().Write((unsigned char*)desc_str.data(), desc_str.size()).Finalize(id.begin());\n+    return id;\n }\n \n void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal) {}"
      }
    ]
  },
  {
    "sha": "75be4afd20ec20402cf0b5e1e84bbaca59bb820e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWJlNGFmZDIwZWMyMDQwMmNmMGI1ZTFlODRiYmFjYTU5YmI4MjBl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-16T17:50:32Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Implement SetType in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "a751453ca78b08c54cdcb7cd920c89786a4573c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a751453ca78b08c54cdcb7cd920c89786a4573c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75be4afd20ec20402cf0b5e1e84bbaca59bb820e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75be4afd20ec20402cf0b5e1e84bbaca59bb820e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75be4afd20ec20402cf0b5e1e84bbaca59bb820e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75be4afd20ec20402cf0b5e1e84bbaca59bb820e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "632f0f1c5a856a4d9da0bd404b86f809221519ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/632f0f1c5a856a4d9da0bd404b86f809221519ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/632f0f1c5a856a4d9da0bd404b86f809221519ba"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "43172e2c83989537036128e68a62b5a4e4b90404",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75be4afd20ec20402cf0b5e1e84bbaca59bb820e/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75be4afd20ec20402cf0b5e1e84bbaca59bb820e/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=75be4afd20ec20402cf0b5e1e84bbaca59bb820e",
        "patch": "@@ -1555,4 +1555,8 @@ uint256 DescriptorScriptPubKeyMan::GetID() const\n     return id;\n }\n \n-void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)\n+{\n+    this->address_type = type;\n+    this->internal = internal;\n+}"
      },
      {
        "sha": "a0a954dc03cd8127051825916a0a96dcc362f8e0",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75be4afd20ec20402cf0b5e1e84bbaca59bb820e/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75be4afd20ec20402cf0b5e1e84bbaca59bb820e/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=75be4afd20ec20402cf0b5e1e84bbaca59bb820e",
        "patch": "@@ -476,11 +476,18 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n \n     ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n+\n+    OutputType address_type;\n+    bool internal;\n public:\n     DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n         :   ScriptPubKeyMan(storage),\n             descriptor(descriptor)\n         {}\n+    DescriptorScriptPubKeyMan(WalletStorage& storage, OutputType address_type, bool internal)\n+        :   ScriptPubKeyMan(storage),\n+            address_type(address_type), internal(internal)\n+        {}\n \n     mutable RecursiveMutex cs_desc_man;\n "
      }
    ]
  },
  {
    "sha": "193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTNkOTZmNjY5YmJiN2U3ZmJiYTViMGRiM2Y0MjljMTdmYmMwZTli",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T17:40:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Load the descriptor cache from the wallet file",
      "tree": {
        "sha": "ed30dc152f78ea427ece164ec33ded247b0406a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed30dc152f78ea427ece164ec33ded247b0406a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75be4afd20ec20402cf0b5e1e84bbaca59bb820e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75be4afd20ec20402cf0b5e1e84bbaca59bb820e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75be4afd20ec20402cf0b5e1e84bbaca59bb820e"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 39,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4c08fb3bfc3f5f22b151bd13e3311e7e1f3ad6a9",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b",
        "patch": "@@ -1560,3 +1560,18 @@ void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)\n     this->address_type = type;\n     this->internal = internal;\n }\n+\n+void DescriptorScriptPubKeyMan::SetCache(std::vector<std::vector<unsigned char>> cache)\n+{\n+    LOCK(cs_desc_man);\n+    descriptor.cache = cache;\n+    for (int32_t i = descriptor.range_start; i < descriptor.range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        descriptor.descriptor->ExpandFromCache(i, descriptor.cache[i - descriptor.range_start], scripts_temp, out_keys);\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+    }\n+}"
      },
      {
        "sha": "adcf217bd581f405e0bd44c41b608a0b3214be23",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b",
        "patch": "@@ -530,6 +530,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     uint256 GetID() const override;\n \n     void SetType(OutputType type, bool internal) override;\n+\n+    void SetCache(std::vector<std::vector<unsigned char>> cache);\n };\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "fbee0c26a2fa9e3bd2ba25ad869362e4f85b06ea",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b",
        "patch": "@@ -44,6 +44,7 @@ const std::string SETTINGS{\"settings\"};\n const std::string TX{\"tx\"};\n const std::string VERSION{\"version\"};\n const std::string WALLETDESCRIPTOR{\"walletdescriptor\"};\n+const std::string WALLETDESCRIPTORCACHE{\"walletdescriptorcache\"};\n const std::string WATCHMETA{\"watchmeta\"};\n const std::string WATCHS{\"watchs\"};\n } // namespace DBKeys\n@@ -203,6 +204,7 @@ class CWalletScanState {\n     std::vector<uint256> vWalletUpgrade;\n     std::map<OutputType, uint256> m_external_spk_managers;\n     std::map<OutputType, uint256> m_internal_spk_managers;\n+    std::map<uint256, std::vector<std::vector<unsigned char>>> m_descriptor_caches;\n \n     CWalletScanState() {\n     }\n@@ -431,6 +433,18 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             WalletDescriptor desc;\n             ssValue >> desc;\n             pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+        } else if (strType == DBKeys::WALLETDESCRIPTORCACHE) {\n+            uint256 desc_id;\n+            uint32_t index;\n+            ssKey >> desc_id;\n+            ssKey >> index;\n+            std::vector<unsigned char> cache_item;\n+            ssValue >> cache_item;\n+\n+            if (index >= wss.m_descriptor_caches[desc_id].size()) {\n+                wss.m_descriptor_caches[desc_id].resize(index + 1);\n+            }\n+            wss.m_descriptor_caches[desc_id][index] = cache_item;\n         } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n                    strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n                    strType != DBKeys::VERSION && strType != DBKeys::SETTINGS) {\n@@ -532,6 +546,12 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, true, true);\n     }\n \n+    // Set the descriptor caches\n+    for (auto desc_cache_pair : wss.m_descriptor_caches) {\n+        auto spk_man = pwallet->GetScriptPubKeyMan(desc_cache_pair.first);\n+        ((DescriptorScriptPubKeyMan*)spk_man)->SetCache(desc_cache_pair.second);\n+    }\n+\n     if (fNoncriticalErrors && result == DBErrors::LOAD_OK)\n         result = DBErrors::NONCRITICAL_ERROR;\n "
      },
      {
        "sha": "116f332fb63a95fe90e1108b4eae863190afe8b9",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b",
        "patch": "@@ -77,6 +77,8 @@ extern const std::string SETTINGS;\n extern const std::string TX;\n extern const std::string VERSION;\n extern const std::string WALLETDESCRIPTOR;\n+extern const std::string WALLETDESCRIPTORCKEY;\n+extern const std::string WALLETDESCRIPTORKEY;\n extern const std::string WATCHMETA;\n extern const std::string WATCHS;\n } // namespace DBKeys"
      }
    ]
  },
  {
    "sha": "a186fba22dd623bf14e1ae0dd46ffc3185709980",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTg2ZmJhMjJkZDYyM2JmMTRlMWFlMGRkNDZmZmMzMTg1NzA5OTgw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T22:23:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Implement loading of keys for DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "95f555183c94e499e25c3e0abfdc990dc8bb3b92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95f555183c94e499e25c3e0abfdc990dc8bb3b92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a186fba22dd623bf14e1ae0dd46ffc3185709980",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a186fba22dd623bf14e1ae0dd46ffc3185709980",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a186fba22dd623bf14e1ae0dd46ffc3185709980",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a186fba22dd623bf14e1ae0dd46ffc3185709980/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/193d96f669bbb7e7fbba5b0db3f429c17fbc0e9b"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 97,
      "deletions": 0
    },
    "files": [
      {
        "sha": "156a319663e189526379478a38c14fbc1e4a04f2",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a186fba22dd623bf14e1ae0dd46ffc3185709980/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a186fba22dd623bf14e1ae0dd46ffc3185709980/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=a186fba22dd623bf14e1ae0dd46ffc3185709980",
        "patch": "@@ -1575,3 +1575,21 @@ void DescriptorScriptPubKeyMan::SetCache(std::vector<std::vector<unsigned char>>\n         }\n     }\n }\n+\n+bool DescriptorScriptPubKeyMan::AddKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_desc_man);\n+    m_map_keys[key_id] = key;\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, crypted_key);\n+    return true;\n+}"
      },
      {
        "sha": "1350fdf89290b816ad7a258c2135016df7b3620d",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a186fba22dd623bf14e1ae0dd46ffc3185709980/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a186fba22dd623bf14e1ae0dd46ffc3185709980/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=a186fba22dd623bf14e1ae0dd46ffc3185709980",
        "patch": "@@ -474,11 +474,21 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     WalletDescriptor descriptor GUARDED_BY(cs_desc_man);\n \n     using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+    using KeyMap = std::map<CKeyID, CKey>;\n \n     ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n \n     OutputType address_type;\n     bool internal;\n+\n+    KeyMap m_map_keys GUARDED_BY(cs_desc_man);\n+    CryptedKeyMap m_map_crypted_keys GUARDED_BY(cs_desc_man);\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool m_decryption_thoroughly_checked = false;\n public:\n     DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n         :   ScriptPubKeyMan(storage),\n@@ -532,6 +542,9 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     void SetType(OutputType type, bool internal) override;\n \n     void SetCache(std::vector<std::vector<unsigned char>> cache);\n+\n+    bool AddKey(const CKeyID& key_id, const CKey& key);\n+    bool AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key);\n };\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "67d28d58f1c3c7df3c3df8136942a999fcebdf6f",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a186fba22dd623bf14e1ae0dd46ffc3185709980/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a186fba22dd623bf14e1ae0dd46ffc3185709980/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=a186fba22dd623bf14e1ae0dd46ffc3185709980",
        "patch": "@@ -45,6 +45,8 @@ const std::string TX{\"tx\"};\n const std::string VERSION{\"version\"};\n const std::string WALLETDESCRIPTOR{\"walletdescriptor\"};\n const std::string WALLETDESCRIPTORCACHE{\"walletdescriptorcache\"};\n+const std::string WALLETDESCRIPTORCKEY{\"walletdescriptorckey\"};\n+const std::string WALLETDESCRIPTORKEY{\"walletdescriptorkey\"};\n const std::string WATCHMETA{\"watchmeta\"};\n const std::string WATCHS{\"watchs\"};\n } // namespace DBKeys\n@@ -205,6 +207,8 @@ class CWalletScanState {\n     std::map<OutputType, uint256> m_external_spk_managers;\n     std::map<OutputType, uint256> m_internal_spk_managers;\n     std::map<uint256, std::vector<std::vector<unsigned char>>> m_descriptor_caches;\n+    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n+    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n \n     CWalletScanState() {\n     }\n@@ -445,6 +449,58 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 wss.m_descriptor_caches[desc_id].resize(index + 1);\n             }\n             wss.m_descriptor_caches[desc_id][index] = cache_item;\n+        } else if (strType == DBKeys::WALLETDESCRIPTORKEY) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            ssKey >> desc_id;\n+            ssKey >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n+            CKey key;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            wss.nKeys++;\n+            ssValue >> pkey;\n+            ssValue >> hash;\n+\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> to_hash;\n+            to_hash.reserve(pubkey.size() + pkey.size());\n+            to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n+            to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n+\n+            if (Hash(to_hash.begin(), to_hash.end()) != hash)\n+            {\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n+                return false;\n+            }\n+\n+            if (!key.Load(pkey, pubkey, true))\n+            {\n+                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+                return false;\n+            }\n+            wss.m_descriptor_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), key));\n+        } else if (strType == DBKeys::WALLETDESCRIPTORCKEY) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            ssKey >> desc_id;\n+            ssKey >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n+            std::vector<unsigned char> privkey;\n+            ssValue >> privkey;\n+            wss.nCKeys++;\n+\n+            wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n+            wss.fIsEncrypted = true;\n         } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n                    strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n                    strType != DBKeys::VERSION && strType != DBKeys::SETTINGS) {\n@@ -552,6 +608,16 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         ((DescriptorScriptPubKeyMan*)spk_man)->SetCache(desc_cache_pair.second);\n     }\n \n+    // Set the descriptor keys\n+    for (auto desc_key_pair : wss.m_descriptor_keys) {\n+        auto spk_man = pwallet->GetScriptPubKeyMan(desc_key_pair.first.first);\n+        ((DescriptorScriptPubKeyMan*)spk_man)->AddKey(desc_key_pair.first.second, desc_key_pair.second);\n+    }\n+    for (auto desc_key_pair : wss.m_descriptor_crypt_keys) {\n+        auto spk_man = pwallet->GetScriptPubKeyMan(desc_key_pair.first.first);\n+        ((DescriptorScriptPubKeyMan*)spk_man)->AddCryptedKey(desc_key_pair.first.second, desc_key_pair.second.first, desc_key_pair.second.second);\n+    }\n+\n     if (fNoncriticalErrors && result == DBErrors::LOAD_OK)\n         result = DBErrors::NONCRITICAL_ERROR;\n "
      }
    ]
  },
  {
    "sha": "b683600077a29faa1b9ac9c8030eef298a8c64f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjgzNjAwMDc3YTI5ZmFhMWI5YWM5YzgwMzBlZWYyOThhOGM2NGYy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T23:34:39Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:32Z"
      },
      "message": "Implement several simple functions in DescriptorScriptPubKeyMan\n\nImplements a bunch of one liners: UpgradeKeyMetadata, IsFirstRun, HavePrivateKeys,\nKeypoolCountExternalKeys, GetKeypoolSize, GetTimeFirstKey, CanGetAddresses,\nRewriteDB",
      "tree": {
        "sha": "16fb0e0637ea3ccf879b976c810bfa2b92e503d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16fb0e0637ea3ccf879b976c810bfa2b92e503d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b683600077a29faa1b9ac9c8030eef298a8c64f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b683600077a29faa1b9ac9c8030eef298a8c64f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b683600077a29faa1b9ac9c8030eef298a8c64f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b683600077a29faa1b9ac9c8030eef298a8c64f2/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a186fba22dd623bf14e1ae0dd46ffc3185709980",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a186fba22dd623bf14e1ae0dd46ffc3185709980",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a186fba22dd623bf14e1ae0dd46ffc3185709980"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 12,
      "deletions": 11
    },
    "files": [
      {
        "sha": "d549c49b0ef9d92e13bd598787269a257a6db550",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b683600077a29faa1b9ac9c8030eef298a8c64f2/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b683600077a29faa1b9ac9c8030eef298a8c64f2/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=b683600077a29faa1b9ac9c8030eef298a8c64f2",
        "patch": "@@ -1499,16 +1499,14 @@ bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n \n bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    return HavePrivateKeys() || descriptor.next_index < descriptor.range_end;\n }\n \n bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n {\n-    return false;\n-}\n-\n-void DescriptorScriptPubKeyMan::RewriteDB()\n-{\n+    LOCK(cs_desc_man);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n }\n \n int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime()\n@@ -1518,17 +1516,22 @@ int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime()\n \n size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys()\n {\n-    return 0;\n+    if (internal) {\n+        return 0;\n+    }\n+    return GetKeyPoolSize();\n }\n \n unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n {\n-    return 0;\n+    LOCK(cs_desc_man);\n+    return descriptor.range_end - descriptor.next_index;\n }\n \n int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n {\n-    return 0;\n+    LOCK(cs_desc_man);\n+    return descriptor.creation_time;\n }\n \n std::unique_ptr<SigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script) const"
      },
      {
        "sha": "ed379519ef9df753222792420ba0bca5bd783e29",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b683600077a29faa1b9ac9c8030eef298a8c64f2/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b683600077a29faa1b9ac9c8030eef298a8c64f2/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=b683600077a29faa1b9ac9c8030eef298a8c64f2",
        "patch": "@@ -521,8 +521,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool HavePrivateKeys() const override;\n \n-    void RewriteDB() override;\n-\n     int64_t GetOldestKeyPoolTime() override;\n     size_t KeypoolCountExternalKeys() override;\n     unsigned int GetKeyPoolSize() const override;"
      }
    ]
  },
  {
    "sha": "738e3615095053670101ba121acbacae3c4cd53c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzhlMzYxNTA5NTA1MzY3MDEwMWJhMTIxYWNiYWNhZTNjNGNkNTNj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-10T20:02:43Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Implement writing descriptorkeys, descriptorckeys, and descriptors to wallet file",
      "tree": {
        "sha": "fbb770210b6251f1f3e9aabd57fb55851a829d7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbb770210b6251f1f3e9aabd57fb55851a829d7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/738e3615095053670101ba121acbacae3c4cd53c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/738e3615095053670101ba121acbacae3c4cd53c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/738e3615095053670101ba121acbacae3c4cd53c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/738e3615095053670101ba121acbacae3c4cd53c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b683600077a29faa1b9ac9c8030eef298a8c64f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b683600077a29faa1b9ac9c8030eef298a8c64f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b683600077a29faa1b9ac9c8030eef298a8c64f2"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 57,
      "deletions": 0
    },
    "files": [
      {
        "sha": "06a0404be1705a1e05ff039f8c99986ead008570",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/738e3615095053670101ba121acbacae3c4cd53c/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/738e3615095053670101ba121acbacae3c4cd53c/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=738e3615095053670101ba121acbacae3c4cd53c",
        "patch": "@@ -1486,6 +1486,31 @@ void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n     }\n }\n \n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+        return true;\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n bool DescriptorScriptPubKeyMan::SetupGeneration(bool force)\n {\n     return false;"
      },
      {
        "sha": "75f10ea8a102afeb9bb6ca169db369830c784c2b",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/738e3615095053670101ba121acbacae3c4cd53c/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/738e3615095053670101ba121acbacae3c4cd53c/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=738e3615095053670101ba121acbacae3c4cd53c",
        "patch": "@@ -489,6 +489,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     //! keeps track of whether Unlock has run a thorough check before\n     bool m_decryption_thoroughly_checked = false;\n+\n+    bool AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey);\n public:\n     DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n         :   ScriptPubKeyMan(storage),"
      },
      {
        "sha": "f01e7f451c02c9c8f5d4a89e910abaf9e9a76286",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/738e3615095053670101ba121acbacae3c4cd53c/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/738e3615095053670101ba121acbacae3c4cd53c/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=738e3615095053670101ba121acbacae3c4cd53c",
        "patch": "@@ -194,6 +194,31 @@ bool WalletBatch::WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bo\n     return WriteIC(make_pair(key, type), id);\n }\n \n+bool WalletBatch::WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const CPrivKey& privkey)\n+{\n+    // hash pubkey/privkey to accelerate wallet load\n+    std::vector<unsigned char> key;\n+    key.reserve(pubkey.size() + privkey.size());\n+    key.insert(key.end(), pubkey.begin(), pubkey.end());\n+    key.insert(key.end(), privkey.begin(), privkey.end());\n+\n+    return WriteIC(std::make_pair(DBKeys::WALLETDESCRIPTORKEY, std::make_pair(desc_id, pubkey)), std::make_pair(privkey, Hash(key.begin(), key.end())), false);\n+}\n+\n+bool WalletBatch::WriteCryptedDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const std::vector<unsigned char>& secret)\n+{\n+    if (!WriteIC(std::make_pair(DBKeys::WALLETDESCRIPTORCKEY, std::make_pair(desc_id, pubkey)), secret, false)) {\n+        return false;\n+    }\n+    EraseIC(std::make_pair(DBKeys::WALLETDESCRIPTORKEY, std::make_pair(desc_id, pubkey)));\n+    return true;\n+}\n+\n+bool WalletBatch::WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor)\n+{\n+    return WriteIC(make_pair(DBKeys::WALLETDESCRIPTOR, desc_id), descriptor);\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};"
      },
      {
        "sha": "6d6c9cb7960779faf1dcbf950a5a09f30baccef5",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/738e3615095053670101ba121acbacae3c4cd53c/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/738e3615095053670101ba121acbacae3c4cd53c/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=738e3615095053670101ba121acbacae3c4cd53c",
        "patch": "@@ -9,6 +9,7 @@\n #include <amount.h>\n #include <script/sign.h>\n #include <wallet/db.h>\n+#include <wallet/walletutil.h>\n #include <key.h>\n \n #include <stdint.h>\n@@ -245,6 +246,10 @@ class WalletBatch\n \n     bool WriteMinVersion(int nVersion);\n \n+    bool WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const CPrivKey& privkey);\n+    bool WriteCryptedDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const std::vector<unsigned char>& secret);\n+    bool WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor);\n+\n     /// Write destination data key,value tuple to database\n     bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);\n     /// Erase destination data tuple from wallet database"
      }
    ]
  },
  {
    "sha": "a7a85d2ae9f8955f805c58753e0b9d3ed3c859e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2E4NWQyYWU5Zjg5NTVmODA1YzU4NzUzZTBiOWQzZWQzYzg1OWU0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-10T20:03:17Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Implement SetupGeneration for DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "178619bd9f122927201b75879d37e7af507601fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/178619bd9f122927201b75879d37e7af507601fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7a85d2ae9f8955f805c58753e0b9d3ed3c859e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7a85d2ae9f8955f805c58753e0b9d3ed3c859e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7a85d2ae9f8955f805c58753e0b9d3ed3c859e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7a85d2ae9f8955f805c58753e0b9d3ed3c859e4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "738e3615095053670101ba121acbacae3c4cd53c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/738e3615095053670101ba121acbacae3c4cd53c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/738e3615095053670101ba121acbacae3c4cd53c"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 63,
      "deletions": 1
    },
    "files": [
      {
        "sha": "add5c9082a94b16bced066fb68525f0eabca769d",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 1,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7a85d2ae9f8955f805c58753e0b9d3ed3c859e4/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7a85d2ae9f8955f805c58753e0b9d3ed3c859e4/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=a7a85d2ae9f8955f805c58753e0b9d3ed3c859e4",
        "patch": "@@ -1513,7 +1513,69 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n \n bool DescriptorScriptPubKeyMan::SetupGeneration(bool force)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (descriptor.descriptor || force) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    // Make a seed\n+    CKey seed_key;\n+    seed_key.MakeNewKey(true);\n+    CPubKey seed = seed_key.GetPubKey();\n+    assert(seed_key.VerifyPubKey(seed));\n+\n+    // Get the extended key\n+    CExtKey master_key;\n+    master_key.SetSeed(seed_key.begin(), seed_key.size());\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+    CPubKey master_pubkey = master_key.key.GetPubKey();\n+    assert(master_key.key.VerifyPubKey(master_pubkey));\n+\n+    // Add the seed to the wallet\n+    std::string internal_path = internal ? \"1\" : \"0\";\n+    std::string desc_str;\n+    switch (address_type) {\n+    case OutputType::LEGACY: {\n+        desc_str = \"pkh(\" + xpub + \"/44'/0'/0'/\" + internal_path + \"/*)\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_str = \"sh(wpkh(\" + xpub + \"/49'/0'/0'/\" + internal_path + \"/*))\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_str = \"wpkh(\" + xpub + \"/84'/0'/0'/\" + internal_path + \"/*)\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    descriptor = w_desc;\n+\n+    // Store the master private key and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n }\n \n bool DescriptorScriptPubKeyMan::IsHDEnabled() const"
      }
    ]
  },
  {
    "sha": "e46d3fd5d708655fd933603a3fce7f544d58b219",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDZkM2ZkNWQ3MDg2NTVmZDkzMzYwM2EzZmNlN2Y1NDRkNThiMjE5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-10T20:38:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Implement TopUp in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "33a470c16c8286d292707f425e99c966ff42fd01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33a470c16c8286d292707f425e99c966ff42fd01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e46d3fd5d708655fd933603a3fce7f544d58b219",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e46d3fd5d708655fd933603a3fce7f544d58b219",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e46d3fd5d708655fd933603a3fce7f544d58b219",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e46d3fd5d708655fd933603a3fce7f544d58b219/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7a85d2ae9f8955f805c58753e0b9d3ed3c859e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7a85d2ae9f8955f805c58753e0b9d3ed3c859e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7a85d2ae9f8955f805c58753e0b9d3ed3c859e4"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 79,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c3b4dd4f301054b0680f429adfe95195c76aaf66",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 1,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e46d3fd5d708655fd933603a3fce7f544d58b219/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e46d3fd5d708655fd933603a3fce7f544d58b219/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=e46d3fd5d708655fd933603a3fce7f544d58b219",
        "patch": "@@ -1466,9 +1466,79 @@ void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal,\n {\n }\n \n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n {\n-    return false;\n+    if (m_storage.IsLocked()) return false;\n+\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0)\n+        target_size = size;\n+    else\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // Make sure we have everything between range_start and range_end\n+    int32_t range_size = descriptor.range_end - descriptor.range_start;\n+    int32_t highest_cached_index = descriptor.range_start + descriptor.cache.size();\n+    int32_t to_fill = std::max(range_size - (int)descriptor.cache.size(), 0);\n+\n+    // Fill up the rest of the pool\n+    int missing_pool = std::max(std::max((int)target_size, 1) - (descriptor.range_end - descriptor.next_index), 0);\n+    to_fill += missing_pool;\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!descriptor.descriptor->IsRange()) {\n+        to_fill = descriptor.cache.size() == 0 ? 1 : 0;\n+        missing_pool = 0;\n+        descriptor.range_end = 1;\n+        descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = highest_cached_index; i < highest_cached_index + to_fill; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        std::vector<unsigned char> cache;\n+        if (!descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &cache)) return false;\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        // Write the cache\n+        if (!batch.WriteDescriptorCache(id, i, cache)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+        }\n+        descriptor.cache.push_back(std::move(cache));\n+    }\n+    descriptor.range_end += missing_pool;\n+    batch.WriteDescriptor(GetID(), descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert((uint32_t)descriptor.range_end - (uint32_t)descriptor.range_start == descriptor.cache.size());\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n }\n \n void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)"
      },
      {
        "sha": "c0a918ed19afc0b628d70530749b4afaf1e05b8d",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e46d3fd5d708655fd933603a3fce7f544d58b219/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e46d3fd5d708655fd933603a3fce7f544d58b219/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=e46d3fd5d708655fd933603a3fce7f544d58b219",
        "patch": "@@ -491,6 +491,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool m_decryption_thoroughly_checked = false;\n \n     bool AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey);\n+\n+    KeyMap GetKeys() const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n public:\n     DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n         :   ScriptPubKeyMan(storage),"
      },
      {
        "sha": "e82e358b7773ab8422b95a86f6ef2ba5346aca31",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e46d3fd5d708655fd933603a3fce7f544d58b219/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e46d3fd5d708655fd933603a3fce7f544d58b219/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=e46d3fd5d708655fd933603a3fce7f544d58b219",
        "patch": "@@ -219,6 +219,11 @@ bool WalletBatch::WriteDescriptor(const uint256& desc_id, const WalletDescriptor\n     return WriteIC(make_pair(DBKeys::WALLETDESCRIPTOR, desc_id), descriptor);\n }\n \n+bool WalletBatch::WriteDescriptorCache(const uint256& desc_id, int32_t index, std::vector<unsigned char> cache_item)\n+{\n+    return WriteIC(make_pair(make_pair(DBKeys::WALLETDESCRIPTORCACHE, desc_id), index), cache_item);\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};"
      },
      {
        "sha": "f88b2729f691a63ccb6f2a8bb12b3f3fde9c00ae",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e46d3fd5d708655fd933603a3fce7f544d58b219/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e46d3fd5d708655fd933603a3fce7f544d58b219/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=e46d3fd5d708655fd933603a3fce7f544d58b219",
        "patch": "@@ -249,6 +249,7 @@ class WalletBatch\n     bool WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const CPrivKey& privkey);\n     bool WriteCryptedDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const std::vector<unsigned char>& secret);\n     bool WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor);\n+    bool WriteDescriptorCache(const uint256& desc_id, int32_t index, std::vector<unsigned char> cache_item);\n \n     /// Write destination data key,value tuple to database\n     bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);"
      }
    ]
  },
  {
    "sha": "2a0a784aa9e8551d500f39da2693abfd06f17191",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTBhNzg0YWE5ZTg1NTFkNTAwZjM5ZGEyNjkzYWJmZDA2ZjE3MTkx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-10T21:21:19Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Add IsSingleType to Descriptors\n\nIsSingleType will return whether the descriptor will give one or multiple scriptPubKeys",
      "tree": {
        "sha": "7a15b17fd9d1efbbd90135167729bc48cc78f074",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a15b17fd9d1efbbd90135167729bc48cc78f074"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a0a784aa9e8551d500f39da2693abfd06f17191",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a0a784aa9e8551d500f39da2693abfd06f17191",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a0a784aa9e8551d500f39da2693abfd06f17191",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a0a784aa9e8551d500f39da2693abfd06f17191/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e46d3fd5d708655fd933603a3fce7f544d58b219",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e46d3fd5d708655fd933603a3fce7f544d58b219",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e46d3fd5d708655fd933603a3fce7f544d58b219"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5b6978f1cb336855f8898c9ebf97243446ac912d",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a0a784aa9e8551d500f39da2693abfd06f17191/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a0a784aa9e8551d500f39da2693abfd06f17191/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=2a0a784aa9e8551d500f39da2693abfd06f17191",
        "patch": "@@ -512,6 +512,7 @@ class AddressDescriptor final : public DescriptorImpl\n public:\n     AddressDescriptor(CTxDestination destination) : DescriptorImpl({}, {}, \"addr\"), m_destination(std::move(destination)) {}\n     bool IsSolvable() const final { return false; }\n+    bool IsSingleType() const final { return true; }\n };\n \n /** A parsed raw(H) descriptor. */\n@@ -524,6 +525,7 @@ class RawDescriptor final : public DescriptorImpl\n public:\n     RawDescriptor(CScript script) : DescriptorImpl({}, {}, \"raw\"), m_script(std::move(script)) {}\n     bool IsSolvable() const final { return false; }\n+    bool IsSingleType() const final { return true; }\n };\n \n /** A parsed pk(P) descriptor. */\n@@ -533,6 +535,7 @@ class PKDescriptor final : public DescriptorImpl\n     std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, const CScript*, FlatSigningProvider&) const override { return Vector(GetScriptForRawPubKey(keys[0])); }\n public:\n     PKDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"pk\") {}\n+    bool IsSingleType() const final { return true; }\n };\n \n /** A parsed pkh(P) descriptor. */\n@@ -547,6 +550,7 @@ class PKHDescriptor final : public DescriptorImpl\n     }\n public:\n     PKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"pkh\") {}\n+    bool IsSingleType() const final { return true; }\n };\n \n /** A parsed wpkh(P) descriptor. */\n@@ -561,6 +565,7 @@ class WPKHDescriptor final : public DescriptorImpl\n     }\n public:\n     WPKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"wpkh\") {}\n+    bool IsSingleType() const final { return true; }\n };\n \n /** A parsed combo(P) descriptor. */\n@@ -584,6 +589,7 @@ class ComboDescriptor final : public DescriptorImpl\n     }\n public:\n     ComboDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"combo\") {}\n+    bool IsSingleType() const final { return false; }\n };\n \n /** A parsed multi(...) or sortedmulti(...) descriptor */\n@@ -603,6 +609,7 @@ class MultisigDescriptor final : public DescriptorImpl\n     }\n public:\n     MultisigDescriptor(int threshold, std::vector<std::unique_ptr<PubkeyProvider>> providers, bool sorted = false) : DescriptorImpl(std::move(providers), {}, sorted ? \"sortedmulti\" : \"multi\"), m_threshold(threshold), m_sorted(sorted) {}\n+    bool IsSingleType() const final { return true; }\n };\n \n /** A parsed sh(...) descriptor. */\n@@ -612,6 +619,7 @@ class SHDescriptor final : public DescriptorImpl\n     std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider&) const override { return Vector(GetScriptForDestination(ScriptHash(*script))); }\n public:\n     SHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), \"sh\") {}\n+    bool IsSingleType() const final { return true; }\n };\n \n /** A parsed wsh(...) descriptor. */\n@@ -621,6 +629,7 @@ class WSHDescriptor final : public DescriptorImpl\n     std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider&) const override { return Vector(GetScriptForDestination(WitnessV0ScriptHash(*script))); }\n public:\n     WSHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), \"wsh\") {}\n+    bool IsSingleType() const final { return true; }\n };\n \n ////////////////////////////////////////////////////////////////////////////"
      },
      {
        "sha": "a841cbe8ddc47322af06603f867f081ea26cd961",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a0a784aa9e8551d500f39da2693abfd06f17191/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a0a784aa9e8551d500f39da2693abfd06f17191/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=2a0a784aa9e8551d500f39da2693abfd06f17191",
        "patch": "@@ -42,6 +42,9 @@ struct Descriptor {\n     /** Convert the descriptor back to a string, undoing parsing. */\n     virtual std::string ToString() const = 0;\n \n+    /** Whether this descriptor will return one scriptPubKey or multiple (aka is or is not combo) */\n+    virtual bool IsSingleType() const = 0;\n+\n     /** Convert the descriptor to a private string. This fails if the provided provider does not have the relevant private keys. */\n     virtual bool ToPrivateString(const SigningProvider& provider, std::string& out) const = 0;\n "
      }
    ]
  },
  {
    "sha": "c80e25d8743d7e5bfe866d32bf394cf55166bde5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODBlMjVkODc0M2Q3ZTViZmU4NjZkMzJiZjM5NGNmNTUxNjZiZGU1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-23T19:03:53Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Add a function to determine the OutputType of a scriptPubKey",
      "tree": {
        "sha": "a4958669505c850c8deee2c23069f1b9bd075717",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4958669505c850c8deee2c23069f1b9bd075717"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c80e25d8743d7e5bfe866d32bf394cf55166bde5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c80e25d8743d7e5bfe866d32bf394cf55166bde5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c80e25d8743d7e5bfe866d32bf394cf55166bde5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c80e25d8743d7e5bfe866d32bf394cf55166bde5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a0a784aa9e8551d500f39da2693abfd06f17191",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a0a784aa9e8551d500f39da2693abfd06f17191",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a0a784aa9e8551d500f39da2693abfd06f17191"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 39,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c13b0cd834cbe7d0a3d4a79924cd974376ab7359",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c80e25d8743d7e5bfe866d32bf394cf55166bde5/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c80e25d8743d7e5bfe866d32bf394cf55166bde5/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=c80e25d8743d7e5bfe866d32bf394cf55166bde5",
        "patch": "@@ -111,3 +111,36 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n     default: assert(false);\n     }\n }\n+\n+Optional<OutputType> DetermineOutputType(const CScript& script, const SigningProvider& provider)\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    txnouttype script_type = Solver(script, solutions);\n+\n+    switch(script_type) {\n+    case TX_PUBKEYHASH:\n+        return OutputType::LEGACY;\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    case TX_WITNESS_V0_KEYHASH:\n+    case TX_WITNESS_UNKNOWN:\n+        return OutputType::BECH32;\n+    case TX_SCRIPTHASH: {\n+        CScriptID script_id = CScriptID(uint160(solutions[0]));\n+        CScript redeem_script;\n+        if (provider.GetCScript(script_id, redeem_script)) {\n+            script_type = Solver(redeem_script, solutions);\n+            switch(script_type) {\n+            case TX_WITNESS_V0_SCRIPTHASH:\n+            case TX_WITNESS_V0_KEYHASH:\n+            case TX_WITNESS_UNKNOWN:\n+                return OutputType::P2SH_SEGWIT;\n+            default:\n+                return OutputType::LEGACY;\n+            }\n+        }\n+        return nullopt;\n+    }\n+    default:\n+        return nullopt;\n+    }\n+}"
      },
      {
        "sha": "a598f6e3841d668a71c84cb5637cf3dc38b2f472",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c80e25d8743d7e5bfe866d32bf394cf55166bde5/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c80e25d8743d7e5bfe866d32bf394cf55166bde5/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=c80e25d8743d7e5bfe866d32bf394cf55166bde5",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_OUTPUTTYPE_H\n \n #include <attributes.h>\n+#include <optional.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n \n@@ -49,4 +50,9 @@ std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n  */\n CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore, const CScript& script, OutputType);\n \n+/**\n+ * Determine the OutputType for a scriptPubKey given the SigningProvider used for signing inputs that spend outputs with this scriptPubKeys\n+ */\n+Optional<OutputType> DetermineOutputType(const CScript& script, const SigningProvider& provider);\n+\n #endif // BITCOIN_OUTPUTTYPE_H"
      }
    ]
  },
  {
    "sha": "cafb33b3f0c2e5518b0e08479483d15aec1a51a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWZiMzNiM2YwYzJlNTUxOGIwZTA4NDc5NDgzZDE1YWVjMWE1MWEw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-10T22:01:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Implement GetNewDestination for DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "ab59adf6b22b10389c79dffc6a006efd5b831797",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab59adf6b22b10389c79dffc6a006efd5b831797"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cafb33b3f0c2e5518b0e08479483d15aec1a51a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cafb33b3f0c2e5518b0e08479483d15aec1a51a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cafb33b3f0c2e5518b0e08479483d15aec1a51a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cafb33b3f0c2e5518b0e08479483d15aec1a51a0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c80e25d8743d7e5bfe866d32bf394cf55166bde5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c80e25d8743d7e5bfe866d32bf394cf55166bde5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c80e25d8743d7e5bfe866d32bf394cf55166bde5"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 55,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c125d2b63042c6ada83cf77bf433e41b3ddcd5ac",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 1,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cafb33b3f0c2e5518b0e08479483d15aec1a51a0/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cafb33b3f0c2e5518b0e08479483d15aec1a51a0/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=cafb33b3f0c2e5518b0e08479483d15aec1a51a0",
        "patch": "@@ -1431,7 +1431,61 @@ void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n \n bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n-    return false;\n+    if (!CanGetAddresses(internal)) {\n+        error = \"No private keys available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        if (descriptor.descriptor->IsSingleType() && type != address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (descriptor.cache.size() <= (unsigned int)(descriptor.next_index - descriptor.range_start) && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        descriptor.descriptor->ExpandFromCache(descriptor.next_index, descriptor.cache[descriptor.next_index - descriptor.range_start], scripts_temp, out_keys);\n+\n+        if (descriptor.descriptor->IsSingleType()) {\n+            Optional<OutputType> out_script_type = DetermineOutputType(scripts_temp[0], out_keys);\n+            if (out_script_type && out_script_type == type) {\n+                ExtractDestination(scripts_temp[0], dest);\n+            } else {\n+                throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+            }\n+        } else {\n+            // This is a combo descriptor, get the correct type\n+            bool found = false;\n+            for (auto script : scripts_temp) {\n+                Optional<OutputType> out_script_type = DetermineOutputType(script, out_keys);\n+                if (out_script_type) {\n+                    if (out_script_type == type) {\n+                        found = true;\n+                    }\n+                } else {\n+                    throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+                }\n+\n+                if (found) {\n+                    ExtractDestination(script, dest);\n+                    break;\n+                }\n+            }\n+            if (!found) {\n+                throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Combo descriptor did not give an address with the expected type\");\n+            }\n+        }\n+        descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+        return true;\n+    }\n }\n \n isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const"
      }
    ]
  },
  {
    "sha": "0743ed804f1183ec5542ea1ec8b4952682b04b1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzQzZWQ4MDRmMTE4M2VjNTU0MmVhMWVjOGI0OTUyNjgyYjA0YjFj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T18:32:05Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Implement Unlock and Encrypt in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "11dd48bb7ef10a517c853fb71db56bc6bab23646",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11dd48bb7ef10a517c853fb71db56bc6bab23646"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0743ed804f1183ec5542ea1ec8b4952682b04b1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0743ed804f1183ec5542ea1ec8b4952682b04b1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0743ed804f1183ec5542ea1ec8b4952682b04b1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0743ed804f1183ec5542ea1ec8b4952682b04b1c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cafb33b3f0c2e5518b0e08479483d15aec1a51a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cafb33b3f0c2e5518b0e08479483d15aec1a51a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cafb33b3f0c2e5518b0e08479483d15aec1a51a0"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 51,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9caca025fbedd1909e0e23a683dc132de96db751",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 2,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0743ed804f1183ec5542ea1ec8b4952682b04b1c/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0743ed804f1183ec5542ea1ec8b4952682b04b1c/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=0743ed804f1183ec5542ea1ec8b4952682b04b1c",
        "patch": "@@ -1499,12 +1499,61 @@ isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n-    return false;\n+    {\n+        LOCK(cs_desc_man);\n+        if (!m_map_keys.empty())\n+            return false;\n+\n+        bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = m_map_crypted_keys.begin();\n+        for (; mi != m_map_crypted_keys.end(); ++mi)\n+        {\n+            const CPubKey &pubkey = (*mi).second.first;\n+            const std::vector<unsigned char> &crypted_secret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, crypted_secret, pubkey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (m_decryption_thoroughly_checked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        m_decryption_thoroughly_checked = true;\n+    }\n+    return true;\n }\n \n bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n }\n \n bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)"
      }
    ]
  },
  {
    "sha": "5fa530445875d588c7369b89374dd52de4d71151",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmE1MzA0NDU4NzVkNTg4YzczNjliODkzNzRkZDUyZGU0ZDcxMTUx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T18:44:53Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Implement KeepDestination and ReturnDestination in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "7153d8bca4cff758031845da573a6cb26c971ed8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7153d8bca4cff758031845da573a6cb26c971ed8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fa530445875d588c7369b89374dd52de4d71151",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fa530445875d588c7369b89374dd52de4d71151",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fa530445875d588c7369b89374dd52de4d71151",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fa530445875d588c7369b89374dd52de4d71151/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0743ed804f1183ec5542ea1ec8b4952682b04b1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0743ed804f1183ec5542ea1ec8b4952682b04b1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0743ed804f1183ec5542ea1ec8b4952682b04b1c"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "dbd1b26d144bdc9e2e2103499a5734e7b6fa4b5c",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fa530445875d588c7369b89374dd52de4d71151/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fa530445875d588c7369b89374dd52de4d71151/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=5fa530445875d588c7369b89374dd52de4d71151",
        "patch": "@@ -1561,12 +1561,15 @@ bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bo\n     return false;\n }\n \n-void DescriptorScriptPubKeyMan::KeepDestination(int64_t index)\n-{\n-}\n-\n void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n {\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (descriptor.next_index - 1 == index) {\n+        descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), descriptor);\n+    NotifyCanGetAddressesChanged();\n }\n \n std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const"
      },
      {
        "sha": "764fe7ed5e81e7125698afed4d167ae44d9b22d1",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fa530445875d588c7369b89374dd52de4d71151/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fa530445875d588c7369b89374dd52de4d71151/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=5fa530445875d588c7369b89374dd52de4d71151",
        "patch": "@@ -512,7 +512,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n \n     bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n-    void KeepDestination(int64_t index) override;\n     void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n \n     bool TopUp(unsigned int size = 0) override;"
      }
    ]
  },
  {
    "sha": "168dcf6fd9fc9ffc7ca83ad2acad66c347b31cf7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjhkY2Y2ZmQ5ZmM5ZmZjN2NhODNhZDJhY2FkNjZjMzQ3YjMxY2Y3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T19:54:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Implement GetReservedDestination in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "4dd87c814376f494ee213cc00884709238d09896",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dd87c814376f494ee213cc00884709238d09896"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/168dcf6fd9fc9ffc7ca83ad2acad66c347b31cf7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168dcf6fd9fc9ffc7ca83ad2acad66c347b31cf7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/168dcf6fd9fc9ffc7ca83ad2acad66c347b31cf7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168dcf6fd9fc9ffc7ca83ad2acad66c347b31cf7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5fa530445875d588c7369b89374dd52de4d71151",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fa530445875d588c7369b89374dd52de4d71151",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fa530445875d588c7369b89374dd52de4d71151"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a139473f95d2308e1ed2fe3c949ebf532dbb2128",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/168dcf6fd9fc9ffc7ca83ad2acad66c347b31cf7/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/168dcf6fd9fc9ffc7ca83ad2acad66c347b31cf7/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=168dcf6fd9fc9ffc7ca83ad2acad66c347b31cf7",
        "patch": "@@ -1558,7 +1558,11 @@ bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, Walle\n \n bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = descriptor.next_index - 1;\n+    return result;\n }\n \n void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)"
      }
    ]
  },
  {
    "sha": "7fa74bad125f8a07cfc01486ff478966e597265e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmE3NGJhZDEyNWY4YTA3Y2ZjMDE0ODZmZjQ3ODk2NmU1OTcyNjVl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T20:14:17Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Implement GetKeypoolOldestTime and only display it if greater than 0",
      "tree": {
        "sha": "ba8b4cbfbc59ecc783e3fff82fcb9d554dddfe5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba8b4cbfbc59ecc783e3fff82fcb9d554dddfe5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7fa74bad125f8a07cfc01486ff478966e597265e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fa74bad125f8a07cfc01486ff478966e597265e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7fa74bad125f8a07cfc01486ff478966e597265e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fa74bad125f8a07cfc01486ff478966e597265e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "168dcf6fd9fc9ffc7ca83ad2acad66c347b31cf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168dcf6fd9fc9ffc7ca83ad2acad66c347b31cf7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/168dcf6fd9fc9ffc7ca83ad2acad66c347b31cf7"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7766becdba2d8b7094ad88e9161511e53a92a5f3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fa74bad125f8a07cfc01486ff478966e597265e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fa74bad125f8a07cfc01486ff478966e597265e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7fa74bad125f8a07cfc01486ff478966e597265e",
        "patch": "@@ -2464,13 +2464,16 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n \n     size_t kpExternalSize = pwallet->KeypoolCountExternalKeys();\n     const auto bal = pwallet->GetBalance();\n+    int64_t kp_oldest = pwallet->GetOldestKeyPoolTime();\n     obj.pushKV(\"walletname\", pwallet->GetName());\n     obj.pushKV(\"walletversion\", pwallet->GetVersion());\n     obj.pushKV(\"balance\", ValueFromAmount(bal.m_mine_trusted));\n     obj.pushKV(\"unconfirmed_balance\", ValueFromAmount(bal.m_mine_untrusted_pending));\n     obj.pushKV(\"immature_balance\", ValueFromAmount(bal.m_mine_immature));\n     obj.pushKV(\"txcount\",       (int)pwallet->mapWallet.size());\n-    obj.pushKV(\"keypoololdest\", pwallet->GetOldestKeyPoolTime());\n+    if (kp_oldest > 0) {\n+        obj.pushKV(\"keypoololdest\", kp_oldest);\n+    }\n     obj.pushKV(\"keypoolsize\", (int64_t)kpExternalSize);\n \n     LegacyScriptPubKeyMan* spk_man = pwallet->GetLegacyScriptPubKeyMan();"
      },
      {
        "sha": "826a209536c94944c626900b1698d4066a89acc7",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fa74bad125f8a07cfc01486ff478966e597265e/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fa74bad125f8a07cfc01486ff478966e597265e/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=7fa74bad125f8a07cfc01486ff478966e597265e",
        "patch": "@@ -1778,7 +1778,7 @@ bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n \n int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime()\n {\n-    return GetTime();\n+    return 0;\n }\n \n size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys()"
      }
    ]
  },
  {
    "sha": "7e0a7bc0af8d250ea22f373545343c3dc4a1d692",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTBhN2JjMGFmOGQyNTBlYTIyZjM3MzU0NTM0M2MzZGM0YTFkNjky",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T20:41:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Implement GetSigningProvider for descriptor wallets",
      "tree": {
        "sha": "e8414a2d5ba5b6ce6c19086bf8d5e1933d9dca70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8414a2d5ba5b6ce6c19086bf8d5e1933d9dca70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e0a7bc0af8d250ea22f373545343c3dc4a1d692",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e0a7bc0af8d250ea22f373545343c3dc4a1d692",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e0a7bc0af8d250ea22f373545343c3dc4a1d692",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e0a7bc0af8d250ea22f373545343c3dc4a1d692/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fa74bad125f8a07cfc01486ff478966e597265e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fa74bad125f8a07cfc01486ff478966e597265e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fa74bad125f8a07cfc01486ff478966e597265e"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 18,
      "deletions": 1
    },
    "files": [
      {
        "sha": "54727345235ad3485936dee9864e6e2c9db762a8",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e0a7bc0af8d250ea22f373545343c3dc4a1d692/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e0a7bc0af8d250ea22f373545343c3dc4a1d692/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=7e0a7bc0af8d250ea22f373545343c3dc4a1d692",
        "patch": "@@ -1803,7 +1803,24 @@ int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n \n std::unique_ptr<SigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script) const\n {\n-    return nullptr;\n+    LOCK(cs_desc_man);\n+\n+    // Find the index of the script\n+    auto it = m_map_script_pub_keys.find(script);\n+    if (it == m_map_script_pub_keys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    FlatSigningProvider master_provider;\n+    master_provider.keys = GetKeys();\n+\n+    // Get the scripts, keys, and key origins for this script\n+    std::unique_ptr<FlatSigningProvider> out_keys = MakeUnique<FlatSigningProvider>();\n+    std::vector<CScript> scripts_temp;\n+    if (!descriptor.descriptor->ExpandFromCache(index, descriptor.cache[index - descriptor.range_start], scripts_temp, *out_keys)) return nullptr;\n+    descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n+    return std::move(out_keys);\n }\n \n bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)"
      }
    ]
  },
  {
    "sha": "d3819b681f766a17deef4650bd6297178924f04b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzgxOWI2ODFmNzY2YTE3ZGVlZjQ2NTBiZDYyOTcxNzg5MjRmMDRi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-07T01:55:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Change GetMetadata to use unique_ptr<CKeyMetadata>",
      "tree": {
        "sha": "dc810770da05574642656d60e750638b1695685e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc810770da05574642656d60e750638b1695685e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3819b681f766a17deef4650bd6297178924f04b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3819b681f766a17deef4650bd6297178924f04b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3819b681f766a17deef4650bd6297178924f04b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3819b681f766a17deef4650bd6297178924f04b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e0a7bc0af8d250ea22f373545343c3dc4a1d692",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e0a7bc0af8d250ea22f373545343c3dc4a1d692",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e0a7bc0af8d250ea22f373545343c3dc4a1d692"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b15b6fc85bdf20f54de0eba2d5739fb189c1b818",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3819b681f766a17deef4650bd6297178924f04b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3819b681f766a17deef4650bd6297178924f04b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d3819b681f766a17deef4650bd6297178924f04b",
        "patch": "@@ -3835,7 +3835,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n     ScriptPubKeyMan* spk_man = pwallet->GetScriptPubKeyMan(scriptPubKey);\n     if (spk_man) {\n-        if (const CKeyMetadata* meta = spk_man->GetMetadata(dest)) {\n+        if (const std::unique_ptr<CKeyMetadata> meta = spk_man->GetMetadata(dest)) {\n             ret.pushKV(\"timestamp\", meta->nCreateTime);\n             if (meta->has_key_origin) {\n                 ret.pushKV(\"hdkeypath\", WriteHDKeypath(meta->key_origin.path));"
      },
      {
        "sha": "7e085c8754111d3b9b03b6b024fc6377d851223c",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3819b681f766a17deef4650bd6297178924f04b/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3819b681f766a17deef4650bd6297178924f04b/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=d3819b681f766a17deef4650bd6297178924f04b",
        "patch": "@@ -497,22 +497,22 @@ bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sig\n     }\n }\n \n-const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n+std::unique_ptr<CKeyMetadata> LegacyScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n {\n     LOCK(cs_KeyStore);\n \n     CKeyID key_id = GetKeyForDestination(*this, dest);\n     if (!key_id.IsNull()) {\n         auto it = mapKeyMetadata.find(key_id);\n         if (it != mapKeyMetadata.end()) {\n-            return &it->second;\n+            return MakeUnique<CKeyMetadata>(it->second);\n         }\n     }\n \n     CScript scriptPubKey = GetScriptForDestination(dest);\n     auto it = m_script_metadata.find(CScriptID(scriptPubKey));\n     if (it != m_script_metadata.end()) {\n-        return &it->second;\n+        return MakeUnique<CKeyMetadata>(it->second);\n     }\n \n     return nullptr;\n@@ -1828,7 +1828,7 @@ bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData&\n     return IsMine(script);\n }\n \n-const CKeyMetadata* DescriptorScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n+std::unique_ptr<CKeyMetadata> DescriptorScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n {\n     return nullptr;\n }"
      },
      {
        "sha": "510852f60b013c2860da52c1710ec994959f560e",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3819b681f766a17deef4650bd6297178924f04b/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3819b681f766a17deef4650bd6297178924f04b/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=d3819b681f766a17deef4650bd6297178924f04b",
        "patch": "@@ -202,7 +202,7 @@ class ScriptPubKeyMan\n \n     virtual int64_t GetTimeFirstKey() const { return 0; }\n \n-    virtual const CKeyMetadata* GetMetadata(const CTxDestination& dest) const { return nullptr; }\n+    virtual std::unique_ptr<CKeyMetadata> GetMetadata(const CTxDestination& dest) const { return nullptr; }\n \n     virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n \n@@ -345,7 +345,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     int64_t GetTimeFirstKey() const override;\n \n-    const CKeyMetadata* GetMetadata(const CTxDestination& dest) const override;\n+    std::unique_ptr<CKeyMetadata> GetMetadata(const CTxDestination& dest) const override;\n \n     bool CanGetAddresses(bool internal = false) override;\n \n@@ -530,7 +530,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     int64_t GetTimeFirstKey() const override;\n \n-    const CKeyMetadata* GetMetadata(const CTxDestination& dest) const override;\n+    std::unique_ptr<CKeyMetadata> GetMetadata(const CTxDestination& dest) const override;\n \n     bool CanGetAddresses(bool internal = false) override;\n "
      }
    ]
  },
  {
    "sha": "19715e2af619448f4d527e003edec08abf4f0caf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTcxNWUyYWY2MTk0NDhmNGQ1MjdlMDAzZWRlYzA4YWJmNGYwY2Fm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-07T02:20:39Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Implement GetMetadata in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "2e05e613ceb4ac25db2d0e21629d1dd0fdcbd74c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e05e613ceb4ac25db2d0e21629d1dd0fdcbd74c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19715e2af619448f4d527e003edec08abf4f0caf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19715e2af619448f4d527e003edec08abf4f0caf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19715e2af619448f4d527e003edec08abf4f0caf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19715e2af619448f4d527e003edec08abf4f0caf/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3819b681f766a17deef4650bd6297178924f04b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3819b681f766a17deef4650bd6297178924f04b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3819b681f766a17deef4650bd6297178924f04b"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "72238f31180ae04dd44da0b9ebfaea04a518a0b3",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19715e2af619448f4d527e003edec08abf4f0caf/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19715e2af619448f4d527e003edec08abf4f0caf/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=19715e2af619448f4d527e003edec08abf4f0caf",
        "patch": "@@ -1830,6 +1830,19 @@ bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData&\n \n std::unique_ptr<CKeyMetadata> DescriptorScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n {\n+    std::unique_ptr<SigningProvider> provider = GetSigningProvider(GetScriptForDestination(dest));\n+    if (provider) {\n+        KeyOriginInfo orig;\n+        CKeyID key_id = GetKeyForDestination(*provider, dest);\n+        if (provider->GetKeyOrigin(key_id, orig)) {\n+            LOCK(cs_desc_man);\n+            std::unique_ptr<CKeyMetadata> meta = MakeUnique<CKeyMetadata>();\n+            meta->key_origin = orig;\n+            meta->has_key_origin = true;\n+            meta->nCreateTime = descriptor.creation_time;\n+            return meta;\n+        }\n+    }\n     return nullptr;\n }\n "
      }
    ]
  },
  {
    "sha": "d0503470768039446d21db48c49d180b33164c3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDUwMzQ3MDc2ODAzOTQ0NmQyMWRiNDhjNDlkMTgwYjMzMTY0YzNk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T22:21:21Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Be able to create new wallets with DescriptorScriptPubKeyMans as backing",
      "tree": {
        "sha": "fc8c8e286056fbfbae894c6f34d8e0020b1aa913",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc8c8e286056fbfbae894c6f34d8e0020b1aa913"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0503470768039446d21db48c49d180b33164c3d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0503470768039446d21db48c49d180b33164c3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0503470768039446d21db48c49d180b33164c3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0503470768039446d21db48c49d180b33164c3d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19715e2af619448f4d527e003edec08abf4f0caf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19715e2af619448f4d527e003edec08abf4f0caf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19715e2af619448f4d527e003edec08abf4f0caf"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 52,
      "deletions": 11
    },
    "files": [
      {
        "sha": "10426503710ab98d4aa2e26479e474972960d43c",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0503470768039446d21db48c49d180b33164c3d/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0503470768039446d21db48c49d180b33164c3d/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=d0503470768039446d21db48c49d180b33164c3d",
        "patch": "@@ -169,6 +169,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createwallet\", 1, \"disable_private_keys\"},\n     { \"createwallet\", 2, \"blank\"},\n     { \"createwallet\", 4, \"avoid_reuse\"},\n+    { \"createwallet\", 5, \"descriptors\"},\n     { \"getnodeaddresses\", 0, \"count\"},\n     { \"stop\", 0, \"wait\" },\n };"
      },
      {
        "sha": "9e1d6cd17fb068fe0c78bfd30e57b663b97ca2fe",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0503470768039446d21db48c49d180b33164c3d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0503470768039446d21db48c49d180b33164c3d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d0503470768039446d21db48c49d180b33164c3d",
        "patch": "@@ -2693,6 +2693,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             {\"blank\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n             {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Encrypt the wallet with this passphrase.\"},\n             {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"false\", \"Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind.\"},\n+            {\"descriptors\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a native descriptor wallet. The wallet will use descriptors internally to handle address creation\"},\n         },\n         RPCResult{\n             \"{\\n\"\n@@ -2728,6 +2729,9 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     if (!request.params[4].isNull() && request.params[4].get_bool()) {\n         flags |= WALLET_FLAG_AVOID_REUSE;\n     }\n+    if (!request.params[5].isNull() && request.params[5].get_bool()) {\n+        flags |= WALLET_FLAG_DESCRIPTORS;\n+    }\n \n     std::string error;\n     std::shared_ptr<CWallet> wallet;\n@@ -4269,7 +4273,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"label\",\"address_type\"} },\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n-    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\", \"passphrase\", \"avoid_reuse\"} },\n+    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\", \"passphrase\", \"avoid_reuse\", \"descriptors\"} },\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },"
      },
      {
        "sha": "271db8b4fe6ce222b4c86dc2c8db6a49a28e24d5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 8,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0503470768039446d21db48c49d180b33164c3d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0503470768039446d21db48c49d180b33164c3d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d0503470768039446d21db48c49d180b33164c3d",
        "patch": "@@ -221,10 +221,14 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n             // Set a seed for the wallet\n             {\n                 LOCK(wallet->cs_wallet);\n-                for (auto spk_man : wallet->GetActiveScriptPubKeyMans()) {\n-                    if (!spk_man->SetupGeneration()) {\n-                        error = \"Unable to generate initial keys\";\n-                        return WalletCreationStatus::CREATION_FAILED;\n+                if (wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                    wallet->SetupDescriptorScriptPubKeyMans();\n+                } else {\n+                    for (auto spk_man : wallet->GetActiveScriptPubKeyMans()) {\n+                        if (!spk_man->SetupGeneration()) {\n+                            error = \"Unable to generate initial keys\";\n+                            return WalletCreationStatus::CREATION_FAILED;\n+                        }\n                     }\n                 }\n             }\n@@ -3741,10 +3745,15 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         if (!(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n             LOCK(walletInstance->cs_wallet);\n-            for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n-                if (!spk_man->SetupGeneration()) {\n-                    error = _(\"Unable to generate initial keys\").translated;\n-                    return nullptr;\n+            if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                walletInstance->SetupDescriptorScriptPubKeyMans();\n+            } else {\n+                // SetupDescriptorScriptPubKeyMans already calls SetupGeneration for us\n+                for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n+                    if (!spk_man->SetupGeneration()) {\n+                        error = _(\"Unable to generate initial keys\").translated;\n+                        return nullptr;\n+                    }\n                 }\n             }\n         }\n@@ -4239,6 +4248,29 @@ void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n     m_spk_managers[id] = std::move(spk_manager);\n }\n \n+void CWallet::SetupDescriptorScriptPubKeyMans()\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    for (bool internal : {false, true}) {\n+        for (OutputType t : OUTPUT_TYPES) {\n+            auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, t, internal));\n+            if (IsCrypted()) {\n+                if (IsLocked()) {\n+                    throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+                }\n+                if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {\n+                    throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n+                }\n+            }\n+            spk_manager->SetupGeneration();\n+            uint256 id = spk_manager->GetID();\n+            m_spk_managers[id] = std::move(spk_manager);\n+            SetActiveScriptPubKeyMan(id, t, internal);\n+        }\n+    }\n+}\n+\n void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly)\n {\n     auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;"
      },
      {
        "sha": "8dddfdf79a53d6a372bdd6495e4ec76f905aa89a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0503470768039446d21db48c49d180b33164c3d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0503470768039446d21db48c49d180b33164c3d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d0503470768039446d21db48c49d180b33164c3d",
        "patch": "@@ -1192,6 +1192,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     //! Sets the active ScriptPubKeyMan for the specified type and internal\n     void SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly = false);\n+\n+    //! Create new DescriptoScriptPubKeyMans and add them to the wallet\n+    void SetupDescriptorScriptPubKeyMans();\n };\n \n /**"
      },
      {
        "sha": "cd6b0e04c6b8fa756855748df97243d03f7e10bd",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0503470768039446d21db48c49d180b33164c3d/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0503470768039446d21db48c49d180b33164c3d/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=d0503470768039446d21db48c49d180b33164c3d",
        "patch": "@@ -250,14 +250,15 @@ class WalletBatch\n     bool WriteCryptedDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const std::vector<unsigned char>& secret);\n     bool WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor);\n     bool WriteDescriptorCache(const uint256& desc_id, int32_t index, std::vector<unsigned char> cache_item);\n+    bool EraseDescriptorCache(const uint256& desc_id, int32_t index);\n+\n+    bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);\n \n     /// Write destination data key,value tuple to database\n     bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);\n     /// Erase destination data tuple from wallet database\n     bool EraseDestData(const std::string &address, const std::string &key);\n \n-    bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);\n-\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);"
      }
    ]
  },
  {
    "sha": "b3d3684cf9c9ae0287a1fc7666af0dbd67585952",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2QzNjg0Y2Y5YzlhZTAyODdhMWZjNzY2NmFmMGRiZDY3NTg1OTUy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-16T19:22:08Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Generate new descriptors when encrypting",
      "tree": {
        "sha": "4c0c56de24b9e29aac00c1aff495b4cce27c22ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c0c56de24b9e29aac00c1aff495b4cce27c22ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3d3684cf9c9ae0287a1fc7666af0dbd67585952",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3d3684cf9c9ae0287a1fc7666af0dbd67585952",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3d3684cf9c9ae0287a1fc7666af0dbd67585952",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3d3684cf9c9ae0287a1fc7666af0dbd67585952/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0503470768039446d21db48c49d180b33164c3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0503470768039446d21db48c49d180b33164c3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0503470768039446d21db48c49d180b33164c3d"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "14fd34316c7a75890261264b39ffd9f6cbc69355",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3d3684cf9c9ae0287a1fc7666af0dbd67585952/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3d3684cf9c9ae0287a1fc7666af0dbd67585952/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b3d3684cf9c9ae0287a1fc7666af0dbd67585952",
        "patch": "@@ -585,8 +585,11 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         Lock();\n         Unlock(strWalletPassphrase);\n \n-        // if we are using HD, replace the HD seed with a new one\n-        if (auto spk_man = GetLegacyScriptPubKeyMan()) {\n+        // If we are using descriptors, make new descriptors\n+        if (IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET)) {\n+            SetupDescriptorScriptPubKeyMans();\n+        } else if (auto spk_man = GetLegacyScriptPubKeyMan()) {\n+            // if we are using HD, replace the HD seed with a new one\n             if (spk_man->IsHDEnabled()) {\n                 if (!spk_man->SetupGeneration(true)) {\n                     return false;"
      }
    ]
  },
  {
    "sha": "0fc666f32ff8472215e05e85dd609901a02dc3ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmM2NjZmMzJmZjg0NzIyMTVlMDVlODVkZDYwOTkwMWEwMmRjM2Fl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-08-14T18:25:53Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Add IsLegacy to CWallet so that the GUI knows whether to show watchonly",
      "tree": {
        "sha": "6bac52f590f5ba6601b5d30fc6da5505eef5496b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bac52f590f5ba6601b5d30fc6da5505eef5496b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fc666f32ff8472215e05e85dd609901a02dc3ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fc666f32ff8472215e05e85dd609901a02dc3ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fc666f32ff8472215e05e85dd609901a02dc3ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fc666f32ff8472215e05e85dd609901a02dc3ae/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3d3684cf9c9ae0287a1fc7666af0dbd67585952",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3d3684cf9c9ae0287a1fc7666af0dbd67585952",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3d3684cf9c9ae0287a1fc7666af0dbd67585952"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 40,
      "deletions": 11
    },
    "files": [
      {
        "sha": "cdd814aa9c9ada2fa282d876161b8f9dd6f56952",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=0fc666f32ff8472215e05e85dd609901a02dc3ae",
        "patch": "@@ -477,6 +477,7 @@ class WalletImpl : public Wallet\n     {\n         RemoveWallet(m_wallet);\n     }\n+    bool isLegacy() override { return m_wallet->IsLegacy(); }\n     std::unique_ptr<Handler> handleUnload(UnloadFn fn) override\n     {\n         return MakeHandler(m_wallet->NotifyUnload.connect(fn));"
      },
      {
        "sha": "03ac26e6ade6fcdd55f0c4533f6254aa6b01e73c",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=0fc666f32ff8472215e05e85dd609901a02dc3ae",
        "patch": "@@ -263,6 +263,9 @@ class Wallet\n     // Remove wallet.\n     virtual void remove() = 0;\n \n+    //! Return whether is a legacy wallet\n+    virtual bool isLegacy() = 0;\n+\n     //! Register handler for unload message.\n     using UnloadFn = std::function<void()>;\n     virtual std::unique_ptr<Handler> handleUnload(UnloadFn fn) = 0;"
      },
      {
        "sha": "593cc9c0ccd1bae7e67906b995aeb490e4d3800e",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=0fc666f32ff8472215e05e85dd609901a02dc3ae",
        "patch": "@@ -161,20 +161,27 @@ void OverviewPage::setBalance(const interfaces::WalletBalances& balances)\n {\n     int unit = walletModel->getOptionsModel()->getDisplayUnit();\n     m_balances = balances;\n-    if (walletModel->privateKeysDisabled()) {\n-        ui->labelBalance->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance, false, BitcoinUnits::separatorAlways));\n-        ui->labelUnconfirmed->setText(BitcoinUnits::formatWithUnit(unit, balances.unconfirmed_watch_only_balance, false, BitcoinUnits::separatorAlways));\n-        ui->labelImmature->setText(BitcoinUnits::formatWithUnit(unit, balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n-        ui->labelTotal->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance + balances.unconfirmed_watch_only_balance + balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+    if (walletModel->isLegacy()) {\n+        if (walletModel->privateKeysDisabled()) {\n+            ui->labelBalance->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelUnconfirmed->setText(BitcoinUnits::formatWithUnit(unit, balances.unconfirmed_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelImmature->setText(BitcoinUnits::formatWithUnit(unit, balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelTotal->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance + balances.unconfirmed_watch_only_balance + balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+        } else {\n+            ui->labelBalance->setText(BitcoinUnits::formatWithUnit(unit, balances.balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelUnconfirmed->setText(BitcoinUnits::formatWithUnit(unit, balances.unconfirmed_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelImmature->setText(BitcoinUnits::formatWithUnit(unit, balances.immature_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelTotal->setText(BitcoinUnits::formatWithUnit(unit, balances.balance + balances.unconfirmed_balance + balances.immature_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelWatchAvailable->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelWatchPending->setText(BitcoinUnits::formatWithUnit(unit, balances.unconfirmed_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelWatchImmature->setText(BitcoinUnits::formatWithUnit(unit, balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelWatchTotal->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance + balances.unconfirmed_watch_only_balance + balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+        }\n     } else {\n         ui->labelBalance->setText(BitcoinUnits::formatWithUnit(unit, balances.balance, false, BitcoinUnits::separatorAlways));\n         ui->labelUnconfirmed->setText(BitcoinUnits::formatWithUnit(unit, balances.unconfirmed_balance, false, BitcoinUnits::separatorAlways));\n         ui->labelImmature->setText(BitcoinUnits::formatWithUnit(unit, balances.immature_balance, false, BitcoinUnits::separatorAlways));\n         ui->labelTotal->setText(BitcoinUnits::formatWithUnit(unit, balances.balance + balances.unconfirmed_balance + balances.immature_balance, false, BitcoinUnits::separatorAlways));\n-        ui->labelWatchAvailable->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance, false, BitcoinUnits::separatorAlways));\n-        ui->labelWatchPending->setText(BitcoinUnits::formatWithUnit(unit, balances.unconfirmed_watch_only_balance, false, BitcoinUnits::separatorAlways));\n-        ui->labelWatchImmature->setText(BitcoinUnits::formatWithUnit(unit, balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n-        ui->labelWatchTotal->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance + balances.unconfirmed_watch_only_balance + balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n     }\n     // only show immature (newly mined) balance if it's non-zero, so as not to complicate things\n     // for the non-mining users"
      },
      {
        "sha": "5044dcfc891921bcc93467ccd90eca1fb4c014d0",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=0fc666f32ff8472215e05e85dd609901a02dc3ae",
        "patch": "@@ -563,6 +563,11 @@ bool WalletModel::privateKeysDisabled() const\n     return m_wallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n }\n \n+bool WalletModel::isLegacy() const\n+{\n+    return m_wallet->isLegacy();\n+}\n+\n bool WalletModel::canGetAddresses() const\n {\n     return m_wallet->canGetAddresses();"
      },
      {
        "sha": "46c597ee3d3e300c4c751c88dec2fcce53b77319",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=0fc666f32ff8472215e05e85dd609901a02dc3ae",
        "patch": "@@ -142,6 +142,7 @@ class WalletModel : public QObject\n     static bool isWalletEnabled();\n     bool privateKeysDisabled() const;\n     bool canGetAddresses() const;\n+    bool isLegacy() const;\n \n     interfaces::Node& node() const { return m_node; }\n     interfaces::Wallet& wallet() const { return *m_wallet; }"
      },
      {
        "sha": "012f1071f7545f76689ae54778478adaa024a969",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0fc666f32ff8472215e05e85dd609901a02dc3ae",
        "patch": "@@ -1861,7 +1861,7 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+    if (pwallet->IsLegacy() && pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n     }\n "
      },
      {
        "sha": "0379868f28a21634272d1bd2cefae699fbc65a09",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0fc666f32ff8472215e05e85dd609901a02dc3ae",
        "patch": "@@ -4289,3 +4289,12 @@ void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool interna\n     }\n     NotifyCanGetAddressesChanged();\n }\n+\n+bool CWallet::IsLegacy() const\n+{\n+    if (m_internal_spk_managers.count(OutputType::LEGACY) == 0) {\n+        return false;\n+    }\n+    auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n+    return spk_man != nullptr;\n+}"
      },
      {
        "sha": "7c8863e1a31313690f39564393836a252301f530",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0fc666f32ff8472215e05e85dd609901a02dc3ae",
        "patch": "@@ -1129,6 +1129,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n        returns false if unknown, non-tolerable flags are present */\n     bool SetWalletFlags(uint64_t overwriteFlags, bool memOnly);\n \n+    /** Determine if we are a legacy wallet */\n+    bool IsLegacy() const;\n+\n     /** Returns a bracketed wallet name for displaying in logs, will return [default wallet] if the wallet has no name */\n     const std::string GetDisplayName() const override {\n         std::string wallet_name = GetName().length() == 0 ? \"default wallet\" : GetName();"
      },
      {
        "sha": "638f9becd82438bbe4f571380085962d10cd6764",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fc666f32ff8472215e05e85dd609901a02dc3ae/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=0fc666f32ff8472215e05e85dd609901a02dc3ae",
        "patch": "@@ -667,7 +667,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n            wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys, wss.m_unknown_records);\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n-    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta) {\n+    if (pwallet->IsLegacy() && (wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta) {\n         auto spk_man = pwallet->GetOrCreateLegacyScriptPubKeyMan();\n         if (spk_man) {\n             LOCK(spk_man->cs_KeyStore);"
      }
    ]
  },
  {
    "sha": "b7cf42ac121742d57e3a5e27065e11d756adc8e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2NmNDJhYzEyMTc0MmQ1N2UzYTVlMjcwNjVlMTFkNzU2YWRjOGUx",
    "commit": {
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2019-08-01T22:08:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "add importdescriptors RPC and tests for native descriptor wallets\n\nCo-authored-by: Andrew Chow <achow101-github@achow101.com>",
      "tree": {
        "sha": "e29e3bfaf1d0ffaf27b6fe6489d9ec9d49b39587",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e29e3bfaf1d0ffaf27b6fe6489d9ec9d49b39587"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7cf42ac121742d57e3a5e27065e11d756adc8e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7cf42ac121742d57e3a5e27065e11d756adc8e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7cf42ac121742d57e3a5e27065e11d756adc8e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7cf42ac121742d57e3a5e27065e11d756adc8e1/comments",
    "author": {
      "login": "hugohn",
      "id": 4769925,
      "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugohn",
      "html_url": "https://github.com/hugohn",
      "followers_url": "https://api.github.com/users/hugohn/followers",
      "following_url": "https://api.github.com/users/hugohn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugohn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugohn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
      "organizations_url": "https://api.github.com/users/hugohn/orgs",
      "repos_url": "https://api.github.com/users/hugohn/repos",
      "events_url": "https://api.github.com/users/hugohn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugohn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fc666f32ff8472215e05e85dd609901a02dc3ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fc666f32ff8472215e05e85dd609901a02dc3ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fc666f32ff8472215e05e85dd609901a02dc3ae"
      }
    ],
    "stats": {
      "total": 755,
      "additions": 755,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e21b8d45da3f029417a7012d30c593f35533a753",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=b7cf42ac121742d57e3a5e27065e11d756adc8e1",
        "patch": "@@ -131,6 +131,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"importpubkey\", 2, \"rescan\" },\n     { \"importmulti\", 0, \"requests\" },\n     { \"importmulti\", 1, \"options\" },\n+    { \"importdescriptors\", 0, \"requests\" },\n     { \"verifychain\", 0, \"checklevel\" },\n     { \"verifychain\", 1, \"nblocks\" },\n     { \"getblockstats\", 0, \"hash_or_height\" },"
      },
      {
        "sha": "dfc375476864ba90b051626d330e299d58771c3d",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 274,
        "deletions": 0,
        "changes": 274,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=b7cf42ac121742d57e3a5e27065e11d756adc8e1",
        "patch": "@@ -1445,3 +1445,277 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (!data.exists(\"range\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor is ranged, please specify the range\");\n+            }\n+            auto range = ParseDescriptorRange(data[\"range\"]);\n+            range_start = range.first;\n+            range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptor must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptor must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Check if all private keys are provided\n+        bool have_privkeys = true;\n+        for (const auto& entry : keys.pubkeys) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!keys.GetKey(key_id, key)) {\n+                have_privkeys = false;\n+            }\n+        }\n+\n+        // If private keys are enabled, abort if private keys are not provided\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !have_privkeys) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->HasWalletDescriptor(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+            // it's a reimport, so maybe clear the existing descriptor's cache\n+            pwallet->MaybeClearWalletDescriptorCache(w_desc);\n+        }\n+\n+        // Add descriptor to the wallet\n+        Optional<OutputType> parsed_output_type;\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label, parsed_output_type);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!parsed_output_type) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n+            } else {\n+                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *parsed_output_type, internal);\n+            }\n+        }\n+\n+        result.pushKV(\"success\", UniValue(true));\n+    } catch (const UniValue& e) {\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+    } catch (...) {\n+        result.pushKV(\"success\", UniValue(false));\n+\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+    }\n+    if (warnings.size()) result.pushKV(\"warnings\", warnings);\n+    return result;\n+}\n+\n+UniValue importdescriptors(const JSONRPCRequest& main_request) {\n+    // Acquire the wallet\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    CWallet* const pwallet = wallet.get();\n+    if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+            RPCHelpMan{\"importdescriptors\",\n+                \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if using an early timestamp, during that time, other rpc calls\\n\"\n+            \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\",\n+                {\n+                    {\"requests\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Data to be imported\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Descriptor to import.\"},\n+                                    {\"active\", RPCArg::Type::BOOL, /* default */ \"true\", \"Set this descriptor to be the active descriptor for the corresponding output type/externality\"},\n+                                    {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import\"},\n+                                    {\"next_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If a ranged descriptor is set to active, this specifies the next index to generate addresses from\"},\n+                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Time to start rescanning the blockchain for this descriptor, in seconds since epoch (Jan 1 1970 GMT).\\n\"\n+        \"                                                              Use the string \\\"now\\\" to substitute the current synced blockchain time.\\n\"\n+        \"                                                              \\\"now\\\" can be specified to bypass scanning, for outputs which are known to never have been used, and\\n\"\n+        \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest timestamp\\n\"\n+        \"                                                              of all descriptors being imported will be scanned.\",\n+                                        /* oneline_description */ \"\", {\"timestamp | \\\"now\\\"\", \"integer / string\"}\n+                                    },\n+                                    {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n+                                    {\"label\", RPCArg::Type::STR, /* default */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n+                                },\n+                            },\n+                        },\n+                        \"\\\"requests\\\"\"},\n+                },\n+                RPCResult{\n+            \"\\nResponse is an array with the same size as the input that has the execution result :\\n\"\n+            \"  [{\\\"success\\\": true}, {\\\"success\\\": true, \\\"warnings\\\": [\\\"Ignoring irrelevant private key\\\"]}, {\\\"success\\\": false, \\\"error\\\": {\\\"code\\\": -1, \\\"message\\\": \\\"Internal Server Error\\\"}}, ...]\\n\"\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"importdescriptors\", \"'[{ \\\"desc\\\": \\\"<my descriptor>\\\", \\\"timestamp\\\":1455191478, \\\"internal\\\": true }, \"\n+                                          \"{ \\\"desc\\\": \\\"<my desccriptor 2>\\\", \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\") +\n+                    HelpExampleCli(\"importdescriptors\", \"'[{ \\\"desc\\\": \\\"<my descriptor>\\\", \\\"timestamp\\\":1455191478, \\\"active\\\": true, \\\"range\\\": [0,100], \\\"label\\\": \\\"<my bech32 wallet>\\\" }]'\")\n+                },\n+            }.Check(main_request);\n+\n+    //  Make sure wallet is a descriptor wallet\n+    if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"importdescriptors is not available for non-descriptor wallets\");\n+    }\n+\n+    RPCTypeCheck(main_request.params, {UniValue::VARR, UniValue::VOBJ});\n+\n+    WalletRescanReserver reserver(pwallet);\n+    if (!reserver.reserve()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n+    }\n+\n+    const UniValue& requests = main_request.params[0];\n+    const int64_t minimum_timestamp = 1;\n+    int64_t now = 0;\n+    int64_t lowest_timestamp = 0;\n+    bool rescan = false;\n+    UniValue response(UniValue::VARR);\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n+        EnsureWalletIsUnlocked(pwallet);\n+\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        if (tip_height) {\n+            now = locked_chain->getBlockMedianTimePast(*tip_height);\n+            // initialize lowest timestamp to chain tip\n+            lowest_timestamp = locked_chain->getBlockTime(*tip_height);\n+        }\n+\n+        // Get all timestamps and extract the lowest timestamp\n+        for (const UniValue& request : requests.getValues()) {\n+            // This throws an error if \"timestamp\" doesn't exist\n+            const int64_t timestamp = std::max(GetImportTimestamp(request, now), minimum_timestamp);\n+            const UniValue result = ProcessDescriptorImport(pwallet, request, timestamp);\n+            response.push_back(result);\n+\n+            if (lowest_timestamp > timestamp ) {\n+                lowest_timestamp = timestamp;\n+            }\n+\n+            // If we know the chain tip, and at least one request was successful then allow rescan\n+            if (!rescan && result[\"success\"].get_bool()) {\n+                rescan = true;\n+            }\n+        }\n+        pwallet->ConnectScriptPubKeyManNotifiers();\n+    }\n+\n+    // Rescan the blockchain using the lowest timestamp\n+    if (rescan) {\n+        int64_t scanned_time = pwallet->RescanFromTime(lowest_timestamp, reserver, true /* update */);\n+        {\n+            auto locked_chain = pwallet->chain().lock();\n+            LOCK(pwallet->cs_wallet);\n+            pwallet->ReacceptWalletTransactions();\n+        }\n+\n+        if (pwallet->IsAbortingRescan()) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted by user.\");\n+        }\n+\n+        if (scanned_time > lowest_timestamp) {\n+            std::vector<UniValue> results = response.getValues();\n+            response.clear();\n+            response.setArray();\n+\n+            // Compose the response\n+            for (unsigned int i = 0; i < requests.size(); ++i) {\n+                const UniValue& request = requests.getValues().at(i);\n+\n+                // If the descriptor timestamp is within the successfully scanned\n+                // range, or if the import result already has an error set, let\n+                // the result stand unmodified. Otherwise replace the result\n+                // with an error message.\n+                if (scanned_time <= GetImportTimestamp(request, now) || results.at(i).exists(\"error\")) {\n+                    response.push_back(results.at(i));\n+                } else {\n+                    UniValue result = UniValue(UniValue::VOBJ);\n+                    result.pushKV(\"success\", UniValue(false));\n+                    result.pushKV(\n+                        \"error\",\n+                        JSONRPCError(\n+                            RPC_MISC_ERROR,\n+                            strprintf(\"Rescan failed for descriptor with timestamp %d. There was an error reading a \"\n+                                      \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                      \"could contain transactions pertaining to the desc. As a result, transactions \"\n+                                      \"and coins using this desc may not appear in the wallet. This error could be \"\n+                                      \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                      \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                      \"and -rescan options).\",\n+                                GetImportTimestamp(request, now), scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));\n+                    response.push_back(std::move(result));\n+                }\n+            }\n+        }\n+    }\n+\n+    return response;\n+}"
      },
      {
        "sha": "9e6c7c00cd1c5206cd4f6a18bf3c0fff28d7b866",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b7cf42ac121742d57e3a5e27065e11d756adc8e1",
        "patch": "@@ -4262,6 +4262,7 @@ UniValue importwallet(const JSONRPCRequest& request);\n UniValue importprunedfunds(const JSONRPCRequest& request);\n UniValue removeprunedfunds(const JSONRPCRequest& request);\n UniValue importmulti(const JSONRPCRequest& request);\n+UniValue importdescriptors(const JSONRPCRequest& request);\n \n // clang-format off\n static const CRPCCommand commands[] =\n@@ -4294,6 +4295,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"importprunedfunds\",                &importprunedfunds,             {\"rawtransaction\",\"txoutproof\"} },\n     { \"wallet\",             \"importpubkey\",                     &importpubkey,                  {\"pubkey\",\"label\",\"rescan\"} },\n     { \"wallet\",             \"importwallet\",                     &importwallet,                  {\"filename\"} },\n+    { \"wallet\",             \"importdescriptors\",                &importdescriptors,             {\"requests\"} },\n     { \"wallet\",             \"keypoolrefill\",                    &keypoolrefill,                 {\"newsize\"} },\n     { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n     { \"wallet\",             \"listlabels\",                       &listlabels,                    {\"purpose\"} },"
      },
      {
        "sha": "1979ea6b165bced1013aa6d9356da49b148f0c12",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=b7cf42ac121742d57e3a5e27065e11d756adc8e1",
        "patch": "@@ -1651,6 +1651,21 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n     return true;\n }\n \n+bool DescriptorScriptPubKeyMan::ClearDescriptorCache() {\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    int32_t highest_cached_index = descriptor.range_start + descriptor.cache.size();\n+    for (uint32_t i = highest_cached_index; i < (uint32_t)highest_cached_index + descriptor.cache.size(); ++i) {\n+        if (!batch.EraseDescriptorCache(id, i)) {\n+            throw std::runtime_error(std::string(__func__) + \": removing cache item failed\");\n+        }\n+    }\n+    descriptor.cache.clear();\n+\n+    return true;\n+}\n+\n void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n {\n     LOCK(cs_desc_man);\n@@ -1666,6 +1681,15 @@ void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n     }\n }\n \n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n {\n     AssertLockHeld(cs_desc_man);\n@@ -1893,3 +1917,35 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     m_map_crypted_keys[key_id] = make_pair(pubkey, crypted_key);\n     return true;\n }\n+\n+bool DescriptorScriptPubKeyMan::HasWalletDescriptor(const WalletDescriptor& desc) const\n+{\n+    LOCK(cs_desc_man);\n+    return descriptor.descriptor != nullptr && desc.descriptor != nullptr && descriptor.descriptor->ToString() == desc.descriptor->ToString();\n+}\n+\n+void DescriptorScriptPubKeyMan::WriteDescriptor()\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!batch.WriteDescriptor(GetID(), descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+}\n+\n+const WalletDescriptor DescriptorScriptPubKeyMan::GetWalletDescriptor() const\n+{\n+    return descriptor;\n+}\n+\n+const std::vector<CScript> DescriptorScriptPubKeyMan::GetScriptPubKeys() const\n+{\n+    LOCK(cs_desc_man);\n+    std::vector<CScript> script_pub_keys;\n+    script_pub_keys.reserve(m_map_script_pub_keys.size());\n+\n+    for (auto const& script_pub_key: m_map_script_pub_keys) {\n+        script_pub_keys.push_back(script_pub_key.first);\n+    }\n+    return script_pub_keys;\n+}"
      },
      {
        "sha": "14f8e16219a61754c21f6fb50bf67313d72b7583",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=b7cf42ac121742d57e3a5e27065e11d756adc8e1",
        "patch": "@@ -546,6 +546,14 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool AddKey(const CKeyID& key_id, const CKey& key);\n     bool AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key);\n+\n+    bool HasWalletDescriptor(const WalletDescriptor& desc) const;\n+    bool ClearDescriptorCache();\n+    void AddDescriptorKey(const CKey& key, const CPubKey &pubkey);\n+    void WriteDescriptor();\n+\n+    const WalletDescriptor GetWalletDescriptor() const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n+    const std::vector<CScript> GetScriptPubKeys() const;\n };\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "a08a1b284104b3a06a5b0be733a0e4957d1cc6d4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 108,
        "deletions": 0,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b7cf42ac121742d57e3a5e27065e11d756adc8e1",
        "patch": "@@ -4276,6 +4276,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n \n void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly)\n {\n+    WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n     auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n     auto spk_man = m_spk_managers.at(id).get();\n     spk_man->SetType(type, internal);\n@@ -4298,3 +4299,110 @@ bool CWallet::IsLegacy() const\n     auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n     return spk_man != nullptr;\n }\n+\n+DescriptorScriptPubKeyMan* CWallet::HasWalletDescriptor(const WalletDescriptor& desc) const\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        return nullptr;\n+    }\n+\n+    for (auto& spk_man_pair : m_spk_managers) {\n+        // Try to downcast to DescriptorScriptPubKeyMan then check if the descriptors match\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man_pair.second.get());\n+        if (spk_manager != nullptr && spk_manager->HasWalletDescriptor(desc)) {\n+            return spk_manager;\n+        }\n+    }\n+\n+    return nullptr;\n+}\n+\n+bool CWallet::MaybeClearWalletDescriptorCache(const WalletDescriptor& desc)\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        WalletLogPrintf(\"Cannot update WalletDescriptor in a non-descriptor wallet\\n\");\n+        return false;\n+    }\n+\n+    auto spk_manager = HasWalletDescriptor(desc);\n+    if (!spk_manager) {\n+        WalletLogPrintf(\"Cannot find spkMan for descriptor\\n\");\n+        return false;\n+    }\n+\n+    WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n+    LOCK2(cs_wallet, spk_manager->cs_desc_man);\n+\n+    // Clear the cache if necessary\n+    if (desc.range_start < spk_manager->GetWalletDescriptor().range_start) {\n+        spk_manager->ClearDescriptorCache();\n+    }\n+\n+    // Remove from maps of spkMans\n+    for (bool internal : {false, true}) {\n+        for (OutputType t : OUTPUT_TYPES) {\n+            auto active_spk_man = GetScriptPubKeyMan(t, internal);\n+            if (active_spk_man && active_spk_man->GetID() == spk_manager->GetID()) {\n+                if (internal) {\n+                    m_internal_spk_managers.erase(t);\n+                } else {\n+                    m_external_spk_managers.erase(t);\n+                }\n+                break;\n+            }\n+        }\n+    }\n+    m_spk_managers.erase(spk_manager->GetID());\n+\n+    return true;\n+}\n+\n+ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label, Optional<OutputType>& parsed_output_type)\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        WalletLogPrintf(\"Cannot add WalletDescriptor to a non-descriptor wallet\\n\");\n+        return nullptr;\n+    }\n+\n+    LOCK(cs_wallet);\n+    auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+\n+    // Add the private keys to the descriptor\n+    for (const auto& entry : signing_provider.keys) {\n+        const CKey& key = entry.second;\n+        spk_manager->AddDescriptorKey(key, key.GetPubKey());\n+    }\n+\n+    // Top up key pool, the manager will generate new scriptPubKeys internally\n+    spk_manager->TopUp();\n+\n+    // Determine the output type by peeking into the first scriptPubKey (that we just generated with TopUp())\n+    auto script_pub_keys = spk_manager->GetScriptPubKeys();\n+    if (script_pub_keys.empty()) {\n+        WalletLogPrintf(\"Could not generate scriptPubKeys (cache is empty)\\n\");\n+        return nullptr;\n+    }\n+    const CScript& script = script_pub_keys.at(0);\n+    auto expanded_provider = spk_manager->GetSigningProvider(script);\n+    if (expanded_provider) {\n+        parsed_output_type = DetermineOutputType(script, *expanded_provider);\n+    }\n+\n+    // Apply the label if necessary\n+    // Note: we disable labels for ranged descriptors\n+    if (!desc.descriptor->IsRange()) {\n+        CTxDestination dest;\n+        if (ExtractDestination(script, dest)) {\n+            SetAddressBook(dest, label, \"receive\");\n+        }\n+    }\n+\n+    // Save the descriptor to memory\n+    auto ret = spk_manager.get();\n+    m_spk_managers[spk_manager->GetID()] = std::move(spk_manager);\n+\n+    // Save the descriptor to DB\n+    ret->WriteDescriptor();\n+\n+    return ret;\n+}"
      },
      {
        "sha": "71189cee1b2694d996378035033828f9cc028545",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b7cf42ac121742d57e3a5e27065e11d756adc8e1",
        "patch": "@@ -1198,6 +1198,15 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     //! Create new DescriptoScriptPubKeyMans and add them to the wallet\n     void SetupDescriptorScriptPubKeyMans();\n+\n+    //! Check if the wallet already has a descriptor\n+    DescriptorScriptPubKeyMan* HasWalletDescriptor(const WalletDescriptor& desc) const;\n+\n+    //! Maybe clear an existing descriptor's cache\n+    bool MaybeClearWalletDescriptorCache(const WalletDescriptor& desc);\n+\n+    //! Add a descriptor to the wallet, return a ScriptPubKeyMan & associated output type\n+    ScriptPubKeyMan* AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label, Optional<OutputType>& parsed_output_type);\n };\n \n /**"
      },
      {
        "sha": "b85155127a36a42f13a512b07f66190d2648df4b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7cf42ac121742d57e3a5e27065e11d756adc8e1/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b7cf42ac121742d57e3a5e27065e11d756adc8e1",
        "patch": "@@ -224,6 +224,11 @@ bool WalletBatch::WriteDescriptorCache(const uint256& desc_id, int32_t index, st\n     return WriteIC(make_pair(make_pair(DBKeys::WALLETDESCRIPTORCACHE, desc_id), index), cache_item);\n }\n \n+bool WalletBatch::EraseDescriptorCache(const uint256& desc_id, int32_t index)\n+{\n+    return EraseIC(make_pair(make_pair(DBKeys::WALLETDESCRIPTORCACHE, desc_id), index));\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};"
      },
      {
        "sha": "abab3e2aaf9aa868a670354d70121d654c963330",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7cf42ac121742d57e3a5e27065e11d756adc8e1/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7cf42ac121742d57e3a5e27065e11d756adc8e1/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=b7cf42ac121742d57e3a5e27065e11d756adc8e1",
        "patch": "@@ -176,6 +176,7 @@\n     'mempool_accept.py',\n     'wallet_import_rescan.py',\n     'wallet_import_with_label.py',\n+    'wallet_importdescriptors.py',\n     'rpc_bind.py --ipv4',\n     'rpc_bind.py --ipv6',\n     'rpc_bind.py --nonloopback',"
      },
      {
        "sha": "c48cd183c07eba8e2a96db8d106a4a54023b99d1",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "added",
        "additions": 291,
        "deletions": 0,
        "changes": 291,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7cf42ac121742d57e3a5e27065e11d756adc8e1/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7cf42ac121742d57e3a5e27065e11d756adc8e1/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=b7cf42ac121742d57e3a5e27065e11d756adc8e1",
        "patch": "@@ -0,0 +1,291 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_key()` is called to generate keys on node0 and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet_util import (\n+    get_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_key(w0)\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     label=\"Descriptor import test\")\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_key(w0)\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptor must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,\n+                              },\n+                              success=True)\n+\n+        test_address(w1,\n+                     key.p2sh_p2wpkh_addr,\n+                     ismine=True,\n+                     solvable=True)\n+\n+        # # Test importing of a multisig descriptor\n+        key1 = get_key(w0)\n+        key2 = get_key(w0)\n+        self.log.info(\"Should import a 1-of-2 bare multisig from descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"multi(1,\" + key1.pubkey + \",\" + key2.pubkey + \")\"),\n+                              \"timestamp\": \"now\"},\n+                             success=True)\n+        self.log.info(\"Should not treat individual keys from the imported bare multisig as watchonly\")\n+        test_address(w1,\n+                     key1.p2pkh_addr,\n+                     ismine=False)\n+\n+        # # Test ranged descriptors\n+        xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n+        addresses = [\"2N7yv4p8G8yEaPddJxY41kPihnWvs39qCMf\", \"2MsHxyb2JS3pAySeNUsJ7mNnurtpeenDzLA\"] # hdkeypath=m/0'/0'/0' and 1'\n+        addresses += [\"bcrt1qrd3n235cj2czsfmsuvqqpr3lu6lg0ju7scl8gn\", \"bcrt1qfqeppuvj0ww98r6qghmdkj70tv8qpchehegrg8\"] # wpkh subscripts corresponding to the above addresses\n+        desc = \"sh(wpkh(\" + xpriv + \"/0'/0'/*'\" + \"))\"\n+        self.log.info(\"Ranged descriptor import should fail without a specified range\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=False,\n+                              error_code=-8,\n+                              error_message='Descriptor is ranged, please specify the range')\n+\n+        # # Test importing of a ranged descriptor with xpriv\n+        self.log.info(\"Should not import a ranged descriptor that includes xpriv into a watch-only wallet\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                              \"timestamp\": \"now\",\n+                              \"range\": 1},\n+                             success=False,\n+                             error_code=-4,\n+                             error_message='Cannot import private keys to a wallet with private keys disabled')\n+        for address in addresses:\n+            test_address(w1,\n+                         address,\n+                         ismine=False,\n+                         solvable=False)\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": -1},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [-1, 10]},\n+                              success=False, error_code=-8, error_message='Range should be greater or equal than 0')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [(2 << 31 + 1) - 1000000, (2 << 31 + 1)]},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [2, 1]},\n+                              success=False, error_code=-8, error_message='Range specified as [begin,end] must not have begin after end')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [0, 1000001]},\n+                              success=False, error_code=-8, error_message='Range is too large')\n+\n+        # Make sure ranged imports import keys in order\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        self.log.info('Key ranges should be imported in order')\n+        xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n+        addresses = [\n+            'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv', # m/0'/0'/0\n+            'bcrt1q8vprchan07gzagd5e6v9wd7azyucksq2xc76k8', # m/0'/0'/1\n+            'bcrt1qtuqdtha7zmqgcrr26n2rqxztv5y8rafjp9lulu', # m/0'/0'/2\n+            'bcrt1qau64272ymawq26t90md6an0ps99qkrse58m640', # m/0'/0'/3\n+            'bcrt1qsg97266hrh6cpmutqen8s4s962aryy77jp0fg0', # m/0'/0'/4\n+        ]\n+\n+        self.test_importdesc({'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n+                              'active': True,\n+                              'range' : [0, 2],\n+                              'timestamp': 'now'\n+                             },\n+                             success=True)\n+\n+        for i in range(0, 4):\n+            addr = w1.getnewaddress('', 'bech32')\n+            assert_equal(addr, addresses[i])\n+\n+        # # Test importing a descriptor containing a WIF private key\n+        wif_priv = \"cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh\"\n+        address = \"2MuhcG52uHPknxDgmGPsV18jSHFBnnRgjPg\"\n+        desc = \"sh(wpkh(\" + wif_priv + \"))\"\n+        self.log.info(\"Should import a descriptor with a WIF private key as spendable\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True,\n+                              wallet=wpriv)\n+        test_address(wpriv,\n+                     address,\n+                     solvable=True,\n+                     ismine=True)\n+        txid = w0.sendtoaddress(address, 49.99995540)\n+        w0.generatetoaddress(6, w0.getnewaddress())\n+        tx = wpriv.createrawtransaction([{\"txid\": txid, \"vout\": 0}], {w0.getnewaddress(): 49.999})\n+        signed_tx = wpriv.signrawtransactionwithwallet(tx)\n+        w1.sendrawtransaction(signed_tx['hex'])\n+\n+        # Make sure that we can use import and use multisig as addresses\n+        self.log.info('Test that multisigs can be imported, signed for, and getnewaddress\\'d')\n+        self.nodes[1].createwallet(wallet_name=\"wmulti_priv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wmulti_priv = self.nodes[1].get_wallet_rpc(\"wmulti_priv\")\n+        assert_equal(wmulti_priv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/0h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/0h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/0h/0h/*))#m2sr93jn\",\n+                            \"active\": True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_priv)\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/1h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/1h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/1h/0h/*))#q3sztvx5\",\n+                            \"active\": True,\n+                            \"internal\" : True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_priv)\n+\n+        addr = wmulti_priv.getnewaddress('', 'bech32')\n+        assert_equal(addr, 'bcrt1qdt0qy5p7dzhxzmegnn4ulzhard33s2809arjqgjndx87rv5vd0fq2czhy8') # Derived at m/84'/0'/0'/0\n+        txid = w0.sendtoaddress(addr, 10)\n+        self.nodes[0].generate(6)\n+        send_txid = wmulti_priv.sendtoaddress(w0.getnewaddress(), 8)\n+        decoded = wmulti_priv.decoderawtransaction(wmulti_priv.gettransaction(send_txid)['hex'])\n+        assert_equal(len(decoded['vin'][0]['txinwitness']), 4)\n+        self.nodes[0].generate(6)\n+        self.sync_all()\n+\n+        self.nodes[1].createwallet(wallet_name=\"wmulti_pub\", disable_private_keys=True, blank=True, descriptors=True)\n+        wmulti_pub = self.nodes[1].get_wallet_rpc(\"wmulti_pub\")\n+        assert_equal(wmulti_pub.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/0h/0h]tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*,[59b09cd6/84h/0h/0h]tpubDDBF2BTR6s8drwrfDei8WxtckGuSm1cyoKxYY1QaKSBFbHBYQArWhHPA6eJrzZej6nfHGLSURYSLHr7GuYch8aY5n61tGqgn8b4cXrMuoPH/*,[e81a0532/84h/0h/0h]tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E/*))#tsry0s5e\",\n+                            \"active\": True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_pub)\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/1h/0h]tpubDCXqdwWZcszwqYJSnZp8eARkxGJfHAk23KDxbztV4BbschfaTfYLTcSkSJ3TN64dRqwa1rnFUScsYormKkGqNbbPwkorQimVevXjxzUV9Gf/*,[59b09cd6/84h/1h/0h]tpubDCYfZY2ceyHzYzMMVPt9MNeiqtQ2T7Uyp9QSFwYXh8Vi9iJFYXcuphJaGXfF3jUQJi5Y3GMNXvM11gaL4txzZgNGK22BFAwMXynnzv4z2Jh/*,[e81a0532/84h/1h/0h]tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb/*))#c08a2rzv\",\n+                            \"active\": True,\n+                            \"internal\" : True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_pub)\n+\n+        addr = wmulti_pub.getnewaddress('', 'bech32')\n+        assert_equal(addr, 'bcrt1qp8s25ckjl7gr6x2q3dx3tn2pytwp05upkjztk6ey857tt50r5aeqn6mvr9') # Derived at m/84'/0'/0'/1\n+        txid = w0.sendtoaddress(addr, 10)\n+        self.nodes[0].generate(6)\n+        self.sync_all()\n+        assert_equal(wmulti_pub.getbalance(), wmulti_priv.getbalance())\n+\n+if __name__ == '__main__':\n+    ImportDescriptorsTest().main()"
      }
    ]
  },
  {
    "sha": "2de24140440451f03b1ca293d196b6718b785165",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZGUyNDE0MDQ0MDQ1MWYwM2IxY2EyOTNkMTk2YjY3MThiNzg1MTY1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-15T20:12:04Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Functional tests for descriptor wallets",
      "tree": {
        "sha": "1d031eec52b84839e853ffc530fc907d672ab3ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d031eec52b84839e853ffc530fc907d672ab3ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2de24140440451f03b1ca293d196b6718b785165",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2de24140440451f03b1ca293d196b6718b785165",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2de24140440451f03b1ca293d196b6718b785165",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2de24140440451f03b1ca293d196b6718b785165/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7cf42ac121742d57e3a5e27065e11d756adc8e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7cf42ac121742d57e3a5e27065e11d756adc8e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7cf42ac121742d57e3a5e27065e11d756adc8e1"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 119,
      "deletions": 0
    },
    "files": [
      {
        "sha": "520fbc76336583d6351303c0ce5f7de3aa7735f3",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2de24140440451f03b1ca293d196b6718b785165/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2de24140440451f03b1ca293d196b6718b785165/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=2de24140440451f03b1ca293d196b6718b785165",
        "patch": "@@ -147,6 +147,7 @@\n     'wallet_disable.py',\n     'rpc_net.py',\n     'wallet_keypool.py',\n+    'wallet_descriptor.py',\n     'p2p_mempool.py',\n     'rpc_setban.py',\n     'p2p_blocksonly.py',"
      },
      {
        "sha": "7197fc25a3c545374c6ffb3d79673c63fb7778b5",
        "filename": "test/functional/wallet_descriptor.py",
        "status": "added",
        "additions": 118,
        "deletions": 0,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2de24140440451f03b1ca293d196b6718b785165/test/functional/wallet_descriptor.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2de24140440451f03b1ca293d196b6718b785165/test/functional/wallet_descriptor.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_descriptor.py?ref=2de24140440451f03b1ca293d196b6718b785165",
        "patch": "@@ -0,0 +1,118 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test descriptor wallet function.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error\n+)\n+\n+\n+class WalletDescriptorTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-keypool=100']]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # Make a descriptor wallet\n+        self.log.info(\"Making a descriptor wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"desc1\", descriptors=True)\n+        self.nodes[0].unloadwallet(\"\")\n+\n+        # A descriptor wallet should have 100 addresses * 3 types = 300 keys\n+        self.log.info(\"Checking wallet info\")\n+        wallet_info = self.nodes[0].getwalletinfo()\n+        assert_equal(wallet_info['keypoolsize'], 300)\n+        assert_equal(wallet_info['keypoolsize_hd_internal'], 300)\n+\n+        # Check that getnewaddress works\n+        self.log.info(\"Test that getnewaddress and getrawchangeaddress work\")\n+        addr = self.nodes[0].getnewaddress(\"\", \"legacy\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert_equal(addr_info['hdkeypath'], 'm/44\\'/0\\'/0\\'/0/0')\n+\n+        addr = self.nodes[0].getnewaddress(\"\", \"p2sh-segwit\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert_equal(addr_info['hdkeypath'], 'm/49\\'/0\\'/0\\'/0/0')\n+\n+        addr = self.nodes[0].getnewaddress(\"\", \"bech32\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert_equal(addr_info['hdkeypath'], 'm/84\\'/0\\'/0\\'/0/0')\n+\n+        # Check that getrawchangeaddress works\n+        addr = self.nodes[0].getrawchangeaddress(\"legacy\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert_equal(addr_info['hdkeypath'], 'm/44\\'/0\\'/0\\'/1/0')\n+\n+        addr = self.nodes[0].getrawchangeaddress(\"p2sh-segwit\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert_equal(addr_info['hdkeypath'], 'm/49\\'/0\\'/0\\'/1/0')\n+\n+        addr = self.nodes[0].getrawchangeaddress(\"bech32\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert_equal(addr_info['hdkeypath'], 'm/84\\'/0\\'/0\\'/1/0')\n+\n+        # Make a wallet to receive coins at\n+        self.nodes[0].createwallet(wallet_name=\"desc2\", descriptors=True)\n+        recv_wrpc = self.nodes[0].get_wallet_rpc(\"desc2\")\n+        send_wrpc = self.nodes[0].get_wallet_rpc(\"desc1\")\n+\n+        # Generate some coins\n+        send_wrpc.generatetoaddress(101, send_wrpc.getnewaddress())\n+\n+        # Make transactions\n+        self.log.info(\"Test sending and receiving\")\n+        addr = recv_wrpc.getnewaddress()\n+        send_wrpc.sendtoaddress(addr, 10)\n+\n+        # Make sure things are disabled\n+        self.log.info(\"Test disabled RPCs\")\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.importprivkey, \"cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW\")\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.importpubkey, send_wrpc.getaddressinfo(send_wrpc.getnewaddress()))\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.importaddress, recv_wrpc.getnewaddress())\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.importmulti, [])\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.addmultisigaddress, 1, [recv_wrpc.getnewaddress()])\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.dumpprivkey, recv_wrpc.getnewaddress())\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.dumpwallet, 'wallet.dump')\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.importwallet, 'wallet.dump')\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.sethdseed)\n+\n+        self.log.info(\"Test encryption\")\n+        # Get the master fingerprint before encrypt\n+        info1 = send_wrpc.getaddressinfo(send_wrpc.getnewaddress())\n+\n+        # Encrypt wallet 0\n+        send_wrpc.encryptwallet('pass')\n+        send_wrpc.walletpassphrase('pass', 10)\n+        addr = send_wrpc.getnewaddress()\n+        info2 = send_wrpc.getaddressinfo(addr)\n+        assert info1['hdmasterfingerprint'] != info2['hdmasterfingerprint']\n+        send_wrpc.walletlock()\n+        assert 'hdmasterfingerprint' in send_wrpc.getaddressinfo(send_wrpc.getnewaddress())\n+        info3 = send_wrpc.getaddressinfo(addr)\n+        assert_equal(info2['desc'], info3['desc'])\n+\n+        self.log.info(\"Test born encrypted wallets\")\n+        self.nodes[0].createwallet('desc_enc', False, False, 'pass', False, True)\n+        enc_rpc = self.nodes[0].get_wallet_rpc('desc_enc')\n+        enc_rpc.getnewaddress() # Makes sure that we can get a new address from a born encrypted wallet\n+\n+        self.log.info(\"Test blank descriptor wallets\")\n+        self.nodes[0].createwallet(wallet_name='desc_blank', blank=True, descriptors=True)\n+        blank_rpc = self.nodes[0].get_wallet_rpc('desc_blank')\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', blank_rpc.getnewaddress)\n+\n+        self.log.info(\"Test descriptor wallet with disabled private keys\")\n+        self.nodes[0].createwallet(wallet_name='desc_no_priv', disable_private_keys=True, descriptors=True)\n+        nopriv_rpc = self.nodes[0].get_wallet_rpc('desc_no_priv')\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', nopriv_rpc.getnewaddress)\n+\n+if __name__ == '__main__':\n+    WalletDescriptorTest().main ()"
      }
    ]
  },
  {
    "sha": "aef2a5cbb9e37e5ef8caf931187f78e2daaf79c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWYyYTVjYmI5ZTM3ZTVlZjhjYWY5MzExODdmNzhlMmRhYWY3OWMw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-22T18:47:17Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Change wallet_encryption.py to use signmessage instead of dumpprivkey",
      "tree": {
        "sha": "61dceeaa5cac2d4ab0cfe546017bdedf14648991",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61dceeaa5cac2d4ab0cfe546017bdedf14648991"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aef2a5cbb9e37e5ef8caf931187f78e2daaf79c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aef2a5cbb9e37e5ef8caf931187f78e2daaf79c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aef2a5cbb9e37e5ef8caf931187f78e2daaf79c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aef2a5cbb9e37e5ef8caf931187f78e2daaf79c0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2de24140440451f03b1ca293d196b6718b785165",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2de24140440451f03b1ca293d196b6718b785165",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2de24140440451f03b1ca293d196b6718b785165"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 13,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6cd82ad25074f921a4ec4000d0936d149b2d02ad",
        "filename": "test/functional/wallet_encryption.py",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aef2a5cbb9e37e5ef8caf931187f78e2daaf79c0/test/functional/wallet_encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aef2a5cbb9e37e5ef8caf931187f78e2daaf79c0/test/functional/wallet_encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_encryption.py?ref=aef2a5cbb9e37e5ef8caf931187f78e2daaf79c0",
        "patch": "@@ -8,7 +8,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n-    assert_equal,\n     assert_raises_rpc_error,\n     assert_greater_than,\n     assert_greater_than_or_equal,\n@@ -27,10 +26,10 @@ def run_test(self):\n         passphrase2 = \"SecondWalletPassphrase\"\n \n         # Make sure the wallet isn't encrypted first\n-        address = self.nodes[0].getnewaddress()\n-        privkey = self.nodes[0].dumpprivkey(address)\n-        assert_equal(privkey[:1], \"c\")\n-        assert_equal(len(privkey), 52)\n+        msg = \"test message\"\n+        address = self.nodes[0].getnewaddress(address_type='legacy')\n+        sig = self.nodes[0].signmessage(address, msg)\n+        assert self.nodes[0].verifymessage(address, sig, msg)\n         assert_raises_rpc_error(-15, \"Error: running with an unencrypted wallet, but walletpassphrase was called\", self.nodes[0].walletpassphrase, 'ff', 1)\n         assert_raises_rpc_error(-15, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\", self.nodes[0].walletpassphrasechange, 'ff', 'ff')\n \n@@ -39,33 +38,36 @@ def run_test(self):\n         self.nodes[0].encryptwallet(passphrase)\n \n         # Test that the wallet is encrypted\n-        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].signmessage, address, msg)\n         assert_raises_rpc_error(-15, \"Error: running with an encrypted wallet, but encryptwallet was called.\", self.nodes[0].encryptwallet, 'ff')\n         assert_raises_rpc_error(-8, \"passphrase can not be empty\", self.nodes[0].walletpassphrase, '', 1)\n         assert_raises_rpc_error(-8, \"passphrase can not be empty\", self.nodes[0].walletpassphrasechange, '', 'ff')\n \n         # Check that walletpassphrase works\n         self.nodes[0].walletpassphrase(passphrase, 2)\n-        assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n+        sig = self.nodes[0].signmessage(address, msg)\n+        assert self.nodes[0].verifymessage(address, sig, msg)\n \n         # Check that the timeout is right\n         time.sleep(3)\n-        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].signmessage, address, msg)\n \n         # Test wrong passphrase\n         assert_raises_rpc_error(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase + \"wrong\", 10)\n \n         # Test walletlock\n         self.nodes[0].walletpassphrase(passphrase, 84600)\n-        assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n+        sig = self.nodes[0].signmessage(address, msg)\n+        assert self.nodes[0].verifymessage(address, sig, msg)\n         self.nodes[0].walletlock()\n-        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].signmessage, address, msg)\n \n         # Test passphrase changes\n         self.nodes[0].walletpassphrasechange(passphrase, passphrase2)\n         assert_raises_rpc_error(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase, 10)\n         self.nodes[0].walletpassphrase(passphrase2, 10)\n-        assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n+        sig = self.nodes[0].signmessage(address, msg)\n+        assert self.nodes[0].verifymessage(address, sig, msg)\n         self.nodes[0].walletlock()\n \n         # Test timeout bounds"
      }
    ]
  },
  {
    "sha": "eaa391d98f35dc0636727206c3c1fbcf860db62c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWEzOTFkOThmMzVkYzA2MzY3MjcyMDZjM2MxZmJjZjg2MGRiNjJj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-16T19:33:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-30T07:30:33Z"
      },
      "message": "Add a --descriptors option to various tests\n\nAdds the option to use a descriptor wallet to:\n* wallet_basic.py\n* wallet_encryption.py\n* wallet_keypool.py\n* wallet_keypool_topup.py\n* wallet_labels.py\n\nAlso runs these tests with --descriptors in test_runner",
      "tree": {
        "sha": "94e0cb0c5ab33d3da050a2434d397a9edc54ec28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94e0cb0c5ab33d3da050a2434d397a9edc54ec28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eaa391d98f35dc0636727206c3c1fbcf860db62c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaa391d98f35dc0636727206c3c1fbcf860db62c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eaa391d98f35dc0636727206c3c1fbcf860db62c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaa391d98f35dc0636727206c3c1fbcf860db62c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aef2a5cbb9e37e5ef8caf931187f78e2daaf79c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aef2a5cbb9e37e5ef8caf931187f78e2daaf79c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aef2a5cbb9e37e5ef8caf931187f78e2daaf79c0"
      }
    ],
    "stats": {
      "total": 227,
      "additions": 157,
      "deletions": 70
    },
    "files": [
      {
        "sha": "f55fc619d1a1639b6edeb12e8627165f4c0078a4",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaa391d98f35dc0636727206c3c1fbcf860db62c/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaa391d98f35dc0636727206c3c1fbcf860db62c/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=eaa391d98f35dc0636727206c3c1fbcf860db62c",
        "patch": "@@ -18,6 +18,7 @@\n import time\n \n from .authproxy import JSONRPCException\n+from .descriptors import descsum_create\n from . import coverage\n from .test_node import TestNode\n from .mininode import NetworkThread\n@@ -353,15 +354,22 @@ def setup_nodes(self):\n                 assert_equal(chain_info[\"blocks\"], 200)\n                 assert_equal(chain_info[\"initialblockdownload\"], False)\n \n-    def import_deterministic_coinbase_privkeys(self):\n+    def import_deterministic_coinbase_privkeys(self, descriptors=False):\n         for n in self.nodes:\n             try:\n                 n.getwalletinfo()\n             except JSONRPCException as e:\n                 assert str(e).startswith('Method not found')\n                 continue\n \n-            n.importprivkey(privkey=n.get_deterministic_priv_key().key, label='coinbase')\n+            if descriptors:\n+                n.importdescriptors([{\n+                    'desc': descsum_create('pkh(' + n.get_deterministic_priv_key().key + ')'),\n+                    'label': 'coinbase',\n+                    'timestamp': 'now'\n+                }])\n+            else:\n+                n.importprivkey(privkey=n.get_deterministic_priv_key().key, label='coinbase')\n \n     def run_test(self):\n         \"\"\"Tests must override this method to define test logic\"\"\""
      },
      {
        "sha": "351ec5a9d4e4fbc8bd13d0a1724f35dd0a76ec68",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaa391d98f35dc0636727206c3c1fbcf860db62c/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaa391d98f35dc0636727206c3c1fbcf860db62c/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=eaa391d98f35dc0636727206c3c1fbcf860db62c",
        "patch": "@@ -87,7 +87,9 @@\n     'feature_segwit.py',\n     # vv Tests less than 2m vv\n     'wallet_basic.py',\n+    'wallet_basic.py --descriptors',\n     'wallet_labels.py',\n+    'wallet_labels.py --descriptors',\n     'p2p_segwit.py',\n     'p2p_timeouts.py',\n     'p2p_tx_download.py',\n@@ -110,6 +112,7 @@\n     'feature_abortnode.py',\n     # vv Tests less than 30s vv\n     'wallet_keypool_topup.py',\n+    'wallet_keypool_topup.py --descriptors',\n     'feature_fee_estimation.py',\n     'interface_zmq.py',\n     'interface_bitcoin_cli.py',\n@@ -147,6 +150,7 @@\n     'wallet_disable.py',\n     'rpc_net.py',\n     'wallet_keypool.py',\n+    'wallet_keypool.py --descriptors',\n     'wallet_descriptor.py',\n     'p2p_mempool.py',\n     'rpc_setban.py',\n@@ -189,6 +193,7 @@\n     'wallet_listsinceblock.py',\n     'p2p_leak.py',\n     'wallet_encryption.py',\n+    'wallet_encryption.py --descriptors',\n     'feature_dersig.py',\n     'feature_cltv.py',\n     'rpc_uptime.py',"
      },
      {
        "sha": "0594b75be643dcc66cfe222665bef2713a7370a8",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 62,
        "deletions": 49,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaa391d98f35dc0636727206c3c1fbcf860db62c/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaa391d98f35dc0636727206c3c1fbcf860db62c/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=eaa391d98f35dc0636727206c3c1fbcf860db62c",
        "patch": "@@ -32,6 +32,12 @@ def skip_test_if_missing_module(self):\n \n     def setup_network(self):\n         self.setup_nodes()\n+        # Setup descriptor wallets\n+        if self.options.descriptors:\n+            for n in self.nodes:\n+                n.createwallet(wallet_name='desc', descriptors=True)\n+                n.get_wallet_rpc('').unloadwallet()\n+            self.import_deterministic_coinbase_privkeys(True)\n         # Only need nodes 0-2 running at start of test\n         self.stop_node(3)\n         connect_nodes(self.nodes[0], 1)\n@@ -48,7 +54,11 @@ def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size\n     def get_vsize(self, txn):\n         return self.nodes[0].decoderawtransaction(txn)['vsize']\n \n+    def add_options(self, parser):\n+        parser.add_argument('--descriptors', action='store_true', dest=\"descriptors\", help=\"Run test using a descriptor wallet\", default=False)\n+\n     def run_test(self):\n+\n         # Check that there's no UTXO on none of the nodes\n         assert_equal(len(self.nodes[0].listunspent()), 0)\n         assert_equal(len(self.nodes[1].listunspent()), 0)\n@@ -219,7 +229,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n-        self.start_node(3)\n+        self.start_node(3, self.nodes[3].extra_args + (['-wallet=desc'] if self.options.descriptors else []))\n         connect_nodes(self.nodes[0], 3)\n         self.sync_all()\n \n@@ -252,9 +262,9 @@ def run_test(self):\n \n         # do some -walletbroadcast tests\n         self.stop_nodes()\n-        self.start_node(0, [\"-walletbroadcast=0\"])\n-        self.start_node(1, [\"-walletbroadcast=0\"])\n-        self.start_node(2, [\"-walletbroadcast=0\"])\n+        self.start_node(0, [\"-walletbroadcast=0\"] + (['-wallet=desc'] if self.options.descriptors else []))\n+        self.start_node(1, [\"-walletbroadcast=0\"] + (['-wallet=desc'] if self.options.descriptors else []))\n+        self.start_node(2, [\"-walletbroadcast=0\"] + (['-wallet=desc'] if self.options.descriptors else []))\n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[1], 2)\n         connect_nodes(self.nodes[0], 2)\n@@ -279,9 +289,9 @@ def run_test(self):\n \n         # restart the nodes with -walletbroadcast=1\n         self.stop_nodes()\n-        self.start_node(0)\n-        self.start_node(1)\n-        self.start_node(2)\n+        self.start_node(0, ['-wallet=desc'] if self.options.descriptors else [])\n+        self.start_node(1, ['-wallet=desc'] if self.options.descriptors else [])\n+        self.start_node(2, ['-wallet=desc'] if self.options.descriptors else [])\n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[1], 2)\n         connect_nodes(self.nodes[0], 2)\n@@ -315,57 +325,59 @@ def run_test(self):\n         # This will raise an exception since generate does not accept a string\n         assert_raises_rpc_error(-1, \"not an integer\", self.nodes[0].generate, \"2\")\n \n-        # This will raise an exception for the invalid private key format\n-        assert_raises_rpc_error(-5, \"Invalid private key encoding\", self.nodes[0].importprivkey, \"invalid\")\n+        if not self.options.descriptors:\n \n-        # This will raise an exception for importing an address with the PS2H flag\n-        temp_address = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n-        assert_raises_rpc_error(-5, \"Cannot use the p2sh flag with an address - use a script instead\", self.nodes[0].importaddress, temp_address, \"label\", False, True)\n+            # This will raise an exception for the invalid private key format\n+            assert_raises_rpc_error(-5, \"Invalid private key encoding\", self.nodes[0].importprivkey, \"invalid\")\n \n-        # This will raise an exception for attempting to dump the private key of an address you do not own\n-        assert_raises_rpc_error(-3, \"Address does not refer to a key\", self.nodes[0].dumpprivkey, temp_address)\n+            # This will raise an exception for importing an address with the PS2H flag\n+            temp_address = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n+            assert_raises_rpc_error(-5, \"Cannot use the p2sh flag with an address - use a script instead\", self.nodes[0].importaddress, temp_address, \"label\", False, True)\n \n-        # This will raise an exception for attempting to get the private key of an invalid Bitcoin address\n-        assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].dumpprivkey, \"invalid\")\n+            # This will raise an exception for attempting to dump the private key of an address you do not own\n+            assert_raises_rpc_error(-3, \"Address does not refer to a key\", self.nodes[0].dumpprivkey, temp_address)\n \n-        # This will raise an exception for attempting to set a label for an invalid Bitcoin address\n-        assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].setlabel, \"invalid address\", \"label\")\n+            # This will raise an exception for attempting to get the private key of an invalid Bitcoin address\n+            assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].dumpprivkey, \"invalid\")\n \n-        # This will raise an exception for importing an invalid address\n-        assert_raises_rpc_error(-5, \"Invalid Bitcoin address or script\", self.nodes[0].importaddress, \"invalid\")\n+            # This will raise an exception for attempting to set a label for an invalid Bitcoin address\n+            assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].setlabel, \"invalid address\", \"label\")\n \n-        # This will raise an exception for attempting to import a pubkey that isn't in hex\n-        assert_raises_rpc_error(-5, \"Pubkey must be a hex string\", self.nodes[0].importpubkey, \"not hex\")\n+            # This will raise an exception for importing an invalid address\n+            assert_raises_rpc_error(-5, \"Invalid Bitcoin address or script\", self.nodes[0].importaddress, \"invalid\")\n \n-        # This will raise an exception for importing an invalid pubkey\n-        assert_raises_rpc_error(-5, \"Pubkey is not a valid public key\", self.nodes[0].importpubkey, \"5361746f736869204e616b616d6f746f\")\n+            # This will raise an exception for attempting to import a pubkey that isn't in hex\n+            assert_raises_rpc_error(-5, \"Pubkey must be a hex string\", self.nodes[0].importpubkey, \"not hex\")\n \n-        # Import address and private key to check correct behavior of spendable unspents\n-        # 1. Send some coins to generate new UTXO\n-        address_to_import = self.nodes[2].getnewaddress()\n-        txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n-        self.nodes[0].generate(1)\n-        self.sync_all(self.nodes[0:3])\n+            # This will raise an exception for importing an invalid pubkey\n+            assert_raises_rpc_error(-5, \"Pubkey is not a valid public key\", self.nodes[0].importpubkey, \"5361746f736869204e616b616d6f746f\")\n+\n+            # Import address and private key to check correct behavior of spendable unspents\n+            # 1. Send some coins to generate new UTXO\n+            address_to_import = self.nodes[2].getnewaddress()\n+            txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n+            self.nodes[0].generate(1)\n+            self.sync_all(self.nodes[0:3])\n \n-        # 2. Import address from node2 to node1\n-        self.nodes[1].importaddress(address_to_import)\n+            # 2. Import address from node2 to node1\n+            self.nodes[1].importaddress(address_to_import)\n \n-        # 3. Validate that the imported address is watch-only on node1\n-        assert self.nodes[1].getaddressinfo(address_to_import)[\"iswatchonly\"]\n+            # 3. Validate that the imported address is watch-only on node1\n+            assert self.nodes[1].getaddressinfo(address_to_import)[\"iswatchonly\"]\n \n-        # 4. Check that the unspents after import are not spendable\n-        assert_array_result(self.nodes[1].listunspent(),\n-                            {\"address\": address_to_import},\n-                            {\"spendable\": False})\n+            # 4. Check that the unspents after import are not spendable\n+            assert_array_result(self.nodes[1].listunspent(),\n+                                {\"address\": address_to_import},\n+                                {\"spendable\": False})\n \n-        # 5. Import private key of the previously imported address on node1\n-        priv_key = self.nodes[2].dumpprivkey(address_to_import)\n-        self.nodes[1].importprivkey(priv_key)\n+            # 5. Import private key of the previously imported address on node1\n+            priv_key = self.nodes[2].dumpprivkey(address_to_import)\n+            self.nodes[1].importprivkey(priv_key)\n \n-        # 6. Check that the unspents are now spendable on node1\n-        assert_array_result(self.nodes[1].listunspent(),\n-                            {\"address\": address_to_import},\n-                            {\"spendable\": True})\n+            # 6. Check that the unspents are now spendable on node1\n+            assert_array_result(self.nodes[1].listunspent(),\n+                                {\"address\": address_to_import},\n+                                {\"spendable\": True})\n \n         # Mine a block from node0 to an address from node1\n         coinbase_addr = self.nodes[1].getnewaddress()\n@@ -410,9 +422,9 @@ def run_test(self):\n             self.log.info(\"check \" + m)\n             self.stop_nodes()\n             # set lower ancestor limit for later\n-            self.start_node(0, [m, \"-limitancestorcount=\" + str(chainlimit)])\n-            self.start_node(1, [m, \"-limitancestorcount=\" + str(chainlimit)])\n-            self.start_node(2, [m, \"-limitancestorcount=\" + str(chainlimit)])\n+            self.start_node(0, [m, \"-limitancestorcount=\" + str(chainlimit)] + (['-wallet=desc'] if self.options.descriptors else []))\n+            self.start_node(1, [m, \"-limitancestorcount=\" + str(chainlimit)] + (['-wallet=desc'] if self.options.descriptors else []))\n+            self.start_node(2, [m, \"-limitancestorcount=\" + str(chainlimit)] + (['-wallet=desc'] if self.options.descriptors else []))\n             if m == '-reindex':\n                 # reindex will leave rpc warm up \"early\"; Wait for it to finish\n                 wait_until(lambda: [block_count] * 3 == [self.nodes[i].getblockcount() for i in range(3)])\n@@ -460,7 +472,8 @@ def run_test(self):\n         # Try with walletrejectlongchains\n         # Double chain limit but require combining inputs, so we pass SelectCoinsMinConf\n         self.stop_node(0)\n-        self.start_node(0, extra_args=[\"-walletrejectlongchains\", \"-limitancestorcount=\" + str(2 * chainlimit)])\n+        extra_args = [\"-walletrejectlongchains\", \"-limitancestorcount=\" + str(2 * chainlimit)] + (['-wallet=desc'] if self.options.descriptors else [])\n+        self.start_node(0, extra_args=extra_args)\n \n         # wait for loadmempool\n         timeout = 10"
      },
      {
        "sha": "f9a4297522a145aed75ebe524ff12afe696dbfff",
        "filename": "test/functional/wallet_encryption.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaa391d98f35dc0636727206c3c1fbcf860db62c/test/functional/wallet_encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaa391d98f35dc0636727206c3c1fbcf860db62c/test/functional/wallet_encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_encryption.py?ref=eaa391d98f35dc0636727206c3c1fbcf860db62c",
        "patch": "@@ -21,7 +21,17 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n+    def add_options(self, parser):\n+        parser.add_argument('--descriptors', action='store_true', dest=\"descriptors\", help=\"Run test using a descriptor wallet\", default=False)\n+\n     def run_test(self):\n+        # Setup descriptor wallets\n+        if self.options.descriptors:\n+            for n in self.nodes:\n+                n.createwallet(wallet_name='desc', descriptors=True)\n+                n.get_wallet_rpc('').unloadwallet()\n+            self.import_deterministic_coinbase_privkeys(True)\n+\n         passphrase = \"WalletPassphrase\"\n         passphrase2 = \"SecondWalletPassphrase\"\n "
      },
      {
        "sha": "08c48e60f15f32daec097d6390d33966f3228219",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 27,
        "deletions": 7,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaa391d98f35dc0636727206c3c1fbcf860db62c/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaa391d98f35dc0636727206c3c1fbcf860db62c/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=eaa391d98f35dc0636727206c3c1fbcf860db62c",
        "patch": "@@ -16,30 +16,46 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n+    def add_options(self, parser):\n+        parser.add_argument('--descriptors', action='store_true', dest=\"descriptors\", help=\"Run test using a descriptor wallet\", default=False)\n+\n     def run_test(self):\n+        # Setup descriptor wallets\n+        if self.options.descriptors:\n+            for n in self.nodes:\n+                n.createwallet(wallet_name='desc', descriptors=True)\n+                n.get_wallet_rpc('').unloadwallet()\n+            self.import_deterministic_coinbase_privkeys(True)\n+\n         nodes = self.nodes\n         addr_before_encrypting = nodes[0].getnewaddress()\n         addr_before_encrypting_data = nodes[0].getaddressinfo(addr_before_encrypting)\n         wallet_info_old = nodes[0].getwalletinfo()\n-        assert addr_before_encrypting_data['hdseedid'] == wallet_info_old['hdseedid']\n+        if not self.options.descriptors:\n+            assert addr_before_encrypting_data['hdseedid'] == wallet_info_old['hdseedid']\n \n         # Encrypt wallet and wait to terminate\n         nodes[0].encryptwallet('test')\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].getaddressinfo(addr)\n         wallet_info = nodes[0].getwalletinfo()\n-        assert addr_before_encrypting_data['hdseedid'] != wallet_info['hdseedid']\n-        assert addr_data['hdseedid'] == wallet_info['hdseedid']\n+        assert addr_before_encrypting_data['hdmasterfingerprint'] != addr_data['hdmasterfingerprint']\n+        if not self.options.descriptors:\n+            assert addr_data['hdseedid'] == wallet_info['hdseedid']\n         assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # put six (plus 2) new keys in the keypool (100% external-, +100% internal-keys, 1 in min)\n         nodes[0].walletpassphrase('test', 12000)\n         nodes[0].keypoolrefill(6)\n         nodes[0].walletlock()\n         wi = nodes[0].getwalletinfo()\n-        assert_equal(wi['keypoolsize_hd_internal'], 6)\n-        assert_equal(wi['keypoolsize'], 6)\n+        if self.options.descriptors:\n+            assert_equal(wi['keypoolsize_hd_internal'], 18)\n+            assert_equal(wi['keypoolsize'], 18)\n+        else:\n+            assert_equal(wi['keypoolsize_hd_internal'], 6)\n+            assert_equal(wi['keypoolsize'], 6)\n \n         # drain the internal keys\n         nodes[0].getrawchangeaddress()\n@@ -79,8 +95,12 @@ def run_test(self):\n         nodes[0].walletpassphrase('test', 100)\n         nodes[0].keypoolrefill(100)\n         wi = nodes[0].getwalletinfo()\n-        assert_equal(wi['keypoolsize_hd_internal'], 100)\n-        assert_equal(wi['keypoolsize'], 100)\n+        if self.options.descriptors:\n+            assert_equal(wi['keypoolsize_hd_internal'], 300)\n+            assert_equal(wi['keypoolsize'], 300)\n+        else:\n+            assert_equal(wi['keypoolsize_hd_internal'], 100)\n+            assert_equal(wi['keypoolsize'], 100)\n \n if __name__ == '__main__':\n     KeyPoolTest().main()"
      },
      {
        "sha": "0de971c89c8a6b123fe75f155478b715924e4854",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 23,
        "deletions": 3,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaa391d98f35dc0636727206c3c1fbcf860db62c/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaa391d98f35dc0636727206c3c1fbcf860db62c/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=eaa391d98f35dc0636727206c3c1fbcf860db62c",
        "patch": "@@ -29,9 +29,21 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n+    def add_options(self, parser):\n+        parser.add_argument('--descriptors', action='store_true', dest=\"descriptors\", help=\"Run test using a descriptor wallet\", default=False)\n+\n     def run_test(self):\n-        wallet_path = os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\")\n-        wallet_backup_path = os.path.join(self.nodes[1].datadir, \"wallet.bak\")\n+        if self.options.descriptors:\n+            for i in range(self.num_nodes):\n+                self.nodes[i].createwallet(wallet_name='desc', descriptors=True)\n+                self.nodes[i].unloadwallet('')\n+                self.extra_args[i].append('-wallet=desc')\n+            self.import_deterministic_coinbase_privkeys(True)\n+            wallet_path = os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"desc\", \"wallet.dat\")\n+            wallet_backup_path = os.path.join(self.nodes[1].datadir, \"wallet.bak\")\n+        else:\n+            wallet_path = os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\")\n+            wallet_backup_path = os.path.join(self.nodes[1].datadir, \"wallet.bak\")\n         self.nodes[0].generate(101)\n \n         self.log.info(\"Make backup of wallet\")\n@@ -79,7 +91,15 @@ def run_test(self):\n             assert_equal(self.nodes[idx].getbalance(), 15)\n             assert_equal(self.nodes[idx].listtransactions()[0]['category'], \"receive\")\n             # Check that we have marked all keys up to the used keypool key as used\n-            assert_equal(self.nodes[idx].getaddressinfo(self.nodes[idx].getnewaddress())['hdkeypath'], \"m/0'/0'/110'\")\n+            if self.options.descriptors:\n+                if output_type == 'legacy':\n+                    assert_equal(self.nodes[idx].getaddressinfo(self.nodes[idx].getnewaddress(address_type=output_type))['hdkeypath'], \"m/44'/0'/0'/0/110\")\n+                elif output_type == 'p2sh-segwit':\n+                    assert_equal(self.nodes[idx].getaddressinfo(self.nodes[idx].getnewaddress(address_type=output_type))['hdkeypath'], \"m/49'/0'/0'/0/110\")\n+                elif output_type == 'bech32':\n+                    assert_equal(self.nodes[idx].getaddressinfo(self.nodes[idx].getnewaddress(address_type=output_type))['hdkeypath'], \"m/84'/0'/0'/0/110\")\n+            else:\n+                assert_equal(self.nodes[idx].getaddressinfo(self.nodes[idx].getnewaddress(address_type=output_type))['hdkeypath'], \"m/0'/0'/110'\")\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "685caf479936985cf9d01784b5f9c1fdbbb6a670",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 20,
        "deletions": 9,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaa391d98f35dc0636727206c3c1fbcf860db62c/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaa391d98f35dc0636727206c3c1fbcf860db62c/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=eaa391d98f35dc0636727206c3c1fbcf860db62c",
        "patch": "@@ -24,7 +24,17 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n+    def add_options(self, parser):\n+        parser.add_argument('--descriptors', action='store_true', dest=\"descriptors\", help=\"Run test using a descriptor wallet\", default=False)\n+\n     def run_test(self):\n+        # Setup descriptor wallets\n+        if self.options.descriptors:\n+            for n in self.nodes:\n+                n.createwallet(wallet_name='desc', descriptors=True)\n+                n.get_wallet_rpc('').unloadwallet()\n+            self.import_deterministic_coinbase_privkeys(True)\n+\n         # Check that there's no UTXO on the node\n         node = self.nodes[0]\n         assert_equal(len(node.listunspent()), 0)\n@@ -115,15 +125,16 @@ def run_test(self):\n             assert_raises_rpc_error(-11, \"No addresses with label\", node.getaddressesbylabel, \"\")\n \n         # Check that addmultisigaddress can assign labels.\n-        for label in labels:\n-            addresses = []\n-            for x in range(10):\n-                addresses.append(node.getnewaddress())\n-            multisig_address = node.addmultisigaddress(5, addresses, label.name)['address']\n-            label.add_address(multisig_address)\n-            label.purpose[multisig_address] = \"send\"\n-            label.verify(node)\n-        node.generate(101)\n+        if not self.options.descriptors:\n+            for label in labels:\n+                addresses = []\n+                for x in range(10):\n+                    addresses.append(node.getnewaddress())\n+                multisig_address = node.addmultisigaddress(5, addresses, label.name)['address']\n+                label.add_address(multisig_address)\n+                label.purpose[multisig_address] = \"send\"\n+                label.verify(node)\n+            node.generate(101)\n \n         # Check that setlabel can change the label of an address from a\n         # different label."
      }
    ]
  },
  {
    "sha": "cc443d69fe69b2d3c6c05c8238b4be0c893a19d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzQ0M2Q2OWZlNjliMmQzYzZjMDVjODIzOGI0YmUwYzg5M2ExOWQz",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-09T04:37:01Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T10:42:47Z"
      },
      "message": "[depends] update to Boost 1.72",
      "tree": {
        "sha": "39dc356fbf7a0aadce80f3fadb1fcbf8297e7f18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39dc356fbf7a0aadce80f3fadb1fcbf8297e7f18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc443d69fe69b2d3c6c05c8238b4be0c893a19d3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4ysycACgkQV/+b28ww\nEAmLyA/6Ag/iLadmBwIx/zxnOJiaH0tzvyF67VT7SKXCTfYDa9eOCTX9mePz7vEj\ncEcKjuWxcsnGSlosoe5JCPRYUCiS+cH+2rOY+phAMGOIUe5MJyHBB1bn3gUm7SAT\nJpIJ+j24+pMCO+B9Nf3OfQU/O4fi8qPfN41XE6Yt9cPT5awXeAIYT2+ebAuM/VJF\n7AM4uEjpcxdTQ7qnT9uKXU0en95m4L7DpJiYwIlmVqUWthgceY/oBhKfmQ1hocvq\niD/3FXT+CFeBcTkzccTKVzg9YneBx7/hKFYffyzwQto0mHYoOxfl6d8pA9bUYDGm\nPuftiSRyp0Eb9+QGmBX/EJD8O+5naGFqO13W3NCDqbqRps26hAjHszIUPrT6gXlh\nDuxUoH8pyjFRDufenxm3mdxhIaWSv6PiD/QENsl5dS9YGFrcMYiP1HeWQ6a+nhgq\nwGo5sAx3Mpzf2vdx362UXWT/oEu0CgthjmsZ70rc/cPV0SrO31LqJrbqByL4EW2Q\n+M9co7nlwlumkFqxBKhucue8HgardbtKRXb0AGKwmB9UukAKNfsEuCPT8I0X4j95\nWRgDM+FTly3/tnrcg4h1ap/RWdKefnP4aVDXVIzkGsNzEJAe9S+jTx4xX2MOGcTR\n4XKFPNkd92aULXkKqKHUuKZaWMFf9EEhW6eI6LJr1TNBVSU3WWU=\n=T+/I\n-----END PGP SIGNATURE-----",
        "payload": "tree 39dc356fbf7a0aadce80f3fadb1fcbf8297e7f18\nparent eaa391d98f35dc0636727206c3c1fbcf860db62c\nauthor Sjors Provoost <sjors@sprovoost.nl> 1578544621 +0800\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580380967 +0100\n\n[depends] update to Boost 1.72\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc443d69fe69b2d3c6c05c8238b4be0c893a19d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc443d69fe69b2d3c6c05c8238b4be0c893a19d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc443d69fe69b2d3c6c05c8238b4be0c893a19d3/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eaa391d98f35dc0636727206c3c1fbcf860db62c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaa391d98f35dc0636727206c3c1fbcf860db62c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eaa391d98f35dc0636727206c3c1fbcf860db62c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "37c22938a198d627007649ae782f02876bbeccda",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc443d69fe69b2d3c6c05c8238b4be0c893a19d3/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc443d69fe69b2d3c6c05c8238b4be0c893a19d3/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=cc443d69fe69b2d3c6c05c8238b4be0c893a19d3",
        "patch": "@@ -1,8 +1,8 @@\n package=boost\n-$(package)_version=1_70_0\n-$(package)_download_path=https://dl.bintray.com/boostorg/release/1.70.0/source/\n+$(package)_version=1_72_0\n+$(package)_download_path=https://dl.bintray.com/boostorg/release/1.72.0/source/\n $(package)_file_name=$(package)_$($(package)_version).tar.bz2\n-$(package)_sha256_hash=430ae8354789de4fd19ee52f3b1f739e1fba576f0aded0897c3c2bc00fb38778\n+$(package)_sha256_hash=59c9b274bc451cf91a9ba1dd2c7fdcaf5d60b1b3aa83f2c9fa143417cc660722\n \n define $(package)_set_vars\n $(package)_config_opts_release=variant=release"
      },
      {
        "sha": "1f26b5d62318439c56c7a2d1802a9fc2c2882819",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc443d69fe69b2d3c6c05c8238b4be0c893a19d3/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc443d69fe69b2d3c6c05c8238b4be0c893a19d3/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=cc443d69fe69b2d3c6c05c8238b4be0c893a19d3",
        "patch": "@@ -6,7 +6,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | Dependency | Version used | Minimum required | CVEs | Shared | [Bundled Qt library](https://doc.qt.io/qt-5/configure-options.html#third-party-libraries) |\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n-| Boost | [1.70.0](https://www.boost.org/users/download/) | [1.47.0](https://github.com/bitcoin/bitcoin/pull/8920) | No |  |  |\n+| Boost | [1.72.0](https://www.boost.org/users/download/) | [1.47.0](https://github.com/bitcoin/bitcoin/pull/8920) | No |  |  |\n | Clang |  | [3.3+](https://releases.llvm.org/download.html) (C++11 support) |  |  |  |\n | Expat | [2.2.7](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |"
      }
    ]
  },
  {
    "sha": "c1e9630ae54263505bb185fb299549f652dcff84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWU5NjMwYWU1NDI2MzUwNWJiMTg1ZmIyOTk1NDlmNjUyZGNmZjg0",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-11-01T18:13:26Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T10:42:47Z"
      },
      "message": "configure: add ax_boost_process\n\nCo-authored-by: Luke Dashjr <luke-jr+git@utopios.org>",
      "tree": {
        "sha": "0d4f16ecff5aa6800fcb53994231f0a6e45ac488",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d4f16ecff5aa6800fcb53994231f0a6e45ac488"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1e9630ae54263505bb185fb299549f652dcff84",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4ysycACgkQV/+b28ww\nEAkPcxAAmBVzrWbikn9If08X5p3/mKcFRWttx2QDw0b6q8KYNWjXTZI8HuntciWK\nSrr8p96sVQAtS5UKvM+809T/z62sVWG/CW12oPwGXRk3m+fcqqY5/soVwlTRKNX4\n5KRKIKgR4d48fqbrNi0/RhSsAffcPsvGjoa7ejS2rOQLj2WPAdrj5tmtIWaSPRT2\nYJwvroU8p6W0KMUrg8a77WrHwZqewFG2EvEnbOo27f04hSViBRZGjLbyQhtyZhSz\nI7y0uf+ObyjWwUTk4Ia4p0Yanc2QYR/gT8j3/3RXY7It/b8/chO8MDm7Wjhp9XP/\nPNFCo4Q430JGg+fywwGNoCeALVAU6KjaVGH5HNGnOusF81caj/SCc8V0FC3xngEx\nWsT6v2L7Xfy4DTpu99290QHXlbYg/TWc44LDqHIjvQwt/GckFJcYQl0uYtBhscDC\nlJth94gNZ91RUx5gAXocUibt9aG2f6DFJAnUzs4gwFeB/sjN0fNX+AFjOdScfYZA\n19z50baShfYCuQ34eHgu5lW7lZixe1W9LI+Mi/W+3QoGFQdRZzVVmJn1q3MZoo4G\nngPEkKH196szdPbAnA2a7+Z/YPsDXqm37OOr2/aqgPygHbsbgOvKYSU0wpeA8CEB\nRfmNZ+myI9YTaWXo1jVJbyIMfNZIMuRXF56tJYK2m6VDW8yyzAY=\n=U4LO\n-----END PGP SIGNATURE-----",
        "payload": "tree 0d4f16ecff5aa6800fcb53994231f0a6e45ac488\nparent cc443d69fe69b2d3c6c05c8238b4be0c893a19d3\nauthor Sjors Provoost <sjors@sprovoost.nl> 1572632006 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580380967 +0100\n\nconfigure: add ax_boost_process\n\nCo-authored-by: Luke Dashjr <luke-jr+git@utopios.org>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e9630ae54263505bb185fb299549f652dcff84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1e9630ae54263505bb185fb299549f652dcff84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e9630ae54263505bb185fb299549f652dcff84/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc443d69fe69b2d3c6c05c8238b4be0c893a19d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc443d69fe69b2d3c6c05c8238b4be0c893a19d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc443d69fe69b2d3c6c05c8238b4be0c893a19d3"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 122,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5d20e67464fcde6ee00f2582607e59f0759115b8",
        "filename": "build-aux/m4/ax_boost_process.m4",
        "status": "added",
        "additions": 121,
        "deletions": 0,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1e9630ae54263505bb185fb299549f652dcff84/build-aux/m4/ax_boost_process.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1e9630ae54263505bb185fb299549f652dcff84/build-aux/m4/ax_boost_process.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_process.m4?ref=c1e9630ae54263505bb185fb299549f652dcff84",
        "patch": "@@ -0,0 +1,121 @@\n+# ===========================================================================\n+#     https://www.gnu.org/software/autoconf-archive/ax_boost_process.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_BOOST_PROCESS\n+#\n+# DESCRIPTION\n+#\n+#   Test for Process library from the Boost C++ libraries. The macro\n+#   requires a preceding call to AX_BOOST_BASE. Further documentation is\n+#   available at <http://randspringer.de/boost/index.html>.\n+#\n+#   This macro calls:\n+#\n+#     AC_SUBST(BOOST_PROCESS_LIB)\n+#\n+#   And sets:\n+#\n+#     HAVE_BOOST_PROCESS\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Thomas Porschberg <thomas@randspringer.de>\n+#   Copyright (c) 2008 Michael Tindal\n+#   Copyright (c) 2008 Daniel Casimiro <dan.casimiro@gmail.com>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 2\n+\n+AC_DEFUN([AX_BOOST_PROCESS],\n+[\n+\tAC_ARG_WITH([boost-process],\n+\tAS_HELP_STRING([--with-boost-process@<:@=special-lib@:>@],\n+                   [use the Process library from boost - it is possible to specify a certain library for the linker\n+                        e.g. --with-boost-process=boost_process-gcc-mt ]),\n+        [\n+        if test \"$withval\" = \"no\"; then\n+\t\t\twant_boost_process=\"no\"\n+        elif test \"$withval\" = \"yes\"; then\n+            want_boost_process=\"yes\"\n+            ax_boost_user_process_lib=\"\"\n+        else\n+\t\t    want_boost_process=\"yes\"\n+\t\tax_boost_user_process_lib=\"$withval\"\n+\t\tfi\n+        ],\n+        [want_boost_process=\"yes\"]\n+\t)\n+\n+\tif test \"x$want_boost_process\" = \"xyes\"; then\n+        AC_REQUIRE([AC_PROG_CC])\n+        AC_REQUIRE([AC_CANONICAL_BUILD])\n+\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n+\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+\t\texport CPPFLAGS\n+\n+\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n+\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n+\t\texport LDFLAGS\n+\n+        AC_CACHE_CHECK(whether the Boost::Process library is available,\n+\t\t\t\t\t   ax_cv_boost_process,\n+        [AC_LANG_PUSH([C++])\n+\t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n+\t\t\t CXXFLAGS=\n+\n+             AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/process.hpp>]],\n+                [[boost::process::child* child = new boost::process::child; delete child;]])],\n+                ax_cv_boost_process=yes, ax_cv_boost_process=no)\n+\t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n+             AC_LANG_POP([C++])\n+\t\t])\n+\t\tif test \"x$ax_cv_boost_process\" = \"xyes\"; then\n+\t\t\tAC_SUBST(BOOST_CPPFLAGS)\n+\n+\t\t\tAC_DEFINE(HAVE_BOOST_PROCESS,,[define if the Boost::Process library is available])\n+            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n+\n+\t\t\tLDFLAGS_SAVE=$LDFLAGS\n+            if test \"x$ax_boost_user_process_lib\" = \"x\"; then\n+                for libextension in `ls -r $BOOSTLIBDIR/libboost_process* 2>/dev/null | sed 's,.*/lib,,' | sed 's,\\..*,,'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n+                                 [link_process=\"no\"])\n+\t\t\t\tdone\n+                if test \"x$link_process\" != \"xyes\"; then\n+                for libextension in `ls -r $BOOSTLIBDIR/boost_process* 2>/dev/null | sed 's,.*/,,' | sed -e 's,\\..*,,'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n+                                 [link_process=\"no\"])\n+\t\t\t\tdone\n+                fi\n+\n+            else\n+               for ax_lib in $ax_boost_user_process_lib boost_process-$ax_boost_user_process_lib; do\n+\t\t\t\t      AC_CHECK_LIB($ax_lib, exit,\n+                                   [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n+                                   [link_process=\"no\"])\n+                  done\n+\n+            fi\n+            if test \"x$ax_lib\" = \"x\"; then\n+                AC_MSG_ERROR(Could not find a version of the Boost::Process library!)\n+            fi\n+\t\t\tif test \"x$link_process\" = \"xno\"; then\n+\t\t\t\tAC_MSG_ERROR(Could not link against $ax_lib !)\n+\t\t\tfi\n+\t\tfi\n+\n+\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n+\tLDFLAGS=\"$LDFLAGS_SAVED\"\n+\tfi\n+])"
      },
      {
        "sha": "82823641f0000ffdd7cfb240de19c33616728f04",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1e9630ae54263505bb185fb299549f652dcff84/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1e9630ae54263505bb185fb299549f652dcff84/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=c1e9630ae54263505bb185fb299549f652dcff84",
        "patch": "@@ -1075,6 +1075,7 @@ AX_BOOST_SYSTEM\n AX_BOOST_FILESYSTEM\n AX_BOOST_THREAD\n AX_BOOST_CHRONO\n+AX_BOOST_PROCESS\n \n dnl Boost 1.56 through 1.62 allow using std::atomic instead of its own atomic\n dnl counter implementations. In 1.63 and later the std::atomic approach is default."
      }
    ]
  },
  {
    "sha": "841489618265014f5e8965b195c63a3b2c517de7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDE0ODk2MTgyNjUwMTRmNWU4OTY1YjE5NWM2M2EzYjJjNTE3ZGU3",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-13T17:17:32Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T10:42:48Z"
      },
      "message": "[build] msvc: add boost::process\n\n* AppVeyor boost-process vcpkg package.\n* Tell Boost linter to ignore it\n* Add HAVE_BOOST_PROCESS for MSVC build (bitcoin_config.h)",
      "tree": {
        "sha": "2b7feae2589cbacb556ff35866b4e19e7613b398",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b7feae2589cbacb556ff35866b4e19e7613b398"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/841489618265014f5e8965b195c63a3b2c517de7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4ysygACgkQV/+b28ww\nEAnD7g//ffuJR7l4Fjpd7g9LWyknHrf2pOSW/Jmr+XmnGZN10mgf6vcRwlA0roRV\nuVvJiuiCK8Xb/0Zg0bQhJwNmA1bCqAos4viCGRg2aCAJ38HnDW29yPYZiLQVM0QV\noqgG5KeKf8Lpzz+zmiGFZAZ7NfXLR2lL+ICAwHPbmfH3O5IKUsdH4pAtqXFPlsh6\nJFrGXJk7jlHypc9oKccwvmVQh75FqIuHyCA1ukRBKQ8If5RHpQLY2lE+559PCzQJ\nAFhN1n/HdGdO6msKCtyWGndAdhtbf724YRh28KSfgm8aoR/fSbrdd+Y82mKGKIv+\ngSBblG8FrwEGWDJijISscXi+Rla/QmWUZp55uFyGgHTgj3yLZNnZY90oCAggd9dc\n/ViYBQyEOVCJDuvCzjAbeMj8ms0hxBC528vkwKCC2VU0Iau953NJnCIFA4jRTYAH\n4b2Uqit0CXtf8amekR0kscUkwY9uSawMJheJnmQnSQJDnkwxRPBtnny57NrJOb80\nddhuJHeYbvEGVhPsu6BUY6hXGOh8RHuropFmhzKWWZ9uWnx6pTLyYix1GNX1q8qB\n2EP33pKQiZFfl8UrbByR9Q2czOkcPgs/XF+OUerqefTu2TR0/CKowR0/dkLdnbui\nTutWa5RUUqgFxrYwvSTFwSPJ8EswJejIiBiHBWlA8i1KD7PlEdI=\n=Eqxc\n-----END PGP SIGNATURE-----",
        "payload": "tree 2b7feae2589cbacb556ff35866b4e19e7613b398\nparent c1e9630ae54263505bb185fb299549f652dcff84\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550078252 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580380968 +0100\n\n[build] msvc: add boost::process\n\n* AppVeyor boost-process vcpkg package.\n* Tell Boost linter to ignore it\n* Add HAVE_BOOST_PROCESS for MSVC build (bitcoin_config.h)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/841489618265014f5e8965b195c63a3b2c517de7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/841489618265014f5e8965b195c63a3b2c517de7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/841489618265014f5e8965b195c63a3b2c517de7/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1e9630ae54263505bb185fb299549f652dcff84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e9630ae54263505bb185fb299549f652dcff84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1e9630ae54263505bb185fb299549f652dcff84"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f0eb11e0c6cea742308b83b3dd641de542ce46de",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/841489618265014f5e8965b195c63a3b2c517de7/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/841489618265014f5e8965b195c63a3b2c517de7/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=841489618265014f5e8965b195c63a3b2c517de7",
        "patch": "@@ -53,6 +53,9 @@\n /* define if the Boost::Filesystem library is available */\n #define HAVE_BOOST_FILESYSTEM /**/\n \n+/* define if the Boost::Process library is available */\n+#define HAVE_BOOST_PROCESS /**/\n+\n /* define if the Boost::System library is available */\n #define HAVE_BOOST_SYSTEM /**/\n "
      },
      {
        "sha": "374655d818987b3d6b876da95cd2413e5d8c7780",
        "filename": "build_msvc/vcpkg-packages.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/841489618265014f5e8965b195c63a3b2c517de7/build_msvc/vcpkg-packages.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/841489618265014f5e8965b195c63a3b2c517de7/build_msvc/vcpkg-packages.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/vcpkg-packages.txt?ref=841489618265014f5e8965b195c63a3b2c517de7",
        "patch": "@@ -1 +1 @@\n-berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] rapidcheck zeromq double-conversion\n\\ No newline at end of file\n+berkeleydb boost-filesystem boost-multi-index boost-process boost-signals2 boost-test boost-thread libevent[thread] rapidcheck zeromq double-conversion\n\\ No newline at end of file"
      },
      {
        "sha": "b4055d12d23dee22bf9d9aac8a21abc13404877d",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/841489618265014f5e8965b195c63a3b2c517de7/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/841489618265014f5e8965b195c63a3b2c517de7/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=841489618265014f5e8965b195c63a3b2c517de7",
        "patch": "@@ -64,6 +64,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/optional.hpp\n     boost/preprocessor/cat.hpp\n     boost/preprocessor/stringize.hpp\n+    boost/process.hpp\n     boost/signals2/connection.hpp\n     boost/signals2/last_value.hpp\n     boost/signals2/signal.hpp"
      }
    ]
  },
  {
    "sha": "e169a0fa6fa6f59baa5a95686858950b17be8856",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTY5YTBmYTZmYTZmNTliYWE1YTk1Njg2ODU4OTUwYjE3YmU4ODU2",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-11-03T08:57:18Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T10:42:48Z"
      },
      "message": "[doc] include Doxygen comments for HAVE_BOOST_PROCESS",
      "tree": {
        "sha": "5c70c507410d1e0e0a775718bbcf7f5856382019",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c70c507410d1e0e0a775718bbcf7f5856382019"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e169a0fa6fa6f59baa5a95686858950b17be8856",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4ysygACgkQV/+b28ww\nEAkobw//Xz5LvPZ0Ca4tLZUrrAnT3Lyqfl4ZwD+Imegy6N27uTaFPY3+TrgVGlYA\na1IyNDcXyS0Alc+I6yUlUZm6lf/JHJ0CidIp4CXIoroKM2TTMwtI+oDqvoGtHMvo\ngRuqDqzanLTs2TuyQAtFFm6TpyRyv/AK3ySDLxGafZ7RHR7NoGBcPxN43bnrcpti\n8+mLnQ5Z+u66VNGOt0JpoTaQOMzTO65qlK3WreZyUerLAp0JrHJEGBaYJN+tqiD6\nQMIEt3xg2/akqsDDALSNuQvtgjlvb7dGAXjb5iBzS18NXjomCqvIbB6Ypyak0RQb\nyOlKI4Q6giwz3e29e5R/TzDWjUmW1URe0KK9Pttlj5iZY5igOYdXjzaHSJn++PUZ\ntKrZjhHuT30xSX1B6TarKBgXCI1ahbJ+H7aVympwoPhH9NyQ2ldfzQXqc1cxi+Q7\nfJtc6r/evBJsjkwqXt588qXU+H+XwnJ9mYKvcFOBQ+x/603wZGUwviWAOu5lezP7\n3jOLzq7Q/RY1mvUJX24VPMwA7B1tvj6z+Gu9ArVKLg0IMAPGCiENp74oGLXO0ImA\nsk8ZxC74GdndCaAO9H2GMgX9mkkrZb94g1pGJknmv7QvAwbMXmVf2TyZT2HZ0ESy\nFhTXEb1NLZhHqF8so7vzbLsEFOYdrAKTQjtSWSKVhf9EWCkSWbU=\n=IUZ4\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c70c507410d1e0e0a775718bbcf7f5856382019\nparent 841489618265014f5e8965b195c63a3b2c517de7\nauthor Sjors Provoost <sjors@sprovoost.nl> 1572771438 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580380968 +0100\n\n[doc] include Doxygen comments for HAVE_BOOST_PROCESS\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e169a0fa6fa6f59baa5a95686858950b17be8856",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e169a0fa6fa6f59baa5a95686858950b17be8856",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e169a0fa6fa6f59baa5a95686858950b17be8856/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "841489618265014f5e8965b195c63a3b2c517de7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/841489618265014f5e8965b195c63a3b2c517de7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/841489618265014f5e8965b195c63a3b2c517de7"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ae53aae96003d67e509d5445278a948af69660a5",
        "filename": "doc/Doxyfile.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e169a0fa6fa6f59baa5a95686858950b17be8856/doc/Doxyfile.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e169a0fa6fa6f59baa5a95686858950b17be8856/doc/Doxyfile.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile.in?ref=e169a0fa6fa6f59baa5a95686858950b17be8856",
        "patch": "@@ -2072,7 +2072,7 @@ INCLUDE_FILE_PATTERNS  =\n # recursively expanded use the := operator instead of the = operator.\n # This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n \n-PREDEFINED             =\n+PREDEFINED             = HAVE_BOOST_PROCESS\n \n # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this\n # tag can be used to specify a list of macro names that should be expanded. The"
      }
    ]
  },
  {
    "sha": "6ecbcfab81da9e0bed13d21f76f769ae503bcfe3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWNiY2ZhYjgxZGE5ZTBiZWQxM2QyMWY3NmY3NjlhZTUwM2JjZmUz",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T11:07:57Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T11:10:38Z"
      },
      "message": "[util] add runCommandParseJSON",
      "tree": {
        "sha": "cc9deda67a4d975482276eaef8b9b22fd28d8a8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc9deda67a4d975482276eaef8b9b22fd28d8a8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ecbcfab81da9e0bed13d21f76f769ae503bcfe3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4yua4ACgkQV/+b28ww\nEAkkcRAAp0R0zxyjdc6XIPj9L0L8ulU0Rd4Cw7lixmVrJYtqfp8XiPjpjD7lvuYg\nxNZr0cTD8GVcGAOpTAImYsFHG+T8+PY4tSShnLLIRqE1trpH/mKeYlBfkpstsXA1\nsiOteMnwG1x1tTCOs9d8ZU6XDmvO5xU7IcqlpMV7wD0VRUi4W0Ed1bf5aE33Ca/L\nQAhW6XefK6jCuiDT3nRNOKbA4qu85029erLQFWnTOnQe+B83hPZIj91x6PjISMnw\nLoFU6JgXlm1M0YUueOySpEpO/xHTMgbgi89abKDhITd9lnObtncaKQmCZVE0fyMR\ntpPoNOYhcfoBpeSxB9f4gvM3uYofcKw5kZ3D2xyQZCR1q5rIctcybWw9aOmdhbW5\n1KrLC1VbeyZonPsZDGxnnJfXzP9oqC8jJB3kaqRPbLgvTLCf40m2aH2MRPW6Bu/A\nfQkDASn/8xX+FD5352OQ/zn2doZIWFV/lpH3fjgPjYH/OPezeKB7Hb+QaHjL4TMO\nxa8AJCdDIJQkgTVQkA52V11OjNG997yh+zdddk7pW0YEVRvn9V4gvLS+DeCNWVY9\ns7eZmuWVKrV7aQRoP3+pSu+9SweS7C/ykNIE5XBJwCIBE8c7+b4n7MV/wdZRBkPN\n0SugTELMZGaW82NUtU5G76Zg5TzOTReTPhgN1qSRAZIA0ac8luo=\n=YaEY\n-----END PGP SIGNATURE-----",
        "payload": "tree cc9deda67a4d975482276eaef8b9b22fd28d8a8c\nparent e169a0fa6fa6f59baa5a95686858950b17be8856\nauthor Sjors Provoost <sjors@sprovoost.nl> 1580382477 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580382638 +0100\n\n[util] add runCommandParseJSON\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ecbcfab81da9e0bed13d21f76f769ae503bcfe3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ecbcfab81da9e0bed13d21f76f769ae503bcfe3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ecbcfab81da9e0bed13d21f76f769ae503bcfe3/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e169a0fa6fa6f59baa5a95686858950b17be8856",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e169a0fa6fa6f59baa5a95686858950b17be8856",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e169a0fa6fa6f59baa5a95686858950b17be8856"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 108,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9955e6367cb5f3652f3267ee2822312e1a014d62",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ecbcfab81da9e0bed13d21f76f769ae503bcfe3/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ecbcfab81da9e0bed13d21f76f769ae503bcfe3/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=6ecbcfab81da9e0bed13d21f76f769ae503bcfe3",
        "patch": "@@ -164,6 +164,7 @@ BITCOIN_TESTS =\\\n   test/random_tests.cpp \\\n   test/reverselock_tests.cpp \\\n   test/rpc_tests.cpp \\\n+  test/system_tests.cpp \\\n   test/sanity_tests.cpp \\\n   test/scheduler_tests.cpp \\\n   test/script_p2sh_tests.cpp \\"
      },
      {
        "sha": "d4ccecebd6ef994a78c343797efd6b49f9640113",
        "filename": "src/test/system_tests.cpp",
        "status": "added",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ecbcfab81da9e0bed13d21f76f769ae503bcfe3/src/test/system_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ecbcfab81da9e0bed13d21f76f769ae503bcfe3/src/test/system_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/system_tests.cpp?ref=6ecbcfab81da9e0bed13d21f76f769ae503bcfe3",
        "patch": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <test/util/setup_common.h>\n+#include <util/system.h>\n+#include <univalue.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(system_tests, BasicTestingSetup)\n+\n+// At least one test is required (in case HAVE_BOOST_PROCESS is not defined)\n+BOOST_AUTO_TEST_CASE(dummy)\n+{\n+    BOOST_CHECK(true);\n+}\n+\n+#ifdef HAVE_BOOST_PROCESS\n+BOOST_AUTO_TEST_CASE(run_command)\n+{\n+    {\n+        const UniValue result = runCommandParseJSON(\"\");\n+        BOOST_CHECK(result.isNull());\n+    }\n+    {\n+#ifdef WIN32\n+        // Windows requires single quotes to prevent escaping double quotes from the JSON...\n+        const UniValue result = runCommandParseJSON(\"echo '{\\\"success\\\": true}'\");\n+#else\n+        // ... but Linux and macOS echo a single quote if it's used\n+        const UniValue result = runCommandParseJSON(\"echo \\\"{\\\"success\\\": true}\\\"\");\n+#endif\n+        BOOST_CHECK(result.isObject());\n+        const UniValue& success = find_value(result, \"success\");\n+        BOOST_CHECK(!success.isNull());\n+        BOOST_CHECK_EQUAL(success.getBool(), true);\n+    }\n+    {\n+        BOOST_REQUIRE_THROW(runCommandParseJSON(\"invalid_command\"), std::runtime_error); // Command failed\n+    }\n+    {\n+        BOOST_REQUIRE_THROW(runCommandParseJSON(\"echo \\\"{\\\"\"), std::runtime_error); // Unable to parse JSON\n+    }\n+    // Test std::in, except for Windows\n+#ifndef WIN32\n+    {\n+        const UniValue result = runCommandParseJSON(\"cat\", \"{\\\"success\\\": true}\");\n+        BOOST_CHECK(result.isObject());\n+        const UniValue& success = find_value(result, \"success\");\n+        BOOST_CHECK(!success.isNull());\n+        BOOST_CHECK_EQUAL(success.getBool(), true);\n+    }\n+#endif\n+}\n+#endif\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "2aa6814cd54f002549ce973fec1aa1d1f3693c1d",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ecbcfab81da9e0bed13d21f76f769ae503bcfe3/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ecbcfab81da9e0bed13d21f76f769ae503bcfe3/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=6ecbcfab81da9e0bed13d21f76f769ae503bcfe3",
        "patch": "@@ -5,6 +5,10 @@\n \n #include <util/system.h>\n \n+#ifdef HAVE_BOOST_PROCESS\n+#include <boost/process.hpp>\n+#endif\n+\n #include <chainparamsbase.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n@@ -1038,6 +1042,39 @@ void runCommand(const std::string& strCommand)\n }\n #endif\n \n+#ifdef HAVE_BOOST_PROCESS\n+UniValue runCommandParseJSON(const std::string& str_command, const std::string& str_std_in)\n+{\n+    namespace bp = boost::process;\n+\n+    UniValue result_json;\n+    bp::opstream stdin_stream;\n+    bp::ipstream stdout_stream;\n+\n+    if (str_command.empty()) return UniValue::VNULL;\n+\n+    bp::child c(\n+        str_command,\n+        bp::std_out > stdout_stream,\n+        bp::std_in < stdin_stream\n+    );\n+    if (!str_std_in.empty()) {\n+        stdin_stream << str_std_in << std::endl;\n+    }\n+    stdin_stream.pipe().close();\n+\n+    std::string result;\n+    std::getline(stdout_stream, result);\n+\n+    c.wait();\n+    const int n_error = c.exit_code();\n+    if (n_error) throw std::runtime_error(strprintf(\"runCommandParseJSON error: process(%s) returned %d\\n\", str_command, n_error));\n+    if (!result_json.read(result)) throw std::runtime_error(\"Unable to parse JSON: \" + result);\n+\n+    return result_json;\n+}\n+#endif\n+\n void SetupEnvironment()\n {\n #ifdef HAVE_MALLOPT_ARENA_MAX"
      },
      {
        "sha": "5ea17abde4dc8fff581ab7efdf69ce06f8d632cc",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ecbcfab81da9e0bed13d21f76f769ae503bcfe3/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ecbcfab81da9e0bed13d21f76f769ae503bcfe3/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=6ecbcfab81da9e0bed13d21f76f769ae503bcfe3",
        "patch": "@@ -37,6 +37,8 @@\n \n #include <boost/thread/condition_variable.hpp> // for boost::thread_interrupted\n \n+class UniValue;\n+\n // Application startup time (used for uptime calculation)\n int64_t GetStartupTime();\n \n@@ -84,6 +86,16 @@ fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #if HAVE_SYSTEM\n void runCommand(const std::string& strCommand);\n #endif\n+#ifdef HAVE_BOOST_PROCESS\n+/**\n+ * Execute a command with returns JSON, and parse the result.\n+ *\n+ * @param str_command The command to execute, including any arguments\n+ * @param str_std_in string to pass to stdin\n+ * @return parsed JSON\n+ */\n+UniValue runCommandParseJSON(const std::string& str_command, const std::string& str_std_in=\"\");\n+#endif\n \n /**\n  * Most paths passed as configuration arguments are treated as relative to"
      }
    ]
  },
  {
    "sha": "3a2949ce54dd3eb6c7e0ef60b5b0c0fb5cd0ba97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTI5NDljZTU0ZGQzZWI2YzdlMGVmNjBiNWIwYzBmYjVjZDBiYTk3",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-30T19:08:23Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T11:10:38Z"
      },
      "message": "configure: add --disable-external-signer\n\nThis prepares external signer support to be enabled by default\nif Boost::Process is present. It adds a configure option to\ndisable this feature.\n\nIt can also be disabled using --without-boost-process\n\nThis also exposes ENABLE_EXTERNAL_SIGNER to the test suite via test/config.ini",
      "tree": {
        "sha": "3586cad1778243541d2f5d797a0553469e30bac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3586cad1778243541d2f5d797a0553469e30bac9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a2949ce54dd3eb6c7e0ef60b5b0c0fb5cd0ba97",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4yua4ACgkQV/+b28ww\nEAlX9A//YkQ186gUpbJu362TYp33pVfbpSqXDz7kNhG087qewuJvAsIm+97d/tCG\n20qsikih1eYC8uJCgaPiqWqVmWKrMQ6S4W4dK3KPnHR+v0yT6X0dj+HBFPXUQ43u\nLKoJpGz49c88FRKPsj8pmbL/YUOl4JKK5fXIvKwhFUqutsOcIJdcF/QtZnz/4LrK\nn2CMEHNsa5J+gThTUXlCpDUomEK1MAIY8v9JOLVOtF9wzFX5Rz+/2egk+/CqpTKa\nURJ3NaVcDd4Y6/Lxrj2DH0ENIzv2f/AgL4mY/XdfYMyrQaBBSkNWkp+GPZkHR1zQ\nZm/tuZ2J4X9KvHgR4QGrZ8QrWl1YG4afy1s1PtA7ks3Ktpk1/hSQCijzgttZN4mt\nui0XGEzbO9WkJNI0NIYPBlaK72t8G+kZN2rQYzKD2HnWiWqwUU6wnd1ZbrBOgTEq\npccaOYLwVO5/GO3wxjJtzogxFBsGg+W8Bt7SP00tY3OJMHx6SwkDViF0sfl4Xqc5\nA468hYjwBqlx+lIPcEm1xxq+ziH41Vy57pHWx7EWxWEmvHGa9fpsGoTI6Fy+2esd\nhX+6DzJ27+8i8KUI1IyNXIBKqNyXPhb3pYjau/PiGHo589yp7NgqNiljfsUcJqRY\nGDeA6e42r0Czcc2xFcE69JN6aHr6TUxblmvQIpUqHaF/ZiU/gR8=\n=GArq\n-----END PGP SIGNATURE-----",
        "payload": "tree 3586cad1778243541d2f5d797a0553469e30bac9\nparent 6ecbcfab81da9e0bed13d21f76f769ae503bcfe3\nauthor Sjors Provoost <sjors@sprovoost.nl> 1572462503 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580382638 +0100\n\nconfigure: add --disable-external-signer\n\nThis prepares external signer support to be enabled by default\nif Boost::Process is present. It adds a configure option to\ndisable this feature.\n\nIt can also be disabled using --without-boost-process\n\nThis also exposes ENABLE_EXTERNAL_SIGNER to the test suite via test/config.ini\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a2949ce54dd3eb6c7e0ef60b5b0c0fb5cd0ba97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a2949ce54dd3eb6c7e0ef60b5b0c0fb5cd0ba97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a2949ce54dd3eb6c7e0ef60b5b0c0fb5cd0ba97/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ecbcfab81da9e0bed13d21f76f769ae503bcfe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ecbcfab81da9e0bed13d21f76f769ae503bcfe3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ecbcfab81da9e0bed13d21f76f769ae503bcfe3"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 58,
      "deletions": 23
    },
    "files": [
      {
        "sha": "4f79c35b54e83d0533c1bf8fe6c1496196737b03",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 57,
        "deletions": 23,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a2949ce54dd3eb6c7e0ef60b5b0c0fb5cd0ba97/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a2949ce54dd3eb6c7e0ef60b5b0c0fb5cd0ba97/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=3a2949ce54dd3eb6c7e0ef60b5b0c0fb5cd0ba97",
        "patch": "@@ -124,6 +124,11 @@ AC_ARG_ENABLE([upnp-default],\n   [use_upnp_default=$enableval],\n   [use_upnp_default=no])\n \n+AC_ARG_ENABLE([external-signer],\n+    [AS_HELP_STRING([--disable-external-signer],[do not compile external signer support (default is to compile if Boost::Process is found)])],\n+    [use_external_signer=$enableval],\n+    [use_external_signer=auto])\n+\n AC_ARG_ENABLE(tests,\n     AS_HELP_STRING([--disable-tests],[do not compile tests (default is to compile)]),\n     [use_tests=$enableval],\n@@ -1012,6 +1017,7 @@ if test \"x$enable_fuzz\" = \"xyes\"; then\n   bitcoin_enable_qt_dbus=no\n   enable_wallet=no\n   use_bench=no\n+  use_external_signer=no\n   use_upnp=no\n   use_zmq=no\n else\n@@ -1445,6 +1451,32 @@ else\n   fi\n fi\n \n+dnl External signer support is optional. It requires Boost.Process which is only present in newer boost versions (>=1.64)\n+AC_MSG_CHECKING([whether to build with external signer support])\n+if test x$want_boost_process = xno; then\n+  if test x$use_external_signer = xyes; then\n+    AC_MSG_ERROR(\"External signer support requested but requires Boost.Pocess\")\n+  fi\n+  AC_MSG_RESULT(no)\n+  use_external_signer=no\n+elif test x$ax_cv_boost_process = xno; then\n+  if test x$use_external_signer = xyes; then\n+     AC_MSG_ERROR(\"External signer support requested but requires Boost.Pocess\")\n+  fi\n+  AC_MSG_RESULT(no)\n+  use_external_signer=no\n+else\n+  if test x$use_external_signer != xno; then\n+    AC_MSG_RESULT(yes)\n+    use_external_signer=yes\n+    AC_DEFINE_UNQUOTED([ENABLE_EXTERNAL_SIGNER],[$use_external_signer],[External signer support not compiled if undefined, otherwise value (0 or 1) determines default state])\n+  else\n+    AC_MSG_RESULT(no)\n+  fi\n+fi\n+\n+AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n+\n dnl these are only used when qt is enabled\n BUILD_TEST_QT=\"\"\n if test x$bitcoin_enable_qt != xno; then\n@@ -1570,6 +1602,7 @@ AC_SUBST(SSE41_CXXFLAGS)\n AC_SUBST(AVX2_CXXFLAGS)\n AC_SUBST(SHANI_CXXFLAGS)\n AC_SUBST(LIBTOOL_APP_LDFLAGS)\n+AC_SUBST(ENABLE_EXTERNAL_SIGNER)\n AC_SUBST(USE_UPNP)\n AC_SUBST(USE_QRCODE)\n AC_SUBST(BOOST_LIBS)\n@@ -1631,33 +1664,34 @@ esac\n \n echo\n echo \"Options used to compile and link:\"\n-echo \"  with wallet   = $enable_wallet\"\n-echo \"  with gui / qt = $bitcoin_enable_qt\"\n+echo \"  with wallet     = $enable_wallet\"\n+echo \"  with gui / qt   = $bitcoin_enable_qt\"\n if test x$bitcoin_enable_qt != xno; then\n-    echo \"    with qr     = $use_qr\"\n+    echo \"    with qr       = $use_qr\"\n fi\n-echo \"  with zmq      = $use_zmq\"\n-echo \"  with test     = $use_tests\"\n+echo \"  external signer = $use_external_signer\"\n+echo \"  with zmq        = $use_zmq\"\n+echo \"  with test       = $use_tests\"\n if test x$use_tests != xno; then\n-    echo \"    with prop   = $enable_property_tests\"\n-    echo \"    with fuzz   = $enable_fuzz\"\n+    echo \"    with prop     = $enable_property_tests\"\n+    echo \"    with fuzz     = $enable_fuzz\"\n fi\n-echo \"  with bench    = $use_bench\"\n-echo \"  with upnp     = $use_upnp\"\n-echo \"  use asm       = $use_asm\"\n-echo \"  sanitizers    = $use_sanitizers\"\n-echo \"  debug enabled = $enable_debug\"\n-echo \"  gprof enabled = $enable_gprof\"\n-echo \"  werror        = $enable_werror\"\n+echo \"  with bench      = $use_bench\"\n+echo \"  with upnp       = $use_upnp\"\n+echo \"  use asm         = $use_asm\"\n+echo \"  sanitizers      = $use_sanitizers\"\n+echo \"  debug enabled   = $enable_debug\"\n+echo \"  gprof enabled   = $enable_gprof\"\n+echo \"  werror          = $enable_werror\"\n echo\n-echo \"  target os     = $TARGET_OS\"\n-echo \"  build os      = $BUILD_OS\"\n+echo \"  target os       = $TARGET_OS\"\n+echo \"  build os        = $BUILD_OS\"\n echo\n-echo \"  CC            = $CC\"\n-echo \"  CFLAGS        = $CFLAGS\"\n-echo \"  CPPFLAGS      = $DEBUG_CPPFLAGS $HARDENED_CPPFLAGS $CPPFLAGS\"\n-echo \"  CXX           = $CXX\"\n-echo \"  CXXFLAGS      = $DEBUG_CXXFLAGS $HARDENED_CXXFLAGS $WARN_CXXFLAGS $NOWARN_CXXFLAGS $ERROR_CXXFLAGS $GPROF_CXXFLAGS $CXXFLAGS\"\n-echo \"  LDFLAGS       = $PTHREAD_CFLAGS $HARDENED_LDFLAGS $GPROF_LDFLAGS $LDFLAGS\"\n-echo \"  ARFLAGS       = $ARFLAGS\"\n+echo \"  CC              = $CC\"\n+echo \"  CFLAGS          = $CFLAGS\"\n+echo \"  CPPFLAGS        = $DEBUG_CPPFLAGS $HARDENED_CPPFLAGS $CPPFLAGS\"\n+echo \"  CXX             = $CXX\"\n+echo \"  CXXFLAGS        = $DEBUG_CXXFLAGS $HARDENED_CXXFLAGS $WARN_CXXFLAGS $NOWARN_CXXFLAGS $ERROR_CXXFLAGS $GPROF_CXXFLAGS $CXXFLAGS\"\n+echo \"  LDFLAGS         = $PTHREAD_CFLAGS $HARDENED_LDFLAGS $GPROF_LDFLAGS $LDFLAGS\"\n+echo \"  ARFLAGS         = $ARFLAGS\"\n echo"
      },
      {
        "sha": "d0f4dc673a9a444f0d328005bd06198a3984ea77",
        "filename": "test/config.ini.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a2949ce54dd3eb6c7e0ef60b5b0c0fb5cd0ba97/test/config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a2949ce54dd3eb6c7e0ef60b5b0c0fb5cd0ba97/test/config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/config.ini.in?ref=3a2949ce54dd3eb6c7e0ef60b5b0c0fb5cd0ba97",
        "patch": "@@ -20,3 +20,4 @@ RPCAUTH=@abs_top_srcdir@/share/rpcauth/rpcauth.py\n @BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=true\n @ENABLE_FUZZ_TRUE@ENABLE_FUZZ=true\n @ENABLE_ZMQ_TRUE@ENABLE_ZMQ=true\n+@ENABLE_EXTERNAL_SIGNER_TRUE@ENABLE_EXTERNAL_SIGNER=true"
      }
    ]
  },
  {
    "sha": "e0d2020920414361a6660caf62bd7f096f16df53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGQyMDIwOTIwNDE0MzYxYTY2NjBjYWY2MmJkN2YwOTZmMTZkZjUz",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-11-03T09:03:46Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:08Z"
      },
      "message": "[build] msvc: define ENABLE_EXTERNAL_SIGNER",
      "tree": {
        "sha": "8a0e600f5c107adc9c799d51b0bc1000038071e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a0e600f5c107adc9c799d51b0bc1000038071e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0d2020920414361a6660caf62bd7f096f16df53",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtQACgkQV/+b28ww\nEAm6ZxAAgpFP6a5VVMyYXGxCFWfloMq4VZWQhNJkAzX/sb1G33MXKrdlU0ezcbaL\nCiU2teVTIfZnJTnxh5s8IAqujeAj54UPiTx8T2EyAP9q103zGM+HYVXExVlcC2cP\nWw/WWiLy8kkwCO2FWaoEtiTVAIFuqrCORXVXMxAemCXmJ2Guf8Mpx4V8g5iAZIBC\ndsCIIYkDRfnEnEDwwJCLGQlhWAjch8V02UuaFiQBLMZNh5pWCr/lMBjrEHML4r5X\nWzn2WIo1aFeyokIvW1y2vdwiO5voFIBn/r2X7Z7MyCQbB5DG5rp+esObGKEGvMIY\nPDlPhc+q5lQ12Ed8v70Nj+tmUc1RtZ7XZ35lC+Mz97zhNY4Eepb69nm4M57NF+fO\nDCe9L2I7RRyxGgfbEDPPO1hh/ffm0k6FSsU4mZDd8p2I+s/AqZ9//Gvfp6uAeIt5\nJoIzKUItFLPO6M5YA2GrrkAmHRO8MGFyd9qmmajWZaRgC6DeTOpuFdJjMwPwb06b\nN0wzBqQvdwzAR4IK7Ml2A3EasJxCkCKy3IbUzMOhBJ/qFijWAF3OilO0/RWflkTJ\noZgApjSygzwEz+FFsevE0GnENA6DMZQPg1K5cAok7r7Or6AxEtuPm7ITdMYu3ysf\ny4spLEUo2YkUO/cRIMntnMggUI2QMkt1feDwckdTl2ND7sFUR8I=\n=KSgz\n-----END PGP SIGNATURE-----",
        "payload": "tree 8a0e600f5c107adc9c799d51b0bc1000038071e2\nparent 3a2949ce54dd3eb6c7e0ef60b5b0c0fb5cd0ba97\nauthor Sjors Provoost <sjors@sprovoost.nl> 1572771826 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407508 +0100\n\n[build] msvc: define ENABLE_EXTERNAL_SIGNER\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0d2020920414361a6660caf62bd7f096f16df53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0d2020920414361a6660caf62bd7f096f16df53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0d2020920414361a6660caf62bd7f096f16df53/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a2949ce54dd3eb6c7e0ef60b5b0c0fb5cd0ba97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a2949ce54dd3eb6c7e0ef60b5b0c0fb5cd0ba97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a2949ce54dd3eb6c7e0ef60b5b0c0fb5cd0ba97"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "83daa1d9887002a8d83414c1cd328b48529e1259",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0d2020920414361a6660caf62bd7f096f16df53/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0d2020920414361a6660caf62bd7f096f16df53/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=e0d2020920414361a6660caf62bd7f096f16df53",
        "patch": "@@ -56,6 +56,9 @@\n /* define if the Boost::Process library is available */\n #define HAVE_BOOST_PROCESS /**/\n \n+/* define if external signer support is enabled (requires Boost::Process) */\n+#define ENABLE_EXTERNAL_SIGNER 1 /**/\n+\n /* define if the Boost::System library is available */\n #define HAVE_BOOST_SYSTEM /**/\n "
      }
    ]
  },
  {
    "sha": "75c08892873a9d461f309515a082c84a2b1d7e8f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWMwODg5Mjg3M2E5ZDQ2MWYzMDk1MTVhMDgyYzg0YTJiMWQ3ZThm",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-11-03T08:58:36Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:08Z"
      },
      "message": "[doc] include Doxygen comments for ENABLE_EXTERNAL_SIGNER",
      "tree": {
        "sha": "a2433f2e0d2872cf3ac6ccaee6aa0d8453f66a00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2433f2e0d2872cf3ac6ccaee6aa0d8453f66a00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75c08892873a9d461f309515a082c84a2b1d7e8f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtQACgkQV/+b28ww\nEAnLuA/+N7E5i+F3m+PTtbxtVeS4QTYYOj670dZ+vjhQMzU1afl1Z2r42T4C+xQV\nwSfTBOd8ysxLwB1Jv4I3x04gTqQSVYWtVR4KnvxBPfz+ODnmUV9M6jEZxuTQ7S18\nk8eTZBbgvpnmd9GART1KJY93sVydf7BlvJRvuPQy7VvZGmXIc1ybXCNMAHRDyNnS\nQh8s9sXi+vacXve9kLjSFMuEEdPMh2BoiItJdLPwwMSgCgQOUs9kFwnUdbYrll8L\nMr/y36hMLKjsYE5C2oNMZbM+ceWCdSQYmou99ODNmck0QLOAd+LpMlrABnDYNsiW\nwb3Eu0JxzJ0o1ZhvnW3G0jzDrTu47l3qnYLJ0VZ3pWtOB/v+Y2Wj0DyY+MN14xzy\nYxJaRbLsP5RrkXh/LxudgaAWwUDS0GbYjJUkUUDJU2Buwj7Ats2MZo6i6l7z/g9o\n9oVwP1vaXmkSis1U4/Jt3hq1WNph6Q5Zaf4ux9JQhectczRPVNkJE4B17Exevyrt\ntpLWZGw5W5vmYJYDOPjYW6g0qNbfEwaCu1Vr1FsAD11Flt56D47cM+iXgZu2Ij37\njnQbBwBIek5cNOrBJYXF3qmVY4ynnU8r/jOLy8QRxUH+SuUrZ1RmX3d5MCl0lWXZ\nVRppW/md/jsA486XzQZ4E0GcqW1uZwwN6y5KtloNJKoEld7X/s0=\n=5+7f\n-----END PGP SIGNATURE-----",
        "payload": "tree a2433f2e0d2872cf3ac6ccaee6aa0d8453f66a00\nparent e0d2020920414361a6660caf62bd7f096f16df53\nauthor Sjors Provoost <sjors@sprovoost.nl> 1572771516 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407508 +0100\n\n[doc] include Doxygen comments for ENABLE_EXTERNAL_SIGNER\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75c08892873a9d461f309515a082c84a2b1d7e8f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75c08892873a9d461f309515a082c84a2b1d7e8f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75c08892873a9d461f309515a082c84a2b1d7e8f/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0d2020920414361a6660caf62bd7f096f16df53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0d2020920414361a6660caf62bd7f096f16df53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0d2020920414361a6660caf62bd7f096f16df53"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3a6d8e3a9d56db5df6337483ea00a80755dd04c8",
        "filename": "doc/Doxyfile.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75c08892873a9d461f309515a082c84a2b1d7e8f/doc/Doxyfile.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75c08892873a9d461f309515a082c84a2b1d7e8f/doc/Doxyfile.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile.in?ref=75c08892873a9d461f309515a082c84a2b1d7e8f",
        "patch": "@@ -2072,7 +2072,7 @@ INCLUDE_FILE_PATTERNS  =\n # recursively expanded use the := operator instead of the = operator.\n # This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n \n-PREDEFINED             = HAVE_BOOST_PROCESS\n+PREDEFINED             = HAVE_BOOST_PROCESS ENABLE_EXTERNAL_SIGNER\n \n # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this\n # tag can be used to specify a list of macro names that should be expanded. The"
      }
    ]
  },
  {
    "sha": "678668bb69891579a5f9509fc950eb1527bdfdd1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Nzg2NjhiYjY5ODkxNTc5YTVmOTUwOWZjOTUwZWIxNTI3YmRmZGQx",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-13T17:59:16Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:08Z"
      },
      "message": "[test] framework: add skip_if_no_external_signer",
      "tree": {
        "sha": "ac6b1806ac15cd29dc9ccaa9ae98cf21afbeaa6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac6b1806ac15cd29dc9ccaa9ae98cf21afbeaa6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/678668bb69891579a5f9509fc950eb1527bdfdd1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtQACgkQV/+b28ww\nEAkg2g/+IMUulW0K8vXNumMU2YVT1cmFNVq3JmkIv7C1YgRc1yjXBk9ngTWkgWFP\nNkonkbwLxP1lRBKH6oLSWSUS0FqOQWoRoS+GslTCSOP5i3A/Uqeqm8b4bZufoxYm\nABgkB3pHeImBOuP7H3d9ffem6ot6pk4zlNvwWAVbBncambR4ydRc0+aHmgVBA9B0\nMM0dk9mZ545zLv3WgnFaJ6aHLQwpswXGEANdCa//EWb8YMOnbXNN3xnwsNWtbdV0\nw5aKoiWc46pBaPlmy6Cv8d88QnzSU27gsPVjQXUTcSGqUt1GSf+jfdSxRBpV9R4Z\nMo2WhhECF0/I3Kwqz903m9kOLLZWwdfLdCwdk1PsPGw1pOzB3Lv/HAwmOq/qhWVJ\nRLfXbXsN1GKNrkGMrwTyr3aupwPhmncESr9aPp59aGMQ6OVEqGlmdMNSJd+R4JNp\nRsXivdcyD7MvIEKhR5lPGACqsUoGxwm03qB63Vr3gBl+yjGd7SxQwBfnl3x6dUEW\n4bTbF4t2EvmqcryyZpsBKJtg7q/Aqju19m6klZVoBPzkSaa3ZqDvP6x3NegFlo8j\nvUyN750jWkNTmd4QMIUeEodbas1Rwv/YcC/9BB2cy4vfBPaOL5ZzUKjI+aTrcOmP\nYQWuAY0LyJF77RvgZAvMGhHccQQl+nCzXmnBvfOrt0TnWpuLU8k=\n=eFUI\n-----END PGP SIGNATURE-----",
        "payload": "tree ac6b1806ac15cd29dc9ccaa9ae98cf21afbeaa6e\nparent 75c08892873a9d461f309515a082c84a2b1d7e8f\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550080756 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407508 +0100\n\n[test] framework: add skip_if_no_external_signer\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/678668bb69891579a5f9509fc950eb1527bdfdd1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/678668bb69891579a5f9509fc950eb1527bdfdd1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/678668bb69891579a5f9509fc950eb1527bdfdd1/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75c08892873a9d461f309515a082c84a2b1d7e8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75c08892873a9d461f309515a082c84a2b1d7e8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75c08892873a9d461f309515a082c84a2b1d7e8f"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0e6908db6199119f194395350f5617409875d75c",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/678668bb69891579a5f9509fc950eb1527bdfdd1/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/678668bb69891579a5f9509fc950eb1527bdfdd1/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=678668bb69891579a5f9509fc950eb1527bdfdd1",
        "patch": "@@ -621,10 +621,19 @@ def skip_if_no_cli(self):\n         if not self.is_cli_compiled():\n             raise SkipTest(\"bitcoin-cli has not been compiled.\")\n \n+    def skip_if_no_external_signer(self):\n+        \"\"\"Skip the running test if external signer support has not been compiled.\"\"\"\n+        if not self.is_external_signer_compiled():\n+            raise SkipTest(\"external signer support has not been compiled.\")\n+\n     def is_cli_compiled(self):\n         \"\"\"Checks whether bitcoin-cli was compiled.\"\"\"\n         return self.config[\"components\"].getboolean(\"ENABLE_CLI\")\n \n+    def is_external_signer_compiled(self):\n+        \"\"\"Checks whether external signer support was compiled.\"\"\"\n+        return self.config[\"components\"].getboolean(\"ENABLE_EXTERNAL_SIGNER\")\n+\n     def is_wallet_compiled(self):\n         \"\"\"Checks whether the wallet module was compiled.\"\"\"\n         return self.config[\"components\"].getboolean(\"ENABLE_WALLET\")"
      }
    ]
  },
  {
    "sha": "af62337d246390819c95e66cf963d2668d85e227",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjYyMzM3ZDI0NjM5MDgxOWM5NWU2NmNmOTYzZDI2NjhkODVlMjI3",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-13T12:25:09Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:08Z"
      },
      "message": "[build] add IO support for Boost::Optional",
      "tree": {
        "sha": "1570cc3d91ad32bccf1883e48d8cbf230e9e2b1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1570cc3d91ad32bccf1883e48d8cbf230e9e2b1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af62337d246390819c95e66cf963d2668d85e227",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtQACgkQV/+b28ww\nEAkOOA//dwaY1v41pcewe4tth5lUN4ka2f2yMLXopOvWPzLZ1BLJAU6/ev6INtNI\nrajt+VFdBESlbtpMWMMJSzZArBFsACHkryPXOJ2yP6YFSS1wWsf5dYlxBec2w+9t\n+jyZhuGb2Pgr/+jUhJx3MG/1M787DRD4kqr3+arJ4qcc4rUf4FpdNgOXf5uglnvB\nNmMk+5ZyjpNGhTM2QsUYZzu7x4kflcMpdwLCpLkopQLBzA8mECQyDmusAvC/2nor\npIh6E5gE/D9PZNHgeOt9Q2In/gKG4EUEbqHMGEgHohuPT/TMFI78k72IuRL0ZCOG\nIIqc6drvYEFTTnGgrUhjKqqjQlDP86/uaPs1LbdHQGeAq64MggPu5DWD6eNmXecg\nUtrPlSOW2UsnEotCvelzUalwK3qnr48MMhNaVwBQluFSwID0knqq21WndEPDKehE\nECpm6vW9ibsKWZ0Xjq6dZ4LvKE6UqId6iDF2OP7AWh1QmNmH2wgOLJ5magxEkSvV\nA+vo7gJcBzzkhvKzq75RaSTJdirOM46j1igK3iTmvoCJ/IdRxVuIrpXPAgpwglqb\nYNQkynTYGeqrrz7ZJWohsAczPhvH40Sl0zgrhsXoVoCcp+oYK6nt3dRVw1ZPrqcy\nDHKHYH/P7umX/5mtenpeCT9IsWU8O0gl/yCsclXtvGOzO9pXH+4=\n=zRvx\n-----END PGP SIGNATURE-----",
        "payload": "tree 1570cc3d91ad32bccf1883e48d8cbf230e9e2b1e\nparent 678668bb69891579a5f9509fc950eb1527bdfdd1\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552479909 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407508 +0100\n\n[build] add IO support for Boost::Optional\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af62337d246390819c95e66cf963d2668d85e227",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af62337d246390819c95e66cf963d2668d85e227",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af62337d246390819c95e66cf963d2668d85e227/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "678668bb69891579a5f9509fc950eb1527bdfdd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/678668bb69891579a5f9509fc950eb1527bdfdd1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/678668bb69891579a5f9509fc950eb1527bdfdd1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ebb94a08a4a79c2fb7f8ef214f205d9466e31ef6",
        "filename": "src/optional.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af62337d246390819c95e66cf963d2668d85e227/src/optional.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af62337d246390819c95e66cf963d2668d85e227/src/optional.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/optional.h?ref=af62337d246390819c95e66cf963d2668d85e227",
        "patch": "@@ -8,6 +8,7 @@\n #include <utility>\n \n #include <boost/optional.hpp>\n+#include <boost/optional/optional_io.hpp>\n \n //! Substitute for C++17 std::optional\n template <typename T>"
      },
      {
        "sha": "bf5952b718be183dda2677ef349a800ef48e8437",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af62337d246390819c95e66cf963d2668d85e227/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af62337d246390819c95e66cf963d2668d85e227/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=af62337d246390819c95e66cf963d2668d85e227",
        "patch": "@@ -62,6 +62,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/multi_index/sequenced_index.hpp\n     boost/multi_index_container.hpp\n     boost/optional.hpp\n+    boost/optional/optional_io.hpp\n     boost/preprocessor/cat.hpp\n     boost/preprocessor/stringize.hpp\n     boost/process.hpp"
      }
    ]
  },
  {
    "sha": "f5d349189f2e83771a95c86d1557782f6d20abb1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWQzNDkxODlmMmU4Mzc3MWE5NWM4NmQxNTU3NzgyZjZkMjBhYmIx",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-13T12:25:59Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:08Z"
      },
      "message": "Add AddressType (base58, bech32)",
      "tree": {
        "sha": "f2bc807ee7ca66578e2e81035085ff88ff633559",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2bc807ee7ca66578e2e81035085ff88ff633559"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5d349189f2e83771a95c86d1557782f6d20abb1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtQACgkQV/+b28ww\nEAkYLQ/+IZiy31vnnmCWRvoZSP+xObYYlSIf6MiR8Go8e96CNgyWPDwYpumm51zn\npUTSfL4WyDWj7pLIUmf44iIjx3SKBUoYIFtR+2qUzb+9FSfMc8y21tv0kw9ZA2dK\n8q306YF+/CDCkHXaoE3/B4VqyAh4YRGHMqc5W27XNmGDPscjpm0ytdpRg+JoUVkY\nsyhW/TWs08Hxvjln7tkMqmoIp2egcJPEkR8v1vQ5s10+6Rgo1TmEvolSWKJtLxRG\nLXF2RB0tmMUahQFVaNAX8G8vaAmD+7Iw9u5tVoHevexoKr0vZ7Q3DMIhS/A7YIzU\nK1ul4Nz3bOkXqsM9u/q7U6Hjzw+gjT3fjYHAs9ZoC4AlxM4uSE4NgqX02IuPflFV\nW5aXGYgnVzqkDXXA0zGky/M21lHzyW8YYORagEpMhAkG6YrJLFUjdBEudGzqIARC\nyexkNoYNhE1ZnquVyCiQFFUlJO8wngf0mHeN6voOBGn1tIQ9anc7GAOMXSXnNTh7\njiR+H4DVnZB2mUSZRNaWbZQffy322Oqh0HFjpQWCvJtR/xJ50FNZFVjUlmpLxjJQ\nOKtoVPtAXRjcaQ2ssILnS+0DfkK64b+6oIw0uFqW758jgcohgP6JnlB68D/Q9IAE\nhk1NYF862kKHH/K+driKbWO0XrFzHkrqlDrxpfsbr2UoGF2m4Ok=\n=o4xE\n-----END PGP SIGNATURE-----",
        "payload": "tree f2bc807ee7ca66578e2e81035085ff88ff633559\nparent af62337d246390819c95e66cf963d2668d85e227\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552479959 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407508 +0100\n\nAdd AddressType (base58, bech32)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5d349189f2e83771a95c86d1557782f6d20abb1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5d349189f2e83771a95c86d1557782f6d20abb1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5d349189f2e83771a95c86d1557782f6d20abb1/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af62337d246390819c95e66cf963d2668d85e227",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af62337d246390819c95e66cf963d2668d85e227",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af62337d246390819c95e66cf963d2668d85e227"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 74,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e9f4192fa56d2e122fabca0a8d05f3c3f5660fca",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5d349189f2e83771a95c86d1557782f6d20abb1/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5d349189f2e83771a95c86d1557782f6d20abb1/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f5d349189f2e83771a95c86d1557782f6d20abb1",
        "patch": "@@ -100,6 +100,7 @@ endif\n .PHONY: FORCE check-symbols check-security\n # bitcoin core #\n BITCOIN_CORE_H = \\\n+  addresstype.h \\\n   addrdb.h \\\n   addrman.h \\\n   attributes.h \\\n@@ -271,6 +272,7 @@ libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n libbitcoin_server_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)\n libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_server_a_SOURCES = \\\n+  addresstype.cpp \\\n   addrdb.cpp \\\n   addrman.cpp \\\n   banman.cpp \\"
      },
      {
        "sha": "f4888c76481680eddb6c2251caed9ecbe696115e",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5d349189f2e83771a95c86d1557782f6d20abb1/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5d349189f2e83771a95c86d1557782f6d20abb1/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=f5d349189f2e83771a95c86d1557782f6d20abb1",
        "patch": "@@ -117,6 +117,7 @@ FUZZ_SUITE_LD_COMMON = \\\n BITCOIN_TESTS =\\\n   test/arith_uint256_tests.cpp \\\n   test/scriptnum10.h \\\n+  test/addresstype_tests.cpp \\\n   test/addrman_tests.cpp \\\n   test/amount_tests.cpp \\\n   test/allocator_tests.cpp \\"
      },
      {
        "sha": "231f2f9d1901f6ce5d9b5ff845027e393faba0c2",
        "filename": "src/addresstype.cpp",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5d349189f2e83771a95c86d1557782f6d20abb1/src/addresstype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5d349189f2e83771a95c86d1557782f6d20abb1/src/addresstype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addresstype.cpp?ref=f5d349189f2e83771a95c86d1557782f6d20abb1",
        "patch": "@@ -0,0 +1,26 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+\n+static const std::string ADDRESS_TYPE_STRING_BASE58 = \"legacy\";\n+static const std::string ADDRESS_TYPE_STRING_BECH32 = \"bech32\";\n+\n+Optional<AddressType> ParseAddressType(const std::string& type)\n+{\n+    if (type == ADDRESS_TYPE_STRING_BASE58) {\n+        return AddressType::BASE58;\n+    } else if (type == ADDRESS_TYPE_STRING_BECH32) {\n+        return AddressType::BECH32;\n+    }\n+    return nullopt;\n+}\n+\n+const std::string& FormatAddressType(AddressType type)\n+{\n+    switch (type) {\n+    case AddressType::BASE58: return ADDRESS_TYPE_STRING_BASE58;\n+    case AddressType::BECH32: return ADDRESS_TYPE_STRING_BECH32;\n+    }\n+}"
      },
      {
        "sha": "9b0382c02115a2299f7ffd6c83e1f891019f5c81",
        "filename": "src/addresstype.h",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5d349189f2e83771a95c86d1557782f6d20abb1/src/addresstype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5d349189f2e83771a95c86d1557782f6d20abb1/src/addresstype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addresstype.h?ref=f5d349189f2e83771a95c86d1557782f6d20abb1",
        "patch": "@@ -0,0 +1,20 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRESSTYPE_H\n+#define BITCOIN_ADDRESSTYPE_H\n+\n+#include <optional.h>\n+\n+#include <string>\n+\n+enum class AddressType {\n+    BASE58,\n+    BECH32\n+};\n+\n+Optional<AddressType> ParseAddressType(const std::string& type);\n+const std::string& FormatAddressType(AddressType type);\n+\n+#endif // BITCOIN_ADDRESSTYPE_H"
      },
      {
        "sha": "11964b5f5f4709247f2d310b1a68283fd582848a",
        "filename": "src/test/addresstype_tests.cpp",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5d349189f2e83771a95c86d1557782f6d20abb1/src/test/addresstype_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5d349189f2e83771a95c86d1557782f6d20abb1/src/test/addresstype_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addresstype_tests.cpp?ref=f5d349189f2e83771a95c86d1557782f6d20abb1",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+#include <boost/test/unit_test.hpp>\n+#include <test/util/setup_common.h>\n+\n+#include <optional.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(addresstype_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(addresstype_test)\n+{\n+    // Check parsing\n+    BOOST_CHECK_EQUAL(ParseAddressType(\"invalid\"), nullopt);\n+    BOOST_CHECK_EQUAL(ParseAddressType(\"legacy\"), AddressType::BASE58);\n+    BOOST_CHECK_EQUAL(ParseAddressType(\"bech32\"), AddressType::BECH32);\n+\n+    // Check formatting\n+    BOOST_CHECK_EQUAL(FormatAddressType(AddressType::BASE58), \"legacy\");\n+    BOOST_CHECK_EQUAL(FormatAddressType(AddressType::BECH32), \"bech32\");\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "e458981d3e7599d91d1201882cfe8933ebe73dab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDU4OTgxZDNlNzU5OWQ5MWQxMjAxODgyY2ZlODkzM2ViZTczZGFi",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-13T12:26:09Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:08Z"
      },
      "message": "Descriptor: add GetAddressType()",
      "tree": {
        "sha": "4164e03ae86be039d659f68e883b24e01f80cf9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4164e03ae86be039d659f68e883b24e01f80cf9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e458981d3e7599d91d1201882cfe8933ebe73dab",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtQACgkQV/+b28ww\nEAlRSQ/+LTGwxda7aCSNsik/EzOLdCVqJAXyKdhWrnKzr4lG35u5IeuapCD5Sr4d\ncC6Q8E7PpqqPLZ8ENLUy7cvpMkycRIZ3K9M+TQKAnLfEV7yVHvAHH6aqAr9Qy/Jf\nhGErwAfOYJd4PdxM4RNls8MN3rIMOG/cnO3/MN47jA87GP9wveGXrKZzKzT+nl18\n1jaaatmfRZFiuzCAPh48Hjt+dadh1uXE6TZ9vUaVfVb4nQ5XhnuEQg69J4YQn8XU\ncIrgVNv8DU4R5UsdDnMAH0yYDcOdVBdg64Tq4epoi/HDKl5LhKahf5HvgUAiR78/\nR7Y7ebfObEgVOgfls7E0uLRkVz1QHk31thJckebDwJHA2RBfCqs496kdNi4v033k\nHYe4fy2/Wyyws+24ULBQ0KgEFY+0qaN3+WZzXMXc1de6yGVRrfkB7TOgf9+7UU8h\nAKxzNVc5/7c0fdrUAlqH5F4cGVZMw3vfWBEflCFT1BZhTS9Vi1alY2HCBcj6+DaO\nfsRdSoOKOSvq+yvDT9O3+AS9TQ4QNYS8gsjd7cRgNr3Lwqh6CLPlgoJU2GvmK9a0\npfEHEZeKAyptiL+VveXlvpD2lJd7IVDYvw9SIhG86yYOaoHJss6Psf+LnnGYP2ZK\n1sy+qhV/5qIu4fMIp+H/lZMHsGZke2p06SKwVB9UsG2B5nGrJYw=\n=cz7T\n-----END PGP SIGNATURE-----",
        "payload": "tree 4164e03ae86be039d659f68e883b24e01f80cf9e\nparent f5d349189f2e83771a95c86d1557782f6d20abb1\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552479969 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407508 +0100\n\nDescriptor: add GetAddressType()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e458981d3e7599d91d1201882cfe8933ebe73dab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e458981d3e7599d91d1201882cfe8933ebe73dab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e458981d3e7599d91d1201882cfe8933ebe73dab/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5d349189f2e83771a95c86d1557782f6d20abb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5d349189f2e83771a95c86d1557782f6d20abb1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5d349189f2e83771a95c86d1557782f6d20abb1"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 59,
      "deletions": 18
    },
    "files": [
      {
        "sha": "9f1d01533216636000bed57ff947b464887b147b",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e458981d3e7599d91d1201882cfe8933ebe73dab/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e458981d3e7599d91d1201882cfe8933ebe73dab/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=e458981d3e7599d91d1201882cfe8933ebe73dab",
        "patch": "@@ -424,6 +424,10 @@ class DescriptorImpl : public Descriptor\n         return ret;\n     }\n \n+    Optional<AddressType> GetAddressType() const override {\n+        return nullopt;\n+    }\n+\n     bool ExpandHelper(int pos, const SigningProvider& arg, Span<const unsigned char>* cache_read, std::vector<CScript>& output_scripts, FlatSigningProvider& out, std::vector<unsigned char>* cache_write) const\n     {\n         std::vector<std::pair<CPubKey, KeyOriginInfo>> entries;\n@@ -550,6 +554,11 @@ class PKHDescriptor final : public DescriptorImpl\n     }\n public:\n     PKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"pkh\") {}\n+\n+    Optional<AddressType> GetAddressType() const override final\n+    {\n+        return AddressType::BASE58;\n+    }\n     bool IsSingleType() const final { return true; }\n };\n \n@@ -565,6 +574,11 @@ class WPKHDescriptor final : public DescriptorImpl\n     }\n public:\n     WPKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"wpkh\") {}\n+\n+    Optional<AddressType> GetAddressType() const override final\n+    {\n+        return AddressType::BECH32;\n+    }\n     bool IsSingleType() const final { return true; }\n };\n \n@@ -619,6 +633,11 @@ class SHDescriptor final : public DescriptorImpl\n     std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider&) const override { return Vector(GetScriptForDestination(ScriptHash(*script))); }\n public:\n     SHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), \"sh\") {}\n+\n+    Optional<AddressType> GetAddressType() const override final\n+    {\n+        return AddressType::BASE58;\n+    }\n     bool IsSingleType() const final { return true; }\n };\n \n@@ -629,6 +648,11 @@ class WSHDescriptor final : public DescriptorImpl\n     std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider&) const override { return Vector(GetScriptForDestination(WitnessV0ScriptHash(*script))); }\n public:\n     WSHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), \"wsh\") {}\n+\n+    Optional<AddressType> GetAddressType() const override final\n+    {\n+        return AddressType::BECH32;\n+    }\n     bool IsSingleType() const final { return true; }\n };\n "
      },
      {
        "sha": "f9b44d08ff406d8518fa5c8b1b4a3deee1f40034",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e458981d3e7599d91d1201882cfe8933ebe73dab/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e458981d3e7599d91d1201882cfe8933ebe73dab/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=e458981d3e7599d91d1201882cfe8933ebe73dab",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_SCRIPT_DESCRIPTOR_H\n #define BITCOIN_SCRIPT_DESCRIPTOR_H\n \n+#include <addresstype.h>\n+#include <optional.h>\n #include <script/script.h>\n #include <script/sign.h>\n #include <script/signingprovider.h>\n@@ -48,6 +50,9 @@ struct Descriptor {\n     /** Convert the descriptor to a private string. This fails if the provided provider does not have the relevant private keys. */\n     virtual bool ToPrivateString(const SigningProvider& provider, std::string& out) const = 0;\n \n+    /** What address type this descriptor produces when converted to a string. */\n+    virtual Optional<AddressType> GetAddressType() const = 0;\n+\n     /** Expand a descriptor at a specified position.\n      *\n      * @param[in] pos The position at which to expand the descriptor. If IsRange() is false, this is ignored."
      },
      {
        "sha": "232dd62e141984bc0a3272ebd2a87b389fbfd21e",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 18,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e458981d3e7599d91d1201882cfe8933ebe73dab/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e458981d3e7599d91d1201882cfe8933ebe73dab/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=e458981d3e7599d91d1201882cfe8933ebe73dab",
        "patch": "@@ -29,6 +29,9 @@ constexpr int RANGE = 1; // Expected to be ranged descriptor\n constexpr int HARDENED = 2; // Derivation needs access to private keys\n constexpr int UNSOLVABLE = 4; // This descriptor is not expected to be solvable\n constexpr int SIGNABLE = 8; // We can sign with this descriptor (this is not true when actual BIP32 derivation is used, as that's not integrated in our signing code)\n+constexpr int ADDRESS_TYPE_NONE = 16; // This descriptor should not have an AddressType\n+constexpr int ADDRESS_TYPE_BASE58  = 32; // This descriptor should have AddressType::BASE58\n+constexpr int ADDRESS_TYPE_BECH32  = 64; // This descriptor should have AddressType::BECH32\n \n /** Compare two descriptors. If only one of them has a checksum, the checksum is ignored. */\n bool EqualDescriptor(std::string a, std::string b)\n@@ -105,6 +108,15 @@ void DoCheck(const std::string& prv, const std::string& pub, int flags, const st\n     BOOST_CHECK(EqualDescriptor(prv, prv1));\n     BOOST_CHECK(!parse_pub->ToPrivateString(keys_pub, prv1));\n \n+    // Check if the address type is correct:\n+    if (flags & ADDRESS_TYPE_NONE) {\n+        BOOST_CHECK_EQUAL(parse_pub->GetAddressType(), nullopt);\n+    } else if (flags & ADDRESS_TYPE_BASE58) {\n+        BOOST_CHECK_EQUAL(parse_pub->GetAddressType(), AddressType::BASE58);\n+    } else if (flags & ADDRESS_TYPE_BECH32) {\n+        BOOST_CHECK_EQUAL(parse_pub->GetAddressType(), AddressType::BECH32);\n+    }\n+\n     // Check whether IsRange on both returns the expected result\n     BOOST_CHECK_EQUAL(parse_pub->IsRange(), (flags & RANGE) != 0);\n     BOOST_CHECK_EQUAL(parse_priv->IsRange(), (flags & RANGE) != 0);\n@@ -215,36 +227,36 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n {\n     // Basic single-key compressed\n     Check(\"combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\",\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\",\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\",\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n-    Check(\"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\"}});\n-    Check(\"pkh([deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\"}}, {{1,0x80000002UL,3,0x80000004UL}});\n-    Check(\"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\"}});\n-    Check(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n+    Check(\"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE | ADDRESS_TYPE_NONE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\"}});\n+    Check(\"pkh([deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\"}}, {{1,0x80000002UL,3,0x80000004UL}});\n+    Check(\"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE | ADDRESS_TYPE_BECH32, {{\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\"}});\n+    Check(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n     CheckUnparsable(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY2))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5))\", \"Pubkey '03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5' is invalid\"); // Invalid pubkey\n     CheckUnparsable(\"pkh(deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh(deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"Key origin start '[ character expected but not found, got 'd' instead\"); // Missing start bracket in key origin\n     CheckUnparsable(\"pkh([deadbeef]/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef]/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"Multiple ']' characters found for a single pubkey\"); // Multiple end brackets in key origin\n \n     // Basic single-key uncompressed\n     Check(\"combo(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"combo(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\",\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}});\n-    Check(\"pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\"}});\n-    Check(\"pkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}});\n+    Check(\"pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE | ADDRESS_TYPE_NONE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\"}});\n+    Check(\"pkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}});\n     CheckUnparsable(\"wpkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"wpkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"Uncompressed keys are not allowed\"); // No uncompressed keys in witness\n     CheckUnparsable(\"wsh(pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss))\", \"wsh(pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235))\", \"Uncompressed keys are not allowed\"); // No uncompressed keys in witness\n     CheckUnparsable(\"sh(wpkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss))\", \"sh(wpkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235))\", \"Uncompressed keys are not allowed\"); // No uncompressed keys in witness\n \n     // Some unconventional single-key constructions\n-    Check(\"sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"a9141857af51a5e516552b3086430fd8ce55f7c1a52487\"}});\n-    Check(\"sh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"a9141a31ad23bf49c247dd531a623c2ef57da3c400c587\"}});\n-    Check(\"wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"00202e271faa2325c199d25d22e1ead982e45b64eeb4f31e73dbdf41bd4b5fec23fa\"}});\n-    Check(\"wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"0020338e023079b91c58571b20e602d7805fb808c22473cbc391a41b1bd3a192e75b\"}});\n-    Check(\"sh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE, {{\"a91472d0c5a3bfad8c3e7bd5303a72b94240e80b6f1787\"}});\n-    Check(\"sh(wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE, {{\"a914b61b92e2ca21bac1e72a3ab859a742982bea960a87\"}});\n+    Check(\"sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a9141857af51a5e516552b3086430fd8ce55f7c1a52487\"}});\n+    Check(\"sh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a9141a31ad23bf49c247dd531a623c2ef57da3c400c587\"}});\n+    Check(\"wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BECH32, {{\"00202e271faa2325c199d25d22e1ead982e45b64eeb4f31e73dbdf41bd4b5fec23fa\"}});\n+    Check(\"wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BECH32, {{\"0020338e023079b91c58571b20e602d7805fb808c22473cbc391a41b1bd3a192e75b\"}});\n+    Check(\"sh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a91472d0c5a3bfad8c3e7bd5303a72b94240e80b6f1787\"}});\n+    Check(\"sh(wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a914b61b92e2ca21bac1e72a3ab859a742982bea960a87\"}});\n \n     // Versions with BIP32 derivations\n     Check(\"combo([01234567]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([01234567]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", SIGNABLE, {{\"2102d2b36900396c9282fa14628566582f206a5dd0bcc8d5e892611806cafb0301f0ac\",\"76a91431a507b815593dfc51ffc7245ae7e5aee304246e88ac\",\"001431a507b815593dfc51ffc7245ae7e5aee304246e\",\"a9142aafb926eb247cb18240a7f4c07983ad1f37922687\"}});\n     Check(\"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", DEFAULT, {{\"210379e45b3cf75f9c5f9befd8e9506fb962f6a9d185ac87001ec44a8d3df8d4a9e3ac\"}}, {{0}});\n-    Check(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)\", HARDENED, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}}, {{0xFFFFFFFFUL,0}});\n-    Check(\"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}}, {{0x8000000DUL, 1, 2, 0}, {0x8000000DUL, 1, 2, 1}, {0x8000000DUL, 1, 2, 2}});\n-    Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n+    Check(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)\", HARDENED | ADDRESS_TYPE_BASE58, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}}, {{0xFFFFFFFFUL,0}});\n+    Check(\"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE | ADDRESS_TYPE_BECH32, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}}, {{0x8000000DUL, 1, 2, 0}, {0x8000000DUL, 1, 2, 1}, {0x8000000DUL, 1, 2, 2}});\n+    Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED | ADDRESS_TYPE_BASE58, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n     Check(\"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", RANGE, {{\"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac\",\"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac\",\"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2\",\"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087\"},{\"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac\",\"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac\",\"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7\",\"a91473e39884cb71ae4e5ac9739e9225026c99763e6687\"}}, {{0}, {1}});\n     CheckUnparsable(\"combo([012345678]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([012345678]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", \"Fingerprint is not 4 bytes (9 characters instead of 8 characters)\"); // Too long key fingerprint\n     CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483648)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483648)\", \"Key path value 2147483648 is out of range\"); // BIP 32 path element overflow\n@@ -254,7 +266,7 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     Check(\"multi(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}});\n     Check(\"sortedmulti(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"sortedmulti(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}});\n     Check(\"sortedmulti(1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sortedmulti(1,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}});\n-    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n+    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT | ADDRESS_TYPE_BASE58, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n     Check(\"sortedmulti(2,xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc/*,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0/0/*)\", \"sortedmulti(2,xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/*,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0/0/*)\", RANGE, {{\"5221025d5fc65ebb8d44a5274b53bac21ff8307fec2334a32df05553459f8b1f7fe1b62102fbd47cc8034098f0e6a94c6aeee8528abf0a2153a5d8e46d325b7284c046784652ae\"}, {\"52210264fd4d1f5dea8ded94c61e9641309349b62f27fbffe807291f664e286bfbe6472103f4ece6dfccfa37b211eb3d0af4d0c61dba9ef698622dc17eecdf764beeb005a652ae\"}, {\"5221022ccabda84c30bad578b13c89eb3b9544ce149787e5b538175b1d1ba259cbb83321024d902e1a2fc7a8755ab5b694c575fce742c48d9ff192e63df5193e4c7afe1f9c52ae\"}}, {{0}, {1}, {2}, {0, 0, 0}, {0, 0, 1}, {0, 0, 2}});\n     Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}}, {{0xFFFFFFFFUL,0}, {1,2,0}, {1,2,1}, {1,2,2}, {10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n     Check(\"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", SIGNABLE, {{\"a9147fc63e13dc25e8a95a3cee3d9a714ac3afd96f1e87\"}});\n@@ -280,8 +292,8 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     CheckUnparsable(\"wsh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", \"Cannot have wsh within wsh\"); // Cannot embed P2WSH inside P2WSH\n \n     // Checksums\n-    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfy\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5t\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n-    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n+    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfy\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5t\", DEFAULT | ADDRESS_TYPE_BASE58, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n+    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT | ADDRESS_TYPE_BASE58, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n     CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#\", \"Expected 8 character checksum, not 0 characters\"); // Empty checksum\n     CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfyq\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5tq\", \"Expected 8 character checksum, not 9 characters\"); // Too long checksum\n     CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxf\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5\", \"Expected 8 character checksum, not 7 characters\"); // Too short checksum"
      }
    ]
  },
  {
    "sha": "b66635088d35ba441a8d61b9dafa952fa94875cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjY2MzUwODhkMzViYTQ0MWE4ZDYxYjlkYWZhOTUyZmE5NDg3NWNi",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-14T10:18:02Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:08Z"
      },
      "message": "Add IsSegWit() to Descriptor",
      "tree": {
        "sha": "88d8c7f4cf01e8265cd50a08f4faa665ef45f661",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88d8c7f4cf01e8265cd50a08f4faa665ef45f661"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b66635088d35ba441a8d61b9dafa952fa94875cb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtQACgkQV/+b28ww\nEAmZ4RAAqzGRylAQ3JTIeVRTlDRvVkwYHan4AfqcZPE3X8rYAvB3ZMl4iBkZPgXL\n1FNUgft4sThVMToAdiVtnR2jF72F8smBRUfHIf47n9ce6+UwMjMNuiiQQuBuNzDQ\n1zTFdktSj0xlku+9pjOkBg0Hz0/vAjtUtq9toLgwfX8rzJIiG43GK01fPAvhgySC\nHzAB/ss7HRrNzvuUkUCKG2ZtiIuUIvpNcSnzGSmvobymqHO7dOghwXTxW7+PsZc0\nQrPM6jFB6YLsRdGvYZgKFh00XZ926gD0FjKmmWbw7WHEWQLAWkCQ+a1ZwJzk7Rcj\nTd+4t1Da26xN2priF7Sq5TZG9ZK+mCc0XBHNTN2kNHqohLHXimgp6C3NpZlg349R\nqsAz3sCjxS2Sh+kWu4OVDriULRHKTJX+UtgtJLf1j2Sz8C13lGSs52fsYq/Qv5U5\nEOyT9F2PLwAmW7HHrnr38rgMF8m7yc/YyKCjlvdqIZA3U8DZet9SI9IVzL58GenM\nie/IwpV/wRVhbJGUvPm/2m9MKvgZ8VDWMhAw0cybWRMn7SJvJCBtG/WjZyxL4pNN\nU6kEliKB1VQYYR8cBtpOcKj5+Cl77blltIQLxaOv/HG1HfplitrKVc/l3+UilaS/\nUf3Qkux/M6SYtZnDf55zZb/T+PM7KN2HwWw+oA3D9pOJ6Kulj1Q=\n=XdY8\n-----END PGP SIGNATURE-----",
        "payload": "tree 88d8c7f4cf01e8265cd50a08f4faa665ef45f661\nparent e458981d3e7599d91d1201882cfe8933ebe73dab\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552558682 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407508 +0100\n\nAdd IsSegWit() to Descriptor\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b66635088d35ba441a8d61b9dafa952fa94875cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b66635088d35ba441a8d61b9dafa952fa94875cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b66635088d35ba441a8d61b9dafa952fa94875cb/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e458981d3e7599d91d1201882cfe8933ebe73dab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e458981d3e7599d91d1201882cfe8933ebe73dab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e458981d3e7599d91d1201882cfe8933ebe73dab"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 33,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0fc82bd5e0c890984cc9f82a505eb2bba47ce025",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b66635088d35ba441a8d61b9dafa952fa94875cb/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b66635088d35ba441a8d61b9dafa952fa94875cb/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=b66635088d35ba441a8d61b9dafa952fa94875cb",
        "patch": "@@ -428,6 +428,14 @@ class DescriptorImpl : public Descriptor\n         return nullopt;\n     }\n \n+    bool IsSegWit() const override\n+    {\n+        if (m_subdescriptor_arg) {\n+            if (m_subdescriptor_arg->IsSegWit()) return true;\n+        }\n+        return false;\n+    }\n+\n     bool ExpandHelper(int pos, const SigningProvider& arg, Span<const unsigned char>* cache_read, std::vector<CScript>& output_scripts, FlatSigningProvider& out, std::vector<unsigned char>* cache_write) const\n     {\n         std::vector<std::pair<CPubKey, KeyOriginInfo>> entries;\n@@ -579,6 +587,8 @@ class WPKHDescriptor final : public DescriptorImpl\n     {\n         return AddressType::BECH32;\n     }\n+\n+    bool IsSegWit() const final { return true; }\n     bool IsSingleType() const final { return true; }\n };\n \n@@ -653,6 +663,8 @@ class WSHDescriptor final : public DescriptorImpl\n     {\n         return AddressType::BECH32;\n     }\n+\n+    bool IsSegWit() const final { return true; }\n     bool IsSingleType() const final { return true; }\n };\n "
      },
      {
        "sha": "e39de05e944e1492bac538eb4d907cc80d061a51",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b66635088d35ba441a8d61b9dafa952fa94875cb/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b66635088d35ba441a8d61b9dafa952fa94875cb/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=b66635088d35ba441a8d61b9dafa952fa94875cb",
        "patch": "@@ -53,6 +53,9 @@ struct Descriptor {\n     /** What address type this descriptor produces when converted to a string. */\n     virtual Optional<AddressType> GetAddressType() const = 0;\n \n+    /** Whether this descriptor or its sub-descriptors use SegWit. */\n+    virtual bool IsSegWit() const = 0;\n+\n     /** Expand a descriptor at a specified position.\n      *\n      * @param[in] pos The position at which to expand the descriptor. If IsRange() is false, this is ignored."
      },
      {
        "sha": "5adaf2d048463cc4e868c79900fb3d72190eadcd",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 10,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b66635088d35ba441a8d61b9dafa952fa94875cb/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b66635088d35ba441a8d61b9dafa952fa94875cb/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=b66635088d35ba441a8d61b9dafa952fa94875cb",
        "patch": "@@ -32,6 +32,7 @@ constexpr int SIGNABLE = 8; // We can sign with this descriptor (this is not tru\n constexpr int ADDRESS_TYPE_NONE = 16; // This descriptor should not have an AddressType\n constexpr int ADDRESS_TYPE_BASE58  = 32; // This descriptor should have AddressType::BASE58\n constexpr int ADDRESS_TYPE_BECH32  = 64; // This descriptor should have AddressType::BECH32\n+constexpr int SEGWIT = 128; // This descriptor uses SegWit\n \n /** Compare two descriptors. If only one of them has a checksum, the checksum is ignored. */\n bool EqualDescriptor(std::string a, std::string b)\n@@ -117,6 +118,13 @@ void DoCheck(const std::string& prv, const std::string& pub, int flags, const st\n         BOOST_CHECK_EQUAL(parse_pub->GetAddressType(), AddressType::BECH32);\n     }\n \n+    // Check IsSegWit():\n+    if (flags & SEGWIT) {\n+        BOOST_CHECK(parse_pub->IsSegWit());\n+    } else {\n+        BOOST_CHECK(!parse_pub->IsSegWit());\n+    }\n+\n     // Check whether IsRange on both returns the expected result\n     BOOST_CHECK_EQUAL(parse_pub->IsRange(), (flags & RANGE) != 0);\n     BOOST_CHECK_EQUAL(parse_priv->IsRange(), (flags & RANGE) != 0);\n@@ -229,8 +237,8 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     Check(\"combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\",\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\",\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\",\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n     Check(\"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE | ADDRESS_TYPE_NONE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\"}});\n     Check(\"pkh([deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\"}}, {{1,0x80000002UL,3,0x80000004UL}});\n-    Check(\"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE | ADDRESS_TYPE_BECH32, {{\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\"}});\n-    Check(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n+    Check(\"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE | ADDRESS_TYPE_BECH32 | SEGWIT, {{\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\"}});\n+    Check(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BASE58 | SEGWIT, {{\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n     CheckUnparsable(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY2))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5))\", \"Pubkey '03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5' is invalid\"); // Invalid pubkey\n     CheckUnparsable(\"pkh(deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh(deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"Key origin start '[ character expected but not found, got 'd' instead\"); // Missing start bracket in key origin\n     CheckUnparsable(\"pkh([deadbeef]/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef]/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"Multiple ']' characters found for a single pubkey\"); // Multiple end brackets in key origin\n@@ -246,17 +254,17 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     // Some unconventional single-key constructions\n     Check(\"sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a9141857af51a5e516552b3086430fd8ce55f7c1a52487\"}});\n     Check(\"sh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a9141a31ad23bf49c247dd531a623c2ef57da3c400c587\"}});\n-    Check(\"wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BECH32, {{\"00202e271faa2325c199d25d22e1ead982e45b64eeb4f31e73dbdf41bd4b5fec23fa\"}});\n-    Check(\"wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BECH32, {{\"0020338e023079b91c58571b20e602d7805fb808c22473cbc391a41b1bd3a192e75b\"}});\n-    Check(\"sh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a91472d0c5a3bfad8c3e7bd5303a72b94240e80b6f1787\"}});\n-    Check(\"sh(wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a914b61b92e2ca21bac1e72a3ab859a742982bea960a87\"}});\n+    Check(\"wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BECH32 | SEGWIT, {{\"00202e271faa2325c199d25d22e1ead982e45b64eeb4f31e73dbdf41bd4b5fec23fa\"}});\n+    Check(\"wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BECH32 | SEGWIT, {{\"0020338e023079b91c58571b20e602d7805fb808c22473cbc391a41b1bd3a192e75b\"}});\n+    Check(\"sh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE | ADDRESS_TYPE_BASE58 | SEGWIT, {{\"a91472d0c5a3bfad8c3e7bd5303a72b94240e80b6f1787\"}});\n+    Check(\"sh(wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE | ADDRESS_TYPE_BASE58 | SEGWIT, {{\"a914b61b92e2ca21bac1e72a3ab859a742982bea960a87\"}});\n \n     // Versions with BIP32 derivations\n     Check(\"combo([01234567]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([01234567]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", SIGNABLE, {{\"2102d2b36900396c9282fa14628566582f206a5dd0bcc8d5e892611806cafb0301f0ac\",\"76a91431a507b815593dfc51ffc7245ae7e5aee304246e88ac\",\"001431a507b815593dfc51ffc7245ae7e5aee304246e\",\"a9142aafb926eb247cb18240a7f4c07983ad1f37922687\"}});\n     Check(\"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", DEFAULT, {{\"210379e45b3cf75f9c5f9befd8e9506fb962f6a9d185ac87001ec44a8d3df8d4a9e3ac\"}}, {{0}});\n     Check(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)\", HARDENED | ADDRESS_TYPE_BASE58, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}}, {{0xFFFFFFFFUL,0}});\n-    Check(\"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE | ADDRESS_TYPE_BECH32, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}}, {{0x8000000DUL, 1, 2, 0}, {0x8000000DUL, 1, 2, 1}, {0x8000000DUL, 1, 2, 2}});\n-    Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED | ADDRESS_TYPE_BASE58, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n+    Check(\"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE | ADDRESS_TYPE_BECH32 | SEGWIT, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}}, {{0x8000000DUL, 1, 2, 0}, {0x8000000DUL, 1, 2, 1}, {0x8000000DUL, 1, 2, 2}});\n+    Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED | ADDRESS_TYPE_BASE58 | SEGWIT, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n     Check(\"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", RANGE, {{\"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac\",\"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac\",\"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2\",\"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087\"},{\"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac\",\"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac\",\"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7\",\"a91473e39884cb71ae4e5ac9739e9225026c99763e6687\"}}, {{0}, {1}});\n     CheckUnparsable(\"combo([012345678]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([012345678]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", \"Fingerprint is not 4 bytes (9 characters instead of 8 characters)\"); // Too long key fingerprint\n     CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483648)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483648)\", \"Key path value 2147483648 is out of range\"); // BIP 32 path element overflow\n@@ -268,8 +276,8 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     Check(\"sortedmulti(1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sortedmulti(1,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}});\n     Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT | ADDRESS_TYPE_BASE58, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n     Check(\"sortedmulti(2,xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc/*,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0/0/*)\", \"sortedmulti(2,xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/*,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0/0/*)\", RANGE, {{\"5221025d5fc65ebb8d44a5274b53bac21ff8307fec2334a32df05553459f8b1f7fe1b62102fbd47cc8034098f0e6a94c6aeee8528abf0a2153a5d8e46d325b7284c046784652ae\"}, {\"52210264fd4d1f5dea8ded94c61e9641309349b62f27fbffe807291f664e286bfbe6472103f4ece6dfccfa37b211eb3d0af4d0c61dba9ef698622dc17eecdf764beeb005a652ae\"}, {\"5221022ccabda84c30bad578b13c89eb3b9544ce149787e5b538175b1d1ba259cbb83321024d902e1a2fc7a8755ab5b694c575fce742c48d9ff192e63df5193e4c7afe1f9c52ae\"}}, {{0}, {1}, {2}, {0, 0, 0}, {0, 0, 1}, {0, 0, 2}});\n-    Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}}, {{0xFFFFFFFFUL,0}, {1,2,0}, {1,2,1}, {1,2,2}, {10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n-    Check(\"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", SIGNABLE, {{\"a9147fc63e13dc25e8a95a3cee3d9a714ac3afd96f1e87\"}});\n+    Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE | ADDRESS_TYPE_BECH32 | SEGWIT, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}}, {{0xFFFFFFFFUL,0}, {1,2,0}, {1,2,1}, {1,2,2}, {10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n+    Check(\"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", SIGNABLE | ADDRESS_TYPE_BASE58 | SEGWIT, {{\"a9147fc63e13dc25e8a95a3cee3d9a714ac3afd96f1e87\"}});\n     CheckUnparsable(\"sh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9))\",\"sh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232))\", \"P2SH script is too large, 547 bytes is larger than 520 bytes\"); // P2SH does not fit 16 compressed pubkeys in a redeemscript\n     CheckUnparsable(\"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", \"Multiple ']' characters found for a single pubkey\"); // Double key origin descriptor\n     CheckUnparsable(\"wsh(multi(2,[aaaagaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaagaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", \"Fingerprint 'aaagaaaa' is not hex\"); // Non hex fingerprint"
      }
    ]
  },
  {
    "sha": "94059d47ea9649db05818207bd850fc2400650da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDA1OWQ0N2VhOTY0OWRiMDU4MTgyMDdiZDg1MGZjMjQwMDY1MGRh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-04-27T17:10:35Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:08Z"
      },
      "message": "[wallet] add -signer argument for external signer command\n\nCreate basic ExternalSigner class with contructor. A Signer(<cmd>)\nis added to CWallet on load if -signer=<cmd> is set.",
      "tree": {
        "sha": "2f8551424939ff66e8ffcba0db597b58e7e22e32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f8551424939ff66e8ffcba0db597b58e7e22e32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94059d47ea9649db05818207bd850fc2400650da",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtQACgkQV/+b28ww\nEAkNwg//ZaATcse0WAZitnMJSDgWGft/CctYCzoXZRtjBRebr8fwQ01+DLENmwv6\nYS+7MhZ7q7HC52CWeA6BmQw6TYwBqHRNTYa8KjcBBEy2uwB22m3sMzym5LkgRRxE\nQCjTEHQe2HzhmoK2FQfONgl036ZId9ASXAtNJF68kYPox4ZdxWymY+Kv6+zsLDip\n5Yar/6Xke1SN/2zKPdEWbQPp1KwApH4Z85+q4sJb0TPL9wVrK1uyR3ZKb2zIkwGe\nnftr5yizuyhFyrf5HpbT2Y7U6XBOjlCye+wqJZhozCmgQB3i/GT0yAntIDTAgFIL\nSU+4K2/Lwkhv8MIb8h/mwCY5ifR1h190uzcKlQl+10kdrCzvInRoAPEMhytLp2fo\n7r1dGmGW3hOlVwE4HIlwIN7b3NWzC/AcLjei3sEpRCxlWAS/A4qe1Z29j2BGLEHZ\ngkOthpMiraAhJJDpHpOXxTZuhK6kSUVeL5n291vd/+gF+/yhsBLRZJ7b39oHQqFV\nGud1dFARDN63KnaiOMRNkoDLdFsO4nhgoJOi2ECm+sEZikdKZq5cayMSbYnoOepd\nVc6vJ75PMYvUgjNe2bfUGNtlVDv7YdFhBnN3Kls65CzBObRy2EBkAZJJ7bTguMHm\ncHmmznSY/MBPE088equCqqHjdGSd+QU3I1w1Cu553ZQh5fILJ/I=\n=AjpU\n-----END PGP SIGNATURE-----",
        "payload": "tree 2f8551424939ff66e8ffcba0db597b58e7e22e32\nparent b66635088d35ba441a8d61b9dafa952fa94875cb\nauthor Sjors Provoost <sjors@sprovoost.nl> 1556385035 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407508 +0100\n\n[wallet] add -signer argument for external signer command\n\nCreate basic ExternalSigner class with contructor. A Signer(<cmd>)\nis added to CWallet on load if -signer=<cmd> is set.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94059d47ea9649db05818207bd850fc2400650da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94059d47ea9649db05818207bd850fc2400650da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94059d47ea9649db05818207bd850fc2400650da/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b66635088d35ba441a8d61b9dafa952fa94875cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b66635088d35ba441a8d61b9dafa952fa94875cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b66635088d35ba441a8d61b9dafa952fa94875cb"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 53,
      "deletions": 1
    },
    "files": [
      {
        "sha": "be7d09ddb0843248396068b9a897a8eb0598ca68",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94059d47ea9649db05818207bd850fc2400650da/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94059d47ea9649db05818207bd850fc2400650da/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=94059d47ea9649db05818207bd850fc2400650da",
        "patch": "@@ -239,6 +239,7 @@ BITCOIN_CORE_H = \\\n   wallet/coincontrol.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n+  wallet/externalsigner.h \\\n   wallet/feebumper.h \\\n   wallet/fees.h \\\n   wallet/ismine.h \\\n@@ -349,6 +350,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/coincontrol.cpp \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n+  wallet/externalsigner.cpp \\\n   wallet/feebumper.cpp \\\n   wallet/fees.cpp \\\n   wallet/load.cpp \\"
      },
      {
        "sha": "5872a2bbdb932cbca8364ecf32977424ed66d196",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94059d47ea9649db05818207bd850fc2400650da/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94059d47ea9649db05818207bd850fc2400650da/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=94059d47ea9649db05818207bd850fc2400650da",
        "patch": "@@ -39,6 +39,9 @@ void DummyWalletInit::AddWalletOptions() const\n         \"-paytxfee=<amt>\",\n         \"-rescan\",\n         \"-salvagewallet\",\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+        \"-signer=<cmd>\",\n+#endif\n         \"-spendzeroconfchange\",\n         \"-txconfirmtarget=<n>\",\n         \"-upgradewallet\","
      },
      {
        "sha": "2f3c8eae96ba6e44e7c2c27bfa4ce7d6a49d1a28",
        "filename": "src/wallet/externalsigner.cpp",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94059d47ea9649db05818207bd850fc2400650da/src/wallet/externalsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94059d47ea9649db05818207bd850fc2400650da/src/wallet/externalsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.cpp?ref=94059d47ea9649db05818207bd850fc2400650da",
        "patch": "@@ -0,0 +1,8 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/externalsigner.h>\n+#include <util/system.h>\n+\n+ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint): m_command(command), m_fingerprint(fingerprint) {}"
      },
      {
        "sha": "1fe533ec694cff95742f14a5715667d4149b8578",
        "filename": "src/wallet/externalsigner.h",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94059d47ea9649db05818207bd850fc2400650da/src/wallet/externalsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94059d47ea9649db05818207bd850fc2400650da/src/wallet/externalsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.h?ref=94059d47ea9649db05818207bd850fc2400650da",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_EXTERNALSIGNER_H\n+#define BITCOIN_WALLET_EXTERNALSIGNER_H\n+\n+#include <stdexcept>\n+#include <string>\n+#include <univalue.h>\n+\n+class ExternalSignerException : public std::runtime_error {\n+public:\n+    using std::runtime_error::runtime_error;\n+};\n+\n+//! Enables interaction with an external signing device or service, such as a\n+//! a hardware wallet. See doc/external-signer.md\n+class ExternalSigner\n+{\n+private:\n+    //! The command which handles interaction with the external signer.\n+    std::string m_command;\n+\n+public:\n+    //! @param[in] command      the command which handles interaction with the external signer\n+    //! @param[in] fingerprint  master key fingerprint of the signer\n+    ExternalSigner(const std::string& command, const std::string& fingerprint);\n+\n+    //! Master key fingerprint of the signer\n+    std::string m_fingerprint;\n+};\n+\n+#endif // BITCOIN_WALLET_EXTERNALSIGNER_H"
      },
      {
        "sha": "98801c5fda2ef4802755838638e01f10ea854f3d",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94059d47ea9649db05818207bd850fc2400650da/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94059d47ea9649db05818207bd850fc2400650da/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=94059d47ea9649db05818207bd850fc2400650da",
        "patch": "@@ -55,6 +55,9 @@ void WalletInit::AddWalletOptions() const\n                                                             CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-salvagewallet\", \"Attempt to recover private keys from a corrupt wallet on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+    gArgs.AddArg(\"-signer=<cmd>\", \"External signing tool, see docs/external-signer.md\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+#endif\n     gArgs.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-upgradewallet\", \"Upgrade wallet to latest format on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);"
      },
      {
        "sha": "766839636e8df51531bee577ee1e301640e0b99c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94059d47ea9649db05818207bd850fc2400650da/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94059d47ea9649db05818207bd850fc2400650da/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=94059d47ea9649db05818207bd850fc2400650da",
        "patch": "@@ -19,6 +19,7 @@\n #include <wallet/coinselection.h>\n #include <wallet/crypter.h>\n #include <wallet/scriptpubkeyman.h>\n+#include <wallet/externalsigner.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n \n@@ -86,7 +87,8 @@ constexpr CAmount DEFAULT_TRANSACTION_MAXFEE{COIN / 10};\n constexpr CAmount HIGH_TX_FEE_PER_KB{COIN / 100};\n //! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n constexpr CAmount HIGH_MAX_TX_FEE{100 * HIGH_TX_FEE_PER_KB};\n-\n+//! -signer default\n+static const std::string DEFAULT_EXTERNAL_SIGNER = \"\";\n //! Pre-calculated constants for input size estimation in *virtual size*\n static constexpr size_t DUMMY_NESTED_P2WPKH_INPUT_SIZE = 91;\n "
      }
    ]
  },
  {
    "sha": "addfc89fea68ad29ef9a41a1a0a0c023c849b89a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGRmYzg5ZmVhNjhhZDI5ZWY5YTQxYTFhMGEwYzAyM2M4NDliODlh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-04-27T17:11:43Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:09Z"
      },
      "message": "[test] add external signer test\n\nIncludes a mock to mimick the HWI interace.",
      "tree": {
        "sha": "ce3421eb6503725384bcf78c3f865791a65b58d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce3421eb6503725384bcf78c3f865791a65b58d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/addfc89fea68ad29ef9a41a1a0a0c023c849b89a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtUACgkQV/+b28ww\nEAki4g/+PQqAcywY1ojMrzX0JwHdGf1TuDFnNtMg0UC1MLRlHHuwCYhpELurn2E8\nLg80rQTRAFjY48pMehNRyj8fLzti8lWx3eKI7laR24qeNwLhCo1lhQCy+8HvIaaZ\nTtYjMQeM/zJWJlQOU7DqN9zbtPLNX8hoBkaGR870VmTLPuFArpshXshJLMDvDPL+\n/N3PUkjcXaKpkvI6vXjrYP9aTBQChIrDb/HotspoSQibMdTNJhhnlzPSHa8sjq42\n96YoUa7XzX9ZSb2gBITMWoNmQS9GzWBHMJIwzs6XN+U1GMxHEncHPZWOjSiCh9Xp\ntM7leC7FImwWALkr4M9xIP5WEj7TNruOLag0N4Z/m9693QNctvFIsGmAMD4GJhgg\nUvCV1KNPWy228RBhbdsJoFFlKBQGyCoJ4MNBvZ2NAQqA1Du5787SR4nIdoLHpOh7\nUz01xcdH7da4qqJVA1d2Iq6aXCGh9NDfiTH+CbK5S9isasxmDYQFhAtYauDsXqnw\nUjcVCpLwwZWFtz80u8bfAElH3r87x96QdiSSbSjq3P++m8B46nY8879s956QMiAO\n5LlfSEolBdScqIvBWpKcnd20MO08ww5gwo8PI7YLf4TuS8EAxFyxt3ZZDEz/96EC\n1Zb2M3XN0WGm2lKxyscJA1YSCnOmvtR//tkV5RG7t9QmgrxWfJ4=\n=wV5A\n-----END PGP SIGNATURE-----",
        "payload": "tree ce3421eb6503725384bcf78c3f865791a65b58d5\nparent 94059d47ea9649db05818207bd850fc2400650da\nauthor Sjors Provoost <sjors@sprovoost.nl> 1556385103 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407509 +0100\n\n[test] add external signer test\n\nIncludes a mock to mimick the HWI interace.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/addfc89fea68ad29ef9a41a1a0a0c023c849b89a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/addfc89fea68ad29ef9a41a1a0a0c023c849b89a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/addfc89fea68ad29ef9a41a1a0a0c023c849b89a/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94059d47ea9649db05818207bd850fc2400650da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94059d47ea9649db05818207bd850fc2400650da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94059d47ea9649db05818207bd850fc2400650da"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 85,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7edffc5bc8cc27f7a9b80d933a57e76c2a6c811f",
        "filename": "test/functional/mocks/signer.py",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/addfc89fea68ad29ef9a41a1a0a0c023c849b89a/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/addfc89fea68ad29ef9a41a1a0a0c023c849b89a/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=addfc89fea68ad29ef9a41a1a0a0c023c849b89a",
        "patch": "@@ -0,0 +1,31 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import os\n+import sys\n+import argparse\n+import json\n+\n+def perform_pre_checks():\n+    mock_result_path = os.path.join(os.getcwd(), \"mock_result\")\n+    if(os.path.isfile(mock_result_path)):\n+        f = open(mock_result_path, \"r\", encoding=\"utf8\")\n+        mock_result = f.read()\n+        f.close()\n+        if mock_result[0]:\n+            sys.exit(int(mock_result[0]))\n+\n+parser = argparse.ArgumentParser(prog='./signer.py', description='External signer mock')\n+subparsers = parser.add_subparsers()\n+\n+if len(sys.argv) == 1:\n+  args = parser.parse_args(['-h'])\n+  exit()\n+\n+args = parser.parse_args()\n+\n+perform_pre_checks()\n+\n+args.func(args)"
      },
      {
        "sha": "bd63a4851215a1c7884e81b371821eddb045d1bb",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/addfc89fea68ad29ef9a41a1a0a0c023c849b89a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/addfc89fea68ad29ef9a41a1a0a0c023c849b89a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=addfc89fea68ad29ef9a41a1a0a0c023c849b89a",
        "patch": "@@ -95,6 +95,7 @@\n     'p2p_tx_download.py',\n     'wallet_dump.py',\n     'wallet_listtransactions.py',\n+    'wallet_signer.py',\n     # vv Tests less than 60s vv\n     'p2p_sendheaders.py',\n     'wallet_zapwallettxes.py',"
      },
      {
        "sha": "818aa7430763c9c73a74a75ee0dee87a783ae25f",
        "filename": "test/functional/wallet_signer.py",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/addfc89fea68ad29ef9a41a1a0a0c023c849b89a/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/addfc89fea68ad29ef9a41a1a0a0c023c849b89a/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=addfc89fea68ad29ef9a41a1a0a0c023c849b89a",
        "patch": "@@ -0,0 +1,53 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test external signer.\n+\n+Verify that a bitcoind node can use an external signer command\n+\"\"\"\n+import os\n+import platform\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class SignerTest(BitcoinTestFramework):\n+    def mock_signer_path(self):\n+        path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'mocks', 'signer.py')\n+        if platform.system() == \"Windows\":\n+            return \"py \" + path\n+        else:\n+            return path\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+\n+        self.extra_args = [\n+            [],\n+            ['-signer=%s' % self.mock_signer_path()],\n+            ['-signer=%s' % \"fake.py\"],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_external_signer()\n+\n+    def set_mock_result(self, node, res):\n+        f = open(os.path.join(node.cwd, \"mock_result\"), \"w\", encoding=\"utf8\")\n+        f.write(res)\n+        f.close()\n+\n+    def clear_mock_result(self, node):\n+        os.remove(os.path.join(node.cwd, \"mock_result\"))\n+\n+    def run_test(self):\n+        self.log.info('-signer=%s' % self.mock_signer_path())\n+        assert_equal(self.nodes[0].getbalance(), 1250)\n+\n+if __name__ == '__main__':\n+    SignerTest().main()"
      }
    ]
  },
  {
    "sha": "9878c2a1cdb3cde32ef77281e976bcc607b52d04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODc4YzJhMWNkYjNjZGUzMmVmNzcyODFlOTc2YmNjNjA3YjUyZDA0",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:29Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:09Z"
      },
      "message": "[rpc] add external signer RPC files",
      "tree": {
        "sha": "6ae0b8bcfafb9e8178ecf1af84ff6687a01b3e48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ae0b8bcfafb9e8178ecf1af84ff6687a01b3e48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9878c2a1cdb3cde32ef77281e976bcc607b52d04",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtUACgkQV/+b28ww\nEAmRsQ//anjdHmsQKyPBSM2O/M0Mw+NkjzdMcVWiSL0SZBAjwlMd/m1a5Tl0uBM0\nTvJz61oGj0hn4lnqGKFzCaCN0Gt0D7vmVqxrTPJEubewGfuL6rzuWd/YNfoN8M/a\nNiB8I2IsHNtBybUR5NOgBTzXPWa4k+oPA4ZBMXUrUaazbe03ZF8PLfw9+F0J5LBM\nA5NwOy9nqkhMoXQG2IJy8jM7t9+8DNlLOyeIsQA4NXPpdmBkEAZY6blkjrHKpMp+\nMNl/VQHVEDyoj/OoORMCxhQOSYW0ElyAMySfg91v+iGzrFpWPWmDS+Bv+ej7HSNE\nqNs7tGmyOJlOGtKQJj/YT6W1VYI7nLM1qNFpV8W74nMBzM7pzvu78h+Nrp2ey3Fk\nJiwzLYu0cwvHbSXbym8/db2hBSM9Zi8zq5T52I73xCA6iO5DmIyoHxQkVJ1PvFuA\n6UoXOvGJ9XFWQ1ZT8RJD1V9WBfO6OzpWBLR220+n3JVpUVr82caZ0dwD7qlPxorz\ntMjo6eYUyCpUiKcB0+Zz6EHX7ulTXxI9ruW2Tm281ObJ/FIQJJ8bxuJ9EPKiN0uS\ndS96qDkDqyZBW/e3Nj80J5QmX8VvrRNpV7w6h/Fc98O5tnbbF1x0X660v0lI+uGC\ndhqqi//EPFOEa92elGAsWqA8UuoeQS/6uOud296PXc3e2TLcXxw=\n=+AsQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 6ae0b8bcfafb9e8178ecf1af84ff6687a01b3e48\nparent addfc89fea68ad29ef9a41a1a0a0c023c849b89a\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231669 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407509 +0100\n\n[rpc] add external signer RPC files\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9878c2a1cdb3cde32ef77281e976bcc607b52d04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9878c2a1cdb3cde32ef77281e976bcc607b52d04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9878c2a1cdb3cde32ef77281e976bcc607b52d04/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "addfc89fea68ad29ef9a41a1a0a0c023c849b89a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/addfc89fea68ad29ef9a41a1a0a0c023c849b89a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/addfc89fea68ad29ef9a41a1a0a0c023c849b89a"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 58,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1f5c06277818517a4ccc386f12cf25993ea75c82",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9878c2a1cdb3cde32ef77281e976bcc607b52d04/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9878c2a1cdb3cde32ef77281e976bcc607b52d04/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9878c2a1cdb3cde32ef77281e976bcc607b52d04",
        "patch": "@@ -245,6 +245,7 @@ BITCOIN_CORE_H = \\\n   wallet/ismine.h \\\n   wallet/load.h \\\n   wallet/psbtwallet.h \\\n+  wallet/rpcsigner.h \\\n   wallet/rpcwallet.h \\\n   wallet/scriptpubkeyman.h \\\n   wallet/wallet.h \\\n@@ -356,6 +357,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/load.cpp \\\n   wallet/psbtwallet.cpp \\\n   wallet/rpcdump.cpp \\\n+  wallet/rpcsigner.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/scriptpubkeyman.cpp \\\n   wallet/wallet.cpp \\"
      },
      {
        "sha": "10168491e5ed8611fcb2ec5bb0967c04b15c7b45",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9878c2a1cdb3cde32ef77281e976bcc607b52d04/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9878c2a1cdb3cde32ef77281e976bcc607b52d04/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=9878c2a1cdb3cde32ef77281e976bcc607b52d04",
        "patch": "@@ -20,6 +20,7 @@\n #include <wallet/ismine.h>\n #include <wallet/load.h>\n #include <wallet/psbtwallet.h>\n+#include <wallet/rpcsigner.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n \n@@ -523,7 +524,10 @@ class WalletClientImpl : public ChainClient\n     void registerRpcs() override\n     {\n         g_rpc_chain = &m_chain;\n-        return RegisterWalletRPCCommands(m_chain, m_rpc_handlers);\n+        RegisterWalletRPCCommands(m_chain, m_rpc_handlers);\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+        RegisterSignerRPCCommands(m_chain, m_rpc_handlers);\n+#endif\n     }\n     bool verify() override { return VerifyWallets(m_chain, m_wallet_filenames); }\n     bool load() override { return LoadWallets(m_chain, m_wallet_filenames); }"
      },
      {
        "sha": "a6f5f17f6ba799b783b432f3b5f920ae429e6030",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9878c2a1cdb3cde32ef77281e976bcc607b52d04/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9878c2a1cdb3cde32ef77281e976bcc607b52d04/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=9878c2a1cdb3cde32ef77281e976bcc607b52d04",
        "patch": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <rpc/server.h>\n+#include <util/strencodings.h>\n+#include <wallet/rpcsigner.h>\n+#include <wallet/wallet.h>\n+\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+\n+// clang-format off\n+static const CRPCCommand commands[] =\n+{ //  category              name                                actor (function)                argNames\n+    //  --------------------- ------------------------          -----------------------         ----------\n+};\n+// clang-format on\n+\n+void RegisterSignerRPCCommands(interfaces::Chain& chain, std::vector<std::unique_ptr<interfaces::Handler>>& handlers)\n+{\n+    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n+        handlers.emplace_back(chain.handleRpc(commands[vcidx]));\n+}\n+#endif // ENABLE_EXTERNAL_SIGNER"
      },
      {
        "sha": "15e645a2f5bbb50c85a37d01c3433b012c12a51b",
        "filename": "src/wallet/rpcsigner.h",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9878c2a1cdb3cde32ef77281e976bcc607b52d04/src/wallet/rpcsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9878c2a1cdb3cde32ef77281e976bcc607b52d04/src/wallet/rpcsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.h?ref=9878c2a1cdb3cde32ef77281e976bcc607b52d04",
        "patch": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_RPCSIGNER_H\n+#define BITCOIN_WALLET_RPCSIGNER_H\n+\n+#include <util/system.h>\n+#include <vector>\n+\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+\n+class CRPCTable;\n+\n+namespace interfaces {\n+class Chain;\n+class Handler;\n+}\n+\n+void RegisterSignerRPCCommands(interfaces::Chain& chain, std::vector<std::unique_ptr<interfaces::Handler>>& handlers);\n+\n+#endif // BOOST_VERSION\n+\n+#endif //BITCOIN_WALLET_RPCSIGNER_H"
      },
      {
        "sha": "d7f827921b8a309a920ad06d06b615a221562856",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9878c2a1cdb3cde32ef77281e976bcc607b52d04/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9878c2a1cdb3cde32ef77281e976bcc607b52d04/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=9878c2a1cdb3cde32ef77281e976bcc607b52d04",
        "patch": "@@ -38,11 +38,12 @@ def test_categories(self):\n \n         if self.is_wallet_compiled():\n             components.append('Wallet')\n+            components.append('Signer')\n \n         if self.is_zmq_compiled():\n             components.append('Zmq')\n \n-        assert_equal(titles, components)\n+        assert_equal(titles, sorted(components))\n \n     def dump_help(self):\n         dump_dir = os.path.join(self.options.tmpdir, 'rpc_help_dump')"
      },
      {
        "sha": "d772db4eeae54fb9f2bf988d0d81fd8c922c545f",
        "filename": "test/lint/check-rpc-mappings.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9878c2a1cdb3cde32ef77281e976bcc607b52d04/test/lint/check-rpc-mappings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9878c2a1cdb3cde32ef77281e976bcc607b52d04/test/lint/check-rpc-mappings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-rpc-mappings.py?ref=9878c2a1cdb3cde32ef77281e976bcc607b52d04",
        "patch": "@@ -17,6 +17,7 @@\n     \"src/rpc/misc.cpp\",\n     \"src/rpc/net.cpp\",\n     \"src/rpc/rawtransaction.cpp\",\n+    \"src/wallet/rpcsigner.cpp\",\n     \"src/wallet/rpcwallet.cpp\",\n ]\n # Source file (relative to root) containing conversion mapping"
      }
    ]
  },
  {
    "sha": "1add4c77f4321602bf771d9cf0a0fc3cc48b336a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWRkNGM3N2Y0MzIxNjAyYmY3NzFkOWNmMGEwZmMzY2M0OGIzMzZh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:29Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:09Z"
      },
      "message": "[rpc] signer: add enumeratesigners to list external signers",
      "tree": {
        "sha": "2847e9900696d5fa2b3ccc789a4382f27e7bc98f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2847e9900696d5fa2b3ccc789a4382f27e7bc98f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1add4c77f4321602bf771d9cf0a0fc3cc48b336a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtUACgkQV/+b28ww\nEAkUMQ//ThAW98ZqWO45rV1y1sV8dHbEDI76eu6hpY8vO4cWIgtzdAiMn9wTYoB2\nx4VgQpjrke4/s2q7cBjJpGtN4rB+H5Z3vaimzJYO5gubPIBr1dE29niOwFRgM2VI\nfCVQiANAlqRDW3jh0hctj394t7Sbww1P8BH8Pirm+hC+WZYBgGtrvdFZx0YUQBMR\nMpxNTYcoJbxX+h0+tEfLSQ4KCVYAEaVqSyCXzwB1XribIb0Crz1OZquTgC8JFc2U\n9eHCE8IfAAN+6qQsIBFOJrBAjCUz5RvdEkLS49cpg6HfzUC/qjvlIYYpuxHBzka4\ntseZgtI+dQ6a7kpUmT2Y6B5434OTdfZhglHzgA1YqWv44ECfchqnwjDyIGhPo05i\nJKwpA7jaigoEzuga8RpcxuPXMapff/TLJDg8dYRIQrEyUNqB0hao+8oCAR8HCckb\nQtcpLQ+eAyiRBmmLOdNwEUrY0HheHaq4Ozoj/r0jAEhtiKCihYFtTE0iUBvLGegp\nFqfCfGFvvOdNhWbpjoJxG13Dfqxu0k0rs2P/kCRajQG6Hth4MipNUtP/eob4vpnf\niRGSM4YZHHdIhTGi/pCrZgLY42YF6WJNSp0QIdvS5wUdLYa3yAzXkCqTU1o+zbdo\nhk+0yaiBp/14O4Q52iNdG85vly6SYXo7N9FbSsFbjnkEdVjYvM4=\n=a+9c\n-----END PGP SIGNATURE-----",
        "payload": "tree 2847e9900696d5fa2b3ccc789a4382f27e7bc98f\nparent 9878c2a1cdb3cde32ef77281e976bcc607b52d04\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231669 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407509 +0100\n\n[rpc] signer: add enumeratesigners to list external signers\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1add4c77f4321602bf771d9cf0a0fc3cc48b336a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1add4c77f4321602bf771d9cf0a0fc3cc48b336a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1add4c77f4321602bf771d9cf0a0fc3cc48b336a/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9878c2a1cdb3cde32ef77281e976bcc607b52d04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9878c2a1cdb3cde32ef77281e976bcc607b52d04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9878c2a1cdb3cde32ef77281e976bcc607b52d04"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 142,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f446d6c0cd24a7937274ebed4b3aba6a037310e1",
        "filename": "src/wallet/externalsigner.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 2,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1add4c77f4321602bf771d9cf0a0fc3cc48b336a/src/wallet/externalsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1add4c77f4321602bf771d9cf0a0fc3cc48b336a/src/wallet/externalsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.cpp?ref=1add4c77f4321602bf771d9cf0a0fc3cc48b336a",
        "patch": "@@ -3,6 +3,40 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <wallet/externalsigner.h>\n-#include <util/system.h>\n \n-ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint): m_command(command), m_fingerprint(fingerprint) {}\n+ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint, bool mainnet, std::string name): m_command(command), m_fingerprint(fingerprint), m_mainnet(mainnet), m_name(name) {}\n+\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+\n+bool ExternalSigner::Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, bool mainnet, bool ignore_errors)\n+{\n+    // Call <command> enumerate\n+    const UniValue result = runCommandParseJSON(command + \" enumerate\");\n+    if (!result.isArray()) {\n+        if (ignore_errors) return false;\n+        throw ExternalSignerException(strprintf(\"'%s' received invalid response, expected array of signers\", command));\n+    }\n+    for (UniValue signer : result.getValues()) {\n+        const UniValue& fingerprint = find_value(signer, \"fingerprint\");\n+        if (fingerprint.isNull()) {\n+            if (ignore_errors) return false;\n+            throw ExternalSignerException(strprintf(\"'%s' received invalid response, missing signer fingerprint\", command));\n+        }\n+        std::string fingerprintStr = fingerprint.get_str();\n+        // Skip duplicate signer\n+        bool duplicate = false;\n+        for (ExternalSigner signer : signers) {\n+            if (signer.m_fingerprint.compare(fingerprintStr) == 0) duplicate = true;\n+        }\n+        if (duplicate) break;\n+        std::string name = \"\";\n+        const UniValue& model_field = find_value(signer, \"model\");\n+        if (model_field.isStr() && model_field.getValStr() != \"\") {\n+            name += model_field.getValStr();\n+        }\n+        signers.push_back(ExternalSigner(command, fingerprintStr, mainnet, name));\n+    }\n+    return true;\n+}\n+\n+#endif"
      },
      {
        "sha": "55d6904549d0c29ddfef9a84c1cab83141a77af7",
        "filename": "src/wallet/externalsigner.h",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1add4c77f4321602bf771d9cf0a0fc3cc48b336a/src/wallet/externalsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1add4c77f4321602bf771d9cf0a0fc3cc48b336a/src/wallet/externalsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.h?ref=1add4c77f4321602bf771d9cf0a0fc3cc48b336a",
        "patch": "@@ -8,6 +8,7 @@\n #include <stdexcept>\n #include <string>\n #include <univalue.h>\n+#include <util/system.h>\n \n class ExternalSignerException : public std::runtime_error {\n public:\n@@ -25,10 +26,27 @@ class ExternalSigner\n public:\n     //! @param[in] command      the command which handles interaction with the external signer\n     //! @param[in] fingerprint  master key fingerprint of the signer\n-    ExternalSigner(const std::string& command, const std::string& fingerprint);\n+    //! @param[in] mainnet      Bitcoin mainnet or testnet\n+    ExternalSigner(const std::string& command, const std::string& fingerprint, bool mainnet, std::string name);\n \n     //! Master key fingerprint of the signer\n     std::string m_fingerprint;\n+\n+    //! Bitcoin mainnet or testnet\n+    bool m_mainnet;\n+\n+    //! Name of signer\n+    std::string m_name;\n+\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+    //! Obtain a list of signers. Calls `<command> enumerate`.\n+    //! @param[in]              command the command which handles interaction with the external signer\n+    //! @param[in,out] signers  vector to which new signers (with a unique master key fingerprint) are added\n+    //! @param mainnet          Bitcoin mainnet or testnet\n+    //! @param[out] success     Boolean\n+    static bool Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, bool mainnet = true, bool ignore_errors = false);\n+\n+#endif\n };\n \n #endif // BITCOIN_WALLET_EXTERNALSIGNER_H"
      },
      {
        "sha": "fd8f1aa7ef2dc1afe4d580b978f5054d231788c5",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1add4c77f4321602bf771d9cf0a0fc3cc48b336a/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1add4c77f4321602bf771d9cf0a0fc3cc48b336a/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=1add4c77f4321602bf771d9cf0a0fc3cc48b336a",
        "patch": "@@ -2,17 +2,73 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <chainparamsbase.h>\n #include <rpc/server.h>\n+#include <rpc/util.h>\n #include <util/strencodings.h>\n #include <wallet/rpcsigner.h>\n+#include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n \n #ifdef ENABLE_EXTERNAL_SIGNER\n \n+static UniValue enumeratesigners(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 0) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"enumeratesigners\\n\",\n+                \"Returns a list of external signers from -signer.\\n\",\n+                {},\n+                RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"signers\\\" : [                              (json array of objects)\\n\"\n+                    \"    {\\n\"\n+                    \"      \\\"masterkeyfingerprint\\\" : \\\"fingerprint\\\" (string) Master key fingerprint\\n\",\n+                    \"      \\\"name\\\" : \\\"name\\\" (string) Device name\\n\"\n+                    \"    }\\n\"\n+                    \"    ,...\\n\"\n+                    \"  ]\\n\"\n+                    \"}\\n\"\n+                },\n+                RPCExamples{\"\"}\n+            }.ToString()\n+        );\n+    }\n+\n+    const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n+    if (command == \"\") throw JSONRPCError(RPC_WALLET_ERROR, \"Error: restart bitcoind with -signer=<cmd>\");\n+    std::string chain = gArgs.GetChainName();\n+    const bool mainnet = chain == CBaseChainParams::MAIN;\n+    UniValue signers_res = UniValue::VARR;\n+    try {\n+        std::vector<ExternalSigner> signers;\n+        ExternalSigner::Enumerate(command, signers, mainnet);\n+        for (ExternalSigner signer : signers) {\n+            UniValue signer_res = UniValue::VOBJ;\n+            signer_res.pushKV(\"fingerprint\", signer.m_fingerprint);\n+            signer_res.pushKV(\"name\", signer.m_name);\n+            signers_res.push_back(signer_res);\n+        }\n+    } catch (const ExternalSignerException& e) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, e.what());\n+    }\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"signers\", signers_res);\n+    return result;\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                                actor (function)                argNames\n     //  --------------------- ------------------------          -----------------------         ----------\n+    { \"signer\",             \"enumeratesigners\",                 &enumeratesigners,              {} },\n };\n // clang-format on\n "
      },
      {
        "sha": "a34cedec88cb7761079fc1cde2d1125053f4ec59",
        "filename": "test/functional/mocks/signer.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1add4c77f4321602bf771d9cf0a0fc3cc48b336a/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1add4c77f4321602bf771d9cf0a0fc3cc48b336a/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=1add4c77f4321602bf771d9cf0a0fc3cc48b336a",
        "patch": "@@ -17,9 +17,15 @@ def perform_pre_checks():\n         if mock_result[0]:\n             sys.exit(int(mock_result[0]))\n \n+def enumerate(args):\n+  sys.stdout.write(json.dumps([{\"fingerprint\": \"00000001\", \"type\": \"trezor\", \"model\": \"trezor_t\"}, {\"fingerprint\": \"00000002\"}]))\n+\n parser = argparse.ArgumentParser(prog='./signer.py', description='External signer mock')\n subparsers = parser.add_subparsers()\n \n+parser_enumerate = subparsers.add_parser('enumerate', help='list available signers')\n+parser_enumerate.set_defaults(func=enumerate)\n+\n if len(sys.argv) == 1:\n   args = parser.parse_args(['-h'])\n   exit()"
      },
      {
        "sha": "7a6b03ec8b4de7b136e44388ab387d84b6a417cf",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1add4c77f4321602bf771d9cf0a0fc3cc48b336a/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1add4c77f4321602bf771d9cf0a0fc3cc48b336a/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=1add4c77f4321602bf771d9cf0a0fc3cc48b336a",
        "patch": "@@ -49,5 +49,30 @@ def run_test(self):\n         self.log.info('-signer=%s' % self.mock_signer_path())\n         assert_equal(self.nodes[0].getbalance(), 1250)\n \n+        assert_raises_rpc_error(-4, 'Error: restart bitcoind with -signer=<cmd>',\n+            self.nodes[0].enumeratesigners\n+        )\n+\n+        # Handle script missing:\n+        assert_raises_rpc_error(-1, 'execve failed: No such file or directory',\n+            self.nodes[2].enumeratesigners\n+        )\n+\n+        # Handle error thrown by script\n+        self.set_mock_result(self.nodes[1], \"2\")\n+        assert_raises_rpc_error(-1, 'runCommandParseJSON error',\n+            self.nodes[1].enumeratesigners\n+        )\n+        self.clear_mock_result(self.nodes[1])\n+\n+        # Create new wallets with private keys disabled:\n+        self.nodes[1].createwallet(wallet_name='hww', disable_private_keys=True, descriptors=True)\n+        hww = self.nodes[1].get_wallet_rpc('hww')\n+\n+        result = hww.enumeratesigners()\n+        assert_equal(len(result['signers']), 2)\n+        assert_equal(result['signers'][0][\"fingerprint\"], \"00000001\")\n+        assert_equal(result['signers'][0][\"name\"], \"trezor_t\")\n+\n if __name__ == '__main__':\n     SignerTest().main()"
      }
    ]
  },
  {
    "sha": "68b9b132b74243c961635f9d935d4e2b1faacd3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGI5YjEzMmI3NDI0M2M5NjE2MzVmOWQ5MzVkNGUyYjFmYWFjZDNj",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T15:55:31Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:09Z"
      },
      "message": "[wallet] add external_signer flag",
      "tree": {
        "sha": "a78044068d4bbee222fe49fb70ac784e7cc94b14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a78044068d4bbee222fe49fb70ac784e7cc94b14"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68b9b132b74243c961635f9d935d4e2b1faacd3c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtUACgkQV/+b28ww\nEAlishAAmh97Uy+XwlvFcjQKT3RC0+sQdYwgNUrdthXMj039so5odS6/aHmKHZNE\njPK97E8QUJMmhR8HpXkqPrw1azQxPfx8KjJOHlKfhs4ltT8MjmD7q+0mriZHPdla\n9k2bcmFREtrHHbSPfgS/DWQ0Q3YLMKpVQ5Mzhcl/gQCObedj5TeT1XLiFTMUmClr\nVCEyz8EAq5qO2H0IqLer1Pg8+pNwG6g1STj/ZHeCrSCNmIdzTZkccW9Vvwxf0HUH\nq98J3hbipXDLdESISqwF/F8uwj1/vYVAAZXqK6uyb1ZU3+TP/42+7ZAzOOHB4Id3\nKbe/aDN38mr8w1tQQ4yuRiSJj9CkBsFvAjTCZmOYZJm3JpgHoOkIAaDOVX6ixoHZ\nCCoFCm2hc18f4b98SAvljOUTMY5xlN0ugCEyh55r+kNgElIsUsRrHHL/ke9OKjHA\nIu/vRQX+mtcFFt5woAqfxVO87Ze8pbMftGTJscnEQR+LmmojXdpsAft5ftN75Z57\nYIWXNuW+PAvLfU0B0bFF6Q0naHvAbdJ/5+1NclB6xQbzDkckYsV+q20ivGyhmx+I\nwMEh29BGo7lZaUtNRQQ2jX/XZ/ZXxmdgo5UQ+exw3d07AleMVKEw/5ErjW6A+zxX\nQlk2JdsdnTNV2Pi3diRpuhUiBCX10eyDHOknE8py4L0tR0alqAQ=\n=9NOb\n-----END PGP SIGNATURE-----",
        "payload": "tree a78044068d4bbee222fe49fb70ac784e7cc94b14\nparent 1add4c77f4321602bf771d9cf0a0fc3cc48b336a\nauthor Sjors Provoost <sjors@sprovoost.nl> 1564934131 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407509 +0100\n\n[wallet] add external_signer flag\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68b9b132b74243c961635f9d935d4e2b1faacd3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68b9b132b74243c961635f9d935d4e2b1faacd3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68b9b132b74243c961635f9d935d4e2b1faacd3c/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1add4c77f4321602bf771d9cf0a0fc3cc48b336a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1add4c77f4321602bf771d9cf0a0fc3cc48b336a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1add4c77f4321602bf771d9cf0a0fc3cc48b336a"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 18,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a899f65ea76e5a0fab5bf2579d9438763d7d7376",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68b9b132b74243c961635f9d935d4e2b1faacd3c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68b9b132b74243c961635f9d935d4e2b1faacd3c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=68b9b132b74243c961635f9d935d4e2b1faacd3c",
        "patch": "@@ -186,6 +186,18 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n         return WalletCreationStatus::CREATION_FAILED;\n     }\n \n+    // Private keys must be disabled for an external signer wallet\n+    if ((wallet_creation_flags & WALLET_FLAG_EXTERNAL_SIGNER) && !(wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        error = \"Private keys must be disabled when using an external signer\";\n+        return WalletCreationStatus::CREATION_FAILED;\n+    }\n+\n+    // Descriptor support must be enabled for an external signer wallet\n+    if ((wallet_creation_flags & WALLET_FLAG_EXTERNAL_SIGNER) && !(wallet_creation_flags & WALLET_FLAG_DESCRIPTORS)) {\n+        error = \"Descriptor support must be enabled when using an external signer\";\n+        return WalletCreationStatus::CREATION_FAILED;\n+    }\n+\n     // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n     if (!CWallet::Verify(chain, location, false, error, warnings)) {\n         error = \"Wallet file verification failed: \" + error;"
      },
      {
        "sha": "9e49ce757ad2dd2dd1c06aac6bcd97b9f6750c29",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68b9b132b74243c961635f9d935d4e2b1faacd3c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68b9b132b74243c961635f9d935d4e2b1faacd3c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=68b9b132b74243c961635f9d935d4e2b1faacd3c",
        "patch": "@@ -111,7 +111,8 @@ static constexpr uint64_t KNOWN_WALLET_FLAGS =\n     |   WALLET_FLAG_BLANK_WALLET\n     |   WALLET_FLAG_KEY_ORIGIN_METADATA\n     |   WALLET_FLAG_DISABLE_PRIVATE_KEYS\n-    |   WALLET_FLAG_DESCRIPTORS;\n+    |   WALLET_FLAG_DESCRIPTORS\n+    |   WALLET_FLAG_EXTERNAL_SIGNER;\n \n static constexpr uint64_t MUTABLE_WALLET_FLAGS =\n         WALLET_FLAG_AVOID_REUSE;\n@@ -122,6 +123,7 @@ static const std::map<std::string,WalletFlags> WALLET_FLAG_MAP{\n     {\"key_origin_metadata\", WALLET_FLAG_KEY_ORIGIN_METADATA},\n     {\"disable_private_keys\", WALLET_FLAG_DISABLE_PRIVATE_KEYS},\n     {\"descriptor_wallet\", WALLET_FLAG_DESCRIPTORS},\n+    {\"external_signer\", WALLET_FLAG_EXTERNAL_SIGNER}\n };\n \n extern const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS;"
      },
      {
        "sha": "daace4aac9a82816d8e0cca38182c92014a8d8e4",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68b9b132b74243c961635f9d935d4e2b1faacd3c/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68b9b132b74243c961635f9d935d4e2b1faacd3c/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=68b9b132b74243c961635f9d935d4e2b1faacd3c",
        "patch": "@@ -59,6 +59,9 @@ enum WalletFlags : uint64_t {\n \n     //! Indicate that this wallet supports DescriptorScriptPubKeyMan\n     WALLET_FLAG_DESCRIPTORS = (1ULL << 34),\n+\n+    //! Indicates that the wallet needs an external signer\n+    WALLET_FLAG_EXTERNAL_SIGNER = (1ULL << 35),\n };\n \n //! Get the path of the wallet directory."
      }
    ]
  },
  {
    "sha": "835e2e632b6a7f9e008665bca66f910f98f2725c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzVlMmU2MzJiNmE3ZjllMDA4NjY1YmNhNjZmOTEwZjk4ZjI3MjVj",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T15:56:17Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:09Z"
      },
      "message": "[rpc] add external_signer option to createwallet",
      "tree": {
        "sha": "cb62eabfbee2328c9e2644f723014610e707cc9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb62eabfbee2328c9e2644f723014610e707cc9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/835e2e632b6a7f9e008665bca66f910f98f2725c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtUACgkQV/+b28ww\nEAnsAA/9FObAGuZkEWHR6egrFs9krpab7v3YlCRIwOVObK0i0giSC+zcasnQOXgB\nABM4HCk5WwpLcz/N/v0gm6mZ79jii16r2iKcafyD7sYyWiHiP8ejrzNRE5fpPHDL\nNB9Se+fqJQsRfssjTNRp7KkJOLRujp+2QtuRnSRwqoeuQFRXfKJ7NUiHrdYzxFHe\npHoWCvNGkWi/pzIxFjcxKdvjB2cEi4r/h8xKUtZHrpxkZkmLeHsh7pKpP2BHWw32\n2zRikUBxgSEqIwiSi72YtnbsmvY/U9cXKhpO/U48guuv/9qPm1C/LRAtjyROtane\ntmKxvc1TwLKqjx8FLlbgvnsc7hUQ4NQhg0Fa9qwWpBO45+6MnUE6Nj8KmrUnJcWM\nTxZMO2iFwYrSta7LD/DqAwWxozEHvD3vdiTe4S8hokah9Br04/NRlGBOP0e6V8rz\nIxOVxV6wQ6SfGujk5dYHssXXPTDnSCxMiqKB1p3zAw4yYTdHiENyPDPE8pnePhSK\nXtqAkNayzOzjLRPaS41y33EdowDYbxj8WQinc0mUsTt8TkhhJaUcOjk55+C9CEh/\n1Upp8MLmYgqxIyOaQPhFWm2dzsscP6b58e9U0Jz8Ylkl0/5BB5QDnEoKZiw8N7AN\nvZ9YWHoW19SH3seNsVH4vIoVePhIy/l2MbIGY/5Aps92NEIWCwk=\n=oQHp\n-----END PGP SIGNATURE-----",
        "payload": "tree cb62eabfbee2328c9e2644f723014610e707cc9b\nparent 68b9b132b74243c961635f9d935d4e2b1faacd3c\nauthor Sjors Provoost <sjors@sprovoost.nl> 1564934177 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407509 +0100\n\n[rpc] add external_signer option to createwallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/835e2e632b6a7f9e008665bca66f910f98f2725c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/835e2e632b6a7f9e008665bca66f910f98f2725c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/835e2e632b6a7f9e008665bca66f910f98f2725c/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68b9b132b74243c961635f9d935d4e2b1faacd3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68b9b132b74243c961635f9d935d4e2b1faacd3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68b9b132b74243c961635f9d935d4e2b1faacd3c"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 16,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b44c8cec573483f7bbf5a58104d95905009578a3",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835e2e632b6a7f9e008665bca66f910f98f2725c/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835e2e632b6a7f9e008665bca66f910f98f2725c/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=835e2e632b6a7f9e008665bca66f910f98f2725c",
        "patch": "@@ -171,6 +171,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createwallet\", 2, \"blank\"},\n     { \"createwallet\", 4, \"avoid_reuse\"},\n     { \"createwallet\", 5, \"descriptors\"},\n+    { \"createwallet\", 6, \"external_signer\"},\n     { \"getnodeaddresses\", 0, \"count\"},\n     { \"stop\", 0, \"wait\" },\n };"
      },
      {
        "sha": "fac15642bb1efaa721aa1abf12bbfdaa702b9890",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835e2e632b6a7f9e008665bca66f910f98f2725c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835e2e632b6a7f9e008665bca66f910f98f2725c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=835e2e632b6a7f9e008665bca66f910f98f2725c",
        "patch": "@@ -2694,6 +2694,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Encrypt the wallet with this passphrase.\"},\n             {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"false\", \"Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind.\"},\n             {\"descriptors\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a native descriptor wallet. The wallet will use descriptors internally to handle address creation\"},\n+            {\"external_signer\", RPCArg::Type::BOOL, /* default */ \"false\", \"Use an external signer such as a hardware wallet. Requires -signer to be configured. Wallet creation will fail if keys cannot be fetched. Requires disable_private_keys and descriptors set to true.\"},\n         },\n         RPCResult{\n             \"{\\n\"\n@@ -2732,6 +2733,13 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     if (!request.params[5].isNull() && request.params[5].get_bool()) {\n         flags |= WALLET_FLAG_DESCRIPTORS;\n     }\n+    if (!request.params[6].isNull() && request.params[6].get_bool()) {\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+        flags |= WALLET_FLAG_EXTERNAL_SIGNER;\n+#else\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Configure with --enable-external-signer to use this\");\n+#endif\n+    }\n \n     std::string error;\n     std::shared_ptr<CWallet> wallet;\n@@ -4274,7 +4282,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"label\",\"address_type\"} },\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n-    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\", \"passphrase\", \"avoid_reuse\", \"descriptors\"} },\n+    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\", \"passphrase\", \"avoid_reuse\", \"descriptors\", \"external_signer\"} },\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },"
      },
      {
        "sha": "cab1e241f254b68b5ade988248f6c3b6c40309e5",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835e2e632b6a7f9e008665bca66f910f98f2725c/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835e2e632b6a7f9e008665bca66f910f98f2725c/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=835e2e632b6a7f9e008665bca66f910f98f2725c",
        "patch": "@@ -65,8 +65,12 @@ def run_test(self):\n         )\n         self.clear_mock_result(self.nodes[1])\n \n-        # Create new wallets with private keys disabled:\n-        self.nodes[1].createwallet(wallet_name='hww', disable_private_keys=True, descriptors=True)\n+        # Create new wallets for an external signer.\n+        # disable_private_keys and descriptors must be true:\n+        assert_raises_rpc_error(-4, \"Private keys must be disabled when using an external signer\", self.nodes[1].createwallet, wallet_name='not_hww', disable_private_keys=False, descriptors=True, external_signer=True)\n+        assert_raises_rpc_error(-4, \"Descriptor support must be enabled when using an external signer\", self.nodes[1].createwallet, wallet_name='not_hww', disable_private_keys=True, descriptors=False, external_signer=True)\n+\n+        self.nodes[1].createwallet(wallet_name='hww', disable_private_keys=True, descriptors=True, external_signer=True)\n         hww = self.nodes[1].get_wallet_rpc('hww')\n \n         result = hww.enumeratesigners()"
      }
    ]
  },
  {
    "sha": "d0f3a5adf18031c65dd71d249a9aff34df2413ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGYzYTVhZGYxODAzMWM2NWRkNzFkMjQ5YTlhZmYzNGRmMjQxM2Fl",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T15:56:39Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:09Z"
      },
      "message": "[test] external_signer wallet flag is immutable",
      "tree": {
        "sha": "8037f16bc4715137d44a876e1507f901792f8d72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8037f16bc4715137d44a876e1507f901792f8d72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0f3a5adf18031c65dd71d249a9aff34df2413ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtUACgkQV/+b28ww\nEAk4HhAAijOrfahuuuYKFSitWVzMe36Ta8lezCVLlV7ZGAloOaTejkMpjQEGIB0C\nVXYbc19q9t/efTkCS3mApxGxdSxjuGO3Mmu4+by0f2fDAGF8HVyWcVPsXnTI3Zh5\nE5BR3n7aZtlELNeKoFBxmEdRRnbkGn1H58o/9nL0HIk/+sSEvXc8RG2+2uQnK/xR\nziTCnYYb1OtTCcbVy+sXOlDbtD9RJtgV7uEQMcG5AwbcEXnt4Mp9520SNeroIRvc\nBfAi6XZMivQCaNSAZIEYRvFgvrY/tPg4ZTW7Z0CN0PWyzXPiyaM2ItM4SVdv3yru\nsslaYoiWqup2n0zifO0K0FuYOVCddCGThtKipQgDJUoLpuHsVD3cPxii+717FaAZ\nSczH1pYGGZOQaEZ8kaiRgSPVJqCsUDR9b8XZ1uIbPSCYkzQ/CjwS1Ncv4VURpf0g\neLjhP54G1E4TwD6hRR1WjyfVDHpDbNn9ao2ymOsM0F2E7LNaxyr+jHsPNlnteQ4n\nJsmtbJdu4t7pYhZV2aOrx53LJMvPxf9lGniv5FJLCzwbOWOZ61f51YhMwfeBw2jE\ncE1iYqt47qJYtKRIvl1/gimLj5VqwBycG42D1w4tj3emP6H7+1gSLrAxy2jmhwIB\nYJ2HbHuLXXTKr/VYdIC8CkMyG1HxKwcyoslB6OiA3TFQdBHRN8w=\n=4ZCa\n-----END PGP SIGNATURE-----",
        "payload": "tree 8037f16bc4715137d44a876e1507f901792f8d72\nparent 835e2e632b6a7f9e008665bca66f910f98f2725c\nauthor Sjors Provoost <sjors@sprovoost.nl> 1564934199 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407509 +0100\n\n[test] external_signer wallet flag is immutable\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0f3a5adf18031c65dd71d249a9aff34df2413ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0f3a5adf18031c65dd71d249a9aff34df2413ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0f3a5adf18031c65dd71d249a9aff34df2413ae/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "835e2e632b6a7f9e008665bca66f910f98f2725c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/835e2e632b6a7f9e008665bca66f910f98f2725c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/835e2e632b6a7f9e008665bca66f910f98f2725c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0dfa86b430bd024879a8b46ef655c7c243a1c45d",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0f3a5adf18031c65dd71d249a9aff34df2413ae/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0f3a5adf18031c65dd71d249a9aff34df2413ae/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=d0f3a5adf18031c65dd71d249a9aff34df2413ae",
        "patch": "@@ -78,5 +78,10 @@ def run_test(self):\n         assert_equal(result['signers'][0][\"fingerprint\"], \"00000001\")\n         assert_equal(result['signers'][0][\"name\"], \"trezor_t\")\n \n+        # Flag can't be set afterwards (could be added later for non-blank descriptor based watch-only wallets)\n+        self.nodes[1].createwallet(wallet_name='not_hww', disable_private_keys=True, descriptors=True, external_signer=False)\n+        not_hww = self.nodes[1].get_wallet_rpc('not_hww')\n+        assert_raises_rpc_error(-8, \"Wallet flag is immutable: external_signer\", not_hww.setwalletflag, \"external_signer\", True)\n+\n if __name__ == '__main__':\n     SignerTest().main()"
      }
    ]
  },
  {
    "sha": "76112ba00e9e5801fc38e42b28006ddab5cef498",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjExMmJhMDBlOWU1ODAxZmMzOGU0MmIyODAwNmRkYWI1Y2VmNDk4",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-09T16:07:47Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:09Z"
      },
      "message": "[wallet] ExternalSigner: add getDescriptors method",
      "tree": {
        "sha": "23fa48e11c1a3d0feeb919604aa41c28756e32ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23fa48e11c1a3d0feeb919604aa41c28756e32ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76112ba00e9e5801fc38e42b28006ddab5cef498",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtUACgkQV/+b28ww\nEAmeHw/+JMPGaababXGK5sUuMa1wZ0N60UjQnRYPAsZEGBSYP+pzGNv0dW6zSUwN\nnX0DgCRaFIU5m/tzPy69kXCxaXqMS0FnnSyyoQjgPw90CXJeU7EjpqNkTNuC9Uhw\nr6S2lOsG8DPCQ17OY2b6MHn2CsD/Z0MxjtJERWUpMXoPCUIO6GK14v0Igvx8gIzq\n4t/n5Hdj8DR3zBUWIY8G8hEIagVZOslU4HiWuZPDvSoAPKMIICs1kqae9MEnnrw5\nJvaN5HWqdeVotC0QmVvUVfT0HHJE7iR8bOyWbBGVsZXHPB5OlNj2U2Mgd4cXGhl0\n3P9ZYW/bjyLEKQxGy6IU1keg2nxKHA/HYgVBNy8d0PYvNMIU55iu343ad/51J9td\nQm2r7O3YmWPKqUvSZxBkqjTjtCwPT2+Ct0utYgb9cRc+FDK/7OoJwCjrC3FtpHzh\nqaC0DgQ/+23XYBZxN+iuHXU0fyUBAyB95TOwn8CLEhWPmFL3Ox+I7WGcZB3WEjUH\n2dTxSVeA0frjlqkgcXEdomRtVosYal9V9OJ4gdRcuMqDwcxV8iwcVK+H+KQplV2d\neMtI/yLcCd5hq/IP7U5+Lk4DqSfBMpjO17yBfABsj7SrZbzxi1Mx1HslSLOS8oea\n6Uf/yztiiAWQfmiIZ/zSDki2idyGnAiFrx0j5oTS0OdRODuEz3c=\n=+T6z\n-----END PGP SIGNATURE-----",
        "payload": "tree 23fa48e11c1a3d0feeb919604aa41c28756e32ed\nparent d0f3a5adf18031c65dd71d249a9aff34df2413ae\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552147667 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407509 +0100\n\n[wallet] ExternalSigner: add getDescriptors method\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76112ba00e9e5801fc38e42b28006ddab5cef498",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76112ba00e9e5801fc38e42b28006ddab5cef498",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76112ba00e9e5801fc38e42b28006ddab5cef498/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0f3a5adf18031c65dd71d249a9aff34df2413ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0f3a5adf18031c65dd71d249a9aff34df2413ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0f3a5adf18031c65dd71d249a9aff34df2413ae"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0073be2824fc01961e89623dcf86e020c4ef2f2a",
        "filename": "src/wallet/externalsigner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76112ba00e9e5801fc38e42b28006ddab5cef498/src/wallet/externalsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76112ba00e9e5801fc38e42b28006ddab5cef498/src/wallet/externalsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.cpp?ref=76112ba00e9e5801fc38e42b28006ddab5cef498",
        "patch": "@@ -39,4 +39,9 @@ bool ExternalSigner::Enumerate(const std::string& command, std::vector<ExternalS\n     return true;\n }\n \n+UniValue ExternalSigner::getDescriptors(int account)\n+{\n+    return runCommandParseJSON(m_command + \" --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + (m_mainnet ? \"\" : \" --testnet \") + \" getdescriptors --account \" + strprintf(\"%d\", account));\n+}\n+\n #endif"
      },
      {
        "sha": "91154e96ab6b88a6fd8d105a55a1e06fbc21eba1",
        "filename": "src/wallet/externalsigner.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76112ba00e9e5801fc38e42b28006ddab5cef498/src/wallet/externalsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76112ba00e9e5801fc38e42b28006ddab5cef498/src/wallet/externalsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.h?ref=76112ba00e9e5801fc38e42b28006ddab5cef498",
        "patch": "@@ -46,6 +46,12 @@ class ExternalSigner\n     //! @param[out] success     Boolean\n     static bool Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, bool mainnet = true, bool ignore_errors = false);\n \n+    //! Get receive and change Descriptor(s) from device for a given account.\n+    //! Calls `<command> getdescriptors --account <account>`\n+    //! @param[in] account  which BIP32 account to use (e.g. `m/44'/0'/account'`)\n+    //! @param[out] UniValue see doc/external-signer.md\n+    UniValue getDescriptors(int account);\n+\n #endif\n };\n "
      }
    ]
  },
  {
    "sha": "1905c6c44d18c3295dcc239f23c80f62f7bb8b86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTA1YzZjNDRkMThjMzI5NWRjYzIzOWYyM2M4MGY2MmY3YmI4Yjg2",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-31T09:27:27Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:09Z"
      },
      "message": "[wallet] add GetExternalSigner()",
      "tree": {
        "sha": "44d85ff54aa323dafddc3718708b6e4429fc19d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44d85ff54aa323dafddc3718708b6e4429fc19d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1905c6c44d18c3295dcc239f23c80f62f7bb8b86",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtUACgkQV/+b28ww\nEAnWOhAAqs0A4g6XeAXfGs49XmYAfdznO47a7ErBMTTNgSlrSVMCYawq8OfICWcz\nNFidoBh2TAUtmFLfHa8qi5M+z9UbXmSvJJhaA7hH4CI+V966MpO6Llao2JgYjYU4\nopdyd2ilRs156MJiaJbRoAhBbxNP1Z4vJW5wcWRFOZxj9YCkVDaoQmXVfvMg6FmR\njgWcQ/joW9ast57h1ClJHy5OLzgpysPlTyKsr0RVIMH2wYdUmUAHB1NfzNxu6mKf\neRIlA8O12xSnBIjo//zhXfEDcB8VpfleylguijN4ASm6KLl7tD8JCSABI9dHeeQ8\nfY373LQ2ed/f7IqXvaRmErMfaDKzc6uwhGgVD6GXMdi/1DCqSLuUYqJykui0bBtr\nRxbha/cWzzMzQKeqaS7YR2dg/eaubpm7FY47VTQRznRk/oEBZhpH9hNZNnyFY48g\nV7lFy2l0/J3orZ0BWX+SdtDfq/CrPz6B/kp/GijuxT6NJ3g3p1bq5TIgIOgfN7CV\nyrLebTj//0mnptV6W3DlxAM8OHImXuIyZ/N3KMzTFZlOj/AgAdnJdUtRdHg40IpG\nZIHghqXBuLclI09mjGeLLwSl6mMEx08l5f7vor+wwdZjOfR0TVjDfAoUvrTUXafs\n6013fsjuhuIoNLGjGh0A4mpuNQO9pkNft0KRFGh+h3+rG0zc9Es=\n=QvoZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 44d85ff54aa323dafddc3718708b6e4429fc19d8\nparent 76112ba00e9e5801fc38e42b28006ddab5cef498\nauthor Sjors Provoost <sjors@sprovoost.nl> 1572514047 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407509 +0100\n\n[wallet] add GetExternalSigner()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1905c6c44d18c3295dcc239f23c80f62f7bb8b86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1905c6c44d18c3295dcc239f23c80f62f7bb8b86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1905c6c44d18c3295dcc239f23c80f62f7bb8b86/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76112ba00e9e5801fc38e42b28006ddab5cef498",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76112ba00e9e5801fc38e42b28006ddab5cef498",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76112ba00e9e5801fc38e42b28006ddab5cef498"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7163fa48f40ef42e809ad334a1c884cceb431c1e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1905c6c44d18c3295dcc239f23c80f62f7bb8b86/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1905c6c44d18c3295dcc239f23c80f62f7bb8b86/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1905c6c44d18c3295dcc239f23c80f62f7bb8b86",
        "patch": "@@ -3400,6 +3400,21 @@ void ReserveDestination::ReturnDestination()\n     address = CNoDestination();\n }\n \n+#ifdef ENABLE_EXTERNAL_SIGNER\n+ExternalSigner CWallet::GetExternalSigner() {\n+    const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n+    if (command == \"\") throw std::runtime_error(std::string(__func__) + \": restart bitcoind with -signer=<cmd>\");\n+\n+    std::string chain = gArgs.GetChainName();\n+    const bool mainnet = chain == CBaseChainParams::MAIN;\n+    std::vector<ExternalSigner> signers;\n+    ExternalSigner::Enumerate(command, signers, mainnet);\n+    if (signers.empty()) throw std::runtime_error(std::string(__func__) + \": No external signers found\");\n+    // TODO: add fingerprint argument in case of multiple signers\n+    return signers[0];\n+}\n+#endif\n+\n void CWallet::LockCoin(const COutPoint& output)\n {\n     AssertLockHeld(cs_wallet);"
      },
      {
        "sha": "db00134f0af724940655a12523fd725f9d4b8961",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1905c6c44d18c3295dcc239f23c80f62f7bb8b86/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1905c6c44d18c3295dcc239f23c80f62f7bb8b86/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1905c6c44d18c3295dcc239f23c80f62f7bb8b86",
        "patch": "@@ -828,6 +828,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const;\n \n+#ifdef ENABLE_EXTERNAL_SIGNER\n+    ExternalSigner GetExternalSigner() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+#endif\n     bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void LockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void UnlockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      }
    ]
  },
  {
    "sha": "b114902f4ff53b69ab8a6b0e81f703f57523e7d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTE0OTAyZjRmZjUzYjY5YWI4YTZiMGU4MWY3MDNmNTc1MjNlN2Qw",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-31T09:27:47Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:10Z"
      },
      "message": "[wallet] fetch keys from external signer upon creation",
      "tree": {
        "sha": "77918327860034da2c0a966052b4f96742ea36e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77918327860034da2c0a966052b4f96742ea36e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b114902f4ff53b69ab8a6b0e81f703f57523e7d0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtYACgkQV/+b28ww\nEAna/Q/+N0ikIzjPCpw7Re76/Fk91Qb4d0nV9FW5MG6Hw/jbCAFgdbpVfqU0+eMu\nE8w0iaG09OTCxSyNyLDAPBQYgPC7A7516iNJ+miDxXrOHfyzou/z9DK6mHMJ0164\n6DuVj2yPuztoh8lVGYoeI5huWzAvkdtGMIwdZAY1SBgk2E7VM0Y1u4Q4+cTBS/Nr\nOMgYAKkaDWjWMrJVQhK/Ulr27rA1Q6/08RyaX7Dy5RYm/X6aPG7055/ukI4Jph6X\neakCOckOZgMTmQ0z8WFcXZw9TOeahvyTCkSDQHW01FIaUVGeF3EJcjG/WeSGhb0S\ni43CWYypqjOUqM1E8RIJeCwuh5OwDoVyB6V6s9ioSDCb31nl5o8L252FafBZP9hh\n6NFcY7bmkuJ/ofuWwCq8RH9mkSY1OrEFdvUSe1qYaxmENoa+zGrVo1m8OE8mq6JL\n6UvN+wvvSoQmRPD4sfrx/LrY0AV63HgGbwZ2KHOsCn4ul3kwSlrU9fs8RyoO1BAv\ng/d0YeW+MQs8vvuBPk9RMDYUhGlNmNjDQKpTINjy6kco0iVWF1X/1wuYBfoSI/+l\nY42UYceL5jzcDd7KtaTNqphCqI3Q5xx0EMQpb+6KtIM9iuzZW0bLiSC81nLI50Ea\njO912vwgoNyquLXXVxyqf0wkBA8wi9m/zzsVsZeBGgojZcsNZ7U=\n=jH8a\n-----END PGP SIGNATURE-----",
        "payload": "tree 77918327860034da2c0a966052b4f96742ea36e9\nparent 1905c6c44d18c3295dcc239f23c80f62f7bb8b86\nauthor Sjors Provoost <sjors@sprovoost.nl> 1572514067 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407510 +0100\n\n[wallet] fetch keys from external signer upon creation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b114902f4ff53b69ab8a6b0e81f703f57523e7d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b114902f4ff53b69ab8a6b0e81f703f57523e7d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b114902f4ff53b69ab8a6b0e81f703f57523e7d0/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1905c6c44d18c3295dcc239f23c80f62f7bb8b86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1905c6c44d18c3295dcc239f23c80f62f7bb8b86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1905c6c44d18c3295dcc239f23c80f62f7bb8b86"
      }
    ],
    "stats": {
      "total": 153,
      "additions": 140,
      "deletions": 13
    },
    "files": [
      {
        "sha": "381eb31783a64e66e14259215706a52418a8cf26",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b114902f4ff53b69ab8a6b0e81f703f57523e7d0/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b114902f4ff53b69ab8a6b0e81f703f57523e7d0/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=b114902f4ff53b69ab8a6b0e81f703f57523e7d0",
        "patch": "@@ -1715,6 +1715,31 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n+bool DescriptorScriptPubKeyMan::SetupDescriptor(std::unique_ptr<Descriptor> desc)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER));\n+\n+    int64_t creation_time = GetTime();\n+\n+    // Make the descriptor\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    descriptor = w_desc;\n+\n+    // Store the descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!batch.WriteDescriptor(GetID(), descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n bool DescriptorScriptPubKeyMan::SetupGeneration(bool force)\n {\n     LOCK(cs_desc_man);"
      },
      {
        "sha": "74ed5e5d813d97747f32f2037193bcac2663cdda",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b114902f4ff53b69ab8a6b0e81f703f57523e7d0/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b114902f4ff53b69ab8a6b0e81f703f57523e7d0/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=b114902f4ff53b69ab8a6b0e81f703f57523e7d0",
        "patch": "@@ -522,6 +522,11 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool SetupGeneration(bool force = false) override;\n \n+    /** Provide a descriptor at setup time\n+    * Returns false if already setup or setup fails, true if setup is successful\n+    */\n+    bool SetupDescriptor(std::unique_ptr<Descriptor>desc);\n+\n     bool HavePrivateKeys() const override;\n \n     int64_t GetOldestKeyPoolTime() override;"
      },
      {
        "sha": "6c38bbd18be0784e9dfd45c2b33ca025fe7b757a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 13,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b114902f4ff53b69ab8a6b0e81f703f57523e7d0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b114902f4ff53b69ab8a6b0e81f703f57523e7d0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b114902f4ff53b69ab8a6b0e81f703f57523e7d0",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <wallet/wallet.h>\n \n+#include <addresstype.h>\n #include <chain.h>\n #include <consensus/consensus.h>\n #include <consensus/validation.h>\n@@ -13,6 +14,7 @@\n #include <interfaces/wallet.h>\n #include <key.h>\n #include <key_io.h>\n+#include <outputtype.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <primitives/block.h>\n@@ -3773,7 +3775,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             walletInstance->SetupLegacyScriptPubKeyMan();\n         }\n \n-        if (!(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n+        if ((wallet_creation_flags & WALLET_FLAG_EXTERNAL_SIGNER) || !(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n             LOCK(walletInstance->cs_wallet);\n             if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n                 walletInstance->SetupDescriptorScriptPubKeyMans();\n@@ -4282,22 +4284,62 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n {\n     AssertLockHeld(cs_wallet);\n \n-    for (bool internal : {false, true}) {\n-        for (OutputType t : OUTPUT_TYPES) {\n-            auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, t, internal));\n-            if (IsCrypted()) {\n-                if (IsLocked()) {\n-                    throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+    if (!IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER)) {\n+\n+        for (bool internal : {false, true}) {\n+            for (OutputType t : OUTPUT_TYPES) {\n+                auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, t, internal));\n+                if (IsCrypted()) {\n+                    if (IsLocked()) {\n+                        throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+                    }\n+                    if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {\n+                        throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n+                    }\n                 }\n-                if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {\n-                    throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n+                spk_manager->SetupGeneration();\n+                uint256 id = spk_manager->GetID();\n+                m_spk_managers[id] = std::move(spk_manager);\n+                SetActiveScriptPubKeyMan(id, t, internal);\n+            }\n+        }\n+    } else {\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+        ExternalSigner signer = GetExternalSigner();\n+\n+        // TODO: add account parameter\n+        int account = 0;\n+        UniValue signer_res = signer.getDescriptors(account);\n+\n+        if (!signer_res.isObject()) throw std::runtime_error(std::string(__func__) + \": Unexpect result\");\n+        for (bool internal : {false, true}) {\n+            const UniValue& descriptor_vals = find_value(signer_res, internal ? \"internal\" : \"receive\");\n+            if (!descriptor_vals.isArray()) throw std::runtime_error(std::string(__func__) + \": Unexpect result\");\n+            for (const UniValue& desc_val : descriptor_vals.get_array().getValues()) {\n+                std::string desc_str = desc_val.getValStr();\n+                FlatSigningProvider keys;\n+                std::string dummy_error;\n+                std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, dummy_error, false);\n+\n+                // TODO: don't assume OutputType based on just this\n+                OutputType t;\n+                if (!desc->IsSegWit()) {\n+                    t = OutputType::LEGACY;\n+                } else if (desc->GetAddressType() == AddressType::BASE58) {\n+                    t = OutputType::P2SH_SEGWIT;\n+                } else {\n+                    t = OutputType::BECH32;\n                 }\n+                auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, t, internal));\n+                spk_manager->SetupDescriptor(std::move(desc));\n+                uint256 id = spk_manager->GetID();\n+                m_spk_managers[id] = std::move(spk_manager);\n+                SetActiveScriptPubKeyMan(id, t, internal);\n             }\n-            spk_manager->SetupGeneration();\n-            uint256 id = spk_manager->GetID();\n-            m_spk_managers[id] = std::move(spk_manager);\n-            SetActiveScriptPubKeyMan(id, t, internal);\n         }\n+#else\n+        throw std::runtime_error(std::string(__func__) + \": Wallets with external signers require Boost::System library.\");\n+#endif\n     }\n }\n "
      },
      {
        "sha": "16971658e5b6b2d2259a8f8ecd9b22d0783174f7",
        "filename": "test/functional/mocks/signer.py",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b114902f4ff53b69ab8a6b0e81f703f57523e7d0/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b114902f4ff53b69ab8a6b0e81f703f57523e7d0/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=b114902f4ff53b69ab8a6b0e81f703f57523e7d0",
        "patch": "@@ -20,12 +20,35 @@ def perform_pre_checks():\n def enumerate(args):\n   sys.stdout.write(json.dumps([{\"fingerprint\": \"00000001\", \"type\": \"trezor\", \"model\": \"trezor_t\"}, {\"fingerprint\": \"00000002\"}]))\n \n+def getdescriptors(args):\n+    xpub = \"tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B\"\n+\n+    sys.stdout.write(json.dumps({\n+        \"receive\": [\n+            \"pkh([00000001/44'/1'/\" + args.account + \"']\" + xpub + \"/0/*)#vt6w3l3j\",\n+            \"sh(wpkh([00000001/49'/1'/\" + args.account + \"']\" + xpub + \"/0/*))#r0grqw5x\",\n+            \"wpkh([00000001/84'/1'/\" + args.account + \"']\" + xpub + \"/0/*)#x30uthjs\"\n+        ],\n+        \"internal\": [\n+            \"pkh([00000001/44'/1'/\" + args.account + \"']\" + xpub + \"/1/*)#all0v2p2\",\n+            \"sh(wpkh([00000001/49'/1'/\" + args.account + \"']\" + xpub + \"/1/*))#kwx4c3pe\",\n+            \"wpkh([00000001/84'/1'/\" + args.account + \"']\" + xpub + \"/1/*)#h92akzzg\"\n+        ]\n+    }))\n+\n+\n parser = argparse.ArgumentParser(prog='./signer.py', description='External signer mock')\n+parser.add_argument('--fingerprint')\n+parser.add_argument('--testnet', action='store_true')\n subparsers = parser.add_subparsers()\n \n parser_enumerate = subparsers.add_parser('enumerate', help='list available signers')\n parser_enumerate.set_defaults(func=enumerate)\n \n+parser_getdescriptors = subparsers.add_parser('getdescriptors')\n+parser_getdescriptors.set_defaults(func=getdescriptors)\n+parser_getdescriptors.add_argument('--account', metavar='account')\n+\n if len(sys.argv) == 1:\n   args = parser.parse_args(['-h'])\n   exit()"
      },
      {
        "sha": "5079b77775702dd92096e6f401abe92104bff181",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b114902f4ff53b69ab8a6b0e81f703f57523e7d0/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b114902f4ff53b69ab8a6b0e81f703f57523e7d0/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=b114902f4ff53b69ab8a6b0e81f703f57523e7d0",
        "patch": "@@ -83,5 +83,37 @@ def run_test(self):\n         not_hww = self.nodes[1].get_wallet_rpc('not_hww')\n         assert_raises_rpc_error(-8, \"Wallet flag is immutable: external_signer\", not_hww.setwalletflag, \"external_signer\", True)\n \n+        # assert_raises_rpc_error(-4, \"Multiple signers found, please specify which to use\", wallet_name='not_hww', disable_private_keys=True, descriptors=True, external_signer=True)\n+\n+        # TODO: Handle error thrown by script\n+        # self.set_mock_result(self.nodes[1], \"2\")\n+        # assert_raises_rpc_error(-1, 'Unable to parse JSON',\n+        #     self.nodes[1].createwallet, wallet_name='not_hww2', disable_private_keys=True, descriptors=True, external_signer=False\n+        # )\n+        # self.clear_mock_result(self.nodes[1])\n+\n+        assert_equal(hww.getwalletinfo()[\"keypoolsize\"], 3)\n+\n+        address1 = hww.getnewaddress(address_type=\"bech32\")\n+        assert_equal(address1, \"bcrt1qm90ugl4d48jv8n6e5t9ln6t9zlpm5th68x4f8g\")\n+        address_info = hww.getaddressinfo(address1)\n+        assert_equal(address_info['solvable'], True)\n+        assert_equal(address_info['ismine'], True)\n+        assert_equal(address_info['hdkeypath'], \"m/84'/1'/0'/0/0\")\n+\n+        address2 = hww.getnewaddress(address_type=\"p2sh-segwit\")\n+        assert_equal(address2, \"2N2gQKzjUe47gM8p1JZxaAkTcoHPXV6YyVp\")\n+        address_info = hww.getaddressinfo(address2)\n+        assert_equal(address_info['solvable'], True)\n+        assert_equal(address_info['ismine'], True)\n+        assert_equal(address_info['hdkeypath'], \"m/49'/1'/0'/0/0\")\n+\n+        address3 = hww.getnewaddress(address_type=\"legacy\")\n+        assert_equal(address3, \"n1LKejAadN6hg2FrBXoU1KrwX4uK16mco9\")\n+        address_info = hww.getaddressinfo(address3)\n+        assert_equal(address_info['solvable'], True)\n+        assert_equal(address_info['ismine'], True)\n+        assert_equal(address_info['hdkeypath'], \"m/44'/1'/0'/0/0\")\n+\n if __name__ == '__main__':\n     SignerTest().main()"
      }
    ]
  },
  {
    "sha": "08ffaef4aa38ad4a5b34da682e32b1c429c27b9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGZmYWVmNGFhMzhhZDRhNWIzNGRhNjgyZTMyYjFjNDI5YzI3Yjlm",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:30Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:10Z"
      },
      "message": "Add Fingerprint() to Descriptor",
      "tree": {
        "sha": "a25217625fe49eb51d30c5f4782f20e0a270df7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a25217625fe49eb51d30c5f4782f20e0a270df7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08ffaef4aa38ad4a5b34da682e32b1c429c27b9f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtYACgkQV/+b28ww\nEAnLAw/+Jk6vDFeYdmHuEr+G0kzKxWL4f3DU2vHqWkCY+hXm7vZUA77lq73VuV3v\n0pAwuYiyCJImVKkgmQCuq6ZsZDAqO5LkzuDXbFzoN9I0/zOW6paV35hICRfIJBlq\n5n04EOrjJK1uTAFAfT8c3odwvwT1Vahcp4f4t03TpYILPHiJruL1omu4xbddXhWt\nbcZcZ9UY3Z7FZR4uEaRD/yK0w3paoH+6Ndw6avvOr+NPRrQE9BRMFhqxi7nTmvN0\n3wrCY+SinKuiYsgRTWAVKl2IL5wHVexzXuOuTU9JEIUorcXnRjQH5/U2V55LyWGH\na9v4k2jTu93slR8v18xRKdQ/c2r7m3MudnLQRguaJwD5YleI1MX9hrDu0TrASomv\na/mxE86iXlNsjQsKc23QyLY757mBvm8dXMOU2V61GDg8xUCqnPhsVZaJxFstDSz+\nWzUTDXIYu5kaW6VvBAeg7FzxL6WdZr0s68azU8KdMwfz4h6v1dkkz+NwoJzxApVb\nUHEmLGbBDDSTS1u6K+sfU/Ht9sZ7reUTA3i6GDefmh79xiZsKd3IUV49rsMV5P1s\n3MTQO9hDXPX3W/NCjeOrnQTKHVw+w5kStRLwrvMpBkKBVzqROYVZPEBMobSsCxes\n57HOWHid7t+o/wy8mtV6C3wCFQz/FShndXv2CduMTm/PMACPztw=\n=pKcd\n-----END PGP SIGNATURE-----",
        "payload": "tree a25217625fe49eb51d30c5f4782f20e0a270df7a\nparent b114902f4ff53b69ab8a6b0e81f703f57523e7d0\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231670 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407510 +0100\n\nAdd Fingerprint() to Descriptor\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08ffaef4aa38ad4a5b34da682e32b1c429c27b9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08ffaef4aa38ad4a5b34da682e32b1c429c27b9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08ffaef4aa38ad4a5b34da682e32b1c429c27b9f/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b114902f4ff53b69ab8a6b0e81f703f57523e7d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b114902f4ff53b69ab8a6b0e81f703f57523e7d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b114902f4ff53b69ab8a6b0e81f703f57523e7d0"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 25,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fdf4696bbca3c9d9f89e03298f2c19826326e538",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08ffaef4aa38ad4a5b34da682e32b1c429c27b9f/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08ffaef4aa38ad4a5b34da682e32b1c429c27b9f/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=08ffaef4aa38ad4a5b34da682e32b1c429c27b9f",
        "patch": "@@ -164,6 +164,9 @@ struct PubkeyProvider\n     /** Get the descriptor string form. */\n     virtual std::string ToString() const = 0;\n \n+    /** Get the origin fingerprint. */\n+    virtual std::string Fingerprint() const = 0;\n+\n     /** Get the descriptor string form including private data (if available in arg). */\n     virtual bool ToPrivateString(const SigningProvider& arg, std::string& out) const = 0;\n \n@@ -176,9 +179,14 @@ class OriginPubkeyProvider final : public PubkeyProvider\n     KeyOriginInfo m_origin;\n     std::unique_ptr<PubkeyProvider> m_provider;\n \n+    std::string FingerprintString() const\n+    {\n+        return HexStr(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint));\n+    }\n+\n     std::string OriginString() const\n     {\n-        return HexStr(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint)) + FormatHDKeypath(m_origin.path);\n+        return FingerprintString() + FormatHDKeypath(m_origin.path);\n     }\n \n public:\n@@ -193,6 +201,9 @@ class OriginPubkeyProvider final : public PubkeyProvider\n     bool IsRange() const override { return m_provider->IsRange(); }\n     size_t GetSize() const override { return m_provider->GetSize(); }\n     std::string ToString() const override { return \"[\" + OriginString() + \"]\" + m_provider->ToString(); }\n+\n+    std::string Fingerprint() const override { return FingerprintString(); }\n+\n     bool ToPrivateString(const SigningProvider& arg, std::string& ret) const override\n     {\n         std::string sub;\n@@ -223,7 +234,8 @@ class ConstPubkeyProvider final : public PubkeyProvider\n     }\n     bool IsRange() const override { return false; }\n     size_t GetSize() const override { return m_pubkey.size(); }\n-    std::string ToString() const override { return HexStr(m_pubkey.begin(), m_pubkey.end()); }\n+    std::string ToString() const final { return HexStr(m_pubkey.begin(), m_pubkey.end()); }\n+    std::string Fingerprint() const override { return \"\"; }\n     bool ToPrivateString(const SigningProvider& arg, std::string& ret) const override\n     {\n         CKey key;\n@@ -309,6 +321,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         }\n         return ret;\n     }\n+    std::string Fingerprint() const override { return \"\"; }\n     bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n     {\n         CExtKey key;\n@@ -417,6 +430,12 @@ class DescriptorImpl : public Descriptor\n         return AddChecksum(ret);\n     }\n \n+    std::string Fingerprint() const override\n+    {\n+        if (m_pubkey_args.empty()) return \"\";\n+        return m_pubkey_args[0]->Fingerprint();\n+    }\n+\n     bool ToPrivateString(const SigningProvider& arg, std::string& out) const override final\n     {\n         bool ret = ToStringHelper(&arg, out, true);"
      },
      {
        "sha": "886b57ab8d7519bffdc22cc545aefea7b5e281c2",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08ffaef4aa38ad4a5b34da682e32b1c429c27b9f/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08ffaef4aa38ad4a5b34da682e32b1c429c27b9f/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=08ffaef4aa38ad4a5b34da682e32b1c429c27b9f",
        "patch": "@@ -56,6 +56,10 @@ struct Descriptor {\n     /** Whether this descriptor or its sub-descriptors use SegWit. */\n     virtual bool IsSegWit() const = 0;\n \n+    /** Origin fingerprint **/\n+    // Return array (e.g. for multi())\n+    virtual std::string Fingerprint() const = 0;\n+\n     /** Expand a descriptor at a specified position.\n      *\n      * @param[in] pos The position at which to expand the descriptor. If IsRange() is false, this is ignored."
      }
    ]
  },
  {
    "sha": "81ca8ab9faabff814c2a745a5f6c82d824d0310e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWNhOGFiOWZhYWJmZjgxNGMyYTc0NWE1ZjZjODJkODI0ZDAzMTBl",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T20:43:57Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:10Z"
      },
      "message": "[rpc] signerdisplayaddress",
      "tree": {
        "sha": "eaa0bb62fbd635cc032056f4c38796a8989627e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eaa0bb62fbd635cc032056f4c38796a8989627e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81ca8ab9faabff814c2a745a5f6c82d824d0310e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtYACgkQV/+b28ww\nEAkmTxAApRaq3kzxFiKVHbfWdhFABquHKDBTyPqBiI2/9gO9oPY9vmmMc1VLOS6f\nnnW+kINH+65A82MuFpd8W8g5uxRC4CO58d6TwPmiKbIA/7VtZiqDqYXMVuN+cVmd\nQbSVCeNGT84zW+SoqX23oczv0gjzezGgeW6yeszmRwy/JVbNvgDtxFc0IjLbuCBd\nSoGU8Zvux5Z1dFh8U8Jnwcw3gozy033tkCDOU3SaOrjswXzfnxb+WZgOZgSWl85Z\n8kctDCBZL3GzpilKcdBcSFNvxL9xehuq+nTfwOecP0XHgAObj9IHiAnJzEg92/S2\n9eV2AMwGAwnQhGF9+sEmRNuB12zgxIQ1hXKBbyrbxT6jboha4xYX2e1/GjDzXwsR\n6tSPO6KH0u6gPfDnv/JcyMQT4+e9sbGeB2w/hYN2DRpUvz0xjLz2pB3VrXBScbW/\nVMTan7/dtLQjsBLknRlb8PYdPbyQaPhwWNi0GUGnBJThwVo7Nk2U20SytvxVOmrZ\nmJdvYxPbxxmpjNPZwNv5nrryvl5fk0l2JFtyMDV8kzB0qNh31Tfttz7+Ige13TL7\nkPMhPu0IS/MDgxlJovVmnf11e2UHYciyLAns2gRD9Fuh5imbuYuuccpcjawZn/Ph\n8o2VRA0CI9Go2PFfLT8OLYskYbdD/jfAuPmXn5VIGuNdrd0u4NE=\n=6BMF\n-----END PGP SIGNATURE-----",
        "payload": "tree eaa0bb62fbd635cc032056f4c38796a8989627e0\nparent 08ffaef4aa38ad4a5b34da682e32b1c429c27b9f\nauthor Sjors Provoost <sjors@sprovoost.nl> 1564951437 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407510 +0100\n\n[rpc] signerdisplayaddress\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81ca8ab9faabff814c2a745a5f6c82d824d0310e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81ca8ab9faabff814c2a745a5f6c82d824d0310e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81ca8ab9faabff814c2a745a5f6c82d824d0310e/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08ffaef4aa38ad4a5b34da682e32b1c429c27b9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08ffaef4aa38ad4a5b34da682e32b1c429c27b9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08ffaef4aa38ad4a5b34da682e32b1c429c27b9f"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 99,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8d5d575cf67d1e5cf2f99c9bc95f1597a0890774",
        "filename": "src/wallet/externalsigner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81ca8ab9faabff814c2a745a5f6c82d824d0310e/src/wallet/externalsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81ca8ab9faabff814c2a745a5f6c82d824d0310e/src/wallet/externalsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.cpp?ref=81ca8ab9faabff814c2a745a5f6c82d824d0310e",
        "patch": "@@ -39,6 +39,11 @@ bool ExternalSigner::Enumerate(const std::string& command, std::vector<ExternalS\n     return true;\n }\n \n+UniValue ExternalSigner::displayAddress(const std::string& descriptor)\n+{\n+    return runCommandParseJSON(m_command + \" --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + (m_mainnet ? \"\" : \" --testnet \") + \" displayaddress --desc \\\"\" + descriptor + \"\\\"\");\n+}\n+\n UniValue ExternalSigner::getDescriptors(int account)\n {\n     return runCommandParseJSON(m_command + \" --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + (m_mainnet ? \"\" : \" --testnet \") + \" getdescriptors --account \" + strprintf(\"%d\", account));"
      },
      {
        "sha": "d82cc9ae403aeee65782c0518e8f161589202a0b",
        "filename": "src/wallet/externalsigner.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81ca8ab9faabff814c2a745a5f6c82d824d0310e/src/wallet/externalsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81ca8ab9faabff814c2a745a5f6c82d824d0310e/src/wallet/externalsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.h?ref=81ca8ab9faabff814c2a745a5f6c82d824d0310e",
        "patch": "@@ -46,6 +46,11 @@ class ExternalSigner\n     //! @param[out] success     Boolean\n     static bool Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, bool mainnet = true, bool ignore_errors = false);\n \n+    //! Display address on the device. Calls `<command> displayaddress --desc <descriptor>`.\n+    //! @param[in] descriptor Descriptor specifying which address to display.\n+    //!            Must include a public key or xpub, as well as key origin.\n+    UniValue displayAddress(const std::string& descriptor);\n+\n     //! Get receive and change Descriptor(s) from device for a given account.\n     //! Calls `<command> getdescriptors --account <account>`\n     //! @param[in] account  which BIP32 account to use (e.g. `m/44'/0'/account'`)"
      },
      {
        "sha": "05e54b4df653264bad3a74c971df50c0fe56969f",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81ca8ab9faabff814c2a745a5f6c82d824d0310e/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81ca8ab9faabff814c2a745a5f6c82d824d0310e/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=81ca8ab9faabff814c2a745a5f6c82d824d0310e",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparamsbase.h>\n+#include <key_io.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n #include <util/strencodings.h>\n@@ -64,11 +65,52 @@ static UniValue enumeratesigners(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue signerdisplayaddress(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"signerdisplayaddress\",\n+            \"Display address on an external signer for verification.\\n\",\n+                {\n+                    {\"address\",     RPCArg::Type::STR, RPCArg::Optional::NO, /* default_val */ \"\", \"bitcoin address to display\"},\n+                },\n+                RPCResult{\"null\"},\n+                RPCExamples{\"\"}\n+            }.ToString()\n+        );\n+    }\n+\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+    // Make sure the destination is valid\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    if (!pwallet->DisplayAddress(dest)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Failed to display address\");\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"address\", request.params[0].get_str());\n+    return result;\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                                actor (function)                argNames\n     //  --------------------- ------------------------          -----------------------         ----------\n     { \"signer\",             \"enumeratesigners\",                 &enumeratesigners,              {} },\n+    { \"signer\",             \"signerdisplayaddress\",             &signerdisplayaddress,          {\"address\", \"fingerprint\"} },\n };\n // clang-format on\n "
      },
      {
        "sha": "997cd4fa5689917c26b95362a6aaaffaeec079e4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81ca8ab9faabff814c2a745a5f6c82d824d0310e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81ca8ab9faabff814c2a745a5f6c82d824d0310e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=81ca8ab9faabff814c2a745a5f6c82d824d0310e",
        "patch": "@@ -3417,6 +3417,21 @@ ExternalSigner CWallet::GetExternalSigner() {\n }\n #endif\n \n+bool CWallet::DisplayAddress(const CTxDestination& dest)\n+{\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n+    auto descriptor = InferDescriptor(scriptPubKey, *provider);\n+\n+    ExternalSigner signer = GetExternalSigner();\n+    signer.displayAddress(descriptor->ToString());\n+    return true;\n+#else\n+    return false;\n+#endif\n+}\n+\n void CWallet::LockCoin(const COutPoint& output)\n {\n     AssertLockHeld(cs_wallet);"
      },
      {
        "sha": "f327ae061095d27ccd847116a60783dd4c6f3b2f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81ca8ab9faabff814c2a745a5f6c82d824d0310e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81ca8ab9faabff814c2a745a5f6c82d824d0310e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=81ca8ab9faabff814c2a745a5f6c82d824d0310e",
        "patch": "@@ -831,6 +831,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n #ifdef ENABLE_EXTERNAL_SIGNER\n     ExternalSigner GetExternalSigner() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n #endif\n+    /* Display address on an external signer. Returns false if external signer support is not compiled */\n+    bool DisplayAddress(const CTxDestination& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void LockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void UnlockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      },
      {
        "sha": "148cd866bc9273f012d90f065e4901293877b222",
        "filename": "test/functional/mocks/signer.py",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81ca8ab9faabff814c2a745a5f6c82d824d0310e/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81ca8ab9faabff814c2a745a5f6c82d824d0310e/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=81ca8ab9faabff814c2a745a5f6c82d824d0310e",
        "patch": "@@ -37,6 +37,20 @@ def getdescriptors(args):\n     }))\n \n \n+def displayaddress(args):\n+    # Several descriptor formats are acceptable, so allowing for potential\n+    # changes to InferDescriptor:\n+    if args.fingerprint != \"00000001\":\n+        return sys.stdout.write(json.dumps({\"error\": \"Unexpected fingerprint\", \"fingerprint\": args.fingerprint}))\n+\n+    expected_desc = [\n+        \"wpkh([00000001/84'/1'/0'/0/0]02c97dc3f4420402e01a113984311bf4a1b8de376cac0bdcfaf1b3ac81f13433c7)#0yneg42r\"\n+    ]\n+    if args.desc not in expected_desc:\n+        return sys.stdout.write(json.dumps({\"error\": \"Unexpected descriptor\", \"desc\": args.desc}))\n+\n+    return sys.stdout.write(json.dumps({\"address\": \"bcrt1qm90ugl4d48jv8n6e5t9ln6t9zlpm5th68x4f8g\"}))\n+\n parser = argparse.ArgumentParser(prog='./signer.py', description='External signer mock')\n parser.add_argument('--fingerprint')\n parser.add_argument('--testnet', action='store_true')\n@@ -49,6 +63,10 @@ def getdescriptors(args):\n parser_getdescriptors.set_defaults(func=getdescriptors)\n parser_getdescriptors.add_argument('--account', metavar='account')\n \n+parser_displayaddress = subparsers.add_parser('displayaddress', help='display address on signer')\n+parser_displayaddress.add_argument('--desc', metavar='desc')\n+parser_displayaddress.set_defaults(func=displayaddress)\n+\n if len(sys.argv) == 1:\n   args = parser.parse_args(['-h'])\n   exit()"
      },
      {
        "sha": "ffdafe39d39115bfdde348bbc8a4e21e47459c48",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81ca8ab9faabff814c2a745a5f6c82d824d0310e/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81ca8ab9faabff814c2a745a5f6c82d824d0310e/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=81ca8ab9faabff814c2a745a5f6c82d824d0310e",
        "patch": "@@ -115,5 +115,16 @@ def run_test(self):\n         assert_equal(address_info['ismine'], True)\n         assert_equal(address_info['hdkeypath'], \"m/44'/1'/0'/0/0\")\n \n+        self.log.info('Test signerdisplayaddress')\n+        result = hww.signerdisplayaddress(address1)\n+        assert_equal(result, {\"address\": address1})\n+\n+        # Handle error thrown by script\n+        self.set_mock_result(self.nodes[1], \"2\")\n+        assert_raises_rpc_error(-1, 'runCommandParseJSON error',\n+            hww.signerdisplayaddress, address1\n+        )\n+        self.clear_mock_result(self.nodes[1])\n+\n if __name__ == '__main__':\n     SignerTest().main()"
      }
    ]
  },
  {
    "sha": "afa9aafc0cc64304bc254d535f3185b94712775e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmE5YWFmYzBjYzY0MzA0YmMyNTRkNTM1ZjMxODViOTQ3MTI3NzVl",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T21:26:01Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:10Z"
      },
      "message": "[rpc] sendtoaddress and sendmany: support external signer",
      "tree": {
        "sha": "b882d772156e3515973502cf912cb44d5dec20c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b882d772156e3515973502cf912cb44d5dec20c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afa9aafc0cc64304bc254d535f3185b94712775e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtYACgkQV/+b28ww\nEAnNXw/+Ke0rTbvamu1x/TI9kH4ICLmBguMZfCoCKibVYTi38tjZs63UYMtHz1dk\nPPd335RbXyovEJFdhtFbn6FdvckEFK1cv6GjISASf3xomHgvroyLhATesFFjfLLZ\nldmGDuiE80VFkFlpJ/lsqHuVlrUzzWWI4B0Cxzo07+3zRdknVuZYDAT/7aenlQqP\nQ//cK488Rz02iwUFj8SHNiQ2JKJnZQwX6pBr5OktFchLTtFUYHhU7R8Y6HYC2Mr5\nxKC7p6UbeOZVXl5W+1v9XKOWhY3ZyGcz00KOLk7JKsTtc3M0gdYU4kAvP6y9wzoL\nyYM7HWcfFUHUih72bFFHUWQh+Wt+E2mWvQB4PVrzqoR1epl1fmyFfRigPj2gR7tL\n4xUERxh8Y4oMbRgPzdo58YzmCGEmvTupzt8FhljyV9A9K9zWfDQ46sGwM3nQRyYX\nD7c4xe+FEdGdmlX3rzcTGenS1XKtTDvv/yDwwDxmsA4qo7vlXYijTRbpMjEmc1/S\nhKYl4PUlpjohP65QUlzJzfY2zB2wsMQXoxih3r4gWKWiMFEoSZgFp3QB+QDz3tM9\nYLQWJYDGM1M8wxBdHaxWwhogM65k+8ucgsxcskHp6Ans8F+wcNuB6ZQjBRnO+HI7\nTgbXGJoY0c87ljCnMiVVPVhSgB4DDLg1IJR8u2Tjckjucrj9kpA=\n=EGoe\n-----END PGP SIGNATURE-----",
        "payload": "tree b882d772156e3515973502cf912cb44d5dec20c8\nparent 81ca8ab9faabff814c2a745a5f6c82d824d0310e\nauthor Sjors Provoost <sjors@sprovoost.nl> 1564953961 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407510 +0100\n\n[rpc] sendtoaddress and sendmany: support external signer\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afa9aafc0cc64304bc254d535f3185b94712775e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afa9aafc0cc64304bc254d535f3185b94712775e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afa9aafc0cc64304bc254d535f3185b94712775e/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81ca8ab9faabff814c2a745a5f6c82d824d0310e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81ca8ab9faabff814c2a745a5f6c82d824d0310e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81ca8ab9faabff814c2a745a5f6c82d824d0310e"
      }
    ],
    "stats": {
      "total": 243,
      "additions": 225,
      "deletions": 18
    },
    "files": [
      {
        "sha": "3c607e1e26a4746d2a72fb36a28651bfe21bd118",
        "filename": "src/wallet/externalsigner.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afa9aafc0cc64304bc254d535f3185b94712775e/src/wallet/externalsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afa9aafc0cc64304bc254d535f3185b94712775e/src/wallet/externalsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.cpp?ref=afa9aafc0cc64304bc254d535f3185b94712775e",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <core_io.h>\n+#include <psbt.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n #include <wallet/externalsigner.h>\n \n ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint, bool mainnet, std::string name): m_command(command), m_fingerprint(fingerprint), m_mainnet(mainnet), m_name(name) {}\n@@ -49,4 +53,45 @@ UniValue ExternalSigner::getDescriptors(int account)\n     return runCommandParseJSON(m_command + \" --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + (m_mainnet ? \"\" : \" --testnet \") + \" getdescriptors --account \" + strprintf(\"%d\", account));\n }\n \n+bool ExternalSigner::signTransaction(PartiallySignedTransaction& psbtx, std::string& error)\n+{\n+    // Check if signer fingerpint matches any input master key fingerprint\n+    bool match = false;\n+    for (unsigned int i = 0; i < psbtx.inputs.size(); ++i) {\n+        const PSBTInput& input = psbtx.inputs[i];\n+        for (auto entry : input.hd_keypaths) {\n+            if (m_fingerprint == strprintf(\"%08x\", ReadBE32(entry.second.fingerprint))) match = true;\n+        }\n+    }\n+    if (!match) {\n+        error = \"Signer fingerprint does not match any of the inputs\";\n+        return false;\n+    }\n+\n+    // Serialize the PSBT\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+\n+    std::string command = m_command + \" --stdin --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + (m_mainnet ? \"\" : \" --testnet \");\n+    std::string stdinStr = \"signtx \\\"\" + EncodeBase64(ssTx.str()) + \"\\\"\";\n+\n+    const UniValue signer_result = runCommandParseJSON(command, stdinStr);\n+\n+    if (!find_value(signer_result, \"psbt\").isStr()) {\n+        error = \"Unexpected result from signer\";\n+        return false;\n+    }\n+\n+    PartiallySignedTransaction signer_psbtx;\n+    std::string signer_psbt_error;\n+    if (!DecodeBase64PSBT(signer_psbtx, find_value(signer_result, \"psbt\").get_str(), signer_psbt_error)) {\n+        error = strprintf(\"TX decode failed %s\", signer_psbt_error);\n+        return false;\n+    }\n+\n+    psbtx = signer_psbtx;\n+\n+    return true;\n+}\n+\n #endif"
      },
      {
        "sha": "3bf6047a9e446f86b8d9afeaa48e304b2418432f",
        "filename": "src/wallet/externalsigner.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afa9aafc0cc64304bc254d535f3185b94712775e/src/wallet/externalsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afa9aafc0cc64304bc254d535f3185b94712775e/src/wallet/externalsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.h?ref=afa9aafc0cc64304bc254d535f3185b94712775e",
        "patch": "@@ -10,6 +10,8 @@\n #include <univalue.h>\n #include <util/system.h>\n \n+struct PartiallySignedTransaction;\n+\n class ExternalSignerException : public std::runtime_error {\n public:\n     using std::runtime_error::runtime_error;\n@@ -57,6 +59,11 @@ class ExternalSigner\n     //! @param[out] UniValue see doc/external-signer.md\n     UniValue getDescriptors(int account);\n \n+    //! Sign PartiallySignedTransaction on the device.\n+    //! Calls `<command> signtransaction` and passes the PSBT via stdin.\n+    //! @param[in,out] psbt  PartiallySignedTransaction to be signed\n+    bool signTransaction(PartiallySignedTransaction& psbt, std::string& error);\n+\n #endif\n };\n "
      },
      {
        "sha": "ac1df7e4069775ca776ca45e170cff7e74ae56d5",
        "filename": "src/wallet/psbtwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afa9aafc0cc64304bc254d535f3185b94712775e/src/wallet/psbtwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afa9aafc0cc64304bc254d535f3185b94712775e/src/wallet/psbtwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.cpp?ref=afa9aafc0cc64304bc254d535f3185b94712775e",
        "patch": "@@ -4,6 +4,8 @@\n \n #include <wallet/psbtwallet.h>\n \n+#include <wallet/wallet.h>\n+\n TransactionError FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, bool& complete, int sighash_type, bool sign, bool bip32derivs)\n {\n     LOCK(pwallet->cs_wallet);"
      },
      {
        "sha": "9231c0c383b135eb0cc786565d676a9f83b24dc6",
        "filename": "src/wallet/psbtwallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afa9aafc0cc64304bc254d535f3185b94712775e/src/wallet/psbtwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afa9aafc0cc64304bc254d535f3185b94712775e/src/wallet/psbtwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.h?ref=afa9aafc0cc64304bc254d535f3185b94712775e",
        "patch": "@@ -6,7 +6,8 @@\n #define BITCOIN_WALLET_PSBTWALLET_H\n \n #include <psbt.h>\n-#include <wallet/wallet.h>\n+\n+class CWallet;\n \n /**\n  * Fills out a PSBT with information from the wallet. Fills in UTXOs if we have"
      },
      {
        "sha": "db68260dcdd044f33ccd84d7dc6cb7d48294bf28",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 13,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afa9aafc0cc64304bc254d535f3185b94712775e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afa9aafc0cc64304bc254d535f3185b94712775e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=afa9aafc0cc64304bc254d535f3185b94712775e",
        "patch": "@@ -19,6 +19,8 @@\n #include <policy/policy.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <wallet/psbtwallet.h>\n #include <script/descriptor.h>\n #include <script/script.h>\n #include <script/signingprovider.h>\n@@ -2901,22 +2903,52 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n         if (sign)\n         {\n-            int nIn = 0;\n-            for (const auto& coin : selected_coins)\n-            {\n-                const CScript& scriptPubKey = coin.txout.scriptPubKey;\n-                SignatureData sigdata;\n-\n-                std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-                if (!provider || !ProduceSignature(*provider, MutableTransactionSignatureCreator(&txNew, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n-                {\n-                    strFailReason = _(\"Signing transaction failed\").translated;\n+            if (IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER)) {\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+                PartiallySignedTransaction psbtx(txNew);\n+                bool complete;\n+                // TODO: check complete is false\n+                const TransactionError err = FillPSBT(this, psbtx, complete, 1, true, true);\n+                assert(err == TransactionError::OK); // TODO: return TransactionError\n+\n+                const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n+                if (command == \"\") throw std::runtime_error(std::string(__func__) + \": restart bitcoind with -signer=<cmd>\");\n+\n+                std::string chain = gArgs.GetChainName();\n+                const bool mainnet = chain == CBaseChainParams::MAIN;\n+                std::vector<ExternalSigner> signers;\n+                ExternalSigner::Enumerate(command, signers, mainnet);\n+                if (signers.empty()) throw std::runtime_error(std::string(__func__) + \": No external signers found\");\n+                // TODO: add fingerprint argument in case of multiple signers\n+                ExternalSigner signer = signers[0];\n+\n+                if( !signer.signTransaction(psbtx, strFailReason)) return false;\n+                complete = FinalizeAndExtractPSBT(psbtx, txNew);\n+                if (!complete) {\n+                    strFailReason = \"PSBT incomplete\";\n                     return false;\n-                } else {\n-                    UpdateInput(txNew.vin.at(nIn), sigdata);\n                 }\n+#else\n+                strFailReason = \"Wallets with external signers require Boost::System library.\";\n+                return false;\n+#endif\n+            } else {\n+                int nIn = 0;\n+                for (const auto& coin : selected_coins)\n+                {\n+                    const CScript& scriptPubKey = coin.txout.scriptPubKey;\n+                    SignatureData sigdata;\n \n-                nIn++;\n+                    std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n+                    if (!provider || !ProduceSignature(*provider, MutableTransactionSignatureCreator(&txNew, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n+                    {\n+                        strFailReason = _(\"Signing transaction failed\").translated;\n+                        return false;\n+                    } else {\n+                        UpdateInput(txNew.vin.at(nIn), sigdata);\n+                    }\n+                    nIn++;\n+                }\n             }\n         }\n "
      },
      {
        "sha": "c246dff4d41412897fb8cd170989ce24e21f02fa",
        "filename": "test/functional/mocks/signer.py",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afa9aafc0cc64304bc254d535f3185b94712775e/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afa9aafc0cc64304bc254d535f3185b94712775e/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=afa9aafc0cc64304bc254d535f3185b94712775e",
        "patch": "@@ -51,8 +51,25 @@ def displayaddress(args):\n \n     return sys.stdout.write(json.dumps({\"address\": \"bcrt1qm90ugl4d48jv8n6e5t9ln6t9zlpm5th68x4f8g\"}))\n \n+def signtx(args):\n+    if args.fingerprint != \"00000001\":\n+        return sys.stdout.write(json.dumps({\"error\": \"Unexpected fingerprint\", \"fingerprint\": args.fingerprint}))\n+\n+    f = open(os.path.join(os.getcwd(), \"mock_psbt\"), \"r\")\n+    mock_psbt = f.read()\n+    f.close()\n+\n+    if args.fingerprint == \"00000001\" :\n+        sys.stdout.write(json.dumps({\n+            \"psbt\": mock_psbt,\n+            \"complete\": True\n+        }))\n+    else:\n+        sys.stdout.write(json.dumps({\"psbt\": args.psbt}))\n+\n parser = argparse.ArgumentParser(prog='./signer.py', description='External signer mock')\n parser.add_argument('--fingerprint')\n+parser.add_argument('--stdin', action='store_true')\n parser.add_argument('--testnet', action='store_true')\n subparsers = parser.add_subparsers()\n \n@@ -67,10 +84,20 @@ def displayaddress(args):\n parser_displayaddress.add_argument('--desc', metavar='desc')\n parser_displayaddress.set_defaults(func=displayaddress)\n \n+parser_signtx = subparsers.add_parser('signtx')\n+parser_signtx.add_argument('psbt', metavar='psbt')\n+\n+parser_signtx.set_defaults(func=signtx)\n+\n if len(sys.argv) == 1:\n   args = parser.parse_args(['-h'])\n   exit()\n \n+if not sys.stdin.isatty():\n+    buffer = sys.stdin.read()\n+    if buffer and buffer.rstrip() != \"\":\n+       sys.argv.extend(buffer.rstrip().split(\" \"))\n+\n args = parser.parse_args()\n \n perform_pre_checks()"
      },
      {
        "sha": "58529a3eb0b8b46281dc3b523769649fdc68f980",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 96,
        "deletions": 4,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afa9aafc0cc64304bc254d535f3185b94712775e/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afa9aafc0cc64304bc254d535f3185b94712775e/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=afa9aafc0cc64304bc254d535f3185b94712775e",
        "patch": "@@ -25,11 +25,12 @@ def mock_signer_path(self):\n             return path\n \n     def set_test_params(self):\n-        self.num_nodes = 3\n+        self.num_nodes = 4\n \n         self.extra_args = [\n             [],\n-            ['-signer=%s' % self.mock_signer_path()],\n+            ['-signer=%s' % self.mock_signer_path(), '-keypool=10'],\n+            ['-signer=%s' % self.mock_signer_path(), '-keypool=10'],\n             ['-signer=%s' % \"fake.py\"],\n         ]\n \n@@ -55,7 +56,7 @@ def run_test(self):\n \n         # Handle script missing:\n         assert_raises_rpc_error(-1, 'execve failed: No such file or directory',\n-            self.nodes[2].enumeratesigners\n+            self.nodes[3].enumeratesigners\n         )\n \n         # Handle error thrown by script\n@@ -73,6 +74,11 @@ def run_test(self):\n         self.nodes[1].createwallet(wallet_name='hww', disable_private_keys=True, descriptors=True, external_signer=True)\n         hww = self.nodes[1].get_wallet_rpc('hww')\n \n+        # Create a second identical wallet, in order to test both sendmany and sendtoaddress\n+        self.nodes[2].createwallet(wallet_name='hww2', disable_private_keys=True, descriptors=True, external_signer=True)\n+        hww2 = self.nodes[2].get_wallet_rpc('hww2')\n+\n+\n         result = hww.enumeratesigners()\n         assert_equal(len(result['signers']), 2)\n         assert_equal(result['signers'][0][\"fingerprint\"], \"00000001\")\n@@ -92,7 +98,7 @@ def run_test(self):\n         # )\n         # self.clear_mock_result(self.nodes[1])\n \n-        assert_equal(hww.getwalletinfo()[\"keypoolsize\"], 3)\n+        assert_equal(hww.getwalletinfo()[\"keypoolsize\"], 30)\n \n         address1 = hww.getnewaddress(address_type=\"bech32\")\n         assert_equal(address1, \"bcrt1qm90ugl4d48jv8n6e5t9ln6t9zlpm5th68x4f8g\")\n@@ -126,5 +132,91 @@ def run_test(self):\n         )\n         self.clear_mock_result(self.nodes[1])\n \n+        self.log.info('Prepare mock PSBT')\n+        self.nodes[0].sendtoaddress(address1, 1)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # Load private key into wallet to generate a signed PSBT for the mock\n+        self.nodes[1].createwallet(wallet_name=\"mock\", disable_private_keys=False, blank=True, descriptors=True)\n+        mock_wallet = self.nodes[1].get_wallet_rpc(\"mock\")\n+        assert mock_wallet.getwalletinfo()['private_keys_enabled']\n+\n+        result = mock_wallet.importdescriptors([{\n+            \"desc\": \"wpkh([00000001/84'/1'/0']tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0/*)#rweraev0\",\n+            \"timestamp\": 0,\n+            \"range\": [0,1],\n+            \"internal\": False,\n+            \"active\": True\n+        },\n+        {\n+            \"desc\": \"wpkh([00000001/84'/1'/0']tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/*)#j6uzqvuh\",\n+            \"timestamp\": 0,\n+            \"range\": [0, 0],\n+            \"internal\": True,\n+            \"active\": True\n+        }])\n+        assert_equal(result[0], {'success': True})\n+        assert_equal(result[1], {'success': True})\n+        assert_equal(mock_wallet.getwalletinfo()[\"txcount\"], 1)\n+        dest = self.nodes[0].getnewaddress(address_type='bech32')\n+        mock_psbt = mock_wallet.walletcreatefundedpsbt([], {dest:0.5}, 0, {}, True)['psbt']\n+        mock_psbt_signed = mock_wallet.walletprocesspsbt(psbt=mock_psbt, sign=True, sighashtype=\"ALL\", bip32derivs=True)\n+        mock_psbt_final = mock_wallet.finalizepsbt(mock_psbt_signed[\"psbt\"])\n+        mock_tx = mock_psbt_final[\"hex\"]\n+        assert(mock_wallet.testmempoolaccept([mock_tx])[0][\"allowed\"])\n+\n+        # # Create a new wallet and populate with specific public keys, in order\n+        # # to work with the mock signed PSBT.\n+        # self.nodes[1].createwallet(wallet_name=\"hww4\", disable_private_keys=True, descriptors=True, external_signer=True)\n+        # hww4 = self.nodes[1].get_wallet_rpc(\"hww4\")\n+        #\n+        # descriptors = [{\n+        #     \"desc\": \"wpkh([00000001/84'/1'/0']tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/0/*)#x30uthjs\",\n+        #     \"timestamp\": \"now\",\n+        #     \"range\": [0, 1],\n+        #     \"internal\": False,\n+        #     \"watchonly\": True,\n+        #     \"active\": True\n+        # },\n+        # {\n+        #     \"desc\": \"wpkh([00000001/84'/1'/0']tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/*)#h92akzzg\",\n+        #     \"timestamp\": \"now\",\n+        #     \"range\": [0, 0],\n+        #     \"internal\": True,\n+        #     \"watchonly\": True,\n+        #     \"active\": True\n+        # }]\n+\n+        # result = hww4.importdescriptors(descriptors)\n+        # assert_equal(result[0], {'success': True})\n+        # assert_equal(result[1], {'success': True})\n+        assert_equal(hww.getwalletinfo()[\"txcount\"], 1)\n+\n+        assert(hww.testmempoolaccept([mock_tx])[0][\"allowed\"])\n+\n+        f = open(os.path.join(self.nodes[1].cwd, \"mock_psbt\"), \"w\")\n+        f.write(mock_psbt_signed[\"psbt\"])\n+        f.close()\n+\n+        self.log.info('Test sendmany using hww1')\n+\n+        result = hww.sendmany(amounts={dest:0.5})\n+        tx = hww.getrawtransaction(result)\n+        assert_equal(tx, mock_tx)\n+\n+        self.log.info('Test sendtoaddress using hww2')\n+\n+        result = hww2.sendtoaddress(address=dest, amount=0.5)\n+        tx = hww2.getrawtransaction(result)\n+        assert_equal(tx, mock_tx)\n+\n+        # # Handle error thrown by script\n+        # self.set_mock_result(self.nodes[4], \"2\")\n+        # assert_raises_rpc_error(-1, 'Unable to parse JSON',\n+        #     hww4.signerprocesspsbt, psbt_orig, \"00000001\"\n+        # )\n+        # self.clear_mock_result(self.nodes[4])\n+\n if __name__ == '__main__':\n     SignerTest().main()"
      },
      {
        "sha": "5df5391d21defea4b0285fd9ae9505d4e3fbf477",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afa9aafc0cc64304bc254d535f3185b94712775e/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afa9aafc0cc64304bc254d535f3185b94712775e/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=afa9aafc0cc64304bc254d535f3185b94712775e",
        "patch": "@@ -24,6 +24,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"txmempool -> validation -> txmempool\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n+    \"wallet/psbtwallet -> wallet/wallet -> wallet/psbtwallet\"\n     \"policy/fees -> txmempool -> validation -> policy/fees\"\n )\n "
      }
    ]
  },
  {
    "sha": "0a0d29541535789a4c1d64bbe02dfdc651686c57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTBkMjk1NDE1MzU3ODlhNGMxZDY0YmJlMDJkZmRjNjUxNjg2YzU3",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T13:34:45Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:05:10Z"
      },
      "message": "[doc] add external-signer.md",
      "tree": {
        "sha": "a05c20f2e560f3b41be1e76c025f0bf14ae984b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a05c20f2e560f3b41be1e76c025f0bf14ae984b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a0d29541535789a4c1d64bbe02dfdc651686c57",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGtYACgkQV/+b28ww\nEAkUjA/9EWif0+fX3Ckrk5qo4w6nbH0ee3JDLZo/+OodDS93b3UhqtcIvJgbtRH5\nDMrY9yyZC+wQNqTfE5MBoKqFu8PkhYOGyc8TiWyeYeN1BF2Nxign0h8x/ExjqDN/\nJcq+Ltr+d5e+AOXvtj4qm6VJd4wPbbgKLgvfe6X3x73bxrkx5pOEvzjFXUqdpjOI\nBqIDqVvY91oNkP0W7dBJORhQiTG7d4rViFY1SC2IkKaPrIz/05rBKHvE2SQJhZ0/\nOmiyf2m/EHd9SOu/9eaAS2vIR9N6uowlqGxhMENHcY7RRX3879Se8Ap4Ct8HiSJX\nlBr5fk3I5huM2JWtjFJ5pxEdlL1HmExCtO2fB6ru2G+62vsDkRLMZKyeQlgmvW08\nyWy3sQzb/RpZqtvgJnZ2r5jKMDEbaskFagPP5qioZKJNA+R2zckFSbMthtmd7HPP\n/1tBOKIvWksE7eYW+UoMtZLGgA6wdxAqyemiVmjJRRWmPs14B+VsVto1/7zPE/5T\nSmNZ67dPuWfqGeRdv+/7eGBDOYJQ9AG1fOKOuaf+0ylCYEIucFV63rRkHX5iuq9N\nfPayo+rbzrMbDgmXG61XBVW7lk1d3VnBHwba2F7Wow1xu9Np9/vw4svZL3EdVgpN\nkXw5c3Yr2LrZe26mfAQGsPUdyamDLrhrJqEWr57aagQitN6E8K4=\n=Y1NT\n-----END PGP SIGNATURE-----",
        "payload": "tree a05c20f2e560f3b41be1e76c025f0bf14ae984b4\nparent afa9aafc0cc64304bc254d535f3185b94712775e\nauthor Sjors Provoost <sjors@sprovoost.nl> 1580391285 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407510 +0100\n\n[doc] add external-signer.md\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a0d29541535789a4c1d64bbe02dfdc651686c57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a0d29541535789a4c1d64bbe02dfdc651686c57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a0d29541535789a4c1d64bbe02dfdc651686c57/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afa9aafc0cc64304bc254d535f3185b94712775e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afa9aafc0cc64304bc254d535f3185b94712775e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afa9aafc0cc64304bc254d535f3185b94712775e"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 171,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f897bdbb6b1866edd58dfa26ee0fc1b2c580dfef",
        "filename": "doc/external-signer.md",
        "status": "added",
        "additions": 171,
        "deletions": 0,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a0d29541535789a4c1d64bbe02dfdc651686c57/doc/external-signer.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a0d29541535789a4c1d64bbe02dfdc651686c57/doc/external-signer.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/external-signer.md?ref=0a0d29541535789a4c1d64bbe02dfdc651686c57",
        "patch": "@@ -0,0 +1,171 @@\n+# Support for signing transactions outside of Bitcoin Core\n+\n+Bitcoin Core can be launched with `-signer=<cmd>` where `<cmd>` is an external tool which can sign transactions and perform other functions. For example, it can be used to communicate with a hardware wallet.\n+\n+## Example usage\n+\n+The following example is based on the [HWI](https://github.com/bitcoin-core/HWI) tool. Although this tool is hosted under the Bitcoin Core Github organization and maintained by Bitcoin Core developers, it should be used with caution. It is considered experimental and has far less review than Bitcoin Core itself. Be particularly careful when running tools such as these on a computer with private keys on it.\n+\n+When using a hardware wallet, consult the manufacturer website for (alternative) software they recommend. As long as their software conforms to the standard below, it should be able to work with Bitcoin Core.\n+\n+Start Bitcoin Core:\n+\n+```sh\n+$ bitcoind -signer=../HWI/hwi.py\n+```\n+\n+### Device setup\n+\n+Follow the hardware manufacturers instructions for the initial device setup, as well as their instructions for creating a backup. Alternatively, for some devices, you can use the `setup`, `restore` and `backup` commands provided by [HWI](https://github.com/bitcoin-core/HWI).\n+\n+### Create wallet and import keys\n+\n+Get a list of signing devices / services:\n+\n+```\n+$ bitcoin-cli enumeratesigners\n+{\n+  \"signers\": [\n+    {\n+      \"fingerprint\": \"c8df832a\"\n+    }\n+]\n+```\n+\n+The master key fingerprint is used to identify a device.\n+\n+Create a wallet, this automatically imports the public keys:\n+\n+```sh\n+$ bitcoin-cli createwallet \"hww\" true true \"\" true true true\n+```\n+\n+### Verify an address\n+\n+Display an address on the device:\n+\n+```sh\n+$ bitcoin-cli -rpcwallet=<wallet> getnewaddress\n+$ bitcoin-cli -rpcwallet=<wallet> signerdisplayaddress <address>\n+```\n+\n+Replace `<address>` with the result of `getnewaddress`.\n+\n+### Spending\n+\n+Under the hood this uses a [Partially Signed Bitcoin Transaction](psbt.md).\n+\n+```sh\n+$ bitcoin-cli -rpcwallet=<wallet> sendtoaddress <address> <amount>\n+```\n+\n+This prompts your hardware wallet to sign, and fail if it's not connected. If successful\n+it automatically broadcasts the transaction.\n+\n+```sh\n+{\"complete\": true, \"txid\": <txid>}\n+```\n+\n+## Signer API\n+\n+In order to be compatible with Bitcoin Core any signer command should conform to the specification below. This specification is subject to change. Ideally a BIP should propose a standard so that other wallets can also make use of it.\n+\n+Prerequisite knowledge:\n+* [Output Descriptors](descriptors.md)\n+* Partially Signed Bitcoin Transaction ([PSBT](psbt.md))\n+\n+### `enumerate` (required)\n+\n+Usage:\n+```\n+$ <cmd> enumerate\n+[\n+    {\n+        \"fingerprint\": \"00000000\"\n+    }\n+]\n+```\n+\n+The command MUST return an (empty) array with at least a `fingerprint` field.\n+\n+A future extension could add an optional return field with device capabilities. Perhaps a descriptor with wildcards. For example: `[\"pkh(\"44'/0'/$'/{0,1}/*\"), sh(wpkh(\"49'/0'/$'/{0,1}/*\")), wpkh(\"84'/0'/$'/{0,1}/*\")]`. This would indicate the device supports legacy, wrapped SegWit and native SegWit. In addition it restricts the derivation paths that can used for those, to maintain compatibility with other wallet software. It also indicates the device, or the driver, doesn't support multisig.\n+\n+A future extension could add an optional return field `reachable`, in case `<cmd>` knows a signer exists but can't currently reach it.\n+\n+### `signtransaction` (required)\n+\n+Usage:\n+```\n+$ <cmd> --fingerprint=<fingerprint> (--testnet) signtransaction <psbt>\n+base64_encode_signed_psbt\n+```\n+\n+The command returns a psbt with any signatures.\n+\n+The `psbt` SHOULD include bip32 derivations. The command SHOULD fail if none of the bip32 derivations match a key owned by the device.\n+\n+The command SHOULD fail if the user cancels (return code?).\n+\n+The command MAY complain if `--testnet` is set, but any of the BIP32 derivation paths contain a coin type other than `1h` (and vice versa).\n+\n+### `getdescriptors` (optional)\n+\n+Usage:\n+\n+```\n+$ <cmd> --fingerprint=<fingerprint> (--testnet) getdescriptors <account>\n+<xpub>\n+```\n+\n+Returns descriptors supported by the device. Example:\n+\n+```\n+$ <cmd> --fingerprint=00000000 --testnet getdescriptors\n+{\n+  \"receive\": [\n+    \"pkh([00000000/44h/0h/0h]xpub6C.../0/*)#fn95jwmg\",\n+    \"sh(wpkh([00000000/49h/0h/0h]xpub6B..../0/*))#j4r9hntt\",\n+    \"wpkh([00000000/84h/0h/0h]xpub6C.../0/*)#qw72dxa9\"\n+  ],\n+  \"internal\": [\n+    \"pkh([00000000/44h/0h/0h]xpub6C.../1/*)#c8q40mts\",\n+    \"sh(wpkh([00000000/49h/0h/0h]xpub6B..../1/*))#85dn0v75\",\n+    \"wpkh([00000000/84h/0h/0h]xpub6C..../1/*)#36mtsnda\"\n+  ]\n+}\n+```\n+\n+### `displayaddress` (optional)\n+\n+Usage:\n+```\n+<cmd> --fingerprint=<fingerprint> (--testnet) displayaddress --desc descriptor\n+```\n+\n+Example, display the first native SegWit receive address on Testnet:\n+\n+```\n+<cmd> --fingerprint=00000000 --testnet displayaddress --desc \"wpkh([00000000/84h/1h/0h]tpubDDUZ..../0/0)\"\n+```\n+\n+The command MUST be able to figure out the address type from the descriptor.\n+\n+If <descriptor> contains a master key fingerprint, the command MUST fail if it does not match the fingerprint known by the device.\n+\n+If <descriptor> contains an xpub, the command MUST fail if it does not match the xpub known by the device.\n+\n+The command MAY complain if `--testnet` is set, but the BIP32 coin type is not `1h` (and vice versa).\n+\n+## How Bitcoin Core uses the Signer API\n+\n+The `enumeratesigners` RPC simply calls `<cmd> enumerate`.\n+\n+The `createwallet` RPC calls:\n+\n+* `<cmd> --fingerprint=00000000 getdescriptors 0`\n+\n+It then imports descriptors for all support address types, in a BIP44/49/84 compatible manner.\n+\n+The `displayaddress` RPC reuses some code from `getaddressinfo` on the provided address and obtains the inferred descriptor. It then calls `<cmd> --fingerprint=00000000 displayaddress --desc=<descriptor>`.\n+\n+`sendtoaddress` and `sendmany` check `inputs->bip32_derivs` to see if any inputs have the same `master_fingerprint` as the signer. If so, it calls `<cmd> --fingerprint=00000000 signtransaction <psbt>`. It waits for the device to return a (partially) signed psbt, tries to finalize it and broadcasts the transation."
      }
    ]
  },
  {
    "sha": "d78939cd3a48d915ec683d9e6147fe9afc784917",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzg5MzljZDNhNDhkOTE1ZWM2ODNkOWU2MTQ3ZmU5YWZjNzg0OTE3",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-09-16T19:21:23Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:06:23Z"
      },
      "message": "[wallet] CreateMultisigWallet",
      "tree": {
        "sha": "38ef1c062c5b0e25f94bf799c6afe7bcb0fa432f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38ef1c062c5b0e25f94bf799c6afe7bcb0fa432f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d78939cd3a48d915ec683d9e6147fe9afc784917",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGx8ACgkQV/+b28ww\nEAlx0A/+OVVp/sCQ+tS6sx8ql4RXXV9TfnpmDyv2V1qElC6p01m7N9zRDYNpA/pq\nxMXiv/5oJOU5YHkzmEHDM1ajRHctqt07SqcIRjzVPwNQPTCcItnVQ3RFM+wi/Auh\nOLWR227xY8ek3fwL+Gkhxj5HnIkvOuKD/uTQwgp3Dsz0XNj3PWEuFzzJT4N/tTjP\n8RMyzbB/Gr08YjeGbWipQgcwMBIXpvmVCByU5REWIzJn1bjfnRUPLMwWtXrvYSMy\n6Jr32j9WdyjUtf9asR2vYDgAhQGBsbetENBbTICA0rnddFy9ccMhtx4pIOMMolQu\nShuXbIGbxa6fGw0phGOs/wHES784fjNpPh/fnm/KVAb8gUZU//M0l7pFLRXyig9T\n9QeZa/AD7SbiWltHz2gco+ext2inrkKCiHEuv1jffq5MQ5AuJGHBJF/EUkSGxbO/\n87dOUewipOoEHf2HEpWZNgQdUi/Bs2GoK/jSkghsWXOu7YbBHrQHFQfOx5W5hfTt\nhU2b+A2ajSmIcdWMWJv6FLC9qdKono4qXzf7WsV7L9CVgwvu9WM9htVKbKwYGY19\nPsVWWfyI5RO9qav4IkGonOXvZSVjdhhia9fpHlD45V6VDkUB54zFsJuc/ffE3L0B\nY3kLKLxkmH0mnfpMeZJF72J4F9QmTCDhqdPJ1NyAVdrA1C5WXNw=\n=FKhL\n-----END PGP SIGNATURE-----",
        "payload": "tree 38ef1c062c5b0e25f94bf799c6afe7bcb0fa432f\nparent 0a0d29541535789a4c1d64bbe02dfdc651686c57\nauthor Sjors Provoost <sjors@sprovoost.nl> 1568661683 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407583 +0100\n\n[wallet] CreateMultisigWallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78939cd3a48d915ec683d9e6147fe9afc784917",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d78939cd3a48d915ec683d9e6147fe9afc784917",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78939cd3a48d915ec683d9e6147fe9afc784917/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a0d29541535789a4c1d64bbe02dfdc651686c57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a0d29541535789a4c1d64bbe02dfdc651686c57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a0d29541535789a4c1d64bbe02dfdc651686c57"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 97,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5786a5ebfdd4b6637d31b913a021a9f833c8b3fa",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 92,
        "deletions": 1,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78939cd3a48d915ec683d9e6147fe9afc784917/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78939cd3a48d915ec683d9e6147fe9afc784917/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d78939cd3a48d915ec683d9e6147fe9afc784917",
        "patch": "@@ -259,6 +259,63 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     return WalletCreationStatus::SUCCESS;\n }\n \n+WalletCreationStatus CreateMultisigWallet(interfaces::Chain& chain, uint64_t wallet_creation_flags, const std::string& name, int threshold, std::vector<SignerDevice> devices, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result)\n+{\n+    // Check the wallet file location\n+    WalletLocation location(name);\n+    if (location.Exists()) {\n+        error = \"Wallet \" + location.GetName() + \" already exists.\";\n+        return WalletCreationStatus::CREATION_FAILED;\n+    }\n+\n+    // External signer flag must be set\n+    if (!(wallet_creation_flags & WALLET_FLAG_EXTERNAL_SIGNER)) {\n+        error = \"External signer flag must be set\";\n+        return WalletCreationStatus::CREATION_FAILED;\n+    }\n+\n+    // Private keys must be disabled\n+    if (!(wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        error = \"Private keys must be disabled\";\n+        return WalletCreationStatus::CREATION_FAILED;\n+    }\n+\n+    // Blank flag must be set\n+    if (!(wallet_creation_flags & WALLET_FLAG_BLANK_WALLET)) {\n+        error = \"Blank flag must be set\";\n+        return WalletCreationStatus::CREATION_FAILED;\n+    }\n+\n+    // Descriptor support must be enabled\n+    if (!(wallet_creation_flags & WALLET_FLAG_DESCRIPTORS)) {\n+        error = \"Descriptor support must be enabled\";\n+        return WalletCreationStatus::CREATION_FAILED;\n+    }\n+\n+    // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n+    if (!CWallet::Verify(chain, location, false, error, warnings)) {\n+        error = \"Wallet file verification failed: \" + error;\n+        return WalletCreationStatus::CREATION_FAILED;\n+    }\n+\n+    // Make the wallet\n+    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, error, warnings, wallet_creation_flags);\n+    if (!wallet) {\n+        error = \"Wallet creation failed\";\n+        return WalletCreationStatus::CREATION_FAILED;\n+    }\n+\n+    {\n+        LOCK(wallet->cs_wallet);\n+        wallet->SetupMultisigDescriptorScriptPubKeyMans(threshold, devices);\n+    }\n+\n+    AddWallet(wallet);\n+    wallet->postInitProcess();\n+    result = wallet;\n+    return WalletCreationStatus::SUCCESS;\n+}\n+\n const uint256 CWalletTx::ABANDON_HASH(UINT256_ONE());\n \n /** @defgroup mapWallet\n@@ -3822,7 +3879,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             walletInstance->SetupLegacyScriptPubKeyMan();\n         }\n \n-        if ((wallet_creation_flags & WALLET_FLAG_EXTERNAL_SIGNER) || !(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n+        if (((wallet_creation_flags & WALLET_FLAG_EXTERNAL_SIGNER) && !(wallet_creation_flags & WALLET_FLAG_BLANK_WALLET)) || !(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n             LOCK(walletInstance->cs_wallet);\n             if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n                 walletInstance->SetupDescriptorScriptPubKeyMans();\n@@ -4390,6 +4447,40 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n     }\n }\n \n+void CWallet::SetupMultisigDescriptorScriptPubKeyMans(const int threshold, const std::vector<std::pair<std::string, std::pair<std::string, std::string>>> devices)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    for (bool internal : {false, true}) {\n+        for (const OutputType& t : { OutputType::P2SH_SEGWIT, OutputType::BECH32 }) {\n+            std::string desc_str = strprintf(\"wsh(sortedmulti(%d,\", threshold);\n+            if (t == OutputType::P2SH_SEGWIT) {\n+                desc_str.insert(0, \"sh(\");\n+            }\n+            for (auto device : devices) {\n+                // Based on Electrum: https://github.com/spesmilo/electrum/pull/4465\n+                desc_str += \"[\" + device.first + \"/48h/0h/0h/\" + (t == OutputType::P2SH_SEGWIT ? \"1h]\" + device.second.first : \"2h]\" + device.second.second) + strprintf(\"/%d/*\", !internal);\n+                desc_str += \",\";\n+            }\n+            desc_str.pop_back();\n+            desc_str += \"))\";\n+            if (t == OutputType::P2SH_SEGWIT) {\n+                desc_str += \")\";\n+            }\n+\n+            FlatSigningProvider keys;\n+            std::string dummy_error;\n+            std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, dummy_error, false);\n+\n+            auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, t, internal));\n+            spk_manager->SetupDescriptor(std::move(desc));\n+            uint256 id = spk_manager->GetID();\n+            m_spk_managers[id] = std::move(spk_manager);\n+            SetActiveScriptPubKeyMan(id, t, internal);\n+        }\n+    }\n+}\n+\n void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly)\n {\n     WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));"
      },
      {
        "sha": "e3ee376d4aad310e8f8df10fe10fdb2d7bb3e06f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78939cd3a48d915ec683d9e6147fe9afc784917/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78939cd3a48d915ec683d9e6147fe9afc784917/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d78939cd3a48d915ec683d9e6147fe9afc784917",
        "patch": "@@ -60,6 +60,8 @@ enum class WalletCreationStatus {\n };\n \n WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result);\n+typedef std::pair<std::string, std::pair<std::string, std::string>> SignerDevice;\n+WalletCreationStatus CreateMultisigWallet(interfaces::Chain& chain, uint64_t wallet_creation_flags, const std::string& name, int threshold, std::vector<SignerDevice> devices, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result);\n \n //! -paytxfee default\n constexpr CAmount DEFAULT_PAY_TX_FEE = 0;\n@@ -1209,6 +1211,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     //! Create new DescriptoScriptPubKeyMans and add them to the wallet\n     void SetupDescriptorScriptPubKeyMans();\n \n+    //! Create new DescriptoScriptPubKeyMans and add them to the multisig wallet\n+    void SetupMultisigDescriptorScriptPubKeyMans(const int threshold, const std::vector<std::pair<std::string, std::pair<std::string, std::string>>> devices);\n+\n     //! Check if the wallet already has a descriptor\n     DescriptorScriptPubKeyMan* HasWalletDescriptor(const WalletDescriptor& desc) const;\n "
      }
    ]
  },
  {
    "sha": "4dccbcc5f05dc97e84258b39dc8b5bde0268e238",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGNjYmNjNWYwNWRjOTdlODQyNThiMzlkYzhiNWJkZTAyNjhlMjM4",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-09-16T19:22:02Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:06:23Z"
      },
      "message": "[rpc] createmultisigwallet",
      "tree": {
        "sha": "8d82484ab949d2babc37484ad657c9a4e41aaccf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d82484ab949d2babc37484ad657c9a4e41aaccf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4dccbcc5f05dc97e84258b39dc8b5bde0268e238",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGx8ACgkQV/+b28ww\nEAlzXA//ZjvXxD1QlWA0K/C0+tvt6uQgisFwdblPhXmWgsFFb0tMInLed503Encq\nboyoDUX9NwVh5E4r9kQPQbWhbfWI73nl6SnBNOX3nJ5bKHJGIQXRDsHerMj9jBYN\nWz08Ju9uAua9FzmNVGNM2ED+eGD2yTHh3fM34j4OtkXV6EBilN9MDDI2Nm0lBPg+\nvDQlPC4iSDO7l5VFzZrOWwE4L346iG5lPr7HN5Ayj2h2dIUIiuoeQEJeQ0nyl9L/\nYypPWJ32sjzpiCzZes4vLTm+N7vabdwZEDX+0gJXd7dGjdWXT6bz22i2W4/8mwsU\nzwYRziFveyeMXWyrRWTKBFgzddiYxjPTrVTjp6VV9QVWKVSMBFSs5zJblXlaKaIH\nMTk0JFMHmKKcSl3MYJ0MfjbSp0Ll/6TQvATgadTbcFAGURh5suOW+EjydhQKNU/F\ngbK1BFKsxRnfDOcok9t1hHXNLtwcpcmqnBPr+pxL/LVEGs/ZANCCjO0UiE9qWdSP\n2fZLecIb6m/9q+mBtqNwhjd0ecc2eiCdkOi+cXOosGMwqcMN69PVliSaCpxRNDcD\n8Q16LmgbTofskeI5EG0WLjogMeWal+0if8am91n8QExpEKYVaUuxjcB7aHCJjw+f\n+SygtIuYo8FFfPwCTfoFRhN6px4PDGVEHKVFf9OBbJXqUeLae/I=\n=toau\n-----END PGP SIGNATURE-----",
        "payload": "tree 8d82484ab949d2babc37484ad657c9a4e41aaccf\nparent d78939cd3a48d915ec683d9e6147fe9afc784917\nauthor Sjors Provoost <sjors@sprovoost.nl> 1568661722 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407583 +0100\n\n[rpc] createmultisigwallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dccbcc5f05dc97e84258b39dc8b5bde0268e238",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4dccbcc5f05dc97e84258b39dc8b5bde0268e238",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dccbcc5f05dc97e84258b39dc8b5bde0268e238/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d78939cd3a48d915ec683d9e6147fe9afc784917",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78939cd3a48d915ec683d9e6147fe9afc784917",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d78939cd3a48d915ec683d9e6147fe9afc784917"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 99,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7a74fcf041d77740c1701c2205697bf862a43d22",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dccbcc5f05dc97e84258b39dc8b5bde0268e238/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dccbcc5f05dc97e84258b39dc8b5bde0268e238/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=4dccbcc5f05dc97e84258b39dc8b5bde0268e238",
        "patch": "@@ -172,6 +172,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createwallet\", 4, \"avoid_reuse\"},\n     { \"createwallet\", 5, \"descriptors\"},\n     { \"createwallet\", 6, \"external_signer\"},\n+    { \"createmultisigwallet\", 1, \"threshold\"},\n+    { \"createmultisigwallet\", 2, \"signers\"},\n+    { \"createmultisigwallet\", 3, \"avoid_reuse\"},\n     { \"getnodeaddresses\", 0, \"count\"},\n     { \"stop\", 0, \"wait\" },\n };"
      },
      {
        "sha": "206554616139a92547681efc57c419b09b031044",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dccbcc5f05dc97e84258b39dc8b5bde0268e238/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dccbcc5f05dc97e84258b39dc8b5bde0268e238/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4dccbcc5f05dc97e84258b39dc8b5bde0268e238",
        "patch": "@@ -2761,6 +2761,101 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     return obj;\n }\n \n+static UniValue createmultisigwallet(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\n+        \"createmultisigwallet\",\n+        \"\\nCreates and loads a new multisig wallet.\\n\"\n+        \"Only native segwit bech32 addresses are supported.\",\n+        {\n+            {\"wallet_name\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n+            {\"threshold\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Number of required signatures\"},\n+            {\"signers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of signers identified by their BIP32 fingerprint\",\n+                {\n+                    {\"fingerprint\", RPCArg::Type::STR, RPCArg::Optional::NO, \"master key fingerprint. Can be obtained using emumeratesigners.\"},\n+                    {\"xpub1\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the xpub at deriviation path m/48h/0h/0h/1h used for P2SH_SEGWIT\"},\n+                    {\"xpub2\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the xpub at deriviation path m/48h/0h/0h/2h used for native SegWit\"}\n+                },\n+            },\n+            {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"false\", \"Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind.\"},\n+        },\n+        RPCResult{\n+            \"{\\n\"\n+            \"  \\\"name\\\" :    <wallet_name>,        (string) The wallet name if created successfully. If the wallet was created using a full path, the wallet_name will be the full path.\\n\"\n+            \"  \\\"warning\\\" : <warning>,            (string) Warning message if wallet was not loaded cleanly.\\n\"\n+            \"}\\n\"\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createmultisigwallet\", \"\\\"ManualMultisigWallet\\\" 2 '[{\\\"fingerprint\\\": \\\"d34db33f\\\", \\\"xpub2\\\": \\\"xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY\\\"}, {\\\"fingerprint\\\": \\\"3442193e\\\", \\\"xpub1\\\": \\\"xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8\\\"}]'\")\n+            + HelpExampleRpc(\"createmultisigwallet\", \"\\\"ManualMultisigWallet\\\", 2, '[{\\\"fingerprint\\\": \\\"d34db33f\\\", \\\"xpub2\\\": \\\"xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY\\\"}, {\\\"fingerprint\\\": \\\"3442193e\\\", \\\"xpub1\\\": \\\"xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8\\\"}]'\")\n+        },\n+    }.Check(request);\n+\n+    uint64_t flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_DESCRIPTORS;\n+\n+    if (!request.params[3].isNull() && request.params[3].get_bool()) {\n+        flags |= WALLET_FLAG_AVOID_REUSE;\n+    }\n+\n+    int threshold = request.params[1].get_int();\n+    if (threshold == 0) throw JSONRPCError(RPC_INVALID_PARAMETER, \"cannot require zero signatures\");\n+\n+    int signer_count = request.params[2].get_array().size();\n+    if (threshold > signer_count) throw JSONRPCError(RPC_INVALID_PARAMETER, \"cannot require more signatures than signers\");\n+\n+    std::vector<SignerDevice> devices;\n+    for (const UniValue& signer_data : request.params[2].getValues()) {\n+        const std::string& fingerprint = signer_data[\"fingerprint\"].get_str();\n+        if (fingerprint.length() != 8 || !IsHex(fingerprint)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"invalid BIP32 fingerprint: %s\", fingerprint));\n+        }\n+\n+        std::string xpub1 = \"\";\n+        std::string xpub2 = \"\";\n+        if(signer_data.exists(\"xpub1\")) {\n+            xpub1 = signer_data[\"xpub\"].get_str();\n+        }\n+        if(signer_data.exists(\"xpub2\")) {\n+            xpub2 = signer_data[\"xpub2\"].get_str();\n+        }\n+        if (xpub1 == \"\" && xpub2 == \"\") {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"missing xpub for native and/or wrapped SegWit for signer %s\", fingerprint));\n+        }\n+\n+        for (std::string xpub : {xpub1, xpub2}) {\n+            if (xpub == \"\") break;\n+            CExtPubKey extpubkey = DecodeExtPubKey(xpub);\n+            if (!extpubkey.pubkey.IsValid()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"'%s' is not valid\", xpub));\n+            }\n+        }\n+\n+        devices.push_back(std::make_pair(fingerprint, std::make_pair(xpub1, xpub2)));\n+    }\n+\n+    // TODO: sort by fingerprint\n+\n+    std::string error;\n+    std::vector<std::string> warnings;\n+    std::shared_ptr<CWallet> wallet;\n+    WalletCreationStatus status = CreateMultisigWallet(*g_rpc_chain, flags, request.params[0].get_str(), threshold, devices, error, warnings, wallet);\n+    switch (status) {\n+        case WalletCreationStatus::CREATION_FAILED:\n+            throw JSONRPCError(RPC_WALLET_ERROR, error);\n+        case WalletCreationStatus::ENCRYPTION_FAILED:\n+            CHECK_NONFATAL(false);\n+        case WalletCreationStatus::SUCCESS:\n+            break;\n+        // no default case, so the compiler can warn about missing cases\n+    }\n+\n+    UniValue obj(UniValue::VOBJ);\n+    obj.pushKV(\"name\", wallet->GetName());\n+    obj.pushKV(\"warning\", Join(warnings, \"\\n\"));\n+\n+    return obj;\n+}\n+\n static UniValue unloadwallet(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"unloadwallet\",\n@@ -4283,6 +4378,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n     { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\", \"passphrase\", \"avoid_reuse\", \"descriptors\", \"external_signer\"} },\n+    { \"wallet\",             \"createmultisigwallet\",             &createmultisigwallet,          {\"wallet_name\", \"threshold\", \"signers\", \"avoid_reuse\"} },\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },"
      }
    ]
  },
  {
    "sha": "c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWUyYzUyMWViMWI0NDMzYThjZTVlNmMwM2U0MmJjNGM2MTk3Mzkw",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-09-17T09:14:20Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:06:23Z"
      },
      "message": "[wallet] add getxpub to external signer",
      "tree": {
        "sha": "77c07257fc57aa23bd0fcafb7a6a03c170bf2463",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77c07257fc57aa23bd0fcafb7a6a03c170bf2463"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGx8ACgkQV/+b28ww\nEAnMjA//daQGrsmgUmTL+ctA1nDtpoBACUw9u71CSQsKAmlhkAfb647mWk0Rsw79\n1mxB5H3I+Yss9yEqIeOkvxp3OC98Qrbh7YNAcTmOERDYTaou3QoiZyI3Zh66RQ11\nlmeExnDOLSmgkAZf1Ea9UW6zwjQhAuylGOPH1cGCfr/ybpCjZ/kQ4snwGMxLZnQd\np9Z30Ha8DwjbDXL9UsDbf15SA1X6Anh9Wz+xGoCSCp8Hp82xA93FRhAqGTM0FGfV\nohfDPKg7tF7gFS4umvCS+euOk6jnz1XB7U9Kkj2Jo2j589bwP6EvYzcxnfgCHzTI\ngpFnCxWy2ZbS00ARF923jCVbxqnvVQupiRjzOU0C2KLUKJ6Rv9XjWOD2erUKxjE3\nNKvFmPAsE8nDE8MegOcpyXYA+0qsa7MZcQfUJm96xTf2BpMkVW3LBPulrYivg35C\ncUpDXre+bifqaoMFZ/y8lEOTu5xO22NSvYjPPoqxkg8X6MNQU58VC48YyJA3wOsY\nk4hs9kPZxc+XFfQx9Njo9HfR5qdNXPo7i44R/9snKZx9ykxD3LmFzA9D5zZdGSz3\nQGbue8FZ0EDuvRuxRjzZ3b7zhHR2wp5tgKMEY4az9WY2b/lJAEcHEqV5pt8wvXOt\nNkOOVn0l+PJRhfTJDIdq/2V845hvz03Eo0WRNeIsiT95GhM/wqE=\n=0Ylv\n-----END PGP SIGNATURE-----",
        "payload": "tree 77c07257fc57aa23bd0fcafb7a6a03c170bf2463\nparent 4dccbcc5f05dc97e84258b39dc8b5bde0268e238\nauthor Sjors Provoost <sjors@sprovoost.nl> 1568711660 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407583 +0100\n\n[wallet] add getxpub to external signer\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4dccbcc5f05dc97e84258b39dc8b5bde0268e238",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dccbcc5f05dc97e84258b39dc8b5bde0268e238",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4dccbcc5f05dc97e84258b39dc8b5bde0268e238"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 27,
      "deletions": 0
    },
    "files": [
      {
        "sha": "707dd8b790c8df14f0009bcab923c7e435525db0",
        "filename": "doc/external-signer.md",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390/doc/external-signer.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390/doc/external-signer.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/external-signer.md?ref=c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390",
        "patch": "@@ -135,6 +135,22 @@ $ <cmd> --fingerprint=00000000 --testnet getdescriptors\n }\n ```\n \n+### `getxpub` (optional)\n+\n+Usage:\n+\n+```\n+$ <cmd> --fingerprint=<fingerprint> (--testnet) getxpub <path>\n+<xpub>\n+```\n+\n+Returns xpub at a given path. Example:\n+\n+```\n+$ <cmd> --fingerprint=00000000 --testnet getxpub \"44h/0h/0h\"\n+\"xpub...\"\n+```\n+\n ### `displayaddress` (optional)\n \n Usage:"
      },
      {
        "sha": "a3fbac4b6302071acda9a2ee1115fdbfc77d5cd8",
        "filename": "src/wallet/externalsigner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390/src/wallet/externalsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390/src/wallet/externalsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.cpp?ref=c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390",
        "patch": "@@ -53,6 +53,11 @@ UniValue ExternalSigner::getDescriptors(int account)\n     return runCommandParseJSON(m_command + \" --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + (m_mainnet ? \"\" : \" --testnet \") + \" getdescriptors --account \" + strprintf(\"%d\", account));\n }\n \n+UniValue ExternalSigner::getXpub(const std::string& path)\n+{\n+    return runCommandParseJSON(m_command + \" --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + (m_mainnet ? \"\" : \" --testnet \") + \" getxpub \" + path);\n+}\n+\n bool ExternalSigner::signTransaction(PartiallySignedTransaction& psbtx, std::string& error)\n {\n     // Check if signer fingerpint matches any input master key fingerprint"
      },
      {
        "sha": "80648a1ac5ffbb8f3ed42740655bb3aad6abea16",
        "filename": "src/wallet/externalsigner.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390/src/wallet/externalsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390/src/wallet/externalsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.h?ref=c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390",
        "patch": "@@ -59,6 +59,12 @@ class ExternalSigner\n     //! @param[out] UniValue see doc/external-signer.md\n     UniValue getDescriptors(int account);\n \n+    //! Get xpub for a given path.\n+    //! Calls `<command> getxpub <path>`\n+    //! @param[in] path  which derivation path to use (e.g. `m/44'/0'/account'`)\n+    //! @param[out] UniValue see doc/external-signer.md\n+    UniValue getXpub(const std::string& path);\n+\n     //! Sign PartiallySignedTransaction on the device.\n     //! Calls `<command> signtransaction` and passes the PSBT via stdin.\n     //! @param[in,out] psbt  PartiallySignedTransaction to be signed"
      }
    ]
  },
  {
    "sha": "f11aadad9137f748e40e92e3b260ebb31136e583",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTFhYWRhZDkxMzdmNzQ4ZTQwZTkyZTNiMjYwZWJiMzExMzZlNTgz",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-09-17T09:28:02Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:06:23Z"
      },
      "message": "[rpc] createmultisigwallet: fetch xpub from signer if present",
      "tree": {
        "sha": "a941cbe174ae9d64610ea9bbff801bf762b937c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a941cbe174ae9d64610ea9bbff801bf762b937c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f11aadad9137f748e40e92e3b260ebb31136e583",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGx8ACgkQV/+b28ww\nEAlxWxAAkazC/iaE8eHlf3YVjVZKTS0gzmCARbsQRPosBoh1PjDsbi6QrHIStv+R\nheNtFdSEgnNSLSvVNKXE8Jh/TEGGbx3feT2i0Qgj7Ch6rqIYfT02hKhZogd0ouE3\nACVqH5QIGhbVhnkD19GhU1qMYQYqqfpb34kJTiJfSYrYofjatkWSgjs0/YXX4M+l\nFmwEEEefkFCZwUu+W8DW2soMDlO/xRs3z5/h8mcIGlBuSCrn2XY2HAIAQYb6Pw2Y\nNBiSFRxWoLxW3ji8oAOfUGyiTBxwVeXbbxKvMGzAUaDAUCDzgekEuJggUtwT95+Q\nOf0BUijOfcszrfK63paGF4g5DmpqXzKFdS+36VvZQIhEOdGXCt6CVx6ZgK/SBUEY\nqsz7XaU1wPpjN5oBzTq1FACWhBhvYbHwDmXRfSW4l4Us6noHzwF+0UecTXSBD2Xn\nqf7GOlLxaFZwhTjzoP8YEkSiJqfKZj4MpuUij9LimDjyx5xEDqoAaul4z15zDxFZ\nHUFq3wDvStBMFtaEkK5mpnPmIZ/CvLkCciHsL4eOT482r29KElWPQ6dP91cqSzeE\noKmbN7ItqAMepiHKPnXGJmblOrtZphuMOSnQFxv3Za+5PF/rFdrfntaiULSPHgRG\nSfhTTltfZF/Pd7AhE5eWSo9poI3xgGfI0pz73iTKNL5QE24ZKs4=\n=If8W\n-----END PGP SIGNATURE-----",
        "payload": "tree a941cbe174ae9d64610ea9bbff801bf762b937c9\nparent c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390\nauthor Sjors Provoost <sjors@sprovoost.nl> 1568712482 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407583 +0100\n\n[rpc] createmultisigwallet: fetch xpub from signer if present\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f11aadad9137f748e40e92e3b260ebb31136e583",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f11aadad9137f748e40e92e3b260ebb31136e583",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f11aadad9137f748e40e92e3b260ebb31136e583/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1e2c521eb1b4433a8ce5e6c03e42bc4c6197390"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 32,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f3eb252cedddc474520edb364bcc73ea2b8be530",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 2,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f11aadad9137f748e40e92e3b260ebb31136e583/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f11aadad9137f748e40e92e3b260ebb31136e583/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f11aadad9137f748e40e92e3b260ebb31136e583",
        "patch": "@@ -25,6 +25,7 @@\n #include <util/url.h>\n #include <util/validation.h>\n #include <wallet/coincontrol.h>\n+#include <wallet/externalsigner.h>\n #include <wallet/feebumper.h>\n #include <wallet/psbtwallet.h>\n #include <wallet/rpcwallet.h>\n@@ -2773,8 +2774,8 @@ static UniValue createmultisigwallet(const JSONRPCRequest& request)\n             {\"signers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of signers identified by their BIP32 fingerprint\",\n                 {\n                     {\"fingerprint\", RPCArg::Type::STR, RPCArg::Optional::NO, \"master key fingerprint. Can be obtained using emumeratesigners.\"},\n-                    {\"xpub1\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the xpub at deriviation path m/48h/0h/0h/1h used for P2SH_SEGWIT\"},\n-                    {\"xpub2\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the xpub at deriviation path m/48h/0h/0h/2h used for native SegWit\"}\n+                    {\"xpub1\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the xpub at deriviation path m/48h/0h/0h/1h used for P2SH_SEGWIT, obtained automatically if -signer if configured\"},\n+                    {\"xpub2\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the xpub at deriviation path m/48h/0h/0h/2h used for native SegWit, obtained automatically if -signer if configured\"}\n                 },\n             },\n             {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"false\", \"Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind.\"},\n@@ -2787,7 +2788,9 @@ static UniValue createmultisigwallet(const JSONRPCRequest& request)\n         },\n         RPCExamples{\n             HelpExampleCli(\"createmultisigwallet\", \"\\\"ManualMultisigWallet\\\" 2 '[{\\\"fingerprint\\\": \\\"d34db33f\\\", \\\"xpub2\\\": \\\"xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY\\\"}, {\\\"fingerprint\\\": \\\"3442193e\\\", \\\"xpub1\\\": \\\"xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8\\\"}]'\")\n+            + HelpExampleCli(\"createmultisigwallet\", \"\\\"AutomaticMultisigWallet\\\" 2 '[{\\\"fingerprint\\\": \\\"d34db33f\\\"}, {\\\"fingerprint\\\": \\\"3442193e\\\"}]'\")\n             + HelpExampleRpc(\"createmultisigwallet\", \"\\\"ManualMultisigWallet\\\", 2, '[{\\\"fingerprint\\\": \\\"d34db33f\\\", \\\"xpub2\\\": \\\"xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY\\\"}, {\\\"fingerprint\\\": \\\"3442193e\\\", \\\"xpub1\\\": \\\"xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8\\\"}]'\")\n+            + HelpExampleRpc(\"createmultisigwallet\", \"\\\"AutomaticMultisigWallet\\\", 2, '[{\\\"fingerprint\\\": \\\"d34db33f\\\"}, {\\\"fingerprint\\\": \\\"3442193e\\\"}]'\")\n         },\n     }.Check(request);\n \n@@ -2810,13 +2813,39 @@ static UniValue createmultisigwallet(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"invalid BIP32 fingerprint: %s\", fingerprint));\n         }\n \n+#ifdef ENABLE_EXTERNAL_SIGNER\n+        const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n+        if (command == \"\") throw JSONRPCError(RPC_WALLET_ERROR, \"Error: restart bitcoind with -signer=<cmd>\");\n+        std::string chain = gArgs.GetChainName();\n+        const bool mainnet = chain == CBaseChainParams::MAIN;\n+        ExternalSigner signer = ExternalSigner(command, fingerprint, mainnet, \"\" /* dummy name */);\n+#endif\n+\n         std::string xpub1 = \"\";\n         std::string xpub2 = \"\";\n         if(signer_data.exists(\"xpub1\")) {\n             xpub1 = signer_data[\"xpub\"].get_str();\n+        } else {\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+            flags |= WALLET_FLAG_EXTERNAL_SIGNER;\n+            UniValue result = signer.getXpub(\"m/48h/0h/0h/1h\");\n+            if (!result.exists(\"xpub\")) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: unable to obtain xpub1 for signer %s\", fingerprint));\n+            }\n+            xpub1 = result[\"xpub\"].get_str();\n+#endif\n         }\n         if(signer_data.exists(\"xpub2\")) {\n             xpub2 = signer_data[\"xpub2\"].get_str();\n+        } else {\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+            flags |= WALLET_FLAG_EXTERNAL_SIGNER;\n+            UniValue result = signer.getXpub(\"m/48h/0h/0h/2h\");\n+            if (!result.exists(\"xpub\")) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: unable to obtain xpub2 for signer %s\", fingerprint));\n+            }\n+            xpub2 = result[\"xpub\"].get_str();\n+#endif\n         }\n         if (xpub1 == \"\" && xpub2 == \"\") {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"missing xpub for native and/or wrapped SegWit for signer %s\", fingerprint));\n@@ -2838,6 +2867,7 @@ static UniValue createmultisigwallet(const JSONRPCRequest& request)\n     std::string error;\n     std::vector<std::string> warnings;\n     std::shared_ptr<CWallet> wallet;\n+\n     WalletCreationStatus status = CreateMultisigWallet(*g_rpc_chain, flags, request.params[0].get_str(), threshold, devices, error, warnings, wallet);\n     switch (status) {\n         case WalletCreationStatus::CREATION_FAILED:"
      }
    ]
  },
  {
    "sha": "e0deaf5853f9c03a3c5b3e4cffd6aa626dee2fca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGRlYWY1ODUzZjljMDNhM2M1YjNlNGNmZmQ2YWE2MjZkZWUyZmNh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-09-17T10:20:00Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:06:23Z"
      },
      "message": "[wallet] CreateTransaction: iterate detected external signers",
      "tree": {
        "sha": "21c04132afb8dfeb328e4cc316ec1634efa7a552",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21c04132afb8dfeb328e4cc316ec1634efa7a552"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0deaf5853f9c03a3c5b3e4cffd6aa626dee2fca",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGx8ACgkQV/+b28ww\nEAkJCRAAuoB/F2tnevDM5tGemCr+epep2h4Gv3HBF/5KuL+8/+6fVIs1upcAatGR\nL9bE4EiXyp6j+k2bREi8RWpx0U/x+TVN3Pm5jHtUYeB+Ws6p1/tSq44AZzgIqcsw\nCxTn7wjxPakasWtnwL9kxXYUeuaHOI2+5e86wP3HMIIgc8XOf+wxppjXAm1PhwKp\nACqxEY4Ep/KiFFTl5tp8krHOBKiYexZgyL8G4NL3Fl6RquE95B4GSQlC3AbwcuBW\nlULlq3Y+vUGMRijV319Hijs5xoc+/RULw5sEOcAVfNYjpuO9NoGeGTFp25QkUYC8\nBXFBRT2qm87tXaZfw2FqerX2pVToHEudc3FNsA+lmMYT857+QfGkF3sjWurQgRGD\n3oIdsWQs3ll0pq0by3TaGA2tpEK/6PfUeankmdbA84g1+zBECoS99sHtzfVIpY59\nhiEszqFCrFPkqOkYyecko6zv1WGqjaPGYGXxsbEaJUfX9eTanaZ7lAuPuQ4kvydC\nfzQr8O7NUMqRWyt44qpPQrqbmyEE0zLDzoWJtvZj9wRHtQEJ5F8y7W3ki241q7wL\nPaGusBwQezckpWVFhgW0q+DxBUurMD/0nje1KZo5ffnH9DO3Up1Bg+sn4excYnQ4\nB9GcAZ+/2ljxCHSw8O8Wb3RsbAmKfupXxApLw8PLlMLz8nvQBIM=\n=YJLe\n-----END PGP SIGNATURE-----",
        "payload": "tree 21c04132afb8dfeb328e4cc316ec1634efa7a552\nparent f11aadad9137f748e40e92e3b260ebb31136e583\nauthor Sjors Provoost <sjors@sprovoost.nl> 1568715600 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407583 +0100\n\n[wallet] CreateTransaction: iterate detected external signers\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0deaf5853f9c03a3c5b3e4cffd6aa626dee2fca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0deaf5853f9c03a3c5b3e4cffd6aa626dee2fca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0deaf5853f9c03a3c5b3e4cffd6aa626dee2fca/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f11aadad9137f748e40e92e3b260ebb31136e583",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f11aadad9137f748e40e92e3b260ebb31136e583",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f11aadad9137f748e40e92e3b260ebb31136e583"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a1ff237d6f190b296732d3f2458245ba8cfc130a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0deaf5853f9c03a3c5b3e4cffd6aa626dee2fca/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0deaf5853f9c03a3c5b3e4cffd6aa626dee2fca/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e0deaf5853f9c03a3c5b3e4cffd6aa626dee2fca",
        "patch": "@@ -2976,11 +2976,12 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 std::vector<ExternalSigner> signers;\n                 ExternalSigner::Enumerate(command, signers, mainnet);\n                 if (signers.empty()) throw std::runtime_error(std::string(__func__) + \": No external signers found\");\n-                // TODO: add fingerprint argument in case of multiple signers\n-                ExternalSigner signer = signers[0];\n+                for (ExternalSigner signer : signers) {\n+                    if( !signer.signTransaction(psbtx, strFailReason)) return false;\n+                    complete = FinalizeAndExtractPSBT(psbtx, txNew);\n+                    if (complete) break;\n+                }\n \n-                if( !signer.signTransaction(psbtx, strFailReason)) return false;\n-                complete = FinalizeAndExtractPSBT(psbtx, txNew);\n                 if (!complete) {\n                     strFailReason = \"PSBT incomplete\";\n                     return false;"
      }
    ]
  },
  {
    "sha": "651ef6b69581283e5761bdd14c7bdaca29c9774a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTFlZjZiNjk1ODEyODNlNTc2MWJkZDE0YzdiZGFjYTI5Yzk3NzRh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-09-17T10:32:17Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:06:23Z"
      },
      "message": "[wallet] CreateTransaction return PSBT if incomplete",
      "tree": {
        "sha": "8fbf2d5bb0a7f15e45551245b7f482ebb56d8610",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fbf2d5bb0a7f15e45551245b7f482ebb56d8610"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/651ef6b69581283e5761bdd14c7bdaca29c9774a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGx8ACgkQV/+b28ww\nEAn91RAAqb3jr/Oj4S1WUIc6KRzDU8drshLkGb2JcQ+tItfICnJNhFMD2wZ7DUWX\ntq4/qGjnDkny71vCNnO7eB5QINarfb152hbF871QqjCpn2H9+hTqYZ/1nIU77OJC\nl50531qmSnYBjFxVhUddKIUIIQ9rNoHO+uh0BaX+aALN8cQeGO/a1lIoFopU0Lvk\nx48F5JzJTPsajoIkdTHdf8uvBO231mpCsGJoYNA/IHc3U3bBLwpB9pn3OF8tzupM\nvAte9aQoN+BI6bryr4KzmWj+hC0nN/gygAO4W/N7GFrr56zoYbXVIfllqbXcAk9R\nHw68yoxP+2JIiwe90C54Z3TwS78XXwLxADDDapoxKPv3V556eCqTspgfvJRCqpc0\nsx/bsfpcTThiHW9x2v3cZwejrMLfZ5JqhEsyMkiRUMslHnTtqRSQotl1fNIR/fFa\nMvEqtFVkr5RLbzSrBnKOJz9IbSEIXDADzwzJSYOrmJ786MR7nsuXOAEiHvkQkugr\nGruixF+r47d/U+So2ffDt2GqULGrMRIatgzmimCl320XpHif7hdJBkN0w9TKxQOE\nEV5K1CzAJoFYP/Kq3sb+A6E2yIaUP4z+g1grbuiFbltPlry2vZPsb+E5/CKwZpgd\npzIsRpeQb3PNwUI3K3UBV8C6YBP0ufDZcJW8JG+0OXTUIipbGZU=\n=J5+v\n-----END PGP SIGNATURE-----",
        "payload": "tree 8fbf2d5bb0a7f15e45551245b7f482ebb56d8610\nparent e0deaf5853f9c03a3c5b3e4cffd6aa626dee2fca\nauthor Sjors Provoost <sjors@sprovoost.nl> 1568716337 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407583 +0100\n\n[wallet] CreateTransaction return PSBT if incomplete\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/651ef6b69581283e5761bdd14c7bdaca29c9774a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/651ef6b69581283e5761bdd14c7bdaca29c9774a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/651ef6b69581283e5761bdd14c7bdaca29c9774a/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0deaf5853f9c03a3c5b3e4cffd6aa626dee2fca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0deaf5853f9c03a3c5b3e4cffd6aa626dee2fca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0deaf5853f9c03a3c5b3e4cffd6aa626dee2fca"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "52acd8eadd83542cb84c779871b7c9fa2829a68d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/651ef6b69581283e5761bdd14c7bdaca29c9774a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/651ef6b69581283e5761bdd14c7bdaca29c9774a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=651ef6b69581283e5761bdd14c7bdaca29c9774a",
        "patch": "@@ -2983,7 +2983,10 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 }\n \n                 if (!complete) {\n-                    strFailReason = \"PSBT incomplete\";\n+                    // TODO: return PSBT properly\n+                    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+                    ssTx << psbtx;\n+                    strFailReason = EncodeBase64(ssTx.str());\n                     return false;\n                 }\n #else"
      }
    ]
  },
  {
    "sha": "3fda68ed0a3e869b32dc29e64e98019b24bec244",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmRhNjhlZDBhM2U4NjliMzJkYzI5ZTY0ZTk4MDE5YjI0YmVjMjQ0",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-09-17T10:32:38Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T18:06:24Z"
      },
      "message": "[rpc] walletprocesspsbt: use external signers when available",
      "tree": {
        "sha": "cdb3de92bad4ba99ef60a1ec32290bb5ec9695fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdb3de92bad4ba99ef60a1ec32290bb5ec9695fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fda68ed0a3e869b32dc29e64e98019b24bec244",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl4zGyAACgkQV/+b28ww\nEAkZqBAAgg5nqmAD0ErIYFuZMit6DbYPJTRhFbihRV35yyQszIzmMzLC7YVHQVf8\nscDvO8qB07r/vcdsD9yQ5LD01UIP9DxujUVSyFGKsoO9jHUys77lBxg9rnyoqBYe\n2lZazOlcBlv8WNRIawUqlXC6+K1NrbUvzQ17+IjZmbfYlhwocivbJdqersj1NGcT\nNWZatz+0T8VlP9t54OgMbMm2Vo30ico9tfJU+D6ChHj1o5v2r9KmGtPEM/c5SS5k\nentJtR9savkdtG7FXRpaaPNQR7JvLXQz/hj1aHXidu2+0fBp9BbqA2q/ttQfkrf1\nuZ+80vGSqPrJq9xHl9XWm2OOsFh6DCxcYtw5kQKuVTW5JxTa43Bmszglg0py32b1\nmipQdOSYo6TvV42bban/N8W4s9R/cDvKA6HP71cPthzt8D0hcbUuXthY1J5EgOaS\ns6JV+YBAyGoECD1E5cON3QiHXryUAMNIzNlhcCa9XV0Q8okKkeQp6XcXsQVvSlNt\nYMa6ek872uH8TCQOWhZXwG8vE37E0dXA4Cu6LEoMtkROCfWmvYfSRoytcnrCHCXh\nUBPveR1FJTCAhPRd4Noe0iVIZEpACfFO03Aan3KOcq1GhLCaF+aeh+rJMisKPsrO\n7OZXg7v8DvwQ5Fri//jxgH1GxQ45MoPgRqfphXQ0QTPwg6jXcSM=\n=vuFr\n-----END PGP SIGNATURE-----",
        "payload": "tree cdb3de92bad4ba99ef60a1ec32290bb5ec9695fb\nparent 651ef6b69581283e5761bdd14c7bdaca29c9774a\nauthor Sjors Provoost <sjors@sprovoost.nl> 1568716358 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580407584 +0100\n\n[rpc] walletprocesspsbt: use external signers when available\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fda68ed0a3e869b32dc29e64e98019b24bec244",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fda68ed0a3e869b32dc29e64e98019b24bec244",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fda68ed0a3e869b32dc29e64e98019b24bec244/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "651ef6b69581283e5761bdd14c7bdaca29c9774a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/651ef6b69581283e5761bdd14c7bdaca29c9774a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/651ef6b69581283e5761bdd14c7bdaca29c9774a"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "09e303354913ea312aa96090f4b0336974060f1c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fda68ed0a3e869b32dc29e64e98019b24bec244/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fda68ed0a3e869b32dc29e64e98019b24bec244/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3fda68ed0a3e869b32dc29e64e98019b24bec244",
        "patch": "@@ -4252,6 +4252,26 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n         throw JSONRPCTransactionError(err);\n     }\n \n+#ifdef ENABLE_EXTERNAL_SIGNER\n+    if (!complete && pwallet->IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER)) {\n+        const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n+        if (command == \"\") throw std::runtime_error(std::string(__func__) + \": restart bitcoind with -signer=<cmd>\");\n+\n+        std::string chain = gArgs.GetChainName();\n+        const bool mainnet = chain == CBaseChainParams::MAIN;\n+        std::vector<ExternalSigner> signers;\n+        ExternalSigner::Enumerate(command, signers, mainnet);\n+        if (signers.empty()) throw std::runtime_error(std::string(__func__) + \": No external signers found\");\n+\n+        for (ExternalSigner signer : signers) {\n+            std::string strFailReason;\n+            if( !signer.signTransaction(psbtx, strFailReason)) JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Signing failed %s\", strFailReason));\n+            complete = FinalizePSBT(psbtx);\n+            if (complete) break;\n+        }\n+    }\n+#endif\n+\n     UniValue result(UniValue::VOBJ);\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << psbtx;"
      }
    ]
  }
]