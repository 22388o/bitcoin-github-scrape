[
  {
    "sha": "ffff866da83209dcaa463d8b9539d3f539f83a97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmZmODY2ZGE4MzIwOWRjYWE0NjNkOGI5NTM5ZDNmNTM5ZjgzYTk3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-03T19:20:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-03T19:33:56Z"
      },
      "message": "[qa] Remove misleading \"errorString syntax\"",
      "tree": {
        "sha": "d1adb0a90470bee083786f288ca8a9c46a29ae8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1adb0a90470bee083786f288ca8a9c46a29ae8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffff866da83209dcaa463d8b9539d3f539f83a97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffff866da83209dcaa463d8b9539d3f539f83a97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffff866da83209dcaa463d8b9539d3f539f83a97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffff866da83209dcaa463d8b9539d3f539f83a97/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e662a76288011fe6a640f1c02c2381284ad93a03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e662a76288011fe6a640f1c02c2381284ad93a03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e662a76288011fe6a640f1c02c2381284ad93a03"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 16,
      "deletions": 19
    },
    "files": [
      {
        "sha": "a9324196ee488b67933216dc0a438643e61facc3",
        "filename": "qa/rpc-tests/importprunedfunds.py",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff866da83209dcaa463d8b9539d3f539f83a97/qa/rpc-tests/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff866da83209dcaa463d8b9539d3f539f83a97/qa/rpc-tests/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importprunedfunds.py?ref=ffff866da83209dcaa463d8b9539d3f539f83a97",
        "patch": "@@ -83,9 +83,10 @@ def run_test (self):\n         try:\n             result1 = self.nodes[1].importprunedfunds(rawtxn1, proof1, \"\")\n         except JSONRPCException as e:\n-            errorString = e.error['message']\n+            assert('No addresses' in e.error['message'])\n+        else:\n+            assert(False)\n \n-        assert('No addresses' in errorString)\n \n         balance1 = self.nodes[1].getbalance(\"\", 0, True)\n         assert_equal(balance1, Decimal(0))\n@@ -120,9 +121,10 @@ def run_test (self):\n         try:\n             self.nodes[1].removeprunedfunds(txnid1)\n         except JSONRPCException as e:\n-            errorString = e.error['message']\n+            assert('does not exist' in e.error['message'])\n+        else:\n+            assert(False)\n \n-        assert('does not exist' in errorString)\n \n         balance1 = Decimal(self.nodes[1].getbalance(\"\", 0, True))\n         assert_equal(balance1, Decimal('0.075'))"
      },
      {
        "sha": "762a6d6a30c219f04e0c0b09bdc0d8c9b265ea42",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff866da83209dcaa463d8b9539d3f539f83a97/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff866da83209dcaa463d8b9539d3f539f83a97/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=ffff866da83209dcaa463d8b9539d3f539f83a97",
        "patch": "@@ -56,13 +56,13 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         rawtx   = self.nodes[2].signrawtransaction(rawtx)\n \n-        errorString = \"\"\n         try:\n             rawtx   = self.nodes[2].sendrawtransaction(rawtx['hex'])\n         except JSONRPCException as e:\n-            errorString = e.error['message']\n+            assert(\"Missing inputs\" in e.error['message'])\n+        else:\n+            assert(False)\n \n-        assert(\"Missing inputs\" in errorString)\n \n         #########################\n         # RAW TX MULTISIG TESTS #"
      },
      {
        "sha": "8fdcea50b6329d89cae0ee28a8f805b2c8ab45bf",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff866da83209dcaa463d8b9539d3f539f83a97/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff866da83209dcaa463d8b9539d3f539f83a97/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=ffff866da83209dcaa463d8b9539d3f539f83a97",
        "patch": "@@ -245,22 +245,20 @@ def run_test (self):\n         txObj = self.nodes[0].gettransaction(txId)\n         assert_equal(txObj['amount'], Decimal('-0.0001'))\n \n-        #this should fail\n-        errorString = \"\"\n         try:\n             txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"1f-4\")\n         except JSONRPCException as e:\n-            errorString = e.error['message']\n+            assert(\"Invalid amount\" in e.error['message'])\n+        else:\n+            raise AssertionError(\"Must not parse invalid amounts\")\n \n-        assert(\"Invalid amount\" in errorString)\n \n-        errorString = \"\"\n         try:\n-            self.nodes[0].generate(\"2\") #use a string to as block amount parameter must fail because it's not interpreted as amount\n+            self.nodes[0].generate(\"2\")\n+            raise AssertionError(\"Must not accept strings as numeric\")\n         except JSONRPCException as e:\n-            errorString = e.error['message']\n+            assert(\"not an integer\" in e.error['message'])\n \n-        assert(\"not an integer\" in errorString)\n \n         # Mine a block from node0 to an address from node1\n         cbAddr = self.nodes[1].getnewaddress()\n@@ -269,10 +267,7 @@ def run_test (self):\n         self.sync_all()\n \n         # Check that the txid and balance is found by node1\n-        try:\n-            self.nodes[1].gettransaction(cbTxId)\n-        except JSONRPCException as e:\n-            assert(\"Invalid or non-wallet transaction id\" not in e.error['message'])\n+        self.nodes[1].gettransaction(cbTxId)\n \n         #check if wallet or blochchain maintenance changes the balance\n         self.sync_all()"
      }
    ]
  }
]