meshcollider,2017-11-07T22:46:28Z,"Impressive simplification, Concept ACK",https://github.com/bitcoin/bitcoin/pull/11630#issuecomment-342649520,342649520,
fanquake,2017-11-08T00:33:15Z,"All Travis failures seem to be the same issue in signmessages.py\n```\n    self.run_test()\n  File ""/home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-unknown-linux-gnu/test/functional/signmessages.py"", line 24, in run_test\n    assert(self.nodes[0].verifymessage(address, signature, message))\n  File ""/home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-unknown-linux-gnu/test/function",https://github.com/bitcoin/bitcoin/pull/11630#issuecomment-342670460,342670460,
sipa,2017-11-08T17:14:13Z,"@fanquake Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/11630#issuecomment-342887774,342887774,
TheBlueMatt,2017-12-08T17:18:28Z,utACK 16a01bf1a2a318effbbac4a22f1092fee1924dc8. Would be nice to add these folks to test_bitcoin_fuzzy.cpp!,https://github.com/bitcoin/bitcoin/pull/11630#issuecomment-350319445,350319445,
laanwj,2018-03-01T22:59:21Z,utACK. Needs rebase in src/utilstrencodings.cpp.,https://github.com/bitcoin/bitcoin/pull/11630#issuecomment-369760900,369760900,
sipa,2018-03-05T21:57:23Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/11630#issuecomment-370581411,370581411,
laanwj,2018-03-06T23:10:22Z,Needs rebase after #11372,https://github.com/bitcoin/bitcoin/pull/11630#issuecomment-370962605,370962605,
sipa,2018-03-07T04:30:34Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/11630#issuecomment-371019275,371019275,
sipa,2018-03-07T14:58:21Z,Added reserves in several places.,https://github.com/bitcoin/bitcoin/pull/11630#issuecomment-371165144,371165144,
laanwj,2018-03-07T15:23:33Z,"> Added reserves in several places.\n\nThanks!\n\nutACK b3ea8ccb7af475703b97246a2baf2e105d24d6f9",https://github.com/bitcoin/bitcoin/pull/11630#issuecomment-371173536,371173536,
promag,2017-11-08T20:40:30Z,Any reason to not reserve? Doesn't pay off?,https://github.com/bitcoin/bitcoin/pull/11630#discussion_r149790402,149790402,src/utilstrencodings.cpp
promag,2017-11-08T22:53:24Z,Not sure but isn't `(p - e) & 7 == 0` faster? Or does the compiler optimise this case?,https://github.com/bitcoin/bitcoin/pull/11630#discussion_r149821574,149821574,src/utilstrencodings.cpp
sipa,2017-11-17T02:04:21Z,Strength reduction will do that for you at -O1 and higher.,https://github.com/bitcoin/bitcoin/pull/11630#discussion_r151587493,151587493,src/utilstrencodings.cpp
laanwj,2018-03-05T22:19:05Z,"It seems a bit of a pity to allocate and fill an intermediate vector here, which is just the contents of the string mapped through `decode64_table`. Could we maybe wrap the iterator to weave this into ConvertBits?\n(to be clear, this could be done later, no need to do so in this PR, but as the rest of the changes is so elegant it just jumped out)",https://github.com/bitcoin/bitcoin/pull/11630#discussion_r172348508,172348508,src/utilstrencodings.cpp
sipa,2018-03-07T04:31:52Z,"@laanwj I actually tried that, and it became a bit more complex than I wanted to do in this PR.",https://github.com/bitcoin/bitcoin/pull/11630#discussion_r172738952,172738952,src/utilstrencodings.cpp
laanwj,2018-03-07T13:51:21Z,"Yes it seems quite annoying to do so in C++, iterators are tricky enough to make this seemingly trivial thing non-trivial :/\n\nSo as we keep it like this, we should heed @promag's suggestion and reserve, I think.",https://github.com/bitcoin/bitcoin/pull/11630#discussion_r172846586,172846586,src/utilstrencodings.cpp
