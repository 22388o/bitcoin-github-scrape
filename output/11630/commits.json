[
  {
    "sha": "3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjk2YTNiYjdmYzBhNmM0N2I2MGM3OWU5NjhkYmY4MTc1ZDZiNzE2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-11-23T01:04:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-07T04:28:08Z"
      },
      "message": "Generalize ConvertBits",
      "tree": {
        "sha": "b62ed5ee923c4c61e8023a91674f8a6e7ab70034",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b62ed5ee923c4c61e8023a91674f8a6e7ab70034"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b225010a808d475cbb53aeed484295f8dc8751c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b225010a808d475cbb53aeed484295f8dc8751c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b225010a808d475cbb53aeed484295f8dc8751c4"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0cc492767997103702aadde765090b326ba065d2",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
        "patch": "@@ -43,14 +43,14 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n     std::string operator()(const WitnessV0KeyHash& id) const\n     {\n         std::vector<unsigned char> data = {0};\n-        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.begin(), id.end());\n         return bech32::Encode(m_params.Bech32HRP(), data);\n     }\n \n     std::string operator()(const WitnessV0ScriptHash& id) const\n     {\n         std::vector<unsigned char> data = {0};\n-        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.begin(), id.end());\n         return bech32::Encode(m_params.Bech32HRP(), data);\n     }\n \n@@ -60,7 +60,7 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n             return {};\n         }\n         std::vector<unsigned char> data = {(unsigned char)id.version};\n-        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.program, id.program + id.length);\n         return bech32::Encode(m_params.Bech32HRP(), data);\n     }\n \n@@ -94,7 +94,7 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n         // Bech32 decoding\n         int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n         // The rest of the symbols are converted witness program bytes.\n-        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+        if (ConvertBits<5, 8, false>([&](unsigned char c) { data.push_back(c); }, bech.second.begin() + 1, bech.second.end())) {\n             if (version == 0) {\n                 {\n                     WitnessV0KeyHash keyid;"
      },
      {
        "sha": "1c9cca90b2f110be44ae57cb558a2a4fee9bf8f0",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
        "patch": "@@ -151,7 +151,7 @@ bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n \n /** Convert from one power-of-2 number base to another. */\n template<int frombits, int tobits, bool pad, typename O, typename I>\n-bool ConvertBits(O& out, I it, I end) {\n+bool ConvertBits(const O& outfn, I it, I end) {\n     size_t acc = 0;\n     size_t bits = 0;\n     constexpr size_t maxv = (1 << tobits) - 1;\n@@ -161,12 +161,12 @@ bool ConvertBits(O& out, I it, I end) {\n         bits += frombits;\n         while (bits >= tobits) {\n             bits -= tobits;\n-            out.push_back((acc >> bits) & maxv);\n+            outfn((acc >> bits) & maxv);\n         }\n         ++it;\n     }\n     if (pad) {\n-        if (bits) out.push_back((acc << (tobits - bits)) & maxv);\n+        if (bits) outfn((acc << (tobits - bits)) & maxv);\n     } else if (bits >= frombits || ((acc << (tobits - bits)) & maxv)) {\n         return false;\n     }"
      }
    ]
  },
  {
    "sha": "b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2VhOGNjYjdhZjQ3NTcwM2I5NzI0NmEyYmFmMmUxMDVkMjRkNmY5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-11-07T22:24:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-07T15:04:07Z"
      },
      "message": "Simplify Base32 and Base64 conversions",
      "tree": {
        "sha": "7d0f9685476bd35d332ebd7a43c0193bcb8c040d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d0f9685476bd35d332ebd7a43c0193bcb8c040d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716"
      }
    ],
    "stats": {
      "total": 309,
      "additions": 62,
      "deletions": 247
    },
    "files": [
      {
        "sha": "c2dc511989e6e29b07c5dbcd2a18be97af5bb861",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
        "patch": "@@ -43,13 +43,15 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n     std::string operator()(const WitnessV0KeyHash& id) const\n     {\n         std::vector<unsigned char> data = {0};\n+        data.reserve(33);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.begin(), id.end());\n         return bech32::Encode(m_params.Bech32HRP(), data);\n     }\n \n     std::string operator()(const WitnessV0ScriptHash& id) const\n     {\n         std::vector<unsigned char> data = {0};\n+        data.reserve(53);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.begin(), id.end());\n         return bech32::Encode(m_params.Bech32HRP(), data);\n     }\n@@ -60,6 +62,7 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n             return {};\n         }\n         std::vector<unsigned char> data = {(unsigned char)id.version};\n+        data.reserve(1 + (id.length * 8 + 4) / 5);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.program, id.program + id.length);\n         return bech32::Encode(m_params.Bech32HRP(), data);\n     }\n@@ -94,6 +97,7 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n         // Bech32 decoding\n         int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n         // The rest of the symbols are converted witness program bytes.\n+        data.reserve(((bech.second.size() - 1) * 5) / 8);\n         if (ConvertBits<5, 8, false>([&](unsigned char c) { data.push_back(c); }, bech.second.begin() + 1, bech.second.end())) {\n             if (version == 0) {\n                 {"
      },
      {
        "sha": "1210c7a7eec46e82b61872b4e66f4cdb2af10cf6",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
        "patch": "@@ -16,9 +16,9 @@ BOOST_AUTO_TEST_CASE(base32_testvectors)\n     for (unsigned int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n     {\n         std::string strEnc = EncodeBase32(vstrIn[i]);\n-        BOOST_CHECK(strEnc == vstrOut[i]);\n+        BOOST_CHECK_EQUAL(strEnc, vstrOut[i]);\n         std::string strDec = DecodeBase32(vstrOut[i]);\n-        BOOST_CHECK(strDec == vstrIn[i]);\n+        BOOST_CHECK_EQUAL(strDec, vstrIn[i]);\n     }\n }\n "
      },
      {
        "sha": "f785cede81db81b7c92595237f9a1c16447784be",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
        "patch": "@@ -16,9 +16,9 @@ BOOST_AUTO_TEST_CASE(base64_testvectors)\n     for (unsigned int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n     {\n         std::string strEnc = EncodeBase64(vstrIn[i]);\n-        BOOST_CHECK(strEnc == vstrOut[i]);\n+        BOOST_CHECK_EQUAL(strEnc, vstrOut[i]);\n         std::string strDec = DecodeBase64(strEnc);\n-        BOOST_CHECK(strDec == vstrIn[i]);\n+        BOOST_CHECK_EQUAL(strDec, vstrIn[i]);\n     }\n }\n "
      },
      {
        "sha": "d1025fc7bf6b9236b5fc2a6e87ed87819fa92b72",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 243,
        "changes": 297,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
        "patch": "@@ -127,46 +127,11 @@ std::string EncodeBase64(const unsigned char* pch, size_t len)\n {\n     static const char *pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n \n-    std::string strRet;\n-    strRet.reserve((len+2)/3*4);\n-\n-    int mode=0, left=0;\n-    const unsigned char *pchEnd = pch+len;\n-\n-    while (pch<pchEnd)\n-    {\n-        int enc = *(pch++);\n-        switch (mode)\n-        {\n-            case 0: // we have no bits\n-                strRet += pbase64[enc >> 2];\n-                left = (enc & 3) << 4;\n-                mode = 1;\n-                break;\n-\n-            case 1: // we have two bits\n-                strRet += pbase64[left | (enc >> 4)];\n-                left = (enc & 15) << 2;\n-                mode = 2;\n-                break;\n-\n-            case 2: // we have four bits\n-                strRet += pbase64[left | (enc >> 6)];\n-                strRet += pbase64[enc & 63];\n-                mode = 0;\n-                break;\n-        }\n-    }\n-\n-    if (mode)\n-    {\n-        strRet += pbase64[left];\n-        strRet += '=';\n-        if (mode == 1)\n-            strRet += '=';\n-    }\n-\n-    return strRet;\n+    std::string str;\n+    str.reserve(((len + 2) / 3) * 4);\n+    ConvertBits<8, 6, true>([&](int v) { str += pbase64[v]; }, pch, pch + len);\n+    while (str.size() % 4) str += '=';\n+    return str;\n }\n \n std::string EncodeBase64(const std::string& str)\n@@ -193,68 +158,32 @@ std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n     };\n \n-    if (pfInvalid)\n-        *pfInvalid = false;\n-\n-    std::vector<unsigned char> vchRet;\n-    vchRet.reserve(strlen(p)*3/4);\n-\n-    int mode = 0;\n-    int left = 0;\n-\n-    while (1)\n-    {\n-         int dec = decode64_table[(unsigned char)*p];\n-         if (dec == -1) break;\n-         p++;\n-         switch (mode)\n-         {\n-             case 0: // we have no bits and get 6\n-                 left = dec;\n-                 mode = 1;\n-                 break;\n-\n-              case 1: // we have 6 bits and keep 4\n-                  vchRet.push_back((left<<2) | (dec>>4));\n-                  left = dec & 15;\n-                  mode = 2;\n-                  break;\n-\n-             case 2: // we have 4 bits and get 6, we keep 2\n-                 vchRet.push_back((left<<4) | (dec>>2));\n-                 left = dec & 3;\n-                 mode = 3;\n-                 break;\n-\n-             case 3: // we have 2 bits and get 6\n-                 vchRet.push_back((left<<6) | dec);\n-                 mode = 0;\n-                 break;\n-         }\n+    const char* e = p;\n+    std::vector<uint8_t> val;\n+    val.reserve(strlen(p));\n+    while (*p != 0) {\n+        int x = decode64_table[(unsigned char)*p];\n+        if (x == -1) break;\n+        val.push_back(x);\n+        ++p;\n     }\n \n-    if (pfInvalid)\n-        switch (mode)\n-        {\n-            case 0: // 4n base64 characters processed: ok\n-                break;\n-\n-            case 1: // 4n+1 base64 character processed: impossible\n-                *pfInvalid = true;\n-                break;\n-\n-            case 2: // 4n+2 base64 characters processed: require '=='\n-                if (left || p[0] != '=' || p[1] != '=' || decode64_table[(unsigned char)p[2]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 3: // 4n+3 base64 characters processed: require '='\n-                if (left || p[0] != '=' || decode64_table[(unsigned char)p[1]] != -1)\n-                    *pfInvalid = true;\n-                break;\n+    std::vector<unsigned char> ret;\n+    ret.reserve((val.size() * 3) / 4);\n+    bool valid = ConvertBits<6, 8, false>([&](unsigned char c) { ret.push_back(c); }, val.begin(), val.end());\n+\n+    const char* q = p;\n+    while (valid && *p != 0) {\n+        if (*p != '=') {\n+            valid = false;\n+            break;\n         }\n+        ++p;\n+    }\n+    valid = valid && (p - e) % 4 == 0 && p - q < 4;\n+    if (pfInvalid) *pfInvalid = !valid;\n \n-    return vchRet;\n+    return ret;\n }\n \n std::string DecodeBase64(const std::string& str)\n@@ -267,59 +196,11 @@ std::string EncodeBase32(const unsigned char* pch, size_t len)\n {\n     static const char *pbase32 = \"abcdefghijklmnopqrstuvwxyz234567\";\n \n-    std::string strRet;\n-    strRet.reserve((len+4)/5*8);\n-\n-    int mode=0, left=0;\n-    const unsigned char *pchEnd = pch+len;\n-\n-    while (pch<pchEnd)\n-    {\n-        int enc = *(pch++);\n-        switch (mode)\n-        {\n-            case 0: // we have no bits\n-                strRet += pbase32[enc >> 3];\n-                left = (enc & 7) << 2;\n-                mode = 1;\n-                break;\n-\n-            case 1: // we have three bits\n-                strRet += pbase32[left | (enc >> 6)];\n-                strRet += pbase32[(enc >> 1) & 31];\n-                left = (enc & 1) << 4;\n-                mode = 2;\n-                break;\n-\n-            case 2: // we have one bit\n-                strRet += pbase32[left | (enc >> 4)];\n-                left = (enc & 15) << 1;\n-                mode = 3;\n-                break;\n-\n-            case 3: // we have four bits\n-                strRet += pbase32[left | (enc >> 7)];\n-                strRet += pbase32[(enc >> 2) & 31];\n-                left = (enc & 3) << 3;\n-                mode = 4;\n-                break;\n-\n-            case 4: // we have two bits\n-                strRet += pbase32[left | (enc >> 5)];\n-                strRet += pbase32[enc & 31];\n-                mode = 0;\n-        }\n-    }\n-\n-    static const int nPadding[5] = {0, 6, 4, 3, 1};\n-    if (mode)\n-    {\n-        strRet += pbase32[left];\n-        for (int n=0; n<nPadding[mode]; n++)\n-             strRet += '=';\n-    }\n-\n-    return strRet;\n+    std::string str;\n+    str.reserve(((len + 4) / 5) * 8);\n+    ConvertBits<8, 5, true>([&](int v) { str += pbase32[v]; }, pch, pch + len);\n+    while (str.size() % 8) str += '=';\n+    return str;\n }\n \n std::string EncodeBase32(const std::string& str)\n@@ -346,102 +227,32 @@ std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n     };\n \n-    if (pfInvalid)\n-        *pfInvalid = false;\n-\n-    std::vector<unsigned char> vchRet;\n-    vchRet.reserve((strlen(p))*5/8);\n-\n-    int mode = 0;\n-    int left = 0;\n-\n-    while (1)\n-    {\n-         int dec = decode32_table[(unsigned char)*p];\n-         if (dec == -1) break;\n-         p++;\n-         switch (mode)\n-         {\n-             case 0: // we have no bits and get 5\n-                 left = dec;\n-                 mode = 1;\n-                 break;\n-\n-              case 1: // we have 5 bits and keep 2\n-                  vchRet.push_back((left<<3) | (dec>>2));\n-                  left = dec & 3;\n-                  mode = 2;\n-                  break;\n-\n-             case 2: // we have 2 bits and keep 7\n-                 left = left << 5 | dec;\n-                 mode = 3;\n-                 break;\n-\n-             case 3: // we have 7 bits and keep 4\n-                 vchRet.push_back((left<<1) | (dec>>4));\n-                 left = dec & 15;\n-                 mode = 4;\n-                 break;\n-\n-             case 4: // we have 4 bits, and keep 1\n-                 vchRet.push_back((left<<4) | (dec>>1));\n-                 left = dec & 1;\n-                 mode = 5;\n-                 break;\n-\n-             case 5: // we have 1 bit, and keep 6\n-                 left = left << 5 | dec;\n-                 mode = 6;\n-                 break;\n-\n-             case 6: // we have 6 bits, and keep 3\n-                 vchRet.push_back((left<<2) | (dec>>3));\n-                 left = dec & 7;\n-                 mode = 7;\n-                 break;\n-\n-             case 7: // we have 3 bits, and keep 0\n-                 vchRet.push_back((left<<5) | dec);\n-                 mode = 0;\n-                 break;\n-         }\n+    const char* e = p;\n+    std::vector<uint8_t> val;\n+    val.reserve(strlen(p));\n+    while (*p != 0) {\n+        int x = decode32_table[(unsigned char)*p];\n+        if (x == -1) break;\n+        val.push_back(x);\n+        ++p;\n     }\n \n-    if (pfInvalid)\n-        switch (mode)\n-        {\n-            case 0: // 8n base32 characters processed: ok\n-                break;\n-\n-            case 1: // 8n+1 base32 characters processed: impossible\n-            case 3: //   +3\n-            case 6: //   +6\n-                *pfInvalid = true;\n-                break;\n-\n-            case 2: // 8n+2 base32 characters processed: require '======'\n-                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || p[3] != '=' || p[4] != '=' || p[5] != '=' || decode32_table[(unsigned char)p[6]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 4: // 8n+4 base32 characters processed: require '===='\n-                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || p[3] != '=' || decode32_table[(unsigned char)p[4]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 5: // 8n+5 base32 characters processed: require '==='\n-                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || decode32_table[(unsigned char)p[3]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 7: // 8n+7 base32 characters processed: require '='\n-                if (left || p[0] != '=' || decode32_table[(unsigned char)p[1]] != -1)\n-                    *pfInvalid = true;\n-                break;\n+    std::vector<unsigned char> ret;\n+    ret.reserve((val.size() * 5) / 8);\n+    bool valid = ConvertBits<5, 8, false>([&](unsigned char c) { ret.push_back(c); }, val.begin(), val.end());\n+\n+    const char* q = p;\n+    while (valid && *p != 0) {\n+        if (*p != '=') {\n+            valid = false;\n+            break;\n         }\n+        ++p;\n+    }\n+    valid = valid && (p - e) % 8 == 0 && p - q < 8;\n+    if (pfInvalid) *pfInvalid = !valid;\n \n-    return vchRet;\n+    return ret;\n }\n \n std::string DecodeBase32(const std::string& str)"
      }
    ]
  }
]