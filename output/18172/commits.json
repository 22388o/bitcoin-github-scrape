[
  {
    "sha": "d6d2602a32251c1017da88b47c801b7283c66ce3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmQyNjAyYTMyMjUxYzEwMTdkYTg4YjQ3YzgwMWI3MjgzYzY2Y2Uz",
    "commit": {
      "author": {
        "name": "0xb10c",
        "email": "0xb10c@gmail.com",
        "date": "2020-02-17T23:28:06Z"
      },
      "committer": {
        "name": "0xb10c",
        "email": "0xb10c@gmail.com",
        "date": "2020-02-19T09:03:48Z"
      },
      "message": "add: test that transactions expire from mempool\n\nThis tests that a mempool transaction expires after a given timeout\nand its children are removed as well.\n\nBoth the default expiry timeout defied by DEFAULT_MEMPOOL_EXPIRY and\na user definable expiry timeout via the -mempoolexpiry=<n> command\nline argument (<n> is the timeout in hours) are tested.",
      "tree": {
        "sha": "d8409904bbf308f7916ddf20a90ecc206678b750",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8409904bbf308f7916ddf20a90ecc206678b750"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6d2602a32251c1017da88b47c801b7283c66ce3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6d2602a32251c1017da88b47c801b7283c66ce3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6d2602a32251c1017da88b47c801b7283c66ce3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6d2602a32251c1017da88b47c801b7283c66ce3/comments",
    "author": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68e841e0af223a220d1f037e4c5680c1b228aa3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68e841e0af223a220d1f037e4c5680c1b228aa3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68e841e0af223a220d1f037e4c5680c1b228aa3e"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 101,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8b9b7b155a76db5b78f5b3b965d38c2ab17a31a2",
        "filename": "test/functional/mempool_expiry.py",
        "status": "added",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d2602a32251c1017da88b47c801b7283c66ce3/test/functional/mempool_expiry.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d2602a32251c1017da88b47c801b7283c66ce3/test/functional/mempool_expiry.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_expiry.py?ref=d6d2602a32251c1017da88b47c801b7283c66ce3",
        "patch": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336  # hours\n+CUSTOM_MEMPOOL_EXPIRY = 10  # hours\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)['time']\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)['hex']\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info('Broadcast child transaction after {} hours.'.format(\n+            timedelta(seconds=(half_expiry_time-entry_time))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info('Test parent tx not expired after {} hours.'.format(\n+            timedelta(seconds=(nearly_expiry_time-entry_time))))\n+        assert_equal(entry_time, node.getmempoolentry(parent_txid)['time'])\n+\n+        # Transaction should be evicted from the mempool after the expiry time\n+        # has passed.\n+        expiry_time = entry_time + 60 * 60 * timeout + 5\n+        node.setmocktime(expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info('Test parent tx expiry after {} hours.'.format(\n+            timedelta(seconds=(expiry_time-entry_time))))\n+        assert_raises_rpc_error(-5, 'Transaction not in mempool',\n+                                node.getmempoolentry, parent_txid)\n+\n+        # The child transaction should be removed from the mempool as well.\n+        self.log.info('Test child tx is evicted as well.')\n+        assert_raises_rpc_error(-5, 'Transaction not in mempool',\n+                                node.getmempoolentry, child_txid)\n+\n+    def run_test(self):\n+        self.log.info('Test default mempool expiry timeout of %d hours.' %\n+                      DEFAULT_MEMPOOL_EXPIRY)\n+        self.test_transaction_expiry(DEFAULT_MEMPOOL_EXPIRY)\n+\n+        self.log.info('Test custom mempool expiry timeout of %d hours.' %\n+                      CUSTOM_MEMPOOL_EXPIRY)\n+        self.restart_node(0, ['-mempoolexpiry=%d' % CUSTOM_MEMPOOL_EXPIRY])\n+        self.test_transaction_expiry(CUSTOM_MEMPOOL_EXPIRY)\n+\n+\n+if __name__ == '__main__':\n+    MempoolExpiryTest().main()"
      },
      {
        "sha": "06d939afb7a260c908f0285864464af2f34fd30f",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d2602a32251c1017da88b47c801b7283c66ce3/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d2602a32251c1017da88b47c801b7283c66ce3/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d6d2602a32251c1017da88b47c801b7283c66ce3",
        "patch": "@@ -175,6 +175,7 @@\n     'wallet_balance.py',\n     'feature_nulldummy.py',\n     'mempool_accept.py',\n+    'mempool_expiry.py',\n     'wallet_import_rescan.py',\n     'wallet_import_with_label.py',\n     'rpc_bind.py --ipv4',"
      }
    ]
  }
]