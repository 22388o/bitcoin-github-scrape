[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587482492",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#issuecomment-587482492",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18172",
    "id": 587482492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzQ4MjQ5Mg==",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?u=a20996a145f1be613c7b0a57e75d36508572e29d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-18T14:20:07Z",
    "updated_at": "2020-02-18T14:20:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thank you for the review @theStack! Addressed comments and force pushed.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587482492/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587927916",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#issuecomment-587927916",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18172",
    "id": 587927916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzkyNzkxNg==",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?u=a20996a145f1be613c7b0a57e75d36508572e29d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-18T22:08:36Z",
    "updated_at": "2020-02-18T22:08:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @promag and @MarcoFalke! Addressed nit's, but decided to keep https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380937939 open for now. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587927916/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/588280105",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#issuecomment-588280105",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18172",
    "id": 588280105,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4ODI4MDEwNQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-19T15:05:35Z",
    "updated_at": "2020-02-19T15:05:35Z",
    "author_association": "MEMBER",
    "body": "ACK d6d2602a32251c1017da88b47c801b7283c66ce3",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/588280105/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589742040",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#issuecomment-589742040",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18172",
    "id": 589742040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4OTc0MjA0MA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-21T17:00:38Z",
    "updated_at": "2020-02-21T17:00:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--2502f1a698b3751726fa55edcda76cd3-->\n\n### Coverage\n\n| Coverage  | Change ([pull 18172](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/18172/total.coverage/index.html), 8ed789fe4894a474074a55657b83f7d659aa35e0) | Reference ([master](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/index.html), eb3c6b0912349873113bfd49baf1c505bb48d9cf)   |\n|-----------|-------------------------|--------------------|\n| Lines     | +0.0202 %            | 89.9453 %        |\n| Functions | +0.0000 %            | 85.8836 %        |\n| Branches  | +0.0241 %            | 51.5363 %        |\n\n<sup>Updated at: 2020-02-21T17:00:37.583978.</sup>\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589742040/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589754963",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#issuecomment-589754963",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18172",
    "id": 589754963,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4OTc1NDk2Mw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-21T17:33:07Z",
    "updated_at": "2020-02-21T17:33:07Z",
    "author_association": "MEMBER",
    "body": "Before https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/src/validation.cpp.gcov.html#318\r\n\r\nAfter https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/18172/total.coverage/src/validation.cpp.gcov.html#318",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589754963/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380680793",
    "pull_request_review_id": 360348882,
    "id": 380680793,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY4MDc5Mw==",
    "diff_hunk": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defied by DEFAULT_MEMPOOL_EXPIRY and a user",
    "path": "test/functional/mempool_expiry.py",
    "position": null,
    "original_position": 8,
    "commit_id": "d6d2602a32251c1017da88b47c801b7283c66ce3",
    "original_commit_id": "a7aced8fb6f309ce02167590713b1827febcc7f7",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "typo: s/defied/defined",
    "created_at": "2020-02-18T13:47:45Z",
    "updated_at": "2020-02-19T09:04:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380680793",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380680793"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380680793"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380680793/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 8,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380682245",
    "pull_request_review_id": 360348882,
    "id": 380682245,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY4MjI0NQ==",
    "diff_hunk": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defied by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (assert_equal, assert_raises_rpc_error,\n+                                 find_vout_for_address)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(\n+            str(timedelta(seconds=(nearly_expiry_time-entry_time)))))\n+        assert_equal(entry_time, node.getmempoolentry(parent_txid)[\"time\"])\n+\n+        # Transaction should be evicted from the mempool after the expiry time\n+        # has passed.\n+        expiry_time = entry_time + 60 * 60 * timeout + 5\n+        node.setmocktime(expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx expiry after {} hours.\".format(\n+            str(timedelta(seconds=(expiry_time-entry_time)))))\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\",\n+                                node.getmempoolentry, parent_txid)\n+\n+        # The child transaction should be removed from the mempool as well.\n+        self.log.info(\"Test child tx is evicted as well.\")\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\",\n+                                node.getmempoolentry, child_txid)\n+\n+    def run_test(self):\n+\n+        self.log.info(\"Test default mempool expiry timeout of %d hours.\" %\n+                      DEFAULT_MEMPOOL_EXPIRY)\n+        self.test_transaction_expiry(DEFAULT_MEMPOOL_EXPIRY)\n+\n+        self.log.info(\"----\")\n+\n+        CUSTOM_MEMPOOL_EXPIRY = 10",
    "path": "test/functional/mempool_expiry.py",
    "position": null,
    "original_position": 92,
    "commit_id": "d6d2602a32251c1017da88b47c801b7283c66ce3",
    "original_commit_id": "a7aced8fb6f309ce02167590713b1827febcc7f7",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could be moved to the top, right below `DEFAULT_MEMPOOL_EXPIRY`, to have all expiry constants at one place?",
    "created_at": "2020-02-18T13:50:22Z",
    "updated_at": "2020-02-19T09:04:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380682245",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380682245"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380682245"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380682245/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 92,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380685327",
    "pull_request_review_id": 360348882,
    "id": 380685327,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY4NTMyNw==",
    "diff_hunk": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defied by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (assert_equal, assert_raises_rpc_error,\n+                                 find_vout_for_address)",
    "path": "test/functional/mempool_expiry.py",
    "position": null,
    "original_position": 17,
    "commit_id": "d6d2602a32251c1017da88b47c801b7283c66ce3",
    "original_commit_id": "a7aced8fb6f309ce02167590713b1827febcc7f7",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If not all imports fit on one line, usually each import is on a single line, e.g.:\r\nhttps://github.com/bitcoin/bitcoin/blob/36f42e1bf43f2c9f3b4642814051cedf66f05a5e/test/functional/rpc_fundrawtransaction.py#L9-L18\r\n",
    "created_at": "2020-02-18T13:55:36Z",
    "updated_at": "2020-02-19T09:04:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380685327",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380685327"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380685327"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380685327/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 16,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 17,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380785284",
    "pull_request_review_id": 360483807,
    "id": 380785284,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc4NTI4NA==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))",
    "path": "test/functional/mempool_expiry.py",
    "position": null,
    "original_position": 58,
    "commit_id": "d6d2602a32251c1017da88b47c801b7283c66ce3",
    "original_commit_id": "608c572077ff39d4183ac65aa0b332659977766a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think `str(` is not needed when using `format(`",
    "created_at": "2020-02-18T16:26:23Z",
    "updated_at": "2020-02-19T09:04:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380785284",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380785284"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380785284"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380785284/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380793633",
    "pull_request_review_id": 360494316,
    "id": 380793633,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5MzYzMw==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))",
    "path": "test/functional/mempool_expiry.py",
    "position": null,
    "original_position": 58,
    "commit_id": "d6d2602a32251c1017da88b47c801b7283c66ce3",
    "original_commit_id": "608c572077ff39d4183ac65aa0b332659977766a",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "will remove it on the next push",
    "created_at": "2020-02-18T16:39:22Z",
    "updated_at": "2020-02-19T09:04:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380793633",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380793633"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380793633"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380793633/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT",
    "in_reply_to_id": 380785284
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380935667",
    "pull_request_review_id": 360673702,
    "id": 380935667,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNTY2Nw==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(\n+            str(timedelta(seconds=(nearly_expiry_time-entry_time)))))\n+        assert_equal(entry_time, node.getmempoolentry(parent_txid)[\"time\"])\n+\n+        # Transaction should be evicted from the mempool after the expiry time\n+        # has passed.\n+        expiry_time = entry_time + 60 * 60 * timeout + 5\n+        node.setmocktime(expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx expiry after {} hours.\".format(\n+            str(timedelta(seconds=(expiry_time-entry_time)))))\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\",\n+                                node.getmempoolentry, parent_txid)\n+\n+        # The child transaction should be removed from the mempool as well.\n+        self.log.info(\"Test child tx is evicted as well.\")\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\",\n+                                node.getmempoolentry, child_txid)\n+\n+    def run_test(self):\n+\n+        self.log.info(\"Test default mempool expiry timeout of %d hours.\" %\n+                      DEFAULT_MEMPOOL_EXPIRY)\n+        self.test_transaction_expiry(DEFAULT_MEMPOOL_EXPIRY)\n+\n+        self.log.info(\"----\")",
    "path": "test/functional/mempool_expiry.py",
    "position": null,
    "original_position": 94,
    "commit_id": "d6d2602a32251c1017da88b47c801b7283c66ce3",
    "original_commit_id": "608c572077ff39d4183ac65aa0b332659977766a",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit, I'd drop this.",
    "created_at": "2020-02-18T21:08:46Z",
    "updated_at": "2020-02-19T09:04:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380935667",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380935667"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380935667"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380935667/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 94,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380935982",
    "pull_request_review_id": 360673702,
    "id": 380935982,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNTk4Mg==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336",
    "path": "test/functional/mempool_expiry.py",
    "position": null,
    "original_position": 22,
    "commit_id": "d6d2602a32251c1017da88b47c801b7283c66ce3",
    "original_commit_id": "608c572077ff39d4183ac65aa0b332659977766a",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit, add comment with unit.",
    "created_at": "2020-02-18T21:09:24Z",
    "updated_at": "2020-02-19T09:04:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380935982",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380935982"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380935982"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380935982/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 22,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380936458",
    "pull_request_review_id": 360673702,
    "id": 380936458,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjQ1OA==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]",
    "path": "test/functional/mempool_expiry.py",
    "position": null,
    "original_position": 43,
    "commit_id": "d6d2602a32251c1017da88b47c801b7283c66ce3",
    "original_commit_id": "608c572077ff39d4183ac65aa0b332659977766a",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit, could stick to `\"` or `'` for strings. My preference is `'`.",
    "created_at": "2020-02-18T21:10:14Z",
    "updated_at": "2020-02-19T09:04:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380936458",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380936458"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380936458"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380936458/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 43,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380937939",
    "pull_request_review_id": 360673702,
    "id": 380937939,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNzkzOQ==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(",
    "path": "test/functional/mempool_expiry.py",
    "position": null,
    "original_position": 67,
    "commit_id": "d6d2602a32251c1017da88b47c801b7283c66ce3",
    "original_commit_id": "608c572077ff39d4183ac65aa0b332659977766a",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit, maybe keep these as comment instead? Not sure if logging this adds value.",
    "created_at": "2020-02-18T21:12:54Z",
    "updated_at": "2020-02-19T09:04:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380937939",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380937939"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380937939"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380937939/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380938108",
    "pull_request_review_id": 360673702,
    "id": 380938108,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzODEwOA==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(\n+            str(timedelta(seconds=(nearly_expiry_time-entry_time)))))\n+        assert_equal(entry_time, node.getmempoolentry(parent_txid)[\"time\"])\n+\n+        # Transaction should be evicted from the mempool after the expiry time\n+        # has passed.\n+        expiry_time = entry_time + 60 * 60 * timeout + 5\n+        node.setmocktime(expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx expiry after {} hours.\".format(\n+            str(timedelta(seconds=(expiry_time-entry_time)))))\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\",\n+                                node.getmempoolentry, parent_txid)\n+\n+        # The child transaction should be removed from the mempool as well.\n+        self.log.info(\"Test child tx is evicted as well.\")\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\",\n+                                node.getmempoolentry, child_txid)\n+\n+    def run_test(self):\n+",
    "path": "test/functional/mempool_expiry.py",
    "position": null,
    "original_position": 89,
    "commit_id": "d6d2602a32251c1017da88b47c801b7283c66ce3",
    "original_commit_id": "608c572077ff39d4183ac65aa0b332659977766a",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit, drop empty line?",
    "created_at": "2020-02-18T21:13:17Z",
    "updated_at": "2020-02-19T09:04:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380938108",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380938108"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380938108"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380938108/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 89,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380944577",
    "pull_request_review_id": 360684570,
    "id": 380944577,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NDU3Nw==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(",
    "path": "test/functional/mempool_expiry.py",
    "position": null,
    "original_position": 67,
    "commit_id": "d6d2602a32251c1017da88b47c801b7283c66ce3",
    "original_commit_id": "608c572077ff39d4183ac65aa0b332659977766a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Logging is preferred over inline comments in the test because logging statements serve as \"checkpoints\" (to see how far a test run until failure). Also, they help to illustrate the test log better, which would otherwise only contain Bitcoin Core logs.",
    "created_at": "2020-02-18T21:26:54Z",
    "updated_at": "2020-02-19T09:04:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380944577",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380944577"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380944577"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380944577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT",
    "in_reply_to_id": 380937939
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380947691",
    "pull_request_review_id": 360688454,
    "id": 380947691,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NzY5MQ==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(",
    "path": "test/functional/mempool_expiry.py",
    "position": null,
    "original_position": 67,
    "commit_id": "d6d2602a32251c1017da88b47c801b7283c66ce3",
    "original_commit_id": "608c572077ff39d4183ac65aa0b332659977766a",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "When a test fails we see trace. I think logging makes sense when it shows some computed values or so, which a trace doesn't help.",
    "created_at": "2020-02-18T21:33:11Z",
    "updated_at": "2020-02-19T09:04:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380947691",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380947691"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380947691"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380947691/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT",
    "in_reply_to_id": 380937939
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380953432",
    "pull_request_review_id": 360695668,
    "id": 380953432,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MzQzMg==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(",
    "path": "test/functional/mempool_expiry.py",
    "position": null,
    "original_position": 67,
    "commit_id": "d6d2602a32251c1017da88b47c801b7283c66ce3",
    "original_commit_id": "608c572077ff39d4183ac65aa0b332659977766a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The trace is one data point that can help debug a test failure. The entire history of the log up to that point is also useful. For example transaction relay (inv-getdata) often takes several seconds, so it is useful to know when a subtest has started and when it ended. If some Bitcoin Core logs from one subtest interleave with the ones of another subtest we can conclude that we are missing a syncronisation call. This is the most common test error we are running into.",
    "created_at": "2020-02-18T21:45:04Z",
    "updated_at": "2020-02-19T09:04:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380953432",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380953432"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380953432"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380953432/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT",
    "in_reply_to_id": 380937939
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380954952",
    "pull_request_review_id": 360697339,
    "id": 380954952,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1NDk1Mg==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(",
    "path": "test/functional/mempool_expiry.py",
    "position": null,
    "original_position": 67,
    "commit_id": "d6d2602a32251c1017da88b47c801b7283c66ce3",
    "original_commit_id": "608c572077ff39d4183ac65aa0b332659977766a",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes makes sense in those cases.",
    "created_at": "2020-02-18T21:47:49Z",
    "updated_at": "2020-02-19T09:04:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380954952",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380954952"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380954952"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380954952/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT",
    "in_reply_to_id": 380937939
  }
]