dcousens,2017-06-16T03:58:29Z,"Why bother with the class?\nPractically a namespace at this point?",https://github.com/bitcoin/bitcoin/pull/10600#issuecomment-308926888,308926888,
ryanofsky,2017-06-16T10:02:13Z,"> Why bother with the class?\n> Practically a namespace at this point?\n\nI don't see a problem with using a class as a namespace, but happy to change if you think it is in bad taste and have a different suggestion. Note that the files are called feebumper.h/cpp so if you want to replace the class with something else, it might involve file renames. This PR is really more concerned with simplify",https://github.com/bitcoin/bitcoin/pull/10600#issuecomment-308986463,308986463,
sipa,2017-08-27T20:06:19Z,"I agree that if all of a class's methods have become `static` it's better to turn it into a namespace of functions, but don't care strongly. If so, I don't think a file rename is necessary.",https://github.com/bitcoin/bitcoin/pull/10600#issuecomment-325221081,325221081,
ryanofsky,2017-08-28T14:21:28Z,"> I agree that if all of a class's methods have become static it's better to turn it into a namespace of functions, but don't care strongly. If so, I don't think a file rename is necessary.\n\nThanks @sipa, removed class without renaming file.\n\nAdded commit 1ea35974529622eb16fe5710bee6719dfc205c31 -> 47c5601d5f6a992d9c46d8300de248374d6eb066 ([pr/ipc-bump.6](https://github.com/ryanofsky/bitco",https://github.com/bitcoin/bitcoin/pull/10600#issuecomment-325367202,325367202,
promag,2017-08-28T14:38:12Z,"> because it means the feebumper object either has to be serialized back and forth between Qt and wallet processes between fee bump calls\n\nThat is a problem or inconvenient?",https://github.com/bitcoin/bitcoin/pull/10600#issuecomment-325372001,325372001,
ryanofsky,2017-08-28T14:55:39Z,">> because it means the feebumper object either has to be serialized back and forth between Qt and wallet processes between fee bump calls\n\n> That is a problem or inconvenient?\n\nThese should just be plain function calls because there are no advantages to having a stateful FeeBumper object. Making the feebumper class serializable is dumb because it will add new code that send extra data tha",https://github.com/bitcoin/bitcoin/pull/10600#issuecomment-325377110,325377110,
TheBlueMatt,2017-09-07T20:30:24Z,utACK 2b2158ae5e21927f332c06ed72239bd2f4392dd9,https://github.com/bitcoin/bitcoin/pull/10600#issuecomment-327919014,327919014,
jnewbery,2017-09-19T20:04:47Z,"I like this, but the commits are structured in a way that makes it more difficult to review than necessary. I think you can remove the first commit that changes all the functions to static (since you're removing the class entirely in a later commit). I also think some of the intermediate commits could perhaps be squashed, although I haven't looked to closely at them.\n\nIf you're not interested ",https://github.com/bitcoin/bitcoin/pull/10600#issuecomment-330657474,330657474,
ryanofsky,2017-09-20T21:09:13Z,"Reset 2b2158ae5e21927f332c06ed72239bd2f4392dd9 -> 510e19c8c9d3c3b33a37dc601835f264df0c6685 ([pr/ipc-bump.9](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-bump.9) -> [pr/ipc-bump.10](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-bump.10))\n\nNew branch was written by @jnewbery. Has several changes:\n\n- Simplifies history so related changes are better grouped together.\n- Rebased o",https://github.com/bitcoin/bitcoin/pull/10600#issuecomment-330981706,330981706,
ryanofsky,2017-09-20T21:30:53Z,"Updated 510e19c8c9d3c3b33a37dc601835f264df0c6685 -> 2db9e0a3d123dd7c7f5eb74fdefdb5dba189055b ([pr/ipc-bump.10](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-bump.10) -> [pr/ipc-bump.11](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-bump.11))\n\nAnother update from @jnewbery, adding to TransactionCanBeBumped to the namespace.",https://github.com/bitcoin/bitcoin/pull/10600#issuecomment-330986916,330986916,
jnewbery,2017-09-20T21:37:51Z,"Tested ACK 2db9e0a3d123dd7c7f5eb74fdefdb5dba189055b. This should be trivially reviewable now. The first two commits in particular are just mechanical changes. The third commit changes the feebumper from a stateful class to stateless function calls, but the code change is minimal (the only real change is the way that errors are propagated back to the caller).\n\n@promag - I've left out your sugge",https://github.com/bitcoin/bitcoin/pull/10600#issuecomment-330988487,330988487,
MarcoFalke,2017-11-10T19:25:36Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/10600#issuecomment-343563550,343563550,
jnewbery,2017-11-10T22:20:58Z,rebased,https://github.com/bitcoin/bitcoin/pull/10600#issuecomment-343602548,343602548,
promag,2017-08-28T21:25:48Z,"It's in the original code, but is it necessary to lock `cs_main`? The same applies for other functions.",https://github.com/bitcoin/bitcoin/pull/10600#discussion_r135639557,135639557,src/wallet/feebumper.cpp
promag,2017-08-28T21:32:47Z,"At least in the headers we could fix to snake_case, it doesn't make the patch bigger. WDYT?",https://github.com/bitcoin/bitcoin/pull/10600#discussion_r135641158,135641158,src/wallet/feebumper.h
promag,2017-08-28T21:33:40Z,Use doxygen compatible comments as per developer notes?,https://github.com/bitcoin/bitcoin/pull/10600#discussion_r135641342,135641342,src/wallet/feebumper.h
promag,2017-08-28T21:36:01Z,One line?,https://github.com/bitcoin/bitcoin/pull/10600#discussion_r135641866,135641866,src/wallet/feebumper.h
ryanofsky,2017-08-29T09:19:24Z,"> It's in the original code, but is it necessary to lock cs_main? The same applies for other functions.\n\nGood catch! Fixed in 6a0131608e738f7fcf8ae9efb8ea54bf749ffe85. In the other places cs_main is required for preconditionChecks. Note that in #10973, I replace accesses to `cs_main` global throughout wallet code with `ipc_locked` locals, so it is immediately obvious where locking is and isn't",https://github.com/bitcoin/bitcoin/pull/10600#discussion_r135736764,135736764,src/wallet/feebumper.cpp
ryanofsky,2017-08-29T09:44:31Z,"> One line?\n\nI use clang-format for everything, and avoid manual formatting, so that's where this comes from. Would prefer not to change unless someone thinks this is a problem.",https://github.com/bitcoin/bitcoin/pull/10600#discussion_r135742545,135742545,src/wallet/feebumper.h
ryanofsky,2017-08-29T09:46:04Z,"> Use doxygen compatible comments as per developer notes?\n\nDone in db134b451b7c5871e12bf7ef947d7745446e96f4",https://github.com/bitcoin/bitcoin/pull/10600#discussion_r135742966,135742966,src/wallet/feebumper.h
ryanofsky,2017-08-29T09:46:17Z,"> At least in the headers we could fix to snake_case, it doesn't make the patch bigger. WDYT?\n\nDone in db134b451b7c5871e12bf7ef947d7745446e96f4",https://github.com/bitcoin/bitcoin/pull/10600#discussion_r135743008,135743008,src/wallet/feebumper.h
TheBlueMatt,2017-09-06T23:00:17Z,Can you document the exact locking requirements in GetWalletTx in wallet.h or wallet.cpp just to make sure someone doesnt do some crazy-ass change in the future and blow up the lockorder?,https://github.com/bitcoin/bitcoin/pull/10600#discussion_r137411519,137411519,src/wallet/feebumper.cpp
TheBlueMatt,2017-09-06T23:03:29Z,"Yes, please do this, but also please keep names consistent between the cpp and h.",https://github.com/bitcoin/bitcoin/pull/10600#discussion_r137412047,137412047,src/wallet/feebumper.h
ryanofsky,2017-09-06T23:43:20Z,Done in 52301dbe0ee05c6bb8b5e187d7d5384a7f7bef5c,https://github.com/bitcoin/bitcoin/pull/10600#discussion_r137417403,137417403,src/wallet/feebumper.h
ryanofsky,2017-09-06T23:43:49Z,"> Can you document the exact locking requirements in GetWalletTx in wallet.h or wallet.cpp just to make sure someone doesnt do some crazy-ass change in the future and blow up the lockorder?\n\nDone in 3a7c0dfafbd3b8fc1e32f40d98a7614bc190635d. I could go further and assert cs_wallet lock is held in GetWalletTx, though that is getting pretty far afield. Could open a separate PR.",https://github.com/bitcoin/bitcoin/pull/10600#discussion_r137417465,137417465,src/wallet/feebumper.cpp
MarcoFalke,2017-11-15T17:20:09Z,nit: `txid_dummy`?,https://github.com/bitcoin/bitcoin/pull/10600#discussion_r151194487,151194487,src/qt/walletmodel.cpp
MarcoFalke,2017-11-15T17:33:15Z,nit: `total_fee`,https://github.com/bitcoin/bitcoin/pull/10600#discussion_r151197799,151197799,src/qt/walletmodel.cpp
