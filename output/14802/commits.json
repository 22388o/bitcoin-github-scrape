[
  {
    "sha": "d20d7567528e216badb8475df298bb3cec008985",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjBkNzU2NzUyOGUyMTZiYWRiODQ3NWRmMjk4YmIzY2VjMDA4OTg1",
    "commit": {
      "author": {
        "name": "Felix Weis",
        "email": "mail@felixweis.com",
        "date": "2019-05-10T12:21:52Z"
      },
      "committer": {
        "name": "Felix Weis",
        "email": "mail@felixweis.com",
        "date": "2019-05-10T12:33:14Z"
      },
      "message": "rpc: faster getblockstats using BlockUndo data\n\nUsing undo data for a block (rev?????.dat) we can retrieve value information about prevouts and calculate the final transaction fee (rate). This approach is about 80x faster, drops the requirement for -txindex, and works for all non-pruned blocks.",
      "tree": {
        "sha": "30be8c3046d254111e6122727db663600d306a8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30be8c3046d254111e6122727db663600d306a8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d20d7567528e216badb8475df298bb3cec008985",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d20d7567528e216badb8475df298bb3cec008985",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d20d7567528e216badb8475df298bb3cec008985",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d20d7567528e216badb8475df298bb3cec008985/comments",
    "author": {
      "login": "FelixWeis",
      "id": 551068,
      "node_id": "MDQ6VXNlcjU1MTA2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/551068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FelixWeis",
      "html_url": "https://github.com/FelixWeis",
      "followers_url": "https://api.github.com/users/FelixWeis/followers",
      "following_url": "https://api.github.com/users/FelixWeis/following{/other_user}",
      "gists_url": "https://api.github.com/users/FelixWeis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FelixWeis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FelixWeis/subscriptions",
      "organizations_url": "https://api.github.com/users/FelixWeis/orgs",
      "repos_url": "https://api.github.com/users/FelixWeis/repos",
      "events_url": "https://api.github.com/users/FelixWeis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FelixWeis/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "FelixWeis",
      "id": 551068,
      "node_id": "MDQ6VXNlcjU1MTA2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/551068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FelixWeis",
      "html_url": "https://github.com/FelixWeis",
      "followers_url": "https://api.github.com/users/FelixWeis/followers",
      "following_url": "https://api.github.com/users/FelixWeis/following{/other_user}",
      "gists_url": "https://api.github.com/users/FelixWeis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FelixWeis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FelixWeis/subscriptions",
      "organizations_url": "https://api.github.com/users/FelixWeis/orgs",
      "repos_url": "https://api.github.com/users/FelixWeis/repos",
      "events_url": "https://api.github.com/users/FelixWeis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FelixWeis/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08bd21a3bda9f621948c535e951880d7e318caa5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08bd21a3bda9f621948c535e951880d7e318caa5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08bd21a3bda9f621948c535e951880d7e318caa5"
      }
    ],
    "stats": {
      "total": 361,
      "additions": 174,
      "deletions": 187
    },
    "files": [
      {
        "sha": "1fcc38866a3842c835bcc5edc1a9ac5abd15136e",
        "filename": "doc/release-notes-14802.md",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d20d7567528e216badb8475df298bb3cec008985/doc/release-notes-14802.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d20d7567528e216badb8475df298bb3cec008985/doc/release-notes-14802.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14802.md?ref=d20d7567528e216badb8475df298bb3cec008985",
        "patch": "@@ -0,0 +1,3 @@\n+RPC changes\n+-----------\n+The `getblockstats` RPC is faster for fee calculation by using BlockUndo data. Also, `-txindex` is no longer required and `getblockstats` works for all non-pruned blocks."
      },
      {
        "sha": "73ff746bd705132afa1c5e582cc07a8ee3a0b970",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 15,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d20d7567528e216badb8475df298bb3cec008985/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d20d7567528e216badb8475df298bb3cec008985/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=d20d7567528e216badb8475df298bb3cec008985",
        "patch": "@@ -28,6 +28,7 @@\n #include <sync.h>\n #include <txdb.h>\n #include <txmempool.h>\n+#include <undo.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/validation.h>\n@@ -822,6 +823,20 @@ static CBlock GetBlockChecked(const CBlockIndex* pblockindex)\n     return block;\n }\n \n+static CBlockUndo GetUndoChecked(const CBlockIndex* pblockindex)\n+{\n+    CBlockUndo blockUndo;\n+    if (IsBlockPruned(pblockindex)) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Undo data not available (pruned data)\");\n+    }\n+\n+    if (!UndoReadFromDisk(blockUndo, pblockindex)) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Can't read undo data from disk\");\n+    }\n+\n+    return blockUndo;\n+}\n+\n static UniValue getblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -1783,8 +1798,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n {\n     const RPCHelpMan help{\"getblockstats\",\n                 \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n-                \"It won't work for some heights with pruning.\\n\"\n-                \"It won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\",\n+                \"It won't work for some heights with pruning.\\n\",\n                 {\n                     {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block hash or height of the target block\", \"\", {\"\", \"string or numeric\"}},\n                     {\"stats\", RPCArg::Type::ARR, /* default */ \"all values\", \"Values to plot (see result below)\",\n@@ -1879,6 +1893,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n     }\n \n     const CBlock block = GetBlockChecked(pindex);\n+    const CBlockUndo blockUndo = GetUndoChecked(pindex);\n \n     const bool do_all = stats.size() == 0; // Calculate everything if nothing selected (default)\n     const bool do_mediantxsize = do_all || stats.count(\"mediantxsize\") != 0;\n@@ -1892,10 +1907,6 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n     const bool do_calculate_weight = do_all || SetHasKeys(stats, \"total_weight\", \"avgfeerate\", \"swtotal_weight\", \"avgfeerate\", \"feerate_percentiles\", \"minfeerate\", \"maxfeerate\");\n     const bool do_calculate_sw = do_all || SetHasKeys(stats, \"swtxs\", \"swtotal_size\", \"swtotal_weight\");\n \n-    if (loop_inputs && !g_txindex) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"One or more of the selected stats requires -txindex enabled\");\n-    }\n-\n     CAmount maxfee = 0;\n     CAmount maxfeerate = 0;\n     CAmount minfee = MAX_MONEY;\n@@ -1916,7 +1927,8 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n     std::vector<std::pair<CAmount, int64_t>> feerate_array;\n     std::vector<int64_t> txsize_array;\n \n-    for (const auto& tx : block.vtx) {\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const auto& tx = block.vtx.at(i);\n         outputs += tx->vout.size();\n \n         CAmount tx_total_out = 0;\n@@ -1960,14 +1972,9 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n \n         if (loop_inputs) {\n             CAmount tx_total_in = 0;\n-            for (const CTxIn& in : tx->vin) {\n-                CTransactionRef tx_in;\n-                uint256 hashBlock;\n-                if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock)) {\n-                    throw JSONRPCError(RPC_INTERNAL_ERROR, std::string(\"Unexpected internal error (tx index seems corrupt)\"));\n-                }\n-\n-                CTxOut prevoutput = tx_in->vout[in.prevout.n];\n+            const auto& txundo = blockUndo.vtxundo.at(i - 1);\n+            for (const Coin& coin: txundo.vprevout) {\n+                const CTxOut& prevoutput = coin.out;\n \n                 tx_total_in += prevoutput.nValue;\n                 utxo_size_inc -= GetSerializeSize(prevoutput, PROTOCOL_VERSION) + PER_UTXO_OVERHEAD;"
      },
      {
        "sha": "16dbc5fe601b49e7a8571426b014313452f8a566",
        "filename": "test/functional/data/rpc_getblockstats.json",
        "status": "modified",
        "additions": 138,
        "deletions": 138,
        "changes": 276,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d20d7567528e216badb8475df298bb3cec008985/test/functional/data/rpc_getblockstats.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d20d7567528e216badb8475df298bb3cec008985/test/functional/data/rpc_getblockstats.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_getblockstats.json?ref=d20d7567528e216badb8475df298bb3cec008985"
      },
      {
        "sha": "efab69ac2632d6b553a083b873a27d753b5855d9",
        "filename": "test/functional/rpc_getblockstats.py",
        "status": "modified",
        "additions": 11,
        "deletions": 34,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d20d7567528e216badb8475df298bb3cec008985/test/functional/rpc_getblockstats.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d20d7567528e216badb8475df298bb3cec008985/test/functional/rpc_getblockstats.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockstats.py?ref=d20d7567528e216badb8475df298bb3cec008985",
        "patch": "@@ -13,26 +13,13 @@\n )\n import json\n import os\n-import time\n \n TESTSDIR = os.path.dirname(os.path.realpath(__file__))\n \n class GetblockstatsTest(BitcoinTestFramework):\n \n     start_height = 101\n     max_stat_pos = 2\n-    STATS_NEED_TXINDEX = [\n-        'avgfee',\n-        'avgfeerate',\n-        'maxfee',\n-        'maxfeerate',\n-        'medianfee',\n-        'feerate_percentiles',\n-        'minfee',\n-        'minfeerate',\n-        'totalfee',\n-        'utxo_size_inc',\n-    ]\n \n     def add_options(self, parser):\n         parser.add_argument('--gen-test-data', dest='gen_test_data',\n@@ -44,24 +31,26 @@ def add_options(self, parser):\n                             help='Test data file')\n \n     def set_test_params(self):\n-        self.num_nodes = 2\n-        self.extra_args = [['-txindex'], ['-paytxfee=0.003']]\n+        self.num_nodes = 1\n         self.setup_clean_chain = True\n \n     def get_stats(self):\n         return [self.nodes[0].getblockstats(hash_or_height=self.start_height + i) for i in range(self.max_stat_pos+1)]\n \n     def generate_test_data(self, filename):\n-        mocktime = time.time()\n+        mocktime = 1525107225\n+        self.nodes[0].setmocktime(mocktime)\n         self.nodes[0].generate(101)\n \n-        self.nodes[0].sendtoaddress(address=self.nodes[1].getnewaddress(), amount=10, subtractfeefromamount=True)\n+        address = self.nodes[0].get_deterministic_priv_key().address\n+        self.nodes[0].sendtoaddress(address=address, amount=10, subtractfeefromamount=True)\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        self.nodes[0].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=10, subtractfeefromamount=True)\n-        self.nodes[0].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=10, subtractfeefromamount=False)\n-        self.nodes[1].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=1, subtractfeefromamount=True)\n+        self.nodes[0].sendtoaddress(address=address, amount=10, subtractfeefromamount=True)\n+        self.nodes[0].sendtoaddress(address=address, amount=10, subtractfeefromamount=False)\n+        self.nodes[0].settxfee(amount=0.003)\n+        self.nodes[0].sendtoaddress(address=address, amount=1, subtractfeefromamount=True)\n         self.sync_all()\n         self.nodes[0].generate(1)\n \n@@ -93,11 +82,12 @@ def load_test_data(self, filename):\n \n         # Set the timestamps from the file so that the nodes can get out of Initial Block Download\n         self.nodes[0].setmocktime(mocktime)\n-        self.nodes[1].setmocktime(mocktime)\n+        self.sync_all()\n \n         for b in blocks:\n             self.nodes[0].submitblock(b)\n \n+\n     def run_test(self):\n         test_data = os.path.join(TESTSDIR, self.options.test_data)\n         if self.options.gen_test_data:\n@@ -107,9 +97,6 @@ def run_test(self):\n \n         self.sync_all()\n         stats = self.get_stats()\n-        expected_stats_noindex = []\n-        for stat_row in stats:\n-            expected_stats_noindex.append({k: v for k, v in stat_row.items() if k not in self.STATS_NEED_TXINDEX})\n \n         # Make sure all valid statistics are included but nothing else is\n         expected_keys = self.expected_stats[0].keys()\n@@ -127,10 +114,6 @@ def run_test(self):\n             stats_by_hash = self.nodes[0].getblockstats(hash_or_height=blockhash)\n             assert_equal(stats_by_hash, self.expected_stats[i])\n \n-            # Check with the node that has no txindex\n-            stats_no_txindex = self.nodes[1].getblockstats(hash_or_height=blockhash, stats=list(expected_stats_noindex[i].keys()))\n-            assert_equal(stats_no_txindex, expected_stats_noindex[i])\n-\n         # Make sure each stat can be queried on its own\n         for stat in expected_keys:\n             for i in range(self.max_stat_pos+1):\n@@ -168,12 +151,6 @@ def run_test(self):\n         # Make sure we aren't always returning inv_sel_stat as the culprit stat\n         assert_raises_rpc_error(-8, 'Invalid selected statistic aaa%s' % inv_sel_stat,\n                                 self.nodes[0].getblockstats, hash_or_height=1, stats=['minfee' , 'aaa%s' % inv_sel_stat])\n-\n-        assert_raises_rpc_error(-8, 'One or more of the selected stats requires -txindex enabled',\n-                                self.nodes[1].getblockstats, hash_or_height=1)\n-        assert_raises_rpc_error(-8, 'One or more of the selected stats requires -txindex enabled',\n-                                self.nodes[1].getblockstats, hash_or_height=self.start_height + self.max_stat_pos)\n-\n         # Mainchain's genesis block shouldn't be found on regtest\n         assert_raises_rpc_error(-5, 'Block not found', self.nodes[0].getblockstats,\n                                 hash_or_height='000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f')"
      }
    ]
  }
]