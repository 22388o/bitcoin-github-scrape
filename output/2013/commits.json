[
  {
    "sha": "e754cf4133c9c97e320ae5dec394e338524e650b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzU0Y2Y0MTMzYzljOTdlMzIwYWU1ZGVjMzk0ZTMzODUyNGU2NTBi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-11-14T21:18:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-11-15T23:12:33Z"
      },
      "message": "Split off CBlockHeader from CBlock\n\nCleaner and removes the need for the application-specific flags in\nserialize.h.",
      "tree": {
        "sha": "b2cf9b6c6c9d7f462c0e9874626093955c928a46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2cf9b6c6c9d7f462c0e9874626093955c928a46"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e754cf4133c9c97e320ae5dec394e338524e650b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e754cf4133c9c97e320ae5dec394e338524e650b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e754cf4133c9c97e320ae5dec394e338524e650b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e754cf4133c9c97e320ae5dec394e338524e650b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6caffb5358b1e403b293846b3c832433fa928e46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6caffb5358b1e403b293846b3c832433fa928e46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6caffb5358b1e403b293846b3c832433fa928e46"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 55,
      "deletions": 46
    },
    "files": [
      {
        "sha": "a75baf749fa4f2119ea8473e8e56fe20dcd330db",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e754cf4133c9c97e320ae5dec394e338524e650b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e754cf4133c9c97e320ae5dec394e338524e650b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e754cf4133c9c97e320ae5dec394e338524e650b",
        "patch": "@@ -998,21 +998,16 @@ CBlockIndex* FindBlockByHeight(int nHeight)\n     return pblockindex;\n }\n \n-bool CBlock::ReadFromDisk(const CBlockIndex* pindex, bool fReadTransactions)\n+bool CBlock::ReadFromDisk(const CBlockIndex* pindex)\n {\n-    if (!fReadTransactions)\n-    {\n-        *this = pindex->GetBlockHeader();\n-        return true;\n-    }\n-    if (!ReadFromDisk(pindex->GetBlockPos(), fReadTransactions))\n+    if (!ReadFromDisk(pindex->GetBlockPos()))\n         return false;\n     if (GetHash() != pindex->GetBlockHash())\n         return error(\"CBlock::ReadFromDisk() : GetHash() doesn't match index\");\n     return true;\n }\n \n-uint256 static GetOrphanRoot(const CBlock* pblock)\n+uint256 static GetOrphanRoot(const CBlockHeader* pblock)\n {\n     // Work back to the first block in the orphan chain\n     while (mapOrphanBlocks.count(pblock->hashPrevBlock))\n@@ -1059,7 +1054,7 @@ unsigned int ComputeMinWork(unsigned int nBase, int64 nTime)\n     return bnResult.GetCompact();\n }\n \n-unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlock *pblock)\n+unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock)\n {\n     unsigned int nProofOfWorkLimit = bnProofOfWorkLimit.GetCompact();\n \n@@ -1233,7 +1228,7 @@ bool ConnectBestBlock() {\n     } while(true);\n }\n \n-void CBlock::UpdateTime(const CBlockIndex* pindexPrev)\n+void CBlockHeader::UpdateTime(const CBlockIndex* pindexPrev)\n {\n     nTime = max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n \n@@ -3072,6 +3067,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 pindex = pindex->pnext;\n         }\n \n+        // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n         vector<CBlock> vHeaders;\n         int nLimit = 2000;\n         printf(\"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(0,20).c_str());"
      },
      {
        "sha": "994d0bfb6c911461a4913d57fed8ee2f52c039e6",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 47,
        "deletions": 30,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e754cf4133c9c97e320ae5dec394e338524e650b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e754cf4133c9c97e320ae5dec394e338524e650b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e754cf4133c9c97e320ae5dec394e338524e650b",
        "patch": "@@ -1068,7 +1068,7 @@ class CMerkleTx : public CTransaction\n  * in the block is a special one that creates a new coin owned by the creator\n  * of the block.\n  */\n-class CBlock\n+class CBlockHeader\n {\n public:\n     // header\n@@ -1080,17 +1080,7 @@ class CBlock\n     unsigned int nBits;\n     unsigned int nNonce;\n \n-    // network and disk\n-    std::vector<CTransaction> vtx;\n-\n-    // memory only\n-    mutable std::vector<uint256> vMerkleTree;\n-\n-    // Denial-of-service detection:\n-    mutable int nDoS;\n-    bool DoS(int nDoSIn, bool fIn) const { nDoS += nDoSIn; return fIn; }\n-\n-    CBlock()\n+    CBlockHeader()\n     {\n         SetNull();\n     }\n@@ -1104,25 +1094,16 @@ class CBlock\n         READWRITE(nTime);\n         READWRITE(nBits);\n         READWRITE(nNonce);\n-\n-        // ConnectBlock depends on vtx being last so it can calculate offset\n-        if (!(nType & (SER_GETHASH|SER_BLOCKHEADERONLY)))\n-            READWRITE(vtx);\n-        else if (fRead)\n-            const_cast<CBlock*>(this)->vtx.clear();\n     )\n \n     void SetNull()\n     {\n-        nVersion = CBlock::CURRENT_VERSION;\n+        nVersion = CBlockHeader::CURRENT_VERSION;\n         hashPrevBlock = 0;\n         hashMerkleRoot = 0;\n         nTime = 0;\n         nBits = 0;\n         nNonce = 0;\n-        vtx.clear();\n-        vMerkleTree.clear();\n-        nDoS = 0;\n     }\n \n     bool IsNull() const\n@@ -1141,7 +1122,45 @@ class CBlock\n     }\n \n     void UpdateTime(const CBlockIndex* pindexPrev);\n+};\n+\n+class CBlock : public CBlockHeader\n+{\n+public:\n+    // network and disk\n+    std::vector<CTransaction> vtx;\n+\n+    // memory only\n+    mutable std::vector<uint256> vMerkleTree;\n \n+    // Denial-of-service detection:\n+    mutable int nDoS;\n+    bool DoS(int nDoSIn, bool fIn) const { nDoS += nDoSIn; return fIn; }\n+\n+    CBlock()\n+    {\n+        SetNull();\n+    }\n+\n+    CBlock(const CBlockHeader &header)\n+    {\n+        SetNull();\n+        *((CBlockHeader*)this) = header;\n+    }\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        READWRITE(*(CBlockHeader*)this);\n+        READWRITE(vtx);\n+    )\n+\n+    void SetNull()\n+    {\n+        CBlockHeader::SetNull();\n+        vtx.clear();\n+        vMerkleTree.clear();\n+        nDoS = 0;\n+    }\n \n     uint256 BuildMerkleTree() const\n     {\n@@ -1226,16 +1245,14 @@ class CBlock\n         return true;\n     }\n \n-    bool ReadFromDisk(const CDiskBlockPos &pos, bool fReadTransactions = true)\n+    bool ReadFromDisk(const CDiskBlockPos &pos)\n     {\n         SetNull();\n \n         // Open history file to read\n         CAutoFile filein = CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n         if (!filein)\n             return error(\"CBlock::ReadFromDisk() : OpenBlockFile failed\");\n-        if (!fReadTransactions)\n-            filein.nType |= SER_BLOCKHEADERONLY;\n \n         // Read block\n         try {\n@@ -1282,7 +1299,7 @@ class CBlock\n     bool ConnectBlock(CBlockIndex *pindex, CCoinsViewCache &coins, bool fJustCheck=false);\n \n     // Read a block from disk\n-    bool ReadFromDisk(const CBlockIndex* pindex, bool fReadTransactions=true);\n+    bool ReadFromDisk(const CBlockIndex* pindex);\n \n     // Add this block to the block index, and if necessary, switch the active block chain to this\n     bool AddToBlockIndex(const CDiskBlockPos &pos);\n@@ -1447,7 +1464,7 @@ class CBlockIndex\n         nNonce         = 0;\n     }\n \n-    CBlockIndex(CBlock& block)\n+    CBlockIndex(CBlockHeader& block)\n     {\n         phashBlock = NULL;\n         pprev = NULL;\n@@ -1488,9 +1505,9 @@ class CBlockIndex\n         return ret;\n     }\n \n-    CBlock GetBlockHeader() const\n+    CBlockHeader GetBlockHeader() const\n     {\n-        CBlock block;\n+        CBlockHeader block;\n         block.nVersion       = nVersion;\n         if (pprev)\n             block.hashPrevBlock = pprev->GetBlockHash();\n@@ -1634,7 +1651,7 @@ class CDiskBlockIndex : public CBlockIndex\n \n     uint256 GetBlockHash() const\n     {\n-        CBlock block;\n+        CBlockHeader block;\n         block.nVersion        = nVersion;\n         block.hashPrevBlock   = hashPrev;\n         block.hashMerkleRoot  = hashMerkleRoot;"
      },
      {
        "sha": "5554f039a76e719668bb7d63323c58ddaaf1d4fc",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e754cf4133c9c97e320ae5dec394e338524e650b/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e754cf4133c9c97e320ae5dec394e338524e650b/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=e754cf4133c9c97e320ae5dec394e338524e650b",
        "patch": "@@ -154,7 +154,7 @@ Value getblock(const Array& params, bool fHelp)\n \n     CBlock block;\n     CBlockIndex* pblockindex = mapBlockIndex[hash];\n-    block.ReadFromDisk(pblockindex, true);\n+    block.ReadFromDisk(pblockindex);\n \n     return blockToJSON(block, pblockindex);\n }"
      },
      {
        "sha": "f2626281c185886da90e3f57ef9e5b4d840a515a",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e754cf4133c9c97e320ae5dec394e338524e650b/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e754cf4133c9c97e320ae5dec394e338524e650b/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=e754cf4133c9c97e320ae5dec394e338524e650b",
        "patch": "@@ -50,10 +50,6 @@ enum\n     SER_NETWORK         = (1 << 0),\n     SER_DISK            = (1 << 1),\n     SER_GETHASH         = (1 << 2),\n-\n-    // modifiers\n-    SER_SKIPSIG         = (1 << 16),\n-    SER_BLOCKHEADERONLY = (1 << 17),\n };\n \n #define IMPLEMENT_SERIALIZE(statements)    \\"
      },
      {
        "sha": "fdb03431b199f4e6febef4dfe291f06523041454",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e754cf4133c9c97e320ae5dec394e338524e650b/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e754cf4133c9c97e320ae5dec394e338524e650b/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=e754cf4133c9c97e320ae5dec394e338524e650b",
        "patch": "@@ -752,7 +752,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n         while (pindex)\n         {\n             CBlock block;\n-            block.ReadFromDisk(pindex, true);\n+            block.ReadFromDisk(pindex);\n             BOOST_FOREACH(CTransaction& tx, block.vtx)\n             {\n                 if (AddToWalletIfInvolvingMe(tx.GetHash(), tx, &block, fUpdate))"
      }
    ]
  }
]