[
  {
    "sha": "1b91be49f53936429d16fb841433139a66af6262",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjkxYmU0OWY1MzkzNjQyOWQxNmZiODQxNDMzMTM5YTY2YWY2MjYy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-27T09:46:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-27T10:50:14Z"
      },
      "message": "Report status of chain tips",
      "tree": {
        "sha": "cca11383e87193ef82fefe2ceba69e344cfdcf7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cca11383e87193ef82fefe2ceba69e344cfdcf7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b91be49f53936429d16fb841433139a66af6262",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b91be49f53936429d16fb841433139a66af6262",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b91be49f53936429d16fb841433139a66af6262",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b91be49f53936429d16fb841433139a66af6262/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ff0bc9beb90cf96fb0a9698de22e2bc60fed2f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ff0bc9beb90cf96fb0a9698de22e2bc60fed2f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ff0bc9beb90cf96fb0a9698de22e2bc60fed2f2"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 34,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2f1e24b78df4f5099b51a6c5a215a95031d02de3",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b91be49f53936429d16fb841433139a66af6262/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b91be49f53936429d16fb841433139a66af6262/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=1b91be49f53936429d16fb841433139a66af6262",
        "patch": "@@ -20,6 +20,7 @@ if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n   ${BUILDDIR}/qa/rpc-tests/listtransactions.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/txn_doublespend.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/txn_doublespend.py --mineblock --srcdir \"${BUILDDIR}/src\"\n+  ${BUILDDIR}/qa/rpc-tests/getchaintips.py --srcdir \"${BUILDDIR}/src\"\n   #${BUILDDIR}/qa/rpc-tests/forknotify.py --srcdir \"${BUILDDIR}/src\"\n else\n   echo \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\""
      },
      {
        "sha": "1e84b40e43462f8da309cf08a64feefd74cc8a4e",
        "filename": "qa/rpc-tests/getchaintips.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b91be49f53936429d16fb841433139a66af6262/qa/rpc-tests/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b91be49f53936429d16fb841433139a66af6262/qa/rpc-tests/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getchaintips.py?ref=1b91be49f53936429d16fb841433139a66af6262",
        "patch": "@@ -19,6 +19,7 @@ def run_test (self):\n         assert_equal (len (tips), 1)\n         assert_equal (tips[0]['branchlen'], 0)\n         assert_equal (tips[0]['height'], 200)\n+        assert_equal (tips[0]['status'], 'active')\n \n         # Split the network and build two chains of different lengths.\n         self.split_network ()\n@@ -31,12 +32,14 @@ def run_test (self):\n         shortTip = tips[0]\n         assert_equal (shortTip['branchlen'], 0)\n         assert_equal (shortTip['height'], 210)\n+        assert_equal (tips[0]['status'], 'active')\n \n         tips = self.nodes[3].getchaintips ()\n         assert_equal (len (tips), 1)\n         longTip = tips[0]\n         assert_equal (longTip['branchlen'], 0)\n         assert_equal (longTip['height'], 220)\n+        assert_equal (tips[0]['status'], 'active')\n \n         # Join the network halves and check that we now have two tips\n         # (at least at the nodes that previously had the short chain).\n@@ -47,7 +50,9 @@ def run_test (self):\n         assert_equal (tips[0], longTip)\n \n         assert_equal (tips[1]['branchlen'], 10)\n-        tips[1]['branchlen'] = 0;\n+        assert_equal (tips[1]['status'], 'valid-fork')\n+        tips[1]['branchlen'] = 0\n+        tips[1]['status'] = 'active'\n         assert_equal (tips[1], shortTip)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "5c4ee691dd550b0b8cc7de50b7e6ba2814d006a0",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b91be49f53936429d16fb841433139a66af6262/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b91be49f53936429d16fb841433139a66af6262/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=1b91be49f53936429d16fb841433139a66af6262",
        "patch": "@@ -496,11 +496,13 @@ Value getchaintips(const Array& params, bool fHelp)\n             \"    \\\"height\\\": xxxx,         (numeric) height of the chain tip\\n\"\n             \"    \\\"hash\\\": \\\"xxxx\\\",         (string) block hash of the tip\\n\"\n             \"    \\\"branchlen\\\": 0          (numeric) zero for main chain\\n\"\n+            \"    \\\"status\\\": \\\"active\\\"      (string) \\\"active\\\" for the main chain\\n\"\n             \"  },\\n\"\n             \"  {\\n\"\n             \"    \\\"height\\\": xxxx,\\n\"\n             \"    \\\"hash\\\": \\\"xxxx\\\",\\n\"\n             \"    \\\"branchlen\\\": 1          (numeric) length of branch connecting the tip to the main chain\\n\"\n+            \"    \\\"status\\\": \\\"xxxx\\\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\\n\"\n             \"  }\\n\"\n             \"]\\n\"\n             \"\\nExamples:\\n\"\n@@ -521,6 +523,9 @@ Value getchaintips(const Array& params, bool fHelp)\n             setTips.erase(pprev);\n     }\n \n+    // Always report the currently active tip.\n+    setTips.insert(chainActive.Tip());\n+\n     /* Construct the output array.  */\n     Array res;\n     BOOST_FOREACH(const CBlockIndex* block, setTips)\n@@ -532,6 +537,28 @@ Value getchaintips(const Array& params, bool fHelp)\n         const int branchLen = block->nHeight - chainActive.FindFork(block)->nHeight;\n         obj.push_back(Pair(\"branchlen\", branchLen));\n \n+        string status;\n+        if (chainActive.Contains(block)) {\n+            // This block is part of the currently active chain.\n+            status = \"active\";\n+        } else if (block->nStatus & BLOCK_FAILED_MASK) {\n+            // This block or one of its ancestors is invalid.\n+            status = \"invalid\";\n+        } else if (block->nChainTx == 0) {\n+            // This block cannot be connected because full block data for it or one of its parents is missing.\n+            status = \"headers-only\";\n+        } else if (block->IsValid(BLOCK_VALID_SCRIPTS)) {\n+            // This block is fully validated, but no longer part of the active chain. It was probably the active block once, but was reorganized.\n+            status = \"valid-fork\";\n+        } else if (block->IsValid(BLOCK_VALID_TREE)) {\n+            // The headers for this block are valid, but it has not been validated. It was probably never part of the most-work chain.\n+            status = \"valid-headers\";\n+        } else {\n+            // No clue.\n+            status = \"unknown\";\n+        }\n+        obj.push_back(Pair(\"status\", status));\n+\n         res.push_back(obj);\n     }\n "
      }
    ]
  }
]