[
  {
    "sha": "9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTM4ZDBmNzQ1MTA5MmY2YTE2ODUzYTJiMGEzN2I2OGE1YjNjM2Zi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-17T17:46:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-20T15:17:53Z"
      },
      "message": "Separate core memory usage computation in core_memusage.h",
      "tree": {
        "sha": "469af8922b6454945e160b99e118d35873470180",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/469af8922b6454945e160b99e118d35873470180"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89289d875da108c42ca013f33597eda46cb6eb53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89289d875da108c42ca013f33597eda46cb6eb53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89289d875da108c42ca013f33597eda46cb6eb53"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 76,
      "deletions": 99
    },
    "files": [
      {
        "sha": "cc8dded413361c7a81c7bee8ea0cfe34d32ab4db",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -94,6 +94,7 @@ BITCOIN_CORE_H = \\\n   consensus/params.h \\\n   consensus/validation.h \\\n   core_io.h \\\n+  core_memusage.h \\\n   eccryptoverify.h \\\n   ecwrapper.h \\\n   hash.h \\"
      },
      {
        "sha": "f02949de53528d0ab03c9853d081c4b0b431bade",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -83,7 +83,7 @@ CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const\n         // version as fresh.\n         ret->second.flags = CCoinsCacheEntry::FRESH;\n     }\n-    cachedCoinsUsage += memusage::DynamicUsage(ret->second.coins);\n+    cachedCoinsUsage += ret->second.coins.DynamicMemoryUsage();\n     return ret;\n }\n \n@@ -110,7 +110,7 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n             ret.first->second.flags = CCoinsCacheEntry::FRESH;\n         }\n     } else {\n-        cachedCoinUsage = memusage::DynamicUsage(ret.first->second.coins);\n+        cachedCoinUsage = ret.first->second.coins.DynamicMemoryUsage();\n     }\n     // Assume that whenever ModifyCoins is called, the entry will be modified.\n     ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n@@ -159,21 +159,21 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                     assert(it->second.flags & CCoinsCacheEntry::FRESH);\n                     CCoinsCacheEntry& entry = cacheCoins[it->first];\n                     entry.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += memusage::DynamicUsage(entry.coins);\n+                    cachedCoinsUsage += entry.coins.DynamicMemoryUsage();\n                     entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n                 }\n             } else {\n                 if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n                     // The grandparent does not have an entry, and the child is\n                     // modified and being pruned. This means we can just delete\n                     // it from the parent.\n-                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n                     cacheCoins.erase(itUs);\n                 } else {\n                     // A normal modification.\n-                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n                     itUs->second.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage += itUs->second.coins.DynamicMemoryUsage();\n                     itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n                 }\n             }\n@@ -261,6 +261,6 @@ CCoinsModifier::~CCoinsModifier()\n         cache.cacheCoins.erase(it);\n     } else {\n         // If the coin still exists after the modification, add the new usage\n-        cache.cachedCoinsUsage += memusage::DynamicUsage(it->second.coins);\n+        cache.cachedCoinsUsage += it->second.coins.DynamicMemoryUsage();\n     }\n }"
      },
      {
        "sha": "bf4a777b8a9022e9cbac6e4ed9c4452639019d85",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_COINS_H\n \n #include \"compressor.h\"\n+#include \"core_memusage.h\"\n #include \"memusage.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -257,8 +258,7 @@ class CCoins\n     size_t DynamicMemoryUsage() const {\n         size_t ret = memusage::DynamicUsage(vout);\n         BOOST_FOREACH(const CTxOut &out, vout) {\n-            const std::vector<unsigned char> *script = &out.scriptPubKey;\n-            ret += memusage::DynamicUsage(*script);\n+            ret += RecursiveDynamicUsage(out.scriptPubKey);\n         }\n         return ret;\n     }"
      },
      {
        "sha": "711135bb444390b85d895e7fab3d3788bedf1e99",
        "filename": "src/core_memusage.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_MEMUSAGE_H\n+#define BITCOIN_CORE_MEMUSAGE_H\n+\n+#include \"primitives/transaction.h\"\n+#include \"primitives/block.h\"\n+#include \"memusage.h\"\n+\n+static inline size_t RecursiveDynamicUsage(const CScript& script) {\n+    return memusage::DynamicUsage(*static_cast<const std::vector<unsigned char>*>(&script));\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const COutPoint& out) {\n+    return 0;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTxIn& in) {\n+    return RecursiveDynamicUsage(in.scriptSig) + RecursiveDynamicUsage(in.prevout);\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTxOut& out) {\n+    return RecursiveDynamicUsage(out.scriptPubKey);\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n+    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n+    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CBlock& block) {\n+    size_t mem = memusage::DynamicUsage(block.vtx) + memusage::DynamicUsage(block.vMerkleTree);\n+    for (std::vector<CTransaction>::const_iterator it = block.vtx.begin(); it != block.vtx.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CBlockLocator& locator) {\n+    return memusage::DynamicUsage(locator.vHave);\n+}\n+\n+#endif // BITCOIN_CORE_MEMUSAGE_H"
      },
      {
        "sha": "be3964df1bf4121a47c998c8580e74ab39b07263",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 65,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -34,28 +34,14 @@ static inline size_t DynamicUsage(const float& v) { return 0; }\n static inline size_t DynamicUsage(const double& v) { return 0; }\n template<typename X> static inline size_t DynamicUsage(X * const &v) { return 0; }\n template<typename X> static inline size_t DynamicUsage(const X * const &v) { return 0; }\n-template<typename X, typename Y> static inline size_t DynamicUsage(std::pair<X, Y> &p) { return 0; }\n \n /** Compute the memory used for dynamically allocated but owned data structures.\n  *  For generic data types, this is *not* recursive. DynamicUsage(vector<vector<int> >)\n  *  will compute the memory used for the vector<int>'s, but not for the ints inside.\n  *  This is for efficiency reasons, as these functions are intended to be fast. If\n  *  application data structures require more accurate inner accounting, they should\n- *  use RecursiveDynamicUsage, iterate themselves, or use more efficient caching +\n- *  updating on modification.\n+ *  iterate themselves, or use more efficient caching + updating on modification.\n  */\n-template<typename X> static size_t DynamicUsage(const std::vector<X>& v);\n-template<typename X> static size_t DynamicUsage(const std::set<X>& s);\n-template<typename X, typename Y> static size_t DynamicUsage(const std::map<X, Y>& m);\n-template<typename X, typename Y> static size_t DynamicUsage(const boost::unordered_set<X, Y>& s);\n-template<typename X, typename Y, typename Z> static size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& s);\n-template<typename X> static size_t DynamicUsage(const X& x);\n-\n-template<typename X> static size_t RecursiveDynamicUsage(const std::vector<X>& v);\n-template<typename X> static size_t RecursiveDynamicUsage(const std::set<X>& v);\n-template<typename X, typename Y> static size_t RecursiveDynamicUsage(const std::map<X, Y>& v);\n-template<typename X, typename Y> static size_t RecursiveDynamicUsage(const std::pair<X, Y>& v);\n-template<typename X> static size_t RecursiveDynamicUsage(const X& v);\n \n static inline size_t MallocUsage(size_t alloc)\n {\n@@ -88,54 +74,18 @@ static inline size_t DynamicUsage(const std::vector<X>& v)\n     return MallocUsage(v.capacity() * sizeof(X));\n }\n \n-template<typename X>\n-static inline size_t RecursiveDynamicUsage(const std::vector<X>& v)\n-{\n-    size_t usage = DynamicUsage(v);\n-    BOOST_FOREACH(const X& x, v) {\n-        usage += RecursiveDynamicUsage(x);\n-    }\n-    return usage;\n-}\n-\n template<typename X>\n static inline size_t DynamicUsage(const std::set<X>& s)\n {\n     return MallocUsage(sizeof(stl_tree_node<X>)) * s.size();\n }\n \n-template<typename X>\n-static inline size_t RecursiveDynamicUsage(const std::set<X>& v)\n-{\n-    size_t usage = DynamicUsage(v);\n-    BOOST_FOREACH(const X& x, v) {\n-        usage += RecursiveDynamicUsage(x);\n-    }\n-    return usage;\n-}\n-\n template<typename X, typename Y>\n static inline size_t DynamicUsage(const std::map<X, Y>& m)\n {\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >)) * m.size();\n }\n \n-template<typename X, typename Y>\n-static inline size_t RecursiveDynamicUsage(const std::map<X, Y>& v)\n-{\n-    size_t usage = DynamicUsage(v);\n-    for (typename std::map<X, Y>::const_iterator it = v.begin(); it != v.end(); it++) {\n-        usage += RecursiveDynamicUsage(*it);\n-    }\n-    return usage;\n-}\n-\n-template<typename X, typename Y>\n-static inline size_t RecursiveDynamicUsage(const std::pair<X, Y>& v)\n-{\n-    return RecursiveDynamicUsage(v.first) + RecursiveDynamicUsage(v.second);\n-}\n-\n // Boost data structures\n \n template<typename X>\n@@ -157,20 +107,6 @@ static inline size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& m)\n     return MallocUsage(sizeof(boost_unordered_node<std::pair<const X, Y> >)) * m.size() + MallocUsage(sizeof(void*) * m.bucket_count());\n }\n \n-// Dispatch to class method as fallback\n-\n-template<typename X>\n-static inline size_t DynamicUsage(const X& x)\n-{\n-    return x.DynamicMemoryUsage();\n-}\n-\n-template<typename X>\n-static inline size_t RecursiveDynamicUsage(const X& x)\n-{\n-    return DynamicUsage(x);\n-}\n-\n }\n \n #endif"
      },
      {
        "sha": "606dbea79857d2f4cc79b0136ad46486f3c187d9",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -72,11 +72,6 @@ void CTransaction::UpdateHash() const\n     *const_cast<uint256*>(&hash) = SerializeHash(*this);\n }\n \n-size_t CTransaction::DynamicMemoryUsage() const\n-{\n-    return memusage::RecursiveDynamicUsage(vin) + memusage::RecursiveDynamicUsage(vout);\n-}\n-\n CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n \n CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {"
      },
      {
        "sha": "6cfd93a9a1891c6d19884b0096ffcb124d8c45ba",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -7,7 +7,6 @@\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n #include \"amount.h\"\n-#include \"memusage.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -49,8 +48,6 @@ class COutPoint\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const { return 0; }\n };\n \n /** An input of a transaction.  It contains the location of the previous\n@@ -99,8 +96,6 @@ class CTxIn\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const { return scriptSig.DynamicMemoryUsage(); }\n };\n \n /** An output of a transaction.  It contains the public key that the next input\n@@ -171,8 +166,6 @@ class CTxOut\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const { return scriptPubKey.DynamicMemoryUsage(); }\n };\n \n struct CMutableTransaction;\n@@ -256,8 +249,6 @@ class CTransaction\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const;\n };\n \n /** A mutable version of CTransaction. */"
      },
      {
        "sha": "fd33924732c3476c1639b5332b62c0382f1bc7b3",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -260,8 +260,3 @@ std::string CScript::ToString() const\n     }\n     return str;\n }\n-\n-size_t CScript::DynamicMemoryUsage() const\n-{\n-    return memusage::DynamicUsage(*(static_cast<const std::vector<unsigned char>*>(this)));\n-}"
      },
      {
        "sha": "e39ca57f4fbe94b5be929f722d5c19ec708906b2",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_SCRIPT_SCRIPT_H\n #define BITCOIN_SCRIPT_SCRIPT_H\n \n-#include \"memusage.h\"\n #include \"crypto/common.h\"\n \n #include <assert.h>\n@@ -608,8 +607,6 @@ class CScript : public std::vector<unsigned char>\n         // The default std::vector::clear() does not release memory.\n         std::vector<unsigned char>().swap(*this);\n     }\n-\n-    size_t DynamicMemoryUsage() const;\n };\n \n class CReserveScript"
      },
      {
        "sha": "13d848311a037331269640ed2deaf06d1c0517b6",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -70,9 +70,9 @@ class CCoinsViewCacheTest : public CCoinsViewCache\n         // Manually recompute the dynamic usage of the whole data, and compare it.\n         size_t ret = memusage::DynamicUsage(cacheCoins);\n         for (CCoinsMap::iterator it = cacheCoins.begin(); it != cacheCoins.end(); it++) {\n-            ret += memusage::DynamicUsage(it->second.coins);\n+            ret += it->second.coins.DynamicMemoryUsage();\n         }\n-        BOOST_CHECK_EQUAL(memusage::DynamicUsage(*this), ret);\n+        BOOST_CHECK_EQUAL(DynamicMemoryUsage(), ret);\n     }\n \n };"
      },
      {
        "sha": "5bc06e50563dd931399299ac18f75664383fdfa0",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -31,7 +31,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n-    nUsageSize = tx.DynamicMemoryUsage();\n+    nUsageSize = RecursiveDynamicUsage(tx);\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)"
      }
    ]
  }
]