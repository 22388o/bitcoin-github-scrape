[
  {
    "sha": "a1883536b455b889f1ebfca9e50d1e0ef28a7731",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTg4MzUzNmI0NTViODg5ZjFlYmZjYTllNTBkMWUwZWYyOGE3NzMx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-12T00:30:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-12-03T02:28:22Z"
      },
      "message": "Switch GetTransaction to returning a CTransactionRef",
      "tree": {
        "sha": "8ff0fd54bcca03345bda6860fe170759516be508",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ff0fd54bcca03345bda6860fe170759516be508"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1883536b455b889f1ebfca9e50d1e0ef28a7731",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1883536b455b889f1ebfca9e50d1e0ef28a7731",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1883536b455b889f1ebfca9e50d1e0ef28a7731",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1883536b455b889f1ebfca9e50d1e0ef28a7731/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2efcfa5acfacb958973d9e8125e1d81f102e2dfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2efcfa5acfacb958973d9e8125e1d81f102e2dfd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2efcfa5acfacb958973d9e8125e1d81f102e2dfd"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6379061f8f4bc95bac9a07430f3eb3786a53a7ef",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1883536b455b889f1ebfca9e50d1e0ef28a7731/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1883536b455b889f1ebfca9e50d1e0ef28a7731/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=a1883536b455b889f1ebfca9e50d1e0ef28a7731",
        "patch": "@@ -363,7 +363,7 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n-    CTransaction tx;\n+    CTransactionRef tx;\n     uint256 hashBlock = uint256();\n     if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock, true))\n         return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n@@ -388,7 +388,7 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n \n     case RF_JSON: {\n         UniValue objTx(UniValue::VOBJ);\n-        TxToJSON(tx, hashBlock, objTx);\n+        TxToJSON(*tx, hashBlock, objTx);\n         string strJSON = objTx.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);"
      },
      {
        "sha": "673979886a9cba00bf295540900bf42d2c88e4a5",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1883536b455b889f1ebfca9e50d1e0ef28a7731/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1883536b455b889f1ebfca9e50d1e0ef28a7731/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=a1883536b455b889f1ebfca9e50d1e0ef28a7731",
        "patch": "@@ -218,19 +218,19 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n         } \n     }\n \n-    CTransaction tx;\n+    CTransactionRef tx;\n     uint256 hashBlock;\n     if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock, true))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available about transaction\");\n \n-    string strHex = EncodeHexTx(tx);\n+    string strHex = EncodeHexTx(*tx);\n \n     if (!fVerbose)\n         return strHex;\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"hex\", strHex));\n-    TxToJSON(tx, hashBlock, result);\n+    TxToJSON(*tx, hashBlock, result);\n     return result;\n }\n \n@@ -289,7 +289,7 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n \n     if (pblockindex == NULL)\n     {\n-        CTransaction tx;\n+        CTransactionRef tx;\n         if (!GetTransaction(oneTxid, tx, Params().GetConsensus(), hashBlock, false) || hashBlock.IsNull())\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not yet in block\");\n         if (!mapBlockIndex.count(hashBlock))"
      },
      {
        "sha": "fe34565131138289b5dc9ea8881c95b2cf53c922",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1883536b455b889f1ebfca9e50d1e0ef28a7731/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1883536b455b889f1ebfca9e50d1e0ef28a7731/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a1883536b455b889f1ebfca9e50d1e0ef28a7731",
        "patch": "@@ -984,7 +984,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n }\n \n /** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n-bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n+bool GetTransaction(const uint256 &hash, CTransactionRef &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n {\n     CBlockIndex *pindexSlow = NULL;\n \n@@ -993,7 +993,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::P\n     CTransactionRef ptx = mempool.get(hash);\n     if (ptx)\n     {\n-        txOut = *ptx;\n+        txOut = ptx;\n         return true;\n     }\n \n@@ -1012,7 +1012,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::P\n                 return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n             }\n             hashBlock = header.GetHash();\n-            if (txOut.GetHash() != hash)\n+            if (txOut->GetHash() != hash)\n                 return error(\"%s: txid mismatch\", __func__);\n             return true;\n         }\n@@ -1035,7 +1035,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::P\n         if (ReadBlockFromDisk(block, pindexSlow, consensusParams)) {\n             for (const auto& tx : block.vtx) {\n                 if (tx->GetHash() == hash) {\n-                    txOut = *tx;\n+                    txOut = tx;\n                     hashBlock = pindexSlow->GetBlockHash();\n                     return true;\n                 }"
      },
      {
        "sha": "f242c20ab9fcb2ec01cbabaee8d18f873f778fc1",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1883536b455b889f1ebfca9e50d1e0ef28a7731/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1883536b455b889f1ebfca9e50d1e0ef28a7731/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=a1883536b455b889f1ebfca9e50d1e0ef28a7731",
        "patch": "@@ -276,7 +276,7 @@ bool IsInitialBlockDownload();\n  */\n std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n-bool GetTransaction(const uint256 &hash, CTransaction &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);\n+bool GetTransaction(const uint256 &hash, CTransactionRef &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock = NULL);\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);"
      }
    ]
  },
  {
    "sha": "c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2Y1NjczYTYzMDRlM2VhOWZhNTZmZmY2NmI2ZWExY2I3M2NjOThm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-12T00:54:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-12-03T02:28:22Z"
      },
      "message": "Make CWalletTx store a CTransactionRef instead of inheriting",
      "tree": {
        "sha": "bbf3dcfb1a227471e9a4fe802dfe0d0f22191916",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bbf3dcfb1a227471e9a4fe802dfe0d0f22191916"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1883536b455b889f1ebfca9e50d1e0ef28a7731",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1883536b455b889f1ebfca9e50d1e0ef28a7731",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1883536b455b889f1ebfca9e50d1e0ef28a7731"
      }
    ],
    "stats": {
      "total": 251,
      "additions": 128,
      "deletions": 123
    },
    "files": [
      {
        "sha": "32690fe484be4704d5c67b0c54f3de6f82f71efc",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
        "patch": "@@ -19,7 +19,7 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, vector<COutput\n     tx.nLockTime = nextLockTime++; // so all transactions get different hashes\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n-    CWalletTx* wtx = new CWalletTx(&wallet, tx);\n+    CWalletTx* wtx = new CWalletTx(&wallet, MakeTransactionRef(std::move(tx)));\n \n     int nAge = 6 * 24;\n     COutput output(wtx, nInput, nAge, true, true);"
      },
      {
        "sha": "4d34bf95e9d18b636ed0d3ae010027e36e7823c9",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
        "patch": "@@ -470,21 +470,21 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         nQuantity++;\n \n         // Amount\n-        nAmount += out.tx->vout[out.i].nValue;\n+        nAmount += out.tx->tx->vout[out.i].nValue;\n \n         // Priority\n-        dPriorityInputs += (double)out.tx->vout[out.i].nValue * (out.nDepth+1);\n+        dPriorityInputs += (double)out.tx->tx->vout[out.i].nValue * (out.nDepth+1);\n \n         // Bytes\n         CTxDestination address;\n         int witnessversion = 0;\n         std::vector<unsigned char> witnessprogram;\n-        if (out.tx->vout[out.i].scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram))\n+        if (out.tx->tx->vout[out.i].scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram))\n         {\n             nBytesInputs += (32 + 4 + 1 + (107 / WITNESS_SCALE_FACTOR) + 4);\n             fWitness = true;\n         }\n-        else if(ExtractDestination(out.tx->vout[out.i].scriptPubKey, address))\n+        else if(ExtractDestination(out.tx->tx->vout[out.i].scriptPubKey, address))\n         {\n             CPubKey pubkey;\n             CKeyID *keyid = boost::get<CKeyID>(&address);\n@@ -677,7 +677,7 @@ void CoinControlDialog::updateView()\n         CAmount nSum = 0;\n         int nChildren = 0;\n         BOOST_FOREACH(const COutput& out, coins.second) {\n-            nSum += out.tx->vout[out.i].nValue;\n+            nSum += out.tx->tx->vout[out.i].nValue;\n             nChildren++;\n \n             CCoinControlWidgetItem *itemOutput;\n@@ -689,7 +689,7 @@ void CoinControlDialog::updateView()\n             // address\n             CTxDestination outputAddress;\n             QString sAddress = \"\";\n-            if(ExtractDestination(out.tx->vout[out.i].scriptPubKey, outputAddress))\n+            if(ExtractDestination(out.tx->tx->vout[out.i].scriptPubKey, outputAddress))\n             {\n                 sAddress = QString::fromStdString(CBitcoinAddress(outputAddress).ToString());\n \n@@ -714,8 +714,8 @@ void CoinControlDialog::updateView()\n             }\n \n             // amount\n-            itemOutput->setText(COLUMN_AMOUNT, BitcoinUnits::format(nDisplayUnit, out.tx->vout[out.i].nValue));\n-            itemOutput->setData(COLUMN_AMOUNT, Qt::UserRole, QVariant((qlonglong)out.tx->vout[out.i].nValue)); // padding so that sorting works correctly\n+            itemOutput->setText(COLUMN_AMOUNT, BitcoinUnits::format(nDisplayUnit, out.tx->tx->vout[out.i].nValue));\n+            itemOutput->setData(COLUMN_AMOUNT, Qt::UserRole, QVariant((qlonglong)out.tx->tx->vout[out.i].nValue)); // padding so that sorting works correctly\n \n             // date\n             itemOutput->setText(COLUMN_DATE, GUIUtil::dateTimeStr(out.tx->GetTxTime()));"
      },
      {
        "sha": "e7d03a6119ea44cece22c0cf5e0ccc222482b385",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
        "patch": "@@ -26,10 +26,10 @@ QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n     AssertLockHeld(cs_main);\n     if (!CheckFinalTx(wtx))\n     {\n-        if (wtx.nLockTime < LOCKTIME_THRESHOLD)\n-            return tr(\"Open for %n more block(s)\", \"\", wtx.nLockTime - chainActive.Height());\n+        if (wtx.tx->nLockTime < LOCKTIME_THRESHOLD)\n+            return tr(\"Open for %n more block(s)\", \"\", wtx.tx->nLockTime - chainActive.Height());\n         else\n-            return tr(\"Open until %1\").arg(GUIUtil::dateTimeStr(wtx.nLockTime));\n+            return tr(\"Open until %1\").arg(GUIUtil::dateTimeStr(wtx.tx->nLockTime));\n     }\n     else\n     {\n@@ -133,7 +133,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         // Coinbase\n         //\n         CAmount nUnmatured = 0;\n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n             nUnmatured += wallet->GetCredit(txout, ISMINE_ALL);\n         strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n         if (wtx.IsInMainChain())\n@@ -152,14 +152,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     else\n     {\n         isminetype fAllFromMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+        BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n         {\n             isminetype mine = wallet->IsMine(txin);\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n             if(fAllToMe > mine) fAllToMe = mine;\n@@ -173,7 +173,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             //\n             // Debit\n             //\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+            BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n             {\n                 // Ignore change\n                 isminetype toSelf = wallet->IsMine(txout);\n@@ -212,7 +212,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n                 strHTML += \"<b>\" + tr(\"Total credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, nValue) + \"<br>\";\n             }\n \n-            CAmount nTxFee = nDebit - wtx.GetValueOut();\n+            CAmount nTxFee = nDebit - wtx.tx->GetValueOut();\n             if (nTxFee > 0)\n                 strHTML += \"<b>\" + tr(\"Transaction fee\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -nTxFee) + \"<br>\";\n         }\n@@ -221,10 +221,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             //\n             // Mixed debit transaction\n             //\n-            BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+            BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n                 if (wallet->IsMine(txin))\n                     strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -wallet->GetDebit(txin, ISMINE_ALL)) + \"<br>\";\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+            BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n                 if (wallet->IsMine(txout))\n                     strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, wallet->GetCredit(txout, ISMINE_ALL)) + \"<br>\";\n         }\n@@ -241,7 +241,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         strHTML += \"<br><b>\" + tr(\"Comment\") + \":</b><br>\" + GUIUtil::HtmlEscape(wtx.mapValue[\"comment\"], true) + \"<br>\";\n \n     strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + rec->getTxID() + \"<br>\";\n-    strHTML += \"<b>\" + tr(\"Transaction total size\") + \":</b> \" + QString::number(wtx.GetTotalSize()) + \" bytes<br>\";\n+    strHTML += \"<b>\" + tr(\"Transaction total size\") + \":</b> \" + QString::number(wtx.tx->GetTotalSize()) + \" bytes<br>\";\n     strHTML += \"<b>\" + tr(\"Output index\") + \":</b> \" + QString::number(rec->getOutputIndex()) + \"<br>\";\n \n     // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n@@ -276,20 +276,20 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     if (fDebug)\n     {\n         strHTML += \"<hr><br>\" + tr(\"Debug information\") + \"<br><br>\";\n-        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+        BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n             if(wallet->IsMine(txin))\n                 strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -wallet->GetDebit(txin, ISMINE_ALL)) + \"<br>\";\n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n             if(wallet->IsMine(txout))\n                 strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, wallet->GetCredit(txout, ISMINE_ALL)) + \"<br>\";\n \n         strHTML += \"<br><b>\" + tr(\"Transaction\") + \":</b><br>\";\n-        strHTML += GUIUtil::HtmlEscape(wtx.ToString(), true);\n+        strHTML += GUIUtil::HtmlEscape(wtx.tx->ToString(), true);\n \n         strHTML += \"<br><b>\" + tr(\"Inputs\") + \":</b>\";\n         strHTML += \"<ul>\";\n \n-        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+        BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n         {\n             COutPoint prevout = txin.prevout;\n "
      },
      {
        "sha": "a1d14223176cb880d1f1e089be3a7e9f6601c0a1",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
        "patch": "@@ -47,7 +47,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         //\n         // Credit\n         //\n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n             if(mine)\n@@ -83,15 +83,15 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     {\n         bool involvesWatchAddress = false;\n         isminetype fAllFromMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+        BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n         {\n             isminetype mine = wallet->IsMine(txin);\n             if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n             if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n@@ -112,11 +112,11 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             //\n             // Debit\n             //\n-            CAmount nTxFee = nDebit - wtx.GetValueOut();\n+            CAmount nTxFee = nDebit - wtx.tx->GetValueOut();\n \n-            for (unsigned int nOut = 0; nOut < wtx.vout.size(); nOut++)\n+            for (unsigned int nOut = 0; nOut < wtx.tx->vout.size(); nOut++)\n             {\n-                const CTxOut& txout = wtx.vout[nOut];\n+                const CTxOut& txout = wtx.tx->vout[nOut];\n                 TransactionRecord sub(hash, nTime);\n                 sub.idx = parts.size();\n                 sub.involvesWatchAddress = involvesWatchAddress;\n@@ -190,15 +190,15 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n \n     if (!CheckFinalTx(wtx))\n     {\n-        if (wtx.nLockTime < LOCKTIME_THRESHOLD)\n+        if (wtx.tx->nLockTime < LOCKTIME_THRESHOLD)\n         {\n             status.status = TransactionStatus::OpenUntilBlock;\n-            status.open_for = wtx.nLockTime - chainActive.Height();\n+            status.open_for = wtx.tx->nLockTime - chainActive.Height();\n         }\n         else\n         {\n             status.status = TransactionStatus::OpenUntilDate;\n-            status.open_for = wtx.nLockTime;\n+            status.open_for = wtx.tx->nLockTime;\n         }\n     }\n     // For generated transactions, determine maturity"
      },
      {
        "sha": "a78fc90d2c56ed37209d4517392fe18665f1617a",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
        "patch": "@@ -67,7 +67,7 @@ CAmount WalletModel::getBalance(const CCoinControl *coinControl) const\n         wallet->AvailableCoins(vCoins, true, coinControl);\n         BOOST_FOREACH(const COutput& out, vCoins)\n             if(out.fSpendable)\n-                nBalance += out.tx->vout[out.i].nValue;\n+                nBalance += out.tx->tx->vout[out.i].nValue;\n \n         return nBalance;\n     }\n@@ -609,22 +609,22 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n         if (nDepth < 0) continue;\n         COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth, true, true);\n-        if (outpoint.n < out.tx->vout.size() && wallet->IsMine(out.tx->vout[outpoint.n]) == ISMINE_SPENDABLE)\n+        if (outpoint.n < out.tx->tx->vout.size() && wallet->IsMine(out.tx->tx->vout[outpoint.n]) == ISMINE_SPENDABLE)\n             vCoins.push_back(out);\n     }\n \n     BOOST_FOREACH(const COutput& out, vCoins)\n     {\n         COutput cout = out;\n \n-        while (wallet->IsChange(cout.tx->vout[cout.i]) && cout.tx->vin.size() > 0 && wallet->IsMine(cout.tx->vin[0]))\n+        while (wallet->IsChange(cout.tx->tx->vout[cout.i]) && cout.tx->tx->vin.size() > 0 && wallet->IsMine(cout.tx->tx->vin[0]))\n         {\n-            if (!wallet->mapWallet.count(cout.tx->vin[0].prevout.hash)) break;\n-            cout = COutput(&wallet->mapWallet[cout.tx->vin[0].prevout.hash], cout.tx->vin[0].prevout.n, 0, true, true);\n+            if (!wallet->mapWallet.count(cout.tx->tx->vin[0].prevout.hash)) break;\n+            cout = COutput(&wallet->mapWallet[cout.tx->tx->vin[0].prevout.hash], cout.tx->tx->vin[0].prevout.n, 0, true, true);\n         }\n \n         CTxDestination address;\n-        if(!out.fSpendable || !ExtractDestination(cout.tx->vout[cout.i].scriptPubKey, address))\n+        if(!out.fSpendable || !ExtractDestination(cout.tx->tx->vout[cout.i].scriptPubKey, address))\n             continue;\n         mapCoins[QString::fromStdString(CBitcoinAddress(address).ToString())].push_back(out);\n     }"
      },
      {
        "sha": "f9a95bed4272e4b847b29361b75bde4acc4f9916",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
        "patch": "@@ -64,7 +64,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n                 if (out.amount() <= 0) continue;\n                 if (i == nChangePosRet)\n                     i++;\n-                subtotal += walletTransaction->vout[i].nValue;\n+                subtotal += walletTransaction->tx->vout[i].nValue;\n                 i++;\n             }\n             rcp.amount = subtotal;\n@@ -73,7 +73,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n         {\n             if (i == nChangePosRet)\n                 i++;\n-            rcp.amount = walletTransaction->vout[i].nValue;\n+            rcp.amount = walletTransaction->tx->vout[i].nValue;\n             i++;\n         }\n     }"
      },
      {
        "sha": "28a905efa7c255ad8d3d6c35cc1869696b568d3f",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
        "patch": "@@ -271,7 +271,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     if (!DecodeHexTx(tx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     uint256 hashTx = tx.GetHash();\n-    CWalletTx wtx(pwalletMain,tx);\n+    CWalletTx wtx(pwalletMain, MakeTransactionRef(std::move(tx)));\n \n     CDataStream ssMB(ParseHexV(request.params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n     CMerkleBlock merkleBlock;"
      },
      {
        "sha": "f31a28c4d233c2fdb8a62ae8f54fa7970a349fe3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
        "patch": "@@ -583,10 +583,10 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (wtx.IsCoinBase() || !CheckFinalTx(wtx))\n+        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n             continue;\n \n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n             if (txout.scriptPubKey == scriptPubKey)\n                 if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n@@ -637,10 +637,10 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (wtx.IsCoinBase() || !CheckFinalTx(wtx))\n+        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n             continue;\n \n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n         {\n             CTxDestination address;\n             if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwalletMain, address) && setAddress.count(address))\n@@ -1149,14 +1149,14 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n     {\n         const CWalletTx& wtx = (*it).second;\n \n-        if (wtx.IsCoinBase() || !CheckFinalTx(wtx))\n+        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n             continue;\n \n         int nDepth = wtx.GetDepthInMainChain();\n         if (nDepth < nMinDepth)\n             continue;\n \n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n         {\n             CTxDestination address;\n             if (!ExtractDestination(txout.scriptPubKey, address))\n@@ -1780,7 +1780,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     CAmount nCredit = wtx.GetCredit(filter);\n     CAmount nDebit = wtx.GetDebit(filter);\n     CAmount nNet = nCredit - nDebit;\n-    CAmount nFee = (wtx.IsFromMe(filter) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nFee = (wtx.IsFromMe(filter) ? wtx.tx->GetValueOut() - nDebit : 0);\n \n     entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n     if (wtx.IsFromMe(filter))\n@@ -2420,7 +2420,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n             continue;\n \n         CTxDestination address;\n-        const CScript& scriptPubKey = out.tx->vout[out.i].scriptPubKey;\n+        const CScript& scriptPubKey = out.tx->tx->vout[out.i].scriptPubKey;\n         bool fValidAddress = ExtractDestination(scriptPubKey, address);\n \n         if (setAddress.size() && (!fValidAddress || !setAddress.count(address)))\n@@ -2445,7 +2445,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n         }\n \n         entry.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n-        entry.push_back(Pair(\"amount\", ValueFromAmount(out.tx->vout[out.i].nValue)));\n+        entry.push_back(Pair(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue)));\n         entry.push_back(Pair(\"confirmations\", out.nDepth));\n         entry.push_back(Pair(\"spendable\", out.fSpendable));\n         entry.push_back(Pair(\"solvable\", out.fSolvable));"
      },
      {
        "sha": "eb14d176bd700ca048a6f9cc38d6c8ee70e9043e",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
        "patch": "@@ -86,7 +86,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     {\n         CMutableTransaction tx(wtx);\n         --tx.nLockTime;  // Just to change the hash :)\n-        *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n+        wtx.SetTx(MakeTransactionRef(std::move(tx)));\n     }\n     pwalletMain->AddToWallet(wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n@@ -96,7 +96,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     {\n         CMutableTransaction tx(wtx);\n         --tx.nLockTime;  // Just to change the hash :)\n-        *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n+        wtx.SetTx(MakeTransactionRef(std::move(tx)));\n     }\n     pwalletMain->AddToWallet(wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);"
      },
      {
        "sha": "8085706a9958d47b4d9ccb03c4fbb92d4b50a23f",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
        "patch": "@@ -42,7 +42,7 @@ static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = fa\n         // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n         tx.vin.resize(1);\n     }\n-    CWalletTx* wtx = new CWalletTx(&wallet, tx);\n+    CWalletTx* wtx = new CWalletTx(&wallet, MakeTransactionRef(std::move(tx)));\n     if (fIsFromMe)\n     {\n         wtx->fDebitCached = true;"
      },
      {
        "sha": "638fca99177cbc055deb0df8c9242acad06e8500",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 55,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
        "patch": "@@ -75,7 +75,7 @@ struct CompareValueOnly\n \n std::string COutput::ToString() const\n {\n-    return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->vout[i].nValue));\n+    return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->tx->vout[i].nValue));\n }\n \n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n@@ -400,7 +400,7 @@ set<uint256> CWallet::GetConflicts(const uint256& txid) const\n \n     std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n \n-    BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+    BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n     {\n         if (mapTxSpends.count(txin.prevout) <= 1)\n             continue;  // No conflict if zero or one spends\n@@ -552,7 +552,7 @@ void CWallet::AddToSpends(const uint256& wtxid)\n     if (thisTx.IsCoinBase()) // Coinbases don't spend anything!\n         return;\n \n-    BOOST_FOREACH(const CTxIn& txin, thisTx.vin)\n+    BOOST_FOREACH(const CTxIn& txin, thisTx.tx->vin)\n         AddToSpends(txin.prevout, wtxid);\n }\n \n@@ -795,7 +795,7 @@ bool CWallet::GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bFo\n             for (map<uint256, CWalletTx>::iterator it = mapWallet.begin();\n                  it != mapWallet.end() && account.vchPubKey.IsValid();\n                  ++it)\n-                BOOST_FOREACH(const CTxOut& txout, (*it).second.vout)\n+                BOOST_FOREACH(const CTxOut& txout, (*it).second.tx->vout)\n                     if (txout.scriptPubKey == scriptPubKey) {\n                         bForceNew = true;\n                         break;\n@@ -954,7 +954,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n     wtx.BindWallet(this);\n     wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n     AddToSpends(hash);\n-    BOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n+    BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin) {\n         if (mapWallet.count(txin.prevout.hash)) {\n             CWalletTx& prevtx = mapWallet[txin.prevout.hash];\n             if (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n@@ -993,7 +993,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n-            CWalletTx wtx(this,tx);\n+            CWalletTx wtx(this, MakeTransactionRef(tx));\n \n             // Get merkle branch if transaction was found in a block\n             if (posInBlock != -1)\n@@ -1052,7 +1052,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n             }\n             // If a transaction changes 'conflicted' state, that changes the balance\n             // available of the outputs it spends. So force those to be recomputed\n-            BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+            BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n             {\n                 if (mapWallet.count(txin.prevout.hash))\n                     mapWallet[txin.prevout.hash].MarkDirty();\n@@ -1113,7 +1113,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n             }\n             // If a transaction changes 'conflicted' state, that changes the balance\n             // available of the outputs it spends. So force those to be recomputed\n-            BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+            BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n             {\n                 if (mapWallet.count(txin.prevout.hash))\n                     mapWallet[txin.prevout.hash].MarkDirty();\n@@ -1148,8 +1148,8 @@ isminetype CWallet::IsMine(const CTxIn &txin) const\n         if (mi != mapWallet.end())\n         {\n             const CWalletTx& prev = (*mi).second;\n-            if (txin.prevout.n < prev.vout.size())\n-                return IsMine(prev.vout[txin.prevout.n]);\n+            if (txin.prevout.n < prev.tx->vout.size())\n+                return IsMine(prev.tx->vout[txin.prevout.n]);\n         }\n     }\n     return ISMINE_NO;\n@@ -1163,9 +1163,9 @@ CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n         if (mi != mapWallet.end())\n         {\n             const CWalletTx& prev = (*mi).second;\n-            if (txin.prevout.n < prev.vout.size())\n-                if (IsMine(prev.vout[txin.prevout.n]) & filter)\n-                    return prev.vout[txin.prevout.n].nValue;\n+            if (txin.prevout.n < prev.tx->vout.size())\n+                if (IsMine(prev.tx->vout[txin.prevout.n]) & filter)\n+                    return prev.tx->vout[txin.prevout.n].nValue;\n         }\n     }\n     return 0;\n@@ -1380,14 +1380,14 @@ void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,\n     CAmount nDebit = GetDebit(filter);\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n     {\n-        CAmount nValueOut = GetValueOut();\n+        CAmount nValueOut = tx->GetValueOut();\n         nFee = nDebit - nValueOut;\n     }\n \n     // Sent/received.\n-    for (unsigned int i = 0; i < vout.size(); ++i)\n+    for (unsigned int i = 0; i < tx->vout.size(); ++i)\n     {\n-        const CTxOut& txout = vout[i];\n+        const CTxOut& txout = tx->vout[i];\n         isminetype fIsMine = pwallet->IsMine(txout);\n         // Only need to handle txouts if AT LEAST one of these is true:\n         //   1) they debit from us (sent)\n@@ -1573,7 +1573,7 @@ set<uint256> CWalletTx::GetConflicts() const\n \n CAmount CWalletTx::GetDebit(const isminefilter& filter) const\n {\n-    if (vin.empty())\n+    if (tx->vin.empty())\n         return 0;\n \n     CAmount debit = 0;\n@@ -1663,11 +1663,11 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n \n     CAmount nCredit = 0;\n     uint256 hashTx = GetHash();\n-    for (unsigned int i = 0; i < vout.size(); i++)\n+    for (unsigned int i = 0; i < tx->vout.size(); i++)\n     {\n         if (!pwallet->IsSpent(hashTx, i))\n         {\n-            const CTxOut &txout = vout[i];\n+            const CTxOut &txout = tx->vout[i];\n             nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n             if (!MoneyRange(nCredit))\n                 throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n@@ -1706,11 +1706,11 @@ CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n         return nAvailableWatchCreditCached;\n \n     CAmount nCredit = 0;\n-    for (unsigned int i = 0; i < vout.size(); i++)\n+    for (unsigned int i = 0; i < tx->vout.size(); i++)\n     {\n         if (!pwallet->IsSpent(GetHash(), i))\n         {\n-            const CTxOut &txout = vout[i];\n+            const CTxOut &txout = tx->vout[i];\n             nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n             if (!MoneyRange(nCredit))\n                 throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n@@ -1758,23 +1758,23 @@ bool CWalletTx::IsTrusted() const\n         return false;\n \n     // Trusted if all inputs are from us and are in the mempool:\n-    BOOST_FOREACH(const CTxIn& txin, vin)\n+    BOOST_FOREACH(const CTxIn& txin, tx->vin)\n     {\n         // Transactions not sent by us: not trusted\n         const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n         if (parent == NULL)\n             return false;\n-        const CTxOut& parentOut = parent->vout[txin.prevout.n];\n+        const CTxOut& parentOut = parent->tx->vout[txin.prevout.n];\n         if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)\n             return false;\n     }\n     return true;\n }\n \n-bool CWalletTx::IsEquivalentTo(const CWalletTx& tx) const\n+bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n {\n-        CMutableTransaction tx1 = *this;\n-        CMutableTransaction tx2 = tx;\n+        CMutableTransaction tx1 = *this->tx;\n+        CMutableTransaction tx2 = *_tx.tx;\n         for (unsigned int i = 0; i < tx1.vin.size(); i++) tx1.vin[i].scriptSig = CScript();\n         for (unsigned int i = 0; i < tx2.vin.size(); i++) tx2.vin[i].scriptSig = CScript();\n         return CTransaction(tx1) == CTransaction(tx2);\n@@ -1957,10 +1957,10 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n             if (nDepth == 0 && !pcoin->InMempool())\n                 continue;\n \n-            for (unsigned int i = 0; i < pcoin->vout.size(); i++) {\n-                isminetype mine = IsMine(pcoin->vout[i]);\n+            for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n+                isminetype mine = IsMine(pcoin->tx->vout[i]);\n                 if (!(IsSpent(wtxid, i)) && mine != ISMINE_NO &&\n-                    !IsLockedCoin((*it).first, i) && (pcoin->vout[i].nValue > 0 || fIncludeZeroValue) &&\n+                    !IsLockedCoin((*it).first, i) && (pcoin->tx->vout[i].nValue > 0 || fIncludeZeroValue) &&\n                     (!coinControl || !coinControl->HasSelected() || coinControl->fAllowOtherInputs || coinControl->IsSelected(COutPoint((*it).first, i))))\n                         vCoins.push_back(COutput(pcoin, i, nDepth,\n                                                  ((mine & ISMINE_SPENDABLE) != ISMINE_NO) ||\n@@ -2043,7 +2043,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n             continue;\n \n         int i = output.i;\n-        CAmount n = pcoin->vout[i].nValue;\n+        CAmount n = pcoin->tx->vout[i].nValue;\n \n         pair<CAmount,pair<const CWalletTx*,unsigned int> > coin = make_pair(n,make_pair(pcoin, i));\n \n@@ -2130,7 +2130,7 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n         {\n             if (!out.fSpendable)\n                  continue;\n-            nValueRet += out.tx->vout[out.i].nValue;\n+            nValueRet += out.tx->tx->vout[out.i].nValue;\n             setCoinsRet.insert(make_pair(out.tx, out.i));\n         }\n         return (nValueRet >= nTargetValue);\n@@ -2150,9 +2150,9 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n         {\n             const CWalletTx* pcoin = &it->second;\n             // Clearly invalid input, fail\n-            if (pcoin->vout.size() <= outpoint.n)\n+            if (pcoin->tx->vout.size() <= outpoint.n)\n                 return false;\n-            nValueFromPresetInputs += pcoin->vout[outpoint.n].nValue;\n+            nValueFromPresetInputs += pcoin->tx->vout[outpoint.n].nValue;\n             setPresetCoins.insert(make_pair(pcoin, outpoint.n));\n         } else\n             return false; // TODO: Allow non-wallet inputs\n@@ -2208,10 +2208,10 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n         return false;\n \n     if (nChangePosInOut != -1)\n-        tx.vout.insert(tx.vout.begin() + nChangePosInOut, wtx.vout[nChangePosInOut]);\n+        tx.vout.insert(tx.vout.begin() + nChangePosInOut, wtx.tx->vout[nChangePosInOut]);\n \n     // Add new txins (keeping original txin scriptSig/order)\n-    BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+    BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n     {\n         if (!coinControl.IsSelected(txin.prevout))\n         {\n@@ -2351,7 +2351,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 }\n                 BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n                 {\n-                    CAmount nCredit = pcoin.first->vout[pcoin.second].nValue;\n+                    CAmount nCredit = pcoin.first->tx->vout[pcoin.second].nValue;\n                     //The coin age after the next block (depth+1) is used instead of the current,\n                     //reflecting an assumption the user would accept a bit more delay for\n                     //a chance at a free transaction.\n@@ -2466,10 +2466,10 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n                 {\n                     bool signSuccess;\n-                    const CScript& scriptPubKey = coin.first->vout[coin.second].scriptPubKey;\n+                    const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n                     SignatureData sigdata;\n                     if (sign)\n-                        signSuccess = ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, coin.first->vout[coin.second].nValue, SIGHASH_ALL), scriptPubKey, sigdata);\n+                        signSuccess = ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, coin.first->tx->vout[coin.second].nValue, SIGHASH_ALL), scriptPubKey, sigdata);\n                     else\n                         signSuccess = ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata);\n \n@@ -2494,16 +2494,16 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 }\n \n                 // Embed the constructed transaction data in wtxNew.\n-                *static_cast<CTransaction*>(&wtxNew) = CTransaction(txNew);\n+                wtxNew.SetTx(MakeTransactionRef(std::move(txNew)));\n \n                 // Limit size\n-                if (GetTransactionWeight(txNew) >= MAX_STANDARD_TX_WEIGHT)\n+                if (GetTransactionWeight(wtxNew) >= MAX_STANDARD_TX_WEIGHT)\n                 {\n                     strFailReason = _(\"Transaction too large\");\n                     return false;\n                 }\n \n-                dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n+                dPriority = wtxNew.tx->ComputePriority(dPriority, nBytes);\n \n                 // Allow to override the default confirmation target over the CoinControl instance\n                 int currentConfirmationTarget = nTxConfirmTarget;\n@@ -2555,7 +2555,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n {\n     {\n         LOCK2(cs_main, cs_wallet);\n-        LogPrintf(\"CommitTransaction:\\n%s\", wtxNew.ToString());\n+        LogPrintf(\"CommitTransaction:\\n%s\", wtxNew.tx->ToString());\n         {\n             // Take key pair from key pool so it won't be used again\n             reservekey.KeepKey();\n@@ -2565,7 +2565,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n             AddToWallet(wtxNew);\n \n             // Notify that old coins are spent\n-            BOOST_FOREACH(const CTxIn& txin, wtxNew.vin)\n+            BOOST_FOREACH(const CTxIn& txin, wtxNew.tx->vin)\n             {\n                 CWalletTx &coin = mapWallet[txin.prevout.hash];\n                 coin.BindWallet(this);\n@@ -2939,15 +2939,15 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n             if (nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? 0 : 1))\n                 continue;\n \n-            for (unsigned int i = 0; i < pcoin->vout.size(); i++)\n+            for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++)\n             {\n                 CTxDestination addr;\n-                if (!IsMine(pcoin->vout[i]))\n+                if (!IsMine(pcoin->tx->vout[i]))\n                     continue;\n-                if(!ExtractDestination(pcoin->vout[i].scriptPubKey, addr))\n+                if(!ExtractDestination(pcoin->tx->vout[i].scriptPubKey, addr))\n                     continue;\n \n-                CAmount n = IsSpent(walletEntry.first, i) ? 0 : pcoin->vout[i].nValue;\n+                CAmount n = IsSpent(walletEntry.first, i) ? 0 : pcoin->tx->vout[i].nValue;\n \n                 if (!balances.count(addr))\n                     balances[addr] = 0;\n@@ -2969,16 +2969,16 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n     {\n         CWalletTx *pcoin = &walletEntry.second;\n \n-        if (pcoin->vin.size() > 0)\n+        if (pcoin->tx->vin.size() > 0)\n         {\n             bool any_mine = false;\n             // group all input addresses with each other\n-            BOOST_FOREACH(CTxIn txin, pcoin->vin)\n+            BOOST_FOREACH(CTxIn txin, pcoin->tx->vin)\n             {\n                 CTxDestination address;\n                 if(!IsMine(txin)) /* If this input isn't mine, ignore it */\n                     continue;\n-                if(!ExtractDestination(mapWallet[txin.prevout.hash].vout[txin.prevout.n].scriptPubKey, address))\n+                if(!ExtractDestination(mapWallet[txin.prevout.hash].tx->vout[txin.prevout.n].scriptPubKey, address))\n                     continue;\n                 grouping.insert(address);\n                 any_mine = true;\n@@ -2987,7 +2987,7 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n             // group change with input addresses\n             if (any_mine)\n             {\n-               BOOST_FOREACH(CTxOut txout, pcoin->vout)\n+               BOOST_FOREACH(CTxOut txout, pcoin->tx->vout)\n                    if (IsChange(txout))\n                    {\n                        CTxDestination txoutAddr;\n@@ -3004,11 +3004,11 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n         }\n \n         // group lone addrs by themselves\n-        for (unsigned int i = 0; i < pcoin->vout.size(); i++)\n-            if (IsMine(pcoin->vout[i]))\n+        for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++)\n+            if (IsMine(pcoin->tx->vout[i]))\n             {\n                 CTxDestination address;\n-                if(!ExtractDestination(pcoin->vout[i].scriptPubKey, address))\n+                if(!ExtractDestination(pcoin->tx->vout[i].scriptPubKey, address))\n                     continue;\n                 grouping.insert(address);\n                 groupings.insert(grouping);\n@@ -3275,7 +3275,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n         if (blit != mapBlockIndex.end() && chainActive.Contains(blit->second)) {\n             // ... which are already in a block\n             int nHeight = blit->second->nHeight;\n-            BOOST_FOREACH(const CTxOut &txout, wtx.vout) {\n+            BOOST_FOREACH(const CTxOut &txout, wtx.tx->vout) {\n                 // iterate over all their outputs\n                 CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n                 BOOST_FOREACH(const CKeyID &keyid, vAffected) {"
      },
      {
        "sha": "f7103b6a809e1373a74bd7b519e5cd8a15920835",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 19,
        "deletions": 14,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
        "patch": "@@ -161,13 +161,14 @@ struct COutputEntry\n };\n \n /** A transaction with a merkle branch linking it to the block chain. */\n-class CMerkleTx : public CTransaction\n+class CMerkleTx\n {\n private:\n   /** Constant used in hashBlock to indicate tx has been abandoned */\n     static const uint256 ABANDON_HASH;\n \n public:\n+    CTransactionRef tx;\n     uint256 hashBlock;\n \n     /* An nIndex == -1 means that hashBlock (in nonzero) refers to the earliest\n@@ -179,26 +180,37 @@ class CMerkleTx : public CTransaction\n \n     CMerkleTx()\n     {\n+        SetTx(MakeTransactionRef());\n         Init();\n     }\n \n-    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)\n+    CMerkleTx(CTransactionRef arg)\n     {\n+        SetTx(std::move(arg));\n         Init();\n     }\n \n+    /** Helper conversion operator to allow passing CMerkleTx where CTransaction is expected.\n+     *  TODO: adapt callers and remove this operator. */\n+    operator const CTransaction&() const { return *tx; }\n+\n     void Init()\n     {\n         hashBlock = uint256();\n         nIndex = -1;\n     }\n \n+    void SetTx(CTransactionRef arg)\n+    {\n+        tx = std::move(arg);\n+    }\n+\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n         std::vector<uint256> vMerkleBranch; // For compatibility with older versions.\n-        READWRITE(*(CTransaction*)this);\n+        READWRITE(tx);\n         READWRITE(hashBlock);\n         READWRITE(vMerkleBranch);\n         READWRITE(nIndex);\n@@ -221,6 +233,9 @@ class CMerkleTx : public CTransaction\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n     void setAbandoned() { hashBlock = ABANDON_HASH; }\n+\n+    const uint256& GetHash() const { return tx->GetHash(); }\n+    bool IsCoinBase() const { return tx->IsCoinBase(); }\n };\n \n /** \n@@ -267,17 +282,7 @@ class CWalletTx : public CMerkleTx\n         Init(NULL);\n     }\n \n-    CWalletTx(const CWallet* pwalletIn)\n-    {\n-        Init(pwalletIn);\n-    }\n-\n-    CWalletTx(const CWallet* pwalletIn, const CMerkleTx& txIn) : CMerkleTx(txIn)\n-    {\n-        Init(pwalletIn);\n-    }\n-\n-    CWalletTx(const CWallet* pwalletIn, const CTransaction& txIn) : CMerkleTx(txIn)\n+    CWalletTx(const CWallet* pwalletIn, CTransactionRef arg) : CMerkleTx(std::move(arg))\n     {\n         Init(pwalletIn);\n     }"
      }
    ]
  },
  {
    "sha": "42fd8dee302fec55ba0970e2f1378edc2797e4ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmZkOGRlZTMwMmZlYzU1YmEwOTcwZTJmMTM3OGVkYzI3OTdlNGZm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-30T22:50:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-12-03T02:28:22Z"
      },
      "message": "Make DecodeHexTx return a CMutableTransaction",
      "tree": {
        "sha": "0b2b5cb6be13f876f5b0fc6060da144213cda6bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b2b5cb6be13f876f5b0fc6060da144213cda6bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42fd8dee302fec55ba0970e2f1378edc2797e4ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42fd8dee302fec55ba0970e2f1378edc2797e4ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42fd8dee302fec55ba0970e2f1378edc2797e4ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42fd8dee302fec55ba0970e2f1378edc2797e4ff/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3f5673a6304e3ea9fa56fff66b6ea1cb73cc98f"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 17,
      "deletions": 18
    },
    "files": [
      {
        "sha": "1ed1449f03e64ea14086bd1ef5a6f23fb2df07d0",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42fd8dee302fec55ba0970e2f1378edc2797e4ff/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42fd8dee302fec55ba0970e2f1378edc2797e4ff/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=42fd8dee302fec55ba0970e2f1378edc2797e4ff",
        "patch": "@@ -623,7 +623,7 @@ static int CommandLineRawTx(int argc, char* argv[])\n             argv++;\n         }\n \n-        CTransaction txDecodeTmp;\n+        CMutableTransaction tx;\n         int startArg;\n \n         if (!fCreateBlank) {\n@@ -636,15 +636,13 @@ static int CommandLineRawTx(int argc, char* argv[])\n             if (strHexTx == \"-\")                 // \"-\" implies standard input\n                 strHexTx = readStdin();\n \n-            if (!DecodeHexTx(txDecodeTmp, strHexTx, true))\n+            if (!DecodeHexTx(tx, strHexTx, true))\n                 throw std::runtime_error(\"invalid transaction encoding\");\n \n             startArg = 2;\n         } else\n             startArg = 1;\n \n-        CMutableTransaction tx(txDecodeTmp);\n-\n         for (int i = startArg; i < argc; i++) {\n             std::string arg = argv[i];\n             std::string key, value;"
      },
      {
        "sha": "4344290bb880cc165d9f80930a85e59472ea2a82",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42fd8dee302fec55ba0970e2f1378edc2797e4ff/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42fd8dee302fec55ba0970e2f1378edc2797e4ff/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=42fd8dee302fec55ba0970e2f1378edc2797e4ff",
        "patch": "@@ -11,13 +11,14 @@\n class CBlock;\n class CScript;\n class CTransaction;\n+class CMutableTransaction;\n class uint256;\n class UniValue;\n \n // core_read.cpp\n CScript ParseScript(const std::string& s);\n std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);\n-bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx, bool fTryNoWitness = false);\n+bool DecodeHexTx(CMutableTransaction& tx, const std::string& strHexTx, bool fTryNoWitness = false);\n bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n uint256 ParseHashUV(const UniValue& v, const std::string& strName);\n uint256 ParseHashStr(const std::string&, const std::string& strName);"
      },
      {
        "sha": "b6d0285459ed8ee6249da7a630044690153fc48d",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42fd8dee302fec55ba0970e2f1378edc2797e4ff/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42fd8dee302fec55ba0970e2f1378edc2797e4ff/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=42fd8dee302fec55ba0970e2f1378edc2797e4ff",
        "patch": "@@ -90,7 +90,7 @@ CScript ParseScript(const std::string& s)\n     return result;\n }\n \n-bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx, bool fTryNoWitness)\n+bool DecodeHexTx(CMutableTransaction& tx, const std::string& strHexTx, bool fTryNoWitness)\n {\n     if (!IsHex(strHexTx))\n         return false;"
      },
      {
        "sha": "48769a5335fc8afdf0a0cd6737a12a04e2724661",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42fd8dee302fec55ba0970e2f1378edc2797e4ff/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42fd8dee302fec55ba0970e2f1378edc2797e4ff/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=42fd8dee302fec55ba0970e2f1378edc2797e4ff",
        "patch": "@@ -520,13 +520,13 @@ UniValue decoderawtransaction(const JSONRPCRequest& request)\n     LOCK(cs_main);\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n \n-    CTransaction tx;\n+    CMutableTransaction mtx;\n \n-    if (!DecodeHexTx(tx, request.params[0].get_str(), true))\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n     UniValue result(UniValue::VOBJ);\n-    TxToJSON(tx, uint256(), result);\n+    TxToJSON(CTransaction(std::move(mtx)), uint256(), result);\n \n     return result;\n }\n@@ -883,9 +883,10 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL));\n \n     // parse hex string from parameter\n-    CTransaction tx;\n-    if (!DecodeHexTx(tx, request.params[0].get_str()))\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    CTransaction tx(std::move(mtx));\n     uint256 hashTx = tx.GetHash();\n \n     bool fLimitFree = false;"
      },
      {
        "sha": "008a4ece19f6bf3de3b9ab5219ad8e8e0852d14c",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42fd8dee302fec55ba0970e2f1378edc2797e4ff/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42fd8dee302fec55ba0970e2f1378edc2797e4ff/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=42fd8dee302fec55ba0970e2f1378edc2797e4ff",
        "patch": "@@ -267,7 +267,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n             \"2. \\\"txoutproof\\\"     (string, required) The hex output from gettxoutproof that contains the transaction\\n\"\n         );\n \n-    CTransaction tx;\n+    CMutableTransaction tx;\n     if (!DecodeHexTx(tx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     uint256 hashTx = tx.GetHash();\n@@ -304,7 +304,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (pwalletMain->IsMine(tx)) {\n+    if (pwalletMain->IsMine(wtx)) {\n         pwalletMain->AddToWallet(wtx, false);\n         return NullUniValue;\n     }"
      },
      {
        "sha": "9e32b6751dfd0709a433bf563a450bfe3819e517",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42fd8dee302fec55ba0970e2f1378edc2797e4ff/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42fd8dee302fec55ba0970e2f1378edc2797e4ff/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=42fd8dee302fec55ba0970e2f1378edc2797e4ff",
        "patch": "@@ -2557,17 +2557,16 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     }\n \n     // parse hex string from parameter\n-    CTransaction origTx;\n-    if (!DecodeHexTx(origTx, request.params[0].get_str(), true))\n+    CMutableTransaction tx;\n+    if (!DecodeHexTx(tx, request.params[0].get_str(), true))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n-    if (origTx.vout.size() == 0)\n+    if (tx.vout.size() == 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"TX must have at least one output\");\n \n-    if (changePosition != -1 && (changePosition < 0 || (unsigned int)changePosition > origTx.vout.size()))\n+    if (changePosition != -1 && (changePosition < 0 || (unsigned int)changePosition > tx.vout.size()))\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"changePosition out of bounds\");\n \n-    CMutableTransaction tx(origTx);\n     CAmount nFeeOut;\n     string strFailReason;\n "
      }
    ]
  },
  {
    "sha": "81e3228fcb33e8ed32d8b9fbe917444ba080073a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWUzMjI4ZmNiMzNlOGVkMzJkOGI5ZmJlOTE3NDQ0YmEwODAwNzNh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-12T00:23:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-12-03T02:37:43Z"
      },
      "message": "Make CTransaction actually immutable",
      "tree": {
        "sha": "345dd81bc1661003ea8957fe1f69050b3187d4ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/345dd81bc1661003ea8957fe1f69050b3187d4ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81e3228fcb33e8ed32d8b9fbe917444ba080073a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81e3228fcb33e8ed32d8b9fbe917444ba080073a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81e3228fcb33e8ed32d8b9fbe917444ba080073a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81e3228fcb33e8ed32d8b9fbe917444ba080073a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42fd8dee302fec55ba0970e2f1378edc2797e4ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42fd8dee302fec55ba0970e2f1378edc2797e4ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42fd8dee302fec55ba0970e2f1378edc2797e4ff"
      }
    ],
    "stats": {
      "total": 271,
      "additions": 131,
      "deletions": 140
    },
    "files": [
      {
        "sha": "b1283c236c3b29ebb8f7bfcf7b58ebd4ac70f299",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=81e3228fcb33e8ed32d8b9fbe917444ba080073a",
        "patch": "@@ -1594,8 +1594,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         deque<COutPoint> vWorkQueue;\n         vector<uint256> vEraseQueue;\n-        CTransaction tx;\n-        vRecv >> tx;\n+        CTransaction tx(deserialize, vRecv);\n \n         CInv inv(MSG_TX, tx.GetHash());\n         pfrom->AddInventoryKnown(inv);"
      },
      {
        "sha": "11d7eace55737f458defd62025f9f66197fa6468",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 21,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=81e3228fcb33e8ed32d8b9fbe917444ba080073a",
        "patch": "@@ -62,35 +62,20 @@ uint256 CMutableTransaction::GetHash() const\n     return SerializeHash(*this, SER_GETHASH, SERIALIZE_TRANSACTION_NO_WITNESS);\n }\n \n-void CTransaction::UpdateHash() const\n+uint256 CTransaction::ComputeHash() const\n {\n-    *const_cast<uint256*>(&hash) = SerializeHash(*this, SER_GETHASH, SERIALIZE_TRANSACTION_NO_WITNESS);\n+    return SerializeHash(*this, SER_GETHASH, SERIALIZE_TRANSACTION_NO_WITNESS);\n }\n \n uint256 CTransaction::GetWitnessHash() const\n {\n     return SerializeHash(*this, SER_GETHASH, 0);\n }\n \n-CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n-\n-CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), wit(tx.wit), nLockTime(tx.nLockTime) {\n-    UpdateHash();\n-}\n-\n-CTransaction::CTransaction(CMutableTransaction &&tx) : nVersion(tx.nVersion), vin(std::move(tx.vin)), vout(std::move(tx.vout)), wit(std::move(tx.wit)), nLockTime(tx.nLockTime) {\n-    UpdateHash();\n-}\n-\n-CTransaction& CTransaction::operator=(const CTransaction &tx) {\n-    *const_cast<int*>(&nVersion) = tx.nVersion;\n-    *const_cast<std::vector<CTxIn>*>(&vin) = tx.vin;\n-    *const_cast<std::vector<CTxOut>*>(&vout) = tx.vout;\n-    *const_cast<CTxWitness*>(&wit) = tx.wit;\n-    *const_cast<unsigned int*>(&nLockTime) = tx.nLockTime;\n-    *const_cast<uint256*>(&hash) = tx.hash;\n-    return *this;\n-}\n+/* For backward compatibility, the hash is initialized to 0. TODO: remove the need for this default constructor entirely. */\n+CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0), hash() {}\n+CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), wit(tx.wit), nLockTime(tx.nLockTime), hash(ComputeHash()) {}\n+CTransaction::CTransaction(CMutableTransaction &&tx) : nVersion(tx.nVersion), vin(std::move(tx.vin)), vout(std::move(tx.vout)), wit(std::move(tx.wit)), nLockTime(tx.nLockTime), hash(ComputeHash()) {}\n \n CAmount CTransaction::GetValueOut() const\n {"
      },
      {
        "sha": "66fefafef5807cb4a06758ff4bb96863ffd91482",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 81,
        "deletions": 69,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=81e3228fcb33e8ed32d8b9fbe917444ba080073a",
        "patch": "@@ -286,73 +286,81 @@ struct CMutableTransaction;\n  *   - CTxWitness wit;\n  * - uint32_t nLockTime\n  */\n-template<typename Stream, typename Operation, typename TxType>\n-inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action) {\n+template<typename Stream, typename TxType>\n+inline void UnserializeTransaction(TxType& tx, Stream& s) {\n     const bool fAllowWitness = !(s.GetVersion() & SERIALIZE_TRANSACTION_NO_WITNESS);\n \n-    READWRITE(*const_cast<int32_t*>(&tx.nVersion));\n+    s >> tx.nVersion;\n     unsigned char flags = 0;\n-    if (ser_action.ForRead()) {\n-        const_cast<std::vector<CTxIn>*>(&tx.vin)->clear();\n-        const_cast<std::vector<CTxOut>*>(&tx.vout)->clear();\n-        const_cast<CTxWitness*>(&tx.wit)->SetNull();\n-        /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n-        READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n-        if (tx.vin.size() == 0 && fAllowWitness) {\n-            /* We read a dummy or an empty vin. */\n-            READWRITE(flags);\n-            if (flags != 0) {\n-                READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n-                READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n-            }\n-        } else {\n-            /* We read a non-empty vin. Assume a normal vout follows. */\n-            READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n-        }\n-        if ((flags & 1) && fAllowWitness) {\n-            /* The witness flag is present, and we support witnesses. */\n-            flags ^= 1;\n-            const_cast<CTxWitness*>(&tx.wit)->vtxinwit.resize(tx.vin.size());\n-            READWRITE(tx.wit);\n-        }\n-        if (flags) {\n-            /* Unknown flag in the serialization */\n-            throw std::ios_base::failure(\"Unknown transaction optional data\");\n+    tx.vin.clear();\n+    tx.vout.clear();\n+    tx.wit.SetNull();\n+    /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n+    s >> tx.vin;\n+    if (tx.vin.size() == 0 && fAllowWitness) {\n+        /* We read a dummy or an empty vin. */\n+        s >> flags;\n+        if (flags != 0) {\n+            s >> tx.vin;\n+            s >> tx.vout;\n         }\n     } else {\n-        // Consistency check\n-        assert(tx.wit.vtxinwit.size() <= tx.vin.size());\n-        if (fAllowWitness) {\n-            /* Check whether witnesses need to be serialized. */\n-            if (!tx.wit.IsNull()) {\n-                flags |= 1;\n-            }\n-        }\n-        if (flags) {\n-            /* Use extended format in case witnesses are to be serialized. */\n-            std::vector<CTxIn> vinDummy;\n-            READWRITE(vinDummy);\n-            READWRITE(flags);\n+        /* We read a non-empty vin. Assume a normal vout follows. */\n+        s >> tx.vout;\n+    }\n+    if ((flags & 1) && fAllowWitness) {\n+        /* The witness flag is present, and we support witnesses. */\n+        flags ^= 1;\n+        tx.wit.vtxinwit.resize(tx.vin.size());\n+        s >> tx.wit;\n+    }\n+    if (flags) {\n+        /* Unknown flag in the serialization */\n+        throw std::ios_base::failure(\"Unknown transaction optional data\");\n+    }\n+    s >> tx.nLockTime;\n+}\n+\n+template<typename Stream, typename TxType>\n+inline void SerializeTransaction(const TxType& tx, Stream& s) {\n+    const bool fAllowWitness = !(s.GetVersion() & SERIALIZE_TRANSACTION_NO_WITNESS);\n+\n+    s << tx.nVersion;\n+    unsigned char flags = 0;\n+    // Consistency check\n+    assert(tx.wit.vtxinwit.size() <= tx.vin.size());\n+    if (fAllowWitness) {\n+        /* Check whether witnesses need to be serialized. */\n+        if (!tx.wit.IsNull()) {\n+            flags |= 1;\n         }\n-        READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n-        READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n-        if (flags & 1) {\n-            const_cast<CTxWitness*>(&tx.wit)->vtxinwit.resize(tx.vin.size());\n-            READWRITE(tx.wit);\n+    }\n+    if (flags) {\n+        /* Use extended format in case witnesses are to be serialized. */\n+        std::vector<CTxIn> vinDummy;\n+        s << vinDummy;\n+        s << flags;\n+    }\n+    s << tx.vin;\n+    s << tx.vout;\n+    if (flags & 1) {\n+        for (size_t i = 0; i < tx.vin.size(); i++) {\n+            if (i < tx.wit.vtxinwit.size()) {\n+                s << tx.wit.vtxinwit[i];\n+            } else {\n+                s << CTxInWitness();\n+            }\n         }\n     }\n-    READWRITE(*const_cast<uint32_t*>(&tx.nLockTime));\n+    s << tx.nLockTime;\n }\n \n+\n /** The basic transaction that is broadcasted on the network and contained in\n  * blocks.  A transaction can contain multiple inputs and outputs.\n  */\n class CTransaction\n {\n-private:\n-    /** Memory only. */\n-    const uint256 hash;\n-\n public:\n     // Default transaction version.\n     static const int32_t CURRENT_VERSION=1;\n@@ -374,25 +382,27 @@ class CTransaction\n     CTxWitness wit; // Not const: can change without invalidating the txid cache\n     const uint32_t nLockTime;\n \n+private:\n+    /** Memory only. */\n+    const uint256 hash;\n+\n+    uint256 ComputeHash() const;\n+\n+public:\n     /** Construct a CTransaction that qualifies as IsNull() */\n     CTransaction();\n \n     /** Convert a CMutableTransaction into a CTransaction. */\n     CTransaction(const CMutableTransaction &tx);\n     CTransaction(CMutableTransaction &&tx);\n \n-    CTransaction& operator=(const CTransaction& tx);\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        SerializeTransaction(*this, s, ser_action);\n-        if (ser_action.ForRead()) {\n-            UpdateHash();\n-        }\n+    template <typename Stream>\n+    inline void Serialize(Stream& s) const {\n+        SerializeTransaction(*this, s);\n     }\n \n+    /** This deserializing constructor is provided instead of an Unserialize method.\n+     *  Unserialize is not possible, since it would require overwriting const fields. */\n     template <typename Stream>\n     CTransaction(deserialize_type, Stream& s) : CTransaction(CMutableTransaction(deserialize, s)) {}\n \n@@ -417,7 +427,7 @@ class CTransaction\n \n     // Compute modified tx size for priority calculation (optionally given tx size)\n     unsigned int CalculateModifiedSize(unsigned int nTxSize=0) const;\n-    \n+\n     /**\n      * Get the total transaction size in bytes, including witness data.\n      * \"Total Size\" defined in BIP141 and BIP144.\n@@ -441,8 +451,6 @@ class CTransaction\n     }\n \n     std::string ToString() const;\n-\n-    void UpdateHash() const;\n };\n \n /** A mutable version of CTransaction. */\n@@ -457,11 +465,15 @@ struct CMutableTransaction\n     CMutableTransaction();\n     CMutableTransaction(const CTransaction& tx);\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream>\n+    inline void Serialize(Stream& s) const {\n+        SerializeTransaction(*this, s);\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        SerializeTransaction(*this, s, ser_action);\n+\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s) {\n+        UnserializeTransaction(*this, s);\n     }\n \n     template <typename Stream>"
      },
      {
        "sha": "036d6ca7bf17533657cf40f905cdaf917916ceee",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=81e3228fcb33e8ed32d8b9fbe917444ba080073a",
        "patch": "@@ -85,8 +85,7 @@ static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptP\n     }\n     try {\n         TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION, txTo, txToLen);\n-        CTransaction tx;\n-        stream >> tx;\n+        CTransaction tx(deserialize, stream);\n         if (nIn >= tx.vin.size())\n             return set_error(err, bitcoinconsensus_ERR_TX_INDEX);\n         if (GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) != txToLen)"
      },
      {
        "sha": "b15ff9e44b12bebf2737aa6ec40fdce245399f9a",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=81e3228fcb33e8ed32d8b9fbe917444ba080073a",
        "patch": "@@ -114,16 +114,14 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n BOOST_AUTO_TEST_CASE(bloom_match)\n {\n     // Random real transaction (b4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b)\n-    CTransaction tx;\n     CDataStream stream(ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"), SER_DISK, CLIENT_VERSION);\n-    stream >> tx;\n+    CTransaction tx(deserialize, stream);\n \n     // and one which spends it (e2769b09e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436)\n     unsigned char ch[] = {0x01, 0x00, 0x00, 0x00, 0x01, 0x6b, 0xff, 0x7f, 0xcd, 0x4f, 0x85, 0x65, 0xef, 0x40, 0x6d, 0xd5, 0xd6, 0x3d, 0x4f, 0xf9, 0x4f, 0x31, 0x8f, 0xe8, 0x20, 0x27, 0xfd, 0x4d, 0xc4, 0x51, 0xb0, 0x44, 0x74, 0x01, 0x9f, 0x74, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x49, 0x30, 0x46, 0x02, 0x21, 0x00, 0xda, 0x0d, 0xc6, 0xae, 0xce, 0xfe, 0x1e, 0x06, 0xef, 0xdf, 0x05, 0x77, 0x37, 0x57, 0xde, 0xb1, 0x68, 0x82, 0x09, 0x30, 0xe3, 0xb0, 0xd0, 0x3f, 0x46, 0xf5, 0xfc, 0xf1, 0x50, 0xbf, 0x99, 0x0c, 0x02, 0x21, 0x00, 0xd2, 0x5b, 0x5c, 0x87, 0x04, 0x00, 0x76, 0xe4, 0xf2, 0x53, 0xf8, 0x26, 0x2e, 0x76, 0x3e, 0x2d, 0xd5, 0x1e, 0x7f, 0xf0, 0xbe, 0x15, 0x77, 0x27, 0xc4, 0xbc, 0x42, 0x80, 0x7f, 0x17, 0xbd, 0x39, 0x01, 0x41, 0x04, 0xe6, 0xc2, 0x6e, 0xf6, 0x7d, 0xc6, 0x10, 0xd2, 0xcd, 0x19, 0x24, 0x84, 0x78, 0x9a, 0x6c, 0xf9, 0xae, 0xa9, 0x93, 0x0b, 0x94, 0x4b, 0x7e, 0x2d, 0xb5, 0x34, 0x2b, 0x9d, 0x9e, 0x5b, 0x9f, 0xf7, 0x9a, 0xff, 0x9a, 0x2e, 0xe1, 0x97, 0x8d, 0xd7, 0xfd, 0x01, 0xdf, 0xc5, 0x22, 0xee, 0x02, 0x28, 0x3d, 0x3b, 0x06, 0xa9, 0xd0, 0x3a, 0xcf, 0x80, 0x96, 0x96, 0x8d, 0x7d, 0xbb, 0x0f, 0x91, 0x78, 0xff, 0xff, 0xff, 0xff, 0x02, 0x8b, 0xa7, 0x94, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xba, 0xde, 0xec, 0xfd, 0xef, 0x05, 0x07, 0x24, 0x7f, 0xc8, 0xf7, 0x42, 0x41, 0xd7, 0x3b, 0xc0, 0x39, 0x97, 0x2d, 0x7b, 0x88, 0xac, 0x40, 0x94, 0xa8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xc1, 0x09, 0x32, 0x48, 0x3f, 0xec, 0x93, 0xed, 0x51, 0xf5, 0xfe, 0x95, 0xe7, 0x25, 0x59, 0xf2, 0xcc, 0x70, 0x43, 0xf9, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00};\n     vector<unsigned char> vch(ch, ch + sizeof(ch) -1);\n     CDataStream spendStream(vch, SER_DISK, CLIENT_VERSION);\n-    CTransaction spendingTx;\n-    spendStream >> spendingTx;\n+    CTransaction spendingTx(deserialize, spendStream);\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(uint256S(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\"));"
      },
      {
        "sha": "eb324d5a6b78184ce710c9d3f9d0fdaf6884c804",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=81e3228fcb33e8ed32d8b9fbe917444ba080073a",
        "patch": "@@ -276,7 +276,7 @@ class TestBuilder\n     //! The Witness embedded script\n     CScript witscript;\n     CScriptWitness scriptWitness;\n-    CTransaction creditTx;\n+    CTransactionRef creditTx;\n     CMutableTransaction spendTx;\n     bool havePush;\n     std::vector<unsigned char> push;\n@@ -319,8 +319,8 @@ class TestBuilder\n             redeemscript = scriptPubKey;\n             scriptPubKey = CScript() << OP_HASH160 << ToByteVector(CScriptID(redeemscript)) << OP_EQUAL;\n         }\n-        creditTx = BuildCreditingTransaction(scriptPubKey, nValue);\n-        spendTx = BuildSpendingTransaction(CScript(), CScriptWitness(), creditTx);\n+        creditTx = MakeTransactionRef(BuildCreditingTransaction(scriptPubKey, nValue));\n+        spendTx = BuildSpendingTransaction(CScript(), CScriptWitness(), *creditTx);\n     }\n \n     TestBuilder& ScriptError(ScriptError_t err)\n@@ -421,7 +421,7 @@ class TestBuilder\n     {\n         TestBuilder copy = *this; // Make a copy so we can rollback the push.\n         DoPush();\n-        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, scriptWitness, flags, comment, scriptError, nValue);\n+        DoTest(creditTx->vout[0].scriptPubKey, spendTx.vin[0].scriptSig, scriptWitness, flags, comment, scriptError, nValue);\n         *this = copy;\n         return *this;\n     }\n@@ -447,7 +447,7 @@ class TestBuilder\n             array.push_back(wit);\n         }\n         array.push_back(FormatScript(spendTx.vin[0].scriptSig));\n-        array.push_back(FormatScript(creditTx.vout[0].scriptPubKey));\n+        array.push_back(FormatScript(creditTx->vout[0].scriptPubKey));\n         array.push_back(FormatScriptFlags(flags));\n         array.push_back(FormatScriptError((ScriptError_t)scriptError));\n         array.push_back(comment);\n@@ -461,7 +461,7 @@ class TestBuilder\n \n     const CScript& GetScriptPubKey()\n     {\n-        return creditTx.vout[0].scriptPubKey;\n+        return creditTx->vout[0].scriptPubKey;\n     }\n };\n "
      },
      {
        "sha": "1dc86eb11625afc56055d1e02a08ab6a20731363",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=81e3228fcb33e8ed32d8b9fbe917444ba080073a",
        "patch": "@@ -21,10 +21,10 @@ class CSerializeMethodsTestSingle\n     bool boolval;\n     std::string stringval;\n     const char* charstrval;\n-    CTransaction txval;\n+    CTransactionRef txval;\n public:\n     CSerializeMethodsTestSingle() = default;\n-    CSerializeMethodsTestSingle(int intvalin, bool boolvalin, std::string stringvalin, const char* charstrvalin, CTransaction txvalin) : intval(intvalin), boolval(boolvalin), stringval(std::move(stringvalin)), charstrval(charstrvalin), txval(txvalin){}\n+    CSerializeMethodsTestSingle(int intvalin, bool boolvalin, std::string stringvalin, const char* charstrvalin, CTransaction txvalin) : intval(intvalin), boolval(boolvalin), stringval(std::move(stringvalin)), charstrval(charstrvalin), txval(MakeTransactionRef(txvalin)){}\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n@@ -42,7 +42,7 @@ class CSerializeMethodsTestSingle\n                 boolval == rhs.boolval && \\\n                 stringval == rhs.stringval && \\\n                 strcmp(charstrval, rhs.charstrval) == 0 && \\\n-                txval == rhs.txval;\n+                *txval == *rhs.txval;\n     }\n };\n "
      },
      {
        "sha": "a524f5b94610452143920cb928944b6caa1b03c4",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=81e3228fcb33e8ed32d8b9fbe917444ba080073a",
        "patch": "@@ -184,7 +184,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n         std::string raw_tx, raw_script, sigHashHex;\n         int nIn, nHashType;\n         uint256 sh;\n-        CTransaction tx;\n+        CTransactionRef tx;\n         CScript scriptCode = CScript();\n \n         try {\n@@ -199,7 +199,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n           stream >> tx;\n \n           CValidationState state;\n-          BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n+          BOOST_CHECK_MESSAGE(CheckTransaction(*tx, state), strTest);\n           BOOST_CHECK(state.IsValid());\n \n           std::vector<unsigned char> raw = ParseHex(raw_script);\n@@ -209,7 +209,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n           continue;\n         }\n \n-        sh = SignatureHash(scriptCode, tx, nIn, nHashType, 0, SIGVERSION_BASE);\n+        sh = SignatureHash(scriptCode, *tx, nIn, nHashType, 0, SIGVERSION_BASE);\n         BOOST_CHECK_MESSAGE(sh.GetHex() == sigHashHex, strTest);\n     }\n }"
      },
      {
        "sha": "ae5406ef7e74261ef0c30f96b138b8d4b68b819c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 26,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=81e3228fcb33e8ed32d8b9fbe917444ba080073a",
        "patch": "@@ -150,8 +150,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n             string transaction = test[1].get_str();\n             CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION);\n-            CTransaction tx;\n-            stream >> tx;\n+            CTransaction tx(deserialize, stream);\n \n             CValidationState state;\n             BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n@@ -236,8 +235,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n             string transaction = test[1].get_str();\n             CDataStream stream(ParseHex(transaction), SER_NETWORK, PROTOCOL_VERSION );\n-            CTransaction tx;\n-            stream >> tx;\n+            CTransaction tx(deserialize, stream);\n \n             CValidationState state;\n             fValid = CheckTransaction(tx, state) && state.IsValid();\n@@ -346,7 +344,7 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     BOOST_CHECK_EQUAL(coins.GetValueIn(t1), (50+21+22)*CENT);\n }\n \n-void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, CTransaction& output, CMutableTransaction& input, bool success = true)\n+void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)\n {\n     CMutableTransaction outputm;\n     outputm.nVersion = 1;\n@@ -360,22 +358,22 @@ void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, C\n     CDataStream ssout(SER_NETWORK, PROTOCOL_VERSION);\n     ssout << outputm;\n     ssout >> output;\n-    assert(output.vin.size() == 1);\n-    assert(output.vin[0] == outputm.vin[0]);\n-    assert(output.vout.size() == 1);\n-    assert(output.vout[0] == outputm.vout[0]);\n-    assert(output.wit.vtxinwit.size() == 0);\n+    assert(output->vin.size() == 1);\n+    assert(output->vin[0] == outputm.vin[0]);\n+    assert(output->vout.size() == 1);\n+    assert(output->vout[0] == outputm.vout[0]);\n+    assert(output->wit.vtxinwit.size() == 0);\n \n     CMutableTransaction inputm;\n     inputm.nVersion = 1;\n     inputm.vin.resize(1);\n-    inputm.vin[0].prevout.hash = output.GetHash();\n+    inputm.vin[0].prevout.hash = output->GetHash();\n     inputm.vin[0].prevout.n = 0;\n     inputm.wit.vtxinwit.resize(1);\n     inputm.vout.resize(1);\n     inputm.vout[0].nValue = 1;\n     inputm.vout[0].scriptPubKey = CScript();\n-    bool ret = SignSignature(keystore, output, inputm, 0, SIGHASH_ALL);\n+    bool ret = SignSignature(keystore, *output, inputm, 0, SIGHASH_ALL);\n     assert(ret == success);\n     CDataStream ssin(SER_NETWORK, PROTOCOL_VERSION);\n     ssin << inputm;\n@@ -393,11 +391,11 @@ void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, C\n     }\n }\n \n-void CheckWithFlag(const CTransaction& output, const CMutableTransaction& input, int flags, bool success)\n+void CheckWithFlag(const CTransactionRef& output, const CMutableTransaction& input, int flags, bool success)\n {\n     ScriptError error;\n     CTransaction inputi(input);\n-    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, inputi.wit.vtxinwit.size() > 0 ? &inputi.wit.vtxinwit[0].scriptWitness : NULL, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue), &error);\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output->vout[0].scriptPubKey, inputi.wit.vtxinwit.size() > 0 ? &inputi.wit.vtxinwit[0].scriptWitness : NULL, flags, TransactionSignatureChecker(&inputi, 0, output->vout[0].nValue), &error);\n     assert(ret == success);\n }\n \n@@ -466,10 +464,10 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n         assert(hashSigned);\n     }\n \n-    CTransaction tx;\n     CDataStream ssout(SER_NETWORK, PROTOCOL_VERSION);\n-    WithOrVersion(&ssout, 0) << mtx;\n-    WithOrVersion(&ssout, 0) >> tx;\n+    auto vstream = WithOrVersion(&ssout, 0);\n+    vstream << mtx;\n+    CTransaction tx(deserialize, vstream);\n \n     // check all inputs concurrently, with the cache\n     PrecomputedTransactionData txdata(tx);\n@@ -547,7 +545,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     keystore2.AddCScript(GetScriptForWitness(scriptMulti));\n     keystore2.AddKeyPubKey(key3, pubkey3);\n \n-    CTransaction output1, output2;\n+    CTransactionRef output1, output2;\n     CMutableTransaction input1, input2;\n     SignatureData sigdata;\n \n@@ -639,8 +637,8 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input1, 0, false);\n     CreateCreditAndSpend(keystore2, scriptMulti, output2, input2, false);\n     CheckWithFlag(output2, input2, 0, false);\n-    BOOST_CHECK(output1 == output2);\n-    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    BOOST_CHECK(*output1 == *output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n     // P2SH 2-of-2 multisig\n@@ -650,8 +648,8 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CreateCreditAndSpend(keystore2, GetScriptForDestination(CScriptID(scriptMulti)), output2, input2, false);\n     CheckWithFlag(output2, input2, 0, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, false);\n-    BOOST_CHECK(output1 == output2);\n-    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    BOOST_CHECK(*output1 == *output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n@@ -662,8 +660,8 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CreateCreditAndSpend(keystore2, GetScriptForWitness(scriptMulti), output2, input2, false);\n     CheckWithFlag(output2, input2, 0, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n-    BOOST_CHECK(output1 == output2);\n-    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    BOOST_CHECK(*output1 == *output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n@@ -674,8 +672,8 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CreateCreditAndSpend(keystore2, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptMulti))), output2, input2, false);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n-    BOOST_CHECK(output1 == output2);\n-    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    BOOST_CHECK(*output1 == *output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n }"
      },
      {
        "sha": "7eef14af2b748eb4398e1925c6ffa515b2e812a5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81e3228fcb33e8ed32d8b9fbe917444ba080073a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=81e3228fcb33e8ed32d8b9fbe917444ba080073a",
        "patch": "@@ -2859,8 +2859,9 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n             out.scriptPubKey[5] = 0xed;\n             memcpy(&out.scriptPubKey[6], witnessroot.begin(), 32);\n             commitment = std::vector<unsigned char>(out.scriptPubKey.begin(), out.scriptPubKey.end());\n-            const_cast<std::vector<CTxOut>*>(&block.vtx[0]->vout)->push_back(out);\n-            block.vtx[0]->UpdateHash();\n+            CMutableTransaction tx(*block.vtx[0]);\n+            tx.vout.push_back(out);\n+            block.vtx[0] = MakeTransactionRef(std::move(tx));\n         }\n     }\n     UpdateUncommittedBlockStructures(block, pindexPrev, consensusParams);\n@@ -4090,10 +4091,9 @@ bool LoadMempool(void)\n         file >> num;\n         double prioritydummy = 0;\n         while (num--) {\n-            CTransaction tx;\n             int64_t nTime;\n             int64_t nFeeDelta;\n-            file >> tx;\n+            CTransaction tx(deserialize, file);\n             file >> nTime;\n             file >> nFeeDelta;\n "
      }
    ]
  }
]