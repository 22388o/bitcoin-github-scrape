laanwj,2016-08-25T08:20:27Z,"Concept ACK, thanks for doing this!\n",https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-242313821,242313821,
sipa,2016-08-25T09:14:24Z,"@daira This is probably interesting to you as well.\n\nThe reason for this alternative is that @laanwj pointed out that #8451 is a step in the wrong direction if we want a more encapsulated CTransaction (which perhaps no longer uses the same representation, but uses a single-malloced block of data for example).\n",https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-242326076,242326076,
sipa,2016-08-27T16:45:56Z,"@luke-jr: No, but it's what the old code did as well (it automatically converted the CMutableTransactions to CTransaction, and then invoked its operator== which only compares the hashes).\n",https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-242927693,242927693,
dcousens,2016-08-29T00:59:51Z,> This PR implements the latter - which I believe to be well-defined but very ugly. Suggestions or rants welcome.\n\nMy understanding was that even this hack is [illegal and UB](https://stackoverflow.com/questions/12908398/can-placement-new-and-vectordata-be-used-to-replace-elements-in-a-vector).\nAnother [good explanation of the edge cases and reasons against this](https://stackoverflow.com/quest,https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-243011281,243011281,
sipa,2016-08-29T07:32:35Z,@dcousens Thanks. I will switch to a less efficient mechanism.\n,https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-243052533,243052533,
paveljanik,2016-09-15T08:00:45Z,S&M request: please rebase pain ;-)\n,https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-247262653,247262653,
sipa,2016-09-19T11:15:59Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-247966715,247966715,
gmaxwell,2016-09-23T17:29:38Z,Would it be possible to simply change the representation of a block so the first transaction is handled separately? Perhaps even building up the hashtree so updating the root doesn't require recomputing everything?\n,https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-249253589,249253589,
sipa,2016-09-23T17:32:37Z,"As a follow-up I just plan to turn CBlock::vtx into a vector of\nshared_ptr's. That way we can more easily construct blocks from the\nmempool, more easily readd disconnected transactions back to the mempool,\nand don't need all this hackery to update the coinbase.\n",https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-249254325,249254325,
gmaxwell,2016-09-23T19:29:32Z,Concept ACK.\n,https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-249282002,249282002,
gmaxwell,2016-09-24T12:39:51Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-249362805,249362805,
sipa,2016-10-02T23:46:02Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-251004497,251004497,
sipa,2016-10-21T19:40:06Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-255448553,255448553,
sipa,2016-10-29T23:43:09Z,"I'd like to first get #9039 reviewed, as that would remove the need for the Construct method in streams (and thus allowing to construct an object directly by passing a stream into its constructor).\n",https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-257122605,257122605,
TheBlueMatt,2016-10-29T23:44:09Z,"Agreed, let's do #9039 first.\n\nOn October 29, 2016 7:43:16 PM EDT, Pieter Wuille notifications@github.com wrote:\n\n> I'd like to first get #9039 reviewed, as that would remove the need for\n> the Construct method in streams (and thus allowing to construct an\n> object directly by passing a stream into its constructor).\n> \n> ## \n> \n> You are receiving this because you commented.\n> Reply to ",https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-257122633,257122633,
sipa,2016-11-13T01:33:30Z,"Rebased on top of #9125, using a more efficent approach that turns more CTransactions into shared_ptrs (see updated PR description).\n\nThis invalidates any earlier review, sorry.\n",https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-260160521,260160521,
jtimon,2016-11-18T01:50:44Z,utACK c1955323ad9135d8e845a885063eb608c250beb3 \nleft-UnserializeTransaction-separation-from-SerializeTransaction-for-another-day utACK  63296e690a0805bc6501d69d100add8c0abdeb3c\n,https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-261426628,261426628,
sipa,2016-11-22T19:08:50Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-262334910,262334910,
gmaxwell,2016-11-25T20:10:00Z,"tested ACK! (you might want to rebase, it applies with a bit of fuzz)",https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-263017714,263017714,
sipa,2016-11-30T23:19:05Z,"Rebased, and addressed @ryanofsky's comments.",https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-264028075,264028075,
gmaxwell,2016-12-04T22:05:09Z,Is there anything else this is waiting on?,https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-264735208,264735208,
laanwj,2016-12-05T07:03:48Z,utACK 81e3228,https://github.com/bitcoin/bitcoin/pull/8580#issuecomment-264781624,264781624,
luke-jr,2016-08-27T03:35:24Z,This ignores witness data. Is that intentional?\n,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r76509386,76509386,src/primitives/transaction.h
theuni,2016-10-28T18:21:16Z,"make CSerActionSerialize::ForRead() and CSerActionUnserialize::ForRead() constexpr, then you can static_assert at build-time instead.\n",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r85583860,85583860,src/primitives/transaction.h
TheBlueMatt,2016-10-28T19:17:05Z,"nit: lol, can we get a real variable name here?\n",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r85593812,85593812,src/blockencodings.h
kazcw,2016-10-28T19:26:33Z,Nit: could accept a unique_ptr&& so the API documents the ownership semantics\n,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r85595237,85595237,src/qt/walletmodeltransaction.cpp
TheBlueMatt,2016-10-28T19:30:29Z,Can you make this a define based on the other block size limits and min transaction size isntead of making it unexplained magic?\n,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r85595901,85595901,src/primitives/block.h
TheBlueMatt,2016-10-28T19:48:38Z,"Can't you std::move here? That object is not used anywhere hereafter, except to be destructed.\n",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r85598579,85598579,src/main.cpp
TheBlueMatt,2016-10-28T19:52:56Z,"It seems like you're making a needless copy here? Why not just\nCTransaction tx(vRecv, vRecv.nType, vRecv.nVersion) (or, better yet, make a new constructor which knows how to pull out nType and nVersion).\n",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r85599223,85599223,src/main.cpp
TheBlueMatt,2016-10-28T19:53:08Z,"I think you can move here, too.\n",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r85599247,85599247,src/miner.cpp
TheBlueMatt,2016-10-28T20:38:37Z,Same here: needless copy sucks.\n,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r85606084,85606084,src/script/bitcoinconsensus.cpp
kazcw,2016-10-28T20:53:00Z,"moved here, used below\n",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r85608383,85608383,src/wallet/wallet.cpp
TheBlueMatt,2016-10-28T20:55:48Z,I really dont like adding methods here that we just assert(false) on...would prefer to just call the constructor directly instead.\n,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r85608862,85608862,src/serialize.h
TheBlueMatt,2016-10-28T20:58:50Z,"Tiny nit: can you move this down to right above SendMoney, so its clear that its not init'd until then 9and in the next two functions as well)\n",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r85609261,85609261,src/wallet/rpcwallet.cpp
TheBlueMatt,2016-10-28T21:09:47Z,Might as well make the line above this an assert as well (and remove this line)\n,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r85610849,85610849,src/wallet/wallet.h
sipa,2016-10-29T23:47:02Z,"If CTransaction is entirely immutable, a move constructor would just be identical to a copy constructor, so no need. We could leave a move constructor that only moves the (mutable) witness field, but that would get more complicated with #8589 (which moves the witness data inside CTxIn). I think a better (but follow-up) change would be changing CBlock::vtx to a `std::vector<std::shared_ptr<CTransac",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r85650371,85650371,src/main.cpp
sipa,2016-10-29T23:47:43Z,See #9039.\n,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r85650377,85650377,src/main.cpp
sipa,2016-10-29T23:49:26Z,"See #9039 (though I think after that, we won't actually need this unimplemented branch anymore).\n",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r85650386,85650386,src/primitives/transaction.h
theuni,2016-11-17T21:33:51Z,unneeded?\n,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r88551255,88551255,src/bitcoin-tx.cpp
jtimon,2016-11-18T00:58:05Z,Where is this operator used? CTransactionRef tx is public.\nMaybe a getter and making it protected would be better?\n,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r88581370,88581370,src/wallet/wallet.h
sipa,2016-11-18T00:59:58Z,This is an implicit conversion operator. It allows you to pass a CWalletTx in any place where a 'const CTransaction&' is expected. I can avoid it by changing a number of extra lines.\n,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r88581548,88581548,src/wallet/wallet.h
sipa,2016-11-18T01:05:46Z,"Nope, without it, `bitocin-tx -create` segfaults.\n",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r88582257,88582257,src/bitcoin-tx.cpp
jtimon,2016-11-18T01:27:42Z,"oh, I see, it's just to avoid extra disruption. I would prefer it gone, yes. But it doesn't need to be in this PR. Thoughts on the getter instead of a tx being public? Changing that shouldn't extra disruption. I guess this can be done later too, but it's ""free"" now disruption-wise.\n",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r88584661,88584661,src/wallet/wallet.h
jtimon,2016-11-18T01:38:58Z,"Perhaps this could be turned into doxygen documentation for the deserializer constructor. ie ""This constructor is provided instead of a deserialize method since the latter requires violating the const nature of most fields in CTransaction"" or something of the sort. \n",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r88585691,88585691,src/primitives/transaction.h
theuni,2016-11-18T10:22:03Z,"Whoops, I see. Initializing txDecodeTmp above (line 628) with a nullptr might make it more obvious to a casual reader that this points to nowhere initially (though you'd think the ""Ref"" part would've given it away...). No big deal though.\n",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r88631885,88631885,src/bitcoin-tx.cpp
TheBlueMatt,2016-11-29T03:01:35Z,"Hmm...this behavior is very strange. We are leaving hash null, and while this isnt a behavior change, I cant imagine it is good...",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r89933330,89933330,src/primitives/transaction.cpp
TheBlueMatt,2016-11-29T03:13:55Z,"nit: I believe the usual term is ""Deserialize""",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r89934348,89934348,src/primitives/transaction.h
sipa,2016-11-29T03:57:08Z,"It basically defines the hash of the empty transaction (which by consensus is always invalid) as 0, rather than technically SHA256^2(0x00000000000000000000).",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r89937091,89937091,src/primitives/transaction.cpp
sipa,2016-11-29T03:57:49Z,"I agree, but whomever wrote serialize.h originally did not. The implicitly-defined method that classes get for deserialization is called `Unserialize`.",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r89937126,89937126,src/primitives/transaction.h
TheBlueMatt,2016-11-29T05:43:44Z,"It seems strange that you could construct the same transaction via CMutableTransaction or via CTransaction, and have them have a different hash, and be operator!=. Maybe not something to fix for this PR, though.",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r89944332,89944332,src/primitives/transaction.cpp
ryanofsky,2016-11-30T21:22:18Z,"Maybe `DecodeHexTx` should be changed to return `CMutableTransaction` instead of `CTransaction`. It seems awkward to require use of shared_ptr for a low-level decoding function, and `CMutableTransaction` would also let you get rid of the segfault workaround in bitcoin-tx.cpp.",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90330945,90330945,src/core_read.cpp
ryanofsky,2016-11-30T21:34:56Z,Maybe add a todo comment to remove this operator in the future.,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90333411,90333411,src/wallet/wallet.h
ryanofsky,2016-11-30T22:07:05Z,"This `std::forward` stuff is interesting because it means that the `SetTx` method and the `CMerkleTx` and `CWalletTx` constructors can all be called with arguments for any of the 3 non-template overloads of `MakeTransactionRef`, or with arguments for any of the 4 overloaded `CTransaction` constructors. But I wonder if you would consider defining `SetTx` more simply as:\n\n```\nvoid SetTx(CTrans",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90339716,90339716,src/wallet/wallet.h
sipa,2016-11-30T23:17:34Z,"I've changed CMerkleTx and CWalletTx to just take a `CTransactionRef` argument now as you suggested, effectively moving the `MakeTransactionRef` call to the constructor callers. By doing so, I discovered a few places where an `std::move` could be introduced to avoid a copy, so that makes the change worth it already.",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90351391,90351391,src/wallet/wallet.h
sipa,2016-11-30T23:18:01Z,"Agree, changed.",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90351466,90351466,src/core_read.cpp
sipa,2016-11-30T23:18:16Z,"Agree, let's fix this, but not in this PR.",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90351504,90351504,src/primitives/transaction.cpp
ryanofsky,2016-12-01T16:16:22Z,"Maybe rename these `tx` variables to `mtx`. It would make the diff a little bigger, but also make the code review easier in confirming that all uses of these variables are still valid (especially with the new std::move calls which trash them).",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90480532,90480532,src/rpc/rawtransaction.cpp
ryanofsky,2016-12-01T16:26:51Z,Maybe revert the change in this line and instead insert a `CTransaction tx(std::move(mtx));` declaration at line 889 after the decode. This would make it easier to understand the variable lifetimes in this function and also avoid calculating the tx hash twice.,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90482811,90482811,src/rpc/rawtransaction.cpp
ryanofsky,2016-12-01T16:41:38Z,"If you change `txNew` to `std::move(txNew)` here and `GetTransactionWeight(txNew)` to `GetTransactionWeight(*wtxNew->tx)` immediately below, you could avoid two transaction copies and hash computation.",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90486310,90486310,src/wallet/wallet.cpp
ryanofsky,2016-12-01T16:43:54Z,Template line not needed.,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90486807,90486807,src/wallet/wallet.h
ryanofsky,2016-12-01T16:52:23Z,Maybe add an explicit hash() initializer or comment to make the behavior more obvious & document it.,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90488689,90488689,src/primitives/transaction.cpp
ryanofsky,2016-12-01T17:12:20Z,"~~Isn't a `WriteCompactSize(s, tx.wit.vtxinwit.size());` call needed here? The previous code was calling `READWRITE(tx.wit)` which serialized the whole vector, and the Unserialize function here also seems to deserialize the entire vector instead of the individual elements.~~\n\nEdit: Never mind, I confused serializing the witness vector with serializing the `CTxWitness` class which wraps the vec",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90492669,90492669,src/primitives/transaction.h
ryanofsky,2016-12-01T17:28:09Z,"I realize you didn't change this code, but should Unserialize throw an exception if vin size is 0 and fAllowWitness is false? In this case the comment below ""We read a non-empty vin. Assume a normal vout follows,"" would not be accurate and the flags field would seemingly be misinterpreted as the vout vector length.",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90495774,90495774,src/primitives/transaction.h
sipa,2016-12-01T20:19:04Z,"Done, and added a TODO to remove the constructor entirely.",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90528995,90528995,src/primitives/transaction.cpp
sipa,2016-12-01T20:19:14Z,Done.,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90529030,90529030,src/primitives/transaction.h
sipa,2016-12-01T20:27:25Z,Done.,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90530434,90530434,src/rpc/rawtransaction.cpp
sipa,2016-12-01T20:27:30Z,Done.,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90530449,90530449,src/rpc/rawtransaction.cpp
sipa,2016-12-01T20:30:59Z,Done.,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90531052,90531052,src/wallet/wallet.cpp
sipa,2016-12-01T20:31:44Z,Done.,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90531185,90531185,src/wallet/wallet.h
sipa,2016-12-01T20:33:21Z,"No. When fAllowWitness is false, this code explicitly supports transactions with vin.size()=0. Even those are not valid due to consensus rules, it is necessary to correctly implement the ambiguitity detection in the `decoderawtransaction` and `fundrawtransaction` RPCs (which accept incomplete transactions as inputs).",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90531458,90531458,src/primitives/transaction.h
sipa,2016-12-01T20:33:35Z,"Indeed. The code is a bit ugly in that the serializer does the witness serialization inline, while the deserializer uses `CTxWitness`. In #8589 `CTxWitness` is removed entirely.",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90531503,90531503,src/primitives/transaction.h
ryanofsky,2016-12-01T21:37:10Z,Need to change this to `GetTransactionWeight(*wtxNew.tx)` since `txNew` is moved from.,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90542705,90542705,src/wallet/wallet.cpp
ryanofsky,2016-12-01T21:42:58Z,"I see, and thanks for clarifying even though this code isn't really changed by your PR. Two other comments I would make (maybe for a separate PR) are:\n\n- The ""We read a non-empty vin"" part of the comment below is misleading and should probably be dropped or reworded.\n- The `if (flags != 0)` condition is confusing and should never be false.\n\nMaybe the following would be an improvement:\n",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90543745,90543745,src/primitives/transaction.h
sipa,2016-12-01T22:56:24Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90555939,90555939,src/wallet/wallet.cpp
sipa,2016-12-04T23:25:28Z,"Well there is a (perhaps misguided) attempt to parse the 10-byte `[nVersion] 0x00 0x00 [nLockTime]` as an empty transaction, rather than as an (incorrectly encoded) witness transaction.",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r90789545,90789545,src/primitives/transaction.h
paveljanik,2016-12-06T13:02:36Z,"This assert is the cause of SIGSEGV when paying in the UI.\n```\nAssertion failed: (tx.wit.vtxinwit.size() <= tx.vin.size()), function SerializeTransaction, file ./primitives/transaction.h, line 331.\n```",https://github.com/bitcoin/bitcoin/pull/8580#discussion_r91072582,91072582,src/primitives/transaction.h
NicolasDorier,2016-12-06T13:40:47Z,I remember a PR of @sipa where he made witness scripts part of the TxIn class. I wished it was merged so such error would not possibly happen. :(,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r91078551,91078551,src/primitives/transaction.h
morcos,2016-12-06T14:03:17Z,See #9296 ,https://github.com/bitcoin/bitcoin/pull/8580#discussion_r91082667,91082667,src/primitives/transaction.h
