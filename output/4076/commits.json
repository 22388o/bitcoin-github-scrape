[
  {
    "sha": "eb2cbd754d0ed02ab1c3f0889b6ee1776abd5082",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjJjYmQ3NTRkMGVkMDJhYjFjM2YwODg5YjZlZTE3NzZhYmQ1MDgy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-04-19T21:02:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-09T14:39:48Z"
      },
      "message": "Deduplicate shared code between uint160 and uint256",
      "tree": {
        "sha": "60c93a27d2e53cac43f8a5057b81425a8821bf94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60c93a27d2e53cac43f8a5057b81425a8821bf94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb2cbd754d0ed02ab1c3f0889b6ee1776abd5082",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2cbd754d0ed02ab1c3f0889b6ee1776abd5082",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb2cbd754d0ed02ab1c3f0889b6ee1776abd5082",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2cbd754d0ed02ab1c3f0889b6ee1776abd5082/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e443ed2462b706650f51f08c8760dbf5047aa77f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e443ed2462b706650f51f08c8760dbf5047aa77f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e443ed2462b706650f51f08c8760dbf5047aa77f"
      }
    ],
    "stats": {
      "total": 306,
      "additions": 65,
      "deletions": 241
    },
    "files": [
      {
        "sha": "a3f7835875507aacf5bbfe41ddcc08cdbcef6e7b",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 65,
        "deletions": 241,
        "changes": 306,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb2cbd754d0ed02ab1c3f0889b6ee1776abd5082/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb2cbd754d0ed02ab1c3f0889b6ee1776abd5082/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=eb2cbd754d0ed02ab1c3f0889b6ee1776abd5082",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -19,17 +19,56 @@ inline signed char HexDigit(char c)\n     return p_util_hexdigit[(unsigned char)c];\n }\n \n-/** Base class without constructors for uint256 and uint160.\n- * This makes the compiler let you use it in a union.\n- */\n+/** Template base class for unsigned big integers. */\n template<unsigned int BITS>\n class base_uint\n {\n-protected:\n+private:\n     enum { WIDTH=BITS/32 };\n     uint32_t pn[WIDTH];\n public:\n \n+    base_uint()\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            pn[i] = 0;\n+    }\n+\n+    base_uint(const base_uint& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            pn[i] = b.pn[i];\n+    }\n+\n+    base_uint& operator=(const base_uint& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            pn[i] = b.pn[i];\n+        return *this;\n+    }\n+\n+    base_uint(uint64_t b)\n+    {\n+        pn[0] = (unsigned int)b;\n+        pn[1] = (unsigned int)(b >> 32);\n+        for (int i = 2; i < WIDTH; i++)\n+            pn[i] = 0;\n+    }\n+\n+    explicit base_uint(const std::string& str)\n+    {\n+        SetHex(str);\n+    }\n+\n+    explicit base_uint(const std::vector<unsigned char>& vch)\n+    {\n+        if (vch.size() == sizeof(pn)) {\n+            memcpy(pn, &vch[0], sizeof(pn));\n+        } else {\n+            *this = 0;\n+        }\n+    }\n+\n     bool operator!() const\n     {\n         for (int i = 0; i < WIDTH; i++)\n@@ -292,7 +331,13 @@ class base_uint\n         return (!(a == b));\n     }\n \n-\n+    friend inline const base_uint operator+(const base_uint& a, const base_uint& b) { return base_uint(a) += b; }\n+    friend inline const base_uint operator-(const base_uint& a, const base_uint& b) { return base_uint(a) -= b; }\n+    friend inline const base_uint operator|(const base_uint& a, const base_uint& b) { return base_uint(a) |= b; }\n+    friend inline const base_uint operator&(const base_uint& a, const base_uint& b) { return base_uint(a) &= b; }\n+    friend inline const base_uint operator^(const base_uint& a, const base_uint& b) { return base_uint(a) ^= b; }\n+    friend inline const base_uint operator>>(const base_uint& a, int shift) { return base_uint(a) >>= shift; }\n+    friend inline const base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }\n \n     std::string GetHex() const\n     {\n@@ -373,263 +418,42 @@ class base_uint\n         return pn[0] | (uint64_t)pn[1] << 32;\n     }\n \n-//    unsigned int GetSerializeSize(int nType=0, int nVersion=PROTOCOL_VERSION) const\n     unsigned int GetSerializeSize(int nType, int nVersion) const\n     {\n         return sizeof(pn);\n     }\n \n     template<typename Stream>\n-//    void Serialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION) const\n     void Serialize(Stream& s, int nType, int nVersion) const\n     {\n         s.write((char*)pn, sizeof(pn));\n     }\n \n     template<typename Stream>\n-//    void Unserialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION)\n     void Unserialize(Stream& s, int nType, int nVersion)\n     {\n         s.read((char*)pn, sizeof(pn));\n     }\n-\n-\n-    friend class uint160;\n-    friend class uint256;\n };\n \n-typedef base_uint<160> base_uint160;\n-typedef base_uint<256> base_uint256;\n-\n-\n-\n-//\n-// uint160 and uint256 could be implemented as templates, but to keep\n-// compile errors and debugging cleaner, they're copy and pasted.\n-//\n-\n-\n-\n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// uint160\n-//\n-\n-/** 160-bit unsigned integer */\n-class uint160 : public base_uint160\n-{\n+/** 160-bit unsigned big integer. */\n+class uint160 : public base_uint<160> {\n public:\n-    typedef base_uint160 basetype;\n-\n-    uint160()\n-    {\n-        for (int i = 0; i < WIDTH; i++)\n-            pn[i] = 0;\n-    }\n-\n-    uint160(const basetype& b)\n-    {\n-        for (int i = 0; i < WIDTH; i++)\n-            pn[i] = b.pn[i];\n-    }\n-\n-    uint160& operator=(const basetype& b)\n-    {\n-        for (int i = 0; i < WIDTH; i++)\n-            pn[i] = b.pn[i];\n-        return *this;\n-    }\n-\n-    uint160(uint64_t b)\n-    {\n-        pn[0] = (unsigned int)b;\n-        pn[1] = (unsigned int)(b >> 32);\n-        for (int i = 2; i < WIDTH; i++)\n-            pn[i] = 0;\n-    }\n-\n-    uint160& operator=(uint64_t b)\n-    {\n-        pn[0] = (unsigned int)b;\n-        pn[1] = (unsigned int)(b >> 32);\n-        for (int i = 2; i < WIDTH; i++)\n-            pn[i] = 0;\n-        return *this;\n-    }\n-\n-    explicit uint160(const std::string& str)\n-    {\n-        SetHex(str);\n-    }\n-\n-    explicit uint160(const std::vector<unsigned char>& vch)\n-    {\n-        if (vch.size() == sizeof(pn))\n-            memcpy(pn, &vch[0], sizeof(pn));\n-        else\n-            *this = 0;\n-    }\n+    uint160() {}\n+    uint160(const base_uint<160>& b) : base_uint<160>(b) {}\n+    uint160(uint64_t b) : base_uint<160>(b) {}\n+    explicit uint160(const std::string& str) : base_uint<160>(str) {}\n+    explicit uint160(const std::vector<unsigned char>& vch) : base_uint<160>(vch) {}\n };\n \n-inline bool operator==(const uint160& a, uint64_t b)                         { return (base_uint160)a == b; }\n-inline bool operator!=(const uint160& a, uint64_t b)                         { return (base_uint160)a != b; }\n-inline const uint160 operator<<(const base_uint160& a, unsigned int shift)   { return uint160(a) <<= shift; }\n-inline const uint160 operator>>(const base_uint160& a, unsigned int shift)   { return uint160(a) >>= shift; }\n-inline const uint160 operator<<(const uint160& a, unsigned int shift)        { return uint160(a) <<= shift; }\n-inline const uint160 operator>>(const uint160& a, unsigned int shift)        { return uint160(a) >>= shift; }\n-\n-inline const uint160 operator^(const base_uint160& a, const base_uint160& b) { return uint160(a) ^= b; }\n-inline const uint160 operator&(const base_uint160& a, const base_uint160& b) { return uint160(a) &= b; }\n-inline const uint160 operator|(const base_uint160& a, const base_uint160& b) { return uint160(a) |= b; }\n-inline const uint160 operator+(const base_uint160& a, const base_uint160& b) { return uint160(a) += b; }\n-inline const uint160 operator-(const base_uint160& a, const base_uint160& b) { return uint160(a) -= b; }\n-\n-inline bool operator<(const base_uint160& a, const uint160& b)               { return (base_uint160)a <  (base_uint160)b; }\n-inline bool operator<=(const base_uint160& a, const uint160& b)              { return (base_uint160)a <= (base_uint160)b; }\n-inline bool operator>(const base_uint160& a, const uint160& b)               { return (base_uint160)a >  (base_uint160)b; }\n-inline bool operator>=(const base_uint160& a, const uint160& b)              { return (base_uint160)a >= (base_uint160)b; }\n-inline bool operator==(const base_uint160& a, const uint160& b)              { return (base_uint160)a == (base_uint160)b; }\n-inline bool operator!=(const base_uint160& a, const uint160& b)              { return (base_uint160)a != (base_uint160)b; }\n-inline const uint160 operator^(const base_uint160& a, const uint160& b)      { return (base_uint160)a ^  (base_uint160)b; }\n-inline const uint160 operator&(const base_uint160& a, const uint160& b)      { return (base_uint160)a &  (base_uint160)b; }\n-inline const uint160 operator|(const base_uint160& a, const uint160& b)      { return (base_uint160)a |  (base_uint160)b; }\n-inline const uint160 operator+(const base_uint160& a, const uint160& b)      { return (base_uint160)a +  (base_uint160)b; }\n-inline const uint160 operator-(const base_uint160& a, const uint160& b)      { return (base_uint160)a -  (base_uint160)b; }\n-\n-inline bool operator<(const uint160& a, const base_uint160& b)               { return (base_uint160)a <  (base_uint160)b; }\n-inline bool operator<=(const uint160& a, const base_uint160& b)              { return (base_uint160)a <= (base_uint160)b; }\n-inline bool operator>(const uint160& a, const base_uint160& b)               { return (base_uint160)a >  (base_uint160)b; }\n-inline bool operator>=(const uint160& a, const base_uint160& b)              { return (base_uint160)a >= (base_uint160)b; }\n-inline bool operator==(const uint160& a, const base_uint160& b)              { return (base_uint160)a == (base_uint160)b; }\n-inline bool operator!=(const uint160& a, const base_uint160& b)              { return (base_uint160)a != (base_uint160)b; }\n-inline const uint160 operator^(const uint160& a, const base_uint160& b)      { return (base_uint160)a ^  (base_uint160)b; }\n-inline const uint160 operator&(const uint160& a, const base_uint160& b)      { return (base_uint160)a &  (base_uint160)b; }\n-inline const uint160 operator|(const uint160& a, const base_uint160& b)      { return (base_uint160)a |  (base_uint160)b; }\n-inline const uint160 operator+(const uint160& a, const base_uint160& b)      { return (base_uint160)a +  (base_uint160)b; }\n-inline const uint160 operator-(const uint160& a, const base_uint160& b)      { return (base_uint160)a -  (base_uint160)b; }\n-\n-inline bool operator<(const uint160& a, const uint160& b)                    { return (base_uint160)a <  (base_uint160)b; }\n-inline bool operator<=(const uint160& a, const uint160& b)                   { return (base_uint160)a <= (base_uint160)b; }\n-inline bool operator>(const uint160& a, const uint160& b)                    { return (base_uint160)a >  (base_uint160)b; }\n-inline bool operator>=(const uint160& a, const uint160& b)                   { return (base_uint160)a >= (base_uint160)b; }\n-inline bool operator==(const uint160& a, const uint160& b)                   { return (base_uint160)a == (base_uint160)b; }\n-inline bool operator!=(const uint160& a, const uint160& b)                   { return (base_uint160)a != (base_uint160)b; }\n-inline const uint160 operator^(const uint160& a, const uint160& b)           { return (base_uint160)a ^  (base_uint160)b; }\n-inline const uint160 operator&(const uint160& a, const uint160& b)           { return (base_uint160)a &  (base_uint160)b; }\n-inline const uint160 operator|(const uint160& a, const uint160& b)           { return (base_uint160)a |  (base_uint160)b; }\n-inline const uint160 operator+(const uint160& a, const uint160& b)           { return (base_uint160)a +  (base_uint160)b; }\n-inline const uint160 operator-(const uint160& a, const uint160& b)           { return (base_uint160)a -  (base_uint160)b; }\n-\n-\n-\n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// uint256\n-//\n-\n-/** 256-bit unsigned integer */\n-class uint256 : public base_uint256\n-{\n+/** 256-bit unsigned big integer. */\n+class uint256 : public base_uint<256> {\n public:\n-    typedef base_uint256 basetype;\n-\n-    uint256()\n-    {\n-        for (int i = 0; i < WIDTH; i++)\n-            pn[i] = 0;\n-    }\n-\n-    uint256(const basetype& b)\n-    {\n-        for (int i = 0; i < WIDTH; i++)\n-            pn[i] = b.pn[i];\n-    }\n-\n-    uint256& operator=(const basetype& b)\n-    {\n-        for (int i = 0; i < WIDTH; i++)\n-            pn[i] = b.pn[i];\n-        return *this;\n-    }\n-\n-    uint256(uint64_t b)\n-    {\n-        pn[0] = (unsigned int)b;\n-        pn[1] = (unsigned int)(b >> 32);\n-        for (int i = 2; i < WIDTH; i++)\n-            pn[i] = 0;\n-    }\n-\n-    uint256& operator=(uint64_t b)\n-    {\n-        pn[0] = (unsigned int)b;\n-        pn[1] = (unsigned int)(b >> 32);\n-        for (int i = 2; i < WIDTH; i++)\n-            pn[i] = 0;\n-        return *this;\n-    }\n-\n-    explicit uint256(const std::string& str)\n-    {\n-        SetHex(str);\n-    }\n-\n-    explicit uint256(const std::vector<unsigned char>& vch)\n-    {\n-        if (vch.size() == sizeof(pn))\n-            memcpy(pn, &vch[0], sizeof(pn));\n-        else\n-            *this = 0;\n-    }\n+    uint256() {}\n+    uint256(const base_uint<256>& b) : base_uint<256>(b) {}\n+    uint256(uint64_t b) : base_uint<256>(b) {}\n+    explicit uint256(const std::string& str) : base_uint<256>(str) {}\n+    explicit uint256(const std::vector<unsigned char>& vch) : base_uint<256>(vch) {}\n };\n \n-inline bool operator==(const uint256& a, uint64_t b)                          { return (base_uint256)a == b; }\n-inline bool operator!=(const uint256& a, uint64_t b)                          { return (base_uint256)a != b; }\n-inline const uint256 operator<<(const base_uint256& a, unsigned int shift)   { return uint256(a) <<= shift; }\n-inline const uint256 operator>>(const base_uint256& a, unsigned int shift)   { return uint256(a) >>= shift; }\n-inline const uint256 operator<<(const uint256& a, unsigned int shift)        { return uint256(a) <<= shift; }\n-inline const uint256 operator>>(const uint256& a, unsigned int shift)        { return uint256(a) >>= shift; }\n-\n-inline const uint256 operator^(const base_uint256& a, const base_uint256& b) { return uint256(a) ^= b; }\n-inline const uint256 operator&(const base_uint256& a, const base_uint256& b) { return uint256(a) &= b; }\n-inline const uint256 operator|(const base_uint256& a, const base_uint256& b) { return uint256(a) |= b; }\n-inline const uint256 operator+(const base_uint256& a, const base_uint256& b) { return uint256(a) += b; }\n-inline const uint256 operator-(const base_uint256& a, const base_uint256& b) { return uint256(a) -= b; }\n-\n-inline bool operator<(const base_uint256& a, const uint256& b)          { return (base_uint256)a <  (base_uint256)b; }\n-inline bool operator<=(const base_uint256& a, const uint256& b)         { return (base_uint256)a <= (base_uint256)b; }\n-inline bool operator>(const base_uint256& a, const uint256& b)          { return (base_uint256)a >  (base_uint256)b; }\n-inline bool operator>=(const base_uint256& a, const uint256& b)         { return (base_uint256)a >= (base_uint256)b; }\n-inline bool operator==(const base_uint256& a, const uint256& b)         { return (base_uint256)a == (base_uint256)b; }\n-inline bool operator!=(const base_uint256& a, const uint256& b)         { return (base_uint256)a != (base_uint256)b; }\n-inline const uint256 operator^(const base_uint256& a, const uint256& b) { return (base_uint256)a ^  (base_uint256)b; }\n-inline const uint256 operator&(const base_uint256& a, const uint256& b) { return (base_uint256)a &  (base_uint256)b; }\n-inline const uint256 operator|(const base_uint256& a, const uint256& b) { return (base_uint256)a |  (base_uint256)b; }\n-inline const uint256 operator+(const base_uint256& a, const uint256& b) { return (base_uint256)a +  (base_uint256)b; }\n-inline const uint256 operator-(const base_uint256& a, const uint256& b) { return (base_uint256)a -  (base_uint256)b; }\n-\n-inline bool operator<(const uint256& a, const base_uint256& b)          { return (base_uint256)a <  (base_uint256)b; }\n-inline bool operator<=(const uint256& a, const base_uint256& b)         { return (base_uint256)a <= (base_uint256)b; }\n-inline bool operator>(const uint256& a, const base_uint256& b)          { return (base_uint256)a >  (base_uint256)b; }\n-inline bool operator>=(const uint256& a, const base_uint256& b)         { return (base_uint256)a >= (base_uint256)b; }\n-inline bool operator==(const uint256& a, const base_uint256& b)         { return (base_uint256)a == (base_uint256)b; }\n-inline bool operator!=(const uint256& a, const base_uint256& b)         { return (base_uint256)a != (base_uint256)b; }\n-inline const uint256 operator^(const uint256& a, const base_uint256& b) { return (base_uint256)a ^  (base_uint256)b; }\n-inline const uint256 operator&(const uint256& a, const base_uint256& b) { return (base_uint256)a &  (base_uint256)b; }\n-inline const uint256 operator|(const uint256& a, const base_uint256& b) { return (base_uint256)a |  (base_uint256)b; }\n-inline const uint256 operator+(const uint256& a, const base_uint256& b) { return (base_uint256)a +  (base_uint256)b; }\n-inline const uint256 operator-(const uint256& a, const base_uint256& b) { return (base_uint256)a -  (base_uint256)b; }\n-\n-inline bool operator<(const uint256& a, const uint256& b)               { return (base_uint256)a <  (base_uint256)b; }\n-inline bool operator<=(const uint256& a, const uint256& b)              { return (base_uint256)a <= (base_uint256)b; }\n-inline bool operator>(const uint256& a, const uint256& b)               { return (base_uint256)a >  (base_uint256)b; }\n-inline bool operator>=(const uint256& a, const uint256& b)              { return (base_uint256)a >= (base_uint256)b; }\n-inline bool operator==(const uint256& a, const uint256& b)              { return (base_uint256)a == (base_uint256)b; }\n-inline bool operator!=(const uint256& a, const uint256& b)              { return (base_uint256)a != (base_uint256)b; }\n-inline const uint256 operator^(const uint256& a, const uint256& b)      { return (base_uint256)a ^  (base_uint256)b; }\n-inline const uint256 operator&(const uint256& a, const uint256& b)      { return (base_uint256)a &  (base_uint256)b; }\n-inline const uint256 operator|(const uint256& a, const uint256& b)      { return (base_uint256)a |  (base_uint256)b; }\n-inline const uint256 operator+(const uint256& a, const uint256& b)      { return (base_uint256)a +  (base_uint256)b; }\n-inline const uint256 operator-(const uint256& a, const uint256& b)      { return (base_uint256)a -  (base_uint256)b; }\n-\n #endif"
      }
    ]
  },
  {
    "sha": "4d480c8a3fe3c58eeb083ea544c6f9e991606692",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDQ4MGM4YTNmZTNjNThlZWIwODNlYTU0NGM2ZjllOTkxNjA2Njky",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-04-19T21:25:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-09T14:39:48Z"
      },
      "message": "Exception instead of assigning 0 in case of wrong vector length",
      "tree": {
        "sha": "a071a58cad8b798c51f9c3eb9e96b0ae84e1be0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a071a58cad8b798c51f9c3eb9e96b0ae84e1be0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d480c8a3fe3c58eeb083ea544c6f9e991606692",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d480c8a3fe3c58eeb083ea544c6f9e991606692",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d480c8a3fe3c58eeb083ea544c6f9e991606692",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d480c8a3fe3c58eeb083ea544c6f9e991606692/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb2cbd754d0ed02ab1c3f0889b6ee1776abd5082",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2cbd754d0ed02ab1c3f0889b6ee1776abd5082",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb2cbd754d0ed02ab1c3f0889b6ee1776abd5082"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 15,
      "deletions": 10
    },
    "files": [
      {
        "sha": "8e4b63c8bc8cf8c0ddc2324f2fdaac5a92c34d90",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d480c8a3fe3c58eeb083ea544c6f9e991606692/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d480c8a3fe3c58eeb083ea544c6f9e991606692/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=4d480c8a3fe3c58eeb083ea544c6f9e991606692",
        "patch": "@@ -160,11 +160,11 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     tmpS = ~R2S; BOOST_CHECK(tmpS == ~R2S);\n     tmpS = ~MaxS; BOOST_CHECK(tmpS == ~MaxS);\n \n-    // Wrong length must give 0\n-    BOOST_CHECK(uint256(std::vector<unsigned char>(OneArray,OneArray+31)) == 0);\n-    BOOST_CHECK(uint256(std::vector<unsigned char>(OneArray,OneArray+20)) == 0);\n-    BOOST_CHECK(uint160(std::vector<unsigned char>(OneArray,OneArray+32)) == 0);\n-    BOOST_CHECK(uint160(std::vector<unsigned char>(OneArray,OneArray+19)) == 0);\n+    // Wrong length must throw exception.\n+    BOOST_CHECK_THROW(uint256(std::vector<unsigned char>(OneArray,OneArray+31)), uint_error);\n+    BOOST_CHECK_THROW(uint256(std::vector<unsigned char>(OneArray,OneArray+20)), uint_error);\n+    BOOST_CHECK_THROW(uint160(std::vector<unsigned char>(OneArray,OneArray+32)), uint_error);\n+    BOOST_CHECK_THROW(uint160(std::vector<unsigned char>(OneArray,OneArray+19)), uint_error);\n }\n \n void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift) "
      },
      {
        "sha": "b6365bb36bc66840c3f117a60f4b607033b29f8b",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d480c8a3fe3c58eeb083ea544c6f9e991606692/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d480c8a3fe3c58eeb083ea544c6f9e991606692/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=4d480c8a3fe3c58eeb083ea544c6f9e991606692",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_UINT256_H\n #define BITCOIN_UINT256_H\n \n+#include <assert.h>\n+#include <stdexcept>\n #include <stdint.h>\n #include <stdio.h>\n #include <string>\n@@ -19,6 +21,11 @@ inline signed char HexDigit(char c)\n     return p_util_hexdigit[(unsigned char)c];\n }\n \n+class uint_error : public std::runtime_error {\n+public:\n+    explicit uint_error(const std::string& str) : std::runtime_error(str) {}\n+};\n+\n /** Template base class for unsigned big integers. */\n template<unsigned int BITS>\n class base_uint\n@@ -62,11 +69,9 @@ class base_uint\n \n     explicit base_uint(const std::vector<unsigned char>& vch)\n     {\n-        if (vch.size() == sizeof(pn)) {\n-            memcpy(pn, &vch[0], sizeof(pn));\n-        } else {\n-            *this = 0;\n-        }\n+        if (vch.size() != sizeof(pn))\n+            throw uint_error(\"Converting vector of wrong size to base_uint\");\n+        memcpy(pn, &vch[0], sizeof(pn));\n     }\n \n     bool operator!() const"
      }
    ]
  },
  {
    "sha": "a7031507e647da0723bf289dadba10ef1a50f278",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzAzMTUwN2U2NDdkYTA3MjNiZjI4OWRhZGJhMTBlZjFhNTBmMjc4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-04-19T23:03:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-09T14:39:48Z"
      },
      "message": "Add multiplication and division to uint160/uint256",
      "tree": {
        "sha": "e9917535b5264cac098fe89ced31b9570007f2b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9917535b5264cac098fe89ced31b9570007f2b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7031507e647da0723bf289dadba10ef1a50f278",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7031507e647da0723bf289dadba10ef1a50f278",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7031507e647da0723bf289dadba10ef1a50f278",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7031507e647da0723bf289dadba10ef1a50f278/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d480c8a3fe3c58eeb083ea544c6f9e991606692",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d480c8a3fe3c58eeb083ea544c6f9e991606692",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d480c8a3fe3c58eeb083ea544c6f9e991606692"
      }
    ],
    "stats": {
      "total": 141,
      "additions": 141,
      "deletions": 0
    },
    "files": [
      {
        "sha": "226d737defd9d2f4dddfc2f017d07857a3459def",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7031507e647da0723bf289dadba10ef1a50f278/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7031507e647da0723bf289dadba10ef1a50f278/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=a7031507e647da0723bf289dadba10ef1a50f278",
        "patch": "@@ -482,6 +482,77 @@ BOOST_AUTO_TEST_CASE( plusMinus )\n \n }\n \n+BOOST_AUTO_TEST_CASE( multiply )\n+{\n+    BOOST_CHECK((R1L * R1L).ToString() == \"62a38c0486f01e45879d7910a7761bf30d5237e9873f9bff3642a732c4d84f10\");\n+    BOOST_CHECK((R1L * R2L).ToString() == \"de37805e9986996cfba76ff6ba51c008df851987d9dd323f0e5de07760529c40\");\n+    BOOST_CHECK((R1L * ZeroL) == ZeroL);\n+    BOOST_CHECK((R1L * OneL) == R1L);\n+    BOOST_CHECK((R1L * MaxL) == -R1L);\n+    BOOST_CHECK((R2L * R1L) == (R1L * R2L));\n+    BOOST_CHECK((R2L * R2L).ToString() == \"ac8c010096767d3cae5005dec28bb2b45a1d85ab7996ccd3e102a650f74ff100\");\n+    BOOST_CHECK((R2L * ZeroL) == ZeroL);\n+    BOOST_CHECK((R2L * OneL) == R2L);\n+    BOOST_CHECK((R2L * MaxL) == -R2L);\n+\n+    BOOST_CHECK((R1S * R1S).ToString() == \"a7761bf30d5237e9873f9bff3642a732c4d84f10\");\n+    BOOST_CHECK((R1S * R2S).ToString() == \"ba51c008df851987d9dd323f0e5de07760529c40\");\n+    BOOST_CHECK((R1S * ZeroS) == ZeroS);\n+    BOOST_CHECK((R1S * OneS) == R1S);\n+    BOOST_CHECK((R1S * MaxS) == -R1S);\n+    BOOST_CHECK((R2S * R1S) == (R1S * R2S));\n+    BOOST_CHECK((R2S * R2S).ToString() == \"c28bb2b45a1d85ab7996ccd3e102a650f74ff100\");\n+    BOOST_CHECK((R2S * ZeroS) == ZeroS);\n+    BOOST_CHECK((R2S * OneS) == R2S);\n+    BOOST_CHECK((R2S * MaxS) == -R2S);\n+\n+    BOOST_CHECK(MaxL * MaxL == OneL);\n+    BOOST_CHECK(MaxS * MaxS == OneS);\n+\n+    BOOST_CHECK((R1L * 0) == 0);\n+    BOOST_CHECK((R1L * 1) == R1L);\n+    BOOST_CHECK((R1L * 3).ToString() == \"7759b1c0ed14047f961ad09b20ff83687876a0181a367b813634046f91def7d4\");\n+    BOOST_CHECK((R2L * 0x87654321UL).ToString() == \"23f7816e30c4ae2017257b7a0fa64d60402f5234d46e746b61c960d09a26d070\");\n+    BOOST_CHECK((R1S * 0) == 0);\n+    BOOST_CHECK((R1S * 1) == R1S);\n+    BOOST_CHECK((R1S * 7).ToString() == \"f7a987f3c3bf758d927f202d7e795faeff084244\");\n+    BOOST_CHECK((R2S * 0xFFFFFFFFUL).ToString() == \"1c6f6c930353e17f7d6127213bb18d2883e2cd90\");\n+}\n+\n+BOOST_AUTO_TEST_CASE( divide )\n+{\n+    uint256 D1L(\"AD7133AC1977FA2B7\");\n+    uint256 D2L(\"ECD751716\");\n+    BOOST_CHECK((R1L / D1L).ToString() == \"00000000000000000b8ac01106981635d9ed112290f8895545a7654dde28fb3a\");\n+    BOOST_CHECK((R1L / D2L).ToString() == \"000000000873ce8efec5b67150bad3aa8c5fcb70e947586153bf2cec7c37c57a\");\n+    BOOST_CHECK(R1L / OneL == R1L);\n+    BOOST_CHECK(R1L / MaxL == ZeroL);\n+    BOOST_CHECK(MaxL / R1L == 2);\n+    BOOST_CHECK_THROW(R1L / ZeroL, uint_error);\n+    BOOST_CHECK((R2L / D1L).ToString() == \"000000000000000013e1665895a1cc981de6d93670105a6b3ec3b73141b3a3c5\");\n+    BOOST_CHECK((R2L / D2L).ToString() == \"000000000e8f0abe753bb0afe2e9437ee85d280be60882cf0bd1aaf7fa3cc2c4\");\n+    BOOST_CHECK(R2L / OneL == R2L);\n+    BOOST_CHECK(R2L / MaxL == ZeroL);\n+    BOOST_CHECK(MaxL / R2L == 1);\n+    BOOST_CHECK_THROW(R2L / ZeroL, uint_error);\n+\n+    uint160 D1S(\"D3C5EDCDEA54EB92679F0A4B4\");\n+    uint160 D2S(\"13037\");\n+    BOOST_CHECK((R1S / D1S).ToString() == \"0000000000000000000000000db9af3beade6c02\");\n+    BOOST_CHECK((R1S / D2S).ToString() == \"000098dfb6cc40ca592bf74366794f298ada205c\");\n+    BOOST_CHECK(R1S / OneS == R1S);\n+    BOOST_CHECK(R1S / MaxS == ZeroS);\n+    BOOST_CHECK(MaxS / R1S == 1);\n+    BOOST_CHECK_THROW(R1S / ZeroS, uint_error);\n+    BOOST_CHECK((R2S / D1S).ToString() == \"0000000000000000000000000c5608e781182047\");\n+    BOOST_CHECK((R2S / D2S).ToString() == \"00008966751b7187c3c67c1fda5cea7db2c1c069\");\n+    BOOST_CHECK(R2S / OneS == R2S);\n+    BOOST_CHECK(R2S / MaxS == ZeroS);\n+    BOOST_CHECK(MaxS / R2S == 1);\n+    BOOST_CHECK_THROW(R2S / ZeroS, uint_error);\n+}\n+\n+\n bool almostEqual(double d1, double d2) \n {\n     return fabs(d1-d2) <= 4*fabs(d1)*std::numeric_limits<double>::epsilon();"
      },
      {
        "sha": "7b17694eb2d601fe15f70565654af76789d3eac2",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7031507e647da0723bf289dadba10ef1a50f278/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7031507e647da0723bf289dadba10ef1a50f278/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=a7031507e647da0723bf289dadba10ef1a50f278",
        "patch": "@@ -222,6 +222,57 @@ class base_uint\n         return *this;\n     }\n \n+    base_uint& operator*=(uint32_t b32)\n+    {\n+        uint64_t carry = 0;\n+        for (int i = 0; i < WIDTH; i++)\n+        {\n+            uint64_t n = carry + (uint64_t)b32 * pn[i];\n+            pn[i] = n & 0xffffffff;\n+            carry = n >> 32;\n+        }\n+        return *this;\n+    }\n+\n+    base_uint& operator*=(const base_uint& b)\n+    {\n+        base_uint a = *this;\n+        *this = 0;\n+        for (int j = 0; j < WIDTH; j++) {\n+            uint64_t carry = 0;\n+            for (int i = 0; i + j < WIDTH; i++) {\n+                uint64_t n = carry + pn[i + j] + (uint64_t)a.pn[j] * b.pn[i];\n+                pn[i + j] = n & 0xffffffff;\n+                carry = n >> 32;\n+            }\n+        }\n+        return *this;\n+    }\n+\n+    base_uint& operator/=(const base_uint& b)\n+    {\n+        base_uint div = b; // make a copy, so we can shift.\n+        base_uint num = *this; // make a copy, so we can subtract.\n+        *this = 0; // the quotient.\n+        int num_bits = num.bits();\n+        int div_bits = div.bits();\n+        if (div_bits == 0)\n+            throw uint_error(\"Division by zero\");\n+        if (div_bits > num_bits) // the result is certainly 0.\n+            return *this;\n+        int shift = num_bits - div_bits;\n+        div <<= shift; // shift so that div and nun align.\n+        while (shift >= 0) {\n+            if (num >= div) {\n+                num -= div;\n+                pn[shift / 32] |= (1 << (shift & 31)); // set a bit of the result.\n+            }\n+            div >>= 1; // shift back.\n+            shift--;\n+        }\n+        // num now contains the remainder of the division.\n+        return *this;\n+    }\n \n     base_uint& operator++()\n     {\n@@ -338,11 +389,14 @@ class base_uint\n \n     friend inline const base_uint operator+(const base_uint& a, const base_uint& b) { return base_uint(a) += b; }\n     friend inline const base_uint operator-(const base_uint& a, const base_uint& b) { return base_uint(a) -= b; }\n+    friend inline const base_uint operator*(const base_uint& a, const base_uint& b) { return base_uint(a) *= b; }\n+    friend inline const base_uint operator/(const base_uint& a, const base_uint& b) { return base_uint(a) /= b; }\n     friend inline const base_uint operator|(const base_uint& a, const base_uint& b) { return base_uint(a) |= b; }\n     friend inline const base_uint operator&(const base_uint& a, const base_uint& b) { return base_uint(a) &= b; }\n     friend inline const base_uint operator^(const base_uint& a, const base_uint& b) { return base_uint(a) ^= b; }\n     friend inline const base_uint operator>>(const base_uint& a, int shift) { return base_uint(a) >>= shift; }\n     friend inline const base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }\n+    friend inline const base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }\n \n     std::string GetHex() const\n     {\n@@ -417,6 +471,22 @@ class base_uint\n         return sizeof(pn);\n     }\n \n+    // Returns the position of the highest bit set plus one, or zero if the\n+    // value is zero.\n+    unsigned int bits() const\n+    {\n+        for (int pos = WIDTH-1; pos >= 0; pos--) {\n+            if (pn[pos]) {\n+                for (int bits = 31; bits > 0; bits--) {\n+                    if (pn[pos] & 1<<bits)\n+                        return 32*pos + bits + 1;\n+                }\n+                return 32*pos + 1;\n+            }\n+        }\n+        return 0;\n+    }\n+\n     uint64_t GetLow64() const\n     {\n         assert(WIDTH >= 2);"
      }
    ]
  },
  {
    "sha": "df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjllYjVlMTRmYTgwNzJiYzhhODJiNTllNzEyYzJiYTM2ZjEzZjRj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-04-20T01:19:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-09T14:44:59Z"
      },
      "message": "Move {Get,Set}Compact from bignum to uint256",
      "tree": {
        "sha": "64c961273c28988b9be4138490e6db570a3b66d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64c961273c28988b9be4138490e6db570a3b66d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7031507e647da0723bf289dadba10ef1a50f278",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7031507e647da0723bf289dadba10ef1a50f278",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7031507e647da0723bf289dadba10ef1a50f278"
      }
    ],
    "stats": {
      "total": 442,
      "additions": 243,
      "deletions": 199
    },
    "files": [
      {
        "sha": "6b77462d838b9736ff9142f336f6fca96eef4be7",
        "filename": "src/bignum.h",
        "status": "modified",
        "additions": 0,
        "deletions": 65,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bignum.h?ref=df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
        "patch": "@@ -269,71 +269,6 @@ class CBigNum : public BIGNUM\n         return vch;\n     }\n \n-    // The \"compact\" format is a representation of a whole\n-    // number N using an unsigned 32bit number similar to a\n-    // floating point format.\n-    // The most significant 8 bits are the unsigned exponent of base 256.\n-    // This exponent can be thought of as \"number of bytes of N\".\n-    // The lower 23 bits are the mantissa.\n-    // Bit number 24 (0x800000) represents the sign of N.\n-    // N = (-1^sign) * mantissa * 256^(exponent-3)\n-    //\n-    // Satoshi's original implementation used BN_bn2mpi() and BN_mpi2bn().\n-    // MPI uses the most significant bit of the first byte as sign.\n-    // Thus 0x1234560000 is compact (0x05123456)\n-    // and  0xc0de000000 is compact (0x0600c0de)\n-    // (0x05c0de00) would be -0x40de000000\n-    //\n-    // Bitcoin only uses this \"compact\" format for encoding difficulty\n-    // targets, which are unsigned 256bit quantities.  Thus, all the\n-    // complexities of the sign bit and using base 256 are probably an\n-    // implementation accident.\n-    //\n-    // This implementation directly uses shifts instead of going\n-    // through an intermediate MPI representation.\n-    CBigNum& SetCompact(unsigned int nCompact)\n-    {\n-        unsigned int nSize = nCompact >> 24;\n-        bool fNegative     =(nCompact & 0x00800000) != 0;\n-        unsigned int nWord = nCompact & 0x007fffff;\n-        if (nSize <= 3)\n-        {\n-            nWord >>= 8*(3-nSize);\n-            BN_set_word(this, nWord);\n-        }\n-        else\n-        {\n-            BN_set_word(this, nWord);\n-            BN_lshift(this, this, 8*(nSize-3));\n-        }\n-        BN_set_negative(this, fNegative);\n-        return *this;\n-    }\n-\n-    unsigned int GetCompact() const\n-    {\n-        unsigned int nSize = BN_num_bytes(this);\n-        unsigned int nCompact = 0;\n-        if (nSize <= 3)\n-            nCompact = BN_get_word(this) << 8*(3-nSize);\n-        else\n-        {\n-            CBigNum bn;\n-            BN_rshift(&bn, this, 8*(nSize-3));\n-            nCompact = BN_get_word(&bn);\n-        }\n-        // The 0x00800000 bit denotes the sign.\n-        // Thus, if it is already set, divide the mantissa by 256 and increase the exponent.\n-        if (nCompact & 0x00800000)\n-        {\n-            nCompact >>= 8;\n-            nSize++;\n-        }\n-        nCompact |= nSize << 24;\n-        nCompact |= (BN_is_negative(this) ? 0x00800000 : 0);\n-        return nCompact;\n-    }\n-\n     void SetHex(const std::string& str)\n     {\n         // skip 0x"
      },
      {
        "sha": "f5cf846a01b0a0feb6efd466b19226ea2331e9f2",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
        "patch": "@@ -110,7 +110,7 @@ class CMainParams : public CChainParams {\n         vAlertPubKey = ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\");\n         nDefaultPort = 8333;\n         nRPCPort = 8332;\n-        bnProofOfWorkLimit = CBigNum(~uint256(0) >> 32);\n+        bnProofOfWorkLimit = ~uint256(0) >> 32;\n         nSubsidyHalvingInterval = 210000;\n \n         // Build the genesis block. Note that the output of the genesis coinbase cannot\n@@ -233,7 +233,7 @@ class CRegTestParams : public CTestNetParams {\n         pchMessageStart[2] = 0xb5;\n         pchMessageStart[3] = 0xda;\n         nSubsidyHalvingInterval = 150;\n-        bnProofOfWorkLimit = CBigNum(~uint256(0) >> 1);\n+        bnProofOfWorkLimit = ~uint256(0) >> 1;\n         genesis.nTime = 1296688602;\n         genesis.nBits = 0x207fffff;\n         genesis.nNonce = 2;"
      },
      {
        "sha": "f3f24efd9922f692e2d7f1829883f5bd12fd18a6",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
        "patch": "@@ -56,7 +56,7 @@ class CChainParams\n     const MessageStartChars& MessageStart() const { return pchMessageStart; }\n     const vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n-    const CBigNum& ProofOfWorkLimit() const { return bnProofOfWorkLimit; }\n+    const uint256& ProofOfWorkLimit() const { return bnProofOfWorkLimit; }\n     int SubsidyHalvingInterval() const { return nSubsidyHalvingInterval; }\n     virtual const CBlock& GenesisBlock() const = 0;\n     virtual bool RequireRPCPassword() const { return true; }\n@@ -75,7 +75,7 @@ class CChainParams\n     vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;\n     int nRPCPort;\n-    CBigNum bnProofOfWorkLimit;\n+    uint256 bnProofOfWorkLimit;\n     int nSubsidyHalvingInterval;\n     string strDataDir;\n     vector<CDNSSeedData> vSeeds;"
      },
      {
        "sha": "6a7bb9206c958d1305320d4208e37eb256fd424e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 21,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
        "patch": "@@ -1209,13 +1209,13 @@ static const int64_t nInterval = nTargetTimespan / nTargetSpacing;\n //\n unsigned int ComputeMinWork(unsigned int nBase, int64_t nTime)\n {\n-    const CBigNum &bnLimit = Params().ProofOfWorkLimit();\n+    const uint256 &bnLimit = Params().ProofOfWorkLimit();\n     // Testnet has min-difficulty blocks\n     // after nTargetSpacing*2 time between blocks:\n     if (TestNet() && nTime > nTargetSpacing*2)\n         return bnLimit.GetCompact();\n \n-    CBigNum bnResult;\n+    uint256 bnResult;\n     bnResult.SetCompact(nBase);\n     while (nTime > 0 && bnResult < bnLimit)\n     {\n@@ -1274,8 +1274,10 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n         nActualTimespan = nTargetTimespan*4;\n \n     // Retarget\n-    CBigNum bnNew;\n+    uint256 bnNew;\n+    uint256 bnOld;\n     bnNew.SetCompact(pindexLast->nBits);\n+    bnOld = bnNew;\n     bnNew *= nActualTimespan;\n     bnNew /= nTargetTimespan;\n \n@@ -1285,23 +1287,25 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     /// debug print\n     LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n     LogPrintf(\"nTargetTimespan = %d    nActualTimespan = %d\\n\", nTargetTimespan, nActualTimespan);\n-    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, CBigNum().SetCompact(pindexLast->nBits).getuint256().ToString());\n-    LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.getuint256().ToString());\n+    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n+    LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.ToString());\n \n     return bnNew.GetCompact();\n }\n \n bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n {\n-    CBigNum bnTarget;\n-    bnTarget.SetCompact(nBits);\n+    bool fNegative;\n+    bool fOverflow;\n+    uint256 bnTarget;\n+    bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range\n-    if (bnTarget <= 0 || bnTarget > Params().ProofOfWorkLimit())\n+    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > Params().ProofOfWorkLimit())\n         return error(\"CheckProofOfWork() : nBits below minimum work\");\n \n     // Check proof of work matches claimed amount\n-    if (hash > bnTarget.getuint256())\n+    if (hash > bnTarget)\n         return error(\"CheckProofOfWork() : hash doesn't match nBits\");\n \n     return true;\n@@ -1346,7 +1350,7 @@ void CheckForkWarningConditions()\n     if (pindexBestForkTip && chainActive.Height() - pindexBestForkTip->nHeight >= 72)\n         pindexBestForkTip = NULL;\n \n-    if (pindexBestForkTip || (pindexBestInvalid && pindexBestInvalid->nChainWork > chainActive.Tip()->nChainWork + (chainActive.Tip()->GetBlockWork() * 6).getuint256()))\n+    if (pindexBestForkTip || (pindexBestInvalid && pindexBestInvalid->nChainWork > chainActive.Tip()->nChainWork + (chainActive.Tip()->GetBlockWork() * 6)))\n     {\n         if (!fLargeWorkForkFound)\n         {\n@@ -1402,7 +1406,7 @@ void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n     // We define it this way because it allows us to only store the highest fork tip (+ base) which meets\n     // the 7-block condition and from this always have the most-likely-to-cause-warning fork\n     if (pfork && (!pindexBestForkTip || (pindexBestForkTip && pindexNewForkTip->nHeight > pindexBestForkTip->nHeight)) &&\n-            pindexNewForkTip->nChainWork - pfork->nChainWork > (pfork->GetBlockWork() * 7).getuint256() &&\n+            pindexNewForkTip->nChainWork - pfork->nChainWork > (pfork->GetBlockWork() * 7) &&\n             chainActive.Height() - pindexNewForkTip->nHeight < 72)\n     {\n         pindexBestForkTip = pindexNewForkTip;\n@@ -1436,10 +1440,6 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n     if (!pindexBestInvalid || pindexNew->nChainWork > pindexBestInvalid->nChainWork)\n     {\n         pindexBestInvalid = pindexNew;\n-        // The current code doesn't actually read the BestInvalidWork entry in\n-        // the block database anymore, as it is derived from the flags in block\n-        // index entry. We only write it for backward compatibility.\n-        pblocktree->WriteBestInvalidWork(CBigNum(pindexBestInvalid->nChainWork));\n         uiInterface.NotifyBlocksChanged();\n     }\n     LogPrintf(\"InvalidChainFound: invalid block=%s  height=%d  log2_work=%.8g  date=%s\\n\",\n@@ -2182,7 +2182,7 @@ CBlockIndex* AddToBlockIndex(CBlockHeader& block)\n         pindexNew->pprev = (*miPrev).second;\n         pindexNew->nHeight = pindexNew->pprev->nHeight + 1;\n     }\n-    pindexNew->nChainWork = (pindexNew->pprev ? pindexNew->pprev->nChainWork : 0) + pindexNew->GetBlockWork().getuint256();\n+    pindexNew->nChainWork = (pindexNew->pprev ? pindexNew->pprev->nChainWork : 0) + pindexNew->GetBlockWork();\n     pindexNew->RaiseValidity(BLOCK_VALID_TREE);\n \n     return pindexNew;\n@@ -2359,11 +2359,12 @@ bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool f\n             return state.DoS(100, error(\"CheckBlockHeader() : block with timestamp before last checkpoint\"),\n                              REJECT_CHECKPOINT, \"time-too-old\");\n         }\n-        CBigNum bnNewBlock;\n-        bnNewBlock.SetCompact(block.nBits);\n-        CBigNum bnRequired;\n+        bool fOverflow = false;\n+        uint256 bnNewBlock;\n+        bnNewBlock.SetCompact(block.nBits, NULL, &fOverflow);\n+        uint256 bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n-        if (bnNewBlock > bnRequired)\n+        if (fOverflow || bnNewBlock > bnRequired)\n         {\n             return state.DoS(100, error(\"CheckBlockHeader() : block with too little proof-of-work\"),\n                              REJECT_INVALID, \"bad-diffbits\");\n@@ -2934,7 +2935,7 @@ bool static LoadBlockIndexDB()\n     BOOST_FOREACH(const PAIRTYPE(int, CBlockIndex*)& item, vSortedByHeight)\n     {\n         CBlockIndex* pindex = item.second;\n-        pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + pindex->GetBlockWork().getuint256();\n+        pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + pindex->GetBlockWork();\n         pindex->nChainTx = (pindex->pprev ? pindex->pprev->nChainTx : 0) + pindex->nTx;\n         if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS))\n             setBlockIndexValid.insert(pindex);"
      },
      {
        "sha": "796a3031c9714778cab81899f1ff8fec72f52598",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
        "patch": "@@ -10,7 +10,6 @@\n #include \"bitcoin-config.h\"\n #endif\n \n-#include \"bignum.h\"\n #include \"chainparams.h\"\n #include \"coins.h\"\n #include \"core.h\"\n@@ -816,13 +815,19 @@ class CBlockIndex\n         return (int64_t)nTime;\n     }\n \n-    CBigNum GetBlockWork() const\n+    uint256 GetBlockWork() const\n     {\n-        CBigNum bnTarget;\n-        bnTarget.SetCompact(nBits);\n-        if (bnTarget <= 0)\n+        uint256 bnTarget;\n+        bool fNegative;\n+        bool fOverflow;\n+        bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n+        if (fNegative || fOverflow || bnTarget == 0)\n             return 0;\n-        return (CBigNum(1)<<256) / (bnTarget+1);\n+        // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n+        // as it's too large for a uint256. However, as 2**256 is at least as large\n+        // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n+        // or ~bnTarget / (nTarget+1) + 1.\n+        return (~bnTarget / (bnTarget + 1)) + 1;\n     }\n \n     bool CheckIndex() const"
      },
      {
        "sha": "50be4fad40ff0f006007a4ac644ab680f937beb1",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
        "patch": "@@ -466,7 +466,7 @@ CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n {\n     uint256 hash = pblock->GetHash();\n-    uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n+    uint256 hashTarget = uint256().SetCompact(pblock->nBits);\n \n     if (hash > hashTarget)\n         return false;\n@@ -552,7 +552,7 @@ void static BitcoinMiner(CWallet *pwallet)\n         // Search\n         //\n         int64_t nStart = GetTime();\n-        uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n+        uint256 hashTarget = uint256().SetCompact(pblock->nBits);\n         uint256 hashbuf[2];\n         uint256& hash = *alignup<16>(hashbuf);\n         while (true)\n@@ -636,7 +636,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             {\n                 // Changing pblock->nTime can change work required on testnet:\n                 nBlockBits = ByteReverse(pblock->nBits);\n-                hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n+                hashTarget.SetCompact(pblock->nBits);\n             }\n         }\n     } }"
      },
      {
        "sha": "cb903b585ab3fcc38be707f614bce9641b50369e",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
        "patch": "@@ -363,7 +363,7 @@ Value getwork(const Array& params, bool fHelp)\n         char phash1[64];\n         FormatHashBuffers(pblock, pmidstate, pdata, phash1);\n \n-        uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n+        uint256 hashTarget = uint256().SetCompact(pblock->nBits);\n \n         Object result;\n         result.push_back(Pair(\"midstate\", HexStr(BEGIN(pmidstate), END(pmidstate)))); // deprecated\n@@ -559,7 +559,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     Object aux;\n     aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n \n-    uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n+    uint256 hashTarget = uint256().SetCompact(pblock->nBits);\n \n     static Array aMutable;\n     if (aMutable.empty())"
      },
      {
        "sha": "897fb87e4622d28210c198b06ce48356cc389f5e",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
        "patch": "@@ -106,9 +106,9 @@ static bool CheckNBits(unsigned int nbits1, int64_t time1, unsigned int nbits2,\n         return CheckNBits(nbits2, time2, nbits1, time1);\n     int64_t deltaTime = time2-time1;\n \n-    CBigNum required;\n+    uint256 required;\n     required.SetCompact(ComputeMinWork(nbits1, deltaTime));\n-    CBigNum have;\n+    uint256 have;\n     have.SetCompact(nbits2);\n     return (have <= required);\n }"
      },
      {
        "sha": "01967c76847211d6ede0fb1df0ecdf8d26a186c0",
        "filename": "src/test/bignum_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 88,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/test/bignum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/test/bignum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum_tests.cpp?ref=df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
        "patch": "@@ -125,94 +125,6 @@ BOOST_AUTO_TEST_CASE(bignum_setint64)\n }\n \n \n-BOOST_AUTO_TEST_CASE(bignum_SetCompact)\n-{\n-    CBigNum num;\n-    num.SetCompact(0);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"0\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n-\n-    num.SetCompact(0x00123456);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"0\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n-\n-    num.SetCompact(0x01003456);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"0\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n-\n-    num.SetCompact(0x02000056);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"0\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n-\n-    num.SetCompact(0x03000000);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"0\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n-\n-    num.SetCompact(0x04000000);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"0\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n-\n-    num.SetCompact(0x00923456);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"0\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n-\n-    num.SetCompact(0x01803456);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"0\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n-\n-    num.SetCompact(0x02800056);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"0\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n-\n-    num.SetCompact(0x03800000);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"0\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n-    \n-    num.SetCompact(0x04800000);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"0\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n-\n-    num.SetCompact(0x01123456);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"12\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x01120000U);\n-\n-    // Make sure that we don't generate compacts with the 0x00800000 bit set\n-    num = 0x80;\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x02008000U);\n-\n-    num.SetCompact(0x01fedcba);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"-7e\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x01fe0000U);\n-\n-    num.SetCompact(0x02123456);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"1234\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x02123400U);\n-\n-    num.SetCompact(0x03123456);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"123456\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x03123456U);\n-\n-    num.SetCompact(0x04123456);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"12345600\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x04123456U);\n-\n-    num.SetCompact(0x04923456);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"-12345600\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x04923456U);\n-\n-    num.SetCompact(0x05009234);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"92340000\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x05009234U);\n-\n-    num.SetCompact(0x20123456);\n-    BOOST_CHECK_EQUAL(num.GetHex(), \"1234560000000000000000000000000000000000000000000000000000000000\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x20123456U);\n-\n-    num.SetCompact(0xff123456);\n-    BOOST_CHECK_EQUAL(num.GetHexn-    BOOST_CHECK_EQUAL(num.GetCompact(), 0xff123456U);\n-}\n-\n BOOST_AUTO_TEST_CASE(bignum_SetHex)\n {\n     std::string hexStr = \"deecf97fd890808b9cc0f1b6a3e7a60b400f52710e6ad075b1340755bfa58cc9\";"
      },
      {
        "sha": "4b1a2ae58f4b9083f3fbc94cac5a4800d44dcbbc",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 129,
        "deletions": 0,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
        "patch": "@@ -675,6 +675,135 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(bignum_SetCompact)\n+{\n+    uint256 num;\n+    bool fNegative;\n+    bool fOverflow;\n+    num.SetCompact(0, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000000000000\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x00123456, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000000000000\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x01003456, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000000000000\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x02000056, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000000000000\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x03000000, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000000000000\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x04000000, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000000000000\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x00923456, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000000000000\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x01803456, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000000000000\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x02800056, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000000000000\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x03800000, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000000000000\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x04800000, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000000000000\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x01123456, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000000000012\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x01120000U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    // Make sure that we don't generate compacts with the 0x00800000 bit set\n+    num = 0x80;\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x02008000U);\n+\n+    num.SetCompact(0x01fedcba, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"000000000000000000000000000000000000000000000000000000000000007e\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(true), 0x01fe0000U);\n+    BOOST_CHECK_EQUAL(fNegative, true);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x02123456, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000000001234\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x02123400U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x03123456, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000000123456\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x03123456U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x04123456, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000012345600\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x04123456U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x04923456, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000012345600\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(true), 0x04923456U);\n+    BOOST_CHECK_EQUAL(fNegative, true);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x05009234, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"0000000000000000000000000000000000000000000000000000000092340000\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x05009234U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0x20123456, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(num.GetHex(), \"1234560000000000000000000000000000000000000000000000000000000000\");\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x20123456U);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, false);\n+\n+    num.SetCompact(0xff123456, &fNegative, &fOverflow);\n+    BOOST_CHECK_EQUAL(fNegative, false);\n+    BOOST_CHECK_EQUAL(fOverflow, true);\n+}\n+\n+\n BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% coverage\n {\n     // ~R1L give a base_uint<256>"
      },
      {
        "sha": "4eab8525a5cee113c4bf0faba53da517be7238ce",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
        "patch": "@@ -73,12 +73,6 @@ bool CBlockTreeDB::WriteBlockIndex(const CDiskBlockIndex& blockindex)\n     return Write(make_pair('b', blockindex.GetBlockHash()), blockindex);\n }\n \n-bool CBlockTreeDB::WriteBestInvalidWork(const CBigNum& bnBestInvalidWork)\n-{\n-    // Obsolete; only written for backward compatibility.\n-    return Write('I', bnBestInvalidWork);\n-}\n-\n bool CBlockTreeDB::WriteBlockFileInfo(int nFile, const CBlockFileInfo &info) {\n     return Write(make_pair('f', nFile), info);\n }"
      },
      {
        "sha": "7257b0dd2176d3a30087c3261a5c9ee20a6d3435",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
        "patch": "@@ -14,7 +14,6 @@\n #include <utility>\n #include <vector>\n \n-class CBigNum;\n class CCoins;\n class uint256;\n \n@@ -52,7 +51,6 @@ class CBlockTreeDB : public CLevelDBWrapper\n     void operator=(const CBlockTreeDB&);\n public:\n     bool WriteBlockIndex(const CDiskBlockIndex& blockindex);\n-    bool WriteBestInvalidWork(const CBigNum& bnBestInvalidWork);\n     bool ReadBlockFileInfo(int nFile, CBlockFileInfo &fileinfo);\n     bool WriteBlockFileInfo(int nFile, const CBlockFileInfo &fileinfo);\n     bool ReadLastBlockFile(int &nFile);"
      },
      {
        "sha": "10c6657c763aebc9d1045879c2ddf7065ae9aeec",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
        "patch": "@@ -529,6 +529,76 @@ class uint256 : public base_uint<256> {\n     uint256(uint64_t b) : base_uint<256>(b) {}\n     explicit uint256(const std::string& str) : base_uint<256>(str) {}\n     explicit uint256(const std::vector<unsigned char>& vch) : base_uint<256>(vch) {}\n+\n+    // The \"compact\" format is a representation of a whole\n+    // number N using an unsigned 32bit number similar to a\n+    // floating point format.\n+    // The most significant 8 bits are the unsigned exponent of base 256.\n+    // This exponent can be thought of as \"number of bytes of N\".\n+    // The lower 23 bits are the mantissa.\n+    // Bit number 24 (0x800000) represents the sign of N.\n+    // N = (-1^sign) * mantissa * 256^(exponent-3)\n+    //\n+    // Satoshi's original implementation used BN_bn2mpi() and BN_mpi2bn().\n+    // MPI uses the most significant bit of the first byte as sign.\n+    // Thus 0x1234560000 is compact (0x05123456)\n+    // and  0xc0de000000 is compact (0x0600c0de)\n+    // (0x05c0de00) would be -0x40de000000\n+    //\n+    // Bitcoin only uses this \"compact\" format for encoding difficulty\n+    // targets, which are unsigned 256bit quantities.  Thus, all the\n+    // complexities of the sign bit and using base 256 are probably an\n+    // implementation accident.\n+    //\n+    // This implementation directly uses shifts instead of going\n+    // through an intermediate MPI representation.\n+    uint256& SetCompact(uint32_t nCompact, bool *pfNegative = NULL, bool *pfOverflow = NULL)\n+    {\n+        int nSize = nCompact >> 24;\n+        uint32_t nWord = nCompact & 0x007fffff;\n+        if (nSize <= 3)\n+        {\n+            nWord >>= 8*(3-nSize);\n+            *this = nWord;\n+        }\n+        else\n+        {\n+            *this = nWord;\n+            *this <<= 8*(nSize-3);\n+        }\n+        if (pfNegative)\n+            *pfNegative = nWord != 0 && (nCompact & 0x00800000) != 0;\n+        if (pfOverflow)\n+            *pfOverflow = nWord != 0 && ((nSize > 34) ||\n+                                         (nWord > 0xff && nSize > 33) ||\n+                                         (nWord > 0xffff && nSize > 32));\n+        return *this;\n+    }\n+\n+    uint32_t GetCompact(bool fNegative = false) const\n+    {\n+        int nSize = (bits() + 7) / 8;\n+        uint32_t nCompact = 0;\n+        if (nSize <= 3)\n+            nCompact = GetLow64() << 8*(3-nSize);\n+        else\n+        {\n+            uint256 bn = *this >> 8*(nSize-3);\n+            nCompact = bn.GetLow64();\n+        }\n+        // The 0x00800000 bit denotes the sign.\n+        // Thus, if it is already set, divide the mantissa by 256 and increase the exponent.\n+        if (nCompact & 0x00800000)\n+        {\n+            nCompact >>= 8;\n+            nSize++;\n+        }\n+        assert((nCompact & ~0x007fffff) == 0);\n+        assert(nSize < 256);\n+        nCompact |= nSize << 24;\n+        nCompact |= (fNegative && (nCompact & 0x007fffff) ? 0x00800000 : 0);\n+        return nCompact;\n+    }\n };\n \n #endif"
      }
    ]
  },
  {
    "sha": "397668ea63e148a92f68e9fae578595585616770",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTc2NjhlYTYzZTE0OGE5MmY2OGU5ZmFlNTc4NTk1NTg1NjE2Nzcw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-04-21T06:28:43Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-09T14:45:00Z"
      },
      "message": "Deduplicate uint* comparison operator logic",
      "tree": {
        "sha": "bae5d6b5f9aa30309fb65a6e03fbedff3de3f1cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bae5d6b5f9aa30309fb65a6e03fbedff3de3f1cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/397668ea63e148a92f68e9fae578595585616770",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/397668ea63e148a92f68e9fae578595585616770",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/397668ea63e148a92f68e9fae578595585616770",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/397668ea63e148a92f68e9fae578595585616770/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 20,
      "deletions": 69
    },
    "files": [
      {
        "sha": "1acedd14bf68dc38c2fc92cd1fb7e24adb8c0887",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 20,
        "deletions": 69,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/397668ea63e148a92f68e9fae578595585616770/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/397668ea63e148a92f68e9fae578595585616770/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=397668ea63e148a92f68e9fae578595585616770",
        "patch": "@@ -308,85 +308,28 @@ class base_uint\n         return ret;\n     }\n \n-\n-    friend inline bool operator<(const base_uint& a, const base_uint& b)\n-    {\n-        for (int i = base_uint::WIDTH-1; i >= 0; i--)\n-        {\n-            if (a.pn[i] < b.pn[i])\n-                return true;\n-            else if (a.pn[i] > b.pn[i])\n-                return false;\n-        }\n-        return false;\n-    }\n-\n-    friend inline bool operator<=(const base_uint& a, const base_uint& b)\n-    {\n-        for (int i = base_uint::WIDTH-1; i >= 0; i--)\n-        {\n-            if (a.pn[i] < b.pn[i])\n-                return true;\n-            else if (a.pn[i] > b.pn[i])\n-                return false;\n+    int CompareTo(const base_uint& b) const {\n+        for (int i = base_uint::WIDTH-1; i >= 0; i--) {\n+            if (pn[i] < b.pn[i])\n+                return -1;\n+            if (pn[i] > b.pn[i])\n+                return 1;\n         }\n-        return true;\n-    }\n-\n-    friend inline bool operator>(const base_uint& a, const base_uint& b)\n-    {\n-        for (int i = base_uint::WIDTH-1; i >= 0; i--)\n-        {\n-            if (a.pn[i] > b.pn[i])\n-                return true;\n-            else if (a.pn[i] < b.pn[i])\n-                return false;\n-        }\n-        return false;\n+        return 0;\n     }\n \n-    friend inline bool operator>=(const base_uint& a, const base_uint& b)\n-    {\n-        for (int i = base_uint::WIDTH-1; i >= 0; i--)\n-        {\n-            if (a.pn[i] > b.pn[i])\n-                return true;\n-            else if (a.pn[i] < b.pn[i])\n+    bool EqualTo(uint64_t b) const {\n+        for (int i = base_uint::WIDTH-1; i >= 2; i--) {\n+            if (pn[i])\n                 return false;\n         }\n-        return true;\n-    }\n-\n-    friend inline bool operator==(const base_uint& a, const base_uint& b)\n-    {\n-        for (int i = 0; i < base_uint::WIDTH; i++)\n-            if (a.pn[i] != b.pn[i])\n-                return false;\n-        return true;\n-    }\n-\n-    friend inline bool operator==(const base_uint& a, uint64_t b)\n-    {\n-        if (a.pn[0] != (unsigned int)b)\n+        if (pn[1] != (b >> 32))\n             return false;\n-        if (a.pn[1] != (unsigned int)(b >> 32))\n+        if (pn[0] != (b & 0xfffffffful))\n             return false;\n-        for (int i = 2; i < base_uint::WIDTH; i++)\n-            if (a.pn[i] != 0)\n-                return false;\n         return true;\n     }\n \n-    friend inline bool operator!=(const base_uint& a, const base_uint& b)\n-    {\n-        return (!(a == b));\n-    }\n-\n-    friend inline bool operator!=(const base_uint& a, uint64_t b)\n-    {\n-        return (!(a == b));\n-    }\n-\n     friend inline const base_uint operator+(const base_uint& a, const base_uint& b) { return base_uint(a) += b; }\n     friend inline const base_uint operator-(const base_uint& a, const base_uint& b) { return base_uint(a) -= b; }\n     friend inline const base_uint operator*(const base_uint& a, const base_uint& b) { return base_uint(a) *= b; }\n@@ -397,6 +340,14 @@ class base_uint\n     friend inline const base_uint operator>>(const base_uint& a, int shift) { return base_uint(a) >>= shift; }\n     friend inline const base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }\n     friend inline const base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }\n+    friend inline bool operator==(const base_uint& a, const base_uint& b) { return a.CompareTo(b) == 0; }\n+    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) != 0; }\n+    friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }\n+    friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }\n+    friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }\n+    friend inline bool operator<=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <= 0; }\n+    friend inline bool operator==(const base_uint& a, uint64_t b) { return a.EqualTo(b); }\n+    friend inline bool operator!=(const base_uint& a, uint64_t b) { return !a.EqualTo(b); }\n \n     std::string GetHex() const\n     {"
      }
    ]
  }
]