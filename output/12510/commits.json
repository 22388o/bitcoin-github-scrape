[
  {
    "sha": "e87fefc60fc0f648b5e26aa716481e79a85f04de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODdmZWZjNjBmYzBmNjQ4YjVlMjZhYTcxNjQ4MWU3OWE4NWYwNGRl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-22T14:43:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-04-13T12:40:05Z"
      },
      "message": "test: Add rpc_bind test to default-run tests\n\nSkip the parts that cannot be run on the host due to lack\nof IPv6 support or a second interface to bind on, and warn\nappropriately.\n\nWithout no strong requirements (besides being Linux only, in which case\nthe test is skipped) left, just add this test to the default in\ntest_runner.\n\nIncludes suggested changes by John Newbery.",
      "tree": {
        "sha": "de19ee04015525e1166f2e3170c68ae68fd32e11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de19ee04015525e1166f2e3170c68ae68fd32e11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e87fefc60fc0f648b5e26aa716481e79a85f04de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e87fefc60fc0f648b5e26aa716481e79a85f04de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e87fefc60fc0f648b5e26aa716481e79a85f04de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e87fefc60fc0f648b5e26aa716481e79a85f04de/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5df84de583c900e00fef63bedaef32786f205a33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5df84de583c900e00fef63bedaef32786f205a33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5df84de583c900e00fef63bedaef32786f205a33"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 64,
      "deletions": 44
    },
    "files": [
      {
        "sha": "343e1620585556816193ba747402d780c021986e",
        "filename": "test/functional/rpc_bind.py",
        "status": "modified",
        "additions": 61,
        "deletions": 43,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e87fefc60fc0f648b5e26aa716481e79a85f04de/test/functional/rpc_bind.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e87fefc60fc0f648b5e26aa716481e79a85f04de/test/functional/rpc_bind.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_bind.py?ref=e87fefc60fc0f648b5e26aa716481e79a85f04de",
        "patch": "@@ -4,7 +4,6 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test running bitcoind with the -rpcbind and -rpcallowip options.\"\"\"\n \n-import socket\n import sys\n \n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n@@ -20,6 +19,11 @@ def set_test_params(self):\n     def setup_network(self):\n         self.add_nodes(self.num_nodes, None)\n \n+    def add_options(self, parser):\n+        parser.add_option(\"--ipv4\", action='store_true', dest=\"run_ipv4\", help=\"Run ipv4 tests only\", default=False)\n+        parser.add_option(\"--ipv6\", action='store_true', dest=\"run_ipv6\", help=\"Run ipv6 tests only\", default=False)\n+        parser.add_option(\"--nonloopback\", action='store_true', dest=\"run_nonloopback\", help=\"Run non-loopback tests only\", default=False)\n+\n     def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n         '''\n         Start a node with requested rpcallowip and rpcbind parameters,\n@@ -54,55 +58,69 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n \n     def run_test(self):\n         # due to OS-specific network stats queries, this test works only on Linux\n+        if sum([self.options.run_ipv4, self.options.run_ipv6, self.options.run_nonloopback]) > 1:\n+            raise AssertionError(\"Only one of --ipv4, --ipv6 and --nonloopback can be set\")\n+\n+        self.log.info(\"Check for linux\")\n         if not sys.platform.startswith('linux'):\n-            raise SkipTest(\"This test can only be run on Linux.\")\n-        # find the first non-loopback interface for testing\n-        non_loopback_ip = None\n+            raise SkipTest(\"This test can only be run on linux.\")\n+\n+        self.log.info(\"Check for ipv6\")\n+        have_ipv6 = test_ipv6_local()\n+        if not have_ipv6 and not self.options.run_ipv4:\n+            raise SkipTest(\"This test requires ipv6 support.\")\n+\n+        self.log.info(\"Check for non-loopback interface\")\n+        self.non_loopback_ip = None\n         for name,ip in all_interfaces():\n             if ip != '127.0.0.1':\n-                non_loopback_ip = ip\n+                self.non_loopback_ip = ip\n                 break\n-        if non_loopback_ip is None:\n-            raise SkipTest(\"This test requires at least one non-loopback IPv4 interface.\")\n-        try:\n-            s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n-            s.connect((\"::1\",1))\n-            s.close\n-        except OSError:\n-            raise SkipTest(\"This test requires IPv6 support.\")\n-\n-        self.log.info(\"Using interface %s for testing\" % non_loopback_ip)\n-\n-        defaultport = rpc_port(0)\n-\n-        # check default without rpcallowip (IPv4 and IPv6 localhost)\n-        self.run_bind_test(None, '127.0.0.1', [],\n-            [('127.0.0.1', defaultport), ('::1', defaultport)])\n-        # check default with rpcallowip (IPv6 any)\n-        self.run_bind_test(['127.0.0.1'], '127.0.0.1', [],\n-            [('::0', defaultport)])\n-        # check only IPv4 localhost (explicit)\n-        self.run_bind_test(['127.0.0.1'], '127.0.0.1', ['127.0.0.1'],\n-            [('127.0.0.1', defaultport)])\n-        # check only IPv4 localhost (explicit) with alternative port\n-        self.run_bind_test(['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171'],\n-            [('127.0.0.1', 32171)])\n-        # check only IPv4 localhost (explicit) with multiple alternative ports on same host\n-        self.run_bind_test(['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171', '127.0.0.1:32172'],\n-            [('127.0.0.1', 32171), ('127.0.0.1', 32172)])\n-        # check only IPv6 localhost (explicit)\n-        self.run_bind_test(['[::1]'], '[::1]', ['[::1]'],\n-            [('::1', defaultport)])\n-        # check both IPv4 and IPv6 localhost (explicit)\n-        self.run_bind_test(['127.0.0.1'], '127.0.0.1', ['127.0.0.1', '[::1]'],\n-            [('127.0.0.1', defaultport), ('::1', defaultport)])\n+        if self.non_loopback_ip is None and self.options.run_nonloopback:\n+            raise SkipTest(\"This test requires a non-loopback ip address.\")\n+\n+        self.defaultport = rpc_port(0)\n+\n+        if not self.options.run_nonloopback:\n+            self._run_loopback_tests()\n+        if not self.options.run_ipv4 and not self.options.run_ipv6:\n+            self._run_nonloopback_tests()\n+\n+    def _run_loopback_tests(self):\n+        if self.options.run_ipv4:\n+            # check only IPv4 localhost (explicit)\n+            self.run_bind_test(['127.0.0.1'], '127.0.0.1', ['127.0.0.1'],\n+                [('127.0.0.1', self.defaultport)])\n+            # check only IPv4 localhost (explicit) with alternative port\n+            self.run_bind_test(['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171'],\n+                [('127.0.0.1', 32171)])\n+            # check only IPv4 localhost (explicit) with multiple alternative ports on same host\n+            self.run_bind_test(['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171', '127.0.0.1:32172'],\n+                [('127.0.0.1', 32171), ('127.0.0.1', 32172)])\n+        else:\n+            # check default without rpcallowip (IPv4 and IPv6 localhost)\n+            self.run_bind_test(None, '127.0.0.1', [],\n+                [('127.0.0.1', self.defaultport), ('::1', self.defaultport)])\n+            # check default with rpcallowip (IPv6 any)\n+            self.run_bind_test(['127.0.0.1'], '127.0.0.1', [],\n+                [('::0', self.defaultport)])\n+            # check only IPv6 localhost (explicit)\n+            self.run_bind_test(['[::1]'], '[::1]', ['[::1]'],\n+                [('::1', self.defaultport)])\n+            # check both IPv4 and IPv6 localhost (explicit)\n+            self.run_bind_test(['127.0.0.1'], '127.0.0.1', ['127.0.0.1', '[::1]'],\n+                [('127.0.0.1', self.defaultport), ('::1', self.defaultport)])\n+\n+    def _run_nonloopback_tests(self):\n+        self.log.info(\"Using interface %s for testing\" % self.non_loopback_ip)\n+\n         # check only non-loopback interface\n-        self.run_bind_test([non_loopback_ip], non_loopback_ip, [non_loopback_ip],\n-            [(non_loopback_ip, defaultport)])\n+        self.run_bind_test([self.non_loopback_ip], self.non_loopback_ip, [self.non_loopback_ip],\n+            [(self.non_loopback_ip, self.defaultport)])\n \n         # Check that with invalid rpcallowip, we are denied\n-        self.run_allowip_test([non_loopback_ip], non_loopback_ip, defaultport)\n-        assert_raises_rpc_error(-342, \"non-JSON HTTP response with '403 Forbidden' from server\", self.run_allowip_test, ['1.1.1.1'], non_loopback_ip, defaultport)\n+        self.run_allowip_test([self.non_loopback_ip], self.non_loopback_ip, self.defaultport)\n+        assert_raises_rpc_error(-342, \"non-JSON HTTP response with '403 Forbidden' from server\", self.run_allowip_test, ['1.1.1.1'], self.non_loopback_ip, self.defaultport)\n \n if __name__ == '__main__':\n     RPCBindTest().main()"
      },
      {
        "sha": "da43280cedddb4b81885cd623f46f0bb71003339",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e87fefc60fc0f648b5e26aa716481e79a85f04de/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e87fefc60fc0f648b5e26aa716481e79a85f04de/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=e87fefc60fc0f648b5e26aa716481e79a85f04de",
        "patch": "@@ -120,6 +120,9 @@\n     'feature_nulldummy.py',\n     'mempool_accept.py',\n     'wallet_import_rescan.py',\n+    'rpc_bind.py --ipv4',\n+    'rpc_bind.py --ipv6',\n+    'rpc_bind.py --nonloopback',\n     'mining_basic.py',\n     'wallet_bumpfee.py',\n     'rpc_named_arguments.py',\n@@ -160,7 +163,6 @@\n     'p2p_timeouts.py',\n     # vv Tests less than 60s vv\n     'p2p_feefilter.py',\n-    'rpc_bind.py',\n     # vv Tests less than 30s vv\n     'feature_assumevalid.py',\n     'example_test.py',"
      }
    ]
  }
]