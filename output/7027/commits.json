[
  {
    "sha": "c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjk3M2NhMDNiOWRiZjkxOWJjMGM2OWFmMzdkMWFlYTZlYWY5YWJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-15T17:48:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-16T11:01:32Z"
      },
      "message": "[qa] keypool: Fix white space to prepare transition to test framework",
      "tree": {
        "sha": "a9571ee556458dd677770131660f8e3dd7c16455",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9571ee556458dd677770131660f8e3dd7c16455"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6876a78b863e2d4f4c7ad94627bb35363f6fa720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6876a78b863e2d4f4c7ad94627bb35363f6fa720",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6876a78b863e2d4f4c7ad94627bb35363f6fa720"
      }
    ],
    "stats": {
      "total": 198,
      "additions": 99,
      "deletions": 99
    },
    "files": [
      {
        "sha": "298563217d28a554cf2f1a20477e4eb3c90f10ac",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 99,
        "deletions": 99,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba",
        "patch": "@@ -39,107 +39,107 @@ def check_array_result(object_array, to_match, expected):\n     if num_matched == 0:\n         raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n \n-def run_test(nodes, tmpdir):\n-    # Encrypt wallet and wait to terminate\n-    nodes[0].encryptwallet('test')\n-    bitcoind_processes[0].wait()\n-    # Restart node 0\n-    nodes[0] = start_node(0, tmpdir)\n-    # Keep creating keys\n-    addr = nodes[0].getnewaddress()\n-    try:\n+    def run_test(nodes, tmpdir):\n+        # Encrypt wallet and wait to terminate\n+        nodes[0].encryptwallet('test')\n+        bitcoind_processes[0].wait()\n+        # Restart node 0\n+        nodes[0] = start_node(0, tmpdir)\n+        # Keep creating keys\n         addr = nodes[0].getnewaddress()\n-        raise AssertionError('Keypool should be exhausted after one address')\n-    except JSONRPCException,e:\n-        assert(e.error['code']==-12)\n-\n-    # put three new keys in the keypool\n-    nodes[0].walletpassphrase('test', 12000)\n-    nodes[0].keypoolrefill(3)\n-    nodes[0].walletlock()\n-\n-    # drain the keys\n-    addr = set()\n-    addr.add(nodes[0].getrawchangeaddress())\n-    addr.add(nodes[0].getrawchangeaddress())\n-    addr.add(nodes[0].getrawchangeaddress())\n-    addr.add(nodes[0].getrawchangeaddress())\n-    # assert that four unique addresses were returned\n-    assert(len(addr) == 4)\n-    # the next one should fail\n-    try:\n-        addr = nodes[0].getrawchangeaddress()\n-        raise AssertionError('Keypool should be exhausted after three addresses')\n-    except JSONRPCException,e:\n-        assert(e.error['code']==-12)\n-\n-    # refill keypool with three new addresses\n-    nodes[0].walletpassphrase('test', 12000)\n-    nodes[0].keypoolrefill(3)\n-    nodes[0].walletlock()\n-\n-    # drain them by mining\n-    nodes[0].generate(1)\n-    nodes[0].generate(1)\n-    nodes[0].generate(1)\n-    nodes[0].generate(1)\n-    try:\n+        try:\n+            addr = nodes[0].getnewaddress()\n+            raise AssertionError('Keypool should be exhausted after one address')\n+        except JSONRPCException,e:\n+            assert(e.error['code']==-12)\n+\n+        # put three new keys in the keypool\n+        nodes[0].walletpassphrase('test', 12000)\n+        nodes[0].keypoolrefill(3)\n+        nodes[0].walletlock()\n+\n+        # drain the keys\n+        addr = set()\n+        addr.add(nodes[0].getrawchangeaddress())\n+        addr.add(nodes[0].getrawchangeaddress())\n+        addr.add(nodes[0].getrawchangeaddress())\n+        addr.add(nodes[0].getrawchangeaddress())\n+        # assert that four unique addresses were returned\n+        assert(len(addr) == 4)\n+        # the next one should fail\n+        try:\n+            addr = nodes[0].getrawchangeaddress()\n+            raise AssertionError('Keypool should be exhausted after three addresses')\n+        except JSONRPCException,e:\n+            assert(e.error['code']==-12)\n+\n+        # refill keypool with three new addresses\n+        nodes[0].walletpassphrase('test', 12000)\n+        nodes[0].keypoolrefill(3)\n+        nodes[0].walletlock()\n+\n+        # drain them by mining\n         nodes[0].generate(1)\n-        raise AssertionError('Keypool should be exhausted after three addesses')\n-    except JSONRPCException,e:\n-        assert(e.error['code']==-12)\n-\n-def main():\n-    import optparse\n-\n-    parser = optparse.OptionParser(usage=\"%prog [options]\")\n-    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n-                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n-    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n-                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n-    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n-                      help=\"Root directory for datadirs\")\n-    (options, args) = parser.parse_args()\n-\n-    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n-\n-    check_json_precision()\n-\n-    success = False\n-    nodes = []\n-    try:\n-        print(\"Initializing test directory \"+options.tmpdir)\n-        if not os.path.isdir(options.tmpdir):\n-            os.makedirs(options.tmpdir)\n-        initialize_chain(options.tmpdir)\n-\n-        nodes = start_nodes(1, options.tmpdir)\n-\n-        run_test(nodes, options.tmpdir)\n-\n-        success = True\n-\n-    except AssertionError as e:\n-        print(\"Assertion failed: \"+e.message)\n-    except JSONRPCException as e:\n-        print(\"JSONRPC error: \"+e.error['message'])\n-        traceback.print_tb(sys.exc_info()[2])\n-    except Exception as e:\n-        print(\"Unexpected exception caught during testing: \"+str(sys.exc_info()[0]))\n-        traceback.print_tb(sys.exc_info()[2])\n-\n-    if not options.nocleanup:\n-        print(\"Cleaning up\")\n-        stop_nodes(nodes)\n-        wait_bitcoinds()\n-        shutil.rmtree(options.tmpdir)\n-\n-    if success:\n-        print(\"Tests successful\")\n-        sys.exit(0)\n-    else:\n-        print(\"Failed\")\n-        sys.exit(1)\n+        nodes[0].generate(1)\n+        nodes[0].generate(1)\n+        nodes[0].generate(1)\n+        try:\n+            nodes[0].generate(1)\n+            raise AssertionError('Keypool should be exhausted after three addesses')\n+        except JSONRPCException,e:\n+            assert(e.error['code']==-12)\n+\n+    def main():\n+        import optparse\n+\n+        parser = optparse.OptionParser(usage=\"%prog [options]\")\n+        parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n+                          help=\"Leave bitcoinds and test.* datadir on exit or error\")\n+        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n+                          help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n+        parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n+                          help=\"Root directory for datadirs\")\n+        (options, args) = parser.parse_args()\n+\n+        os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n+\n+        check_json_precision()\n+\n+        success = False\n+        nodes = []\n+        try:\n+            print(\"Initializing test directory \"+options.tmpdir)\n+            if not os.path.isdir(options.tmpdir):\n+                os.makedirs(options.tmpdir)\n+            initialize_chain(options.tmpdir)\n+\n+            nodes = start_nodes(1, options.tmpdir)\n+\n+            run_test(nodes, options.tmpdir)\n+\n+            success = True\n+\n+        except AssertionError as e:\n+            print(\"Assertion failed: \"+e.message)\n+        except JSONRPCException as e:\n+            print(\"JSONRPC error: \"+e.error['message'])\n+            traceback.print_tb(sys.exc_info()[2])\n+        except Exception as e:\n+            print(\"Unexpected exception caught during testing: \"+str(sys.exc_info()[0]))\n+            traceback.print_tb(sys.exc_info()[2])\n+\n+        if not options.nocleanup:\n+            print(\"Cleaning up\")\n+            stop_nodes(nodes)\n+            wait_bitcoinds()\n+            shutil.rmtree(options.tmpdir)\n+\n+        if success:\n+            print(\"Tests successful\")\n+            sys.exit(0)\n+        else:\n+            print(\"Failed\")\n+            sys.exit(1)\n \n if __name__ == '__main__':\n     main()"
      }
    ]
  },
  {
    "sha": "4ea17905538bfef22f0c9bfb990e6d74d311f4e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWExNzkwNTUzOGJmZWYyMmYwYzliZmI5OTBlNmQ3NGQzMTFmNGU1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-15T16:58:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-16T11:01:32Z"
      },
      "message": "[qa] keypool: DRY: Use test framework",
      "tree": {
        "sha": "e30490ca9298986d8f1ed5d76883839fd21393bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e30490ca9298986d8f1ed5d76883839fd21393bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ea17905538bfef22f0c9bfb990e6d74d311f4e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ea17905538bfef22f0c9bfb990e6d74d311f4e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ea17905538bfef22f0c9bfb990e6d74d311f4e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ea17905538bfef22f0c9bfb990e6d74d311f4e5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6973ca03b9dbf919bc0c69af37d1aea6eaf9aba"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 12,
      "deletions": 61
    },
    "files": [
      {
        "sha": "92d91e029ac67050b846d755d0d22cb9195d8082",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 12,
        "deletions": 61,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ea17905538bfef22f0c9bfb990e6d74d311f4e5/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ea17905538bfef22f0c9bfb990e6d74d311f4e5/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=4ea17905538bfef22f0c9bfb990e6d74d311f4e5",
        "patch": "@@ -6,15 +6,8 @@\n # Exercise the wallet keypool, and interaction with wallet encryption/locking\n \n # Add python-bitcoinrpc to module search path:\n-import os\n-import sys\n-\n-import json\n-import shutil\n-import subprocess\n-import tempfile\n-import traceback\n \n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n \n@@ -39,12 +32,15 @@ def check_array_result(object_array, to_match, expected):\n     if num_matched == 0:\n         raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n \n-    def run_test(nodes, tmpdir):\n+class KeyPoolTest(BitcoinTestFramework):\n+\n+    def run_test(self):\n+        nodes = self.nodes\n         # Encrypt wallet and wait to terminate\n         nodes[0].encryptwallet('test')\n         bitcoind_processes[0].wait()\n         # Restart node 0\n-        nodes[0] = start_node(0, tmpdir)\n+        nodes[0] = start_node(0, self.options.tmpdir)\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n         try:\n@@ -89,57 +85,12 @@ def run_test(nodes, tmpdir):\n         except JSONRPCException,e:\n             assert(e.error['code']==-12)\n \n-    def main():\n-        import optparse\n-\n-        parser = optparse.OptionParser(usage=\"%prog [options]\")\n-        parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n-                          help=\"Leave bitcoinds and test.* datadir on exit or error\")\n-        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n-                          help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n-        parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n-                          help=\"Root directory for datadirs\")\n-        (options, args) = parser.parse_args()\n-\n-        os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n-\n-        check_json_precision()\n-\n-        success = False\n-        nodes = []\n-        try:\n-            print(\"Initializing test directory \"+options.tmpdir)\n-            if not os.path.isdir(options.tmpdir):\n-                os.makedirs(options.tmpdir)\n-            initialize_chain(options.tmpdir)\n-\n-            nodes = start_nodes(1, options.tmpdir)\n-\n-            run_test(nodes, options.tmpdir)\n-\n-            success = True\n-\n-        except AssertionError as e:\n-            print(\"Assertion failed: \"+e.message)\n-        except JSONRPCException as e:\n-            print(\"JSONRPC error: \"+e.error['message'])\n-            traceback.print_tb(sys.exc_info()[2])\n-        except Exception as e:\n-            print(\"Unexpected exception caught during testing: \"+str(sys.exc_info()[0]))\n-            traceback.print_tb(sys.exc_info()[2])\n-\n-        if not options.nocleanup:\n-            print(\"Cleaning up\")\n-            stop_nodes(nodes)\n-            wait_bitcoinds()\n-            shutil.rmtree(options.tmpdir)\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain(self.options.tmpdir)\n \n-        if success:\n-            print(\"Tests successful\")\n-            sys.exit(0)\n-        else:\n-            print(\"Failed\")\n-            sys.exit(1)\n+    def setup_network(self):\n+        self.nodes = start_nodes(1, self.options.tmpdir)\n \n if __name__ == '__main__':\n-    main()\n+    KeyPoolTest().main()"
      }
    ]
  }
]