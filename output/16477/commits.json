[
  {
    "sha": "1c37e81694efb08fea889d9f5151c91dbb74d025",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzM3ZTgxNjk0ZWZiMDhmZWE4ODlkOWY1MTUxYzkxZGJiNzRkMDI1",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-07-16T02:40:31Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-07-29T00:28:41Z"
      },
      "message": "scripts: add type annotations to macdeployqtplus",
      "tree": {
        "sha": "9cc4ca48635b0447a683ac4abc9aa7d3cd14d5e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cc4ca48635b0447a683ac4abc9aa7d3cd14d5e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c37e81694efb08fea889d9f5151c91dbb74d025",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl0+PbkACgkQLuufXMCV\nJsEJzg/9Hce0+H5UA4LJnPx4lIv826QYRmJ60NsNZI7YvbMMTFmUYL6QmxND9mum\n4/HAyKdaqgJiqyxTPLwDq0RKSojuCsEenr6gh1zgg0IiNson7hgfav4LV19SYaS5\ntEtpeXzgIMCn92JDFmjWH1YuaaIDvvnpPxi6INvL/mC1enSi9/1dn5lvQUDm6hEM\n9H8vP3raviJ6LX04m5T2+i1auhnr4VobqxF/gMPHoG+BAD4E0fHolLD5aZqixPVs\nIF7i99bhUhO+xVz8y3f5dnfSLPE8nO1IWNfDk9dRM6SSFd7dDFT56MtVkwj6Imfm\n4tDW0t0lP0goyO+D2XtXr2juFXy1K/2PrbaOGfG8I2vQAYnDZeaNgA+9poI92RcL\nsp8xl+PDVgJqTKELFb+ghCI1DANXTl4BzQYOi/+BAEg+De2R8VUd2mkytgvfQGJJ\nGgma9/KBZTF7xsUA5kEyI/UIgJPnEl8GuFO44fbH5YfClXBAoE5bca6Hmhe6H5ci\nm+dnKFeSGTeL8l6ptS8Ovn6s7hWnsVxgJkK23DMHTaTwryZfoKi1NiHltulU04Vk\ndHoqi4ts3kd+eVIiNec7wLkUBfRLdl+K0QETVTJiiIxMdfwGDMc0pJmQwIrbTrj0\nWN+JcEnSvgSP05IsSQBX59sFPsb9HJKqQSUq9pqRuGrHMinFlMU=\n=xBFz\n-----END PGP SIGNATURE-----",
        "payload": "tree 9cc4ca48635b0447a683ac4abc9aa7d3cd14d5e8\nparent 5c2885f9b2e3340ef0558c9924e5386716a8d3b9\nauthor fanquake <fanquake@gmail.com> 1563244831 +0800\ncommitter fanquake <fanquake@gmail.com> 1564360121 +0800\n\nscripts: add type annotations to macdeployqtplus\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c37e81694efb08fea889d9f5151c91dbb74d025",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c37e81694efb08fea889d9f5151c91dbb74d025",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c37e81694efb08fea889d9f5151c91dbb74d025/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c2885f9b2e3340ef0558c9924e5386716a8d3b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c2885f9b2e3340ef0558c9924e5386716a8d3b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c2885f9b2e3340ef0558c9924e5386716a8d3b9"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 15,
      "deletions": 14
    },
    "files": [
      {
        "sha": "c2d6b302938c24e71079a0ee4d1c53962ae72c5e",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c37e81694efb08fea889d9f5151c91dbb74d025/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c37e81694efb08fea889d9f5151c91dbb74d025/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=1c37e81694efb08fea889d9f5151c91dbb74d025",
        "patch": "@@ -19,6 +19,7 @@\n import subprocess, sys, re, os, shutil, stat, os.path, time\n from string import Template\n from argparse import ArgumentParser\n+from typing import List, Optional\n \n # This is ported from the original macdeployqt with modifications\n \n@@ -85,7 +86,7 @@ class FrameworkInfo(object):\n     bundleBinaryDirectory = \"Contents/MacOS\"\n     \n     @classmethod\n-    def fromOtoolLibraryLine(cls, line):\n+    def fromOtoolLibraryLine(cls, line: str) -> Optional['FrameworkInfo']:\n         # Note: line must be trimmed\n         if line == \"\":\n             return None\n@@ -152,7 +153,7 @@ class FrameworkInfo(object):\n         return info\n \n class ApplicationBundleInfo(object):\n-    def __init__(self, path):\n+    def __init__(self, path: str):\n         self.path = path\n         appName = \"Bitcoin-Qt\"\n         self.binaryPath = os.path.join(path, \"Contents\", \"MacOS\", appName)\n@@ -167,7 +168,7 @@ class DeploymentInfo(object):\n         self.pluginPath = None\n         self.deployedFrameworks = []\n     \n-    def detectQtPath(self, frameworkDirectory):\n+    def detectQtPath(self, frameworkDirectory: str):\n         parentDir = os.path.dirname(frameworkDirectory)\n         if os.path.exists(os.path.join(parentDir, \"translations\")):\n             # Classic layout, e.g. \"/usr/local/Trolltech/Qt-4.x.x\"\n@@ -180,7 +181,7 @@ class DeploymentInfo(object):\n             if os.path.exists(pluginPath):\n                 self.pluginPath = pluginPath\n     \n-    def usesFramework(self, name):\n+    def usesFramework(self, name: str) -> bool:\n         nameDot = \"%s.\" % name\n         libNameDot = \"lib%s.\" % name\n         for framework in self.deployedFrameworks:\n@@ -192,7 +193,7 @@ class DeploymentInfo(object):\n                     return True\n         return False\n \n-def getFrameworks(binaryPath, verbose):\n+def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n     if verbose >= 3:\n         print(\"Inspecting with otool: \" + binaryPath)\n     otoolbin=os.getenv(\"OTOOL\", \"otool\")\n@@ -221,33 +222,33 @@ def getFrameworks(binaryPath, verbose):\n     \n     return libraries\n \n-def runInstallNameTool(action, *args):\n+def runInstallNameTool(action: str, *args):\n     installnametoolbin=os.getenv(\"INSTALLNAMETOOL\", \"install_name_tool\")\n     subprocess.check_call([installnametoolbin, \"-\"+action] + list(args))\n \n-def changeInstallName(oldName, newName, binaryPath, verbose):\n+def changeInstallName(oldName: str, newName: str, binaryPath: str, verbose: int):\n     if verbose >= 3:\n         print(\"Using install_name_tool:\")\n         print(\" in\", binaryPath)\n         print(\" change reference\", oldName)\n         print(\" to\", newName)\n     runInstallNameTool(\"change\", oldName, newName, binaryPath)\n \n-def changeIdentification(id, binaryPath, verbose):\n+def changeIdentification(id: str, binaryPath: str, verbose: int):\n     if verbose >= 3:\n         print(\"Using install_name_tool:\")\n         print(\" change identification in\", binaryPath)\n         print(\" to\", id)\n     runInstallNameTool(\"id\", id, binaryPath)\n \n-def runStrip(binaryPath, verbose):\n+def runStrip(binaryPath: str, verbose: int):\n     stripbin=os.getenv(\"STRIP\", \"strip\")\n     if verbose >= 3:\n         print(\"Using strip:\")\n         print(\" stripped\", binaryPath)\n     subprocess.check_call([stripbin, \"-x\", binaryPath])\n \n-def copyFramework(framework, path, verbose):\n+def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional[str]:\n     if framework.sourceFilePath.startswith(\"Qt\"):\n         #standard place for Nokia Qt installer's frameworks\n         fromPath = \"/Library/Frameworks/\" + framework.sourceFilePath\n@@ -309,7 +310,7 @@ def copyFramework(framework, path, verbose):\n     \n     return toPath\n \n-def deployFrameworks(frameworks, bundlePath, binaryPath, strip, verbose, deploymentInfo=None):\n+def deployFrameworks(frameworks: List[FrameworkInfo], bundlePath: str, binaryPath: str, strip: bool, verbose: int, deploymentInfo: Optional[DeploymentInfo] = None) -> DeploymentInfo:\n     if deploymentInfo is None:\n         deploymentInfo = DeploymentInfo()\n     \n@@ -355,15 +356,15 @@ def deployFrameworks(frameworks, bundlePath, binaryPath, strip, verbose, deploym\n     \n     return deploymentInfo\n \n-def deployFrameworksForAppBundle(applicationBundle, strip, verbose):\n+def deployFrameworksForAppBundle(applicationBundle: ApplicationBundleInfo, strip: bool, verbose: int) -> DeploymentInfo:\n     frameworks = getFrameworks(applicationBundle.binaryPath, verbose)\n     if len(frameworks) == 0 and verbose >= 1:\n         print(\"Warning: Could not find any external frameworks to deploy in %s.\" % (applicationBundle.path))\n         return DeploymentInfo()\n     else:\n         return deployFrameworks(frameworks, applicationBundle.path, applicationBundle.binaryPath, strip, verbose)\n \n-def deployPlugins(appBundleInfo, deploymentInfo, strip, verbose):\n+def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: DeploymentInfo, strip: bool, verbose: int):\n     # Lookup available plugins, exclude unneeded\n     plugins = []\n     if deploymentInfo.pluginPath is None:\n@@ -707,7 +708,7 @@ elif config.sign:\n \n if config.dmg is not None:\n \n-    def runHDIUtil(verb, image_basename, **kwargs):\n+    def runHDIUtil(verb: str, image_basename: str, **kwargs) -> int:\n         hdiutil_args = [\"hdiutil\", verb, image_basename + \".dmg\"]\n         if \"capture_stdout\" in kwargs:\n             del kwargs[\"capture_stdout\"]"
      }
    ]
  },
  {
    "sha": "51729a4dfacb5b8d3945d39fa581eaaa9ac9603d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTcyOWE0ZGZhY2I1YjhkMzk0NWQzOWZhNTgxZWFhYTlhYzk2MDNk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-07-16T02:42:33Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-07-29T00:28:41Z"
      },
      "message": "scripts: use format() in macdeployqtplus",
      "tree": {
        "sha": "dc5250d41142005a46fb4605ec5b8a391c51e8cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc5250d41142005a46fb4605ec5b8a391c51e8cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51729a4dfacb5b8d3945d39fa581eaaa9ac9603d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl0+PbkACgkQLuufXMCV\nJsEaCxAAni9n3qZmEA1yEKQKXJj7n6jMSoh+IiBx6U60Cd6Eoxf1lEyDJYeJ8kal\nl4H+1PEaX0mJLUtVagaCrQNXt8FVeMauxV83iuqC+RgI3prI5YtfKxzRxwVkBgkN\nkn5SdUKQCtbOL6/y++OyXDqM4ondxGHNLJKNP0uvd0pQfa3UhNEKB1MzYD0FA7il\ni74xk5W4m6izMDXdmr8silYtjuwoneIFq+YvgCFIxZU09545QcA5CGcPcDe+wxPw\ns6oXDNtW/IdfXKPTq7nOV6w+/kJyjh1eBWSwj6Z6zt599mXAvBuOtv4BlyupoYDS\n4yxhalF/EO9UuVfgzigflnRz9AYOFVnFCrml6VjEeDcp0onnPUxbNBrXUyRrJJf8\ne20BdDaxQFO56jcMm08g2vEPSr5CMV5Dr5A5MWOm6YIqvo38gyz+3YY3Xo2Elf5R\nPCvlZugR//XgSETB5KQ5coDMqfbo//VOMrgCwUntR2lJc8AAO8gGHKYnt+rdsSQe\n4vQpF39r80gP9UhpWVL5FvcqvsV6QuAWp/iiGTVnIpYPZwiy5koUPavJZnJL+NIZ\n3vjdpUqhJhJw22ewrEW4mCuq9qfVQA/kYwiG2WPA6et+1b80BFhb//Ye41h8hQ3i\nCZrEQ5CPoSBH8dk7CtMQTTe6LzpkHvR2PE/PL8132SW2gpYds+A=\n=MeGf\n-----END PGP SIGNATURE-----",
        "payload": "tree dc5250d41142005a46fb4605ec5b8a391c51e8cc\nparent 1c37e81694efb08fea889d9f5151c91dbb74d025\nauthor fanquake <fanquake@gmail.com> 1563244953 +0800\ncommitter fanquake <fanquake@gmail.com> 1564360121 +0800\n\nscripts: use format() in macdeployqtplus\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51729a4dfacb5b8d3945d39fa581eaaa9ac9603d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51729a4dfacb5b8d3945d39fa581eaaa9ac9603d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51729a4dfacb5b8d3945d39fa581eaaa9ac9603d/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c37e81694efb08fea889d9f5151c91dbb74d025",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c37e81694efb08fea889d9f5151c91dbb74d025",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c37e81694efb08fea889d9f5151c91dbb74d025"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "bf1488b110c46c524a538210c79056aac4218c04",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51729a4dfacb5b8d3945d39fa581eaaa9ac9603d/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51729a4dfacb5b8d3945d39fa581eaaa9ac9603d/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=51729a4dfacb5b8d3945d39fa581eaaa9ac9603d",
        "patch": "@@ -49,18 +49,18 @@ class FrameworkInfo(object):\n             return False\n     \n     def __str__(self):\n-        return \"\"\" Framework name: %s\n- Framework directory: %s\n- Framework path: %s\n- Binary name: %s\n- Binary directory: %s\n- Binary path: %s\n- Version: %s\n- Install name: %s\n- Deployed install name: %s\n- Source file Path: %s\n- Deployed Directory (relative to bundle): %s\n-\"\"\" % (self.frameworkName,\n+        return \"\"\" Framework name: {}\n+ Framework directory: {}\n+ Framework path: {}\n+ Binary name: {}\n+ Binary directory: {}\n+ Binary path: {}\n+ Version: {}\n+ Install name: {}\n+ Deployed install name: {}\n+ Source file Path: {}\n+ Deployed Directory (relative to bundle): {}\n+\"\"\".format(self.frameworkName,\n        self.frameworkDirectory,\n        self.frameworkPath,\n        self.binaryName,\n@@ -182,8 +182,8 @@ class DeploymentInfo(object):\n                 self.pluginPath = pluginPath\n     \n     def usesFramework(self, name: str) -> bool:\n-        nameDot = \"%s.\" % name\n-        libNameDot = \"lib%s.\" % name\n+        nameDot = \"{}.\".format(name)\n+        libNameDot = \"lib{}.\".format(name)\n         for framework in self.deployedFrameworks:\n             if framework.endswith(\".framework\"):\n                 if framework.startswith(nameDot):\n@@ -203,7 +203,7 @@ def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n         if verbose >= 1:\n             sys.stderr.write(o_stderr)\n             sys.stderr.flush()\n-            raise RuntimeError(\"otool failed with return code %d\" % otool.returncode)\n+            raise RuntimeError(\"otool failed with return code {}\".format(otool.returncode))\n \n     otoolLines = o_stdout.split(\"\\n\")\n     otoolLines.pop(0) # First line is the inspected binary\n@@ -359,7 +359,7 @@ def deployFrameworks(frameworks: List[FrameworkInfo], bundlePath: str, binaryPat\n def deployFrameworksForAppBundle(applicationBundle: ApplicationBundleInfo, strip: bool, verbose: int) -> DeploymentInfo:\n     frameworks = getFrameworks(applicationBundle.binaryPath, verbose)\n     if len(frameworks) == 0 and verbose >= 1:\n-        print(\"Warning: Could not find any external frameworks to deploy in %s.\" % (applicationBundle.path))\n+        print(\"Warning: Could not find any external frameworks to deploy in {}.\".format(applicationBundle.path))\n         return DeploymentInfo()\n     else:\n         return deployFrameworks(frameworks, applicationBundle.path, applicationBundle.binaryPath, strip, verbose)\n@@ -500,7 +500,7 @@ app_bundle = config.app_bundle[0]\n \n if not os.path.exists(app_bundle):\n     if verbose >= 1:\n-        sys.stderr.write(\"Error: Could not find app bundle \\\"%s\\\"\\n\" % (app_bundle))\n+        sys.stderr.write(\"Error: Could not find app bundle \\\"{}\\\"\\n\".format(app_bundle))\n     sys.exit(1)\n \n app_bundle_name = os.path.splitext(os.path.basename(app_bundle))[0]\n@@ -512,7 +512,7 @@ if config.translations_dir and config.translations_dir[0]:\n         translations_dir = config.translations_dir[0]\n     else:\n         if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not find translation dir \\\"%s\\\"\\n\" % (translations_dir))\n+            sys.stderr.write(\"Error: Could not find translation dir \\\"{}\\\"\\n\".format(translations_dir))\n         sys.exit(1)\n # ------------------------------------------------\n \n@@ -521,7 +521,7 @@ for p in config.add_resources:\n         print(\"Checking for \\\"%s\\\"...\" % p)\n     if not os.path.exists(p):\n         if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not find additional resource file \\\"%s\\\"\\n\" % (p))\n+            sys.stderr.write(\"Error: Could not find additional resource file \\\"{}\\\"\\n\".format(p))\n         sys.exit(1)\n \n # ------------------------------------------------\n@@ -538,17 +538,17 @@ if len(config.fancy) == 1:\n     \n     p = config.fancy[0]\n     if verbose >= 3:\n-        print(\"Fancy: Loading \\\"%s\\\"...\" % p)\n+        print(\"Fancy: Loading \\\"{}\\\"...\".format(p))\n     if not os.path.exists(p):\n         if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not find fancy disk image plist at \\\"%s\\\"\\n\" % (p))\n+            sys.stderr.write(\"Error: Could not find fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n         sys.exit(1)\n     \n     try:\n         fancy = plistlib.readPlist(p)\n     except:\n         if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not parse fancy disk image plist at \\\"%s\\\"\\n\" % (p))\n+            sys.stderr.write(\"Error: Could not parse fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n         sys.exit(1)\n     \n     try:\n@@ -562,18 +562,18 @@ if len(config.fancy) == 1:\n                 assert isinstance(value, list) and len(value) == 2 and isinstance(value[0], int) and isinstance(value[1], int)\n     except:\n         if verbose >= 1:\n-            sys.stderr.write(\"Error: Bad format of fancy disk image plist at \\\"%s\\\"\\n\" % (p))\n+            sys.stderr.write(\"Error: Bad format of fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n         sys.exit(1)\n     \n     if \"background_picture\" in fancy:\n         bp = fancy[\"background_picture\"]\n         if verbose >= 3:\n-            print(\"Fancy: Resolving background picture \\\"%s\\\"...\" % bp)\n+            print(\"Fancy: Resolving background picture \\\"{}\\\"...\".format(bp))\n         if not os.path.exists(bp):\n             bp = os.path.join(os.path.dirname(p), bp)\n             if not os.path.exists(bp):\n                 if verbose >= 1:\n-                    sys.stderr.write(\"Error: Could not find background picture at \\\"%s\\\" or \\\"%s\\\"\\n\" % (fancy[\"background_picture\"], bp))\n+                    sys.stderr.write(\"Error: Could not find background picture at \\\"{}\\\" or \\\"{}\\\"\\n\".format(fancy[\"background_picture\"], bp))\n                 sys.exit(1)\n             else:\n                 fancy[\"background_picture\"] = bp\n@@ -624,7 +624,7 @@ try:\n             config.plugins = False\n except RuntimeError as e:\n     if verbose >= 1:\n-        sys.stderr.write(\"Error: %s\\n\" % str(e))\n+        sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n     sys.exit(1)\n \n # ------------------------------------------------\n@@ -637,7 +637,7 @@ if config.plugins:\n         deployPlugins(applicationBundle, deploymentInfo, config.strip, verbose)\n     except RuntimeError as e:\n         if verbose >= 1:\n-            sys.stderr.write(\"Error: %s\\n\" % str(e))\n+            sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n         sys.exit(1)\n \n # ------------------------------------------------\n@@ -653,14 +653,14 @@ else:\n         else:\n             sys.stderr.write(\"Error: Could not find Qt translation path\\n\")\n             sys.exit(1)\n-    add_qt_tr = [\"qt_%s.qm\" % lng for lng in config.add_qt_tr[0].split(\",\")]\n+    add_qt_tr = [\"qt_{}.qm\".format(lng) for lng in config.add_qt_tr[0].split(\",\")]\n     for lng_file in add_qt_tr:\n         p = os.path.join(qt_tr_dir, lng_file)\n         if verbose >= 3:\n-            print(\"Checking for \\\"%s\\\"...\" % p)\n+            print(\"Checking for \\\"{}\\\"...\".format(p))\n         if not os.path.exists(p):\n             if verbose >= 1:\n-                sys.stderr.write(\"Error: Could not find Qt translation file \\\"%s\\\"\\n\" % (lng_file))\n+                sys.stderr.write(\"Error: Could not find Qt translation file \\\"{}\\\"\\n\".format(lng_file))\n                 sys.exit(1)\n \n # ------------------------------------------------\n@@ -701,8 +701,8 @@ if config.sign and 'CODESIGNARGS' not in os.environ:\n     print(\"You must set the CODESIGNARGS environment variable. Skipping signing.\")\n elif config.sign:\n     if verbose >= 1:\n-        print(\"Code-signing app bundle %s\"%(target,))\n-    subprocess.check_call(\"codesign --force %s %s\"%(os.environ['CODESIGNARGS'], target), shell=True)\n+        print(\"Code-signing app bundle {}\".format(target))\n+    subprocess.check_call(\"codesign --force {} {}\".format(os.environ['CODESIGNARGS'], target), shell=True)\n \n # ------------------------------------------------\n "
      }
    ]
  },
  {
    "sha": "57cdd0697d5c8fdae4a4c1da1cfa092916be87e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2NkZDA2OTdkNWM4ZmRhZTRhNGMxZGExY2ZhMDkyOTE2YmU4N2U3",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-07-16T02:44:38Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-07-29T00:28:41Z"
      },
      "message": "scripts: misc cleanups in macdeployqtplus",
      "tree": {
        "sha": "701281899302577b337d9b4e31e234d527cf4484",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/701281899302577b337d9b4e31e234d527cf4484"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57cdd0697d5c8fdae4a4c1da1cfa092916be87e7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl0+PbkACgkQLuufXMCV\nJsHZJhAAq/BM8PI4aee7y+aEiOlu0BHjZhpg+2e1haInjI2eVCDv0ivoo7mG3+lS\nFqqNPJKLNflM8lKuPKiWjL7TFVJzdIv5A08RqZjpPDhu4J+MV8neRGlt4DLAfFgg\n2PLqg8JB4iJ+DLnfFgZupeKRMlTXlJ13ddxnEfb3TxK9jCKUPzLfPesz8KF14IYH\nfhwnqFQmbx2YRAIVqlYAhBZDhtWeR3DWiAMUEBlPcvSZ/21aYcckO1a2ZpbA8QnU\nmO29nZbTL3YCzOaXsS6WwMzgKcgA2WvJUdOqzYQBTlqQydW8BAWp3+y55HcucqQ2\nEVWNjCbM3ui27/ozkKUTfaXZBI/tm+ufbC0cIx6MFksvfbK/PzTzEubUbix/OOn6\nVOKPscNhw5oKT9hYZZnzbTmAKjYwojg8F208GlI8BC1wZdDdAgGsmdJHjyX247wj\nw/5wYr2Xvu8lZJS1hf1qVoU1dBLCCNYshoTyVej42O+/TiDF15T4jdZa9RCdfoDO\nQzTPOHmrU9o4tvo8DqXDwF0JBzaNnVhQ0VwM91khSsO5d3wF/6MY8BdokkB0yQPT\n6jtvUCoBuwuhMaDLDNLc8clr72NVTB/OzhX3v2L0521jNA3V9/yh4tRMZusOPnXy\nEYY8IXzxDiWpzVMDNT2JECM3F9TlvejT3+kF4+cNJdrnw7qDjvw=\n=JvLM\n-----END PGP SIGNATURE-----",
        "payload": "tree 701281899302577b337d9b4e31e234d527cf4484\nparent 51729a4dfacb5b8d3945d39fa581eaaa9ac9603d\nauthor fanquake <fanquake@gmail.com> 1563245078 +0800\ncommitter fanquake <fanquake@gmail.com> 1564360121 +0800\n\nscripts: misc cleanups in macdeployqtplus\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57cdd0697d5c8fdae4a4c1da1cfa092916be87e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57cdd0697d5c8fdae4a4c1da1cfa092916be87e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57cdd0697d5c8fdae4a4c1da1cfa092916be87e7/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51729a4dfacb5b8d3945d39fa581eaaa9ac9603d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51729a4dfacb5b8d3945d39fa581eaaa9ac9603d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51729a4dfacb5b8d3945d39fa581eaaa9ac9603d"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1cb7c6122aef5900b3ddbf9a4c2085f2df132bc7",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57cdd0697d5c8fdae4a4c1da1cfa092916be87e7/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57cdd0697d5c8fdae4a4c1da1cfa092916be87e7/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=57cdd0697d5c8fdae4a4c1da1cfa092916be87e7",
        "patch": "@@ -147,7 +147,6 @@ class FrameworkInfo(object):\n             info.sourceContentsDirectory = os.path.join(info.frameworkPath, \"Contents\")\n             info.sourceVersionContentsDirectory = os.path.join(info.frameworkPath, \"Versions\", info.version, \"Contents\")\n             info.destinationResourcesDirectory = os.path.join(cls.bundleFrameworkDirectory, info.frameworkName, \"Resources\")\n-            info.destinationContentsDirectory = os.path.join(cls.bundleFrameworkDirectory, info.frameworkName, \"Contents\")\n             info.destinationVersionContentsDirectory = os.path.join(cls.bundleFrameworkDirectory, info.frameworkName, \"Versions\", info.version, \"Contents\")\n         \n         return info\n@@ -722,7 +721,7 @@ if config.dmg is not None:\n         \n         for key, value in kwargs.items():\n             hdiutil_args.append(\"-\" + key)\n-            if not value is True:\n+            if value is not True:\n                 hdiutil_args.append(str(value))\n         \n         return run(hdiutil_args, universal_newlines=True)"
      }
    ]
  },
  {
    "sha": "1ac7b7f66bd53d2d719377c7e0ab8b38e970c88f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWM3YjdmNjZiZDUzZDJkNzE5Mzc3YzdlMGFiOGIzOGU5NzBjODhm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-07-16T02:48:19Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-07-29T01:35:51Z"
      },
      "message": "scripts: filter more qt plugins we don't use in macdeployqtplus\n\nphonon is no longer a part of Qt as of version 5",
      "tree": {
        "sha": "d880c42e5718244f82dff108315b8b017bff6f52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d880c42e5718244f82dff108315b8b017bff6f52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ac7b7f66bd53d2d719377c7e0ab8b38e970c88f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl0+TXcACgkQLuufXMCV\nJsHGCxAAoYmTtGcYHhd/wuO1gGNx1xdUqy5mbpBhaJ3YMwcj3d2guGk+kwr7kWZS\ndIeitVh+sUqJdSmHFQmQvqT3fZAQSWhsc0JYlu3Clk54+XXqvehe/qs2aIbwJGpV\nGLnO2bZNs+GDP01M593EYLNEzhRepTjCXanmdIJgUuvgtTN24agDTlDxjKqMSkMH\nTlkx+Q0k4l2uqwvOlAEmwAx7DbcqtxQTlZlf4S/gZC/vdsxa8pFqyV7A78HyosTx\n/DkApEitosQNZWrIYuXe8WiRRsULEuZWW+doKES2UrzRe/LwBEftY3bBfqU0a0rs\n9L7b2Kucz417Eg70Ng3DiKDx5WwHiwKbWsFY/qsjNsCfeIvMK/5fk61HY1UhHpTH\nDv5FU+D+a6g85JGgjPctmwB5tQfth0PcqoLXIHlMWYH/yU/7XKVLoAFbll9JwBM/\nvjCj6Hcehx7E+pks6dnUrzkUMpOiu6XXUaUib2X5tOYaFn9YYPn7DkmrsqkYKqDs\nhbxVELlOGy/QerVUVRu3SBn3ku8PkFn4Ov5p+RMfy/ojdO/kLT7ulMUTYeb9jqrG\nwsnCJSHiizliR50l4ezdFMnFwGwd1dQX9bHeYLghUypiqHrG/++PnVnWXYLOSo39\nFvTqQx0nLtfbCIOcuiDgYjgviCv/dC67pmShbygnEGG8A+DNAfw=\n=S5Kp\n-----END PGP SIGNATURE-----",
        "payload": "tree d880c42e5718244f82dff108315b8b017bff6f52\nparent 57cdd0697d5c8fdae4a4c1da1cfa092916be87e7\nauthor fanquake <fanquake@gmail.com> 1563245299 +0800\ncommitter fanquake <fanquake@gmail.com> 1564364151 +0800\n\nscripts: filter more qt plugins we don't use in macdeployqtplus\n\nphonon is no longer a part of Qt as of version 5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac7b7f66bd53d2d719377c7e0ab8b38e970c88f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ac7b7f66bd53d2d719377c7e0ab8b38e970c88f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac7b7f66bd53d2d719377c7e0ab8b38e970c88f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57cdd0697d5c8fdae4a4c1da1cfa092916be87e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57cdd0697d5c8fdae4a4c1da1cfa092916be87e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57cdd0697d5c8fdae4a4c1da1cfa092916be87e7"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 46,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e3e7bb38317c1357d57116bedcf000d8ae58db71",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 46,
        "deletions": 4,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac7b7f66bd53d2d719377c7e0ab8b38e970c88f/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac7b7f66bd53d2d719377c7e0ab8b38e970c88f/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=1ac7b7f66bd53d2d719377c7e0ab8b38e970c88f",
        "patch": "@@ -373,10 +373,12 @@ def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: Deployme\n         if pluginDirectory == \"designer\":\n             # Skip designer plugins\n             continue\n-        elif pluginDirectory == \"phonon\" or pluginDirectory == \"phonon_backend\":\n-            # Deploy the phonon plugins only if phonon is in use\n-            if not deploymentInfo.usesFramework(\"phonon\"):\n-                continue\n+        elif pluginDirectory == \"printsupport\":\n+            # Skip printsupport plugins\n+            continue\n+        elif pluginDirectory == \"imageformats\":\n+            # Skip imageformats plugins\n+            continue\n         elif pluginDirectory == \"sqldrivers\":\n             # Deploy the sql plugins only if QtSql is in use\n             if not deploymentInfo.usesFramework(\"QtSql\"):\n@@ -409,6 +411,42 @@ def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: Deployme\n             # Deploy the mediaservice plugins only if QtMultimediaWidgets is in use\n             if not deploymentInfo.usesFramework(\"QtMultimediaWidgets\"):\n                 continue\n+        elif pluginDirectory == \"canbus\":\n+            # Deploy the canbus plugins only if QtSerialBus is in use\n+            if not deploymentInfo.usesFramework(\"QtSerialBus\"):\n+                continue\n+        elif pluginDirectory == \"webview\":\n+            # Deploy the webview plugins only if QtWebView is in use\n+            if not deploymentInfo.usesFramework(\"QtWebView\"):\n+                continue\n+        elif pluginDirectory == \"gamepads\":\n+            # Deploy the webview plugins only if QtGamepad is in use\n+            if not deploymentInfo.usesFramework(\"QtGamepad\"):\n+                continue\n+        elif pluginDirectory == \"geoservices\":\n+            # Deploy the webview plugins only if QtLocation is in use\n+            if not deploymentInfo.usesFramework(\"QtLocation\"):\n+                continue\n+        elif pluginDirectory == \"texttospeech\":\n+            # Deploy the texttospeech plugins only if QtTextToSpeech is in use\n+            if not deploymentInfo.usesFramework(\"QtTextToSpeech\"):\n+                continue\n+        elif pluginDirectory == \"virtualkeyboard\":\n+            # Deploy the virtualkeyboard plugins only if QtVirtualKeyboard is in use\n+            if not deploymentInfo.usesFramework(\"QtVirtualKeyboard\"):\n+                continue\n+        elif pluginDirectory == \"sceneparsers\":\n+            # Deploy the virtualkeyboard plugins only if Qt3DCore is in use\n+            if not deploymentInfo.usesFramework(\"Qt3DCore\"):\n+                continue\n+        elif pluginDirectory == \"renderplugins\":\n+            # Deploy the renderplugins plugins only if Qt3DCore is in use\n+            if not deploymentInfo.usesFramework(\"Qt3DCore\"):\n+                continue\n+        elif pluginDirectory == \"geometryloaders\":\n+            # Deploy the geometryloaders plugins only if Qt3DCore is in use\n+            if not deploymentInfo.usesFramework(\"Qt3DCore\"):\n+                continue\n \n         for pluginName in filenames:\n             pluginPath = os.path.join(pluginDirectory, pluginName)\n@@ -431,6 +469,10 @@ def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: Deployme\n                 # Deploy the accessible qtquick plugin only if QtQuick is in use\n                 if not deploymentInfo.usesFramework(\"QtQuick\"):\n                     continue\n+            elif pluginPath == \"platforminputcontexts/libqtvirtualkeyboardplugin.dylib\":\n+                # Deploy the virtualkeyboardplugin plugin only if QtVirtualKeyboard is in use\n+                if not deploymentInfo.usesFramework(\"QtVirtualKeyboard\"):\n+                    continue\n \n             plugins.append((pluginDirectory, pluginName))\n     "
      }
    ]
  }
]