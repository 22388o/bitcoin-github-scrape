[
  {
    "sha": "ee57c208da165817b345972f70986ffa6d0da705",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTU3YzIwOGRhMTY1ODE3YjM0NTk3MmY3MDk4NmZmYTZkMGRhNzA1",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-05-23T07:21:05Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-05-23T09:03:57Z"
      },
      "message": "Avoid recalculating vchKeyedNetGroup in eviction logic.\n\nLazy calculate vchKeyedNetGroup in CNode::GetKeyedNetGroup.",
      "tree": {
        "sha": "aafabea87a27c6c505153f4c596184b750500298",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aafabea87a27c6c505153f4c596184b750500298"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee57c208da165817b345972f70986ffa6d0da705",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee57c208da165817b345972f70986ffa6d0da705",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee57c208da165817b345972f70986ffa6d0da705",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee57c208da165817b345972f70986ffa6d0da705/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37f9a1f627c0995d89b62923e75cd092600894f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37f9a1f627c0995d89b62923e75cd092600894f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37f9a1f627c0995d89b62923e75cd092600894f9"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 29,
      "deletions": 34
    },
    "files": [
      {
        "sha": "69c0e4e6ea650763185bb8ce2b5e6697f8f6d487",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 34,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee57c208da165817b345972f70986ffa6d0da705/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee57c208da165817b345972f70986ffa6d0da705/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ee57c208da165817b345972f70986ffa6d0da705",
        "patch": "@@ -14,6 +14,7 @@\n #include \"clientversion.h\"\n #include \"consensus/consensus.h\"\n #include \"crypto/common.h\"\n+#include \"crypto/sha256.h\"\n #include \"hash.h\"\n #include \"primitives/transaction.h\"\n #include \"scheduler.h\"\n@@ -840,6 +841,7 @@ struct NodeEvictionCandidate\n     int64_t nTimeConnected;\n     int64_t nMinPingUsecTime;\n     CAddress addr;\n+    std::vector<unsigned char> vchKeyedNetGroup;\n };\n \n static bool ReverseCompareNodeMinPingTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n@@ -852,36 +854,8 @@ static bool ReverseCompareNodeTimeConnected(const NodeEvictionCandidate &a, cons\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n-class CompareNetGroupKeyed\n-{\n-    std::vector<unsigned char> vchSecretKey;\n-public:\n-    CompareNetGroupKeyed()\n-    {\n-        vchSecretKey.resize(32, 0);\n-        GetRandBytes(vchSecretKey.data(), vchSecretKey.size());\n-    }\n-\n-    bool operator()(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n-    {\n-        std::vector<unsigned char> vchGroupA, vchGroupB;\n-        CSHA256 hashA, hashB;\n-        std::vector<unsigned char> vchA(32), vchB(32);\n-\n-        vchGroupA = a.addr.GetGroup();\n-        vchGroupB = b.addr.GetGroup();\n-\n-        hashA.Write(begin_ptr(vchGroupA), vchGroupA.size());\n-        hashB.Write(begin_ptr(vchGroupB), vchGroupB.size());\n-\n-        hashA.Write(begin_ptr(vchSecretKey), vchSecretKey.size());\n-        hashB.Write(begin_ptr(vchSecretKey), vchSecretKey.size());\n-\n-        hashA.Finalize(begin_ptr(vchA));\n-        hashB.Finalize(begin_ptr(vchB));\n-\n-        return vchA < vchB;\n-    }\n+static bool CompareNetGroupKeyed(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b) {\n+    return a.vchKeyedNetGroup < b.vchKeyedNetGroup;\n };\n \n /** Try to find a connection to evict when the node is full.\n@@ -904,7 +878,7 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n                 continue;\n             if (node->fDisconnect)\n                 continue;\n-            NodeEvictionCandidate candidate = {node->id, node->nTimeConnected, node->nMinPingUsecTime, node->addr};\n+            NodeEvictionCandidate candidate = {node->id, node->nTimeConnected, node->nMinPingUsecTime, node->addr, node->vchKeyedNetGroup};\n             vEvictionCandidates.push_back(candidate);\n         }\n     }\n@@ -914,9 +888,8 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n     // Protect connections with certain characteristics\n \n     // Deterministically select 4 peers to protect by netgroup.\n-    // An attacker cannot predict which netgroups will be protected.\n-    static CompareNetGroupKeyed comparerNetGroupKeyed;\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), comparerNetGroupKeyed);\n+    // An attacker cannot predict which netgroups will be protected\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareNetGroupKeyed);\n     vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n \n     if (vEvictionCandidates.empty()) return false;\n@@ -2405,6 +2378,8 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     lastSentFeeFilter = 0;\n     nextSendTimeFeeFilter = 0;\n \n+    CalculateKeyedNetGroup();\n+\n     BOOST_FOREACH(const std::string &msg, getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;\n     mapRecvBytesPerMsgCmd[NET_MESSAGE_COMMAND_OTHER] = 0;"
      },
      {
        "sha": "71a66f825be608ad7b111dad758c165a66c66b0b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee57c208da165817b345972f70986ffa6d0da705/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee57c208da165817b345972f70986ffa6d0da705/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ee57c208da165817b345972f70986ffa6d0da705",
        "patch": "@@ -9,6 +9,8 @@\n #include \"amount.h\"\n #include \"bloom.h\"\n #include \"compat.h\"\n+#include \"crypto/common.h\"\n+#include \"crypto/sha256.h\"\n #include \"limitedmap.h\"\n #include \"netbase.h\"\n #include \"protocol.h\"\n@@ -363,6 +365,8 @@ class CNode\n     CBloomFilter* pfilter;\n     int nRefCount;\n     NodeId id;\n+\n+    std::vector<unsigned char> vchKeyedNetGroup;\n protected:\n \n     // Denial-of-service detection/prevention\n@@ -449,6 +453,22 @@ class CNode\n     CNode(const CNode&);\n     void operator=(const CNode&);\n \n+    void CalculateKeyedNetGroup() {\n+        static std::vector<unsigned char> vchSecretKey;\n+        if (vchSecretKey.empty()) {\n+            vchSecretKey.resize(32, 0);\n+            GetRandBytes(vchSecretKey.data(), vchSecretKey.size());\n+        }\n+\n+        std::vector<unsigned char> vchNetGroup(this->addr.GetGroup());\n+\n+        CSHA256 hash;\n+        hash.Write(begin_ptr(vchNetGroup), vchNetGroup.size());\n+        hash.Write(begin_ptr(vchSecretKey), vchSecretKey.size());\n+\n+        vchKeyedNetGroup.resize(32, 0);\n+        hash.Finalize(begin_ptr(vchKeyedNetGroup));\n+    }\n public:\n \n     NodeId GetId() const {"
      }
    ]
  }
]