DrahtBot,2021-01-06 18:56:52,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19651 (wallet: importdescriptors update existing by S3RK)\n\nIf you consider this pull request important, please also hel",https://github.com/bitcoin/bitcoin/pull/20867#issuecomment-755517668,755517668,
sipa,2021-01-07 00:29:29,"Some thing to test:\n* Descriptors for P2WSH or P2SH-P2WSH multisig can be expanded, signed for, and those spends relay if keys <= 20.\n* Descriptors for P2SH multisig can be expanded, signed for, and those spends relay if keys <= 15 (if compressed) or <= 7 (if uncompressed).\n* Inferring descriptor from a multisig script with keys <= 16, but using a direct push rather than OP_n, fails.",https://github.com/bitcoin/bitcoin/pull/20867#issuecomment-755795401,755795401,
darosior,2021-01-09 19:26:56,"> Descriptors for P2WSH or P2SH-P2WSH multisig can be expanded, signed for, and those spends relay if keys <= 20.\n\nI think this one is adressed in the functional tests commit ?\n\n> Descriptors for P2SH multisig can be expanded, signed for, and those spends relay if keys <= 15 (if compressed) or <= 7 (if uncompressed).\n\nAdded a P2SH multisig standardness check in the functional tests com",https://github.com/bitcoin/bitcoin/pull/20867#issuecomment-757354970,757354970,
darosior,2021-01-10 11:32:47,"Changed the first commit's message to clarify the sigop count calculation for 17-20 keys multisigs:\n> Note that this does not change the sigOpCount calculation (as it would\n    break consensus). Therefore 1-16 keys multisigs are counted as 1-16 sigops\n    and 17-20 keys multisigs are counted as 20 sigops.",https://github.com/bitcoin/bitcoin/pull/20867#issuecomment-757460791,757460791,
DrahtBot,2021-01-13 11:45:39,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nüïµÔ∏è @achow101 has been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/20867#issuecomment-759396187,759396187,
achow101,2021-02-19 19:46:56,Code Review ACK 773e853dd4e506bf06a1381f95f80523ac66c663,https://github.com/bitcoin/bitcoin/pull/20867#issuecomment-782301298,782301298,
sipa,2021-02-19 19:57:23,utACK 773e853dd4e506bf06a1381f95f80523ac66c663,https://github.com/bitcoin/bitcoin/pull/20867#issuecomment-782306338,782306338,
darosior,2021-02-19 22:06:55,"Clarified limit is 15 only for compressed key as per @sipa comment, and added release notes for wallet and RPC changes.\n\n<details><summary>range-diff</summary>\n<p>\n\n```diff\n1:  149948d68 = 1:  858d652a3 script: match multisigs with up to MAX_PUBKEYS_PER_MULTISIG keys\n2:  8c24b50a6 ! 2:  af7977d62 script: allow up to 20 keys in wsh() descriptors\n    @@ src/script/descriptor.cpp: std",https://github.com/bitcoin/bitcoin/pull/20867#issuecomment-782395420,782395420,
darosior,2021-02-20 00:25:37,"Force pushed again as the fuzzer found an UB (that can not be triggered under normal conditions though) when using `CScriptNum().get_int()`.\n\nFixed by just using `int` instead of `unsigned int` in `MatchMultisig` (which is fine, since required to be in `[1, 20]`).\n\n<details><summary>fuzzer output summary</summary>\n<p>\n\n```\nSUMMARY: UndefinedBehaviorSanitizer: implicit-integer-sign-",https://github.com/bitcoin/bitcoin/pull/20867#issuecomment-782474611,782474611,
MarcoFalke,2021-02-20 07:44:04,"Thanks, added to https://github.com/bitcoin-core/bitcoin-devwiki/wiki/Fuzz-Trophies-(vulnerabilities)#non-exploitable-issues",https://github.com/bitcoin/bitcoin/pull/20867#issuecomment-782580668,782580668,
darosior,2021-03-22 08:56:36,@achow101 @sipa : small ping as it's been a month since you ACKed and the only changes are addressing Pieter's nit and fixing a fuzzer finding regarding our casts.,https://github.com/bitcoin/bitcoin/pull/20867#issuecomment-803885957,803885957,
achow101,2021-03-22 16:18:54,re-ACK e839b4c57560ede17d9de94d6814b49576a9450f,https://github.com/bitcoin/bitcoin/pull/20867#issuecomment-804200039,804200039,
darosior,2021-03-24 12:31:35,Addressed @instagibbs 's comments.,https://github.com/bitcoin/bitcoin/pull/20867#issuecomment-805782568,805782568,
darosior,2021-04-27 13:41:02,"> I think you should add a test that P2SH multisig is still non-standard with more than 16 sigs.\n\nThere is one already, [line 263 of `descriptor_tests.cpp`](https://github.com/bitcoin/bitcoin/pull/20867/commits/7a5b597b1f84a8f4fa0e786a538d6abe4e315180#diff-a119191e09c705ca69a03f25a4af82b974c215355265d70e1f7aa754f3a14152R363)",https://github.com/bitcoin/bitcoin/pull/20867#issuecomment-827615464,827615464,
meshcollider,2021-04-30 05:24:59,re-utACK ebd4be43cc945e643f91d3a91007b5a35bbbd5a1,https://github.com/bitcoin/bitcoin/pull/20867#issuecomment-829847419,829847419,
luke-jr,2021-01-06 17:19:26,Perhaps should strprintf the 20 from the constant,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552827453,552827453,src/rpc/util.cpp
luke-jr,2021-01-06 17:19:48,Shouldn't this be `OutputType::P2SH_SEGWIT`?,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552827783,552827783,src/rpc/util.cpp
luke-jr,2021-01-06 17:21:04,"Please use `%d` or `%s` here.\n\n`%i` is explicitly locale-involved, which we don't want in RPC.",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552828882,552828882,src/script/descriptor.cpp
luke-jr,2021-01-06 17:23:15,`IsValidMultisigKeyCount`?,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552830925,552830925,src/script/standard.cpp
luke-jr,2021-01-06 17:28:09,This wants to be a function of its own I think :),https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552835752,552835752,src/script/standard.cpp
darosior,2021-01-06 17:58:53,"No, the limit only applies to raw P2SH not to embedded witness programs",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552863718,552863718,src/rpc/util.cpp
darosior,2021-01-06 18:57:20,Yep :) Done,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552903597,552903597,src/script/standard.cpp
darosior,2021-01-06 18:57:26,Done,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552903645,552903645,src/script/descriptor.cpp
darosior,2021-01-06 18:57:36,Done,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552903741,552903741,src/rpc/util.cpp
mjdietzx,2021-01-06 21:30:27,What are your thoughts on just doing: `return IsValidMultisigKeyCount(count);` here?,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552970485,552970485,src/script/standard.cpp
mjdietzx,2021-01-06 21:32:26,It seems the params `script` and `it` aren't used?,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552971271,552971271,src/script/standard.cpp
mjdietzx,2021-01-06 21:36:06,Is this necessary? Seems you already `return false` on this condition at L123?,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552972728,552972728,src/script/standard.cpp
mjdietzx,2021-01-06 21:37:03,"Does this change behavior, and if so is it intended? bc of the `else` condition https://github.com/bitcoin/bitcoin/pull/20867/files#diff-a1732fc4dc1526b294a41db3f2d3d5e863ec76e68ee3f73449618551f7a469ebR102 I would think `!GetMultisigKeyCount` evaluates differently than the original `!IsSmallInteger(opcode)`",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552973161,552973161,src/script/standard.cpp
mjdietzx,2021-01-06 21:38:26,Why does this change (and L342) belong in this PR?,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552973679,552973679,src/script/standard.cpp
darosior,2021-01-06 21:40:49,"Arg they were part of a (incorrect) previous version, good catch!",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552974494,552974494,src/script/standard.cpp
darosior,2021-01-06 21:42:37,"It does, that's actually the feature implemented in this PR: handle up to 20 keys (therefore we need to handle not only small integers (<=16) but also pushed ones).",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552975213,552975213,src/script/standard.cpp
darosior,2021-01-06 21:43:24,"Right, it's cleaner :) Done",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552975511,552975511,src/script/standard.cpp
darosior,2021-01-06 21:44:52,On L123 i get the count of the required number of keys (the `M` of the `M of N`) and here the total number of keys (the `N` of the `M of N`),https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552976060,552976060,src/script/standard.cpp
darosior,2021-01-06 21:45:58,Look at the implementation of `operator<<` in `CScript`. It handles all integers while `EncodeOP_N` only supports small (<=16) ones.,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r552976515,552976515,src/script/standard.cpp
laanwj,2021-01-07 12:57:15,Doesn't this need to check what `opcode` is ?,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r553311127,553311127,src/script/standard.cpp
darosior,2021-01-07 13:22:38,"`data` would be empty if `opcode` is not a `PUSHDATA` and therefore `count` would be `0` and we'd return `false`. Would an explicitly check be preferable ?\n\nEDIT: ... But that's relying on the content of `data` which is not set in this function (i previously had `GetOp` here that's the reason for my initial comment). Will add a check, thanks!",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r553323348,553323348,src/script/standard.cpp
achow101,2021-02-19 18:32:11,"0 is a valid value for number of keys, so this should be\n\n```suggestion\n    return n_keys >= 0 && n_keys <= MAX_PUBKEYS_PER_MULTISIG;\n```",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r579392291,579392291,src/script/standard.cpp
darosior,2021-02-19 18:53:38,I don't think it's valid according to policy: `IsSmallInteger` currently requires the number of keys to be `>= OP_1`,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r579405145,579405145,src/script/standard.cpp
luke-jr,2021-02-19 19:29:46,Policy is not validity...,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r579426066,579426066,src/script/standard.cpp
darosior,2021-02-19 19:35:31,"@luke-jr i think here the term was used to refer to policy, as `MatchMultisig` is only used to define standardness. What i meant is that i don't think i changed behaviour here (`IsSmallInteger` was already required for both counts).",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r579429059,579429059,src/script/standard.cpp
luke-jr,2021-02-19 19:38:22,"Maybe the function should get renamed for clarity :)\n\n`IsAcceptableMultisigKeyCount` or such",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r579430814,579430814,src/script/standard.cpp
achow101,2021-02-19 19:45:09,"Ah, `IsSmallInteger` also disallows 0, so behavior is not changing in this area.",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r579434293,579434293,src/script/standard.cpp
sipa,2021-02-19 19:54:30,Perhaps clarify that this depends on whether they're compressed or uncompressed (but it's 15 for all compressed)?,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r579439221,579439221,src/script/descriptor.cpp
instagibbs,2021-03-24 06:42:03,minor nit: I don't think the comment serves much purpose,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r600210182,600210182,src/script/standard.cpp
instagibbs,2021-03-24 06:46:13,nit: please annotate the boolean arg,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r600211835,600211835,src/script/standard.cpp
instagibbs,2021-03-24 06:52:22,should we be writing to the value before we're sure it succeeds?,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r600214265,600214265,src/script/standard.cpp
instagibbs,2021-03-24 06:53:43,suggestion for clarity: `s/keys/num_keys/`,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r600214811,600214811,src/script/standard.cpp
instagibbs,2021-03-24 06:54:36,"while you're at it, maybe `s/required/required_sigs/`",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r600215160,600215160,src/script/standard.cpp
instagibbs,2021-03-24 06:55:18,"slight misnomer, we're using it to check for ranges of keys and sig counts...",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r600215439,600215439,src/script/standard.cpp
instagibbs,2021-03-24 06:57:32,comments out of date,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r600216527,600216527,src/script/standard.cpp
instagibbs,2021-03-24 08:54:07,"nit: I might suggest building this string programmatically, just re-using the same key 15 times?",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r600282204,600282204,test/functional/wallet_importdescriptors.py
instagibbs,2021-03-24 08:54:11,"nit: I might suggest building this string programmatically, just re-using the same key 15 times?",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r600282250,600282250,test/functional/wallet_importdescriptors.py
instagibbs,2021-03-24 08:54:21,"nit: I might suggest building this string programmatically, just re-using the same key 15 times?",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r600282352,600282352,test/functional/wallet_importdescriptors.py
instagibbs,2021-03-24 08:54:26,"nit: I might suggest building this string programmatically, just re-using the same key 15 times?",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r600282403,600282403,test/functional/wallet_importdescriptors.py
instagibbs,2021-03-24 08:57:12,"this gets changed in another commit, nevermind",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r600284361,600284361,src/script/standard.cpp
darosior,2021-03-24 09:31:08,"We do some checks, but its primary function is to affect a value to `count`, hence getting the key count?",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r600308320,600308320,src/script/standard.cpp
darosior,2021-03-24 09:34:46,"The caller should (and does) only regard the value of `count` if the getter returns `true`.\nI could make sure that on error we always return before writing to `count` but it would make the logic even more convoluted than it already is in order to support an usage that should not exist in the first place?",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r600310982,600310982,src/script/standard.cpp
darosior,2021-03-24 10:39:30,"Yes, fstrings ftw :)",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r600359629,600359629,test/functional/wallet_importdescriptors.py
instagibbs,2021-03-25 06:26:06,phew,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r601094839,601094839,test/functional/wallet_importdescriptors.py
meshcollider,2021-04-27 04:49:33,"There is a function called `CheckMinimalPush()` which is a more complete check, I think you could use that here",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r620860344,620860344,src/script/standard.cpp
darosior,2021-04-27 13:40:57,"Thanks, done:\n```patch\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\nindex abc0625bb..7e119bb3c 100644\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -225,7 +225,7 @@ bool static CheckPubKeyEncoding(const valtype &vchPubKey, unsigned int flags, co\n     return true;\n }\n \n-bool static CheckMinimalPush(const valtype& data, opcodetype op",https://github.com/bitcoin/bitcoin/pull/20867#discussion_r621219360,621219360,src/script/standard.cpp
instagibbs,2021-05-03 02:19:49,just noting the minimal encoding requirement is no longer necessary here due to new check above,https://github.com/bitcoin/bitcoin/pull/20867#discussion_r624848634,624848634,src/script/standard.cpp
