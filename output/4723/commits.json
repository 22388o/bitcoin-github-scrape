[
  {
    "sha": "ff7e3dac66eeaa09eefbe9f21e8622188b9eff70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjdlM2RhYzY2ZWVhYTA5ZWVmYmU5ZjIxZTg2MjIxODhiOWVmZjcw",
    "commit": {
      "author": {
        "name": "Ivan Pustogarov",
        "email": "ivanpustogarov@users.noreply.github.com",
        "date": "2014-08-13T23:31:16Z"
      },
      "committer": {
        "name": "Ivan Pustogarov",
        "email": "ivanpustogarov@users.noreply.github.com",
        "date": "2014-08-18T16:11:25Z"
      },
      "message": "Add rotation of outbound connections every 2-5 min\n\nEvery 2-5 minutes choose a random outbound connection with probability\nproportionally to its connected time and disconnect the corresponding\npeer. This periodically rotates outbound connections and prevents a\nbitcoin client to be fingerprinted (the set of outbound connections\nuniquely identifies a client).",
      "tree": {
        "sha": "ee91fd818d4811d3d6b522a78cd64683de1e572e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee91fd818d4811d3d6b522a78cd64683de1e572e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff7e3dac66eeaa09eefbe9f21e8622188b9eff70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7e3dac66eeaa09eefbe9f21e8622188b9eff70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff7e3dac66eeaa09eefbe9f21e8622188b9eff70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7e3dac66eeaa09eefbe9f21e8622188b9eff70/comments",
    "author": {
      "login": "ivanpustogarov",
      "id": 8126617,
      "node_id": "MDQ6VXNlcjgxMjY2MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8126617?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanpustogarov",
      "html_url": "https://github.com/ivanpustogarov",
      "followers_url": "https://api.github.com/users/ivanpustogarov/followers",
      "following_url": "https://api.github.com/users/ivanpustogarov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanpustogarov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanpustogarov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanpustogarov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanpustogarov/orgs",
      "repos_url": "https://api.github.com/users/ivanpustogarov/repos",
      "events_url": "https://api.github.com/users/ivanpustogarov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanpustogarov/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ivanpustogarov",
      "id": 8126617,
      "node_id": "MDQ6VXNlcjgxMjY2MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8126617?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanpustogarov",
      "html_url": "https://github.com/ivanpustogarov",
      "followers_url": "https://api.github.com/users/ivanpustogarov/followers",
      "following_url": "https://api.github.com/users/ivanpustogarov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanpustogarov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanpustogarov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanpustogarov/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanpustogarov/orgs",
      "repos_url": "https://api.github.com/users/ivanpustogarov/repos",
      "events_url": "https://api.github.com/users/ivanpustogarov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanpustogarov/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fad23a210bc61c784af0be4fc32cda6b75a4619b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad23a210bc61c784af0be4fc32cda6b75a4619b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fad23a210bc61c784af0be4fc32cda6b75a4619b"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 47,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3e0680a47ef864d3e1104681fbd0959831142d06",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff7e3dac66eeaa09eefbe9f21e8622188b9eff70/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff7e3dac66eeaa09eefbe9f21e8622188b9eff70/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ff7e3dac66eeaa09eefbe9f21e8622188b9eff70",
        "patch": "@@ -550,6 +550,7 @@ void CNode::PushVersion()\n \n std::map<CNetAddr, int64_t> CNode::setBanned;\n CCriticalSection CNode::cs_setBanned;\n+int64_t CNode::nTimeRotateOutbound = GetTime() + 2*60; // Try to rotate after 2 mins after startup\n \n void CNode::ClearBanned()\n {\n@@ -986,6 +987,13 @@ void ThreadSocketHandler()\n             BOOST_FOREACH(CNode* pnode, vNodesCopy)\n                 pnode->AddRef();\n         }\n+        // The following four variables are used to pick a random element among outbound connections\n+        // choosing each element with a probability proportional to its (uint64_t) time\n+        // since connected. If all elements have 0 connect time, choose an index at random.\n+        uint64_t nTotal = 0;\n+        uint64_t nTotalSoFar = 0;\n+        vector<CNode*> vNodesOutbound;\n+        CNode* pnodeToDisconnect = NULL;\n         BOOST_FOREACH(CNode* pnode, vNodesCopy)\n         {\n             boost::this_thread::interruption_point();\n@@ -1073,7 +1081,42 @@ void ThreadSocketHandler()\n                     pnode->fDisconnect = true;\n                 }\n             }\n+\t    // This is the first step of picking a random outbound connection\n+\t    if (!pnode->fInbound && setservAddNodeAddresses.count(pnode->addr) == 0 && !pnode->fDisconnect) {\n+\t        nTotal += std::max(GetTime()-pnode->nTimeConnected,(int64_t)0); // Exclude case when the time jumped to the future and we have a negative value\n+\t\tvNodesOutbound.push_back(pnode);\n+\t    }\n         }\n+\n+        // This is the second step of picking a random outbound connection\n+        int nOutbound = vNodesOutbound.size();\n+        int64_t nTimeRotateOutbound = CNode::nTimeRotateOutbound;\n+        uint64_t nRandVal = GetRandInt(nTotal);\n+        if(nOutbound >= 2 && !mapArgs.count(\"-connect\") && GetTime()-nTimeRotateOutbound > 0) { // do not disconnect anybody if '-connect' was used, or\n+                                                                                                // the number of outbound connected peers is less than 4\n+            if (nTotal == 0) // If all connections are 0 seconds old, choose by index only\n+                pnodeToDisconnect = vNodesOutbound[GetRandInt(nOutbound-1)];\n+            else\n+                BOOST_FOREACH(CNode* pnode, vNodesOutbound)\n+                {\n+                    nTotalSoFar += std::max(GetTime()-pnode->nTimeConnected,(int64_t)0); \n+                    if (nTotalSoFar >= nRandVal) {\n+                        pnodeToDisconnect = pnode;\n+                        break;\n+                    }\n+                }\n+        }\n+        if (pnodeToDisconnect) {\n+            pnodeToDisconnect->fDisconnect = true;\n+            CNode::nTimeRotateOutbound = GetTime() + 2*60 + GetRand(3*60);\n+            LogPrint(\"net\",\"regular entry rotation: peer '%s' will be diconnected;\"\n+\t                \" next-time=%lld; fInbound=%s; nTotal=%lld;\"\n+\t\t\t\" nTotalSoFar=%lld; nRandVal=%lld; nTimeConnectedDelta=%lld\\n\",\n+\t                   pnodeToDisconnect->addr.ToString(),\n+\t\t\t   CNode::nTimeRotateOutbound, pnodeToDisconnect->fInbound ? \"yes\" : \"no\", nTotal,\n+\t\t\t   nTotalSoFar, nRandVal, GetTime() - pnodeToDisconnect->nTimeConnected);\n+        }\n+\n         {\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodesCopy)"
      },
      {
        "sha": "843cb9bec0c2ef03589f54f598c35e7471cac6c2",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff7e3dac66eeaa09eefbe9f21e8622188b9eff70/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff7e3dac66eeaa09eefbe9f21e8622188b9eff70/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ff7e3dac66eeaa09eefbe9f21e8622188b9eff70",
        "patch": "@@ -300,6 +300,10 @@ class CNode\n     // Whether a ping is requested.\n     bool fPingQueued;\n \n+    // We will drop a randomly chosen outbound connection at this time\n+    static int64_t nTimeRotateOutbound;\n+\n+\n     CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn = \"\", bool fInboundIn=false) : ssSend(SER_NETWORK, INIT_PROTO_VERSION), setAddrKnown(5000)\n     {\n         nServices = 0;"
      }
    ]
  }
]