[
  {
    "sha": "56e2dc2cfe2b181ba8c63adaf287cc565745eb54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NmUyZGMyY2ZlMmIxODFiYThjNjNhZGFmMjg3Y2M1NjU3NDVlYjU0",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-06-16T13:55:39Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-07-21T12:48:57Z"
      },
      "message": "cleanup use of CloseSocket()\n\n- call CloseSocket() before printing any text (ensure consistent\n  usage in the code), exception is when using NetworkErrorString()",
      "tree": {
        "sha": "41de282bd0dced5aad10182a8ceb603f6ddfb650",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41de282bd0dced5aad10182a8ceb603f6ddfb650"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56e2dc2cfe2b181ba8c63adaf287cc565745eb54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56e2dc2cfe2b181ba8c63adaf287cc565745eb54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56e2dc2cfe2b181ba8c63adaf287cc565745eb54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56e2dc2cfe2b181ba8c63adaf287cc565745eb54/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "cdb4193a317e1360be806eed9838010e642b6388",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdb4193a317e1360be806eed9838010e642b6388",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cdb4193a317e1360be806eed9838010e642b6388"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 9,
      "deletions": 11
    },
    "files": [
      {
        "sha": "522230804021affd4fba79600b5c33dd5d082cec",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56e2dc2cfe2b181ba8c63adaf287cc565745eb54/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56e2dc2cfe2b181ba8c63adaf287cc565745eb54/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=56e2dc2cfe2b181ba8c63adaf287cc565745eb54",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -22,7 +22,7 @@\n #endif\n #define FD_SETSIZE 1024 // max number of fds in fd_set\n \n-#include <winsock2.h>     // Must be included before mswsock.h and windows.h\n+#include <winsock2.h> // Must be included before mswsock.h and windows.h\n \n #include <mswsock.h>\n #include <windows.h>\n@@ -59,4 +59,4 @@ typedef u_int SOCKET;\n #define SOCKET_ERROR        -1\n #endif\n \n-#endif\n+#endif // _BITCOIN_COMPAT_H"
      },
      {
        "sha": "f3c30fd05aa507b8dedae07244f48a36b23a7924",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56e2dc2cfe2b181ba8c63adaf287cc565745eb54/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56e2dc2cfe2b181ba8c63adaf287cc565745eb54/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=56e2dc2cfe2b181ba8c63adaf287cc565745eb54",
        "patch": "@@ -532,8 +532,8 @@ void CNode::CloseSocketDisconnect()\n     fDisconnect = true;\n     if (hSocket != INVALID_SOCKET)\n     {\n-        LogPrint(\"net\", \"disconnecting peer=%d\\n\", id);\n         CloseSocket(hSocket);\n+        LogPrint(\"net\", \"disconnecting peer=%d\\n\", id);\n     }\n \n     // in case this fails, we'll empty the recv buffer when the CNode is deleted\n@@ -978,8 +978,8 @@ void ThreadSocketHandler()\n                 }\n                 else if (CNode::IsBanned(addr) && !whitelisted)\n                 {\n-                    LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n                     CloseSocket(hSocket);\n+                    LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n                 }\n                 else\n                 {"
      },
      {
        "sha": "eba05b6cdca22157d3aa48c8b800e137172ed7fa",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56e2dc2cfe2b181ba8c63adaf287cc565745eb54/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56e2dc2cfe2b181ba8c63adaf287cc565745eb54/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=56e2dc2cfe2b181ba8c63adaf287cc565745eb54",
        "patch": "@@ -355,12 +355,11 @@ class CNode\n \n     ~CNode()\n     {\n-        if (hSocket != INVALID_SOCKET)\n-        {\n-            CloseSocket(hSocket);\n-        }\n+        CloseSocket(hSocket);\n+\n         if (pfilter)\n             delete pfilter;\n+\n         GetNodeSignals().FinalizeNode(GetId());\n     }\n \n@@ -739,7 +738,6 @@ class CNode\n };\n \n \n-\n class CTransaction;\n void RelayTransaction(const CTransaction& tx);\n void RelayTransaction(const CTransaction& tx, const CDataStream& ss);"
      },
      {
        "sha": "d7bfb3e91db5bfb1d7c3cb67113192b3eebe6d7e",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56e2dc2cfe2b181ba8c63adaf287cc565745eb54/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56e2dc2cfe2b181ba8c63adaf287cc565745eb54/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=56e2dc2cfe2b181ba8c63adaf287cc565745eb54",
        "patch": "@@ -364,8 +364,8 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n             int nRet = select(hSocket + 1, NULL, &fdset, NULL, &timeout);\n             if (nRet == 0)\n             {\n-                LogPrint(\"net\", \"connection to %s timeout\\n\", addrConnect.ToString());\n                 CloseSocket(hSocket);\n+                LogPrint(\"net\", \"connection to %s timeout\\n\", addrConnect.ToString());\n                 return false;\n             }\n             if (nRet == SOCKET_ERROR)"
      }
    ]
  },
  {
    "sha": "684bec2f41d0963fe24cf55cd397b962a25529cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODRiZWMyZjQxZDA5NjNmZTI0Y2Y1NWNkMzk3Yjk2MmEyNTUyOWNm",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-06-22T01:05:52Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-07-21T12:59:37Z"
      },
      "message": "add CSocket (RAII class that provides access to a SOCKET)",
      "tree": {
        "sha": "ad75591fee12b64ac973ea0d552cd8ec4c9aebe4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad75591fee12b64ac973ea0d552cd8ec4c9aebe4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/684bec2f41d0963fe24cf55cd397b962a25529cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/684bec2f41d0963fe24cf55cd397b962a25529cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/684bec2f41d0963fe24cf55cd397b962a25529cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/684bec2f41d0963fe24cf55cd397b962a25529cf/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "56e2dc2cfe2b181ba8c63adaf287cc565745eb54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56e2dc2cfe2b181ba8c63adaf287cc565745eb54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56e2dc2cfe2b181ba8c63adaf287cc565745eb54"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 116,
      "deletions": 34
    },
    "files": [
      {
        "sha": "f2159fe9b8059996143a29c3ea1cd04c675a24e4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 34,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/684bec2f41d0963fe24cf55cd397b962a25529cf/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/684bec2f41d0963fe24cf55cd397b962a25529cf/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=684bec2f41d0963fe24cf55cd397b962a25529cf",
        "patch": "@@ -47,19 +47,14 @@\n #endif\n #endif\n \n-using namespace std;\n using namespace boost;\n+using namespace std;\n \n namespace {\n-    const int MAX_OUTBOUND_CONNECTIONS = 8;\n \n-    struct ListenSocket {\n-        SOCKET socket;\n-        bool whitelisted;\n+    const int MAX_OUTBOUND_CONNECTIONS = 8;\n \n-        ListenSocket(SOCKET socket, bool whitelisted) : socket(socket), whitelisted(whitelisted) {}\n-    };\n-}\n+} // anon namespace\n \n //\n // Global state variables\n@@ -74,7 +69,7 @@ static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n static CNode* pnodeSync = NULL;\n uint64_t nLocalHostNonce = 0;\n-static std::vector<ListenSocket> vhListenSocket;\n+static std::vector<CSocket> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = 125;\n \n@@ -875,9 +870,9 @@ void ThreadSocketHandler()\n         SOCKET hSocketMax = 0;\n         bool have_fds = false;\n \n-        BOOST_FOREACH(const ListenSocket& hListenSocket, vhListenSocket) {\n-            FD_SET(hListenSocket.socket, &fdsetRecv);\n-            hSocketMax = max(hSocketMax, hListenSocket.socket);\n+        BOOST_FOREACH(CSocket &hListenSocket, vhListenSocket) {\n+            FD_SET(hListenSocket.Get(), &fdsetRecv);\n+            hSocketMax = max(hSocketMax, hListenSocket.Get());\n             have_fds = true;\n         }\n \n@@ -944,21 +939,21 @@ void ThreadSocketHandler()\n         //\n         // Accept new connections\n         //\n-        BOOST_FOREACH(const ListenSocket& hListenSocket, vhListenSocket)\n+        BOOST_FOREACH(CSocket &hListenSocket, vhListenSocket)\n         {\n-            if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n+            if (hListenSocket.IsValid() && FD_ISSET(hListenSocket.Get(), &fdsetRecv))\n             {\n                 struct sockaddr_storage sockaddr;\n                 socklen_t len = sizeof(sockaddr);\n-                SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n+                SOCKET hSocket = accept(hListenSocket.Get(), (struct sockaddr*)&sockaddr, &len);\n                 CAddress addr;\n                 int nInbound = 0;\n \n                 if (hSocket != INVALID_SOCKET)\n                     if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n                         LogPrintf(\"Warning: Unknown socket family\\n\");\n \n-                bool whitelisted = hListenSocket.whitelisted || CNode::IsWhitelistedRange(addr);\n+                bool whitelisted = hListenSocket.IsWhitelisted() || CNode::IsWhitelistedRange(addr);\n                 {\n                     LOCK(cs_vNodes);\n                     BOOST_FOREACH(CNode* pnode, vNodes)\n@@ -1624,8 +1619,9 @@ bool BindListenPort(const CService &addrBind, string& strError, bool fWhiteliste\n         return false;\n     }\n \n-    SOCKET hListenSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);\n-    if (hListenSocket == INVALID_SOCKET)\n+    CSocket hListenSocket(false, fWhitelisted);\n+    hListenSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);\n+    if (!hListenSocket.IsValid())\n     {\n         strError = strprintf(\"Error: Couldn't open socket for incoming connections (socket returned error %s)\", NetworkErrorString(WSAGetLastError()));\n         LogPrintf(\"%s\\n\", strError);\n@@ -1635,18 +1631,18 @@ bool BindListenPort(const CService &addrBind, string& strError, bool fWhiteliste\n #ifndef WIN32\n #ifdef SO_NOSIGPIPE\n     // Different way of disabling SIGPIPE on BSD\n-    setsockopt(hListenSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&nOne, sizeof(int));\n+    setsockopt(hListenSocket.Get(), SOL_SOCKET, SO_NOSIGPIPE, (void*)&nOne, sizeof(int));\n #endif\n     // Allow binding if the port is still in TIME_WAIT state after\n     // the program was closed and restarted. Not an issue on windows!\n-    setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (void*)&nOne, sizeof(int));\n+    setsockopt(hListenSocket.Get(), SOL_SOCKET, SO_REUSEADDR, (void*)&nOne, sizeof(int));\n #endif\n \n #ifdef WIN32\n     // Set to non-blocking, incoming connections will also inherit this\n-    if (ioctlsocket(hListenSocket, FIONBIO, (u_long*)&nOne) == SOCKET_ERROR)\n+    if (ioctlsocket(hListenSocket.Get(), FIONBIO, (u_long*)&nOne) == SOCKET_ERROR)\n #else\n-    if (fcntl(hListenSocket, F_SETFL, O_NONBLOCK) == SOCKET_ERROR)\n+    if (fcntl(hListenSocket.Get(), F_SETFL, O_NONBLOCK) == SOCKET_ERROR)\n #endif\n     {\n         strError = strprintf(\"Error: Couldn't set properties on socket for incoming connections (error %s)\", NetworkErrorString(WSAGetLastError()));\n@@ -1659,40 +1655,40 @@ bool BindListenPort(const CService &addrBind, string& strError, bool fWhiteliste\n     if (addrBind.IsIPv6()) {\n #ifdef IPV6_V6ONLY\n #ifdef WIN32\n-        setsockopt(hListenSocket, IPPROTO_IPV6, IPV6_V6ONLY, (const char*)&nOne, sizeof(int));\n+        setsockopt(hListenSocket.Get(), IPPROTO_IPV6, IPV6_V6ONLY, (const char*)&nOne, sizeof(int));\n #else\n-        setsockopt(hListenSocket, IPPROTO_IPV6, IPV6_V6ONLY, (void*)&nOne, sizeof(int));\n+        setsockopt(hListenSocket.Get(), IPPROTO_IPV6, IPV6_V6ONLY, (void*)&nOne, sizeof(int));\n #endif\n #endif\n #ifdef WIN32\n         int nProtLevel = PROTECTION_LEVEL_UNRESTRICTED;\n-        setsockopt(hListenSocket, IPPROTO_IPV6, IPV6_PROTECTION_LEVEL, (const char*)&nProtLevel, sizeof(int));\n+        setsockopt(hListenSocket.Get(), IPPROTO_IPV6, IPV6_PROTECTION_LEVEL, (const char*)&nProtLevel, sizeof(int));\n #endif\n     }\n \n-    if (::bind(hListenSocket, (struct sockaddr*)&sockaddr, len) == SOCKET_ERROR)\n+    if (::bind(hListenSocket.Get(), (struct sockaddr*)&sockaddr, len) == SOCKET_ERROR)\n     {\n         int nErr = WSAGetLastError();\n         if (nErr == WSAEADDRINUSE)\n             strError = strprintf(_(\"Unable to bind to %s on this computer. Bitcoin Core is probably already running.\"), addrBind.ToString());\n         else\n             strError = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\"), addrBind.ToString(), NetworkErrorString(nErr));\n         LogPrintf(\"%s\\n\", strError);\n-        CloseSocket(hListenSocket);\n+        hListenSocket.Close();\n         return false;\n     }\n     LogPrintf(\"Bound to %s\\n\", addrBind.ToString());\n \n     // Listen for incoming connections\n-    if (listen(hListenSocket, SOMAXCONN) == SOCKET_ERROR)\n+    if (listen(hListenSocket.Get(), SOMAXCONN) == SOCKET_ERROR)\n     {\n         strError = strprintf(_(\"Error: Listening for incoming connections failed (listen returned error %s)\"), NetworkErrorString(WSAGetLastError()));\n         LogPrintf(\"%s\\n\", strError);\n-        CloseSocket(hListenSocket);\n+        hListenSocket.Close();\n         return false;\n     }\n \n-    vhListenSocket.push_back(ListenSocket(hListenSocket, fWhitelisted));\n+    vhListenSocket.push_back(hListenSocket);\n \n     if (addrBind.IsRoutable() && fDiscover && !fWhitelisted)\n         AddLocal(addrBind, LOCAL_BIND);\n@@ -1819,10 +1815,9 @@ class CNetCleanup\n         BOOST_FOREACH(CNode* pnode, vNodes)\n             if (pnode->hSocket != INVALID_SOCKET)\n                 CloseSocket(pnode->hSocket);\n-        BOOST_FOREACH(ListenSocket& hListenSocket, vhListenSocket)\n-            if (hListenSocket.socket != INVALID_SOCKET)\n-                if (!CloseSocket(hListenSocket.socket))\n-                    LogPrintf(\"CloseSocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n+        BOOST_FOREACH(CSocket &hListenSocket, vhListenSocket)\n+            if (!hListenSocket.Close())\n+                LogPrintf(\"hListenSocket.Close: Failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n \n         // clean up some globals (to help leak detection)\n         BOOST_FOREACH(CNode *pnode, vNodes)"
      },
      {
        "sha": "9955ca5e03819cef856ea971ad833f92851f1e25",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/684bec2f41d0963fe24cf55cd397b962a25529cf/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/684bec2f41d0963fe24cf55cd397b962a25529cf/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=684bec2f41d0963fe24cf55cd397b962a25529cf",
        "patch": "@@ -201,9 +201,96 @@ class CNetMessage {\n     int readData(const char *pch, unsigned int nBytes);\n };\n \n+/** RAII class that provides access to a SOCKET */\n+class CSocket\n+{\n+public:\n+    CSocket() :\n+        hSocket(INVALID_SOCKET),\n+        fCloseOnDestruct(true),\n+        fWhitelisted(false)\n+    { }\n+\n+    CSocket(bool fCloseOnDestruct_rhs, bool fWhitelisted_rhs) :\n+        hSocket(INVALID_SOCKET)\n+    {\n+        fCloseOnDestruct = fCloseOnDestruct_rhs;\n+        fWhitelisted = fWhitelisted_rhs;\n+    }\n+\n+    CSocket(const CSocket& rhs)\n+    {\n+        *this = rhs;\n+    }\n+\n+    CSocket(SOCKET rhs) :\n+        fCloseOnDestruct(true),\n+        fWhitelisted(false)\n+    {\n+        *this = rhs;\n+    }\n+\n+    ~CSocket()\n+    {\n+        if (fCloseOnDestruct)\n+            Close();\n+    }\n+\n+    CSocket& operator=(const CSocket& rhs)\n+    {\n+        if (this != &rhs)\n+        {\n+            hSocket = rhs.hSocket;\n+            fCloseOnDestruct = rhs.fCloseOnDestruct;\n+            fWhitelisted = rhs.fWhitelisted;\n+        }\n+\n+        return *this;\n+    }\n+\n+    CSocket& operator=(SOCKET rhs)\n+    {\n+        hSocket = rhs;\n+        return *this;\n+    }\n+\n+    bool Close()\n+    {\n+        return CloseSocket(hSocket);\n+    }\n \n+    SOCKET& Get()\n+    {\n+        return hSocket;\n+    }\n \n+    bool IsValid() const\n+    {\n+        return hSocket != INVALID_SOCKET;\n+    }\n+\n+    // Currently unused\n+    void SetCloseOnDestruct(bool fFlag)\n+    {\n+        fCloseOnDestruct = fFlag;\n+    }\n \n+    // Currently unused\n+    void SetWhitelisted(bool fFlag)\n+    {\n+        fWhitelisted = fFlag;\n+    }\n+\n+    bool IsWhitelisted() const\n+    {\n+        return fWhitelisted;\n+    }\n+\n+private:\n+    SOCKET hSocket;\n+    bool fCloseOnDestruct;\n+    bool fWhitelisted;\n+};\n \n /** Information about a peer */\n class CNode"
      }
    ]
  }
]