[
  {
    "sha": "a3b559c970ada3c123ae24f21e45892734e7d494",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2I1NTljOTcwYWRhM2MxMjNhZTI0ZjIxZTQ1ODkyNzM0ZTdkNDk0",
    "commit": {
      "author": {
        "name": "Shubhankar Gambhir",
        "email": "Shubhankargambhir013@gmail.com",
        "date": "2021-08-05T21:31:12Z"
      },
      "committer": {
        "name": "Shubhankar",
        "email": "Shubhankargambhir013@gmail.com",
        "date": "2021-08-12T12:44:56Z"
      },
      "message": "test: added test for disabled wallet\n\nDivided tests in rpc_signmessage.py into 2 files wallet_signmessagewithaddress.py and\nrpc_signmessagewithprivkey.py, latter one can run even when wallet is disabled.",
      "tree": {
        "sha": "e71a38fdace9dfd5d3f0c3635a04acb0097eaf54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e71a38fdace9dfd5d3f0c3635a04acb0097eaf54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3b559c970ada3c123ae24f21e45892734e7d494",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3b559c970ada3c123ae24f21e45892734e7d494",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3b559c970ada3c123ae24f21e45892734e7d494",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3b559c970ada3c123ae24f21e45892734e7d494/comments",
    "author": {
      "login": "Shubhankar-Gambhir",
      "id": 58947326,
      "node_id": "MDQ6VXNlcjU4OTQ3MzI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/58947326?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shubhankar-Gambhir",
      "html_url": "https://github.com/Shubhankar-Gambhir",
      "followers_url": "https://api.github.com/users/Shubhankar-Gambhir/followers",
      "following_url": "https://api.github.com/users/Shubhankar-Gambhir/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shubhankar-Gambhir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shubhankar-Gambhir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shubhankar-Gambhir/subscriptions",
      "organizations_url": "https://api.github.com/users/Shubhankar-Gambhir/orgs",
      "repos_url": "https://api.github.com/users/Shubhankar-Gambhir/repos",
      "events_url": "https://api.github.com/users/Shubhankar-Gambhir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shubhankar-Gambhir/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Shubhankar-Gambhir",
      "id": 58947326,
      "node_id": "MDQ6VXNlcjU4OTQ3MzI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/58947326?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shubhankar-Gambhir",
      "html_url": "https://github.com/Shubhankar-Gambhir",
      "followers_url": "https://api.github.com/users/Shubhankar-Gambhir/followers",
      "following_url": "https://api.github.com/users/Shubhankar-Gambhir/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shubhankar-Gambhir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shubhankar-Gambhir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shubhankar-Gambhir/subscriptions",
      "organizations_url": "https://api.github.com/users/Shubhankar-Gambhir/orgs",
      "repos_url": "https://api.github.com/users/Shubhankar-Gambhir/repos",
      "events_url": "https://api.github.com/users/Shubhankar-Gambhir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shubhankar-Gambhir/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9948f114f8e6fa7c998c4ede84719f5d1699e5e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9948f114f8e6fa7c998c4ede84719f5d1699e5e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9948f114f8e6fa7c998c4ede84719f5d1699e5e7"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 52,
      "deletions": 23
    },
    "files": [
      {
        "sha": "95beba87301ca1ffc504e5644b113107fc8a6afb",
        "filename": "test/functional/rpc_signmessagewithprivkey.py",
        "status": "renamed",
        "additions": 5,
        "deletions": 22,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3b559c970ada3c123ae24f21e45892734e7d494/test/functional/rpc_signmessagewithprivkey.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3b559c970ada3c123ae24f21e45892734e7d494/test/functional/rpc_signmessagewithprivkey.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signmessagewithprivkey.py?ref=a3b559c970ada3c123ae24f21e45892734e7d494",
        "patch": "@@ -2,22 +2,18 @@\n # Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test RPC commands for signing and verifying messages.\"\"\"\n+\"\"\"Test RPC commands for signing messages with private key.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n )\n \n-class SignMessagesTest(BitcoinTestFramework):\n+class SignMessagesWithPrivTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\"-addresstype=legacy\"]]\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n \n     def run_test(self):\n         message = 'This is just a test message'\n@@ -30,33 +26,20 @@ def run_test(self):\n         assert_equal(expected_signature, signature)\n         assert self.nodes[0].verifymessage(address, signature, message)\n \n-        self.log.info('test signing with an address with wallet')\n-        address = self.nodes[0].getnewaddress()\n-        signature = self.nodes[0].signmessage(address, message)\n-        assert self.nodes[0].verifymessage(address, signature, message)\n-\n-        self.log.info('test verifying with another address should not work')\n-        other_address = self.nodes[0].getnewaddress()\n-        other_signature = self.nodes[0].signmessage(other_address, message)\n-        assert not self.nodes[0].verifymessage(other_address, signature, message)\n-        assert not self.nodes[0].verifymessage(address, other_signature, message)\n-\n         self.log.info('test parameter validity and error codes')\n-        # signmessage(withprivkey) have two required parameters\n+        # signmessagewithprivkey has two required parameters\n         for num_params in [0, 1, 3, 4, 5]:\n             param_list = [\"dummy\"]*num_params\n             assert_raises_rpc_error(-1, \"signmessagewithprivkey\", self.nodes[0].signmessagewithprivkey, *param_list)\n-            assert_raises_rpc_error(-1, \"signmessage\", self.nodes[0].signmessage, *param_list)\n         # verifymessage has three required parameters\n         for num_params in [0, 1, 2, 4, 5]:\n             param_list = [\"dummy\"]*num_params\n             assert_raises_rpc_error(-1, \"verifymessage\", self.nodes[0].verifymessage, *param_list)\n         # invalid key or address provided\n         assert_raises_rpc_error(-5, \"Invalid private key\", self.nodes[0].signmessagewithprivkey, \"invalid_key\", message)\n-        assert_raises_rpc_error(-5, \"Invalid address\", self.nodes[0].signmessage, \"invalid_addr\", message)\n         assert_raises_rpc_error(-5, \"Invalid address\", self.nodes[0].verifymessage, \"invalid_addr\", signature, message)\n         # malformed signature provided\n-        assert_raises_rpc_error(-3, \"Malformed base64 encoding\", self.nodes[0].verifymessage, self.nodes[0].getnewaddress(), \"invalid_sig\", message)\n+        assert_raises_rpc_error(-3, \"Malformed base64 encoding\", self.nodes[0].verifymessage, 'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB', \"invalid_sig\", message)\n \n if __name__ == '__main__':\n-    SignMessagesTest().main()\n+    SignMessagesWithPrivTest().main()",
        "previous_filename": "test/functional/rpc_signmessage.py"
      },
      {
        "sha": "d6d676da1f3c5011ae8bda0d60454644298bb604",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3b559c970ada3c123ae24f21e45892734e7d494/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3b559c970ada3c123ae24f21e45892734e7d494/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=a3b559c970ada3c123ae24f21e45892734e7d494",
        "patch": "@@ -225,7 +225,8 @@\n     'wallet_importprunedfunds.py --descriptors',\n     'p2p_leak_tx.py',\n     'p2p_eviction.py',\n-    'rpc_signmessage.py',\n+    'wallet_signmessagewithaddress.py',\n+    'rpc_signmessagewithprivkey.py',\n     'rpc_generateblock.py',\n     'rpc_generate.py',\n     'wallet_balance.py --legacy-wallet',"
      },
      {
        "sha": "bf6f95e3f1f50aa7a805138f9ed684d08d1e33a5",
        "filename": "test/functional/wallet_signmessagewithaddress.py",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3b559c970ada3c123ae24f21e45892734e7d494/test/functional/wallet_signmessagewithaddress.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3b559c970ada3c123ae24f21e45892734e7d494/test/functional/wallet_signmessagewithaddress.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signmessagewithaddress.py?ref=a3b559c970ada3c123ae24f21e45892734e7d494",
        "patch": "@@ -0,0 +1,45 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Wallet commands for signing and verifying messages.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+)\n+\n+class SignMessagesWithAddressTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-addresstype=legacy\"]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        message = 'This is just a test message'\n+\n+        self.log.info('test signing with an address with wallet')\n+        address = self.nodes[0].getnewaddress()\n+        signature = self.nodes[0].signmessage(address, message)\n+        assert self.nodes[0].verifymessage(address, signature, message)\n+\n+        self.log.info('test verifying with another address should not work')\n+        other_address = self.nodes[0].getnewaddress()\n+        other_signature = self.nodes[0].signmessage(other_address, message)\n+        assert not self.nodes[0].verifymessage(other_address, signature, message)\n+        assert not self.nodes[0].verifymessage(address, other_signature, message)\n+\n+        self.log.info('test parameter validity and error codes')\n+        # signmessage has two required parameters\n+        for num_params in [0, 1, 3, 4, 5]:\n+            param_list = [\"dummy\"]*num_params\n+            assert_raises_rpc_error(-1, \"signmessage\", self.nodes[0].signmessage, *param_list)\n+        # invalid key or address provided\n+        assert_raises_rpc_error(-5, \"Invalid address\", self.nodes[0].signmessage, \"invalid_addr\", message)\n+\n+\n+if __name__ == '__main__':\n+    SignMessagesWithAddressTest().main()"
      }
    ]
  }
]