[
  {
    "sha": "aff6584e09938768838a768b67722db553cf8ef4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmY2NTg0ZTA5OTM4NzY4ODM4YTc2OGI2NzcyMmRiNTUzY2Y4ZWY0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-10-31T21:06:15Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-10-31T21:17:18Z"
      },
      "message": "net: constify a few CNode vars to indicate that they're threadsafe",
      "tree": {
        "sha": "3d4053d1eb40ab7452a5fe6603d5805f196e8941",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d4053d1eb40ab7452a5fe6603d5805f196e8941"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aff6584e09938768838a768b67722db553cf8ef4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aff6584e09938768838a768b67722db553cf8ef4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aff6584e09938768838a768b67722db553cf8ef4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aff6584e09938768838a768b67722db553cf8ef4/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d69ecb4edeb80003a1a41442e320898a30dbd9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d69ecb4edeb80003a1a41442e320898a30dbd9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d69ecb4edeb80003a1a41442e320898a30dbd9c"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "f27516aae64776958fa6cecc5501851bff1f9b8c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aff6584e09938768838a768b67722db553cf8ef4/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aff6584e09938768838a768b67722db553cf8ef4/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=aff6584e09938768838a768b67722db553cf8ef4",
        "patch": "@@ -2512,9 +2512,13 @@ unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }\n CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n     addr(addrIn),\n+    fInbound(fInboundIn),\n+    id(idIn),\n     nKeyedNetGroup(nKeyedNetGroupIn),\n     addrKnown(5000, 0.001),\n-    filterInventoryKnown(50000, 0.000001)\n+    filterInventoryKnown(50000, 0.000001),\n+    nLocalServices(nLocalServicesIn),\n+    nMyStartingHeight(nMyStartingHeightIn)\n {\n     nServices = NODE_NONE;\n     nServicesExpected = NODE_NONE;\n@@ -2533,7 +2537,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     fOneShot = false;\n     fClient = false; // set by version message\n     fFeeler = false;\n-    fInbound = fInboundIn;\n     fNetworkNode = false;\n     fSuccessfullyConnected = false;\n     fDisconnect = false;\n@@ -2562,12 +2565,8 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     minFeeFilter = 0;\n     lastSentFeeFilter = 0;\n     nextSendTimeFeeFilter = 0;\n-    id = idIn;\n     nOptimisticBytesWritten = 0;\n-    nLocalServices = nLocalServicesIn;\n-\n     GetRandBytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n-    nMyStartingHeight = nMyStartingHeightIn;\n \n     BOOST_FOREACH(const std::string &msg, getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;"
      },
      {
        "sha": "a065a990b9e37948c9b57b969c95becd94989809",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aff6584e09938768838a768b67722db553cf8ef4/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aff6584e09938768838a768b67722db553cf8ef4/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=aff6584e09938768838a768b67722db553cf8ef4",
        "patch": "@@ -589,7 +589,7 @@ class CNode\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;\n     bool fClient;\n-    bool fInbound;\n+    const bool fInbound;\n     bool fNetworkNode;\n     bool fSuccessfullyConnected;\n     bool fDisconnect;\n@@ -603,7 +603,7 @@ class CNode\n     CCriticalSection cs_filter;\n     CBloomFilter* pfilter;\n     int nRefCount;\n-    NodeId id;\n+    const NodeId id;\n \n     const uint64_t nKeyedNetGroup;\n protected:\n@@ -679,8 +679,8 @@ class CNode\n \n     uint64_t nLocalHostNonce;\n     // Services offered to this peer\n-    ServiceFlags nLocalServices;\n-    int nMyStartingHeight;\n+    const ServiceFlags nLocalServices;\n+    const int nMyStartingHeight;\n public:\n \n     NodeId GetId() const {"
      }
    ]
  },
  {
    "sha": "59ac5c5b72fef6a70fe621537faf27df1076b524",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWFjNWM1YjcyZmVmNmE3MGZlNjIxNTM3ZmFmMjdkZjEwNzZiNTI0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-10-26T19:10:15Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-10-31T21:17:18Z"
      },
      "message": "net: Use deterministic randomness for CNode's nonce, and make it const",
      "tree": {
        "sha": "daac8b731be3882fd8805779a3d97ecbcef55028",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/daac8b731be3882fd8805779a3d97ecbcef55028"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59ac5c5b72fef6a70fe621537faf27df1076b524",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59ac5c5b72fef6a70fe621537faf27df1076b524",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59ac5c5b72fef6a70fe621537faf27df1076b524",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59ac5c5b72fef6a70fe621537faf27df1076b524/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aff6584e09938768838a768b67722db553cf8ef4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aff6584e09938768838a768b67722db553cf8ef4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aff6584e09938768838a768b67722db553cf8ef4"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 24,
      "deletions": 13
    },
    "files": [
      {
        "sha": "18d25cbcd1128bb12aacf85f647c4849c90e1c64",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59ac5c5b72fef6a70fe621537faf27df1076b524/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59ac5c5b72fef6a70fe621537faf27df1076b524/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=59ac5c5b72fef6a70fe621537faf27df1076b524",
        "patch": "@@ -64,6 +64,7 @@\n const static std::string NET_MESSAGE_COMMAND_OTHER = \"*other*\";\n \n static const uint64_t RANDOMIZER_ID_NETGROUP = 0x6c0edd8036ef4036ULL; // SHA256(\"netgroup\")[0:8]\n+static const uint64_t RANDOMIZER_ID_LOCALHOSTNONCE = 0xd93e69e2bbfa5735ULL; // SHA256(\"localhostnonce\")[0:8]\n //\n // Global state variables\n //\n@@ -389,7 +390,10 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         addrman.Attempt(addrConnect, fCountFailure);\n \n         // Add node\n-        CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), pszDest ? pszDest : \"\", false);\n+        NodeId id = GetNewNodeId();\n+        uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n+        CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, pszDest ? pszDest : \"\", false);\n+\n         GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n         pnode->AddRef();\n \n@@ -1024,7 +1028,10 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         }\n     }\n \n-    CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), \"\", true);\n+    NodeId id = GetNewNodeId();\n+    uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n+\n+    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, \"\", true);\n     GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n@@ -2118,7 +2125,11 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, st\n     if (pnodeLocalHost == NULL) {\n         CNetAddr local;\n         LookupHost(\"127.0.0.1\", local, false);\n-        pnodeLocalHost = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices), 0);\n+\n+        NodeId id = GetNewNodeId();\n+        uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n+\n+        pnodeLocalHost = new CNode(id, nLocalServices, GetBestHeight(), INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices), 0, nonce);\n         GetNodeSignals().InitializeNode(pnodeLocalHost->GetId(), pnodeLocalHost);\n     }\n \n@@ -2509,14 +2520,15 @@ void CNode::Fuzz(int nChance)\n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }\n \n-CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, const std::string& addrNameIn, bool fInboundIn) :\n+CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n     addr(addrIn),\n     fInbound(fInboundIn),\n     id(idIn),\n     nKeyedNetGroup(nKeyedNetGroupIn),\n     addrKnown(5000, 0.001),\n     filterInventoryKnown(50000, 0.000001),\n+    nLocalHostNonce(nLocalHostNonceIn),\n     nLocalServices(nLocalServicesIn),\n     nMyStartingHeight(nMyStartingHeightIn)\n {\n@@ -2566,7 +2578,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     lastSentFeeFilter = 0;\n     nextSendTimeFeeFilter = 0;\n     nOptimisticBytesWritten = 0;\n-    GetRandBytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n \n     BOOST_FOREACH(const std::string &msg, getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;"
      },
      {
        "sha": "bfce516237df86bb12ecc02b37d7afc2a101932f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59ac5c5b72fef6a70fe621537faf27df1076b524/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59ac5c5b72fef6a70fe621537faf27df1076b524/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=59ac5c5b72fef6a70fe621537faf27df1076b524",
        "patch": "@@ -669,15 +669,15 @@ class CNode\n     CAmount lastSentFeeFilter;\n     int64_t nextSendTimeFeeFilter;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n \n private:\n     CNode(const CNode&);\n     void operator=(const CNode&);\n \n \n-    uint64_t nLocalHostNonce;\n+    const uint64_t nLocalHostNonce;\n     // Services offered to this peer\n     const ServiceFlags nLocalServices;\n     const int nMyStartingHeight;"
      },
      {
        "sha": "4aa716681579018e66c3a01e3f2e636082bec690",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59ac5c5b72fef6a70fe621537faf27df1076b524/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59ac5c5b72fef6a70fe621537faf27df1076b524/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=59ac5c5b72fef6a70fe621537faf27df1076b524",
        "patch": "@@ -48,7 +48,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     connman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, \"\", true);\n+    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n@@ -57,7 +57,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, \"\", true);\n+    CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode2.GetId(), &dummyNode2);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n@@ -74,7 +74,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     connman->ClearBanned();\n     mapArgs[\"-banscore\"] = \"111\"; // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, \"\", true);\n+    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, 1, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n@@ -96,7 +96,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, \"\", true);\n+    CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, 4, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode.GetId(), &dummyNode);\n     dummyNode.nVersion = 1;\n "
      },
      {
        "sha": "e0460109d5c23d6059358bc3b36f79362e9c3307",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59ac5c5b72fef6a70fe621537faf27df1076b524/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59ac5c5b72fef6a70fe621537faf27df1076b524/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=59ac5c5b72fef6a70fe621537faf27df1076b524",
        "patch": "@@ -164,12 +164,12 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     bool fInboundIn = false;\n \n     // Test that fFeeler is false by default.\n-    CNode* pnode1 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 0, pszDest, fInboundIn);\n+    CNode* pnode1 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, pszDest, fInboundIn);\n     BOOST_CHECK(pnode1->fInbound == false);\n     BOOST_CHECK(pnode1->fFeeler == false);\n \n     fInboundIn = true;\n-    CNode* pnode2 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 1, pszDest, fInboundIn);\n+    CNode* pnode2 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, pszDest, fInboundIn);\n     BOOST_CHECK(pnode2->fInbound == true);\n     BOOST_CHECK(pnode2->fFeeler == false);\n }"
      }
    ]
  }
]