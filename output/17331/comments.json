[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548530629",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-548530629",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 548530629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODUzMDYyOQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-31T19:22:26Z",
    "updated_at": "2021-05-25T03:50:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22042 (Replace size/weight estimate tuple with struct for named fields by instagibbs)\n* #21207 (MOVEONLY: CWallet transaction code out of wallet.cpp/.h by ryanofsky)\n* #21206 (refactor: Make CWalletTx sync state type-safe by ryanofsky)\n* #20640 (wallet, refactor: return out-params of CreateTransaction() as optional struct by theStack)\n* #17355 (gui: grey out used address in address book by za-kk)\n* #17211 (Allow fundrawtransaction and walletcreatefundedpsbt to take external inputs by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548530629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548849424",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-548849424",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 548849424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODg0OTQyNA==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-01T16:17:24Z",
    "updated_at": "2019-11-01T16:17:44Z",
    "author_association": "MEMBER",
    "body": "concept ACK, unifying to effective value should make 95% of my consternation with Core coin selection go away by making further improvements easier.\r\n\r\nSo with this change another idea is to have an opt-in Single Random Draw(SRD) which should be pretty drop-in after this which would allow more experimentation with less systemic risk.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548849424/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549030800",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-549030800",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 549030800,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTAzMDgwMA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-02T10:27:57Z",
    "updated_at": "2019-11-02T10:27:57Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, thanks for making this code more understandable.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549030800/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553176319",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-553176319",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 553176319,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MzE3NjMxOQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-13T00:10:01Z",
    "updated_at": "2019-11-13T23:57:08Z",
    "author_association": "MEMBER",
    "body": "I think there's a bug in here somewhere. I ran some [simulations](https://gist.github.com/achow101/edf6b5e308035a489fbb1f28d12e2109) and it looks like there is a significant difference in some things (e.g. minimum change value) but it should be the same as master. I'm investigating that.\r\n\r\nEdit: I think I fixed it. Requires #17458 now.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553176319/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667607706",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-667607706",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 667607706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzYwNzcwNg==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-02T01:01:10Z",
    "updated_at": "2020-08-02T01:01:48Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. This looks okay to me so far with some review, but I am still getting my head around coin selection, so I want to review this a bit more before giving a review ack.\r\n\r\nAlso 0f8955ff1b2e99a4b56a3dad465833ec86ec05fd seems should just be squashed.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667607706/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/672166872",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-672166872",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 672166872,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjE2Njg3Mg==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-11T18:27:11Z",
    "updated_at": "2020-08-11T18:27:11Z",
    "author_association": "MEMBER",
    "body": "> Also 0f8955f seems should just be squashed.\r\n\r\nSquashed. That commit is part of #17458, so comments about it should be left there.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/672166872/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/700239780",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-700239780",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 700239780,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMDIzOTc4MA==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-28T19:37:56Z",
    "updated_at": "2020-09-28T19:37:56Z",
    "author_association": "MEMBER",
    "body": "https://travis-ci.org/github/bitcoin/bitcoin/jobs/718692541#L3326\r\n\r\nError, wallet loading race? \r\n\r\nWill review again.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/700239780/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/701004628",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-701004628",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 701004628,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTAwNDYyOA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-29T21:37:12Z",
    "updated_at": "2020-09-29T21:37:12Z",
    "author_association": "MEMBER",
    "body": "Rebased this onto #20040 as I think the refactor there makes this easier to understand. Also, there was a silent merge conflict with master.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/701004628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/781990749",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-781990749",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 781990749,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTk5MDc0OQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-19T10:37:24Z",
    "updated_at": "2021-02-19T10:37:24Z",
    "author_association": "MEMBER",
    "body": "Even though this is in high-prio, reviewers might want to review #21083 first.\r\n\r\n\r\n> Only #21083 should be backported, and it should be merged first for the backport to go smoothly.\r\n> https://github.com/bitcoin/bitcoin/issues/19229#issuecomment-781583859",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/781990749/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/831664877",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-831664877",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 831664877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMTY2NDg3Nw==",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?u=d924616c3b45bdda9c3b78d1697f1fe6a92b49c5&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-04T03:40:24Z",
    "updated_at": "2021-05-04T03:40:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I keep making the same mistake of reviewing this commit by commit, when half the code that gets changed around actually disappears midway through the PR. Feel free to ignore these irrelevant bits. :sweat:\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/831664877/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833826003",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-833826003",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 833826003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzgyNjAwMw==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-06T20:08:05Z",
    "updated_at": "2021-05-06T20:09:55Z",
    "author_association": "MEMBER",
    "body": "I've done a bit of commit reorganization but the final diff should not be very different.\r\n\r\nAlso, it seems that \"Have KnapsackSolver actually use effective values\" breaks `wallet_bumpfee.py`, but \"Remove CreateTransaction while loop and some related variables\" fixes it. I'm not sure if it is necessary to investigate the failure so that the test passes throughout.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833826003/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/834809491",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-834809491",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 834809491,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNDgwOTQ5MQ==",
    "user": {
      "login": "SomethingUseful",
      "id": 66703103,
      "node_id": "MDQ6VXNlcjY2NzAzMTAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/66703103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SomethingUseful",
      "html_url": "https://github.com/SomethingUseful",
      "followers_url": "https://api.github.com/users/SomethingUseful/followers",
      "following_url": "https://api.github.com/users/SomethingUseful/following{/other_user}",
      "gists_url": "https://api.github.com/users/SomethingUseful/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SomethingUseful/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SomethingUseful/subscriptions",
      "organizations_url": "https://api.github.com/users/SomethingUseful/orgs",
      "repos_url": "https://api.github.com/users/SomethingUseful/repos",
      "events_url": "https://api.github.com/users/SomethingUseful/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SomethingUseful/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-07T21:59:51Z",
    "updated_at": "2021-05-07T21:59:51Z",
    "author_association": "NONE",
    "body": "we were running this PR as bitcoin-0.21.0-patch. We upgraded to 0.21.1 and after few days were having failed transactions again so we had to roll back to this patch version again.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/834809491/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/835158967",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-835158967",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 835158967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNTE1ODk2Nw==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-08T07:04:09Z",
    "updated_at": "2021-05-08T07:15:20Z",
    "author_association": "MEMBER",
    "body": "> But the main thing I am not conceptually understanding about the new code is how it now is possible to decide whether or not to drop the change output /before/ handing fSubtractFeeFromAmount. How could you know whether dropping the output is economical before knowing how big the output will be? Anyway, I assume I'm just missing things and will try again.\r\n\r\nThat is indeed an issue. I've reworked this behavior. Now we will always try to make a change output, and then reduce it's value to deal with the transaction fees. This should be easier to understand as all of fee setting is consolidated in a single chunk of code.\r\n\r\nI've also done another bit of commit reorganization to try to reduce the number of commits that fail tests.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/835158967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/840825909",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-840825909",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 840825909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MDgyNTkwOQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-13T20:50:02Z",
    "updated_at": "2021-05-13T20:50:02Z",
    "author_association": "MEMBER",
    "body": "Rebased for a silent merge conflict.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/840825909/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/841429503",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-841429503",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 841429503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTQyOTUwMw==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-14T18:38:30Z",
    "updated_at": "2021-05-14T18:38:30Z",
    "author_association": "MEMBER",
    "body": "Since the fee deduction logic was still a bit confusing, I've slightly reworked it again. The latest change should be much easier to comprehend. There was a minor commit reordering too which allows all of the commits to pass the tests too. This should be the final major revision to this PR.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/841429503/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/844109424",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-844109424",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 844109424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NDEwOTQyNA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-19T13:31:34Z",
    "updated_at": "2021-05-19T13:31:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "In commit \"Move output reductions for fee to after coin selection\" (2b445b7c1336506d43874a7ee31f85f511cd3114)\r\n\r\nI was experimenting with some of the simplifications I suggested earlier and make the following changes on top of 2b445b7c1336506d43874a7ee31f85f511cd3114 to remove duplicate logic and make the code shorter. I think it's more readable, but obviously that's subjective.\r\n\r\n```diff\r\ndiff --git a/src/wallet/wallet.cpp b/src/wallet/wallet.cpp\r\nindex fcf6fd00d7c..33c866d1186 100644\r\n--- a/src/wallet/wallet.cpp\r\n+++ b/src/wallet/wallet.cpp\r\n@@ -3007,71 +3007,42 @@ bool CWallet::CreateTransactionInternal(\r\n \r\n                 nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\r\n                 // Try to reduce change to include necessary fee\r\n+\r\n+                assert(nChangePosInOut != -1);\r\n+                std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\r\n+\r\n+                // Subtract fee from the change output if not subtracting it from recipient outputs\r\n+                CAmount fee_needed = nFeeRet;\r\n                 if (nSubtractFeeFromAmount == 0) {\r\n-                    assert(nChangePosInOut != -1);\r\n-                    std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\r\n-                    change_position->nValue -= nFeeRet;\r\n-\r\n-                    if (change_position->nValue < 0) {\r\n-                        CAmount orig_fee = nFeeRet;\r\n-                        // Maybe the change value was just enough to cover the fee if we did not have change in this transaction\r\n-                        // Let's try dropping the change, recalculating the fee, and comparing the new fee to change_and_Fee\r\n-                        nChangePosInOut = -1;\r\n-                        txNew.vout.erase(change_position);\r\n-\r\n-                        tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\r\n-                        nBytes = tx_sizes.first;\r\n-                        nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\r\n-                        if (nFeeRet <= change_and_fee) {\r\n-                            // Dropping the change value puts us exactly at the value, so we can exit now\r\n-                            break;\r\n-                        }\r\n-\r\n-                        // The change value was not enough to cover the fees, even after dropping the change\r\n-                        // We set nFeeRet back to its original value (the one that includes the change output) and try selecting again\r\n-                        assert(change_and_fee < nFeeRet);\r\n-                        nFeeRet = orig_fee;\r\n-                        continue;\r\n-                    }\r\n-\r\n-                    // The change value was enough to cover the fees. We may want to drop it to fees if it is too small,\r\n-                    // or try selecting again if we don't meet the minimum change requirement\r\n-\r\n-                    // We want to drop the change to fees if:\r\n-                    // 1. The change output would be dust\r\n-                    // 2. The change is within the (almost) exact match window, i.e. it is less than or equal to the cost of the change output (cost_of_change)\r\n-                    if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_position->nValue <= coin_selection_params.m_cost_of_change)\r\n-                    {\r\n-                        nFeeRet += change_position->nValue;\r\n-                        nChangePosInOut = -1;\r\n-                        txNew.vout.erase(change_position);\r\n-                    }\r\n-                    break; // Fee requirements were met\r\n+                    change_position->nValue -= fee_needed;\r\n                 }\r\n+\r\n+                // We want to drop the change output if:\r\n+                // 1. The change output would be dust\r\n+                // 2. The change is within the (almost) exact match window, i.e. it is less than or equal to the cost of the change output (cost_of_change)\r\n+                CAmount change_amount = change_position->nValue;\r\n+                if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_amount <= coin_selection_params.m_cost_of_change) {\r\n+                    nChangePosInOut = -1;\r\n+                    txNew.vout.erase(change_position);\r\n+                    change_amount = 0;\r\n+\r\n+                    // Because we have dropped this change, our tx size and required fee will be different. So let's recalculate those.\r\n+                    tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\r\n+                    nBytes = tx_sizes.first;\r\n+                    fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\r\n+                }\r\n+\r\n+                // Break if fee is covered and no need to loop or subtract from recipients.\r\n+                if (fee_needed <= change_and_fee - change_amount) {\r\n+                    nFeeRet = change_and_fee - change_amount;\r\n+                    break;\r\n+                }\r\n+\r\n                 // Reduce output values for subtractFeeFromAmount\r\n-                else if (nSubtractFeeFromAmount != 0) {\r\n+                if (nSubtractFeeFromAmount != 0) {\r\n+                    CAmount to_reduce = fee_needed + change_amount - change_and_fee;\r\n                     int i = 0;\r\n                     bool fFirst = true;\r\n-                    CAmount to_reduce = nFeeRet;\r\n-                    if (nChangePosInOut != -1) {\r\n-                        // Although we aren't going to reduce this change output to handle the transaction fees,\r\n-                        // we still want to check if we would drop it to fees\r\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\r\n-                        if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_position->nValue <= coin_selection_params.m_cost_of_change)\r\n-                        {\r\n-                            nChangePosInOut = -1;\r\n-                            txNew.vout.erase(change_position);\r\n-\r\n-                            // Because we have dropped this change, our tx size and required fee will be different. So let's recalculate those.\r\n-                            tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\r\n-                            nBytes = tx_sizes.first;\r\n-                            to_reduce = nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\r\n-\r\n-                            // Furthermore, because we have dropped the change value, that will be part of the fee.\r\n-                            // We give this back to the recipients as a discount to the amount that is being reduced from them.\r\n-                            to_reduce -= change_and_fee;\r\n-                        }\r\n-                    }\r\n                     for (const auto& recipient : vecSend)\r\n                     {\r\n                         if (i == nChangePosInOut) {\r\n@@ -3101,9 +3072,9 @@ bool CWallet::CreateTransactionInternal(\r\n                         }\r\n                         ++i;\r\n                     }\r\n+                    nFeeRet = fee_needed;\r\n                     break; // The fee has been deducted from the recipients, nothing left to do here\r\n                 }\r\n-                assert(false); // It shouldn't be possible to reach this\r\n             }\r\n \r\n             // Give up if change keypool ran out and change is required\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/844109424/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/844415446",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-844415446",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 844415446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NDQxNTQ0Ng==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-19T19:44:25Z",
    "updated_at": "2021-05-19T19:44:25Z",
    "author_association": "MEMBER",
    "body": "I've updated this to include @ryanofsky's suggested changes.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/844415446/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/844427903",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-844427903",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
    "id": 844427903,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NDQyNzkwMw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-19T20:01:39Z",
    "updated_at": "2021-05-19T20:01:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for following up, and I'll take a look at the updates. I still don't get `c += std::max(0, a-b);` instead of `c += a; c =- b;`, but I can see basically the new things I've been confused by are temporary and removed later commits so not worth perfecting or putting too much effort into.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/844427903/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392244023",
    "pull_request_review_id": 374320627,
    "id": 392244023,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0NDAyMw==",
    "diff_hunk": "@@ -99,7 +99,7 @@ struct OutputGroup\n     OutputGroup GetPositiveOnlyGroup();\n };\n \n-bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees);\n+bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret);",
    "path": "src/wallet/coinselection.h",
    "position": null,
    "original_position": 5,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "e8a280b98de4d306f2a98caf59f558472108ebd6",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "rename `target_value` to `actual_target` here as well?",
    "created_at": "2020-03-13T13:58:50Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392244023",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392244023"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392244023"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392244023/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 102,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392248385",
    "pull_request_review_id": 374320627,
    "id": 392248385,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0ODM4NQ==",
    "diff_hunk": "@@ -2653,9 +2658,10 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n                 // Never create dust outputs; if we would, just\n                 // add the dust to the fee.\n-                // When nChange is less than the cost of the change output,\n-                // send it to fees (this means BnB was used)\n-                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // When the selected_value is within the exact match range\n+                // (nValue + not_input_fees + cost_of_change), don't make change.\n+                WalletLogPrintf(\"%d %d %d %d %d\\n\", selected_eff, nValue, not_input_fees, cost_of_change, selected_value);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 21,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "aee449e028cfbde13ebfc10d34ea2a903c4dd9ba",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This looks like a debug print?",
    "created_at": "2020-03-13T14:06:02Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392248385",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392248385"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392248385"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392248385/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2663,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392258026",
    "pull_request_review_id": 374320627,
    "id": 392258026,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI1ODAyNg==",
    "diff_hunk": "@@ -2586,209 +2584,159 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n-\n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                strFailReason = _(\"The transaction amount is too small to pay the fee\").translated;\n-                            else\n-                                strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\").translated;\n-                        }\n+                        if (txout.nValue < 0)\n+                            strFailReason = _(\"The transaction amount is too small to pay the fee\").translated;\n                         else\n-                            strFailReason = _(\"Transaction amount too small\").translated;\n-                        return false;\n+                            strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\").translated;\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else\n+                        strFailReason = _(\"Transaction amount too small\").translated;\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n+            // Choose coins to use\n+            CAmount selected_value = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        strFailReason = _(\"Insufficient funds\").translated;\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, selected_value, coin_control, coin_selection_params))\n+            {\n+                strFailReason = _(\"Insufficient funds\").translated;\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n+            const CAmount nChange = selected_value - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n \n-                    CAmount cost_of_change = 0;\n-                    if (pick_new_inputs) {\n-                        cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n-                    }\n+                CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // When nChange is less than the cost of the change output,\n-                    // send it to fees (this means BnB was used)\n-                    if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When nChange is less than the cost of the change output,\n+                // send it to fees (this means BnB was used)\n+                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                {\n+                    nChangePosInOut = -1;\n+                    nFeeRet = nChange;\n+                }\n+                else\n+                {\n+                    if (nChangePosInOut == -1)\n                     {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        // Insert change txn at random position:\n+                        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                     }\n-                    else\n+                    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                     {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            strFailReason = _(\"Change index out of range\").translated;\n-                            return false;\n-                        }\n-\n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        strFailReason = _(\"Change index out of range\").translated;\n+                        return false;\n                     }\n-                } else {\n-                    nChangePosInOut = -1;\n-                }\n \n-                // Dummy fill vin for maximum size estimation\n-                //\n-                for (const auto& coin : setCoins) {\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-                }\n-\n-                nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                if (nBytes < 0) {\n-                    strFailReason = _(\"Signing transaction failed\").translated;\n-                    return false;\n-                }\n-\n-                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n-                if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                    // eventually allow a fallback fee\n-                    strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\").translated;\n-                    return false;\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, newTxOut);\n                 }\n+            } else {\n+                nChangePosInOut = -1;\n+            }\n \n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, nullptr);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    strFailReason = _(\"Transaction fee and change calculation failed\").translated;\n-                    return false;\n-                }\n+            nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            if (nBytes < 0) {\n+                strFailReason = _(\"Signing transaction failed\").translated;\n+                return false;\n+            }\n \n+            CAmount fee_needed = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n+            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\").translated;\n+                return false;\n+            }\n+            if (nFeeRet < fee_needed) {\n+                nFeeRet = fee_needed;\n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n                     std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n+                    change_position->nValue -= nFeeRet;\n+                    // If the change is now dust, get rid of it\n+                    if (IsDust(*change_position, discard_rate))\n+                    {\n+                        nChangePosInOut = -1;\n+                        nFeeRet += change_position->nValue;\n+                        txNew.vout.erase(change_position);\n                     }\n                 }\n+                // Reduce output values for subtractFeeFromAmount\n+                if (nSubtractFeeFromAmount != 0) {\n+                    int i = 0;\n+                    bool fFirst = true;\n+                    for (const auto& recipient : vecSend)\n+                    {\n+                        if (i == nChangePosInOut) {\n+                            ++i;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 315,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "cd2f48cd73e2adfc9f3cf086e9a47d65ecb03c07",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is this missing a `continue` here?",
    "created_at": "2020-03-13T14:22:13Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392258026",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392258026"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392258026"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392258026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3018,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392302913",
    "pull_request_review_id": 374398963,
    "id": 392302913,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMjkxMw==",
    "diff_hunk": "@@ -2586,209 +2584,159 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n-\n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                strFailReason = _(\"The transaction amount is too small to pay the fee\").translated;\n-                            else\n-                                strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\").translated;\n-                        }\n+                        if (txout.nValue < 0)\n+                            strFailReason = _(\"The transaction amount is too small to pay the fee\").translated;\n                         else\n-                            strFailReason = _(\"Transaction amount too small\").translated;\n-                        return false;\n+                            strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\").translated;\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else\n+                        strFailReason = _(\"Transaction amount too small\").translated;\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n+            // Choose coins to use\n+            CAmount selected_value = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        strFailReason = _(\"Insufficient funds\").translated;\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, selected_value, coin_control, coin_selection_params))\n+            {\n+                strFailReason = _(\"Insufficient funds\").translated;\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n+            const CAmount nChange = selected_value - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n \n-                    CAmount cost_of_change = 0;\n-                    if (pick_new_inputs) {\n-                        cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n-                    }\n+                CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // When nChange is less than the cost of the change output,\n-                    // send it to fees (this means BnB was used)\n-                    if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When nChange is less than the cost of the change output,\n+                // send it to fees (this means BnB was used)\n+                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                {\n+                    nChangePosInOut = -1;\n+                    nFeeRet = nChange;\n+                }\n+                else\n+                {\n+                    if (nChangePosInOut == -1)\n                     {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        // Insert change txn at random position:\n+                        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                     }\n-                    else\n+                    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                     {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            strFailReason = _(\"Change index out of range\").translated;\n-                            return false;\n-                        }\n-\n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        strFailReason = _(\"Change index out of range\").translated;\n+                        return false;\n                     }\n-                } else {\n-                    nChangePosInOut = -1;\n-                }\n \n-                // Dummy fill vin for maximum size estimation\n-                //\n-                for (const auto& coin : setCoins) {\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-                }\n-\n-                nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                if (nBytes < 0) {\n-                    strFailReason = _(\"Signing transaction failed\").translated;\n-                    return false;\n-                }\n-\n-                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n-                if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                    // eventually allow a fallback fee\n-                    strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\").translated;\n-                    return false;\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, newTxOut);\n                 }\n+            } else {\n+                nChangePosInOut = -1;\n+            }\n \n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, nullptr);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    strFailReason = _(\"Transaction fee and change calculation failed\").translated;\n-                    return false;\n-                }\n+            nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            if (nBytes < 0) {\n+                strFailReason = _(\"Signing transaction failed\").translated;\n+                return false;\n+            }\n \n+            CAmount fee_needed = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n+            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\").translated;\n+                return false;\n+            }\n+            if (nFeeRet < fee_needed) {\n+                nFeeRet = fee_needed;\n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n                     std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n+                    change_position->nValue -= nFeeRet;\n+                    // If the change is now dust, get rid of it\n+                    if (IsDust(*change_position, discard_rate))\n+                    {\n+                        nChangePosInOut = -1;\n+                        nFeeRet += change_position->nValue;\n+                        txNew.vout.erase(change_position);\n                     }\n                 }\n+                // Reduce output values for subtractFeeFromAmount\n+                if (nSubtractFeeFromAmount != 0) {\n+                    int i = 0;\n+                    bool fFirst = true;\n+                    for (const auto& recipient : vecSend)\n+                    {\n+                        if (i == nChangePosInOut) {\n+                            ++i;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 315,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "cd2f48cd73e2adfc9f3cf086e9a47d65ecb03c07",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No. What this is doing is that we are skipping the index that is reserved for the change output. Doing `continue` would skip the current recipient which we definitely don't want to do.",
    "created_at": "2020-03-13T15:34:27Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392302913",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392302913"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392302913"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392302913/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3018,
    "side": "RIGHT",
    "in_reply_to_id": 392258026
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392303022",
    "pull_request_review_id": 374399102,
    "id": 392303022,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMzAyMg==",
    "diff_hunk": "@@ -99,7 +99,7 @@ struct OutputGroup\n     OutputGroup GetPositiveOnlyGroup();\n };\n \n-bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees);\n+bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret);",
    "path": "src/wallet/coinselection.h",
    "position": null,
    "original_position": 5,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "e8a280b98de4d306f2a98caf59f558472108ebd6",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-03-13T15:34:38Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392303022",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392303022"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392303022"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392303022/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 102,
    "side": "RIGHT",
    "in_reply_to_id": 392244023
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392303083",
    "pull_request_review_id": 374399179,
    "id": 392303083,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMzA4Mw==",
    "diff_hunk": "@@ -2653,9 +2658,10 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n                 // Never create dust outputs; if we would, just\n                 // add the dust to the fee.\n-                // When nChange is less than the cost of the change output,\n-                // send it to fees (this means BnB was used)\n-                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // When the selected_value is within the exact match range\n+                // (nValue + not_input_fees + cost_of_change), don't make change.\n+                WalletLogPrintf(\"%d %d %d %d %d\\n\", selected_eff, nValue, not_input_fees, cost_of_change, selected_value);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 21,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "aee449e028cfbde13ebfc10d34ea2a903c4dd9ba",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Removed",
    "created_at": "2020-03-13T15:34:44Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392303083",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392303083"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392303083"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392303083/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2663,
    "side": "RIGHT",
    "in_reply_to_id": 392248385
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394047160",
    "pull_request_review_id": 376494298,
    "id": 394047160,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NzE2MA==",
    "diff_hunk": "@@ -2586,209 +2584,159 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n-\n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                strFailReason = _(\"The transaction amount is too small to pay the fee\").translated;\n-                            else\n-                                strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\").translated;\n-                        }\n+                        if (txout.nValue < 0)\n+                            strFailReason = _(\"The transaction amount is too small to pay the fee\").translated;\n                         else\n-                            strFailReason = _(\"Transaction amount too small\").translated;\n-                        return false;\n+                            strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\").translated;\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else\n+                        strFailReason = _(\"Transaction amount too small\").translated;\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n+            // Choose coins to use\n+            CAmount selected_value = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        strFailReason = _(\"Insufficient funds\").translated;\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, selected_value, coin_control, coin_selection_params))\n+            {\n+                strFailReason = _(\"Insufficient funds\").translated;\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n+            const CAmount nChange = selected_value - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n \n-                    CAmount cost_of_change = 0;\n-                    if (pick_new_inputs) {\n-                        cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n-                    }\n+                CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // When nChange is less than the cost of the change output,\n-                    // send it to fees (this means BnB was used)\n-                    if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When nChange is less than the cost of the change output,\n+                // send it to fees (this means BnB was used)\n+                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                {\n+                    nChangePosInOut = -1;\n+                    nFeeRet = nChange;\n+                }\n+                else\n+                {\n+                    if (nChangePosInOut == -1)\n                     {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        // Insert change txn at random position:\n+                        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                     }\n-                    else\n+                    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                     {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            strFailReason = _(\"Change index out of range\").translated;\n-                            return false;\n-                        }\n-\n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        strFailReason = _(\"Change index out of range\").translated;\n+                        return false;\n                     }\n-                } else {\n-                    nChangePosInOut = -1;\n-                }\n \n-                // Dummy fill vin for maximum size estimation\n-                //\n-                for (const auto& coin : setCoins) {\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-                }\n-\n-                nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                if (nBytes < 0) {\n-                    strFailReason = _(\"Signing transaction failed\").translated;\n-                    return false;\n-                }\n-\n-                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n-                if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                    // eventually allow a fallback fee\n-                    strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\").translated;\n-                    return false;\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, newTxOut);\n                 }\n+            } else {\n+                nChangePosInOut = -1;\n+            }\n \n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, nullptr);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    strFailReason = _(\"Transaction fee and change calculation failed\").translated;\n-                    return false;\n-                }\n+            nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            if (nBytes < 0) {\n+                strFailReason = _(\"Signing transaction failed\").translated;\n+                return false;\n+            }\n \n+            CAmount fee_needed = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n+            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\").translated;\n+                return false;\n+            }\n+            if (nFeeRet < fee_needed) {\n+                nFeeRet = fee_needed;\n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n                     std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n+                    change_position->nValue -= nFeeRet;\n+                    // If the change is now dust, get rid of it\n+                    if (IsDust(*change_position, discard_rate))\n+                    {\n+                        nChangePosInOut = -1;\n+                        nFeeRet += change_position->nValue;\n+                        txNew.vout.erase(change_position);\n                     }\n                 }\n+                // Reduce output values for subtractFeeFromAmount\n+                if (nSubtractFeeFromAmount != 0) {\n+                    int i = 0;\n+                    bool fFirst = true;\n+                    for (const auto& recipient : vecSend)\n+                    {\n+                        if (i == nChangePosInOut) {\n+                            ++i;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 315,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "cd2f48cd73e2adfc9f3cf086e9a47d65ecb03c07",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Got it. I was irritated because of seeing in this case `++i` was called twice in the loop. ",
    "created_at": "2020-03-18T00:38:49Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r394047160",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394047160"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r394047160"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394047160/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3018,
    "side": "RIGHT",
    "in_reply_to_id": 392258026
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430005434",
    "pull_request_review_id": 417796773,
    "id": 430005434,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAwNTQzNA==",
    "diff_hunk": "@@ -542,17 +542,18 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n           for (int i = 0; i < RUN_TESTS; i++) {\n             // picking 50 from 100 coins doesn't depend on the shuffle,",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": 374,
    "original_position": 13,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "d9c083ea53c36acb570846ab6a48511ffab21bfa",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Comment is outdated here, might be confusing even with the update below.",
    "created_at": "2020-05-25T16:09:51Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430005434",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430005434"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430005434"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430005434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 545,
    "original_line": 545,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430005681",
    "pull_request_review_id": 417796773,
    "id": 430005681,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAwNTY4MQ==",
    "diff_hunk": "@@ -542,17 +542,18 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n           for (int i = 0; i < RUN_TESTS; i++) {\n             // picking 50 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, GroupCoins(vCoins), setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, GroupCoins(vCoins), setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+            // Use 50.5 to be sure that BnB doesn't match\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, GroupCoins(vCoins), setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, GroupCoins(vCoins), setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n             BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n \n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n                 // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "d9c083ea53c36acb570846ab6a48511ffab21bfa",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should also be updated since it's now 0.5.",
    "created_at": "2020-05-25T16:10:38Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430005681",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430005681"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430005681"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430005681/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 553,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430015012",
    "pull_request_review_id": 417796773,
    "id": 430015012,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAxNTAxMg==",
    "diff_hunk": "@@ -2964,7 +2912,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n     reservedest.KeepDestination();\n \n     WalletLogPrintf(\"Fee Calculation: Fee:%d Bytes:%u Needed:%d Tgt:%d (requested %d) Reason:\\\"%s\\\" Decay %.5f: Estimation: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out)\\n\",\n-              nFeeRet, nBytes, nFeeNeeded, feeCalc.returnedTarget, feeCalc.desiredTarget, StringForFeeReason(feeCalc.reason), feeCalc.est.decay,\n+              nFeeRet, nBytes, nFeeRet, feeCalc.returnedTarget, feeCalc.desiredTarget, StringForFeeReason(feeCalc.reason), feeCalc.est.decay,",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 349,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "919abc311d5922313e962999f1cfb9358e73aed6",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If \"Needed\" is always the same as \"Fee\" maybe just remove it from the log string?",
    "created_at": "2020-05-25T16:43:05Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430015012",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430015012"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430015012"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430015012/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2915,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430021062",
    "pull_request_review_id": 417796773,
    "id": 430021062,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyMTA2Mg==",
    "diff_hunk": "@@ -2701,209 +2699,159 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n-\n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n+                            error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else\n+                        error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n+            // Choose coins to use\n+            CAmount selected_value = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        error = _(\"Insufficient funds\");\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, selected_value, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n+            const CAmount nChange = selected_value - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n \n-                    CAmount cost_of_change = 0;\n-                    if (pick_new_inputs) {\n-                        cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n-                    }\n+                CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // When nChange is less than the cost of the change output,\n-                    // send it to fees (this means BnB was used)\n-                    if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When nChange is less than the cost of the change output,\n+                // send it to fees (this means BnB was used)\n+                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                {\n+                    nChangePosInOut = -1;\n+                    nFeeRet = nChange;\n+                }\n+                else\n+                {\n+                    if (nChangePosInOut == -1)\n                     {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        // Insert change txn at random position:\n+                        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                     }\n-                    else\n+                    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                     {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            error = _(\"Change index out of range\");\n-                            return false;\n-                        }\n-\n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        error = _(\"Change index out of range\");\n+                        return false;\n                     }\n-                } else {\n-                    nChangePosInOut = -1;\n-                }\n \n-                // Dummy fill vin for maximum size estimation\n-                //\n-                for (const auto& coin : setCoins) {\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-                }\n-\n-                nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                if (nBytes < 0) {\n-                    error = _(\"Signing transaction failed\");\n-                    return false;\n-                }\n-\n-                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n-                if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                    // eventually allow a fallback fee\n-                    error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                    return false;\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, newTxOut);\n                 }\n+            } else {\n+                nChangePosInOut = -1;\n+            }\n \n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, nullptr);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n-                }\n+            nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n \n+            CAmount fee_needed = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n+            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+                return false;\n+            }\n+            if (nFeeRet < fee_needed) {\n+                nFeeRet = fee_needed;\n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n                     std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n+                    change_position->nValue -= nFeeRet;\n+                    // If the change is now dust, get rid of it\n+                    if (IsDust(*change_position, discard_rate))\n+                    {\n+                        nChangePosInOut = -1;\n+                        nFeeRet += change_position->nValue;\n+                        txNew.vout.erase(change_position);\n                     }\n                 }\n+                // Reduce output values for subtractFeeFromAmount\n+                if (nSubtractFeeFromAmount != 0) {\n+                    int i = 0;\n+                    bool fFirst = true;\n+                    for (const auto& recipient : vecSend)\n+                    {\n+                        if (i == nChangePosInOut) {\n+                            ++i;\n+                        }\n+                        CTxOut& txout = txNew.vout[i];\n \n-                // If subtracting fee from recipients, we now know what fee we\n-                // need to subtract, we have no reason to reselect inputs\n-                if (nSubtractFeeFromAmount > 0) {\n-                    pick_new_inputs = false;\n+                        if (recipient.fSubtractFeeFromAmount)\n+                        {\n+                            assert(nSubtractFeeFromAmount != 0);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 325,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "919abc311d5922313e962999f1cfb9358e73aed6",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since we are already in an if branch that asserts the exact same thing, I think this `assert` is not necessary.",
    "created_at": "2020-05-25T17:04:18Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430021062",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430021062"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430021062"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430021062/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2843,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430675212",
    "pull_request_review_id": 418637491,
    "id": 430675212,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3NTIxMg==",
    "diff_hunk": "@@ -2701,209 +2699,159 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n-\n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n+                            error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else\n+                        error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n+            // Choose coins to use\n+            CAmount selected_value = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        error = _(\"Insufficient funds\");\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, selected_value, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n+            const CAmount nChange = selected_value - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n \n-                    CAmount cost_of_change = 0;\n-                    if (pick_new_inputs) {\n-                        cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n-                    }\n+                CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // When nChange is less than the cost of the change output,\n-                    // send it to fees (this means BnB was used)\n-                    if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When nChange is less than the cost of the change output,\n+                // send it to fees (this means BnB was used)\n+                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                {\n+                    nChangePosInOut = -1;\n+                    nFeeRet = nChange;\n+                }\n+                else\n+                {\n+                    if (nChangePosInOut == -1)\n                     {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        // Insert change txn at random position:\n+                        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                     }\n-                    else\n+                    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                     {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            error = _(\"Change index out of range\");\n-                            return false;\n-                        }\n-\n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        error = _(\"Change index out of range\");\n+                        return false;\n                     }\n-                } else {\n-                    nChangePosInOut = -1;\n-                }\n \n-                // Dummy fill vin for maximum size estimation\n-                //\n-                for (const auto& coin : setCoins) {\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-                }\n-\n-                nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                if (nBytes < 0) {\n-                    error = _(\"Signing transaction failed\");\n-                    return false;\n-                }\n-\n-                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n-                if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                    // eventually allow a fallback fee\n-                    error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                    return false;\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, newTxOut);\n                 }\n+            } else {\n+                nChangePosInOut = -1;\n+            }\n \n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, nullptr);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n-                }\n+            nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n \n+            CAmount fee_needed = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n+            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+                return false;\n+            }\n+            if (nFeeRet < fee_needed) {\n+                nFeeRet = fee_needed;\n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n                     std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n+                    change_position->nValue -= nFeeRet;\n+                    // If the change is now dust, get rid of it\n+                    if (IsDust(*change_position, discard_rate))\n+                    {\n+                        nChangePosInOut = -1;\n+                        nFeeRet += change_position->nValue;\n+                        txNew.vout.erase(change_position);\n                     }\n                 }\n+                // Reduce output values for subtractFeeFromAmount\n+                if (nSubtractFeeFromAmount != 0) {\n+                    int i = 0;\n+                    bool fFirst = true;\n+                    for (const auto& recipient : vecSend)\n+                    {\n+                        if (i == nChangePosInOut) {\n+                            ++i;\n+                        }\n+                        CTxOut& txout = txNew.vout[i];\n \n-                // If subtracting fee from recipients, we now know what fee we\n-                // need to subtract, we have no reason to reselect inputs\n-                if (nSubtractFeeFromAmount > 0) {\n-                    pick_new_inputs = false;\n+                        if (recipient.fSubtractFeeFromAmount)\n+                        {\n+                            assert(nSubtractFeeFromAmount != 0);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 325,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "919abc311d5922313e962999f1cfb9358e73aed6",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Removed",
    "created_at": "2020-05-26T20:02:20Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430675212",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430675212"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430675212"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430675212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2843,
    "side": "RIGHT",
    "in_reply_to_id": 430021062
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430675256",
    "pull_request_review_id": 418637535,
    "id": 430675256,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3NTI1Ng==",
    "diff_hunk": "@@ -2964,7 +2912,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n     reservedest.KeepDestination();\n \n     WalletLogPrintf(\"Fee Calculation: Fee:%d Bytes:%u Needed:%d Tgt:%d (requested %d) Reason:\\\"%s\\\" Decay %.5f: Estimation: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out)\\n\",\n-              nFeeRet, nBytes, nFeeNeeded, feeCalc.returnedTarget, feeCalc.desiredTarget, StringForFeeReason(feeCalc.reason), feeCalc.est.decay,\n+              nFeeRet, nBytes, nFeeRet, feeCalc.returnedTarget, feeCalc.desiredTarget, StringForFeeReason(feeCalc.reason), feeCalc.est.decay,",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 349,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "919abc311d5922313e962999f1cfb9358e73aed6",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Removed",
    "created_at": "2020-05-26T20:02:23Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430675256",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430675256"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430675256"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430675256/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2915,
    "side": "RIGHT",
    "in_reply_to_id": 430015012
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430675466",
    "pull_request_review_id": 418637790,
    "id": 430675466,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3NTQ2Ng==",
    "diff_hunk": "@@ -542,17 +542,18 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n           for (int i = 0; i < RUN_TESTS; i++) {\n             // picking 50 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, GroupCoins(vCoins), setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, GroupCoins(vCoins), setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+            // Use 50.5 to be sure that BnB doesn't match\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, GroupCoins(vCoins), setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, GroupCoins(vCoins), setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n             BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n \n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n                 // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "d9c083ea53c36acb570846ab6a48511ffab21bfa",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-05-26T20:02:46Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430675466",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430675466"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430675466"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430675466/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 553,
    "side": "RIGHT",
    "in_reply_to_id": 430005681
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430675504",
    "pull_request_review_id": 418637834,
    "id": 430675504,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3NTUwNA==",
    "diff_hunk": "@@ -542,17 +542,18 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n           for (int i = 0; i < RUN_TESTS; i++) {\n             // picking 50 from 100 coins doesn't depend on the shuffle,",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": 374,
    "original_position": 13,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "d9c083ea53c36acb570846ab6a48511ffab21bfa",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-05-26T20:02:51Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430675504",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430675504"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430675504"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430675504/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 545,
    "original_line": 545,
    "side": "RIGHT",
    "in_reply_to_id": 430005434
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496191485",
    "pull_request_review_id": 497843111,
    "id": 496191485,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MTQ4NQ==",
    "diff_hunk": "@@ -2305,43 +2305,42 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    std::vector<OutputGroup> utxo_pool;\n-    if (coin_selection_params.use_bnb) {\n-        // Get long term estimate\n-        FeeCalculation feeCalc;\n-        CCoinControl temp;\n-        temp.m_confirm_target = 1008;\n-        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n-\n-        // Calculate cost of change\n-        CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n-\n-        // Filter by the min conf specs and add to utxo_pool and calculate effective value\n-        for (OutputGroup& group : groups) {\n-            if (!group.EligibleForSpending(eligibility_filter)) continue;\n-\n-            if (coin_selection_params.m_subtract_fee_outputs) {\n-                // Set the effective feerate to 0 as we don't want to use the effective value since the fees will be deducted from the output\n-                group.SetFees(CFeeRate(0) /* effective_feerate */, long_term_feerate);\n-            } else {\n-                group.SetFees(coin_selection_params.effective_fee, long_term_feerate);\n-            }\n+    // Calculate the fees for things that aren't inputs\n+    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-            OutputGroup pos_group = group.GetPositiveOnlyGroup();\n-            if (pos_group.effective_value > 0) utxo_pool.push_back(pos_group);\n+    // Get long term estimate\n+    FeeCalculation feeCalc;\n+    CCoinControl temp;\n+    temp.m_confirm_target = 1008;\n+    CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n+\n+    // Calculate cost of change\n+    CAmount change_fee = coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+    CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + change_fee;\n+\n+    // Filter by the min conf specs and add to utxo_pool and calculate effective value\n+    std::vector<OutputGroup> positive_groups;\n+    std::vector<OutputGroup> all_groups;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 42,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "1a933ccea4b208904a8e93ae06e6e7eb9054e6e4",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Leave a comment why this is here. Would be confusing for someone that doesn't know the controversial history of our hoovering UTXO manager :)",
    "created_at": "2020-09-28T19:45:57Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496191485",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496191485"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496191485"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496191485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2323,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496195089",
    "pull_request_review_id": 497843111,
    "id": 496195089,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NTA4OQ==",
    "diff_hunk": "@@ -2335,13 +2335,12 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         all_groups.push_back(group);\n     }\n \n-    if (coin_selection_params.use_bnb) {",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "833c1cf204d1bd5e9128245c8cfb8f63cd7883b1",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "note to reviewers: this is removed next commit",
    "created_at": "2020-09-28T19:52:48Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496195089",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496195089"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496195089"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496195089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2338,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496201643",
    "pull_request_review_id": 497843111,
    "id": 496201643,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMTY0Mw==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 59,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "err. no?",
    "created_at": "2020-09-28T20:05:44Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496201643",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496201643"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496201643"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496201643/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2766,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496202421",
    "pull_request_review_id": 497843111,
    "id": 496202421,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMjQyMQ==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n+                            error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 104,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "let's bracketize while we're here.",
    "created_at": "2020-09-28T20:07:15Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496202421",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496202421"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496202421"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496202421/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2780,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496202501",
    "pull_request_review_id": 497843111,
    "id": 496202501,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMjUwMQ==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 96,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "let's bracketize while we're here.",
    "created_at": "2020-09-28T20:07:23Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496202501",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496202501"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496202501"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496202501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2775,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496202556",
    "pull_request_review_id": 497843111,
    "id": 496202556,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMjU1Ng==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 98,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "let's bracketize while we're here.",
    "created_at": "2020-09-28T20:07:29Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496202556",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496202556"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496202556"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496202556/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2777,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496203125",
    "pull_request_review_id": 497843111,
    "id": 496203125,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMzEyNQ==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n+                            error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else\n+                        error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n+            // Choose coins to use\n+            CAmount selected_value = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 129,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n            // as lower-bound to allow coin selection to do its thing\r\n```",
    "created_at": "2020-09-28T20:08:38Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496203125",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496203125"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496203125"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496203125/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2792,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496204694",
    "pull_request_review_id": 497843111,
    "id": 496204694,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwNDY5NA==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n+                            error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else\n+                        error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n+            // Choose coins to use\n+            CAmount selected_value = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        error = _(\"Insufficient funds\");\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, selected_value, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n+            const CAmount nChange = selected_value - nValue;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 158,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "let's please rename this to something like `total_recipient_value`, I find this name actually worse than previous",
    "created_at": "2020-09-28T20:11:47Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496204694",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496204694"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496204694"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496204694/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2808,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496207756",
    "pull_request_review_id": 497843111,
    "id": 496207756,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwNzc1Ng==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n+                            error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else\n+                        error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n+            // Choose coins to use\n+            CAmount selected_value = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        error = _(\"Insufficient funds\");\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, selected_value, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n+            const CAmount nChange = selected_value - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n \n-                    CAmount cost_of_change = 0;\n-                    if (pick_new_inputs) {\n-                        cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n-                    }\n+                CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // When nChange is less than the cost of the change output,\n-                    // send it to fees (this means BnB was used)\n-                    if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When nChange is less than the cost of the change output,\n+                // send it to fees (this means BnB was used)\n+                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                {\n+                    nChangePosInOut = -1;\n+                    nFeeRet = nChange;\n+                }\n+                else\n+                {\n+                    if (nChangePosInOut == -1)\n                     {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        // Insert change txn at random position:\n+                        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                     }\n-                    else\n+                    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                     {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            error = _(\"Change index out of range\");\n-                            return false;\n-                        }\n-\n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        error = _(\"Change index out of range\");\n+                        return false;\n                     }\n-                } else {\n-                    nChangePosInOut = -1;\n-                }\n \n-                // Dummy fill vin for maximum size estimation\n-                //\n-                for (const auto& coin : setCoins) {\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-                }\n-\n-                nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                if (nBytes < 0) {\n-                    error = _(\"Signing transaction failed\");\n-                    return false;\n-                }\n-\n-                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n-                if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                    // eventually allow a fallback fee\n-                    error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                    return false;\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, newTxOut);\n                 }\n+            } else {\n+                nChangePosInOut = -1;\n+            }\n \n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, nullptr);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n-                }\n+            nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n \n+            CAmount fee_needed = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n+            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+                return false;\n+            }\n+            if (nFeeRet < fee_needed) {\n+                nFeeRet = fee_needed;\n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n                     std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n+                    change_position->nValue -= nFeeRet;\n+                    // If the change is now dust, get rid of it\n+                    if (IsDust(*change_position, discard_rate))\n+                    {\n+                        nChangePosInOut = -1;\n+                        nFeeRet += change_position->nValue;\n+                        txNew.vout.erase(change_position);\n                     }\n                 }\n+                // Reduce output values for subtractFeeFromAmount",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 316,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: make this an `else if` since they can't both happen",
    "created_at": "2020-09-28T20:18:12Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496207756",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496207756"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496207756"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496207756/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3003,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496208469",
    "pull_request_review_id": 497843111,
    "id": 496208469,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwODQ2OQ==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n+                            error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else\n+                        error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n+            // Choose coins to use\n+            CAmount selected_value = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        error = _(\"Insufficient funds\");\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, selected_value, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n+            const CAmount nChange = selected_value - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n \n-                    CAmount cost_of_change = 0;\n-                    if (pick_new_inputs) {\n-                        cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n-                    }\n+                CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // When nChange is less than the cost of the change output,\n-                    // send it to fees (this means BnB was used)\n-                    if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When nChange is less than the cost of the change output,\n+                // send it to fees (this means BnB was used)\n+                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                {\n+                    nChangePosInOut = -1;\n+                    nFeeRet = nChange;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 182,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "this change from `+=` to `=` looks correct, just kind of sneaky. Throw in an assert that it's 0 before setting?",
    "created_at": "2020-09-28T20:19:39Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496208469",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496208469"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496208469"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496208469/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2953,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496215647",
    "pull_request_review_id": 497843111,
    "id": 496215647,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxNTY0Nw==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 96,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Actually, this is impossible now since you moved the subtract from fee parts to later?",
    "created_at": "2020-09-28T20:33:45Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496215647",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496215647"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496215647"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496215647/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2775,
    "side": "RIGHT",
    "in_reply_to_id": 496202501
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496216362",
    "pull_request_review_id": 497843111,
    "id": 496216362,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxNjM2Mg==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 87,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It can only fire if you've already encountered the change position and discarded it based on discard_rate check. I think this check is supposed to be talking about when subtract from fee is being done earlier?\r\n\r\nI think this whole section just becomes \"Transaction amount too small\" error?",
    "created_at": "2020-09-28T20:35:05Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496216362",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496216362"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496216362"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496216362/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2773,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496216743",
    "pull_request_review_id": 497843111,
    "id": 496216743,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxNjc0Mw==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n+                            error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else\n+                        error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n+            // Choose coins to use\n+            CAmount selected_value = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        error = _(\"Insufficient funds\");\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, selected_value, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n+            const CAmount nChange = selected_value - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n \n-                    CAmount cost_of_change = 0;\n-                    if (pick_new_inputs) {\n-                        cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n-                    }\n+                CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // When nChange is less than the cost of the change output,\n-                    // send it to fees (this means BnB was used)\n-                    if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When nChange is less than the cost of the change output,\n+                // send it to fees (this means BnB was used)\n+                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                {\n+                    nChangePosInOut = -1;\n+                    nFeeRet = nChange;\n+                }\n+                else\n+                {\n+                    if (nChangePosInOut == -1)\n                     {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        // Insert change txn at random position:\n+                        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                     }\n-                    else\n+                    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                     {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            error = _(\"Change index out of range\");\n-                            return false;\n-                        }\n-\n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        error = _(\"Change index out of range\");\n+                        return false;\n                     }\n-                } else {\n-                    nChangePosInOut = -1;\n-                }\n \n-                // Dummy fill vin for maximum size estimation\n-                //\n-                for (const auto& coin : setCoins) {\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-                }\n-\n-                nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                if (nBytes < 0) {\n-                    error = _(\"Signing transaction failed\");\n-                    return false;\n-                }\n-\n-                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n-                if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                    // eventually allow a fallback fee\n-                    error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                    return false;\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, newTxOut);\n                 }\n+            } else {\n+                nChangePosInOut = -1;\n+            }\n \n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, nullptr);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n-                }\n+            nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n \n+            CAmount fee_needed = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n+            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+                return false;\n+            }\n+            if (nFeeRet < fee_needed) {\n+                nFeeRet = fee_needed;\n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n                     std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n+                    change_position->nValue -= nFeeRet;\n+                    // If the change is now dust, get rid of it\n+                    if (IsDust(*change_position, discard_rate))\n+                    {\n+                        nChangePosInOut = -1;\n+                        nFeeRet += change_position->nValue;\n+                        txNew.vout.erase(change_position);\n                     }\n                 }\n+                // Reduce output values for subtractFeeFromAmount\n+                if (nSubtractFeeFromAmount != 0) {",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 317,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "doesn't this section need to make sure we didn't turn outputs into relay dust?",
    "created_at": "2020-09-28T20:35:48Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496216743",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496216743"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496216743"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496216743/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2878,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496218498",
    "pull_request_review_id": 497843111,
    "id": 496218498,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODQ5OA==",
    "diff_hunk": "@@ -2815,9 +2820,9 @@ bool CWallet::CreateTransactionInternal(\n \n                 // Never create dust outputs; if we would, just\n                 // add the dust to the fee.\n-                // When nChange is less than the cost of the change output,\n-                // send it to fees (this means BnB was used)\n-                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // When the selected_value is within the exact match range",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 19,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "1ca165572ab392aaf9da19e64f8e0e240905929b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Not immediately obvious to me what this change is doing, explain? Also this should say `selected_eff`?",
    "created_at": "2020-09-28T20:39:23Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496218498",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496218498"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496218498"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496218498/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2876,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497071541",
    "pull_request_review_id": 498907476,
    "id": 497071541,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MTU0MQ==",
    "diff_hunk": "@@ -2305,43 +2305,42 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    std::vector<OutputGroup> utxo_pool;\n-    if (coin_selection_params.use_bnb) {\n-        // Get long term estimate\n-        FeeCalculation feeCalc;\n-        CCoinControl temp;\n-        temp.m_confirm_target = 1008;\n-        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n-\n-        // Calculate cost of change\n-        CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n-\n-        // Filter by the min conf specs and add to utxo_pool and calculate effective value\n-        for (OutputGroup& group : groups) {\n-            if (!group.EligibleForSpending(eligibility_filter)) continue;\n-\n-            if (coin_selection_params.m_subtract_fee_outputs) {\n-                // Set the effective feerate to 0 as we don't want to use the effective value since the fees will be deducted from the output\n-                group.SetFees(CFeeRate(0) /* effective_feerate */, long_term_feerate);\n-            } else {\n-                group.SetFees(coin_selection_params.effective_fee, long_term_feerate);\n-            }\n+    // Calculate the fees for things that aren't inputs\n+    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-            OutputGroup pos_group = group.GetPositiveOnlyGroup();\n-            if (pos_group.effective_value > 0) utxo_pool.push_back(pos_group);\n+    // Get long term estimate\n+    FeeCalculation feeCalc;\n+    CCoinControl temp;\n+    temp.m_confirm_target = 1008;\n+    CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n+\n+    // Calculate cost of change\n+    CAmount change_fee = coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+    CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + change_fee;\n+\n+    // Filter by the min conf specs and add to utxo_pool and calculate effective value\n+    std::vector<OutputGroup> positive_groups;\n+    std::vector<OutputGroup> all_groups;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 42,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "1a933ccea4b208904a8e93ae06e6e7eb9054e6e4",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added a comment",
    "created_at": "2020-09-29T21:29:54Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497071541",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497071541"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497071541"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497071541/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2323,
    "side": "RIGHT",
    "in_reply_to_id": 496191485
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497071606",
    "pull_request_review_id": 498907546,
    "id": 497071606,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MTYwNg==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 59,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Removed",
    "created_at": "2020-09-29T21:30:03Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497071606",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497071606"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497071606"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497071606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2766,
    "side": "RIGHT",
    "in_reply_to_id": 496201643
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497071815",
    "pull_request_review_id": 498907812,
    "id": 497071815,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MTgxNQ==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n+                            error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 104,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Braketized where this was moved to.",
    "created_at": "2020-09-29T21:30:26Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497071815",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497071815"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497071815"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497071815/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2780,
    "side": "RIGHT",
    "in_reply_to_id": 496202421
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497071960",
    "pull_request_review_id": 498907969,
    "id": 497071960,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MTk2MA==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 96,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes. Moved this to the later part.",
    "created_at": "2020-09-29T21:30:41Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497071960",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497071960"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497071960"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497071960/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2775,
    "side": "RIGHT",
    "in_reply_to_id": 496202501
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072060",
    "pull_request_review_id": 498908089,
    "id": 497072060,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MjA2MA==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 98,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Removed this else",
    "created_at": "2020-09-29T21:30:53Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072060",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072060"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072060"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2777,
    "side": "RIGHT",
    "in_reply_to_id": 496202556
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072177",
    "pull_request_review_id": 498908252,
    "id": 497072177,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MjE3Nw==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n+                            error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else\n+                        error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n+            // Choose coins to use\n+            CAmount selected_value = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 129,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-09-29T21:31:08Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072177",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072177"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072177"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2792,
    "side": "RIGHT",
    "in_reply_to_id": 496203125
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072226",
    "pull_request_review_id": 498908318,
    "id": 497072226,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MjIyNg==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n+                            error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else\n+                        error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n+            // Choose coins to use\n+            CAmount selected_value = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        error = _(\"Insufficient funds\");\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, selected_value, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n+            const CAmount nChange = selected_value - nValue;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 158,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-09-29T21:31:13Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072226",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072226"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072226"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072226/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2808,
    "side": "RIGHT",
    "in_reply_to_id": 496204694
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072272",
    "pull_request_review_id": 498908371,
    "id": 497072272,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MjI3Mg==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n+                            error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else\n+                        error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n+            // Choose coins to use\n+            CAmount selected_value = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        error = _(\"Insufficient funds\");\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, selected_value, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n+            const CAmount nChange = selected_value - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n \n-                    CAmount cost_of_change = 0;\n-                    if (pick_new_inputs) {\n-                        cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n-                    }\n+                CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // When nChange is less than the cost of the change output,\n-                    // send it to fees (this means BnB was used)\n-                    if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When nChange is less than the cost of the change output,\n+                // send it to fees (this means BnB was used)\n+                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                {\n+                    nChangePosInOut = -1;\n+                    nFeeRet = nChange;\n+                }\n+                else\n+                {\n+                    if (nChangePosInOut == -1)\n                     {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        // Insert change txn at random position:\n+                        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                     }\n-                    else\n+                    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                     {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            error = _(\"Change index out of range\");\n-                            return false;\n-                        }\n-\n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        error = _(\"Change index out of range\");\n+                        return false;\n                     }\n-                } else {\n-                    nChangePosInOut = -1;\n-                }\n \n-                // Dummy fill vin for maximum size estimation\n-                //\n-                for (const auto& coin : setCoins) {\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-                }\n-\n-                nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                if (nBytes < 0) {\n-                    error = _(\"Signing transaction failed\");\n-                    return false;\n-                }\n-\n-                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n-                if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                    // eventually allow a fallback fee\n-                    error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                    return false;\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, newTxOut);\n                 }\n+            } else {\n+                nChangePosInOut = -1;\n+            }\n \n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, nullptr);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n-                }\n+            nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n \n+            CAmount fee_needed = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n+            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+                return false;\n+            }\n+            if (nFeeRet < fee_needed) {\n+                nFeeRet = fee_needed;\n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n                     std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n+                    change_position->nValue -= nFeeRet;\n+                    // If the change is now dust, get rid of it\n+                    if (IsDust(*change_position, discard_rate))\n+                    {\n+                        nChangePosInOut = -1;\n+                        nFeeRet += change_position->nValue;\n+                        txNew.vout.erase(change_position);\n                     }\n                 }\n+                // Reduce output values for subtractFeeFromAmount",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 316,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-09-29T21:31:18Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072272",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072272"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072272"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072272/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3003,
    "side": "RIGHT",
    "in_reply_to_id": 496207756
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072313",
    "pull_request_review_id": 498908424,
    "id": 497072313,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MjMxMw==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n+                            error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else\n+                        error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n+            // Choose coins to use\n+            CAmount selected_value = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        error = _(\"Insufficient funds\");\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, selected_value, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n+            const CAmount nChange = selected_value - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n \n-                    CAmount cost_of_change = 0;\n-                    if (pick_new_inputs) {\n-                        cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n-                    }\n+                CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // When nChange is less than the cost of the change output,\n-                    // send it to fees (this means BnB was used)\n-                    if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When nChange is less than the cost of the change output,\n+                // send it to fees (this means BnB was used)\n+                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                {\n+                    nChangePosInOut = -1;\n+                    nFeeRet = nChange;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 182,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-09-29T21:31:24Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072313",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072313"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072313"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2953,
    "side": "RIGHT",
    "in_reply_to_id": 496208469
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072501",
    "pull_request_review_id": 498908677,
    "id": 497072501,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MjUwMQ==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 87,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes. Moved the subtract from fee checks to the part where that is actually being done.",
    "created_at": "2020-09-29T21:31:47Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072501",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072501"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072501"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2773,
    "side": "RIGHT",
    "in_reply_to_id": 496216362
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072583",
    "pull_request_review_id": 498908792,
    "id": 497072583,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MjU4Mw==",
    "diff_hunk": "@@ -2742,215 +2740,164 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), coin_selection_params.effective_fee.ToString());\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs. Note this is only used for BnB right now\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n+                        if (txout.nValue < 0)\n+                            error = _(\"The transaction amount is too small to pay the fee\");\n                         else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n+                            error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                     }\n-                    txNew.vout.push_back(txout);\n+                    else\n+                        error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n+            // Choose coins to use\n+            CAmount selected_value = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        error = _(\"Insufficient funds\");\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, selected_value, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n+            const CAmount nChange = selected_value - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n \n-                    CAmount cost_of_change = 0;\n-                    if (pick_new_inputs) {\n-                        cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n-                    }\n+                CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // When nChange is less than the cost of the change output,\n-                    // send it to fees (this means BnB was used)\n-                    if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When nChange is less than the cost of the change output,\n+                // send it to fees (this means BnB was used)\n+                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                {\n+                    nChangePosInOut = -1;\n+                    nFeeRet = nChange;\n+                }\n+                else\n+                {\n+                    if (nChangePosInOut == -1)\n                     {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        // Insert change txn at random position:\n+                        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                     }\n-                    else\n+                    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                     {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            error = _(\"Change index out of range\");\n-                            return false;\n-                        }\n-\n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        error = _(\"Change index out of range\");\n+                        return false;\n                     }\n-                } else {\n-                    nChangePosInOut = -1;\n-                }\n \n-                // Dummy fill vin for maximum size estimation\n-                //\n-                for (const auto& coin : setCoins) {\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-                }\n-\n-                nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                if (nBytes < 0) {\n-                    error = _(\"Signing transaction failed\");\n-                    return false;\n-                }\n-\n-                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n-                if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                    // eventually allow a fallback fee\n-                    error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                    return false;\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, newTxOut);\n                 }\n+            } else {\n+                nChangePosInOut = -1;\n+            }\n \n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, nullptr);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n-                }\n+            nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n \n+            CAmount fee_needed = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n+            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+                return false;\n+            }\n+            if (nFeeRet < fee_needed) {\n+                nFeeRet = fee_needed;\n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n                     std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n+                    change_position->nValue -= nFeeRet;\n+                    // If the change is now dust, get rid of it\n+                    if (IsDust(*change_position, discard_rate))\n+                    {\n+                        nChangePosInOut = -1;\n+                        nFeeRet += change_position->nValue;\n+                        txNew.vout.erase(change_position);\n                     }\n                 }\n+                // Reduce output values for subtractFeeFromAmount\n+                if (nSubtractFeeFromAmount != 0) {",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 317,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a99a7cb93e02ab32bf2f58385a94b10f9a214326",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added from above.",
    "created_at": "2020-09-29T21:31:57Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072583",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072583"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072583"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497072583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2878,
    "side": "RIGHT",
    "in_reply_to_id": 496216743
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497074586",
    "pull_request_review_id": 498911275,
    "id": 497074586,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3NDU4Ng==",
    "diff_hunk": "@@ -2815,9 +2820,9 @@ bool CWallet::CreateTransactionInternal(\n \n                 // Never create dust outputs; if we would, just\n                 // add the dust to the fee.\n-                // When nChange is less than the cost of the change output,\n-                // send it to fees (this means BnB was used)\n-                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // When the selected_value is within the exact match range",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 19,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "1ca165572ab392aaf9da19e64f8e0e240905929b",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is essentially doing what `used_bnb` did.\r\n\r\nIf the selected effective value is within the exact matching range that we use for BnB, then let the change go to fees.",
    "created_at": "2020-09-29T21:36:14Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497074586",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497074586"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497074586"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497074586/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2876,
    "side": "RIGHT",
    "in_reply_to_id": 496218498
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536188959",
    "pull_request_review_id": 545068649,
    "id": 536188959,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4ODk1OQ==",
    "diff_hunk": "@@ -42,21 +42,19 @@ static void CoinSelection(benchmark::Bench& bench)\n     }\n     addCoin(3 * COIN, wallet, wtxs);\n \n-    // Create groups\n-    std::vector<OutputGroup> groups;\n+    // Create coins\n+    std::vector<COutput> coins;\n     for (const auto& wtx : wtxs) {\n-        COutput output(wtx.get(), 0 /* iIn */, 6 * 24 /* nDepthIn */, true /* spendable */, true /* solvable */, true /* safe */);\n-        groups.emplace_back();\n-        groups.back().Insert(output.GetInputCoin(), 6, false, 0, 0);\n+        coins.emplace_back(wtx.get(), 0 /* iIn */, 6 * 24 /* nDepthIn */, true /* spendable */, true /* solvable */, true /* safe */);\n     }\n \n     const CoinEligibilityFilter filter_standard(1, 6, 0);\n-    const CoinSelectionParams coin_selection_params(true, 34, 148, CFeeRate(0), 0);\n+    const CoinSelectionParams coin_selection_params(true, 34, 148, CFeeRate(0), 0, false);",
    "path": "src/bench/coin_selection.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "f63d750fa8edae99f589534a295a4613b8e6f6ab",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I see that this is setting a default `false` for `avoidPartial`. Did you consider setting it to true by default, and why didn't you? (I'd have a few ideas, but I was curious what you considered.)",
    "created_at": "2020-12-04T15:40:36Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536188959",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536188959"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536188959"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536188959/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 52,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536194244",
    "pull_request_review_id": 545068649,
    "id": 536194244,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NDI0NA==",
    "diff_hunk": "@@ -2368,7 +2368,14 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         temp.m_confirm_target = 1008;\n         CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n \n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, eligibility_filter.max_ancestors);\n+        // Get the feerate for effective value.\n+        // When subtracting the fee from the outputs, we want the effective feerate to be 0\n+        CFeeRate effective_feerate{0};\n+        if (!coin_selection_params.m_subtract_fee_outputs) {\n+            effective_feerate = coin_selection_params.effective_fee;\n+        }\n+\n+        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, eligibility_filter.max_ancestors, effective_feerate, long_term_feerate);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 12,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "369393868193ead9cf714792b8a043d6fda8cfc0",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm still confused by this approach, given that it may lead to spending uneconomic unspents due to the receiver paying the fees. I understand from the last PR I looked at, that this function is often used for sweeping wallets. To offer another perspective, I'm aware of multiple Bitcoin services that make their customers pay the transaction fees for withdrawals and in that case I would consider such a behavior potentially conflict inducing.",
    "created_at": "2020-12-04T15:48:06Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536194244",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536194244"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536194244"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536194244/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2371,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2378,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536198142",
    "pull_request_review_id": 545068649,
    "id": 536198142,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5ODE0Mg==",
    "diff_hunk": "@@ -4217,15 +4217,16 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                     // high amount of fees.\n                     if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 50,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "369393868193ead9cf714792b8a043d6fda8cfc0",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The \"breaking consensus\" part of the comment seems a bit spurious, given that `OUTPUT_GROUP_MAX_ENTRIES` appears to be set to ten, and 400,000 WU is the standardness limit, not even a consensus rule.\r\n\r\nFrankly, anyone using `-avoidpartialspends` for privacy reasons would be severely confused if they reused addresses heavily enough to bump into this issue, but still\u2026",
    "created_at": "2020-12-04T15:53:25Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536198142",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536198142"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536198142"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536198142/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4218,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536205262",
    "pull_request_review_id": 545068649,
    "id": 536205262,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNTI2Mg==",
    "diff_hunk": "@@ -4217,15 +4217,16 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                     // high amount of fees.\n                     if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n                         groups.push_back(it->second);\n-                        it->second = OutputGroup{};\n+                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n                         full_groups.insert(dst);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 54,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "369393868193ead9cf714792b8a043d6fda8cfc0",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I find this hard to read. So you have a map, retrieve the coins with the same destination (i.e. invoice address), then read the value of the map by calling the \"second\" (presumably value) of an iterator item. If it's full, it gets added to groups, but what is that in line 4220 then? Are you overwriting the element in the map with an empty output group as a shortcut to remove the final group and creating a new one for the remaining UTXOs with the same address?\r\n\r\nGiven that you're calling `it->second` multiple times here, it would help readability to turn that into a named variable. Maybe also call `gmap` either `group_map` or even `address_output_group_map`.",
    "created_at": "2020-12-04T16:03:44Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536205262",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536205262"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536205262"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536205262/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 4218,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 4221,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209337",
    "pull_request_review_id": 545068649,
    "id": 536209337,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTMzNw==",
    "diff_hunk": "@@ -4217,15 +4217,16 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                     // high amount of fees.\n                     if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n                         groups.push_back(it->second);\n-                        it->second = OutputGroup{};\n+                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n                         full_groups.insert(dst);\n                     }\n                     it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n                 } else {\n-                    gmap[dst].Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n+                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 60,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "369393868193ead9cf714792b8a043d6fda8cfc0",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I find it hard to wrap my head around all the possible outcomes for this functions due to the four levels of nested `if`'s followed by `else` branches.\r\n\r\nPut the simpler cases to the top, i.e. starting with `if (single_coin) { \"add group\" }` then do the more complex cases. I think you can reduce this by at least two levels of nesting.\r\n\r\nAlso, how is this followed by another `if(!single_coin)` after all of that already?",
    "created_at": "2020-12-04T16:09:49Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536209337",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209337"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536209337"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209337/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 4225,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 4226,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536287706",
    "pull_request_review_id": 545068649,
    "id": 536287706,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4NzcwNg==",
    "diff_hunk": "@@ -2360,8 +2360,8 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    std::vector<OutputGroup> utxo_pool;\n     if (coin_selection_params.use_bnb) {\n+        std::vector<OutputGroup> utxo_pool;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "b573d8f548fa556f797315d2b391781d77e089e5",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't understand why the grouping has been moved into the scope of using BnB. Wouldn't the groups be used for any unspent selection?",
    "created_at": "2020-12-04T18:15:45Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536287706",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536287706"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536287706"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536287706/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2363,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2364,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536293077",
    "pull_request_review_id": 545068649,
    "id": 536293077,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5MzA3Nw==",
    "diff_hunk": "@@ -4226,8 +4219,10 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                     ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n                 }\n             } else {\n-                groups.emplace_back(effective_feerate, long_term_feerate);\n-                groups.back().Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                // This is for if each output gets it's own OutputGroup",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 60,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "b573d8f548fa556f797315d2b391781d77e089e5",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "How about \r\n`// Every OutputGroup has only one output`",
    "created_at": "2020-12-04T18:25:01Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536293077",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536293077"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536293077"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536293077/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4222,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536294813",
    "pull_request_review_id": 545068649,
    "id": 536294813,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5NDgxMw==",
    "diff_hunk": "@@ -4238,7 +4233,8 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                 // Make this unattractive as we want coin selection to avoid it if possible\n                 group.m_ancestors = max_ancestors - 1;\n             }\n-            groups.push_back(group);\n+            // If the OutputGroup is not eligible, don't add it",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 72,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "b573d8f548fa556f797315d2b391781d77e089e5",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Negations are hard to read. How about:\r\n`// Only add eligible OutputGroups` or `// Omit OutputGroups that are not eligible`",
    "created_at": "2020-12-04T18:28:05Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536294813",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536294813"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536294813"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536294813/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4236,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536298600",
    "pull_request_review_id": 545068649,
    "id": 536298600,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5ODYwMA==",
    "diff_hunk": "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    const CAmount ev = output.txout.nValue - coin_fee;",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2ad1a94f10edaa34844b7d2628dfed23dc4d511a",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "How about a method `GetEffectiveValue(const CFeeRate feerate)` on `CInputCoin`?",
    "created_at": "2020-12-04T18:34:55Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536298600",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536298600"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536298600"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536298600/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 304,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 304,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536312209",
    "pull_request_review_id": 545068649,
    "id": 536312209,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMjIwOQ==",
    "diff_hunk": "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    const CAmount ev = output.txout.nValue - coin_fee;\n+\n+    // Filter for positive only here before adding the coin\n+    if (positive_only && ev <= 0) return;\n+\n     m_outputs.push_back(output);\n     CInputCoin& coin = m_outputs.back();\n-    coin.m_fee = coin.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(coin.m_input_bytes);\n+\n+    coin.m_fee = coin_fee;",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2ad1a94f10edaa34844b7d2628dfed23dc4d511a",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "When I see a method called `Insert`, I'd expect that the passed inputs end up in the corresponding datastructure. \r\n\r\nThis method does a lot more than just inserting, though. Maybe we can find a better name for the function, or split out the other responsibilities.",
    "created_at": "2020-12-04T18:58:58Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536312209",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536312209"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536312209"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536312209/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 312,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537840093",
    "pull_request_review_id": 545068649,
    "id": 537840093,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0MDA5Mw==",
    "diff_hunk": "@@ -127,7 +127,7 @@ inline std::vector<OutputGroup>& GroupCoins(const std::vector<COutput>& coins)\n     static_groups.clear();\n     for (auto& coin : coins) {\n         static_groups.emplace_back();\n-        static_groups.back().Insert(coin.GetInputCoin(), coin.nDepth, coin.tx->m_amounts[CWalletTx::DEBIT].m_cached[ISMINE_SPENDABLE] && coin.tx->m_amounts[CWalletTx::DEBIT].m_value[ISMINE_SPENDABLE] == 1 /* HACK: we can't figure out the is_me flag so we use the conditions defined above; perhaps set safe to false for !fIsFromMe in add_coin() */, 0, 0);\n+        static_groups.back().Insert(coin.GetInputCoin(), coin.nDepth, coin.tx->m_amounts[CWalletTx::DEBIT].m_cached[ISMINE_SPENDABLE] && coin.tx->m_amounts[CWalletTx::DEBIT].m_value[ISMINE_SPENDABLE] == 1 /* HACK: we can't figure out the is_me flag so we use the conditions defined above; perhaps set safe to false for !fIsFromMe in add_coin() */, 0, 0, false);",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2ad1a94f10edaa34844b7d2628dfed23dc4d511a",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe pull out `coin.tx->m_amounts[CWalletTx::DEBIT].m_cached[ISMINE_SPENDABLE] && coin.tx->m_amounts[CWalletTx::DEBIT].m_value[ISMINE_SPENDABLE] == 1` onto its own line and assign it to a variable?",
    "created_at": "2020-12-07T21:19:00Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537840093",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537840093"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537840093"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537840093/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 134,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537842046",
    "pull_request_review_id": 545068649,
    "id": 537842046,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0MjA0Ng==",
    "diff_hunk": "@@ -4213,16 +4207,17 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                         it->second = OutputGroup{effective_feerate, long_term_feerate};\n                         full_groups.insert(dst);\n                     }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n                 } else {\n                     auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n                 }\n             } else {\n                 // This is for if each output gets it's own OutputGroup\n                 OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n-                if (coin.EligibleForSpending(filter)) groups.push_back(coin);\n+                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+                if (positive_only && coin.effective_value <= 0) continue;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 60,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2ad1a94f10edaa34844b7d2628dfed23dc4d511a",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You could have coins that are not spendable at high fees but also not dust. Then this would allow UTXO received to the same address to get spent separately (part of it now, at high fees, rest later at lower fees).",
    "created_at": "2020-12-07T21:22:15Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537842046",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537842046"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537842046"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537842046/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4219,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537842659",
    "pull_request_review_id": 545068649,
    "id": 537842659,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0MjY1OQ==",
    "diff_hunk": "@@ -4234,7 +4229,8 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                 group.m_ancestors = max_ancestors - 1;\n             }\n             // If the OutputGroup is not eligible, don't add it\n-            if (group.EligibleForSpending(filter)) groups.push_back(group);\n+            if (positive_only && group.effective_value <= 0) continue;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 70,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2ad1a94f10edaa34844b7d2628dfed23dc4d511a",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "AFAICT, this like can never trigger, because we are disallowing adding uneconomic UXTO above when `positive_only` is true. ",
    "created_at": "2020-12-07T21:23:16Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537842659",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537842659"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537842659"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537842659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4307,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537844474",
    "pull_request_review_id": 545068649,
    "id": 537844474,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NDQ3NA==",
    "diff_hunk": "@@ -4213,16 +4207,17 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                         it->second = OutputGroup{effective_feerate, long_term_feerate};\n                         full_groups.insert(dst);\n                     }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n                 } else {\n                     auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n                 }\n             } else {\n                 // This is for if each output gets it's own OutputGroup\n                 OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n-                if (coin.EligibleForSpending(filter)) groups.push_back(coin);\n+                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+                if (positive_only && coin.effective_value <= 0) continue;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 60,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2ad1a94f10edaa34844b7d2628dfed23dc4d511a",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm almost ready to ask for a flowchart for all the possible outcomes of `avoid_partial`, `positive_only`, and various fee rates ;)",
    "created_at": "2020-12-07T21:26:17Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537844474",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537844474"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537844474"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537844474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4219,
    "side": "RIGHT",
    "in_reply_to_id": 537842046
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537846829",
    "pull_request_review_id": 545068649,
    "id": 537846829,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NjgyOQ==",
    "diff_hunk": "@@ -62,9 +62,11 @@ struct CoinEligibilityFilter\n     const int conf_theirs;\n     const uint64_t max_ancestors;\n     const uint64_t max_descendants;\n+    const bool m_include_partial_groups{false}; //! Include partial destination groups when avoid_reuse and there are full groups",
    "path": "src/wallet/coinselection.h",
    "position": null,
    "original_position": 4,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2a5a779542e8ac67011a2667ecfb776aa7c2af1e",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The thing with the \"full groups\" still baffles me. Is it reasonable to expect overlap between someone interested in privacy enough to activate `avoid_partial` and someone that reuses addresses heavily enough that they stack up dozens of UTXOs, yet they still aren't diligent enough to actually consolidate the large amount of UTXOs in one low feerate transaction?\r\n\r\nI guess what I'm saying is\u2026 I don't understand how all these special cases fit together to provide value. I'm wondering whether we are just adding complexity without a clear value-add.",
    "created_at": "2020-12-07T21:30:19Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537846829",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537846829"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537846829"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537846829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 90,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537851880",
    "pull_request_review_id": 545068649,
    "id": 537851880,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1MTg4MA==",
    "diff_hunk": "@@ -2360,34 +2360,35 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    if (coin_selection_params.use_bnb) {\n-        // Get long term estimate\n-        FeeCalculation feeCalc;\n-        CCoinControl temp;\n-        temp.m_confirm_target = 1008;\n-        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n+    // Calculate the fees for things that aren't inputs\n+    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 11,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "c314b098fefb28020c6ec185aab436e47cd2bc2c",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Shouldn't this differ by whether non-input portion of transactions built by BnB vs by Knapsack or Random is expected to have a change output or not?",
    "created_at": "2020-12-07T21:38:51Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537851880",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537851880"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537851880"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537851880/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2364,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537976831",
    "pull_request_review_id": 545068649,
    "id": 537976831,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3NjgzMQ==",
    "diff_hunk": "@@ -2360,34 +2360,35 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    if (coin_selection_params.use_bnb) {\n-        // Get long term estimate\n-        FeeCalculation feeCalc;\n-        CCoinControl temp;\n-        temp.m_confirm_target = 1008;\n-        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n+    // Calculate the fees for things that aren't inputs\n+    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-        // Get the feerate for effective value.\n-        // When subtracting the fee from the outputs, we want the effective feerate to be 0\n-        CFeeRate effective_feerate{0};\n-        if (!coin_selection_params.m_subtract_fee_outputs) {\n-            effective_feerate = coin_selection_params.effective_fee;\n-        }\n+    // Get long term estimate\n+    FeeCalculation feeCalc;\n+    CCoinControl temp;\n+    temp.m_confirm_target = 1008;\n+    CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n \n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, long_term_feerate, eligibility_filter, true /* positive_only */);\n+    // Get the feerate for effective value.\n+    // When subtracting the fee from the outputs, we want the effective feerate to be 0\n+    CFeeRate effective_feerate{0};\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        effective_feerate = coin_selection_params.effective_fee;\n+    }\n \n-        // Calculate cost of change\n-        CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+    // Calculate cost of change\n+    CAmount change_fee = coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+    CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + change_fee;\n \n-        // Calculate the fees for things that aren't inputs\n-        CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+    if (coin_selection_params.use_bnb) {\n+        std::vector<OutputGroup> positive_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, long_term_feerate, eligibility_filter, true /* positive_only */);\n         bnb_used = true;\n-        return SelectCoinsBnB(groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+        return SelectCoinsBnB(positive_groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n     } else {\n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, CFeeRate(0), CFeeRate(0), eligibility_filter, false /* positive_only */);\n-\n+        // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here.\n+        std::vector<OutputGroup> all_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, long_term_feerate, eligibility_filter, false /* positive_only */);\n         bnb_used = false;\n-        return KnapsackSolver(nTargetValue, groups, setCoinsRet, nValueRet);\n+        return KnapsackSolver(nTargetValue + not_input_fees, all_groups, setCoinsRet, nValueRet);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "c314b098fefb28020c6ec185aab436e47cd2bc2c",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "How is ensured that the KnapsackSolver retains a sufficient amount for a decently sized change output?",
    "created_at": "2020-12-08T02:06:07Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537976831",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537976831"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537976831"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537976831/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2391,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537978332",
    "pull_request_review_id": 545068649,
    "id": 537978332,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3ODMzMg==",
    "diff_hunk": "@@ -541,19 +541,20 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n           // Again, we only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n           for (int i = 0; i < RUN_TESTS; i++) {\n-            // picking 50 from 100 coins doesn't depend on the shuffle,\n+            // picking 50.5 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+            // Use 50.5 to be sure that BnB doesn't match\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n             BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n \n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n-                // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n+                // selecting 0.5 from 100 identical coins depends on the shuffle; this test will fail 1% of the time",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 29,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "8aa8ef25bb41f4082759768b5d839cb97fe27c64",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why does this fail at all? Couldn't we just test that selected the right count of inputs and the right input amount?",
    "created_at": "2020-12-08T02:10:17Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537978332",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537978332"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537978332"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537978332/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 555,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537980091",
    "pull_request_review_id": 545068649,
    "id": 537980091,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk4MDA5MQ==",
    "diff_hunk": "@@ -2792,215 +2790,167 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 21,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "9008dbf6a5a6e08fa4d7325d94ae022969409b2a",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`effective_feerate`, since it's a feerate not a fee.",
    "created_at": "2020-12-08T02:15:12Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537980091",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537980091"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537980091"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537980091/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2824,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537982397",
    "pull_request_review_id": 545068649,
    "id": 537982397,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk4MjM5Nw==",
    "diff_hunk": "@@ -2792,215 +2790,167 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), nFeeRateNeeded.ToString(FeeEstimateMode::SAT_VB));\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.effective_fee.ToString(FeeEstimateMode::SAT_VB));\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 84,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "9008dbf6a5a6e08fa4d7325d94ae022969409b2a",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I assume this is to handle foreign change addresses that are opaque due to P2SH?",
    "created_at": "2020-12-08T02:21:40Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537982397",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537982397"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537982397"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537982397/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2833,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2916,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537983513",
    "pull_request_review_id": 545068649,
    "id": 537983513,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk4MzUxMw==",
    "diff_hunk": "@@ -2857,9 +2862,9 @@ bool CWallet::CreateTransactionInternal(\n \n                 // Never create dust outputs; if we would, just\n                 // add the dust to the fee.\n-                // When nChange is less than the cost of the change output,\n-                // send it to fees (this means BnB was used)\n-                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // When the selected_eff is within the exact match range\n+                // (nValue + not_input_fees + cost_of_change), don't make change.\n+                if (IsDust(newTxOut, discard_rate) || selected_eff <= nValue + not_input_fees + cost_of_change)",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 21,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "16c1017083615b15c336dc08c59420ac80ec1769",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Didn't we just call the first two of that triplet `actual_target`?",
    "created_at": "2020-12-08T02:24:45Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537983513",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537983513"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537983513"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537983513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2898,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538811226",
    "pull_request_review_id": 547636291,
    "id": 538811226,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgxMTIyNg==",
    "diff_hunk": "@@ -42,21 +42,19 @@ static void CoinSelection(benchmark::Bench& bench)\n     }\n     addCoin(3 * COIN, wallet, wtxs);\n \n-    // Create groups\n-    std::vector<OutputGroup> groups;\n+    // Create coins\n+    std::vector<COutput> coins;\n     for (const auto& wtx : wtxs) {\n-        COutput output(wtx.get(), 0 /* iIn */, 6 * 24 /* nDepthIn */, true /* spendable */, true /* solvable */, true /* safe */);\n-        groups.emplace_back();\n-        groups.back().Insert(output.GetInputCoin(), 6, false, 0, 0);\n+        coins.emplace_back(wtx.get(), 0 /* iIn */, 6 * 24 /* nDepthIn */, true /* spendable */, true /* solvable */, true /* safe */);\n     }\n \n     const CoinEligibilityFilter filter_standard(1, 6, 0);\n-    const CoinSelectionParams coin_selection_params(true, 34, 148, CFeeRate(0), 0);\n+    const CoinSelectionParams coin_selection_params(true, 34, 148, CFeeRate(0), 0, false);",
    "path": "src/bench/coin_selection.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "f63d750fa8edae99f589534a295a4613b8e6f6ab",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I had not considered enabling `avoidpartial`.",
    "created_at": "2020-12-08T21:12:54Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538811226",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538811226"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538811226"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538811226/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 52,
    "side": "RIGHT",
    "in_reply_to_id": 536188959
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538812420",
    "pull_request_review_id": 547637704,
    "id": 538812420,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgxMjQyMA==",
    "diff_hunk": "@@ -2368,7 +2368,14 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         temp.m_confirm_target = 1008;\n         CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n \n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, eligibility_filter.max_ancestors);\n+        // Get the feerate for effective value.\n+        // When subtracting the fee from the outputs, we want the effective feerate to be 0\n+        CFeeRate effective_feerate{0};\n+        if (!coin_selection_params.m_subtract_fee_outputs) {\n+            effective_feerate = coin_selection_params.effective_fee;\n+        }\n+\n+        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, eligibility_filter.max_ancestors, effective_feerate, long_term_feerate);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 12,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "369393868193ead9cf714792b8a043d6fda8cfc0",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Given that this is how we currently handle subtracting the fee from outputs for BnB, I would prefer to preserve this behavior for now for all effective value things. We can revisit this in a followup.",
    "created_at": "2020-12-08T21:14:55Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538812420",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538812420"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538812420"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538812420/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2371,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2378,
    "side": "RIGHT",
    "in_reply_to_id": 536194244
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538814050",
    "pull_request_review_id": 547639514,
    "id": 538814050,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgxNDA1MA==",
    "diff_hunk": "@@ -4217,15 +4217,16 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                     // high amount of fees.\n                     if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n                         groups.push_back(it->second);\n-                        it->second = OutputGroup{};\n+                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n                         full_groups.insert(dst);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 54,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "369393868193ead9cf714792b8a043d6fda8cfc0",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes. The full group is added to the `groups` vector and the group in the map is reset to a fresh group for any further outputs to add for that destination.",
    "created_at": "2020-12-08T21:17:38Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538814050",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538814050"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538814050"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538814050/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 4218,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 4221,
    "side": "RIGHT",
    "in_reply_to_id": 536205262
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538815510",
    "pull_request_review_id": 547641166,
    "id": 538815510,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgxNTUxMA==",
    "diff_hunk": "@@ -2360,8 +2360,8 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    std::vector<OutputGroup> utxo_pool;\n     if (coin_selection_params.use_bnb) {\n+        std::vector<OutputGroup> utxo_pool;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "b573d8f548fa556f797315d2b391781d77e089e5",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not sure which commit this comment is for. The particular change is not present in the final diff.",
    "created_at": "2020-12-08T21:20:08Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538815510",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538815510"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538815510"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538815510/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2363,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2364,
    "side": "RIGHT",
    "in_reply_to_id": 536287706
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538851967",
    "pull_request_review_id": 547682205,
    "id": 538851967,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg1MTk2Nw==",
    "diff_hunk": "@@ -4213,16 +4207,17 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                         it->second = OutputGroup{effective_feerate, long_term_feerate};\n                         full_groups.insert(dst);\n                     }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n                 } else {\n                     auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n                 }\n             } else {\n                 // This is for if each output gets it's own OutputGroup\n                 OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n-                if (coin.EligibleForSpending(filter)) groups.push_back(coin);\n+                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+                if (positive_only && coin.effective_value <= 0) continue;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 60,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2ad1a94f10edaa34844b7d2628dfed23dc4d511a",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Given that this is behavior that already exists, I think we should leave this for a followup as it also requires further discussion of what we want to do.",
    "created_at": "2020-12-08T22:21:41Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538851967",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538851967"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538851967"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538851967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4219,
    "side": "RIGHT",
    "in_reply_to_id": 537842046
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538854472",
    "pull_request_review_id": 547685031,
    "id": 538854472,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg1NDQ3Mg==",
    "diff_hunk": "@@ -62,9 +62,11 @@ struct CoinEligibilityFilter\n     const int conf_theirs;\n     const uint64_t max_ancestors;\n     const uint64_t max_descendants;\n+    const bool m_include_partial_groups{false}; //! Include partial destination groups when avoid_reuse and there are full groups",
    "path": "src/wallet/coinselection.h",
    "position": null,
    "original_position": 4,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2a5a779542e8ac67011a2667ecfb776aa7c2af1e",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it's mostly as a belt-and-suspenders type of thing. Perhaps @kallewoof can shed some light on this.",
    "created_at": "2020-12-08T22:26:17Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538854472",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538854472"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538854472"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538854472/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 90,
    "side": "RIGHT",
    "in_reply_to_id": 537846829
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538854861",
    "pull_request_review_id": 547685428,
    "id": 538854861,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg1NDg2MQ==",
    "diff_hunk": "@@ -2792,215 +2790,167 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 21,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "9008dbf6a5a6e08fa4d7325d94ae022969409b2a",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Existing name, won't change for now.",
    "created_at": "2020-12-08T22:26:56Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538854861",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538854861"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538854861"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538854861/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2824,
    "side": "RIGHT",
    "in_reply_to_id": 537980091
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538907708",
    "pull_request_review_id": 547740514,
    "id": 538907708,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwNzcwOA==",
    "diff_hunk": "@@ -2792,215 +2790,167 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), nFeeRateNeeded.ToString(FeeEstimateMode::SAT_VB));\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.effective_fee.ToString(FeeEstimateMode::SAT_VB));\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 84,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "9008dbf6a5a6e08fa4d7325d94ae022969409b2a",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes.",
    "created_at": "2020-12-09T00:17:48Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538907708",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538907708"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538907708"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538907708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2833,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2916,
    "side": "RIGHT",
    "in_reply_to_id": 537982397
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538926154",
    "pull_request_review_id": 547759057,
    "id": 538926154,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyNjE1NA==",
    "diff_hunk": "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    const CAmount ev = output.txout.nValue - coin_fee;\n+\n+    // Filter for positive only here before adding the coin\n+    if (positive_only && ev <= 0) return;\n+\n     m_outputs.push_back(output);\n     CInputCoin& coin = m_outputs.back();\n-    coin.m_fee = coin.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(coin.m_input_bytes);\n+\n+    coin.m_fee = coin_fee;",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2ad1a94f10edaa34844b7d2628dfed23dc4d511a",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think `Insert` is a reasonable name for it. Everything that gets passed in ends up in the data structure.",
    "created_at": "2020-12-09T01:05:41Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538926154",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538926154"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538926154"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538926154/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 312,
    "side": "RIGHT",
    "in_reply_to_id": 536312209
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538926467",
    "pull_request_review_id": 547759379,
    "id": 538926467,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyNjQ2Nw==",
    "diff_hunk": "@@ -127,7 +127,7 @@ inline std::vector<OutputGroup>& GroupCoins(const std::vector<COutput>& coins)\n     static_groups.clear();\n     for (auto& coin : coins) {\n         static_groups.emplace_back();\n-        static_groups.back().Insert(coin.GetInputCoin(), coin.nDepth, coin.tx->m_amounts[CWalletTx::DEBIT].m_cached[ISMINE_SPENDABLE] && coin.tx->m_amounts[CWalletTx::DEBIT].m_value[ISMINE_SPENDABLE] == 1 /* HACK: we can't figure out the is_me flag so we use the conditions defined above; perhaps set safe to false for !fIsFromMe in add_coin() */, 0, 0);\n+        static_groups.back().Insert(coin.GetInputCoin(), coin.nDepth, coin.tx->m_amounts[CWalletTx::DEBIT].m_cached[ISMINE_SPENDABLE] && coin.tx->m_amounts[CWalletTx::DEBIT].m_value[ISMINE_SPENDABLE] == 1 /* HACK: we can't figure out the is_me flag so we use the conditions defined above; perhaps set safe to false for !fIsFromMe in add_coin() */, 0, 0, false);",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2ad1a94f10edaa34844b7d2628dfed23dc4d511a",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Prefer to leave it alone for now since we aren't really making related changes here.",
    "created_at": "2020-12-09T01:06:35Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538926467",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538926467"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538926467"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538926467/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 134,
    "side": "RIGHT",
    "in_reply_to_id": 537840093
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538926789",
    "pull_request_review_id": 547759681,
    "id": 538926789,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyNjc4OQ==",
    "diff_hunk": "@@ -4234,7 +4229,8 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                 group.m_ancestors = max_ancestors - 1;\n             }\n             // If the OutputGroup is not eligible, don't add it\n-            if (group.EligibleForSpending(filter)) groups.push_back(group);\n+            if (positive_only && group.effective_value <= 0) continue;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 70,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2ad1a94f10edaa34844b7d2628dfed23dc4d511a",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Meh. Belt-and-suspenders check.",
    "created_at": "2020-12-09T01:07:25Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538926789",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538926789"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538926789"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538926789/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4307,
    "side": "RIGHT",
    "in_reply_to_id": 537842659
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538927203",
    "pull_request_review_id": 547760089,
    "id": 538927203,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyNzIwMw==",
    "diff_hunk": "@@ -2360,34 +2360,35 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    if (coin_selection_params.use_bnb) {\n-        // Get long term estimate\n-        FeeCalculation feeCalc;\n-        CCoinControl temp;\n-        temp.m_confirm_target = 1008;\n-        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n+    // Calculate the fees for things that aren't inputs\n+    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 11,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "c314b098fefb28020c6ec185aab436e47cd2bc2c",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "We deal with the change fee later.",
    "created_at": "2020-12-09T01:08:29Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538927203",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538927203"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538927203"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538927203/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2364,
    "side": "RIGHT",
    "in_reply_to_id": 537851880
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538930149",
    "pull_request_review_id": 547762995,
    "id": 538930149,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzMDE0OQ==",
    "diff_hunk": "@@ -2360,34 +2360,35 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    if (coin_selection_params.use_bnb) {\n-        // Get long term estimate\n-        FeeCalculation feeCalc;\n-        CCoinControl temp;\n-        temp.m_confirm_target = 1008;\n-        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n+    // Calculate the fees for things that aren't inputs\n+    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-        // Get the feerate for effective value.\n-        // When subtracting the fee from the outputs, we want the effective feerate to be 0\n-        CFeeRate effective_feerate{0};\n-        if (!coin_selection_params.m_subtract_fee_outputs) {\n-            effective_feerate = coin_selection_params.effective_fee;\n-        }\n+    // Get long term estimate\n+    FeeCalculation feeCalc;\n+    CCoinControl temp;\n+    temp.m_confirm_target = 1008;\n+    CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n \n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, long_term_feerate, eligibility_filter, true /* positive_only */);\n+    // Get the feerate for effective value.\n+    // When subtracting the fee from the outputs, we want the effective feerate to be 0\n+    CFeeRate effective_feerate{0};\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        effective_feerate = coin_selection_params.effective_fee;\n+    }\n \n-        // Calculate cost of change\n-        CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+    // Calculate cost of change\n+    CAmount change_fee = coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+    CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + change_fee;\n \n-        // Calculate the fees for things that aren't inputs\n-        CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+    if (coin_selection_params.use_bnb) {\n+        std::vector<OutputGroup> positive_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, long_term_feerate, eligibility_filter, true /* positive_only */);\n         bnb_used = true;\n-        return SelectCoinsBnB(groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+        return SelectCoinsBnB(positive_groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n     } else {\n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, CFeeRate(0), CFeeRate(0), eligibility_filter, false /* positive_only */);\n-\n+        // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here.\n+        std::vector<OutputGroup> all_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, long_term_feerate, eligibility_filter, false /* positive_only */);\n         bnb_used = false;\n-        return KnapsackSolver(nTargetValue, groups, setCoinsRet, nValueRet);\n+        return KnapsackSolver(nTargetValue + not_input_fees, all_groups, setCoinsRet, nValueRet);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "c314b098fefb28020c6ec185aab436e47cd2bc2c",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The minimum change stuff is within `KnapsackSolver` itself.",
    "created_at": "2020-12-09T01:16:18Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538930149",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538930149"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538930149"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538930149/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2391,
    "side": "RIGHT",
    "in_reply_to_id": 537976831
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538931558",
    "pull_request_review_id": 547764428,
    "id": 538931558,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzMTU1OA==",
    "diff_hunk": "@@ -541,19 +541,20 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n           // Again, we only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n           for (int i = 0; i < RUN_TESTS; i++) {\n-            // picking 50 from 100 coins doesn't depend on the shuffle,\n+            // picking 50.5 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+            // Use 50.5 to be sure that BnB doesn't match\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n             BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n \n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n-                // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n+                // selecting 0.5 from 100 identical coins depends on the shuffle; this test will fail 1% of the time",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 29,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "8aa8ef25bb41f4082759768b5d839cb97fe27c64",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Because we prefer BnB if it works, the test would previously always use BnB because the coins were always `1 * COIN`. This change (and other similar changes to use a `0.5`) ensures that we cannot exactly match the target with the given coins so the `KnapsackSolver` is always used.",
    "created_at": "2020-12-09T01:19:48Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538931558",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538931558"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538931558"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538931558/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 555,
    "side": "RIGHT",
    "in_reply_to_id": 537978332
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538931603",
    "pull_request_review_id": 547764501,
    "id": 538931603,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzMTYwMw==",
    "diff_hunk": "@@ -2792,215 +2790,167 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), nFeeRateNeeded.ToString(FeeEstimateMode::SAT_VB));\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.effective_fee.ToString(FeeEstimateMode::SAT_VB));\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 84,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "9008dbf6a5a6e08fa4d7325d94ae022969409b2a",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes.",
    "created_at": "2020-12-09T01:20:00Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538931603",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538931603"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538931603"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538931603/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2833,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2916,
    "side": "RIGHT",
    "in_reply_to_id": 537982397
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538931902",
    "pull_request_review_id": 547764803,
    "id": 538931902,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzMTkwMg==",
    "diff_hunk": "@@ -2857,9 +2862,9 @@ bool CWallet::CreateTransactionInternal(\n \n                 // Never create dust outputs; if we would, just\n                 // add the dust to the fee.\n-                // When nChange is less than the cost of the change output,\n-                // send it to fees (this means BnB was used)\n-                if (IsDust(newTxOut, discard_rate) || nChange <= cost_of_change)\n+                // When the selected_eff is within the exact match range\n+                // (nValue + not_input_fees + cost_of_change), don't make change.\n+                if (IsDust(newTxOut, discard_rate) || selected_eff <= nValue + not_input_fees + cost_of_change)",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 21,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "16c1017083615b15c336dc08c59420ac80ec1769",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I believe we discussed changing this, but I decided to leave that for a followup refactor that cleans up this whole function.",
    "created_at": "2020-12-09T01:20:46Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538931902",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538931902"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538931902"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538931902/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2898,
    "side": "RIGHT",
    "in_reply_to_id": 537983513
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538932146",
    "pull_request_review_id": 547765041,
    "id": 538932146,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzMjE0Ng==",
    "diff_hunk": "@@ -4217,15 +4217,16 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                     // high amount of fees.\n                     if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n                         groups.push_back(it->second);\n-                        it->second = OutputGroup{};\n+                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n                         full_groups.insert(dst);\n                     }\n                     it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n                 } else {\n-                    gmap[dst].Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n+                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 60,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "369393868193ead9cf714792b8a043d6fda8cfc0",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done in the upstream pr.",
    "created_at": "2020-12-09T01:21:24Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538932146",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538932146"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538932146"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538932146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 4225,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 4226,
    "side": "RIGHT",
    "in_reply_to_id": 536209337
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538932179",
    "pull_request_review_id": 547765077,
    "id": 538932179,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzMjE3OQ==",
    "diff_hunk": "@@ -4226,8 +4219,10 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                     ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n                 }\n             } else {\n-                groups.emplace_back(effective_feerate, long_term_feerate);\n-                groups.back().Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                // This is for if each output gets it's own OutputGroup",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 60,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "b573d8f548fa556f797315d2b391781d77e089e5",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-12-09T01:21:30Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538932179",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538932179"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538932179"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538932179/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4222,
    "side": "RIGHT",
    "in_reply_to_id": 536293077
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538932225",
    "pull_request_review_id": 547765133,
    "id": 538932225,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzMjIyNQ==",
    "diff_hunk": "@@ -4238,7 +4233,8 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                 // Make this unattractive as we want coin selection to avoid it if possible\n                 group.m_ancestors = max_ancestors - 1;\n             }\n-            groups.push_back(group);\n+            // If the OutputGroup is not eligible, don't add it",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 72,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "b573d8f548fa556f797315d2b391781d77e089e5",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-12-09T01:21:36Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538932225",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538932225"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538932225"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538932225/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4236,
    "side": "RIGHT",
    "in_reply_to_id": 536294813
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538932613",
    "pull_request_review_id": 547765405,
    "id": 538932613,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzMjYxMw==",
    "diff_hunk": "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    const CAmount ev = output.txout.nValue - coin_fee;",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2ad1a94f10edaa34844b7d2628dfed23dc4d511a",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Meh. I think it's fine for now.",
    "created_at": "2020-12-09T01:22:20Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538932613",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538932613"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538932613"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/538932613/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 304,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 304,
    "side": "RIGHT",
    "in_reply_to_id": 536298600
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557025910",
    "pull_request_review_id": 567832068,
    "id": 557025910,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAyNTkxMA==",
    "diff_hunk": "@@ -62,9 +62,11 @@ struct CoinEligibilityFilter\n     const int conf_theirs;\n     const uint64_t max_ancestors;\n     const uint64_t max_descendants;\n+    const bool m_include_partial_groups{false}; //! Include partial destination groups when avoid_reuse and there are full groups",
    "path": "src/wallet/coinselection.h",
    "position": null,
    "original_position": 4,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2a5a779542e8ac67011a2667ecfb776aa7c2af1e",
    "user": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think the thought of use case here is: someone sends you money. Later on they track you by sending insignificant amounts to the same address. Two scenarios here:\r\n\r\n1. You've already spent from that address once. If you spend from it again, they can associate the two transactions to you*.\r\n2. You haven't spent from it once. By giving your coin selection algorithm a bunch of UTXO:s to select from, the chances are it will pick up the other ones in unrelated spends, which, again, lets them associate multiple UTXO:s with the target, you. This second part is avoided by simply always picking all or none of the outputs associated with a given address.\r\n\r\n(* this is avoided using the avoid reuse functionality, which ensures that UTXO:s associated with a given address are only included in transactions once, except when the user requests it)",
    "created_at": "2021-01-14T03:46:00Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r557025910",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557025910"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r557025910"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557025910/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 90,
    "side": "RIGHT",
    "in_reply_to_id": 537846829
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570343948",
    "pull_request_review_id": 583552750,
    "id": 570343948,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM0Mzk0OA==",
    "diff_hunk": "@@ -2437,12 +2429,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             if (coin.m_input_bytes <= 0) {\n                 return false; // Not solvable, can't estimate size for fee\n             }\n-            coin.effective_value = coin.txout.nValue - coin_selection_params.effective_fee.GetFee(coin.m_input_bytes);\n-            if (coin_selection_params.use_bnb) {\n-                value_to_select -= coin.effective_value;\n-            } else {\n-                value_to_select -= coin.txout.nValue;\n-            }\n+            coin.effective_value = coin.txout.nValue - (coin_selection_params.m_subtract_fee_outputs ? 0 : coin_selection_params.effective_fee.GetFee(coin.m_input_bytes));",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 83,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "ac86704d0f8724d5b7155e5d905294e795381f75",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "7865b70b60 I assume I'm confused but would have thought it would be this way around\r\n\r\n```suggestion\r\n            coin.effective_value = coin.txout.nValue - (coin_selection_params.m_subtract_fee_outputs ? coin_selection_params.effective_fee.GetFee(coin.m_input_bytes) : 0);\r\n```\r\nIt seems one of these two versions should fail but ` src/test/test_bitcoin -t coinselector_tests` passes with both.\r\n",
    "created_at": "2021-02-04T16:02:56Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r570343948",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570343948"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r570343948"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570343948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2459,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570375124",
    "pull_request_review_id": 583552750,
    "id": 570375124,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM3NTEyNA==",
    "diff_hunk": "@@ -48,28 +48,25 @@ struct {\n  * @param const std::vector<CInputCoin>& utxo_pool The set of UTXOs that we are choosing from.\n  *        These UTXOs will be sorted in descending order by effective value and the CInputCoins'\n  *        values are their effective values.\n- * @param const CAmount& target_value This is the value that we want to select. It is the lower\n+ * @param const CAmount& actual_target This is the value that we want to select. It is the lower\n  *        bound of the range.\n  * @param const CAmount& cost_of_change This is the cost of creating and spending a change output.\n- *        This plus target_value is the upper bound of the range.\n+ *        This plus actual_target is the upper bound of the range.",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "ac86704d0f8724d5b7155e5d905294e795381f75",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "695fbaa3 Not saying it needs to be addressed in this pull but keep in mind that `CAmount` is a cheaply copied type that should be passed by value for \"in\" params.\r\n\r\nAlso not directly related but ISTM the Doxygen part of the comments should be in the header file declaration. ",
    "created_at": "2021-02-04T16:42:57Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r570375124",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570375124"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r570375124"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570375124/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 55,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570382208",
    "pull_request_review_id": 583552750,
    "id": 570382208,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM4MjIwOA==",
    "diff_hunk": "@@ -2807,219 +2793,172 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), nFeeRateNeeded.ToString(FeeEstimateMode::SAT_VB));\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.effective_fee.ToString(FeeEstimateMode::SAT_VB));\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 231,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "ac86704d0f8724d5b7155e5d905294e795381f75",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "695fbaa3a nicety if you retouch\r\n```suggestion\r\n            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\r\n```",
    "created_at": "2021-02-04T16:51:42Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r570382208",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570382208"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r570382208"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570382208/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2888,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570440109",
    "pull_request_review_id": 583552750,
    "id": 570440109,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQ0MDEwOQ==",
    "diff_hunk": "@@ -2807,219 +2793,172 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), nFeeRateNeeded.ToString(FeeEstimateMode::SAT_VB));\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.effective_fee.ToString(FeeEstimateMode::SAT_VB));\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n-                    }\n-                } else {\n-                    bnb_used = false;\n-                }\n+            CAmount selected_eff = 0;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 266,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "ac86704d0f8724d5b7155e5d905294e795381f75",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "bc963a3c I'd find this helpful, if this is what the naming means\r\n```suggestion\r\n            CAmount selected_eff = 0; // selected effective value\r\n```\r\n",
    "created_at": "2021-02-04T18:11:58Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r570440109",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570440109"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r570440109"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570440109/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2894,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571177153",
    "pull_request_review_id": 584612932,
    "id": 571177153,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTE3NzE1Mw==",
    "diff_hunk": "@@ -2437,12 +2429,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             if (coin.m_input_bytes <= 0) {\n                 return false; // Not solvable, can't estimate size for fee\n             }\n-            coin.effective_value = coin.txout.nValue - coin_selection_params.effective_fee.GetFee(coin.m_input_bytes);\n-            if (coin_selection_params.use_bnb) {\n-                value_to_select -= coin.effective_value;\n-            } else {\n-                value_to_select -= coin.txout.nValue;\n-            }\n+            coin.effective_value = coin.txout.nValue - (coin_selection_params.m_subtract_fee_outputs ? 0 : coin_selection_params.effective_fee.GetFee(coin.m_input_bytes));",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 83,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "ac86704d0f8724d5b7155e5d905294e795381f75",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "When we are subtracting the fee from an output, we set the effective value to its real value.\r\n\r\nThe test to use is usually `test/functional/rpc_fundrawtransaction.py`.",
    "created_at": "2021-02-05T18:47:22Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r571177153",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571177153"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r571177153"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571177153/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2459,
    "side": "RIGHT",
    "in_reply_to_id": 570343948
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571471177",
    "pull_request_review_id": 584906416,
    "id": 571471177,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ3MTE3Nw==",
    "diff_hunk": "@@ -2437,12 +2429,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             if (coin.m_input_bytes <= 0) {\n                 return false; // Not solvable, can't estimate size for fee\n             }\n-            coin.effective_value = coin.txout.nValue - coin_selection_params.effective_fee.GetFee(coin.m_input_bytes);\n-            if (coin_selection_params.use_bnb) {\n-                value_to_select -= coin.effective_value;\n-            } else {\n-                value_to_select -= coin.txout.nValue;\n-            }\n+            coin.effective_value = coin.txout.nValue - (coin_selection_params.m_subtract_fee_outputs ? 0 : coin_selection_params.effective_fee.GetFee(coin.m_input_bytes));",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 83,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "ac86704d0f8724d5b7155e5d905294e795381f75",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks @achow101. Re-checked and `wallet_bumpfee.py` and `rpc_psbt.py` both fail with the wrong version.",
    "created_at": "2021-02-06T18:53:57Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r571471177",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571471177"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r571471177"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571471177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2459,
    "side": "RIGHT",
    "in_reply_to_id": 570343948
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605892349",
    "pull_request_review_id": 626579223,
    "id": 605892349,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg5MjM0OQ==",
    "diff_hunk": "@@ -2857,204 +2843,164 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n+\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n-                    }\n-                } else {\n-                    bnb_used = false;\n-                }\n+            CAmount selected_eff = 0;\n+            for (const CInputCoin& coin : setCoins) {\n+                selected_eff += coin.effective_value;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n+            const CAmount nChange = input_sum - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // The nChange when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n+                CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 262,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "8e2385fbb44b4a5498c9350ca5eacbe2afec5af4",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can be `const`. Also, this code was not immediately obvious to me, so I think a comment (and shorter lines) would be nice. \r\n```suggestion\r\n                // Cost of a change output = (size of output * this tx feerate) + (size of spending input * discard feerate)\r\n                const CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) \r\n                      + coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\r\n```",
    "created_at": "2021-04-01T19:22:34Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r605892349",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605892349"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r605892349"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605892349/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2905,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605895099",
    "pull_request_review_id": 626579223,
    "id": 605895099,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg5NTA5OQ==",
    "diff_hunk": "@@ -548,19 +542,20 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n           // Again, we only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n           for (int i = 0; i < RUN_TESTS; i++) {\n-            // picking 50 from 100 coins doesn't depend on the shuffle,\n+            // picking 50.5 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+            // Use 50.5 to be sure that BnB doesn't match\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params));",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 382,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "8e2385fbb44b4a5498c9350ca5eacbe2afec5af4",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "tiny nit, since you're touching\r\n```suggestion\r\n            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params));\r\n```",
    "created_at": "2021-04-01T19:27:53Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r605895099",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605895099"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r605895099"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605895099/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 548,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605897436",
    "pull_request_review_id": 626579223,
    "id": 605897436,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg5NzQzNg==",
    "diff_hunk": "@@ -541,19 +541,20 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n           // Again, we only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n           for (int i = 0; i < RUN_TESTS; i++) {\n-            // picking 50 from 100 coins doesn't depend on the shuffle,\n+            // picking 50.5 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+            // Use 50.5 to be sure that BnB doesn't match\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n             BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n \n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n-                // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n+                // selecting 0.5 from 100 identical coins depends on the shuffle; this test will fail 1% of the time",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 29,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "8aa8ef25bb41f4082759768b5d839cb97fe27c64",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think @Xekyo was referring to the \"this test will fail 1% of the time\" part? I was confused as well. Since you're touching the comment maybe elaborate on it too? This test is checking that the knapsack solver has some randomness and picks different coins on different invocations, but even such, we have a 1/100 chance of picking the exact same coins, so this test fails 1% of the time.",
    "created_at": "2021-04-01T19:32:09Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r605897436",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605897436"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r605897436"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605897436/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 555,
    "side": "RIGHT",
    "in_reply_to_id": 537978332
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605899886",
    "pull_request_review_id": 626579223,
    "id": 605899886,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg5OTg4Ng==",
    "diff_hunk": "@@ -2857,204 +2843,164 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n+\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 191,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "8e2385fbb44b4a5498c9350ca5eacbe2afec5af4",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "const all the things \ud83d\ude1d especially since this is _the_ part of the fee that doesn't change.\r\n```suggestion\r\n            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\r\n```",
    "created_at": "2021-04-01T19:37:03Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r605899886",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605899886"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r605899886"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605899886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2886,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605914857",
    "pull_request_review_id": 626579223,
    "id": 605914857,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTkxNDg1Nw==",
    "diff_hunk": "@@ -548,19 +542,20 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n           // Again, we only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n           for (int i = 0; i < RUN_TESTS; i++) {\n-            // picking 50 from 100 coins doesn't depend on the shuffle,\n+            // picking 50.5 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+            // Use 50.5 to be sure that BnB doesn't match",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 381,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "8e2385fbb44b4a5498c9350ca5eacbe2afec5af4",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In a493cbcb26: it seems a little hacky to use 50.5 to make it use the knapsack solver, why not just call `KnapsackSolver` directly since that's what you're testing?",
    "created_at": "2021-04-01T20:05:17Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r605914857",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605914857"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r605914857"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/605914857/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 547,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606010296",
    "pull_request_review_id": 626722598,
    "id": 606010296,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjAxMDI5Ng==",
    "diff_hunk": "@@ -541,19 +541,20 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n           // Again, we only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n           for (int i = 0; i < RUN_TESTS; i++) {\n-            // picking 50 from 100 coins doesn't depend on the shuffle,\n+            // picking 50.5 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+            // Use 50.5 to be sure that BnB doesn't match\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n             BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n \n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n-                // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n+                // selecting 0.5 from 100 identical coins depends on the shuffle; this test will fail 1% of the time",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 29,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "8aa8ef25bb41f4082759768b5d839cb97fe27c64",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I've rewritten this comment.",
    "created_at": "2021-04-02T00:13:38Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606010296",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606010296"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606010296"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606010296/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 555,
    "side": "RIGHT",
    "in_reply_to_id": 537978332
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606011579",
    "pull_request_review_id": 626724116,
    "id": 606011579,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjAxMTU3OQ==",
    "diff_hunk": "@@ -2807,219 +2793,172 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), nFeeRateNeeded.ToString(FeeEstimateMode::SAT_VB));\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.effective_fee.ToString(FeeEstimateMode::SAT_VB));\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 231,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "ac86704d0f8724d5b7155e5d905294e795381f75",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-04-02T00:18:31Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606011579",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606011579"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606011579"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606011579/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2888,
    "side": "RIGHT",
    "in_reply_to_id": 570382208
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606011588",
    "pull_request_review_id": 626724134,
    "id": 606011588,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjAxMTU4OA==",
    "diff_hunk": "@@ -2807,219 +2793,172 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), nFeeRateNeeded.ToString(FeeEstimateMode::SAT_VB));\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.effective_fee.ToString(FeeEstimateMode::SAT_VB));\n                 return false;\n             }\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n-                    }\n-                } else {\n-                    bnb_used = false;\n-                }\n+            CAmount selected_eff = 0;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 266,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "ac86704d0f8724d5b7155e5d905294e795381f75",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-04-02T00:18:35Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606011588",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606011588"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606011588"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606011588/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2894,
    "side": "RIGHT",
    "in_reply_to_id": 570440109
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606013490",
    "pull_request_review_id": 626726281,
    "id": 606013490,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjAxMzQ5MA==",
    "diff_hunk": "@@ -2857,204 +2843,164 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n+\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n-                    }\n-                } else {\n-                    bnb_used = false;\n-                }\n+            CAmount selected_eff = 0;\n+            for (const CInputCoin& coin : setCoins) {\n+                selected_eff += coin.effective_value;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n+            const CAmount nChange = input_sum - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // The nChange when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n+                CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 262,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "8e2385fbb44b4a5498c9350ca5eacbe2afec5af4",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added a comment. Also did the same split that was done in SelectCoinsMinConf.",
    "created_at": "2021-04-02T00:26:41Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606013490",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606013490"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606013490"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606013490/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2905,
    "side": "RIGHT",
    "in_reply_to_id": 605892349
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606013624",
    "pull_request_review_id": 626726410,
    "id": 606013624,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjAxMzYyNA==",
    "diff_hunk": "@@ -548,19 +542,20 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n           // Again, we only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n           for (int i = 0; i < RUN_TESTS; i++) {\n-            // picking 50 from 100 coins doesn't depend on the shuffle,\n+            // picking 50.5 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+            // Use 50.5 to be sure that BnB doesn't match\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params));",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 382,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "8e2385fbb44b4a5498c9350ca5eacbe2afec5af4",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This space is to make it line up with the line below, but it doesn't really matter. Done.",
    "created_at": "2021-04-02T00:27:16Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606013624",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606013624"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606013624"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606013624/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 548,
    "side": "RIGHT",
    "in_reply_to_id": 605895099
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606013649",
    "pull_request_review_id": 626726435,
    "id": 606013649,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjAxMzY0OQ==",
    "diff_hunk": "@@ -2857,204 +2843,164 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n+\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 191,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "8e2385fbb44b4a5498c9350ca5eacbe2afec5af4",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-04-02T00:27:23Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606013649",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606013649"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606013649"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606013649/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2886,
    "side": "RIGHT",
    "in_reply_to_id": 605899886
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606013684",
    "pull_request_review_id": 626726470,
    "id": 606013684,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjAxMzY4NA==",
    "diff_hunk": "@@ -548,19 +542,20 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n           // Again, we only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n           for (int i = 0; i < RUN_TESTS; i++) {\n-            // picking 50 from 100 coins doesn't depend on the shuffle,\n+            // picking 50.5 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+            // Use 50.5 to be sure that BnB doesn't match",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 381,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "8e2385fbb44b4a5498c9350ca5eacbe2afec5af4",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good idea, done.",
    "created_at": "2021-04-02T00:27:31Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606013684",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606013684"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606013684"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606013684/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 547,
    "side": "RIGHT",
    "in_reply_to_id": 605914857
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610767908",
    "pull_request_review_id": 632606081,
    "id": 610767908,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDc2NzkwOA==",
    "diff_hunk": "@@ -2466,12 +2461,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             if (coin.m_input_bytes <= 0) {\n                 return false; // Not solvable, can't estimate size for fee\n             }\n-            coin.effective_value = coin.txout.nValue - coin_selection_params.m_effective_feerate.GetFee(coin.m_input_bytes);\n-            if (coin_selection_params.use_bnb) {\n-                value_to_select -= coin.effective_value;\n-            } else {\n-                value_to_select -= coin.txout.nValue;\n-            }\n+            coin.effective_value = coin.txout.nValue - (coin_selection_params.m_subtract_fee_outputs ? 0 : coin_selection_params.m_effective_feerate.GetFee(coin.m_input_bytes));",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 75,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this approach muddles two concerns. We should generally filter inputs that have a negative effective feerate, even when we do not pay for the fees, but the recipient does.",
    "created_at": "2021-04-09T16:41:10Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r610767908",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610767908"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r610767908"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610767908/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2465,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610796222",
    "pull_request_review_id": 632606081,
    "id": 610796222,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDc5NjIyMg==",
    "diff_hunk": "@@ -230,14 +230,14 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     Shuffle(groups.begin(), groups.end(), FastRandomContext());\n \n     for (const OutputGroup& group : groups) {\n-        if (group.m_value == nTargetValue) {\n+        if (group.effective_value == nTargetValue) {",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "453c00c8eaffb7ee16b3b3232a6c3e39b1b52882",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since `OutputGroup` only exist ephemerally within the context of a specific coinselection, and the outputgroup knows the current feerate, would it perhaps make sense to make the calculation of an OutputGroup's effective value a member function of that struct?",
    "created_at": "2021-04-09T17:29:27Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r610796222",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610796222"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r610796222"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610796222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 230,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610803380",
    "pull_request_review_id": 632652689,
    "id": 610803380,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDgwMzM4MA==",
    "diff_hunk": "@@ -580,10 +582,8 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n-                // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n-                // run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(90*CENT, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(90*CENT, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+                BOOST_CHECK(KnapsackSolver(90*COIN, GroupCoins(vCoins), setCoinsRet, nValueRet));\n+                BOOST_CHECK(KnapsackSolver(90*COIN, GroupCoins(vCoins), setCoinsRet2, nValueRet));",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 46,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "d6d2a003630292d72c995f7ef3c829d0ac1c1eb1",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You've changed these from `90*CENT` to `90*COIN`?",
    "created_at": "2021-04-09T17:42:12Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r610803380",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610803380"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r610803380"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610803380/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 585,
    "start_side": "LEFT",
    "line": null,
    "original_line": 586,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610805632",
    "pull_request_review_id": 632606081,
    "id": 610805632,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDgwNTYzMg==",
    "diff_hunk": "@@ -550,17 +550,19 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n           for (int i = 0; i < RUN_TESTS; i++) {\n             // picking 50 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(vCoins), setCoinsRet, nValueRet));\n+            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(vCoins), setCoinsRet2, nValueRet));\n             BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n \n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n-                // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n-                // run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+                // Tests that the KnapsackSolver KnapsackSolver becomes a random selector with identical coins.",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 28,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "d6d2a003630292d72c995f7ef3c829d0ac1c1eb1",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: not identical, but equivalent:\r\n\"// Test that KnapsackSolver selects randomly from equivalent coins (same value and same input size).\"",
    "created_at": "2021-04-09T17:46:04Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r610805632",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610805632"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r610805632"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610805632/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 560,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610812158",
    "pull_request_review_id": 632606081,
    "id": 610812158,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDgxMjE1OA==",
    "diff_hunk": "@@ -2502,13 +2497,13 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         Shuffle(vCoins.begin(), vCoins.end(), FastRandomContext());\n     }\n     bool res = value_to_select <= 0 ||\n-        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 6, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 1, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true /* include_partial_groups */), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max(), std::numeric_limits<uint64_t>::max(), true /* include_partial_groups */), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 6, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params) ||\n+        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 1, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true /* include_partial_groups */), vCoins, setCoinsRet, nValueRet, coin_selection_params)) ||\n+        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max(), std::numeric_limits<uint64_t>::max(), true /* include_partial_groups */), vCoins, setCoinsRet, nValueRet, coin_selection_params));",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 51,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "7dd34c0929199872ccc1fe0cb8bc37b2baa6267b",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This single boolean statement appears to encode the entire eligibility back-off strategy for coin selection. It's very repetitive, since the only thing that changes are the eligibility filters.\r\n\r\nYou could define all variants of the eligibility filter, comment there how they're motivated, then make a single lambda call using that list. \r\nSince `res` is not const, you could split it into two blocks, where the second block is generally conditional on the user generally permittting unconfirmed change outputs for the latter six strategies.",
    "created_at": "2021-04-09T17:57:31Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r610812158",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610812158"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r610812158"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610812158/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2499,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2501,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617934064",
    "pull_request_review_id": 641600038,
    "id": 617934064,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzkzNDA2NA==",
    "diff_hunk": "@@ -550,17 +544,19 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n           for (int i = 0; i < RUN_TESTS; i++) {\n             // picking 50 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(vCoins), setCoinsRet, nValueRet));\n+            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(vCoins), setCoinsRet2, nValueRet));\n             BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n \n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n-                // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n-                // run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+                // Tests that the KnapsackSolver KnapsackSolver becomes a random selector with identical coins.",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 389,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n                // Tests that the KnapsackSolver becomes a random selector with identical coins.\r\n```",
    "created_at": "2021-04-21T22:29:56Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r617934064",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617934064"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r617934064"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617934064/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 554,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617948506",
    "pull_request_review_id": 641600038,
    "id": 617948506,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzk0ODUwNg==",
    "diff_hunk": "@@ -2848,205 +2846,164 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n-\n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        error = _(\"Insufficient funds\");\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+            const CAmount nChange = input_sum - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n+\n+                // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                // For creating the change output now, we use the effective feerate.\n+                // For spending the change output in the future, we use the discard feerate for now.\n+                // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n+\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When nChange is less than the cost of the change output,\n+                // send it to fees (this means BnB was used)\n+                if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || nChange <= cost_of_change)\n                 {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n-\n-                    CAmount cost_of_change = 0;\n-                    if (pick_new_inputs) {\n-                        // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n-                        // For creating the change output now, we use the effective feerate.\n-                        // For spending the change output in the future, we use the discard feerate for now.\n-                        // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n-                        CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n-                        cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n-                    }\n-\n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // When nChange is less than the cost of the change output,\n-                    // send it to fees (this means BnB was used)\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || nChange <= cost_of_change)\n+                    nChangePosInOut = -1;\n+                    assert(nFeeRet == 0);\n+                    nFeeRet = nChange;\n+                }\n+                else\n+                {\n+                    if (nChangePosInOut == -1)\n                     {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        // Insert change txn at random position:\n+                        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                     }\n-                    else\n+                    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                     {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            error = _(\"Change index out of range\");\n-                            return false;\n-                        }\n-\n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        error = _(\"Change index out of range\");\n+                        return false;\n                     }\n-                } else {\n-                    nChangePosInOut = -1;\n-                }\n \n-                // Dummy fill vin for maximum size estimation\n-                //\n-                for (const auto& coin : setCoins) {\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-                }\n-\n-                tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                nBytes = tx_sizes.first;\n-                if (nBytes < 0) {\n-                    error = _(\"Signing transaction failed\");\n-                    return false;\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, newTxOut);\n                 }\n+            } else {\n+                nChangePosInOut = -1;\n+            }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n-                }\n+            tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            nBytes = tx_sizes.first;\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n \n+            CAmount fee_needed = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n+            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+                return false;\n+            }\n+            if (nFeeRet < fee_needed) {\n+                nFeeRet = fee_needed;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 287,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "23c85ae91ea0a720b591cab8dfd20be72425ab31",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hm, shouldn't this be `nFeeRet = fee_needed - nFeeRet;` in case there is already a small dust output in `nFeeRet`?",
    "created_at": "2021-04-21T23:02:21Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r617948506",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617948506"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r617948506"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617948506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2990,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617952598",
    "pull_request_review_id": 641600038,
    "id": 617952598,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzk1MjU5OA==",
    "diff_hunk": "@@ -2393,44 +2393,39 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n }\n \n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> coins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    if (coin_selection_params.use_bnb) {\n-        // Get the feerate for effective value.\n-        // When subtracting the fee from the outputs, we want the effective feerate to be 0\n-        CFeeRate effective_feerate{0};\n-        if (!coin_selection_params.m_subtract_fee_outputs) {\n-            effective_feerate = coin_selection_params.m_effective_feerate;\n-        }\n-\n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n-\n-        // Calculate cost of change\n-        CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    // Get the feerate for effective value.\n+    // When subtracting the fee from the outputs, we want the effective feerate to be 0\n+    CFeeRate effective_feerate{0};\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        effective_feerate = coin_selection_params.m_effective_feerate;\n+    }\n \n-        // Calculate the fees for things that aren't inputs\n-        CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n-        bnb_used = true;\n-        return SelectCoinsBnB(groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n-    } else {\n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, CFeeRate(0), CFeeRate(0), eligibility_filter, false /* positive_only */);\n+    // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+    // For creating the change output now, we use the effective feerate.\n+    // For spending the change output in the future, we use the discard feerate for now.\n+    // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+    CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 40,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit\r\n```suggestion\r\n    const CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\r\n    const CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\r\n```",
    "created_at": "2021-04-21T23:10:13Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r617952598",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617952598"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r617952598"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617952598/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2412,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2413,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617956000",
    "pull_request_review_id": 641600038,
    "id": 617956000,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzk1NjAwMA==",
    "diff_hunk": "@@ -2857,204 +2846,169 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n+\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n-                    }\n-                } else {\n-                    bnb_used = false;\n-                }\n+            CAmount selected_eff = 0; // selected effective value\n+            for (const CInputCoin& coin : setCoins) {\n+                selected_eff += coin.effective_value;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+            const CAmount nChange = input_sum - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n+\n+                // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                // For creating the change output now, we use the effective feerate.\n+                // For spending the change output in the future, we use the discard feerate for now.\n+                // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 263,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit\r\n```suggestion\r\n                const CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\r\n                const CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\r\n```",
    "created_at": "2021-04-21T23:16:27Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r617956000",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617956000"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r617956000"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617956000/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2912,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2913,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617956840",
    "pull_request_review_id": 641600038,
    "id": 617956840,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzk1Njg0MA==",
    "diff_hunk": "@@ -2857,204 +2846,169 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n+\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n-                    }\n-                } else {\n-                    bnb_used = false;\n-                }\n+            CAmount selected_eff = 0; // selected effective value\n+            for (const CInputCoin& coin : setCoins) {\n+                selected_eff += coin.effective_value;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+            const CAmount nChange = input_sum - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n+\n+                // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                // For creating the change output now, we use the effective feerate.\n+                // For spending the change output in the future, we use the discard feerate for now.\n+                // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n+\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When the selected_eff is within the exact match range\n+                // (nValue + not_input_fees + cost_of_change), don't make change.\n+                if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || selected_eff <= nValue + not_input_fees + cost_of_change)\n                 {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n-\n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // The nChange when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n+                    nChangePosInOut = -1;\n+                    assert(nFeeRet == 0);\n+                    nFeeRet = nChange;\n+                }\n+                else\n+                {\n+                    if (nChangePosInOut == -1)\n                     {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        // Insert change txn at random position:\n+                        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                     }\n-                    else\n+                    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                     {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            error = _(\"Change index out of range\");\n-                            return false;\n-                        }\n-\n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        error = _(\"Change index out of range\");\n+                        return false;\n                     }\n-                } else {\n-                    nChangePosInOut = -1;\n-                }\n-\n-                // Dummy fill vin for maximum size estimation\n-                //\n-                for (const auto& coin : setCoins) {\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-                }\n \n-                tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                nBytes = tx_sizes.first;\n-                if (nBytes < 0) {\n-                    error = _(\"Signing transaction failed\");\n-                    return false;\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, newTxOut);\n                 }\n+            } else {\n+                nChangePosInOut = -1;\n+            }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n-                }\n+            tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            nBytes = tx_sizes.first;\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n \n+            CAmount fee_needed = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 384,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: could be moved below this if to where it is used",
    "created_at": "2021-04-21T23:18:35Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r617956840",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617956840"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r617956840"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617956840/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2958,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618790657",
    "pull_request_review_id": 632652689,
    "id": 618790657,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODc5MDY1Nw==",
    "diff_hunk": "@@ -2857,204 +2846,169 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n+\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n-                    }\n-                } else {\n-                    bnb_used = false;\n-                }\n+            CAmount selected_eff = 0; // selected effective value\n+            for (const CInputCoin& coin : setCoins) {\n+                selected_eff += coin.effective_value;\n+            }",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 248,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If you retouch, this would be nice\r\n```suggestion\r\n            // Total effective value of selected coins\r\n            const CAmount selected_eff = std::accumulate(setCoins.cbegin(), setCoins.cend(), 0,\r\n                [](CAmount sum, const auto& coin) { return sum + coin.effective_value; });\r\n```",
    "created_at": "2021-04-22T22:43:15Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618790657",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618790657"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618790657"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618790657/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2897,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2900,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618814784",
    "pull_request_review_id": 632652689,
    "id": 618814784,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgxNDc4NA==",
    "diff_hunk": "@@ -2857,204 +2846,169 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n+\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n-                    }\n-                } else {\n-                    bnb_used = false;\n-                }\n+            CAmount selected_eff = 0; // selected effective value\n+            for (const CInputCoin& coin : setCoins) {\n+                selected_eff += coin.effective_value;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+            const CAmount nChange = input_sum - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n+\n+                // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                // For creating the change output now, we use the effective feerate.\n+                // For spending the change output in the future, we use the discard feerate for now.\n+                // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n+\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When the selected_eff is within the exact match range\n+                // (nValue + not_input_fees + cost_of_change), don't make change.\n+                if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || selected_eff <= nValue + not_input_fees + cost_of_change)",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 269,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is mostly to confirm my understanding - ?\r\n```suggestion\r\n                // There are two cases in which we drop the change to fees:\r\n                // 1. The change output would be dust.\r\n                // 2. We found an \"exact match,\" i.e. the difference between the total effective value of the selected\r\n                // coins and nTargetValue is less than or equal to the cost of the change output.\r\n                if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) ||\r\n                    selected_eff - (nValue + not_input_fees) <= cost_of_change)\r\n```",
    "created_at": "2021-04-22T23:25:10Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618814784",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618814784"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618814784"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618814784/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2915,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2949,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618818186",
    "pull_request_review_id": 642773070,
    "id": 618818186,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgxODE4Ng==",
    "diff_hunk": "@@ -2502,13 +2497,13 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         Shuffle(vCoins.begin(), vCoins.end(), FastRandomContext());\n     }\n     bool res = value_to_select <= 0 ||\n-        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 6, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 1, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true /* include_partial_groups */), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max(), std::numeric_limits<uint64_t>::max(), true /* include_partial_groups */), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 6, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params) ||\n+        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 1, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true /* include_partial_groups */), vCoins, setCoinsRet, nValueRet, coin_selection_params)) ||\n+        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max(), std::numeric_limits<uint64_t>::max(), true /* include_partial_groups */), vCoins, setCoinsRet, nValueRet, coin_selection_params));",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 51,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "7dd34c0929199872ccc1fe0cb8bc37b2baa6267b",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Taking this as an opportunity to shill #21759 \ud83d\ude1b ",
    "created_at": "2021-04-22T23:35:22Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618818186",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618818186"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618818186"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618818186/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2499,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2501,
    "side": "RIGHT",
    "in_reply_to_id": 610812158
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618819613",
    "pull_request_review_id": 642775195,
    "id": 618819613,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgxOTYxMw==",
    "diff_hunk": "@@ -2466,12 +2461,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             if (coin.m_input_bytes <= 0) {\n                 return false; // Not solvable, can't estimate size for fee\n             }\n-            coin.effective_value = coin.txout.nValue - coin_selection_params.m_effective_feerate.GetFee(coin.m_input_bytes);\n-            if (coin_selection_params.use_bnb) {\n-                value_to_select -= coin.effective_value;\n-            } else {\n-                value_to_select -= coin.txout.nValue;\n-            }\n+            coin.effective_value = coin.txout.nValue - (coin_selection_params.m_subtract_fee_outputs ? 0 : coin_selection_params.m_effective_feerate.GetFee(coin.m_input_bytes));",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 75,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it may be good if `CInputCoin` kept track of both `nValue` and `n_effective_value` separately. In the case of recipient paying for the tx, we could use effective value for filtering, but `nValue` to determine whether sufficient funds have been selected.",
    "created_at": "2021-04-22T23:39:24Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618819613",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618819613"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618819613"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618819613/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2465,
    "side": "RIGHT",
    "in_reply_to_id": 610767908
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618820197",
    "pull_request_review_id": 642775878,
    "id": 618820197,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgyMDE5Nw==",
    "diff_hunk": "@@ -2466,12 +2461,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             if (coin.m_input_bytes <= 0) {\n                 return false; // Not solvable, can't estimate size for fee\n             }\n-            coin.effective_value = coin.txout.nValue - coin_selection_params.m_effective_feerate.GetFee(coin.m_input_bytes);\n-            if (coin_selection_params.use_bnb) {\n-                value_to_select -= coin.effective_value;\n-            } else {\n-                value_to_select -= coin.txout.nValue;\n-            }\n+            coin.effective_value = coin.txout.nValue - (coin_selection_params.m_subtract_fee_outputs ? 0 : coin_selection_params.m_effective_feerate.GetFee(coin.m_input_bytes));",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 75,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Then also, `effective_value` wouldn't need to be instantiated with `nValue` which I thought was pretty surprising.",
    "created_at": "2021-04-22T23:41:14Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618820197",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618820197"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618820197"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618820197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2465,
    "side": "RIGHT",
    "in_reply_to_id": 610767908
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618831144",
    "pull_request_review_id": 642794245,
    "id": 618831144,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgzMTE0NA==",
    "diff_hunk": "@@ -49,28 +49,25 @@ struct {\n  * @param const std::vector<CInputCoin>& utxo_pool The set of UTXOs that we are choosing from.\n  *        These UTXOs will be sorted in descending order by effective value and the CInputCoins'\n  *        values are their effective values.\n- * @param const CAmount& target_value This is the value that we want to select. It is the lower\n+ * @param const CAmount& actual_target This is the value that we want to select. It is the lower",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "da9adea99832fed0d505028e205e35f698822e14",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Perhaps consider calling this `selection_target` or something else that ties it more strongly to the context.",
    "created_at": "2021-04-23T00:16:47Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618831144",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618831144"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618831144"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618831144/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 52,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618832133",
    "pull_request_review_id": 642797692,
    "id": 618832133,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgzMjEzMw==",
    "diff_hunk": "@@ -49,28 +49,25 @@ struct {\n  * @param const std::vector<CInputCoin>& utxo_pool The set of UTXOs that we are choosing from.\n  *        These UTXOs will be sorted in descending order by effective value and the CInputCoins'\n  *        values are their effective values.\n- * @param const CAmount& target_value This is the value that we want to select. It is the lower\n+ * @param const CAmount& actual_target This is the value that we want to select. It is the lower",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "da9adea99832fed0d505028e205e35f698822e14",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Although in that case `nTargetValue` should perhaps also be renamed to something like `selection_target_with_minchange`?",
    "created_at": "2021-04-23T00:19:14Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618832133",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618832133"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618832133"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618832133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 52,
    "side": "RIGHT",
    "in_reply_to_id": 618831144
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619358115",
    "pull_request_review_id": 643483310,
    "id": 619358115,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTM1ODExNQ==",
    "diff_hunk": "@@ -2502,13 +2497,13 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         Shuffle(vCoins.begin(), vCoins.end(), FastRandomContext());\n     }\n     bool res = value_to_select <= 0 ||\n-        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 6, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 1, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true /* include_partial_groups */), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max(), std::numeric_limits<uint64_t>::max(), true /* include_partial_groups */), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 6, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params) ||\n+        SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 1, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true /* include_partial_groups */), vCoins, setCoinsRet, nValueRet, coin_selection_params)) ||\n+        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max(), std::numeric_limits<uint64_t>::max(), true /* include_partial_groups */), vCoins, setCoinsRet, nValueRet, coin_selection_params));",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 51,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "7dd34c0929199872ccc1fe0cb8bc37b2baa6267b",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'll leave this to #21759 to clean up.",
    "created_at": "2021-04-23T16:41:16Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619358115",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619358115"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619358115"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619358115/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2499,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2501,
    "side": "RIGHT",
    "in_reply_to_id": 610812158
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619429741",
    "pull_request_review_id": 643576362,
    "id": 619429741,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQyOTc0MQ==",
    "diff_hunk": "@@ -2848,205 +2846,164 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n-\n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        error = _(\"Insufficient funds\");\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+            const CAmount nChange = input_sum - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n+\n+                // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                // For creating the change output now, we use the effective feerate.\n+                // For spending the change output in the future, we use the discard feerate for now.\n+                // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n+\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When nChange is less than the cost of the change output,\n+                // send it to fees (this means BnB was used)\n+                if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || nChange <= cost_of_change)\n                 {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n-\n-                    CAmount cost_of_change = 0;\n-                    if (pick_new_inputs) {\n-                        // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n-                        // For creating the change output now, we use the effective feerate.\n-                        // For spending the change output in the future, we use the discard feerate for now.\n-                        // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n-                        CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n-                        cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n-                    }\n-\n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // When nChange is less than the cost of the change output,\n-                    // send it to fees (this means BnB was used)\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || nChange <= cost_of_change)\n+                    nChangePosInOut = -1;\n+                    assert(nFeeRet == 0);\n+                    nFeeRet = nChange;\n+                }\n+                else\n+                {\n+                    if (nChangePosInOut == -1)\n                     {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        // Insert change txn at random position:\n+                        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                     }\n-                    else\n+                    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                     {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            error = _(\"Change index out of range\");\n-                            return false;\n-                        }\n-\n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        error = _(\"Change index out of range\");\n+                        return false;\n                     }\n-                } else {\n-                    nChangePosInOut = -1;\n-                }\n \n-                // Dummy fill vin for maximum size estimation\n-                //\n-                for (const auto& coin : setCoins) {\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-                }\n-\n-                tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                nBytes = tx_sizes.first;\n-                if (nBytes < 0) {\n-                    error = _(\"Signing transaction failed\");\n-                    return false;\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, newTxOut);\n                 }\n+            } else {\n+                nChangePosInOut = -1;\n+            }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n-                }\n+            tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            nBytes = tx_sizes.first;\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n \n+            CAmount fee_needed = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n+            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+                return false;\n+            }\n+            if (nFeeRet < fee_needed) {\n+                nFeeRet = fee_needed;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 287,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "23c85ae91ea0a720b591cab8dfd20be72425ab31",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No, `nFeeRet` needs to be the total amount in fees, and whatever small change that is being burned as fees is part of that. Furthermore, if this line is reached and we are not subtracting fee from the outputs, then we won't have selected enough value to even cover the fees, and that would be a problem. If we are subtracting the fee from the outputs, then it is possible that we end up overpaying on the fees since the amount that we use for that calculation will include the small change being thrown away.\r\n\r\nSo I have added an `else` to give an error if we reach this line without a change output, and changed the subtract fee from outputs calculation to not include `nChange`.\r\n\r\nAll of this fee calculation stuff probably could be cleaned up (and overhauled) but I would prefer to do that in a followup.",
    "created_at": "2021-04-23T18:46:27Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619429741",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619429741"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619429741"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619429741/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2990,
    "side": "RIGHT",
    "in_reply_to_id": 617948506
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619429785",
    "pull_request_review_id": 643576433,
    "id": 619429785,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQyOTc4NQ==",
    "diff_hunk": "@@ -2857,204 +2846,169 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n+\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n-                    }\n-                } else {\n-                    bnb_used = false;\n-                }\n+            CAmount selected_eff = 0; // selected effective value\n+            for (const CInputCoin& coin : setCoins) {\n+                selected_eff += coin.effective_value;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+            const CAmount nChange = input_sum - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n+\n+                // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                // For creating the change output now, we use the effective feerate.\n+                // For spending the change output in the future, we use the discard feerate for now.\n+                // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n+\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When the selected_eff is within the exact match range\n+                // (nValue + not_input_fees + cost_of_change), don't make change.\n+                if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || selected_eff <= nValue + not_input_fees + cost_of_change)\n                 {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n-\n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // The nChange when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n+                    nChangePosInOut = -1;\n+                    assert(nFeeRet == 0);\n+                    nFeeRet = nChange;\n+                }\n+                else\n+                {\n+                    if (nChangePosInOut == -1)\n                     {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        // Insert change txn at random position:\n+                        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                     }\n-                    else\n+                    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                     {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            error = _(\"Change index out of range\");\n-                            return false;\n-                        }\n-\n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        error = _(\"Change index out of range\");\n+                        return false;\n                     }\n-                } else {\n-                    nChangePosInOut = -1;\n-                }\n-\n-                // Dummy fill vin for maximum size estimation\n-                //\n-                for (const auto& coin : setCoins) {\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-                }\n \n-                tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                nBytes = tx_sizes.first;\n-                if (nBytes < 0) {\n-                    error = _(\"Signing transaction failed\");\n-                    return false;\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, newTxOut);\n                 }\n+            } else {\n+                nChangePosInOut = -1;\n+            }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n-                }\n+            tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            nBytes = tx_sizes.first;\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n \n+            CAmount fee_needed = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 384,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is actually in the correct spot because the `if ` below is to handle fee estimation failure. However this line is actually incorrect because we're supposed to be using the `coin_selection_params.m_effective_feerate` that we had retrieved at the top of the function. Changed it to be using that.",
    "created_at": "2021-04-23T18:46:33Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619429785",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619429785"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619429785"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619429785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2958,
    "side": "RIGHT",
    "in_reply_to_id": 617956840
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619429900",
    "pull_request_review_id": 643576554,
    "id": 619429900,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQyOTkwMA==",
    "diff_hunk": "@@ -550,17 +544,19 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n           for (int i = 0; i < RUN_TESTS; i++) {\n             // picking 50 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(vCoins), setCoinsRet, nValueRet));\n+            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(vCoins), setCoinsRet2, nValueRet));\n             BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n \n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n-                // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n-                // run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+                // Tests that the KnapsackSolver KnapsackSolver becomes a random selector with identical coins.",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 389,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Changed the comment.",
    "created_at": "2021-04-23T18:46:44Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619429900",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619429900"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619429900"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619429900/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 554,
    "side": "RIGHT",
    "in_reply_to_id": 617934064
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619429964",
    "pull_request_review_id": 643576649,
    "id": 619429964,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQyOTk2NA==",
    "diff_hunk": "@@ -2393,44 +2393,39 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n }\n \n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> coins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    if (coin_selection_params.use_bnb) {\n-        // Get the feerate for effective value.\n-        // When subtracting the fee from the outputs, we want the effective feerate to be 0\n-        CFeeRate effective_feerate{0};\n-        if (!coin_selection_params.m_subtract_fee_outputs) {\n-            effective_feerate = coin_selection_params.m_effective_feerate;\n-        }\n-\n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n-\n-        // Calculate cost of change\n-        CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    // Get the feerate for effective value.\n+    // When subtracting the fee from the outputs, we want the effective feerate to be 0\n+    CFeeRate effective_feerate{0};\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        effective_feerate = coin_selection_params.m_effective_feerate;\n+    }\n \n-        // Calculate the fees for things that aren't inputs\n-        CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n-        bnb_used = true;\n-        return SelectCoinsBnB(groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n-    } else {\n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, CFeeRate(0), CFeeRate(0), eligibility_filter, false /* positive_only */);\n+    // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+    // For creating the change output now, we use the effective feerate.\n+    // For spending the change output in the future, we use the discard feerate for now.\n+    // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+    CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 40,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-04-23T18:46:52Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619429964",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619429964"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619429964"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619429964/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2412,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2413,
    "side": "RIGHT",
    "in_reply_to_id": 617952598
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619429998",
    "pull_request_review_id": 643576707,
    "id": 619429998,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQyOTk5OA==",
    "diff_hunk": "@@ -2857,204 +2846,169 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n+\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n-                    }\n-                } else {\n-                    bnb_used = false;\n-                }\n+            CAmount selected_eff = 0; // selected effective value\n+            for (const CInputCoin& coin : setCoins) {\n+                selected_eff += coin.effective_value;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+            const CAmount nChange = input_sum - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n+\n+                // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                // For creating the change output now, we use the effective feerate.\n+                // For spending the change output in the future, we use the discard feerate for now.\n+                // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 263,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-04-23T18:46:58Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619429998",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619429998"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619429998"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619429998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2912,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2913,
    "side": "RIGHT",
    "in_reply_to_id": 617956000
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619430139",
    "pull_request_review_id": 643576896,
    "id": 619430139,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQzMDEzOQ==",
    "diff_hunk": "@@ -580,10 +582,8 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n-                // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n-                // run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(90*CENT, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(90*CENT, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+                BOOST_CHECK(KnapsackSolver(90*COIN, GroupCoins(vCoins), setCoinsRet, nValueRet));\n+                BOOST_CHECK(KnapsackSolver(90*COIN, GroupCoins(vCoins), setCoinsRet2, nValueRet));",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 46,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "d6d2a003630292d72c995f7ef3c829d0ac1c1eb1",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oops, changed back.",
    "created_at": "2021-04-23T18:47:14Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619430139",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619430139"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619430139"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619430139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 585,
    "start_side": "LEFT",
    "line": null,
    "original_line": 586,
    "side": "RIGHT",
    "in_reply_to_id": 610803380
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619430224",
    "pull_request_review_id": 643576970,
    "id": 619430224,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQzMDIyNA==",
    "diff_hunk": "@@ -2857,204 +2846,169 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n+\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n-                    }\n-                } else {\n-                    bnb_used = false;\n-                }\n+            CAmount selected_eff = 0; // selected effective value\n+            for (const CInputCoin& coin : setCoins) {\n+                selected_eff += coin.effective_value;\n+            }",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 248,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-04-23T18:47:21Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619430224",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619430224"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619430224"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619430224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2897,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2900,
    "side": "RIGHT",
    "in_reply_to_id": 618790657
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619430386",
    "pull_request_review_id": 643577163,
    "id": 619430386,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQzMDM4Ng==",
    "diff_hunk": "@@ -2857,204 +2846,169 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n+\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n-                    }\n-                } else {\n-                    bnb_used = false;\n-                }\n+            CAmount selected_eff = 0; // selected effective value\n+            for (const CInputCoin& coin : setCoins) {\n+                selected_eff += coin.effective_value;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+            const CAmount nChange = input_sum - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n+\n+                // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                // For creating the change output now, we use the effective feerate.\n+                // For spending the change output in the future, we use the discard feerate for now.\n+                // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n+\n+                // Never create dust outputs; if we would, just\n+                // add the dust to the fee.\n+                // When the selected_eff is within the exact match range\n+                // (nValue + not_input_fees + cost_of_change), don't make change.\n+                if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || selected_eff <= nValue + not_input_fees + cost_of_change)",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 269,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, that is correct. I've changed the comment to be similar.",
    "created_at": "2021-04-23T18:47:36Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619430386",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619430386"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619430386"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619430386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2915,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2949,
    "side": "RIGHT",
    "in_reply_to_id": 618814784
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619430632",
    "pull_request_review_id": 643577493,
    "id": 619430632,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQzMDYzMg==",
    "diff_hunk": "@@ -550,17 +550,19 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n           for (int i = 0; i < RUN_TESTS; i++) {\n             // picking 50 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(vCoins), setCoinsRet, nValueRet));\n+            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(vCoins), setCoinsRet2, nValueRet));\n             BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n \n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n-                // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n-                // run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+                // Tests that the KnapsackSolver KnapsackSolver becomes a random selector with identical coins.",
    "path": "src/wallet/test/coinselector_tests.cpp",
    "position": null,
    "original_position": 28,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "d6d2a003630292d72c995f7ef3c829d0ac1c1eb1",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-04-23T18:48:02Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619430632",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619430632"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619430632"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619430632/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 560,
    "side": "RIGHT",
    "in_reply_to_id": 610805632
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619430700",
    "pull_request_review_id": 643577601,
    "id": 619430700,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQzMDcwMA==",
    "diff_hunk": "@@ -49,28 +49,25 @@ struct {\n  * @param const std::vector<CInputCoin>& utxo_pool The set of UTXOs that we are choosing from.\n  *        These UTXOs will be sorted in descending order by effective value and the CInputCoins'\n  *        values are their effective values.\n- * @param const CAmount& target_value This is the value that we want to select. It is the lower\n+ * @param const CAmount& actual_target This is the value that we want to select. It is the lower",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "da9adea99832fed0d505028e205e35f698822e14",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-04-23T18:48:12Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619430700",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619430700"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619430700"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619430700/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 52,
    "side": "RIGHT",
    "in_reply_to_id": 618831144
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619451160",
    "pull_request_review_id": 643604691,
    "id": 619451160,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQ1MTE2MA==",
    "diff_hunk": "@@ -2466,12 +2461,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             if (coin.m_input_bytes <= 0) {\n                 return false; // Not solvable, can't estimate size for fee\n             }\n-            coin.effective_value = coin.txout.nValue - coin_selection_params.m_effective_feerate.GetFee(coin.m_input_bytes);\n-            if (coin_selection_params.use_bnb) {\n-                value_to_select -= coin.effective_value;\n-            } else {\n-                value_to_select -= coin.txout.nValue;\n-            }\n+            coin.effective_value = coin.txout.nValue - (coin_selection_params.m_subtract_fee_outputs ? 0 : coin_selection_params.m_effective_feerate.GetFee(coin.m_input_bytes));",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 75,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "4ac1adda9914d845aaea5804af4801ffec53c701",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This particular section is for pre-selected inputs, so we don't filter here. However I do agree that changing the effective_feerate depending on whether we are subtracting the fee from the outputs doesn't quite make sense. So I've changed this back to subtract the correct value from `value_to_select` based on `coin_selection_params.m_subtract_fee_outputs`.\r\n\r\n> Then also, `effective_value` wouldn't need to be instantiated with `nValue` which I thought was pretty surprising.\r\n\r\nI don't think that is necessarily true.",
    "created_at": "2021-04-23T19:29:00Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619451160",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619451160"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619451160"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619451160/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2465,
    "side": "RIGHT",
    "in_reply_to_id": 610767908
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619451688",
    "pull_request_review_id": 643605413,
    "id": 619451688,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQ1MTY4OA==",
    "diff_hunk": "@@ -230,14 +230,14 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     Shuffle(groups.begin(), groups.end(), FastRandomContext());\n \n     for (const OutputGroup& group : groups) {\n-        if (group.m_value == nTargetValue) {\n+        if (group.effective_value == nTargetValue) {",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "453c00c8eaffb7ee16b3b3232a6c3e39b1b52882",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> would it perhaps make sense to make the calculation of an OutputGroup's effective value a member function of that struct?\r\n\r\nI don't think so.\r\n\r\nHowever I have changed `OutputGroup` to have a member function which returns either `m_value` or `effective_value` depending on the coin selection parameters which `OutputGroup` now has a copy of.",
    "created_at": "2021-04-23T19:30:07Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619451688",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619451688"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619451688"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619451688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 230,
    "side": "RIGHT",
    "in_reply_to_id": 610796222
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619673387",
    "pull_request_review_id": 644042590,
    "id": 619673387,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTY3MzM4Nw==",
    "diff_hunk": "@@ -79,21 +104,20 @@ struct OutputGroup\n     size_t m_descendants{0};\n     CAmount effective_value{0};\n     CAmount fee{0};\n-    CFeeRate m_effective_feerate{0};\n     CAmount long_term_fee{0};\n-    CFeeRate m_long_term_feerate{0};\n+    CoinSelectionParams m_cs_params;\n \n     OutputGroup() {}\n-    OutputGroup(const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate) :\n-        m_effective_feerate(effective_feerate),\n-        m_long_term_feerate(long_term_feerate)\n+    OutputGroup(const CoinSelectionParams& params) :\n+        m_cs_params(params)\n     {}\n \n     void Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only);\n     bool EligibleForSpending(const CoinEligibilityFilter& eligibility_filter) const;\n+    CAmount GetSelectionAmount() const;\n };\n \n-bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees);\n+bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& actual_target, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret);",
    "path": "src/wallet/coinselection.h",
    "position": null,
    "original_position": 55,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "326db920e24736581d0eb2ce555771c57101dc1b",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: In the implementation it's now `selection_target` instead of `actual_target`.",
    "created_at": "2021-04-24T15:29:10Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619673387",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619673387"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619673387"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619673387/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 159,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623105073",
    "pull_request_review_id": 648276060,
    "id": 623105073,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzEwNTA3Mw==",
    "diff_hunk": "@@ -79,21 +104,20 @@ struct OutputGroup\n     size_t m_descendants{0};\n     CAmount effective_value{0};\n     CAmount fee{0};\n-    CFeeRate m_effective_feerate{0};\n     CAmount long_term_fee{0};\n-    CFeeRate m_long_term_feerate{0};\n+    CoinSelectionParams m_cs_params;",
    "path": "src/wallet/coinselection.h",
    "position": null,
    "original_position": 39,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "326db920e24736581d0eb2ce555771c57101dc1b",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "hm, not sure how I feel about having a `CoinSelectionParams` in every single `OutputGroup`... could it just have a `GetSelectionAmount(subtract_fee_outputs)` or something?",
    "created_at": "2021-04-29T14:26:27Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623105073",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623105073"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623105073"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623105073/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 147,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623280163",
    "pull_request_review_id": 648507884,
    "id": 623280163,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzI4MDE2Mw==",
    "diff_hunk": "@@ -79,21 +104,20 @@ struct OutputGroup\n     size_t m_descendants{0};\n     CAmount effective_value{0};\n     CAmount fee{0};\n-    CFeeRate m_effective_feerate{0};\n     CAmount long_term_fee{0};\n-    CFeeRate m_long_term_feerate{0};\n+    CoinSelectionParams m_cs_params;",
    "path": "src/wallet/coinselection.h",
    "position": null,
    "original_position": 39,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "326db920e24736581d0eb2ce555771c57101dc1b",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Currently neither of the actual coin selection functions (which are the ones that call `GetSelectionAmount` are aware of subtract fee from outputs. I decided to go this route of including `CoinSelectionParams` in the `OutputGroup`s because it reduces the number of parameters that we need to pass to both `GroupOutputs` and the `OutputGroup` constructor. Since the `CoinSelectionParams` contain the effective feerate and the long term feerate, it also makes it so that the `OutputGroup` does not need to track those feerates separately.",
    "created_at": "2021-04-29T18:09:51Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623280163",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623280163"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623280163"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623280163/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 147,
    "side": "RIGHT",
    "in_reply_to_id": 623105073
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623280942",
    "pull_request_review_id": 648508956,
    "id": 623280942,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzI4MDk0Mg==",
    "diff_hunk": "@@ -79,21 +104,20 @@ struct OutputGroup\n     size_t m_descendants{0};\n     CAmount effective_value{0};\n     CAmount fee{0};\n-    CFeeRate m_effective_feerate{0};\n     CAmount long_term_fee{0};\n-    CFeeRate m_long_term_feerate{0};\n+    CoinSelectionParams m_cs_params;\n \n     OutputGroup() {}\n-    OutputGroup(const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate) :\n-        m_effective_feerate(effective_feerate),\n-        m_long_term_feerate(long_term_feerate)\n+    OutputGroup(const CoinSelectionParams& params) :\n+        m_cs_params(params)\n     {}\n \n     void Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only);\n     bool EligibleForSpending(const CoinEligibilityFilter& eligibility_filter) const;\n+    CAmount GetSelectionAmount() const;\n };\n \n-bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees);\n+bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& actual_target, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret);",
    "path": "src/wallet/coinselection.h",
    "position": null,
    "original_position": 55,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "326db920e24736581d0eb2ce555771c57101dc1b",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-04-29T18:11:01Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623280942",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623280942"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623280942"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623280942/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 159,
    "side": "RIGHT",
    "in_reply_to_id": 619673387
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623315345",
    "pull_request_review_id": 648552564,
    "id": 623315345,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzMxNTM0NQ==",
    "diff_hunk": "@@ -79,21 +104,20 @@ struct OutputGroup\n     size_t m_descendants{0};\n     CAmount effective_value{0};\n     CAmount fee{0};\n-    CFeeRate m_effective_feerate{0};\n     CAmount long_term_fee{0};\n-    CFeeRate m_long_term_feerate{0};\n+    CoinSelectionParams m_cs_params;",
    "path": "src/wallet/coinselection.h",
    "position": null,
    "original_position": 39,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "326db920e24736581d0eb2ce555771c57101dc1b",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "But now every single `COutputGroup` has a copy of `CoinSelectionParams` (and afaik this would be the same across all `COuputGroup`s for a coin selection). That's a lot of extra space just for 2 feerates.\r\n\r\nIt also seems like an API violation for the groups of UTXOs to have so much extra information about coin selection (e.g. the size of change output spend). I still think callers could provide those as arguments in `group.Insert()`, `group.GetSelectionAmount()`, etc.",
    "created_at": "2021-04-29T19:02:21Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623315345",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623315345"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623315345"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623315345/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 147,
    "side": "RIGHT",
    "in_reply_to_id": 623105073
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623330410",
    "pull_request_review_id": 648571725,
    "id": 623330410,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzMzMDQxMA==",
    "diff_hunk": "@@ -79,21 +104,20 @@ struct OutputGroup\n     size_t m_descendants{0};\n     CAmount effective_value{0};\n     CAmount fee{0};\n-    CFeeRate m_effective_feerate{0};\n     CAmount long_term_fee{0};\n-    CFeeRate m_long_term_feerate{0};\n+    CoinSelectionParams m_cs_params;",
    "path": "src/wallet/coinselection.h",
    "position": null,
    "original_position": 39,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "326db920e24736581d0eb2ce555771c57101dc1b",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Making it a `const CoinSelectionParams&` would avoid having so many copies.\r\n\r\nOf the 8 parameters in `CoinSelectionParams`, it's an even split between the ones relevant to `OutputGroup`s and `GroupOutputs`. 4 of them (`m_effective_feerate`, `m_long_term_feerate`, `m_subtract_fee_outputs`, and `m_avoid_partial_spends`) are used by `GroupOutputs`. I don't think it's that much of a layer violation. Alternatively, we can still pass in `CoinSelectionParams` and just copy out the parameters that we care about?",
    "created_at": "2021-04-29T19:27:09Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623330410",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623330410"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623330410"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623330410/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 147,
    "side": "RIGHT",
    "in_reply_to_id": 623105073
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623377334",
    "pull_request_review_id": 648629817,
    "id": 623377334,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzM3NzMzNA==",
    "diff_hunk": "@@ -79,21 +104,20 @@ struct OutputGroup\n     size_t m_descendants{0};\n     CAmount effective_value{0};\n     CAmount fee{0};\n-    CFeeRate m_effective_feerate{0};\n     CAmount long_term_fee{0};\n-    CFeeRate m_long_term_feerate{0};\n+    CoinSelectionParams m_cs_params;",
    "path": "src/wallet/coinselection.h",
    "position": null,
    "original_position": 39,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "326db920e24736581d0eb2ce555771c57101dc1b",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Alternatively, we can still pass in CoinSelectionParams and just copy out the parameters that we care about?\r\n\r\nThis sounds like a better option to me",
    "created_at": "2021-04-29T20:30:26Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623377334",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623377334"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623377334"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623377334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 147,
    "side": "RIGHT",
    "in_reply_to_id": 623105073
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623513100",
    "pull_request_review_id": 648782929,
    "id": 623513100,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzUxMzEwMA==",
    "diff_hunk": "@@ -79,21 +104,20 @@ struct OutputGroup\n     size_t m_descendants{0};\n     CAmount effective_value{0};\n     CAmount fee{0};\n-    CFeeRate m_effective_feerate{0};\n     CAmount long_term_fee{0};\n-    CFeeRate m_long_term_feerate{0};\n+    CoinSelectionParams m_cs_params;",
    "path": "src/wallet/coinselection.h",
    "position": null,
    "original_position": 39,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "326db920e24736581d0eb2ce555771c57101dc1b",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-04-30T00:40:32Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623513100",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623513100"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623513100"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623513100/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 147,
    "side": "RIGHT",
    "in_reply_to_id": 623105073
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624047889",
    "pull_request_review_id": 649437805,
    "id": 624047889,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDA0Nzg4OQ==",
    "diff_hunk": "@@ -230,14 +230,14 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     Shuffle(groups.begin(), groups.end(), FastRandomContext());\n \n     for (const OutputGroup& group : groups) {\n-        if (group.m_value == nTargetValue) {\n+        if (group.effective_value == nTargetValue) {",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "453c00c8eaffb7ee16b3b3232a6c3e39b1b52882",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The `output_group` interpreting the context of the coin selection seems odd.  Wouldn't it make more sense to apply the coin selection parameter at the place that retrieves either `effective_value` or `m_value`?",
    "created_at": "2021-04-30T17:33:05Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r624047889",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624047889"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r624047889"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624047889/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 230,
    "side": "RIGHT",
    "in_reply_to_id": 610796222
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624048595",
    "pull_request_review_id": 649437805,
    "id": 624048595,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDA0ODU5NQ==",
    "diff_hunk": "@@ -2398,28 +2398,32 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    if (coin_selection_params.use_bnb) {\n-        // Get the feerate for effective value.\n-        // When subtracting the fee from the outputs, we want the effective feerate to be 0\n-        CFeeRate effective_feerate{0};\n-        if (!coin_selection_params.m_subtract_fee_outputs) {\n-            effective_feerate = coin_selection_params.m_effective_feerate;\n-        }\n+    // Calculate the fees for things that aren't inputs",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 11,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "37c717952f6b0719392bfdddcafbf1a2db1de7ca",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This could be clarified to indicate that the change output is also not included.",
    "created_at": "2021-04-30T17:34:15Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r624048595",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624048595"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r624048595"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624048595/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2401,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624053257",
    "pull_request_review_id": 649437805,
    "id": 624053257,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDA1MzI1Nw==",
    "diff_hunk": "@@ -2991,10 +2973,21 @@ bool CWallet::CreateTransactionInternal(\n                     // Fill a vout to ourself\n                     CTxOut newTxOut(nChange, scriptChange);\n \n+                    CAmount cost_of_change = 0;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 123,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "0fb20f9c8220df6c13381117000316f3f0915c75",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This commit's subject indicates only that it's removing `bnb_used` and `use_bnb`. \r\n\r\nThis update in the change creation seems to stem from doing both BnB and KS every pass. Is it possible that this part should have been in the previous commit?",
    "created_at": "2021-04-30T17:42:11Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r624053257",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624053257"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r624053257"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624053257/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2976,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624057131",
    "pull_request_review_id": 649437805,
    "id": 624057131,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDA1NzEzMQ==",
    "diff_hunk": "@@ -49,28 +49,25 @@ struct {\n  * @param const std::vector<CInputCoin>& utxo_pool The set of UTXOs that we are choosing from.\n  *        These UTXOs will be sorted in descending order by effective value and the CInputCoins'\n  *        values are their effective values.\n- * @param const CAmount& target_value This is the value that we want to select. It is the lower\n+ * @param const CAmount& selection_target This is the value that we want to select. It is the lower",
    "path": "src/wallet/coinselection.cpp",
    "position": 14,
    "original_position": 5,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "5a7a8e08200071ea6f7072642e70e2a243efbfef",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Optional: Please mention renaming to `selection_target` in commit message or split into separate commit.",
    "created_at": "2021-04-30T17:48:25Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r624057131",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624057131"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r624057131"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624057131/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 52,
    "original_line": 52,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624061516",
    "pull_request_review_id": 649437805,
    "id": 624061516,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDA2MTUxNg==",
    "diff_hunk": "@@ -2889,205 +2887,175 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n-\n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        error = _(\"Insufficient funds\");\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+            const CAmount nChange = input_sum - nValue;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 137,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "bcaee1c0efe80e03ffb7fb19d3e6bbfc18d823cd",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I was just staring at this and was wondering why `nChange = input_sum - nValue` until I realized that `input_sum` is the sum of the effective values of the inputs. That could perhaps be clarified in a comment or the variable name (e.g. `inputs_effective_value`).",
    "created_at": "2021-04-30T17:54:44Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r624061516",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624061516"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r624061516"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624061516/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2932,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625090381",
    "pull_request_review_id": 650339935,
    "id": 625090381,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTA5MDM4MQ==",
    "diff_hunk": "@@ -2894,204 +2881,178 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 163,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "041e39561ae708712d89a3f49fd4130ec2989071",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In _Remove CreateTransaction while loop and some related variables_\r\nAre these needed anymore? `txNew` is created within `CreateTransactionInternal()` and iiuc there's no loop iteration for it to be mutated in",
    "created_at": "2021-05-03T13:36:35Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r625090381",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625090381"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r625090381"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625090381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2887,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2888,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625099173",
    "pull_request_review_id": 650339935,
    "id": 625099173,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTA5OTE3Mw==",
    "diff_hunk": "@@ -110,15 +146,20 @@ struct OutputGroup\n      * a lower feerate). Calculated using long term fee estimate. This is used to decide whether\n      * it could be economical to create a change output. */\n     CFeeRate m_long_term_feerate{0};\n+    /** Indicate that we are subtracting the fee from outputs.\n+     * When true, the value that is used for coin selection is the UTXO's real value rather than effective value */\n+    bool m_subtract_fee_outputs{false};\n \n     OutputGroup() {}\n-    OutputGroup(const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate) :\n-        m_effective_feerate(effective_feerate),\n-        m_long_term_feerate(long_term_feerate)\n+    OutputGroup(const CoinSelectionParams& params) :\n+        m_effective_feerate(params.m_effective_feerate),\n+        m_long_term_feerate(params.m_long_term_feerate),\n+        m_subtract_fee_outputs(params.m_subtract_fee_outputs)",
    "path": "src/wallet/coinselection.h",
    "position": 63,
    "original_position": 58,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "041e39561ae708712d89a3f49fd4130ec2989071",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for accepting the suggestion, I like this a lot better than `OutputGroup` keeping a copy of params :)",
    "created_at": "2021-05-03T13:50:11Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r625099173",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625099173"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r625099173"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625099173/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 158,
    "original_start_line": 154,
    "start_side": "RIGHT",
    "line": 161,
    "original_line": 161,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625108832",
    "pull_request_review_id": 650339935,
    "id": 625108832,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTEwODgzMg==",
    "diff_hunk": "@@ -2894,204 +2881,178 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 197,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "041e39561ae708712d89a3f49fd4130ec2989071",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\ud83d\udc2e says moo\r\n\ud83d\udc37 says oink\r\nme says\r\n```suggestion\r\n            const int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\r\n```",
    "created_at": "2021-05-03T14:04:31Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r625108832",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625108832"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r625108832"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625108832/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2917,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625429602",
    "pull_request_review_id": 650797960,
    "id": 625429602,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTQyOTYwMg==",
    "diff_hunk": "@@ -2894,204 +2881,178 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n-                    }\n-                } else {\n-                    bnb_used = false;\n-                }\n+            const CAmount selected_eff = std::accumulate(setCoins.cbegin(), setCoins.cend(), CAmount(0),\n+                [](CAmount sum, const auto& coin) { return sum + coin.effective_value; });\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+            const CAmount nChange = input_sum - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n+\n+                // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                // For creating the change output now, we use the effective feerate.\n+                // For spending the change output in the future, we use the discard feerate for now.\n+                // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                const CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                const CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n+\n+                // We want to drop the change to fees if:\n+                // 1. The change output would be dust\n+                // 2. The \"change\" is within the (almost) exact match window, i.e. the difference between the selected effective value\n+                //    and the selection target (nValue + not_input_fees) is less than or equal to the cost of the change output (cost_of_change)\n+                if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || selected_eff <= nValue + not_input_fees + cost_of_change)\n                 {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n-\n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // The nChange when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n+                    nChangePosInOut = -1;\n+                    assert(nFeeRet == 0);\n+                    nFeeRet = nChange;\n+                }\n+                else\n+                {\n+                    if (nChangePosInOut == -1)\n                     {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        // Insert change txn at random position:\n+                        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                     }\n-                    else\n+                    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                     {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            error = _(\"Change index out of range\");\n-                            return false;\n-                        }\n-\n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        error = _(\"Change index out of range\");\n+                        return false;\n                     }\n-                } else {\n-                    nChangePosInOut = -1;\n-                }\n \n-                // Dummy fill vin for maximum size estimation\n-                //\n-                for (const auto& coin : setCoins) {\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-                }\n-\n-                tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                nBytes = tx_sizes.first;\n-                if (nBytes < 0) {\n-                    error = _(\"Signing transaction failed\");\n-                    return false;\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, newTxOut);\n                 }\n+            } else {\n+                nChangePosInOut = -1;\n+            }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n-                }\n+            tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            nBytes = tx_sizes.first;\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n \n+            CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+            if (nFeeRet < fee_needed) {\n+                nFeeRet = fee_needed;\n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n                     std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n+                    change_position->nValue -= nFeeRet;\n+                    // If the change is now dust, get rid of it\n+                    if (IsDust(*change_position, coin_selection_params.m_discard_feerate))\n+                    {\n+                        nChangePosInOut = -1;\n+                        nFeeRet += change_position->nValue;\n+                        txNew.vout.erase(change_position);\n                     }\n                 }\n+                // Reduce output values for subtractFeeFromAmount\n+                else if (nSubtractFeeFromAmount != 0) {\n+                    int i = 0;\n+                    bool fFirst = true;\n+                    CAmount to_reduce = nFeeRet;\n+                    if (nChangePosInOut == -1) {\n+                        // If there is no change output, then we have either made an exact match (i.e. nChange == 0),\n+                        // or the change amount was small enough to be burned as fees. This amount has already been\n+                        // included in nFeeRet. In order for the recipients to not overpay the fees, we need to calculate\n+                        // the amount in fees that they will pay.\n+                        to_reduce -= nChange;\n+                    }\n+                    for (const auto& recipient : vecSend)\n+                    {\n+                        if (i == nChangePosInOut) {\n+                            ++i;\n+                        }\n+                        CTxOut& txout = txNew.vout[i];\n \n-                // If subtracting fee from recipients, we now know what fee we\n-                // need to subtract, we have no reason to reselect inputs\n-                if (nSubtractFeeFromAmount > 0) {\n-                    pick_new_inputs = false;\n+                        if (recipient.fSubtractFeeFromAmount)\n+                        {\n+                            txout.nValue -= to_reduce / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+\n+                            if (fFirst) // first receiver pays the remainder not divisible by output count\n+                            {\n+                                fFirst = false;\n+                                txout.nValue -= to_reduce % nSubtractFeeFromAmount;\n+                            }\n+\n+                            // Error if this output is reduced to be below dust\n+                            if (IsDust(txout, chain().relayDustFee())) {\n+                                if (txout.nValue < 0) {\n+                                    error = _(\"The transaction amount is too small to pay the fee\");\n+                                } else {\n+                                    error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n+                                }\n+                                return false;\n+                            }\n+                        }\n+                        ++i;\n+                    }\n+                } else {\n+                    // If we reach this, we don't have enough to pay the fees and we don't have any change outputs or recipient outputs available\n+                    // to reduce, so this is an error.\n+                    // Note that we shouldn't ever reach this because SelectCoins takes into account the fees. If SelectCoins is successful,\n+                    // then we should have selected enough value to cover all of the fees. Otherwise SelectCoins should have failed before we\n+                    // got to this point.\n+                    error = _(\"Insufficient funds to pay for the transaction fee\");\n+                    return false;\n                 }\n-\n-                // Include more fee and try again.\n-                nFeeRet = nFeeNeeded;\n-                coin_selection_params.use_bnb = false;\n-                continue;\n             }\n \n             // Give up if change keypool ran out and change is required",
    "path": "src/wallet/wallet.cpp",
    "position": 476,
    "original_position": 487,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "041e39561ae708712d89a3f49fd4130ec2989071",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is this block still needed? Seems like it exists to prevent further iterations",
    "created_at": "2021-05-03T23:31:44Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r625429602",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625429602"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r625429602"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625429602/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3039,
    "original_line": 3039,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625466416",
    "pull_request_review_id": 649437805,
    "id": 625466416,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTQ2NjQxNg==",
    "diff_hunk": "@@ -2889,205 +2887,175 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)",
    "path": "src/wallet/wallet.cpp",
    "position": 186,
    "original_position": 41,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "bcaee1c0efe80e03ffb7fb19d3e6bbfc18d823cd",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Isn't that just 10.75 vB?\r\n\r\nProbably out of scope for this PR, but what do you think about these calculations using weight units in the future?",
    "created_at": "2021-05-04T01:45:37Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r625466416",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625466416"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r625466416"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625466416/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2908,
    "original_line": 2908,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626979983",
    "pull_request_review_id": 652613804,
    "id": 626979983,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjk3OTk4Mw==",
    "diff_hunk": "@@ -230,14 +230,14 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     Shuffle(groups.begin(), groups.end(), FastRandomContext());\n \n     for (const OutputGroup& group : groups) {\n-        if (group.m_value == nTargetValue) {\n+        if (group.effective_value == nTargetValue) {",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "37c717952f6b0719392bfdddcafbf1a2db1de7ca",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Have KnapsackSolver actually use effective values\" (37c717952f6b0719392bfdddcafbf1a2db1de7ca)\r\n\r\nI'm trying to understand how/whether this commit changes behavior. It might be helpful to say in the commit message. It seems like this commit is definitely changing behavior of the KnapsackSolver, because now it is solving based on cost of the finally created transaction instead of ignoring that cost and requiring CreateTransactionInternal to work around and call KnapsackSolver twice. But the overall behavior is the same because of the fact that CreateTransactionInternal loops? (And the second loop is unnecessary now?)\r\n\r\nAgain a commit description would be helpful. It seems like this commit is doing a few things:\r\n\r\n1. Calling KnapsackSolver with a higher nTargetvalue so it is forced to account for cost of final transaction outputs\r\n2. Changin KnapsackSolver to internally use group.effective_value instead of group.m_value so it is forced to account for cost of final transaction inputs\r\n3. Refactoring code in SelectCoinsMinConf mostly not changing behavior, except to call KnapsackSolver with the higher target at the end.\r\n4. Tweaking SelectCoinsMinConf caller SelectCoins in the case where there are preselected coins, to stop having a special case for use_bnb, now that both bnb and knapsack paths use effective value",
    "created_at": "2021-05-05T23:22:42Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r626979983",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626979983"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r626979983"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626979983/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 233,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627286328",
    "pull_request_review_id": 652613804,
    "id": 627286328,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzI4NjMyOA==",
    "diff_hunk": "@@ -230,14 +230,14 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     Shuffle(groups.begin(), groups.end(), FastRandomContext());\n \n     for (const OutputGroup& group : groups) {\n-        if (group.m_value == nTargetValue) {\n+        if (group.effective_value == nTargetValue) {\n             util::insert(setCoinsRet, group.m_outputs);\n             nValueRet += group.m_value;\n             return true;\n-        } else if (group.m_value < nTargetValue + MIN_CHANGE) {\n+        } else if (group.effective_value < nTargetValue + MIN_CHANGE) {\n             applicable_groups.push_back(group);\n             nTotalLower += group.m_value;",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 12,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "37c717952f6b0719392bfdddcafbf1a2db1de7ca",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Have KnapsackSolver actually use effective values\" (37c717952f6b0719392bfdddcafbf1a2db1de7ca)\r\n\r\nIs it right to use m_value instead of effective value here? If `nTargetValue` and `nBest` here are to switched effective value instead of actual value, and these are compared against `nTotalLower`, shouldn't `nTotalLower` be an effective value too? Assuming this code is correct, I think it would be useful to add a comment to this function explaining how it uses effective values vs literal values, now that this function is taking effective values into account.",
    "created_at": "2021-05-06T10:08:31Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627286328",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627286328"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627286328"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627286328/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 239,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627293235",
    "pull_request_review_id": 652613804,
    "id": 627293235,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzI5MzIzNQ==",
    "diff_hunk": "@@ -270,7 +270,7 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n     //                                   or the next bigger coin is closer), return the bigger coin\n     if (lowest_larger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || lowest_larger->m_value <= nBest)) {\n+        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || lowest_larger->effective_value <= nBest)) {",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "37c717952f6b0719392bfdddcafbf1a2db1de7ca",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Have KnapsackSolver actually use effective values\" (37c717952f6b0719392bfdddcafbf1a2db1de7ca)\r\n\r\nIs KnapsackSolver solver a legacy function that is likely to be removed at some point? If not, it would be good in the future for it to have some direct test coverage (I assume it already has some indirect coverage at a higher level) where it is called directly with some basic input and checked to see it gives expected output. More comprehensive tests would take more effort and probably not worth the cost, but if there were a basic test before this commit, that had to be updated as part of this commit, this commit would be easier to understand and have confidence in.",
    "created_at": "2021-05-06T10:19:52Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627293235",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627293235"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627293235"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627293235/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 273,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627313347",
    "pull_request_review_id": 652613804,
    "id": 627313347,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzMxMzM0Nw==",
    "diff_hunk": "@@ -2398,28 +2398,32 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    if (coin_selection_params.use_bnb) {\n-        // Get the feerate for effective value.\n-        // When subtracting the fee from the outputs, we want the effective feerate to be 0\n-        CFeeRate effective_feerate{0};\n-        if (!coin_selection_params.m_subtract_fee_outputs) {\n-            effective_feerate = coin_selection_params.m_effective_feerate;\n-        }\n+    // Calculate the fees for things that aren't inputs\n+    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n+    // Get the feerate for effective value.",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "37c717952f6b0719392bfdddcafbf1a2db1de7ca",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Have KnapsackSolver actually use effective values\" (37c717952f6b0719392bfdddcafbf1a2db1de7ca)\r\n\r\nNow there are two effective rate variables used in the code below: `effective_feerate` and `coin_selection_params.m_effective_feerate`, and I'm confused about why each one is used different places. Can the new variable at least have a distinct name to be clear about it's purpose? Maybe `outputgroup_effective_feerate` because this feerate just seems to be literally inserted in all the outputgroups and not used right away.\r\n\r\nAgain a high-level comment explaining how this function is using effective feerates would be pretty helpful, since apparently it was ignoring them previously.",
    "created_at": "2021-05-06T10:52:19Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627313347",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627313347"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627313347"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627313347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2404,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627316849",
    "pull_request_review_id": 652613804,
    "id": 627316849,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzMxNjg0OQ==",
    "diff_hunk": "@@ -2398,28 +2398,32 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    if (coin_selection_params.use_bnb) {\n-        // Get the feerate for effective value.\n-        // When subtracting the fee from the outputs, we want the effective feerate to be 0\n-        CFeeRate effective_feerate{0};\n-        if (!coin_selection_params.m_subtract_fee_outputs) {\n-            effective_feerate = coin_selection_params.m_effective_feerate;\n-        }\n+    // Calculate the fees for things that aren't inputs\n+    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n+    // Get the feerate for effective value.\n+    // When subtracting the fee from the outputs, we want the effective feerate to be 0\n+    CFeeRate effective_feerate{0};\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        effective_feerate = coin_selection_params.m_effective_feerate;\n+    }\n \n-        // Calculate cost of change\n-        CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+    // For creating the change output now, we use the effective feerate.\n+    // For spending the change output in the future, we use the discard feerate for now.\n+    // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+    const CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    const CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n \n-        // Calculate the fees for things that aren't inputs\n-        CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+    if (coin_selection_params.use_bnb) {\n+        std::vector<OutputGroup> positive_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n         bnb_used = true;\n-        return SelectCoinsBnB(groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+        return SelectCoinsBnB(positive_groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n     } else {\n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, CFeeRate(0), CFeeRate(0), eligibility_filter, false /* positive_only */);\n-\n+        // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here.\n+        std::vector<OutputGroup> all_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, false /* positive_only */);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 42,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "37c717952f6b0719392bfdddcafbf1a2db1de7ca",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Have KnapsackSolver actually use effective values\" (37c717952f6b0719392bfdddcafbf1a2db1de7ca)\r\n\r\nSo much code is just moving and being tweaked and not changing substantively. I think this commit would be easier to understand split into two parts:\r\n\r\n1 - Refactoring only change, adding new change_fee variable, adding new comments, moving the code that needs to move.\r\n2 - Behavior change using effective values, which should be simpler to understand with less code being moved around and cleaned up.\r\n",
    "created_at": "2021-05-06T10:58:07Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627316849",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627316849"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627316849"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627316849/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2424,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627342561",
    "pull_request_review_id": 652613804,
    "id": 627342561,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzM0MjU2MQ==",
    "diff_hunk": "@@ -2360,34 +2360,35 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    if (coin_selection_params.use_bnb) {\n-        // Get long term estimate\n-        FeeCalculation feeCalc;\n-        CCoinControl temp;\n-        temp.m_confirm_target = 1008;\n-        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n+    // Calculate the fees for things that aren't inputs\n+    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-        // Get the feerate for effective value.\n-        // When subtracting the fee from the outputs, we want the effective feerate to be 0\n-        CFeeRate effective_feerate{0};\n-        if (!coin_selection_params.m_subtract_fee_outputs) {\n-            effective_feerate = coin_selection_params.effective_fee;\n-        }\n+    // Get long term estimate\n+    FeeCalculation feeCalc;\n+    CCoinControl temp;\n+    temp.m_confirm_target = 1008;\n+    CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n \n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, long_term_feerate, eligibility_filter, true /* positive_only */);\n+    // Get the feerate for effective value.\n+    // When subtracting the fee from the outputs, we want the effective feerate to be 0\n+    CFeeRate effective_feerate{0};\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        effective_feerate = coin_selection_params.effective_fee;\n+    }\n \n-        // Calculate cost of change\n-        CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+    // Calculate cost of change\n+    CAmount change_fee = coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+    CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + change_fee;\n \n-        // Calculate the fees for things that aren't inputs\n-        CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+    if (coin_selection_params.use_bnb) {\n+        std::vector<OutputGroup> positive_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, long_term_feerate, eligibility_filter, true /* positive_only */);\n         bnb_used = true;\n-        return SelectCoinsBnB(groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+        return SelectCoinsBnB(positive_groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n     } else {\n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, CFeeRate(0), CFeeRate(0), eligibility_filter, false /* positive_only */);\n-\n+        // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here.\n+        std::vector<OutputGroup> all_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, long_term_feerate, eligibility_filter, false /* positive_only */);\n         bnb_used = false;\n-        return KnapsackSolver(nTargetValue, groups, setCoinsRet, nValueRet);\n+        return KnapsackSolver(nTargetValue + not_input_fees, all_groups, setCoinsRet, nValueRet);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "c314b098fefb28020c6ec185aab436e47cd2bc2c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Have KnapsackSolver actually use effective values\" (37c717952f6b0719392bfdddcafbf1a2db1de7ca)\r\n\r\nSuggestion: It seems like if the later \"Roll not_input_fees into nValueToSelect\" commit was moved before this commit (without changing the value passed to KnapsackSolver), this commit on top of that one would be smaller and could reduce the confusion of `nTargetValue` meaning so many different things at different places.",
    "created_at": "2021-05-06T11:41:46Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627342561",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627342561"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627342561"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627342561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2391,
    "side": "RIGHT",
    "in_reply_to_id": 537976831
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627626135",
    "pull_request_review_id": 653712621,
    "id": 627626135,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzYyNjEzNQ==",
    "diff_hunk": "@@ -230,14 +230,14 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     Shuffle(groups.begin(), groups.end(), FastRandomContext());\n \n     for (const OutputGroup& group : groups) {\n-        if (group.m_value == nTargetValue) {\n+        if (group.effective_value == nTargetValue) {",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "453c00c8eaffb7ee16b3b3232a6c3e39b1b52882",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The way I view it is that the `OutputGroup` is responsible for telling the coin selection algorithm what the value for that `OutputGroup` is for the selection. The algo itself does not care about whether it should be `effective_value` or `m_value` except when it totals up the amount selected for `nValueRet`. So this change makes `OutputGroup` aware of which value it should be giving to the coin selection algorithm. Furthermore, `OutputGroup`s already have to know about certain coin selection parameters in order to determine its fee, long term fee, effective value, and whether to contain dust.",
    "created_at": "2021-05-06T17:26:20Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627626135",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627626135"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627626135"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627626135/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 230,
    "side": "RIGHT",
    "in_reply_to_id": 610796222
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627630517",
    "pull_request_review_id": 653718909,
    "id": 627630517,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzYzMDUxNw==",
    "diff_hunk": "@@ -2889,205 +2887,175 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)",
    "path": "src/wallet/wallet.cpp",
    "position": 186,
    "original_position": 41,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "bcaee1c0efe80e03ffb7fb19d3e6bbfc18d823cd",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, I rounded up.\r\n\r\nWe should be using weights everywhere rather than vB, but fee estimation and many other things still use vB which makes it harder to use weights.",
    "created_at": "2021-05-06T17:33:00Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627630517",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627630517"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627630517"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627630517/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2908,
    "original_line": 2908,
    "side": "RIGHT",
    "in_reply_to_id": 625466416
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627637538",
    "pull_request_review_id": 653726640,
    "id": 627637538,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzYzNzUzOA==",
    "diff_hunk": "@@ -270,7 +270,7 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n     //                                   or the next bigger coin is closer), return the bigger coin\n     if (lowest_larger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || lowest_larger->m_value <= nBest)) {\n+        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || lowest_larger->effective_value <= nBest)) {",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "37c717952f6b0719392bfdddcafbf1a2db1de7ca",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "There is some direct coverage, and some calls to `SelectCoinsMinConf` in the coin selector tests are changed to `KnapsackSolver` in future commits.",
    "created_at": "2021-05-06T17:40:59Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627637538",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627637538"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627637538"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627637538/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 273,
    "side": "RIGHT",
    "in_reply_to_id": 627293235
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627640785",
    "pull_request_review_id": 653731014,
    "id": 627640785,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzY0MDc4NQ==",
    "diff_hunk": "@@ -2398,28 +2398,32 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    if (coin_selection_params.use_bnb) {\n-        // Get the feerate for effective value.\n-        // When subtracting the fee from the outputs, we want the effective feerate to be 0\n-        CFeeRate effective_feerate{0};\n-        if (!coin_selection_params.m_subtract_fee_outputs) {\n-            effective_feerate = coin_selection_params.m_effective_feerate;\n-        }\n+    // Calculate the fees for things that aren't inputs\n+    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n+    // Get the feerate for effective value.",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "37c717952f6b0719392bfdddcafbf1a2db1de7ca",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`effective_feerate` is used to calculate the effective value. It's value is either 0 or `coin_selection_params.m_effective_feerate`, depending on whether we are subtracting the fee from the outputs. This is a bit of a hack to make sure that when we are subtracting the fee from the outputs, the selection algos use the real value rather than the effective value. However, this is all moot because the last commit in this PR removes this behavior. Instead `OutputGroup` will know about `coin_selection_params.m_subtract_fee_outputs` and return either `m_value` or `m_effective_value` depending on that parameter.",
    "created_at": "2021-05-06T17:46:00Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627640785",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627640785"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627640785"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627640785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2404,
    "side": "RIGHT",
    "in_reply_to_id": 627313347
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627654794",
    "pull_request_review_id": 653749539,
    "id": 627654794,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzY1NDc5NA==",
    "diff_hunk": "@@ -2360,34 +2360,35 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    if (coin_selection_params.use_bnb) {\n-        // Get long term estimate\n-        FeeCalculation feeCalc;\n-        CCoinControl temp;\n-        temp.m_confirm_target = 1008;\n-        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n+    // Calculate the fees for things that aren't inputs\n+    CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n \n-        // Get the feerate for effective value.\n-        // When subtracting the fee from the outputs, we want the effective feerate to be 0\n-        CFeeRate effective_feerate{0};\n-        if (!coin_selection_params.m_subtract_fee_outputs) {\n-            effective_feerate = coin_selection_params.effective_fee;\n-        }\n+    // Get long term estimate\n+    FeeCalculation feeCalc;\n+    CCoinControl temp;\n+    temp.m_confirm_target = 1008;\n+    CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n \n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, long_term_feerate, eligibility_filter, true /* positive_only */);\n+    // Get the feerate for effective value.\n+    // When subtracting the fee from the outputs, we want the effective feerate to be 0\n+    CFeeRate effective_feerate{0};\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        effective_feerate = coin_selection_params.effective_fee;\n+    }\n \n-        // Calculate cost of change\n-        CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+    // Calculate cost of change\n+    CAmount change_fee = coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+    CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + change_fee;\n \n-        // Calculate the fees for things that aren't inputs\n-        CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+    if (coin_selection_params.use_bnb) {\n+        std::vector<OutputGroup> positive_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, long_term_feerate, eligibility_filter, true /* positive_only */);\n         bnb_used = true;\n-        return SelectCoinsBnB(groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+        return SelectCoinsBnB(positive_groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n     } else {\n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, CFeeRate(0), CFeeRate(0), eligibility_filter, false /* positive_only */);\n-\n+        // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here.\n+        std::vector<OutputGroup> all_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, long_term_feerate, eligibility_filter, false /* positive_only */);\n         bnb_used = false;\n-        return KnapsackSolver(nTargetValue, groups, setCoinsRet, nValueRet);\n+        return KnapsackSolver(nTargetValue + not_input_fees, all_groups, setCoinsRet, nValueRet);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "c314b098fefb28020c6ec185aab436e47cd2bc2c",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I believe doing that would break the tests and change the behavior of `KnapsackSolver`. \"Roll not_input_fees into nValueToSelect\" does not change behavior.",
    "created_at": "2021-05-06T18:07:15Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627654794",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627654794"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627654794"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627654794/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2391,
    "side": "RIGHT",
    "in_reply_to_id": 537976831
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627723148",
    "pull_request_review_id": 653841098,
    "id": 627723148,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzcyMzE0OA==",
    "diff_hunk": "@@ -2889,205 +2887,175 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n-                {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n-\n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n+                if (IsDust(txout, chain().relayDustFee()))\n+                {\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n                 }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                // Choose coins to use\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                    // Calculate the fees for things that aren't inputs\n-                    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+            // Calculate the fees for things that aren't inputs\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect + not_input_fees, setCoins, nValueIn, coin_control, coin_selection_params))\n-                    {\n-                        error = _(\"Insufficient funds\");\n-                        return false;\n-                    }\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+            const CAmount nChange = input_sum - nValue;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 137,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "bcaee1c0efe80e03ffb7fb19d3e6bbfc18d823cd",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It isn't the sum of effective values. It is a the actual sum of input values. In this case, `nChange` is a bit of a misnomer as it also includes the fee that is to be paid.",
    "created_at": "2021-05-06T19:55:53Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627723148",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627723148"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627723148"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627723148/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2932,
    "side": "RIGHT",
    "in_reply_to_id": 624061516
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627727640",
    "pull_request_review_id": 653847251,
    "id": 627727640,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzcyNzY0MA==",
    "diff_hunk": "@@ -2894,204 +2881,178 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 197,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "041e39561ae708712d89a3f49fd4130ec2989071",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-05-06T20:03:43Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627727640",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627727640"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627727640"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627727640/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2917,
    "side": "RIGHT",
    "in_reply_to_id": 625108832
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627727715",
    "pull_request_review_id": 653847361,
    "id": 627727715,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzcyNzcxNQ==",
    "diff_hunk": "@@ -2894,204 +2881,178 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 163,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "041e39561ae708712d89a3f49fd4130ec2989071",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Doesn't seem like it, removed.",
    "created_at": "2021-05-06T20:03:52Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627727715",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627727715"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627727715"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627727715/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2887,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2888,
    "side": "RIGHT",
    "in_reply_to_id": 625090381
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627728417",
    "pull_request_review_id": 653848385,
    "id": 627728417,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzcyODQxNw==",
    "diff_hunk": "@@ -2894,204 +2881,178 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n             nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            txNew.vin.clear();\n+            txNew.vout.clear();\n \n-                // vouts to the payees\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow coin selection to do its thing\n+            if (change_spend_size == -1) {\n+                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+            } else {\n+                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+            }\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Calculate the fees for things that aren't inputs\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n-                    }\n-                } else {\n-                    bnb_used = false;\n-                }\n+            const CAmount selected_eff = std::accumulate(setCoins.cbegin(), setCoins.cend(), CAmount(0),\n+                [](CAmount sum, const auto& coin) { return sum + coin.effective_value; });\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+            const CAmount nChange = input_sum - nValue;\n+            if (nChange > 0)\n+            {\n+                // Fill a vout to ourself\n+                CTxOut newTxOut(nChange, scriptChange);\n+\n+                // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                // For creating the change output now, we use the effective feerate.\n+                // For spending the change output in the future, we use the discard feerate for now.\n+                // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                const CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                const CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n+\n+                // We want to drop the change to fees if:\n+                // 1. The change output would be dust\n+                // 2. The \"change\" is within the (almost) exact match window, i.e. the difference between the selected effective value\n+                //    and the selection target (nValue + not_input_fees) is less than or equal to the cost of the change output (cost_of_change)\n+                if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || selected_eff <= nValue + not_input_fees + cost_of_change)\n                 {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(nChange, scriptChange);\n-\n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // The nChange when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n+                    nChangePosInOut = -1;\n+                    assert(nFeeRet == 0);\n+                    nFeeRet = nChange;\n+                }\n+                else\n+                {\n+                    if (nChangePosInOut == -1)\n                     {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        // Insert change txn at random position:\n+                        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                     }\n-                    else\n+                    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                     {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            error = _(\"Change index out of range\");\n-                            return false;\n-                        }\n-\n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        error = _(\"Change index out of range\");\n+                        return false;\n                     }\n-                } else {\n-                    nChangePosInOut = -1;\n-                }\n \n-                // Dummy fill vin for maximum size estimation\n-                //\n-                for (const auto& coin : setCoins) {\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-                }\n-\n-                tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                nBytes = tx_sizes.first;\n-                if (nBytes < 0) {\n-                    error = _(\"Signing transaction failed\");\n-                    return false;\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, newTxOut);\n                 }\n+            } else {\n+                nChangePosInOut = -1;\n+            }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n-                }\n+            tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            nBytes = tx_sizes.first;\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n \n+            CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+            if (nFeeRet < fee_needed) {\n+                nFeeRet = fee_needed;\n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n                     std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n+                    change_position->nValue -= nFeeRet;\n+                    // If the change is now dust, get rid of it\n+                    if (IsDust(*change_position, coin_selection_params.m_discard_feerate))\n+                    {\n+                        nChangePosInOut = -1;\n+                        nFeeRet += change_position->nValue;\n+                        txNew.vout.erase(change_position);\n                     }\n                 }\n+                // Reduce output values for subtractFeeFromAmount\n+                else if (nSubtractFeeFromAmount != 0) {\n+                    int i = 0;\n+                    bool fFirst = true;\n+                    CAmount to_reduce = nFeeRet;\n+                    if (nChangePosInOut == -1) {\n+                        // If there is no change output, then we have either made an exact match (i.e. nChange == 0),\n+                        // or the change amount was small enough to be burned as fees. This amount has already been\n+                        // included in nFeeRet. In order for the recipients to not overpay the fees, we need to calculate\n+                        // the amount in fees that they will pay.\n+                        to_reduce -= nChange;\n+                    }\n+                    for (const auto& recipient : vecSend)\n+                    {\n+                        if (i == nChangePosInOut) {\n+                            ++i;\n+                        }\n+                        CTxOut& txout = txNew.vout[i];\n \n-                // If subtracting fee from recipients, we now know what fee we\n-                // need to subtract, we have no reason to reselect inputs\n-                if (nSubtractFeeFromAmount > 0) {\n-                    pick_new_inputs = false;\n+                        if (recipient.fSubtractFeeFromAmount)\n+                        {\n+                            txout.nValue -= to_reduce / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+\n+                            if (fFirst) // first receiver pays the remainder not divisible by output count\n+                            {\n+                                fFirst = false;\n+                                txout.nValue -= to_reduce % nSubtractFeeFromAmount;\n+                            }\n+\n+                            // Error if this output is reduced to be below dust\n+                            if (IsDust(txout, chain().relayDustFee())) {\n+                                if (txout.nValue < 0) {\n+                                    error = _(\"The transaction amount is too small to pay the fee\");\n+                                } else {\n+                                    error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n+                                }\n+                                return false;\n+                            }\n+                        }\n+                        ++i;\n+                    }\n+                } else {\n+                    // If we reach this, we don't have enough to pay the fees and we don't have any change outputs or recipient outputs available\n+                    // to reduce, so this is an error.\n+                    // Note that we shouldn't ever reach this because SelectCoins takes into account the fees. If SelectCoins is successful,\n+                    // then we should have selected enough value to cover all of the fees. Otherwise SelectCoins should have failed before we\n+                    // got to this point.\n+                    error = _(\"Insufficient funds to pay for the transaction fee\");\n+                    return false;\n                 }\n-\n-                // Include more fee and try again.\n-                nFeeRet = nFeeNeeded;\n-                coin_selection_params.use_bnb = false;\n-                continue;\n             }\n \n             // Give up if change keypool ran out and change is required",
    "path": "src/wallet/wallet.cpp",
    "position": 476,
    "original_position": 487,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "041e39561ae708712d89a3f49fd4130ec2989071",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It is needed, but the change stuff could be consolidated to not need it. I think that cleaning this up could be done a followup.",
    "created_at": "2021-05-06T20:05:09Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627728417",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627728417"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627728417"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627728417/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3039,
    "original_line": 3039,
    "side": "RIGHT",
    "in_reply_to_id": 625429602
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627728504",
    "pull_request_review_id": 653848505,
    "id": 627728504,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzcyODUwNA==",
    "diff_hunk": "@@ -2398,28 +2398,32 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    if (coin_selection_params.use_bnb) {\n-        // Get the feerate for effective value.\n-        // When subtracting the fee from the outputs, we want the effective feerate to be 0\n-        CFeeRate effective_feerate{0};\n-        if (!coin_selection_params.m_subtract_fee_outputs) {\n-            effective_feerate = coin_selection_params.m_effective_feerate;\n-        }\n+    // Calculate the fees for things that aren't inputs",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 11,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "37c717952f6b0719392bfdddcafbf1a2db1de7ca",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-05-06T20:05:19Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627728504",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627728504"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627728504"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627728504/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2401,
    "side": "RIGHT",
    "in_reply_to_id": 624048595
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627729080",
    "pull_request_review_id": 653849321,
    "id": 627729080,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzcyOTA4MA==",
    "diff_hunk": "@@ -2991,10 +2973,21 @@ bool CWallet::CreateTransactionInternal(\n                     // Fill a vout to ourself\n                     CTxOut newTxOut(nChange, scriptChange);\n \n+                    CAmount cost_of_change = 0;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 123,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "0fb20f9c8220df6c13381117000316f3f0915c75",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No, this is supposed to be here. However it is also related to \"Properly determine whether we are in the exact match range to make change\", so I've moved that commit to be before \"Remove use_bnb and bnb_used\" and combined this change with it.",
    "created_at": "2021-05-06T20:06:19Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627729080",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627729080"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627729080"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627729080/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2976,
    "side": "RIGHT",
    "in_reply_to_id": 624053257
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627729231",
    "pull_request_review_id": 653849510,
    "id": 627729231,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzcyOTIzMQ==",
    "diff_hunk": "@@ -49,28 +49,25 @@ struct {\n  * @param const std::vector<CInputCoin>& utxo_pool The set of UTXOs that we are choosing from.\n  *        These UTXOs will be sorted in descending order by effective value and the CInputCoins'\n  *        values are their effective values.\n- * @param const CAmount& target_value This is the value that we want to select. It is the lower\n+ * @param const CAmount& selection_target This is the value that we want to select. It is the lower",
    "path": "src/wallet/coinselection.cpp",
    "position": 14,
    "original_position": 5,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "5a7a8e08200071ea6f7072642e70e2a243efbfef",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Changed the rename to another commit.",
    "created_at": "2021-05-06T20:06:34Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627729231",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627729231"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627729231"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627729231/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 52,
    "original_line": 52,
    "side": "RIGHT",
    "in_reply_to_id": 624057131
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627729345",
    "pull_request_review_id": 653849664,
    "id": 627729345,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzcyOTM0NQ==",
    "diff_hunk": "@@ -230,14 +230,14 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     Shuffle(groups.begin(), groups.end(), FastRandomContext());\n \n     for (const OutputGroup& group : groups) {\n-        if (group.m_value == nTargetValue) {\n+        if (group.effective_value == nTargetValue) {",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "37c717952f6b0719392bfdddcafbf1a2db1de7ca",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-05-06T20:06:48Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627729345",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627729345"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627729345"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627729345/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 233,
    "side": "RIGHT",
    "in_reply_to_id": 626979983
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627729541",
    "pull_request_review_id": 653849926,
    "id": 627729541,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzcyOTU0MQ==",
    "diff_hunk": "@@ -230,14 +230,14 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     Shuffle(groups.begin(), groups.end(), FastRandomContext());\n \n     for (const OutputGroup& group : groups) {\n-        if (group.m_value == nTargetValue) {\n+        if (group.effective_value == nTargetValue) {\n             util::insert(setCoinsRet, group.m_outputs);\n             nValueRet += group.m_value;\n             return true;\n-        } else if (group.m_value < nTargetValue + MIN_CHANGE) {\n+        } else if (group.effective_value < nTargetValue + MIN_CHANGE) {\n             applicable_groups.push_back(group);\n             nTotalLower += group.m_value;",
    "path": "src/wallet/coinselection.cpp",
    "position": null,
    "original_position": 12,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "37c717952f6b0719392bfdddcafbf1a2db1de7ca",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "That is correct, this should be using `effective_value`. Fixed.",
    "created_at": "2021-05-06T20:07:10Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627729541",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627729541"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627729541"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627729541/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 239,
    "side": "RIGHT",
    "in_reply_to_id": 627286328
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627729684",
    "pull_request_review_id": 653850124,
    "id": 627729684,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzcyOTY4NA==",
    "diff_hunk": "@@ -2398,28 +2398,32 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    if (coin_selection_params.use_bnb) {\n-        // Get the feerate for effective value.\n-        // When subtracting the fee from the outputs, we want the effective feerate to be 0\n-        CFeeRate effective_feerate{0};\n-        if (!coin_selection_params.m_subtract_fee_outputs) {\n-            effective_feerate = coin_selection_params.m_effective_feerate;\n-        }\n+    // Calculate the fees for things that aren't inputs\n+    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n \n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n+    // Get the feerate for effective value.\n+    // When subtracting the fee from the outputs, we want the effective feerate to be 0\n+    CFeeRate effective_feerate{0};\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        effective_feerate = coin_selection_params.m_effective_feerate;\n+    }\n \n-        // Calculate cost of change\n-        CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+    // For creating the change output now, we use the effective feerate.\n+    // For spending the change output in the future, we use the discard feerate for now.\n+    // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+    const CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    const CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n \n-        // Calculate the fees for things that aren't inputs\n-        CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+    if (coin_selection_params.use_bnb) {\n+        std::vector<OutputGroup> positive_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n         bnb_used = true;\n-        return SelectCoinsBnB(groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+        return SelectCoinsBnB(positive_groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n     } else {\n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, CFeeRate(0), CFeeRate(0), eligibility_filter, false /* positive_only */);\n-\n+        // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here.\n+        std::vector<OutputGroup> all_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, false /* positive_only */);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 42,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "37c717952f6b0719392bfdddcafbf1a2db1de7ca",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Split up the commit.",
    "created_at": "2021-05-06T20:07:28Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627729684",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627729684"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627729684"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627729684/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2424,
    "side": "RIGHT",
    "in_reply_to_id": 627316849
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628462753",
    "pull_request_review_id": 654809318,
    "id": 628462753,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODQ2Mjc1Mw==",
    "diff_hunk": "@@ -2986,16 +2987,30 @@ bool CWallet::CreateTransactionInternal(\n                     bnb_used = false;\n                 }\n \n+                const CAmount selected_eff = std::accumulate(setCoins.cbegin(), setCoins.cend(), CAmount(0),\n+                    [](CAmount sum, const auto& coin) { return sum + coin.effective_value; });\n+\n                 const CAmount nChange = nValueIn - nValueToSelect;\n                 if (nChange > 0)\n                 {\n                     // Fill a vout to ourself\n                     CTxOut newTxOut(nChange, scriptChange);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // The nChange when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n+                    CAmount cost_of_change = 0;\n+                    if (pick_new_inputs) {\n+                        // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                        // For creating the change output now, we use the effective feerate.\n+                        // For spending the change output in the future, we use the discard feerate for now.\n+                        // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                        const CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                        cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "3c7ea2233ed1bf1075a9ee19071381298b021f74",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Determine whether we are in the exact match range to make change\" (3c7ea2233ed1bf1075a9ee19071381298b021f74)\r\n\r\nNote: \"Cost of change\" comments and code here duplicates code in SelectCoinsMinConf (grep \"Cost of change is the cost\") so might be good to dedup later with a cost of change function.",
    "created_at": "2021-05-07T19:35:42Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628462753",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628462753"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628462753"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628462753/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3006,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628465572",
    "pull_request_review_id": 654809318,
    "id": 628465572,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODQ2NTU3Mg==",
    "diff_hunk": "@@ -2986,16 +2987,30 @@ bool CWallet::CreateTransactionInternal(\n                     bnb_used = false;\n                 }\n \n+                const CAmount selected_eff = std::accumulate(setCoins.cbegin(), setCoins.cend(), CAmount(0),\n+                    [](CAmount sum, const auto& coin) { return sum + coin.effective_value; });\n+\n                 const CAmount nChange = nValueIn - nValueToSelect;\n                 if (nChange > 0)\n                 {\n                     // Fill a vout to ourself\n                     CTxOut newTxOut(nChange, scriptChange);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // The nChange when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n+                    CAmount cost_of_change = 0;\n+                    if (pick_new_inputs) {\n+                        // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                        // For creating the change output now, we use the effective feerate.\n+                        // For spending the change output in the future, we use the discard feerate for now.\n+                        // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                        const CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                        cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n+                    }\n+\n+                    // We want to drop the change to fees if:\n+                    // 1. The change output would be dust\n+                    // 2. The \"change\" is within the (almost) exact match window, i.e. the difference between the selected effective value",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 37,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "3c7ea2233ed1bf1075a9ee19071381298b021f74",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Determine whether we are in the exact match range to make change\" (3c7ea2233ed1bf1075a9ee19071381298b021f74)\r\n\r\nI don't understand \"change\" in quotes here. Is this referring to the `nChange = nValueIn - nValueToSelect` variable, which is not really the final change but a combination of change and fees? It would be good to clarify what is meant in this comment either way. Could also rename \"nChange\" to \"surplus\" or \"change_plus_fees\" or \"inputs_minus_outputs\" or something to make the old name less misleading in a new commit.",
    "created_at": "2021-05-07T19:41:49Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628465572",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628465572"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628465572"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628465572/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3011,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628469126",
    "pull_request_review_id": 654809318,
    "id": 628469126,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODQ2OTEyNg==",
    "diff_hunk": "@@ -2986,16 +2987,30 @@ bool CWallet::CreateTransactionInternal(\n                     bnb_used = false;\n                 }\n \n+                const CAmount selected_eff = std::accumulate(setCoins.cbegin(), setCoins.cend(), CAmount(0),\n+                    [](CAmount sum, const auto& coin) { return sum + coin.effective_value; });\n+\n                 const CAmount nChange = nValueIn - nValueToSelect;\n                 if (nChange > 0)\n                 {\n                     // Fill a vout to ourself\n                     CTxOut newTxOut(nChange, scriptChange);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // The nChange when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n+                    CAmount cost_of_change = 0;\n+                    if (pick_new_inputs) {\n+                        // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                        // For creating the change output now, we use the effective feerate.\n+                        // For spending the change output in the future, we use the discard feerate for now.\n+                        // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                        const CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                        cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n+                    }\n+\n+                    // We want to drop the change to fees if:\n+                    // 1. The change output would be dust\n+                    // 2. The \"change\" is within the (almost) exact match window, i.e. the difference between the selected effective value\n+                    //    and the selection target (nValue + not_input_fees) is less than or equal to the cost of the change output (cost_of_change)\n+                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || selected_eff <= nValue + not_input_fees + cost_of_change)",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "3c7ea2233ed1bf1075a9ee19071381298b021f74",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Determine whether we are in the exact match range to make change\" (3c7ea2233ed1bf1075a9ee19071381298b021f74)\r\n\r\nNote: I would have expected just `|| nChange <= cost_of_change` as the second condition, but IIUC, this wouldn't work because `nChange` isn't really the change value but the (change + fees) value. So this is instead estimating the change output value as ((value of inputs minus effective fees) minus (value of outputs minus effective fees)), and then seeing if that change output value would be worth the cost of the output & spend.",
    "created_at": "2021-05-07T19:49:24Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628469126",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628469126"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628469126"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628469126/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3013,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628481319",
    "pull_request_review_id": 654809318,
    "id": 628481319,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODQ4MTMxOQ==",
    "diff_hunk": "@@ -2956,6 +2953,9 @@ bool CWallet::CreateTransactionInternal(\n                     txNew.vout.push_back(txout);\n                 }\n \n+                // Calculate the fees for things that aren't inputs, excluding the change output\n+                const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "6bd07ddff8c092ac57fc72e47510c73864ac7acc",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Roll not_input_fees into nValueToSelect instead of having it be separate\" (6bd07ddff8c092ac57fc72e47510c73864ac7acc)\r\n\r\nNot necessarily relevant to this commit, but there is a big block of code above that just seems to be filling the coin_selection_params struct. It could be good for a future cleanup to move that code into a function to be able to shrink this function and declare coin_selection_params as const",
    "created_at": "2021-05-07T20:09:18Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628481319",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628481319"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628481319"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628481319/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2957,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628503284",
    "pull_request_review_id": 654848442,
    "id": 628503284,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODUwMzI4NA==",
    "diff_hunk": "@@ -2986,16 +2987,30 @@ bool CWallet::CreateTransactionInternal(\n                     bnb_used = false;\n                 }\n \n+                const CAmount selected_eff = std::accumulate(setCoins.cbegin(), setCoins.cend(), CAmount(0),\n+                    [](CAmount sum, const auto& coin) { return sum + coin.effective_value; });\n+\n                 const CAmount nChange = nValueIn - nValueToSelect;\n                 if (nChange > 0)\n                 {\n                     // Fill a vout to ourself\n                     CTxOut newTxOut(nChange, scriptChange);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // The nChange when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n+                    CAmount cost_of_change = 0;\n+                    if (pick_new_inputs) {\n+                        // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                        // For creating the change output now, we use the effective feerate.\n+                        // For spending the change output in the future, we use the discard feerate for now.\n+                        // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                        const CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                        cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n+                    }\n+\n+                    // We want to drop the change to fees if:\n+                    // 1. The change output would be dust\n+                    // 2. The \"change\" is within the (almost) exact match window, i.e. the difference between the selected effective value",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 37,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "3c7ea2233ed1bf1075a9ee19071381298b021f74",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, I put it in quotes because it's really change + fees.",
    "created_at": "2021-05-07T20:38:05Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628503284",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628503284"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628503284"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628503284/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3011,
    "side": "RIGHT",
    "in_reply_to_id": 628465572
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628712509",
    "pull_request_review_id": 654966317,
    "id": 628712509,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODcxMjUwOQ==",
    "diff_hunk": "@@ -2986,16 +2987,30 @@ bool CWallet::CreateTransactionInternal(\n                     bnb_used = false;\n                 }\n \n+                const CAmount selected_eff = std::accumulate(setCoins.cbegin(), setCoins.cend(), CAmount(0),\n+                    [](CAmount sum, const auto& coin) { return sum + coin.effective_value; });\n+\n                 const CAmount nChange = nValueIn - nValueToSelect;\n                 if (nChange > 0)\n                 {\n                     // Fill a vout to ourself\n                     CTxOut newTxOut(nChange, scriptChange);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // The nChange when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n+                    CAmount cost_of_change = 0;\n+                    if (pick_new_inputs) {\n+                        // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                        // For creating the change output now, we use the effective feerate.\n+                        // For spending the change output in the future, we use the discard feerate for now.\n+                        // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                        const CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                        cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "3c7ea2233ed1bf1075a9ee19071381298b021f74",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I've deduplicated this code by adding `m_cost_of_change` to `CoinSelectionParams`.",
    "created_at": "2021-05-08T06:57:54Z",
    "updated_at": "2021-05-08T07:12:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628712509",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628712509"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628712509"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628712509/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3006,
    "side": "RIGHT",
    "in_reply_to_id": 628462753
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628714340",
    "pull_request_review_id": 654967623,
    "id": 628714340,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODcxNDM0MA==",
    "diff_hunk": "@@ -2986,16 +2987,30 @@ bool CWallet::CreateTransactionInternal(\n                     bnb_used = false;\n                 }\n \n+                const CAmount selected_eff = std::accumulate(setCoins.cbegin(), setCoins.cend(), CAmount(0),\n+                    [](CAmount sum, const auto& coin) { return sum + coin.effective_value; });\n+\n                 const CAmount nChange = nValueIn - nValueToSelect;\n                 if (nChange > 0)\n                 {\n                     // Fill a vout to ourself\n                     CTxOut newTxOut(nChange, scriptChange);\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // The nChange when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n+                    CAmount cost_of_change = 0;\n+                    if (pick_new_inputs) {\n+                        // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+                        // For creating the change output now, we use the effective feerate.\n+                        // For spending the change output in the future, we use the discard feerate for now.\n+                        // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+                        const CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+                        cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n+                    }\n+\n+                    // We want to drop the change to fees if:\n+                    // 1. The change output would be dust\n+                    // 2. The \"change\" is within the (almost) exact match window, i.e. the difference between the selected effective value\n+                    //    and the selection target (nValue + not_input_fees) is less than or equal to the cost of the change output (cost_of_change)\n+                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || selected_eff <= nValue + not_input_fees + cost_of_change)",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "3c7ea2233ed1bf1075a9ee19071381298b021f74",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I've moved this to be after fee reduction, so it makes more sense now with just comparing to the cost of change directly.",
    "created_at": "2021-05-08T07:16:12Z",
    "updated_at": "2021-05-08T07:16:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628714340",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628714340"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628714340"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628714340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3013,
    "side": "RIGHT",
    "in_reply_to_id": 628469126
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630401601",
    "pull_request_review_id": 657040199,
    "id": 630401601,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDQwMTYwMQ==",
    "diff_hunk": "@@ -2982,15 +2982,15 @@ bool CWallet::CreateTransactionInternal(\n                     bnb_used = false;\n                 }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+                const CAmount change_and_fee = nValueIn - nValueToSelect;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "79ef77447615067e30ee476343ca8816559869a3",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"scripted-diff: rename some variables\" (79ef77447615067e30ee476343ca8816559869a3)\r\n\r\nThis commit doesn't compile\r\n\r\nwallet/wallet.cpp:2997:36: error: use of undeclared identifier 'nChange'\r\n                        nFeeRet += nChange;",
    "created_at": "2021-05-11T17:51:50Z",
    "updated_at": "2021-05-12T20:16:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r630401601",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630401601"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r630401601"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630401601/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2985,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630431136",
    "pull_request_review_id": 657040199,
    "id": 630431136,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDQzMTEzNg==",
    "diff_hunk": "@@ -2411,14 +2408,14 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     if (coin_selection_params.use_bnb) {\n         std::vector<OutputGroup> positive_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n         bnb_used = true;\n-        return SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+        return SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change, setCoinsRet, nValueRet);\n     } else {\n         // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here.\n         // The knapsack solver currently does not use effective values, so we give GroupOutputs feerates of 0 so it sets the effective values to be the same as the real value.\n         std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, CFeeRate(0), CFeeRate(0), eligibility_filter, false /* positive_only */);\n \n         bnb_used = false;\n-        return KnapsackSolver(nTargetValue, groups, setCoinsRet, nValueRet);\n+        return KnapsackSolver(nTargetValue + coin_selection_params.m_change_fee, groups, setCoinsRet, nValueRet);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "19ccc6401c8d854815727522949242d3ad343c73",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Roll not_input_fees into nValueToSelect instead of having it be separate\" (19ccc6401c8d854815727522949242d3ad343c73)\r\n\r\nWhat's the reason for adding m_change_fee here? Can there be a code comment saying why the selection amount + change cost sum is used as target for knapsack but not bnb, and maybe a commit message note saying whether commit is intended to change behavior. I notice in earlier versions of the PR, adding this was part of a different \"Do both BnB and Knapsack coin selection in SelectCoinsMinConf\" commit, but I'm actually not sure how this change fit in that commit either:\r\n\r\nb8d0eecd8e792d9b71c898aa7780336c695377d9 Apr 29 Do both BnB and Knapsack, adds change fee\r\n83fddb7ecb5e56b25021ca4a7099a811bbeb224d May 6 Do both BnB and Knapsack, adds change fee\r\nd516f82b187a19b9943957eb56eed93664050ed2 May 8 Do both BnB and Knapsack, change fee already added",
    "created_at": "2021-05-11T18:38:23Z",
    "updated_at": "2021-05-12T20:16:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r630431136",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630431136"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r630431136"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630431136/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2418,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630571386",
    "pull_request_review_id": 657040199,
    "id": 630571386,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDU3MTM4Ng==",
    "diff_hunk": "@@ -336,3 +336,8 @@ bool OutputGroup::EligibleForSpending(const CoinEligibilityFilter& eligibility_f\n         && m_ancestors <= eligibility_filter.max_ancestors\n         && m_descendants <= eligibility_filter.max_descendants;\n }\n+\n+CAmount OutputGroup::GetSelectionAmount() const",
    "path": "src/wallet/coinselection.cpp",
    "position": 150,
    "original_position": 91,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "282ee37b64d581dc22e2e9743d442f9acd67b4b3",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Have OutputGroup determine the value to use\" (282ee37b64d581dc22e2e9743d442f9acd67b4b3)\r\n\r\nI think it's a minor bug (or at least an unmentioned change in behavior) that there are still two `effective_value` member uses when all other uses are switched to selection amounts. This commit and final code would be easier to understand if all output group effective value uses were replaced with selection amounts. The two uses I think should be updated are:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/282ee37b64d581dc22e2e9743d442f9acd67b4b3/src/wallet/wallet.cpp#L4248\r\nhttps://github.com/bitcoin/bitcoin/blob/282ee37b64d581dc22e2e9743d442f9acd67b4b3/src/wallet/wallet.cpp#L4307\r\n\r\nIt would be more understandable to consistently use not effective values for subtract-from-recipients, instead of having effective values leak in for them now in these corner cases.",
    "created_at": "2021-05-11T22:06:22Z",
    "updated_at": "2021-05-12T20:16:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r630571386",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630571386"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r630571386"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630571386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 340,
    "original_line": 340,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630587410",
    "pull_request_review_id": 657040199,
    "id": 630587410,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDU4NzQxMA==",
    "diff_hunk": "@@ -3038,69 +3001,89 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }",
    "path": "src/wallet/wallet.cpp",
    "position": 397,
    "original_position": 161,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "6f36603f64246c8cd274a532df222ab0414d651b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move output reductions for fee to after coin selection\" (6f36603f64246c8cd274a532df222ab0414d651b)\r\n\r\nI'm really confused by this block of removed code, which was introduced in #10712 https://github.com/bitcoin/bitcoin/pull/10712/commits/0f402b9263b0579b29aa0f841fc64ad58d3efba6 (and which I apparently reviewed years ago). I don't understand how the code was functioning when it added, or why it is safe to remove now. It seems like when the code was added, it would never trigger because if the selected coins were ever high enough to merit adding a change output, nChangePosInOut would already not be -1 and the new condition would never trigger:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/0f402b9263b0579b29aa0f841fc64ad58d3efba6/src/wallet/wallet.cpp#L2683\r\nhttps://github.com/bitcoin/bitcoin/blob/0f402b9263b0579b29aa0f841fc64ad58d3efba6/src/wallet/wallet.cpp#L2766\r\n\r\nI guess it seems safe to drop this code, but it would be nice to understand what it's doing while it's here.",
    "created_at": "2021-05-11T22:44:59Z",
    "updated_at": "2021-05-12T20:16:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r630587410",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630587410"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r630587410"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630587410/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 3047,
    "original_start_line": 3048,
    "start_side": "LEFT",
    "line": 3061,
    "original_line": 3061,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630668954",
    "pull_request_review_id": 657040199,
    "id": 630668954,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDY2ODk1NA==",
    "diff_hunk": "@@ -3038,69 +3001,89 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n-\n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n-                }\n-\n+                nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n                     std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n+                    change_position->nValue -= nFeeRet;\n+\n+                    // We want to drop the change to fees if:\n+                    // 1. The change output would be dust\n+                    // 2. The change is within the (almost) exact match window, i.e. it is less than or equal to the cost of the change output (cost_of_change)\n+                    if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_position->nValue <= coin_selection_params.m_cost_of_change)\n+                    {\n+                        nChangePosInOut = -1;\n+                        nFeeRet += change_position->nValue;\n+                        txNew.vout.erase(change_position);\n                     }\n-                }\n \n-                // If subtracting fee from recipients, we now know what fee we\n-                // need to subtract, we have no reason to reselect inputs\n-                if (nSubtractFeeFromAmount > 0) {\n-                    pick_new_inputs = false;\n+                    // Check if the value in that change output was actually enough to cover the transaction fee.\n+                    // We do this here because we may have removed the change output, which will have changed the fee that we actually need, and the fee\n+                    // that we are actually paying\n+                    // Note that this case should never happen because SelectCoins accounts for the fee. It should've failed rather than get to this point.\n+                    if (change_and_fee < nFeeRet) {\n+                        error = _(\"Cannot reduce change to cover transaction fee\");\n+                        return false;\n+                    }\n                 }\n+                // Reduce output values for subtractFeeFromAmount\n+                else if (nSubtractFeeFromAmount != 0) {\n+                    int i = 0;\n+                    bool fFirst = true;\n+                    CAmount to_reduce = nFeeRet;\n+                    if (nChangePosInOut != -1) {\n+                        // Although we aren't going to reduce this change output to handle the transaction fees,\n+                        // we still want to check if we would drop it to fees\n+                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n+                        if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_position->nValue <= coin_selection_params.m_cost_of_change)\n+                        {\n+                            nChangePosInOut = -1;\n+                            nFeeRet += change_position->nValue;\n+                            // We need to reduce the amount to subtract from the recipients so they don't overpay\n+                            // as dropping the change accounts for some fees.\n+                            to_reduce = change_position->nValue;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 232,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "6f36603f64246c8cd274a532df222ab0414d651b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move output reductions for fee to after coin selection\" (6f36603f64246c8cd274a532df222ab0414d651b)\r\n\r\nIt seems like in subtract-fee-from-recipients case when change output is too small to be economical it would make more sense to send the savings back to recipients, instead of paying extra in fees. So I would expect this to say something like:\r\n\r\n```c++\r\nnChangePosInOut = -1;\r\nto_reduce -= change_position->nValue;\r\n```\r\n\r\n(EDIT: Suggestion above originally had an extra line  \"nFeeRet -= change_position->nValue;\" that wasn't right. Simple example to think about would be a $5 subtract-from-recipient transaction with $5.25 input, and a $1 fee, and no change output. `nFeeRet` should stay $1 in this case, and `to_reduce` should be $0.75 so output value is $5 - $0.75 = $4.25)\r\n\r\nBut if you did want to send the dust change amount to the miner instead of recipient, I'd expect this to just say\r\n\r\n```c++\r\nnChangePosInOut = -1;\r\nnFeeRet += change_position->nValue;\r\n```\r\n\r\nwithout changing to_reduce at all. Saying \"to_reduce = change_position->nValue\" seems like a bug and makes me wonder if there is test coverage for this stuff.\r\n\r\nAlso, this dust checking code is identical between the subtract and non-subtract branches and could be factored out or moved above (could also be a later cleanup):\r\n\r\n```c++\r\nstd::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\r\nif (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_position->nValue <= coin_selection_params.m_cost_of_change)\r\n{\r\n    nChangePosInOut = -1;\r\n```\r\n\r\n~~Also the `to_reduce` variable seems unnecessary, just a local duplicate of `nFeeRet`~~ (EDIT: This was wrong, to_reduce is different from the fee).",
    "created_at": "2021-05-12T02:06:58Z",
    "updated_at": "2021-05-13T18:18:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r630668954",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630668954"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r630668954"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630668954/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3044,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631308799",
    "pull_request_review_id": 657040199,
    "id": 631308799,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTMwODc5OQ==",
    "diff_hunk": "@@ -2935,33 +2932,14 @@ bool CWallet::CreateTransactionInternal(\n                 {\n                     CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                    if (recipient.fSubtractFeeFromAmount)",
    "path": "src/wallet/wallet.cpp",
    "position": 209,
    "original_position": 28,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "6f36603f64246c8cd274a532df222ab0414d651b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move output reductions for fee to after coin selection\" (6f36603f64246c8cd274a532df222ab0414d651b)\r\n\r\n> Now that SelectCoins accounts for the transaction fees, it is now\r\n> possible to reduce the outputs to deal with the transaction fees after\r\n> the SelectCoins.\r\n\r\nThis commit message seems incorrect, or at least it is hard to understand. As far as I can see in 6f36603f64246c8cd274a532df222ab0414d651b SelectCoins is not actually accounting for transaction fees yet, that happens later in commit \"Have KnapsackSolver actually use effective values\" (fe760f2411c3486f0f370e2f0ff3c834e9e0cd23). But anyway even before this commit, the recipient output reduction would only take place after SelectCoins because it would happen after the first loop iteration https://github.com/bitcoin/bitcoin/blob/d9ae6ec8929e739187740baab206daa55cde61d1/src/wallet/wallet.cpp#L3085-L3089\r\n\r\nIt seems like a commit description more closely matching the change might be: \r\n\r\n\"Simplify CreateTransactionInternal without changing behavior. Avoid need for second `pick_new_inputs = false` loop iteration in the subtract-fee-from-amount case, by moving the subtract-fee-from-amount implementation later in the while loop where it is possible to calculate and subtract the needed fee within a single iteration, instead of calculating the fee the first iteration, and then subtracting the fee the second iteration. Also, avoid the need for a second `pick_new_inputs = false` loop iteration in a different and rarer case where nSubtractFeeFromAmount == 0 and an extra loop iteration was introduced to add a missing change output to avoid paying excessive fees. This case was added in #10712 https://github.com/bitcoin/bitcoin/pull/10712/commits/0f402b9263b0579b29aa0f841fc64ad58d3efba6, but is no longer needed because ___.\"\r\n\r\n",
    "created_at": "2021-05-12T18:37:47Z",
    "updated_at": "2021-05-12T20:16:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631308799",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631308799"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631308799"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631308799/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2932,
    "original_line": 2932,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631405310",
    "pull_request_review_id": 658386526,
    "id": 631405310,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTQwNTMxMA==",
    "diff_hunk": "@@ -3038,69 +3001,89 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }",
    "path": "src/wallet/wallet.cpp",
    "position": 397,
    "original_position": 161,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "6f36603f64246c8cd274a532df222ab0414d651b",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This code is needed because of the looping behavior. As we are removing that loop, it is no longer needed.\r\n\r\nAs for why this was needed, suppose in one iteration of the loop, we choose a lot of small inputs. This will require a higher transaction fee. If those inputs are not enough to cover the fee that they need, we iterate again. In the next iteration, we find that with the increased target, we need only a few large inputs. This thus requires a lower transaction fee than the previous iteration. Since in this second iteration we have selected enough inputs to cover the transaction, we would exit the loop. But because we have used the previous iteration to set the fee, we are actually overpaying the fees for this input set. So this code was added to add a change output and reduce the fee to just the necessary amount in this scenario.",
    "created_at": "2021-05-12T21:11:54Z",
    "updated_at": "2021-05-12T21:17:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631405310",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631405310"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631405310"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631405310/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 3047,
    "original_start_line": 3048,
    "start_side": "LEFT",
    "line": 3061,
    "original_line": 3061,
    "side": "LEFT",
    "in_reply_to_id": 630587410
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631417162",
    "pull_request_review_id": 658402415,
    "id": 631417162,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTQxNzE2Mg==",
    "diff_hunk": "@@ -2982,15 +2982,15 @@ bool CWallet::CreateTransactionInternal(\n                     bnb_used = false;\n                 }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+                const CAmount change_and_fee = nValueIn - nValueToSelect;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "79ef77447615067e30ee476343ca8816559869a3",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2021-05-12T21:34:11Z",
    "updated_at": "2021-05-12T21:34:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631417162",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631417162"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631417162"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631417162/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2985,
    "side": "RIGHT",
    "in_reply_to_id": 630401601
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631417274",
    "pull_request_review_id": 658402555,
    "id": 631417274,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTQxNzI3NA==",
    "diff_hunk": "@@ -336,3 +336,8 @@ bool OutputGroup::EligibleForSpending(const CoinEligibilityFilter& eligibility_f\n         && m_ancestors <= eligibility_filter.max_ancestors\n         && m_descendants <= eligibility_filter.max_descendants;\n }\n+\n+CAmount OutputGroup::GetSelectionAmount() const",
    "path": "src/wallet/coinselection.cpp",
    "position": 150,
    "original_position": 91,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "282ee37b64d581dc22e2e9743d442f9acd67b4b3",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2021-05-12T21:34:25Z",
    "updated_at": "2021-05-12T21:34:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631417274",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631417274"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631417274"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631417274/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 340,
    "original_line": 340,
    "side": "RIGHT",
    "in_reply_to_id": 630571386
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631417929",
    "pull_request_review_id": 658403370,
    "id": 631417929,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTQxNzkyOQ==",
    "diff_hunk": "@@ -3038,69 +3001,89 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n-\n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n-                }\n-\n+                nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n                 // Try to reduce change to include necessary fee\n                 if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n                     std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n+                    change_position->nValue -= nFeeRet;\n+\n+                    // We want to drop the change to fees if:\n+                    // 1. The change output would be dust\n+                    // 2. The change is within the (almost) exact match window, i.e. it is less than or equal to the cost of the change output (cost_of_change)\n+                    if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_position->nValue <= coin_selection_params.m_cost_of_change)\n+                    {\n+                        nChangePosInOut = -1;\n+                        nFeeRet += change_position->nValue;\n+                        txNew.vout.erase(change_position);\n                     }\n-                }\n \n-                // If subtracting fee from recipients, we now know what fee we\n-                // need to subtract, we have no reason to reselect inputs\n-                if (nSubtractFeeFromAmount > 0) {\n-                    pick_new_inputs = false;\n+                    // Check if the value in that change output was actually enough to cover the transaction fee.\n+                    // We do this here because we may have removed the change output, which will have changed the fee that we actually need, and the fee\n+                    // that we are actually paying\n+                    // Note that this case should never happen because SelectCoins accounts for the fee. It should've failed rather than get to this point.\n+                    if (change_and_fee < nFeeRet) {\n+                        error = _(\"Cannot reduce change to cover transaction fee\");\n+                        return false;\n+                    }\n                 }\n+                // Reduce output values for subtractFeeFromAmount\n+                else if (nSubtractFeeFromAmount != 0) {\n+                    int i = 0;\n+                    bool fFirst = true;\n+                    CAmount to_reduce = nFeeRet;\n+                    if (nChangePosInOut != -1) {\n+                        // Although we aren't going to reduce this change output to handle the transaction fees,\n+                        // we still want to check if we would drop it to fees\n+                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n+                        if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_position->nValue <= coin_selection_params.m_cost_of_change)\n+                        {\n+                            nChangePosInOut = -1;\n+                            nFeeRet += change_position->nValue;\n+                            // We need to reduce the amount to subtract from the recipients so they don't overpay\n+                            // as dropping the change accounts for some fees.\n+                            to_reduce = change_position->nValue;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 232,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "6f36603f64246c8cd274a532df222ab0414d651b",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, there is a bug here. Removed changing `nFeeRet` and fixed the `to_reduce` calculation.\r\n\r\nIndeed, this is supposed to be a discount to the recipients, so it was supposed to be `-=`. Because this will cause `to_reduce` and `nFeeRet` to deviate, it is necessary for `to_reduce` to exist. Otherwise `nFeeRet` will misreport the actual transaction fee for this transaction.",
    "created_at": "2021-05-12T21:35:44Z",
    "updated_at": "2021-05-12T21:35:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631417929",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631417929"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631417929"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631417929/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3044,
    "side": "RIGHT",
    "in_reply_to_id": 630668954
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631418063",
    "pull_request_review_id": 658403588,
    "id": 631418063,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTQxODA2Mw==",
    "diff_hunk": "@@ -2935,33 +2932,14 @@ bool CWallet::CreateTransactionInternal(\n                 {\n                     CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                    if (recipient.fSubtractFeeFromAmount)",
    "path": "src/wallet/wallet.cpp",
    "position": 209,
    "original_position": 28,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "6f36603f64246c8cd274a532df222ab0414d651b",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Updated the commit message to explain this more.",
    "created_at": "2021-05-12T21:36:01Z",
    "updated_at": "2021-05-12T21:36:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631418063",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631418063"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631418063"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631418063/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2932,
    "original_line": 2932,
    "side": "LEFT",
    "in_reply_to_id": 631308799
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631430202",
    "pull_request_review_id": 658418948,
    "id": 631430202,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTQzMDIwMg==",
    "diff_hunk": "@@ -3038,69 +3001,89 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }",
    "path": "src/wallet/wallet.cpp",
    "position": 397,
    "original_position": 161,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "6f36603f64246c8cd274a532df222ab0414d651b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631405310\r\n\r\n> As for why this was needed, suppose in one iteration of the loop, we choose a lot of small inputs. [...]\r\n\r\nSorry, I understood why change output *boosting* is needed. The code I was asking about was the code from 0f402b9263b0579b29aa0f841fc64ad58d3efba6 in #10712 and now removed here which tried to *add* a change output late in the loop. I don't see any case it would trigger because the change output would already be added earlier in the loop.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/0f402b9263b0579b29aa0f841fc64ad58d3efba6/src/wallet/wallet.cpp#L2683\r\nhttps://github.com/bitcoin/bitcoin/blob/0f402b9263b0579b29aa0f841fc64ad58d3efba6/src/wallet/wallet.cpp#L2766\r\n\r\nThis is all after coin selection.\r\n\r\n",
    "created_at": "2021-05-12T22:01:52Z",
    "updated_at": "2021-05-12T22:01:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631430202",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631430202"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631430202"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631430202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 3047,
    "original_start_line": 3048,
    "start_side": "LEFT",
    "line": 3061,
    "original_line": 3061,
    "side": "LEFT",
    "in_reply_to_id": 630587410
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631433643",
    "pull_request_review_id": 658423289,
    "id": 631433643,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTQzMzY0Mw==",
    "diff_hunk": "@@ -3038,69 +3001,89 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }",
    "path": "src/wallet/wallet.cpp",
    "position": 397,
    "original_position": 161,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "6f36603f64246c8cd274a532df222ab0414d651b",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's change boosting but in the case where we don't have change.\r\n\r\nIt's the same scenario as change boosting, but instead of having selected more than enough to cover the fees from the previous iteration, we have selected exactly enough to cover those fees. But in this second iteration, there are fewer inputs, so fewer fees, so we need to add a change output because there is no existing change to boost.",
    "created_at": "2021-05-12T22:09:32Z",
    "updated_at": "2021-05-12T22:12:06Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631433643",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631433643"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631433643"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631433643/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 3047,
    "original_start_line": 3048,
    "start_side": "LEFT",
    "line": 3061,
    "original_line": 3061,
    "side": "LEFT",
    "in_reply_to_id": 630587410
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631994366",
    "pull_request_review_id": 659153987,
    "id": 631994366,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTk5NDM2Ng==",
    "diff_hunk": "@@ -3038,69 +3001,89 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }",
    "path": "src/wallet/wallet.cpp",
    "position": 397,
    "original_position": 161,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "6f36603f64246c8cd274a532df222ab0414d651b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> It's change boosting but in the case where we don't have change.\r\n> \r\n> It's the same scenario as change boosting, but instead of having selected more than enough to cover the fees from the previous iteration, we have selected exactly enough to cover those fees. But in this second iteration, there are fewer inputs, so fewer fees, so we need to add a change output because there is no existing change to boost.\r\n\r\nI keep linking to line 2683: https://github.com/bitcoin/bitcoin/blob/0f402b9263b0579b29aa0f841fc64ad58d3efba6/src/wallet/wallet.cpp#L2683\r\n\r\nBecause in every case where the code below it (line 2766) would seemingly need to add a change output, it seems like this line would already have added it. This line happens after selecting coins in the same iteration of the while loop. My only understanding (which makes no sense) is that the code is selecting coins, seeing if a change output needs to be added, then adding it on line 2683. Then seeing if a change output needs to be added again on line 2766, but this code can never trigger because the change output should be already added.\r\n\r\nIf the code added in 0f402b9263b0579b29aa0f841fc64ad58d3efba6 is just nonsense that doesn't do anything, then it should be safe to drop. And it could be safe to drop anyway. Everything else in this PR looks good, just these CreateTransactionInternal changes are still pretty opaque to me.",
    "created_at": "2021-05-13T17:53:42Z",
    "updated_at": "2021-05-13T17:53:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631994366",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631994366"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631994366"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/631994366/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 3047,
    "original_start_line": 3048,
    "start_side": "LEFT",
    "line": 3061,
    "original_line": 3061,
    "side": "LEFT",
    "in_reply_to_id": 630587410
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632019243",
    "pull_request_review_id": 659187260,
    "id": 632019243,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjAxOTI0Mw==",
    "diff_hunk": "@@ -3038,69 +3001,89 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }",
    "path": "src/wallet/wallet.cpp",
    "position": 397,
    "original_position": 161,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "6f36603f64246c8cd274a532df222ab0414d651b",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think the key thing in understanding this code is that `nChange` (now named `change_and_fee`) was actually supposed to just be the change. `nValueToSelect` includes the `nFeeRet` from the previous iteration. So we could have `nChange == 0` if we select exactly enough to cover the recipient amount + previous `nFeeRet`. That would cause this code to trigger.",
    "created_at": "2021-05-13T18:34:38Z",
    "updated_at": "2021-05-13T18:34:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632019243",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632019243"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632019243"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632019243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 3047,
    "original_start_line": 3048,
    "start_side": "LEFT",
    "line": 3061,
    "original_line": 3061,
    "side": "LEFT",
    "in_reply_to_id": 630587410
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632026144",
    "pull_request_review_id": 659196155,
    "id": 632026144,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjAyNjE0NA==",
    "diff_hunk": "@@ -2411,14 +2408,14 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     if (coin_selection_params.use_bnb) {\n         std::vector<OutputGroup> positive_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n         bnb_used = true;\n-        return SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+        return SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change, setCoinsRet, nValueRet);\n     } else {\n         // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here.\n         // The knapsack solver currently does not use effective values, so we give GroupOutputs feerates of 0 so it sets the effective values to be the same as the real value.\n         std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, CFeeRate(0), CFeeRate(0), eligibility_filter, false /* positive_only */);\n \n         bnb_used = false;\n-        return KnapsackSolver(nTargetValue, groups, setCoinsRet, nValueRet);\n+        return KnapsackSolver(nTargetValue + coin_selection_params.m_change_fee, groups, setCoinsRet, nValueRet);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "19ccc6401c8d854815727522949242d3ad343c73",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Roll not_input_fees into nValueToSelect instead of having it be separate\" (534917d11c12a713b39708290f51f495f370a66d)\r\n\r\nThanks for new code comments, very helpful. IIUC. I'm still a little surprised to see this change here in this commit, instead of in it's own commit or in the \"Have KnapsackSolver actually use effective values\" commit. Everything else in this commit is not a change in behavior, but this one change passing a higher target to KnapsackSolver is a change in behavior? If this is the case, it would be nice to split this up into two commits, or alternately say how the two different parts of this change are dependent in the commit message.\r\n\r\nI'm also curious about tradeoffs with the new behavior. This is probably just my ignorance, but I don't know if it is strictly better to target the change cost, or if there are there expected cases where targeting no-change cost would be better. Would be nice to be able to understand more of this background thinking from the code comment or commit message.",
    "created_at": "2021-05-13T18:45:43Z",
    "updated_at": "2021-05-13T18:57:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632026144",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632026144"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632026144"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632026144/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2418,
    "side": "RIGHT",
    "in_reply_to_id": 630431136
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632045959",
    "pull_request_review_id": 659224275,
    "id": 632045959,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjA0NTk1OQ==",
    "diff_hunk": "@@ -2411,14 +2408,14 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     if (coin_selection_params.use_bnb) {\n         std::vector<OutputGroup> positive_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n         bnb_used = true;\n-        return SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+        return SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change, setCoinsRet, nValueRet);\n     } else {\n         // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here.\n         // The knapsack solver currently does not use effective values, so we give GroupOutputs feerates of 0 so it sets the effective values to be the same as the real value.\n         std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, CFeeRate(0), CFeeRate(0), eligibility_filter, false /* positive_only */);\n \n         bnb_used = false;\n-        return KnapsackSolver(nTargetValue, groups, setCoinsRet, nValueRet);\n+        return KnapsackSolver(nTargetValue + coin_selection_params.m_change_fee, groups, setCoinsRet, nValueRet);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "19ccc6401c8d854815727522949242d3ad343c73",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Our assumption is that `KnapsackSolver` will always find a result that has change as BnB will find any that do not have change. I've updated the commit message.",
    "created_at": "2021-05-13T19:19:24Z",
    "updated_at": "2021-05-13T19:19:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632045959",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632045959"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632045959"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632045959/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2418,
    "side": "RIGHT",
    "in_reply_to_id": 630431136
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632055168",
    "pull_request_review_id": 659236696,
    "id": 632055168,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjA1NTE2OA==",
    "diff_hunk": "@@ -3038,69 +3001,89 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }",
    "path": "src/wallet/wallet.cpp",
    "position": 397,
    "original_position": 161,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "6f36603f64246c8cd274a532df222ab0414d651b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh, wow. I guess I was looking at the new code first where `nChange` means input exceeding originally requested output, or change+fees. But in the current code as long as nValueToSelect still contains fees, then nChange will just be pure change:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/0f402b9263b0579b29aa0f841fc64ad58d3efba6/src/wallet/wallet.cpp#L2620\r\nhttps://github.com/bitcoin/bitcoin/blob/0f402b9263b0579b29aa0f841fc64ad58d3efba6/src/wallet/wallet.cpp#L2664\r\n\r\nSo `nChange` could be 0 even if the final fee turned out to be a significantly less than the originally estimated fee, and the change output would not be added on the first pass.\r\n\r\nI guess now the thing I don't understand is why commit \"Move output reductions for fee to after coin selection\" (234f85c44042d6566b7cf7e1bf1b969b2e38f903) is safe before commit \"Remove CreateTransaction while loop and some related variables\" (1f2cf3cf180a5928171729ce92324952cb172d9f) because it seems like the change output could still be missing until after the `nValueToSelect += nFeeRet;` line is dropped or no longer doing anything, resulting either in excessive fees paid again or just a failure (forgot details of the part below already....)",
    "created_at": "2021-05-13T19:35:38Z",
    "updated_at": "2021-05-13T19:35:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632055168",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632055168"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632055168"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632055168/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 3047,
    "original_start_line": 3048,
    "start_side": "LEFT",
    "line": 3061,
    "original_line": 3061,
    "side": "LEFT",
    "in_reply_to_id": 630587410
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632069270",
    "pull_request_review_id": 659255478,
    "id": 632069270,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjA2OTI3MA==",
    "diff_hunk": "@@ -2411,14 +2408,14 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     if (coin_selection_params.use_bnb) {\n         std::vector<OutputGroup> positive_groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n         bnb_used = true;\n-        return SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+        return SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change, setCoinsRet, nValueRet);\n     } else {\n         // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here.\n         // The knapsack solver currently does not use effective values, so we give GroupOutputs feerates of 0 so it sets the effective values to be the same as the real value.\n         std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, CFeeRate(0), CFeeRate(0), eligibility_filter, false /* positive_only */);\n \n         bnb_used = false;\n-        return KnapsackSolver(nTargetValue, groups, setCoinsRet, nValueRet);\n+        return KnapsackSolver(nTargetValue + coin_selection_params.m_change_fee, groups, setCoinsRet, nValueRet);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "19ccc6401c8d854815727522949242d3ad343c73",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Roll static tx fees into nValueToSelect instead of having it be separate\" (a8b689bf239df610627337531b3722711a571068)\r\n\r\nThanks for new commit message. Just will say what my understanding is:\r\n\r\n1 - The first change in this commit rolling BnB not_input_fees into nTargetValue is not a change in behavior, just a pure refactoring\r\n2 - The second change in this commit rolling knapsack change cost into nTargetValue is a change in behavior that should result better coin selection\r\n3 - Neither of the two changes is dependent on the other, they're just related thematically\r\n\r\nCould be nice to mention these things in the commit message, but it's already pretty good and I'm just writing in case I need to be reminded later or need to be corrected if I'm wrong.\r\n\r\nAlso if the code comment here said there's is no downside to assuming there will be a change output since the bnb call above would find a changeless solution, I would personally like that and find it helpful, but I could also see it being too verbose / basic for other readers so :shrug:",
    "created_at": "2021-05-13T20:01:04Z",
    "updated_at": "2021-05-13T20:01:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632069270",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632069270"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632069270"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632069270/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2418,
    "side": "RIGHT",
    "in_reply_to_id": 630431136
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632082983",
    "pull_request_review_id": 659273810,
    "id": 632082983,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjA4Mjk4Mw==",
    "diff_hunk": "@@ -3038,69 +3001,89 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }",
    "path": "src/wallet/wallet.cpp",
    "position": 397,
    "original_position": 161,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "6f36603f64246c8cd274a532df222ab0414d651b",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Indeed, this commit fails the tests and doesn't quite work. However in the end, it all does work. I have tried to fix it, but it seems like it will end up just adding a bunch of code that gets removed in a later commit. I don't think there's a way to reorder commits to make this work.",
    "created_at": "2021-05-13T20:26:17Z",
    "updated_at": "2021-05-13T20:26:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632082983",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632082983"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632082983"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/632082983/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 3047,
    "original_start_line": 3048,
    "start_side": "LEFT",
    "line": 3061,
    "original_line": 3061,
    "side": "LEFT",
    "in_reply_to_id": 630587410
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633009303",
    "pull_request_review_id": 660390765,
    "id": 633009303,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzAwOTMwMw==",
    "diff_hunk": "@@ -4250,12 +4243,12 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool separate_coins, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, const CoinSelectionParams& cs_params, const CoinEligibilityFilter& filter, bool positive_only) const",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 28,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "57590fba000c875ebc680b27ce37ceb99c7433fb",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: I would prefer if we could reserve `cs_` for the typical use in mutex names.",
    "created_at": "2021-05-15T21:43:52Z",
    "updated_at": "2021-05-16T15:32:06Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r633009303",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633009303"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r633009303"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633009303/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4246,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633018567",
    "pull_request_review_id": 660390765,
    "id": 633018567,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzAxODU2Nw==",
    "diff_hunk": "@@ -2901,205 +2893,174 @@ bool CWallet::CreateTransactionInternal(\n             cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n-            nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n+            // Calculate the cost of change\n+            // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+            // For creating the change output now, we use the effective feerate.\n+            // For spending the change output in the future, we use the discard feerate for now.\n+            // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+            coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+            coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Include the fees for things that aren't inputs, excluding the change output\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+            CAmount nValueToSelect = nValue + not_input_fees;\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n+            const CAmount change_and_fee = input_sum - nValue;\n+            assert(change_and_fee >= 0);\n+            // Fill a vout to ourself\n+            CTxOut newTxOut(change_and_fee, scriptChange);",
    "path": "src/wallet/wallet.cpp",
    "position": 255,
    "original_position": 279,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "57590fba000c875ebc680b27ce37ceb99c7433fb",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this could use a comment on why it's ok that we might add a dust change here.",
    "created_at": "2021-05-15T23:41:23Z",
    "updated_at": "2021-05-16T15:32:06Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r633018567",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633018567"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r633018567"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633018567/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2944,
    "original_line": 2944,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633083525",
    "pull_request_review_id": 660390765,
    "id": 633083525,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzA4MzUyNQ==",
    "diff_hunk": "@@ -2901,205 +2893,174 @@ bool CWallet::CreateTransactionInternal(\n             cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n-            nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n+            // Calculate the cost of change\n+            // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+            // For creating the change output now, we use the effective feerate.\n+            // For spending the change output in the future, we use the discard feerate for now.\n+            // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+            coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+            coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Include the fees for things that aren't inputs, excluding the change output\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+            CAmount nValueToSelect = nValue + not_input_fees;\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n+            const CAmount change_and_fee = input_sum - nValue;\n+            assert(change_and_fee >= 0);\n+            // Fill a vout to ourself\n+            CTxOut newTxOut(change_and_fee, scriptChange);\n+\n+            if (nChangePosInOut == -1)\n+            {\n+                // Insert change txn at random position:\n+                nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+            }\n+            else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+            {\n+                error = _(\"Change index out of range\");\n+                return false;\n+            }\n+\n+            std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+            txNew.vout.insert(position, newTxOut);\n+\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n+\n+            tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            nBytes = tx_sizes.first;\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n+\n+            nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+            // Try to reduce change to include necessary fee\n+            if (nSubtractFeeFromAmount == 0) {\n+                assert(nChangePosInOut != -1);\n+                std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n+                change_position->nValue -= nFeeRet;\n+\n+                if (change_position->nValue < 0) {\n+                    // Maybe the change value was just enough to cover the fee if we did not have change in this transaction\n+                    // Let's try dropping the change, recalculating the fee, and comparing the new fee to change_and_Fee",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 317,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "57590fba000c875ebc680b27ce37ceb99c7433fb",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit\r\n```suggestion\r\n                    // Let's try dropping the change, recalculating the fee, and comparing the new fee to change_and_fee\r\n```",
    "created_at": "2021-05-16T12:07:00Z",
    "updated_at": "2021-05-16T15:32:06Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r633083525",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633083525"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r633083525"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633083525/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2982,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633089668",
    "pull_request_review_id": 660390765,
    "id": 633089668,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzA4OTY2OA==",
    "diff_hunk": "@@ -2901,205 +2893,174 @@ bool CWallet::CreateTransactionInternal(\n             cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n-            nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n+            // Calculate the cost of change\n+            // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+            // For creating the change output now, we use the effective feerate.\n+            // For spending the change output in the future, we use the discard feerate for now.\n+            // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+            coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+            coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Include the fees for things that aren't inputs, excluding the change output\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+            CAmount nValueToSelect = nValue + not_input_fees;\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n+            const CAmount change_and_fee = input_sum - nValue;\n+            assert(change_and_fee >= 0);\n+            // Fill a vout to ourself\n+            CTxOut newTxOut(change_and_fee, scriptChange);\n+\n+            if (nChangePosInOut == -1)\n+            {\n+                // Insert change txn at random position:\n+                nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+            }\n+            else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+            {\n+                error = _(\"Change index out of range\");\n+                return false;\n+            }\n+\n+            std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+            txNew.vout.insert(position, newTxOut);\n+\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n+\n+            tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            nBytes = tx_sizes.first;\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n+\n+            nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+            // Try to reduce change to include necessary fee\n+            if (nSubtractFeeFromAmount == 0) {\n+                assert(nChangePosInOut != -1);\n+                std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 312,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "57590fba000c875ebc680b27ce37ceb99c7433fb",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think you could use `position` here instead of getting the iterator again. Same below in the else block.",
    "created_at": "2021-05-16T13:10:47Z",
    "updated_at": "2021-05-16T15:32:06Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r633089668",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633089668"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r633089668"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633089668/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2977,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634519061",
    "pull_request_review_id": 662270558,
    "id": 634519061,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDUxOTA2MQ==",
    "diff_hunk": "@@ -2946,93 +2943,55 @@ bool CWallet::CreateTransactionInternal(\n                 {\n                     CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n+                    // Include the fee cost for outputs.\n                     if (!coin_selection_params.m_subtract_fee_outputs) {\n                         coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                     }\n \n                     if (IsDust(txout, chain().relayDustFee()))\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n+                        error = _(\"Transaction amount too small\");\n                         return false;\n                     }\n                     txNew.vout.push_back(txout);\n                 }\n \n                 // Choose coins to use\n                 bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n+                nValueIn = 0;\n+                setCoins.clear();\n+                if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n+                {\n+                    // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n+                    if (bnb_used) {\n+                        coin_selection_params.use_bnb = false;\n+                        continue;\n+                    }\n+                    else {\n+                        error = _(\"Insufficient funds\");\n+                        return false;\n                     }\n-                } else {\n-                    bnb_used = false;\n                 }\n \n-                const CAmount change_and_fee = nValueIn - nValueToSelect;\n-                if (change_and_fee > 0)",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 96,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2b445b7c1336506d43874a7ee31f85f511cd3114",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move output reductions for fee to after coin selection\" (2b445b7c1336506d43874a7ee31f85f511cd3114)\r\n\r\nReminder / note to anyone looking at this: this commit is easier to review ignoring whitespace.",
    "created_at": "2021-05-18T15:53:42Z",
    "updated_at": "2021-05-18T19:56:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r634519061",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634519061"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r634519061"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634519061/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3003,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634665258",
    "pull_request_review_id": 662270558,
    "id": 634665258,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDY2NTI1OA==",
    "diff_hunk": "@@ -3046,69 +3005,105 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n+                nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+                // Try to reduce change to include necessary fee\n+                if (nSubtractFeeFromAmount == 0) {\n+                    assert(nChangePosInOut != -1);\n+                    std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n+                    change_position->nValue -= nFeeRet;\n+\n+                    if (change_position->nValue < 0) {\n+                        CAmount orig_fee = nFeeRet;\n+                        // Maybe the change value was just enough to cover the fee if we did not have change in this transaction\n+                        // Let's try dropping the change, recalculating the fee, and comparing the new fee to change_and_Fee\n+                        nChangePosInOut = -1;\n+                        txNew.vout.erase(change_position);\n+\n+                        tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+                        nBytes = tx_sizes.first;\n+                        nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+                        if (nFeeRet <= change_and_fee) {\n+                            // Dropping the change value puts us exactly at the value, so we can exit now\n+                            break;\n                         }\n+\n+                        // The change value was not enough to cover the fees, even after dropping the change\n+                        // We set nFeeRet back to its original value (the one that includes the change output) and try selecting again\n+                        assert(change_and_fee < nFeeRet);\n+                        nFeeRet = orig_fee;\n+                        continue;\n                     }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n+                    // The change value was enough to cover the fees. We may want to drop it to fees if it is too small,\n+                    // or try selecting again if we don't meet the minimum change requirement\n+\n+                    // We want to drop the change to fees if:\n+                    // 1. The change output would be dust\n+                    // 2. The change is within the (almost) exact match window, i.e. it is less than or equal to the cost of the change output (cost_of_change)\n+                    if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_position->nValue <= coin_selection_params.m_cost_of_change)\n+                    {\n+                        nFeeRet += change_position->nValue;\n+                        nChangePosInOut = -1;\n+                        txNew.vout.erase(change_position);\n                     }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n+                    break; // Fee requirements were met\n                 }\n+                // Reduce output values for subtractFeeFromAmount\n+                else if (nSubtractFeeFromAmount != 0) {\n+                    int i = 0;\n+                    bool fFirst = true;\n+                    CAmount to_reduce = nFeeRet;\n+                    if (nChangePosInOut != -1) {\n+                        // Although we aren't going to reduce this change output to handle the transaction fees,\n+                        // we still want to check if we would drop it to fees\n+                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n+                        if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_position->nValue <= coin_selection_params.m_cost_of_change)\n+                        {\n+                            nChangePosInOut = -1;\n+                            txNew.vout.erase(change_position);\n \n-                // Try to reduce change to include necessary fee\n-                if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n-                    std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n+                            // Because we have dropped this change, our tx size and required fee will be different. So let's recalculate those.\n+                            tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+                            nBytes = tx_sizes.first;\n+                            to_reduce = nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+\n+                            // Furthermore, because we have dropped the change value, that will be part of the fee.\n+                            // We give this back to the recipients as a discount to the amount that is being reduced from them.\n+                            to_reduce -= change_and_fee;\n+                        }\n                     }\n-                }\n+                    for (const auto& recipient : vecSend)\n+                    {\n+                        if (i == nChangePosInOut) {\n+                            ++i;\n+                        }\n+                        CTxOut& txout = txNew.vout[i];\n \n-                // If subtracting fee from recipients, we now know what fee we\n-                // need to subtract, we have no reason to reselect inputs\n-                if (nSubtractFeeFromAmount > 0) {\n-                    pick_new_inputs = false;\n+                        if (recipient.fSubtractFeeFromAmount)\n+                        {\n+                            txout.nValue -= to_reduce / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+\n+                            if (fFirst) // first receiver pays the remainder not divisible by output count\n+                            {\n+                                fFirst = false;\n+                                txout.nValue -= to_reduce % nSubtractFeeFromAmount;\n+                            }\n+\n+                            // Error if this output is reduced to be below dust\n+                            if (IsDust(txout, chain().relayDustFee())) {\n+                                if (txout.nValue < 0) {\n+                                    error = _(\"The transaction amount is too small to pay the fee\");\n+                                } else {\n+                                    error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n+                                }\n+                                return false;\n+                            }\n+                        }\n+                        ++i;\n+                    }\n+                    break; // The fee has been deducted from the recipients, nothing left to do here\n                 }\n-\n-                // Include more fee and try again.\n-                nFeeRet = nFeeNeeded;\n-                coin_selection_params.use_bnb = false;\n-                continue;\n+                assert(false); // It shouldn't be possible to reach this",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 304,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2b445b7c1336506d43874a7ee31f85f511cd3114",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move output reductions for fee to after coin selection\" (2b445b7c1336506d43874a7ee31f85f511cd3114)\r\n\r\nEDIT: Never mind this suggestion, later loop removing commit makes this better.\r\n\r\n~~Minor style suggestion. Would be a little clearer to replace~~\r\n\r\n```c++\r\nif (nSubtractFeeFromAmount == 0) {\r\n    ...\r\n} else if (nSubtractFeeFromAmount != 0) {\r\n    ...\r\n} else {\r\n    assert(false); // It shouldn't be possible to reach this\r\n}\r\n```\r\n\r\n~~with~~\r\n\r\n```c++\r\nif (nSubtractFeeFromAmount == 0) {\r\n    ...\r\n} else {\r\n   assert (nSubtractFeeFromAmount != 0);\r\n   ...\r\n}\r\n```",
    "created_at": "2021-05-18T18:52:41Z",
    "updated_at": "2021-05-19T19:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r634665258",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634665258"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r634665258"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634665258/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3106,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634668694",
    "pull_request_review_id": 662270558,
    "id": 634668694,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDY2ODY5NA==",
    "diff_hunk": "@@ -3046,69 +3005,105 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n+                nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+                // Try to reduce change to include necessary fee\n+                if (nSubtractFeeFromAmount == 0) {\n+                    assert(nChangePosInOut != -1);\n+                    std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n+                    change_position->nValue -= nFeeRet;\n+\n+                    if (change_position->nValue < 0) {\n+                        CAmount orig_fee = nFeeRet;\n+                        // Maybe the change value was just enough to cover the fee if we did not have change in this transaction\n+                        // Let's try dropping the change, recalculating the fee, and comparing the new fee to change_and_Fee\n+                        nChangePosInOut = -1;\n+                        txNew.vout.erase(change_position);\n+\n+                        tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+                        nBytes = tx_sizes.first;\n+                        nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+                        if (nFeeRet <= change_and_fee) {\n+                            // Dropping the change value puts us exactly at the value, so we can exit now\n+                            break;\n                         }\n+\n+                        // The change value was not enough to cover the fees, even after dropping the change\n+                        // We set nFeeRet back to its original value (the one that includes the change output) and try selecting again\n+                        assert(change_and_fee < nFeeRet);\n+                        nFeeRet = orig_fee;\n+                        continue;\n                     }\n \n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n+                    // The change value was enough to cover the fees. We may want to drop it to fees if it is too small,\n+                    // or try selecting again if we don't meet the minimum change requirement\n+\n+                    // We want to drop the change to fees if:\n+                    // 1. The change output would be dust\n+                    // 2. The change is within the (almost) exact match window, i.e. it is less than or equal to the cost of the change output (cost_of_change)\n+                    if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_position->nValue <= coin_selection_params.m_cost_of_change)\n+                    {\n+                        nFeeRet += change_position->nValue;\n+                        nChangePosInOut = -1;\n+                        txNew.vout.erase(change_position);\n                     }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n+                    break; // Fee requirements were met\n                 }\n+                // Reduce output values for subtractFeeFromAmount\n+                else if (nSubtractFeeFromAmount != 0) {\n+                    int i = 0;\n+                    bool fFirst = true;\n+                    CAmount to_reduce = nFeeRet;\n+                    if (nChangePosInOut != -1) {",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 235,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2b445b7c1336506d43874a7ee31f85f511cd3114",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move output reductions for fee to after coin selection\" (2b445b7c1336506d43874a7ee31f85f511cd3114)\r\n\r\nThis condition should always be true so this could be an assert",
    "created_at": "2021-05-18T18:57:48Z",
    "updated_at": "2021-05-18T19:56:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r634668694",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634668694"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r634668694"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634668694/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3056,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634672625",
    "pull_request_review_id": 662270558,
    "id": 634672625,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDY3MjYyNQ==",
    "diff_hunk": "@@ -3046,69 +3005,105 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n+                nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+                // Try to reduce change to include necessary fee\n+                if (nSubtractFeeFromAmount == 0) {\n+                    assert(nChangePosInOut != -1);\n+                    std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n+                    change_position->nValue -= nFeeRet;\n+\n+                    if (change_position->nValue < 0) {\n+                        CAmount orig_fee = nFeeRet;\n+                        // Maybe the change value was just enough to cover the fee if we did not have change in this transaction\n+                        // Let's try dropping the change, recalculating the fee, and comparing the new fee to change_and_Fee\n+                        nChangePosInOut = -1;\n+                        txNew.vout.erase(change_position);\n+\n+                        tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+                        nBytes = tx_sizes.first;\n+                        nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+                        if (nFeeRet <= change_and_fee) {\n+                            // Dropping the change value puts us exactly at the value, so we can exit now\n+                            break;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 191,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2b445b7c1336506d43874a7ee31f85f511cd3114",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move output reductions for fee to after coin selection\" (2b445b7c1336506d43874a7ee31f85f511cd3114)\r\n\r\nIt seems like this should say:\r\n\r\n```c++\r\nif (nFeeRet <= change_and_fee) {\r\n   nFeeRet = change_and_fee;\r\n   break;\r\n}\r\n```\r\n\r\nto handle the `nFeeRet <= change_and_fee` case and more accurately return the amount of fee paid without the change output.",
    "created_at": "2021-05-18T19:04:25Z",
    "updated_at": "2021-05-18T19:56:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r634672625",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634672625"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r634672625"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634672625/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 3026,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 3027,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634677346",
    "pull_request_review_id": 662270558,
    "id": 634677346,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDY3NzM0Ng==",
    "diff_hunk": "@@ -3046,69 +3005,105 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n+                nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+                // Try to reduce change to include necessary fee\n+                if (nSubtractFeeFromAmount == 0) {\n+                    assert(nChangePosInOut != -1);\n+                    std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n+                    change_position->nValue -= nFeeRet;\n+\n+                    if (change_position->nValue < 0) {\n+                        CAmount orig_fee = nFeeRet;\n+                        // Maybe the change value was just enough to cover the fee if we did not have change in this transaction\n+                        // Let's try dropping the change, recalculating the fee, and comparing the new fee to change_and_Fee\n+                        nChangePosInOut = -1;\n+                        txNew.vout.erase(change_position);\n+\n+                        tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+                        nBytes = tx_sizes.first;\n+                        nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 188,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "2b445b7c1336506d43874a7ee31f85f511cd3114",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move output reductions for fee to after coin selection\" (2b445b7c1336506d43874a7ee31f85f511cd3114)\r\n\r\nJust a code simplifcation suggestion, but it seems like instead of introducing an orig_fee variable and reducing nFeeRet and then reassigning nFeeRet back to orig_fee, it would be simpler to drop orig_fee and just say:\r\n\r\n```c++\r\nCAmount required_fee = coin_selection_params.m_effective_feerate.GetFee(nBytes);\r\nif (required_fee < change_and_fee) {\r\n   nFeeRet = required_fee; // or maybe = change_and_fee, see other comment below\r\n   break;\r\n}\r\n```",
    "created_at": "2021-05-18T19:12:01Z",
    "updated_at": "2021-05-18T19:56:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r634677346",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634677346"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r634677346"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634677346/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3024,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635509067",
    "pull_request_review_id": 663562523,
    "id": 635509067,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTUwOTA2Nw==",
    "diff_hunk": "@@ -2956,11 +2952,21 @@ bool CWallet::CreateTransactionInternal(\n                     txNew.vout.push_back(txout);\n                 }\n \n+                // Include the fees for things that aren't inputs, excluding the change output\n+                const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+                CAmount nValueToSelect = nValue + not_input_fees;\n+\n+                // For KnapsackSolver, when we are not subtracting the fee from the recipients, we also want to include the fees for the\n+                // inputs that we found in the previous iteration.\n+                if (!coin_selection_params.use_bnb && nSubtractFeeFromAmount == 0) {\n+                    nValueToSelect += std::max(CAmount(0), nFeeRet - not_input_fees);\n+                }\n+",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 54,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "67fc8b7be1d5fbdb199d6e995434431a7282d446",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Roll static tx fees into nValueToSelect instead of having it be separate\" (67fc8b7be1d5fbdb199d6e995434431a7282d446)\r\n\r\nThis logic is not making sense to me. It wasn't this complicated before, and even though commits are reordered and nTargetValue is passed differently now I would expect these lines 2957-2964 to look like:\r\n\r\n```c++\r\nCAmount nValueToSelect = nValue;\r\nif (coin_selection_params.use_bnb) nValueToSelect += not_input_fees;\r\nif (nSubtractFeeFromAmount != 0) nValueToSelect += nFeeRet;\r\n```\r\n\r\nThis would:\r\n- Avoid adding not_input_fees and then subtracting it\r\n- Avoid introducing unexplained std::max not_input_fees > nFeeRet corner case\r\n- Avoid changing behavior in the bnb && nSubtractFeeFromAmount case.\r\n  - If it is actually desirable to change bnb behavior I think it should happen in a different commit. This commit is already doing multiple things and I think would be good to split, see https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632069270\r\n- Let you drop or shorten the \"Note that setting nValueToSelect is changed...\" paragraph in commit description since it should be obvious this only changes bnb",
    "created_at": "2021-05-19T19:01:09Z",
    "updated_at": "2021-05-19T19:43:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635509067",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635509067"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635509067"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635509067/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2957,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2956,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635518342",
    "pull_request_review_id": 663562523,
    "id": 635518342,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTUxODM0Mg==",
    "diff_hunk": "@@ -3027,10 +3032,8 @@ bool CWallet::CreateTransactionInternal(\n                             break;\n                         }\n \n-                        // The change value was not enough to cover the fees, even after dropping the change\n-                        // We set nFeeRet back to its original value (the one that includes the change output) and try selecting again\n+                        // The change value was not enough to cover the fees, even after dropping the change. Try selecting again.\n                         assert(change_and_fee < nFeeRet);\n-                        nFeeRet = orig_fee;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 80,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "67fc8b7be1d5fbdb199d6e995434431a7282d446",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Roll static tx fees into nValueToSelect instead of having it be separate\" (67fc8b7be1d5fbdb199d6e995434431a7282d446)\r\n\r\nI could be thinking about this wrong, but this change seems backwards. It matches the description which says \"use the changeless nFeeRet when iterating for KnapsackSolver. This is because we include\r\nthe change fee when doing KnapsackSolver, so nFeeRet on furtheriterations won't include the change fee.\"\r\n\r\nBut isn't this the opposite of what we want? If KnapSackSolver is going to find a solution requiring a change output, shouldn't nFeeRet be set to the full cost of a transaction including the change output (orig_fee)? Not the cost of the smaller transaction without a change output.",
    "created_at": "2021-05-19T19:16:07Z",
    "updated_at": "2021-05-19T19:43:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635518342",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635518342"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635518342"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635518342/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3033,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635523507",
    "pull_request_review_id": 663562523,
    "id": 635523507,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTUyMzUwNw==",
    "diff_hunk": "@@ -3032,9 +3024,10 @@ bool CWallet::CreateTransactionInternal(\n                             break;\n                         }\n \n-                        // The change value was not enough to cover the fees, even after dropping the change. Try selecting again.\n-                        assert(change_and_fee < nFeeRet);\n-                        continue;\n+                        // Since we use effective values now, it should not be possible to reach this situation where the change value was not\n+                        // enough to cover the fees\n+                        error = _(\"Cannot reduce change to cover transaction fees\");",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 52,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a07552b94fe05651970e53813ae67606692d6f19",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Have KnapsackSolver actually use effective values\" (a07552b94fe05651970e53813ae67606692d6f19)\r\n\r\nWould be good to change the error to \"Bug: Cannot reduce change to cover transaction fees\" or \"Unexpected condition: Cannot reduce change to cover transaction fees\" or just use CHECK_NONFATAL(false) or assert(false), so it is clearer this shouldn't happen, or if it does happen it's a bug and not the user doing something wrong.",
    "created_at": "2021-05-19T19:24:22Z",
    "updated_at": "2021-05-19T19:43:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635523507",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635523507"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635523507"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635523507/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3029,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635534606",
    "pull_request_review_id": 663595635,
    "id": 635534606,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTUzNDYwNg==",
    "diff_hunk": "@@ -4250,12 +4243,12 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool separate_coins, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, const CoinSelectionParams& cs_params, const CoinEligibilityFilter& filter, bool positive_only) const",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 28,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "57590fba000c875ebc680b27ce37ceb99c7433fb",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Renamed to `coin_sel_params`.",
    "created_at": "2021-05-19T19:42:36Z",
    "updated_at": "2021-05-19T19:42:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635534606",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635534606"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635534606"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635534606/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4246,
    "side": "RIGHT",
    "in_reply_to_id": 633009303
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635534655",
    "pull_request_review_id": 663595700,
    "id": 635534655,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTUzNDY1NQ==",
    "diff_hunk": "@@ -2901,205 +2893,174 @@ bool CWallet::CreateTransactionInternal(\n             cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n-            nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n+            // Calculate the cost of change\n+            // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+            // For creating the change output now, we use the effective feerate.\n+            // For spending the change output in the future, we use the discard feerate for now.\n+            // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+            coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+            coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Include the fees for things that aren't inputs, excluding the change output\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+            CAmount nValueToSelect = nValue + not_input_fees;\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n+            const CAmount change_and_fee = input_sum - nValue;\n+            assert(change_and_fee >= 0);\n+            // Fill a vout to ourself\n+            CTxOut newTxOut(change_and_fee, scriptChange);",
    "path": "src/wallet/wallet.cpp",
    "position": 255,
    "original_position": 279,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "57590fba000c875ebc680b27ce37ceb99c7433fb",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-05-19T19:42:42Z",
    "updated_at": "2021-05-19T19:42:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635534655",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635534655"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635534655"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635534655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2944,
    "original_line": 2944,
    "side": "RIGHT",
    "in_reply_to_id": 633018567
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635534764",
    "pull_request_review_id": 663595866,
    "id": 635534764,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTUzNDc2NA==",
    "diff_hunk": "@@ -2901,205 +2893,174 @@ bool CWallet::CreateTransactionInternal(\n             cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n-            nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n+            // Calculate the cost of change\n+            // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+            // For creating the change output now, we use the effective feerate.\n+            // For spending the change output in the future, we use the discard feerate for now.\n+            // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+            coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+            coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Include the fees for things that aren't inputs, excluding the change output\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+            CAmount nValueToSelect = nValue + not_input_fees;\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n+            const CAmount change_and_fee = input_sum - nValue;\n+            assert(change_and_fee >= 0);\n+            // Fill a vout to ourself\n+            CTxOut newTxOut(change_and_fee, scriptChange);\n+\n+            if (nChangePosInOut == -1)\n+            {\n+                // Insert change txn at random position:\n+                nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+            }\n+            else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+            {\n+                error = _(\"Change index out of range\");\n+                return false;\n+            }\n+\n+            std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+            txNew.vout.insert(position, newTxOut);\n+\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n+\n+            tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            nBytes = tx_sizes.first;\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n+\n+            nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+            // Try to reduce change to include necessary fee\n+            if (nSubtractFeeFromAmount == 0) {\n+                assert(nChangePosInOut != -1);\n+                std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n+                change_position->nValue -= nFeeRet;\n+\n+                if (change_position->nValue < 0) {\n+                    // Maybe the change value was just enough to cover the fee if we did not have change in this transaction\n+                    // Let's try dropping the change, recalculating the fee, and comparing the new fee to change_and_Fee",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 317,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "57590fba000c875ebc680b27ce37ceb99c7433fb",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This comment was removed/rewritten.",
    "created_at": "2021-05-19T19:42:55Z",
    "updated_at": "2021-05-19T19:42:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635534764",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635534764"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635534764"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635534764/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2982,
    "side": "RIGHT",
    "in_reply_to_id": 633083525
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635535238",
    "pull_request_review_id": 663596471,
    "id": 635535238,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTUzNTIzOA==",
    "diff_hunk": "@@ -2901,205 +2893,174 @@ bool CWallet::CreateTransactionInternal(\n             cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n             coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n-            nFeeRet = 0;\n-            bool pick_new_inputs = true;\n-            CAmount nValueIn = 0;\n+            // Calculate the cost of change\n+            // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+            // For creating the change output now, we use the effective feerate.\n+            // For spending the change output in the future, we use the discard feerate for now.\n+            // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+            coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+            coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n \n-            // BnB selector is the only selector used when this is true.\n-            // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = true;\n             coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n-            // Start with no fee and loop until there is enough fee\n-            while (true)\n-            {\n-                nChangePosInOut = nChangePosRequest;\n-                txNew.vin.clear();\n-                txNew.vout.clear();\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+            // vouts to the payees\n+            if (!coin_selection_params.m_subtract_fee_outputs) {\n+                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+            }\n+            for (const auto& recipient : vecSend)\n+            {\n+                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                // vouts to the payees\n+                // Include the fee cost for outputs.\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                 }\n-                for (const auto& recipient : vecSend)\n+\n+                if (IsDust(txout, chain().relayDustFee()))\n                 {\n-                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+                    error = _(\"Transaction amount too small\");\n+                    return false;\n+                }\n+                txNew.vout.push_back(txout);\n+            }\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+            // Include the fees for things that aren't inputs, excluding the change output\n+            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+            CAmount nValueToSelect = nValue + not_input_fees;\n \n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n-                    if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                    }\n+            // Choose coins to use\n+            CAmount input_sum = 0;\n+            setCoins.clear();\n \n-                    if (IsDust(txout, chain().relayDustFee()))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n-                    txNew.vout.push_back(txout);\n-                }\n+            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect, setCoins, input_sum, coin_control, coin_selection_params))\n+            {\n+                error = _(\"Insufficient funds\");\n+                return false;\n+            }\n \n-                // Choose coins to use\n-                bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-                    // as lower-bound to allow BnB to do it's thing\n-                    if (change_spend_size == -1) {\n-                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-                    } else {\n-                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-                    }\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n+            const CAmount change_and_fee = input_sum - nValue;\n+            assert(change_and_fee >= 0);\n+            // Fill a vout to ourself\n+            CTxOut newTxOut(change_and_fee, scriptChange);\n+\n+            if (nChangePosInOut == -1)\n+            {\n+                // Insert change txn at random position:\n+                nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+            }\n+            else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+            {\n+                error = _(\"Change index out of range\");\n+                return false;\n+            }\n+\n+            std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+            txNew.vout.insert(position, newTxOut);\n+\n+            // Dummy fill vin for maximum size estimation\n+            //\n+            for (const auto& coin : setCoins) {\n+                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+            }\n+\n+            tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+            nBytes = tx_sizes.first;\n+            if (nBytes < 0) {\n+                error = _(\"Signing transaction failed\");\n+                return false;\n+            }\n+\n+            nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n+            // Try to reduce change to include necessary fee\n+            if (nSubtractFeeFromAmount == 0) {\n+                assert(nChangePosInOut != -1);\n+                std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 312,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "57590fba000c875ebc680b27ce37ceb99c7433fb",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not sure how safe it is to use an iterator after modifying the vector with an insert afterwards. But because insert returns an iterator pointing to the inserted element, I've changed this so that change_position is set by the insert.",
    "created_at": "2021-05-19T19:43:41Z",
    "updated_at": "2021-05-19T19:43:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635535238",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635535238"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635535238"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635535238/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2977,
    "side": "RIGHT",
    "in_reply_to_id": 633089668
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635538054",
    "pull_request_review_id": 663600218,
    "id": 635538054,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTUzODA1NA==",
    "diff_hunk": "@@ -2956,11 +2952,21 @@ bool CWallet::CreateTransactionInternal(\n                     txNew.vout.push_back(txout);\n                 }\n \n+                // Include the fees for things that aren't inputs, excluding the change output\n+                const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+                CAmount nValueToSelect = nValue + not_input_fees;\n+\n+                // For KnapsackSolver, when we are not subtracting the fee from the recipients, we also want to include the fees for the\n+                // inputs that we found in the previous iteration.\n+                if (!coin_selection_params.use_bnb && nSubtractFeeFromAmount == 0) {\n+                    nValueToSelect += std::max(CAmount(0), nFeeRet - not_input_fees);\n+                }\n+",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 54,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "67fc8b7be1d5fbdb199d6e995434431a7282d446",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I had done it this way so that a future commit which has to remove this special case would not need to modify any lines, just drop the code. This code is required at this commit because nFeeRet itself includes not_input_fees, so KnapsackSolver would always be trying to choose more coins than it actually needs. However in the next commit, this is just dropped directly because it is no longer needed once KnapsackSolver uses effective value.",
    "created_at": "2021-05-19T19:48:19Z",
    "updated_at": "2021-05-19T19:48:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635538054",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635538054"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635538054"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635538054/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 2957,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 2956,
    "side": "RIGHT",
    "in_reply_to_id": 635509067
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635540237",
    "pull_request_review_id": 663603112,
    "id": 635540237,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTU0MDIzNw==",
    "diff_hunk": "@@ -3027,10 +3032,8 @@ bool CWallet::CreateTransactionInternal(\n                             break;\n                         }\n \n-                        // The change value was not enough to cover the fees, even after dropping the change\n-                        // We set nFeeRet back to its original value (the one that includes the change output) and try selecting again\n+                        // The change value was not enough to cover the fees, even after dropping the change. Try selecting again.\n                         assert(change_and_fee < nFeeRet);\n-                        nFeeRet = orig_fee;",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 80,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "67fc8b7be1d5fbdb199d6e995434431a7282d446",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's because we are including the change fee during `SelectCoinsMinConf`. So using the fee that includes the change fee results in us targeting a slightly higher value than we actually need. This is also moot because we stop the looping behavior in the next two commits that have KnapsackSolver use effective values.",
    "created_at": "2021-05-19T19:51:55Z",
    "updated_at": "2021-05-19T19:51:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635540237",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635540237"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635540237"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635540237/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3033,
    "side": "LEFT",
    "in_reply_to_id": 635518342
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635540800",
    "pull_request_review_id": 663603883,
    "id": 635540800,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTU0MDgwMA==",
    "diff_hunk": "@@ -3032,9 +3024,10 @@ bool CWallet::CreateTransactionInternal(\n                             break;\n                         }\n \n-                        // The change value was not enough to cover the fees, even after dropping the change. Try selecting again.\n-                        assert(change_and_fee < nFeeRet);\n-                        continue;\n+                        // Since we use effective values now, it should not be possible to reach this situation where the change value was not\n+                        // enough to cover the fees\n+                        error = _(\"Cannot reduce change to cover transaction fees\");",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 52,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a07552b94fe05651970e53813ae67606692d6f19",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Following your suggested diff, this error condition was removed and I haven't quite figured out the correct place to reintroduce it.",
    "created_at": "2021-05-19T19:52:49Z",
    "updated_at": "2021-05-19T19:52:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635540800",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635540800"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635540800"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/635540800/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3029,
    "side": "RIGHT",
    "in_reply_to_id": 635523507
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637152621",
    "pull_request_review_id": 665781489,
    "id": 637152621,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzE1MjYyMQ==",
    "diff_hunk": "@@ -2956,11 +2952,21 @@ bool CWallet::CreateTransactionInternal(\n                     txNew.vout.push_back(txout);\n                 }\n \n+                // Include the fees for things that aren't inputs, excluding the change output\n+                const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+                CAmount nValueToSelect = nValue + not_input_fees;\n+\n+                // For KnapsackSolver, when we are not subtracting the fee from the recipients, we also want to include the fees for the\n+                // inputs that we found in the previous iteration.\n+                if (!coin_selection_params.use_bnb && nSubtractFeeFromAmount == 0) {\n+                    nValueToSelect += std::max(CAmount(0), nFeeRet - not_input_fees);",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 52,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "bf26e018de33216d6f0ed0d6ff822b93536f7cc1",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Roll static tx fees into nValueToSelect instead of having it be separate\" (bf26e018de33216d6f0ed0d6ff822b93536f7cc1)\r\n\r\nJust want to record some notes about this commit since there is so much going on. IMO, this could be split up an made more clear, but probably not worth it since it won't affect the end results. This commit is doing a few things:\r\n\r\n1. For the BnB case, it is adding `not_input_fees` as the value to select in `CreateTransactionInternal` line 2957 instead of in `SelectCoinsBnB` line 73. This is not a change in behavior, just the value being added in a different place so BnB and knapsack can share the same effective value logic later.\r\n\r\n2. For the non-BnB knapsack case, `not_input_fees` is immediately subtracted again on line 2962 from the value to select, to undo the just mentioned line 2957 change, and try to avoid changing knapsack behavior. But the undo subtraction does not happen and there is a change in behavior if subtract fee from recipients is enable. The undo subtraction also does not happen because of std::max if `not_fee_inputs` is greater than `nFeeRet`, which will be true the first time Knapsack is called after BnB fails. In both of these cases it's unclear if the change in behavior is intentional, but maybe knapsack will be more likely to succeed with these changes. Also it won't matter anyway after the later commit switching knapsack to use effective values.\r\n\r\n3. For the BnB case, `nFeeRet` is no longer added to the value to select on line 2936. The shouldn't be a change in behavior because `nFeeRet` should always be 0 in this case. For the non-BnB case, `nFeeRet` is just added later on line 2962 instead. It looks like a change in behavior because again the std::max skips the addition when `not_fee_inputs` is greater than `nFeeRet`, but I believe that can't happen unless `nFeeRet` is `0`, in which case adding wouldn't have any effect anyway. So I think there is no change in behavior. Also this logic is going away when knapsack switches to effective values, so it shouldn't matter long run.\r\n\r\n4. On line 2422, change output cost is added to knapsack target value. This is a change in behavior and seems to not really be tied to the other changes in this commit. The way I understand it, it could temporarily result in knapsack targeting too high because `nFeeRet` will also include the cost of the change output, so change output cost is considered twice as expensive for targetting. But this is again fixed later with the knapsack switch to effective values. (In general, targeting cost of change output makes sense for knapsack but not bnb because bnb solutions should not have change and knapsack solutions should.)",
    "created_at": "2021-05-21T18:56:05Z",
    "updated_at": "2021-05-21T19:02:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r637152621",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637152621"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r637152621"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637152621/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2962,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637643982",
    "pull_request_review_id": 666344231,
    "id": 637643982,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzY0Mzk4Mg==",
    "diff_hunk": "@@ -621,6 +621,10 @@ struct CoinSelectionParams\n     size_t change_output_size = 0;\n     /** Size of the input to spend a change output in virtual bytes. */\n     size_t change_spend_size = 0;\n+    /** Cost of creating the change output. */",
    "path": "src/wallet/wallet.h",
    "position": null,
    "original_position": 4,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "d97d25d95006725e705635530b27643363d6b2a4",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "not in love with these names since they're both costs, but only one says \"cost\"",
    "created_at": "2021-05-24T02:04:32Z",
    "updated_at": "2021-05-24T03:29:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r637643982",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637643982"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r637643982"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637643982/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 624,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637647447",
    "pull_request_review_id": 666344231,
    "id": 637647447,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzY0NzQ0Nw==",
    "diff_hunk": "@@ -2946,169 +2943,136 @@ bool CWallet::CreateTransactionInternal(\n                 {\n                     CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n+                    // Include the fee cost for outputs.\n                     if (!coin_selection_params.m_subtract_fee_outputs) {\n                         coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                     }\n \n                     if (IsDust(txout, chain().relayDustFee()))\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n+                        error = _(\"Transaction amount too small\");\n                         return false;\n                     }\n                     txNew.vout.push_back(txout);\n                 }\n \n                 // Choose coins to use\n                 bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n+                nValueIn = 0;\n+                setCoins.clear();\n+                if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n+                {\n+                    // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n+                    if (bnb_used) {\n+                        coin_selection_params.use_bnb = false;\n+                        continue;\n+                    }\n+                    else {\n+                        error = _(\"Insufficient funds\");\n+                        return false;\n                     }\n-                } else {\n-                    bnb_used = false;\n                 }\n \n-                const CAmount change_and_fee = nValueIn - nValueToSelect;\n-                if (change_and_fee > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(change_and_fee, scriptChange);\n-\n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // The change_and_fee when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n-                    {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += change_and_fee;\n-                    }\n-                    else\n-                    {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            error = _(\"Change index out of range\");\n-                            return false;\n-                        }\n+                // Always make a change output\n+                // We will reduce the fee from this change output later, and remove the output if it is too small.\n+                const CAmount change_and_fee = nValueIn - nValue;\n+                assert(change_and_fee >= 0);\n+                CTxOut newTxOut(change_and_fee, scriptChange);\n \n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n-                    }\n-                } else {\n-                    nChangePosInOut = -1;\n+                if (nChangePosInOut == -1)\n+                {\n+                    // Insert change txn at random position:\n+                    nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                 }\n+                else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+                {\n+                    error = _(\"Change index out of range\");\n+                    return false;\n+                }\n+\n+                assert(nChangePosInOut != -1);\n+                auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n \n                 // Dummy fill vin for maximum size estimation\n                 //\n                 for (const auto& coin : setCoins) {\n                     txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n                 }\n \n+                // Calculate the transaction fee\n                 tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n                 nBytes = tx_sizes.first;\n                 if (nBytes < 0) {\n                     error = _(\"Signing transaction failed\");\n                     return false;\n                 }\n+                nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n \n-                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if possible. This\n-                    // prevents potential overpayment in fees if the coins\n-                    // selected to meet nFeeNeeded result in a transaction that\n-                    // requires less fee than the prior iteration.\n-\n-                    // If we have no change and a big enough excess fee, then\n-                    // try to construct transaction again only without picking\n-                    // new inputs. We now know we only need the smaller fee\n-                    // (because of reduced tx size) and so we should add a\n-                    // change output. Only try this once.\n-                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n-                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n-                            pick_new_inputs = false;\n-                            nFeeRet = fee_needed_with_change;\n-                            continue;\n-                        }\n-                    }\n-\n-                    // If we have change output already, just increase it\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n-                    }\n-                    break; // Done, enough fee included.\n-                }\n-                else if (!pick_new_inputs) {\n-                    // This shouldn't happen, we should have had enough excess\n-                    // fee to pay for the new output and still meet nFeeNeeded\n-                    // Or we should have just subtracted fee from recipients and\n-                    // nFeeNeeded should not have changed\n-                    error = _(\"Transaction fee and change calculation failed\");\n-                    return false;\n+                // Subtract fee from the change output if not subtrating it from recipient outputs\n+                CAmount fee_needed = nFeeRet;\n+                if (nSubtractFeeFromAmount == 0) {\n+                    change_position->nValue -= fee_needed;\n                 }\n \n-                // Try to reduce change to include necessary fee\n-                if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n-                    std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n-                    }\n+                // We want to drop the change to fees if:\n+                // 1. The change output would be dust\n+                // 2. The change is within the (almost) exact match window, i.e. it is less than or equal to the cost of the change output (cost_of_change)\n+                CAmount change_amount = change_position->nValue;\n+                if (IsDust(*change_position, coin_selection_params.m_discard_feerate) || change_amount <= coin_selection_params.m_cost_of_change)",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 220,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "cc3f14b27c06b7a0da1472f5c7100c3f0b76fd98",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "bnb_used becomes `change_amount <= coin_selection_params.m_cost_of_change`, need to make sure this is not a behavior change overall\r\n\r\nthe logic itself is fine to me, whether or not it's a change in behavior overall in this commit",
    "created_at": "2021-05-24T02:18:37Z",
    "updated_at": "2021-05-24T03:29:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r637647447",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637647447"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r637647447"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637647447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3021,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637650933",
    "pull_request_review_id": 666344231,
    "id": 637650933,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzY1MDkzMw==",
    "diff_hunk": "@@ -2946,169 +2943,136 @@ bool CWallet::CreateTransactionInternal(\n                 {\n                     CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        assert(nSubtractFeeFromAmount != 0);\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-                    // Include the fee cost for outputs. Note this is only used for BnB right now\n+                    // Include the fee cost for outputs.\n                     if (!coin_selection_params.m_subtract_fee_outputs) {\n                         coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n                     }\n \n                     if (IsDust(txout, chain().relayDustFee()))\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                error = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            error = _(\"Transaction amount too small\");\n+                        error = _(\"Transaction amount too small\");\n                         return false;\n                     }\n                     txNew.vout.push_back(txout);\n                 }\n \n                 // Choose coins to use\n                 bool bnb_used = false;\n-                if (pick_new_inputs) {\n-                    nValueIn = 0;\n-                    setCoins.clear();\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n-                    {\n-                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n-                        if (bnb_used) {\n-                            coin_selection_params.use_bnb = false;\n-                            continue;\n-                        }\n-                        else {\n-                            error = _(\"Insufficient funds\");\n-                            return false;\n-                        }\n+                nValueIn = 0;\n+                setCoins.clear();\n+                if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n+                {\n+                    // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n+                    if (bnb_used) {\n+                        coin_selection_params.use_bnb = false;\n+                        continue;\n+                    }\n+                    else {\n+                        error = _(\"Insufficient funds\");\n+                        return false;\n                     }\n-                } else {\n-                    bnb_used = false;\n                 }\n \n-                const CAmount change_and_fee = nValueIn - nValueToSelect;\n-                if (change_and_fee > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    CTxOut newTxOut(change_and_fee, scriptChange);\n-\n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    // The change_and_fee when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n-                    {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += change_and_fee;\n-                    }\n-                    else\n-                    {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            error = _(\"Change index out of range\");\n-                            return false;\n-                        }\n+                // Always make a change output\n+                // We will reduce the fee from this change output later, and remove the output if it is too small.\n+                const CAmount change_and_fee = nValueIn - nValue;\n+                assert(change_and_fee >= 0);\n+                CTxOut newTxOut(change_and_fee, scriptChange);\n \n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n-                    }\n-                } else {\n-                    nChangePosInOut = -1;\n+                if (nChangePosInOut == -1)\n+                {\n+                    // Insert change txn at random position:\n+                    nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n                 }\n+                else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+                {\n+                    error = _(\"Change index out of range\");\n+                    return false;\n+                }\n+\n+                assert(nChangePosInOut != -1);\n+                auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n \n                 // Dummy fill vin for maximum size estimation\n                 //\n                 for (const auto& coin : setCoins) {\n                     txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n                 }\n \n+                // Calculate the transaction fee\n                 tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n                 nBytes = tx_sizes.first;",
    "path": "src/wallet/wallet.cpp",
    "position": 368,
    "original_position": 154,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "cc3f14b27c06b7a0da1472f5c7100c3f0b76fd98",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "not your fault, but I find this tuple poorly/non-documented. Had to read the actual source to figure out what it is",
    "created_at": "2021-05-24T02:32:32Z",
    "updated_at": "2021-05-24T03:29:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r637650933",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637650933"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r637650933"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637650933/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2993,
    "original_line": 3004,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637658895",
    "pull_request_review_id": 666344231,
    "id": 637658895,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzY1ODg5NQ==",
    "diff_hunk": "@@ -2956,11 +2952,21 @@ bool CWallet::CreateTransactionInternal(\n                     txNew.vout.push_back(txout);\n                 }\n \n+                // Include the fees for things that aren't inputs, excluding the change output\n+                const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+                CAmount nValueToSelect = nValue + not_input_fees;\n+\n+                // For KnapsackSolver, when we are not subtracting the fee from the recipients, we also want to include the fees for the\n+                // inputs that we found in the previous iteration.\n+                if (!coin_selection_params.use_bnb && nSubtractFeeFromAmount == 0) {",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 51,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "bf26e018de33216d6f0ed0d6ff822b93536f7cc1",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "this section doesn't seem straight forward but it promptly vanishes so whatever",
    "created_at": "2021-05-24T03:04:23Z",
    "updated_at": "2021-05-24T03:29:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r637658895",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637658895"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r637658895"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637658895/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2961,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638249950",
    "pull_request_review_id": 667141252,
    "id": 638249950,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODI0OTk1MA==",
    "diff_hunk": "@@ -3032,9 +3024,10 @@ bool CWallet::CreateTransactionInternal(\n                             break;\n                         }\n \n-                        // The change value was not enough to cover the fees, even after dropping the change. Try selecting again.\n-                        assert(change_and_fee < nFeeRet);\n-                        continue;\n+                        // Since we use effective values now, it should not be possible to reach this situation where the change value was not\n+                        // enough to cover the fees\n+                        error = _(\"Cannot reduce change to cover transaction fees\");",
    "path": "src/wallet/wallet.cpp",
    "position": null,
    "original_position": 52,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "a07552b94fe05651970e53813ae67606692d6f19",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Have KnapsackSolver actually use effective values\" (01dc8ebda50a382d45d3d169b2c3f3965869dcae)\r\n\r\n> Following your suggested diff, this error condition was removed and I haven't quite figured out the correct place to reintroduce it.\r\n\r\nNot important, but I think the updated equivalent after 01dc8ebda50a382d45d3d169b2c3f3965869dcae would be:\r\n\r\n```diff\r\n--- a/src/wallet/wallet.cpp\r\n+++ b/src/wallet/wallet.cpp\r\n@@ -3004,10 +3004,9 @@ bool CWallet::CreateTransactionInternal(\r\n                     error = _(\"Signing transaction failed\");\r\n                     return false;\r\n                 }\r\n-                nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\r\n+                CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes);\r\n \r\n                 // Subtract fee from the change output if not subtrating it from recipient outputs\r\n-                CAmount fee_needed = nFeeRet;\r\n                 if (nSubtractFeeFromAmount == 0) {\r\n                     change_position->nValue -= fee_needed;\r\n                 }\r\n@@ -3071,6 +3070,10 @@ bool CWallet::CreateTransactionInternal(\r\n                     nFeeRet = fee_needed;\r\n                     break; // The fee has been deducted from the recipients, nothing left to do here\r\n                 }\r\n+                CHECK_NONFATAL(!coin_selection_params.use_bnb);\r\n+                CHECK_NONFATAL(nFeeRet == 0);\r\n+                CHECK_NONFATAL(fee_needed != 0);\r\n+                nFeeRet = fee_needed;\r\n             }\r\n \r\n             // Give up if change keypool ran out and change is required\r\n```\r\n\r\n",
    "created_at": "2021-05-24T20:25:09Z",
    "updated_at": "2021-05-24T20:31:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r638249950",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638249950"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r638249950"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638249950/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3029,
    "side": "RIGHT",
    "in_reply_to_id": 635523507
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638735730",
    "pull_request_review_id": 667755627,
    "id": 638735730,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODczNTczMA==",
    "diff_hunk": "@@ -2885,6 +2878,16 @@ bool CWallet::CreateTransactionInternal(\n             CTxOut change_prototype_txout(0, scriptChange);\n             coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n \n+            // Get size of spending the change output\n+            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+            // as lower-bound to allow BnB to do it's thing",
    "path": "src/wallet/wallet.cpp",
    "position": 144,
    "original_position": 26,
    "commit_id": "51a3ac242c92e69b59df26f8f9e287b31e5c3b0f",
    "original_commit_id": "d97d25d95006725e705635530b27643363d6b2a4",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: `its`",
    "created_at": "2021-05-25T12:21:40Z",
    "updated_at": "2021-05-25T13:04:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r638735730",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638735730"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17331#discussion_r638735730"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638735730/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2867,
    "original_line": 2884,
    "side": "RIGHT"
  }
]