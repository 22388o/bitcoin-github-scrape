DrahtBot,2019-10-31 19:22:26,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22042 (Replace size/weight estimate tuple with struct for named fields by instagibbs)\n* #21207 (MOVEONLY: CWallet transa",https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-548530629,548530629,
instagibbs,2019-11-01 16:17:24,"concept ACK, unifying to effective value should make 95% of my consternation with Core coin selection go away by making further improvements easier.\n\nSo with this change another idea is to have an opt-in Single Random Draw(SRD) which should be pretty drop-in after this which would allow more experimentation with less systemic risk.",https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-548849424,548849424,
laanwj,2019-11-02 10:27:57,"Concept ACK, thanks for making this code more understandable.",https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-549030800,549030800,
achow101,2019-11-13 00:10:01,"I think there's a bug in here somewhere. I ran some [simulations](https://gist.github.com/achow101/edf6b5e308035a489fbb1f28d12e2109) and it looks like there is a significant difference in some things (e.g. minimum change value) but it should be the same as master. I'm investigating that.\n\nEdit: I think I fixed it. Requires #17458 now.",https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-553176319,553176319,
meshcollider,2020-08-02 01:01:10,"Concept ACK. This looks okay to me so far with some review, but I am still getting my head around coin selection, so I want to review this a bit more before giving a review ack.\n\nAlso 0f8955ff1b2e99a4b56a3dad465833ec86ec05fd seems should just be squashed.",https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-667607706,667607706,
achow101,2020-08-11 18:27:11,"> Also 0f8955f seems should just be squashed.\n\nSquashed. That commit is part of #17458, so comments about it should be left there.",https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-672166872,672166872,
instagibbs,2020-09-28 19:37:56,"https://travis-ci.org/github/bitcoin/bitcoin/jobs/718692541#L3326\n\nError, wallet loading race? \n\nWill review again.",https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-700239780,700239780,
achow101,2020-09-29 21:37:12,"Rebased this onto #20040 as I think the refactor there makes this easier to understand. Also, there was a silent merge conflict with master.",https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-701004628,701004628,
MarcoFalke,2021-02-19 10:37:24,"Even though this is in high-prio, reviewers might want to review #21083 first.\n\n\n> Only #21083 should be backported, and it should be merged first for the backport to go smoothly.\n> https://github.com/bitcoin/bitcoin/issues/19229#issuecomment-781583859",https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-781990749,781990749,
Xekyo,2021-05-04 03:40:24,"I keep making the same mistake of reviewing this commit by commit, when half the code that gets changed around actually disappears midway through the PR. Feel free to ignore these irrelevant bits. :sweat:\n",https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-831664877,831664877,
achow101,2021-05-06 20:08:05,"I've done a bit of commit reorganization but the final diff should not be very different.\n\nAlso, it seems that ""Have KnapsackSolver actually use effective values"" breaks `wallet_bumpfee.py`, but ""Remove CreateTransaction while loop and some related variables"" fixes it. I'm not sure if it is necessary to investigate the failure so that the test passes throughout.",https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-833826003,833826003,
SomethingUseful,2021-05-07 21:59:51,we were running this PR as bitcoin-0.21.0-patch. We upgraded to 0.21.1 and after few days were having failed transactions again so we had to roll back to this patch version again.,https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-834809491,834809491,
achow101,2021-05-08 07:04:09,"> But the main thing I am not conceptually understanding about the new code is how it now is possible to decide whether or not to drop the change output /before/ handing fSubtractFeeFromAmount. How could you know whether dropping the output is economical before knowing how big the output will be? Anyway, I assume I'm just missing things and will try again.\n\nThat is indeed an issue. I've rework",https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-835158967,835158967,
achow101,2021-05-13 20:50:02,Rebased for a silent merge conflict.,https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-840825909,840825909,
achow101,2021-05-14 18:38:30,"Since the fee deduction logic was still a bit confusing, I've slightly reworked it again. The latest change should be much easier to comprehend. There was a minor commit reordering too which allows all of the commits to pass the tests too. This should be the final major revision to this PR.",https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-841429503,841429503,
ryanofsky,2021-05-19 13:31:34,"In commit ""Move output reductions for fee to after coin selection"" (2b445b7c1336506d43874a7ee31f85f511cd3114)\n\nI was experimenting with some of the simplifications I suggested earlier and make the following changes on top of 2b445b7c1336506d43874a7ee31f85f511cd3114 to remove duplicate logic and make the code shorter. I think it's more readable, but obviously that's subjective.\n\n```diff\nd",https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-844109424,844109424,
achow101,2021-05-19 19:44:25,I've updated this to include @ryanofsky's suggested changes.,https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-844415446,844415446,
ryanofsky,2021-05-19 20:01:39,"Thanks for following up, and I'll take a look at the updates. I still don't get `c += std::max(0, a-b);` instead of `c += a; c =- b;`, but I can see basically the new things I've been confused by are temporary and removed later commits so not worth perfecting or putting too much effort into.",https://github.com/bitcoin/bitcoin/pull/17331#issuecomment-844427903,844427903,
fjahr,2020-03-13 13:58:50,rename `target_value` to `actual_target` here as well?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392244023,392244023,src/wallet/coinselection.h
fjahr,2020-03-13 14:06:02,This looks like a debug print?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392248385,392248385,src/wallet/wallet.cpp
fjahr,2020-03-13 14:22:13,Is this missing a `continue` here?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392258026,392258026,src/wallet/wallet.cpp
achow101,2020-03-13 15:34:27,No. What this is doing is that we are skipping the index that is reserved for the change output. Doing `continue` would skip the current recipient which we definitely don't want to do.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392302913,392302913,src/wallet/wallet.cpp
achow101,2020-03-13 15:34:38,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392303022,392303022,src/wallet/coinselection.h
achow101,2020-03-13 15:34:44,Removed,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r392303083,392303083,src/wallet/wallet.cpp
fjahr,2020-03-18 00:38:49,Got it. I was irritated because of seeing in this case `++i` was called twice in the loop. ,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r394047160,394047160,src/wallet/wallet.cpp
fjahr,2020-05-25 16:09:51,"Comment is outdated here, might be confusing even with the update below.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430005434,430005434,src/wallet/test/coinselector_tests.cpp
fjahr,2020-05-25 16:10:38,Should also be updated since it's now 0.5.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430005681,430005681,src/wallet/test/coinselector_tests.cpp
fjahr,2020-05-25 16:43:05,"If ""Needed"" is always the same as ""Fee"" maybe just remove it from the log string?",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430015012,430015012,src/wallet/wallet.cpp
fjahr,2020-05-25 17:04:18,"Since we are already in an if branch that asserts the exact same thing, I think this `assert` is not necessary.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430021062,430021062,src/wallet/wallet.cpp
achow101,2020-05-26 20:02:20,Removed,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430675212,430675212,src/wallet/wallet.cpp
achow101,2020-05-26 20:02:23,Removed,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430675256,430675256,src/wallet/wallet.cpp
achow101,2020-05-26 20:02:46,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430675466,430675466,src/wallet/test/coinselector_tests.cpp
achow101,2020-05-26 20:02:51,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r430675504,430675504,src/wallet/test/coinselector_tests.cpp
instagibbs,2020-09-28 19:45:57,Leave a comment why this is here. Would be confusing for someone that doesn't know the controversial history of our hoovering UTXO manager :),https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496191485,496191485,src/wallet/wallet.cpp
instagibbs,2020-09-28 19:52:48,note to reviewers: this is removed next commit,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496195089,496195089,src/wallet/wallet.cpp
instagibbs,2020-09-28 20:05:44,err. no?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496201643,496201643,src/wallet/wallet.cpp
instagibbs,2020-09-28 20:07:15,let's bracketize while we're here.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496202421,496202421,src/wallet/wallet.cpp
instagibbs,2020-09-28 20:07:23,let's bracketize while we're here.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496202501,496202501,src/wallet/wallet.cpp
instagibbs,2020-09-28 20:07:29,let's bracketize while we're here.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496202556,496202556,src/wallet/wallet.cpp
instagibbs,2020-09-28 20:08:38,"```suggestion\n            // as lower-bound to allow coin selection to do its thing\n```",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496203125,496203125,src/wallet/wallet.cpp
instagibbs,2020-09-28 20:11:47,"let's please rename this to something like `total_recipient_value`, I find this name actually worse than previous",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496204694,496204694,src/wallet/wallet.cpp
instagibbs,2020-09-28 20:18:12,nit: make this an `else if` since they can't both happen,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496207756,496207756,src/wallet/wallet.cpp
instagibbs,2020-09-28 20:19:39,"this change from `+=` to `=` looks correct, just kind of sneaky. Throw in an assert that it's 0 before setting?",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496208469,496208469,src/wallet/wallet.cpp
instagibbs,2020-09-28 20:33:45,"Actually, this is impossible now since you moved the subtract from fee parts to later?",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496215647,496215647,src/wallet/wallet.cpp
instagibbs,2020-09-28 20:35:05,"It can only fire if you've already encountered the change position and discarded it based on discard_rate check. I think this check is supposed to be talking about when subtract from fee is being done earlier?\n\nI think this whole section just becomes ""Transaction amount too small"" error?",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496216362,496216362,src/wallet/wallet.cpp
instagibbs,2020-09-28 20:35:48,doesn't this section need to make sure we didn't turn outputs into relay dust?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496216743,496216743,src/wallet/wallet.cpp
instagibbs,2020-09-28 20:39:23,"Not immediately obvious to me what this change is doing, explain? Also this should say `selected_eff`?",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r496218498,496218498,src/wallet/wallet.cpp
achow101,2020-09-29 21:29:54,Added a comment,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497071541,497071541,src/wallet/wallet.cpp
achow101,2020-09-29 21:30:03,Removed,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497071606,497071606,src/wallet/wallet.cpp
achow101,2020-09-29 21:30:26,Braketized where this was moved to.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497071815,497071815,src/wallet/wallet.cpp
achow101,2020-09-29 21:30:41,Yes. Moved this to the later part.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497071960,497071960,src/wallet/wallet.cpp
achow101,2020-09-29 21:30:53,Removed this else,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072060,497072060,src/wallet/wallet.cpp
achow101,2020-09-29 21:31:08,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072177,497072177,src/wallet/wallet.cpp
achow101,2020-09-29 21:31:13,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072226,497072226,src/wallet/wallet.cpp
achow101,2020-09-29 21:31:18,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072272,497072272,src/wallet/wallet.cpp
achow101,2020-09-29 21:31:24,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072313,497072313,src/wallet/wallet.cpp
achow101,2020-09-29 21:31:47,Yes. Moved the subtract from fee checks to the part where that is actually being done.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072501,497072501,src/wallet/wallet.cpp
achow101,2020-09-29 21:31:57,Added from above.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497072583,497072583,src/wallet/wallet.cpp
achow101,2020-09-29 21:36:14,"This is essentially doing what `used_bnb` did.\n\nIf the selected effective value is within the exact matching range that we use for BnB, then let the change go to fees.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r497074586,497074586,src/wallet/wallet.cpp
Xekyo,2020-12-04 15:40:36,"I see that this is setting a default `false` for `avoidPartial`. Did you consider setting it to true by default, and why didn't you? (I'd have a few ideas, but I was curious what you considered.)",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536188959,536188959,src/bench/coin_selection.cpp
Xekyo,2020-12-04 15:48:06,"I'm still confused by this approach, given that it may lead to spending uneconomic unspents due to the receiver paying the fees. I understand from the last PR I looked at, that this function is often used for sweeping wallets. To offer another perspective, I'm aware of multiple Bitcoin services that make their customers pay the transaction fees for withdrawals and in that case I would consider suc",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536194244,536194244,src/wallet/wallet.cpp
Xekyo,2020-12-04 15:53:25,"The ""breaking consensus"" part of the comment seems a bit spurious, given that `OUTPUT_GROUP_MAX_ENTRIES` appears to be set to ten, and 400,000 WU is the standardness limit, not even a consensus rule.\n\nFrankly, anyone using `-avoidpartialspends` for privacy reasons would be severely confused if they reused addresses heavily enough to bump into this issue, but still…",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536198142,536198142,src/wallet/wallet.cpp
Xekyo,2020-12-04 16:03:44,"I find this hard to read. So you have a map, retrieve the coins with the same destination (i.e. invoice address), then read the value of the map by calling the ""second"" (presumably value) of an iterator item. If it's full, it gets added to groups, but what is that in line 4220 then? Are you overwriting the element in the map with an empty output group as a shortcut to remove the final group and cr",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536205262,536205262,src/wallet/wallet.cpp
Xekyo,2020-12-04 16:09:49,"I find it hard to wrap my head around all the possible outcomes for this functions due to the four levels of nested `if`'s followed by `else` branches.\n\nPut the simpler cases to the top, i.e. starting with `if (single_coin) { ""add group"" }` then do the more complex cases. I think you can reduce this by at least two levels of nesting.\n\nAlso, how is this followed by another `if(!single_coin)",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536209337,536209337,src/wallet/wallet.cpp
Xekyo,2020-12-04 18:15:45,I don't understand why the grouping has been moved into the scope of using BnB. Wouldn't the groups be used for any unspent selection?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536287706,536287706,src/wallet/wallet.cpp
Xekyo,2020-12-04 18:25:01,"How about \n`// Every OutputGroup has only one output`",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536293077,536293077,src/wallet/wallet.cpp
Xekyo,2020-12-04 18:28:05,"Negations are hard to read. How about:\n`// Only add eligible OutputGroups` or `// Omit OutputGroups that are not eligible`",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536294813,536294813,src/wallet/wallet.cpp
Xekyo,2020-12-04 18:34:55,How about a method `GetEffectiveValue(const CFeeRate feerate)` on `CInputCoin`?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536298600,536298600,src/wallet/coinselection.cpp
Xekyo,2020-12-04 18:58:58,"When I see a method called `Insert`, I'd expect that the passed inputs end up in the corresponding datastructure. \n\nThis method does a lot more than just inserting, though. Maybe we can find a better name for the function, or split out the other responsibilities.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536312209,536312209,src/wallet/coinselection.cpp
Xekyo,2020-12-07 21:19:00,Maybe pull out `coin.tx->m_amounts[CWalletTx::DEBIT].m_cached[ISMINE_SPENDABLE] && coin.tx->m_amounts[CWalletTx::DEBIT].m_value[ISMINE_SPENDABLE] == 1` onto its own line and assign it to a variable?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537840093,537840093,src/wallet/test/coinselector_tests.cpp
Xekyo,2020-12-07 21:22:15,"You could have coins that are not spendable at high fees but also not dust. Then this would allow UTXO received to the same address to get spent separately (part of it now, at high fees, rest later at lower fees).",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537842046,537842046,src/wallet/wallet.cpp
Xekyo,2020-12-07 21:23:16,"AFAICT, this like can never trigger, because we are disallowing adding uneconomic UXTO above when `positive_only` is true. ",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537842659,537842659,src/wallet/wallet.cpp
Xekyo,2020-12-07 21:26:17,"I'm almost ready to ask for a flowchart for all the possible outcomes of `avoid_partial`, `positive_only`, and various fee rates ;)",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537844474,537844474,src/wallet/wallet.cpp
Xekyo,2020-12-07 21:30:19,"The thing with the ""full groups"" still baffles me. Is it reasonable to expect overlap between someone interested in privacy enough to activate `avoid_partial` and someone that reuses addresses heavily enough that they stack up dozens of UTXOs, yet they still aren't diligent enough to actually consolidate the large amount of UTXOs in one low feerate transaction?\n\nI guess what I'm saying is… I d",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537846829,537846829,src/wallet/coinselection.h
Xekyo,2020-12-07 21:38:51,Shouldn't this differ by whether non-input portion of transactions built by BnB vs by Knapsack or Random is expected to have a change output or not?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537851880,537851880,src/wallet/wallet.cpp
Xekyo,2020-12-08 02:06:07,How is ensured that the KnapsackSolver retains a sufficient amount for a decently sized change output?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537976831,537976831,src/wallet/wallet.cpp
Xekyo,2020-12-08 02:10:17,Why does this fail at all? Couldn't we just test that selected the right count of inputs and the right input amount?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537978332,537978332,src/wallet/test/coinselector_tests.cpp
Xekyo,2020-12-08 02:15:12,"`effective_feerate`, since it's a feerate not a fee.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537980091,537980091,src/wallet/wallet.cpp
Xekyo,2020-12-08 02:21:40,I assume this is to handle foreign change addresses that are opaque due to P2SH?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537982397,537982397,src/wallet/wallet.cpp
Xekyo,2020-12-08 02:24:45,Didn't we just call the first two of that triplet `actual_target`?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r537983513,537983513,src/wallet/wallet.cpp
achow101,2020-12-08 21:12:54,I had not considered enabling `avoidpartial`.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538811226,538811226,src/bench/coin_selection.cpp
achow101,2020-12-08 21:14:55,"Given that this is how we currently handle subtracting the fee from outputs for BnB, I would prefer to preserve this behavior for now for all effective value things. We can revisit this in a followup.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538812420,538812420,src/wallet/wallet.cpp
achow101,2020-12-08 21:17:38,Yes. The full group is added to the `groups` vector and the group in the map is reset to a fresh group for any further outputs to add for that destination.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538814050,538814050,src/wallet/wallet.cpp
achow101,2020-12-08 21:20:08,I'm not sure which commit this comment is for. The particular change is not present in the final diff.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538815510,538815510,src/wallet/wallet.cpp
achow101,2020-12-08 22:21:41,"Given that this is behavior that already exists, I think we should leave this for a followup as it also requires further discussion of what we want to do.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538851967,538851967,src/wallet/wallet.cpp
achow101,2020-12-08 22:26:17,I think it's mostly as a belt-and-suspenders type of thing. Perhaps @kallewoof can shed some light on this.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538854472,538854472,src/wallet/coinselection.h
achow101,2020-12-08 22:26:56,"Existing name, won't change for now.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538854861,538854861,src/wallet/wallet.cpp
achow101,2020-12-09 00:17:48,Yes.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538907708,538907708,src/wallet/wallet.cpp
achow101,2020-12-09 01:05:41,I think `Insert` is a reasonable name for it. Everything that gets passed in ends up in the data structure.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538926154,538926154,src/wallet/coinselection.cpp
achow101,2020-12-09 01:06:35,Prefer to leave it alone for now since we aren't really making related changes here.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538926467,538926467,src/wallet/test/coinselector_tests.cpp
achow101,2020-12-09 01:07:25,Meh. Belt-and-suspenders check.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538926789,538926789,src/wallet/wallet.cpp
achow101,2020-12-09 01:08:29,We deal with the change fee later.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538927203,538927203,src/wallet/wallet.cpp
achow101,2020-12-09 01:16:18,The minimum change stuff is within `KnapsackSolver` itself.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538930149,538930149,src/wallet/wallet.cpp
achow101,2020-12-09 01:19:48,"Because we prefer BnB if it works, the test would previously always use BnB because the coins were always `1 * COIN`. This change (and other similar changes to use a `0.5`) ensures that we cannot exactly match the target with the given coins so the `KnapsackSolver` is always used.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538931558,538931558,src/wallet/test/coinselector_tests.cpp
achow101,2020-12-09 01:20:00,Yes.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538931603,538931603,src/wallet/wallet.cpp
achow101,2020-12-09 01:20:46,"I believe we discussed changing this, but I decided to leave that for a followup refactor that cleans up this whole function.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538931902,538931902,src/wallet/wallet.cpp
achow101,2020-12-09 01:21:24,Done in the upstream pr.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538932146,538932146,src/wallet/wallet.cpp
achow101,2020-12-09 01:21:30,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538932179,538932179,src/wallet/wallet.cpp
achow101,2020-12-09 01:21:36,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538932225,538932225,src/wallet/wallet.cpp
achow101,2020-12-09 01:22:20,Meh. I think it's fine for now.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r538932613,538932613,src/wallet/coinselection.cpp
kallewoof,2021-01-14 03:46:00,"I think the thought of use case here is: someone sends you money. Later on they track you by sending insignificant amounts to the same address. Two scenarios here:\n\n1. You've already spent from that address once. If you spend from it again, they can associate the two transactions to you*.\n2. You haven't spent from it once. By giving your coin selection algorithm a bunch of UTXO:s to select f",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r557025910,557025910,src/wallet/coinselection.h
jonatack,2021-02-04 16:02:56,"7865b70b60 I assume I'm confused but would have thought it would be this way around\n\n```suggestion\n            coin.effective_value = coin.txout.nValue - (coin_selection_params.m_subtract_fee_outputs ? coin_selection_params.effective_fee.GetFee(coin.m_input_bytes) : 0);\n```\nIt seems one of these two versions should fail but ` src/test/test_bitcoin -t coinselector_tests` passes with both.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r570343948,570343948,src/wallet/wallet.cpp
jonatack,2021-02-04 16:42:57,"695fbaa3 Not saying it needs to be addressed in this pull but keep in mind that `CAmount` is a cheaply copied type that should be passed by value for ""in"" params.\n\nAlso not directly related but ISTM the Doxygen part of the comments should be in the header file declaration. ",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r570375124,570375124,src/wallet/coinselection.cpp
jonatack,2021-02-04 16:51:42,"695fbaa3a nicety if you retouch\n```suggestion\n            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValue + not_input_fees, setCoins, input_sum, coin_control, coin_selection_params))\n```",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r570382208,570382208,src/wallet/wallet.cpp
jonatack,2021-02-04 18:11:58,"bc963a3c I'd find this helpful, if this is what the naming means\n```suggestion\n            CAmount selected_eff = 0; // selected effective value\n```\n",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r570440109,570440109,src/wallet/wallet.cpp
achow101,2021-02-05 18:47:22,"When we are subtracting the fee from an output, we set the effective value to its real value.\n\nThe test to use is usually `test/functional/rpc_fundrawtransaction.py`.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r571177153,571177153,src/wallet/wallet.cpp
jonatack,2021-02-06 18:53:57,Thanks @achow101. Re-checked and `wallet_bumpfee.py` and `rpc_psbt.py` both fail with the wrong version.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r571471177,571471177,src/wallet/wallet.cpp
glozow,2021-04-01 19:22:34,"Can be `const`. Also, this code was not immediately obvious to me, so I think a comment (and shorter lines) would be nice. \n```suggestion\n                // Cost of a change output = (size of output * this tx feerate) + (size of spending input * discard feerate)\n                const CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) \n           ",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r605892349,605892349,src/wallet/wallet.cpp
glozow,2021-04-01 19:27:53,"tiny nit, since you're touching\n```suggestion\n            BOOST_CHECK(testWallet.SelectCoinsMinConf(50.5 * COIN, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n```",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r605895099,605895099,src/wallet/test/coinselector_tests.cpp
glozow,2021-04-01 19:32:09,"I think @Xekyo was referring to the ""this test will fail 1% of the time"" part? I was confused as well. Since you're touching the comment maybe elaborate on it too? This test is checking that the knapsack solver has some randomness and picks different coins on different invocations, but even such, we have a 1/100 chance of picking the exact same coins, so this test fails 1% of the time.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r605897436,605897436,src/wallet/test/coinselector_tests.cpp
glozow,2021-04-01 19:37:03,"const all the things 😝 especially since this is _the_ part of the fee that doesn't change.\n```suggestion\n            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n```",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r605899886,605899886,src/wallet/wallet.cpp
glozow,2021-04-01 20:05:17,"In a493cbcb26: it seems a little hacky to use 50.5 to make it use the knapsack solver, why not just call `KnapsackSolver` directly since that's what you're testing?",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r605914857,605914857,src/wallet/test/coinselector_tests.cpp
achow101,2021-04-02 00:13:38,I've rewritten this comment.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606010296,606010296,src/wallet/test/coinselector_tests.cpp
achow101,2021-04-02 00:18:31,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606011579,606011579,src/wallet/wallet.cpp
achow101,2021-04-02 00:18:35,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606011588,606011588,src/wallet/wallet.cpp
achow101,2021-04-02 00:26:41,Added a comment. Also did the same split that was done in SelectCoinsMinConf.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606013490,606013490,src/wallet/wallet.cpp
achow101,2021-04-02 00:27:16,"This space is to make it line up with the line below, but it doesn't really matter. Done.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606013624,606013624,src/wallet/test/coinselector_tests.cpp
achow101,2021-04-02 00:27:23,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606013649,606013649,src/wallet/wallet.cpp
achow101,2021-04-02 00:27:31,"Good idea, done.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r606013684,606013684,src/wallet/test/coinselector_tests.cpp
Xekyo,2021-04-09 16:41:10,"I think this approach muddles two concerns. We should generally filter inputs that have a negative effective feerate, even when we do not pay for the fees, but the recipient does.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r610767908,610767908,src/wallet/wallet.cpp
Xekyo,2021-04-09 17:29:27,"Since `OutputGroup` only exist ephemerally within the context of a specific coinselection, and the outputgroup knows the current feerate, would it perhaps make sense to make the calculation of an OutputGroup's effective value a member function of that struct?",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r610796222,610796222,src/wallet/coinselection.cpp
glozow,2021-04-09 17:42:12,You've changed these from `90*CENT` to `90*COIN`?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r610803380,610803380,src/wallet/test/coinselector_tests.cpp
Xekyo,2021-04-09 17:46:04,"Nit: not identical, but equivalent:\n""// Test that KnapsackSolver selects randomly from equivalent coins (same value and same input size).""",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r610805632,610805632,src/wallet/test/coinselector_tests.cpp
Xekyo,2021-04-09 17:57:31,"This single boolean statement appears to encode the entire eligibility back-off strategy for coin selection. It's very repetitive, since the only thing that changes are the eligibility filters.\n\nYou could define all variants of the eligibility filter, comment there how they're motivated, then make a single lambda call using that list. \nSince `res` is not const, you could split it into two bl",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r610812158,610812158,src/wallet/wallet.cpp
fjahr,2021-04-21 22:29:56,"```suggestion\n                // Tests that the KnapsackSolver becomes a random selector with identical coins.\n```",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r617934064,617934064,src/wallet/test/coinselector_tests.cpp
fjahr,2021-04-21 23:02:21,"Hm, shouldn't this be `nFeeRet = fee_needed - nFeeRet;` in case there is already a small dust output in `nFeeRet`?",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r617948506,617948506,src/wallet/wallet.cpp
fjahr,2021-04-21 23:10:13,"nit\n```suggestion\n    const CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n    const CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n```",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r617952598,617952598,src/wallet/wallet.cpp
fjahr,2021-04-21 23:16:27,"nit\n```suggestion\n                const CAmount change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n                const CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + change_fee;\n```",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r617956000,617956000,src/wallet/wallet.cpp
fjahr,2021-04-21 23:18:35,nit: could be moved below this if to where it is used,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r617956840,617956840,src/wallet/wallet.cpp
glozow,2021-04-22 22:43:15,"If you retouch, this would be nice\n```suggestion\n            // Total effective value of selected coins\n            const CAmount selected_eff = std::accumulate(setCoins.cbegin(), setCoins.cend(), 0,\n                [](CAmount sum, const auto& coin) { return sum + coin.effective_value; });\n```",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618790657,618790657,src/wallet/wallet.cpp
glozow,2021-04-22 23:25:10,"This is mostly to confirm my understanding - ?\n```suggestion\n                // There are two cases in which we drop the change to fees:\n                // 1. The change output would be dust.\n                // 2. We found an ""exact match,"" i.e. the difference between the total effective value of the selected\n                // coins and nTargetValue is less than or equal to the cost of ",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618814784,618814784,src/wallet/wallet.cpp
glozow,2021-04-22 23:35:22,Taking this as an opportunity to shill #21759 😛 ,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618818186,618818186,src/wallet/wallet.cpp
Xekyo,2021-04-22 23:39:24,"I think it may be good if `CInputCoin` kept track of both `nValue` and `n_effective_value` separately. In the case of recipient paying for the tx, we could use effective value for filtering, but `nValue` to determine whether sufficient funds have been selected.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618819613,618819613,src/wallet/wallet.cpp
Xekyo,2021-04-22 23:41:14,"Then also, `effective_value` wouldn't need to be instantiated with `nValue` which I thought was pretty surprising.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618820197,618820197,src/wallet/wallet.cpp
Xekyo,2021-04-23 00:16:47,Perhaps consider calling this `selection_target` or something else that ties it more strongly to the context.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618831144,618831144,src/wallet/coinselection.cpp
Xekyo,2021-04-23 00:19:14,Although in that case `nTargetValue` should perhaps also be renamed to something like `selection_target_with_minchange`?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r618832133,618832133,src/wallet/coinselection.cpp
achow101,2021-04-23 16:41:16,I'll leave this to #21759 to clean up.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619358115,619358115,src/wallet/wallet.cpp
achow101,2021-04-23 18:46:27,"No, `nFeeRet` needs to be the total amount in fees, and whatever small change that is being burned as fees is part of that. Furthermore, if this line is reached and we are not subtracting fee from the outputs, then we won't have selected enough value to even cover the fees, and that would be a problem. If we are subtracting the fee from the outputs, then it is possible that we end up overpaying on",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619429741,619429741,src/wallet/wallet.cpp
achow101,2021-04-23 18:46:33,This is actually in the correct spot because the `if ` below is to handle fee estimation failure. However this line is actually incorrect because we're supposed to be using the `coin_selection_params.m_effective_feerate` that we had retrieved at the top of the function. Changed it to be using that.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619429785,619429785,src/wallet/wallet.cpp
achow101,2021-04-23 18:46:44,Changed the comment.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619429900,619429900,src/wallet/test/coinselector_tests.cpp
achow101,2021-04-23 18:46:52,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619429964,619429964,src/wallet/wallet.cpp
achow101,2021-04-23 18:46:58,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619429998,619429998,src/wallet/wallet.cpp
achow101,2021-04-23 18:47:14,"Oops, changed back.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619430139,619430139,src/wallet/test/coinselector_tests.cpp
achow101,2021-04-23 18:47:21,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619430224,619430224,src/wallet/wallet.cpp
achow101,2021-04-23 18:47:36,"Yes, that is correct. I've changed the comment to be similar.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619430386,619430386,src/wallet/wallet.cpp
achow101,2021-04-23 18:48:02,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619430632,619430632,src/wallet/test/coinselector_tests.cpp
achow101,2021-04-23 18:48:12,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619430700,619430700,src/wallet/coinselection.cpp
achow101,2021-04-23 19:29:00,"This particular section is for pre-selected inputs, so we don't filter here. However I do agree that changing the effective_feerate depending on whether we are subtracting the fee from the outputs doesn't quite make sense. So I've changed this back to subtract the correct value from `value_to_select` based on `coin_selection_params.m_subtract_fee_outputs`.\n\n> Then also, `effective_value` would",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619451160,619451160,src/wallet/wallet.cpp
achow101,2021-04-23 19:30:07,"> would it perhaps make sense to make the calculation of an OutputGroup's effective value a member function of that struct?\n\nI don't think so.\n\nHowever I have changed `OutputGroup` to have a member function which returns either `m_value` or `effective_value` depending on the coin selection parameters which `OutputGroup` now has a copy of.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619451688,619451688,src/wallet/coinselection.cpp
fjahr,2021-04-24 15:29:10,nit: In the implementation it's now `selection_target` instead of `actual_target`.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r619673387,619673387,src/wallet/coinselection.h
glozow,2021-04-29 14:26:27,"hm, not sure how I feel about having a `CoinSelectionParams` in every single `OutputGroup`... could it just have a `GetSelectionAmount(subtract_fee_outputs)` or something?",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623105073,623105073,src/wallet/coinselection.h
achow101,2021-04-29 18:09:51,Currently neither of the actual coin selection functions (which are the ones that call `GetSelectionAmount` are aware of subtract fee from outputs. I decided to go this route of including `CoinSelectionParams` in the `OutputGroup`s because it reduces the number of parameters that we need to pass to both `GroupOutputs` and the `OutputGroup` constructor. Since the `CoinSelectionParams` contain the e,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623280163,623280163,src/wallet/coinselection.h
achow101,2021-04-29 18:11:01,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623280942,623280942,src/wallet/coinselection.h
glozow,2021-04-29 19:02:21,"But now every single `COutputGroup` has a copy of `CoinSelectionParams` (and afaik this would be the same across all `COuputGroup`s for a coin selection). That's a lot of extra space just for 2 feerates.\n\nIt also seems like an API violation for the groups of UTXOs to have so much extra information about coin selection (e.g. the size of change output spend). I still think callers could provide ",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623315345,623315345,src/wallet/coinselection.h
achow101,2021-04-29 19:27:09,"Making it a `const CoinSelectionParams&` would avoid having so many copies.\n\nOf the 8 parameters in `CoinSelectionParams`, it's an even split between the ones relevant to `OutputGroup`s and `GroupOutputs`. 4 of them (`m_effective_feerate`, `m_long_term_feerate`, `m_subtract_fee_outputs`, and `m_avoid_partial_spends`) are used by `GroupOutputs`. I don't think it's that much of a layer violation",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623330410,623330410,src/wallet/coinselection.h
glozow,2021-04-29 20:30:26,"> Alternatively, we can still pass in CoinSelectionParams and just copy out the parameters that we care about?\n\nThis sounds like a better option to me",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623377334,623377334,src/wallet/coinselection.h
achow101,2021-04-30 00:40:32,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r623513100,623513100,src/wallet/coinselection.h
Xekyo,2021-04-30 17:33:05,The `output_group` interpreting the context of the coin selection seems odd.  Wouldn't it make more sense to apply the coin selection parameter at the place that retrieves either `effective_value` or `m_value`?,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r624047889,624047889,src/wallet/coinselection.cpp
Xekyo,2021-04-30 17:34:15,This could be clarified to indicate that the change output is also not included.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r624048595,624048595,src/wallet/wallet.cpp
Xekyo,2021-04-30 17:42:11,"This commit's subject indicates only that it's removing `bnb_used` and `use_bnb`. \n\nThis update in the change creation seems to stem from doing both BnB and KS every pass. Is it possible that this part should have been in the previous commit?",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r624053257,624053257,src/wallet/wallet.cpp
Xekyo,2021-04-30 17:48:25,Optional: Please mention renaming to `selection_target` in commit message or split into separate commit.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r624057131,624057131,src/wallet/coinselection.cpp
Xekyo,2021-04-30 17:54:44,I was just staring at this and was wondering why `nChange = input_sum - nValue` until I realized that `input_sum` is the sum of the effective values of the inputs. That could perhaps be clarified in a comment or the variable name (e.g. `inputs_effective_value`).,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r624061516,624061516,src/wallet/wallet.cpp
glozow,2021-05-03 13:36:35,"In _Remove CreateTransaction while loop and some related variables_\nAre these needed anymore? `txNew` is created within `CreateTransactionInternal()` and iiuc there's no loop iteration for it to be mutated in",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r625090381,625090381,src/wallet/wallet.cpp
glozow,2021-05-03 13:50:11,"Thanks for accepting the suggestion, I like this a lot better than `OutputGroup` keeping a copy of params :)",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r625099173,625099173,src/wallet/coinselection.h
glozow,2021-05-03 14:04:31,"🐮 says moo\n🐷 says oink\nme says\n```suggestion\n            const int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n```",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r625108832,625108832,src/wallet/wallet.cpp
glozow,2021-05-03 23:31:44,Is this block still needed? Seems like it exists to prevent further iterations,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r625429602,625429602,src/wallet/wallet.cpp
Xekyo,2021-05-04 01:45:37,"Isn't that just 10.75 vB?\n\nProbably out of scope for this PR, but what do you think about these calculations using weight units in the future?",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r625466416,625466416,src/wallet/wallet.cpp
ryanofsky,2021-05-05 23:22:42,"In commit ""Have KnapsackSolver actually use effective values"" (37c717952f6b0719392bfdddcafbf1a2db1de7ca)\n\nI'm trying to understand how/whether this commit changes behavior. It might be helpful to say in the commit message. It seems like this commit is definitely changing behavior of the KnapsackSolver, because now it is solving based on cost of the finally created transaction instead of ignori",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r626979983,626979983,src/wallet/coinselection.cpp
ryanofsky,2021-05-06 10:08:31,"In commit ""Have KnapsackSolver actually use effective values"" (37c717952f6b0719392bfdddcafbf1a2db1de7ca)\n\nIs it right to use m_value instead of effective value here? If `nTargetValue` and `nBest` here are to switched effective value instead of actual value, and these are compared against `nTotalLower`, shouldn't `nTotalLower` be an effective value too? Assuming this code is correct, I think it",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627286328,627286328,src/wallet/coinselection.cpp
ryanofsky,2021-05-06 10:19:52,"In commit ""Have KnapsackSolver actually use effective values"" (37c717952f6b0719392bfdddcafbf1a2db1de7ca)\n\nIs KnapsackSolver solver a legacy function that is likely to be removed at some point? If not, it would be good in the future for it to have some direct test coverage (I assume it already has some indirect coverage at a higher level) where it is called directly with some basic input and ch",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627293235,627293235,src/wallet/coinselection.cpp
ryanofsky,2021-05-06 10:52:19,"In commit ""Have KnapsackSolver actually use effective values"" (37c717952f6b0719392bfdddcafbf1a2db1de7ca)\n\nNow there are two effective rate variables used in the code below: `effective_feerate` and `coin_selection_params.m_effective_feerate`, and I'm confused about why each one is used different places. Can the new variable at least have a distinct name to be clear about it's purpose? Maybe `ou",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627313347,627313347,src/wallet/wallet.cpp
ryanofsky,2021-05-06 10:58:07,"In commit ""Have KnapsackSolver actually use effective values"" (37c717952f6b0719392bfdddcafbf1a2db1de7ca)\n\nSo much code is just moving and being tweaked and not changing substantively. I think this commit would be easier to understand split into two parts:\n\n1 - Refactoring only change, adding new change_fee variable, adding new comments, moving the code that needs to move.\n2 - Behavior ch",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627316849,627316849,src/wallet/wallet.cpp
ryanofsky,2021-05-06 11:41:46,"In commit ""Have KnapsackSolver actually use effective values"" (37c717952f6b0719392bfdddcafbf1a2db1de7ca)\n\nSuggestion: It seems like if the later ""Roll not_input_fees into nValueToSelect"" commit was moved before this commit (without changing the value passed to KnapsackSolver), this commit on top of that one would be smaller and could reduce the confusion of `nTargetValue` meaning so many diffe",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627342561,627342561,src/wallet/wallet.cpp
achow101,2021-05-06 17:26:20,The way I view it is that the `OutputGroup` is responsible for telling the coin selection algorithm what the value for that `OutputGroup` is for the selection. The algo itself does not care about whether it should be `effective_value` or `m_value` except when it totals up the amount selected for `nValueRet`. So this change makes `OutputGroup` aware of which value it should be giving to the coin se,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627626135,627626135,src/wallet/coinselection.cpp
achow101,2021-05-06 17:33:00,"Yes, I rounded up.\n\nWe should be using weights everywhere rather than vB, but fee estimation and many other things still use vB which makes it harder to use weights.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627630517,627630517,src/wallet/wallet.cpp
achow101,2021-05-06 17:40:59,"There is some direct coverage, and some calls to `SelectCoinsMinConf` in the coin selector tests are changed to `KnapsackSolver` in future commits.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627637538,627637538,src/wallet/coinselection.cpp
achow101,2021-05-06 17:46:00,"`effective_feerate` is used to calculate the effective value. It's value is either 0 or `coin_selection_params.m_effective_feerate`, depending on whether we are subtracting the fee from the outputs. This is a bit of a hack to make sure that when we are subtracting the fee from the outputs, the selection algos use the real value rather than the effective value. However, this is all moot because the",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627640785,627640785,src/wallet/wallet.cpp
achow101,2021-05-06 18:07:15,"I believe doing that would break the tests and change the behavior of `KnapsackSolver`. ""Roll not_input_fees into nValueToSelect"" does not change behavior.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627654794,627654794,src/wallet/wallet.cpp
achow101,2021-05-06 19:55:53,"It isn't the sum of effective values. It is a the actual sum of input values. In this case, `nChange` is a bit of a misnomer as it also includes the fee that is to be paid.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627723148,627723148,src/wallet/wallet.cpp
achow101,2021-05-06 20:03:43,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627727640,627727640,src/wallet/wallet.cpp
achow101,2021-05-06 20:03:52,"Doesn't seem like it, removed.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627727715,627727715,src/wallet/wallet.cpp
achow101,2021-05-06 20:05:09,"It is needed, but the change stuff could be consolidated to not need it. I think that cleaning this up could be done a followup.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627728417,627728417,src/wallet/wallet.cpp
achow101,2021-05-06 20:05:19,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627728504,627728504,src/wallet/wallet.cpp
achow101,2021-05-06 20:06:19,"No, this is supposed to be here. However it is also related to ""Properly determine whether we are in the exact match range to make change"", so I've moved that commit to be before ""Remove use_bnb and bnb_used"" and combined this change with it.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627729080,627729080,src/wallet/wallet.cpp
achow101,2021-05-06 20:06:34,Changed the rename to another commit.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627729231,627729231,src/wallet/coinselection.cpp
achow101,2021-05-06 20:06:48,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627729345,627729345,src/wallet/coinselection.cpp
achow101,2021-05-06 20:07:10,"That is correct, this should be using `effective_value`. Fixed.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627729541,627729541,src/wallet/coinselection.cpp
achow101,2021-05-06 20:07:28,Split up the commit.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r627729684,627729684,src/wallet/wallet.cpp
ryanofsky,2021-05-07 19:35:42,"In commit ""Determine whether we are in the exact match range to make change"" (3c7ea2233ed1bf1075a9ee19071381298b021f74)\n\nNote: ""Cost of change"" comments and code here duplicates code in SelectCoinsMinConf (grep ""Cost of change is the cost"") so might be good to dedup later with a cost of change function.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628462753,628462753,src/wallet/wallet.cpp
ryanofsky,2021-05-07 19:41:49,"In commit ""Determine whether we are in the exact match range to make change"" (3c7ea2233ed1bf1075a9ee19071381298b021f74)\n\nI don't understand ""change"" in quotes here. Is this referring to the `nChange = nValueIn - nValueToSelect` variable, which is not really the final change but a combination of change and fees? It would be good to clarify what is meant in this comment either way. Could also re",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628465572,628465572,src/wallet/wallet.cpp
ryanofsky,2021-05-07 19:49:24,"In commit ""Determine whether we are in the exact match range to make change"" (3c7ea2233ed1bf1075a9ee19071381298b021f74)\n\nNote: I would have expected just `|| nChange <= cost_of_change` as the second condition, but IIUC, this wouldn't work because `nChange` isn't really the change value but the (change + fees) value. So this is instead estimating the change output value as ((value of inputs min",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628469126,628469126,src/wallet/wallet.cpp
ryanofsky,2021-05-07 20:09:18,"In commit ""Roll not_input_fees into nValueToSelect instead of having it be separate"" (6bd07ddff8c092ac57fc72e47510c73864ac7acc)\n\nNot necessarily relevant to this commit, but there is a big block of code above that just seems to be filling the coin_selection_params struct. It could be good for a future cleanup to move that code into a function to be able to shrink this function and declare coin",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628481319,628481319,src/wallet/wallet.cpp
achow101,2021-05-07 20:38:05,"Yes, I put it in quotes because it's really change + fees.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628503284,628503284,src/wallet/wallet.cpp
achow101,2021-05-08 06:57:54,I've deduplicated this code by adding `m_cost_of_change` to `CoinSelectionParams`.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628712509,628712509,src/wallet/wallet.cpp
achow101,2021-05-08 07:16:12,"I've moved this to be after fee reduction, so it makes more sense now with just comparing to the cost of change directly.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r628714340,628714340,src/wallet/wallet.cpp
ryanofsky,2021-05-11 17:51:50,"In commit ""scripted-diff: rename some variables"" (79ef77447615067e30ee476343ca8816559869a3)\n\nThis commit doesn't compile\n\nwallet/wallet.cpp:2997:36: error: use of undeclared identifier 'nChange'\n                        nFeeRet += nChange;",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r630401601,630401601,src/wallet/wallet.cpp
ryanofsky,2021-05-11 18:38:23,"In commit ""Roll not_input_fees into nValueToSelect instead of having it be separate"" (19ccc6401c8d854815727522949242d3ad343c73)\n\nWhat's the reason for adding m_change_fee here? Can there be a code comment saying why the selection amount + change cost sum is used as target for knapsack but not bnb, and maybe a commit message note saying whether commit is intended to change behavior. I notice in",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r630431136,630431136,src/wallet/wallet.cpp
ryanofsky,2021-05-11 22:06:22,"In commit ""Have OutputGroup determine the value to use"" (282ee37b64d581dc22e2e9743d442f9acd67b4b3)\n\nI think it's a minor bug (or at least an unmentioned change in behavior) that there are still two `effective_value` member uses when all other uses are switched to selection amounts. This commit and final code would be easier to understand if all output group effective value uses were replaced w",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r630571386,630571386,src/wallet/coinselection.cpp
ryanofsky,2021-05-11 22:44:59,"In commit ""Move output reductions for fee to after coin selection"" (6f36603f64246c8cd274a532df222ab0414d651b)\n\nI'm really confused by this block of removed code, which was introduced in #10712 https://github.com/bitcoin/bitcoin/pull/10712/commits/0f402b9263b0579b29aa0f841fc64ad58d3efba6 (and which I apparently reviewed years ago). I don't understand how the code was functioning when it added, ",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r630587410,630587410,src/wallet/wallet.cpp
ryanofsky,2021-05-12 02:06:58,"In commit ""Move output reductions for fee to after coin selection"" (6f36603f64246c8cd274a532df222ab0414d651b)\n\nIt seems like in subtract-fee-from-recipients case when change output is too small to be economical it would make more sense to send the savings back to recipients, instead of paying extra in fees. So I would expect this to say something like:\n\n```c++\nnChangePosInOut = -1;\nto_",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r630668954,630668954,src/wallet/wallet.cpp
ryanofsky,2021-05-12 18:37:47,"In commit ""Move output reductions for fee to after coin selection"" (6f36603f64246c8cd274a532df222ab0414d651b)\n\n> Now that SelectCoins accounts for the transaction fees, it is now\n> possible to reduce the outputs to deal with the transaction fees after\n> the SelectCoins.\n\nThis commit message seems incorrect, or at least it is hard to understand. As far as I can see in 6f36603f64246c8cd2",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631308799,631308799,src/wallet/wallet.cpp
achow101,2021-05-12 21:11:54,"This code is needed because of the looping behavior. As we are removing that loop, it is no longer needed.\n\nAs for why this was needed, suppose in one iteration of the loop, we choose a lot of small inputs. This will require a higher transaction fee. If those inputs are not enough to cover the fee that they need, we iterate again. In the next iteration, we find that with the increased target, ",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631405310,631405310,src/wallet/wallet.cpp
achow101,2021-05-12 21:34:11,Fixed.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631417162,631417162,src/wallet/wallet.cpp
achow101,2021-05-12 21:34:25,Done.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631417274,631417274,src/wallet/coinselection.cpp
achow101,2021-05-12 21:35:44,"Yes, there is a bug here. Removed changing `nFeeRet` and fixed the `to_reduce` calculation.\n\nIndeed, this is supposed to be a discount to the recipients, so it was supposed to be `-=`. Because this will cause `to_reduce` and `nFeeRet` to deviate, it is necessary for `to_reduce` to exist. Otherwise `nFeeRet` will misreport the actual transaction fee for this transaction.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631417929,631417929,src/wallet/wallet.cpp
achow101,2021-05-12 21:36:01,Updated the commit message to explain this more.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631418063,631418063,src/wallet/wallet.cpp
ryanofsky,2021-05-12 22:01:52,"re: https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631405310\n\n> As for why this was needed, suppose in one iteration of the loop, we choose a lot of small inputs. [...]\n\nSorry, I understood why change output *boosting* is needed. The code I was asking about was the code from 0f402b9263b0579b29aa0f841fc64ad58d3efba6 in #10712 and now removed here which tried to *add* a change out",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631430202,631430202,src/wallet/wallet.cpp
achow101,2021-05-12 22:09:32,"It's change boosting but in the case where we don't have change.\n\nIt's the same scenario as change boosting, but instead of having selected more than enough to cover the fees from the previous iteration, we have selected exactly enough to cover those fees. But in this second iteration, there are fewer inputs, so fewer fees, so we need to add a change output because there is no existing change ",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631433643,631433643,src/wallet/wallet.cpp
ryanofsky,2021-05-13 17:53:42,"> It's change boosting but in the case where we don't have change.\n> \n> It's the same scenario as change boosting, but instead of having selected more than enough to cover the fees from the previous iteration, we have selected exactly enough to cover those fees. But in this second iteration, there are fewer inputs, so fewer fees, so we need to add a change output because there is no existing c",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r631994366,631994366,src/wallet/wallet.cpp
achow101,2021-05-13 18:34:38,I think the key thing in understanding this code is that `nChange` (now named `change_and_fee`) was actually supposed to just be the change. `nValueToSelect` includes the `nFeeRet` from the previous iteration. So we could have `nChange == 0` if we select exactly enough to cover the recipient amount + previous `nFeeRet`. That would cause this code to trigger.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632019243,632019243,src/wallet/wallet.cpp
ryanofsky,2021-05-13 18:45:43,"In commit ""Roll not_input_fees into nValueToSelect instead of having it be separate"" (534917d11c12a713b39708290f51f495f370a66d)\n\nThanks for new code comments, very helpful. IIUC. I'm still a little surprised to see this change here in this commit, instead of in it's own commit or in the ""Have KnapsackSolver actually use effective values"" commit. Everything else in this commit is not a change i",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632026144,632026144,src/wallet/wallet.cpp
achow101,2021-05-13 19:19:24,Our assumption is that `KnapsackSolver` will always find a result that has change as BnB will find any that do not have change. I've updated the commit message.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632045959,632045959,src/wallet/wallet.cpp
ryanofsky,2021-05-13 19:35:38,"Oh, wow. I guess I was looking at the new code first where `nChange` means input exceeding originally requested output, or change+fees. But in the current code as long as nValueToSelect still contains fees, then nChange will just be pure change:\n\nhttps://github.com/bitcoin/bitcoin/blob/0f402b9263b0579b29aa0f841fc64ad58d3efba6/src/wallet/wallet.cpp#L2620\nhttps://github.com/bitcoin/bitcoin/blo",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632055168,632055168,src/wallet/wallet.cpp
ryanofsky,2021-05-13 20:01:04,"In commit ""Roll static tx fees into nValueToSelect instead of having it be separate"" (a8b689bf239df610627337531b3722711a571068)\n\nThanks for new commit message. Just will say what my understanding is:\n\n1 - The first change in this commit rolling BnB not_input_fees into nTargetValue is not a change in behavior, just a pure refactoring\n2 - The second change in this commit rolling knapsack c",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632069270,632069270,src/wallet/wallet.cpp
achow101,2021-05-13 20:26:17,"Indeed, this commit fails the tests and doesn't quite work. However in the end, it all does work. I have tried to fix it, but it seems like it will end up just adding a bunch of code that gets removed in a later commit. I don't think there's a way to reorder commits to make this work.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r632082983,632082983,src/wallet/wallet.cpp
fjahr,2021-05-15 21:43:52,nit: I would prefer if we could reserve `cs_` for the typical use in mutex names.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r633009303,633009303,src/wallet/wallet.cpp
fjahr,2021-05-15 23:41:23,I think this could use a comment on why it's ok that we might add a dust change here.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r633018567,633018567,src/wallet/wallet.cpp
fjahr,2021-05-16 12:07:00,"nit\n```suggestion\n                    // Let's try dropping the change, recalculating the fee, and comparing the new fee to change_and_fee\n```",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r633083525,633083525,src/wallet/wallet.cpp
fjahr,2021-05-16 13:10:47,I think you could use `position` here instead of getting the iterator again. Same below in the else block.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r633089668,633089668,src/wallet/wallet.cpp
ryanofsky,2021-05-18 15:53:42,"In commit ""Move output reductions for fee to after coin selection"" (2b445b7c1336506d43874a7ee31f85f511cd3114)\n\nReminder / note to anyone looking at this: this commit is easier to review ignoring whitespace.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r634519061,634519061,src/wallet/wallet.cpp
ryanofsky,2021-05-18 18:52:41,"In commit ""Move output reductions for fee to after coin selection"" (2b445b7c1336506d43874a7ee31f85f511cd3114)\n\nEDIT: Never mind this suggestion, later loop removing commit makes this better.\n\n~~Minor style suggestion. Would be a little clearer to replace~~\n\n```c++\nif (nSubtractFeeFromAmount == 0) {\n    ...\n} else if (nSubtractFeeFromAmount != 0) {\n    ...\n} else {\n    asser",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r634665258,634665258,src/wallet/wallet.cpp
ryanofsky,2021-05-18 18:57:48,"In commit ""Move output reductions for fee to after coin selection"" (2b445b7c1336506d43874a7ee31f85f511cd3114)\n\nThis condition should always be true so this could be an assert",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r634668694,634668694,src/wallet/wallet.cpp
ryanofsky,2021-05-18 19:04:25,"In commit ""Move output reductions for fee to after coin selection"" (2b445b7c1336506d43874a7ee31f85f511cd3114)\n\nIt seems like this should say:\n\n```c++\nif (nFeeRet <= change_and_fee) {\n   nFeeRet = change_and_fee;\n   break;\n}\n```\n\nto handle the `nFeeRet <= change_and_fee` case and more accurately return the amount of fee paid without the change output.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r634672625,634672625,src/wallet/wallet.cpp
ryanofsky,2021-05-18 19:12:01,"In commit ""Move output reductions for fee to after coin selection"" (2b445b7c1336506d43874a7ee31f85f511cd3114)\n\nJust a code simplifcation suggestion, but it seems like instead of introducing an orig_fee variable and reducing nFeeRet and then reassigning nFeeRet back to orig_fee, it would be simpler to drop orig_fee and just say:\n\n```c++\nCAmount required_fee = coin_selection_params.m_effec",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r634677346,634677346,src/wallet/wallet.cpp
ryanofsky,2021-05-19 19:01:09,"In commit ""Roll static tx fees into nValueToSelect instead of having it be separate"" (67fc8b7be1d5fbdb199d6e995434431a7282d446)\n\nThis logic is not making sense to me. It wasn't this complicated before, and even though commits are reordered and nTargetValue is passed differently now I would expect these lines 2957-2964 to look like:\n\n```c++\nCAmount nValueToSelect = nValue;\nif (coin_sele",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635509067,635509067,src/wallet/wallet.cpp
ryanofsky,2021-05-19 19:16:07,"In commit ""Roll static tx fees into nValueToSelect instead of having it be separate"" (67fc8b7be1d5fbdb199d6e995434431a7282d446)\n\nI could be thinking about this wrong, but this change seems backwards. It matches the description which says ""use the changeless nFeeRet when iterating for KnapsackSolver. This is because we include\nthe change fee when doing KnapsackSolver, so nFeeRet on furtherite",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635518342,635518342,src/wallet/wallet.cpp
ryanofsky,2021-05-19 19:24:22,"In commit ""Have KnapsackSolver actually use effective values"" (a07552b94fe05651970e53813ae67606692d6f19)\n\nWould be good to change the error to ""Bug: Cannot reduce change to cover transaction fees"" or ""Unexpected condition: Cannot reduce change to cover transaction fees"" or just use CHECK_NONFATAL(false) or assert(false), so it is clearer this shouldn't happen, or if it does happen it's a bug a",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635523507,635523507,src/wallet/wallet.cpp
achow101,2021-05-19 19:42:36,Renamed to `coin_sel_params`.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635534606,635534606,src/wallet/wallet.cpp
achow101,2021-05-19 19:42:42,Done,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635534655,635534655,src/wallet/wallet.cpp
achow101,2021-05-19 19:42:55,This comment was removed/rewritten.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635534764,635534764,src/wallet/wallet.cpp
achow101,2021-05-19 19:43:41,"I'm not sure how safe it is to use an iterator after modifying the vector with an insert afterwards. But because insert returns an iterator pointing to the inserted element, I've changed this so that change_position is set by the insert.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635535238,635535238,src/wallet/wallet.cpp
achow101,2021-05-19 19:48:19,"I had done it this way so that a future commit which has to remove this special case would not need to modify any lines, just drop the code. This code is required at this commit because nFeeRet itself includes not_input_fees, so KnapsackSolver would always be trying to choose more coins than it actually needs. However in the next commit, this is just dropped directly because it is no longer needed",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635538054,635538054,src/wallet/wallet.cpp
achow101,2021-05-19 19:51:55,It's because we are including the change fee during `SelectCoinsMinConf`. So using the fee that includes the change fee results in us targeting a slightly higher value than we actually need. This is also moot because we stop the looping behavior in the next two commits that have KnapsackSolver use effective values.,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635540237,635540237,src/wallet/wallet.cpp
achow101,2021-05-19 19:52:49,"Following your suggested diff, this error condition was removed and I haven't quite figured out the correct place to reintroduce it.",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r635540800,635540800,src/wallet/wallet.cpp
ryanofsky,2021-05-21 18:56:05,"In commit ""Roll static tx fees into nValueToSelect instead of having it be separate"" (bf26e018de33216d6f0ed0d6ff822b93536f7cc1)\n\nJust want to record some notes about this commit since there is so much going on. IMO, this could be split up an made more clear, but probably not worth it since it won't affect the end results. This commit is doing a few things:\n\n1. For the BnB case, it is addin",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r637152621,637152621,src/wallet/wallet.cpp
instagibbs,2021-05-24 02:04:32,"not in love with these names since they're both costs, but only one says ""cost""",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r637643982,637643982,src/wallet/wallet.h
instagibbs,2021-05-24 02:18:37,"bnb_used becomes `change_amount <= coin_selection_params.m_cost_of_change`, need to make sure this is not a behavior change overall\n\nthe logic itself is fine to me, whether or not it's a change in behavior overall in this commit",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r637647447,637647447,src/wallet/wallet.cpp
instagibbs,2021-05-24 02:32:32,"not your fault, but I find this tuple poorly/non-documented. Had to read the actual source to figure out what it is",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r637650933,637650933,src/wallet/wallet.cpp
instagibbs,2021-05-24 03:04:23,this section doesn't seem straight forward but it promptly vanishes so whatever,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r637658895,637658895,src/wallet/wallet.cpp
ryanofsky,2021-05-24 20:25:09,"In commit ""Have KnapsackSolver actually use effective values"" (01dc8ebda50a382d45d3d169b2c3f3965869dcae)\n\n> Following your suggested diff, this error condition was removed and I haven't quite figured out the correct place to reintroduce it.\n\nNot important, but I think the updated equivalent after 01dc8ebda50a382d45d3d169b2c3f3965869dcae would be:\n\n```diff\n--- a/src/wallet/wallet.cpp",https://github.com/bitcoin/bitcoin/pull/17331#discussion_r638249950,638249950,src/wallet/wallet.cpp
meshcollider,2021-05-25 12:21:40,nit: `its`,https://github.com/bitcoin/bitcoin/pull/17331#discussion_r638735730,638735730,src/wallet/wallet.cpp
