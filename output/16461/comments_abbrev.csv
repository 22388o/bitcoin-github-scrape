promag,2019-07-25 16:20:24,@MarcoFalke in the example the constructor argument wouldn't shadow the member.,https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-515110300,515110300,
laanwj,2019-07-29 13:23:16,"I still don't get it â€¦ can you please keep changes contained to what you're actually fixing, and not change code structure at the same time",https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-515989258,515989258,
promag,2019-07-29 13:40:10,"> can you please keep changes contained to what you're actually fixing, and not change code structure at the same time\n\ndone\n\n> I still don't get it \n\nthe example is wrong considering the comment:\n\n> E.g. in member initializers, prepend `_` to the argument name shadowing the member name:\n\nso in order to be correct the argument must be the same as the member..",https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-515995624,515995624,
MarcoFalke,2019-07-29 13:47:51,">     E.g. in member initializers, prepend _ to the argument name shadowing the member name:\n\nThis is wrong. We prepend members with `m_` and pass arguments without `m_`. There should never be a shadow.\n",https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-515998654,515998654,
promag,2019-07-29 13:52:33,"@MarcoFalke right, that's why initially I had\n```cpp\nstruct AddressBookPage\n{\n   Mode mode\n```\n\nDo you prefer to drop this case then?\n",https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-516000629,516000629,
MarcoFalke,2019-07-29 14:03:37,"> Do you prefer to drop this case then?\n\nYes, if there is an incorrect statement in the notes, it should be removed.",https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-516005182,516005182,
ryanofsky,2019-07-29 15:14:42,"> This is wrong. We prepend members with `m_` and pass arguments without `m_`. There should never be a shadow.\n\nFWIW (feel free to ignore this comment), I don't think it makes sense to prefix struct members with `m_`. The point of `m_` is to make member function code more readable, so readers will not confuse member variables with argument variables and local variables. In python, you wouldn't",https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-516034603,516034603,
MarcoFalke,2019-07-29 15:20:17,"Yeah, I assumed `struct` is treated the same as `class` when it comes to the `m_` prefix",https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-516037051,516037051,
promag,2019-07-29 15:24:45,I just want to fix the example which is obviously wrong in regards to shadowing.,https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-516038838,516038838,
ryanofsky,2019-07-29 15:32:00,"> I just want to fix the example which is obviously wrong in regards to shadowing.\n\nCould drop the example and comment about shadowing since it should come up much more rarely now. Or use:\n\n```c++\nstruct AddressBookPage {\n    AddressBookPage(Mode _mode) : mode(_mode) {}\n    Mode mode;\n};\n```\n\nor\n\n```c++\nclass AddressBookPage\n{\npublic:\n    AddressBookPage(Mode mode",https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-516041831,516041831,
sipa,2019-07-29 16:51:44,"I think I always interpreted that section (and intended it) to mean `struct`s and `class`es both get the `m_` treatment. However, I do see that isn't very obvious from the text, and https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-516034603 gives a pretty reasonable argument why it may be preferable not to apply it to structs.\n\nSo I guess we should clarify it, but I don't have a stro",https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-516071539,516071539,
promag,2019-07-30 07:52:16,I think we could have POD members without `m_` prefix.,https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-516307571,516307571,
laanwj,2019-07-31 14:01:09,"> I think we could have POD members without m_ prefix.\n\nWas about to say, that discussion is about POD versus OOP encapsulation, not about `class` versus `struct` per seâ€”although there's definitely overlap between those distinctions how they're used normally",https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-516861922,516861922,
ryanofsky,2019-07-31 14:09:45,"I think PODness is orthogonal here. Take a struct like [`InitInterfaces`](https://github.com/bitcoin/bitcoin/blob/3f288a1c05ebcadd7d7709f81c77921ff9e27ba2/src/init.h#L18-L23). It is definitely not a POD. But it has no methods and makes no use of implicit `*this`, so there is little reason to prefix its members with `m_`.\n\n[EDIT] Other examples: `WalletAddress`, `WalletTx`:\n\nhttps://github.",https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-516865435,516865435,
MarcoFalke,2019-07-31 15:21:34,Agree that whether something is integer or not should not influence the `m_` style,https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-516896402,516896402,
promag,2019-07-31 23:46:47,"Right, POD members must be POD too.\n\n> makes no use of implicit *this\n\nYup, should be enough to not require `m_`. The problem is that later on methods could be added which would screw existing member names.\n\nI'll hold on with this until we clarify the `m_` treatment, otherwise I'm tempted to either remove the example of just close this.",https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-517063182,517063182,
laanwj,2019-08-01 13:06:33,"> I think PODness is orthogonal here\n\nOK, yes, POD is the not the right name either. It depends on whether the fields are supposed to be accessed externally or in methods.\n\n> otherwise I'm tempted to either remove the example of just close this.\n\nI'd say let's just remove this example.",https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-517279902,517279902,
fanquake,2019-08-14 09:52:32,@promag Did you want to follow up here and remove the example?,https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-521181042,521181042,
promag,2019-08-14 10:39:45,"Yes, will do.",https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-521194775,521194775,
promag,2019-08-28 17:44:08,@fanquake done.,https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-525849419,525849419,
MarcoFalke,2019-08-28 17:59:24,unsigned ACK 9452802480bd154e23771230bbdfebde1dbaa941,https://github.com/bitcoin/bitcoin/pull/16461#issuecomment-525855754,525855754,
promag,2019-07-25 15:49:16,@MarcoFalke :trollface: ,https://github.com/bitcoin/bitcoin/pull/16461#discussion_r307371101,307371101,doc/developer-notes.md
MarcoFalke,2019-07-25 15:54:19,"According to clang-format, the `{` comes on the same line",https://github.com/bitcoin/bitcoin/pull/16461#discussion_r307373895,307373895,doc/developer-notes.md
MarcoFalke,2019-07-25 15:54:40,members should start with `m_` according to the developer notes,https://github.com/bitcoin/bitcoin/pull/16461#discussion_r307374092,307374092,doc/developer-notes.md
promag,2019-07-25 16:40:07,">    - Class member variables have a `m_` prefix.\n\nThis is now a `struct`.\n",https://github.com/bitcoin/bitcoin/pull/16461#discussion_r307394592,307394592,doc/developer-notes.md
sipa,2019-07-25 16:43:56,Structs and classes are the same thing in C++. Only default visibility is different.,https://github.com/bitcoin/bitcoin/pull/16461#discussion_r307396082,307396082,doc/developer-notes.md
MarcoFalke,2019-07-25 16:57:36,This is not stable with the https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy script,https://github.com/bitcoin/bitcoin/pull/16461#discussion_r307401701,307401701,doc/developer-notes.md
promag,2019-07-25 17:11:56,ðŸ˜¢ ,https://github.com/bitcoin/bitcoin/pull/16461#discussion_r307407077,307407077,doc/developer-notes.md
