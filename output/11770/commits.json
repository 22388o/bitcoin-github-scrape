[
  {
    "sha": "eff1b3e201ae3dafde793fa07f7edbd92fdf4ecc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmYxYjNlMjAxYWUzZGFmZGU3OTNmYTA3ZjdlZGJkOTJmZGY0ZWNj",
    "commit": {
      "author": {
        "name": "joemphilips",
        "email": "joemphilips@gmail.com",
        "date": "2017-11-25T15:20:32Z"
      },
      "committer": {
        "name": "joemphilips",
        "email": "joemphilips@gmail.com",
        "date": "2019-01-23T13:22:45Z"
      },
      "message": "rest: add endpoint for estimatesmartfee\n\n* write REST interface for getting estimated fee\n* update docs about REST interface for fee estimation\n* add test",
      "tree": {
        "sha": "6c7b49960c3eec7b7570e089cdad2427ef4e34be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c7b49960c3eec7b7570e089cdad2427ef4e34be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eff1b3e201ae3dafde793fa07f7edbd92fdf4ecc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEnpdkgn/pO18T4s0Y2pjqEs+T0IwFAlxIaqUACgkQ2pjqEs+T\n0IyBlA/9EDEbKhf7D9rgpGaBMUIcvNfZ/hbhpQ2kj/CVmC7V79u7TTe7kTnww8f2\n48InrIths3RdTvUtqMt9JOs+Q3kdcbqLGEgGfPEpFklop54IDmIFo3+QgwbEeLYk\nxsDbTmQytiy0M+B4OI8VQcVWSUWzTfMGillGxq4ygTB3RZEkte5mgazxqRI+aZ1p\n4Fxa3XdbTNZce9tXHxdHvogYI9MslxvVzYk8hRLu2HKE8CdrNk2uh0Hhv5aZ9j2B\n1pnp8CdBow/aEZVv3k7UjtoUMn8RAk32xudAZXmcfwdasqFT/rj7T1D+Faiv46eK\npdKBYyGR4hVOo506jy+M7V5Njwa9OZdMVtWqAj7ldPobfuokOKs5abwKgzgVv4ce\nNm9zYAKlcG8rgksNmVDiseDIsUZHlHS8rJIguZQALVPSsRJmH0M1Gm7HTcu+exmz\ncoCfiFh82UPZfQcSyuYRRYPQ4NxRlEdOGB0qqKI4LNdAYrmTT+aIBAdcgS3h9IK9\nYQmfBReZ5arj8PEgztZISI/ku12NBFxXzftrhRz6/EcSaNN2aGWeh5UfinLWuXI5\n9DljAvO1Dng23jPQKLZcQ5eMl2ffuDP+2wVCIzFQ60K7EfC6NfsvIPiXp3y2Pw1S\nEb0VTFHlNwWGVaWWgZngTBFrMMEhgj9fYd1Bx4qDQAZGSKFv9Vw=\n=xbsw\n-----END PGP SIGNATURE-----",
        "payload": "tree 6c7b49960c3eec7b7570e089cdad2427ef4e34be\nparent 82cf6813a4ef1b4a5439eb6cddb1ab426f3c31a2\nauthor joemphilips <joemphilips@gmail.com> 1511623232 +0900\ncommitter joemphilips <joemphilips@gmail.com> 1548249765 +0900\n\nrest: add endpoint for estimatesmartfee\n\n* write REST interface for getting estimated fee\n* update docs about REST interface for fee estimation\n* add test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eff1b3e201ae3dafde793fa07f7edbd92fdf4ecc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eff1b3e201ae3dafde793fa07f7edbd92fdf4ecc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eff1b3e201ae3dafde793fa07f7edbd92fdf4ecc/comments",
    "author": {
      "login": "joemphilips",
      "id": 10084960,
      "node_id": "MDQ6VXNlcjEwMDg0OTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/10084960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joemphilips",
      "html_url": "https://github.com/joemphilips",
      "followers_url": "https://api.github.com/users/joemphilips/followers",
      "following_url": "https://api.github.com/users/joemphilips/following{/other_user}",
      "gists_url": "https://api.github.com/users/joemphilips/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joemphilips/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joemphilips/subscriptions",
      "organizations_url": "https://api.github.com/users/joemphilips/orgs",
      "repos_url": "https://api.github.com/users/joemphilips/repos",
      "events_url": "https://api.github.com/users/joemphilips/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joemphilips/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "joemphilips",
      "id": 10084960,
      "node_id": "MDQ6VXNlcjEwMDg0OTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/10084960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joemphilips",
      "html_url": "https://github.com/joemphilips",
      "followers_url": "https://api.github.com/users/joemphilips/followers",
      "following_url": "https://api.github.com/users/joemphilips/following{/other_user}",
      "gists_url": "https://api.github.com/users/joemphilips/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joemphilips/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joemphilips/subscriptions",
      "organizations_url": "https://api.github.com/users/joemphilips/orgs",
      "repos_url": "https://api.github.com/users/joemphilips/repos",
      "events_url": "https://api.github.com/users/joemphilips/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joemphilips/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82cf6813a4ef1b4a5439eb6cddb1ab426f3c31a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82cf6813a4ef1b4a5439eb6cddb1ab426f3c31a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82cf6813a4ef1b4a5439eb6cddb1ab426f3c31a2"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 80,
      "deletions": 0
    },
    "files": [
      {
        "sha": "59ac86c47022490d2d1ad2f61609ed0df4dde354",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eff1b3e201ae3dafde793fa07f7edbd92fdf4ecc/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eff1b3e201ae3dafde793fa07f7edbd92fdf4ecc/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=eff1b3e201ae3dafde793fa07f7edbd92fdf4ecc",
        "patch": "@@ -111,6 +111,11 @@ Only supports JSON as output format.\n Returns transactions in the TX mempool.\n Only supports JSON as output format.\n \n+#### Fees\n+`GET /rest/fee/<MODE>/<TARGET>.json`\n+\n+Returns fee and blocknumber where estimation was found. `<MODE>` should be one of `<unset|conservative|economical>`.\n+`<TARGET>` is the desired confirmation time (in block height).\n Risks\n -------------\n Running a web browser on the same node with a REST enabled bitcoind can be a risk. Accessing prepared XSS websites could read out tx/block data of your node by placing links like `<script src=\"http://127.0.0.1:8332/rest/tx/1234567890.json\">` which might break the nodes privacy."
      },
      {
        "sha": "2e59a7f0875af15fbf0adbc1e951595e65be1c30",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eff1b3e201ae3dafde793fa07f7edbd92fdf4ecc/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eff1b3e201ae3dafde793fa07f7edbd92fdf4ecc/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=eff1b3e201ae3dafde793fa07f7edbd92fdf4ecc",
        "patch": "@@ -19,6 +19,7 @@\n #include <util/strencodings.h>\n #include <validation.h>\n #include <version.h>\n+#include <policy/fees.h>\n \n #include <boost/algorithm/string.hpp>\n \n@@ -621,6 +622,67 @@ static bool rest_blockhash_by_height(HTTPRequest* req,\n     }\n }\n \n+static bool rest_getfee(HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req)) {\n+        return false;\n+    }\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+    switch (rf) {\n+    case RetFormat::JSON: {\n+        std::vector<std::string> path;\n+        boost::split(path, param, boost::is_any_of(\"/\"));\n+        path.erase(path.begin());\n+        // check url scheme is correct\n+        if (path.size() != 2) {\n+            return RESTERR(req, HTTP_BAD_REQUEST, \"Path must be /rest/fee/<MODE>/<TARGET>.json\");\n+        }\n+        // check estimation mode is valid\n+        auto modestr = path[0];\n+        std::transform(modestr.cbegin(), modestr.cend(), modestr.begin(), ToUpper);\n+        FeeEstimateMode mode;\n+        if (!FeeModeFromString(modestr, mode)){\n+            return RESTERR(req, HTTP_BAD_REQUEST, \"<MODE> must be one of <unset|economical|conservative>\");\n+        };\n+\n+        // type conversions for estimateSmartFee\n+        bool conservative = mode != FeeEstimateMode::ECONOMICAL;\n+        int64_t conf_target;\n+        try {\n+             conf_target = atoi64(path[1]);\n+        } catch (std::invalid_argument&) {\n+            return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Unable to parse confirmation target to int\"));\n+        };\n+        unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+        if (conf_target < 1 || (unsigned int)conf_target > max_target) {\n+            return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Invalid confirmation target, must be in between %u - %u\", 1, max_target));\n+        };\n+\n+        // perform fee estimation\n+        FeeCalculation feeCalc;\n+        CFeeRate estimatedfee = ::feeEstimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n+\n+        // create json for replying\n+        UniValue feejson(UniValue::VOBJ);\n+        if (estimatedfee != CFeeRate(0)) {\n+            feejson.pushKV(\"feerate\", ValueFromAmount(estimatedfee.GetFeePerK()));\n+        } else {\n+            return RESTERR(req, HTTP_SERVICE_UNAVAILABLE, \"Insufficient data or no feerate found\");\n+        }\n+        feejson.pushKV(\"blocks\", feeCalc.returnedTarget);\n+\n+        // reply\n+        std::string strJSON = feejson.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+    }\n+    }\n+}\n+\n static const struct {\n     const char* prefix;\n     bool (*handler)(HTTPRequest* req, const std::string& strReq);\n@@ -634,6 +696,7 @@ static const struct {\n       {\"/rest/headers/\", rest_headers},\n       {\"/rest/getutxos\", rest_getutxos},\n       {\"/rest/blockhashbyheight/\", rest_blockhash_by_height},\n+      {\"/rest/fee\", rest_getfee},\n };\n \n void StartREST()"
      },
      {
        "sha": "1c59d7a613de0a6387ecddf298003421d9112c17",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eff1b3e201ae3dafde793fa07f7edbd92fdf4ecc/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eff1b3e201ae3dafde793fa07f7edbd92fdf4ecc/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=eff1b3e201ae3dafde793fa07f7edbd92fdf4ecc",
        "patch": "@@ -326,5 +326,17 @@ def run_test(self):\n         json_obj = self.test_rest_request(\"/chaininfo\")\n         assert_equal(json_obj['bestblockhash'], bb_hash)\n \n+        # Prepare for Fee estimation\n+        for i in range(18):\n+            self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n+            self.sync_all()\n+            self.nodes[1].generatetoaddress(1, not_related_address)\n+        self.sync_all()\n+\n+        json_obj = self.test_rest_request(\"/fee/conservative/1\")\n+        assert_greater_than(float(json_obj[\"feerate\"]), 0)\n+        assert_greater_than(int(json_obj[\"blocks\"]), 0)\n+\n+\n if __name__ == '__main__':\n     RESTTest().main()"
      }
    ]
  }
]