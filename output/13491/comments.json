[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/398568509",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13491#issuecomment-398568509",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13491",
    "id": 398568509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODU2ODUwOQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-19T22:39:37Z",
    "updated_at": "2018-06-30T11:44:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13072 (Update createmultisig RPC to support segwit by ajtowns)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/398568509/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/398750321",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13491#issuecomment-398750321",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13491",
    "id": 398750321,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODc1MDMyMQ==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-20T13:35:14Z",
    "updated_at": "2018-06-20T13:35:14Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. \r\n\r\n> users of IsMine don't care about the reason for non-mine-ness, only whether it is or not\r\n\r\n\ud83d\udc4d ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/398750321/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/400323130",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13491#issuecomment-400323130",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13491",
    "id": 400323130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDMyMzEzMA==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T14:10:47Z",
    "updated_at": "2018-06-26T14:10:47Z",
    "author_association": "MEMBER",
    "body": "utACK bb582a5. Commits are clean, refactor and new tests LGTM (some nits aside).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/400323130/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/401893258",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13491#issuecomment-401893258",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13491",
    "id": 401893258,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTg5MzI1OA==",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?u=c6cf723ac2c78d38bf31ae2665cb16e3e4452227&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-02T18:28:29Z",
    "updated_at": "2018-07-02T18:28:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "utACK bb582a5.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/401893258/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/401932474",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13491#issuecomment-401932474",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13491",
    "id": 401932474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTkzMjQ3NA==",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?u=a1574ca2038ff1dfaa9a7764c59ea5ff4f305b5d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-02T20:55:56Z",
    "updated_at": "2018-07-02T20:55:56Z",
    "author_association": "MEMBER",
    "body": "utACK bb582a5",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/401932474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/402424022",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13491#issuecomment-402424022",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13491",
    "id": 402424022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjQyNDAyMg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-04T09:36:28Z",
    "updated_at": "2018-07-04T09:36:28Z",
    "author_association": "MEMBER",
    "body": "utACK bb582a59c7532b0e4f647d9dfe50f0d816e81427",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/402424022/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/198170939",
    "pull_request_review_id": 132051980,
    "id": 198170939,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODE3MDkzOQ==",
    "diff_hunk": "@@ -398,178 +398,208 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n \n     CScript scriptPubKey;\n     isminetype result;\n-    bool isInvalid;\n \n     // P2PK compressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PK uncompressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << ToByteVector(uncompressedPubkey) << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(uncompressedKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PKH compressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForDestination(pubkeys[0].GetID());\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PKH uncompressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(uncompressedPubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForDestination(uncompressedPubkey.GetID());\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(uncompressedKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2SH\n     {\n         CBasicKeyStore keystore;\n \n-        CScript redeemScript;\n-        redeemScript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+        CScript redeemScript = GetScriptForDestination(pubkeys[0].GetID());\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n \n         // Keystore does not have redeemScript or key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has redeemScript but no key\n         keystore.AddCScript(redeemScript);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has redeemScript and key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // (P2PKH inside) P2SH inside P2SH (invalid)\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript redeemscript_inner = GetScriptForDestination(pubkeys[0].GetID());\n+        CScript redeemscript = GetScriptForDestination(CScriptID(redeemscript_inner));\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemscript));\n+\n+        keystore.AddCScript(redeemscript);",
    "path": "src/test/script_standard_tests.cpp",
    "position": 131,
    "original_position": 131,
    "commit_id": "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
    "original_commit_id": "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The test passes if these `keystore.Add*` are removed. How could this be updated so that these are meaningful?",
    "created_at": "2018-06-26T14:38:21Z",
    "updated_at": "2018-06-26T14:38:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r198170939",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/198170939"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r198170939"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/198170939/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 492,
    "original_line": 492,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/198330595",
    "pull_request_review_id": 132243814,
    "id": 198330595,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODMzMDU5NQ==",
    "diff_hunk": "@@ -398,178 +398,208 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n \n     CScript scriptPubKey;\n     isminetype result;\n-    bool isInvalid;\n \n     // P2PK compressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PK uncompressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << ToByteVector(uncompressedPubkey) << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(uncompressedKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PKH compressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForDestination(pubkeys[0].GetID());\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PKH uncompressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(uncompressedPubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForDestination(uncompressedPubkey.GetID());\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(uncompressedKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2SH\n     {\n         CBasicKeyStore keystore;\n \n-        CScript redeemScript;\n-        redeemScript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+        CScript redeemScript = GetScriptForDestination(pubkeys[0].GetID());\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n \n         // Keystore does not have redeemScript or key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has redeemScript but no key\n         keystore.AddCScript(redeemScript);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has redeemScript and key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // (P2PKH inside) P2SH inside P2SH (invalid)\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript redeemscript_inner = GetScriptForDestination(pubkeys[0].GetID());\n+        CScript redeemscript = GetScriptForDestination(CScriptID(redeemscript_inner));\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemscript));\n+\n+        keystore.AddCScript(redeemscript);",
    "path": "src/test/script_standard_tests.cpp",
    "position": 131,
    "original_position": 131,
    "commit_id": "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
    "original_commit_id": "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "They are meaningful. The tests verifies that *even when all scripts are known* the output isn't treated as ours. The positive test case is the variant without 2 nested P2SHs, where adding all scripts does result in treating the output as ours.",
    "created_at": "2018-06-26T23:50:50Z",
    "updated_at": "2018-06-26T23:50:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r198330595",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/198330595"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r198330595"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/198330595/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 492,
    "original_line": 492,
    "side": "RIGHT",
    "in_reply_to_id": 198170939
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/198521640",
    "pull_request_review_id": 132465450,
    "id": 198521640,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODUyMTY0MA==",
    "diff_hunk": "@@ -398,178 +398,208 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n \n     CScript scriptPubKey;\n     isminetype result;\n-    bool isInvalid;\n \n     // P2PK compressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PK uncompressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << ToByteVector(uncompressedPubkey) << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(uncompressedKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PKH compressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForDestination(pubkeys[0].GetID());\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PKH uncompressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(uncompressedPubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForDestination(uncompressedPubkey.GetID());\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(uncompressedKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2SH\n     {\n         CBasicKeyStore keystore;\n \n-        CScript redeemScript;\n-        redeemScript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+        CScript redeemScript = GetScriptForDestination(pubkeys[0].GetID());\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n \n         // Keystore does not have redeemScript or key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has redeemScript but no key\n         keystore.AddCScript(redeemScript);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has redeemScript and key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // (P2PKH inside) P2SH inside P2SH (invalid)\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript redeemscript_inner = GetScriptForDestination(pubkeys[0].GetID());\n+        CScript redeemscript = GetScriptForDestination(CScriptID(redeemscript_inner));\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemscript));\n+\n+        keystore.AddCScript(redeemscript);",
    "path": "src/test/script_standard_tests.cpp",
    "position": 131,
    "original_position": 131,
    "commit_id": "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
    "original_commit_id": "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I understand. I was thinking in adding:\r\n```cpp\r\n        result = IsMine(keystore, redeemscript);\r\n        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\r\n```\r\nSo that these `keystore.Add*` make sense and can't be removed. Feel free to ignore.",
    "created_at": "2018-06-27T14:42:49Z",
    "updated_at": "2018-06-27T14:42:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r198521640",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/198521640"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r198521640"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/198521640/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 492,
    "original_line": 492,
    "side": "RIGHT",
    "in_reply_to_id": 198170939
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199615198",
    "pull_request_review_id": 133770304,
    "id": 199615198,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTYxNTE5OA==",
    "diff_hunk": "@@ -637,9 +637,7 @@ static UniValue decodescript(const JSONRPCRequest& request)\n             } else {\n                 // Scripts that are not fit for P2WPKH are encoded as P2WSH.\n                 // Newer segwit program versions should be considered when then become available.",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 3,
    "original_position": 3,
    "commit_id": "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
    "original_commit_id": "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: existing typo `they`",
    "created_at": "2018-07-02T20:42:47Z",
    "updated_at": "2018-07-02T20:42:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r199615198",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199615198"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r199615198"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199615198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 639,
    "original_line": 639,
    "side": "RIGHT"
  }
]