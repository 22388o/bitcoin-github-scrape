[
  {
    "sha": "e6b9730c49da6a0219453dec8f4df351292e6e07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmI5NzMwYzQ5ZGE2YTAyMTk0NTNkZWM4ZjRkZjM1MTI5MmU2ZTA3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-06-17T23:28:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-06-17T23:28:04Z"
      },
      "message": "Do not expose invalidity from IsMine",
      "tree": {
        "sha": "62548d5f7b1b681626de9b07d40a122a0548426b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62548d5f7b1b681626de9b07d40a122a0548426b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6b9730c49da6a0219453dec8f4df351292e6e07",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6b9730c49da6a0219453dec8f4df351292e6e07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6b9730c49da6a0219453dec8f4df351292e6e07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6b9730c49da6a0219453dec8f4df351292e6e07/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6cf4bd7eb3b675cdffec9884a6033f41033ad82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6cf4bd7eb3b675cdffec9884a6033f41033ad82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6cf4bd7eb3b675cdffec9884a6033f41033ad82"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 35,
      "deletions": 83
    },
    "files": [
      {
        "sha": "8c26866483d20ef34df72079934aaf3bc840b360",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6b9730c49da6a0219453dec8f4df351292e6e07/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6b9730c49da6a0219453dec8f4df351292e6e07/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=e6b9730c49da6a0219453dec8f4df351292e6e07",
        "patch": "@@ -38,7 +38,7 @@ enum class IsMineResult\n     NO = 0,          //! Not ours\n     WATCH_ONLY = 1,  //! Included in watch-only balance\n     SPENDABLE = 2,   //! Included in all balances\n-    INVALID = 3,     //! Not spendable by anyone\n+    INVALID = 3,     //! Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n };\n \n bool PermitsUncompressed(IsMineSigVersion sigversion)\n@@ -173,12 +173,10 @@ IsMineResult IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey,\n \n } // namespace\n \n-isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, bool& isInvalid)\n+isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey)\n {\n-    isInvalid = false;\n     switch (IsMineInner(keystore, scriptPubKey, IsMineSigVersion::TOP)) {\n     case IsMineResult::INVALID:\n-        isInvalid = true;\n     case IsMineResult::NO:\n         return ISMINE_NO;\n     case IsMineResult::WATCH_ONLY:\n@@ -189,12 +187,6 @@ isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, bool&\n     assert(false);\n }\n \n-isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey)\n-{\n-    bool isInvalid = false;\n-    return IsMine(keystore, scriptPubKey, isInvalid);\n-}\n-\n isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest)\n {\n     CScript script = GetScriptForDestination(dest);"
      },
      {
        "sha": "4246da49fe3a6b65cdb2ee4427901d916d3e7bbc",
        "filename": "src/script/ismine.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6b9730c49da6a0219453dec8f4df351292e6e07/src/script/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6b9730c49da6a0219453dec8f4df351292e6e07/src/script/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.h?ref=e6b9730c49da6a0219453dec8f4df351292e6e07",
        "patch": "@@ -24,12 +24,6 @@ enum isminetype\n /** used for bitflags of isminetype */\n typedef uint8_t isminefilter;\n \n-/* isInvalid becomes true when the script is found invalid by consensus or policy. This will terminate the recursion\n- * and return ISMINE_NO immediately, as an invalid script should never be considered as \"mine\". This is needed as\n- * different SIGVERSION may have different network rules. Currently the only use of isInvalid is indicate uncompressed\n- * keys in SigVersion::WITNESS_V0 script, but could also be used in similar cases in the future\n- */\n-isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, bool& isInvalid);\n isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest);\n "
      },
      {
        "sha": "ec4eb34b8ae9a7047c425b7fede0b240e74f618b",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 67,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6b9730c49da6a0219453dec8f4df351292e6e07/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6b9730c49da6a0219453dec8f4df351292e6e07/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=e6b9730c49da6a0219453dec8f4df351292e6e07",
        "patch": "@@ -398,7 +398,6 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n \n     CScript scriptPubKey;\n     isminetype result;\n-    bool isInvalid;\n \n     // P2PK compressed\n     {\n@@ -407,15 +406,13 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         scriptPubKey << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PK uncompressed\n@@ -425,15 +422,13 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         scriptPubKey << ToByteVector(uncompressedPubkey) << OP_CHECKSIG;\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(uncompressedKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PKH compressed\n@@ -443,15 +438,13 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PKH uncompressed\n@@ -461,15 +454,13 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(uncompressedPubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(uncompressedKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2SH\n@@ -483,21 +474,18 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n \n         // Keystore does not have redeemScript or key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has redeemScript but no key\n         keystore.AddCScript(redeemScript);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has redeemScript and key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2WPKH compressed\n@@ -510,9 +498,8 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n \n         // Keystore implicitly has key and P2SH redeemScript\n         keystore.AddCScript(scriptPubKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2WPKH uncompressed\n@@ -524,15 +511,13 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         scriptPubKey << OP_0 << ToByteVector(uncompressedPubkey.GetID());\n \n         // Keystore has key, but no P2SH redeemScript\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key and P2SH redeemScript\n         keystore.AddCScript(scriptPubKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(isInvalid);\n     }\n \n     // scriptPubKey multisig\n@@ -546,30 +531,26 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n             OP_2 << OP_CHECKMULTISIG;\n \n         // Keystore does not have any keys\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has 1/2 keys\n         keystore.AddKey(uncompressedKey);\n \n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has 2/2 keys\n         keystore.AddKey(keys[1]);\n \n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has 2/2 keys and the script\n         keystore.AddCScript(scriptPubKey);\n \n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2SH multisig\n@@ -588,15 +569,13 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n \n         // Keystore has no redeemScript\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has redeemScript\n         keystore.AddCScript(redeemScript);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2WSH multisig with compressed keys\n@@ -619,21 +598,18 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         scriptPubKey << OP_0 << ToByteVector(scriptHash);\n \n         // Keystore has keys, but no witnessScript or P2SH redeemScript\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has keys and witnessScript, but no P2SH redeemScript\n         keystore.AddCScript(witnessScript);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has keys, witnessScript, P2SH redeemScript\n         keystore.AddCScript(scriptPubKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2WSH multisig with uncompressed key\n@@ -656,21 +632,18 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         scriptPubKey << OP_0 << ToByteVector(scriptHash);\n \n         // Keystore has keys, but no witnessScript or P2SH redeemScript\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has keys and witnessScript, but no P2SH redeemScript\n         keystore.AddCScript(witnessScript);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has keys, witnessScript, P2SH redeemScript\n         keystore.AddCScript(scriptPubKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(isInvalid);\n     }\n \n     // P2WSH multisig wrapped in P2SH\n@@ -694,23 +667,20 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n \n         // Keystore has no witnessScript, P2SH redeemScript, or keys\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has witnessScript and P2SH redeemScript, but no keys\n         keystore.AddCScript(redeemScript);\n         keystore.AddCScript(witnessScript);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has keys, witnessScript, P2SH redeemScript\n         keystore.AddKey(keys[0]);\n         keystore.AddKey(keys[1]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // OP_RETURN\n@@ -721,9 +691,8 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         scriptPubKey.clear();\n         scriptPubKey << OP_RETURN << ToByteVector(pubkeys[0]);\n \n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // witness unspendable\n@@ -734,9 +703,8 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         scriptPubKey.clear();\n         scriptPubKey << OP_0 << ToByteVector(ParseHex(\"aabb\"));\n \n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // witness unknown\n@@ -747,9 +715,8 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         scriptPubKey.clear();\n         scriptPubKey << OP_16 << ToByteVector(ParseHex(\"aabb\"));\n \n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // Nonstandard\n@@ -760,9 +727,8 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         scriptPubKey.clear();\n         scriptPubKey << OP_9 << OP_ADD << OP_11 << OP_EQUAL;\n \n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "eaba1c111e9671cdd6faf4b96c39341bbdd41632",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWJhMWMxMTFlOTY3MWNkZDZmYWY0Yjk2YzM5MzQxYmJkZDQxNjMy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-06-18T00:39:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-06-18T00:39:42Z"
      },
      "message": "Add additional unit tests for invalid IsMine combinations",
      "tree": {
        "sha": "712348e41ec927ac421f872d33052373f3b7f56d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/712348e41ec927ac421f872d33052373f3b7f56d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eaba1c111e9671cdd6faf4b96c39341bbdd41632",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaba1c111e9671cdd6faf4b96c39341bbdd41632",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eaba1c111e9671cdd6faf4b96c39341bbdd41632",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaba1c111e9671cdd6faf4b96c39341bbdd41632/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6b9730c49da6a0219453dec8f4df351292e6e07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6b9730c49da6a0219453dec8f4df351292e6e07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6b9730c49da6a0219453dec8f4df351292e6e07"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 82,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f319ea831a80a0598c4249b6e0ddd746e6ecc9a2",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaba1c111e9671cdd6faf4b96c39341bbdd41632/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaba1c111e9671cdd6faf4b96c39341bbdd41632/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=eaba1c111e9671cdd6faf4b96c39341bbdd41632",
        "patch": "@@ -488,6 +488,88 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n \n+    // (P2PKH inside) P2SH inside P2SH (invalid)\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript redeemscript, redeemscript_inner;\n+        redeemscript_inner << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        redeemscript << OP_HASH160 << ToByteVector(CScriptID(redeemscript_inner)) << OP_EQUAL;\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemscript)) << OP_EQUAL;\n+\n+        keystore.AddCScript(redeemscript);\n+        keystore.AddCScript(redeemscript_inner);\n+        keystore.AddCScript(scriptPubKey);\n+        keystore.AddKey(keys[0]);\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+    }\n+\n+    // (P2PKH inside) P2SH inside P2WSH (invalid)\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript witnessscript, redeemscript;\n+        redeemscript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        witnessscript << OP_HASH160 << ToByteVector(CScriptID(redeemscript)) << OP_EQUAL;\n+\n+        uint256 scripthash;\n+        CSHA256().Write(witnessscript.data(), witnessscript.size()).Finalize(scripthash.begin());\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_0 << ToByteVector(scripthash);\n+\n+        keystore.AddCScript(witnessscript);\n+        keystore.AddCScript(redeemscript);\n+        keystore.AddCScript(scriptPubKey);\n+        keystore.AddKey(keys[0]);\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+    }\n+\n+    // P2WPKH inside P2WSH (invalid)\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript witnessscript;\n+        witnessscript << OP_0 << ToByteVector(pubkeys[0].GetID());\n+\n+        scriptPubKey.clear();\n+        uint256 scripthash;\n+        CSHA256().Write(witnessscript.data(), witnessscript.size()).Finalize(scripthash.begin());\n+        scriptPubKey << OP_0 << ToByteVector(scripthash);\n+\n+        keystore.AddCScript(witnessscript);\n+        keystore.AddCScript(scriptPubKey);\n+        keystore.AddKey(keys[0]);\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+    }\n+\n+    // (P2PKH inside) P2WSH inside P2WSH (invalid)\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript witnessscript_inner;\n+        witnessscript_inner << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        uint256 scripthash;\n+        CSHA256().Write(witnessscript_inner.data(), witnessscript_inner.size()).Finalize(scripthash.begin());\n+        CScript witnessscript;\n+        witnessscript << OP_0 << ToByteVector(scripthash);\n+\n+        scriptPubKey.clear();\n+        CSHA256().Write(witnessscript.data(), witnessscript.size()).Finalize(scripthash.begin());\n+        scriptPubKey << OP_0 << ToByteVector(scripthash);\n+\n+        keystore.AddCScript(witnessscript_inner);\n+        keystore.AddCScript(witnessscript);\n+        keystore.AddCScript(scriptPubKey);\n+        keystore.AddKey(keys[0]);\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+    }\n+\n     // P2WPKH compressed\n     {\n         CBasicKeyStore keystore;"
      }
    ]
  },
  {
    "sha": "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjU4MmE1OWM3NTMyYjBlNGY2NDdkOWRmZTUwZjBkODE2ZTgxNDI3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-06-18T02:44:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-06-18T02:44:50Z"
      },
      "message": "Add P2WSH destination helper and use it instead of manual hashing",
      "tree": {
        "sha": "4961859632aa54894a57b87cdde4af6e2bb08c86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4961859632aa54894a57b87cdde4af6e2bb08c86"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb582a59c7532b0e4f647d9dfe50f0d816e81427",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb582a59c7532b0e4f647d9dfe50f0d816e81427",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb582a59c7532b0e4f647d9dfe50f0d816e81427",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb582a59c7532b0e4f647d9dfe50f0d816e81427/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eaba1c111e9671cdd6faf4b96c39341bbdd41632",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaba1c111e9671cdd6faf4b96c39341bbdd41632",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eaba1c111e9671cdd6faf4b96c39341bbdd41632"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 39,
      "deletions": 109
    },
    "files": [
      {
        "sha": "e7531734dcaba40380f3aeac9c3168afc191ac41",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb582a59c7532b0e4f647d9dfe50f0d816e81427/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb582a59c7532b0e4f647d9dfe50f0d816e81427/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=bb582a59c7532b0e4f647d9dfe50f0d816e81427",
        "patch": "@@ -637,9 +637,7 @@ static UniValue decodescript(const JSONRPCRequest& request)\n             } else {\n                 // Scripts that are not fit for P2WPKH are encoded as P2WSH.\n                 // Newer segwit program versions should be considered when then become available.\n-                uint256 scriptHash;\n-                CSHA256().Write(script.data(), script.size()).Finalize(scriptHash.begin());\n-                segwitScr = GetScriptForDestination(WitnessV0ScriptHash(scriptHash));\n+                segwitScr = GetScriptForDestination(WitnessV0ScriptHash(script));\n             }\n             ScriptPubKeyToUniv(segwitScr, sr, true);\n             sr.pushKV(\"p2sh-segwit\", EncodeDestination(CScriptID(segwitScr)));"
      },
      {
        "sha": "f0b2c62a910aeb0b77ae32a4fa2891fa1bb1ee6b",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb582a59c7532b0e4f647d9dfe50f0d816e81427/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb582a59c7532b0e4f647d9dfe50f0d816e81427/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=bb582a59c7532b0e4f647d9dfe50f0d816e81427",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <script/standard.h>\n \n+#include <crypto/sha256.h>\n #include <pubkey.h>\n #include <script/script.h>\n #include <util.h>\n@@ -18,6 +19,11 @@ unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;\n \n CScriptID::CScriptID(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}\n \n+WitnessV0ScriptHash::WitnessV0ScriptHash(const CScript& in)\n+{\n+    CSHA256().Write(in.data(), in.size()).Finalize(begin());\n+}\n+\n const char* GetTxnOutputType(txnouttype t)\n {\n     switch (t)\n@@ -329,9 +335,7 @@ CScript GetScriptForWitness(const CScript& redeemscript)\n             return GetScriptForDestination(WitnessV0KeyHash(vSolutions[0]));\n         }\n     }\n-    uint256 hash;\n-    CSHA256().Write(&redeemscript[0], redeemscript.size()).Finalize(hash.begin());\n-    return GetScriptForDestination(WitnessV0ScriptHash(hash));\n+    return GetScriptForDestination(WitnessV0ScriptHash(redeemscript));\n }\n \n bool IsValidDestination(const CTxDestination& dest) {"
      },
      {
        "sha": "1380030871fba8e3f40e9aeb50c98eadcaf5ce37",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb582a59c7532b0e4f647d9dfe50f0d816e81427/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb582a59c7532b0e4f647d9dfe50f0d816e81427/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=bb582a59c7532b0e4f647d9dfe50f0d816e81427",
        "patch": "@@ -77,6 +77,7 @@ struct WitnessV0ScriptHash : public uint256\n {\n     WitnessV0ScriptHash() : uint256() {}\n     explicit WitnessV0ScriptHash(const uint256& hash) : uint256(hash) {}\n+    explicit WitnessV0ScriptHash(const CScript& script);\n     using uint256::uint256;\n };\n "
      },
      {
        "sha": "7d4734986abe2701987beb17f1c494a69db794cb",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 100,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb582a59c7532b0e4f647d9dfe50f0d816e81427/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb582a59c7532b0e4f647d9dfe50f0d816e81427/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=bb582a59c7532b0e4f647d9dfe50f0d816e81427",
        "patch": "@@ -402,8 +402,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     // P2PK compressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n \n         // Keystore does not have key\n         result = IsMine(keystore, scriptPubKey);\n@@ -418,8 +417,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     // P2PK uncompressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << ToByteVector(uncompressedPubkey) << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n \n         // Keystore does not have key\n         result = IsMine(keystore, scriptPubKey);\n@@ -434,8 +432,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     // P2PKH compressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForDestination(pubkeys[0].GetID());\n \n         // Keystore does not have key\n         result = IsMine(keystore, scriptPubKey);\n@@ -450,8 +447,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     // P2PKH uncompressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(uncompressedPubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForDestination(uncompressedPubkey.GetID());\n \n         // Keystore does not have key\n         result = IsMine(keystore, scriptPubKey);\n@@ -467,11 +463,8 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     {\n         CBasicKeyStore keystore;\n \n-        CScript redeemScript;\n-        redeemScript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+        CScript redeemScript = GetScriptForDestination(pubkeys[0].GetID());\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n \n         // Keystore does not have redeemScript or key\n         result = IsMine(keystore, scriptPubKey);\n@@ -492,12 +485,9 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     {\n         CBasicKeyStore keystore;\n \n-        CScript redeemscript, redeemscript_inner;\n-        redeemscript_inner << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-        redeemscript << OP_HASH160 << ToByteVector(CScriptID(redeemscript_inner)) << OP_EQUAL;\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemscript)) << OP_EQUAL;\n+        CScript redeemscript_inner = GetScriptForDestination(pubkeys[0].GetID());\n+        CScript redeemscript = GetScriptForDestination(CScriptID(redeemscript_inner));\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemscript));\n \n         keystore.AddCScript(redeemscript);\n         keystore.AddCScript(redeemscript_inner);\n@@ -511,14 +501,9 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     {\n         CBasicKeyStore keystore;\n \n-        CScript witnessscript, redeemscript;\n-        redeemscript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-        witnessscript << OP_HASH160 << ToByteVector(CScriptID(redeemscript)) << OP_EQUAL;\n-\n-        uint256 scripthash;\n-        CSHA256().Write(witnessscript.data(), witnessscript.size()).Finalize(scripthash.begin());\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_0 << ToByteVector(scripthash);\n+        CScript redeemscript = GetScriptForDestination(pubkeys[0].GetID());\n+        CScript witnessscript = GetScriptForDestination(CScriptID(redeemscript));\n+        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n \n         keystore.AddCScript(witnessscript);\n         keystore.AddCScript(redeemscript);\n@@ -532,13 +517,8 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     {\n         CBasicKeyStore keystore;\n \n-        CScript witnessscript;\n-        witnessscript << OP_0 << ToByteVector(pubkeys[0].GetID());\n-\n-        scriptPubKey.clear();\n-        uint256 scripthash;\n-        CSHA256().Write(witnessscript.data(), witnessscript.size()).Finalize(scripthash.begin());\n-        scriptPubKey << OP_0 << ToByteVector(scripthash);\n+        CScript witnessscript = GetScriptForDestination(WitnessV0KeyHash(pubkeys[0].GetID()));\n+        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n \n         keystore.AddCScript(witnessscript);\n         keystore.AddCScript(scriptPubKey);\n@@ -551,16 +531,9 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     {\n         CBasicKeyStore keystore;\n \n-        CScript witnessscript_inner;\n-        witnessscript_inner << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-        uint256 scripthash;\n-        CSHA256().Write(witnessscript_inner.data(), witnessscript_inner.size()).Finalize(scripthash.begin());\n-        CScript witnessscript;\n-        witnessscript << OP_0 << ToByteVector(scripthash);\n-\n-        scriptPubKey.clear();\n-        CSHA256().Write(witnessscript.data(), witnessscript.size()).Finalize(scripthash.begin());\n-        scriptPubKey << OP_0 << ToByteVector(scripthash);\n+        CScript witnessscript_inner = GetScriptForDestination(pubkeys[0].GetID());\n+        CScript witnessscript = GetScriptForDestination(WitnessV0ScriptHash(witnessscript_inner));\n+        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n \n         keystore.AddCScript(witnessscript_inner);\n         keystore.AddCScript(witnessscript);\n@@ -575,8 +548,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         CBasicKeyStore keystore;\n         keystore.AddKey(keys[0]);\n \n-        scriptPubKey.clear();\n-        scriptPubKey << OP_0 << ToByteVector(pubkeys[0].GetID());\n+        scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(pubkeys[0].GetID()));\n \n         // Keystore implicitly has key and P2SH redeemScript\n         keystore.AddCScript(scriptPubKey);\n@@ -589,8 +561,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         CBasicKeyStore keystore;\n         keystore.AddKey(uncompressedKey);\n \n-        scriptPubKey.clear();\n-        scriptPubKey << OP_0 << ToByteVector(uncompressedPubkey.GetID());\n+        scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(uncompressedPubkey.GetID()));\n \n         // Keystore has key, but no P2SH redeemScript\n         result = IsMine(keystore, scriptPubKey);\n@@ -606,11 +577,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     {\n         CBasicKeyStore keystore;\n \n-        scriptPubKey.clear();\n-        scriptPubKey << OP_2 <<\n-            ToByteVector(uncompressedPubkey) <<\n-            ToByteVector(pubkeys[1]) <<\n-            OP_2 << OP_CHECKMULTISIG;\n+        scriptPubKey = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n \n         // Keystore does not have any keys\n         result = IsMine(keystore, scriptPubKey);\n@@ -641,14 +608,8 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         keystore.AddKey(uncompressedKey);\n         keystore.AddKey(keys[1]);\n \n-        CScript redeemScript;\n-        redeemScript << OP_2 <<\n-            ToByteVector(uncompressedPubkey) <<\n-            ToByteVector(pubkeys[1]) <<\n-            OP_2 << OP_CHECKMULTISIG;\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+        CScript redeemScript = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n \n         // Keystore has no redeemScript\n         result = IsMine(keystore, scriptPubKey);\n@@ -666,18 +627,8 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         keystore.AddKey(keys[0]);\n         keystore.AddKey(keys[1]);\n \n-        CScript witnessScript;\n-        witnessScript << OP_2 <<\n-            ToByteVector(pubkeys[0]) <<\n-            ToByteVector(pubkeys[1]) <<\n-            OP_2 << OP_CHECKMULTISIG;\n-\n-        uint256 scriptHash;\n-        CSHA256().Write(&witnessScript[0], witnessScript.size())\n-            .Finalize(scriptHash.begin());\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_0 << ToByteVector(scriptHash);\n+        CScript witnessScript = GetScriptForMultisig(2, {pubkeys[0], pubkeys[1]});\n+        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n         // Keystore has keys, but no witnessScript or P2SH redeemScript\n         result = IsMine(keystore, scriptPubKey);\n@@ -700,18 +651,8 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         keystore.AddKey(uncompressedKey);\n         keystore.AddKey(keys[1]);\n \n-        CScript witnessScript;\n-        witnessScript << OP_2 <<\n-            ToByteVector(uncompressedPubkey) <<\n-            ToByteVector(pubkeys[1]) <<\n-            OP_2 << OP_CHECKMULTISIG;\n-\n-        uint256 scriptHash;\n-        CSHA256().Write(&witnessScript[0], witnessScript.size())\n-            .Finalize(scriptHash.begin());\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_0 << ToByteVector(scriptHash);\n+        CScript witnessScript = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n+        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n         // Keystore has keys, but no witnessScript or P2SH redeemScript\n         result = IsMine(keystore, scriptPubKey);\n@@ -732,21 +673,9 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     {\n         CBasicKeyStore keystore;\n \n-        CScript witnessScript;\n-        witnessScript << OP_2 <<\n-            ToByteVector(pubkeys[0]) <<\n-            ToByteVector(pubkeys[1]) <<\n-            OP_2 << OP_CHECKMULTISIG;\n-\n-        uint256 scriptHash;\n-        CSHA256().Write(&witnessScript[0], witnessScript.size())\n-            .Finalize(scriptHash.begin());\n-\n-        CScript redeemScript;\n-        redeemScript << OP_0 << ToByteVector(scriptHash);\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+        CScript witnessScript = GetScriptForMultisig(2, {pubkeys[0], pubkeys[1]});\n+        CScript redeemScript = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n \n         // Keystore has no witnessScript, P2SH redeemScript, or keys\n         result = IsMine(keystore, scriptPubKey);"
      },
      {
        "sha": "18e64ebc53552f17faebe7a29aa8c413956caebb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb582a59c7532b0e4f647d9dfe50f0d816e81427/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb582a59c7532b0e4f647d9dfe50f0d816e81427/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bb582a59c7532b0e4f647d9dfe50f0d816e81427",
        "patch": "@@ -4520,9 +4520,7 @@ CTxDestination CWallet::AddAndGetDestinationForScript(const CScript& script, Out\n         return CScriptID(script);\n     case OutputType::P2SH_SEGWIT:\n     case OutputType::BECH32: {\n-        WitnessV0ScriptHash hash;\n-        CSHA256().Write(script.data(), script.size()).Finalize(hash.begin());\n-        CTxDestination witdest = hash;\n+        CTxDestination witdest = WitnessV0ScriptHash(script);\n         CScript witprog = GetScriptForDestination(witdest);\n         // Check if the resulting program is solvable (i.e. doesn't use an uncompressed key)\n         if (!IsSolvable(*this, witprog)) return CScriptID(script);"
      }
    ]
  }
]