ken2812221,2018-09-06T02:05:05Z,"> Furthermore, a static function in a cpp file already has internal linkage, making it inline has no effect.\n\nIs there any document that can prove this? I don't think they act different when they are in .cpp and .h files",https://github.com/bitcoin/bitcoin/pull/14158#issuecomment-418939629,418939629,
DrahtBot,2018-09-06T03:15:45Z,<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #14209 (logging: Replace LogPrint macros with regular functions by MarcoFalke)\n* #14045 (refactor: Fix the chainparamsbase -> util circular dependency by Empact)\n* #13098 (Skip tx-rehashing on historic blocks by MarcoFalke)\n* #11535 (Avoid unintentional unsigned integer wraparound,https://github.com/bitcoin/bitcoin/pull/14158#issuecomment-418950752,418950752,
arvidn,2018-09-06T05:12:21Z,"> Is there any document that can prove this? I don't think they act different when they are in .cpp and .h files\n\n[[decl.inline]](http://eel.is/c++draft/dcl.dcl#dcl.inline-6) say:\n\n> An inline function or variable shall be defined in every translation unit in which it is odr-used and shall have exactly the same definition in every case ([basic.def.odr]).\n\nwhich is really the main defin",https://github.com/bitcoin/bitcoin/pull/14158#issuecomment-418966725,418966725,
practicalswift,2018-09-06T14:47:14Z,"utACK ee258a03b4e14751f5ecb9098a11d90cc32f230e\n\nExcellent first-time contribution! I'm so glad to see you as a Bitcoin Core contributor @arvidn. I love your work on `libtorrent` and I'm also a fan of your C++ talks.\n\nThe high quality standards you strive for in the `libtorrent` project and enforce by use of automated testing/linting is really impressive. Thanks for some really inspiring wo",https://github.com/bitcoin/bitcoin/pull/14158#issuecomment-419121796,419121796,
promag,2018-09-06T15:09:01Z,"@arvidn I'm curious if you found these with grep or other tool? I mean, is this complete? And can we add check to prevent more ""wrong"" code?",https://github.com/bitcoin/bitcoin/pull/14158#issuecomment-419130286,419130286,
arvidn,2018-09-06T15:24:28Z,"@promag good question. I used vim for the bulk of the change, specifically:\n\n```\n:argadd src/*.cpp src/*/*.cpp\n:argdo %s/static inline /static /ge\n```\n\nand\n\n```\n:argadd src/*.h src/*/*.h\n:argdo %s/static inline /inline /ge\n```\n\nThen I grepped out the templates from the diff that created.\n\nSo, any code outside of those globs was not included.",https://github.com/bitcoin/bitcoin/pull/14158#issuecomment-419136141,419136141,
sipa,2018-09-06T16:54:05Z,"> Furthermore, a static function in a cpp file already has internal linkage, making it inline has no effect.\n\n> Templates already have an inline-like property of being allowed to be defined multiple times, and having the linker deal with it. Making them inline is also redundant.\n\nAs far as I know, `inline` has two effects. One is allowing the function to be defined in multiple translation ",https://github.com/bitcoin/bitcoin/pull/14158#issuecomment-419166036,419166036,
arvidn,2018-09-06T17:35:13Z,"@sipa that's exactly right, those are the two effects. I believe it's widely understood that all major compilers these days ignore the hint and base inlining entirely on their own heuristics. It's a fair concern though. I'll see what I can come up with. Are there any performance regression tests by any chance?",https://github.com/bitcoin/bitcoin/pull/14158#issuecomment-419178884,419178884,
MarcoFalke,2018-09-06T17:52:32Z,"There is `./src/bench/bench_bitcoin`, but it has not full coverage.",https://github.com/bitcoin/bitcoin/pull/14158#issuecomment-419184425,419184425,
arvidn,2018-09-06T19:43:09Z,"it appears at least clang *does* take the `inline` keyword into account in its heuristic [[ref]](https://blog.tartanllama.xyz/inline-hints/). I wouldn't expect it to really make a significant difference in this case (either direction).\n\nPerhaps a better approach would be to split this PR into two. I could revert the removal of `inline` and submit that as a separate PR where I can put some more",https://github.com/bitcoin/bitcoin/pull/14158#issuecomment-419217529,419217529,
arvidn,2018-09-07T16:42:40Z,"I put some work into investigating whether any of the inline decisions changed by this patch. Given that it's primarily decided by heuristics, this may differ on GCC. I tested this with clang using the `-Rpass=inline` command line switch. This logs every time the inliner fires.\n\nSpecifically I ran:\n\n```\nCFLAGS=-Rpass=inline ./configure\nmake V=1 -j1 2> master-inlining.log\ngrep ""remark",https://github.com/bitcoin/bitcoin/pull/14158#issuecomment-419497960,419497960,
sipa,2018-09-08T17:01:31Z,"@arvidn I just observed `inline` on a member function inside an anonymous namespace having an effect with GCC (version 7.3.0, `-O2`), in a different project with pretty complicated templated code.\n\nI very much doubt the same effect would be observed in Bitcoin Core (nothing similarly complex happens here), but I thought I'd point it out as it may mean we need to consider GCC as well.\n\n",https://github.com/bitcoin/bitcoin/pull/14158#issuecomment-419657787,419657787,
DrahtBot,2018-09-13T09:28:30Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/14158#issuecomment-420943706,420943706,
MarcoFalke,2018-09-20T20:12:32Z,"Still needs rebase, so closing for now. Let me know when you work on this again, so I can reopen.",https://github.com/bitcoin/bitcoin/pull/14158#issuecomment-423317175,423317175,
ken2812221,2018-09-06T02:20:28Z,"This is constexpr , can this drop both inlin and static?",https://github.com/bitcoin/bitcoin/pull/14158#discussion_r215478123,215478123,src/crypto/chacha20.cpp
arvidn,2018-09-06T04:57:43Z,"no, `static` still gives it internal linkage.",https://github.com/bitcoin/bitcoin/pull/14158#discussion_r215494931,215494931,src/crypto/chacha20.cpp
