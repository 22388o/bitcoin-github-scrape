[
  {
    "sha": "d91b635058f88c4073e695e52f6d106c41295ef6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTFiNjM1MDU4Zjg4YzQwNzNlNjk1ZTUyZjZkMTA2YzQxMjk1ZWY2",
    "commit": {
      "author": {
        "name": "Arvid Norberg",
        "email": "arvid@blockstream.io",
        "date": "2018-09-04T22:09:47Z"
      },
      "committer": {
        "name": "Arvid Norberg",
        "email": "arvid@blockstream.io",
        "date": "2018-09-06T01:33:51Z"
      },
      "message": "give inlined functions external linkage in header files, to avoid duplicate definitions. In cpp files, don't make functions with internal linkage inline, since it's unnecessary in that case",
      "tree": {
        "sha": "76c72f500731c51f6c3025955ed0bea3f3e57d70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76c72f500731c51f6c3025955ed0bea3f3e57d70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d91b635058f88c4073e695e52f6d106c41295ef6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d91b635058f88c4073e695e52f6d106c41295ef6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d91b635058f88c4073e695e52f6d106c41295ef6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d91b635058f88c4073e695e52f6d106c41295ef6/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "adf27b531a7fcd7066ab6649e8073bd1895a823a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adf27b531a7fcd7066ab6649e8073bd1895a823a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/adf27b531a7fcd7066ab6649e8073bd1895a823a"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 91,
      "deletions": 91
    },
    "files": [
      {
        "sha": "3e81e3f974972f5039ccf4f208b1e4dfd2d5898f",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -230,15 +230,15 @@ CRollingBloomFilter::CRollingBloomFilter(const unsigned int nElements, const dou\n }\n \n /* Similar to CBloomFilter::Hash */\n-static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {\n+static uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash);\n }\n \n \n // A replacement for x % n. This assumes that x and n are 32bit integers, and x is a uniformly random distributed 32bit value\n // which should be the case for a good hash.\n // See https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/\n-static inline uint32_t FastMod(uint32_t x, size_t n) {\n+static uint32_t FastMod(uint32_t x, size_t n) {\n     return ((uint64_t)x * (uint64_t)n) >> 32;\n }\n "
      },
      {
        "sha": "74c8f0b83b4efab98e604b3fc87d3c00b6af20f1",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -67,10 +67,10 @@ CBlockIndex* CChain::FindEarliestAtLeast(int64_t nTime) const\n }\n \n /** Turn the lowest '1' bit in the binary representation of a number into a '0'. */\n-int static inline InvertLowestOne(int n) { return n & (n - 1); }\n+int static InvertLowestOne(int n) { return n & (n - 1); }\n \n /** Compute what height to jump back to with the CBlockIndex::pskip pointer. */\n-int static inline GetSkipHeight(int height) {\n+int static GetSkipHeight(int height) {\n     if (height < 2)\n         return 0;\n "
      },
      {
        "sha": "1128fb6a70ff8154ae4b6df9c08a3873b1819cb5",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -102,7 +102,7 @@ typedef void* sockopt_arg_type;\n typedef char* sockopt_arg_type;\n #endif\n \n-bool static inline IsSelectableSocket(const SOCKET& s) {\n+bool inline IsSelectableSocket(const SOCKET& s) {\n #ifdef WIN32\n     return true;\n #else"
      },
      {
        "sha": "9caddd2a3015d86f0c049dbdbf79b6921263be23",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -93,15 +93,15 @@ class CValidationState {\n // using only serialization with and without witness data. As witness_size\n // is equal to total_size - stripped_size, this formula is identical to:\n // weight = (stripped_size * 3) + total_size.\n-static inline int64_t GetTransactionWeight(const CTransaction& tx)\n+inline int64_t GetTransactionWeight(const CTransaction& tx)\n {\n     return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n }\n-static inline int64_t GetBlockWeight(const CBlock& block)\n+inline int64_t GetBlockWeight(const CBlock& block)\n {\n     return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n }\n-static inline int64_t GetTransactionInputWeight(const CTxIn& txin)\n+inline int64_t GetTransactionInputWeight(const CTxIn& txin)\n {\n     // scriptWitness size is added here because witnesses and txins are split up in segwit serialization.\n     return ::GetSerializeSize(txin, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(txin, SER_NETWORK, PROTOCOL_VERSION) + ::GetSerializeSize(txin.scriptWitness.stack, SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "5dd1c99bbc68bbd7f08131a225a0e52f2b443091",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -9,27 +9,27 @@\n #include <primitives/block.h>\n #include <memusage.h>\n \n-static inline size_t RecursiveDynamicUsage(const CScript& script) {\n+inline size_t RecursiveDynamicUsage(const CScript& script) {\n     return memusage::DynamicUsage(script);\n }\n \n-static inline size_t RecursiveDynamicUsage(const COutPoint& out) {\n+inline size_t RecursiveDynamicUsage(const COutPoint& out) {\n     return 0;\n }\n \n-static inline size_t RecursiveDynamicUsage(const CTxIn& in) {\n+inline size_t RecursiveDynamicUsage(const CTxIn& in) {\n     size_t mem = RecursiveDynamicUsage(in.scriptSig) + RecursiveDynamicUsage(in.prevout) + memusage::DynamicUsage(in.scriptWitness.stack);\n     for (std::vector<std::vector<unsigned char> >::const_iterator it = in.scriptWitness.stack.begin(); it != in.scriptWitness.stack.end(); it++) {\n          mem += memusage::DynamicUsage(*it);\n     }\n     return mem;\n }\n \n-static inline size_t RecursiveDynamicUsage(const CTxOut& out) {\n+inline size_t RecursiveDynamicUsage(const CTxOut& out) {\n     return RecursiveDynamicUsage(out.scriptPubKey);\n }\n \n-static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n+inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n     size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n     for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n         mem += RecursiveDynamicUsage(*it);\n@@ -40,7 +40,7 @@ static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n     return mem;\n }\n \n-static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n+inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n     size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n     for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n         mem += RecursiveDynamicUsage(*it);\n@@ -51,20 +51,20 @@ static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n     return mem;\n }\n \n-static inline size_t RecursiveDynamicUsage(const CBlock& block) {\n+inline size_t RecursiveDynamicUsage(const CBlock& block) {\n     size_t mem = memusage::DynamicUsage(block.vtx);\n     for (const auto& tx : block.vtx) {\n         mem += memusage::DynamicUsage(tx) + RecursiveDynamicUsage(*tx);\n     }\n     return mem;\n }\n \n-static inline size_t RecursiveDynamicUsage(const CBlockLocator& locator) {\n+inline size_t RecursiveDynamicUsage(const CBlockLocator& locator) {\n     return memusage::DynamicUsage(locator.vHave);\n }\n \n template<typename X>\n-static inline size_t RecursiveDynamicUsage(const std::shared_ptr<X>& p) {\n+inline size_t RecursiveDynamicUsage(const std::shared_ptr<X>& p) {\n     return p ? memusage::DynamicUsage(p) + RecursiveDynamicUsage(*p) : 0;\n }\n "
      },
      {
        "sha": "6144d6e76c7a3bdd8aacd4a5ef3116158ebd187a",
        "filename": "src/crypto/chacha20.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/crypto/chacha20.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/crypto/chacha20.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/chacha20.cpp?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -10,7 +10,7 @@\n \n #include <string.h>\n \n-constexpr static inline uint32_t rotl32(uint32_t v, int c) { return (v << c) | (v >> (32 - c)); }\n+constexpr static uint32_t rotl32(uint32_t v, int c) { return (v << c) | (v >> (32 - c)); }\n \n #define QUARTERROUND(a,b,c,d) \\\n   a += b; d = rotl32(d ^ a, 16); \\"
      },
      {
        "sha": "2266f238d9c680af6f5d997864b049d173f5d3f0",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -14,73 +14,73 @@\n \n #include <compat/endian.h>\n \n-uint16_t static inline ReadLE16(const unsigned char* ptr)\n+uint16_t inline ReadLE16(const unsigned char* ptr)\n {\n     uint16_t x;\n     memcpy((char*)&x, ptr, 2);\n     return le16toh(x);\n }\n \n-uint32_t static inline ReadLE32(const unsigned char* ptr)\n+uint32_t inline ReadLE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy((char*)&x, ptr, 4);\n     return le32toh(x);\n }\n \n-uint64_t static inline ReadLE64(const unsigned char* ptr)\n+uint64_t inline ReadLE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy((char*)&x, ptr, 8);\n     return le64toh(x);\n }\n \n-void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n+void inline WriteLE16(unsigned char* ptr, uint16_t x)\n {\n     uint16_t v = htole16(x);\n     memcpy(ptr, (char*)&v, 2);\n }\n \n-void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n+void inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n     uint32_t v = htole32(x);\n     memcpy(ptr, (char*)&v, 4);\n }\n \n-void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n+void inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n     uint64_t v = htole64(x);\n     memcpy(ptr, (char*)&v, 8);\n }\n \n-uint32_t static inline ReadBE32(const unsigned char* ptr)\n+uint32_t inline ReadBE32(const unsigned char* ptr)\n {\n     uint32_t x;\n     memcpy((char*)&x, ptr, 4);\n     return be32toh(x);\n }\n \n-uint64_t static inline ReadBE64(const unsigned char* ptr)\n+uint64_t inline ReadBE64(const unsigned char* ptr)\n {\n     uint64_t x;\n     memcpy((char*)&x, ptr, 8);\n     return be64toh(x);\n }\n \n-void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n+void inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n     uint32_t v = htobe32(x);\n     memcpy(ptr, (char*)&v, 4);\n }\n \n-void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n+void inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n     uint64_t v = htobe64(x);\n     memcpy(ptr, (char*)&v, 8);\n }\n \n /** Return the smallest number n such that (x >> n) == 0 (or 64 if the highest bit in x is set. */\n-uint64_t static inline CountBits(uint64_t x)\n+uint64_t inline CountBits(uint64_t x)\n {\n #if HAVE_DECL___BUILTIN_CLZL\n     if (sizeof(unsigned long) >= sizeof(uint64_t)) {"
      },
      {
        "sha": "230bfd80948453ada4401c43577cb08e4ba0511f",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -111,7 +111,7 @@ namespace BCLog {\n extern BCLog::Logger* const g_logger;\n \n /** Return true if log accepts specified category */\n-static inline bool LogAcceptCategory(BCLog::LogFlags category)\n+inline bool LogAcceptCategory(BCLog::LogFlags category)\n {\n     return g_logger->WillLogCategory(category);\n }\n@@ -128,8 +128,8 @@ bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str);\n /** Get format string from VA_ARGS for error reporting */\n template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }\n \n-static inline void MarkUsed() {}\n-template<typename T, typename... Args> static inline void MarkUsed(const T& t, const Args&... args)\n+inline void MarkUsed() {}\n+template<typename T, typename... Args> inline void MarkUsed(const T& t, const Args&... args)\n {\n     (void)t;\n     MarkUsed(args...);"
      },
      {
        "sha": "6dc4fce6c7b3be45000a6bcadd6bf3165f52e8af",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -24,18 +24,18 @@ namespace memusage\n static size_t MallocUsage(size_t alloc);\n \n /** Dynamic memory usage for built-in types is zero. */\n-static inline size_t DynamicUsage(const int8_t& v) { return 0; }\n-static inline size_t DynamicUsage(const uint8_t& v) { return 0; }\n-static inline size_t DynamicUsage(const int16_t& v) { return 0; }\n-static inline size_t DynamicUsage(const uint16_t& v) { return 0; }\n-static inline size_t DynamicUsage(const int32_t& v) { return 0; }\n-static inline size_t DynamicUsage(const uint32_t& v) { return 0; }\n-static inline size_t DynamicUsage(const int64_t& v) { return 0; }\n-static inline size_t DynamicUsage(const uint64_t& v) { return 0; }\n-static inline size_t DynamicUsage(const float& v) { return 0; }\n-static inline size_t DynamicUsage(const double& v) { return 0; }\n-template<typename X> static inline size_t DynamicUsage(X * const &v) { return 0; }\n-template<typename X> static inline size_t DynamicUsage(const X * const &v) { return 0; }\n+inline size_t DynamicUsage(const int8_t& v) { return 0; }\n+inline size_t DynamicUsage(const uint8_t& v) { return 0; }\n+inline size_t DynamicUsage(const int16_t& v) { return 0; }\n+inline size_t DynamicUsage(const uint16_t& v) { return 0; }\n+inline size_t DynamicUsage(const int32_t& v) { return 0; }\n+inline size_t DynamicUsage(const uint32_t& v) { return 0; }\n+inline size_t DynamicUsage(const int64_t& v) { return 0; }\n+inline size_t DynamicUsage(const uint64_t& v) { return 0; }\n+inline size_t DynamicUsage(const float& v) { return 0; }\n+inline size_t DynamicUsage(const double& v) { return 0; }\n+template<typename X> inline size_t DynamicUsage(X * const &v) { return 0; }\n+template<typename X> inline size_t DynamicUsage(const X * const &v) { return 0; }\n \n /** Compute the memory used for dynamically allocated but owned data structures.\n  *  For generic data types, this is *not* recursive. DynamicUsage(vector<vector<int> >)\n@@ -45,7 +45,7 @@ template<typename X> static inline size_t DynamicUsage(const X * const &v) { ret\n  *  iterate themselves, or use more efficient caching + updating on modification.\n  */\n \n-static inline size_t MallocUsage(size_t alloc)\n+inline size_t MallocUsage(size_t alloc)\n {\n     // Measured on libc6 2.19 on Linux.\n     if (alloc == 0) {\n@@ -82,63 +82,63 @@ struct stl_shared_counter\n };\n \n template<typename X>\n-static inline size_t DynamicUsage(const std::vector<X>& v)\n+inline size_t DynamicUsage(const std::vector<X>& v)\n {\n     return MallocUsage(v.capacity() * sizeof(X));\n }\n \n template<unsigned int N, typename X, typename S, typename D>\n-static inline size_t DynamicUsage(const prevector<N, X, S, D>& v)\n+inline size_t DynamicUsage(const prevector<N, X, S, D>& v)\n {\n     return MallocUsage(v.allocated_memory());\n }\n \n template<typename X, typename Y>\n-static inline size_t DynamicUsage(const std::set<X, Y>& s)\n+inline size_t DynamicUsage(const std::set<X, Y>& s)\n {\n     return MallocUsage(sizeof(stl_tree_node<X>)) * s.size();\n }\n \n template<typename X, typename Y>\n-static inline size_t IncrementalDynamicUsage(const std::set<X, Y>& s)\n+inline size_t IncrementalDynamicUsage(const std::set<X, Y>& s)\n {\n     return MallocUsage(sizeof(stl_tree_node<X>));\n }\n \n template<typename X, typename Y, typename Z>\n-static inline size_t DynamicUsage(const std::map<X, Y, Z>& m)\n+inline size_t DynamicUsage(const std::map<X, Y, Z>& m)\n {\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >)) * m.size();\n }\n \n template<typename X, typename Y, typename Z>\n-static inline size_t IncrementalDynamicUsage(const std::map<X, Y, Z>& m)\n+inline size_t IncrementalDynamicUsage(const std::map<X, Y, Z>& m)\n {\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >));\n }\n \n // indirectmap has underlying map with pointer as key\n \n template<typename X, typename Y>\n-static inline size_t DynamicUsage(const indirectmap<X, Y>& m)\n+inline size_t DynamicUsage(const indirectmap<X, Y>& m)\n {\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X*, Y> >)) * m.size();\n }\n \n template<typename X, typename Y>\n-static inline size_t IncrementalDynamicUsage(const indirectmap<X, Y>& m)\n+inline size_t IncrementalDynamicUsage(const indirectmap<X, Y>& m)\n {\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X*, Y> >));\n }\n \n template<typename X>\n-static inline size_t DynamicUsage(const std::unique_ptr<X>& p)\n+inline size_t DynamicUsage(const std::unique_ptr<X>& p)\n {\n     return p ? MallocUsage(sizeof(X)) : 0;\n }\n \n template<typename X>\n-static inline size_t DynamicUsage(const std::shared_ptr<X>& p)\n+inline size_t DynamicUsage(const std::shared_ptr<X>& p)\n {\n     // A shared_ptr can either use a single continuous memory block for both\n     // the counter and the storage (when using std::make_shared), or separate.\n@@ -154,13 +154,13 @@ struct unordered_node : private X\n };\n \n template<typename X, typename Y>\n-static inline size_t DynamicUsage(const std::unordered_set<X, Y>& s)\n+inline size_t DynamicUsage(const std::unordered_set<X, Y>& s)\n {\n     return MallocUsage(sizeof(unordered_node<X>)) * s.size() + MallocUsage(sizeof(void*) * s.bucket_count());\n }\n \n template<typename X, typename Y, typename Z>\n-static inline size_t DynamicUsage(const std::unordered_map<X, Y, Z>& m)\n+inline size_t DynamicUsage(const std::unordered_map<X, Y, Z>& m)\n {\n     return MallocUsage(sizeof(unordered_node<std::pair<const X, Y> >)) * m.size() + MallocUsage(sizeof(void*) * m.bucket_count());\n }"
      },
      {
        "sha": "50fa60f101bf3dd6b5a3ed1501664d41e8378ffb",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -642,7 +642,7 @@ bool CSubNet::Match(const CNetAddr &addr) const\n     return true;\n }\n \n-static inline int NetmaskBits(uint8_t x)\n+static int NetmaskBits(uint8_t x)\n {\n     switch(x) {\n     case 0x00: return 0;"
      },
      {
        "sha": "15911a5106f1366ec486ce7b3e843a3e861fc33c",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -400,7 +400,7 @@ struct CMutableTransaction\n };\n \n typedef std::shared_ptr<const CTransaction> CTransactionRef;\n-static inline CTransactionRef MakeTransactionRef() { return std::make_shared<const CTransaction>(); }\n-template <typename Tx> static inline CTransactionRef MakeTransactionRef(Tx&& txIn) { return std::make_shared<const CTransaction>(std::forward<Tx>(txIn)); }\n+inline CTransactionRef MakeTransactionRef() { return std::make_shared<const CTransaction>(); }\n+template <typename Tx> inline CTransactionRef MakeTransactionRef(Tx&& txIn) { return std::make_shared<const CTransaction>(std::forward<Tx>(txIn)); }\n \n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      },
      {
        "sha": "4d1111d9df3c27ee5861b572205421d4d931fa2f",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -312,15 +312,15 @@ void SetServiceFlagsIBDCache(bool status);\n  * == GetDesirableServiceFlags(services), ie determines whether the given\n  * set of service flags are sufficient for a peer to be \"relevant\".\n  */\n-static inline bool HasAllDesirableServiceFlags(ServiceFlags services) {\n+inline bool HasAllDesirableServiceFlags(ServiceFlags services) {\n     return !(GetDesirableServiceFlags(services) & (~services));\n }\n \n /**\n  * Checks if a peer with the given service flags may be capable of having a\n  * robust address-storage DB.\n  */\n-static inline bool MayHaveUsefulAddressDB(ServiceFlags services) {\n+inline bool MayHaveUsefulAddressDB(ServiceFlags services) {\n     return (services & NODE_NETWORK) || (services & NODE_NETWORK_LIMITED);\n }\n "
      },
      {
        "sha": "58ceb8439a1620efccca56bc674f68317120cede",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -54,7 +54,7 @@\n     std::abort();\n }\n \n-static inline int64_t GetPerformanceCounter()\n+static int64_t GetPerformanceCounter()\n {\n     // Read the hardware time stamp counter when available.\n     // See https://en.wikipedia.org/wiki/Time_Stamp_Counter for more information."
      },
      {
        "sha": "d3a6c05093457f477de71d55e319ffaa1feba554",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -1683,9 +1683,9 @@ void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES],\n }\n \n template<typename T>\n-static inline bool SetHasKeys(const std::set<T>& set) {return false;}\n+static bool SetHasKeys(const std::set<T>& set) {return false;}\n template<typename T, typename Tk, typename... Args>\n-static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n+static bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n {\n     return (set.count(key) != 0) || SetHasKeys(set, args...);\n }"
      },
      {
        "sha": "3515ea0a849ff9a52c70318bc055ba9e5d3df08e",
        "filename": "src/rpc/register.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/rpc/register.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/rpc/register.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/register.h?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -20,7 +20,7 @@ void RegisterMiningRPCCommands(CRPCTable &tableRPC);\n /** Register raw transaction RPC commands */\n void RegisterRawTransactionRPCCommands(CRPCTable &tableRPC);\n \n-static inline void RegisterAllCoreRPCCommands(CRPCTable &t)\n+inline void RegisterAllCoreRPCCommands(CRPCTable &t)\n {\n     RegisterBlockchainRPCCommands(t);\n     RegisterNetRPCCommands(t);"
      },
      {
        "sha": "d215f35882e694c6dfeb3fe4b9e1e7825157b620",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -422,7 +422,7 @@ std::string JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq)\n  * Process named arguments into a vector of positional arguments, based on the\n  * passed-in specification for the RPC call's arguments.\n  */\n-static inline JSONRPCRequest transformNamedArguments(const JSONRPCRequest& in, const std::vector<std::string>& argNames)\n+static JSONRPCRequest transformNamedArguments(const JSONRPCRequest& in, const std::vector<std::string>& argNames)\n {\n     JSONRPCRequest out = in;\n     out.params = UniValue(UniValue::VARR);"
      },
      {
        "sha": "1827332895cce057fda02fdecb01f3f71655e198",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -53,7 +53,7 @@ bool CastToBool(const valtype& vch)\n  */\n #define stacktop(i)  (stack.at(stack.size()+(i)))\n #define altstacktop(i)  (altstack.at(altstack.size()+(i)))\n-static inline void popstack(std::vector<valtype>& stack)\n+static void popstack(std::vector<valtype>& stack)\n {\n     if (stack.empty())\n         throw std::runtime_error(\"popstack(): stack empty\");"
      },
      {
        "sha": "f20ee3ae7192d59ac28163f0acdd6d28e69b6c3e",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -35,7 +35,7 @@ std::once_flag LockedPoolManager::init_flag;\n // Utilities\n //\n /** Align up to power of 2 */\n-static inline size_t align_up(size_t x, size_t align)\n+static size_t align_up(size_t x, size_t align)\n {\n     return (x + align - 1) & ~(align - 1);\n }"
      },
      {
        "sha": "eae8976db9b83e92d6fbd2283b1ec48612b96382",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -61,11 +61,11 @@ void DeleteLock(void* cs);\n  */\n extern bool g_debug_lockorder_abort;\n #else\n-void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}\n-void static inline LeaveCritical() {}\n-void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) ASSERT_EXCLUSIVE_LOCK(cs) {}\n-void static inline AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}\n-void static inline DeleteLock(void* cs) {}\n+void inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}\n+void inline LeaveCritical() {}\n+void inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) ASSERT_EXCLUSIVE_LOCK(cs) {}\n+void inline AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}\n+void inline DeleteLock(void* cs) {}\n #endif\n #define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n #define AssertLockNotHeld(cs) AssertLockNotHeldInternal(#cs, __FILE__, __LINE__, &cs)"
      },
      {
        "sha": "e0780ab14cd742bde4c1d1eea919cb836585c2db",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -17,7 +17,7 @@\n BOOST_FIXTURE_TEST_SUITE(arith_uint256_tests, BasicTestingSetup)\n \n /// Convert vector to arith_uint256, via uint256 blob\n-static inline arith_uint256 arith_uint256V(const std::vector<unsigned char>& vch)\n+static arith_uint256 arith_uint256V(const std::vector<unsigned char>& vch)\n {\n     return UintToArith256(uint256(vch));\n }"
      },
      {
        "sha": "cc90f0406e525ef701dfe10df283e8562006b1ca",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -170,7 +170,7 @@ static std::vector<uint256> BlockGetMerkleBranch(const CBlock& block, const std:\n     return vMerkleBranch;\n }\n \n-static inline int ctz(uint32_t i) {\n+static int ctz(uint32_t i) {\n     if (i == 0) return 0;\n     int j = 0;\n     while (!(i & 1)) {"
      },
      {
        "sha": "d3ee69ae3c17afc966bbbb0ff65881cc8e2d22eb",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -21,7 +21,7 @@\n extern uint256 insecure_rand_seed;\n extern FastRandomContext insecure_rand_ctx;\n \n-static inline void SeedInsecureRand(bool fDeterministic = false)\n+inline void SeedInsecureRand(bool fDeterministic = false)\n {\n     if (fDeterministic) {\n         insecure_rand_seed = uint256();\n@@ -31,11 +31,11 @@ static inline void SeedInsecureRand(bool fDeterministic = false)\n     insecure_rand_ctx = FastRandomContext(insecure_rand_seed);\n }\n \n-static inline uint32_t InsecureRand32() { return insecure_rand_ctx.rand32(); }\n-static inline uint256 InsecureRand256() { return insecure_rand_ctx.rand256(); }\n-static inline uint64_t InsecureRandBits(int bits) { return insecure_rand_ctx.randbits(bits); }\n-static inline uint64_t InsecureRandRange(uint64_t range) { return insecure_rand_ctx.randrange(range); }\n-static inline bool InsecureRandBool() { return insecure_rand_ctx.randbool(); }\n+inline uint32_t InsecureRand32() { return insecure_rand_ctx.rand32(); }\n+inline uint256 InsecureRand256() { return insecure_rand_ctx.rand256(); }\n+inline uint64_t InsecureRandBits(int bits) { return insecure_rand_ctx.randbits(bits); }\n+inline uint64_t InsecureRandRange(uint64_t range) { return insecure_rand_ctx.randrange(range); }\n+inline bool InsecureRandBool() { return insecure_rand_ctx.randbool(); }\n \n /** Basic testing setup.\n  * This just configures logging and chain parameters."
      },
      {
        "sha": "c17c9b425c8827294674e97ad5865045ae0dc35d",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -216,20 +216,20 @@ class ArgsManagerHelper {\n \n     /** Determine whether to use config settings in the default section,\n      *  See also comments around ArgsManager::ArgsManager() below. */\n-    static inline bool UseDefaultSection(const ArgsManager& am, const std::string& arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n+    static bool UseDefaultSection(const ArgsManager& am, const std::string& arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n     {\n         return (am.m_network == CBaseChainParams::MAIN || am.m_network_only_args.count(arg) == 0);\n     }\n \n     /** Convert regular argument into the network-specific setting */\n-    static inline std::string NetworkArg(const ArgsManager& am, const std::string& arg)\n+    static std::string NetworkArg(const ArgsManager& am, const std::string& arg)\n     {\n         assert(arg.length() > 1 && arg[0] == '-');\n         return \"-\" + am.m_network + \".\" + arg.substr(1);\n     }\n \n     /** Find arguments in a map and add them to a vector */\n-    static inline void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n+    static void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n     {\n         auto it = map_args.find(arg);\n         if (it != map_args.end()) {\n@@ -240,7 +240,7 @@ class ArgsManagerHelper {\n     /** Return true/false if an argument is set in a map, and also\n      *  return the first (or last) of the possibly multiple values it has\n      */\n-    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n+    static std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n     {\n         auto it = map_args.find(arg);\n \n@@ -259,7 +259,7 @@ class ArgsManagerHelper {\n      * indicating the argument was found, and the value for the argument\n      * if it was found (or the empty string if not found).\n      */\n-    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)\n+    static std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)\n     {\n         LOCK(am.cs_args);\n         std::pair<bool,std::string> found_result(false, std::string());\n@@ -295,7 +295,7 @@ class ArgsManagerHelper {\n     /* Special test for -testnet and -regtest args, because we\n      * don't want to be confused by craziness like \"[regtest] testnet=1\"\n      */\n-    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& net_arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n+    static bool GetNetBoolArg(const ArgsManager &am, const std::string& net_arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n     {\n         std::pair<bool,std::string> found_result(false,std::string());\n         found_result = GetArgHelper(am.m_override_args, net_arg, true);"
      },
      {
        "sha": "2173068a4e370a936cd0d2e60edc4b26cdb499a4",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -437,7 +437,7 @@ int atoi(const std::string& str)\n static const int64_t UPPER_BOUND = 1000000000000000000LL - 1LL;\n \n /** Helper function for ParseFixedPoint */\n-static inline bool ProcessMantissaDigit(char ch, int64_t &mantissa, int &mantissa_tzeros)\n+static bool ProcessMantissaDigit(char ch, int64_t &mantissa, int &mantissa_tzeros)\n {\n     if(ch == '0')\n         ++mantissa_tzeros;"
      },
      {
        "sha": "12dd9660654a0953361bd2f89c4c05cf2417ed33",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d91b635058f88c4073e695e52f6d106c41295ef6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d91b635058f88c4073e695e52f6d106c41295ef6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d91b635058f88c4073e695e52f6d106c41295ef6",
        "patch": "@@ -179,7 +179,7 @@ struct CRecipient\n typedef std::map<std::string, std::string> mapValue_t;\n \n \n-static inline void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n+inline void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n {\n     if (!mapValue.count(\"n\"))\n     {\n@@ -190,7 +190,7 @@ static inline void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n }\n \n \n-static inline void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n+inline void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n {\n     if (nOrderPos == -1)\n         return;"
      }
    ]
  },
  {
    "sha": "ee258a03b4e14751f5ecb9098a11d90cc32f230e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTI1OGEwM2I0ZTE0NzUxZjVlY2I5MDk4YTExZDkwY2MzMmYyMzBl",
    "commit": {
      "author": {
        "name": "Arvid Norberg",
        "email": "arvid@blockstream.io",
        "date": "2018-09-04T22:13:47Z"
      },
      "committer": {
        "name": "Arvid Norberg",
        "email": "arvid@blockstream.io",
        "date": "2018-09-06T01:33:51Z"
      },
      "message": "templates are always inline, saying it is redundant",
      "tree": {
        "sha": "8efff6d2a37095808d88f3b1e08a1a14e6761a21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8efff6d2a37095808d88f3b1e08a1a14e6761a21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee258a03b4e14751f5ecb9098a11d90cc32f230e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee258a03b4e14751f5ecb9098a11d90cc32f230e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee258a03b4e14751f5ecb9098a11d90cc32f230e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee258a03b4e14751f5ecb9098a11d90cc32f230e/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "d91b635058f88c4073e695e52f6d106c41295ef6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d91b635058f88c4073e695e52f6d106c41295ef6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d91b635058f88c4073e695e52f6d106c41295ef6"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 25,
      "deletions": 25
    },
    "files": [
      {
        "sha": "5d7dffbaccec8132d1bc3b345692fefda953800a",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee258a03b4e14751f5ecb9098a11d90cc32f230e/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee258a03b4e14751f5ecb9098a11d90cc32f230e/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=ee258a03b4e14751f5ecb9098a11d90cc32f230e",
        "patch": "@@ -64,7 +64,7 @@ inline size_t RecursiveDynamicUsage(const CBlockLocator& locator) {\n }\n \n template<typename X>\n-inline size_t RecursiveDynamicUsage(const std::shared_ptr<X>& p) {\n+size_t RecursiveDynamicUsage(const std::shared_ptr<X>& p) {\n     return p ? memusage::DynamicUsage(p) + RecursiveDynamicUsage(*p) : 0;\n }\n "
      },
      {
        "sha": "3c7791159b98d397e38964738e89773f820779fb",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee258a03b4e14751f5ecb9098a11d90cc32f230e/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee258a03b4e14751f5ecb9098a11d90cc32f230e/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=ee258a03b4e14751f5ecb9098a11d90cc32f230e",
        "patch": "@@ -129,7 +129,7 @@ bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str);\n template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }\n \n inline void MarkUsed() {}\n-template<typename T, typename... Args> inline void MarkUsed(const T& t, const Args&... args)\n+template<typename T, typename... Args> void MarkUsed(const T& t, const Args&... args)\n {\n     (void)t;\n     MarkUsed(args...);"
      },
      {
        "sha": "70984c417857c0d7a23bfe62999a9c5eca1add3b",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee258a03b4e14751f5ecb9098a11d90cc32f230e/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee258a03b4e14751f5ecb9098a11d90cc32f230e/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=ee258a03b4e14751f5ecb9098a11d90cc32f230e",
        "patch": "@@ -34,8 +34,8 @@ inline size_t DynamicUsage(const int64_t& v) { return 0; }\n inline size_t DynamicUsage(const uint64_t& v) { return 0; }\n inline size_t DynamicUsage(const float& v) { return 0; }\n inline size_t DynamicUsage(const double& v) { return 0; }\n-template<typename X> inline size_t DynamicUsage(X * const &v) { return 0; }\n-template<typename X> inline size_t DynamicUsage(const X * const &v) { return 0; }\n+template<typename X> size_t DynamicUsage(X * const &v) { return 0; }\n+template<typename X> size_t DynamicUsage(const X * const &v) { return 0; }\n \n /** Compute the memory used for dynamically allocated but owned data structures.\n  *  For generic data types, this is *not* recursive. DynamicUsage(vector<vector<int> >)\n@@ -82,63 +82,63 @@ struct stl_shared_counter\n };\n \n template<typename X>\n-inline size_t DynamicUsage(const std::vector<X>& v)\n+size_t DynamicUsage(const std::vector<X>& v)\n {\n     return MallocUsage(v.capacity() * sizeof(X));\n }\n \n template<unsigned int N, typename X, typename S, typename D>\n-inline size_t DynamicUsage(const prevector<N, X, S, D>& v)\n+size_t DynamicUsage(const prevector<N, X, S, D>& v)\n {\n     return MallocUsage(v.allocated_memory());\n }\n \n template<typename X, typename Y>\n-inline size_t DynamicUsage(const std::set<X, Y>& s)\n+size_t DynamicUsage(const std::set<X, Y>& s)\n {\n     return MallocUsage(sizeof(stl_tree_node<X>)) * s.size();\n }\n \n template<typename X, typename Y>\n-inline size_t IncrementalDynamicUsage(const std::set<X, Y>& s)\n+size_t IncrementalDynamicUsage(const std::set<X, Y>& s)\n {\n     return MallocUsage(sizeof(stl_tree_node<X>));\n }\n \n template<typename X, typename Y, typename Z>\n-inline size_t DynamicUsage(const std::map<X, Y, Z>& m)\n+size_t DynamicUsage(const std::map<X, Y, Z>& m)\n {\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >)) * m.size();\n }\n \n template<typename X, typename Y, typename Z>\n-inline size_t IncrementalDynamicUsage(const std::map<X, Y, Z>& m)\n+size_t IncrementalDynamicUsage(const std::map<X, Y, Z>& m)\n {\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >));\n }\n \n // indirectmap has underlying map with pointer as key\n \n template<typename X, typename Y>\n-inline size_t DynamicUsage(const indirectmap<X, Y>& m)\n+size_t DynamicUsage(const indirectmap<X, Y>& m)\n {\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X*, Y> >)) * m.size();\n }\n \n template<typename X, typename Y>\n-inline size_t IncrementalDynamicUsage(const indirectmap<X, Y>& m)\n+size_t IncrementalDynamicUsage(const indirectmap<X, Y>& m)\n {\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X*, Y> >));\n }\n \n template<typename X>\n-inline size_t DynamicUsage(const std::unique_ptr<X>& p)\n+size_t DynamicUsage(const std::unique_ptr<X>& p)\n {\n     return p ? MallocUsage(sizeof(X)) : 0;\n }\n \n template<typename X>\n-inline size_t DynamicUsage(const std::shared_ptr<X>& p)\n+size_t DynamicUsage(const std::shared_ptr<X>& p)\n {\n     // A shared_ptr can either use a single continuous memory block for both\n     // the counter and the storage (when using std::make_shared), or separate.\n@@ -154,13 +154,13 @@ struct unordered_node : private X\n };\n \n template<typename X, typename Y>\n-inline size_t DynamicUsage(const std::unordered_set<X, Y>& s)\n+size_t DynamicUsage(const std::unordered_set<X, Y>& s)\n {\n     return MallocUsage(sizeof(unordered_node<X>)) * s.size() + MallocUsage(sizeof(void*) * s.bucket_count());\n }\n \n template<typename X, typename Y, typename Z>\n-inline size_t DynamicUsage(const std::unordered_map<X, Y, Z>& m)\n+size_t DynamicUsage(const std::unordered_map<X, Y, Z>& m)\n {\n     return MallocUsage(sizeof(unordered_node<std::pair<const X, Y> >)) * m.size() + MallocUsage(sizeof(void*) * m.bucket_count());\n }"
      },
      {
        "sha": "e232a6777b00e8f44f9e6de51088f1958b9c876d",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee258a03b4e14751f5ecb9098a11d90cc32f230e/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee258a03b4e14751f5ecb9098a11d90cc32f230e/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=ee258a03b4e14751f5ecb9098a11d90cc32f230e",
        "patch": "@@ -27,7 +27,7 @@ class COutPoint\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(hash);\n         READWRITE(n);\n     }\n@@ -104,7 +104,7 @@ class CTxIn\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(prevout);\n         READWRITE(scriptSig);\n         READWRITE(nSequence);\n@@ -144,7 +144,7 @@ class CTxOut\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(nValue);\n         READWRITE(scriptPubKey);\n     }\n@@ -194,7 +194,7 @@ struct CMutableTransaction;\n  * - uint32_t nLockTime\n  */\n template<typename Stream, typename TxType>\n-inline void UnserializeTransaction(TxType& tx, Stream& s) {\n+void UnserializeTransaction(TxType& tx, Stream& s) {\n     const bool fAllowWitness = !(s.GetVersion() & SERIALIZE_TRANSACTION_NO_WITNESS);\n \n     s >> tx.nVersion;\n@@ -229,7 +229,7 @@ inline void UnserializeTransaction(TxType& tx, Stream& s) {\n }\n \n template<typename Stream, typename TxType>\n-inline void SerializeTransaction(const TxType& tx, Stream& s) {\n+void SerializeTransaction(const TxType& tx, Stream& s) {\n     const bool fAllowWitness = !(s.GetVersion() & SERIALIZE_TRANSACTION_NO_WITNESS);\n \n     s << tx.nVersion;\n@@ -300,7 +300,7 @@ class CTransaction\n     CTransaction(CMutableTransaction &&tx);\n \n     template <typename Stream>\n-    inline void Serialize(Stream& s) const {\n+    void Serialize(Stream& s) const {\n         SerializeTransaction(*this, s);\n     }\n \n@@ -368,13 +368,13 @@ struct CMutableTransaction\n     explicit CMutableTransaction(const CTransaction& tx);\n \n     template <typename Stream>\n-    inline void Serialize(Stream& s) const {\n+    void Serialize(Stream& s) const {\n         SerializeTransaction(*this, s);\n     }\n \n \n     template <typename Stream>\n-    inline void Unserialize(Stream& s) {\n+    void Unserialize(Stream& s) {\n         UnserializeTransaction(*this, s);\n     }\n \n@@ -401,6 +401,6 @@ struct CMutableTransaction\n \n typedef std::shared_ptr<const CTransaction> CTransactionRef;\n inline CTransactionRef MakeTransactionRef() { return std::make_shared<const CTransaction>(); }\n-template <typename Tx> inline CTransactionRef MakeTransactionRef(Tx&& txIn) { return std::make_shared<const CTransaction>(std::forward<Tx>(txIn)); }\n+template <typename Tx> CTransactionRef MakeTransactionRef(Tx&& txIn) { return std::make_shared<const CTransaction>(std::forward<Tx>(txIn)); }\n \n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      }
    ]
  }
]