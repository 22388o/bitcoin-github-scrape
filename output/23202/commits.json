[
  {
    "sha": "e87a24b0c4409d9f0d735f76cbc1034d271b209c",
    "node_id": "C_kwDOABII59oAKGU4N2EyNGIwYzQ0MDlkOWYwZDczNWY3NmNiYzEwMzRkMjcxYjIwOWM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T19:49:06Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-08T17:37:54Z"
      },
      "message": "wallet: add input weights to CCoinControl\n\nIn order to allow coin selection to take weights from the user,\nCCoinControl needs to be able to set and get them.",
      "tree": {
        "sha": "b7514d9f623b90b1b6ef25614d1fc2e0d762a777",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7514d9f623b90b1b6ef25614d1fc2e0d762a777"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e87a24b0c4409d9f0d735f76cbc1034d271b209c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e87a24b0c4409d9f0d735f76cbc1034d271b209c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e87a24b0c4409d9f0d735f76cbc1034d271b209c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e87a24b0c4409d9f0d735f76cbc1034d271b209c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "927586990eb9bc8403a3831247847bdd3bf60423",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/927586990eb9bc8403a3831247847bdd3bf60423",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/927586990eb9bc8403a3831247847bdd3bf60423"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a94ed3b4911e597f102e1306e7e4ae8fda519d7d",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e87a24b0c4409d9f0d735f76cbc1034d271b209c/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e87a24b0c4409d9f0d735f76cbc1034d271b209c/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=e87a24b0c4409d9f0d735f76cbc1034d271b209c",
        "patch": "@@ -114,9 +114,29 @@ class CCoinControl\n         vOutpoints.assign(setSelected.begin(), setSelected.end());\n     }\n \n+    void SetInputWeight(const COutPoint& outpoint, int64_t weight)\n+    {\n+        m_input_weights[outpoint] = weight;\n+    }\n+\n+    bool HasInputWeight(const COutPoint& outpoint) const\n+    {\n+        return m_input_weights.count(outpoint) > 0;\n+    }\n+\n+    int64_t GetInputWeight(const COutPoint& outpoint) const\n+    {\n+        if (HasInputWeight(outpoint)) {\n+            return m_input_weights.at(outpoint);\n+        }\n+        return -1;\n+    }\n+\n private:\n     std::set<COutPoint> setSelected;\n     std::map<COutPoint, CTxOut> m_external_txouts;\n+    //! Map of COutPoints to the maximum weight for that input\n+    std::map<COutPoint, int64_t> m_input_weights;\n };\n \n #endif // BITCOIN_WALLET_COINCONTROL_H"
      }
    ]
  },
  {
    "sha": "821105b481e1feaf26aaa98d18c4445407906591",
    "node_id": "C_kwDOABII59oAKDgyMTEwNWI0ODFlMWZlYWYyNmFhYTk4ZDE4YzQ0NDU0MDc5MDY1OTE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T19:54:11Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-08T17:37:54Z"
      },
      "message": "wallet: Allow user specified input size to override\n\nIf the user specifies an input size, allow it to override any input size\ncalculations during coin selection.",
      "tree": {
        "sha": "9bde263dd22660f1c13fea2a961c3c0c8cffbcb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bde263dd22660f1c13fea2a961c3c0c8cffbcb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/821105b481e1feaf26aaa98d18c4445407906591",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/821105b481e1feaf26aaa98d18c4445407906591",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/821105b481e1feaf26aaa98d18c4445407906591",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/821105b481e1feaf26aaa98d18c4445407906591/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e87a24b0c4409d9f0d735f76cbc1034d271b209c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e87a24b0c4409d9f0d735f76cbc1034d271b209c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e87a24b0c4409d9f0d735f76cbc1034d271b209c"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 40,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a7350951c0fb7bb8a3c9f73ed456fded6817a9f8",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/821105b481e1feaf26aaa98d18c4445407906591/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/821105b481e1feaf26aaa98d18c4445407906591/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=821105b481e1feaf26aaa98d18c4445407906591",
        "patch": "@@ -463,15 +463,17 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n             }\n             input_bytes = GetTxSpendSize(wallet, wtx, outpoint.n, false);\n             txout = wtx.tx->vout.at(outpoint.n);\n-        }\n-        if (input_bytes == -1) {\n-            // The input is external. We either did not find the tx in mapWallet, or we did but couldn't compute the input size with wallet data\n+        } else {\n+            // The input is external. We did not find the tx in mapWallet.\n             if (!coin_control.GetExternalOutput(outpoint, txout)) {\n-                // Not ours, and we don't have solving data.\n                 return false;\n             }\n             input_bytes = CalculateMaximumSignedInputSize(txout, &coin_control.m_external_provider, /* use_max_sig */ true);\n         }\n+        // If available, override calculated size with coin control specified size\n+        if (coin_control.HasInputWeight(outpoint)) {\n+            input_bytes = GetVirtualTransactionSize(coin_control.GetInputWeight(outpoint), 0, 0);\n+        }\n \n         CInputCoin coin(outpoint, txout, input_bytes);\n         nValueFromPresetInputs += coin.txout.nValue;"
      },
      {
        "sha": "6d8af363224265e5bcdf2ae107bce3ba80da1348",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/821105b481e1feaf26aaa98d18c4445407906591/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/821105b481e1feaf26aaa98d18c4445407906591/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=821105b481e1feaf26aaa98d18c4445407906591",
        "patch": "@@ -1462,6 +1462,34 @@ bool DummySignInput(const SigningProvider& provider, CTxIn &tx_in, const CTxOut\n     return true;\n }\n \n+static void FillInputToWeight(CTxIn& txin, int64_t target_weight)\n+{\n+    int64_t txin_weight = GetTransactionInputWeight(txin);\n+    // Subtract current txin weight, which should include empty witness stack\n+    int64_t add_weight = target_weight - txin_weight;\n+\n+    // We will want to subtract the size of the Compact Size UInt that will also be serialized.\n+    // However doing so when the size is near a boundary can result in a problem where it is not\n+    // possible to have a stack element size and combination to exactly equal a target.\n+    // To avoid this possibility, if the weight to add is less than 10 bytes greater than\n+    // a boundary, the size will be split so that 2/3rds will be in one stack element, and\n+    // the remaining 1/3rd in another. Using 3rds allows us to avoid additional boundaries.\n+    // 10 bytes is used because that accounts for the maximum size. This does not need to be super precise.\n+    if ((add_weight >= 253 && add_weight < 263)\n+        || (add_weight > std::numeric_limits<uint16_t>::max() && add_weight <= std::numeric_limits<uint16_t>::max() + 10)\n+        || (add_weight > std::numeric_limits<uint32_t>::max() && add_weight <= std::numeric_limits<uint32_t>::max() + 10)) {\n+        int64_t first_weight = add_weight / 3;\n+        add_weight -= first_weight;\n+\n+        first_weight -= GetSizeOfCompactSize(first_weight);\n+        txin.scriptWitness.stack.emplace(txin.scriptWitness.stack.end(), first_weight, 0);\n+    }\n+\n+    add_weight -= GetSizeOfCompactSize(add_weight);\n+    txin.scriptWitness.stack.emplace(txin.scriptWitness.stack.end(), add_weight, 0);\n+    assert(GetTransactionInputWeight(txin) == target_weight);\n+}\n+\n // Helper for producing a bunch of max-sized low-S low-R signatures (eg 71 bytes)\n bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts, const CCoinControl* coin_control) const\n {\n@@ -1470,6 +1498,12 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n     for (const auto& txout : txouts)\n     {\n         CTxIn& txin = txNew.vin[nIn];\n+        // If weight was provided, fill the input to that weight\n+        if (coin_control && coin_control->HasInputWeight(txin.prevout)) {\n+            FillInputToWeight(txin, coin_control->GetInputWeight(txin.prevout));\n+            nIn++;\n+            continue;\n+        }\n         // Use max sig if watch only inputs were used or if this particular input is an external input\n         // to ensure a sufficient fee is attained for the requested feerate.\n         const bool use_max_sig = coin_control && (coin_control->fAllowWatchOnly || coin_control->IsExternalSelected(txin.prevout));"
      }
    ]
  },
  {
    "sha": "56402cdae618680f072bf4719d490f687edeba43",
    "node_id": "C_kwDOABII59oAKDU2NDAyY2RhZTYxODY4MGYwNzJiZjQ3MTlkNDkwZjY4N2VkZWJhNDM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T20:03:16Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-08T17:37:54Z"
      },
      "message": "rpc, wallet: Allow users to specify input weights\n\nCoin selection requires knowing the weight of a transaction so that fees\ncan be estimated. However for external inputs, the weight may not be\navialble, and solving data may not be enough as the input could be one\nthat we do not support. By allowing users to specify input weights,\nthose external inputs can be included in the transaction.\n\nAdditionally, if the weight for an input is specified, that value will\nalways be used, regardless of whether the input is in the wallet or\nsolving data is available. This allows us to account for scenarios where\nthe wallet may be more conservative and estimate a larger input than may\nactually be created.\n\nFor example, we assume the maximum DER signature size, but an external\ninput may be signed by a wallet which does nonce grinding in order to get\na smaller signature. In that case, the user can specify the smaller\ninput weight to avoid overpaying transaction fees.",
      "tree": {
        "sha": "304d7ff5725b5fa8818a786d20cfb1fb889a2085",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/304d7ff5725b5fa8818a786d20cfb1fb889a2085"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56402cdae618680f072bf4719d490f687edeba43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56402cdae618680f072bf4719d490f687edeba43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56402cdae618680f072bf4719d490f687edeba43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56402cdae618680f072bf4719d490f687edeba43/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "821105b481e1feaf26aaa98d18c4445407906591",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/821105b481e1feaf26aaa98d18c4445407906591",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/821105b481e1feaf26aaa98d18c4445407906591"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 68,
      "deletions": 2
    },
    "files": [
      {
        "sha": "436ab66adda7af3d620e545364cd75dcdc80b2aa",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 2,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56402cdae618680f072bf4719d490f687edeba43/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56402cdae618680f072bf4719d490f687edeba43/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=56402cdae618680f072bf4719d490f687edeba43",
        "patch": "@@ -3248,6 +3248,7 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n                 {\"conf_target\", UniValueType(UniValue::VNUM)},\n                 {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n+                {\"input_weights\", UniValueType(UniValue::VARR)},\n             },\n             true, true);\n \n@@ -3367,6 +3368,32 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n         }\n     }\n \n+    if (options.exists(\"input_weights\")) {\n+        for (const UniValue& input : options[\"input_weights\"].get_array().getValues()) {\n+            uint256 txid = ParseHashO(input, \"txid\");\n+\n+            const UniValue& vout_v = find_value(input, \"vout\");\n+            if (!vout_v.isNum()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, missing vout key\");\n+            }\n+            int vout = vout_v.get_int();\n+            if (vout < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout cannot be negative\");\n+            }\n+\n+            const UniValue& weight_v = find_value(input, \"weight\");\n+            if (!weight_v.isNum()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, missing weight key\");\n+            }\n+            int64_t weight = weight_v.get_int64();\n+            if (weight < 40 * WITNESS_SCALE_FACTOR) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, weight cannot be less than 160 (40 bytes (size of outpoint + sequence) * 4 (witness scaling factor))\");\n+            }\n+\n+            coinControl.SetInputWeight(COutPoint(txid, vout), weight);\n+        }\n+    }\n+\n     if (tx.vout.size() == 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"TX must have at least one output\");\n \n@@ -3404,6 +3431,23 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n     }\n }\n \n+static void SetOptionsInputWeights(const UniValue& inputs, UniValue& options)\n+{\n+    if (options.exists(\"input_weights\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify weight in inputs instead\");\n+    }\n+    if (inputs.size() == 0) {\n+        return;\n+    }\n+    UniValue weights(UniValue::VARR);\n+    for (const UniValue& input : inputs.getValues()) {\n+        if (input.exists(\"weight\")) {\n+            weights.push_back(input);\n+        }\n+    }\n+    options.pushKV(\"input_weights\", weights);\n+}\n+\n static RPCHelpMan fundrawtransaction()\n {\n     return RPCHelpMan{\"fundrawtransaction\",\n@@ -3445,6 +3489,16 @@ static RPCHelpMan fundrawtransaction()\n                                     {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n+                            {\"input_weights\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Inputs and their corresponding weights\",\n+                                {\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"weight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The maximum weight for this input, \"\n+                                        \"including the weight of the outpoint and sequence number. \"\n+                                        \"Note that signature sizes are not guaranteed to be consistent, \"\n+                                        \"so the maximum DER signatures size of 73 bytes should be used when considering ECDSA signatures\"},\n+                                },\n+                             },\n                         },\n                         FundTxDoc()),\n                         \"options\"},\n@@ -4274,6 +4328,10 @@ static RPCHelpMan send()\n                             {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                             {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n                             {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            {\"weight\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"Calculated from wallet and solving data\"}, \"The maximum weight for this input, \"\n+                                        \"including the weight of the outpoint and sequence number. \"\n+                                        \"Note that signature sizes are not guaranteed to be consistent, \"\n+                                        \"so the maximum DER signatures size of 73 bytes should be used when considering ECDSA signatures\"},\n                         },\n                     },\n                     {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n@@ -4377,6 +4435,7 @@ static RPCHelpMan send()\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n+            SetOptionsInputWeights(options[\"inputs\"], options);\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n             bool add_to_wallet = true;\n@@ -4586,6 +4645,10 @@ static RPCHelpMan walletcreatefundedpsbt()\n                                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                                     {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n                                     {\"sequence\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"depends on the value of the 'locktime' and 'options.replaceable' arguments\"}, \"The sequence number\"},\n+                                    {\"weight\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"Calculated from wallet and solving data\"}, \"The maximum weight for this input, \"\n+                                        \"including the weight of the outpoint and sequence number. \"\n+                                        \"Note that signature sizes are not guaranteed to be consistent, \"\n+                                        \"so the maximum DER signatures size of 73 bytes should be used when considering ECDSA signatures\"},\n                                 },\n                             },\n                         },\n@@ -4666,10 +4729,12 @@ static RPCHelpMan walletcreatefundedpsbt()\n         }, true\n     );\n \n+    UniValue options = request.params[3];\n+\n     CAmount fee;\n     int change_position;\n     bool rbf{wallet.m_signal_rbf};\n-    const UniValue &replaceable_arg = request.params[3][\"replaceable\"];\n+    const UniValue &replaceable_arg = options[\"replaceable\"];\n     if (!replaceable_arg.isNull()) {\n         RPCTypeCheckArgument(replaceable_arg, UniValue::VBOOL);\n         rbf = replaceable_arg.isTrue();\n@@ -4679,7 +4744,8 @@ static RPCHelpMan walletcreatefundedpsbt()\n     // Automatically select coins, unless at least one is manually selected. Can\n     // be overridden by options.add_inputs.\n     coin_control.m_add_inputs = rawTx.vin.size() == 0;\n-    FundTransaction(wallet, rawTx, fee, change_position, request.params[3], coin_control, /* override_min_fee */ true);\n+    SetOptionsInputWeights(request.params[0], options);\n+    FundTransaction(wallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ true);\n \n     // Make a blank psbt\n     PartiallySignedTransaction psbtx(rawTx);"
      }
    ]
  },
  {
    "sha": "42f6526e5f579bd7b87965f7b2c6c86727eca719",
    "node_id": "C_kwDOABII59oAKDQyZjY1MjZlNWY1NzliZDdiODc5NjVmN2IyYzZjODY3MjdlY2E3MTk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T20:45:10Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-08T17:37:54Z"
      },
      "message": "tests: Test specifying input weights\n\nAdded tests to rpc_fundrawtransaction, wallet_send, and rpc_psbt that\ntest that external inputs can be spent when input weight is provided.\nAlso tested that the input weight overrides any calculated weight.\n\nAdditionally, rpc_psbt's external inputs test is cleaned up a bit to be\nmore similar to rpc_fundrawtransaction's and avoid potential pitfalls\ndue to non-deterministic coin selection behavior.",
      "tree": {
        "sha": "19bde2ae524fcc43b26b188aba0bc132e4ceac8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19bde2ae524fcc43b26b188aba0bc132e4ceac8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42f6526e5f579bd7b87965f7b2c6c86727eca719",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42f6526e5f579bd7b87965f7b2c6c86727eca719",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42f6526e5f579bd7b87965f7b2c6c86727eca719",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42f6526e5f579bd7b87965f7b2c6c86727eca719/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56402cdae618680f072bf4719d490f687edeba43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56402cdae618680f072bf4719d490f687edeba43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56402cdae618680f072bf4719d490f687edeba43"
      }
    ],
    "stats": {
      "total": 167,
      "additions": 156,
      "deletions": 11
    },
    "files": [
      {
        "sha": "66103aca252c160a43e984f5aee13479ab12d81e",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 37,
        "deletions": 4,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6526e5f579bd7b87965f7b2c6c86727eca719/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6526e5f579bd7b87965f7b2c6c86727eca719/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=42f6526e5f579bd7b87965f7b2c6c86727eca719",
        "patch": "@@ -1023,6 +1023,11 @@ def test_external_inputs(self):\n         assert_raises_rpc_error(-5, \"'01234567890a0b0c0d0e0f' is not a valid public key\", wallet.fundrawtransaction, raw_tx, {\"solving_data\": {\"pubkeys\":[\"01234567890a0b0c0d0e0f\"]}})\n         assert_raises_rpc_error(-5, \"'not a script' is not hex\", wallet.fundrawtransaction, raw_tx, {\"solving_data\": {\"scripts\":[\"not a script\"]}})\n         assert_raises_rpc_error(-8, \"Unable to parse descriptor 'not a descriptor'\", wallet.fundrawtransaction, raw_tx, {\"solving_data\": {\"descriptors\":[\"not a descriptor\"]}})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, missing vout key\", wallet.fundrawtransaction, raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"]}]})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, vout cannot be negative\", wallet.fundrawtransaction, raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": -1}]})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, missing weight key\", wallet.fundrawtransaction, raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"]}]})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, weight cannot be less than 160\", wallet.fundrawtransaction, raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": 159}]})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, weight cannot be less than 160\", wallet.fundrawtransaction, raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": -1}]})\n \n         # But funding should work when the solving data is provided\n         funded_tx = wallet.fundrawtransaction(raw_tx, {\"solving_data\": {\"pubkeys\": [addr_info['pubkey']], \"scripts\": [addr_info[\"embedded\"][\"scriptPubKey\"]]}})\n@@ -1032,10 +1037,38 @@ def test_external_inputs(self):\n         assert signed_tx['complete']\n \n         funded_tx = wallet.fundrawtransaction(raw_tx, {\"solving_data\": {\"descriptors\": [desc]}})\n-        signed_tx = wallet.signrawtransactionwithwallet(funded_tx['hex'])\n-        assert not signed_tx['complete']\n-        signed_tx = self.nodes[0].signrawtransactionwithwallet(signed_tx['hex'])\n-        assert signed_tx['complete']\n+        signed_tx1 = wallet.signrawtransactionwithwallet(funded_tx['hex'])\n+        assert not signed_tx1['complete']\n+        signed_tx2 = self.nodes[0].signrawtransactionwithwallet(signed_tx1['hex'])\n+        assert signed_tx2['complete']\n+\n+        unsigned_weight = self.nodes[0].decoderawtransaction(signed_tx1[\"hex\"])[\"weight\"]\n+        signed_weight = self.nodes[0].decoderawtransaction(signed_tx2[\"hex\"])[\"weight\"]\n+        # Input's weight is difference between weight of signed and unsigned,\n+        # and the weight of stuff that didn't change (prevout, sequence, 1 byte of scriptSig)\n+        input_weight = signed_weight - unsigned_weight + (45 * 4)\n+        low_input_weight = input_weight // 2\n+        high_input_weight = input_weight * 2\n+\n+        # Funding should also work if the input weight is provided\n+        funded_tx = wallet.fundrawtransaction(raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": input_weight}]})\n+        signed_tx = wallet.signrawtransactionwithwallet(funded_tx[\"hex\"])\n+        signed_tx = self.nodes[0].signrawtransactionwithwallet(signed_tx[\"hex\"])\n+        assert self.nodes[0].testmempoolaccept([signed_tx[\"hex\"]])[0][\"allowed\"]\n+        # Reducing the weight should have a lower fee\n+        funded_tx2 = wallet.fundrawtransaction(raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": low_input_weight}]})\n+        assert_greater_than(funded_tx[\"fee\"], funded_tx2[\"fee\"])\n+        # Increasing the weight should have a higher fee\n+        funded_tx2 = wallet.fundrawtransaction(raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": high_input_weight}]})\n+        assert_greater_than(funded_tx2[\"fee\"], funded_tx[\"fee\"])\n+        # The provided weight should override the calculated weight when solving data is provided\n+        funded_tx3 = wallet.fundrawtransaction(raw_tx, {\"solving_data\": {\"descriptors\": [desc]}, \"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": high_input_weight}]})\n+        assert_equal(funded_tx2[\"fee\"], funded_tx3[\"fee\"])\n+\n+        # Funding with weight at csuint boundaries should not cause problems\n+        funded_tx = wallet.fundrawtransaction(raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": 255}]})\n+        funded_tx = wallet.fundrawtransaction(raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": 65539}]})\n+\n         self.nodes[2].unloadwallet(\"extfund\")\n \n     def test_include_unsafe(self):"
      },
      {
        "sha": "b9a59c6dd87177c4ca453d9eb17683c179ebf6ca",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 82,
        "deletions": 7,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6526e5f579bd7b87965f7b2c6c86727eca719/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6526e5f579bd7b87965f7b2c6c86727eca719/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=42f6526e5f579bd7b87965f7b2c6c86727eca719",
        "patch": "@@ -611,11 +611,15 @@ def test_psbt_input_keys(psbt_input, keys):\n \n         assert_raises_rpc_error(-25, 'Inputs missing or spent', self.nodes[0].walletprocesspsbt, 'cHNidP8BAJoCAAAAAkvEW8NnDtdNtDpsmze+Ht2LH35IJcKv00jKAlUs21RrAwAAAAD/////S8Rbw2cO1020OmybN74e3Ysffkglwq/TSMoCVSzbVGsBAAAAAP7///8CwLYClQAAAAAWABSNJKzjaUb3uOxixsvh1GGE3fW7zQD5ApUAAAAAFgAUKNw0x8HRctAgmvoevm4u1SbN7XIAAAAAAAEAnQIAAAACczMa321tVHuN4GKWKRncycI22aX3uXgwSFUKM2orjRsBAAAAAP7///9zMxrfbW1Ue43gYpYpGdzJwjbZpfe5eDBIVQozaiuNGwAAAAAA/v///wIA+QKVAAAAABl2qRT9zXUVA8Ls5iVqynLHe5/vSe1XyYisQM0ClQAAAAAWABRmWQUcjSjghQ8/uH4Bn/zkakwLtAAAAAAAAQEfQM0ClQAAAAAWABRmWQUcjSjghQ8/uH4Bn/zkakwLtAAAAA==')\n \n-        # Test that we can fund psbts with external inputs specified\n+        self.log.info(\"Test that we can fund psbts with external inputs specified\")\n+\n         eckey = ECKey()\n         eckey.generate()\n         privkey = bytes_to_wif(eckey.get_bytes())\n \n+        self.nodes[1].createwallet(\"extfund\")\n+        wallet = self.nodes[1].get_wallet_rpc(\"extfund\")\n+\n         # Make a weird but signable script. sh(pkh()) descriptor accomplishes this\n         desc = descsum_create(\"sh(pkh({}))\".format(privkey))\n         if self.options.descriptors:\n@@ -627,27 +631,98 @@ def test_psbt_input_keys(psbt_input, keys):\n         addr_info = self.nodes[0].getaddressinfo(addr)\n \n         self.nodes[0].sendtoaddress(addr, 10)\n+        self.nodes[0].sendtoaddress(wallet.getnewaddress(), 10)\n         self.generate(self.nodes[0], 6)\n         self.sync_all()\n         ext_utxo = self.nodes[0].listunspent(addresses=[addr])[0]\n \n         # An external input without solving data should result in an error\n-        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[1].walletcreatefundedpsbt, [ext_utxo], {self.nodes[0].getnewaddress(): 10 + ext_utxo['amount']}, 0, {'add_inputs': True})\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.walletcreatefundedpsbt, [ext_utxo], {self.nodes[0].getnewaddress(): 15})\n \n         # But funding should work when the solving data is provided\n-        psbt = self.nodes[1].walletcreatefundedpsbt([ext_utxo], {self.nodes[0].getnewaddress(): 15}, 0, {'add_inputs': True, \"solving_data\": {\"pubkeys\": [addr_info['pubkey']], \"scripts\": [addr_info[\"embedded\"][\"scriptPubKey\"]]}})\n-        signed = self.nodes[1].walletprocesspsbt(psbt['psbt'])\n+        psbt = wallet.walletcreatefundedpsbt([ext_utxo], {self.nodes[0].getnewaddress(): 15}, 0, {\"add_inputs\": True, \"solving_data\": {\"pubkeys\": [addr_info['pubkey']], \"scripts\": [addr_info[\"embedded\"][\"scriptPubKey\"]]}})\n+        signed = wallet.walletprocesspsbt(psbt['psbt'])\n         assert not signed['complete']\n         signed = self.nodes[0].walletprocesspsbt(signed['psbt'])\n         assert signed['complete']\n         self.nodes[0].finalizepsbt(signed['psbt'])\n \n-        psbt = self.nodes[1].walletcreatefundedpsbt([ext_utxo], {self.nodes[0].getnewaddress(): 15}, 0, {'add_inputs': True, \"solving_data\":{\"descriptors\": [desc]}})\n-        signed = self.nodes[1].walletprocesspsbt(psbt['psbt'])\n+        psbt = wallet.walletcreatefundedpsbt([ext_utxo], {self.nodes[0].getnewaddress(): 15}, 0, {\"add_inputs\": True, \"solving_data\":{\"descriptors\": [desc]}})\n+        signed = wallet.walletprocesspsbt(psbt['psbt'])\n         assert not signed['complete']\n         signed = self.nodes[0].walletprocesspsbt(signed['psbt'])\n         assert signed['complete']\n-        self.nodes[0].finalizepsbt(signed['psbt'])\n+        final = self.nodes[0].finalizepsbt(signed['psbt'], False)\n+\n+        dec = self.nodes[0].decodepsbt(signed[\"psbt\"])\n+        for i, txin in enumerate(dec[\"tx\"][\"vin\"]):\n+            if txin[\"txid\"] == ext_utxo[\"txid\"] and txin[\"vout\"] == ext_utxo[\"vout\"]:\n+                input_idx = i\n+                break\n+        psbt_in = dec[\"inputs\"][input_idx]\n+        # Calculate the input weight\n+        # (prevout + sequence + length of scriptSig + 2 bytes buffer) * 4 + len of scriptwitness\n+        len_scriptsig = len(psbt_in[\"final_scriptSig\"][\"hex\"]) // 2 if \"final_scriptSig\" in psbt_in else 0\n+        len_scriptwitness = len(psbt_in[\"final_scriptwitness\"][\"hex\"]) // 2 if \"final_scriptwitness\" in psbt_in else 0\n+        input_weight = ((44 + len_scriptsig + 2) * 4) + len_scriptwitness\n+        low_input_weight = input_weight // 2\n+        high_input_weight = input_weight * 2\n+\n+        # Input weight error conditions\n+        assert_raises_rpc_error(\n+            -8,\n+            \"Specify weight in inputs instead\",\n+            wallet.walletcreatefundedpsbt,\n+            inputs=[ext_utxo],\n+            outputs={self.nodes[0].getnewaddress(): 15},\n+            options={\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": 1000}]}\n+        )\n+\n+        # Funding should also work if the input weight is provided\n+        psbt = wallet.walletcreatefundedpsbt(\n+            inputs=[{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": input_weight}],\n+            outputs={self.nodes[0].getnewaddress(): 15},\n+            options={\"add_inputs\": True}\n+        )\n+        signed = wallet.walletprocesspsbt(psbt[\"psbt\"])\n+        signed = self.nodes[0].walletprocesspsbt(signed[\"psbt\"])\n+        final = self.nodes[0].finalizepsbt(signed[\"psbt\"])\n+        assert self.nodes[0].testmempoolaccept([final[\"hex\"]])[0][\"allowed\"]\n+        # Reducing the weight should have a lower fee\n+        psbt2 = wallet.walletcreatefundedpsbt(\n+            inputs=[{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": low_input_weight}],\n+            outputs={self.nodes[0].getnewaddress(): 15},\n+            options={\"add_inputs\": True}\n+        )\n+        assert_greater_than(psbt[\"fee\"], psbt2[\"fee\"])\n+        # Increasing the weight should have a higher fee\n+        psbt2 = wallet.walletcreatefundedpsbt(\n+            inputs=[{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": high_input_weight}],\n+            outputs={self.nodes[0].getnewaddress(): 15},\n+            options={\"add_inputs\": True}\n+        )\n+        assert_greater_than(psbt2[\"fee\"], psbt[\"fee\"])\n+        # The provided weight should override the calculated weight when solving data is provided\n+        psbt3 = wallet.walletcreatefundedpsbt(\n+            inputs=[{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": high_input_weight}],\n+            outputs={self.nodes[0].getnewaddress(): 15},\n+            options={'add_inputs': True, \"solving_data\":{\"descriptors\": [desc]}}\n+        )\n+        assert_equal(psbt2[\"fee\"], psbt3[\"fee\"])\n+\n+        # Import the external utxo descriptor so that we can sign for it from the test wallet\n+        if self.options.descriptors:\n+            res = wallet.importdescriptors([{\"desc\": desc, \"timestamp\": \"now\"}])\n+        else:\n+            res = wallet.importmulti([{\"desc\": desc, \"timestamp\": \"now\"}])\n+        assert res[0][\"success\"]\n+        # The provided weight should override the calculated weight for a wallet input\n+        psbt3 = wallet.walletcreatefundedpsbt(\n+            inputs=[{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": high_input_weight}],\n+            outputs={self.nodes[0].getnewaddress(): 15},\n+            options={\"add_inputs\": True}\n+        )\n+        assert_equal(psbt2[\"fee\"], psbt3[\"fee\"])\n \n if __name__ == '__main__':\n     PSBTTest().main()"
      },
      {
        "sha": "fa3e3674f372539bb0f859eedbbd897dcc3fd123",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6526e5f579bd7b87965f7b2c6c86727eca719/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6526e5f579bd7b87965f7b2c6c86727eca719/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=42f6526e5f579bd7b87965f7b2c6c86727eca719",
        "patch": "@@ -522,5 +522,42 @@ def run_test(self):\n         assert signed[\"complete\"]\n         self.nodes[0].finalizepsbt(signed[\"psbt\"])\n \n+        dec = self.nodes[0].decodepsbt(signed[\"psbt\"])\n+        for i, txin in enumerate(dec[\"tx\"][\"vin\"]):\n+            if txin[\"txid\"] == ext_utxo[\"txid\"] and txin[\"vout\"] == ext_utxo[\"vout\"]:\n+                input_idx = i\n+                break\n+        psbt_in = dec[\"inputs\"][input_idx]\n+        # Calculate the input weight\n+        # (prevout + sequence + length of scriptSig + 2 bytes buffer) * 4 + len of scriptwitness\n+        len_scriptsig = len(psbt_in[\"final_scriptSig\"][\"hex\"]) // 2 if \"final_scriptSig\" in psbt_in else 0\n+        len_scriptwitness = len(psbt_in[\"final_scriptwitness\"][\"hex\"]) // 2 if \"final_scriptwitness\" in psbt_in else 0\n+        input_weight = ((44 + len_scriptsig + 2) * 4) + len_scriptwitness\n+\n+        # Input weight error conditions\n+        assert_raises_rpc_error(\n+            -8,\n+            \"Specify weight in inputs instead\",\n+            ext_wallet.send,\n+            outputs={self.nodes[0].getnewaddress(): 15},\n+            options={\"inputs\": [ext_utxo], \"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": 1000}]}\n+        )\n+\n+        # Funding should also work when input weights are provided\n+        res = self.test_send(\n+            from_wallet=ext_wallet,\n+            to_wallet=self.nodes[0],\n+            amount=15,\n+            inputs=[{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": input_weight}],\n+            add_inputs=True,\n+            psbt=True,\n+            include_watching=True\n+        )\n+        signed = ext_wallet.walletprocesspsbt(res[\"psbt\"])\n+        signed = ext_fund.walletprocesspsbt(res[\"psbt\"])\n+        assert signed[\"complete\"]\n+        tx = self.nodes[0].finalizepsbt(signed[\"psbt\"])\n+        assert self.nodes[0].testmempoolaccept([tx[\"hex\"]])[0][\"allowed\"]\n+\n if __name__ == '__main__':\n     WalletSendTest().main()"
      }
    ]
  },
  {
    "sha": "1fc2c75b2ac41b3aab8b80348490c744444ab993",
    "node_id": "C_kwDOABII59oAKDFmYzJjNzViMmFjNDFiM2FhYjhiODAzNDg0OTBjNzQ0NDQ0YWI5OTM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-06T00:07:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-08T17:40:40Z"
      },
      "message": "bumpfee: Calculate fee by looking up UTXOs\n\nInstead of calculating the fee by using what is stored in the wallet,\ncalculate it by looking up the UTXOs.",
      "tree": {
        "sha": "e5a592ff0b197fe6540d4b0d97a61d912f096fdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5a592ff0b197fe6540d4b0d97a61d912f096fdf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fc2c75b2ac41b3aab8b80348490c744444ab993",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fc2c75b2ac41b3aab8b80348490c744444ab993",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fc2c75b2ac41b3aab8b80348490c744444ab993",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fc2c75b2ac41b3aab8b80348490c744444ab993/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42f6526e5f579bd7b87965f7b2c6c86727eca719",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42f6526e5f579bd7b87965f7b2c6c86727eca719",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42f6526e5f579bd7b87965f7b2c6c86727eca719"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 22,
      "deletions": 7
    },
    "files": [
      {
        "sha": "4f7f0787a85b220e665d01b1c10240bb22d59564",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 7,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fc2c75b2ac41b3aab8b80348490c744444ab993/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fc2c75b2ac41b3aab8b80348490c744444ab993/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=1fc2c75b2ac41b3aab8b80348490c744444ab993",
        "patch": "@@ -60,7 +60,7 @@ static feebumper::Result PreconditionChecks(const CWallet& wallet, const CWallet\n }\n \n //! Check if the user provided a valid feeRate\n-static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wtx, const CFeeRate& newFeerate, const int64_t maxTxSize, std::vector<bilingual_str>& errors)\n+static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wtx, const CFeeRate& newFeerate, const int64_t maxTxSize, CAmount old_fee, std::vector<bilingual_str>& errors)\n {\n     // check that fee rate is higher than mempool's minimum fee\n     // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n@@ -82,8 +82,6 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n     CFeeRate incrementalRelayFee = std::max(wallet.chain().relayIncrementalFee(), CFeeRate(WALLET_INCREMENTAL_RELAY_FEE));\n \n     // Given old total fee and transaction size, calculate the old feeRate\n-    isminefilter filter = wallet.GetLegacyScriptPubKeyMan() && wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n-    CAmount old_fee = CachedTxGetDebit(wallet, wtx, filter) - wtx.tx->GetValueOut();\n     const int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n     CFeeRate nOldFeeRate(old_fee, txSize);\n     // Min total fee is old fee + relay fee\n@@ -168,13 +166,30 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n     }\n     const CWalletTx& wtx = it->second;\n \n+    // Retrieve all of the UTXOs and add them to coin control\n+    // While we're here, calculate the input amount\n+    std::map<COutPoint, Coin> coins;\n+    CAmount input_value = 0;\n+    for (const CTxIn& txin : wtx.tx->vin) {\n+        coins[txin.prevout]; // Create empty map entry keyed by prevout.\n+    }\n+    wallet.chain().findCoins(coins);\n+    for (const CTxIn& txin : wtx.tx->vin) {\n+        const Coin& coin = coins.at(txin.prevout);\n+        assert(!coin.out.IsNull());\n+        new_coin_control.SelectExternal(txin.prevout, coin.out);\n+        input_value += coin.out.nValue;\n+    }\n+\n     Result result = PreconditionChecks(wallet, wtx, errors);\n     if (result != Result::OK) {\n         return result;\n     }\n \n     // Fill in recipients(and preserve a single change key if there is one)\n+    // While we're here, calculate the output amount\n     std::vector<CRecipient> recipients;\n+    CAmount output_value = 0;\n     for (const auto& output : wtx.tx->vout) {\n         if (!OutputIsChange(wallet, output)) {\n             CRecipient recipient = {output.scriptPubKey, output.nValue, false};\n@@ -184,16 +199,16 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n             ExtractDestination(output.scriptPubKey, change_dest);\n             new_coin_control.destChange = change_dest;\n         }\n+        output_value += output.nValue;\n     }\n \n-    isminefilter filter = wallet.GetLegacyScriptPubKeyMan() && wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n-    old_fee = CachedTxGetDebit(wallet, wtx, filter) - wtx.tx->GetValueOut();\n+    old_fee = input_value - output_value;\n \n     if (coin_control.m_feerate) {\n         // The user provided a feeRate argument.\n         // We calculate this here to avoid compiler warning on the cs_wallet lock\n-        const int64_t maxTxSize{CalculateMaximumSignedTxSize(*wtx.tx, &wallet).vsize};\n-        Result res = CheckFeeRate(wallet, wtx, *new_coin_control.m_feerate, maxTxSize, errors);\n+        const int64_t maxTxSize{CalculateMaximumSignedTxSize(*wtx.tx, &wallet, &new_coin_control).vsize};\n+        Result res = CheckFeeRate(wallet, wtx, *new_coin_control.m_feerate, maxTxSize, old_fee, errors);\n         if (res != Result::OK) {\n             return res;\n         }"
      }
    ]
  },
  {
    "sha": "7c4c9abde760e27ac117b94abf5ad04e6d859365",
    "node_id": "C_kwDOABII59oAKDdjNGM5YWJkZTc2MGUyN2FjMTE3Yjk0YWJmNWFkMDRlNmQ4NTkzNjU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-06T01:41:54Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-08T17:40:42Z"
      },
      "message": "bumpfee: extract weights of external inputs when bumping fee\n\nWhen bumping the fee of a transaction containing external inputs,\ndetermine the weights of those inputs. Because signatures can have a\nvariable size, the script is executed with a special SignatureChecker\nwhich will compute the total weight of the signatures in the transaction\nand the weight if they were all maximum size signatures. This allows us\nto compute the maximum weight of the input for use during coin\nselection.",
      "tree": {
        "sha": "4a6cc2705b6ca2896a7c09a1a800d36ced4076db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a6cc2705b6ca2896a7c09a1a800d36ced4076db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c4c9abde760e27ac117b94abf5ad04e6d859365",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c4c9abde760e27ac117b94abf5ad04e6d859365",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c4c9abde760e27ac117b94abf5ad04e6d859365",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c4c9abde760e27ac117b94abf5ad04e6d859365/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fc2c75b2ac41b3aab8b80348490c744444ab993",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fc2c75b2ac41b3aab8b80348490c744444ab993",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fc2c75b2ac41b3aab8b80348490c744444ab993"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 78,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2836042aa09b91a3731b9886dcd233e896af059c",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c4c9abde760e27ac117b94abf5ad04e6d859365/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c4c9abde760e27ac117b94abf5ad04e6d859365/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=7c4c9abde760e27ac117b94abf5ad04e6d859365",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/validation.h>\n #include <interfaces/chain.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n@@ -151,6 +152,58 @@ bool TransactionCanBeBumped(const CWallet& wallet, const uint256& txid)\n     return res == feebumper::Result::OK;\n }\n \n+struct SignatureWeights\n+{\n+    int m_sigs_count{0};\n+    int64_t m_sigs_weight{0};\n+\n+    void AddSigWeight(size_t weight, SigVersion sigversion)\n+    {\n+        switch (sigversion) {\n+        case SigVersion::BASE:\n+            m_sigs_weight += weight * WITNESS_SCALE_FACTOR;\n+            m_sigs_count += 1 * WITNESS_SCALE_FACTOR;\n+            break;\n+        case SigVersion::WITNESS_V0:\n+            m_sigs_weight += weight;\n+            m_sigs_count++;\n+            break;\n+        case SigVersion::TAPROOT:\n+        case SigVersion::TAPSCRIPT:\n+            assert(false);\n+        }\n+    }\n+\n+    int64_t GetSigsWeight() const\n+    {\n+        return m_sigs_weight;\n+    }\n+\n+    int64_t GetMaxSigsWeight() const\n+    {\n+        // Note: the witness scaling factor is already accounted for because the count is multiplied by it.\n+        return /* max signature size=*/ 72 * m_sigs_count;\n+    }\n+};\n+\n+class SignatureWeightChecker : public DeferringSignatureChecker\n+{\n+private:\n+    SignatureWeights& m_weights;\n+\n+public:\n+    SignatureWeightChecker(SignatureWeights& weights, BaseSignatureChecker& checker) : DeferringSignatureChecker(checker), m_weights(weights) {}\n+\n+    bool CheckECDSASignature(const std::vector<unsigned char>& sig, const std::vector<unsigned char>& pubkey, const CScript& script, SigVersion sigversion) const override\n+    {\n+        if (m_checker.CheckECDSASignature(sig, pubkey, script, sigversion)) {\n+            m_weights.AddSigWeight(sig.size(), sigversion);\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCoinControl& coin_control, std::vector<bilingual_str>& errors,\n                                  CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n {\n@@ -170,6 +223,7 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n     // While we're here, calculate the input amount\n     std::map<COutPoint, Coin> coins;\n     CAmount input_value = 0;\n+    std::vector<CTxOut> spent_outputs;\n     for (const CTxIn& txin : wtx.tx->vin) {\n         coins[txin.prevout]; // Create empty map entry keyed by prevout.\n     }\n@@ -179,6 +233,30 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n         assert(!coin.out.IsNull());\n         new_coin_control.SelectExternal(txin.prevout, coin.out);\n         input_value += coin.out.nValue;\n+        spent_outputs.push_back(coin.out);\n+    }\n+\n+    // Figure out if we need to compute the input weight, and do so if necessary\n+    PrecomputedTransactionData txdata;\n+    txdata.Init(*wtx.tx, std::move(spent_outputs), /* force=*/ true);\n+    for (unsigned int i = 0; i < wtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = wtx.tx->vin.at(i);\n+        const Coin& coin = coins.at(txin.prevout);\n+        if (CalculateMaximumSignedInputSize(coin.out, &wallet, false) == -1) {\n+            // Could not get the size with the wallet, so now estimate it using the actual size of this input.\n+            int64_t input_weight = GetTransactionInputWeight(txin);\n+            // Because signatures can have different sizes, we need to figure out all of the\n+            // signature sizes and replace them with the max sized signature.\n+            // In order to do this, we verify the script with a special SignatureChecker which\n+            // will observe the signatures verified and record their sizes.\n+            SignatureWeights weights;\n+            TransactionSignatureChecker tx_checker(wtx.tx.get(), i, coin.out.nValue, txdata, MissingDataBehavior::FAIL);\n+            SignatureWeightChecker size_checker(weights, tx_checker);\n+            VerifyScript(txin.scriptSig, coin.out.scriptPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, size_checker);\n+            // Add the difference between max and current to input_weight so that it represents the largest the input could be\n+            input_weight += weights.GetMaxSigsWeight() - weights.GetSigsWeight();\n+            new_coin_control.SetInputWeight(txin.prevout, input_weight);\n+        }\n     }\n \n     Result result = PreconditionChecks(wallet, wtx, errors);"
      }
    ]
  },
  {
    "sha": "20591c0eb71b244031c4f696d1809714bff10f42",
    "node_id": "C_kwDOABII59oAKDIwNTkxYzBlYjcxYjI0NDAzMWM0ZjY5NmQxODA5NzE0YmZmMTBmNDI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-06T02:06:19Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-08T17:40:42Z"
      },
      "message": "bumpfee: be able to bump fee of a tx with external inputs\n\nIn some cases, notably psbtbumpfee, it is okay, and potentially desired,\nto be able to bump the fee of a transaction which contains external\ninputs.",
      "tree": {
        "sha": "706d630e94dc789bdee235addfdc88a3c631a327",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/706d630e94dc789bdee235addfdc88a3c631a327"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20591c0eb71b244031c4f696d1809714bff10f42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20591c0eb71b244031c4f696d1809714bff10f42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20591c0eb71b244031c4f696d1809714bff10f42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20591c0eb71b244031c4f696d1809714bff10f42/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c4c9abde760e27ac117b94abf5ad04e6d859365",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c4c9abde760e27ac117b94abf5ad04e6d859365",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c4c9abde760e27ac117b94abf5ad04e6d859365"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 17,
      "deletions": 15
    },
    "files": [
      {
        "sha": "8b931b10313e00c2da6bba924ebafe751c81d79a",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20591c0eb71b244031c4f696d1809714bff10f42/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20591c0eb71b244031c4f696d1809714bff10f42/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=20591c0eb71b244031c4f696d1809714bff10f42",
        "patch": "@@ -19,7 +19,7 @@\n \n //! Check whether transaction has descendant in wallet or mempool, or has been\n //! mined, or conflicts with a mined transaction. Return a feebumper::Result.\n-static feebumper::Result PreconditionChecks(const CWallet& wallet, const CWalletTx& wtx, std::vector<bilingual_str>& errors) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n+static feebumper::Result PreconditionChecks(const CWallet& wallet, const CWalletTx& wtx, bool require_mine, std::vector<bilingual_str>& errors) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n {\n     if (wallet.HasWalletSpend(wtx.GetHash())) {\n         errors.push_back(Untranslated(\"Transaction has descendants in the wallet\"));\n@@ -48,15 +48,16 @@ static feebumper::Result PreconditionChecks(const CWallet& wallet, const CWallet\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n-    // check that original tx consists entirely of our inputs\n-    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n-    isminefilter filter = wallet.GetLegacyScriptPubKeyMan() && wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n-    if (!AllInputsMine(wallet, *wtx.tx, filter)) {\n-        errors.push_back(Untranslated(\"Transaction contains inputs that don't belong to this wallet\"));\n-        return feebumper::Result::WALLET_ERROR;\n+    if (require_mine) {\n+        // check that original tx consists entirely of our inputs\n+        // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+        isminefilter filter = wallet.GetLegacyScriptPubKeyMan() && wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n+        if (!AllInputsMine(wallet, *wtx.tx, filter)) {\n+            errors.push_back(Untranslated(\"Transaction contains inputs that don't belong to this wallet\"));\n+            return feebumper::Result::WALLET_ERROR;\n+        }\n     }\n \n-\n     return feebumper::Result::OK;\n }\n \n@@ -148,7 +149,7 @@ bool TransactionCanBeBumped(const CWallet& wallet, const uint256& txid)\n     if (wtx == nullptr) return false;\n \n     std::vector<bilingual_str> errors_dummy;\n-    feebumper::Result res = PreconditionChecks(wallet, *wtx, errors_dummy);\n+    feebumper::Result res = PreconditionChecks(wallet, *wtx, /* require_mine=*/ true, errors_dummy);\n     return res == feebumper::Result::OK;\n }\n \n@@ -205,7 +206,7 @@ class SignatureWeightChecker : public DeferringSignatureChecker\n };\n \n Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCoinControl& coin_control, std::vector<bilingual_str>& errors,\n-                                 CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n+                                 CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx, bool require_mine)\n {\n     // We are going to modify coin control later, copy to re-use\n     CCoinControl new_coin_control(coin_control);\n@@ -259,7 +260,7 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n         }\n     }\n \n-    Result result = PreconditionChecks(wallet, wtx, errors);\n+    Result result = PreconditionChecks(wallet, wtx, require_mine, errors);\n     if (result != Result::OK) {\n         return result;\n     }\n@@ -354,7 +355,7 @@ Result CommitTransaction(CWallet& wallet, const uint256& txid, CMutableTransacti\n     const CWalletTx& oldWtx = it->second;\n \n     // make sure the transaction still has no descendants and hasn't been mined in the meantime\n-    Result result = PreconditionChecks(wallet, oldWtx, errors);\n+    Result result = PreconditionChecks(wallet, oldWtx, /* require_mine=*/ false, errors);\n     if (result != Result::OK) {\n         return result;\n     }"
      },
      {
        "sha": "49b7d969fe3a1c025969d6eaf4488c729484266a",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20591c0eb71b244031c4f696d1809714bff10f42/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20591c0eb71b244031c4f696d1809714bff10f42/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=20591c0eb71b244031c4f696d1809714bff10f42",
        "patch": "@@ -36,7 +36,8 @@ Result CreateRateBumpTransaction(CWallet& wallet,\n     std::vector<bilingual_str>& errors,\n     CAmount& old_fee,\n     CAmount& new_fee,\n-    CMutableTransaction& mtx);\n+    CMutableTransaction& mtx,\n+    bool require_mine);\n \n //! Sign the new transaction,\n //! @return false if the tx couldn't be found or if it was"
      },
      {
        "sha": "e6c315db5d36a01850f19ec92623b083409e14e0",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20591c0eb71b244031c4f696d1809714bff10f42/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20591c0eb71b244031c4f696d1809714bff10f42/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=20591c0eb71b244031c4f696d1809714bff10f42",
        "patch": "@@ -276,7 +276,7 @@ class WalletImpl : public Wallet\n         CAmount& new_fee,\n         CMutableTransaction& mtx) override\n     {\n-        return feebumper::CreateRateBumpTransaction(*m_wallet.get(), txid, coin_control, errors, old_fee, new_fee, mtx) == feebumper::Result::OK;\n+        return feebumper::CreateRateBumpTransaction(*m_wallet.get(), txid, coin_control, errors, old_fee, new_fee, mtx, /* require_mine= */ true) == feebumper::Result::OK;\n     }\n     bool signBumpTransaction(CMutableTransaction& mtx) override { return feebumper::SignTransaction(*m_wallet.get(), mtx); }\n     bool commitBumpTransaction(const uint256& txid,"
      },
      {
        "sha": "93a115adb663c3d630176bca4c2128426694a73d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20591c0eb71b244031c4f696d1809714bff10f42/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20591c0eb71b244031c4f696d1809714bff10f42/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=20591c0eb71b244031c4f696d1809714bff10f42",
        "patch": "@@ -3771,7 +3771,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n     CMutableTransaction mtx;\n     feebumper::Result res;\n     // Targeting feerate bump.\n-    res = feebumper::CreateRateBumpTransaction(*pwallet, hash, coin_control, errors, old_fee, new_fee, mtx);\n+    res = feebumper::CreateRateBumpTransaction(*pwallet, hash, coin_control, errors, old_fee, new_fee, mtx, !want_psbt);\n     if (res != feebumper::Result::OK) {\n         switch(res) {\n             case feebumper::Result::INVALID_ADDRESS_OR_KEY:"
      }
    ]
  },
  {
    "sha": "8dbfdc5b872a6d830cc4af12ce3c236d45c607f3",
    "node_id": "C_kwDOABII59oAKDhkYmZkYzViODcyYTZkODMwY2M0YWYxMmNlM2MyMzZkNDVjNjA3ZjM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-06T02:17:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-08T17:40:42Z"
      },
      "message": "test, bumpfee: Check that psbtbumpfee can bump txs with external inputs",
      "tree": {
        "sha": "4e90d1a236b2b6ab1a73dc9c7e4df11198ccd685",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e90d1a236b2b6ab1a73dc9c7e4df11198ccd685"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8dbfdc5b872a6d830cc4af12ce3c236d45c607f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dbfdc5b872a6d830cc4af12ce3c236d45c607f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8dbfdc5b872a6d830cc4af12ce3c236d45c607f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dbfdc5b872a6d830cc4af12ce3c236d45c607f3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20591c0eb71b244031c4f696d1809714bff10f42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20591c0eb71b244031c4f696d1809714bff10f42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20591c0eb71b244031c4f696d1809714bff10f42"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 13,
      "deletions": 2
    },
    "files": [
      {
        "sha": "03b203f0ad0be7d60e9abc946e7d63c09ba534d4",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbfdc5b872a6d830cc4af12ce3c236d45c607f3/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbfdc5b872a6d830cc4af12ce3c236d45c607f3/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=8dbfdc5b872a6d830cc4af12ce3c236d45c607f3",
        "patch": "@@ -88,7 +88,7 @@ def run_test(self):\n         self.test_invalid_parameters(rbf_node, peer_node, dest_address)\n         test_segwit_bumpfee_succeeds(self, rbf_node, dest_address)\n         test_nonrbf_bumpfee_fails(self, peer_node, dest_address)\n-        test_notmine_bumpfee_fails(self, rbf_node, peer_node, dest_address)\n+        test_notmine_bumpfee(self, rbf_node, peer_node, dest_address)\n         test_bumpfee_with_descendant_fails(self, rbf_node, rbf_node_address, dest_address)\n         test_dust_to_fee(self, rbf_node, dest_address)\n         test_watchonly_psbt(self, peer_node, rbf_node, dest_address)\n@@ -234,7 +234,7 @@ def test_nonrbf_bumpfee_fails(self, peer_node, dest_address):\n     self.clear_mempool()\n \n \n-def test_notmine_bumpfee_fails(self, rbf_node, peer_node, dest_address):\n+def test_notmine_bumpfee(self, rbf_node, peer_node, dest_address):\n     self.log.info('Test that it cannot bump fee if non-owned inputs are included')\n     # here, the rbftx has a peer_node coin and then adds a rbf_node input\n     # Note that this test depends upon the RPC code checking input ownership prior to change outputs\n@@ -252,8 +252,19 @@ def test_notmine_bumpfee_fails(self, rbf_node, peer_node, dest_address):\n     signedtx = rbf_node.signrawtransactionwithwallet(rawtx)\n     signedtx = peer_node.signrawtransactionwithwallet(signedtx[\"hex\"])\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n+    old_fee = rbf_node.getmempoolentry(rbfid)[\"fee\"]\n     assert_raises_rpc_error(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                             rbf_node.bumpfee, rbfid)\n+\n+    self.log.info(\"Test that psbtbumpfee works for non-owned inputs\")\n+    psbt = rbf_node.psbtbumpfee(rbfid)\n+    psbt = rbf_node.walletprocesspsbt(psbt[\"psbt\"])\n+    psbt = peer_node.walletprocesspsbt(psbt[\"psbt\"])\n+    final = rbf_node.finalizepsbt(psbt[\"psbt\"])\n+    res = rbf_node.testmempoolaccept([final[\"hex\"]])\n+    assert res[0][\"allowed\"]\n+    assert_greater_than(res[0][\"fees\"][\"base\"], old_fee)\n+\n     self.clear_mempool()\n \n "
      }
    ]
  }
]