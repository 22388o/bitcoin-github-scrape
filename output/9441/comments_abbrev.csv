theuni,2016-12-31T02:09:17Z,"@sipa I've spent all day on changing this around some and breaking this up into logical commits in order to satisfy myself (and i hope others) that it's safe. I'll push up a fresh version in a few min, and drop the WIP tag.",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-269843583,269843583,
theuni,2016-12-31T04:39:29Z,"Updated. Don't let the number of commits scare you off, the diffstat isn't too bad.\n\nI attempted to break this up into small/simple commits, in order to slowly remove the need for cs_vRecvMsg. The last commit actually removes it.\n\nI'm satisfied that this shouldn't be introducing any new races, as only a handful of vars were actually touched on the SocketHandler thread.\n\nEdit: time-orde",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-269849078,269849078,
dcousens,2017-01-03T00:18:54Z,@theuni is this worth testing now?,https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270035728,270035728,
theuni,2017-01-03T04:16:54Z,@dcousens Very much so!,https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270049933,270049933,
TheBlueMatt,2017-01-03T11:11:40Z,"See IRC discussion:\n\n```\n<BlueMatt> cfields: hmmm, regarding #9441, do we really want to run the entire ProcessMessages loop (calling SendMessages potentially umpteen times) just to process multiple messages from the same node?\n<BlueMatt> (ie remove the loop inside ProcessMessages and move it to ThreadProcessMessages)\n<sipa> BlueMatt: i was wondering about that too\n<sipa> BlueMatt: but",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270093178,270093178,
theuni,2017-01-03T15:19:43Z,"@TheBlueMatt If I understand you correctly, as mentioned in the summary, that's the part that was cut out here for simplicity. The next set of changes would combine the loops and move them into net_processing. See here for how it looked in a previous iteration: https://github.com/theuni/bitcoin/commit/1a6b10aea129ac363727c2d68fae809c2861e4da#diff-eff7adeaec73a769788bb78858815c91R271\n\nI'd be ha",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270137480,270137480,
theuni,2017-01-03T16:15:32Z,"Also from IRC:\n```\n<BlueMatt> I assume you didnt touch cs_vSend due to https://github.com/bitcoin/bitcoin/pull/9419/commits/c214d120a363a05ba9afdccff6b4bda6e29ae7c4, cfields?\n<cfields> BlueMatt: yes, cs_vSend wasn't touched because of your PR. I've just been operating under the assumption that the lock around SendMessages will be removed by one PR or another.\n```",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270152187,270152187,
theuni,2017-01-03T18:27:14Z,"Digging further into the IRC conversation above, I'd like to clarify that the interaction here between ProcessMessages and SendMessages is _not_ changed substantially in this PR.\n\n@TheBlueMatt had missed a subtle part of the current behavior, and maybe @sipa too, so I'd just like to explicitly point out the current break here: https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.c",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270185545,270185545,
gmaxwell,2017-01-04T03:15:58Z,"> <BlueMatt> cfields: hmmm, regarding #9441, do we really want to run the entire ProcessMessages loop (calling SendMessages potentially umpteen times) just to process multiple messages from the same node?\n<BlueMatt> (ie remove the loop inside ProcessMessages and move it to ThreadProcessMessages)\n\nClearly people weren't reading PRs on this or you would have noticed that it only processes one ",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270286007,270286007,
sipa,2017-01-04T03:21:27Z,I certainly noticed it only processed one message at a time. I missed that\nit calls SendMessages between each.\n,https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270286554,270286554,
sipa,2017-01-04T14:42:19Z,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270386244,270386244,
theuni,2017-01-04T15:25:28Z,"Rebased, and I believe I addressed all comments so far.\n\nI did a full mainnet sync last night with these (pre-rebase) changes, with no issues. I had extra logging to observe the recv pausing behavior, and verified that it's working as intended. It is paused quite frequently during IBD. Obviously that's intended, as it signals for the peer to slow down, but it may be worth discussing the conseq",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270397280,270397280,
theuni,2017-01-04T21:47:47Z,"I believe you're correct, that's my reading of it as well. Regardless, I\nwasn't able to track down a path where fDisconnect wouldn't be set as\nnecessary.\n",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270496443,270496443,
theuni,2017-01-06T15:12:03Z,"From @sipa\n> Can you clarify what the rationale is for switching from a ProcessMessages that processes multiple messages to just a single one? I'm not opposed to the change, but I'd like to understand what the reason for the change is.\n\nIn nearly all cases in the current code, only 1 message is processed. I thought that making this explicit would clarify the situation, but it seems it's only",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270923452,270923452,
sipa,2017-01-06T17:26:56Z,"@theuni Please ignore my request to keep processing multiple messages at the same time.\n\n> In nearly all cases in the current code, only 1 message is processed.\n\nI thought you were trying to say our send buffer was usually full, not that the code actually never loops (which is apparently behaviour that was intentionally changed in #3180).",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270955845,270955845,
theuni,2017-01-06T18:01:03Z,"Updated to address feedback. Most of it is just fixing up interim commits to be more correct for easier commit-by-commit review.\n\nActual changes:\n  - Fixed up the condvar as @sipa suggested\n  - Completely removed cs_vRecvMsg. See the commit message for more detail.\n\nDiff from before is here: https://gist.github.com/theuni/9c18405455a2569156671aadcf242500",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270963654,270963654,
theuni,2017-01-06T19:49:12Z,"@morcos I meant to expand on the commit message for c5b4e31fb87a9819330b83f4ac6cc92066e8337d, but apparently neglected to do so before pushing. I expect that we'll want to add connman.WakeMessageHandler() in a few places to take care of that as a follow-up.",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270989192,270989192,
sipa,2017-01-08T02:21:57Z,utACK ddac068fa5d6b43925a96149f2d9b81ec736a5e7,https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-271124533,271124533,
theuni,2017-01-11T21:58:08Z,"Addressed outstanding nits, will squash at the end.",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-272008534,272008534,
laanwj,2017-01-12T10:54:55Z,"(Lightly) tested ACK 1c779a8. This is an older version but it's been running stable on a busy node for a week.\n",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-272133975,272133975,
theuni,2017-01-12T14:23:22Z,@TheBlueMatt @sipa @morcos care to re-ACK before final squash?,https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-272175357,272175357,
morcos,2017-01-12T14:54:42Z,"utACK and ran on some nodes without error for several days ddac068\nutACK 7b44e18",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-272183451,272183451,
TheBlueMatt,2017-01-12T20:47:30Z,"Dont think its actually possible due to the sizes involved, but, theoretically, PushMessage could increment nSendSize to be > nSendBufferMaxSize, set fPauseSend to true, and then call opportunistic SocketSendData, which flushed the entire buffer, but didnt reset fPauseSend. I'd suggest moving the fPauseSend update to right beside the nSendSize decrement as it is for the increment.",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-272278780,272278780,
TheBlueMatt,2017-01-12T21:41:47Z,utACK 7b44e18b2f3a39657699adff5dd39dcfde24f1fb if 975fc9dd6f55a87f7d0db62898e58169b2816baf is reverted and the fPauseSend updates are all placed directly beside the nSendSize updates.,https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-272292726,272292726,
TheBlueMatt,2017-01-13T00:37:12Z,utACK 0168bea73772a707c53952956a364262cea63cd3 (+/- squash-needed).,https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-272328264,272328264,
theuni,2017-01-13T04:45:23Z,"Squashed, and I believe this is now merge-ready.\n\n@sipa / @morcos See https://github.com/theuni/bitcoin/tree/connman-locks-tmp for the unsquashed version if you'd like. It's codewise-identical to e60360e139852c655930e99d4bb4db554cd8385e.",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-272360130,272360130,
morcos,2017-01-13T15:43:30Z,"re-utACK e60360e\n",https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-272473940,272473940,
TheBlueMatt,2017-01-13T16:48:08Z,Confirmed there is no diff-tree to e60360e139852c655930e99d4bb4db554cd8385e from my previous utACK,https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-272485728,272485728,
sipa,2017-01-13T17:50:44Z,utACK e60360e139852c655930e99d4bb4db554cd8385e,https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-272501888,272501888,
rebroad,2016-12-29T16:37:40Z,"I'm not sure if github is messing with the formatting, but this line looks unnecessarily indented.",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94154588,94154588,src/net_processing.cpp
theuni,2016-12-29T16:47:43Z,"Yes, the indentation was just kept to avoid creating a huge whitespace diff. This can be cleaned up in a move-only commit as a next step.",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94155625,94155625,src/net_processing.cpp
theuni,2016-12-31T07:39:29Z,"Whoops, rebase gone bad here. It ends up right in the end. Will fix.",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94270487,94270487,src/net.cpp
theuni,2016-12-31T07:57:52Z,"Need to clarify in the commit message: It was almost always the case that only one message was processed in this while loop. See the break at line 2538.\n\nThis commit changes the behavior so that it's _always_ one message processed per-loop. The only messages that show different behavior are the ones that used to ""continue"" the loop. I think it's perfectly reasonable to skip to the next node fo",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94270593,94270593,src/net_processing.cpp
TheBlueMatt,2017-01-03T10:48:47Z,"I think you meant /, not * here?",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94386537,94386537,src/net.cpp
TheBlueMatt,2017-01-03T10:51:06Z,It might be nice in the RPC for mapRecvBytesPerMsgCmd to add up to nRecvBytes (ie to increment this in the loop per-msg instead of after receiving (which would also mean no api change)).,https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94386795,94386795,src/net.cpp
theuni,2017-01-03T15:11:55Z,"Heh, sure did",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94419909,94419909,src/net.cpp
theuni,2017-01-03T15:13:30Z,"Sure, that just means more locking. Though this is completely uncontested now, so that's not really a problem.",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94420177,94420177,src/net.cpp
TheBlueMatt,2017-01-04T21:38:55Z,"Is it just me, or were these always impossible to hit? Both ConnectNode and AcceptConnection do a AddRef() which is only countered by the Release a few lines further down here.",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94670409,94670409,src/net.cpp
TheBlueMatt,2017-01-04T21:39:17Z,"(obviously not an issue, just checking my logic).",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94670463,94670463,src/net.cpp
TheBlueMatt,2017-01-04T22:03:41Z,I think you actually meant / 1000 / 1000 :p,https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94674801,94674801,src/net.cpp
theuni,2017-01-05T20:00:27Z,I completely missed that this was a full-second value. Thanks for catching this (twice!). Will fix.,https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94840361,94840361,src/net.cpp
sipa,2017-01-05T20:50:11Z,"It seems that during this wait, fMoreWork will never change (and it isn't covered by the lock either), so this line could instead be written as\n```c++\nif (!fMoreWork) {\n    condMsgProc.wait_until(lock, std::chrono::steady_clock::now() + std::chrono::milliseconds(100), [this] { return fMsgProcWake; });\n}\n```\n",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94848354,94848354,src/net.cpp
sipa,2017-01-05T20:55:03Z,"Can you clarify what the rationale is for switching from a `ProcessMessages` that processes multiple messages to just a single one? I'm not opposed to the change, but I'd like to understand what the reason for the change is.",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94849266,94849266,src/net_processing.cpp
sipa,2017-01-05T20:58:08Z,"I find it generally more readable to write something like this as\n```c++\nwhile (it != pnode->vRecvMsg.end() && it->complete()) ++it;\n```\n\nAlso, isn't iterating backwards more efficient?",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94849846,94849846,src/net.cpp
TheBlueMatt,2017-01-05T21:10:46Z,Point is this is not a change. See https://github.com/bitcoin/bitcoin/pull/9441#issuecomment-270185545,https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94852093,94852093,src/net_processing.cpp
TheBlueMatt,2017-01-05T21:19:07Z,This is always false here.,https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94853525,94853525,src/net_processing.cpp
theuni,2017-01-05T21:19:22Z,"Sure, will change it to a while.\n\nIterating backwards would be preferable, but we end up hitting each msg anyway later (to add up message sizes) in a later commit, so i didn't bother (see https://github.com/bitcoin/bitcoin/pull/9441/commits/a109f7bd1801392bf99994a7165d495200156c4a#diff-9a82240fe7dfe86564178691cc57f2f1R1246). The sizes are added ahead of time in order to avoid iterating the lis",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94853574,94853574,src/net.cpp
theuni,2017-01-05T21:21:03Z,Yep. Will fix.,https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94853866,94853866,src/net.cpp
theuni,2017-01-05T21:27:11Z,"This is unclear due to rebasing. In the end-result, this will return true if there are more messages.\n\nIn this commit, there's an interim chunk that's missing. line 2479 should have:\n```c++\nfMoreWork = !pfrom->vRecvMsg.empty()\n```\nI'll fix it in the next rebase so that it's more clear.",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94854980,94854980,src/net_processing.cpp
TheBlueMatt,2017-01-05T21:43:00Z,"This is never set to true until a later commit. I'm generally ok with this, but it is a bit strange.",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94857821,94857821,src/net.h
TheBlueMatt,2017-01-05T21:50:05Z,"You're not holding cs_vRecvMsg here, which hyou need to access vRecvMsg.",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94859040,94859040,src/net.cpp
theuni,2017-01-05T21:50:33Z,"Grr, another artifact of breaking up an end-result into smaller commits. I'll add this where it belongs in the next rebase.",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94859110,94859110,src/net.h
theuni,2017-01-05T22:03:46Z,"vRecvMsg no longer needs cs_vRecvMsg starting here. It's only ever used on this thread. In reality, cs_vRecvMsg isn't needed at all, so it would probably be more clear to just remove it. copyStats is the only thing that accesses some of these vars, but it already operates without any locks, so the situation isn't changed from before.",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94861479,94861479,src/net.cpp
TheBlueMatt,2017-01-05T22:14:56Z,"Hum, ok, can you just add a comment somewhere to note that cs_vRecvMsg no longer protects vRecvMsg, and instead protects other stuff.",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94863381,94863381,src/net.cpp
morcos,2017-01-06T18:44:47Z,The comment above this code section describing the logic could be updated.,https://github.com/bitcoin/bitcoin/pull/9441#discussion_r94996847,94996847,src/net.cpp
pstratem,2017-01-10T16:37:02Z,It would be nice if this was nTimeMicros instead of nTime,https://github.com/bitcoin/bitcoin/pull/9441#discussion_r95403337,95403337,src/net.cpp
pstratem,2017-01-10T16:50:49Z,Please add the {} back even though it's now 1 line,https://github.com/bitcoin/bitcoin/pull/9441#discussion_r95406662,95406662,src/net.cpp
pstratem,2017-01-10T16:52:29Z,Probably should swap these around.,https://github.com/bitcoin/bitcoin/pull/9441#discussion_r95407030,95407030,src/net_processing.cpp
pstratem,2017-01-10T17:03:33Z,"This should set fDisconnect and return false unconditionally actually.\n\n(Yeah that changes the current behavior)",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r95409501,95409501,src/net_processing.cpp
theuni,2017-01-10T19:34:44Z,ok,https://github.com/bitcoin/bitcoin/pull/9441#discussion_r95439862,95439862,src/net_processing.cpp
theuni,2017-01-10T19:34:51Z,will do,https://github.com/bitcoin/bitcoin/pull/9441#discussion_r95439882,95439882,src/net.cpp
theuni,2017-01-10T19:35:00Z,will do,https://github.com/bitcoin/bitcoin/pull/9441#discussion_r95439915,95439915,src/net.cpp
theuni,2017-01-10T19:38:14Z,"Yes, that would be a change of behavior, and I'm not entirely sure that we want it changed.\nPresumably this was done to avoid partitioning the network in the event that the header structure (or magic bytes) ever needs to change.",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r95440528,95440528,src/net_processing.cpp
TheBlueMatt,2017-01-12T21:06:41Z,"By moving the setting of fPauseRecv outside of the cs_vProcessMsg lock you've introduced a race where the message processing thread may have already taken the next message and set fPauseRecv to false before this line (seems pretty unlikely, but its not unheard of). I'd suggest simply dropping this commit.",https://github.com/bitcoin/bitcoin/pull/9441#discussion_r95884670,95884670,src/net.cpp
theuni,2017-01-12T21:27:19Z,Good catch!,https://github.com/bitcoin/bitcoin/pull/9441#discussion_r95888318,95888318,src/net.cpp
