TheBlueMatt,2017-11-09T17:52:46Z,Fails travis due to new lock checking in clang.,https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-343236538,343236538,
ryanofsky,2017-12-01T21:42:57Z,"> Dont you need a similar DeleteLock() call as CCriticalSection?\n\nGood catch, added this.",https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-348622050,348622050,
ryanofsky,2017-12-07T19:07:02Z,Rebased f190dd6e5ebf07a75559855d04659502f6e63123 -> 674dcfea1d0a5314e39fc9731cb863995ff34ea1 ([pr/dead.7](https://github.com/ryanofsky/bitcoin/commits/pr/dead.7) -> [pr/dead.8](https://github.com/ryanofsky/bitcoin/commits/pr/dead.8)) due to new changes conflicting with AssertLockNotHeld declaration from #10286,https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-350063999,350063999,
TheBlueMatt,2017-12-08T15:41:04Z,utACK 674dcfea1d0a5314e39fc9731cb863995ff34ea1,https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-350294361,350294361,
ryanofsky,2018-02-08T13:04:53Z,Rebased 674dcfea1d0a5314e39fc9731cb863995ff34ea1 -> b6c88a148db170367abec036b6c4f2e13104f9aa ([pr/dead.8](https://github.com/ryanofsky/bitcoin/commits/pr/dead.8) -> [pr/dead.9](https://github.com/ryanofsky/bitcoin/commits/pr/dead.9)) due to trivial conflicts with #12366 and #12367.,https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-364105602,364105602,
TheBlueMatt,2018-03-02T18:17:01Z,"Yes, I tend to agree with that point. I think just explicitly using our wrapper classes instead of the LOCK macros would suffice there.\n\nOn March 2, 2018 6:08:09 PM UTC, ""Wladimir J. van der Laan"" <notifications@github.com> wrote:\n>laanwj commented on this pull request.\n>\n>\n>\n>> @@ -115,7 +115,7 @@ class WorkQueue\n>     /** Interrupt and exit loops */\n>     void Interrupt()\n>     {\n>-  ",https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-370005645,370005645,
ryanofsky,2018-03-02T23:08:00Z,"> Yes, I tend to agree with that point. I think just explicitly using our wrapper classes instead of the LOCK macros would suffice there.\n\nMatt, maybe I'm misunderstanding, but are you suggesting that I write something like:\n\n```c++\nDebugLock<CWaitableCriticalSection> lock(cs, ""cs"", __FILE__, __LINE__);\n```\n\nto replace current master code:\n\n```c++\nstd::unique_lock<std::mutex>",https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-370081940,370081940,
laanwj,2018-03-03T08:13:48Z,"Yes, I agree, my comment was somehow out of scope. Let's leave changing the style to something in the future. Or maybe just documenting how the various OS/C++ synchronization primitives map to ""bitcoin core style"" and vice versa.",https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-370129447,370129447,
ryanofsky,2018-04-10T12:46:10Z,"Rebased b6c88a148db170367abec036b6c4f2e13104f9aa -> 41dea6a481781e69a1e404a7e3d806f59b47032e ([pr/dead.9](https://github.com/ryanofsky/bitcoin/commits/pr/dead.9) -> [pr/dead.10](https://github.com/ryanofsky/bitcoin/commits/pr/dead.10)) due to conflict with #12926\nRebased 41dea6a481781e69a1e404a7e3d806f59b47032e -> c7c788496ee478064e00b592ac69ac2a23f70e11 ([pr/dead.10](https://github.com/ryanofsk",https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-380085412,380085412,
DrahtBot,2018-07-22T23:51:01Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 87 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-406906801,406906801,
laanwj,2018-08-31T13:50:34Z,utACK 9c4dc597ddc66acfd58a945a5ab11f833731abba,https://github.com/bitcoin/bitcoin/pull/11640#issuecomment-417670393,417670393,
TheBlueMatt,2017-11-09T17:45:26Z,"I believe we would sometimes incorrectly catch this - we still have some generic catch blocks lying around in places :(. I wouldn't mind having a policy of only catching in tests, but until then, I think this should, sadly, remain an assert (unless you want to go to the hassle of adding some #define that is only set in test_bitcoin and compiling this unit differently for it :/).",https://github.com/bitcoin/bitcoin/pull/11640#discussion_r150035812,150035812,src/sync.cpp
ryanofsky,2017-11-09T18:04:55Z,What exactly is the problem? DEBUG_LOCKORDER isn't enabled unless you are doing a special build anyway.,https://github.com/bitcoin/bitcoin/pull/11640#discussion_r150040828,150040828,src/sync.cpp
TheBlueMatt,2017-11-09T18:09:15Z,I presume it wouldn't actually fail in some cases where a lockorder inversion is hit as the exception here would be caught. Precisely because its (essentially) only enabled in travis we should just keep an assert.,https://github.com/bitcoin/bitcoin/pull/11640#discussion_r150041842,150041842,src/sync.cpp
ryanofsky,2017-12-01T21:42:20Z,"> I presume it wouldn't actually fail in some cases where a lockorder inversion is hit as the exception here would be caught. Precisely because its (essentially) only enabled in travis we should just keep an assert.\n\nMakes sense, added back an optional abort (on by default), so it will still be guaranteed to fail travis, even in the presence of code that would catch std::logic_error exceptions",https://github.com/bitcoin/bitcoin/pull/11640#discussion_r154455316,154455316,src/sync.cpp
TheBlueMatt,2017-12-05T16:47:33Z,I believe abort() doesnt give the same useful stderr print as assert(false) does (specifically giving you a line number so you know at least where the crash was).,https://github.com/bitcoin/bitcoin/pull/11640#discussion_r155006871,155006871,src/sync.cpp
TheBlueMatt,2017-12-05T16:48:48Z,"something something ""Only used for unit testing DEBUG_LOCKORDER.""",https://github.com/bitcoin/bitcoin/pull/11640#discussion_r155007275,155007275,src/sync.h
TheBlueMatt,2017-12-05T17:34:42Z,Maybe just move this into AnnotatedMixin instead of making everything two classes on top of each other?,https://github.com/bitcoin/bitcoin/pull/11640#discussion_r155020670,155020670,src/sync.h
TheBlueMatt,2017-12-05T17:40:28Z,"Isnt it considered bad practice to turn a #define into two statements (asking, I dont know, I've just always seen people bend over to avoid it).",https://github.com/bitcoin/bitcoin/pull/11640#discussion_r155022256,155022256,src/sync.h
ryanofsky,2017-12-07T15:58:51Z,Addressed in 9050eff728bd1bbd23aeccfd8cf70b0c999a8e4a. (I added fprintf() before the abort following the pattern from AssertLockHeldInternal/AssertLockNotHeldInternal. I can switch to assert though if you prefer that.),https://github.com/bitcoin/bitcoin/pull/11640#discussion_r155562503,155562503,src/sync.cpp
ryanofsky,2017-12-07T16:01:42Z,Noted in 9050eff728bd1bbd23aeccfd8cf70b0c999a8e4a,https://github.com/bitcoin/bitcoin/pull/11640#discussion_r155563335,155563335,src/sync.h
ryanofsky,2017-12-07T16:01:56Z,Done in 396911e0e15129c218634c868acb747e423e88d9.,https://github.com/bitcoin/bitcoin/pull/11640#discussion_r155563403,155563403,src/sync.h
ryanofsky,2017-12-07T16:18:15Z,"It's bad practice generally because it can break usages like `if (cond) MY_MACRO();`, and the normal workaround is to wrap the statements in a `do {...} while(0)`. But the concern doesn't apply to variable declarations like this.",https://github.com/bitcoin/bitcoin/pull/11640#discussion_r155568284,155568284,src/sync.h
TheBlueMatt,2017-12-08T15:38:32Z,"Fair enough, I just missed why you changed it, but see it now.",https://github.com/bitcoin/bitcoin/pull/11640#discussion_r155805322,155805322,src/sync.h
laanwj,2018-03-01T22:57:01Z,"I don't like replacing the standard C++11 lock usage here, and in other places, with the macros. The original code seems easier to understand at least.\n\nEdit: so I get that this helps with the lock dependency checking, but I wonder if there isn't a way that can be done, with keeping the code closer to the original C++11 syntax.",https://github.com/bitcoin/bitcoin/pull/11640#discussion_r171720786,171720786,src/httpserver.cpp
ryanofsky,2018-03-01T23:17:10Z,"> I don't like replacing the standard C++11 lock usage here, and in other places, with the macros\n\nIt doesn't matter to me which style is used, but the macros provide lock order checking which @TheBlueMatt seemed to think was important. It would be helpful if there could be a guideline for when to use LOCK macros vs standard locks. Is the guideline that you'd recommend just to avoid macros whe",https://github.com/bitcoin/bitcoin/pull/11640#discussion_r171724782,171724782,src/httpserver.cpp
TheBlueMatt,2018-03-02T16:18:25Z,"We're in a not-great state right now where we have automated lock-checking code, but a bunch of places dont bother to use it. In practice most of those places are really limited use and ""obviously-correct"" (tm), but that only makes it much easier to break in the future, and making exceptions like that are kinda bad. I would strongly prefer we have a consistent syntax across the codebase that uses ",https://github.com/bitcoin/bitcoin/pull/11640#discussion_r171891438,171891438,src/httpserver.cpp
ryanofsky,2018-03-02T16:37:40Z,"> I would strongly prefer we have a consistent syntax across the codebase that uses our lock-checking stuff vs moving back to an ad-hoc world.\n\nThis PR switches code to consistently use LOCK syntax, which Wladimir objects to in some cases (not clear which ones). \n\n@laanwj @TheBlueMatt, it'd be good to resolve the apparent disagreement about when to use `lock_guard` and when to use `LOCK`, ",https://github.com/bitcoin/bitcoin/pull/11640#discussion_r171896973,171896973,src/httpserver.cpp
laanwj,2018-03-02T18:07:49Z,"I agree the lock checking is important, but I dislike the non-standard macro syntax as it hides what is happening. So I wondered if there is an official way to 'decorate' the C++11 locking primitives, as I doubt we're the only project to do checking like this. If not, this change is fine with me...",https://github.com/bitcoin/bitcoin/pull/11640#discussion_r171920098,171920098,src/httpserver.cpp
MarcoFalke,2018-07-23T00:45:59Z,Please use ` #include <sync.h> ` instead.,https://github.com/bitcoin/bitcoin/pull/11640#discussion_r204262101,204262101,src/test/sync_tests.cpp
