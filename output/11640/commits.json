[
  {
    "sha": "41b88e93375d57db12da923f45f87b9a2db8e730",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWI4OGU5MzM3NWQ1N2RiMTJkYTkyM2Y0NWY4N2I5YTJkYjhlNzMw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-11-08T20:28:35Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-08-03T12:11:37Z"
      },
      "message": "Add unit test for DEBUG_LOCKORDER code",
      "tree": {
        "sha": "ca184f2dbeea04b7deea7f7f3dc5a73d66d51795",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca184f2dbeea04b7deea7f7f3dc5a73d66d51795"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41b88e93375d57db12da923f45f87b9a2db8e730",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41b88e93375d57db12da923f45f87b9a2db8e730",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41b88e93375d57db12da923f45f87b9a2db8e730",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41b88e93375d57db12da923f45f87b9a2db8e730/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b67354aa584c4aabae049a67767ac7b70e2d01a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b67354aa584c4aabae049a67767ac7b70e2d01a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b67354aa584c4aabae049a67767ac7b70e2d01a"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 56,
      "deletions": 1
    },
    "files": [
      {
        "sha": "516059917c7c6db838bb936ac16ca80827455def",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41b88e93375d57db12da923f45f87b9a2db8e730/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41b88e93375d57db12da923f45f87b9a2db8e730/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=41b88e93375d57db12da923f45f87b9a2db8e730",
        "patch": "@@ -81,6 +81,7 @@ BITCOIN_TESTS =\\\n   test/sigopcount_tests.cpp \\\n   test/skiplist_tests.cpp \\\n   test/streams_tests.cpp \\\n+  test/sync_tests.cpp \\\n   test/timedata_tests.cpp \\\n   test/torcontrol_tests.cpp \\\n   test/transaction_tests.cpp \\"
      },
      {
        "sha": "96ea61b211d3f89b9106d62377715f3b6e32e2f7",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41b88e93375d57db12da923f45f87b9a2db8e730/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41b88e93375d57db12da923f45f87b9a2db8e730/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=41b88e93375d57db12da923f45f87b9a2db8e730",
        "patch": "@@ -100,7 +100,11 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n         }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n-    assert(false);\n+    if (g_debug_lockorder_abort) {\n+        fprintf(stderr, \"Assertion failed: detected inconsistent lock order at %s:%i, details in debug log.\\n\", __FILE__, __LINE__);\n+        abort();\n+    }\n+    throw std::logic_error(\"potential deadlock detected\");\n }\n \n static void push_lock(void* c, const CLockLocation& locklocation)\n@@ -189,4 +193,6 @@ void DeleteLock(void* cs)\n     }\n }\n \n+bool g_debug_lockorder_abort = true;\n+\n #endif /* DEBUG_LOCKORDER */"
      },
      {
        "sha": "b8cb84f79feba701991182088085f7c1917ca247",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41b88e93375d57db12da923f45f87b9a2db8e730/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41b88e93375d57db12da923f45f87b9a2db8e730/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=41b88e93375d57db12da923f45f87b9a2db8e730",
        "patch": "@@ -77,6 +77,13 @@ std::string LocksHeld();\n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) ASSERT_EXCLUSIVE_LOCK(cs);\n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs);\n void DeleteLock(void* cs);\n+\n+/**\n+ * Call abort() if a potential lock order deadlock bug is detected, instead of\n+ * just logging information and throwing a logic_error. Defaults to true, and\n+ * set to false in DEBUG_LOCKORDER unit tests.\n+ */\n+extern bool g_debug_lockorder_abort;\n #else\n void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}\n void static inline LeaveCritical() {}"
      },
      {
        "sha": "2e0951c3a955a697d048fa6f478c2b260f027123",
        "filename": "src/test/sync_tests.cpp",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41b88e93375d57db12da923f45f87b9a2db8e730/src/test/sync_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41b88e93375d57db12da923f45f87b9a2db8e730/src/test/sync_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sync_tests.cpp?ref=41b88e93375d57db12da923f45f87b9a2db8e730",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2012-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sync.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(sync_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(potential_deadlock_detected)\n+{\n+    #ifdef DEBUG_LOCKORDER\n+    bool prev = g_debug_lockorder_abort;\n+    g_debug_lockorder_abort = false;\n+    #endif\n+\n+    CCriticalSection mutex1, mutex2;\n+    {\n+        LOCK2(mutex1, mutex2);\n+    }\n+    bool error_thrown = false;\n+    try {\n+        LOCK2(mutex2, mutex1);\n+    } catch (const std::logic_error& e) {\n+        BOOST_CHECK_EQUAL(e.what(), \"potential deadlock detected\");\n+        error_thrown = true;\n+    }\n+    #ifdef DEBUG_LOCKORDER\n+    BOOST_CHECK(error_thrown);\n+    #else\n+    BOOST_CHECK(!error_thrown);\n+    #endif\n+\n+    #ifdef DEBUG_LOCKORDER\n+    g_debug_lockorder_abort = prev;\n+    #endif\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "ba1f095aadf29bddb0bd8176d2e0b908f92a5623",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTFmMDk1YWFkZjI5YmRkYjBiZDgxNzZkMmUwYjkwOGY5MmE1NjIz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-07T17:01:53Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-08-03T12:11:37Z"
      },
      "message": "MOVEONLY Move AnnotatedMixin declaration\n\nMove AnnotatedMixin closer to where it's used, and after the DEBUG_LOCKORDER\nfunction declarations so it can call them.",
      "tree": {
        "sha": "21c9b0b8ca96ecad2bdf0d339078c456eaa32cae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21c9b0b8ca96ecad2bdf0d339078c456eaa32cae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba1f095aadf29bddb0bd8176d2e0b908f92a5623",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba1f095aadf29bddb0bd8176d2e0b908f92a5623",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba1f095aadf29bddb0bd8176d2e0b908f92a5623",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba1f095aadf29bddb0bd8176d2e0b908f92a5623/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41b88e93375d57db12da923f45f87b9a2db8e730",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41b88e93375d57db12da923f45f87b9a2db8e730",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41b88e93375d57db12da923f45f87b9a2db8e730"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 24,
      "deletions": 24
    },
    "files": [
      {
        "sha": "c9a950799e88e75c9e90df416cf5afa9704ebc19",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba1f095aadf29bddb0bd8176d2e0b908f92a5623/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba1f095aadf29bddb0bd8176d2e0b908f92a5623/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=ba1f095aadf29bddb0bd8176d2e0b908f92a5623",
        "patch": "@@ -46,30 +46,6 @@ LEAVE_CRITICAL_SECTION(mutex); // no RAII\n //                           //\n ///////////////////////////////\n \n-/**\n- * Template mixin that adds -Wthread-safety locking\n- * annotations to a subset of the mutex API.\n- */\n-template <typename PARENT>\n-class LOCKABLE AnnotatedMixin : public PARENT\n-{\n-public:\n-    void lock() EXCLUSIVE_LOCK_FUNCTION()\n-    {\n-        PARENT::lock();\n-    }\n-\n-    void unlock() UNLOCK_FUNCTION()\n-    {\n-        PARENT::unlock();\n-    }\n-\n-    bool try_lock() EXCLUSIVE_TRYLOCK_FUNCTION(true)\n-    {\n-        return PARENT::try_lock();\n-    }\n-};\n-\n #ifdef DEBUG_LOCKORDER\n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false);\n void LeaveCritical();\n@@ -94,6 +70,30 @@ void static inline DeleteLock(void* cs) {}\n #define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n #define AssertLockNotHeld(cs) AssertLockNotHeldInternal(#cs, __FILE__, __LINE__, &cs)\n \n+/**\n+ * Template mixin that adds -Wthread-safety locking\n+ * annotations to a subset of the mutex API.\n+ */\n+template <typename PARENT>\n+class LOCKABLE AnnotatedMixin : public PARENT\n+{\n+public:\n+    void lock() EXCLUSIVE_LOCK_FUNCTION()\n+    {\n+        PARENT::lock();\n+    }\n+\n+    void unlock() UNLOCK_FUNCTION()\n+    {\n+        PARENT::unlock();\n+    }\n+\n+    bool try_lock() EXCLUSIVE_TRYLOCK_FUNCTION(true)\n+    {\n+        return PARENT::try_lock();\n+    }\n+};\n+\n /**\n  * Wrapped mutex: supports recursive locking, but no waiting\n  * TODO: We should move away from using the recursive lock by default."
      }
    ]
  },
  {
    "sha": "1382913e61f5db6ba849b1e261e8aefcd5a1ae68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzgyOTEzZTYxZjVkYjZiYTg0OWIxZTI2MWU4YWVmY2Q1YTFhZTY4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-11-08T21:21:13Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-08-03T12:11:37Z"
      },
      "message": "Make LOCK, LOCK2, TRY_LOCK work with CWaitableCriticalSection\n\nThey should also work with any other mutex type which std::unique_lock\nsupports.\n\nThere is no change in behavior for current code that calls these macros with\nCCriticalSection mutexes.",
      "tree": {
        "sha": "70ee8cc588dfd447f61c5153da75fbc2bc2d62e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70ee8cc588dfd447f61c5153da75fbc2bc2d62e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1382913e61f5db6ba849b1e261e8aefcd5a1ae68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1382913e61f5db6ba849b1e261e8aefcd5a1ae68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1382913e61f5db6ba849b1e261e8aefcd5a1ae68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1382913e61f5db6ba849b1e261e8aefcd5a1ae68/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba1f095aadf29bddb0bd8176d2e0b908f92a5623",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba1f095aadf29bddb0bd8176d2e0b908f92a5623",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba1f095aadf29bddb0bd8176d2e0b908f92a5623"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 53,
      "deletions": 37
    },
    "files": [
      {
        "sha": "339a7e2c1871ae727892110feb45fed1583bfcab",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 33,
        "deletions": 28,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1382913e61f5db6ba849b1e261e8aefcd5a1ae68/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1382913e61f5db6ba849b1e261e8aefcd5a1ae68/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=1382913e61f5db6ba849b1e261e8aefcd5a1ae68",
        "patch": "@@ -71,13 +71,17 @@ void static inline DeleteLock(void* cs) {}\n #define AssertLockNotHeld(cs) AssertLockNotHeldInternal(#cs, __FILE__, __LINE__, &cs)\n \n /**\n- * Template mixin that adds -Wthread-safety locking\n- * annotations to a subset of the mutex API.\n+ * Template mixin that adds -Wthread-safety locking annotations and lock order\n+ * checking to a subset of the mutex API.\n  */\n template <typename PARENT>\n class LOCKABLE AnnotatedMixin : public PARENT\n {\n public:\n+    ~AnnotatedMixin() {\n+        DeleteLock((void*)this);\n+    }\n+\n     void lock() EXCLUSIVE_LOCK_FUNCTION()\n     {\n         PARENT::lock();\n@@ -92,19 +96,15 @@ class LOCKABLE AnnotatedMixin : public PARENT\n     {\n         return PARENT::try_lock();\n     }\n+\n+    using UniqueLock = std::unique_lock<PARENT>;\n };\n \n /**\n  * Wrapped mutex: supports recursive locking, but no waiting\n  * TODO: We should move away from using the recursive lock by default.\n  */\n-class CCriticalSection : public AnnotatedMixin<std::recursive_mutex>\n-{\n-public:\n-    ~CCriticalSection() {\n-        DeleteLock((void*)this);\n-    }\n-};\n+typedef AnnotatedMixin<std::recursive_mutex> CCriticalSection;\n \n /** Wrapped mutex: supports waiting but not recursive locking */\n typedef AnnotatedMixin<std::mutex> CWaitableCriticalSection;\n@@ -119,48 +119,47 @@ typedef std::unique_lock<std::mutex> WaitableLock;\n void PrintLockContention(const char* pszName, const char* pszFile, int nLine);\n #endif\n \n-/** Wrapper around std::unique_lock<CCriticalSection> */\n-class SCOPED_LOCKABLE CCriticalBlock\n+/** Wrapper around std::unique_lock style lock for Mutex. */\n+template <typename Mutex, typename Base = typename Mutex::UniqueLock>\n+class SCOPED_LOCKABLE CCriticalBlock : public Base\n {\n private:\n-    std::unique_lock<CCriticalSection> lock;\n-\n     void Enter(const char* pszName, const char* pszFile, int nLine)\n     {\n-        EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()));\n+        EnterCritical(pszName, pszFile, nLine, (void*)(Base::mutex()));\n #ifdef DEBUG_LOCKCONTENTION\n-        if (!lock.try_lock()) {\n+        if (!Base::try_lock()) {\n             PrintLockContention(pszName, pszFile, nLine);\n #endif\n-            lock.lock();\n+            Base::lock();\n #ifdef DEBUG_LOCKCONTENTION\n         }\n #endif\n     }\n \n     bool TryEnter(const char* pszName, const char* pszFile, int nLine)\n     {\n-        EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()), true);\n-        lock.try_lock();\n-        if (!lock.owns_lock())\n+        EnterCritical(pszName, pszFile, nLine, (void*)(Base::mutex()), true);\n+        Base::try_lock();\n+        if (!Base::owns_lock())\n             LeaveCritical();\n-        return lock.owns_lock();\n+        return Base::owns_lock();\n     }\n \n public:\n-    CCriticalBlock(CCriticalSection& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : lock(mutexIn, std::defer_lock)\n+    CCriticalBlock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : Base(mutexIn, std::defer_lock)\n     {\n         if (fTry)\n             TryEnter(pszName, pszFile, nLine);\n         else\n             Enter(pszName, pszFile, nLine);\n     }\n \n-    CCriticalBlock(CCriticalSection* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(pmutexIn)\n+    CCriticalBlock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(pmutexIn)\n     {\n         if (!pmutexIn) return;\n \n-        lock = std::unique_lock<CCriticalSection>(*pmutexIn, std::defer_lock);\n+        *static_cast<Base*>(this) = Base(*pmutexIn, std::defer_lock);\n         if (fTry)\n             TryEnter(pszName, pszFile, nLine);\n         else\n@@ -169,22 +168,28 @@ class SCOPED_LOCKABLE CCriticalBlock\n \n     ~CCriticalBlock() UNLOCK_FUNCTION()\n     {\n-        if (lock.owns_lock())\n+        if (Base::owns_lock())\n             LeaveCritical();\n     }\n \n     operator bool()\n     {\n-        return lock.owns_lock();\n+        return Base::owns_lock();\n     }\n };\n \n+template<typename MutexArg>\n+using DebugLock = CCriticalBlock<typename std::remove_reference<typename std::remove_pointer<MutexArg>::type>::type>;\n+\n #define PASTE(x, y) x ## y\n #define PASTE2(x, y) PASTE(x, y)\n \n-#define LOCK(cs) CCriticalBlock PASTE2(criticalblock, __COUNTER__)(cs, #cs, __FILE__, __LINE__)\n-#define LOCK2(cs1, cs2) CCriticalBlock criticalblock1(cs1, #cs1, __FILE__, __LINE__), criticalblock2(cs2, #cs2, __FILE__, __LINE__)\n-#define TRY_LOCK(cs, name) CCriticalBlock name(cs, #cs, __FILE__, __LINE__, true)\n+#define LOCK(cs) DebugLock<decltype(cs)> PASTE2(criticalblock, __COUNTER__)(cs, #cs, __FILE__, __LINE__)\n+#define LOCK2(cs1, cs2)                                               \\\n+    DebugLock<decltype(cs1)> criticalblock1(cs1, #cs1, __FILE__, __LINE__); \\\n+    DebugLock<decltype(cs2)> criticalblock2(cs2, #cs2, __FILE__, __LINE__);\n+#define TRY_LOCK(cs, name) DebugLock<decltype(cs)> name(cs, #cs, __FILE__, __LINE__, true)\n+#define WAIT_LOCK(cs, name) DebugLock<decltype(cs)> name(cs, #cs, __FILE__, __LINE__)\n \n #define ENTER_CRITICAL_SECTION(cs)                            \\\n     {                                                         \\"
      },
      {
        "sha": "539e2ff3ab4a9fb50d6912c8cb578acc6e3340a8",
        "filename": "src/test/sync_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 9,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1382913e61f5db6ba849b1e261e8aefcd5a1ae68/src/test/sync_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1382913e61f5db6ba849b1e261e8aefcd5a1ae68/src/test/sync_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sync_tests.cpp?ref=1382913e61f5db6ba849b1e261e8aefcd5a1ae68",
        "patch": "@@ -7,16 +7,10 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(sync_tests, BasicTestingSetup)\n-\n-BOOST_AUTO_TEST_CASE(potential_deadlock_detected)\n+namespace {\n+template <typename MutexType>\n+void TestPotentialDeadLockDetected(MutexType& mutex1, MutexType& mutex2)\n {\n-    #ifdef DEBUG_LOCKORDER\n-    bool prev = g_debug_lockorder_abort;\n-    g_debug_lockorder_abort = false;\n-    #endif\n-\n-    CCriticalSection mutex1, mutex2;\n     {\n         LOCK2(mutex1, mutex2);\n     }\n@@ -32,6 +26,23 @@ BOOST_AUTO_TEST_CASE(potential_deadlock_detected)\n     #else\n     BOOST_CHECK(!error_thrown);\n     #endif\n+}\n+} // namespace\n+\n+BOOST_FIXTURE_TEST_SUITE(sync_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(potential_deadlock_detected)\n+{\n+    #ifdef DEBUG_LOCKORDER\n+    bool prev = g_debug_lockorder_abort;\n+    g_debug_lockorder_abort = false;\n+    #endif\n+\n+    CCriticalSection rmutex1, rmutex2;\n+    TestPotentialDeadLockDetected(rmutex1, rmutex2);\n+\n+    CWaitableCriticalSection mutex1, mutex2;\n+    TestPotentialDeadLockDetected(mutex1, mutex2);\n \n     #ifdef DEBUG_LOCKORDER\n     g_debug_lockorder_abort = prev;"
      }
    ]
  },
  {
    "sha": "9c4dc597ddc66acfd58a945a5ab11f833731abba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzRkYzU5N2RkYzY2YWNmZDU4YTk0NWE1YWIxMWY4MzM3MzFhYmJh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-11-08T22:07:40Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-08-03T12:11:37Z"
      },
      "message": "Use LOCK macros for non-recursive locks\n\nInstead of std::unique_lock.",
      "tree": {
        "sha": "65dd64eda8515ccc9245a1b4bb2211d60c620c07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65dd64eda8515ccc9245a1b4bb2211d60c620c07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c4dc597ddc66acfd58a945a5ab11f833731abba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4dc597ddc66acfd58a945a5ab11f833731abba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c4dc597ddc66acfd58a945a5ab11f833731abba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4dc597ddc66acfd58a945a5ab11f833731abba/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1382913e61f5db6ba849b1e261e8aefcd5a1ae68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1382913e61f5db6ba849b1e261e8aefcd5a1ae68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1382913e61f5db6ba849b1e261e8aefcd5a1ae68"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 26,
      "deletions": 24
    },
    "files": [
      {
        "sha": "ceddc7c2c5b288fddded35b33a231dc4a53de506",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=9c4dc597ddc66acfd58a945a5ab11f833731abba",
        "patch": "@@ -69,7 +69,7 @@ class WorkQueue\n {\n private:\n     /** Mutex protects entire object */\n-    std::mutex cs;\n+    CWaitableCriticalSection cs;\n     std::condition_variable cond;\n     std::deque<std::unique_ptr<WorkItem>> queue;\n     bool running;\n@@ -88,7 +88,7 @@ class WorkQueue\n     /** Enqueue a work item */\n     bool Enqueue(WorkItem* item)\n     {\n-        std::unique_lock<std::mutex> lock(cs);\n+        LOCK(cs);\n         if (queue.size() >= maxDepth) {\n             return false;\n         }\n@@ -102,7 +102,7 @@ class WorkQueue\n         while (true) {\n             std::unique_ptr<WorkItem> i;\n             {\n-                std::unique_lock<std::mutex> lock(cs);\n+                WAIT_LOCK(cs, lock);\n                 while (running && queue.empty())\n                     cond.wait(lock);\n                 if (!running)\n@@ -116,7 +116,7 @@ class WorkQueue\n     /** Interrupt and exit loops */\n     void Interrupt()\n     {\n-        std::unique_lock<std::mutex> lock(cs);\n+        LOCK(cs);\n         running = false;\n         cond.notify_all();\n     }"
      },
      {
        "sha": "8ab5790aea5709a607f048c6c121e6e01e150b05",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9c4dc597ddc66acfd58a945a5ab11f833731abba",
        "patch": "@@ -566,7 +566,7 @@ static void BlockNotifyGenesisWait(bool, const CBlockIndex *pBlockIndex)\n {\n     if (pBlockIndex != nullptr) {\n         {\n-            WaitableLock lock_GenesisWait(cs_GenesisWait);\n+            LOCK(cs_GenesisWait);\n             fHaveGenesis = true;\n         }\n         condvar_GenesisWait.notify_all();\n@@ -1660,7 +1660,7 @@ bool AppInitMain()\n \n     // Wait for genesis block to be processed\n     {\n-        WaitableLock lock(cs_GenesisWait);\n+        WAIT_LOCK(cs_GenesisWait, lock);\n         // We previously could hang here if StartShutdown() is called prior to\n         // ThreadImport getting started, so instead we just wait on a timer to\n         // check ShutdownRequested() regularly."
      },
      {
        "sha": "37b452a71e0d0c1088cf7b28a5091f839f4da0d3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9c4dc597ddc66acfd58a945a5ab11f833731abba",
        "patch": "@@ -2064,7 +2064,7 @@ void CConnman::ThreadMessageHandler()\n                 pnode->Release();\n         }\n \n-        std::unique_lock<std::mutex> lock(mutexMsgProc);\n+        WAIT_LOCK(mutexMsgProc, lock);\n         if (!fMoreWork) {\n             condMsgProc.wait_until(lock, std::chrono::steady_clock::now() + std::chrono::milliseconds(100), [this] { return fMsgProcWake; });\n         }\n@@ -2346,7 +2346,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     flagInterruptMsgProc = false;\n \n     {\n-        std::unique_lock<std::mutex> lock(mutexMsgProc);\n+        LOCK(mutexMsgProc);\n         fMsgProcWake = false;\n     }\n "
      },
      {
        "sha": "5c47f9695c4fb84c1140ff37dbc00d9260ef2c60",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9c4dc597ddc66acfd58a945a5ab11f833731abba",
        "patch": "@@ -425,7 +425,7 @@ class CConnman\n     bool fMsgProcWake;\n \n     std::condition_variable condMsgProc;\n-    std::mutex mutexMsgProc;\n+    CWaitableCriticalSection mutexMsgProc;\n     std::atomic<bool> flagInterruptMsgProc;\n \n     CThreadInterrupt interruptNet;"
      },
      {
        "sha": "7f05bcf9a2078cebfdcfc4b527ac26096491564d",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=9c4dc597ddc66acfd58a945a5ab11f833731abba",
        "patch": "@@ -12,6 +12,7 @@\n #include <wincrypt.h>\n #endif\n #include <logging.h>  // for LogPrint()\n+#include <sync.h>     // for WAIT_LOCK\n #include <utiltime.h> // for GetTime()\n \n #include <stdlib.h>\n@@ -295,7 +296,7 @@ void RandAddSeedSleep()\n }\n \n \n-static std::mutex cs_rng_state;\n+static CWaitableCriticalSection cs_rng_state;\n static unsigned char rng_state[32] = {0};\n static uint64_t rng_counter = 0;\n \n@@ -305,7 +306,7 @@ static void AddDataToRng(void* data, size_t len) {\n     hasher.Write((const unsigned char*)data, len);\n     unsigned char buf[64];\n     {\n-        std::unique_lock<std::mutex> lock(cs_rng_state);\n+        WAIT_LOCK(cs_rng_state, lock);\n         hasher.Write(rng_state, sizeof(rng_state));\n         hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n         ++rng_counter;\n@@ -337,7 +338,7 @@ void GetStrongRandBytes(unsigned char* out, int num)\n \n     // Combine with and update state\n     {\n-        std::unique_lock<std::mutex> lock(cs_rng_state);\n+        WAIT_LOCK(cs_rng_state, lock);\n         hasher.Write(rng_state, sizeof(rng_state));\n         hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n         ++rng_counter;"
      },
      {
        "sha": "3aa01914a66f6e5ac4bca97561a1c121521d7e54",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=9c4dc597ddc66acfd58a945a5ab11f833731abba",
        "patch": "@@ -49,7 +49,7 @@ struct CUpdatedBlock\n     int height;\n };\n \n-static std::mutex cs_blockchange;\n+static CWaitableCriticalSection cs_blockchange;\n static std::condition_variable cond_blockchange;\n static CUpdatedBlock latestblock;\n \n@@ -224,7 +224,7 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n \n     CUpdatedBlock block;\n     {\n-        std::unique_lock<std::mutex> lock(cs_blockchange);\n+        WAIT_LOCK(cs_blockchange, lock);\n         block = latestblock;\n         if(timeout)\n             cond_blockchange.wait_for(lock, std::chrono::milliseconds(timeout), [&block]{return latestblock.height != block.height || latestblock.hash != block.hash || !IsRPCRunning(); });\n@@ -266,7 +266,7 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n \n     CUpdatedBlock block;\n     {\n-        std::unique_lock<std::mutex> lock(cs_blockchange);\n+        WAIT_LOCK(cs_blockchange, lock);\n         if(timeout)\n             cond_blockchange.wait_for(lock, std::chrono::milliseconds(timeout), [&hash]{return latestblock.hash == hash || !IsRPCRunning();});\n         else\n@@ -309,7 +309,7 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n \n     CUpdatedBlock block;\n     {\n-        std::unique_lock<std::mutex> lock(cs_blockchange);\n+        WAIT_LOCK(cs_blockchange, lock);\n         if(timeout)\n             cond_blockchange.wait_for(lock, std::chrono::milliseconds(timeout), [&height]{return latestblock.height >= height || !IsRPCRunning();});\n         else"
      },
      {
        "sha": "59bf0c98ab5930b4027c7179fc5452163fc5ead6",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=9c4dc597ddc66acfd58a945a5ab11f833731abba",
        "patch": "@@ -470,7 +470,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         {\n             checktxtime = std::chrono::steady_clock::now() + std::chrono::minutes(1);\n \n-            WaitableLock lock(g_best_block_mutex);\n+            WAIT_LOCK(g_best_block_mutex, lock);\n             while (g_best_block == hashWatchedChain && IsRPCRunning())\n             {\n                 if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout)"
      },
      {
        "sha": "7306e7285e21233d4d2645ec4a994b01730b8a08",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=9c4dc597ddc66acfd58a945a5ab11f833731abba",
        "patch": "@@ -112,9 +112,6 @@ typedef AnnotatedMixin<std::mutex> CWaitableCriticalSection;\n /** Just a typedef for std::condition_variable, can be wrapped later if desired */\n typedef std::condition_variable CConditionVariable;\n \n-/** Just a typedef for std::unique_lock, can be wrapped later if desired */\n-typedef std::unique_lock<std::mutex> WaitableLock;\n-\n #ifdef DEBUG_LOCKCONTENTION\n void PrintLockContention(const char* pszName, const char* pszFile, int nLine);\n #endif"
      },
      {
        "sha": "1efc6f311430a6bd512873eef4ce9f9408566487",
        "filename": "src/threadinterrupt.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/threadinterrupt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/threadinterrupt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadinterrupt.cpp?ref=9c4dc597ddc66acfd58a945a5ab11f833731abba",
        "patch": "@@ -5,6 +5,8 @@\n \n #include <threadinterrupt.h>\n \n+#include <sync.h>\n+\n CThreadInterrupt::CThreadInterrupt() : flag(false) {}\n \n CThreadInterrupt::operator bool() const\n@@ -20,15 +22,15 @@ void CThreadInterrupt::reset()\n void CThreadInterrupt::operator()()\n {\n     {\n-        std::unique_lock<std::mutex> lock(mut);\n+        LOCK(mut);\n         flag.store(true, std::memory_order_release);\n     }\n     cond.notify_all();\n }\n \n bool CThreadInterrupt::sleep_for(std::chrono::milliseconds rel_time)\n {\n-    std::unique_lock<std::mutex> lock(mut);\n+    WAIT_LOCK(mut, lock);\n     return !cond.wait_for(lock, rel_time, [this]() { return flag.load(std::memory_order_acquire); });\n }\n "
      },
      {
        "sha": "8ba6b12367894384b44a4282a17760cc085a36c1",
        "filename": "src/threadinterrupt.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/threadinterrupt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/threadinterrupt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadinterrupt.h?ref=9c4dc597ddc66acfd58a945a5ab11f833731abba",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_THREADINTERRUPT_H\n #define BITCOIN_THREADINTERRUPT_H\n \n+#include <sync.h>\n+\n #include <atomic>\n #include <chrono>\n #include <condition_variable>\n@@ -28,7 +30,7 @@ class CThreadInterrupt\n \n private:\n     std::condition_variable cond;\n-    std::mutex mut;\n+    CWaitableCriticalSection mut;\n     std::atomic<bool> flag;\n };\n "
      },
      {
        "sha": "2d6ac4b234fcf56b83a4ef93ed77d51780468d50",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4dc597ddc66acfd58a945a5ab11f833731abba/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9c4dc597ddc66acfd58a945a5ab11f833731abba",
        "patch": "@@ -2254,7 +2254,7 @@ void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainPar\n     mempool.AddTransactionsUpdated(1);\n \n     {\n-        WaitableLock lock(g_best_block_mutex);\n+        LOCK(g_best_block_mutex);\n         g_best_block = pindexNew->GetBlockHash();\n         g_best_block_cv.notify_all();\n     }"
      }
    ]
  }
]