[
  {
    "sha": "af5d1b5f4a7b56628a76af21284c258d845894f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjVkMWI1ZjRhN2I1NjYyOGE3NmFmMjEyODRjMjU4ZDg0NTg5NGYw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-03-11T15:15:45Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-06-25T13:13:02Z"
      },
      "message": "Add ChaCha20Poly1305@Bitcoin AEAD implementation",
      "tree": {
        "sha": "1a86118f130acfed029545110e685b7dc1bdd4e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a86118f130acfed029545110e685b7dc1bdd4e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af5d1b5f4a7b56628a76af21284c258d845894f0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAl0SHd8ACgkQHrd2uwPH\nki2dyg//axt+JV0uEk/eohKyqgppIYOfflzXQe+cwJYA1IUnZujKcscRz84jCbhP\nw9cwwEZF885u+APsktglZbRzLzy9L66O25Hk2X4oF3bkENZOrY+ol2GmkQ+gFK3c\n0bpYiyXRCz4DrQG0wIXQ9bPoYxR1vsnBsomzXsDlloPMXG7geNmXoIzXWVV7WP/E\nuEItmI1jL5HHjMYLQ/slBEnqXesq3SWNGpHbUAGosW58MQiMcQ4g0WWA5eV7/kBY\nO2jK8CosEZ9lASSolKsikE3F5ifo/85HvgmwcZVxV4klDmlcv4p2c6nlJVQAPfhg\n9zRVjTiYCHtkKWVS27BNbnViAw7xCzP4ECoFNqKdIcdxWr2ckJe7UUqtYKL2IA+s\n7MTZ5sBlq38qWlh8Y+GkI7Ctdvs3u/xPLqkuZ5Y040+iyMcKLBuhbg+TNxEx5FsK\nw4q4zdhGNki7ts0IjkPgRlbfC1aLzO8IVQr2e5ad1YEcmEwyLsUooh1VvyC/THex\n6RiZ3azcvdQbll2E4Fh//1FM/q1+c0O4JXnGpHPGOxJrJHqtrWhn90mvNjR0Rx/U\nqI9dZPsnLEF7kCgfIb6PMNecnDcCVmajXtUpXfdx28PVqVvqYgVdB0GO6RGqy8om\nYINtXNxDgc9LRVADxiAihXt3IxKhdKMsoQYNbfq3HwIyNH9nwY0=\n=cYrA\n-----END PGP SIGNATURE-----",
        "payload": "tree 1a86118f130acfed029545110e685b7dc1bdd4e1\nparent 332c6134bb15384e5b91c631e821fe52a591d3bc\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1552317345 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1561468382 +0200\n\nAdd ChaCha20Poly1305@Bitcoin AEAD implementation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af5d1b5f4a7b56628a76af21284c258d845894f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af5d1b5f4a7b56628a76af21284c258d845894f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af5d1b5f4a7b56628a76af21284c258d845894f0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "332c6134bb15384e5b91c631e821fe52a591d3bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/332c6134bb15384e5b91c631e821fe52a591d3bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/332c6134bb15384e5b91c631e821fe52a591d3bc"
      }
    ],
    "stats": {
      "total": 276,
      "additions": 275,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9193793bbbf8175fca7116b491836d93b5193d36",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af5d1b5f4a7b56628a76af21284c258d845894f0/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af5d1b5f4a7b56628a76af21284c258d845894f0/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=af5d1b5f4a7b56628a76af21284c258d845894f0",
        "patch": "@@ -351,6 +351,8 @@ crypto_libbitcoin_crypto_base_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/aes.cpp \\\n   crypto/aes.h \\\n+  crypto/chacha_poly_aead.h \\\n+  crypto/chacha_poly_aead.cpp \\\n   crypto/chacha20.h \\\n   crypto/chacha20.cpp \\\n   crypto/common.h \\\n@@ -613,7 +615,7 @@ bitcoin_wallet_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(EVENT_PTHREAD\n # bitcoinconsensus library #\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n-libbitcoinconsensus_la_SOURCES = $(crypto_libbitcoin_crypto_base_a_SOURCES) $(libbitcoin_consensus_a_SOURCES)\n+libbitcoinconsensus_la_SOURCES = support/cleanse.cpp $(crypto_libbitcoin_crypto_base_a_SOURCES) $(libbitcoin_consensus_a_SOURCES)\n \n if GLIBC_BACK_COMPAT\n   libbitcoinconsensus_la_SOURCES += compat/glibc_compat.cpp"
      },
      {
        "sha": "6a3d43deb15e8754ed5aea172721682c33fa27c7",
        "filename": "src/crypto/chacha_poly_aead.cpp",
        "status": "added",
        "additions": 126,
        "deletions": 0,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af5d1b5f4a7b56628a76af21284c258d845894f0/src/crypto/chacha_poly_aead.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af5d1b5f4a7b56628a76af21284c258d845894f0/src/crypto/chacha_poly_aead.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/chacha_poly_aead.cpp?ref=af5d1b5f4a7b56628a76af21284c258d845894f0",
        "patch": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(seqnr_payload);\n+\n+    // block counter 0 for the poly1305 key\n+    // use lower 32bytes for the poly1305 key\n+    // (throws away 32 unused bytes (upper 32) from this ChaCha20 round)\n+    m_chacha_main.Seek(0);\n+    m_chacha_main.Crypt(poly_key, poly_key, sizeof(poly_key));\n+\n+    // if decrypting, verify the tag prior to decryption\n+    if (!is_encrypt) {\n+        const unsigned char* tag = src + src_len - POLY1305_TAGLEN;\n+        poly1305_auth(expected_tag, src, src_len - POLY1305_TAGLEN, poly_key);\n+\n+        // constant time compare the calculated MAC with the provided MAC\n+        if (timingsafe_bcmp(expected_tag, tag, POLY1305_TAGLEN) != 0) {\n+            memory_cleanse(expected_tag, sizeof(expected_tag));\n+            memory_cleanse(poly_key, sizeof(poly_key));\n+            return false;\n+        }\n+        memory_cleanse(expected_tag, sizeof(expected_tag));\n+        // MAC has been successfully verified, make sure we don't covert it in decryption\n+        src_len -= POLY1305_TAGLEN;\n+    }\n+\n+    // calculate and cache the next 64byte keystream block if requested sequence number is not yet the cache\n+    if (m_cached_aad_seqnr != seqnr_aad) {\n+        m_cached_aad_seqnr = seqnr_aad;\n+        m_chacha_header.SetIV(seqnr_aad);\n+        m_chacha_header.Seek(0);\n+        m_chacha_header.Keystream(m_aad_keystream_buffer, CHACHA20_ROUND_OUTPUT);\n+    }\n+    // crypt the AAD (3 bytes message length) with given position in AAD cipher instance keystream\n+    dest[0] = src[0] ^ m_aad_keystream_buffer[aad_pos];\n+    dest[1] = src[1] ^ m_aad_keystream_buffer[aad_pos + 1];\n+    dest[2] = src[2] ^ m_aad_keystream_buffer[aad_pos + 2];\n+\n+    // Set the playload ChaCha instance block counter to 1 and crypt the payload\n+    m_chacha_main.Seek(1);\n+    m_chacha_main.Crypt(src + CHACHA20_POLY1305_AEAD_AAD_LEN, dest + CHACHA20_POLY1305_AEAD_AAD_LEN, src_len - CHACHA20_POLY1305_AEAD_AAD_LEN);\n+\n+    // If encrypting, calculate and append tag\n+    if (is_encrypt) {\n+        // the poly1305 tag expands over the AAD (3 bytes length) & encrypted payload\n+        poly1305_auth(dest + src_len, dest, src_len, poly_key);\n+    }\n+\n+    // cleanse no longer required MAC and polykey\n+    memory_cleanse(poly_key, sizeof(poly_key));\n+    return true;\n+}\n+\n+bool ChaCha20Poly1305AEAD::GetLength(uint32_t* len24_out, uint64_t seqnr_aad, int aad_pos, const uint8_t* ciphertext)\n+{\n+    // enforce valid aad position to avoid accessing outside of the 64byte keystream cache\n+    // (there is space for 21 times 3 bytes)\n+    assert(aad_pos >= 0 && aad_pos < CHACHA20_ROUND_OUTPUT - CHACHA20_POLY1305_AEAD_AAD_LEN);\n+    if (m_cached_aad_seqnr != seqnr_aad) {\n+        // we need to calculate the 64 keystream bytes since we reached a new aad sequence number\n+        m_cached_aad_seqnr = seqnr_aad;\n+        m_chacha_header.SetIV(seqnr_aad);                                         // use LE for the nonce\n+        m_chacha_header.Seek(0);                                                  // block counter 0\n+        m_chacha_header.Keystream(m_aad_keystream_buffer, CHACHA20_ROUND_OUTPUT); // write keystream to the cache\n+    }\n+\n+    // decrypt the ciphertext length by XORing the right position of the 64byte keystream cache with the ciphertext\n+    *len24_out = (ciphertext[0] ^ m_aad_keystream_buffer[aad_pos + 0]) |\n+                 (ciphertext[1] ^ m_aad_keystream_buffer[aad_pos + 1]) << 8 |\n+                 (ciphertext[2] ^ m_aad_keystream_buffer[aad_pos + 2]) << 16;\n+\n+    return true;\n+}"
      },
      {
        "sha": "b3ba781cddda714511b5d7c816c00745cefd905a",
        "filename": "src/crypto/chacha_poly_aead.h",
        "status": "added",
        "additions": 146,
        "deletions": 0,
        "changes": 146,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af5d1b5f4a7b56628a76af21284c258d845894f0/src/crypto/chacha_poly_aead.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af5d1b5f4a7b56628a76af21284c258d845894f0/src/crypto/chacha_poly_aead.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/chacha_poly_aead.h?ref=af5d1b5f4a7b56628a76af21284c258d845894f0",
        "patch": "@@ -0,0 +1,146 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+#define BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+\n+#include <crypto/chacha20.h>\n+\n+#include <cmath>\n+\n+static constexpr int CHACHA20_POLY1305_AEAD_KEY_LEN = 32;\n+static constexpr int CHACHA20_POLY1305_AEAD_AAD_LEN = 3; /* 3 bytes length */\n+static constexpr int CHACHA20_ROUND_OUTPUT = 64;         /* 64 bytes per round */\n+static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n+\n+/* A AEAD class for ChaCha20-Poly1305@bitcoin.\n+ *\n+ * ChaCha20 is a stream cipher designed by Daniel Bernstein and described in\n+ * <ref>[http://cr.yp.to/chacha/chacha-20080128.pdf ChaCha20]</ref>. It operates\n+ * by permuting 128 fixed bits, 128 or 256 bits of key, a 64 bit nonce and a 64\n+ * bit counter into 64 bytes of output. This output is used as a keystream, with\n+ * any unused bytes simply discarded.\n+ *\n+ * Poly1305 <ref>[http://cr.yp.to/mac/poly1305-20050329.pdf Poly1305]</ref>, also\n+ * by Daniel Bernstein, is a one-time Carter-Wegman MAC that computes a 128 bit\n+ * integrity tag given a message and a single-use 256 bit secret key.\n+ *\n+ * The chacha20-poly1305@bitcoin combines these two primitives into an\n+ * authenticated encryption mode. The construction used is based on that proposed\n+ * for TLS by Adam Langley in\n+ * <ref>[http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03 \"ChaCha20\n+ * and Poly1305 based Cipher Suites for TLS\", Adam Langley]</ref>, but differs in\n+ * the layout of data passed to the MAC and in the addition of encryption of the\n+ * packet lengths.\n+ *\n+ * ==== Detailed Construction ====\n+ *\n+ * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+ * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+ * instances of chacha20.\n+ *\n+ * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n+ * byte packet length field and has its own sequence number. The second instance,\n+ * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n+ * (Authenticated Encryption with Associated Data) that is used to encrypt and\n+ * authenticate the entire packet.\n+ *\n+ * Two separate cipher instances are used here so as to keep the packet lengths\n+ * confidential but not create an oracle for the packet payload cipher by\n+ * decrypting and using the packet length prior to checking the MAC. By using an\n+ * independently-keyed cipher instance to encrypt the length, an active attacker\n+ * seeking to exploit the packet input handling as a decryption oracle can learn\n+ * nothing about the payload contents or its MAC (assuming key derivation,\n+ * ChaCha20 and Poly1305 are secure).\n+ *\n+ * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n+ * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n+ * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n+ * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n+ * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n+ * is used for encryption of the packet payload.\n+ *\n+ * ==== Packet Handling ====\n+ *\n+ * When receiving a packet, the length must be decrypted first. When 3 bytes of\n+ * ciphertext length have been received, they may be decrypted.\n+ *\n+ * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n+ * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n+ * thus be used 21 times (keystream caching).\n+ *\n+ * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n+ * K_1 defined by block counter 0, the length field sequence number in little\n+ * endian and a keystream position from 0 to 60.\n+ *\n+ * Once the entire packet has been received, the MAC MUST be checked before\n+ * decryption. A per-packet Poly1305 key is generated as described above and the\n+ * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n+ * packet length and the payload together. The calculated MAC is then compared in\n+ * constant time with the one appended to the packet and the packet decrypted\n+ * using ChaCha20 as described above (with K_2, the packet sequence number as\n+ * nonce and a starting block counter of 1).\n+ *\n+ * Detection of an invalid MAC MUST lead to immediate connection termination.\n+ *\n+ * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n+ * described above. Encrypt the packet payload (using K_2) and append it to the\n+ * encrypted length. Finally, calculate a MAC tag and append it.\n+ *\n+ * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n+ * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n+ * the receive channel.\n+ *\n+ * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n+ * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n+ * on the send channel.\n+ *\n+ * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n+ * general, therefore it is very likely that encrypted messages require not more\n+ * CPU cycles per bytes then the current unencrypted p2p message format\n+ * (ChaCha20/Poly1305 versus double SHA256).\n+ *\n+ * The initial packet sequence numbers are 0.\n+ *\n+ * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n+ * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n+ * {key, nonce}.\n+ *\n+ * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n+ * position-in-keystream} for encryption nor may it be used to encrypt more than\n+ * 2^70 bytes under the same {key, nonce}.\n+ *\n+ * We use message sequence numbers for both communication directions.\n+ */\n+\n+class ChaCha20Poly1305AEAD\n+{\n+private:\n+    ChaCha20 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n+    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n+    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n+    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+\n+public:\n+    ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n+\n+    explicit ChaCha20Poly1305AEAD(const ChaCha20Poly1305AEAD&) = delete;\n+\n+    /** Encrypts/decrypts a packet\n+        seqnr_payload, the message sequence number\n+        seqnr_aad, the messages AAD sequence number which allows reuse of the AAD keystream\n+        aad_pos, position to use in the AAD keystream to encrypt the AAD\n+        dest, output buffer, must be of a size equal or larger then CHACHA20_POLY1305_AEAD_AAD_LEN + payload (+ POLY1305_TAG_LEN in encryption) bytes\n+        destlen, length of the destination buffer\n+        src, the AAD+payload to encrypt or the AAD+payload+MAC to decrypt\n+        src_len, the length of the source buffer\n+        is_encrypt, set to true if we encrypt (creates and appends the MAC instead of verifying it)\n+        */\n+    bool Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len, const unsigned char* src, size_t src_len, bool is_encrypt);\n+\n+    /** decrypts the 3 bytes AAD data and decodes it into a uint32_t field */\n+    bool GetLength(uint32_t* len24_out, uint64_t seqnr_aad, int aad_pos, const uint8_t* ciphertext);\n+};\n+\n+#endif // BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H"
      }
    ]
  },
  {
    "sha": "99aea045d688059caf89c0e485fa427bd28eddd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWFlYTA0NWQ2ODgwNTljYWY4OWMwZTQ4NWZhNDI3YmQyOGVkZGQ4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-03-11T15:16:15Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-07-03T09:48:48Z"
      },
      "message": "Add ChaCha20Poly1305@Bitcoin tests",
      "tree": {
        "sha": "b7915c7ed781582ad91bbb397875b561af065686",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7915c7ed781582ad91bbb397875b561af065686"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99aea045d688059caf89c0e485fa427bd28eddd8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAl0cegEACgkQHrd2uwPH\nki1cQRAAuwTydrUblP4oEUYPtClNSFFeF3o3s/TJS8+jdde6LX1pnofyOZobCnm9\ntGlemCq2JF7UuYlWToFA/b7uTWmZm0/3z7Tv+lYdaqyZvjR4GxGrZzt09PnEfstv\nU3EAD8POX9KtwgDSxw68l/Ai7jm3GjXbicWPzHAYmtzO4krZyQn0DlOOw2mVgV7X\ne0I2aAPLvnYhd+byjuXQ37IF3XhHewiBxpWBD00Rp05crMZD+dQEBSpr1tPHqBSg\naaTdJbnOwGjIjbRAHP4fP9/MuiRzqDs03pHSOp4BCbfK6sHoeYPcCmc9TXtvnUSI\n62TSNsTz3L1f6Qu3MjKlBpGr+E2K/DimJlJdmdeeGm8vbyDBjeQFszKGBP5ss2FW\nUayz9pkKaD5aJ1XKBJfKPcqkvoLQtGszK+gJcfTQej/t/ISlZWIJXPoOMEDHLcMT\ntQPtMe61uKJnw3EX5HHYWHTwjL55yEapabezxbWRlrPFUKR9wHx2OeXQSrS2rQ2a\nDH1kUFko4vdbUNHa2gUjeB1HuCrQQ11C2tkunkjEu2L0SyKOEcVTtyauqMSdMEJp\nBlbm/y4ysBvBbwCycPGST8TttI0U1s4HSM9tRXFhw9EkivwGSBcURB7rbMrTdkKR\n88S5YvntOWzE5ncQ17aEQPMsHSWh4yGMoO3GbfeCIkQVOOm48Z4=\n=vR+G\n-----END PGP SIGNATURE-----",
        "payload": "tree b7915c7ed781582ad91bbb397875b561af065686\nparent af5d1b5f4a7b56628a76af21284c258d845894f0\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1552317375 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1562147328 +0200\n\nAdd ChaCha20Poly1305@Bitcoin tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99aea045d688059caf89c0e485fa427bd28eddd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99aea045d688059caf89c0e485fa427bd28eddd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99aea045d688059caf89c0e485fa427bd28eddd8/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af5d1b5f4a7b56628a76af21284c258d845894f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af5d1b5f4a7b56628a76af21284c258d845894f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af5d1b5f4a7b56628a76af21284c258d845894f0"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 126,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4ac12bf9698c9f50c28a9c274687429280263b91",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 126,
        "deletions": 0,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99aea045d688059caf89c0e485fa427bd28eddd8/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99aea045d688059caf89c0e485fa427bd28eddd8/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=99aea045d688059caf89c0e485fa427bd28eddd8",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <crypto/aes.h>\n #include <crypto/chacha20.h>\n+#include <crypto/chacha_poly_aead.h>\n #include <crypto/poly1305.h>\n #include <crypto/hkdf_sha256_32.h>\n #include <crypto/hmac_sha256.h>\n@@ -585,6 +586,131 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the operation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;\n+\n+    // verify ciphertext & mac against the test vector\n+    BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n+    BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n+\n+    // manually construct the AAD keystream\n+    cmp_ctx.SetIV(seqnr_aad);\n+    cmp_ctx.Seek(0);\n+    cmp_ctx.Keystream(cmp_ctx_buffer.data(), 64);\n+    BOOST_CHECK(memcmp(expected_aad_keystream.data(), cmp_ctx_buffer.data(), expected_aad_keystream.size()) == 0);\n+    // crypt the 3 length bytes and compare the length\n+    uint32_t len_cmp = 0;\n+    len_cmp = (ciphertext_buf[0] ^ cmp_ctx_buffer[aad_pos + 0]) |\n+              (ciphertext_buf[1] ^ cmp_ctx_buffer[aad_pos + 1]) << 8 |\n+              (ciphertext_buf[2] ^ cmp_ctx_buffer[aad_pos + 2]) << 16;\n+    BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n+\n+    // encrypt / decrypt 1000 packets\n+    for (size_t i = 0; i < 1000; ++i) {\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+        BOOST_CHECK(res);\n+        BOOST_CHECK(aead.GetLength(&out_len, seqnr_aad, aad_pos, ciphertext_buf.data()));\n+        BOOST_CHECK_EQUAL(out_len, expected_aad_length);\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, plaintext_buf_new.data(), plaintext_buf_new.size(), ciphertext_buf.data(), ciphertext_buf.size(), false);\n+        BOOST_CHECK(res);\n+\n+        // make sure we repetitive get the same plaintext\n+        BOOST_CHECK(memcmp(plaintext_buf.data(), plaintext_buf_new.data(), plaintext_buf.size()) == 0);\n+\n+        // compare sequence number 999 against the test vector\n+        if (seqnr_payload == 999) {\n+            BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac_sequence999.data(), expected_ciphertext_and_mac_sequence999.size()) == 0);\n+        }\n+        // set nonce and block counter, output the keystream\n+        cmp_ctx.SetIV(seqnr_aad);\n+        cmp_ctx.Seek(0);\n+        cmp_ctx.Keystream(cmp_ctx_buffer.data(), 64);\n+\n+        // crypt the 3 length bytes and compare the length\n+        len_cmp = 0;\n+        len_cmp = (ciphertext_buf[0] ^ cmp_ctx_buffer[aad_pos + 0]) |\n+                  (ciphertext_buf[1] ^ cmp_ctx_buffer[aad_pos + 1]) << 8 |\n+                  (ciphertext_buf[2] ^ cmp_ctx_buffer[aad_pos + 2]) << 16;\n+        BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n+\n+        // increment the sequence number(s)\n+        // always increment the payload sequence number\n+        // increment the AAD keystream position by its size (3)\n+        // increment the AAD sequence number if we would hit the 64 byte limit\n+        seqnr_payload++;\n+        aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+        if (aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+            aad_pos = 0;\n+            seqnr_aad++;\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(chacha20_poly1305_aead_testvector)\n+{\n+    /* test chacha20poly1305@bitcoin AEAD */\n+\n+    // must fail with no message\n+    TestChaCha20Poly1305AEAD(false, 0,\n+        \"\",\n+        \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        \"0000000000000000000000000000000000000000000000000000000000000000\", \"\", \"\", \"\");\n+\n+    TestChaCha20Poly1305AEAD(true, 0,\n+        /* m  */ \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        /* k1 (payload) */ \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        /* k2 (AAD) */ \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        /* AAD keystream */ \"76b8e0ada0f13d90405d6ae55386bd28bdd219b8a08ded1aa836efcc8b770dc7da41597c5157488d7724e03fb8d84a376a43b8f41518a11cc387b669b2ee6586\",\n+        /* encrypted message & MAC */ \"76b8e09f07e7be5551387a98ba977c732d080dcb0f29a048e3656912c6533e32d2fc11829c1b6c1df1f551cd6131ff08\",\n+        /* encrypted message & MAC at sequence 999 */ \"b0a03d5bd2855d60699e7d3a3133fa47be740fe4e4c1f967555e2d9271f31c3aaa7aa16ec62c5e24f040c08bb20c3598\");\n+    TestChaCha20Poly1305AEAD(true, 1,\n+        \"0100000000000000000000000000000000000000000000000000000000000000\",\n+        \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        \"76b8e0ada0f13d90405d6ae55386bd28bdd219b8a08ded1aa836efcc8b770dc7da41597c5157488d7724e03fb8d84a376a43b8f41518a11cc387b669b2ee6586\",\n+        \"77b8e09f07e7be5551387a98ba977c732d080dcb0f29a048e3656912c6533e32baf0c85b6dff8602b06cf52a6aefc62e\",\n+        \"b1a03d5bd2855d60699e7d3a3133fa47be740fe4e4c1f967555e2d9271f31c3a8bd94d54b5ecabbc41ffbb0c90924080\");\n+    TestChaCha20Poly1305AEAD(true, 255,\n+        \"ff0000f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b733b46413042c9440049176905d3be59ea1c53f15916155c2be8241a38008b9a26bc35941e2444177c8ade6689de95264986d95889fb60e84629c9bd9a5acb1cc118be563eb9b3a4a472f82e09a7e778492b562ef7130e88dfe031c79db9d4f7c7a899151b9a475032b63fc385245fe054e3dd5a97a5f576fe064025d3ce042c566ab2c507b138db853e3d6959660996546cc9c4a6eafdc777c040d70eaf46f76dad3979e5c5360c3317166a1c894c94a371876a94df7628fe4eaaf2ccb27d5aaae0ad7ad0f9d4b6ad3b54098746d4524d38407a6deb3ab78fab78c9\",\n+        \"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\",\n+        \"ff0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\",\n+        \"c640c1711e3ee904ac35c57ab9791c8a1c408603a90b77a83b54f6c844cb4b06d94e7fc6c800e165acd66147e80ec45a567f6ce66d05ec0cae679dceeb890017\",\n+        \"3940c1e92da4582ff6f92a776aeb14d014d384eeb30f660dacf70a14a23fd31e91212701334e2ce1acf5199dc84f4d61ddbe6571bca5af874b4c9226c26e650995d157644e1848b96ed6c2102d5489a050e71d29a5a66ece11de5fb5c9558d54da28fe45b0bc4db4e5b88030bfc4a352b4b7068eccf656bae7ad6a35615315fc7c49d4200388d5eca67c2e822e069336c69b40db67e0f3c81209c50f3216a4b89fb3ae1b984b7851a2ec6f68ab12b101ab120e1ea7313bb93b5a0f71185c7fea017ddb92769861c29dba4fbc432280d5dff21b36d1c4c790128b22699950bb18bf74c448cdfe547d8ed4f657d8005fdc0cd7a050c2d46050a44c4376355858981fbe8b184288276e7a93eabc899c4a\",\n+        \"f039c6689eaeef0456685200feaab9d54bbd9acde4410a3b6f4321296f4a8ca2604b49727d8892c57e005d799b2a38e85e809f20146e08eec75169691c8d4f54a0d51a1e1c7b381e0474eb02f994be9415ef3ffcbd2343f0601e1f3b172a1d494f838824e4df570f8e3b0c04e27966e36c82abd352d07054ef7bd36b84c63f9369afe7ed79b94f953873006b920c3fa251a771de1b63da927058ade119aa898b8c97e42a606b2f6df1e2d957c22f7593c1e2002f4252f4c9ae4bf773499e5cfcfe14dfc1ede26508953f88553bf4a76a802f6a0068d59295b01503fd9a600067624203e880fdf53933b96e1f4d9eb3f4e363dd8165a278ff667a41ee42b9892b077cefff92b93441f7be74cf10e6cd\");\n+}\n+\n BOOST_AUTO_TEST_CASE(countbits_tests)\n {\n     FastRandomContext ctx;"
      }
    ]
  },
  {
    "sha": "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjMyNmFkZDlmMzhmMmE4ZTVjZTVlZTI5ZDk4Y2UwODAzODIwMGQ4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-03-18T14:27:55Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-07-03T09:49:47Z"
      },
      "message": "Add ChaCha20Poly1305@Bitcoin AEAD benchmark",
      "tree": {
        "sha": "e88215ba59cad1cacd00c01626a3c92d313f8a3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e88215ba59cad1cacd00c01626a3c92d313f8a3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAl0cejsACgkQHrd2uwPH\nki373hAAu8d2TGKRic82wcsuZ5x9yEa5qvnuAZ9K7DcokuMiGo7DSXzrezwWkSjQ\nf1qwvRUybWTu5CsVy5N4od0mXKACpoLq052nfkU6xClu22qciiE4GL5TXBBaPn9B\nU6Vn8JUcbzWCsLRp7gjMHnwtq1io0syki4ezxcRfhzF/g18a0M8nGBaTifhTejZU\nom+CnK9+eUA5ePKAlo58xHtYWbRcTZJQnH5uhm5FDf1adBei542ajGNkCk59teUk\nJvLjTdaXAbf7/OJxhAjLK53zEwgzgcoEV3ycQh2/7cMubFnk9QGRlgVjaKJQsXo6\nQbqgYOXbV95GrVDC6vz+2crOvZ7gwMIcmWvtO7DFrLdhtsUEXUWsZvGmNkaunLy3\nZ+TFiARk9BcCVzASwj8AJRdiIHXlOTC+L308aRoJpCXuV0foyKR72uYAXiYUdKfN\nrifmsyjgkliokUG/dwKJ139dBjTwiI1VAODSHZftR+k6uonoFCZKq0UEFGkAv/H/\nVVtTsiy5nY+q3zwgdQJmRabiNHw1UCwj26tATkaS28kmSRT6QuJLcMp+mGan98J0\nOxjHAcA8HrOISgFel3S6UY+64uzVQXHmnFtr2g24eA7q8iVqdAfnw2T5vsPNd/cX\nIxEbSTT0IlP1SRna24stTSAsCUp5Rzpe5Bd7zevYR67jMIIescA=\n=xGA/\n-----END PGP SIGNATURE-----",
        "payload": "tree e88215ba59cad1cacd00c01626a3c92d313f8a3d\nparent 99aea045d688059caf89c0e485fa427bd28eddd8\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1552919275 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1562147387 +0200\n\nAdd ChaCha20Poly1305@Bitcoin AEAD benchmark\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb326add9f38f2a8e5ce5ee29d98ce08038200d8/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99aea045d688059caf89c0e485fa427bd28eddd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99aea045d688059caf89c0e485fa427bd28eddd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99aea045d688059caf89c0e485fa427bd28eddd8"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 124,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7caf936517add53d5112626079b6c48cb2a9fca3",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb326add9f38f2a8e5ce5ee29d98ce08038200d8/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb326add9f38f2a8e5ce5ee29d98ce08038200d8/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
        "patch": "@@ -22,6 +22,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/examples.cpp \\\n   bench/rollingbloom.cpp \\\n   bench/chacha20.cpp \\\n+  bench/chacha_poly_aead.cpp \\\n   bench/crypto_hash.cpp \\\n   bench/ccoins_caching.cpp \\\n   bench/gcs_filter.cpp \\"
      },
      {
        "sha": "f5f729749042aa9f72234238935ec0b93ac21798",
        "filename": "src/bench/chacha_poly_aead.cpp",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb326add9f38f2a8e5ce5ee29d98ce08038200d8/src/bench/chacha_poly_aead.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb326add9f38f2a8e5ce5ee29d98ce08038200d8/src/bench/chacha_poly_aead.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/chacha_poly_aead.cpp?ref=bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
        "patch": "@@ -0,0 +1,123 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include <bench/bench.h>\n+#include <crypto/chacha_poly_aead.h>\n+#include <crypto/poly1305.h> // for the POLY1305_TAGLEN constant\n+#include <hash.h>\n+\n+#include <limits>\n+#include <assert.h>\n+\n+/* Number of bytes to process per iteration */\n+static constexpr uint64_t BUFFER_SIZE_TINY = 64;\n+static constexpr uint64_t BUFFER_SIZE_SMALL = 256;\n+static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n+\n+static const unsigned char k1[32] = {0};\n+static const unsigned char k2[32] = {0};\n+\n+static ChaCha20Poly1305AEAD aead(k1, 32, k2, 32);\n+\n+static void CHACHA20_POLY1305_AEAD(benchmark::State& state, size_t buffersize, bool include_decryption)\n+{\n+    std::vector<unsigned char> in(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> out(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n+    uint64_t seqnr_payload = 0;\n+    uint64_t seqnr_aad = 0;\n+    int aad_pos = 0;\n+    uint32_t len = 0;\n+    while (state.KeepRunning()) {\n+        // encrypt or decrypt the buffer with a static key\n+        assert(aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true));\n+\n+        if (include_decryption) {\n+            // if we decrypt, include the GetLength\n+            assert(aead.GetLength(&len, seqnr_aad, aad_pos, in.data()));\n+            assert(aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true));\n+        }\n+\n+        // increase main sequence number\n+        seqnr_payload++;\n+        // increase aad position (position in AAD keystream)\n+        aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+        if (aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+            aad_pos = 0;\n+            seqnr_aad++;\n+        }\n+        if (seqnr_payload + 1 == std::numeric_limits<uint64_t>::max()) {\n+            // reuse of nonce+key is okay while benchmarking.\n+            seqnr_payload = 0;\n+            seqnr_aad = 0;\n+            aad_pos = 0;\n+        }\n+    }\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_64BYTES_ONLY_ENCRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_TINY, false);\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_256BYTES_ONLY_ENCRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_SMALL, false);\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_1MB_ONLY_ENCRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_LARGE, false);\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT_DECRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_TINY, true);\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_SMALL, true);\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_1MB_ENCRYPT_DECRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_LARGE, true);\n+}\n+\n+// Add Hash() (dbl-sha256) bench for comparison\n+\n+static void HASH(benchmark::State& state, size_t buffersize)\n+{\n+    uint8_t hash[CHash256::OUTPUT_SIZE];\n+    std::vector<uint8_t> in(buffersize,0);\n+    while (state.KeepRunning())\n+        CHash256().Write(in.data(), in.size()).Finalize(hash);\n+}\n+\n+static void HASH_64BYTES(benchmark::State& state)\n+{\n+    HASH(state, BUFFER_SIZE_TINY);\n+}\n+\n+static void HASH_256BYTES(benchmark::State& state)\n+{\n+    HASH(state, BUFFER_SIZE_SMALL);\n+}\n+\n+static void HASH_1MB(benchmark::State& state)\n+{\n+    HASH(state, BUFFER_SIZE_LARGE);\n+}\n+\n+BENCHMARK(CHACHA20_POLY1305_AEAD_64BYTES_ONLY_ENCRYPT, 500000);\n+BENCHMARK(CHACHA20_POLY1305_AEAD_256BYTES_ONLY_ENCRYPT, 250000);\n+BENCHMARK(CHACHA20_POLY1305_AEAD_1MB_ONLY_ENCRYPT, 340);\n+BENCHMARK(CHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT_DECRYPT, 500000);\n+BENCHMARK(CHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT, 250000);\n+BENCHMARK(CHACHA20_POLY1305_AEAD_1MB_ENCRYPT_DECRYPT, 340);\n+BENCHMARK(HASH_64BYTES, 500000);\n+BENCHMARK(HASH_256BYTES, 250000);\n+BENCHMARK(HASH_1MB, 340);"
      }
    ]
  }
]