DrahtBot,2019-06-09 15:05:22,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16202](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16202.html) (Refactor network message deserialization by",https://github.com/bitcoin/bitcoin/pull/16175#issuecomment-500219265,500219265,
TheBlueMatt,2019-06-09 19:32:14,"Oops, it turns out its actually not possible to do #16174 first separately (and without it, this PR is entirely useless). By itself, #16174 ends up hitting the deadly cross-validationinterface-queue deadlock - it takes cs_peerstate first, then (eventually) calls PNB, which may call LimitValidationInterfaceQueue(). Meanwhile, in the validation queue, we may end up waiting on cs_peerstate to update ",https://github.com/bitcoin/bitcoin/pull/16175#issuecomment-500238824,500238824,
TheBlueMatt,2019-06-09 22:04:08,"Note that there is still a regression causing some functional tests to time out as we may end up waiting 100ms to discover that a block has been processed and we can process the next message from that peer (this shouldn't be an issue in the case of downloading from multiple peers since we'll always wake on a new tip block, and seems to not be an issue for one peer, even though its possible it woul",https://github.com/bitcoin/bitcoin/pull/16175#issuecomment-500249226,500249226,
jamesob,2019-06-11 02:38:05,"> Oops, it turns out its actually not possible to do #16174 first separately [...] Meanwhile, in the validation queue, we may end up waiting on cs_peerstate to update some peer's state.\n\nFor other reviewers: the particular validationinterface callback at fault here looks to be `PeerLogicValidation::BlockChecked`.\n\nBig Concept ACK on the lock-splitting at the very least, though I do wish it",https://github.com/bitcoin/bitcoin/pull/16175#issuecomment-500664222,500664222,
jamesob,2019-06-13 20:58:14,"When IBDing from a single peer, this branch appears to be no slower (or negligibly slower) than master. I'm going to modify the benchmark framework to test against multiple peers, which is where I'm assuming we'd expect to see some speedup.\n\n![ibd local range 500000 505000](https://user-images.githubusercontent.com/73197/59466913-65c20580-8dfc-11e9-9c29-514f943a3a29.png)\n\n\n",https://github.com/bitcoin/bitcoin/pull/16175#issuecomment-501876327,501876327,
ryanofsky,2019-06-14 14:53:02,"Just want to note that all my comments above are just suggested cleanups. Feel free to ignore them if they don't make sense or aren't worth effort to implement. The only thing I'd really like to see are more comments about locking. When a lock is held in a small scope for specific purpose, I don't think there's a need to have a comment, but when a lock is held over wide scope for no obvious reason",https://github.com/bitcoin/bitcoin/pull/16175#issuecomment-502140053,502140053,
TheBlueMatt,2019-06-18 20:17:33,Working on rewriting this to make it simpler but it looks like it may end up growing so dunno about it.,https://github.com/bitcoin/bitcoin/pull/16175#issuecomment-503294948,503294948,
ryanofsky,2019-06-11 16:30:45,"In commit ""Add a new peer state tracking class to reduce cs_main contention."" (e89822964e9ef8dadf88d47bc94f5396a8c61a54)\n\nDo you want this to be a recursive mutex for some reason? If so, it'd helpful to say in an comment why recursive locking is helpful here. Otherwise I'd suggest changing this line to `Mutex g_peerstate_mutex` (also not using the old ""critical section"" terminology).",https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292549581,292549581,src/net_processing.cpp
ryanofsky,2019-06-11 16:33:45,"In commit ""Add a new peer state tracking class to reduce cs_main contention."" (e89822964e9ef8dadf88d47bc94f5396a8c61a54)\n\nNot necessarily suggesting you should change this here, but is the only reason for adding a new `mapPeerState` map to make the diff smaller? If entries are always added to both `mapNodeState` and `mapPeerState` maps and removed from the maps at the same times with both lock",https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292550851,292550851,src/net_processing.cpp
ryanofsky,2019-06-11 17:26:03,"In commit ""Add a new peer state tracking class to reduce cs_main contention."" (e89822964e9ef8dadf88d47bc94f5396a8c61a54)\n\nProbably better to follow current coding convention and call it `PeerState` instead of `CPeerState`",https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292573676,292573676,src/net_processing.cpp
ryanofsky,2019-06-11 17:30:58,"In commit ""Add a new peer state tracking class to reduce cs_main contention."" (e89822964e9ef8dadf88d47bc94f5396a8c61a54)\n\nWould suggest calling this `LookupPeerState`, to be consistent with `LookupBlockIndex`, and because otherwise calls to this function look like they are constructing objects, not looking up existing objects",https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292575733,292575733,src/net_processing.cpp
ryanofsky,2019-06-11 17:32:16,"In commit ""Add a new peer state tracking class to reduce cs_main contention."" (e89822964e9ef8dadf88d47bc94f5396a8c61a54)\n\n`g_peer_states` instead of `mapPeerState` would be more in line with current coding convention",https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292576265,292576265,src/net_processing.cpp
ryanofsky,2019-06-11 17:56:24,"In commit ""Add a new peer state tracking class to reduce cs_main contention."" (e89822964e9ef8dadf88d47bc94f5396a8c61a54)\n\nAcquiring a global lock in `PeerLogicValidation::ProcessMessages` for a single peer seems like a pessimization. Why acquire `cs_peerstate` at such a broad scope here instead of just acquiring it directly where needed, like the code is currently doing with `cs_main`? This wo",https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292586622,292586622,src/net_processing.cpp
ryanofsky,2019-06-11 18:24:35,"In commit ""Add a new peer state tracking class to reduce cs_main contention."" (e89822964e9ef8dadf88d47bc94f5396a8c61a54)\n\nIt'd be good to have a comment about what code here actually requires the lock. It's unclear if it's just the map lookup and `IsPendingBlockValidated` code added in a later commit, or if cs_peerstate is replacing cs_main in other parts of this function. If you could reduce ",https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292598784,292598784,src/net_processing.cpp
ryanofsky,2019-06-11 19:17:26,"In commit ""Move nDoS counters to CPeerState (and, thus, out of cs_main)"" (bcc64438d2eebf01866a26a92abf932ed21e0d4f):\n\nWould be clearer to assign members directly above (`bool fShouldBan = false;`)",https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292619647,292619647,src/net_processing.cpp
practicalswift,2019-06-13 07:52:26,"Adding an ""e"" completes the spelling here :-)",https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293247162,293247162,src/validation.h
ryanofsky,2019-06-13 19:02:53,"In commit ""Remove unnecessary cs_mains in denialofservice_tests"" (9bc8ca61f5c9ca57ea71b3acdd1021a5cf66512f)\n\nConsider moving this commit into a separate PR. It could probably be merged quickly and would cut down size of this PR.",https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293532602,293532602,src/test/denialofservice_tests.cpp
ryanofsky,2019-06-13 19:40:25,"In commit ""Make ProcessNewBlock return a future instead of an immediate bool"" (79e6e446dd0c8a3f53759a9792388f28e1053bfb)\n\nThis line is added here and them moved below NotifyHeaderTip in a later commit 64e74ce8a917e071b8a250a4ba9cd110448796d6. It would be preferable to just add in the right place below now so it doesn't need to be moved later.",https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293545964,293545964,src/validation.cpp
ryanofsky,2019-06-13 19:48:07,"In commit ""Run ProcessNewBlock in a background thread (XXX: p2p_sendheaders broken)"" (64e74ce8a917e071b8a250a4ba9cd110448796d6)\n\nDocumentation for this function in validation.h becomes out of date with this commit and should be updated. It still says ""This only returns after the best known valid block is made active.""",https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293548589,293548589,src/validation.cpp
ryanofsky,2019-06-13 20:01:18,"In commit ""Run ProcessNewBlock in a background thread (XXX: p2p_sendheaders broken)"" (64e74ce8a917e071b8a250a4ba9cd110448796d6)\n\nThroughout this function shouldn't `::ChainstateActive()` be replaced by `*this`?",https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293553191,293553191,src/validation.cpp
ryanofsky,2019-06-13 20:04:32,"In commit ""Make ProcessNewBlock return a future instead of an immediate bool"" (79e6e446dd0c8a3f53759a9792388f28e1053bfb)\n\nThis seems fine, but just to make sure I understand correctly, there is a change in behavior here? Previously `accepted` would only be true if `CheckBlock` and `AcceptBlock` and `ActivateBestChain` all succeeded but this can be true even they fail?",https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293554242,293554242,src/rpc/mining.cpp
ryanofsky,2019-06-13 20:28:25,"In commit ""Make ProcessNewBlock return a future instead of an immediate bool"" (79e6e446dd0c8a3f53759a9792388f28e1053bfb)\n\nIn the commit message about these tests you wrote ""Note that this makes some of the unit tests less restrictive."" But I don't think there's a good justification for doing this. If you just declared `struct ProcessNewBlockResult { bool error = false; bool already_have = fals",https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293562749,293562749,src/test/blockfilter_index_tests.cpp
ajtowns,2019-06-18 01:30:00,Think I agree with this suggestion; dropping the `fNewBlock` result at the same time as turning the return into a `future` seems unnecessarily complicated.,https://github.com/bitcoin/bitcoin/pull/16175#discussion_r294579194,294579194,src/test/blockfilter_index_tests.cpp
