[
  {
    "sha": "14470f9aa6baf02ca7162564f397153a2da0c592",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDQ3MGY5YWE2YmFmMDJjYTcxNjI1NjRmMzk3MTUzYTJkYTBjNTky",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-03T02:27:15Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-03T02:27:15Z"
      },
      "message": "ModifyNewCoins saves database lookups\n\nWhen processing a new transaction, in addition to spending the Coins of its txin's it creates a new Coins for its outputs.  The existing ModifyCoins function will first make sure this Coins does not already exist.  It can not exist due to BIP 30, but because of that the lookup can't be cached and always has to go to the database.  Since we are creating the coins to match the new tx anyway, there is no point in checking if they exist first anyway.  However this should not be used for coinbase tx's in order to preserve the historical behavior of overwriting the two existing duplicate tx pairs.",
      "tree": {
        "sha": "7fb16312c72044614b80f243347ee1cb1ac0b390",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fb16312c72044614b80f243347ee1cb1ac0b390"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14470f9aa6baf02ca7162564f397153a2da0c592",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14470f9aa6baf02ca7162564f397153a2da0c592",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14470f9aa6baf02ca7162564f397153a2da0c592",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14470f9aa6baf02ca7162564f397153a2da0c592/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fe30fb4d130532d4a0e4c9d143f03e1b85a749e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 30,
      "deletions": 3
    },
    "files": [
      {
        "sha": "96b336ce77d1ddb95e2b7934b8c568e9b9a3cddd",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14470f9aa6baf02ca7162564f397153a2da0c592/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14470f9aa6baf02ca7162564f397153a2da0c592/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=14470f9aa6baf02ca7162564f397153a2da0c592",
        "patch": "@@ -117,6 +117,15 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n     return CCoinsModifier(*this, ret.first, cachedCoinUsage);\n }\n \n+CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid) {\n+    assert(!hasModifier);\n+    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n+    ret.first->second.coins.Clear();\n+    ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+    ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n+    return CCoinsModifier(*this, ret.first, 0);\n+}\n+\n const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n     CCoinsMap::const_iterator it = FetchCoins(txid);\n     if (it == cacheCoins.end()) {"
      },
      {
        "sha": "3b45cb0a34d459096085a47081ca2f0813cc0320",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14470f9aa6baf02ca7162564f397153a2da0c592/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14470f9aa6baf02ca7162564f397153a2da0c592/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=14470f9aa6baf02ca7162564f397153a2da0c592",
        "patch": "@@ -419,6 +419,17 @@ class CCoinsViewCache : public CCoinsViewBacked\n      */\n     CCoinsModifier ModifyCoins(const uint256 &txid);\n \n+    /**\n+     * Return a modifiable reference to a CCoins. Assumes that no entry with the given\n+     * txid exists and creates a new one. This saves a database access in the case where\n+     * the coins were to be wiped out by FromTx anyway.  This should not be called with\n+     * the 2 historical coinbase duplicate pairs because the new coins are marked fresh, and\n+     * in the event the duplicate coinbase was spent before a flush, the now pruned coins\n+     * would not properly overwrite the first coinbase of the pair. Simultaneous modifications\n+     * are not allowed.\n+     */\n+    CCoinsModifier ModifyNewCoins(const uint256 &txid);\n+\n     /**\n      * Push the modifications applied to this cache to its base.\n      * Failure to call this method before destruction will cause the changes to be forgotten."
      },
      {
        "sha": "270b4c063a0740b493fadc843579550a9518f136",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14470f9aa6baf02ca7162564f397153a2da0c592/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14470f9aa6baf02ca7162564f397153a2da0c592/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=14470f9aa6baf02ca7162564f397153a2da0c592",
        "patch": "@@ -1285,10 +1285,17 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n                 undo.nVersion = coins->nVersion;\n             }\n         }\n+        // add outputs\n+        inputs.ModifyNewCoins(tx.GetHash())->FromTx(tx, nHeight);\n+    }\n+    else {\n+        // add outputs for coinbase tx\n+        // In this case call the full ModifyCoins which will do a database\n+        // lookup to be sure the coins do not already exist otherwise we do not\n+        // know whether to mark them fresh or not.  We want the duplicate coinbases\n+        // before BIP30 to still be properly overwritten.\n+        inputs.ModifyCoins(tx.GetHash())->FromTx(tx, nHeight);\n     }\n-\n-    // add outputs\n-    inputs.ModifyCoins(tx.GetHash())->FromTx(tx, nHeight);\n }\n \n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight)"
      }
    ]
  },
  {
    "sha": "03c82826f97af98c9c90b3500945654606129bc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2M4MjgyNmY5N2FmOThjOWM5MGIzNTAwOTQ1NjU0NjA2MTI5YmMx",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-11T18:02:02Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-12T02:19:19Z"
      },
      "message": "Make CCoinsViewTest behave like CCoinsViewDB",
      "tree": {
        "sha": "2a1e697ace349dc33e9fe7c87022e46c43551d9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a1e697ace349dc33e9fe7c87022e46c43551d9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03c82826f97af98c9c90b3500945654606129bc1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03c82826f97af98c9c90b3500945654606129bc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03c82826f97af98c9c90b3500945654606129bc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03c82826f97af98c9c90b3500945654606129bc1/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14470f9aa6baf02ca7162564f397153a2da0c592",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14470f9aa6baf02ca7162564f397153a2da0c592",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14470f9aa6baf02ca7162564f397153a2da0c592"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "65f739df26f85d077b5c5aaa5518f7a5a4f1255a",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03c82826f97af98c9c90b3500945654606129bc1/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03c82826f97af98c9c90b3500945654606129bc1/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=03c82826f97af98c9c90b3500945654606129bc1",
        "patch": "@@ -45,15 +45,18 @@ class CCoinsViewTest : public CCoinsView\n     bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock)\n     {\n         for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); ) {\n-            map_[it->first] = it->second.coins;\n-            if (it->second.coins.IsPruned() && insecure_rand() % 3 == 0) {\n-                // Randomly delete empty entries on write.\n-                map_.erase(it->first);\n+            if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n+                // Same optimization used in CCoinsViewDB is to only write dirty entries.\n+                map_[it->first] = it->second.coins;\n+                if (it->second.coins.IsPruned() && insecure_rand() % 3 == 0) {\n+                    // Randomly delete empty entries on write.\n+                    map_.erase(it->first);\n+                }\n             }\n             mapCoins.erase(it++);\n         }\n-        mapCoins.clear();\n-        hashBestBlock_ = hashBlock;\n+        if (!hashBlock.IsNull())\n+            hashBestBlock_ = hashBlock;\n         return true;\n     }\n "
      }
    ]
  },
  {
    "sha": "1cf3dd80a614fddbafac387e446fd83d118e0c25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2YzZGQ4MGE2MTRmZGRiYWZhYzM4N2U0NDZmZDgzZDExOGUwYzI1",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-12T01:36:16Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-12T14:55:12Z"
      },
      "message": "Add unit test for UpdateCoins",
      "tree": {
        "sha": "7de6dd453b7c62b0d98098e38ef051210fa192e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7de6dd453b7c62b0d98098e38ef051210fa192e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cf3dd80a614fddbafac387e446fd83d118e0c25",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cf3dd80a614fddbafac387e446fd83d118e0c25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cf3dd80a614fddbafac387e446fd83d118e0c25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cf3dd80a614fddbafac387e446fd83d118e0c25/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03c82826f97af98c9c90b3500945654606129bc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03c82826f97af98c9c90b3500945654606129bc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03c82826f97af98c9c90b3500945654606129bc1"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 131,
      "deletions": 0
    },
    "files": [
      {
        "sha": "946f904dfa6dc41afffba5d5a5cf56bead5b86c6",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 131,
        "deletions": 0,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cf3dd80a614fddbafac387e446fd83d118e0c25/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cf3dd80a614fddbafac387e446fd83d118e0c25/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=1cf3dd80a614fddbafac387e446fd83d118e0c25",
        "patch": "@@ -6,6 +6,8 @@\n #include \"random.h\"\n #include \"uint256.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"main.h\"\n+#include \"consensus/validation.h\"\n \n #include <vector>\n #include <map>\n@@ -200,4 +202,133 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n     BOOST_CHECK(missed_an_entry);\n }\n \n+// This test is similar to the previous test\n+// except the emphasis is on testing the functionality of UpdateCoins\n+// random txs are created and UpdateCoins is used to update the cache stack\n+// In particular it is tested that spending a duplicate coinbase tx\n+// has the expected effect (the other duplicate is overwitten at all cache levels)\n+BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n+{\n+    bool spent_a_duplicate_coinbase = false;\n+    // A simple map to track what we expect the cache stack to represent.\n+    std::map<uint256, CCoins> result;\n+\n+    // The cache stack.\n+    CCoinsViewTest base; // A CCoinsViewTest at the bottom.\n+    std::vector<CCoinsViewCacheTest*> stack; // A stack of CCoinsViewCaches on top.\n+    stack.push_back(new CCoinsViewCacheTest(&base)); // Start with one cache.\n+\n+    // Track the txids we've used and whether they have been spent or not\n+    std::map<uint256, CAmount> coinbaseids;\n+    std::set<uint256> alltxids;\n+    std::set<uint256> duplicateids;\n+\n+    for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n+        {\n+            CMutableTransaction tx;\n+            tx.vin.resize(1);\n+            tx.vout.resize(1);\n+            tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n+            unsigned int height = insecure_rand();\n+\n+            // 1/10 times create a coinbase\n+            if (insecure_rand() % 10 == 0 || coinbaseids.size() < 10) {\n+                // 1/100 times create a duplicate coinbase\n+                if (insecure_rand() % 10 == 0 && coinbaseids.size()) {\n+                    std::map<uint256, CAmount>::iterator coinbaseIt = coinbaseids.lower_bound(GetRandHash());\n+                    if (coinbaseIt == coinbaseids.end()) {\n+                        coinbaseIt = coinbaseids.begin();\n+                    }\n+                    //Use same random value to have same hash and be a true duplicate\n+                    tx.vout[0].nValue = coinbaseIt->second;\n+                    assert(tx.GetHash() == coinbaseIt->first);\n+                    duplicateids.insert(coinbaseIt->first);\n+                }\n+                else {\n+                    coinbaseids[tx.GetHash()] = tx.vout[0].nValue;\n+                }\n+                assert(CTransaction(tx).IsCoinBase());\n+            }\n+            // 9/10 times create a regular tx\n+            else {\n+                uint256 prevouthash;\n+                // equally likely to spend coinbase or non coinbase\n+                std::set<uint256>::iterator txIt = alltxids.lower_bound(GetRandHash());\n+                if (txIt == alltxids.end()) {\n+                    txIt = alltxids.begin();\n+                }\n+                prevouthash = *txIt;\n+\n+                // Construct the tx to spend the coins of prevouthash\n+                tx.vin[0].prevout.hash = prevouthash;\n+                tx.vin[0].prevout.n = 0;\n+\n+                // Update the expected result of prevouthash to know these coins are spent\n+                CCoins& oldcoins = result[prevouthash];\n+                oldcoins.Clear();\n+\n+                // It is of particular importance here that once we spend a coinbase tx hash\n+                // it is no longer available to be duplicated (or spent again)\n+                // BIP 34 in conjunction with enforcing BIP 30 (at least until BIP 34 was active)\n+                // results in the fact that no coinbases were duplicated after they were already spent\n+                alltxids.erase(prevouthash);\n+                coinbaseids.erase(prevouthash);\n+\n+                // The test is designed to ensure spending a duplicate coinbase will work properly\n+                // if that ever happens and not resurrect the previously overwritten coinbase\n+                if (duplicateids.count(prevouthash))\n+                    spent_a_duplicate_coinbase = true;\n+\n+                assert(!CTransaction(tx).IsCoinBase());\n+            }\n+            // Track this tx to possibly spend later\n+            alltxids.insert(tx.GetHash());\n+\n+            // Update the expected result to know about the new output coins\n+            CCoins &coins = result[tx.GetHash()];\n+            coins.FromTx(tx, height);\n+\n+            CValidationState dummy;\n+            UpdateCoins(tx, dummy, *(stack.back()), height);\n+        }\n+\n+        // Once every 1000 iterations and at the end, verify the full cache.\n+        if (insecure_rand() % 1000 == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n+            for (std::map<uint256, CCoins>::iterator it = result.begin(); it != result.end(); it++) {\n+                const CCoins* coins = stack.back()->AccessCoins(it->first);\n+                if (coins) {\n+                    BOOST_CHECK(*coins == it->second);\n+                 } else {\n+                    BOOST_CHECK(it->second.IsPruned());\n+                 }\n+            }\n+        }\n+\n+        if (insecure_rand() % 100 == 0) {\n+            // Every 100 iterations, change the cache stack.\n+            if (stack.size() > 0 && insecure_rand() % 2 == 0) {\n+                stack.back()->Flush();\n+                delete stack.back();\n+                stack.pop_back();\n+            }\n+            if (stack.size() == 0 || (stack.size() < 4 && insecure_rand() % 2)) {\n+                CCoinsView* tip = &base;\n+                if (stack.size() > 0) {\n+                    tip = stack.back();\n+                }\n+                stack.push_back(new CCoinsViewCacheTest(tip));\n+           }\n+        }\n+    }\n+\n+    // Clean up the stack.\n+    while (stack.size() > 0) {\n+        delete stack.back();\n+        stack.pop_back();\n+    }\n+\n+    // Verify coverage.\n+    BOOST_CHECK(spent_a_duplicate_coinbase);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]