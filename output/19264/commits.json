[
  {
    "sha": "49236be099c5e8b3cadbc98d5216313e7e1a5a45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTIzNmJlMDk5YzVlOGIzY2FkYmM5OGQ1MjE2MzEzZTdlMWE1YTQ1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-13T02:55:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-13T14:49:31Z"
      },
      "message": "[tests] Don't import asyncio to test magic bytes",
      "tree": {
        "sha": "b46e8b361979775d77d57b74c47a0c95e2d5fe87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b46e8b361979775d77d57b74c47a0c95e2d5fe87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49236be099c5e8b3cadbc98d5216313e7e1a5a45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49236be099c5e8b3cadbc98d5216313e7e1a5a45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49236be099c5e8b3cadbc98d5216313e7e1a5a45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49236be099c5e8b3cadbc98d5216313e7e1a5a45/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c97780db8c9dd33efed134385573ba97e9cd165",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c97780db8c9dd33efed134385573ba97e9cd165",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c97780db8c9dd33efed134385573ba97e9cd165"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 8,
      "deletions": 21
    },
    "files": [
      {
        "sha": "402f72685cfd6d676c14114bdac9b7f1be93480d",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 8,
        "deletions": 21,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49236be099c5e8b3cadbc98d5216313e7e1a5a45/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49236be099c5e8b3cadbc98d5216313e7e1a5a45/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=49236be099c5e8b3cadbc98d5216313e7e1a5a45",
        "patch": "@@ -3,20 +3,16 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid network messages.\"\"\"\n-import asyncio\n-\n from test_framework.messages import (\n     CBlockHeader,\n     CInv,\n     msg_getdata,\n     msg_headers,\n     msg_inv,\n-    msg_ping,\n     MSG_TX,\n     ser_string,\n )\n from test_framework.mininode import (\n-    NetworkThread,\n     P2PDataStore,\n     P2PInterface,\n )\n@@ -55,29 +51,20 @@ def run_test(self):\n \n     def test_magic_bytes(self):\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n-\n-        async def swap_magic_bytes():\n-            conn._on_data = lambda: None  # Need to ignore all incoming messages from now, since they come with \"invalid\" magic bytes\n-            conn.magic_bytes = b'\\x00\\x11\\x22\\x32'\n-\n-        # Call .result() to block until the atomic swap is complete, otherwise\n-        # we might run into races later on\n-        asyncio.run_coroutine_threadsafe(swap_magic_bytes(), NetworkThread.network_event_loop).result()\n-\n-        with self.nodes[0].assert_debug_log(['PROCESSMESSAGE: INVALID MESSAGESTART ping']):\n-            conn.send_message(msg_ping(nonce=0xff))\n+        with self.nodes[0].assert_debug_log(['PROCESSMESSAGE: INVALID MESSAGESTART badmsg']):\n+            msg = conn.build_message(msg_unrecognized(str_data=\"d\"))\n+            # modify magic bytes\n+            msg = b'\\xff' * 4 + msg[4:]\n+            conn.send_raw_message(msg)\n             conn.wait_for_disconnect(timeout=1)\n             self.nodes[0].disconnect_p2ps()\n \n     def test_checksum(self):\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n         with self.nodes[0].assert_debug_log(['CHECKSUM ERROR (badmsg, 2 bytes), expected 78df0a04 was ffffffff']):\n             msg = conn.build_message(msg_unrecognized(str_data=\"d\"))\n-            cut_len = (\n-                4 +  # magic\n-                12 +  # msgtype\n-                4  #len\n-            )\n+            # Checksum is after start bytes (4B), message type (12B), len (4B)\n+            cut_len = 4 + 12 + 4\n             # modify checksum\n             msg = msg[:cut_len] + b'\\xff' * 4 + msg[cut_len + 4:]\n             self.nodes[0].p2p.send_raw_message(msg)\n@@ -88,7 +75,7 @@ def test_size(self):\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n         with self.nodes[0].assert_debug_log(['']):\n             # Create a message with oversized payload\n-            msg = msg_unrecognized(str_data=\"d\"*(VALID_DATA_LIMIT + 1))\n+            msg = msg_unrecognized(str_data=\"d\" * (VALID_DATA_LIMIT + 1))\n             msg = conn.build_message(msg)\n             self.nodes[0].p2p.send_raw_message(msg)\n             conn.wait_for_disconnect(timeout=1)"
      }
    ]
  }
]