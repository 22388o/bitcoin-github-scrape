BitcoinPullTester,2014-09-23T09:41:21Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4964_426a74ed3c3c98b791a8445dd276e89fc5d6175e/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4964#issuecomment-56495936,56495936,
laanwj,2014-09-24T09:28:17Z,"Agree that this could be handy, but I don't think we should be adding more 'library-like' functionality to RPC (ie, stuff that doesn't actually require a running node), we're trying to move in the opposite direction.\n",https://github.com/bitcoin/bitcoin/pull/4964#issuecomment-56645784,56645784,
gmaxwell,2014-10-09T00:26:48Z,"Really this isn't that much of a library call, I think.  It consults the wallet. Current addresses are simple enough that a stateless library could do it, but something fancier might need the wallet.  Having people unaware of scriptPubKey as a pubkey has certantly made it harder for people to understand the system.\n",https://github.com/bitcoin/bitcoin/pull/4964#issuecomment-58448367,58448367,
TheBlueMatt,2014-10-09T00:41:28Z,I'm not sure this isnt more something for bitcoin-tx.\n,https://github.com/bitcoin/bitcoin/pull/4964#issuecomment-58449384,58449384,
laanwj,2014-10-09T10:41:43Z,"@gmaxwell `validateaddress` consults the wallet when it is built in; without wallet it's a pure library call. But I didn't mean to say that `validateaddress` is a library call, functionality to compute a scriptPubKey certainly is.\n\n@TheBlueMatt Agreed. Would be more something for an utility.\n",https://github.com/bitcoin/bitcoin/pull/4964#issuecomment-58491588,58491588,
laanwj,2014-10-09T10:46:48Z,"Anyhow, if @gmaxwell thinks this is a good idea, I don't feel strongly about it either way, it's three lines of codes in a non-critical path. utACK.\n",https://github.com/bitcoin/bitcoin/pull/4964#issuecomment-58492100,58492100,
laanwj,2014-10-10T08:45:40Z,"I've verified that this matches against python-bitcoinllib for both P2SH and legacy addresses, for example:\n\n```\n>>> from bitcoin.wallet import CBitcoinAddress\n>>> binascii.b2a_hex(CBitcoinAddress('3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy').to_scriptPubKey())\n'a914b472a266d0bd89c13706a4132ccfb16f7c3b9fcb87'\n```\n\n```\n$ src/bitcoin-cli -datadir=/store/tmp/testbtc validateaddress 3J98t1WpEZ73CNmQv",https://github.com/bitcoin/bitcoin/pull/4964#issuecomment-58628294,58628294,
petertodd,2014-10-10T10:12:19Z,"@laanwj I think that bit of confusion is actually a good pedagogical point, and more importantly I can't see any way any _code_ written to use the API could make that mistake.\n",https://github.com/bitcoin/bitcoin/pull/4964#issuecomment-58636901,58636901,
laanwj,2014-10-10T10:38:45Z,"Making a pedagogical point is good, but not if it would cost someone a lot of money. I don't think that's a risk as the underlying data is a different type/structure, but I wanted to mention it. Trying to use a scriptPubKey as pubkey would get an OpenSSL error about invalid encoding (and thus an invalid transaction), and the other way around would get an invalid script (which at least fails the is",https://github.com/bitcoin/bitcoin/pull/4964#issuecomment-58639220,58639220,
jgarzik,2014-12-31T12:24:07Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/4964#issuecomment-68438979,68438979,
