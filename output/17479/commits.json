[
  {
    "sha": "a9141c43f74e3ecffd23ed3332d0af565cd63923",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTE0MWM0M2Y3NGUzZWNmZmQyM2VkMzMzMmQwYWY1NjVjZDYzOTIz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-14T19:47:55Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-24T14:13:51Z"
      },
      "message": "[net processing] Deduplicate post-block-processing code\n\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "fab69f7057b44c9e4a8b805561ebade5ca036213",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fab69f7057b44c9e4a8b805561ebade5ca036213"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9141c43f74e3ecffd23ed3332d0af565cd63923",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9141c43f74e3ecffd23ed3332d0af565cd63923",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9141c43f74e3ecffd23ed3332d0af565cd63923",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9141c43f74e3ecffd23ed3332d0af565cd63923/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fefd80f08880abd7c2d77a170152a9ef4394e4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fefd80f08880abd7c2d77a170152a9ef4394e4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fefd80f08880abd7c2d77a170152a9ef4394e4a"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 17,
      "deletions": 18
    },
    "files": [
      {
        "sha": "20736b922e3ab8bb25794343e5a59c7f9c1976de",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 18,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9141c43f74e3ecffd23ed3332d0af565cd63923/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9141c43f74e3ecffd23ed3332d0af565cd63923/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a9141c43f74e3ecffd23ed3332d0af565cd63923",
        "patch": "@@ -2086,6 +2086,19 @@ void static ProcessOrphanTx(CConnman& connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ *  A block has been processed. Do housekeeping.\n+ */\n+void static BlockProcessed(CNode& pfrom, CBlock& pblock, bool new_block)\n+{\n+    if (new_block) {\n+        pfrom.nLastBlockTime = GetTime();\n+    } else {\n+        LOCK(cs_main);\n+        ::mapBlockSource.erase(pblock.GetHash());\n+    }\n+}\n+\n /**\n  * Validation logic for compact filters request handling.\n  *\n@@ -3326,12 +3339,8 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n             m_chainman.ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n-                pfrom.nLastBlockTime = GetTime();\n-            } else {\n-                LOCK(cs_main);\n-                mapBlockSource.erase(pblock->GetHash());\n-            }\n+            BlockProcessed(pfrom, *pblock, fNewBlock);\n+\n             LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n             if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n                 // Clear download state for this block, which is in\n@@ -3416,12 +3425,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n             m_chainman.ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n-                pfrom.nLastBlockTime = GetTime();\n-            } else {\n-                LOCK(cs_main);\n-                mapBlockSource.erase(pblock->GetHash());\n-            }\n+            BlockProcessed(pfrom, *pblock, fNewBlock);\n         }\n         return;\n     }\n@@ -3479,12 +3483,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n         }\n         bool fNewBlock = false;\n         m_chainman.ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n-        if (fNewBlock) {\n-            pfrom.nLastBlockTime = GetTime();\n-        } else {\n-            LOCK(cs_main);\n-            mapBlockSource.erase(pblock->GetHash());\n-        }\n+        BlockProcessed(pfrom, *pblock, fNewBlock);\n         return;\n     }\n "
      }
    ]
  },
  {
    "sha": "03668d2dc2478270470e61a99fb98c4e690dfc2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzY2OGQyZGMyNDc4MjcwNDcwZTYxYTk5ZmI5OGM0ZTY5MGRmYzJh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-15T18:26:28Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-24T14:14:28Z"
      },
      "message": "[validation] Add BlockValidationState inout param to ProcessNewBlock\n\nThis is a pure refactor commit.\n\nThis commit enables the caller of ProcessNewBlock to access the final\nBlockValidationState passed around between CheckBlock(), AcceptBlock(),\nand BlockChecked() inside ProcessNewBlock(). This is useful because in a\nfuture commit, we will move the BlockChecked() call out of\nProcessNewBlock(), and BlockChecked() still needs to be able to access\nthe BlockValidationState.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "e63bc2a37ad3b8c390c0d72fce5ad3e82c76bf38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e63bc2a37ad3b8c390c0d72fce5ad3e82c76bf38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03668d2dc2478270470e61a99fb98c4e690dfc2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03668d2dc2478270470e61a99fb98c4e690dfc2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03668d2dc2478270470e61a99fb98c4e690dfc2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03668d2dc2478270470e61a99fb98c4e690dfc2a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9141c43f74e3ecffd23ed3332d0af565cd63923",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9141c43f74e3ecffd23ed3332d0af565cd63923",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9141c43f74e3ecffd23ed3332d0af565cd63923"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 45,
      "deletions": 29
    },
    "files": [
      {
        "sha": "c6aed3a7b6a17843f8e8dcd0fcd4a7b1ba124a7a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=03668d2dc2478270470e61a99fb98c4e690dfc2a",
        "patch": "@@ -3338,7 +3338,8 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            m_chainman.ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            BlockValidationState dos_state;\n+            m_chainman.ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n             BlockProcessed(pfrom, *pblock, fNewBlock);\n \n             LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n@@ -3424,7 +3425,8 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            m_chainman.ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            BlockValidationState dos_state;\n+            m_chainman.ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n             BlockProcessed(pfrom, *pblock, fNewBlock);\n         }\n         return;\n@@ -3482,7 +3484,8 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             mapBlockSource.emplace(hash, std::make_pair(pfrom.GetId(), true));\n         }\n         bool fNewBlock = false;\n-        m_chainman.ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n+        BlockValidationState dos_state;\n+        m_chainman.ProcessNewBlock(chainparams, pblock, dos_state, forceProcessing, &fNewBlock);\n         BlockProcessed(pfrom, *pblock, fNewBlock);\n         return;\n     }"
      },
      {
        "sha": "7da02f5a5d0882108c9f81de5b2dd7268d6b26ce",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=03668d2dc2478270470e61a99fb98c4e690dfc2a",
        "patch": "@@ -126,7 +126,8 @@ static bool GenerateBlock(ChainstateManager& chainman, CBlock& block, uint64_t&\n     }\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n-    if (!chainman.ProcessNewBlock(chainparams, shared_pblock, true, nullptr)) {\n+    BlockValidationState state;\n+    if (!chainman.ProcessNewBlock(chainparams, shared_pblock, state, true, nullptr)) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n     }\n \n@@ -960,7 +961,8 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     bool new_block;\n     auto sc = std::make_shared<submitblock_StateCatcher>(block.GetHash());\n     RegisterSharedValidationInterface(sc);\n-    bool accepted = EnsureChainman(request.context).ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    BlockValidationState dos_state;\n+    bool accepted = EnsureChainman(request.context).ProcessNewBlock(Params(), blockptr, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n     UnregisterSharedValidationInterface(sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";"
      },
      {
        "sha": "d2d36927e8e916ce7fe86bafac2dccc9b69b3c6d",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=03668d2dc2478270470e61a99fb98c4e690dfc2a",
        "patch": "@@ -171,7 +171,8 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     uint256 chainA_last_header = last_header;\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n-        BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(Params(), block, true, nullptr));\n+        BlockValidationState dos_state;\n+        BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n     }\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n@@ -189,7 +190,8 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     uint256 chainB_last_header = last_header;\n     for (size_t i = 0; i < 3; i++) {\n         const auto& block = chainB[i];\n-        BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(Params(), block, true, nullptr));\n+        BlockValidationState dos_state;\n+        BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n     }\n     for (size_t i = 0; i < 3; i++) {\n         const auto& block = chainB[i];\n@@ -218,10 +220,11 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     }\n \n     // Reorg back to chain A.\n-     for (size_t i = 2; i < 4; i++) {\n-         const auto& block = chainA[i];\n-         BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(Params(), block, true, nullptr));\n-     }\n+    for (size_t i = 2; i < 4; i++) {\n+        const auto& block = chainA[i];\n+        BlockValidationState dos_state;\n+        BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+    }\n \n      // Check that chain A and B blocks can be retrieved.\n      chainA_last_header = last_header;"
      },
      {
        "sha": "051e6818e776a364b8b393c7c367610570715719",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=03668d2dc2478270470e61a99fb98c4e690dfc2a",
        "patch": "@@ -7,6 +7,7 @@\n #include <consensus/consensus.h>\n #include <consensus/merkle.h>\n #include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n #include <miner.h>\n #include <policy/policy.h>\n #include <script/standard.h>\n@@ -253,7 +254,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n             pblock->nNonce = blockinfo[i].nonce;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        BOOST_CHECK(Assert(m_node.chainman)->ProcessNewBlock(chainparams, shared_pblock, true, nullptr));\n+        BlockValidationState dos_state;\n+        BOOST_CHECK(Assert(m_node.chainman)->ProcessNewBlock(chainparams, shared_pblock, dos_state, true, nullptr));\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n "
      },
      {
        "sha": "abb56f5dd9b6a09077ec9b74ec4edce22b2753f0",
        "filename": "src/test/util/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=03668d2dc2478270470e61a99fb98c4e690dfc2a",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <chainparams.h>\n #include <consensus/merkle.h>\n+#include <consensus/validation.h>\n #include <key_io.h>\n #include <miner.h>\n #include <node/context.h>\n@@ -32,7 +33,8 @@ CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n         assert(block->nNonce);\n     }\n \n-    bool processed{Assert(node.chainman)->ProcessNewBlock(Params(), block, true, nullptr)};\n+    BlockValidationState dos_state;\n+    bool processed{Assert(node.chainman)->ProcessNewBlock(Params(), block, dos_state, true, nullptr)};\n     assert(processed);\n \n     return CTxIn{block->vtx[0]->GetHash(), 0};"
      },
      {
        "sha": "e7c84ef477ecdc2847cbbc5633556a61dd7c5687",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=03668d2dc2478270470e61a99fb98c4e690dfc2a",
        "patch": "@@ -235,7 +235,8 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n-    Assert(m_node.chainman)->ProcessNewBlock(chainparams, shared_pblock, true, nullptr);\n+    BlockValidationState dos_state;\n+    Assert(m_node.chainman)->ProcessNewBlock(chainparams, shared_pblock, dos_state, true, nullptr);\n \n     CBlock result = block;\n     return result;"
      },
      {
        "sha": "b4fbb6e6de72e391a0255bf92301cef449c04149",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=03668d2dc2478270470e61a99fb98c4e690dfc2a",
        "patch": "@@ -166,7 +166,8 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK(Assert(m_node.chainman)->ProcessNewBlockHeaders(headers, state, Params()));\n \n     // Connect the genesis block and drain any outstanding events\n-    BOOST_CHECK(Assert(m_node.chainman)->ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), true, &ignored));\n+    BlockValidationState dos_state;\n+    BOOST_CHECK(Assert(m_node.chainman)->ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), dos_state, true, &ignored));\n     SyncWithValidationInterfaceQueue();\n \n     // subscribe to events (this subscriber will validate event ordering)\n@@ -188,13 +189,14 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n             FastRandomContext insecure;\n             for (int i = 0; i < 1000; i++) {\n                 auto block = blocks[insecure.randrange(blocks.size() - 1)];\n-                Assert(m_node.chainman)->ProcessNewBlock(Params(), block, true, &ignored);\n+                Assert(m_node.chainman)->ProcessNewBlock(Params(), block, dos_state, true, &ignored);\n             }\n \n             // to make sure that eventually we process the full chain - do it here\n             for (auto block : blocks) {\n                 if (block->vtx.size() == 1) {\n-                    bool processed = Assert(m_node.chainman)->ProcessNewBlock(Params(), block, true, &ignored);\n+                    BlockValidationState dos_state;\n+                    bool processed = Assert(m_node.chainman)->ProcessNewBlock(Params(), block, dos_state, true, &ignored);\n                     assert(processed);\n                 }\n             }\n@@ -233,7 +235,8 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n {\n     bool ignored;\n     auto ProcessBlock = [&](std::shared_ptr<const CBlock> block) -> bool {\n-        return Assert(m_node.chainman)->ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+        BlockValidationState dos_state;\n+        return Assert(m_node.chainman)->ProcessNewBlock(Params(), block, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n     };\n \n     // Process all mined blocks"
      },
      {
        "sha": "1816ab235eede242510063d10828100cf8d44754",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=03668d2dc2478270470e61a99fb98c4e690dfc2a",
        "patch": "@@ -3828,29 +3828,28 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n     return true;\n }\n \n-bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock)\n+bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& dos_state, bool fForceProcessing, bool* fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n \n     {\n         CBlockIndex *pindex = nullptr;\n         if (fNewBlock) *fNewBlock = false;\n-        BlockValidationState state;\n \n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n         // Therefore, the following critical section must include the CheckBlock() call as well.\n         LOCK(cs_main);\n \n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*pblock, dos_state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.ToString());\n+            GetMainSignals().BlockChecked(*pblock, dos_state);\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, dos_state.ToString());\n         }\n     }\n "
      },
      {
        "sha": "e685c08538c3e2efb52dc76215dd3846af5f5cdf",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03668d2dc2478270470e61a99fb98c4e690dfc2a/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=03668d2dc2478270470e61a99fb98c4e690dfc2a",
        "patch": "@@ -872,12 +872,13 @@ class ChainstateManager\n      * May not be called in a\n      * validationinterface callback.\n      *\n-     * @param[in]   pblock  The block we want to process.\n-     * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources.\n-     * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n-     * @returns     If the block was processed, independently of block validity\n+     * @param[in]   pblock            The block we want to process.\n+     * @param[out]  state             Currently unused.\n+     * @param[in]   fForceProcessing  This block was requested from the peer or came from a non-network source.\n+     * @param[out]  fNewBlock         A boolean which is set to indicate if the block was first received via this call\n+     * @returns     bool              If the block was processed, independently of block validity\n      */\n-    bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n+    bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& state, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n \n     /**\n      * Process incoming block headers."
      }
    ]
  },
  {
    "sha": "89175a7e6d6d270daf28db899af1110a4f56b11a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTE3NWE3ZTZkNmQyNzBkYWYyOGRiODk5YWYxMTEwYTRmNTZiMTFh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-15T19:51:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-24T14:25:01Z"
      },
      "message": "[net processing] Make BlockChecked a standalone, static function\n\nThis is a pure refactor commit.\n\nSince BlockChecked() doesn't actually depend on all of\nPeerLogicValidation but just PeerLogicValidation's CConnman, we can make\na standalone, static function that simply has an extra CConnman\nparameter and have the non-static version call the static one.\n\nThis also means that, in a future commit, when we move the\nBlockChecked() call out of ProcessNewBlock(), the caller of\nProcessNewBlock() can call BlockChecked() directly even if they only\nhave a CConnman.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "4236d5a335db658aa358bb0af9f4f364aefeba0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4236d5a335db658aa358bb0af9f4f364aefeba0e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89175a7e6d6d270daf28db899af1110a4f56b11a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89175a7e6d6d270daf28db899af1110a4f56b11a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89175a7e6d6d270daf28db899af1110a4f56b11a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89175a7e6d6d270daf28db899af1110a4f56b11a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03668d2dc2478270470e61a99fb98c4e690dfc2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03668d2dc2478270470e61a99fb98c4e690dfc2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03668d2dc2478270470e61a99fb98c4e690dfc2a"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c16c43fdea881577f05855dc92679f1eafeeac65",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89175a7e6d6d270daf28db899af1110a4f56b11a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89175a7e6d6d270daf28db899af1110a4f56b11a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=89175a7e6d6d270daf28db899af1110a4f56b11a",
        "patch": "@@ -1385,8 +1385,11 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n /**\n  * Handle invalid block rejection and consequent peer discouragement, maintain which\n  * peers announce compact blocks.\n+ * Called both in case of cursory DoS checks failing (implying the peer is likely\n+ * sending us bogus data) and after full validation of the block fails (which may\n+ * be OK if it was sent over compact blocks).\n  */\n-void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidationState& state) {\n+static void BlockChecked(const CBlock& block, const BlockValidationState& state, CConnman& connman) {\n     LOCK(cs_main);\n \n     const uint256 hash(block.GetHash());\n@@ -1409,13 +1412,17 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidatio\n              !::ChainstateActive().IsInitialBlockDownload() &&\n              mapBlocksInFlight.count(hash) == mapBlocksInFlight.size()) {\n         if (it != mapBlockSource.end()) {\n-            MaybeSetPeerAsAnnouncingHeaderAndIDs(it->second.first, m_connman);\n+            MaybeSetPeerAsAnnouncingHeaderAndIDs(it->second.first, connman);\n         }\n     }\n     if (it != mapBlockSource.end())\n         mapBlockSource.erase(it);\n }\n \n+void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidationState& state) {\n+    ::BlockChecked(block, state, m_connman);\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Messages"
      }
    ]
  },
  {
    "sha": "935b7c9a5fa53a9daae41a323be945a386d0a242",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzViN2M5YTVmYTUzYTlkYWFlNDFhMzIzYmU5NDVhMzg2ZDBhMjQy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-15T19:56:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-24T14:28:26Z"
      },
      "message": "[validation] Return the AcceptBlock BlockValidationState directly in ProcessNewBlock\n\nNet processing now passes a BlockValidationState object into\nProcessNewBlock(). If CheckBlock() or AcceptBlock() fails, then PNB\nreturns to net processing without calling the (asynchronous)\nBlockChecked Validation Interface method. net processing can use the\ninvalid BlockValidationState returned to punish peers.\n\nCheckBlock() and AcceptBlock() represent the DoS checks on a block (ie\nPoW and malleability). Net processing wants to know about those failed\nchecks immediately and shouldn't have to wait on a callback. Other\nvalidation interface clients don't care about net processing submitting\nbogus malleated blocks to validation, so they don't need to be notified\nof BlockChecked.\n\nFurthermore, if PNB returns a valid BlockValidationState, we never need\nto try to process (non-malleated) copies of the block from other peers.\nThat makes it much easier to move the best chain activation logic to a\nbackground thread in future work.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "cb76101d0c590599b7aa6cba8c8bba7c72d398de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb76101d0c590599b7aa6cba8c8bba7c72d398de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/935b7c9a5fa53a9daae41a323be945a386d0a242",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935b7c9a5fa53a9daae41a323be945a386d0a242",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/935b7c9a5fa53a9daae41a323be945a386d0a242",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935b7c9a5fa53a9daae41a323be945a386d0a242/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89175a7e6d6d270daf28db899af1110a4f56b11a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89175a7e6d6d270daf28db899af1110a4f56b11a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89175a7e6d6d270daf28db899af1110a4f56b11a"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 36,
      "deletions": 17
    },
    "files": [
      {
        "sha": "7e90d57e4b46cfde35da1aac44127c9d0524ea12",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/935b7c9a5fa53a9daae41a323be945a386d0a242/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/935b7c9a5fa53a9daae41a323be945a386d0a242/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=935b7c9a5fa53a9daae41a323be945a386d0a242",
        "patch": "@@ -2094,15 +2094,21 @@ void static ProcessOrphanTx(CConnman& connman, CTxMemPool& mempool, std::set<uin\n }\n \n /**\n- *  A block has been processed. Do housekeeping.\n+ *  A block has been processed. Handle potential peer punishment and housekeeping.\n  */\n-void static BlockProcessed(CNode& pfrom, CBlock& pblock, bool new_block)\n+void static BlockProcessed(CNode& pfrom, CConnman& connman, CBlock& pblock, BlockValidationState& state, bool new_block)\n {\n-    if (new_block) {\n-        pfrom.nLastBlockTime = GetTime();\n-    } else {\n+    if (!state.IsValid()) {\n+        // The block failed anti-dos / mutation checks. Call BlockChecked() callback here.\n+        // This clears the block from mapBlockSource.\n+        BlockChecked(pblock, state, connman);\n+    } else if (!new_block) {\n+        // Block was valid but we've seen it before. Clear it from mapBlockSource.\n         LOCK(cs_main);\n         ::mapBlockSource.erase(pblock.GetHash());\n+    } else {\n+        // Block is valid and we haven't seen it before. set nLastBlockTime for this peer.\n+        pfrom.nLastBlockTime = GetTime();\n     }\n }\n \n@@ -3347,7 +3353,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             // reconstructed compact blocks as having been requested.\n             BlockValidationState dos_state;\n             m_chainman.ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n-            BlockProcessed(pfrom, *pblock, fNewBlock);\n+            BlockProcessed(pfrom, m_connman, *pblock, dos_state, fNewBlock);\n \n             LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n             if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n@@ -3434,7 +3440,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             // in compact block optimistic reconstruction handling.\n             BlockValidationState dos_state;\n             m_chainman.ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n-            BlockProcessed(pfrom, *pblock, fNewBlock);\n+            BlockProcessed(pfrom, m_connman, *pblock, dos_state, fNewBlock);\n         }\n         return;\n     }\n@@ -3493,7 +3499,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n         bool fNewBlock = false;\n         BlockValidationState dos_state;\n         m_chainman.ProcessNewBlock(chainparams, pblock, dos_state, forceProcessing, &fNewBlock);\n-        BlockProcessed(pfrom, *pblock, fNewBlock);\n+        BlockProcessed(pfrom, m_connman, *pblock, dos_state, fNewBlock);\n         return;\n     }\n "
      },
      {
        "sha": "dc4f2a5d9e9d627cbbb13e2bc8cb2e24f7e90573",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/935b7c9a5fa53a9daae41a323be945a386d0a242/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/935b7c9a5fa53a9daae41a323be945a386d0a242/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=935b7c9a5fa53a9daae41a323be945a386d0a242",
        "patch": "@@ -967,6 +967,9 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     if (!new_block && accepted) {\n         return \"duplicate\";\n     }\n+    if (!dos_state.IsValid()) {\n+        return BIP22ValidationResult(dos_state);\n+    }\n     if (!sc->found) {\n         return \"inconclusive\";\n     }"
      },
      {
        "sha": "130b8c508226e9e8af0b4a3ce1a165137a94a34e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/935b7c9a5fa53a9daae41a323be945a386d0a242/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/935b7c9a5fa53a9daae41a323be945a386d0a242/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=935b7c9a5fa53a9daae41a323be945a386d0a242",
        "patch": "@@ -3848,7 +3848,6 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n             ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, dos_state);\n             return error(\"%s: AcceptBlock FAILED (%s)\", __func__, dos_state.ToString());\n         }\n     }"
      },
      {
        "sha": "4454d3fbfdde27b6863c987872698989273b6d0e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 19,
        "deletions": 8,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/935b7c9a5fa53a9daae41a323be945a386d0a242/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/935b7c9a5fa53a9daae41a323be945a386d0a242/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=935b7c9a5fa53a9daae41a323be945a386d0a242",
        "patch": "@@ -862,18 +862,29 @@ class ChainstateManager\n      * block is made active. Note that it does not, however, guarantee that the\n      * specific block passed to it has been checked for validity!\n      *\n-     * If you want to *possibly* get feedback on whether pblock is valid, you must\n-     * install a CValidationInterface (see validationinterface.h) - this will have\n-     * its BlockChecked method called whenever *any* block completes validation.\n+     * Performs initial sanity checks using the provided BlockValidationState before\n+     * connecting any block(s). If you want to *possibly* get feedback on whether\n+     * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+     * a CValidationInterface (see validationinterface.h) - this will have its\n+     * BlockChecked method called whenever *any* block completes validation (note\n+     * that any invalidity returned via state will *not* also be provided via\n+     * BlockChecked). There is, of course, no guarantee that any given block which\n+     * is not a part of the eventual best chain will ever be checked.\n      *\n-     * Note that we guarantee that either the proof-of-work is valid on pblock, or\n-     * (and possibly also) BlockChecked will have been called.\n+     * If the block pblock is built on is in our header tree, and pblock is a\n+     * candidate for accepting to disk (either because it is a candidate for the\n+     * best chain soon, or fForceProcessing is set), but pblock has been mutated,\n+     * state is guaranteed to be some non-IsValid() state.\n      *\n-     * May not be called in a\n-     * validationinterface callback.\n+     * If fForceProcessing is set (or fNewBlock returns true), and state.IsValid(),\n+     * barring pruning and a desire to re-download a pruned block, there should\n+     * never be any reason to re-ProcessNewBlock any block with the same hash.\n+     *\n+     * May not be called in a validationinterface callback.\n      *\n      * @param[in]   pblock            The block we want to process.\n-     * @param[out]  state             Currently unused.\n+     * @param[out]  state             Only used for failures in CheckBlock/AcceptBlock. For failure in block connection,\n+     *                                a CValidationInterface BlockChecked callback is used to notify clients of validity.\n      * @param[in]   fForceProcessing  This block was requested from the peer or came from a non-network source.\n      * @param[out]  fNewBlock         A boolean which is set to indicate if the block was first received via this call\n      * @returns     bool              If the block was processed, independently of block validity"
      }
    ]
  },
  {
    "sha": "9f8a81b83723d42c8d635d4a302553395f3dab37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjhhODFiODM3MjNkNDJjOGQ2MzVkNGEzMDI1NTMzOTVmM2RhYjM3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-15T19:56:45Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-24T14:28:30Z"
      },
      "message": "[validation] trivial: Rename state to dummy_state for clarity\n\nThis is a pure refactor commit.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "2fcad9da2c981564e12f48e75369e6b5c6d59328",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fcad9da2c981564e12f48e75369e6b5c6d59328"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f8a81b83723d42c8d635d4a302553395f3dab37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f8a81b83723d42c8d635d4a302553395f3dab37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f8a81b83723d42c8d635d4a302553395f3dab37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f8a81b83723d42c8d635d4a302553395f3dab37/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "935b7c9a5fa53a9daae41a323be945a386d0a242",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935b7c9a5fa53a9daae41a323be945a386d0a242",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/935b7c9a5fa53a9daae41a323be945a386d0a242"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ff4e4be06e7158ed9902bcbbe91bb774873f1680",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f8a81b83723d42c8d635d4a302553395f3dab37/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f8a81b83723d42c8d635d4a302553395f3dab37/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9f8a81b83723d42c8d635d4a302553395f3dab37",
        "patch": "@@ -3854,9 +3854,9 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n \n     NotifyHeaderTip();\n \n-    BlockValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n-        return error(\"%s: ActivateBestChain failed (%s)\", __func__, state.ToString());\n+    BlockValidationState dummy_state; // Only used to report errors, not invalidity - ignore it\n+    if (!::ChainstateActive().ActivateBestChain(dummy_state, chainparams, pblock))\n+        return error(\"%s: ActivateBestChain failed (%s)\", __func__, dummy_state.ToString());\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "17170a5dc393ebdd5f03ff1b9536a16eb249d387",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzE3MGE1ZGMzOTNlYmRkNWYwM2ZmMWI5NTM2YTE2ZWIyNDlkMzg3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-15T19:58:23Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-24T14:29:13Z"
      },
      "message": "[test/rpc] Additional checks for dos_state validity\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "07198d91fe64cd6e6620d08f360341779d3fcf38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07198d91fe64cd6e6620d08f360341779d3fcf38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17170a5dc393ebdd5f03ff1b9536a16eb249d387",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17170a5dc393ebdd5f03ff1b9536a16eb249d387",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17170a5dc393ebdd5f03ff1b9536a16eb249d387",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17170a5dc393ebdd5f03ff1b9536a16eb249d387/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f8a81b83723d42c8d635d4a302553395f3dab37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f8a81b83723d42c8d635d4a302553395f3dab37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f8a81b83723d42c8d635d4a302553395f3dab37"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7e6e56378e8802d7700d789b4e6008280ead6d38",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17170a5dc393ebdd5f03ff1b9536a16eb249d387/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17170a5dc393ebdd5f03ff1b9536a16eb249d387/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=17170a5dc393ebdd5f03ff1b9536a16eb249d387",
        "patch": "@@ -173,6 +173,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const auto& block = chainA[i];\n         BlockValidationState dos_state;\n         BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+        BOOST_REQUIRE(dos_state.IsValid());\n     }\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n@@ -192,6 +193,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const auto& block = chainB[i];\n         BlockValidationState dos_state;\n         BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+        BOOST_REQUIRE(dos_state.IsValid());\n     }\n     for (size_t i = 0; i < 3; i++) {\n         const auto& block = chainB[i];\n@@ -224,6 +226,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const auto& block = chainA[i];\n         BlockValidationState dos_state;\n         BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+        BOOST_REQUIRE(dos_state.IsValid());\n     }\n \n      // Check that chain A and B blocks can be retrieved."
      },
      {
        "sha": "920a0ece024979e5d6f1831151d870384df9dd35",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17170a5dc393ebdd5f03ff1b9536a16eb249d387/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17170a5dc393ebdd5f03ff1b9536a16eb249d387/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=17170a5dc393ebdd5f03ff1b9536a16eb249d387",
        "patch": "@@ -256,6 +256,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n         BlockValidationState dos_state;\n         BOOST_CHECK(Assert(m_node.chainman)->ProcessNewBlock(chainparams, shared_pblock, dos_state, true, nullptr));\n+        BOOST_CHECK(dos_state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n "
      },
      {
        "sha": "222febfb7f1138f5d312af65f7fac35dc57ddd0a",
        "filename": "src/test/util/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17170a5dc393ebdd5f03ff1b9536a16eb249d387/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17170a5dc393ebdd5f03ff1b9536a16eb249d387/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=17170a5dc393ebdd5f03ff1b9536a16eb249d387",
        "patch": "@@ -36,6 +36,7 @@ CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n     BlockValidationState dos_state;\n     bool processed{Assert(node.chainman)->ProcessNewBlock(Params(), block, dos_state, true, nullptr)};\n     assert(processed);\n+    assert(dos_state.IsValid());\n \n     return CTxIn{block->vtx[0]->GetHash(), 0};\n }"
      },
      {
        "sha": "8f8f8023b292830ed01d43f74d8066caedb761bb",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17170a5dc393ebdd5f03ff1b9536a16eb249d387/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17170a5dc393ebdd5f03ff1b9536a16eb249d387/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=17170a5dc393ebdd5f03ff1b9536a16eb249d387",
        "patch": "@@ -198,6 +198,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n                     BlockValidationState dos_state;\n                     bool processed = Assert(m_node.chainman)->ProcessNewBlock(Params(), block, dos_state, true, &ignored);\n                     assert(processed);\n+                    assert(dos_state.IsValid());\n                 }\n             }\n         });\n@@ -236,7 +237,7 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n     bool ignored;\n     auto ProcessBlock = [&](std::shared_ptr<const CBlock> block) -> bool {\n         BlockValidationState dos_state;\n-        return Assert(m_node.chainman)->ProcessNewBlock(Params(), block, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+        return Assert(m_node.chainman)->ProcessNewBlock(Params(), block, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &ignored) && dos_state.IsValid();\n     };\n \n     // Process all mined blocks"
      }
    ]
  }
]