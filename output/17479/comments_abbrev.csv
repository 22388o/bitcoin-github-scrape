jnewbery,2019-11-14 17:18:17,"This is the first two commits from #16279. Thanks for your work, @TheBlueMatt!",https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-553988839,553988839,
DrahtBot,2019-11-14 19:15:18,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19791 ([net processing] Move Misbehaving() to PeerManager by jnewbery)\n* #15545 ([doc] explain why CheckBlock() is calle",https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-554036805,554036805,
jnewbery,2019-11-14 21:19:41,"I've added a commit that deduplicates post-block-checking code, which makes the main commit in this PR smaller and (I hope) easier to understand.",https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-554084723,554084723,
jnewbery,2019-11-14 22:28:29,"I've taken the final (behaviour change) commit from #16279 and PR'ed it as #17485. That gives some justification for this PR. If we get the anti-dos / mutation checks back from validation immediately, we can use that state to mark the block as no longer in-flight, rather than by indirectly checking that the block has been written to disk.\n\nSeparating into two PRs makes this easier to review. T",https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-554110522,554110522,
dongcarl,2019-11-15 21:06:51,"I found the last commit in this PR (71867666388bf1137b431f944fd430f262480eba) a bit hard to parse, so I split it up in my branch here: https://github.com/bitcoin/bitcoin/compare/master...dongcarl:2019-11-processnewblock-early-return-redo-last. The main change in the last commit on this branch resides in f46102be8fdd1ef8a21b821c121ed9fa027c9d32 on mine, and f46102be8fdd1ef8a21b821c121ed9fa027c9d32 ",https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-554528497,554528497,
jnewbery,2019-11-15 22:19:05,Thanks for the branch @dongcarl ! I've reset to that and made a couple of minor comment changes.,https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-554551727,554551727,
jnewbery,2019-11-22 21:27:01,Thanks for the review @jkczyz . I've updated the function comment to be less redundant.,https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-557700722,557700722,
jnewbery,2019-12-19 19:23:12,rebased,https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-567627381,567627381,
jnewbery,2020-03-13 20:46:18,rebased,https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-598904334,598904334,
jnewbery,2020-03-22 02:18:49,Thanks :octopus: . I've rebased on master.,https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-602137630,602137630,
jnewbery,2020-04-15 20:52:55,rebased,https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-614274230,614274230,
jnewbery,2020-04-16 19:33:07,rebased,https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-614853019,614853019,
jnewbery,2020-05-14 20:34:07,Oops. Bad rebase. Should be fixed now.,https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-628872357,628872357,
jonatack,2020-07-08 06:37:47,"Concept ACK, will review after rebase.",https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-655319425,655319425,
jnewbery,2020-07-12 16:47:53,rebased,https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-657247766,657247766,
dongcarl,2020-07-14 16:54:19,"Took some time to prove to myself that there are no unintended behaviour changes. It wasn't obvious to me that 5e5d58c829001a774e2481a4a8c3598917b06e53 is trivially correct, so I'm most likely missing some context here.\n\nMy understanding is that prior to 5e5d58c829001a774e2481a4a8c3598917b06e53, `BlockChecked` is only called when `CheckBlock` or `AcceptBlock` returns false in `ProcessNewBlock`",https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-658293827,658293827,
jnewbery,2020-07-16 14:03:02,The first commit has now been merged in #19533. I've rebased the remaining commits on master.,https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-659433523,659433523,
jnewbery,2020-08-24 14:30:38,rebased,https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-679162173,679162173,
DrahtBot,2020-09-07 17:41:21,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-688452423,688452423,
jnewbery,2020-09-16 09:21:37,"I'm focused on other things right now, so I'm going to close this with the intention of opening it again at some point in the future.",https://github.com/bitcoin/bitcoin/pull/17479#issuecomment-693284719,693284719,
dongcarl,2019-11-15 21:07:35,Perhaps I'm understanding wrong but this shouldn't apply anymore?,https://github.com/bitcoin/bitcoin/pull/17479#discussion_r347011474,347011474,src/validation.h
jnewbery,2019-11-15 22:23:13,"BlockChecked is called for any block that we try to connect to the chain. See the call in `ConnectTip()`:\n\n- if the call to `ConnectBlock()` failed, then we'll call `BlockChecked()` with a state that is NOT `IsValid()`.\n- if the call to `ConnectBlock()` succeeded, then the block has been connected and is part of the main chain, and we'll call `BlockChecked()` with a state that IS `IsValid()`",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r347035231,347035231,src/validation.h
ariard,2019-11-18 19:50:34,"`submitblock_StateCacher` is the last client of validationinterface, I think we can go further, tweak it a bit and remove definitely `BlockChecked`, see : https://github.com/ariard/bitcoin/commits/2019-11-processnewblock-review\n(but maybe to include this in a follow-up cleanup PR?)",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r347577049,347577049,src/rpc/mining.cpp
ariard,2019-11-18 19:57:34,Isn't this check break `BlockChecked` where we check `state.IsValid` for promoting peer to compact block announcement?,https://github.com/bitcoin/bitcoin/pull/17479#discussion_r347580252,347580252,src/net_processing.cpp
ariard,2019-11-18 20:03:34,"Can't this branch combined with `BlockChecked` by passing new_block as param? Even wonder if we still need `fNewBlock` in PNB, as  `BlockChecked`  erase block from `mapBlockSource` independently of validity/novelty",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r347582776,347582776,src/net_processing.cpp
jnewbery,2019-11-18 21:25:55,No. `BlockProcessed` is only called when `ProcessNewBlock()` returns early because the block failed `CheckBlock()` or `AcceptBlock()`. The logic you're talking about for promoting a peer to compact block announcement in `BlockChecked()` is only invoked when `BlockChecked()` is called after successfully connecting a valid block.,https://github.com/bitcoin/bitcoin/pull/17479#discussion_r347617540,347617540,src/net_processing.cpp
jnewbery,2019-11-18 21:29:00,"`BlockChecked()` will only be called from `BlockProcessed()` if the block failed `CheckBlock()`/`AcceptBlock()`. This else branch is catching the case where the block didn't fail, but we've seen it before.\n\nIf you think this can be cleaned up further, perhaps we can do it in a follow-up PR.",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r347618870,347618870,src/net_processing.cpp
jnewbery,2019-11-18 21:31:33,"Yes, I was planning to do this as a follow-up PR.\n\nI've had a quick look at your branch. I think it misses breaks the 'promote to announcing compact blocks' behaviour. We'd want to move that to a different validation interface event (probably `UpdatedBlockTip()`)",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r347619936,347619936,src/rpc/mining.cpp
ariard,2019-11-19 16:38:50,"Right, right, the call to `BlockChecked` is still in `ConnectTip` path on your branch. I still think that's counter-intuitive to have both peer punishment and compact blocks promotion in one function, so would be down to split in a follow-up PR and like you said previously rely on `UpdatedBlockTip` for the latter.",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r348037038,348037038,src/net_processing.cpp
ariard,2019-11-19 16:41:52,"Ah yes, agree with you, better to do it in a follow-up PR to avoid breaking things inadvertently.",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r348038837,348038837,src/rpc/mining.cpp
jkczyz,2019-11-21 22:53:01,"The documentation strikes me as repetitive with the code. Perhaps it could be phrased differently such that if the code changes the comment doesn't need to be updated.\n\nnit: s/was failed/failed",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r349358840,349358840,src/net_processing.cpp
jnewbery,2019-11-22 21:21:32,Work in progress: https://github.com/jnewbery/bitcoin/tree/2019-11-remove-block-checked,https://github.com/bitcoin/bitcoin/pull/17479#discussion_r349799232,349799232,src/rpc/mining.cpp
ariard,2020-05-26 01:31:47,"db0eecc\n\nnit: Is there any guidelines on parameters sorting ? You can sort by param[in] then param[out]. It makes easier to reason on function. You can also precise in commit that new `dos_state` isn't used.",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r430114946,430114946,src/validation.h
ariard,2020-05-26 01:35:49,"a85e8b7\n\nIn `ConnectTip`, we call `ConnectBlock` then `BlockChecked` callback independently of success or failure of block validation ?",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r430115761,430115761,src/net_processing.cpp
ariard,2020-05-26 01:39:39,"8fc192c\n\nIs commit message right ? It mentions ""Net processing now passes a BlockValidationState object into\nProcessNewBlock()"" but in fact it's passing this object to `BlockProcessed` therefore making it used.",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r430116434,430116434,src/validation.h
ariard,2020-05-26 01:42:40,"8fc192c\n\nStill on commit message, ""Net processing wants to know about those failed check immediately..."" Can you explain why ? Overall, PR needs better motivation, I think you can point to changes in #18963, and the [asynchronicity gain](https://github.com/bitcoin/bitcoin/pull/18963/commits/7532cf6c56d015e8bae646138d71df825d2684ab), instead of compact blocks ones.  ",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r430116965,430116965,src/validation.h
ariard,2020-05-26 01:45:17,"8fc192c\n\nHow does this new check behaves with regards to write-failure, first-seen block ? In `AcceptBlock`, if `blockPos` returned by `SaveBlockToDisk` is null, an error is set and not an invalid state, so it won't be erased by above `BlockChecked` call. I think it's catch up in current code but not after changes.",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r430117481,430117481,src/net_processing.cpp
ariard,2020-05-26 01:49:32,"8fc192c\n\nI think this whole comment can be made clearer. \n\n""You have 2 types of feedbacks:\n- unconditional : submitted block validity with regards to mutation, anti-Dos is returned through `BlockValidationState`. It may be used for housekeeping as in `BlockProcessed`\n- conditional : if caller subscribe to `CValidationInterface` and if submitted block passed those first checks, `Activat",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r430118345,430118345,src/validation.h
jonatack,2020-07-24 16:55:13,"1dd78f41 \n\n- params order: can the `[out]` param `state` be inserted after the `[in]` params?\n\n- should `@param[in] chainparams` be added to the doxygen comment?\n\n- maybe I'm missing something obvious; any reason to not name `state`/`dos_state` consistently throughout, while adding it?",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r460174174,460174174,src/validation.h
jonatack,2020-07-24 17:02:42,"In 6730b5931 and 372913c9dfe4, can doxygen documentation be added for `BlockProcessed` params as they are added?",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r460177889,460177889,src/net_processing.cpp
jonatack,2020-07-24 17:07:45,"372913c9df nits:\n\n- slightly clearer, more differentiating wording could be `s/we've/we have/` and \n`s/we haven't/we have not/`\n\n- why is past tense used above (""block failed"", ""was valid"") and here present tense (""is valid"")\n\n- s/set/Set/",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r460180340,460180340,src/net_processing.cpp
jonatack,2020-07-24 17:13:31,1dd78f4 Is there a reason to rename `state` to `dos_state` throughout this function? Doing so adds a fair amount of noise.,https://github.com/bitcoin/bitcoin/pull/17479#discussion_r460183117,460183117,src/validation.cpp
jonatack,2020-07-24 17:16:41,"5f552a0a34 This change could be done in the same commit 1dd78f4 that adds `state/dos_state` to the params. That said, is it strictly necessary? (a) The change adds noise and ISTM the comment and code position make it clear enough; (b) *dummy* is the kind of naming, like certain others (e.g. *master/slave*, *whitelist/blacklist*, etc.) that is perhaps a bit in decline nowadays and being deprecated,",https://github.com/bitcoin/bitcoin/pull/17479#discussion_r460184856,460184856,src/validation.cpp
