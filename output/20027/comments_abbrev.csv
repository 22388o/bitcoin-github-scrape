DrahtBot,2020-09-28 03:53:01,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20044 (Make all of net_processing (and some of net) use std::chrono types by sipa)\n* #19893 (test: Remove or explain syn",https://github.com/bitcoin/bitcoin/pull/20027#issuecomment-699754735,699754735,
naumenkogs,2020-09-28 06:42:22,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20027#issuecomment-699808948,699808948,
practicalswift,2020-09-28 13:13:50,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20027#issuecomment-699998356,699998356,
jnewbery,2020-10-07 08:41:15,ACK e5c0223614d61d3d885b1c7eaf5ee095cd7d15ed,https://github.com/bitcoin/bitcoin/pull/20027#issuecomment-704786679,704786679,
MarcoFalke,2020-10-08 08:15:05,"ACK b6834e312a ðŸŒ¶\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK b6834e312a ðŸŒ¶\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiqVAwAkgjqSWeoLAE5Eej6vdWXcdAqJlztAhCbdlyCZJJRd/Wu34rtBvHC0fwW\nUsmVfevPkIL4ejJqUsII+h2QidQv8Ie//EiX+9HtdeQIbpX0AgW",https://github.com/bitcoin/bitcoin/pull/20027#issuecomment-705408977,705408977,
jnewbery,2020-10-08 09:17:29,utACK b6834e312a6a7bb395ec7266bc9469384639df96,https://github.com/bitcoin/bitcoin/pull/20027#issuecomment-705442835,705442835,
naumenkogs,2020-10-08 09:31:05,"utACK b6834e3\n\nI agree with the comments by @ajtowns, but I guess it can only introduce problems on regtest? And since this PR is necessary for #19988, I think it's fine, that can be fixed later. ",https://github.com/bitcoin/bitcoin/pull/20027#issuecomment-705450701,705450701,
MarcoFalke,2020-09-28 06:27:33,"This is not type safe, because someone could changed the type of current_time to have more or less precision than it has now. Please see the `count_` helpers.",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r495713665,495713665,src/net_processing.cpp
MarcoFalke,2020-09-28 06:31:18,"Is there any reason to subtract the time it took to send previous messages from the next send? It probably doesn't matter too much, because we assume that sending all messages is instantaneous, but getting the current time is also trivial complexity, so I have a slight preference to keep the getter here.",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r495714998,495714998,src/net_processing.cpp
MarcoFalke,2020-09-28 06:32:05,"Can you explain why this is needed, what this is trying to achieve? #19893 ",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r495715257,495715257,test/functional/wallet_resendwallettransactions.py
MarcoFalke,2020-09-28 06:33:45,none of the `.count` in this scope are type safe (see comment above),https://github.com/bitcoin/bitcoin/pull/20027#discussion_r495715858,495715858,src/net_processing.cpp
sipa,2020-09-28 06:56:50,"That's indeed better, done.\n\nA bit more abstractly, I don't think that's very different from the risk of `nHeadersSyncTimeout` being changed to represent a time in nanoseconds instead of microseconds, for example. We're mixing std::chrono types with integers, and the conversions will always involve these risks. The correct approach is to get rid of all of those, and replace them all with `std:",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r495725021,495725021,src/net_processing.cpp
sipa,2020-09-28 07:04:39,"I generally think we're making way too many time calls already, and I doubt microsecond precisions matters at all for the fee filter sending.",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r495728306,495728306,src/net_processing.cpp
sipa,2020-09-28 07:05:10,"I copied it from elsewhere; it works fine without the `syncwithvalidationinterfacequeue` call, so I've removed it.",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r495728533,495728533,test/functional/wallet_resendwallettransactions.py
sipa,2020-09-28 07:05:22,Fixed.,https://github.com/bitcoin/bitcoin/pull/20027#discussion_r495728640,495728640,src/net_processing.cpp
ajtowns,2020-10-07 00:14:01,"I'm not sure it's a good idea to link mockable time to network delays in general -- if you bump the mocktime by a hours/days that shouldn't risk triggering ""hey this peer hasn't said anything for ages, let's disconnect"" conditions, and equally if you backdate the mocktime for some reason, that shouldn't cause network tasks to say ""oh, we decided we don't need to do anything until time t, which is ",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r500665474,500665474,test/functional/p2p_tx_download.py
ajtowns,2020-10-07 00:36:53,"a) We're not actually sending the messages there, just moving them in memory to a different queue, so it should take microseconds\nb) This is often only called in intervals of 100ms, and randomly delayed depending on how long it takes to deal with other peers, so accuracy won't be that fine-grained anyway\nc) The only times affected by not using an updated timestamp here are ones chosen in compa",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r500671894,500671894,src/net_processing.cpp
ajtowns,2020-10-07 00:39:20,Swich to `count_microseconds(GetTime<std::chrono::microseconds>())` and lose the `<int64_t>` ?,https://github.com/bitcoin/bitcoin/pull/20027#discussion_r500672498,500672498,src/net_processing.cpp
ajtowns,2020-10-07 01:29:56,"Not really directly related? I think this makes sense for instances where time isn't increasing, which can happen with mocktime or (I think) on systems that return cached values of the system time.",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r500685197,500685197,src/net_processing.cpp
sipa,2020-10-07 22:40:35,"I think we'll indeed a number of timers for different purposes, eventually:\n* System time (possibly adjusted by peer data), for use in block and wallet transaction timestamps (as they have an absolute UNIX epoch as reference ).\n* Steady time, mockable, for timing application level events (tx relay, pinging, addr rebroadcast, ...).\n* Steady time, for avoiding busy looping (like select() timeo",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r501350411,501350411,test/functional/p2p_tx_download.py
sipa,2020-10-07 23:23:46,"WIthout this you see ""timing mishap"" errors in the function test logs.",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r501365107,501365107,src/net_processing.cpp
sipa,2020-10-07 23:24:18,Done.,https://github.com/bitcoin/bitcoin/pull/20027#discussion_r501365295,501365295,src/net_processing.cpp
ajtowns,2020-10-08 00:14:54,"Right, but I mean you already see those errors without the other changes in this patch.",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r501380053,501380053,src/net_processing.cpp
sipa,2020-10-08 02:12:59,"Oh, ok. Gone.",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r501409095,501409095,src/net_processing.cpp
ajtowns,2020-10-08 02:37:46,"Err? A separate commit with `Allow for ping response time of 0us (avoids ""timing mishap"" errors when mocktime is set)` or similar would be fine and clear IMO, seems a bit trivial to separate into a PR of its own. (Or just leaving it in and letting people who're curious trace it back to this PR and read the explanation above would also be fine) But either way.",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r501414691,501414691,src/net_processing.cpp
sipa,2020-10-08 02:41:09,Ok!,https://github.com/bitcoin/bitcoin/pull/20027#discussion_r501415470,501415470,src/net_processing.cpp
MarcoFalke,2020-10-08 07:26:52,"It seems a bit confusing to ""use mockable time everywhere"", but then start adding wallclock sleeps in tests. Also, the comment refers to ""trickle"", but should probably say ""wallet resend"". (The trickle happens when you call `setmocktime + 600` in the next line). I suggest the following diff:\n\n```diff\ndiff --git a/test/functional/wallet_resendwallettransactions.py b/test/functional/wallet_res",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r501502965,501502965,test/functional/wallet_resendwallettransactions.py
sipa,2020-10-08 08:05:15,Done.,https://github.com/bitcoin/bitcoin/pull/20027#discussion_r501524674,501524674,test/functional/wallet_resendwallettransactions.py
MarcoFalke,2020-10-08 09:40:29,"I disagree that system time (used for blocks and wallet txs) should not be mockable. For example, sometimes we want to create a deterministic blockchain, so the block times need to be fixed. I know it is possible to use the python block generator, but I don't see a strong reason to disallow system time to be mocked.\n\nEdit: So it is also important to be able to say ""set time to a constant"" inst",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r501584671,501584671,test/functional/p2p_tx_download.py
ajtowns,2020-10-08 19:54:38,"I think the idea was to have two ways of mocking -- fix the system time to X (and prevent it from advancing, so time goes t, t+1, t+2, t+3, X, X, X, X), or bump the system time by D (so time goes t, t+1, t+2, t+3, t+D+3, t+D+4, t+D+5).",https://github.com/bitcoin/bitcoin/pull/20027#discussion_r501975747,501975747,test/functional/p2p_tx_download.py
rebroad,2021-02-23 15:35:12,seems like a backwards step turning neat code into lengthy code - why not use a function for this or change GetTimeMicros() itself?,https://github.com/bitcoin/bitcoin/pull/20027#discussion_r581141045,581141045,src/net_processing.cpp
