[
  {
    "sha": "ec3916f40a3fc644ecbbaaddef6258937c7fcfbc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzM5MTZmNDBhM2ZjNjQ0ZWNiYmFhZGRlZjYyNTg5MzdjN2ZjZmJj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-27T21:43:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-08T08:04:29Z"
      },
      "message": "Use mockable time everywhere in net_processing",
      "tree": {
        "sha": "bba4bbe9983387cafb8f4a1873d2e3e3516dce7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bba4bbe9983387cafb8f4a1873d2e3e3516dce7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec3916f40a3fc644ecbbaaddef6258937c7fcfbc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec3916f40a3fc644ecbbaaddef6258937c7fcfbc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec3916f40a3fc644ecbbaaddef6258937c7fcfbc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec3916f40a3fc644ecbbaaddef6258937c7fcfbc/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "283a73d7eaea2907a6f7f800f529a0d6db53d7a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/283a73d7eaea2907a6f7f800f529a0d6db53d7a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/283a73d7eaea2907a6f7f800f529a0d6db53d7a6"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 33,
      "deletions": 38
    },
    "files": [
      {
        "sha": "631981217bbb9eff2038468ddf90b610e07ed7bc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 21,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec3916f40a3fc644ecbbaaddef6258937c7fcfbc/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec3916f40a3fc644ecbbaaddef6258937c7fcfbc/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ec3916f40a3fc644ecbbaaddef6258937c7fcfbc",
        "patch": "@@ -582,7 +582,7 @@ static bool MarkBlockAsReceived(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs\n         }\n         if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n             // First block on the queue was received, update the start download time for the next one\n-            state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n+            state->nDownloadingSince = std::max(state->nDownloadingSince, count_microseconds(GetTime<std::chrono::microseconds>()));\n         }\n         state->vBlocksInFlight.erase(itInFlight->second.second);\n         state->nBlocksInFlight--;\n@@ -617,7 +617,7 @@ static bool MarkBlockAsInFlight(CTxMemPool& mempool, NodeId nodeid, const uint25\n     state->nBlocksInFlightValidHeaders += it->fValidatedHeaders;\n     if (state->nBlocksInFlight == 1) {\n         // We're starting a block download (batch) from this peer.\n-        state->nDownloadingSince = GetTimeMicros();\n+        state->nDownloadingSince = GetTime<std::chrono::microseconds>().count();\n     }\n     if (state->nBlocksInFlightValidHeaders == 1 && pindex != nullptr) {\n         nPeersWithValidatedDownloads++;\n@@ -4102,7 +4102,6 @@ bool PeerManager::SendMessages(CNode* pto)\n         CNodeState &state = *State(pto->GetId());\n \n         // Address refresh broadcast\n-        int64_t nNow = GetTimeMicros();\n         auto current_time = GetTime<std::chrono::microseconds>();\n \n         if (pto->RelayAddrsWithConn() && !::ChainstateActive().IsInitialBlockDownload() && pto->m_next_local_addr_send < current_time) {\n@@ -4148,7 +4147,7 @@ bool PeerManager::SendMessages(CNode* pto)\n             // Only actively request headers from a single peer, unless we're close to today.\n             if ((nSyncStarted == 0 && fFetch) || pindexBestHeader->GetBlockTime() > GetAdjustedTime() - 24 * 60 * 60) {\n                 state.fSyncStarted = true;\n-                state.nHeadersSyncTimeout = GetTimeMicros() + HEADERS_DOWNLOAD_TIMEOUT_BASE + HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER * (GetAdjustedTime() - pindexBestHeader->GetBlockTime())/(consensusParams.nPowTargetSpacing);\n+                state.nHeadersSyncTimeout = count_microseconds(current_time) + HEADERS_DOWNLOAD_TIMEOUT_BASE + HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER * (GetAdjustedTime() - pindexBestHeader->GetBlockTime())/(consensusParams.nPowTargetSpacing);\n                 nSyncStarted++;\n                 const CBlockIndex *pindexStart = pindexBestHeader;\n                 /* If possible, start at the block preceding the currently\n@@ -4329,7 +4328,7 @@ bool PeerManager::SendMessages(CNode* pto)\n                 if (pto->m_tx_relay->nNextInvSend < current_time) {\n                     fSendTrickle = true;\n                     if (pto->IsInboundConn()) {\n-                        pto->m_tx_relay->nNextInvSend = std::chrono::microseconds{m_connman.PoissonNextSendInbound(nNow, INVENTORY_BROADCAST_INTERVAL)};\n+                        pto->m_tx_relay->nNextInvSend = std::chrono::microseconds{m_connman.PoissonNextSendInbound(count_microseconds(current_time), INVENTORY_BROADCAST_INTERVAL)};\n                     } else {\n                         // Use half the delay for outbound peers, as there is less privacy concern for them.\n                         pto->m_tx_relay->nNextInvSend = PoissonNextSend(current_time, std::chrono::seconds{INVENTORY_BROADCAST_INTERVAL >> 1});\n@@ -4428,20 +4427,20 @@ bool PeerManager::SendMessages(CNode* pto)\n                         nRelayedTransactions++;\n                         {\n                             // Expire old relay messages\n-                            while (!vRelayExpiration.empty() && vRelayExpiration.front().first < nNow)\n+                            while (!vRelayExpiration.empty() && vRelayExpiration.front().first < count_microseconds(current_time))\n                             {\n                                 mapRelay.erase(vRelayExpiration.front().second);\n                                 vRelayExpiration.pop_front();\n                             }\n \n                             auto ret = mapRelay.emplace(txid, std::move(txinfo.tx));\n                             if (ret.second) {\n-                                vRelayExpiration.emplace_back(nNow + std::chrono::microseconds{RELAY_TX_CACHE_TIME}.count(), ret.first);\n+                                vRelayExpiration.emplace_back(count_microseconds(current_time + std::chrono::microseconds{RELAY_TX_CACHE_TIME}), ret.first);\n                             }\n                             // Add wtxid-based lookup into mapRelay as well, so that peers can request by wtxid\n                             auto ret2 = mapRelay.emplace(wtxid, ret.first->second);\n                             if (ret2.second) {\n-                                vRelayExpiration.emplace_back(nNow + std::chrono::microseconds{RELAY_TX_CACHE_TIME}.count(), ret2.first);\n+                                vRelayExpiration.emplace_back(count_microseconds(current_time + std::chrono::microseconds{RELAY_TX_CACHE_TIME}), ret2.first);\n                             }\n                         }\n                         if (vInv.size() == MAX_INV_SZ) {\n@@ -4466,10 +4465,7 @@ bool PeerManager::SendMessages(CNode* pto)\n \n         // Detect whether we're stalling\n         current_time = GetTime<std::chrono::microseconds>();\n-        // nNow is the current system time (GetTimeMicros is not mockable) and\n-        // should be replaced by the mockable current_time eventually\n-        nNow = GetTimeMicros();\n-        if (state.nStallingSince && state.nStallingSince < nNow - 1000000 * BLOCK_STALLING_TIMEOUT) {\n+        if (state.nStallingSince && state.nStallingSince < count_microseconds(current_time) - 1000000 * BLOCK_STALLING_TIMEOUT) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n@@ -4485,7 +4481,7 @@ bool PeerManager::SendMessages(CNode* pto)\n         if (state.vBlocksInFlight.size() > 0) {\n             QueuedBlock &queuedBlock = state.vBlocksInFlight.front();\n             int nOtherPeersWithValidatedDownloads = nPeersWithValidatedDownloads - (state.nBlocksInFlightValidHeaders > 0);\n-            if (nNow > state.nDownloadingSince + consensusParams.nPowTargetSpacing * (BLOCK_DOWNLOAD_TIMEOUT_BASE + BLOCK_DOWNLOAD_TIMEOUT_PER_PEER * nOtherPeersWithValidatedDownloads)) {\n+            if (count_microseconds(current_time) > state.nDownloadingSince + consensusParams.nPowTargetSpacing * (BLOCK_DOWNLOAD_TIMEOUT_BASE + BLOCK_DOWNLOAD_TIMEOUT_PER_PEER * nOtherPeersWithValidatedDownloads)) {\n                 LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", queuedBlock.hash.ToString(), pto->GetId());\n                 pto->fDisconnect = true;\n                 return true;\n@@ -4495,7 +4491,7 @@ bool PeerManager::SendMessages(CNode* pto)\n         if (state.fSyncStarted && state.nHeadersSyncTimeout < std::numeric_limits<int64_t>::max()) {\n             // Detect whether this is a stalling initial-headers-sync peer\n             if (pindexBestHeader->GetBlockTime() <= GetAdjustedTime() - 24 * 60 * 60) {\n-                if (nNow > state.nHeadersSyncTimeout && nSyncStarted == 1 && (nPreferredDownload - state.fPreferredDownload >= 1)) {\n+                if (count_microseconds(current_time) > state.nHeadersSyncTimeout && nSyncStarted == 1 && (nPreferredDownload - state.fPreferredDownload >= 1)) {\n                     // Disconnect a peer (without the noban permission) if it is our only sync peer,\n                     // and we have others we could be using instead.\n                     // Note: If all our peers are inbound, then we won't\n@@ -4545,7 +4541,7 @@ bool PeerManager::SendMessages(CNode* pto)\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n                 if (State(staller)->nStallingSince == 0) {\n-                    State(staller)->nStallingSince = nNow;\n+                    State(staller)->nStallingSince = count_microseconds(current_time);\n                     LogPrint(BCLog::NET, \"Stall started peer=%d\\n\", staller);\n                 }\n             }\n@@ -4629,7 +4625,6 @@ bool PeerManager::SendMessages(CNode* pto)\n             !pto->HasPermission(PF_FORCERELAY) // peers with the forcerelay permission should not filter txs to us\n         ) {\n             CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n-            int64_t timeNow = GetTimeMicros();\n             static FeeFilterRounder g_filter_rounder{CFeeRate{DEFAULT_MIN_RELAY_TX_FEE}};\n             if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\n                 // Received tx-inv messages are discarded when the active\n@@ -4640,24 +4635,24 @@ bool PeerManager::SendMessages(CNode* pto)\n                 if (pto->m_tx_relay->lastSentFeeFilter == MAX_FILTER) {\n                     // Send the current filter if we sent MAX_FILTER previously\n                     // and made it out of IBD.\n-                    pto->m_tx_relay->nextSendTimeFeeFilter = timeNow - 1;\n+                    pto->m_tx_relay->nextSendTimeFeeFilter = count_microseconds(current_time) - 1;\n                 }\n             }\n-            if (timeNow > pto->m_tx_relay->nextSendTimeFeeFilter) {\n+            if (count_microseconds(current_time) > pto->m_tx_relay->nextSendTimeFeeFilter) {\n                 CAmount filterToSend = g_filter_rounder.round(currentFilter);\n                 // We always have a fee filter of at least minRelayTxFee\n                 filterToSend = std::max(filterToSend, ::minRelayTxFee.GetFeePerK());\n                 if (filterToSend != pto->m_tx_relay->lastSentFeeFilter) {\n                     m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::FEEFILTER, filterToSend));\n                     pto->m_tx_relay->lastSentFeeFilter = filterToSend;\n                 }\n-                pto->m_tx_relay->nextSendTimeFeeFilter = PoissonNextSend(timeNow, AVG_FEEFILTER_BROADCAST_INTERVAL);\n+                pto->m_tx_relay->nextSendTimeFeeFilter = PoissonNextSend(count_microseconds(current_time), AVG_FEEFILTER_BROADCAST_INTERVAL);\n             }\n             // If the fee filter has changed substantially and it's still more than MAX_FEEFILTER_CHANGE_DELAY\n             // until scheduled broadcast, then move the broadcast to within MAX_FEEFILTER_CHANGE_DELAY.\n-            else if (timeNow + MAX_FEEFILTER_CHANGE_DELAY * 1000000 < pto->m_tx_relay->nextSendTimeFeeFilter &&\n+            else if (count_microseconds(current_time) + MAX_FEEFILTER_CHANGE_DELAY * 1000000 < pto->m_tx_relay->nextSendTimeFeeFilter &&\n                      (currentFilter < 3 * pto->m_tx_relay->lastSentFeeFilter / 4 || currentFilter > 4 * pto->m_tx_relay->lastSentFeeFilter / 3)) {\n-                pto->m_tx_relay->nextSendTimeFeeFilter = timeNow + GetRandInt(MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n+                pto->m_tx_relay->nextSendTimeFeeFilter = count_microseconds(current_time) + GetRandInt(MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n             }\n         }\n     } // release cs_main"
      },
      {
        "sha": "5c3f021b3fde1d509c26e194ec3b477c4cbce3cd",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec3916f40a3fc644ecbbaaddef6258937c7fcfbc/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec3916f40a3fc644ecbbaaddef6258937c7fcfbc/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=ec3916f40a3fc644ecbbaaddef6258937c7fcfbc",
        "patch": "@@ -158,23 +158,19 @@ def test_spurious_notfound(self):\n         self.nodes[0].p2ps[0].send_message(msg_notfound(vec=[CInv(MSG_TX, 1)]))\n \n     def run_test(self):\n-        # Setup the p2p connections\n-        self.peers = []\n-        for node in self.nodes:\n-            for _ in range(NUM_INBOUND):\n-                self.peers.append(node.add_p2p_connection(TestP2PConn()))\n-\n-        self.log.info(\"Nodes are setup with {} incoming connections each\".format(NUM_INBOUND))\n-\n-        self.test_spurious_notfound()\n-\n-        # Test the in-flight max first, because we want no transactions in\n-        # flight ahead of this test.\n-        self.test_in_flight_max()\n-\n-        self.test_inv_block()\n-\n-        self.test_tx_requests()\n+        # Run each test against new bitcoind instances, as setting mocktimes has long-term effects on when\n+        # the next trickle relay event happens.\n+        for test in [self.test_spurious_notfound, self.test_in_flight_max, self.test_inv_block, self.test_tx_requests]:\n+            self.stop_nodes()\n+            self.start_nodes()\n+            self.connect_nodes(1, 0)\n+            # Setup the p2p connections\n+            self.peers = []\n+            for node in self.nodes:\n+                for _ in range(NUM_INBOUND):\n+                    self.peers.append(node.add_p2p_connection(TestP2PConn()))\n+            self.log.info(\"Nodes are setup with {} incoming connections each\".format(NUM_INBOUND))\n+            test()\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "1dcb12de08af3a894c7c975bbeafbaae0a38f56e",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec3916f40a3fc644ecbbaaddef6258937c7fcfbc/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec3916f40a3fc644ecbbaaddef6258937c7fcfbc/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=ec3916f40a3fc644ecbbaaddef6258937c7fcfbc",
        "patch": "@@ -64,6 +64,10 @@ def run_test(self):\n         # Transaction should be rebroadcast approximately 24 hours in the future,\n         # but can range from 12-36. So bump 36 hours to be sure.\n         node.setmocktime(now + 36 * 60 * 60)\n+        # Tell scheduler to call MaybeResendWalletTxn now.\n+        node.mockscheduler(1)\n+        # Give some time for trickle to occur\n+        node.setmocktime(now + 36 * 60 * 60 + 600)\n         peer_second.wait_for_broadcast([txid])\n \n "
      }
    ]
  },
  {
    "sha": "b6834e312a6a7bb395ec7266bc9469384639df96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjgzNGUzMTJhNmE3YmIzOTVlYzcyNjZiYzk0NjkzODQ2MzlkZjk2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-08T02:40:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-08T08:04:29Z"
      },
      "message": "Avoid 'timing mishap' warnings when mocking",
      "tree": {
        "sha": "731dd3a10ba0cd8b3a134e49085c671699e5a088",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/731dd3a10ba0cd8b3a134e49085c671699e5a088"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6834e312a6a7bb395ec7266bc9469384639df96",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6834e312a6a7bb395ec7266bc9469384639df96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6834e312a6a7bb395ec7266bc9469384639df96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6834e312a6a7bb395ec7266bc9469384639df96/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec3916f40a3fc644ecbbaaddef6258937c7fcfbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec3916f40a3fc644ecbbaaddef6258937c7fcfbc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec3916f40a3fc644ecbbaaddef6258937c7fcfbc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "490ae8db825c0147104aed42ff8a9c4ff436b681",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6834e312a6a7bb395ec7266bc9469384639df96/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6834e312a6a7bb395ec7266bc9469384639df96/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b6834e312a6a7bb395ec7266bc9469384639df96",
        "patch": "@@ -3637,7 +3637,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                     // Matching pong received, this ping is no longer outstanding\n                     bPingFinished = true;\n                     const auto ping_time = ping_end - pfrom.m_ping_start.load();\n-                    if (ping_time.count() > 0) {\n+                    if (ping_time.count() >= 0) {\n                         // Successful ping time measurement, replace previous\n                         pfrom.nPingUsecTime = count_microseconds(ping_time);\n                         pfrom.nMinPingUsecTime = std::min(pfrom.nMinPingUsecTime.load(), count_microseconds(ping_time));"
      }
    ]
  }
]