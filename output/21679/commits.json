[
  {
    "sha": "f81ef4303e057e85aa24772c865287c17ffa4350",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODFlZjQzMDNlMDU3ZTg1YWEyNDc3MmM4NjUyODdjMTdmZmE0MzUw",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2021-04-14T14:01:00Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2021-04-16T23:22:53Z"
      },
      "message": "rpc: Keep default argument value in correct type",
      "tree": {
        "sha": "ff75b3ae7de4168e6892bae353a898121c267418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff75b3ae7de4168e6892bae353a898121c267418"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f81ef4303e057e85aa24772c865287c17ffa4350",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f81ef4303e057e85aa24772c865287c17ffa4350",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f81ef4303e057e85aa24772c865287c17ffa4350",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f81ef4303e057e85aa24772c865287c17ffa4350/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a12962ca894075ae203ab808db4ba5dab23346d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a12962ca894075ae203ab808db4ba5dab23346d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a12962ca894075ae203ab808db4ba5dab23346d1"
      }
    ],
    "stats": {
      "total": 370,
      "additions": 187,
      "deletions": 183
    },
    "files": [
      {
        "sha": "32c9bfc626a4bfde161d409f193216ac85789640",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=f81ef4303e057e85aa24772c865287c17ffa4350",
        "patch": "@@ -239,7 +239,7 @@ static RPCHelpMan waitfornewblock()\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n-                    {\"timeout\", RPCArg::Type::NUM, /* default */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n+                    {\"timeout\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -282,7 +282,7 @@ static RPCHelpMan waitforblock()\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"Block hash to wait for.\"},\n-                    {\"timeout\", RPCArg::Type::NUM, /* default */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n+                    {\"timeout\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -329,7 +329,7 @@ static RPCHelpMan waitforblockheight()\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n                     {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Block height to wait for.\"},\n-                    {\"timeout\", RPCArg::Type::NUM, /* default */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n+                    {\"timeout\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -542,8 +542,8 @@ static RPCHelpMan getrawmempool()\n                 \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n                 \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\",\n                 {\n-                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for a json object, false for array of transaction ids\"},\n-                    {\"mempool_sequence\", RPCArg::Type::BOOL, /* default */ \"false\", \"If verbose=false, returns a json object with transaction list and mempool sequence number attached.\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a json object, false for array of transaction ids\"},\n+                    {\"mempool_sequence\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If verbose=false, returns a json object with transaction list and mempool sequence number attached.\"},\n                 },\n                 {\n                     RPCResult{\"for verbose = false\",\n@@ -592,7 +592,7 @@ static RPCHelpMan getmempoolancestors()\n                 \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id (must be in mempool)\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for a json object, false for array of transaction ids\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a json object, false for array of transaction ids\"},\n                 },\n                 {\n                     RPCResult{\"for verbose = false\",\n@@ -656,7 +656,7 @@ static RPCHelpMan getmempooldescendants()\n                 \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id (must be in mempool)\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for a json object, false for array of transaction ids\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a json object, false for array of transaction ids\"},\n                 },\n                 {\n                     RPCResult{\"for verbose = false\",\n@@ -782,7 +782,7 @@ static RPCHelpMan getblockheader()\n                 \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"true\", \"true for a json object, false for the hex-encoded data\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"true for a json object, false for the hex-encoded data\"},\n                 },\n                 {\n                     RPCResult{\"for verbose = true\",\n@@ -883,7 +883,7 @@ static RPCHelpMan getblock()\n                 \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n-                    {\"verbosity|verbose\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                    {\"verbosity|verbose\", RPCArg::Type::NUM, RPCArg::Default{1}, \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n                 },\n                 {\n                     RPCResult{\"for verbosity = 0\",\n@@ -1046,7 +1046,7 @@ static RPCHelpMan gettxoutsetinfo()\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n                 {\n-                    {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\n+                    {\"hash_type\", RPCArg::Type::STR, RPCArg::Default{\"hash_serialized_2\"}, \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -1105,7 +1105,7 @@ static RPCHelpMan gettxout()\n         {\n             {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n             {\"n\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"vout number\"},\n-            {\"include_mempool\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.\"},\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.\"},\n         },\n         {\n             RPCResult{\"If the UTXO was not found\", RPCResult::Type::NONE, \"\", \"\"},\n@@ -1185,9 +1185,9 @@ static RPCHelpMan verifychain()\n     return RPCHelpMan{\"verifychain\",\n                 \"\\nVerifies blockchain database.\\n\",\n                 {\n-                    {\"checklevel\", RPCArg::Type::NUM, /* default */ strprintf(\"%d, range=0-4\", DEFAULT_CHECKLEVEL),\n+                    {\"checklevel\", RPCArg::Type::NUM, RPCArg::DefaultHint{strprintf(\"%d, range=0-4\", DEFAULT_CHECKLEVEL)},\n                         strprintf(\"How thorough the block verification is:\\n - %s\", Join(CHECKLEVEL_DOC, \"\\n- \"))},\n-                    {\"nblocks\", RPCArg::Type::NUM, /* default */ strprintf(\"%d, 0=all\", DEFAULT_CHECKBLOCKS), \"The number of blocks to check.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, RPCArg::DefaultHint{strprintf(\"%d, 0=all\", DEFAULT_CHECKBLOCKS)}, \"The number of blocks to check.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::BOOL, \"\", \"Verified or not\"},\n@@ -1659,8 +1659,8 @@ static RPCHelpMan getchaintxstats()\n     return RPCHelpMan{\"getchaintxstats\",\n                 \"\\nCompute statistics about the total number and rate of transactions in the chain.\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, /* default */ \"one month\", \"Size of the window in number of blocks\"},\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* default */ \"chain tip\", \"The hash of the block that ends the window.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"one month\"}, \"Size of the window in number of blocks\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"chain tip\"}, \"The hash of the block that ends the window.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -1806,7 +1806,7 @@ static RPCHelpMan getblockstats()\n                 \"It won't work for some heights with pruning.\\n\",\n                 {\n                     {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block hash or height of the target block\", \"\", {\"\", \"string or numeric\"}},\n-                    {\"stats\", RPCArg::Type::ARR, /* default */ \"all values\", \"Values to plot (see result below)\",\n+                    {\"stats\", RPCArg::Type::ARR, RPCArg::DefaultHint{\"all values\"}, \"Values to plot (see result below)\",\n                         {\n                             {\"height\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Selected statistic\"},\n                             {\"time\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Selected statistic\"},\n@@ -2173,7 +2173,7 @@ static RPCHelpMan scantxoutset()\n                 {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n                 {\n                     {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n-                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                    {\"range\", RPCArg::Type::RANGE, RPCArg::Default{1000}, \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n                 }},\n             },\n                         \"[scanobjects,...]\"},\n@@ -2310,7 +2310,7 @@ static RPCHelpMan getblockfilter()\n                 \"\\nRetrieve a BIP 157 content filter for a particular block.\\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hash of the block\"},\n-                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"},\n+                    {\"filtertype\", RPCArg::Type::STR, RPCArg::Default{\"basic\"}, \"The type name of the filter\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\","
      },
      {
        "sha": "5c76168a3adb027053533e9c1a8414de3a9742e4",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=f81ef4303e057e85aa24772c865287c17ffa4350",
        "patch": "@@ -88,8 +88,8 @@ static RPCHelpMan getnetworkhashps()\n                 \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n                 \"Pass in [height] to estimate the network speed at the time when a certain block was found.\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, /* default */ \"120\", \"The number of blocks, or -1 for blocks since last difficulty change.\"},\n-                    {\"height\", RPCArg::Type::NUM, /* default */ \"-1\", \"To estimate at the time of the given height.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, RPCArg::Default{120}, \"The number of blocks, or -1 for blocks since last difficulty change.\"},\n+                    {\"height\", RPCArg::Type::NUM, RPCArg::Default{-1}, \"To estimate at the time of the given height.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::NUM, \"\", \"Hashes per second estimated\"},\n@@ -210,7 +210,7 @@ static RPCHelpMan generatetodescriptor()\n         {\n             {\"num_blocks\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"How many blocks are generated immediately.\"},\n             {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor to send the newly generated bitcoin to.\"},\n-            {\"maxtries\", RPCArg::Type::NUM, /* default */ ToString(DEFAULT_MAX_TRIES), \"How many iterations to try.\"},\n+            {\"maxtries\", RPCArg::Type::NUM, RPCArg::Default{DEFAULT_MAX_TRIES}, \"How many iterations to try.\"},\n         },\n         RPCResult{\n             RPCResult::Type::ARR, \"\", \"hashes of blocks generated\",\n@@ -253,7 +253,7 @@ static RPCHelpMan generatetoaddress()\n                 {\n                     {\"nblocks\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"How many blocks are generated immediately.\"},\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address to send the newly generated bitcoin to.\"},\n-                    {\"maxtries\", RPCArg::Type::NUM, /* default */ ToString(DEFAULT_MAX_TRIES), \"How many iterations to try.\"},\n+                    {\"maxtries\", RPCArg::Type::NUM, RPCArg::Default{DEFAULT_MAX_TRIES}, \"How many iterations to try.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"hashes of blocks generated\",\n@@ -513,7 +513,7 @@ static RPCHelpMan getblocktemplate()\n         \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n         \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n         {\n-            {\"template_request\", RPCArg::Type::OBJ, \"{}\", \"Format of the template\",\n+            {\"template_request\", RPCArg::Type::OBJ, RPCArg::Default{UniValue::VOBJ}, \"Format of the template\",\n             {\n                 {\"mode\", RPCArg::Type::STR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n                 {\"capabilities\", RPCArg::Type::ARR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"A list of strings\",\n@@ -945,7 +945,7 @@ static RPCHelpMan submitblock()\n         \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\",\n         {\n             {\"hexdata\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded block data to submit\"},\n-            {\"dummy\", RPCArg::Type::STR, /* default */ \"ignored\", \"dummy value, for compatibility with BIP22. This value is ignored.\"},\n+            {\"dummy\", RPCArg::Type::STR, RPCArg::DefaultHint{\"ignored\"}, \"dummy value, for compatibility with BIP22. This value is ignored.\"},\n         },\n         {\n             RPCResult{\"If the block was accepted\", RPCResult::Type::NONE, \"\", \"\"},\n@@ -1052,7 +1052,7 @@ static RPCHelpMan estimatesmartfee()\n         \"in BIP 141 (witness data is discounted).\\n\",\n         {\n             {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Confirmation target in blocks (1 - 1008)\"},\n-            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"conservative\", \"The fee estimate mode.\\n\"\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"conservative\"}, \"The fee estimate mode.\\n\"\n             \"                   Whether to return a more conservative estimate which also satisfies\\n\"\n             \"                   a longer history. A conservative estimate potentially returns a\\n\"\n             \"                   higher feerate and is more likely to be sufficient for the desired\\n\"\n@@ -1123,7 +1123,7 @@ static RPCHelpMan estimaterawfee()\n                 \"defined in BIP 141 (witness data is discounted).\\n\",\n                 {\n                     {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Confirmation target in blocks (1 - 1008)\"},\n-                    {\"threshold\", RPCArg::Type::NUM, /* default */ \"0.95\", \"The proportion of transactions in a given feerate range that must have been\\n\"\n+                    {\"threshold\", RPCArg::Type::NUM, RPCArg::Default{0.95}, \"The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within conf_target in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.\"},\n                 },"
      },
      {
        "sha": "00a06260ead00b96f5de1051c1d6794eb5d490ec",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=f81ef4303e057e85aa24772c865287c17ffa4350",
        "patch": "@@ -90,7 +90,7 @@ static RPCHelpMan createmultisig()\n                         {\n                             {\"key\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"The hex-encoded public key\"},\n                         }},\n-                    {\"address_type\", RPCArg::Type::STR, /* default */ \"legacy\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"address_type\", RPCArg::Type::STR, RPCArg::Default{\"legacy\"}, \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -475,7 +475,7 @@ static RPCHelpMan getmemoryinfo()\n     return RPCHelpMan{\"getmemoryinfo\",\n                 \"Returns an object containing information about memory usage.\\n\",\n                 {\n-                    {\"mode\", RPCArg::Type::STR, /* default */ \"\\\"stats\\\"\", \"determines what kind of information is returned.\\n\"\n+                    {\"mode\", RPCArg::Type::STR, RPCArg::Default{\"stats\"}, \"determines what kind of information is returned.\\n\"\n             \"  - \\\"stats\\\" returns general statistics about memory usage in the daemon.\\n\"\n             \"  - \\\"mallocinfo\\\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).\"},\n                 },"
      },
      {
        "sha": "6ab2f7566981dedaf8dd5e0d5ebec406122b94e4",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=f81ef4303e057e85aa24772c865287c17ffa4350",
        "patch": "@@ -376,8 +376,8 @@ static RPCHelpMan disconnectnode()\n                 \"\\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n                 \"\\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* default */ \"fallback to nodeid\", \"The IP address/port of the node\"},\n-                    {\"nodeid\", RPCArg::Type::NUM, /* default */ \"fallback to address\", \"The node ID (see getpeerinfo for node IDs)\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::DefaultHint{\"fallback to nodeid\"}, \"The IP address/port of the node\"},\n+                    {\"nodeid\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"fallback to address\"}, \"The node ID (see getpeerinfo for node IDs)\"},\n                 },\n                 RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n@@ -422,7 +422,7 @@ static RPCHelpMan getaddednodeinfo()\n                 \"\\nReturns information about the given added node, or all added nodes\\n\"\n                 \"(note that onetry addnodes are not listed here)\\n\",\n                 {\n-                    {\"node\", RPCArg::Type::STR, /* default */ \"all nodes\", \"If provided, return information about this specific node, otherwise all nodes are returned.\"},\n+                    {\"node\", RPCArg::Type::STR, RPCArg::DefaultHint{\"all nodes\"}, \"If provided, return information about this specific node, otherwise all nodes are returned.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"\",\n@@ -663,8 +663,8 @@ static RPCHelpMan setban()\n                 {\n                     {\"subnet\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\"},\n                     {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\"},\n-                    {\"bantime\", RPCArg::Type::NUM, /* default */ \"0\", \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n-                    {\"absolute\", RPCArg::Type::BOOL, /* default */ \"false\", \"If set, the bantime must be an absolute timestamp expressed in \" + UNIX_EPOCH_TIME},\n+                    {\"bantime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n+                    {\"absolute\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If set, the bantime must be an absolute timestamp expressed in \" + UNIX_EPOCH_TIME},\n                 },\n                 RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n@@ -842,7 +842,7 @@ static RPCHelpMan getnodeaddresses()\n     return RPCHelpMan{\"getnodeaddresses\",\n                 \"\\nReturn known addresses, which can potentially be used to find new nodes in the network.\\n\",\n                 {\n-                    {\"count\", RPCArg::Type::NUM, /* default */ \"1\", \"The maximum number of addresses to return. Specify 0 to return all known addresses.\"},\n+                    {\"count\", RPCArg::Type::NUM, RPCArg::Default{1}, \"The maximum number of addresses to return. Specify 0 to return all known addresses.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"\","
      },
      {
        "sha": "d9747bc2e711160c9aa947eb16c22b86bc08f22f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=f81ef4303e057e85aa24772c865287c17ffa4350",
        "patch": "@@ -85,7 +85,7 @@ static RPCHelpMan getrawtransaction()\n                 \"If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If false, return a string, otherwise return a json object\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If false, return a string, otherwise return a json object\"},\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED_NAMED_ARG, \"The block in which to look for the transaction\"},\n                 },\n                 {\n@@ -383,7 +383,7 @@ static RPCHelpMan createrawtransaction()\n                                 {\n                                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                                     {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n-                                    {\"sequence\", RPCArg::Type::NUM, /* default */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"depends on the value of the 'replaceable' and 'locktime' arguments\"}, \"The sequence number\"},\n                                 },\n                                 },\n                         },\n@@ -405,8 +405,8 @@ static RPCHelpMan createrawtransaction()\n                                 },\n                         },\n                         },\n-                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125-replaceable.\\n\"\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Marks this transaction as BIP125-replaceable.\\n\"\n             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n                 },\n                 RPCResult{\n@@ -445,7 +445,7 @@ static RPCHelpMan decoderawtransaction()\n                 \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction hex string\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n+                    {\"iswitness\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"depends on heuristic tests\"}, \"Whether the transaction hex is a serialized witness transaction.\\n\"\n                         \"If iswitness is not present, heuristic tests will be used in decoding.\\n\"\n                         \"If true, only witness deserialization will be tried.\\n\"\n                         \"If false, only non-witness deserialization will be tried.\\n\"\n@@ -747,7 +747,7 @@ static RPCHelpMan signrawtransactionwithkey()\n                                 },\n                         },\n                         },\n-                    {\"sighashtype\", RPCArg::Type::STR, /* default */ \"ALL\", \"The signature hash type. Must be one of:\\n\"\n+                    {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"ALL\"}, \"The signature hash type. Must be one of:\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n@@ -827,7 +827,7 @@ static RPCHelpMan sendrawtransaction()\n                 \"\\nRelated RPCs: createrawtransaction, signrawtransactionwithkey\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n-                    {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK()),\n+                    {\"maxfeerate\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK())},\n                         \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT +\n                             \"/kB.\\nSet to 0 to accept any fee rate.\\n\"},\n                 },\n@@ -890,7 +890,7 @@ static RPCHelpMan testmempoolaccept()\n                             {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },\n                         },\n-                    {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK()), \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kB\\n\"},\n+                    {\"maxfeerate\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK())}, \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kB\\n\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n@@ -1354,7 +1354,7 @@ static RPCHelpMan finalizepsbt()\n                 \"Implements the Finalizer and Extractor roles.\\n\",\n                 {\n                     {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"},\n-                    {\"extract\", RPCArg::Type::BOOL, /* default */ \"true\", \"If true and the transaction is complete,\\n\"\n+                    {\"extract\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"If true and the transaction is complete,\\n\"\n             \"                             extract and return the complete transaction in normal network serialization instead of the PSBT.\"},\n                 },\n                 RPCResult{\n@@ -1416,7 +1416,7 @@ static RPCHelpMan createpsbt()\n                                 {\n                                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                                     {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n-                                    {\"sequence\", RPCArg::Type::NUM, /* default */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"depends on the value of the 'replaceable' and 'locktime' arguments\"}, \"The sequence number\"},\n                                 },\n                                 },\n                         },\n@@ -1438,8 +1438,8 @@ static RPCHelpMan createpsbt()\n                                 },\n                         },\n                         },\n-                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n                 },\n                 RPCResult{\n@@ -1491,9 +1491,9 @@ static RPCHelpMan converttopsbt()\n                 \"createpsbt and walletcreatefundedpsbt should be used for new applications.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of a raw transaction\"},\n-                    {\"permitsigdata\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, any signatures in the input will be discarded and conversion\\n\"\n+                    {\"permitsigdata\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If true, any signatures in the input will be discarded and conversion\\n\"\n                             \"                              will continue. If false, RPC will fail if any signatures are present.\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n+                    {\"iswitness\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"depends on heuristic tests\"}, \"Whether the transaction hex is a serialized witness transaction.\\n\"\n                         \"If iswitness is not present, heuristic tests will be used in decoding.\\n\"\n                         \"If true, only witness deserialization will be tried.\\n\"\n                         \"If false, only non-witness deserialization will be tried.\\n\"\n@@ -1563,7 +1563,7 @@ static RPCHelpMan utxoupdatepsbt()\n                     {\"\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n                     {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with an output descriptor and extra information\", {\n                          {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n-                         {\"range\", RPCArg::Type::RANGE, \"1000\", \"Up to what index HD chains should be explored (either end or [begin,end])\"},\n+                         {\"range\", RPCArg::Type::RANGE, RPCArg::Default{1000}, \"Up to what index HD chains should be explored (either end or [begin,end])\"},\n                     }},\n                 }},\n             },"
      },
      {
        "sha": "cf80b08b96d245dae3500cb472292e634fb39293",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=f81ef4303e057e85aa24772c865287c17ffa4350",
        "patch": "@@ -135,7 +135,7 @@ static RPCHelpMan help()\n     return RPCHelpMan{\"help\",\n                 \"\\nList all commands, or get help for a specified command.\\n\",\n                 {\n-                    {\"command\", RPCArg::Type::STR, /* default */ \"all commands\", \"The command to get help on\"},\n+                    {\"command\", RPCArg::Type::STR, RPCArg::DefaultHint{\"all commands\"}, \"The command to get help on\"},\n                 },\n                 {\n                     RPCResult{RPCResult::Type::STR, \"\", \"The help text\"},"
      },
      {
        "sha": "71c61603223542fc50bc85644194b420e7c19fee",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=f81ef4303e057e85aa24772c865287c17ffa4350",
        "patch": "@@ -646,7 +646,7 @@ std::string RPCArg::GetName() const\n \n bool RPCArg::IsOptional() const\n {\n-    if (m_fallback.index() == 1) {\n+    if (m_fallback.index() != 0) {\n         return true;\n     } else {\n         return RPCArg::Optional::NO != std::get<RPCArg::Optional>(m_fallback);\n@@ -694,7 +694,9 @@ std::string RPCArg::ToDescriptionString() const\n         } // no default case, so the compiler can warn about missing cases\n     }\n     if (m_fallback.index() == 1) {\n-        ret += \", optional, default=\" + std::get<std::string>(m_fallback);\n+        ret += \", optional, default=\" + std::get<RPCArg::DefaultHint>(m_fallback);\n+    } else if (m_fallback.index() == 2) {\n+        ret += \", optional, default=\" + std::get<RPCArg::Default>(m_fallback).write();\n     } else {\n         switch (std::get<RPCArg::Optional>(m_fallback)) {\n         case RPCArg::Optional::OMITTED: {"
      },
      {
        "sha": "8ec18b2f35a14ae4f2b684598f4096e29d37cba9",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81ef4303e057e85aa24772c865287c17ffa4350/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=f81ef4303e057e85aa24772c865287c17ffa4350",
        "patch": "@@ -145,7 +145,9 @@ struct RPCArg {\n          */\n         OMITTED,\n     };\n-    using Fallback = std::variant<Optional, /* default value for optional args */ std::string>;\n+    using DefaultHint = std::string;\n+    using Default = UniValue;\n+    using Fallback = std::variant<Optional, /* hint for default value */ DefaultHint, /* default constant value */ Default>;\n     const std::string m_names; //!< The name of the arg (can be empty for inner args, can contain multiple aliases separated by | for named request arguments)\n     const Type m_type;\n     const bool m_hidden;"
      },
      {
        "sha": "653dbdfc1d4ccf10a56a4b5543fe222498130c99",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81ef4303e057e85aa24772c865287c17ffa4350/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81ef4303e057e85aa24772c865287c17ffa4350/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f81ef4303e057e85aa24772c865287c17ffa4350",
        "patch": "@@ -100,8 +100,8 @@ RPCHelpMan importprivkey()\n             \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {\n                     {\"privkey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The private key (see dumpprivkey)\"},\n-                    {\"label\", RPCArg::Type::STR, /* default */ \"current label if address exists, otherwise \\\"\\\"\", \"An optional label\"},\n-                    {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Rescan the wallet for transactions\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::DefaultHint{\"current label if address exists, otherwise \\\"\\\"\"}, \"An optional label\"},\n+                    {\"rescan\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Rescan the wallet for transactions\"},\n                 },\n                 RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n@@ -232,9 +232,9 @@ RPCHelpMan importaddress()\n             \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The Bitcoin address (or hex-encoded script)\"},\n-                    {\"label\", RPCArg::Type::STR, /* default */ \"\\\"\\\"\", \"An optional label\"},\n-                    {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Rescan the wallet for transactions\"},\n-                    {\"p2sh\", RPCArg::Type::BOOL, /* default */ \"false\", \"Add the P2SH version of the script as well\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Default{\"\"}, \"An optional label\"},\n+                    {\"rescan\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Rescan the wallet for transactions\"},\n+                    {\"p2sh\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Add the P2SH version of the script as well\"},\n                 },\n                 RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n@@ -426,8 +426,8 @@ RPCHelpMan importpubkey()\n             \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {\n                     {\"pubkey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The hex-encoded public key\"},\n-                    {\"label\", RPCArg::Type::STR, /* default */ \"\\\"\\\"\", \"An optional label\"},\n-                    {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Rescan the wallet for transactions\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Default{\"\"}, \"An optional label\"},\n+                    {\"rescan\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Rescan the wallet for transactions\"},\n                 },\n                 RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n@@ -1279,28 +1279,28 @@ RPCHelpMan importmulti()\n                                     },\n                                     {\"redeemscript\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Allowed only if the scriptPubKey is a P2SH or P2SH-P2WSH address/scriptPubKey\"},\n                                     {\"witnessscript\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Allowed only if the scriptPubKey is a P2SH-P2WSH or P2WSH address/scriptPubKey\"},\n-                                    {\"pubkeys\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Array of strings giving pubkeys to import. They must occur in P2PKH or P2WPKH scripts. They are not required when the private key is also provided (see the \\\"keys\\\" argument).\",\n+                                    {\"pubkeys\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Array of strings giving pubkeys to import. They must occur in P2PKH or P2WPKH scripts. They are not required when the private key is also provided (see the \\\"keys\\\" argument).\",\n                                         {\n                                             {\"pubKey\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"\"},\n                                         }\n                                     },\n-                                    {\"keys\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Array of strings giving private keys to import. The corresponding public keys must occur in the output or redeemscript.\",\n+                                    {\"keys\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Array of strings giving private keys to import. The corresponding public keys must occur in the output or redeemscript.\",\n                                         {\n                                             {\"key\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"\"},\n                                         }\n                                     },\n                                     {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import\"},\n-                                    {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n-                                    {\"watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be considered watchonly.\"},\n-                                    {\"label\", RPCArg::Type::STR, /* default */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n-                                    {\"keypool\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether imported public keys should be added to the keypool for when users request new addresses. Only allowed when wallet private keys are disabled\"},\n+                                    {\"internal\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n+                                    {\"watchonly\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Stating whether matching outputs should be considered watchonly.\"},\n+                                    {\"label\", RPCArg::Type::STR, RPCArg::Default{\"\"}, \"Label to assign to the address, only allowed with internal=false\"},\n+                                    {\"keypool\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Stating whether imported public keys should be added to the keypool for when users request new addresses. Only allowed when wallet private keys are disabled\"},\n                                 },\n                             },\n                         },\n                         \"\\\"requests\\\"\"},\n                     {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n-                            {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Stating if should rescan the blockchain after all imports\"},\n+                            {\"rescan\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Stating if should rescan the blockchain after all imports\"},\n                         },\n                         \"\\\"options\\\"\"},\n                 },\n@@ -1591,7 +1591,7 @@ RPCHelpMan importdescriptors()\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n                                     {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Descriptor to import.\"},\n-                                    {\"active\", RPCArg::Type::BOOL, /* default */ \"false\", \"Set this descriptor to be the active descriptor for the corresponding output type/externality\"},\n+                                    {\"active\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Set this descriptor to be the active descriptor for the corresponding output type/externality\"},\n                                     {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import\"},\n                                     {\"next_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If a ranged descriptor is set to active, this specifies the next index to generate addresses from\"},\n                                     {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Time from which to start rescanning the blockchain for this descriptor, in \" + UNIX_EPOCH_TIME + \"\\n\"\n@@ -1601,8 +1601,8 @@ RPCHelpMan importdescriptors()\n         \"                                                              of all descriptors being imported will be scanned.\",\n                                         /* oneline_description */ \"\", {\"timestamp | \\\"now\\\"\", \"integer / string\"}\n                                     },\n-                                    {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether matching outputs should be treated as not incoming payments (e.g. change)\"},\n-                                    {\"label\", RPCArg::Type::STR, /* default */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n+                                    {\"internal\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Whether matching outputs should be treated as not incoming payments (e.g. change)\"},\n+                                    {\"label\", RPCArg::Type::STR, RPCArg::Default{\"\"}, \"Label to assign to the address, only allowed with internal=false\"},\n                                 },\n                             },\n                         },"
      },
      {
        "sha": "67d9d561333f830192355e1ec36b8fcca21250ff",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 113,
        "deletions": 113,
        "changes": 226,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81ef4303e057e85aa24772c865287c17ffa4350/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81ef4303e057e85aa24772c865287c17ffa4350/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f81ef4303e057e85aa24772c865287c17ffa4350",
        "patch": "@@ -237,8 +237,8 @@ static RPCHelpMan getnewaddress()\n                 \"If 'label' is specified, it is added to the address book \\n\"\n                 \"so payments received with the address will be associated with 'label'.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, /* default */ \"\\\"\\\"\", \"The label name for the address to be linked to. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\"},\n-                    {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Default{\"\"}, \"The label name for the address to be linked to. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\"},\n+                    {\"address_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -addresstype\"}, \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::STR, \"address\", \"The new bitcoin address\"\n@@ -287,7 +287,7 @@ static RPCHelpMan getrawchangeaddress()\n                 \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n                 \"This is for use with raw transactions, NOT normal use.\\n\",\n                 {\n-                    {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"address_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::STR, \"address\", \"The address\"\n@@ -439,16 +439,16 @@ static RPCHelpMan sendtoaddress()\n                     {\"comment_to\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment to store the name of the person or organization\\n\"\n                                          \"to which you're sending the transaction. This is not part of the \\n\"\n                                          \"transaction, just kept in your wallet.\"},\n-                    {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* default */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n+                    {\"subtractfeefromamount\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"The fee will be deducted from the amount being sent.\\n\"\n                                          \"The recipient will receive less bitcoins than you enter in the amount field.\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                    {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n-                    {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n+                    {\"avoid_reuse\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n                                          \"dirty if they have previously been used in a transaction.\"},\n-                    {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, return extra information about the transaction.\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If true, return extra information about the transaction.\"},\n                 },\n                 {\n                     RPCResult{\"if verbose is not set or set to false\",\n@@ -697,7 +697,7 @@ static RPCHelpMan getreceivedbyaddress()\n                 \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\",\n                 {\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for transactions.\"},\n-                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{1}, \"Only include transactions confirmed at least this many times.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received at this address.\"\n@@ -735,7 +735,7 @@ static RPCHelpMan getreceivedbylabel()\n                 \"\\nReturns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\\n\",\n                 {\n                     {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The selected label, may be the default label using \\\"\\\".\"},\n-                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{1}, \"Only include transactions confirmed at least this many times.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received for this label.\"\n@@ -775,9 +775,9 @@ static RPCHelpMan getbalance()\n                 \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\",\n                 {\n                     {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n-                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"0\", \"Only include transactions confirmed at least this many times.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also include balance in watch-only addresses (see 'importaddress')\"},\n-                    {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Do not include balance in dirty outputs; addresses are considered dirty if they have previously been used in a transaction.\"},\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Only include transactions confirmed at least this many times.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also include balance in watch-only addresses (see 'importaddress')\"},\n+                    {\"avoid_reuse\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"(only available if avoid_reuse wallet flag is set) Do not include balance in dirty outputs; addresses are considered dirty if they have previously been used in a transaction.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received for this wallet.\"\n@@ -868,12 +868,12 @@ static RPCHelpMan sendmany()\n                             {\"address\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Subtract fee from this address\"},\n                         },\n                     },\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                    {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n-                    {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, return extra infomration about the transaction.\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If true, return extra infomration about the transaction.\"},\n                 },\n                 {\n                     RPCResult{\"if verbose is not set or set to false\",\n@@ -956,7 +956,7 @@ static RPCHelpMan addmultisigaddress()\n                         },\n                         },\n                     {\"label\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A label to assign the addresses to.\"},\n-                    {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"address_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -addresstype\"}, \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -1185,9 +1185,9 @@ static RPCHelpMan listreceivedbyaddress()\n     return RPCHelpMan{\"listreceivedbyaddress\",\n                 \"\\nList balances by receiving address.\\n\",\n                 {\n-                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n-                    {\"include_empty\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include addresses that haven't received any payments.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Whether to include watch-only addresses (see 'importaddress')\"},\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{1}, \"The minimum number of confirmations before payments are included.\"},\n+                    {\"include_empty\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Whether to include addresses that haven't received any payments.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Whether to include watch-only addresses (see 'importaddress')\"},\n                     {\"address_filter\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If present, only return information on this address.\"},\n                 },\n                 RPCResult{\n@@ -1234,9 +1234,9 @@ static RPCHelpMan listreceivedbylabel()\n     return RPCHelpMan{\"listreceivedbylabel\",\n                 \"\\nList received transactions by label.\\n\",\n                 {\n-                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n-                    {\"include_empty\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include labels that haven't received any payments.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Whether to include watch-only addresses (see 'importaddress')\"},\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{1}, \"The minimum number of confirmations before payments are included.\"},\n+                    {\"include_empty\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Whether to include labels that haven't received any payments.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Whether to include watch-only addresses (see 'importaddress')\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"\",\n@@ -1396,9 +1396,9 @@ static RPCHelpMan listtransactions()\n                 {\n                     {\"label|dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If set, should be a valid label name to return only incoming transactions\\n\"\n                           \"with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\"},\n-                    {\"count\", RPCArg::Type::NUM, /* default */ \"10\", \"The number of transactions to return\"},\n-                    {\"skip\", RPCArg::Type::NUM, /* default */ \"0\", \"The number of transactions to skip\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n+                    {\"count\", RPCArg::Type::NUM, RPCArg::Default{10}, \"The number of transactions to return\"},\n+                    {\"skip\", RPCArg::Type::NUM, RPCArg::Default{0}, \"The number of transactions to skip\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Include transactions to watch-only addresses (see 'importaddress')\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"\",\n@@ -1507,9 +1507,9 @@ static RPCHelpMan listsinceblock()\n                 \"Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \\\"removed\\\" array.\\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If set, the block hash to list transactions since, otherwise list all transactions.\"},\n-                    {\"target_confirmations\", RPCArg::Type::NUM, /* default */ \"1\", \"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n-                    {\"include_removed\", RPCArg::Type::BOOL, /* default */ \"true\", \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n+                    {\"target_confirmations\", RPCArg::Type::NUM, RPCArg::Default{1}, \"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Include transactions to watch-only addresses (see 'importaddress')\"},\n+                    {\"include_removed\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n                                                                        \"(not guaranteed to work on pruned nodes)\"},\n                 },\n                 RPCResult{\n@@ -1645,9 +1645,9 @@ static RPCHelpMan gettransaction()\n                 \"\\nGet detailed information about in-wallet transaction <txid>\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\",\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"},\n                             \"Whether to include watch-only addresses in balance calculation and details[]\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\",\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false},\n                             \"Whether to include a `decoded` field containing the decoded transaction (equivalent to RPC decoderawtransaction)\"},\n                 },\n                 RPCResult{\n@@ -1832,7 +1832,7 @@ static RPCHelpMan keypoolrefill()\n                 \"\\nFills the keypool.\"+\n         HELP_REQUIRING_PASSPHRASE,\n                 {\n-                    {\"newsize\", RPCArg::Type::NUM, /* default */ \"100\", \"The new keypool size\"},\n+                    {\"newsize\", RPCArg::Type::NUM, RPCArg::Default{100}, \"The new keypool size\"},\n                 },\n                 RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n@@ -2124,7 +2124,7 @@ static RPCHelpMan lockunspent()\n                 \"Also see the listunspent call\\n\",\n                 {\n                     {\"unlock\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"Whether to unlock (true) or lock (false) the specified transactions\"},\n-                    {\"transactions\", RPCArg::Type::ARR, /* default */ \"empty array\", \"The transaction outputs and within each, the txid (string) vout (numeric).\",\n+                    {\"transactions\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"The transaction outputs and within each, the txid (string) vout (numeric).\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n@@ -2567,7 +2567,7 @@ static RPCHelpMan loadwallet()\n                 \"\\napplied to the new wallet (eg -rescan, etc).\\n\",\n                 {\n                     {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet directory or .dat file.\"},\n-                    {\"load_on_startup\", RPCArg::Type::BOOL, /* default */ \"null\", \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n+                    {\"load_on_startup\", RPCArg::Type::BOOL, RPCArg::Default{UniValue::VNULL}, \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -2630,7 +2630,7 @@ static RPCHelpMan setwalletflag()\n                 \"\\nChange the state of the given wallet flag for a wallet.\\n\",\n                 {\n                     {\"flag\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The name of the flag to change. Current available flags: \" + flags},\n-                    {\"value\", RPCArg::Type::BOOL, /* default */ \"true\", \"The new state.\"},\n+                    {\"value\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"The new state.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -2693,13 +2693,13 @@ static RPCHelpMan createwallet()\n         \"\\nCreates and loads a new wallet.\\n\",\n         {\n             {\"wallet_name\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n-            {\"disable_private_keys\", RPCArg::Type::BOOL, /* default */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n-            {\"blank\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n+            {\"disable_private_keys\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n+            {\"blank\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n             {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Encrypt the wallet with this passphrase.\"},\n-            {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"false\", \"Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind.\"},\n-            {\"descriptors\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a native descriptor wallet. The wallet will use descriptors internally to handle address creation\"},\n-            {\"load_on_startup\", RPCArg::Type::BOOL, /* default */ \"null\", \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n-            {\"external_signer\", RPCArg::Type::BOOL, /* default */ \"false\", \"Use an external signer such as a hardware wallet. Requires -signer to be configured. Wallet creation will fail if keys cannot be fetched. Requires disable_private_keys and descriptors set to true.\"},\n+            {\"avoid_reuse\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind.\"},\n+            {\"descriptors\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Create a native descriptor wallet. The wallet will use descriptors internally to handle address creation\"},\n+            {\"load_on_startup\", RPCArg::Type::BOOL, RPCArg::Default{UniValue::VNULL}, \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n+            {\"external_signer\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Use an external signer such as a hardware wallet. Requires -signer to be configured. Wallet creation will fail if keys cannot be fetched. Requires disable_private_keys and descriptors set to true.\"},\n         },\n         RPCResult{\n             RPCResult::Type::OBJ, \"\", \"\",\n@@ -2788,8 +2788,8 @@ static RPCHelpMan unloadwallet()\n                 \"Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.\\n\"\n                 \"Specifying the wallet name on a wallet endpoint is invalid.\",\n                 {\n-                    {\"wallet_name\", RPCArg::Type::STR, /* default */ \"the wallet name from the RPC endpoint\", \"The name of the wallet to unload. If provided both here and in the RPC endpoint, the two must be identical.\"},\n-                    {\"load_on_startup\", RPCArg::Type::BOOL, /* default */ \"null\", \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n+                    {\"wallet_name\", RPCArg::Type::STR, RPCArg::DefaultHint{\"the wallet name from the RPC endpoint\"}, \"The name of the wallet to unload. If provided both here and in the RPC endpoint, the two must be identical.\"},\n+                    {\"load_on_startup\", RPCArg::Type::BOOL, RPCArg::Default{UniValue::VNULL}, \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n                 },\n                 RPCResult{RPCResult::Type::OBJ, \"\", \"\", {\n                     {RPCResult::Type::STR, \"warning\", \"Warning message if wallet was not unloaded cleanly.\"},\n@@ -2840,21 +2840,21 @@ static RPCHelpMan listunspent()\n                 \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n                 \"Optionally filter to only include txouts paid to specified addresses.\\n\",\n                 {\n-                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum confirmations to filter\"},\n-                    {\"maxconf\", RPCArg::Type::NUM, /* default */ \"9999999\", \"The maximum confirmations to filter\"},\n-                    {\"addresses\", RPCArg::Type::ARR, /* default */ \"empty array\", \"The bitcoin addresses to filter\",\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{1}, \"The minimum confirmations to filter\"},\n+                    {\"maxconf\", RPCArg::Type::NUM, RPCArg::Default{9999999}, \"The maximum confirmations to filter\"},\n+                    {\"addresses\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"The bitcoin addresses to filter\",\n                         {\n                             {\"address\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"bitcoin address\"},\n                         },\n                     },\n-                    {\"include_unsafe\", RPCArg::Type::BOOL, /* default */ \"true\", \"Include outputs that are not safe to spend\\n\"\n+                    {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Include outputs that are not safe to spend\\n\"\n                               \"See description of \\\"safe\\\" attribute below.\"},\n                     {\"query_options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"JSON with query options\",\n                         {\n-                            {\"minimumAmount\", RPCArg::Type::AMOUNT, /* default */ \"0\", \"Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n-                            {\"maximumAmount\", RPCArg::Type::AMOUNT, /* default */ \"unlimited\", \"Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n-                            {\"maximumCount\", RPCArg::Type::NUM, /* default */ \"unlimited\", \"Maximum number of UTXOs\"},\n-                            {\"minimumSumAmount\", RPCArg::Type::AMOUNT, /* default */ \"unlimited\", \"Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\"},\n+                            {\"minimumAmount\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(0)}, \"Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n+                            {\"maximumAmount\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"unlimited\"}, \"Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n+                            {\"maximumCount\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"unlimited\"}, \"Maximum number of UTXOs\"},\n+                            {\"minimumSumAmount\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"unlimited\"}, \"Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\"},\n                         },\n                         \"query_options\"},\n                 },\n@@ -3204,32 +3204,32 @@ static RPCHelpMan fundrawtransaction()\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n                     {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n                         {\n-                            {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"true\", \"For a transaction with existing inputs, automatically include more if they are not enough.\"},\n-                            {\"changeAddress\", RPCArg::Type::STR, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n-                            {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n-                            {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                            {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                            {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"For a transaction with existing inputs, automatically include more if they are not enough.\"},\n+                            {\"changeAddress\", RPCArg::Type::STR, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n+                            {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n+                            {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n                                                           \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n                                                           \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n-                            {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n-                            {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_UNIT + \"/kvB.\"},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"The integers.\\n\"\n+                            {\"lockUnspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_UNIT + \"/kvB.\"},\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"The integers.\\n\"\n                                                           \"The fee will be equally deducted from the amount of each specified output.\\n\"\n                                                           \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                                                           \"If no outputs are specified here, the sender pays the fee.\",\n                                 {\n                                     {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n-                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                            {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Marks this transaction as BIP125 replaceable.\\n\"\n                                                           \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                         },\n                         \"options\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n+                    {\"iswitness\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"depends on heuristic tests\"}, \"Whether the transaction hex is a serialized witness transaction.\\n\"\n                         \"If iswitness is not present, heuristic tests will be used in decoding.\\n\"\n                         \"If true, only witness deserialization will be tried.\\n\"\n                         \"If false, only non-witness deserialization will be tried.\\n\"\n@@ -3310,7 +3310,7 @@ RPCHelpMan signrawtransactionwithwallet()\n                             },\n                         },\n                     },\n-                    {\"sighashtype\", RPCArg::Type::STR, /* default */ \"ALL\", \"The signature hash type. Must be one of\\n\"\n+                    {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"ALL\"}, \"The signature hash type. Must be one of\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n@@ -3402,19 +3402,19 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n             {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n             {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                 {\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\\n\"},\n-                    {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\",\n+                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\\n\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"},\n                              \"\\nSpecify a fee rate in \" + CURRENCY_ATOM + \"/vB instead of relying on the built-in fee estimator.\\n\"\n                              \"Must be at least \" + incremental_fee + \" higher than the current transaction fee rate.\\n\"\n                              \"WARNING: before version 0.21, fee_rate was in \" + CURRENCY_UNIT + \"/kvB. As of 0.21, fee_rate is in \" + CURRENCY_ATOM + \"/vB.\\n\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n+                    {\"replaceable\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether the new transaction should still be\\n\"\n                              \"marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n                              \"be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n                              \"original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n                              \"so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n                              \"still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n                              \"are replaceable).\\n\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                    {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                              \"\\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                 },\n                 \"options\"},\n@@ -3564,7 +3564,7 @@ static RPCHelpMan rescanblockchain()\n                 \"\\nRescan the local blockchain for wallet related transactions.\\n\"\n                 \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {\n-                    {\"start_height\", RPCArg::Type::NUM, /* default */ \"0\", \"block height where the rescan should start\"},\n+                    {\"start_height\", RPCArg::Type::NUM, RPCArg::Default{0}, \"block height where the rescan should start\"},\n                     {\"stop_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.\"},\n                 },\n                 RPCResult{\n@@ -4023,43 +4023,43 @@ static RPCHelpMan send()\n                     },\n                 },\n             },\n-            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\"},\n-            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                         \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n-            {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n             {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                 {\n-                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n-                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n-                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n-                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n-                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                    {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n-                    {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n-                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n                                           \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n                                           \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n-                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A JSON array of JSON objects\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Specify inputs instead of adding them automatically. A JSON array of JSON objects\",\n                         {\n                             {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                             {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n                             {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n                         },\n                     },\n-                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n-                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n-                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n-                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Outputs to subtract the fee from, specified as integer indices.\\n\"\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Outputs to subtract the fee from, specified as integer indices.\\n\"\n                     \"The fee will be equally deducted from the amount of each specified output.\\n\"\n                     \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                     \"If no outputs are specified here, the sender pays the fee.\",\n                         {\n                             {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                         },\n                     },\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Marks this transaction as BIP125 replaceable.\\n\"\n                                                   \"Allows this transaction to be replaced by a transaction with higher fees\"},\n                 },\n                 \"options\"},\n@@ -4207,11 +4207,11 @@ static RPCHelpMan sethdseed()\n                 \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\" +\n         HELP_REQUIRING_PASSPHRASE,\n                 {\n-                    {\"newkeypool\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n+                    {\"newkeypool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n                                          \"If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n                                          \"If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing\\n\"\n                                          \"keypool will be used until it has been depleted.\"},\n-                    {\"seed\", RPCArg::Type::STR, /* default */ \"random seed\", \"The WIF private key to use as the new HD seed.\\n\"\n+                    {\"seed\", RPCArg::Type::STR, RPCArg::DefaultHint{\"random seed\"}, \"The WIF private key to use as the new HD seed.\\n\"\n                                          \"The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1\"},\n                 },\n                 RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n@@ -4278,15 +4278,15 @@ static RPCHelpMan walletprocesspsbt()\n         HELP_REQUIRING_PASSPHRASE,\n                 {\n                     {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction base64 string\"},\n-                    {\"sign\", RPCArg::Type::BOOL, /* default */ \"true\", \"Also sign the transaction when updating\"},\n-                    {\"sighashtype\", RPCArg::Type::STR, /* default */ \"ALL\", \"The signature hash type to sign with if not specified by the PSBT. Must be one of\\n\"\n+                    {\"sign\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Also sign the transaction when updating\"},\n+                    {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"ALL\"}, \"The signature hash type to sign with if not specified by the PSBT. Must be one of\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n             \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\"},\n-                    {\"bip32derivs\", RPCArg::Type::BOOL, /* default */ \"true\", \"Include BIP 32 derivation paths for public keys if we know them\"},\n+                    {\"bip32derivs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Include BIP 32 derivation paths for public keys if we know them\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -4347,7 +4347,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n                                 {\n                                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                                     {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n-                                    {\"sequence\", RPCArg::Type::NUM, /* default */ \"depends on the value of the 'locktime' and 'options.replaceable' arguments\", \"The sequence number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"depends on the value of the 'locktime' and 'options.replaceable' arguments\"}, \"The sequence number\"},\n                                 },\n                             },\n                         },\n@@ -4369,33 +4369,33 @@ static RPCHelpMan walletcreatefundedpsbt()\n                             },\n                         },\n                     },\n-                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n                     {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n-                            {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n-                            {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n-                            {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n-                            {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                            {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only\"},\n-                            {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n-                            {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_UNIT + \"/kvB.\"},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"The outputs to subtract the fee from.\\n\"\n+                            {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If inputs are specified, automatically include more if they are not enough.\"},\n+                            {\"changeAddress\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n+                            {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n+                            {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only\"},\n+                            {\"lockUnspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_UNIT + \"/kvB.\"},\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"The outputs to subtract the fee from.\\n\"\n                                                           \"The fee will be equally deducted from the amount of each specified output.\\n\"\n                                                           \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                                                           \"If no outputs are specified here, the sender pays the fee.\",\n                                 {\n                                     {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n-                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                            {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Marks this transaction as BIP125 replaceable.\\n\"\n                                                           \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                             \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                         },\n                         \"options\"},\n-                    {\"bip32derivs\", RPCArg::Type::BOOL, /* default */ \"true\", \"Include BIP 32 derivation paths for public keys if we know them\"},\n+                    {\"bip32derivs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Include BIP 32 derivation paths for public keys if we know them\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -4468,7 +4468,7 @@ static RPCHelpMan upgradewallet()\n         \"\\nUpgrade the wallet. Upgrades to the latest version if no version number is specified.\\n\"\n         \"New keys may be generated and a new wallet backup will need to be made.\",\n         {\n-            {\"version\", RPCArg::Type::NUM, /* default */ strprintf(\"%d\", FEATURE_LATEST), \"The version number to upgrade to. Default is the latest wallet version.\"}\n+            {\"version\", RPCArg::Type::NUM, RPCArg::Default{FEATURE_LATEST}, \"The version number to upgrade to. Default is the latest wallet version.\"}\n         },\n         RPCResult{\n             RPCResult::Type::OBJ, \"\", \"\","
      }
    ]
  },
  {
    "sha": "bee56c78e94417f89b1f48682404e2821b57bdec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWU1NmM3OGU5NDQxN2Y4OWIxZjQ4NjgyNDA0ZTI4MjFiNTdiZGVj",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2021-04-15T10:07:47Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2021-04-16T23:22:53Z"
      },
      "message": "rpc: Check default value type againts argument type",
      "tree": {
        "sha": "05c0961be6531821a32f2a7b4472e22451c9bc75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05c0961be6531821a32f2a7b4472e22451c9bc75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bee56c78e94417f89b1f48682404e2821b57bdec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bee56c78e94417f89b1f48682404e2821b57bdec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bee56c78e94417f89b1f48682404e2821b57bdec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bee56c78e94417f89b1f48682404e2821b57bdec/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f81ef4303e057e85aa24772c865287c17ffa4350",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f81ef4303e057e85aa24772c865287c17ffa4350",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f81ef4303e057e85aa24772c865287c17ffa4350"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 27,
      "deletions": 0
    },
    "files": [
      {
        "sha": "df3ee9f007bdc0c5295a9771beed8986bc00f190",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bee56c78e94417f89b1f48682404e2821b57bdec/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bee56c78e94417f89b1f48682404e2821b57bdec/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=bee56c78e94417f89b1f48682404e2821b57bdec",
        "patch": "@@ -498,6 +498,33 @@ RPCHelpMan::RPCHelpMan(std::string name, std::string description, std::vector<RP\n         for (const std::string& name : names) {\n             CHECK_NONFATAL(named_args.insert(name).second);\n         }\n+        // Default value type should match argument type only when defined\n+        if (arg.m_fallback.index() == 2) {\n+            const RPCArg::Type type = arg.m_type;\n+            switch (std::get<RPCArg::Default>(arg.m_fallback).getType()) {\n+            case UniValue::VOBJ:\n+                CHECK_NONFATAL(type == RPCArg::Type::OBJ);\n+                break;\n+            case UniValue::VARR:\n+                CHECK_NONFATAL(type == RPCArg::Type::ARR);\n+                break;\n+            case UniValue::VSTR:\n+                CHECK_NONFATAL(type == RPCArg::Type::STR || type == RPCArg::Type::STR_HEX || type == RPCArg::Type::AMOUNT);\n+                break;\n+            case UniValue::VNUM:\n+                CHECK_NONFATAL(type == RPCArg::Type::NUM || type == RPCArg::Type::AMOUNT || type == RPCArg::Type::RANGE);\n+                break;\n+            case UniValue::VBOOL:\n+                CHECK_NONFATAL(type == RPCArg::Type::BOOL);\n+                break;\n+            case UniValue::VNULL:\n+                // Null values are accepted in all arguments\n+                break;\n+            default:\n+                CHECK_NONFATAL(false);\n+                break;\n+            }\n+        }\n     }\n }\n "
      }
    ]
  }
]