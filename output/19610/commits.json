[
  {
    "sha": "471714e1f024fb3b4892a7a8b34a76b83a13fa19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzE3MTRlMWYwMjRmYjNiNDg5MmE3YThiMzRhNzZiODNhMTNmYTE5",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-07-27T15:31:50Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-08-26T09:56:55Z"
      },
      "message": "p2p: add CInv block message helper methods",
      "tree": {
        "sha": "f544aa1315951d09085624eb259e1cacdf39fa6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f544aa1315951d09085624eb259e1cacdf39fa6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/471714e1f024fb3b4892a7a8b34a76b83a13fa19",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl9GMecACgkQT1chs9Dj\nkh3VeA/+JyaQsPkYBDXTJTauCaryb/TtuIcm7Kqrg0MsM9TcjUcNEiFcgPMOlyI6\nSnYrNsTmratGLruOTK7tZtIqiD3+omua74/I18gghDEg3Yo6PJ71JPZ2z2mNo7fS\n2sUCHDGIa4Ou6z0lG5Nw1yVSgFxDTGcvIcDL127/N/Y/CDC8g2maYuhFawb6WIiK\nRheRdEdqgBE/d+UdnaUKZLuHpxaN3KOkSuKnpdJFbvmVok3/En3+oxkdivu5ogUR\nb7FnE/Lx2tiOKOks8F5lO+EU7H/KiLF45Gq41oD8az7XAssc+lUi1ZQU0KcjrRy9\nJDTULxsdNtd70V2O9UP7ZygIHJ4noNq6HzLWMxD71vuu4Y5Z46vUl8oCltvSeXM2\nOLsDq+q1fzoscUnWa9z76rnxT/6lyiAKVPwPoeqY4vHY47gCywpBC72u5m0xQ9NS\n5snHEuZZb4Ynb1Y87vwex6VqT68jOzAViMpv24DpVU7jLnIhye0fpdYVjKbwS1oO\n6nfxpPnE/H2mXUikYPU4OoEH5wm0PB/pIzv5jA3xwaHLmtyAVuOyyOlAko27sWy1\nl6SdR67oai0niRLAnPlNFo1DznGYSaZsE5UAqkAx02dWymppK3OMNLxOh7sxAP0q\nXTRufFHDXKREZ0f8EggNOtvBtM9EQ/cPaOdmC6DCTG9a6OpLKq8=\n=Plg8\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFzQLA0k/JzuGM5BvIDLqf5B7izph8wb/CbBsBt0LkmmCP/wEDdYuyLDoNK5\nKIIsHmYKG8AI8QRfRjHq8Aj4RvUCLvRT7QCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEE2AiFbE/ASAFpVM3Ra17OcI8QRfRjHq\n8AhEGIXMbgn1NgCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQYaO48RY6o8Pe4XsuebpyHgjxBF9GMerwCLfP\nzD1rA8QeAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t8BDdtY/+miLbzfuvwkUCDGlmCPEEX0Yx6vAIPQMVhWXNcNUAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree f544aa1315951d09085624eb259e1cacdf39fa6a\nparent 7f609f68d835bece8b01da1b09b127c67769ae7d\nauthor Jon Atack <jon@atack.com> 1595863910 +0200\ncommitter Jon Atack <jon@atack.com> 1598435815 +0200\n\np2p: add CInv block message helper methods\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/471714e1f024fb3b4892a7a8b34a76b83a13fa19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/471714e1f024fb3b4892a7a8b34a76b83a13fa19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/471714e1f024fb3b4892a7a8b34a76b83a13fa19/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f609f68d835bece8b01da1b09b127c67769ae7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f609f68d835bece8b01da1b09b127c67769ae7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f609f68d835bece8b01da1b09b127c67769ae7d"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 15,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a059bf482ad052573cd24c8f618136a2a32324a6",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/471714e1f024fb3b4892a7a8b34a76b83a13fa19/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/471714e1f024fb3b4892a7a8b34a76b83a13fa19/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=471714e1f024fb3b4892a7a8b34a76b83a13fa19",
        "patch": "@@ -247,7 +247,7 @@ extern const char* CFCHECKPT;\n  * txid.\n  * @since protocol version 70016 as described by BIP 339.\n  */\n-extern const char *WTXIDRELAY;\n+extern const char* WTXIDRELAY;\n }; // namespace NetMsgType\n \n /* Get a vector of all valid message types (see above) */\n@@ -418,12 +418,22 @@ class CInv\n     std::string ToString() const;\n \n     // Single-message helper methods\n-    bool IsMsgTx()        const { return type == MSG_TX; }\n-    bool IsMsgWtx()       const { return type == MSG_WTX; }\n-    bool IsMsgWitnessTx() const { return type == MSG_WITNESS_TX; }\n+    bool IsMsgTx() const { return type == MSG_TX; }\n+    bool IsMsgBlk() const { return type == MSG_BLOCK; }\n+    bool IsMsgWtx() const { return type == MSG_WTX; }\n+    bool IsMsgFilteredBlk() const { return type == MSG_FILTERED_BLOCK; }\n+    bool IsMsgCmpctBlk() const { return type == MSG_CMPCT_BLOCK; }\n+    bool IsMsgWitnessBlk() const { return type == MSG_WITNESS_BLOCK; }\n \n     // Combined-message helper methods\n-    bool IsGenTxMsg()     const { return type == MSG_TX || type == MSG_WTX || type == MSG_WITNESS_TX; }\n+    bool IsGenTxMsg() const\n+    {\n+        return type == MSG_TX || type == MSG_WTX || type == MSG_WITNESS_TX;\n+    }\n+    bool IsGenBlkMsg() const\n+    {\n+        return type == MSG_BLOCK || type == MSG_FILTERED_BLOCK || type == MSG_CMPCT_BLOCK || type == MSG_WITNESS_BLOCK;\n+    }\n \n     int type;\n     uint256 hash;"
      }
    ]
  },
  {
    "sha": "39f1dc944554218911b0945fff7e6d06f3dab284",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWYxZGM5NDQ1NTQyMTg5MTFiMDk0NWZmZjdlNmQwNmYzZGFiMjg0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-08-05T15:46:31Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-08-26T09:56:59Z"
      },
      "message": "p2p: remove nFetchFlags from NetMsgType TX and INV processing\n\nThe nFetchFlags code can be removed here because GetFetchFlags() can only add\nthe MSG_WITNESS_FLAG, which is added to the CInv::type field. That CInv is only\npassed to AlreadyHave() or ToGenTxid(), and neither of those functions do\nanything different depending on whether the CInv type is MSG_TX or\nMSG_WITNESS_TX.\n\nCo-authored by: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "297ad7f7e79d411fd5f69516d1edf91f7c12f742",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/297ad7f7e79d411fd5f69516d1edf91f7c12f742"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39f1dc944554218911b0945fff7e6d06f3dab284",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl9GMesACgkQT1chs9Dj\nkh1Z+Q/8DVF3gVE72Fkzpm+3gUnxHh1Jy+xPw382a7hNzWc8F5aKETdsDE8hYxAI\nz1vnsLEu1PtE6dc9hT2zOOdWSMarFgTXOZhXJMlZgwUQOaDuNwBCQHFphPOtQijs\nYK83iYsQ+DSz9vnf81DdH1+JDrv7UccL4kpCDQ7RdlZmMuGQJmuYqRaNlYm2mHi5\nhJXZrKVx5JULGEl0k0W+z7N6KfWwftBQiqsetFwlzTyyDZeTuwsIJcKc5mIE0GuH\nXJz97IW2h0BkhV73M6jvhxPQrRzGCOKamLsUAhApXFndhSOlvT09B/SZFUKul2Ke\nmf5HyxMqkBL1fN7FaxmI8u3HnjtIT8F6TZHNb6rd2ai59W9gegLAzs1o/mDwqiee\nS95y5a2XGswSGINS7E4r/v+x8wCERtdsrThTX+7cSazCnZBbIcs94rm92JCJgVGB\n0gawMYzCiHs8TzkXKSlRxm06sSLm7SZKnYA8uN6WRaCoNX9lNu4s/lyjeXTH3wEQ\negMDd8Z5kt6534GFe0yFxmqCExFxhdTuXSHf6mQYmk7oZZCV6k6F0LVvA3ZiSlre\nWEt6rlQt5vKcAtfv89YnSd4IOnDKsTK1GZmZMgGF6427FBaGw9wqM/ipxv9giS+N\nSGbGdBkLYx4x3v5Ndm5q5xYiIMWfYSvN9qQstdYXMhvQ4i39p28=\n=rKI7\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIA73xTCa9NwoNgGVTqPWSNeLOIKc3Z40XRQNv9MJbh4pCP/wEHnvbMpDCavu\n5WjvJZsHSr4I8QRfRjHu8Ajmc6i9IoDG9ACD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEH5b8hbUPcmpKeNkXUpXWgkI\n8QRfRjHu8Ag+FvYsx/qTFgCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVu\nZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEMBGDRtfLUgPjUNET+NJx60I8QRfRjHu\n8AjwHcDZWyVmQQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BDxg4nqyBz//F9ljLH03BXFCPEEX0Yx7vAI1Tao\ntaDkTaUAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 297ad7f7e79d411fd5f69516d1edf91f7c12f742\nparent 471714e1f024fb3b4892a7a8b34a76b83a13fa19\nauthor Jon Atack <jon@atack.com> 1596642391 +0200\ncommitter Jon Atack <jon@atack.com> 1598435819 +0200\n\np2p: remove nFetchFlags from NetMsgType TX and INV processing\n\nThe nFetchFlags code can be removed here because GetFetchFlags() can only add\nthe MSG_WITNESS_FLAG, which is added to the CInv::type field. That CInv is only\npassed to AlreadyHave() or ToGenTxid(), and neither of those functions do\nanything different depending on whether the CInv type is MSG_TX or\nMSG_WITNESS_TX.\n\nCo-authored by: John Newbery <john@johnnewbery.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39f1dc944554218911b0945fff7e6d06f3dab284",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39f1dc944554218911b0945fff7e6d06f3dab284",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39f1dc944554218911b0945fff7e6d06f3dab284/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "471714e1f024fb3b4892a7a8b34a76b83a13fa19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/471714e1f024fb3b4892a7a8b34a76b83a13fa19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/471714e1f024fb3b4892a7a8b34a76b83a13fa19"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 2,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a01514185d14c28e675046a516c09131d78b40ec",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39f1dc944554218911b0945fff7e6d06f3dab284/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39f1dc944554218911b0945fff7e6d06f3dab284/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=39f1dc944554218911b0945fff7e6d06f3dab284",
        "patch": "@@ -2654,14 +2654,12 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n \n         LOCK(cs_main);\n \n-        uint32_t nFetchFlags = GetFetchFlags(pfrom);\n         const auto current_time = GetTime<std::chrono::microseconds>();\n         uint256* best_block{nullptr};\n \n         for (CInv &inv : vInv)\n         {\n-            if (interruptMsgProc)\n-                return;\n+            if (interruptMsgProc) return;\n \n             // Ignore INVs that don't match wtxidrelay setting.\n             // Note that orphan parent fetching always uses MSG_TX GETDATAs regardless of the wtxidrelay setting.\n@@ -2675,10 +2673,6 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             bool fAlreadyHave = AlreadyHave(inv, m_mempool);\n             LogPrint(BCLog::NET, \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom.GetId());\n \n-            if (inv.IsMsgTx()) {\n-                inv.type |= nFetchFlags;\n-            }\n-\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom.GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n@@ -3013,7 +3007,6 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n                 }\n             }\n             if (!fRejectedParents) {\n-                uint32_t nFetchFlags = GetFetchFlags(pfrom);\n                 const auto current_time = GetTime<std::chrono::microseconds>();\n \n                 for (const uint256& parent_txid : unique_parents) {\n@@ -3022,7 +3015,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n                     // wtxidrelay peers.\n                     // Eventually we should replace this with an improved\n                     // protocol for getting all unconfirmed parents.\n-                    CInv _inv(MSG_TX | nFetchFlags, parent_txid);\n+                    CInv _inv(MSG_TX, parent_txid);\n                     pfrom.AddKnownTx(parent_txid);\n                     if (!AlreadyHave(_inv, m_mempool)) RequestTx(State(pfrom.GetId()), ToGenTxid(_inv), current_time);\n                 }"
      }
    ]
  },
  {
    "sha": "42ca5618cae0fd9ef97d2006b17d896bc58cc17c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmNhNTYxOGNhZTBmZDllZjk3ZDIwMDZiMTdkODk2YmM1OGNjMTdj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-30T09:30:24Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-08-26T09:57:03Z"
      },
      "message": "[net processing] Split AlreadyHave() into separate block and tx functions",
      "tree": {
        "sha": "5fff6027ccdd33dfb4bec9aefcd3141f40b3686e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fff6027ccdd33dfb4bec9aefcd3141f40b3686e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42ca5618cae0fd9ef97d2006b17d896bc58cc17c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl9GMe8ACgkQT1chs9Dj\nkh01OA/+KVZJ1LMDHaUeyeQ+/6U91MAjaw1/Yu3azUo1jU2QGKmThmMjedF57qgT\nRYRkqHn0oqK2dkxlOb2fD1rDpS7yCEdfCVa1SP4rzfX4NdZJMmiHa+QydtLeywIq\nVAm5Ubjzl/lCuWW3JbFW6Yztf+NVXhKY5GklbTKZ4QT0vT2nQFTHEODYw0jyWQv3\nRpCXjclMNdt2cI8zYKIyA9KCDZkA0KZhk14XszNCtPdQFavt5iDSFjTf45G5G/if\nkIiCzGSqLzhv61yjL9ogMrpVlvlIE5I6jYXS08+6uZEkp7qE2QKN+dphFOJ1PRwr\nbIVR31fuJNnFp0WWDZXJNxmcUGuIFifQYesr12wViis5/dZSqgAt6S6pFyA0YVyC\n6/UH/tYSZHcyMj3wGZSYguONrMGtHzxV+UATPMgyaE7n+xPTTYFUpntAZuYeK2bW\nd8nTm03N06fkw3RMEC+YI8dyFEVjd+7R9MwYZvFlHpnL4Kr9MHz0o8LpAl8ebwKm\nmbXNApztp8yKU0LWgcZ6cYWDfh+II6h6lE1EfvvOzlCnlUOENBtbVEP5H6qDiLKO\nxQ/SVIOdE0jC7gkIOfyO3CFdEo2xlvMhh4GkoLxJLKoDObNKAtW5Wjrq/tU85zyk\nI7ZEKIF2/d8bGvROw9CHfU+zmdErvn4WtnXFmxUz09uTbDAdkF0=\n=fMNv\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILek8rFQRSEU+Pd4WLmni3zMEu0xg9Y4K4CKo+k096rwCP/wECh8NDdHu2tu\nM6+scAa16U4I8QRfRjHz8AgmRturq1AdAQCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEGGq7te0Y37ab4aOpgZQsFgI\n8QRfRjHy8AgYkYNtUW2xRQCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVu\nZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEG1j6SrnCOotqPgIMdhNaecI8QRfRjHy\n8AgoHuKh6Vs19wCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BDIk/fWItE2iTFZLu/SqaV4CPEEX0Yx8/AIXwuM\n9uN7A50Ag9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 5fff6027ccdd33dfb4bec9aefcd3141f40b3686e\nparent 39f1dc944554218911b0945fff7e6d06f3dab284\nauthor John Newbery <john@johnnewbery.com> 1596101424 +0100\ncommitter Jon Atack <jon@atack.com> 1598435823 +0200\n\n[net processing] Split AlreadyHave() into separate block and tx functions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42ca5618cae0fd9ef97d2006b17d896bc58cc17c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42ca5618cae0fd9ef97d2006b17d896bc58cc17c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42ca5618cae0fd9ef97d2006b17d896bc58cc17c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39f1dc944554218911b0945fff7e6d06f3dab284",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39f1dc944554218911b0945fff7e6d06f3dab284",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39f1dc944554218911b0945fff7e6d06f3dab284"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 36,
      "deletions": 42
    },
    "files": [
      {
        "sha": "3a0613deeb896cd9f1f3f8cb329193da9d4d9fe5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 42,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42ca5618cae0fd9ef97d2006b17d896bc58cc17c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42ca5618cae0fd9ef97d2006b17d896bc58cc17c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=42ca5618cae0fd9ef97d2006b17d896bc58cc17c",
        "patch": "@@ -1422,47 +1422,38 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidatio\n //\n \n \n-bool static AlreadyHave(const CInv& inv, const CTxMemPool& mempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool static AlreadyHaveTx(const CInv& inv, const CTxMemPool& mempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    switch (inv.type)\n+    assert(recentRejects);\n+    if (::ChainActive().Tip()->GetBlockHash() != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = ::ChainActive().Tip()->GetBlockHash();\n+        recentRejects->reset();\n+    }\n+\n     {\n-    case MSG_TX:\n-    case MSG_WITNESS_TX:\n-    case MSG_WTX:\n-        {\n-            assert(recentRejects);\n-            if (::ChainActive().Tip()->GetBlockHash() != hashRecentRejectsChainTip)\n-            {\n-                // If the chain tip has changed previously rejected transactions\n-                // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n-                // or a double-spend. Reset the rejects filter and give those\n-                // txs a second chance.\n-                hashRecentRejectsChainTip = ::ChainActive().Tip()->GetBlockHash();\n-                recentRejects->reset();\n-            }\n+        LOCK(g_cs_orphans);\n+        if (!inv.IsMsgWtx() && mapOrphanTransactions.count(inv.hash)) {\n+            return true;\n+        } else if (inv.IsMsgWtx() && g_orphans_by_wtxid.count(inv.hash)) {\n+            return true;\n+        }\n+    }\n \n-            {\n-                LOCK(g_cs_orphans);\n-                if (!inv.IsMsgWtx() && mapOrphanTransactions.count(inv.hash)) {\n-                    return true;\n-                } else if (inv.IsMsgWtx() && g_orphans_by_wtxid.count(inv.hash)) {\n-                    return true;\n-                }\n-            }\n+    {\n+        LOCK(g_cs_recent_confirmed_transactions);\n+        if (g_recent_confirmed_transactions->contains(inv.hash)) return true;\n+    }\n \n-            {\n-                LOCK(g_cs_recent_confirmed_transactions);\n-                if (g_recent_confirmed_transactions->contains(inv.hash)) return true;\n-            }\n+    return recentRejects->contains(inv.hash) || mempool.exists(ToGenTxid(inv));\n+}\n \n-            return recentRejects->contains(inv.hash) || mempool.exists(ToGenTxid(inv));\n-        }\n-    case MSG_BLOCK:\n-    case MSG_WITNESS_BLOCK:\n-        return LookupBlockIndex(inv.hash) != nullptr;\n-    }\n-    // Don't know what it is, just say we already got one\n-    return true;\n+bool static AlreadyHaveBlock(const CInv& inv, const CTxMemPool& mempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{\n+    return LookupBlockIndex(inv.hash) != nullptr;\n }\n \n void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman)\n@@ -2670,10 +2661,10 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n                 if (inv.IsMsgWtx()) continue;\n             }\n \n-            bool fAlreadyHave = AlreadyHave(inv, m_mempool);\n-            LogPrint(BCLog::NET, \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom.GetId());\n-\n             if (inv.type == MSG_BLOCK) {\n+                bool fAlreadyHave = AlreadyHaveBlock(inv, m_mempool);\n+                LogPrint(BCLog::NET, \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom.GetId());\n+\n                 UpdateBlockAvailability(pfrom.GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n                     // Headers-first is the primary method of announcement on\n@@ -2684,6 +2675,9 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n                     best_block = &inv.hash;\n                 }\n             } else {\n+                bool fAlreadyHave = AlreadyHaveTx(inv, mempool);\n+                LogPrint(BCLog::NET, \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom.GetId());\n+\n                 pfrom.AddKnownTx(inv.hash);\n                 if (fBlocksOnly) {\n                     LogPrint(BCLog::NET, \"transaction (%s) inv sent in violation of protocol, disconnecting peer=%d\\n\", inv.hash.ToString(), pfrom.GetId());\n@@ -2963,7 +2957,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n         // already; and an adversary can already relay us old transactions\n         // (older than our recency filter) if trying to DoS us, without any need\n         // for witness malleation.\n-        if (!AlreadyHave(CInv(MSG_WTX, wtxid), m_mempool) &&\n+        if (!AlreadyHaveTx(CInv(MSG_WTX, wtxid), m_mempool) &&\n             AcceptToMemoryPool(m_mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             m_mempool.check(&::ChainstateActive().CoinsTip());\n             RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n@@ -3017,7 +3011,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n                     // protocol for getting all unconfirmed parents.\n                     CInv _inv(MSG_TX, parent_txid);\n                     pfrom.AddKnownTx(parent_txid);\n-                    if (!AlreadyHave(_inv, m_mempool)) RequestTx(State(pfrom.GetId()), ToGenTxid(_inv), current_time);\n+                    if (!AlreadyHaveTx(_inv, m_mempool)) RequestTx(State(pfrom.GetId()), ToGenTxid(_inv), current_time);\n                 }\n                 AddOrphanTx(ptx, pfrom.GetId());\n \n@@ -4568,7 +4562,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             // processing at a later time, see below)\n             tx_process_time.erase(tx_process_time.begin());\n             CInv inv(gtxid.IsWtxid() ? MSG_WTX : (MSG_TX | GetFetchFlags(*pto)), gtxid.GetHash());\n-            if (!AlreadyHave(inv, m_mempool)) {\n+            if (!AlreadyHaveTx(inv, m_mempool)) {\n                 // If this transaction was last requested more than 1 minute ago,\n                 // then request.\n                 const auto last_request_time = GetTxRequestTime(gtxid);"
      }
    ]
  },
  {
    "sha": "430e183b89d00b4148f0b77a6fcacca2cd948202",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzBlMTgzYjg5ZDAwYjQxNDhmMGI3N2E2ZmNhY2NhMmNkOTQ4MjAy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-30T10:01:11Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-08-26T09:57:07Z"
      },
      "message": "[net processing] Remove mempool argument from AlreadyHaveBlock()",
      "tree": {
        "sha": "eb3efc3d6017d791bc7d55e24ff71747b4b6c6c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb3efc3d6017d791bc7d55e24ff71747b4b6c6c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/430e183b89d00b4148f0b77a6fcacca2cd948202",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl9GMfMACgkQT1chs9Dj\nkh28wxAAiVbLJHMXQXESGLGuslyJGliRdlnTOGZcYrVdUKfeKupsd1xds1hVDV40\ndKHUHV3m096pijn3MZiEZ6/8vkoPBBP04haKMKkG1ttCZp/dlA2nDBGNTtJ39KiD\n83FwmB8uqHlnXnsfQkpk7endSphIvws4xcMhRI1jgOSR171GvQ2mePvnp0TG4wRW\nX/VZ+0Rka4Gfd/gxq4xLBZG15EjBR8BhJ2ZXX8sRNBmzlsy5t1ebhTp6B0yj1Qog\nYNYGkwQ86dzQuqUGUxGiYuwtqXQEMF16bws/0+FeMl2M8SPnULNLnXCqzvSeM3ou\nLIZmzSmAaPflpKmQJ8IA5dtf1pP5/rRs5eGoTHe7LrOnfIRMf9do9osfoDTZqynL\nsF//Un8Rt5ySyD8/sSTCZh97pP0bhGUuxSBISsBhvfgVG66PMhFtVNCmkvdI09Uk\njMGRv5qoVeniDIpagRfLphAKVO6u16rg8oflf11yE4ODag66hAKCM0qUbkpxDR35\nH7SlmeNuAXTPVk3xhDTegYSQhGl4vQORTDkGthC47sV6pi03eG5ytCXOODkU+hlY\nzjv/YwpQeFifV1n8XL+zobWgXshoHoK/ei/DPc0YhqCiiu+Ze19PYcdPCcF3xnHH\nf1YghysNYIphNsGUHDmb1qn3+2f9Rf1j5/9l6VuOESeJ+M7+x9U=\n=CQio\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIPNpGPJqD2rrqgA927lvRMmgZHnwMFhF9MNbgZXfC59zCP/wEBNG3v6KkMXE\nkhP6Uo76wI8I8QRfRjH28AhsVOsmmgJm+gCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEHMEgWtreWMYnA4OVHJwZwoI\n8QRfRjH28AhUMBqSU2YZLACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQz45ssrzf0yCTHiIl27iS0QjxBF9G\nMfbwCN2KGLBmrzW8AIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRh\nbGxheHkuY29t8BDhW5rSiQ38p5DAXzM+DYnxCPEEX0Yx9vAIxQoA9HgP018Ag9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree eb3efc3d6017d791bc7d55e24ff71747b4b6c6c6\nparent 42ca5618cae0fd9ef97d2006b17d896bc58cc17c\nauthor John Newbery <john@johnnewbery.com> 1596103271 +0100\ncommitter Jon Atack <jon@atack.com> 1598435827 +0200\n\n[net processing] Remove mempool argument from AlreadyHaveBlock()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/430e183b89d00b4148f0b77a6fcacca2cd948202",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/430e183b89d00b4148f0b77a6fcacca2cd948202",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/430e183b89d00b4148f0b77a6fcacca2cd948202/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42ca5618cae0fd9ef97d2006b17d896bc58cc17c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42ca5618cae0fd9ef97d2006b17d896bc58cc17c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42ca5618cae0fd9ef97d2006b17d896bc58cc17c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3fb8907b5e4f09a1e4b7a74866958d8dfba9a95f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/430e183b89d00b4148f0b77a6fcacca2cd948202/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/430e183b89d00b4148f0b77a6fcacca2cd948202/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=430e183b89d00b4148f0b77a6fcacca2cd948202",
        "patch": "@@ -1451,7 +1451,7 @@ bool static AlreadyHaveTx(const CInv& inv, const CTxMemPool& mempool) EXCLUSIVE_\n     return recentRejects->contains(inv.hash) || mempool.exists(ToGenTxid(inv));\n }\n \n-bool static AlreadyHaveBlock(const CInv& inv, const CTxMemPool& mempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool static AlreadyHaveBlock(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     return LookupBlockIndex(inv.hash) != nullptr;\n }\n@@ -2662,7 +2662,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             }\n \n             if (inv.type == MSG_BLOCK) {\n-                bool fAlreadyHave = AlreadyHaveBlock(inv, m_mempool);\n+                bool fAlreadyHave = AlreadyHaveBlock(inv);\n                 LogPrint(BCLog::NET, \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom.GetId());\n \n                 UpdateBlockAvailability(pfrom.GetId(), inv.hash);"
      }
    ]
  },
  {
    "sha": "5fdfb80b861e0de3fcf8a57163b3f52af4b2df3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmRmYjgwYjg2MWUwZGUzZmNmOGE1NzE2M2IzZjUyYWY0YjJkZjNi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-30T10:02:40Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-08-26T09:57:11Z"
      },
      "message": "[net processing] Change AlreadyHaveBlock() to take block_hash argument",
      "tree": {
        "sha": "18e745f0cb24e4dd6762877097033989c03d7e94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18e745f0cb24e4dd6762877097033989c03d7e94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fdfb80b861e0de3fcf8a57163b3f52af4b2df3b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl9GMfcACgkQT1chs9Dj\nkh3TbQ//YOwRTgXpmJBHMzb53lVdE1Bj45tVpDTXPE3WNVDv0//MpuKnAl87y/AF\nl4+viZFC+Sf7/gR8uR79UifTkH5906I7zr4qTvoJnAfCY+h3UjZMi3+nHGMyHl0n\npGM+UstaC/qd9bBKN6DxKiW2koBn2Y8m/ag4rBsZsDZPYEfBVbvoUa/pV8dJAjPR\nMWnp8eaqq/UFxDeC0CMTX8UAYQ6jUSGD9TQePooOvtxwVnwqgXIfVlEnb+0PzJia\n3Y5BIBiaassxGBGXPbM4GPGdoOKSuKsrkrD6l3g7FJ/EVyqa3s4L67Yckh4LDONe\nIAsIlVqRnIHw/iUmuzoacsF9PyvjAFyBgtZMEWiFlbWwkIEboFilSi+wx2HE7e1k\ngP82w/SAzP7zk0KDvnB1eh4gLW+BTH+Ne8GhnV/nnKEL1ATRw7D23njEY00PDfQ4\nPb8DQqItOTL+X/1NlliCOQ3sPVTJavyGOWE27pMf9d4fDDcNPC7sKRGu8TJ49fmB\nbGg2hrMMG5gnyIFOkoNL+KnbPdgqurgE0ZkwTO/mi2bHAworHzsUNKlx6jsIvcxh\nMNTOF2VVSCY81VlwknTY9lmCiJIPD10bkp6TmPIGKVZULvYW0PucZOZCvYwMVxwT\n0G+kRsp4eodKn1+Xcp+cYtCGwv+A1L9bk6SEUq7Iumc+5yWK0ro=\n=LZBT\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILy2FT96X1JYbqRJ42Jik16iwHJmVBKhKNZQ7bQGNFLGCP/wEB/q3wX8xJHk\nvOlU1m/ugHwI8QRfRjH68Ag3uWpgqANtaACD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQW+n2po0SA6ETOrEu\nXP8wLAjxBF9GMfrwCPtz5PWkbg+WAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxl\nbmRhci5jYXRhbGxheHkuY29t//AQcBzfHK9TTx6WtyXIbVsMAQjxBF9GMfrwCC4S\nha6zZvioAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t8BBxljBG9EKbuO0ItigfR/wfCPEEX0Yx+vAIcgP82G/OAiQAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 18e745f0cb24e4dd6762877097033989c03d7e94\nparent 430e183b89d00b4148f0b77a6fcacca2cd948202\nauthor John Newbery <john@johnnewbery.com> 1596103360 +0100\ncommitter Jon Atack <jon@atack.com> 1598435831 +0200\n\n[net processing] Change AlreadyHaveBlock() to take block_hash argument\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fdfb80b861e0de3fcf8a57163b3f52af4b2df3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fdfb80b861e0de3fcf8a57163b3f52af4b2df3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fdfb80b861e0de3fcf8a57163b3f52af4b2df3b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "430e183b89d00b4148f0b77a6fcacca2cd948202",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/430e183b89d00b4148f0b77a6fcacca2cd948202",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/430e183b89d00b4148f0b77a6fcacca2cd948202"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "82d41d737e199adefd67fd2762f1c52923bea31e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fdfb80b861e0de3fcf8a57163b3f52af4b2df3b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fdfb80b861e0de3fcf8a57163b3f52af4b2df3b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5fdfb80b861e0de3fcf8a57163b3f52af4b2df3b",
        "patch": "@@ -1451,9 +1451,9 @@ bool static AlreadyHaveTx(const CInv& inv, const CTxMemPool& mempool) EXCLUSIVE_\n     return recentRejects->contains(inv.hash) || mempool.exists(ToGenTxid(inv));\n }\n \n-bool static AlreadyHaveBlock(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool static AlreadyHaveBlock(const uint256& block_hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    return LookupBlockIndex(inv.hash) != nullptr;\n+    return LookupBlockIndex(block_hash) != nullptr;\n }\n \n void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman)\n@@ -2662,7 +2662,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             }\n \n             if (inv.type == MSG_BLOCK) {\n-                bool fAlreadyHave = AlreadyHaveBlock(inv);\n+                bool fAlreadyHave = AlreadyHaveBlock(inv.hash);\n                 LogPrint(BCLog::NET, \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom.GetId());\n \n                 UpdateBlockAvailability(pfrom.GetId(), inv.hash);"
      }
    ]
  },
  {
    "sha": "acd66421671e42a58e8e067868e1ab86268e3231",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2Q2NjQyMTY3MWU0MmE1OGU4ZTA2Nzg2OGUxYWI4NjI2OGUzMjMx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-30T10:18:45Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-08-26T09:57:15Z"
      },
      "message": "[net processing] Change AlreadyHaveTx() to take a GenTxid",
      "tree": {
        "sha": "095e8124c06f47de8aa2b5d6a8e3fabc10ce1aa8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/095e8124c06f47de8aa2b5d6a8e3fabc10ce1aa8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acd66421671e42a58e8e067868e1ab86268e3231",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl9GMfsACgkQT1chs9Dj\nkh1IjQ//UEf2qiMR309I4bKb9xTaw99lDcmJ2hqO4oEWruf0bL1MTRnpPF6KYJY/\nfXwKewOHYh0dZZR15diNCp3UzDZmSNP/Ec4fwG78xhQdOEL4duBsqYSPjvq6XcPl\n3F3OhtHehI6X3XKpOlC7QFAIyv6PpRFDo8TEeZqRNiW48q0R90c7qKJyA9rWutRP\n37ABrzAygfm5kVBkgWhNyK4pQ3+nd09SGOV2QJQp8k4ME4YySefPthxzQiVKfuBG\n/YFC4E7eSSXo8424k559lfdxmQaMd/L/thjQjkBN1JCX54qA+wujUkqaCjZhPS7U\n4dY7m7cVXzxTd5v8MSXP1ugwFhnLbLgA1plx8DG6tH5rwHnAw3ZyVA99Gw4pwjJM\nHECuOKehtw6JGesWfLZxYxqmn1KiVC+2iUKhjQsT/JOx6SzQ4hmd/QBE96lwfVEB\nh30KdhC7o98rN9livuan8QUEXccgDW8z/RtHCMyzv5UOpfNUWKpZjcRnKME1r2xD\nfSdyIsnmbcv6Ow6bh/yaNCHh811OamSx+aaKsWXXxLoeYEZ1ku0QU0jssc/lu4yu\nMv4ExgN/JqFix67eb26eyJ9bEHsuIBZODa7yp/H2fFgwA2AVV+g/etNspP933Gtj\nekEFh/FV+rV3JzY/Eaog2j6fpO+QdZ4z47TjRj54Xy6QLHnrGHw=\n=MLzJ\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwINb1mEgydYv+NnD4V+9hn0O4ykniwxWJiRmYtjCYfwmlCP/wEAFY5gyyY6kJ\nofqTc6PqfEcI8CA1uNAMSZnQbY2Gh1Vzrz8zGUymJ3EX2eNtTiS8T5vSOgjxBF9G\nMf7wCLB6PnUjmsbKAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmf/8BAlJLpnDCM/nBlXFa5C9u8xCPEEX0Yx/vAI\nSeBA3Quhi3wAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4\neS5jb23/8BCXHEsICniPRZUO+e3XSQaoCPEEX0Yx/vAI7kggkLJOAA4Ag9/jDS75\nDI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23wELQH\njdJm+dZT8qrFerMqLJYI8CC0oFnf6OvkDpj7+idD9lkRjdHV3/uVg3o4CUdvtfZw\nhgjxBF9GMf7wCLwt6tESUz4oAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 095e8124c06f47de8aa2b5d6a8e3fabc10ce1aa8\nparent 5fdfb80b861e0de3fcf8a57163b3f52af4b2df3b\nauthor John Newbery <john@johnnewbery.com> 1596104325 +0100\ncommitter Jon Atack <jon@atack.com> 1598435835 +0200\n\n[net processing] Change AlreadyHaveTx() to take a GenTxid\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acd66421671e42a58e8e067868e1ab86268e3231",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acd66421671e42a58e8e067868e1ab86268e3231",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acd66421671e42a58e8e067868e1ab86268e3231/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5fdfb80b861e0de3fcf8a57163b3f52af4b2df3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fdfb80b861e0de3fcf8a57163b3f52af4b2df3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fdfb80b861e0de3fcf8a57163b3f52af4b2df3b"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 12,
      "deletions": 11
    },
    "files": [
      {
        "sha": "49077435872ad2f49069ea9dccff4cc3c44e0704",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acd66421671e42a58e8e067868e1ab86268e3231/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acd66421671e42a58e8e067868e1ab86268e3231/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=acd66421671e42a58e8e067868e1ab86268e3231",
        "patch": "@@ -1422,7 +1422,7 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidatio\n //\n \n \n-bool static AlreadyHaveTx(const CInv& inv, const CTxMemPool& mempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool static AlreadyHaveTx(const GenTxid& gtxid, const CTxMemPool& mempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     assert(recentRejects);\n     if (::ChainActive().Tip()->GetBlockHash() != hashRecentRejectsChainTip) {\n@@ -1436,19 +1436,19 @@ bool static AlreadyHaveTx(const CInv& inv, const CTxMemPool& mempool) EXCLUSIVE_\n \n     {\n         LOCK(g_cs_orphans);\n-        if (!inv.IsMsgWtx() && mapOrphanTransactions.count(inv.hash)) {\n+        if (!gtxid.IsWtxid() && mapOrphanTransactions.count(gtxid.GetHash())) {\n             return true;\n-        } else if (inv.IsMsgWtx() && g_orphans_by_wtxid.count(inv.hash)) {\n+        } else if (gtxid.IsWtxid() && g_orphans_by_wtxid.count(gtxid.GetHash())) {\n             return true;\n         }\n     }\n \n     {\n         LOCK(g_cs_recent_confirmed_transactions);\n-        if (g_recent_confirmed_transactions->contains(inv.hash)) return true;\n+        if (g_recent_confirmed_transactions->contains(gtxid.GetHash())) return true;\n     }\n \n-    return recentRejects->contains(inv.hash) || mempool.exists(ToGenTxid(inv));\n+    return recentRejects->contains(gtxid.GetHash()) || mempool.exists(gtxid);\n }\n \n bool static AlreadyHaveBlock(const uint256& block_hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n@@ -2675,7 +2675,8 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n                     best_block = &inv.hash;\n                 }\n             } else {\n-                bool fAlreadyHave = AlreadyHaveTx(inv, mempool);\n+                GenTxid gtxid = ToGenTxid(inv);\n+                bool fAlreadyHave = AlreadyHaveTx(gtxid, mempool);\n                 LogPrint(BCLog::NET, \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom.GetId());\n \n                 pfrom.AddKnownTx(inv.hash);\n@@ -2684,7 +2685,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n                     pfrom.fDisconnect = true;\n                     return;\n                 } else if (!fAlreadyHave && !m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\n-                    RequestTx(State(pfrom.GetId()), ToGenTxid(inv), current_time);\n+                    RequestTx(State(pfrom.GetId()), gtxid, current_time);\n                 }\n             }\n         }\n@@ -2957,7 +2958,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n         // already; and an adversary can already relay us old transactions\n         // (older than our recency filter) if trying to DoS us, without any need\n         // for witness malleation.\n-        if (!AlreadyHaveTx(CInv(MSG_WTX, wtxid), m_mempool) &&\n+        if (!AlreadyHaveTx(GenTxid(/* is_wtxid=*/true, wtxid), m_mempool) &&\n             AcceptToMemoryPool(m_mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             m_mempool.check(&::ChainstateActive().CoinsTip());\n             RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n@@ -3009,9 +3010,9 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n                     // wtxidrelay peers.\n                     // Eventually we should replace this with an improved\n                     // protocol for getting all unconfirmed parents.\n-                    CInv _inv(MSG_TX, parent_txid);\n+                    GenTxid gtxid{/* is_wtxid=*/false, parent_txid};\n                     pfrom.AddKnownTx(parent_txid);\n-                    if (!AlreadyHaveTx(_inv, m_mempool)) RequestTx(State(pfrom.GetId()), ToGenTxid(_inv), current_time);\n+                    if (!AlreadyHaveTx(gtxid, m_mempool)) RequestTx(State(pfrom.GetId()), gtxid, current_time);\n                 }\n                 AddOrphanTx(ptx, pfrom.GetId());\n \n@@ -4562,7 +4563,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             // processing at a later time, see below)\n             tx_process_time.erase(tx_process_time.begin());\n             CInv inv(gtxid.IsWtxid() ? MSG_WTX : (MSG_TX | GetFetchFlags(*pto)), gtxid.GetHash());\n-            if (!AlreadyHaveTx(inv, m_mempool)) {\n+            if (!AlreadyHaveTx(ToGenTxid(inv), m_mempool)) {\n                 // If this transaction was last requested more than 1 minute ago,\n                 // then request.\n                 const auto last_request_time = GetTxRequestTime(gtxid);"
      }
    ]
  },
  {
    "sha": "b1c855453bf2634e7fd9b53c4a76a8536fc9865d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWM4NTU0NTNiZjI2MzRlN2ZkOWI1M2M0YTc2YTg1MzZmYzk4NjVk",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-08-05T15:35:05Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-08-26T09:57:19Z"
      },
      "message": "p2p: use CInv block message helpers in net_processing.cpp",
      "tree": {
        "sha": "922b5695a440589e9a16ce0a3e6a1d4c20561aeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/922b5695a440589e9a16ce0a3e6a1d4c20561aeb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1c855453bf2634e7fd9b53c4a76a8536fc9865d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl9GMf8ACgkQT1chs9Dj\nkh0mTQ/9F52cnqPFg6bmjvDBz4tArbVx0n/oNOvwWJsW0KXM80oj26yOKBL69OFb\njS0rtmv1JE/pYsQd6Q5CZ+A7CUVAOayQLyzhqxWUVHvPlJ9E/aDLGaP4nDOJhcEK\nfYPr9Lie3sRusxemdUPpbpdmB1Abc/dstiyvfcn8drdvke4SunjG31Izv+tb2ldz\nUFsqRPJpjI0hXLyxZjwZWPYqP5qjR814ZxvubQOfIZUnGGhnYGqK7UKLX0Rh7gW3\n21WTQkFvBkW5qJ4yu6ZyGm0Xuq+MB1UGlwsB4vKxkiY9HF1aBIndpU2VTBm1Wykt\nr4hYXGj3TqdbgdxE5Vf8MF9pZBYKS+iZc8bElsb3pRlfbSE2CxSbUQ4XWyPUhSJR\npGvQo513vqkVTI2opRBjIxYiR1kTo7PbFKqYftxwj/FgwNePoV+iYqS6mRgg2kXN\nbtGwUForTDVYBTkyV9gb7WNuzzOq0y4eo3h2f+BLY2r82BGSImnRJY7wvnZ7riTW\niQ6RRkc5yfYJE3liYIgtOgYyF+m3mEcwon1HvrTlxPWgcA0ZI8R+3HJiaI36PjhL\nROfFF5NxmYbGRF3mjugqaw3MNzc3DWjuiYU0Rn+DePxOPoKGRYMsUx4Uz+7h3Udh\nd4XrK3xCB2Kxk/WRC1HwZdX3W2RJUD4ruvYk/BbpQRBXc3a5jPY=\n=ZyN9\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIJm7AROZxBZlPrfl9CdxdTDbd3kSz6VJmYnzIVY7ZeI3CP/wEAzTmIqnlAMM\nczhAuq9G+noI8QRfRjID8AiR2fXTrKH9+gCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEDtpbQZYHoBYazkBKfsd4EYI8QRfRjIC\n8Ah+Di9xJkJxQwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQVqgWVVAc37NAqxaLlUddCQjxBF9GMgPwCKa9\nR8ChtxBPAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t8BDFHtpnJ71E1M8rhgMFFiMaCPEgEG+xYYizADKSnVopyjXdRPfW\n/VgopeRKe2GsdMrXBNUI8QRfRjIC8Ag70/M0dIzhowCD3+MNLvkMjiwraHR0cHM6\nLy9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 922b5695a440589e9a16ce0a3e6a1d4c20561aeb\nparent acd66421671e42a58e8e067868e1ab86268e3231\nauthor Jon Atack <jon@atack.com> 1596641705 +0200\ncommitter Jon Atack <jon@atack.com> 1598435839 +0200\n\np2p: use CInv block message helpers in net_processing.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1c855453bf2634e7fd9b53c4a76a8536fc9865d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1c855453bf2634e7fd9b53c4a76a8536fc9865d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1c855453bf2634e7fd9b53c4a76a8536fc9865d/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acd66421671e42a58e8e067868e1ab86268e3231",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acd66421671e42a58e8e067868e1ab86268e3231",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acd66421671e42a58e8e067868e1ab86268e3231"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 8,
      "deletions": 11
    },
    "files": [
      {
        "sha": "290853e0a664d66b65184590a04f3f2fd28210df",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1c855453bf2634e7fd9b53c4a76a8536fc9865d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1c855453bf2634e7fd9b53c4a76a8536fc9865d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b1c855453bf2634e7fd9b53c4a76a8536fc9865d",
        "patch": "@@ -1555,7 +1555,7 @@ void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, c\n     // disconnect node in case we have reached the outbound limit for serving historical blocks\n     if (send &&\n         connman.OutboundTargetReached(true) &&\n-        (((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) &&\n+        (((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.IsMsgFilteredBlk()) &&\n         !pfrom.HasPermission(PF_DOWNLOAD) // nodes with the download permission may exceed target\n     ) {\n         LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom.GetId());\n@@ -1581,7 +1581,7 @@ void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, c\n         std::shared_ptr<const CBlock> pblock;\n         if (a_recent_block && a_recent_block->GetHash() == pindex->GetBlockHash()) {\n             pblock = a_recent_block;\n-        } else if (inv.type == MSG_WITNESS_BLOCK) {\n+        } else if (inv.IsMsgWitnessBlk()) {\n             // Fast-path: in this case it is possible to serve the block directly from disk,\n             // as the network format matches the format on disk\n             std::vector<uint8_t> block_data;\n@@ -1598,12 +1598,11 @@ void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, c\n             pblock = pblockRead;\n         }\n         if (pblock) {\n-            if (inv.type == MSG_BLOCK)\n+            if (inv.IsMsgBlk()) {\n                 connman.PushMessage(&pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n-            else if (inv.type == MSG_WITNESS_BLOCK)\n+            } else if (inv.IsMsgWitnessBlk()) {\n                 connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n-            else if (inv.type == MSG_FILTERED_BLOCK)\n-            {\n+            } else if (inv.IsMsgFilteredBlk()) {\n                 bool sendMerkleBlock = false;\n                 CMerkleBlock merkleBlock;\n                 if (pfrom.m_tx_relay != nullptr) {\n@@ -1627,9 +1626,7 @@ void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, c\n                 }\n                 // else\n                     // no response\n-            }\n-            else if (inv.type == MSG_CMPCT_BLOCK)\n-            {\n+            } else if (inv.IsMsgCmpctBlk()) {\n                 // If a peer is asking for old blocks, we're almost guaranteed\n                 // they won't have a useful mempool to match against a compact block,\n                 // and we don't feel like constructing the object for them, so\n@@ -1757,7 +1754,7 @@ void static ProcessGetData(CNode& pfrom, const CChainParams& chainparams, CConnm\n     // expensive to process.\n     if (it != pfrom.vRecvGetData.end() && !pfrom.fPauseSend) {\n         const CInv &inv = *it++;\n-        if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK) {\n+        if (inv.IsGenBlkMsg()) {\n             ProcessGetBlockData(pfrom, chainparams, inv, connman);\n         }\n         // else: If the first item on the queue is an unknown type, we erase it\n@@ -2661,7 +2658,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n                 if (inv.IsMsgWtx()) continue;\n             }\n \n-            if (inv.type == MSG_BLOCK) {\n+            if (inv.IsMsgBlk()) {\n                 bool fAlreadyHave = AlreadyHaveBlock(inv.hash);\n                 LogPrint(BCLog::NET, \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom.GetId());\n "
      }
    ]
  },
  {
    "sha": "24ee4f01eadb870435712950a1364cf0def06e9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGVlNGYwMWVhZGI4NzA0MzU3MTI5NTBhMTM2NGNmMGRlZjA2ZTlm",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-08-08T12:36:26Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-08-26T09:57:23Z"
      },
      "message": "p2p: make gtxid(.hash) and fAlreadyHave localvars const",
      "tree": {
        "sha": "6eb4d248c7a872b52b11d5fc0a82edd7043b1905",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6eb4d248c7a872b52b11d5fc0a82edd7043b1905"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24ee4f01eadb870435712950a1364cf0def06e9f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl9GMgQACgkQT1chs9Dj\nkh1k4RAAqmVtFOVY8pq+b1Nsvp/B46IM4PCytXl69tOWNxZy53dcXkm5gyiKRuwt\nFCdh2vxfpl3rYZFjh8Qs4DVrV+VhM6lMw+VRcM9bwINooefo6LU90+ATRly3pxOq\nhiQaNbEmC4tGOIUdvs4jX0w07kjRunKWb0A5I7W3/0C5UpKgQeDJP1f0wSb76sC8\nJk+bbYp3pG6ZIQTpnKPDPJZK24e4nEQFeJ8A8ky7rf8pIP9dUciiS+kH3sWjuXco\nA+2LwKXisoqG/+nvZ/WONVohkZB0+CieWSuzc3knTVKF+6MZ9xLIG3qdKCtVvukE\nzM3RsiNHnqrPiJO+B/xu7ajAHA+A7RW8uBgtqokLpI1o9Ip1okwUHCr0EKF5Ja9a\nV44+xzbQwgOzC4T5Lq86hAdj3xvUDj0f1PfuOTtxqjden7lXGqzMJHJC7hl+rldt\nwMxrz/GkQ+mPhSdESjd0xqyHQHfI9RAb5I0hRq/v72nOMP+9Rx9+5BAk8hCOpVK1\nXS+hBmefqCr7gNwl4wApo+MzSyfWunTLPtTAgIhhyCw8upRdMFXTUgrgGYrJ1SKH\nhNJYjjXUDpcyiAb9ez/4qAxV6Xj0/AYf1QL2hdEYl9ERkOA15jm6p/ZysaAliz1F\nWWV3Xh4aQHmGQpZZdn38+iS9+TyD0L6KIZRkHX2CgKUBX9MtjZA=\n=59y5\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILtrPp7knva1vFBrKsTAkUW1lSutsom1o78rFub+fiIZCP/wEDlecHzlEiAO\nOB2UVTXOTfYI8QRfRjIG8AhFIm+BcNo6DwCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQhBDNUgMLASxA1zcj\nfoYChAjxBF9GMgbwCL7eHoGx7Mv1AIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5j\nYWxlbmRhci5ldGVybml0eXdhbGwuY29t//AQiKy4jjFj9iS3aksNoDcjRwjxBF9G\nMgbwCF3r1ua7mUNPAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRh\nbGxheHkuY29t8BCxpT5b23CtLzjg6QlRJtQZCPEEX0YyBvAIBc+Ntbf6YcoAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 6eb4d248c7a872b52b11d5fc0a82edd7043b1905\nparent b1c855453bf2634e7fd9b53c4a76a8536fc9865d\nauthor Jon Atack <jon@atack.com> 1596890186 +0200\ncommitter Jon Atack <jon@atack.com> 1598435843 +0200\n\np2p: make gtxid(.hash) and fAlreadyHave localvars const\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24ee4f01eadb870435712950a1364cf0def06e9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24ee4f01eadb870435712950a1364cf0def06e9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24ee4f01eadb870435712950a1364cf0def06e9f/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1c855453bf2634e7fd9b53c4a76a8536fc9865d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1c855453bf2634e7fd9b53c4a76a8536fc9865d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1c855453bf2634e7fd9b53c4a76a8536fc9865d"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 11,
      "deletions": 10
    },
    "files": [
      {
        "sha": "b9f0e1f98eb0426e5a76fb750807bacbd6ae488d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24ee4f01eadb870435712950a1364cf0def06e9f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24ee4f01eadb870435712950a1364cf0def06e9f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=24ee4f01eadb870435712950a1364cf0def06e9f",
        "patch": "@@ -1434,21 +1434,23 @@ bool static AlreadyHaveTx(const GenTxid& gtxid, const CTxMemPool& mempool) EXCLU\n         recentRejects->reset();\n     }\n \n+    const uint256& hash = gtxid.GetHash();\n+\n     {\n         LOCK(g_cs_orphans);\n-        if (!gtxid.IsWtxid() && mapOrphanTransactions.count(gtxid.GetHash())) {\n+        if (!gtxid.IsWtxid() && mapOrphanTransactions.count(hash)) {\n             return true;\n-        } else if (gtxid.IsWtxid() && g_orphans_by_wtxid.count(gtxid.GetHash())) {\n+        } else if (gtxid.IsWtxid() && g_orphans_by_wtxid.count(hash)) {\n             return true;\n         }\n     }\n \n     {\n         LOCK(g_cs_recent_confirmed_transactions);\n-        if (g_recent_confirmed_transactions->contains(gtxid.GetHash())) return true;\n+        if (g_recent_confirmed_transactions->contains(hash)) return true;\n     }\n \n-    return recentRejects->contains(gtxid.GetHash()) || mempool.exists(gtxid);\n+    return recentRejects->contains(hash) || mempool.exists(gtxid);\n }\n \n bool static AlreadyHaveBlock(const uint256& block_hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n@@ -2645,8 +2647,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n         const auto current_time = GetTime<std::chrono::microseconds>();\n         uint256* best_block{nullptr};\n \n-        for (CInv &inv : vInv)\n-        {\n+        for (CInv& inv : vInv) {\n             if (interruptMsgProc) return;\n \n             // Ignore INVs that don't match wtxidrelay setting.\n@@ -2659,7 +2660,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             }\n \n             if (inv.IsMsgBlk()) {\n-                bool fAlreadyHave = AlreadyHaveBlock(inv.hash);\n+                const bool fAlreadyHave = AlreadyHaveBlock(inv.hash);\n                 LogPrint(BCLog::NET, \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom.GetId());\n \n                 UpdateBlockAvailability(pfrom.GetId(), inv.hash);\n@@ -2672,8 +2673,8 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n                     best_block = &inv.hash;\n                 }\n             } else {\n-                GenTxid gtxid = ToGenTxid(inv);\n-                bool fAlreadyHave = AlreadyHaveTx(gtxid, mempool);\n+                const GenTxid gtxid = ToGenTxid(inv);\n+                const bool fAlreadyHave = AlreadyHaveTx(gtxid, mempool);\n                 LogPrint(BCLog::NET, \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom.GetId());\n \n                 pfrom.AddKnownTx(inv.hash);\n@@ -3007,7 +3008,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n                     // wtxidrelay peers.\n                     // Eventually we should replace this with an improved\n                     // protocol for getting all unconfirmed parents.\n-                    GenTxid gtxid{/* is_wtxid=*/false, parent_txid};\n+                    const GenTxid gtxid{/* is_wtxid=*/false, parent_txid};\n                     pfrom.AddKnownTx(parent_txid);\n                     if (!AlreadyHaveTx(gtxid, m_mempool)) RequestTx(State(pfrom.GetId()), gtxid, current_time);\n                 }"
      }
    ]
  },
  {
    "sha": "aa3621385ee66c9dde5c632c0a79fba3a6ea2d62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTM2MjEzODVlZTY2YzlkZGU1YzYzMmMwYTc5ZmJhM2E2ZWEyZDYy",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-08-08T11:22:19Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-08-26T09:57:27Z"
      },
      "message": "test: use CInv::MSG_WITNESS_TX flag in p2p_segwit",
      "tree": {
        "sha": "4f29c6cfc3d15e78c6828e19dce50f3a06a22115",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f29c6cfc3d15e78c6828e19dce50f3a06a22115"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa3621385ee66c9dde5c632c0a79fba3a6ea2d62",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl9GMgcACgkQT1chs9Dj\nkh1a6xAApESpu44lrAwnr5aw0pkUU9RsARjj2bgKb7LS8cnpVcFywFDVrSAnD3CI\nXCFbo+zBtd/D3dRMheTGznAN/Octp1M7qg3PektHdUdcgcbJ8qbzqN+DRTDmri0N\nqu1NX+AGoF1Zt8B3x0BBdFzbDRqnnjWv2t+XHt7GDjkXFd9fPrn0aCZpZ6k+toqP\n9TGghHrpxsy+AoUIG84xL1zHyDD+RuxI7tengGNZNcDn6eWyCBBZ4w91L8W8QGXr\nau3XQiSpLyvNdOgyGdGFtc74mWO8OXtFCVRhZm5R7OPxh6ksQEDlak+304D7glav\nU4XRocKTpnco2ZxUSU8SQDqOUkDyRYj1oQpvP6jRMCsJNkyvv5ppFzEYhEd10AUA\nd1jVZ/yesKHK92i3dzckrDENWlQAy5DJU4b39zuKT20PdoMF6E4Jhc1kOux0N1k/\nxVSbSfiOXWqY5zWj9GxMhGJ9PiHsqH5ZrenB6mund5bu6Y3R9G6c1PD6nPxk6/0Y\nXGEzZ/rtMEEi+sTiwUGkQYtMgAq4Cpoo1eP99LxD9Ug/N2d4nDS5XB09nD7jBwU2\nCuD6jF8u1xJYaJDPR0af9aliBiDIY5W5ZS5NlsGEYvR8fa8mb/cBqtW+9Sdbxz5h\nN1I32FMQ9GLs0hazItCr0UOwcBrlJFluZ4Ye9EgWmhh58sl6+Eo=\n=xT1q\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDilajqlCPOc4x5mIkcdjz4+wow4HsChNkCriRM9zAfOCP/wEG6cVM1S/vfE\nTRd574i+1GUI8QRfRjIJ8AjiAMSEYNr+lgCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQo9kBuPWrJeeMJO3t\ninuygQjxBF9GMgrwCEoDq1gqKkvPAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5j\nYWxlbmRhci5ldGVybml0eXdhbGwuY29t//AQruJw5tFdRmuVmpddxsLF2QjxBF9G\nMgrwCMCdhaYZechxAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRh\nbGxheHkuY29t8BC5938wPiYns1iA6XzoJMyaCPEEX0YyCfAIl5OxgcnbbQ0Ag9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 4f29c6cfc3d15e78c6828e19dce50f3a06a22115\nparent 24ee4f01eadb870435712950a1364cf0def06e9f\nauthor Jon Atack <jon@atack.com> 1596885739 +0200\ncommitter Jon Atack <jon@atack.com> 1598435847 +0200\n\ntest: use CInv::MSG_WITNESS_TX flag in p2p_segwit\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa3621385ee66c9dde5c632c0a79fba3a6ea2d62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa3621385ee66c9dde5c632c0a79fba3a6ea2d62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa3621385ee66c9dde5c632c0a79fba3a6ea2d62/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24ee4f01eadb870435712950a1364cf0def06e9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24ee4f01eadb870435712950a1364cf0def06e9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24ee4f01eadb870435712950a1364cf0def06e9f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b80e7994be1a1f12ab3793254827172969a83380",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa3621385ee66c9dde5c632c0a79fba3a6ea2d62/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa3621385ee66c9dde5c632c0a79fba3a6ea2d62/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=aa3621385ee66c9dde5c632c0a79fba3a6ea2d62",
        "patch": "@@ -25,6 +25,7 @@\n     MSG_BLOCK,\n     MSG_TX,\n     MSG_WITNESS_FLAG,\n+    MSG_WITNESS_TX,\n     MSG_WTX,\n     NODE_NETWORK,\n     NODE_WITNESS,\n@@ -2158,7 +2159,7 @@ def received_wtxidrelay():\n         self.wtx_node.wait_for_getdata([tx.sha256], 60)\n         with mininode_lock:\n             lgd = self.wtx_node.lastgetdata[:]\n-        assert_equal(lgd, [CInv(MSG_TX|MSG_WITNESS_FLAG, tx.sha256)])\n+        assert_equal(lgd, [CInv(MSG_WITNESS_TX, tx.sha256)])\n \n         # Send tx through\n         test_transaction_acceptance(self.nodes[0], self.wtx_node, tx, with_witness=False, accepted=True)"
      },
      {
        "sha": "5e411e35a829b3962594ea2acf2754afb12a9b74",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa3621385ee66c9dde5c632c0a79fba3a6ea2d62/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa3621385ee66c9dde5c632c0a79fba3a6ea2d62/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=aa3621385ee66c9dde5c632c0a79fba3a6ea2d62",
        "patch": "@@ -63,6 +63,7 @@\n MSG_WTX = 5\n MSG_WITNESS_FLAG = 1 << 30\n MSG_TYPE_MASK = 0xffffffff >> 2\n+MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG\n \n FILTER_TYPE_BASIC = 0\n "
      }
    ]
  },
  {
    "sha": "fb56d37612dea6666e7da73d671311a697570dae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjU2ZDM3NjEyZGVhNjY2NmU3ZGE3M2Q2NzEzMTFhNjk3NTcwZGFl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-21T14:10:48Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-08-26T09:57:30Z"
      },
      "message": "p2p: ensure inv is GenMsgTx before ToGenTxid in inv processing\n\nand otherwise log that an unknown INV type was received.\n\nIn INV processing, when handling transaction type inv messages,\nToGenTxid() expects that we constructed the CInv ourselves or\nthat we verified that it is for a transaction type CInv.\n\nTherefore, change this `else` branch into an `else if (inv.GenMsgTx())`\nto make this safer and log any INVs that fall through.",
      "tree": {
        "sha": "cf08424927bce9293cbb42f30b0758c271b43841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf08424927bce9293cbb42f30b0758c271b43841"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb56d37612dea6666e7da73d671311a697570dae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl9GMgsACgkQT1chs9Dj\nkh3UGA/+MoWZf0H/qmMS6AOz1gP+PYxCLaoWlUvRRMKMtyh0dIGF4VdXKlX3rpvb\n7EQU8/eRZ+x4xDrNblLaY8Nk+HwOrD9tnpAmkG2QfTOaNw1g0XZdBm9oDnffh9gZ\nMLGT+UyVXE/vdW0fDu4M19GlRVISqEexiExBzTtiFP0fpDTofaF6Lf8lITaqc/m6\nfP4u3St5yKQHNM3fktKgPg7lCUPDljOi8rgZTS+1ZAaIEYxzkeKr8LrJqFASmx2m\n5Y2bK8DzY6J6fM1lZrHODzxTjSoVp6HaR9eMG5soa1iEpbJnCFvjiEFUhTEy1xej\nBSeyzWZQXeu/n1+YznFlNeX07UZ2yq9LAkzQSeN6N4/rV3EyML/0t1wKaCDSmbwn\nuCKRp9wRRlZS4gC395logvXRqE5XY/dUO6J7RH1ZEMMnfImSuDh6CMV3E8oAY1rJ\n/t44N0/X2P5Zcj+48uQDRKU45Mw64M3aTp2zzgjhJkAQhQGH3XMYrjB1VbawkNpc\nM3bo5AHzU5tSAF8JTYtLwffdk634CGM1ZEl6XJuAeWAi+iSK5nBYPuJaKjpqUwjA\nDtgDTb/ui+2ippO0UBuxjaX3BInS4H5dqN6kY1IT4LoBHahoZGuuQQzlMWmjrypx\nliOKCwFftrbaBIjsDP32j0dNA4i2GoYEgorkpEU/rxtOeBKHew4=\n=JAGD\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIIZsoqSyq5xlCBg1IiiqDCKoi5IwAujI2u5xyOh7kxRgCP/wECasJhWhCZ+R\nNtoT16p3TCkI8QRfRjIN8AgPKA0/3EiQ2QCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEDVZnWMjVd7rCgcUehSfbyAI8CD/qm/G\nVJCaanWoI8uC8S3Jc1dQsA/wPxjqlNwrpanXJgjxBF9GMg3wCAjNYVqh0WEAAIPf\n4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BBN2st+LylDa76W7UIw94f/CPAgyJvvuffCuh/MxTiP6QBioBgW2HXa\nDBTcsTXnrcLQrlYI8QRfRjIN8AhajalRuh8J+ACD3+MNLvkMjikoaHR0cHM6Ly9m\naW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQtUwWocV0hgmKZ+IEZM2v\nvgjwIANpF0R9tZPsrtacjxliAtb6w+PcctfxrPc0xJBir1nICPEEX0YyDfAIhyJQ\nHWAsI7IAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree cf08424927bce9293cbb42f30b0758c271b43841\nparent aa3621385ee66c9dde5c632c0a79fba3a6ea2d62\nauthor John Newbery <john@johnnewbery.com> 1598019048 +0200\ncommitter Jon Atack <jon@atack.com> 1598435850 +0200\n\np2p: ensure inv is GenMsgTx before ToGenTxid in inv processing\n\nand otherwise log that an unknown INV type was received.\n\nIn INV processing, when handling transaction type inv messages,\nToGenTxid() expects that we constructed the CInv ourselves or\nthat we verified that it is for a transaction type CInv.\n\nTherefore, change this `else` branch into an `else if (inv.GenMsgTx())`\nto make this safer and log any INVs that fall through.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb56d37612dea6666e7da73d671311a697570dae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb56d37612dea6666e7da73d671311a697570dae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb56d37612dea6666e7da73d671311a697570dae/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa3621385ee66c9dde5c632c0a79fba3a6ea2d62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa3621385ee66c9dde5c632c0a79fba3a6ea2d62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa3621385ee66c9dde5c632c0a79fba3a6ea2d62"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0bd5e56ddd17042bbff121f9926a0d78ac763ec4",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb56d37612dea6666e7da73d671311a697570dae/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb56d37612dea6666e7da73d671311a697570dae/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fb56d37612dea6666e7da73d671311a697570dae",
        "patch": "@@ -2672,7 +2672,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n                     // then fetch the blocks we need to catch up.\n                     best_block = &inv.hash;\n                 }\n-            } else {\n+            } else if (inv.IsGenTxMsg()) {\n                 const GenTxid gtxid = ToGenTxid(inv);\n                 const bool fAlreadyHave = AlreadyHaveTx(gtxid, mempool);\n                 LogPrint(BCLog::NET, \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom.GetId());\n@@ -2685,6 +2685,8 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n                 } else if (!fAlreadyHave && !m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\n                     RequestTx(State(pfrom.GetId()), gtxid, current_time);\n                 }\n+            } else {\n+                LogPrint(BCLog::NET, \"Unknown inv type \\\"%s\\\" received from peer=%d\\n\", inv.ToString(), pfrom.GetId());\n             }\n         }\n "
      }
    ]
  }
]