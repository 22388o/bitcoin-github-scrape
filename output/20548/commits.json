[
  {
    "sha": "3dab03e8682873033d43d84ab12f6c73c0c10874",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGFiMDNlODY4Mjg3MzAzM2Q0M2Q4NGFiMTJmNmM3M2MwYzEwODc0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-12-02T16:21:08Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-12-02T17:21:13Z"
      },
      "message": "RPC: Tolerate unknown parameters, but with clear warning/errors",
      "tree": {
        "sha": "32be8b00e5a5e5f85469a67f34bba9bb2cd6c05c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32be8b00e5a5e5f85469a67f34bba9bb2cd6c05c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dab03e8682873033d43d84ab12f6c73c0c10874",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dab03e8682873033d43d84ab12f6c73c0c10874",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3dab03e8682873033d43d84ab12f6c73c0c10874",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dab03e8682873033d43d84ab12f6c73c0c10874/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a13d15c143906bb6fd5d30c25df03ce5e20418d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a13d15c143906bb6fd5d30c25df03ce5e20418d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a13d15c143906bb6fd5d30c25df03ce5e20418d"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 53,
      "deletions": 7
    },
    "files": [
      {
        "sha": "39751e57339ffee686ea641b4cffadbba12b87bd",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 7,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dab03e8682873033d43d84ab12f6c73c0c10874/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dab03e8682873033d43d84ab12f6c73c0c10874/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=3dab03e8682873033d43d84ab12f6c73c0c10874",
        "patch": "@@ -27,6 +27,9 @@\n /** WWW-Authenticate to present with 401 Unauthorized response */\n static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n \n+static constexpr size_t MIN_RPCAUTH_VALUES = 3;\n+static constexpr size_t MAX_RPCAUTH_VALUES = 3;\n+\n /** Simple one-shot callback timer to be used by the RPC mechanism to e.g.\n  * re-lock the wallet.\n  */\n@@ -93,8 +96,9 @@ static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const Uni\n \n //This function checks username and password against -rpcauth\n //entries from config file.\n-static bool multiUserAuthorized(std::string strUserPass)\n+static bool multiUserAuthorized(std::string strUserPass, bool* out_invalid_rpcauth)\n {\n+    if (out_invalid_rpcauth) *out_invalid_rpcauth = false;\n     if (strUserPass.find(':') == std::string::npos) {\n         return false;\n     }\n@@ -118,14 +122,23 @@ static bool multiUserAuthorized(std::string strUserPass)\n         std::string strHashFromPass = HexStr(hexvec);\n \n         if (TimingResistantEqual(strHashFromPass, strHash)) {\n+            if (vFields.size() > MAX_RPCAUTH_VALUES) {\n+                if (out_invalid_rpcauth) {\n+                    *out_invalid_rpcauth = true;\n+                }\n+                // Allow other rpcauth lines to possibly handle the user\n+                continue;\n+            }\n+\n             return true;\n         }\n     }\n     return false;\n }\n \n-static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUsernameOut)\n+static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUsernameOut, bool* out_invalid_rpcauth)\n {\n+    if (out_invalid_rpcauth) *out_invalid_rpcauth = false;\n     if (strRPCUserColonPass.empty()) // Belt-and-suspenders measure if InitRPCAuthentication was not called\n         return false;\n     if (strAuth.substr(0, 6) != \"Basic \")\n@@ -141,7 +154,7 @@ static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUserna\n     if (TimingResistantEqual(strUserPass, strRPCUserColonPass)) {\n         return true;\n     }\n-    return multiUserAuthorized(strUserPass);\n+    return multiUserAuthorized(strUserPass, out_invalid_rpcauth);\n }\n \n static bool HTTPReq_JSONRPC(const util::Ref& context, HTTPRequest* req)\n@@ -161,16 +174,25 @@ static bool HTTPReq_JSONRPC(const util::Ref& context, HTTPRequest* req)\n \n     JSONRPCRequest jreq(context);\n     jreq.peerAddr = req->GetPeer().ToString();\n-    if (!RPCAuthorized(authHeader.second, jreq.authUser)) {\n-        LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", jreq.peerAddr);\n+    bool bad_rpcauth_config;\n+    if (!RPCAuthorized(authHeader.second, jreq.authUser, &bad_rpcauth_config)) {\n+        if (bad_rpcauth_config) {\n+            LogPrintf(\"RPC User %s has unrecognised rpcauth parameters, denying access\\n\", jreq.authUser);\n+        } else {\n+            LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", jreq.peerAddr);\n+        }\n \n         /* Deter brute-forcing\n            If this results in a DoS the user really\n            shouldn't have their RPC port exposed. */\n         UninterruptibleSleep(std::chrono::milliseconds{250});\n \n         req->WriteHeader(\"WWW-Authenticate\", WWW_AUTH_HEADER_DATA);\n-        req->WriteReply(HTTP_UNAUTHORIZED);\n+        if (bad_rpcauth_config) {\n+            req->WriteReply(HTTP_UNAUTHORIZED, \"Invalid rpcauth configuration line\");\n+        } else {\n+            req->WriteReply(HTTP_UNAUTHORIZED);\n+        }\n         return false;\n     }\n \n@@ -256,8 +278,11 @@ static bool InitRPCAuthentication()\n         for (const std::string& rpcauth : gArgs.GetArgs(\"-rpcauth\")) {\n             std::vector<std::string> fields;\n             boost::split(fields, rpcauth, boost::is_any_of(\":$\"));\n-            if (fields.size() == 3) {\n+            if (fields.size() >= MIN_RPCAUTH_VALUES) {\n                 g_rpcauth.push_back(fields);\n+                if (fields.size() > MAX_RPCAUTH_VALUES) {\n+                    LogPrintf(\"Unrecognised -rpcauth parameters for username '%s'. User will not be able to authenticate.\\n\", SanitizeString(fields[0]));\n+                }\n             } else {\n                 LogPrintf(\"Invalid -rpcauth argument.\\n\");\n                 return false;"
      },
      {
        "sha": "632c4a4842ece0f583fae2bbd18ae933b8a261e6",
        "filename": "test/functional/rpc_users.py",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dab03e8682873033d43d84ab12f6c73c0c10874/test/functional/rpc_users.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dab03e8682873033d43d84ab12f6c73c0c10874/test/functional/rpc_users.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_users.py?ref=3dab03e8682873033d43d84ab12f6c73c0c10874",
        "patch": "@@ -29,6 +29,7 @@ def call_with_auth(node, user, password):\n     conn.connect()\n     conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n     resp = conn.getresponse()\n+    resp.data = resp.read()\n     conn.close()\n     return resp\n \n@@ -44,6 +45,9 @@ def setup_chain(self):\n         self.rtpassword = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n         rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n \n+        self.rt_inv_password = \"wNOLKB5DLXktHNcgcueEdRYijtDvEm4-e__eHELhd0U=\"\n+        rpcauth_inv = \"rpcauth=rt_inv:90d2a2816cc662ddd5c3981a4b88e115$cd5acccf50d87d84f1764e271296086b6e6e1f6b7488aba44042f0e205907fb2\"\n+\n         self.rpcuser = \"rpcuser\ud83d\udcbb\"\n         self.rpcpassword = \"rpcpassword\ud83d\udd11\"\n \n@@ -65,6 +69,10 @@ def setup_chain(self):\n         self.password = lines[3]\n \n         with open(os.path.join(get_datadir_path(self.options.tmpdir, 0), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+            # Invalid rpcauth line w/ duplicate username/password should warn, then get ignored at runtime (using the other rpcauth line)\n+            f.write(rpcauth + \":a:b\\n\")\n+            # Invalid rpcauth line w/ unique username/password should warn, then get rejected for RPC calls with a unique error message\n+            f.write(rpcauth_inv + \":a:b\\n\")\n             f.write(rpcauth + \"\\n\")\n             f.write(rpcauth2 + \"\\n\")\n             f.write(rpcauth3 + \"\\n\")\n@@ -102,6 +110,19 @@ def run_test(self):\n         init_error = 'Error: Unable to start HTTP server. See debug log for details.'\n \n         self.log.info('Check -rpcauth are validated')\n+\n+        # Valid password, should give a message about invalid rpcauth line\n+        with self.nodes[0].assert_debug_log(expected_msgs=['RPC User rt_inv has unrecognised rpcauth parameters, denying access']):\n+            resp = call_with_auth(self.nodes[0], 'rt_inv', self.rt_inv_password)\n+        assert_equal(401, resp.status)\n+        assert_equal(b'Invalid rpcauth configuration line', resp.data)\n+\n+        # Wrong password should be a normal forbidden response though\n+        with self.nodes[0].assert_debug_log(expected_msgs=['ThreadRPCServer incorrect password attempt from']):\n+            resp = call_with_auth(self.nodes[0], 'rt_inv', self.rt_inv_password + 'wrong')\n+        assert_equal(401, resp.status)\n+        assert_equal(b'', resp.data)\n+\n         # Empty -rpcauth= are ignored\n         self.restart_node(0, extra_args=['-rpcauth='])\n         self.stop_node(0)"
      }
    ]
  }
]