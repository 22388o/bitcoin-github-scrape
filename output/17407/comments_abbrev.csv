MarcoFalke,2019-11-07 23:03:37,"> Going further in this direction, what would be the next steps ? Passing a mempool pointer to g_chainstate ?\n\ngood question. I have decided against that to not interwind chainstate (consensus) with mempool (policy). Otherwise this should be a member function: `CChainState::GetMempool`.",https://github.com/bitcoin/bitcoin/pull/17407#issuecomment-551306580,551306580,
ariard,2019-11-07 23:15:07,"> I have decided against that to not interwind chainstate (consensus) with mempool (policy)\n\nThat means keeping `::mempool` as a global on the long-term? Anyway better to process incrementally, curious of your next PRs on this.",https://github.com/bitcoin/bitcoin/pull/17407#issuecomment-551309887,551309887,
MarcoFalke,2019-11-07 23:21:08,"> That means keeping ::mempool as a global on the long-term? Anyway better to process incrementally, curious of your next PRs on this.\n\nYes, but it will become `Optional<CTxMemPool>` (or similar)",https://github.com/bitcoin/bitcoin/pull/17407#issuecomment-551311633,551311633,
jnewbery,2019-11-08 03:00:28,"> Currently the mempool is a global that is initialized before the main function.\n\nThis PR doesn't appear to change that, but it sounds like this is the first step in some larger changes. Perhaps you could link to a branch that illustrates what you're planning to do next.",https://github.com/bitcoin/bitcoin/pull/17407#issuecomment-551363596,551363596,
MarcoFalke,2019-11-08 03:06:59,"Ok, will upload my branches tomorrow",https://github.com/bitcoin/bitcoin/pull/17407#issuecomment-551364928,551364928,
DrahtBot,2019-11-08 16:28:30,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/17407#issuecomment-551895529,551895529,
MarcoFalke,2019-11-08 17:51:00,"Ok, added some more documentation about future code design in the first commit",https://github.com/bitcoin/bitcoin/pull/17407#issuecomment-551926300,551926300,
MarcoFalke,2019-11-14 20:53:57,Addressed @ryanofsky feedback,https://github.com/bitcoin/bitcoin/pull/17407#issuecomment-554074903,554074903,
jnewbery,2019-11-14 22:37:48,"Concept ACK. Can you update the PR description, which makes it sound like this PR changes mempool from being a global that is initialized before `main`.",https://github.com/bitcoin/bitcoin/pull/17407#issuecomment-554114146,554114146,
MarcoFalke,2019-11-15 13:02:16,Updated OP as requested by @jnewbery ,https://github.com/bitcoin/bitcoin/pull/17407#issuecomment-554350684,554350684,
MarcoFalke,2019-11-15 13:44:00,"> Could be done either here or in a separate PR depending on how complicated it is.\n\nNot complicated, but not a scripted-diff either. Maybe it could be combined with https://github.com/bitcoin/bitcoin/pull/17407#discussion_r346488421, but that sounded more complicated to me.",https://github.com/bitcoin/bitcoin/pull/17407#issuecomment-554363367,554363367,
MarcoFalke,2019-11-15 18:19:51,"> Is there a reason we can't make mempool a unique ptr in NodeContext?\n\nYes, the memory is not yet managed in `NodeContext`. The mempool is created before `main`, and the NodeContext is only created after main.",https://github.com/bitcoin/bitcoin/pull/17407#issuecomment-554472097,554472097,
jnewbery,2019-11-15 18:52:33,"utACK fa538813b1c382cf135cbf2a0cc3fa01f36964d8\n\nLooking forward to mempool being a unique ptr managed by `NodeContext` in a future PR.",https://github.com/bitcoin/bitcoin/pull/17407#issuecomment-554483727,554483727,
ariard,2019-11-07 22:53:02,"Due to RPC requests only being served after `SetRPCWarmupFinished` even after mempool is switched to a struct initialized during init sequence, it shouldn't never be null (but better to be secure if we refactor our init logic)",https://github.com/bitcoin/bitcoin/pull/17407#discussion_r343916849,343916849,src/rpc/blockchain.cpp
MarcoFalke,2019-11-07 23:04:40,"Yes, obviously this should be adjusted when the mempool is truly optional. However I don't see the reason to add dead code right now.",https://github.com/bitcoin/bitcoin/pull/17407#discussion_r343920529,343920529,src/rpc/blockchain.cpp
ariard,2019-11-07 23:11:26,My point was more currently the `CHECK_FATAL` is useless because RPC server accepting requests is the last thing in our init sequence. `CHECK_FATAL` hitting  would be a glaring logic error.,https://github.com/bitcoin/bitcoin/pull/17407#discussion_r343922507,343922507,src/rpc/blockchain.cpp
MarcoFalke,2019-11-07 23:19:07,"> CHECK_FATAL is useless\n\nCHECK_NONFATAL is not useless. Its exact use case it to be used when the condition is assumed to be always true. This is the case here. See https://dev.visucore.com/bitcoin/doxygen/check_8h.html#a46a3e27097aa5e94bbf62075bad7016f\n\nI plan to introduce a `-nomempool` command line option, which makes the mempool go away (optional). When I fail to update this line of c",https://github.com/bitcoin/bitcoin/pull/17407#discussion_r343924679,343924679,src/rpc/blockchain.cpp
ryanofsky,2019-11-08 01:56:14,"If this function is supposed to replace uses of ::mempool in existing code, I think it'd be better to return a reference:\n\n```c++\nCTxMemPool& MempoolInstance()\n{\n    return ::mempool;\n}\n```\n\nnow and change it to:\n\n```c++\nCTxMemPool& MempoolInstance()\n{\n    CHECK_NONFATAL(::g_mempool);\n    return *::g_mempool;\n}\n```\n\nin the future when mempool is replaced by an",https://github.com/bitcoin/bitcoin/pull/17407#discussion_r343960086,343960086,src/validation.cpp
MarcoFalke,2019-11-08 02:11:52,"> If this function is supposed to replace uses of ::mempool in existing code, I think it'd be better to return a reference:\n\nIt is *not* supposed to replace ::mempool in existing code. It is supposed to be what you refer to as ""different helper function"". I am happy to rename it to `OptionalMempoolInstance`, but I think that that is a bit too verbose.",https://github.com/bitcoin/bitcoin/pull/17407#discussion_r343963050,343963050,src/validation.cpp
ryanofsky,2019-11-08 02:48:56,"Unclear what the next steps are here. It's hard to see how a function that doesn't log or check anything but just returns a pointer to a global could be useful, but it'd help if you could describe more literally how the function and global and function calls will change in the future.",https://github.com/bitcoin/bitcoin/pull/17407#discussion_r343969798,343969798,src/validation.cpp
ryanofsky,2019-11-14 18:56:01,"In commit ""node: Add reference to mempool in NodeContext"" (fa5329abb91ec4876f61967848901c6805ab5503)\n\nThis looks good. It would be nice in the future to have similar functions for connman and banman in [`rpc/net.cpp`](https://github.com/bitcoin/bitcoin/blob/master/src/rpc/net.cpp) to minimize uses of `g_rpc_node`, and help that global go away at some point.\n\n(Maybe relevant:  One way `g_rp",https://github.com/bitcoin/bitcoin/pull/17407#discussion_r346488421,346488421,src/rpc/blockchain.cpp
ryanofsky,2019-11-14 18:58:13,"In commit ""node: Add reference to mempool in NodeContext"" (fa5329abb91ec4876f61967848901c6805ab5503)\n\nCould also check g_rpc_node is not null, maybe using assert",https://github.com/bitcoin/bitcoin/pull/17407#discussion_r346489583,346489583,src/rpc/blockchain.cpp
ryanofsky,2019-11-14 19:05:46,"In commit ""node: Add reference to mempool in NodeContext"" (fa5329abb91ec4876f61967848901c6805ab5503)\n\nWould it be clearer to refer to the mempool instead of the tx pool or transaction pool? (I don't actually know, I'm just used to mempool over transaction pool.)",https://github.com/bitcoin/bitcoin/pull/17407#discussion_r346493149,346493149,src/rpc/protocol.h
ryanofsky,2019-11-14 19:15:35,"In commit ""test: Replace recursive lock with AssertLockHeld"" (fa19ddc2bf8ee8f1ce621611a90f8b9e380b1517)\n\nInstead of `TestSequenceLocks` being a lambda and `TestPackageSelection` in fafe3d88d34f04c798d000ca0b315830d63a80eb taking an unconventionally named `m_node` argument, I think it might be better if both were test fixture methods:\n\n```c++\nclass MinerTest : public TestingSetup\n{\n  ",https://github.com/bitcoin/bitcoin/pull/17407#discussion_r346497982,346497982,src/test/miner_tests.cpp
MarcoFalke,2019-11-14 20:51:58,Sounds like a nice follow-up pull request,https://github.com/bitcoin/bitcoin/pull/17407#discussion_r346539606,346539606,src/rpc/blockchain.cpp
MarcoFalke,2019-11-14 20:52:13,Done. added assert,https://github.com/bitcoin/bitcoin/pull/17407#discussion_r346539722,346539722,src/rpc/blockchain.cpp
MarcoFalke,2019-11-14 20:53:07,Done. Renamed TX_POOL to MEMPOOL,https://github.com/bitcoin/bitcoin/pull/17407#discussion_r346540138,346540138,src/rpc/protocol.h
MarcoFalke,2019-11-14 20:53:30,"Fixed, I think",https://github.com/bitcoin/bitcoin/pull/17407#discussion_r346540308,346540308,src/test/miner_tests.cpp
jnewbery,2019-11-15 17:49:34,"Please use the name ""mempool"". I've never heard anyone refer to it as a 'transaction pool'",https://github.com/bitcoin/bitcoin/pull/17407#discussion_r346939228,346939228,src/rpc/blockchain.cpp
MarcoFalke,2019-11-15 18:41:09,"Done. Removed ""transaction pool""",https://github.com/bitcoin/bitcoin/pull/17407#discussion_r346958843,346958843,src/rpc/blockchain.cpp
ariard,2019-11-18 17:06:06,"nit: I think this change dissociate further chain from mempool, so may qualify better as a mempool error.",https://github.com/bitcoin/bitcoin/pull/17407#discussion_r347500524,347500524,src/rpc/protocol.h
MarcoFalke,2019-11-20 14:20:36,"I think it is fine to keep as is, as mempool and chain are closely related. Also, I'd rather not invalidate ACKs over this.",https://github.com/bitcoin/bitcoin/pull/17407#discussion_r348507286,348507286,src/rpc/protocol.h
