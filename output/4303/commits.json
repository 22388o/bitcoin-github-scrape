[
  {
    "sha": "4af4d2ea743ec08a2ffd652bf066f3f53d922571",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWY0ZDJlYTc0M2VjMDhhMmZmZDY1MmJmMDY2ZjNmNTNkOTIyNTcx",
    "commit": {
      "author": {
        "name": "Huang Le",
        "email": "4tarhl@gmail.com",
        "date": "2014-06-07T09:54:41Z"
      },
      "committer": {
        "name": "Huang Le",
        "email": "4tarhl@gmail.com",
        "date": "2014-06-07T09:54:41Z"
      },
      "message": "Add another CNetAddr constructor which accepts boost::asio::ip::address\n\nBy merging the independent BoostAsioToCNetAddr() function, this makes things a little bit more straightforward and clearer I think.\n\nSigned-off-by: Huang Le <4tarhl@gmail.com>",
      "tree": {
        "sha": "a825a1a53dd82f79908bdf353b39b05371228ebf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a825a1a53dd82f79908bdf353b39b05371228ebf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4af4d2ea743ec08a2ffd652bf066f3f53d922571",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af4d2ea743ec08a2ffd652bf066f3f53d922571",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4af4d2ea743ec08a2ffd652bf066f3f53d922571",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af4d2ea743ec08a2ffd652bf066f3f53d922571/comments",
    "author": {
      "login": "4tar",
      "id": 882771,
      "node_id": "MDQ6VXNlcjg4Mjc3MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/882771?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/4tar",
      "html_url": "https://github.com/4tar",
      "followers_url": "https://api.github.com/users/4tar/followers",
      "following_url": "https://api.github.com/users/4tar/following{/other_user}",
      "gists_url": "https://api.github.com/users/4tar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/4tar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/4tar/subscriptions",
      "organizations_url": "https://api.github.com/users/4tar/orgs",
      "repos_url": "https://api.github.com/users/4tar/repos",
      "events_url": "https://api.github.com/users/4tar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/4tar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "4tar",
      "id": 882771,
      "node_id": "MDQ6VXNlcjg4Mjc3MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/882771?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/4tar",
      "html_url": "https://github.com/4tar",
      "followers_url": "https://api.github.com/users/4tar/followers",
      "following_url": "https://api.github.com/users/4tar/following{/other_user}",
      "gists_url": "https://api.github.com/users/4tar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/4tar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/4tar/subscriptions",
      "organizations_url": "https://api.github.com/users/4tar/orgs",
      "repos_url": "https://api.github.com/users/4tar/repos",
      "events_url": "https://api.github.com/users/4tar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/4tar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97ab93f50b6f35bc362990e9dd665b90ca4132df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97ab93f50b6f35bc362990e9dd665b90ca4132df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97ab93f50b6f35bc362990e9dd665b90ca4132df"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 41,
      "deletions": 45
    },
    "files": [
      {
        "sha": "38f2e28acfa816ce87ea3271321d05e9a9c609a7",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af4d2ea743ec08a2ffd652bf066f3f53d922571/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af4d2ea743ec08a2ffd652bf066f3f53d922571/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=4af4d2ea743ec08a2ffd652bf066f3f53d922571",
        "patch": "@@ -16,6 +16,7 @@\n \n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n+#include <boost/asio.hpp>\n \n #if !defined(HAVE_MSG_NOSIGNAL) && !defined(MSG_NOSIGNAL)\n #define MSG_NOSIGNAL 0\n@@ -588,6 +589,23 @@ CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr)\n     SetRaw(NET_IPV6, (const uint8_t*)&ipv6Addr);\n }\n \n+CNetAddr::CNetAddr(const boost::asio::ip::address& asioAddr)\n+{\n+    Network net = NET_IPV4;\n+    const uint8_t* bytes;\n+\n+    if (asioAddr.is_v4())\n+        bytes = &(asioAddr.to_v4().to_bytes()[0]);\n+    else if (asioAddr.to_v6().is_v4_compatible() || asioAddr.to_v6().is_v4_mapped())\n+        bytes = &(asioAddr.to_v6().to_v4().to_bytes()[0]);\n+    else {\n+        bytes = &(asioAddr.to_v6().to_bytes()[0]);\n+        net = NET_IPV6;\n+    }\n+\n+    SetRaw(net, bytes);\n+}\n+\n CNetAddr::CNetAddr(const char *pszIp, bool fAllowLookup)\n {\n     Init();"
      },
      {
        "sha": "4b06f4e504203bdee1ff6b582836da46835b10e0",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af4d2ea743ec08a2ffd652bf066f3f53d922571/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af4d2ea743ec08a2ffd652bf066f3f53d922571/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=4af4d2ea743ec08a2ffd652bf066f3f53d922571",
        "patch": "@@ -16,6 +16,9 @@\n #include <string>\n #include <vector>\n \n+// Pre-declare the boost::asio::ip::address class here\n+namespace boost { namespace asio { namespace ip { class address; } } }\n+\n extern int nConnectTimeout;\n \n #ifdef WIN32\n@@ -45,6 +48,8 @@ class CNetAddr\n     public:\n         CNetAddr();\n         CNetAddr(const struct in_addr& ipv4Addr);\n+        CNetAddr(const struct in6_addr& ipv6Addr);\n+        CNetAddr(const boost::asio::ip::address& asioAddr);\n         explicit CNetAddr(const char *pszIp, bool fAllowLookup = false);\n         explicit CNetAddr(const std::string &strIp, bool fAllowLookup = false);\n         void Init();\n@@ -80,13 +85,11 @@ class CNetAddr\n         unsigned int GetByte(int n) const;\n         uint64_t GetHash() const;\n         bool GetInAddr(struct in_addr* pipv4Addr) const;\n+        bool GetIn6Addr(struct in6_addr* pipv6Addr) const;\n         std::vector<unsigned char> GetGroup() const;\n         int GetReachabilityFrom(const CNetAddr *paddrPartner = NULL) const;\n         void print() const;\n \n-        CNetAddr(const struct in6_addr& pipv6Addr);\n-        bool GetIn6Addr(struct in6_addr* pipv6Addr) const;\n-\n         friend bool operator==(const CNetAddr& a, const CNetAddr& b);\n         friend bool operator!=(const CNetAddr& a, const CNetAddr& b);\n         friend bool operator<(const CNetAddr& a, const CNetAddr& b);"
      },
      {
        "sha": "db8e8992fa28e50788f917cd7b17491a5ccd4bf5",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 23,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af4d2ea743ec08a2ffd652bf066f3f53d922571/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af4d2ea743ec08a2ffd652bf066f3f53d922571/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=4af4d2ea743ec08a2ffd652bf066f3f53d922571",
        "patch": "@@ -360,31 +360,9 @@ void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)\n     stream << HTTPReply(nStatus, strReply, false) << std::flush;\n }\n \n-CNetAddr BoostAsioToCNetAddr(boost::asio::ip::address address)\n-{\n-    CNetAddr netaddr;\n-    // Make sure that IPv4-compatible and IPv4-mapped IPv6 addresses are treated as IPv4 addresses\n-    if (address.is_v6()\n-     && (address.to_v6().is_v4_compatible()\n-      || address.to_v6().is_v4_mapped()))\n-        address = address.to_v6().to_v4();\n-\n-    if(address.is_v4())\n-    {\n-        boost::asio::ip::address_v4::bytes_type bytes = address.to_v4().to_bytes();\n-        netaddr.SetRaw(NET_IPV4, &bytes[0]);\n-    }\n-    else\n-    {\n-        boost::asio::ip::address_v6::bytes_type bytes = address.to_v6().to_bytes();\n-        netaddr.SetRaw(NET_IPV6, &bytes[0]);\n-    }\n-    return netaddr;\n-}\n-\n bool ClientAllowed(const boost::asio::ip::address& address)\n {\n-    CNetAddr netaddr = BoostAsioToCNetAddr(address);\n+    CNetAddr netaddr(address);\n     BOOST_FOREACH(const CSubNet &subnet, rpc_allow_subnets)\n         if (subnet.Match(netaddr))\n             return true;"
      },
      {
        "sha": "1092c691beede19d23b2cfaffaf8e426c3e97b61",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af4d2ea743ec08a2ffd652bf066f3f53d922571/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af4d2ea743ec08a2ffd652bf066f3f53d922571/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=4af4d2ea743ec08a2ffd652bf066f3f53d922571",
        "patch": "@@ -19,7 +19,6 @@\n #include \"json/json_spirit_writer_template.h\"\n \n class CBlockIndex;\n-class CNetAddr;\n \n /* Start RPC threads */\n void StartRPCThreads();\n@@ -51,9 +50,6 @@ void RPCTypeCheck(const json_spirit::Object& o,\n  */\n void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds);\n \n-//! Convert boost::asio address to CNetAddr\n-extern CNetAddr BoostAsioToCNetAddr(boost::asio::ip::address address);\n-\n typedef json_spirit::Value(*rpcfn_type)(const json_spirit::Array& params, bool fHelp);\n \n class CRPCCommand"
      },
      {
        "sha": "80e167883c53e5ba41fcb9a721b875fe0438f0c7",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af4d2ea743ec08a2ffd652bf066f3f53d922571/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af4d2ea743ec08a2ffd652bf066f3f53d922571/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=4af4d2ea743ec08a2ffd652bf066f3f53d922571",
        "patch": "@@ -7,6 +7,7 @@\n #include <string>\n \n #include <boost/test/unit_test.hpp>\n+#include <boost/asio.hpp>\n \n using namespace std;\n \n@@ -139,4 +140,19 @@ BOOST_AUTO_TEST_CASE(subnet_test)\n     BOOST_CHECK(!CSubNet(\"fuzzy\").IsValid());\n }\n \n+BOOST_AUTO_TEST_CASE(cnetaddr_from_boostasio)\n+{\n+    // Check IPv4 addresses\n+    BOOST_CHECK_EQUAL(CNetAddr(boost::asio::ip::address::from_string(\"1.2.3.4\")).ToString(), \"1.2.3.4\");\n+    BOOST_CHECK_EQUAL(CNetAddr(boost::asio::ip::address::from_string(\"127.0.0.1\")).ToString(), \"127.0.0.1\");\n+    // Check IPv6 addresses\n+    BOOST_CHECK_EQUAL(CNetAddr(boost::asio::ip::address::from_string(\"::1\")).ToString(), \"::1\");\n+    BOOST_CHECK_EQUAL(CNetAddr(boost::asio::ip::address::from_string(\"123:4567:89ab:cdef:123:4567:89ab:cdef\")).ToString(),\n+                                         \"123:4567:89ab:cdef:123:4567:89ab:cdef\");\n+    // v4 compatible must be interpreted as IPv4\n+    BOOST_CHECK_EQUAL(CNetAddr(boost::asio::ip::address::from_string(\"::0:127.0.0.1\")).ToString(), \"127.0.0.1\");\n+    // v4 mapped must be interpreted as IPv4\n+    BOOST_CHECK_EQUAL(CNetAddr(boost::asio::ip::address::from_string(\"::ffff:127.0.0.1\")).ToString(), \"127.0.0.1\");\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "55e247a7c9cfa7c3b29ce47a635fa1c6976f18a4",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af4d2ea743ec08a2ffd652bf066f3f53d922571/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af4d2ea743ec08a2ffd652bf066f3f53d922571/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=4af4d2ea743ec08a2ffd652bf066f3f53d922571",
        "patch": "@@ -139,19 +139,4 @@ BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)\n     BOOST_CHECK(AmountFromValue(ValueFromString(\"20999999.99999999\")) == 2099999999999999LL);\n }\n \n-BOOST_AUTO_TEST_CASE(rpc_boostasiotocnetaddr)\n-{\n-    // Check IPv4 addresses\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"1.2.3.4\")).ToString(), \"1.2.3.4\");\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"127.0.0.1\")).ToString(), \"127.0.0.1\");\n-    // Check IPv6 addresses\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::1\")).ToString(), \"::1\");\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"123:4567:89ab:cdef:123:4567:89ab:cdef\")).ToString(),\n-                                         \"123:4567:89ab:cdef:123:4567:89ab:cdef\");\n-    // v4 compatible must be interpreted as IPv4\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::0:127.0.0.1\")).ToString(), \"127.0.0.1\");\n-    // v4 mapped must be interpreted as IPv4\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::ffff:127.0.0.1\")).ToString(), \"127.0.0.1\");\n-}\n-\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]