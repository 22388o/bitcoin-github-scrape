[
  {
    "sha": "35cd2da623e32b975fbc485c3605934e4aa8bdc5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNWNkMmRhNjIzZTMyYjk3NWZiYzQ4NWMzNjA1OTM0ZTRhYThiZGM1",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-08-13T13:01:40Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-08-14T09:18:47Z"
      },
      "message": "test: Fix 'make cov' with clang",
      "tree": {
        "sha": "7975bf6009cdb37ec5b4fec7c3cc51f75f201ed4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7975bf6009cdb37ec5b4fec7c3cc51f75f201ed4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35cd2da623e32b975fbc485c3605934e4aa8bdc5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl82VvcACgkQQQEIES5+\nqB8oxhAAlkCVYBY+LiRwb08lWSsIhlFxokLUXteRwoHMXbufvJbZ1O7gYTyVDLOA\npH2ypkGigBDyPMcOqp7wuNF+6UzFmBQip1AS3BdBIE0uBSltdGHxWwDjG9yE+Rtk\n2/TtZztobMpMy5iPX2LFMUnqC70fuKi7uNU/6VcvaTb976qIzbr/MLgSw+Naxvbd\n2ziEssWoHCxmU9gIlt038/uRi4/cgcHqbQWP5m/VE8nkW+PhBobr1bBt1c7i3iIm\nAllN8FpgqFIa6RsAsMn6j+32/72kIGwbNQO/CIC8iP+9wYi+sRpHe+EAdPOYIwB7\noVrPY0+WJgy6KXOQU7w8DBoLqTeWK+jQe+P/SuJB020Tb9x3Wqaohf6UtCuis8WM\n4eSx2n/eoXOywttnLzkkMym+d4DCLPKWWFSAeTjP1DUNV8M+2swFwLnhuw1fU3Nx\nPSxdD//59S3lNPaIDWgrMRI0+drWBrIFS6cQnZeWGDNsCSMYmHsaiIEIZiRBfqMe\nv95rTggnidniqthz/3SVtAMoPUIIzx2Us1dXfOg8s89NtzqdrgM6VaWtjSlMjD5C\nADa3bJCSSwO/kSBoiEbsLhCf/c2/eN8XgHqTj+wOgK8gv0uHspM8xHkwc6SmhgM8\nvvJysRB17tKM81LbWailVuyVIUlYP99FoChkgswF8DYZlp827D8=\n=o4vw\n-----END PGP SIGNATURE-----",
        "payload": "tree 7975bf6009cdb37ec5b4fec7c3cc51f75f201ed4\nparent 8a85377cd0b60cb00dae4f595d628d1afbd28bd5\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1597323700 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1597396727 +0300\n\ntest: Fix 'make cov' with clang\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35cd2da623e32b975fbc485c3605934e4aa8bdc5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35cd2da623e32b975fbc485c3605934e4aa8bdc5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35cd2da623e32b975fbc485c3605934e4aa8bdc5/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a85377cd0b60cb00dae4f595d628d1afbd28bd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a85377cd0b60cb00dae4f595d628d1afbd28bd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a85377cd0b60cb00dae4f595d628d1afbd28bd5"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 57,
      "deletions": 64
    },
    "files": [
      {
        "sha": "bf7c6c3e3eb0a20e8dfd8973a4e9e3516394233a",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 64,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35cd2da623e32b975fbc485c3605934e4aa8bdc5/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35cd2da623e32b975fbc485c3605934e4aa8bdc5/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=35cd2da623e32b975fbc485c3605934e4aa8bdc5",
        "patch": "@@ -550,57 +550,52 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     BOOST_CHECK(test_args.m_settings.ro_config[\"sec1\"].size() == 3);\n     BOOST_CHECK(test_args.m_settings.ro_config[\"sec2\"].size() == 2);\n \n-    BOOST_CHECK(test_args.m_settings.ro_config[\"\"].count(\"a\")\n-                && test_args.m_settings.ro_config[\"\"].count(\"b\")\n-                && test_args.m_settings.ro_config[\"\"].count(\"ccc\")\n-                && test_args.m_settings.ro_config[\"\"].count(\"d\")\n-                && test_args.m_settings.ro_config[\"\"].count(\"fff\")\n-                && test_args.m_settings.ro_config[\"\"].count(\"ggg\")\n-                && test_args.m_settings.ro_config[\"\"].count(\"h\")\n-                && test_args.m_settings.ro_config[\"\"].count(\"i\")\n-               );\n-    BOOST_CHECK(test_args.m_settings.ro_config[\"sec1\"].count(\"ccc\")\n-                && test_args.m_settings.ro_config[\"sec1\"].count(\"h\")\n-                && test_args.m_settings.ro_config[\"sec2\"].count(\"ccc\")\n-                && test_args.m_settings.ro_config[\"sec2\"].count(\"iii\")\n-               );\n-\n-    BOOST_CHECK(test_args.IsArgSet(\"-a\")\n-                && test_args.IsArgSet(\"-b\")\n-                && test_args.IsArgSet(\"-ccc\")\n-                && test_args.IsArgSet(\"-d\")\n-                && test_args.IsArgSet(\"-fff\")\n-                && test_args.IsArgSet(\"-ggg\")\n-                && test_args.IsArgSet(\"-h\")\n-                && test_args.IsArgSet(\"-i\")\n-                && !test_args.IsArgSet(\"-zzz\")\n-                && !test_args.IsArgSet(\"-iii\")\n-               );\n-\n-    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n-                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n-                && test_args.GetArg(\"-ccc\", \"xxx\") == \"argument\"\n-                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n-                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n-                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n-                && test_args.GetArg(\"-h\", \"xxx\") == \"0\"\n-                && test_args.GetArg(\"-i\", \"xxx\") == \"1\"\n-                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n-                && test_args.GetArg(\"-iii\", \"xxx\") == \"xxx\"\n-               );\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"\"].count(\"a\"));\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"\"].count(\"b\"));\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"\"].count(\"ccc\"));\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"\"].count(\"d\"));\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"\"].count(\"fff\"));\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"\"].count(\"ggg\"));\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"\"].count(\"h\"));\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"\"].count(\"i\"));\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"sec1\"].count(\"ccc\"));\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"sec1\"].count(\"h\"));\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"sec2\"].count(\"ccc\"));\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"sec2\"].count(\"iii\"));\n+\n+    BOOST_CHECK(test_args.IsArgSet(\"-a\"));\n+    BOOST_CHECK(test_args.IsArgSet(\"-b\"));\n+    BOOST_CHECK(test_args.IsArgSet(\"-ccc\"));\n+    BOOST_CHECK(test_args.IsArgSet(\"-d\"));\n+    BOOST_CHECK(test_args.IsArgSet(\"-fff\"));\n+    BOOST_CHECK(test_args.IsArgSet(\"-ggg\"));\n+    BOOST_CHECK(test_args.IsArgSet(\"-h\"));\n+    BOOST_CHECK(test_args.IsArgSet(\"-i\"));\n+    BOOST_CHECK(!test_args.IsArgSet(\"-zzz\"));\n+    BOOST_CHECK(!test_args.IsArgSet(\"-iii\"));\n+\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-a\", \"xxx\"), \"\");\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-b\", \"xxx\"), \"1\");\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-ccc\", \"xxx\"), \"argument\");\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-d\", \"xxx\"), \"e\");\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-fff\", \"xxx\"), \"0\");\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-ggg\", \"xxx\"), \"1\");\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-h\", \"xxx\"), \"0\");\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-i\", \"xxx\"), \"1\");\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-zzz\", \"xxx\"), \"xxx\");\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-iii\", \"xxx\"), \"xxx\");\n \n     for (const bool def : {false, true}) {\n-        BOOST_CHECK(test_args.GetBoolArg(\"-a\", def)\n-                     && test_args.GetBoolArg(\"-b\", def)\n-                     && !test_args.GetBoolArg(\"-ccc\", def)\n-                     && !test_args.GetBoolArg(\"-d\", def)\n-                     && !test_args.GetBoolArg(\"-fff\", def)\n-                     && test_args.GetBoolArg(\"-ggg\", def)\n-                     && !test_args.GetBoolArg(\"-h\", def)\n-                     && test_args.GetBoolArg(\"-i\", def)\n-                     && test_args.GetBoolArg(\"-zzz\", def) == def\n-                     && test_args.GetBoolArg(\"-iii\", def) == def\n-                   );\n+        BOOST_CHECK(test_args.GetBoolArg(\"-a\", def));\n+        BOOST_CHECK(test_args.GetBoolArg(\"-b\", def));\n+        BOOST_CHECK(!test_args.GetBoolArg(\"-ccc\", def));\n+        BOOST_CHECK(!test_args.GetBoolArg(\"-d\", def));\n+        BOOST_CHECK(!test_args.GetBoolArg(\"-fff\", def));\n+        BOOST_CHECK(test_args.GetBoolArg(\"-ggg\", def));\n+        BOOST_CHECK(!test_args.GetBoolArg(\"-h\", def));\n+        BOOST_CHECK(test_args.GetBoolArg(\"-i\", def));\n+        BOOST_CHECK(test_args.GetBoolArg(\"-zzz\", def) == def);\n+        BOOST_CHECK(test_args.GetBoolArg(\"-iii\", def) == def);\n     }\n \n     BOOST_CHECK(test_args.GetArgs(\"-a\").size() == 1\n@@ -636,13 +631,12 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     test_args.SelectConfigNetwork(\"sec1\");\n \n     // same as original\n-    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n-                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n-                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n-                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n-                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n-                && test_args.GetArg(\"-iii\", \"xxx\") == \"xxx\"\n-               );\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-a\", \"xxx\"), \"\");\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-b\", \"xxx\"), \"1\");\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-fff\", \"xxx\"), \"0\");\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-ggg\", \"xxx\"), \"1\");\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-zzz\", \"xxx\"), \"xxx\");\n+    BOOST_CHECK_EQUAL(test_args.GetArg(\"-iii\", \"xxx\"), \"xxx\");\n     // d is overridden\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"eee\");\n     // section-specific setting\n@@ -657,14 +651,13 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     test_args.SelectConfigNetwork(\"sec2\");\n \n     // same as original\n-    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n-                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n-                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n-                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n-                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n-                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n-                && test_args.GetArg(\"-h\", \"xxx\") == \"0\"\n-               );\n+    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\");\n+    BOOST_CHECK(test_args.GetArg(\"-b\", \"xxx\") == \"1\");\n+    BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"e\");\n+    BOOST_CHECK(test_args.GetArg(\"-fff\", \"xxx\") == \"0\");\n+    BOOST_CHECK(test_args.GetArg(\"-ggg\", \"xxx\") == \"1\");\n+    BOOST_CHECK(test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\");\n+    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"0\");\n     // section-specific setting\n     BOOST_CHECK(test_args.GetArg(\"-iii\", \"xxx\") == \"2\");\n     // section takes priority for multiple values"
      }
    ]
  }
]