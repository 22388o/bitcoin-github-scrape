[
  {
    "sha": "a478f6d6cbce3dc37efb38e4146ddfc56e79b18c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDc4ZjZkNmNiY2UzZGMzN2VmYjM4ZTQxNDZkZGZjNTZlNzliMThj",
    "commit": {
      "author": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-12-27T20:08:25Z"
      },
      "committer": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-12-28T19:24:46Z"
      },
      "message": "test: Add test for rpcwhitelistdefault",
      "tree": {
        "sha": "05d6e4613a0677d99a3954df3da9c0c120afc8df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05d6e4613a0677d99a3954df3da9c0c120afc8df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a478f6d6cbce3dc37efb38e4146ddfc56e79b18c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE82XmVEpcmrEyk0LUL21BRcVfx8cFAl4HrAEACgkQL21BRcVf\nx8eknQ//QpPZB/kEfW6A16RS16171fqzZzib2mZxB1MyCSlsSOn/mz+3AsR4B9gn\nz5TwDjXikjzKiT26dTE/r6q2AZfTMakfOkDG8OmXZ3IRodOfutnhM/w4gB+/bVJ9\nnqrP1BGr6y4AKGBDjwCGbNfAyx+OzjLpBnNyPpUkbFqu7pFqnRHnOA9KUK9Ap6SP\nhbAeDI2gqeMxpDoV8np7N8AHOC+nVxXLO7bY/yM+rKvr2IixkFhWwvR7gH56V8R7\n9+KugRrX9GSaprqOdvNKTr0UIJcQulf8e5L1d7+hurwblJVdS+1L8IfNjbrn3KgW\nBGlnMMibzMpToHAKkqKpgK4DcpZqYn2aAUtGhL0GvzhucUgJNDuCOXc8Livo9DQD\nblY3unSMZIU2MNM8GuzssbC1C1RwfF9oRbNHPW7Yy6rc+lgNfmyzfmmGyYdxLxWU\nhPUL4v0AswPPE7r2ysDLOLiDzQI9sBgh2KNQkdu161aLIFbRYVZPL9+BI2zMl/5n\nA6qSD6pX9iXHULpCg4FmWbXdsVm5ywtNC9F7FhQszbqrqfQbKDSppih+IXMYmghk\nXRnaolAVaGN2YR9uJy7iStRinlkNpVEkRIALf/rLRl0tLeQqDDVa+IXEeQrwe1ji\nQz4MuQYSp5qr9iClZcoM1JG+tYbAuOCbvTruo2nfoblY6SCLKgI=\n=YOGH\n-----END PGP SIGNATURE-----",
        "payload": "tree 05d6e4613a0677d99a3954df3da9c0c120afc8df\nparent 1dbf3350c683f93d7fc9b861400724f6fd2b2f1d\nauthor Emil Engler <me@emilengler.com> 1577477305 +0100\ncommitter Emil Engler <me@emilengler.com> 1577561086 +0100\n\ntest: Add test for rpcwhitelistdefault\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a478f6d6cbce3dc37efb38e4146ddfc56e79b18c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a478f6d6cbce3dc37efb38e4146ddfc56e79b18c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a478f6d6cbce3dc37efb38e4146ddfc56e79b18c/comments",
    "author": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1dbf3350c683f93d7fc9b861400724f6fd2b2f1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1dbf3350c683f93d7fc9b861400724f6fd2b2f1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1dbf3350c683f93d7fc9b861400724f6fd2b2f1d"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 102,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fab325741357c648b6dff883b47f97dcd842a08f",
        "filename": "test/functional/rpc_whitelistdefault.py",
        "status": "added",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a478f6d6cbce3dc37efb38e4146ddfc56e79b18c/test/functional/rpc_whitelistdefault.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a478f6d6cbce3dc37efb38e4146ddfc56e79b18c/test/functional/rpc_whitelistdefault.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_whitelistdefault.py?ref=a478f6d6cbce3dc37efb38e4146ddfc56e79b18c",
        "patch": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+A test for rpcwhitelistdefault states.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    get_datadir_path,\n+    str_to_b64str\n+)\n+\n+import os\n+import http.client\n+import urllib.parse\n+\n+def rpccall(node, user, password, method):\n+    url = urllib.parse.urlparse(node.url)\n+    headers = {\"Authorization\": \"Basic \" + str_to_b64str('{}:{}'.format(user, password))}\n+    conn = http.client.HTTPConnection(url.hostname, url.port)\n+    conn.connect()\n+    conn.request('POST', '/', '{{\"method\": \"{}\"}}'.format(method), headers)\n+    resp = conn.getresponse()\n+    conn.close()\n+    return resp.code\n+\n+class RPCWhitelistDefaultTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 4\n+\n+    def setup_chain(self):\n+        super().setup_chain()\n+        \"\"\"\n+        node0 specs:\n+        * rpcwhitelistdefault=0\n+        * No Permissions defined\n+        Expected result: Any command for any user should work\n+        \"\"\"\n+        with open(os.path.join(get_datadir_path(self.options.tmpdir, 0), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+            f.write(\"rpcwhitelistdefault=0\\n\")\n+            f.write(\"rpcauth=user1:50358aa884c841648e0700b073c32b2e$b73e95fff0748cc0b517859d2ca47d9bac1aa78231f3e48fa9222b612bd2083e\\n\")\n+            f.write(\"rpcauth=user2:6e0499f40b6420da2d6a3baaec1a1268$4c03b56943444ad141e3a2d8389aa22b2ade5b09d6710d5299ade7b2902086f1\\n\")\n+        \"\"\"\n+        node1 specs:\n+        * rpcwhitelistdefault=0\n+        * Permissions (user1): getbestblockhash\n+        Expected result: Only getbestblockhash for user1 should work, user2 should execute anything\n+        \"\"\"\n+        with open(os.path.join(get_datadir_path(self.options.tmpdir, 1), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+            f.write(\"rpcwhitelistdefault=0\\n\")\n+            f.write(\"rpcauth=user1:50358aa884c841648e0700b073c32b2e$b73e95fff0748cc0b517859d2ca47d9bac1aa78231f3e48fa9222b612bd2083e\\n\")\n+            f.write(\"rpcauth=user2:6e0499f40b6420da2d6a3baaec1a1268$4c03b56943444ad141e3a2d8389aa22b2ade5b09d6710d5299ade7b2902086f1\\n\")\n+            f.write(\"rpcwhitelist=user1:getbestblockhash\\n\")\n+        \"\"\"\n+        node2 specs:\n+        * rpcwhitelistdefault=1\n+        * No Permissions defined\n+        Expected result: No user should be able to execute anything\n+        \"\"\"\n+        with open(os.path.join(get_datadir_path(self.options.tmpdir, 2), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+            f.write(\"rpcwhitelistdefault=1\\n\")\n+            f.write(\"rpcauth=user1:50358aa884c841648e0700b073c32b2e$b73e95fff0748cc0b517859d2ca47d9bac1aa78231f3e48fa9222b612bd2083e\\n\")\n+            f.write(\"rpcauth=user2:6e0499f40b6420da2d6a3baaec1a1268$4c03b56943444ad141e3a2d8389aa22b2ade5b09d6710d5299ade7b2902086f1\\n\")\n+            # We need to permit the __cookie__ user for the Bitcoin Test Framework\n+            f.write(\"rpcwhitelist=__cookie__:getblockcount,getwalletinfo,importprivkey,getblockchaininfo,submitblock,addnode,getpeerinfo,getbestblockhash,getrawmempool,syncwithvalidationinterfacequeue,stop\\n\")\n+        \"\"\"\n+        node3 specs:\n+        * rpcwhitelistdefault=1\n+        * Permissions (user1): getbestblockhash\n+        Expected result: user1 should do getbestblockhash and user2 nothing\n+        \"\"\"\n+        with open(os.path.join(get_datadir_path(self.options.tmpdir, 3), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+            f.write(\"rpcwhitelistdefault=1\\n\")\n+            f.write(\"rpcauth=user1:50358aa884c841648e0700b073c32b2e$b73e95fff0748cc0b517859d2ca47d9bac1aa78231f3e48fa9222b612bd2083e\\n\")\n+            f.write(\"rpcauth=user2:6e0499f40b6420da2d6a3baaec1a1268$4c03b56943444ad141e3a2d8389aa22b2ade5b09d6710d5299ade7b2902086f1\\n\")\n+            f.write(\"rpcwhitelist=user1:getbestblockhash\\n\")\n+            # We need to permit the __cookie__ user for the Bitcoin Test Framework\n+            f.write(\"rpcwhitelist=__cookie__:getblockcount,getwalletinfo,importprivkey,getblockchaininfo,submitblock,addnode,getpeerinfo,getbestblockhash,getrawmempool,syncwithvalidationinterfacequeue,stop\\n\")\n+\n+    def run_test(self):\n+        self.log.info(\"Testing rpcwhitelistdefault=0 with no specified permissions\")\n+        assert_equal(200, rpccall(self.nodes[0], \"user1\", \"12345\", \"getbestblockhash\"))\n+        assert_equal(200, rpccall(self.nodes[0], \"user2\", \"12345\", \"getbestblockhash\"))\n+        self.log.info(\"Testing rpcwhitelistdefault=0 with specified permissions\")\n+        assert_equal(200, rpccall(self.nodes[1], \"user1\", \"12345\", \"getbestblockhash\"))\n+        assert_equal(403, rpccall(self.nodes[1], \"user1\", \"12345\", \"getblockcount\"))\n+        assert_equal(200, rpccall(self.nodes[1], \"user2\", \"12345\", \"getblockcount\"))\n+        self.log.info(\"Testing rpcwhitelistdefault=1 with no specified permissions\")\n+        assert_equal(403, rpccall(self.nodes[2], \"user1\", \"12345\", \"getblockcount\"))\n+        assert_equal(403, rpccall(self.nodes[2], \"user2\", \"12345\", \"getblockcount\"))\n+        self.log.info(\"Testing rpcwhitelistdefault=1 with specified permissions\")\n+        assert_equal(200, rpccall(self.nodes[3], \"user1\", \"12345\", \"getbestblockhash\"))\n+        assert_equal(403, rpccall(self.nodes[3], \"user2\", \"12345\", \"getbestblockhash\"))\n+\n+if __name__ == \"__main__\":\n+    RPCWhitelistDefaultTest().main()\n+"
      },
      {
        "sha": "4f318f10d4378e6545dc8b710ebe55508edcd4c0",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a478f6d6cbce3dc37efb38e4146ddfc56e79b18c/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a478f6d6cbce3dc37efb38e4146ddfc56e79b18c/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=a478f6d6cbce3dc37efb38e4146ddfc56e79b18c",
        "patch": "@@ -137,6 +137,7 @@\n     'rpc_psbt.py',\n     'rpc_users.py',\n     'rpc_whitelist.py',\n+    'rpc_whitelistdefault.py',\n     'feature_proxy.py',\n     'rpc_signrawtransaction.py',\n     'wallet_groups.py',"
      }
    ]
  }
]