[
  {
    "sha": "32abc7854475cf2d896ec2590ee61af175be8e84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmFiYzc4NTQ0NzVjZjJkODk2ZWMyNTkwZWU2MWFmMTc1YmU4ZTg0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2011-05-31T00:23:02Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2011-06-10T14:52:12Z"
      },
      "message": "Make the fee error/dialog messages much clearer.",
      "tree": {
        "sha": "b001c2a6cb3267550b89ffbb33b52b1984089c04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b001c2a6cb3267550b89ffbb33b52b1984089c04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32abc7854475cf2d896ec2590ee61af175be8e84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32abc7854475cf2d896ec2590ee61af175be8e84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32abc7854475cf2d896ec2590ee61af175be8e84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32abc7854475cf2d896ec2590ee61af175be8e84/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "60152827e35102cd6faf450ba5400ed4364c2e62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60152827e35102cd6faf450ba5400ed4364c2e62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60152827e35102cd6faf450ba5400ed4364c2e62"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 31,
      "deletions": 16
    },
    "files": [
      {
        "sha": "85022458a71e3520606ba845f5cb6c16b51161a5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32abc7854475cf2d896ec2590ee61af175be8e84/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32abc7854475cf2d896ec2590ee61af175be8e84/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=32abc7854475cf2d896ec2590ee61af175be8e84",
        "patch": "@@ -3996,14 +3996,24 @@ string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAs\n     {\n         string strError;\n         if (nValue + nFeeRequired > GetBalance())\n-            strError = strprintf(_(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds  \"), FormatMoney(nFeeRequired).c_str());\n+        {\n+            unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtxNew, SER_NETWORK);\n+            int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n+            if (nPayFee == nFeeRequired)\n+                strError = strprintf(_(\"Based on your fee settings, this transaction requires a fee of at least %s, putting its total over your balance. You can change those settings in the Options dialog, or via the settxfee RPC command.\"), FormatMoney(nFeeRequired).c_str());\n+            else\n+                strError = strprintf(_(\"This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds, putting its total over your balance.\"), FormatMoney(nFeeRequired).c_str());\n+        }\n         else\n             strError = _(\"Error: Transaction creation failed  \");\n         printf(\"SendMoney() : %s\", strError.c_str());\n         return strError;\n     }\n \n-    if (fAskFee && !ThreadSafeAskFee(nFeeRequired, _(\"Sending...\"), NULL))\n+    unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtxNew, SER_NETWORK);\n+    int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n+\n+    if (fAskFee && !ThreadSafeAskFee(nFeeRequired, nPayFee, _(\"Sending...\"), NULL))\n         return \"ABORTED\";\n \n     if (!CommitTransaction(wtxNew, reservekey))\n@@ -4021,7 +4031,7 @@ string SendMoneyToBitcoinAddress(string strAddress, int64 nValue, CWalletTx& wtx\n     // Check amount\n     if (nValue <= 0)\n         return _(\"Invalid amount\");\n-    if (nValue + nTransactionFee > GetBalance())\n+    if (nValue > GetBalance())\n         return _(\"Insufficient funds\");\n \n     // Parse bitcoin address"
      },
      {
        "sha": "926a83ca7496213c94d325b76f8acf4812a221ac",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32abc7854475cf2d896ec2590ee61af175be8e84/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32abc7854475cf2d896ec2590ee61af175be8e84/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=32abc7854475cf2d896ec2590ee61af175be8e84",
        "patch": "@@ -47,7 +47,7 @@ inline int ThreadSafeMessageBox(const std::string& message, const std::string& c\n     return MyMessageBox(message, caption, style, parent, x, y);\n }\n \n-inline bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption, wxWindow* parent)\n+inline bool ThreadSafeAskFee(int64 nFeeRequired, int64 nPayFee, const std::string& strCaption, wxWindow* parent)\n {\n     return true;\n }"
      },
      {
        "sha": "0a0ac45208945ae551976cec1f5e82ebb5b3dcb3",
        "filename": "src/ui.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32abc7854475cf2d896ec2590ee61af175be8e84/src/ui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32abc7854475cf2d896ec2590ee61af175be8e84/src/ui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.cpp?ref=32abc7854475cf2d896ec2590ee61af175be8e84",
        "patch": "@@ -203,9 +203,9 @@ int ThreadSafeMessageBox(const string& message, const string& caption, int style\n #endif\n }\n \n-bool ThreadSafeAskFee(int64 nFeeRequired, const string& strCaption, wxWindow* parent)\n+bool ThreadSafeAskFee(int64 nFeeRequired, int64 nPayFee, const string& strCaption, wxWindow* parent)\n {\n-    if (nFeeRequired < MIN_TX_FEE || nFeeRequired <= nTransactionFee || fDaemon)\n+    if (nFeeRequired < MIN_TX_FEE || nFeeRequired <= nPayFee || fDaemon)\n         return true;\n     string strMessage = strprintf(\n         _(\"This transaction is over the size limit.  You can still send it for a fee of %s, \"\n@@ -1928,11 +1928,6 @@ void CSendDialog::OnButtonSend(wxCommandEvent& event)\n             wxMessageBox(_(\"Amount exceeds your balance  \"), _(\"Send Coins\"));\n             return;\n         }\n-        if (nValue + nTransactionFee > GetBalance())\n-        {\n-            wxMessageBox(string(_(\"Total exceeds your balance when the \")) + FormatMoney(nTransactionFee) + _(\" transaction fee is included  \"), _(\"Send Coins\"));\n-            return;\n-        }\n \n         // Parse bitcoin address\n         uint160 hash160;\n@@ -2164,7 +2159,7 @@ void SendingDialogStartTransfer(void* parg)\n void CSendingDialog::StartTransfer()\n {\n     // Make sure we have enough money\n-    if (nPrice + nTransactionFee > GetBalance())\n+    if (nPrice > GetBalance())\n     {\n         Error(_(\"Insufficient funds\"));\n         return;\n@@ -2235,7 +2230,7 @@ void CSendingDialog::OnReply2(CDataStream& vRecv)\n         // Pay\n         if (!Status(_(\"Creating transaction...\")))\n             return;\n-        if (nPrice + nTransactionFee > GetBalance())\n+        if (nPrice > GetBalance())\n         {\n             Error(_(\"Insufficient funds\"));\n             return;\n@@ -2245,14 +2240,24 @@ void CSendingDialog::OnReply2(CDataStream& vRecv)\n         if (!CreateTransaction(scriptPubKey, nPrice, wtx, reservekey, nFeeRequired))\n         {\n             if (nPrice + nFeeRequired > GetBalance())\n-                Error(strprintf(_(\"This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds\"), FormatMoney(nFeeRequired).c_str()));\n+            {\n+                unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtx, SER_NETWORK);\n+                int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n+                if (nPayFee == nFeeRequired)\n+                    Error(strprintf(_(\"Based on your fee settings, this transaction requires a fee of at least %s, putting its total over your balance. You can change those settings in the Options dialog, or via the settxfee RPC command.\"), FormatMoney(nFeeRequired).c_str()));\n+                else\n+                    Error(strprintf(_(\"This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds, putting its total over your balance.\"), FormatMoney(nFeeRequired).c_str()));\n+            }\n             else\n                 Error(_(\"Transaction creation failed\"));\n             return;\n         }\n \n+        unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtx, SER_NETWORK);\n+        int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n+\n         // Transaction fee\n-        if (!ThreadSafeAskFee(nFeeRequired, _(\"Sending...\"), this))\n+        if (!ThreadSafeAskFee(nFeeRequired, nPayFee, _(\"Sending...\"), this))\n         {\n             Error(_(\"Transaction aborted\"));\n             return;"
      },
      {
        "sha": "a1702f7602b05c5863ce50873848edaccbcf5427",
        "filename": "src/ui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32abc7854475cf2d896ec2590ee61af175be8e84/src/ui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32abc7854475cf2d896ec2590ee61af175be8e84/src/ui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.h?ref=32abc7854475cf2d896ec2590ee61af175be8e84",
        "patch": "@@ -15,7 +15,7 @@ extern wxLocale g_locale;\n void HandleCtrlA(wxKeyEvent& event);\n void UIThreadCall(boost::function0<void>);\n int ThreadSafeMessageBox(const std::string& message, const std::string& caption=\"Message\", int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1);\n-bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption, wxWindow* parent);\n+bool ThreadSafeAskFee(int64 nFeeRequired, int64 nPayFee, const std::string& strCaption, wxWindow* parent);\n void CalledSetStatusBar(const std::string& strText, int nField);\n void MainFrameRepaint();\n void CreateMainWindow();"
      }
    ]
  },
  {
    "sha": "e76d9ebabc1bf023b16aafc897cf360eeffb0dae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzZkOWViYWJjMWJmMDIzYjE2YWFmYzg5N2NmMzYwZWVmZmIwZGFl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2011-05-31T18:15:33Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2011-06-10T14:52:12Z"
      },
      "message": "Update fee policy to be much more customizable.\n\nThis changes nTransactionFee into nBaseTransactionFee and\nnPerKBTransactionFee where nBaseTransactionFee is applied to each\ntransaction once and nPerKBTransactionFee is applied per KB to\neach transaction.\n\nAlso, fOverrideTransactionFee has been added to allow the ignoring\nof GetMinFee() when creating transactions.",
      "tree": {
        "sha": "588478117498143a342dae573702f7aba0cc2f61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/588478117498143a342dae573702f7aba0cc2f61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e76d9ebabc1bf023b16aafc897cf360eeffb0dae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e76d9ebabc1bf023b16aafc897cf360eeffb0dae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e76d9ebabc1bf023b16aafc897cf360eeffb0dae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "32abc7854475cf2d896ec2590ee61af175be8e84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32abc7854475cf2d896ec2590ee61af175be8e84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32abc7854475cf2d896ec2590ee61af175be8e84"
      }
    ],
    "stats": {
      "total": 1690,
      "additions": 1066,
      "deletions": 624
    },
    "files": [
      {
        "sha": "b98a993714da7d5b2ccab09ac930c228ac46a8dd",
        "filename": "share/uiproject.fbp",
        "status": "modified",
        "additions": 746,
        "deletions": 487,
        "changes": 1233,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/share/uiproject.fbp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/share/uiproject.fbp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/uiproject.fbp?ref=e76d9ebabc1bf023b16aafc897cf360eeffb0dae"
      },
      {
        "sha": "2f7ce73a1df2db78cad4cf57193afd55cf710056",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 11,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=e76d9ebabc1bf023b16aafc897cf360eeffb0dae",
        "patch": "@@ -670,6 +670,11 @@ bool CWalletDB::LoadWallet()\n     fMinimizeOnClose = false;\n #endif\n \n+    int64 nOldTransactionFee;\n+    bool fOldTransactionFeeSet = false;\n+    bool fBaseTransactionFeeSet = false;\n+    bool fPerKBTransactionFeeSet = false;\n+\n     //// todo: shouldn't we catch exceptions and try to recover and continue?\n     CRITICAL_BLOCK(cs_mapWallet)\n     CRITICAL_BLOCK(cs_mapKeys)\n@@ -783,28 +788,52 @@ bool CWalletDB::LoadWallet()\n \n                 // Options\n #ifndef GUI\n-                if (strKey == \"fGenerateBitcoins\")  ssValue >> fGenerateBitcoins;\n+                if (strKey == \"fGenerateBitcoins\")       ssValue >> fGenerateBitcoins;\n #endif\n-                if (strKey == \"nTransactionFee\")    ssValue >> nTransactionFee;\n-                if (strKey == \"addrIncoming\")       ssValue >> addrIncoming;\n-                if (strKey == \"fLimitProcessors\")   ssValue >> fLimitProcessors;\n-                if (strKey == \"nLimitProcessors\")   ssValue >> nLimitProcessors;\n-                if (strKey == \"fMinimizeToTray\")    ssValue >> fMinimizeToTray;\n-                if (strKey == \"fMinimizeOnClose\")   ssValue >> fMinimizeOnClose;\n-                if (strKey == \"fUseProxy\")          ssValue >> fUseProxy;\n-                if (strKey == \"addrProxy\")          ssValue >> addrProxy;\n-                if (fHaveUPnP && strKey == \"fUseUPnP\")           ssValue >> fUseUPnP;\n+                if (strKey == \"fOverrideTransactionFee\") ssValue >> fOverrideTransactionFee;\n+                if (strKey == \"addrIncoming\")            ssValue >> addrIncoming;\n+                if (strKey == \"fLimitProcessors\")        ssValue >> fLimitProcessors;\n+                if (strKey == \"nLimitProcessors\")        ssValue >> nLimitProcessors;\n+                if (strKey == \"fMinimizeToTray\")         ssValue >> fMinimizeToTray;\n+                if (strKey == \"fMinimizeOnClose\")        ssValue >> fMinimizeOnClose;\n+                if (strKey == \"fUseProxy\")               ssValue >> fUseProxy;\n+                if (strKey == \"addrProxy\")               ssValue >> addrProxy;\n+                if (fHaveUPnP && strKey == \"fUseUPnP\")   ssValue >> fUseUPnP;\n+                if (strKey == \"nTransactionFee\")\n+                {\n+                    ssValue >> nOldTransactionFee;\n+                    fOldTransactionFeeSet = true;\n+                }\n+                if (strKey == \"nBaseTransactionFee\")\n+                {\n+                    ssValue >> nBaseTransactionFee;\n+                    fBaseTransactionFeeSet = true;\n+                }\n+                if (strKey == \"nPerKBTransactionFee\")\n+                {\n+                    ssValue >> nPerKBTransactionFee;\n+                    fPerKBTransactionFeeSet = true;\n+                }\n             }\n         }\n         pcursor->close();\n     }\n \n+    if (fOldTransactionFeeSet && !fPerKBTransactionFeeSet)\n+        nPerKBTransactionFee = nOldTransactionFee;\n+    if (fOldTransactionFeeSet && !fBaseTransactionFeeSet)\n+        nBaseTransactionFee = nOldTransactionFee;\n+\n     BOOST_FOREACH(uint256 hash, vWalletUpgrade)\n         WriteTx(hash, mapWallet[hash]);\n \n     printf(\"nFileVersion = %d\\n\", nFileVersion);\n     printf(\"fGenerateBitcoins = %d\\n\", fGenerateBitcoins);\n-    printf(\"nTransactionFee = %\"PRI64d\"\\n\", nTransactionFee);\n+    if (fOldTransactionFeeSet)\n+        printf(\"nTransactionFee = %\"PRI64d\"\\n\", nOldTransactionFee);\n+    printf(\"nBaseTransactionFee = %\"PRI64d\"\\n\", nBaseTransactionFee);\n+    printf(\"nPerKBTransactionFee = %\"PRI64d\"\\n\", nPerKBTransactionFee);\n+    printf(\"fOverrideTransactionFee = %d\\n\", fOverrideTransactionFee);\n     printf(\"addrIncoming = %s\\n\", addrIncoming.ToString().c_str());\n     printf(\"fMinimizeToTray = %d\\n\", fMinimizeToTray);\n     printf(\"fMinimizeOnClose = %d\\n\", fMinimizeOnClose);"
      },
      {
        "sha": "9cb6d320fce436b00599750eb6eb1bea18d126ec",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 27,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e76d9ebabc1bf023b16aafc897cf360eeffb0dae",
        "patch": "@@ -146,39 +146,41 @@ bool AppInit2(int argc, char* argv[])\n             \"  bitcoin [options] help              \\t\\t  \" + _(\"List commands\\n\") +\n             \"  bitcoin [options] help <command>    \\t\\t  \" + _(\"Get help for a command\\n\") +\n           _(\"Options:\\n\") +\n-            \"  -conf=<file>     \\t\\t  \" + _(\"Specify configuration file (default: bitcoin.conf)\\n\") +\n-            \"  -pid=<file>      \\t\\t  \" + _(\"Specify pid file (default: bitcoind.pid)\\n\") +\n-            \"  -gen             \\t\\t  \" + _(\"Generate coins\\n\") +\n-            \"  -gen=0           \\t\\t  \" + _(\"Don't generate coins\\n\") +\n-            \"  -min             \\t\\t  \" + _(\"Start minimized\\n\") +\n-            \"  -datadir=<dir>   \\t\\t  \" + _(\"Specify data directory\\n\") +\n-            \"  -proxy=<ip:port> \\t  \"   + _(\"Connect through socks4 proxy\\n\") +\n-            \"  -dns             \\t  \"   + _(\"Allow DNS lookups for addnode and connect\\n\") +\n-            \"  -addnode=<ip>    \\t  \"   + _(\"Add a node to connect to\\n\") +\n-            \"  -connect=<ip>    \\t\\t  \" + _(\"Connect only to the specified node\\n\") +\n-            \"  -nolisten        \\t  \"   + _(\"Don't accept connections from outside\\n\") +\n+            \"  -conf=<file>         \\t\\t  \" + _(\"Specify configuration file (default: bitcoin.conf)\\n\") +\n+            \"  -pid=<file>          \\t\\t  \" + _(\"Specify pid file (default: bitcoind.pid)\\n\") +\n+            \"  -gen                 \\t\\t  \" + _(\"Generate coins\\n\") +\n+            \"  -gen=0               \\t\\t  \" + _(\"Don't generate coins\\n\") +\n+            \"  -min                 \\t\\t  \" + _(\"Start minimized\\n\") +\n+            \"  -datadir=<dir>       \\t\\t  \" + _(\"Specify data directory\\n\") +\n+            \"  -proxy=<ip:port>     \\t  \"   + _(\"Connect through socks4 proxy\\n\") +\n+            \"  -dns                 \\t  \"   + _(\"Allow DNS lookups for addnode and connect\\n\") +\n+            \"  -addnode=<ip>        \\t  \"   + _(\"Add a node to connect to\\n\") +\n+            \"  -connect=<ip>        \\t\\t  \" + _(\"Connect only to the specified node\\n\") +\n+            \"  -nolisten            \\t  \"   + _(\"Don't accept connections from outside\\n\") +\n #ifdef USE_UPNP\n #if USE_UPNP\n-            \"  -noupnp          \\t  \"   + _(\"Don't attempt to use UPnP to map the listening port\\n\") +\n+            \"  -noupnp              \\t  \"   + _(\"Don't attempt to use UPnP to map the listening port\\n\") +\n #else\n-            \"  -upnp            \\t  \"   + _(\"Attempt to use UPnP to map the listening port\\n\") +\n+            \"  -upnp                \\t  \"   + _(\"Attempt to use UPnP to map the listening port\\n\") +\n #endif\n #endif\n-            \"  -paytxfee=<amt>  \\t  \"   + _(\"Fee per KB to add to transactions you send\\n\") +\n+            \"  -paybasetxfee=<amt>  \\t  \"   + _(\"Fee to add to each transactions you send\\n\") +\n+            \"  -payperkbtxfee=<amt> \\t  \"   + _(\"Fee per KB (after the first) to add to transactions you send\\n\") +\n+            \"  -overridesanetxfee   \\t  \"   + _(\"Ignore the suggested transaction fees and send your own\\n\") +\n #ifdef GUI\n-            \"  -server          \\t\\t  \" + _(\"Accept command line and JSON-RPC commands\\n\") +\n+            \"  -server              \\t\\t  \" + _(\"Accept command line and JSON-RPC commands\\n\") +\n #endif\n #ifndef __WXMSW__\n-            \"  -daemon          \\t\\t  \" + _(\"Run in the background as a daemon and accept commands\\n\") +\n+            \"  -daemon              \\t\\t  \" + _(\"Run in the background as a daemon and accept commands\\n\") +\n #endif\n-            \"  -testnet         \\t\\t  \" + _(\"Use the test network\\n\") +\n-            \"  -rpcuser=<user>  \\t  \"   + _(\"Username for JSON-RPC connections\\n\") +\n-            \"  -rpcpassword=<pw>\\t  \"   + _(\"Password for JSON-RPC connections\\n\") +\n-            \"  -rpcport=<port>  \\t\\t  \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332)\\n\") +\n-            \"  -rpcallowip=<ip> \\t\\t  \" + _(\"Allow JSON-RPC connections from specified IP address\\n\") +\n-            \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\\n\") +\n-            \"  -keypool=<n>     \\t  \"   + _(\"Set key pool size to <n> (default: 100)\\n\") +\n-            \"  -rescan          \\t  \"   + _(\"Rescan the block chain for missing wallet transactions\\n\");\n+            \"  -testnet             \\t\\t  \" + _(\"Use the test network\\n\") +\n+            \"  -rpcuser=<user>      \\t  \"   + _(\"Username for JSON-RPC connections\\n\") +\n+            \"  -rpcpassword=<pw>    \\t  \"   + _(\"Password for JSON-RPC connections\\n\") +\n+            \"  -rpcport=<port>      \\t\\t  \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332)\\n\") +\n+            \"  -rpcallowip=<ip>     \\t\\t  \" + _(\"Allow JSON-RPC connections from specified IP address\\n\") +\n+            \"  -rpcconnect=<ip>     \\t  \"   + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\\n\") +\n+            \"  -keypool=<n>         \\t  \"   + _(\"Set key pool size to <n> (default: 100)\\n\") +\n+            \"  -rescan              \\t  \"   + _(\"Rescan the block chain for missing wallet transactions\\n\");\n \n #ifdef USE_SSL\n         strUsage += string() +\n@@ -465,17 +467,54 @@ bool AppInit2(int argc, char* argv[])\n     if (mapArgs.count(\"-dnsseed\"))\n         DNSAddressSeed();\n \n-    if (mapArgs.count(\"-paytxfee\"))\n+    if (mapArgs.count(\"-paybasetxfee\"))\n     {\n-        if (!ParseMoney(mapArgs[\"-paytxfee\"], nTransactionFee))\n+        if (!ParseMoney(mapArgs[\"-paybasetxfee\"], nBaseTransactionFee))\n+        {\n+            wxMessageBox(_(\"Invalid amount for -paybasetxfee=<amount>\"), \"Bitcoin\");\n+            return false;\n+        }\n+        if (nBaseTransactionFee > 0.25 * COIN)\n+            wxMessageBox(_(\"Warning: -paybasetxfee is set very high.  This is the transaction fee you will pay if you send a transaction.\"), \"Bitcoin\", wxOK | wxICON_EXCLAMATION);\n+    }\n+    else if (mapArgs.count(\"-paytxfee\")) // For backward compatibility\n+    {\n+        if (!ParseMoney(mapArgs[\"-paytxfee\"], nBaseTransactionFee))\n         {\n             wxMessageBox(_(\"Invalid amount for -paytxfee=<amount>\"), \"Bitcoin\");\n             return false;\n         }\n-        if (nTransactionFee > 0.25 * COIN)\n+        if (nBaseTransactionFee > 0.25 * COIN)\n             wxMessageBox(_(\"Warning: -paytxfee is set very high.  This is the transaction fee you will pay if you send a transaction.\"), \"Bitcoin\", wxOK | wxICON_EXCLAMATION);\n     }\n \n+    if (mapArgs.count(\"-payperkbtxfee\"))\n+    {\n+        if (!ParseMoney(mapArgs[\"-payperkbtxfee\"], nPerKBTransactionFee))\n+        {\n+            wxMessageBox(_(\"Invalid amount for -payperkbtxfee=<amount>\"), \"Bitcoin\");\n+            return false;\n+        }\n+        if (nPerKBTransactionFee > 0.25 * COIN)\n+            wxMessageBox(_(\"Warning: -payperkbtxfee is set very high.  This is the transaction fee you will pay per KB if you send a transaction.\"), \"Bitcoin\", wxOK | wxICON_EXCLAMATION);\n+    }\n+    else if (mapArgs.count(\"-paytxfee\")) // For backward compatibility\n+    {\n+        if (!ParseMoney(mapArgs[\"-paytxfee\"], nPerKBTransactionFee))\n+        {\n+            wxMessageBox(_(\"Invalid amount for -paytxfee=<amount>\"), \"Bitcoin\");\n+            return false;\n+        }\n+        if (nPerKBTransactionFee > 0.25 * COIN)\n+            wxMessageBox(_(\"Warning: -paytxfee is set very high.  This is the transaction fee you will pay if you send a transaction.\"), \"Bitcoin\", wxOK | wxICON_EXCLAMATION);\n+    }\n+\n+    if (mapArgs.count(\"-overridesanetxfee\"))\n+    {\n+        fOverrideTransactionFee = true;\n+        wxMessageBox(_(\"Warning: -overridesanetxfee is set, thus it is likely that your transactions will not be relayed through the network and will never be confirmed.\"), \"Bitcoin\", wxOK | wxICON_EXCLAMATION);\n+    }\n+\n     if (fHaveUPnP)\n     {\n #if USE_UPNP"
      },
      {
        "sha": "8a269d31c5dc4dc0301b1a46b930733093bd0ae0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 14,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e76d9ebabc1bf023b16aafc897cf360eeffb0dae",
        "patch": "@@ -57,7 +57,9 @@ int64 nHPSTimerStart;\n \n // Settings\n int fGenerateBitcoins = false;\n-int64 nTransactionFee = 0;\n+int64 nBaseTransactionFee = 0;\n+int64 nPerKBTransactionFee = 0;\n+int fOverrideTransactionFee = false;\n CAddress addrIncoming;\n int fLimitProcessors = false;\n int nLimitProcessors = 1;\n@@ -652,7 +654,7 @@ bool CTransaction::CheckTransaction() const\n     return true;\n }\n \n-bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMissingInputs)\n+bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMissingInputs, bool fCheckFee)\n {\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n@@ -731,13 +733,13 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n         }\n \n         // Don't accept it if it can't get into a block\n-        if (nFees < GetMinFee(1000, true, true))\n+        if (fCheckFee && nFees < GetMinFee(1000, true, true))\n             return error(\"AcceptToMemoryPool() : not enough fees\");\n \n         // Continuously rate-limit free transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n         // be annoying or make other's transactions take longer to confirm.\n-        if (nFees < MIN_RELAY_TX_FEE)\n+        if (fCheckFee && nFees < MIN_RELAY_TX_FEE)\n         {\n             static CCriticalSection cs;\n             static double dFreeCount;\n@@ -849,17 +851,17 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs)\n+bool CMerkleTx::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool fCheckFee)\n {\n     if (fClient)\n     {\n         if (!IsInMainChain() && !ClientConnectInputs())\n             return false;\n-        return CTransaction::AcceptToMemoryPool(txdb, false);\n+        return CTransaction::AcceptToMemoryPool(txdb, false, (bool*)NULL, fCheckFee);\n     }\n     else\n     {\n-        return CTransaction::AcceptToMemoryPool(txdb, fCheckInputs);\n+        return CTransaction::AcceptToMemoryPool(txdb, fCheckInputs, (bool*)NULL, fCheckFee);\n     }\n }\n \n@@ -3830,7 +3832,7 @@ bool CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx&\n         CTxDB txdb(\"r\");\n         CRITICAL_BLOCK(cs_mapWallet)\n         {\n-            nFeeRet = nTransactionFee;\n+            nFeeRet = nBaseTransactionFee;\n             loop\n             {\n                 wtxNew.vin.clear();\n@@ -3909,9 +3911,13 @@ bool CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx&\n                 dPriority /= nBytes;\n \n                 // Check that enough fee is included\n-                int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n-                bool fAllowFree = CTransaction::AllowFree(dPriority);\n-                int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree);\n+                int64 nPayFee = nBaseTransactionFee + nPerKBTransactionFee * ((int64)nBytes / 1000);\n+                int64 nMinFee = 0;\n+                if (!fOverrideTransactionFee)\n+                {\n+                    bool fAllowFree = CTransaction::AllowFree(dPriority);\n+                    int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree);\n+                }\n                 if (nFeeRet < max(nPayFee, nMinFee))\n                 {\n                     nFeeRet = max(nPayFee, nMinFee);\n@@ -3972,7 +3978,8 @@ bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n             mapRequestCount[wtxNew.GetHash()] = 0;\n \n         // Broadcast\n-        if (!wtxNew.AcceptToMemoryPool())\n+        CTxDB txdb(\"r\");\n+        if (!wtxNew.AcceptToMemoryPool(txdb, true, !fOverrideTransactionFee))\n         {\n             // This must not fail. The transaction has already been signed and recorded.\n             printf(\"CommitTransaction() : Error: Transaction not valid\");\n@@ -3998,7 +4005,7 @@ string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAs\n         if (nValue + nFeeRequired > GetBalance())\n         {\n             unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtxNew, SER_NETWORK);\n-            int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n+            int64 nPayFee = nBaseTransactionFee + nPerKBTransactionFee * ((int64)nBytes / 1000);\n             if (nPayFee == nFeeRequired)\n                 strError = strprintf(_(\"Based on your fee settings, this transaction requires a fee of at least %s, putting its total over your balance. You can change those settings in the Options dialog, or via the settxfee RPC command.\"), FormatMoney(nFeeRequired).c_str());\n             else\n@@ -4011,7 +4018,7 @@ string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAs\n     }\n \n     unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtxNew, SER_NETWORK);\n-    int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n+    int64 nPayFee = nBaseTransactionFee + nPerKBTransactionFee * ((int64)nBytes / 1000);\n \n     if (fAskFee && !ThreadSafeAskFee(nFeeRequired, nPayFee, _(\"Sending...\"), NULL))\n         return \"ABORTED\";"
      },
      {
        "sha": "e3c65fdb8c3581d37d157537b184a205bed6be51",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e76d9ebabc1bf023b16aafc897cf360eeffb0dae",
        "patch": "@@ -66,7 +66,9 @@ extern int64 nHPSTimerStart;\n \n // Settings\n extern int fGenerateBitcoins;\n-extern int64 nTransactionFee;\n+extern int64 nBaseTransactionFee;\n+extern int64 nPerKBTransactionFee;\n+extern int fOverrideTransactionFee;\n extern CAddress addrIncoming;\n extern int fLimitProcessors;\n extern int nLimitProcessors;\n@@ -711,11 +713,11 @@ class CTransaction\n                        CBlockIndex* pindexBlock, int64& nFees, bool fBlock, bool fMiner, int64 nMinFee=0);\n     bool ClientConnectInputs();\n     bool CheckTransaction() const;\n-    bool AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs=true, bool* pfMissingInputs=NULL);\n-    bool AcceptToMemoryPool(bool fCheckInputs=true, bool* pfMissingInputs=NULL)\n+    bool AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs=true, bool* pfMissingInputs=NULL, bool fCheckFee = true);\n+    bool AcceptToMemoryPool(bool fCheckInputs=true, bool* pfMissingInputs=NULL, bool fCheckFee = true)\n     {\n         CTxDB txdb(\"r\");\n-        return AcceptToMemoryPool(txdb, fCheckInputs, pfMissingInputs);\n+        return AcceptToMemoryPool(txdb, fCheckInputs, pfMissingInputs, fCheckFee);\n     }\n protected:\n     bool AddToMemoryPoolUnchecked();\n@@ -774,7 +776,7 @@ class CMerkleTx : public CTransaction\n     int GetDepthInMainChain() const { int nHeight; return GetDepthInMainChain(nHeight); }\n     bool IsInMainChain() const { return GetDepthInMainChain() > 0; }\n     int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs=true);\n+    bool AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs=true, bool fCheckFee = true);\n     bool AcceptToMemoryPool() { CTxDB txdb(\"r\"); return AcceptToMemoryPool(txdb); }\n };\n "
      },
      {
        "sha": "52741057b987f656deb71ac79addab8840f73687",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 18,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=e76d9ebabc1bf023b16aafc897cf360eeffb0dae",
        "patch": "@@ -292,19 +292,21 @@ Value getinfo(const Array& params, bool fHelp)\n             \"Returns an object containing various state info.\");\n \n     Object obj;\n-    obj.push_back(Pair(\"version\",       (int)VERSION));\n-    obj.push_back(Pair(\"balance\",       ValueFromAmount(GetBalance())));\n-    obj.push_back(Pair(\"blocks\",        (int)nBestHeight));\n-    obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n-    obj.push_back(Pair(\"proxy\",         (fUseProxy ? addrProxy.ToStringIPPort() : string())));\n-    obj.push_back(Pair(\"generate\",      (bool)fGenerateBitcoins));\n-    obj.push_back(Pair(\"genproclimit\",  (int)(fLimitProcessors ? nLimitProcessors : -1)));\n-    obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n-    obj.push_back(Pair(\"hashespersec\",  gethashespersec(params, false)));\n-    obj.push_back(Pair(\"testnet\",       fTestNet));\n-    obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)GetOldestKeyPoolTime()));\n-    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n-    obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n+    obj.push_back(Pair(\"version\",           (int)VERSION));\n+    obj.push_back(Pair(\"balance\",           ValueFromAmount(GetBalance())));\n+    obj.push_back(Pair(\"blocks\",            (int)nBestHeight));\n+    obj.push_back(Pair(\"connections\",       (int)vNodes.size()));\n+    obj.push_back(Pair(\"proxy\",             (fUseProxy ? addrProxy.ToStringIPPort() : string())));\n+    obj.push_back(Pair(\"generate\",          (bool)fGenerateBitcoins));\n+    obj.push_back(Pair(\"genproclimit\",      (int)(fLimitProcessors ? nLimitProcessors : -1)));\n+    obj.push_back(Pair(\"difficulty\",        (double)GetDifficulty()));\n+    obj.push_back(Pair(\"hashespersec\",      gethashespersec(params, false)));\n+    obj.push_back(Pair(\"testnet\",           fTestNet));\n+    obj.push_back(Pair(\"keypoololdest\",     (boost::int64_t)GetOldestKeyPoolTime()));\n+    obj.push_back(Pair(\"paybasetxfee\",      ValueFromAmount(nBaseTransactionFee)));\n+    obj.push_back(Pair(\"payperkbtxfee\",     ValueFromAmount(nPerKBTransactionFee)));\n+    obj.push_back(Pair(\"overridesanetxfee\", fOverrideTransactionFee));\n+    obj.push_back(Pair(\"errors\",            GetWarnings(\"statusbar\")));\n     return obj;\n }\n \n@@ -481,22 +483,64 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value settxfee(const Array& params, bool fHelp)\n+Value setbasetxfee(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error(\n-            \"settxfee <amount>\\n\"\n+            \"setbasetxfee <amount>\\n\"\n             \"<amount> is a real and is rounded to the nearest 0.00000001\");\n \n     // Amount\n     int64 nAmount = 0;\n     if (params[0].get_real() != 0.0)\n         nAmount = AmountFromValue(params[0]);        // rejects 0.0 amounts\n \n-    nTransactionFee = nAmount;\n+    CWalletDB walletdb;\n+    if (nBaseTransactionFee != nAmount)\n+        walletdb.WriteSetting(\"nBaseTransactionFee\", nAmount);\n+\n+    nBaseTransactionFee = nAmount;\n+\n     return true;\n }\n \n+Value setperkbtxfee(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+        throw runtime_error(\n+            \"setperkbtxfee <amount>\\n\"\n+            \"<amount> is a real and is rounded to the nearest 0.00000001\");\n+\n+    // Amount\n+    int64 nAmount = 0;\n+    if (params[0].get_real() != 0.0)\n+        nAmount = AmountFromValue(params[0]);        // rejects 0.0 amounts\n+\n+    CWalletDB walletdb;\n+    if (nPerKBTransactionFee != nAmount)\n+        walletdb.WriteSetting(\"nPerKBTransactionFee\", nAmount);\n+\n+    nPerKBTransactionFee = nAmount;\n+    return true;\n+}\n+\n+Value setoverridesanetxfee(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+        throw runtime_error(\n+            \"setoverridesanetxfee <value>\\n\"\n+            \"<value> is true/false to override the default transaction fees\");\n+\n+    bool fNewOverrideTransactionFee = params[0].get_bool();\n+\n+    CWalletDB walletdb;\n+    if (fOverrideTransactionFee != fNewOverrideTransactionFee)\n+        walletdb.WriteSetting(\"fOverrideTransactionFee\", fNewOverrideTransactionFee);\n+\n+    fOverrideTransactionFee = fNewOverrideTransactionFee;\n+    return fOverrideTransactionFee;\n+}\n+\n Value sendtoaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 4)\n@@ -1458,7 +1502,9 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"listtransactions\",      &listtransactions),\n     make_pair(\"getwork\",               &getwork),\n     make_pair(\"listaccounts\",          &listaccounts),\n-    make_pair(\"settxfee\",              &settxfee),\n+    make_pair(\"setbasetxfee\",          &setbasetxfee),\n+    make_pair(\"setperkbtxfee\",         &setperkbtxfee),\n+    make_pair(\"setoverridesanetxfee\",  &setoverridesanetxfee),\n };\n map<string, rpcfn_type> mapCallTable(pCallTable, pCallTable + sizeof(pCallTable)/sizeof(pCallTable[0]));\n \n@@ -2092,7 +2138,9 @@ int CommandLineRPC(int argc, char *argv[])\n         if (strMethod == \"setgenerate\"            && n > 0) ConvertTo<bool>(params[0]);\n         if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n         if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n-        if (strMethod == \"settxfee\"               && n > 0) ConvertTo<double>(params[0]);\n+        if (strMethod == \"setbasetxfee\"           && n > 0) ConvertTo<double>(params[0]);\n+        if (strMethod == \"setperkbtxfee\"          && n > 0) ConvertTo<double>(params[0]);\n+        if (strMethod == \"setoverridesanetxfee\"   && n > 0) ConvertTo<bool>(params[0]);\n         if (strMethod == \"getamountreceived\"      && n > 1) ConvertTo<boost::int64_t>(params[1]); // deprecated\n         if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n         if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);"
      },
      {
        "sha": "9e91c737aa41897be395f58b5630e51b900c9da6",
        "filename": "src/ui.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 12,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/ui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/ui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.cpp?ref=e76d9ebabc1bf023b16aafc897cf360eeffb0dae",
        "patch": "@@ -1639,7 +1639,7 @@ COptionsDialog::COptionsDialog(wxWindow* parent) : COptionsDialogBase(parent)\n {\n     // Set up list box of page choices\n     m_listBox->Append(_(\"Main\"));\n-    //m_listBox->Append(_(\"Test 2\"));\n+    m_listBox->Append(_(\"Transaction Fees\"));\n     m_listBox->SetSelection(0);\n     SelectPage(0);\n #ifndef __WXMSW__\n@@ -1663,7 +1663,9 @@ COptionsDialog::COptionsDialog(wxWindow* parent) : COptionsDialogBase(parent)\n #endif\n \n     // Init values\n-    m_textCtrlTransactionFee->SetValue(FormatMoney(nTransactionFee));\n+    m_textCtrlBaseTransactionFee->SetValue(FormatMoney(nBaseTransactionFee));\n+    m_textCtrlPerKBTransactionFee->SetValue(FormatMoney(nPerKBTransactionFee));\n+    m_checkBoxOverrideTransactionFee->SetValue(fOverrideTransactionFee);\n     m_checkBoxStartOnSystemStartup->SetValue(fTmpStartOnSystemStartup = GetStartOnSystemStartup());\n     m_checkBoxMinimizeToTray->SetValue(fMinimizeToTray);\n     m_checkBoxMinimizeOnClose->SetValue(fMinimizeOnClose);\n@@ -1685,7 +1687,7 @@ COptionsDialog::COptionsDialog(wxWindow* parent) : COptionsDialogBase(parent)\n void COptionsDialog::SelectPage(int nPage)\n {\n     m_panelMain->Show(nPage == 0);\n-    m_panelTest2->Show(nPage == 1);\n+    m_panelFeeOptions->Show(nPage == 1);\n \n     m_scrolledWindow->Layout();\n     m_scrolledWindow->SetScrollbars(0, 0, 0, 0, 0, 0);\n@@ -1696,12 +1698,20 @@ void COptionsDialog::OnListBox(wxCommandEvent& event)\n     SelectPage(event.GetSelection());\n }\n \n-void COptionsDialog::OnKillFocusTransactionFee(wxFocusEvent& event)\n+void COptionsDialog::OnKillFocusBaseTransactionFee(wxFocusEvent& event)\n {\n     event.Skip();\n-    int64 nTmp = nTransactionFee;\n-    ParseMoney(m_textCtrlTransactionFee->GetValue(), nTmp);\n-    m_textCtrlTransactionFee->SetValue(FormatMoney(nTmp));\n+    int64 nTmp = nBaseTransactionFee;\n+    ParseMoney(m_textCtrlBaseTransactionFee->GetValue(), nTmp);\n+    m_textCtrlBaseTransactionFee->SetValue(FormatMoney(nTmp));\n+}\n+\n+void COptionsDialog::OnKillFocusPerKBTransactionFee(wxFocusEvent& event)\n+{\n+    event.Skip();\n+    int64 nTmp = nPerKBTransactionFee;\n+    ParseMoney(m_textCtrlPerKBTransactionFee->GetValue(), nTmp);\n+    m_textCtrlPerKBTransactionFee->SetValue(FormatMoney(nTmp));\n }\n \n void COptionsDialog::OnCheckBoxUseProxy(wxCommandEvent& event)\n@@ -1748,9 +1758,19 @@ void COptionsDialog::OnButtonApply(wxCommandEvent& event)\n {\n     CWalletDB walletdb;\n \n-    int64 nPrevTransactionFee = nTransactionFee;\n-    if (ParseMoney(m_textCtrlTransactionFee->GetValue(), nTransactionFee) && nTransactionFee != nPrevTransactionFee)\n-        walletdb.WriteSetting(\"nTransactionFee\", nTransactionFee);\n+    int64 nPrevTransactionFee = nBaseTransactionFee;\n+    if (ParseMoney(m_textCtrlBaseTransactionFee->GetValue(), nBaseTransactionFee) && nBaseTransactionFee != nPrevTransactionFee)\n+        walletdb.WriteSetting(\"nBaseTransactionFee\", nBaseTransactionFee);\n+\n+    nPrevTransactionFee = nPerKBTransactionFee;\n+    if (ParseMoney(m_textCtrlPerKBTransactionFee->GetValue(), nPerKBTransactionFee) && nPerKBTransactionFee != nPrevTransactionFee)\n+        walletdb.WriteSetting(\"nPerKBTransactionFee\", nPerKBTransactionFee);\n+\n+    if (fOverrideTransactionFee != m_checkBoxOverrideTransactionFee->GetValue())\n+    {\n+        fOverrideTransactionFee = m_checkBoxOverrideTransactionFee->GetValue();\n+        walletdb.WriteSetting(\"fOverrideTransactionFee\", fOverrideTransactionFee);\n+    }\n \n     if (fTmpStartOnSystemStartup != m_checkBoxStartOnSystemStartup->GetValue())\n     {\n@@ -2242,7 +2262,7 @@ void CSendingDialog::OnReply2(CDataStream& vRecv)\n             if (nPrice + nFeeRequired > GetBalance())\n             {\n                 unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtx, SER_NETWORK);\n-                int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n+                int64 nPayFee = nBaseTransactionFee + nPerKBTransactionFee * ((int64)nBytes / 1000);\n                 if (nPayFee == nFeeRequired)\n                     Error(strprintf(_(\"Based on your fee settings, this transaction requires a fee of at least %s, putting its total over your balance. You can change those settings in the Options dialog, or via the settxfee RPC command.\"), FormatMoney(nFeeRequired).c_str()));\n                 else\n@@ -2254,7 +2274,7 @@ void CSendingDialog::OnReply2(CDataStream& vRecv)\n         }\n \n         unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtx, SER_NETWORK);\n-        int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n+        int64 nPayFee = nBaseTransactionFee + nPerKBTransactionFee * ((int64)nBytes / 1000);\n \n         // Transaction fee\n         if (!ThreadSafeAskFee(nFeeRequired, nPayFee, _(\"Sending...\"), this))"
      },
      {
        "sha": "e694291e045c9407563b852b8136d59b69ade8fb",
        "filename": "src/ui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/ui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/ui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.h?ref=e76d9ebabc1bf023b16aafc897cf360eeffb0dae",
        "patch": "@@ -127,7 +127,8 @@ class COptionsDialog : public COptionsDialogBase\n protected:\n     // Event handlers\n     void OnListBox(wxCommandEvent& event);\n-    void OnKillFocusTransactionFee(wxFocusEvent& event);\n+    void OnKillFocusBaseTransactionFee(wxFocusEvent& event);\n+    void OnKillFocusPerKBTransactionFee(wxFocusEvent& event);\n     void OnCheckBoxUseProxy(wxCommandEvent& event);\n     void OnKillFocusProxy(wxFocusEvent& event);\n "
      },
      {
        "sha": "40e84e9e384bc4aa46e77fb31502cb2e5638b459",
        "filename": "src/uibase.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 38,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/uibase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/uibase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uibase.cpp?ref=e76d9ebabc1bf023b16aafc897cf360eeffb0dae",
        "patch": "@@ -335,6 +335,73 @@ COptionsDialogBase::COptionsDialogBase( wxWindow* parent, wxWindowID id, const w\n \twxBoxSizer* bSizer63;\n \tbSizer63 = new wxBoxSizer( wxVERTICAL );\n \t\n+\tm_panelFeeOptions = new wxPanel( m_scrolledWindow, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );\n+\twxBoxSizer* bSizer691;\n+\tbSizer691 = new wxBoxSizer( wxVERTICAL );\n+\t\n+\tm_staticText331 = new wxStaticText( m_panelFeeOptions, wxID_ANY, _(\"All transaction fees are optional and go to the miners who help secure the network and confirm your transactions.  Fees will ensure your transactions are given priority and are confirmed quickly.\"), wxDefaultPosition, wxDefaultSize, 0 );\n+\tm_staticText331->Wrap( 365 );\n+\tbSizer691->Add( m_staticText331, 0, wxALL, 5 );\n+\t\n+\twxBoxSizer* bSizer561;\n+\tbSizer561 = new wxBoxSizer( wxVERTICAL );\n+\t\n+\tm_staticText32212 = new wxStaticText( m_panelFeeOptions, wxID_ANY, _(\"Base Transaction fee is applied to all transactions (0.01 is recommended).\"), wxDefaultPosition, wxDefaultSize, 0 );\n+\tm_staticText32212->Wrap( 365 );\n+\tbSizer561->Add( m_staticText32212, 0, wxALL, 5 );\n+\t\n+\twxBoxSizer* bSizer59;\n+\tbSizer59 = new wxBoxSizer( wxHORIZONTAL );\n+\t\n+\tm_staticText311 = new wxStaticText( m_panelFeeOptions, wxID_ANY, _(\"Base transaction fee:\"), wxDefaultPosition, wxDefaultSize, 0 );\n+\tm_staticText311->Wrap( -1 );\n+\tbSizer59->Add( m_staticText311, 0, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM|wxLEFT, 5 );\n+\t\n+\tm_textCtrlBaseTransactionFee = new wxTextCtrl( m_panelFeeOptions, wxID_TRANSACTIONFEE, wxEmptyString, wxDefaultPosition, wxSize( 70,-1 ), 0 );\n+\tbSizer59->Add( m_textCtrlBaseTransactionFee, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );\n+\t\n+\tbSizer561->Add( bSizer59, 1, wxEXPAND, 5 );\n+\t\n+\tbSizer691->Add( bSizer561, 0, wxEXPAND, 5 );\n+\t\n+\twxBoxSizer* bSizer562;\n+\tbSizer562 = new wxBoxSizer( wxVERTICAL );\n+\t\n+\tm_staticText332 = new wxStaticText( m_panelFeeOptions, wxID_ANY, _(\"Per KB Transaction fee is applied per KB of transaction after the first (0.01 is recommended).\"), wxDefaultPosition, wxDefaultSize, 0 );\n+\tm_staticText332->Wrap( 365 );\n+\tbSizer562->Add( m_staticText332, 0, wxALL, 5 );\n+\t\n+\twxBoxSizer* bSizer591;\n+\tbSizer591 = new wxBoxSizer( wxHORIZONTAL );\n+\t\n+\tm_staticText333 = new wxStaticText( m_panelFeeOptions, wxID_ANY, _(\"Per KB transaction fee:\"), wxDefaultPosition, wxDefaultSize, 0 );\n+\tm_staticText333->Wrap( -1 );\n+\tbSizer591->Add( m_staticText333, 0, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM|wxLEFT, 5 );\n+\t\n+\tm_textCtrlPerKBTransactionFee = new wxTextCtrl( m_panelFeeOptions, wxID_TRANSACTIONFEE, wxEmptyString, wxDefaultPosition, wxSize( 70,-1 ), 0 );\n+\tbSizer591->Add( m_textCtrlPerKBTransactionFee, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );\n+\t\n+\tbSizer562->Add( bSizer591, 1, wxEXPAND, 5 );\n+\t\n+\tbSizer691->Add( bSizer562, 1, wxEXPAND, 5 );\n+\t\n+\twxBoxSizer* bSizer5621;\n+\tbSizer5621 = new wxBoxSizer( wxVERTICAL );\n+\t\n+\tm_staticText334 = new wxStaticText( m_panelFeeOptions, wxID_ANY, _(\"If a transaction requires a fee larger than you specified above in order for it to likely be accepted by the network, the client will override your settings and ask if you wish to send with the appropriate fee.  You may override this option, however it is likely that your transactions will not be relayed through the network and will never be confirmed.\"), wxDefaultPosition, wxDefaultSize, 0 );\n+\tm_staticText334->Wrap( 365 );\n+\tbSizer5621->Add( m_staticText334, 0, wxALL, 5 );\n+\t\n+\tm_checkBoxOverrideTransactionFee = new wxCheckBox( m_panelFeeOptions, wxID_ANY, _(\"&Override minimum sane fee.\"), wxDefaultPosition, wxDefaultSize, 0 );\n+\tbSizer5621->Add( m_checkBoxOverrideTransactionFee, 0, wxALL, 5 );\n+\t\n+\tbSizer691->Add( bSizer5621, 1, wxEXPAND, 5 );\n+\t\n+\tm_panelFeeOptions->SetSizer( bSizer691 );\n+\tm_panelFeeOptions->Layout();\n+\tbSizer691->Fit( m_panelFeeOptions );\n+\tbSizer63->Add( m_panelFeeOptions, 1, wxEXPAND | wxALL, 5 );\n+\t\n \tm_panelMain = new wxPanel( m_scrolledWindow, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );\n \twxBoxSizer* bSizer69;\n \tbSizer69 = new wxBoxSizer( wxVERTICAL );\n@@ -389,47 +456,11 @@ COptionsDialogBase::COptionsDialogBase( wxWindow* parent, wxWindowID id, const w\n \t\n \tbSizer69->Add( 0, 1, 0, 0, 5 );\n \t\n-\tm_staticText32 = new wxStaticText( m_panelMain, wxID_ANY, _(\"Optional transaction fee per KB that helps make sure your transactions are processed quickly.  Most transactions are 1KB.  Fee 0.01 recommended.\"), wxDefaultPosition, wxDefaultSize, 0 );\n-\tm_staticText32->Wrap( 365 );\n-\tbSizer69->Add( m_staticText32, 0, wxALIGN_CENTER_VERTICAL|wxTOP|wxRIGHT|wxLEFT, 5 );\n-\t\n-\twxBoxSizer* bSizer56;\n-\tbSizer56 = new wxBoxSizer( wxHORIZONTAL );\n-\t\n-\tm_staticText31 = new wxStaticText( m_panelMain, wxID_ANY, _(\"Pay transaction fee:\"), wxDefaultPosition, wxDefaultSize, 0 );\n-\tm_staticText31->Wrap( -1 );\n-\tbSizer56->Add( m_staticText31, 0, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM|wxLEFT, 5 );\n-\t\n-\tm_textCtrlTransactionFee = new wxTextCtrl( m_panelMain, wxID_TRANSACTIONFEE, wxEmptyString, wxDefaultPosition, wxSize( 70,-1 ), 0 );\n-\tbSizer56->Add( m_textCtrlTransactionFee, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );\n-\t\n-\tbSizer69->Add( bSizer56, 0, wxEXPAND, 5 );\n-\t\n \tm_panelMain->SetSizer( bSizer69 );\n \tm_panelMain->Layout();\n \tbSizer69->Fit( m_panelMain );\n \tbSizer63->Add( m_panelMain, 0, wxEXPAND, 5 );\n \t\n-\tm_panelTest2 = new wxPanel( m_scrolledWindow, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );\n-\twxBoxSizer* bSizer64;\n-\tbSizer64 = new wxBoxSizer( wxVERTICAL );\n-\t\n-\t\n-\tbSizer64->Add( 0, 16, 0, wxEXPAND, 5 );\n-\t\n-\tm_staticText321 = new wxStaticText( m_panelTest2, wxID_ANY, _(\"// [don't translate] Test panel 2 for future expansion\"), wxDefaultPosition, wxDefaultSize, 0 );\n-\tm_staticText321->Wrap( -1 );\n-\tbSizer64->Add( m_staticText321, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );\n-\t\n-\tm_staticText69 = new wxStaticText( m_panelTest2, wxID_ANY, _(\"// [don't translate] Let's not start multiple pages until the first page is filled up\"), wxDefaultPosition, wxDefaultSize, 0 );\n-\tm_staticText69->Wrap( -1 );\n-\tbSizer64->Add( m_staticText69, 0, wxALL, 5 );\n-\t\n-\tm_panelTest2->SetSizer( bSizer64 );\n-\tm_panelTest2->Layout();\n-\tbSizer64->Fit( m_panelTest2 );\n-\tbSizer63->Add( m_panelTest2, 0, wxEXPAND, 5 );\n-\t\n \tm_scrolledWindow->SetSizer( bSizer63 );\n \tm_scrolledWindow->Layout();\n \tbSizer63->Fit( m_scrolledWindow );\n@@ -456,11 +487,12 @@ COptionsDialogBase::COptionsDialogBase( wxWindow* parent, wxWindowID id, const w\n \t\n \t// Connect Events\n \tm_listBox->Connect( wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler( COptionsDialogBase::OnListBox ), NULL, this );\n+\tm_textCtrlBaseTransactionFee->Connect( wxEVT_KILL_FOCUS, wxFocusEventHandler( COptionsDialogBase::OnKillFocusBaseTransactionFee ), NULL, this );\n+\tm_textCtrlPerKBTransactionFee->Connect( wxEVT_KILL_FOCUS, wxFocusEventHandler( COptionsDialogBase::OnKillFocusPerKBTransactionFee ), NULL, this );\n \tm_checkBoxMinimizeToTray->Connect( wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler( COptionsDialogBase::OnCheckBoxMinimizeToTray ), NULL, this );\n \tm_checkBoxUseProxy->Connect( wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler( COptionsDialogBase::OnCheckBoxUseProxy ), NULL, this );\n \tm_textCtrlProxyIP->Connect( wxEVT_KILL_FOCUS, wxFocusEventHandler( COptionsDialogBase::OnKillFocusProxy ), NULL, this );\n \tm_textCtrlProxyPort->Connect( wxEVT_KILL_FOCUS, wxFocusEventHandler( COptionsDialogBase::OnKillFocusProxy ), NULL, this );\n-\tm_textCtrlTransactionFee->Connect( wxEVT_KILL_FOCUS, wxFocusEventHandler( COptionsDialogBase::OnKillFocusTransactionFee ), NULL, this );\n \tm_buttonOK->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( COptionsDialogBase::OnButtonOK ), NULL, this );\n \tm_buttonCancel->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( COptionsDialogBase::OnButtonCancel ), NULL, this );\n \tm_buttonApply->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( COptionsDialogBase::OnButtonApply ), NULL, this );\n@@ -470,11 +502,12 @@ COptionsDialogBase::~COptionsDialogBase()\n {\n \t// Disconnect Events\n \tm_listBox->Disconnect( wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler( COptionsDialogBase::OnListBox ), NULL, this );\n+\tm_textCtrlBaseTransactionFee->Disconnect( wxEVT_KILL_FOCUS, wxFocusEventHandler( COptionsDialogBase::OnKillFocusBaseTransactionFee ), NULL, this );\n+\tm_textCtrlPerKBTransactionFee->Disconnect( wxEVT_KILL_FOCUS, wxFocusEventHandler( COptionsDialogBase::OnKillFocusPerKBTransactionFee ), NULL, this );\n \tm_checkBoxMinimizeToTray->Disconnect( wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler( COptionsDialogBase::OnCheckBoxMinimizeToTray ), NULL, this );\n \tm_checkBoxUseProxy->Disconnect( wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler( COptionsDialogBase::OnCheckBoxUseProxy ), NULL, this );\n \tm_textCtrlProxyIP->Disconnect( wxEVT_KILL_FOCUS, wxFocusEventHandler( COptionsDialogBase::OnKillFocusProxy ), NULL, this );\n \tm_textCtrlProxyPort->Disconnect( wxEVT_KILL_FOCUS, wxFocusEventHandler( COptionsDialogBase::OnKillFocusProxy ), NULL, this );\n-\tm_textCtrlTransactionFee->Disconnect( wxEVT_KILL_FOCUS, wxFocusEventHandler( COptionsDialogBase::OnKillFocusTransactionFee ), NULL, this );\n \tm_buttonOK->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( COptionsDialogBase::OnButtonOK ), NULL, this );\n \tm_buttonCancel->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( COptionsDialogBase::OnButtonCancel ), NULL, this );\n \tm_buttonApply->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( COptionsDialogBase::OnButtonApply ), NULL, this );"
      },
      {
        "sha": "6e9f9aee393b6eac01eafa489f46f345e196e285",
        "filename": "src/uibase.h",
        "status": "modified",
        "additions": 15,
        "deletions": 11,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/uibase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e76d9ebabc1bf023b16aafc897cf360eeffb0dae/src/uibase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uibase.h?ref=e76d9ebabc1bf023b16aafc897cf360eeffb0dae",
        "patch": "@@ -45,9 +45,9 @@\n #define wxID_TEXTCTRLADDRESS 1003\n #define wxID_BUTTONNEW 1004\n #define wxID_BUTTONCOPY 1005\n-#define wxID_PROXYIP 1006\n-#define wxID_PROXYPORT 1007\n-#define wxID_TRANSACTIONFEE 1008\n+#define wxID_TRANSACTIONFEE 1006\n+#define wxID_PROXYIP 1007\n+#define wxID_PROXYPORT 1008\n #define wxID_TEXTCTRLPAYTO 1009\n #define wxID_BUTTONPASTE 1010\n #define wxID_BUTTONADDRESSBOOK 1011\n@@ -159,6 +159,16 @@ class COptionsDialogBase : public wxDialog\n \tprotected:\n \t\twxListBox* m_listBox;\n \t\twxScrolledWindow* m_scrolledWindow;\n+\t\twxPanel* m_panelFeeOptions;\n+\t\twxStaticText* m_staticText331;\n+\t\twxStaticText* m_staticText32212;\n+\t\twxStaticText* m_staticText311;\n+\t\twxTextCtrl* m_textCtrlBaseTransactionFee;\n+\t\twxStaticText* m_staticText332;\n+\t\twxStaticText* m_staticText333;\n+\t\twxTextCtrl* m_textCtrlPerKBTransactionFee;\n+\t\twxStaticText* m_staticText334;\n+\t\twxCheckBox* m_checkBoxOverrideTransactionFee;\n \t\twxPanel* m_panelMain;\n \t\t\n \t\twxCheckBox* m_checkBoxStartOnSystemStartup;\n@@ -172,23 +182,17 @@ class COptionsDialogBase : public wxDialog\n \t\twxStaticText* m_staticTextProxyPort;\n \t\twxTextCtrl* m_textCtrlProxyPort;\n \t\t\n-\t\twxStaticText* m_staticText32;\n-\t\twxStaticText* m_staticText31;\n-\t\twxTextCtrl* m_textCtrlTransactionFee;\n-\t\twxPanel* m_panelTest2;\n-\t\t\n-\t\twxStaticText* m_staticText321;\n-\t\twxStaticText* m_staticText69;\n \t\twxButton* m_buttonOK;\n \t\twxButton* m_buttonCancel;\n \t\twxButton* m_buttonApply;\n \t\t\n \t\t// Virtual event handlers, overide them in your derived class\n \t\tvirtual void OnListBox( wxCommandEvent& event ) { event.Skip(); }\n+\t\tvirtual void OnKillFocusBaseTransactionFee( wxFocusEvent& event ) { event.Skip(); }\n+\t\tvirtual void OnKillFocusPerKBTransactionFee( wxFocusEvent& event ) { event.Skip(); }\n \t\tvirtual void OnCheckBoxMinimizeToTray( wxCommandEvent& event ) { event.Skip(); }\n \t\tvirtual void OnCheckBoxUseProxy( wxCommandEvent& event ) { event.Skip(); }\n \t\tvirtual void OnKillFocusProxy( wxFocusEvent& event ) { event.Skip(); }\n-\t\tvirtual void OnKillFocusTransactionFee( wxFocusEvent& event ) { event.Skip(); }\n \t\tvirtual void OnButtonOK( wxCommandEvent& event ) { event.Skip(); }\n \t\tvirtual void OnButtonCancel( wxCommandEvent& event ) { event.Skip(); }\n \t\tvirtual void OnButtonApply( wxCommandEvent& event ) { event.Skip(); }"
      }
    ]
  },
  {
    "sha": "5350a907a57b88bd86827c1f3e41b571cf130401",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzUwYTkwN2E1N2I4OGJkODY4MjdjMWYzZTQxYjU3MWNmMTMwNDAx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2011-05-31T17:01:02Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2011-06-30T13:44:17Z"
      },
      "message": "Add setautocommit, reject transaction and committransaction.\n\nHere is the help for setautocommit:\nIf <autocommit> is false, the send* functions will return a txid,\nwhich must be manually committed instead of being immediately committed.\nOnce a new transaction has been created, you can get information about it by using\ngettransaction <txid>. It can then be commited or rejected using\ncommittransaction <txid> or rejecttransaction <txid> respectively.",
      "tree": {
        "sha": "b53e0ec214b97464f494ca11f88bd7015fd2642e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b53e0ec214b97464f494ca11f88bd7015fd2642e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5350a907a57b88bd86827c1f3e41b571cf130401",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5350a907a57b88bd86827c1f3e41b571cf130401",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5350a907a57b88bd86827c1f3e41b571cf130401",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5350a907a57b88bd86827c1f3e41b571cf130401/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e76d9ebabc1bf023b16aafc897cf360eeffb0dae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e76d9ebabc1bf023b16aafc897cf360eeffb0dae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e76d9ebabc1bf023b16aafc897cf360eeffb0dae"
      }
    ],
    "stats": {
      "total": 263,
      "additions": 220,
      "deletions": 43
    },
    "files": [
      {
        "sha": "a6936c9a7bf934780a9098183c59cee564e40e01",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350a907a57b88bd86827c1f3e41b571cf130401/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350a907a57b88bd86827c1f3e41b571cf130401/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5350a907a57b88bd86827c1f3e41b571cf130401",
        "patch": "@@ -3995,11 +3995,10 @@ bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n \n // requires cs_main lock\n-string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n+string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekeyRet, bool fAskFee, bool fAutoCommit)\n {\n-    CReserveKey reservekey;\n     int64 nFeeRequired;\n-    if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired))\n+    if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekeyRet, nFeeRequired))\n     {\n         string strError;\n         if (nValue + nFeeRequired > GetBalance())\n@@ -4023,8 +4022,9 @@ string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAs\n     if (fAskFee && !ThreadSafeAskFee(nFeeRequired, nPayFee, _(\"Sending...\"), NULL))\n         return \"ABORTED\";\n \n-    if (!CommitTransaction(wtxNew, reservekey))\n-        return _(\"Error: The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+    if (fAutoCommit)\n+        if (!CommitTransaction(wtxNew, reservekeyRet))\n+            return _(\"Error: The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n \n     MainFrameRepaint();\n     return \"\";\n@@ -4033,7 +4033,7 @@ string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAs\n \n \n // requires cs_main lock\n-string SendMoneyToBitcoinAddress(string strAddress, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n+string SendMoneyToBitcoinAddress(string strAddress, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekeyRet, bool fAskFee, bool fAutoCommit)\n {\n     // Check amount\n     if (nValue <= 0)\n@@ -4046,5 +4046,5 @@ string SendMoneyToBitcoinAddress(string strAddress, int64 nValue, CWalletTx& wtx\n     if (!scriptPubKey.SetBitcoinAddress(strAddress))\n         return _(\"Invalid bitcoin address\");\n \n-    return SendMoney(scriptPubKey, nValue, wtxNew, fAskFee);\n+    return SendMoney(scriptPubKey, nValue, wtxNew, reservekeyRet, fAskFee, fAutoCommit);\n }"
      },
      {
        "sha": "e6770ae5566e42bd33c62f838aab3be54fd34b69",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350a907a57b88bd86827c1f3e41b571cf130401/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350a907a57b88bd86827c1f3e41b571cf130401/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5350a907a57b88bd86827c1f3e41b571cf130401",
        "patch": "@@ -101,8 +101,8 @@ bool CreateTransaction(const std::vector<std::pair<CScript, int64> >& vecSend, C\n bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n bool BroadcastTransaction(CWalletTx& wtxNew);\n-std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n-std::string SendMoneyToBitcoinAddress(std::string strAddress, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n+std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekeyRet, bool fAskFee=false, bool fAutoCommit = true);\n+std::string SendMoneyToBitcoinAddress(std::string strAddress, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekeyRet, bool fAskFee=false, bool fAutoCommit = true);\n void GenerateBitcoins(bool fGenerate);\n void ThreadBitcoinMiner(void* parg);\n CBlock* CreateNewBlock(CReserveKey& reservekey);"
      },
      {
        "sha": "77a291b38c001471b5d41a2d1a793ca7d33f38e4",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 209,
        "deletions": 33,
        "changes": 242,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350a907a57b88bd86827c1f3e41b571cf130401/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350a907a57b88bd86827c1f3e41b571cf130401/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=5350a907a57b88bd86827c1f3e41b571cf130401",
        "patch": "@@ -30,6 +30,11 @@ void ThreadRPCServer2(void* parg);\n typedef Value(*rpcfn_type)(const Array& params, bool fHelp);\n extern map<string, rpcfn_type> mapCallTable;\n \n+static bool fAutoCommit = true;\n+static std::map<uint256, CWalletTx> mapTempTransactions;\n+static std::map<uint256, CReserveKey> mapTempPoolKeys;\n+static CCriticalSection cs_mapTempTransactions;\n+\n \n Object JSONRPCError(int code, const string& message)\n {\n@@ -483,6 +488,72 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     return ret;\n }\n \n+Value setautocommit(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+        throw runtime_error(\n+            \"setautocommit <autocommit>\\n\"\n+            \"If <autocommit> is false, the send* functions will return a txid,\\n\"\n+            \"which must be manually committed instead of being immediately committed.\\n\"\n+            \"Once a new transaction has been created, you can get information about it by using\\n\"\n+            \"gettransaction <txid>. It can then be commited or rejected using\\n\"\n+            \"committransaction <txid> or rejecttransaction <txid> respectively.\");\n+\n+    fAutoCommit = params[0].get_bool();\n+    return fAutoCommit;\n+}\n+\n+Value committransaction(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+        throw runtime_error(\n+            \"committransaction <txid>\\n\"\n+            \"Commits transaction <txid>, returning <txid> on success.\");\n+\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    CRITICAL_BLOCK(cs_mapTempTransactions)\n+    {\n+        if (mapTempTransactions.count(hash) && mapTempPoolKeys.count(hash))\n+        {\n+            CWalletTx& wtx = mapTempTransactions[hash];\n+            CReserveKey& keyChange = mapTempPoolKeys[hash];\n+            if (!CommitTransaction(wtx, keyChange))\n+                throw JSONRPCError(-4, \"Transaction commit failed\");\n+        }\n+        else\n+            throw JSONRPCError(-5, \"Invalid or non-wallet transaction id\");\n+    }\n+\n+    return params[0].get_str();\n+}\n+\n+Value rejecttransaction(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+        throw runtime_error(\n+            \"rejecttransaction <txid>\\n\"\n+            \"rejects transaction <txid>, removing it from memory and returning its reserved key to keypool.\");\n+\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    CRITICAL_BLOCK(cs_mapTempTransactions)\n+    {\n+        if (mapTempTransactions.count(hash) && mapTempPoolKeys.count(hash))\n+        {\n+            mapTempTransactions.erase(hash);\n+            mapTempPoolKeys[hash].ReturnKey();\n+            mapTempPoolKeys.erase(hash);\n+        }\n+        else\n+            throw JSONRPCError(-5, \"Invalid or non-wallet transaction id\");\n+    }\n+\n+    return true;\n+}\n+\n Value setbasetxfee(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 1)\n@@ -554,20 +625,41 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     int64 nAmount = AmountFromValue(params[1]);\n \n     // Wallet comments\n-    CWalletTx wtx;\n+    CWalletTx* wtx = new CWalletTx();\n     if (params.size() > 2 && params[2].type() != null_type && !params[2].get_str().empty())\n-        wtx.mapValue[\"comment\"] = params[2].get_str();\n+        (*wtx).mapValue[\"comment\"] = params[2].get_str();\n     if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n-        wtx.mapValue[\"to\"]      = params[3].get_str();\n+        (*wtx).mapValue[\"to\"]      = params[3].get_str();\n+\n+    string strTxHashHex;\n \n     CRITICAL_BLOCK(cs_main)\n     {\n-        string strError = SendMoneyToBitcoinAddress(strAddress, nAmount, wtx);\n+        CReserveKey* keyChange = new CReserveKey();\n+        string strError = SendMoneyToBitcoinAddress(strAddress, nAmount, *wtx, *keyChange, false, fAutoCommit);\n         if (strError != \"\")\n+        {\n+            free(wtx);\n+            free(keyChange);\n             throw JSONRPCError(-4, strError);\n+        }\n+        strTxHashHex = (*wtx).GetHash().GetHex();\n+        if (!fAutoCommit)\n+        {\n+            CRITICAL_BLOCK(cs_mapTempTransactions)\n+            {\n+                mapTempTransactions.insert(make_pair((*wtx).GetHash(), *wtx));\n+                mapTempPoolKeys.insert(make_pair((*wtx).GetHash(), *keyChange));\n+            }\n+        }\n+        else\n+        {\n+            free(wtx);\n+            free(keyChange);\n+        }\n     }\n \n-    return wtx.GetHash().GetHex();\n+    return strTxHashHex;\n }\n \n \n@@ -818,12 +910,14 @@ Value sendfrom(const Array& params, bool fHelp)\n     if (params.size() > 3)\n         nMinDepth = params[3].get_int();\n \n-    CWalletTx wtx;\n-    wtx.strFromAccount = strAccount;\n+    CWalletTx* wtx = new CWalletTx();\n+    (*wtx).strFromAccount = strAccount;\n     if (params.size() > 4 && params[4].type() != null_type && !params[4].get_str().empty())\n-        wtx.mapValue[\"comment\"] = params[4].get_str();\n+        (*wtx).mapValue[\"comment\"] = params[4].get_str();\n     if (params.size() > 5 && params[5].type() != null_type && !params[5].get_str().empty())\n-        wtx.mapValue[\"to\"]      = params[5].get_str();\n+        (*wtx).mapValue[\"to\"]      = params[5].get_str();\n+\n+    string strTxHashHex;\n \n     CRITICAL_BLOCK(cs_main)\n     CRITICAL_BLOCK(cs_mapWallet)\n@@ -834,12 +928,31 @@ Value sendfrom(const Array& params, bool fHelp)\n             throw JSONRPCError(-6, \"Account has insufficient funds\");\n \n         // Send\n-        string strError = SendMoneyToBitcoinAddress(strAddress, nAmount, wtx);\n+        CReserveKey* keyChange = new CReserveKey();\n+        string strError = SendMoneyToBitcoinAddress(strAddress, nAmount, *wtx, *keyChange, false, fAutoCommit);\n         if (strError != \"\")\n+        {\n+            free(wtx);\n+            free(keyChange);\n             throw JSONRPCError(-4, strError);\n+        }\n+        strTxHashHex = (*wtx).GetHash().GetHex();\n+        if (!fAutoCommit)\n+        {\n+            CRITICAL_BLOCK(cs_mapTempTransactions)\n+            {\n+                mapTempTransactions.insert(make_pair((*wtx).GetHash(), *wtx));\n+                mapTempPoolKeys.insert(make_pair((*wtx).GetHash(), *keyChange));\n+            }\n+        }\n+        else\n+        {\n+            free(wtx);\n+            free(keyChange);\n+        }\n     }\n \n-    return wtx.GetHash().GetHex();\n+    return strTxHashHex;\n }\n \n Value sendmany(const Array& params, bool fHelp)\n@@ -855,10 +968,10 @@ Value sendmany(const Array& params, bool fHelp)\n     if (params.size() > 2)\n         nMinDepth = params[2].get_int();\n \n-    CWalletTx wtx;\n-    wtx.strFromAccount = strAccount;\n+    CWalletTx* wtx = new CWalletTx();\n+    (*wtx).strFromAccount = strAccount;\n     if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n-        wtx.mapValue[\"comment\"] = params[3].get_str();\n+        (*wtx).mapValue[\"comment\"] = params[3].get_str();\n \n     set<string> setAddress;\n     vector<pair<CScript, int64> > vecSend;\n@@ -882,6 +995,9 @@ Value sendmany(const Array& params, bool fHelp)\n         vecSend.push_back(make_pair(scriptPubKey, nAmount));\n     }\n \n+    string strTxHashHex;\n+    CReserveKey* keyChange = new CReserveKey();\n+\n     CRITICAL_BLOCK(cs_main)\n     CRITICAL_BLOCK(cs_mapWallet)\n     {\n@@ -891,20 +1007,43 @@ Value sendmany(const Array& params, bool fHelp)\n             throw JSONRPCError(-6, \"Account has insufficient funds\");\n \n         // Send\n-        CReserveKey keyChange;\n         int64 nFeeRequired = 0;\n-        bool fCreated = CreateTransaction(vecSend, wtx, keyChange, nFeeRequired);\n+        bool fCreated = CreateTransaction(vecSend, *wtx, *keyChange, nFeeRequired);\n         if (!fCreated)\n         {\n+            free(wtx);\n+            free(keyChange);\n             if (totalAmount + nFeeRequired > GetBalance())\n                 throw JSONRPCError(-6, \"Insufficient funds\");\n             throw JSONRPCError(-4, \"Transaction creation failed\");\n         }\n-        if (!CommitTransaction(wtx, keyChange))\n-            throw JSONRPCError(-4, \"Transaction commit failed\");\n+        strTxHashHex = (*wtx).GetHash().GetHex();\n+        if (fAutoCommit)\n+        {\n+            if (!CommitTransaction(*wtx, *keyChange))\n+            {\n+                free(wtx);\n+                free(keyChange);\n+                throw JSONRPCError(-4, \"Transaction commit failed\");\n+            }\n+        }\n+        else\n+        {\n+            CRITICAL_BLOCK(cs_mapTempTransactions)\n+            {\n+                mapTempTransactions.insert(make_pair((*wtx).GetHash(), *wtx));\n+                mapTempPoolKeys.insert(make_pair((*wtx).GetHash(), *keyChange));\n+            }\n+        }\n     }\n \n-    return wtx.GetHash().GetHex();\n+    if (fAutoCommit)\n+    {\n+        free(wtx);\n+        free(keyChange);\n+    }\n+\n+    return strTxHashHex;\n }\n \n \n@@ -1273,29 +1412,62 @@ Value gettransaction(const Array& params, bool fHelp)\n     uint256 hash;\n     hash.SetHex(params[0].get_str());\n \n+    bool fTxFound = false;\n     Object entry;\n     CRITICAL_BLOCK(cs_mapWallet)\n     {\n-        if (!mapWallet.count(hash))\n-            throw JSONRPCError(-5, \"Invalid or non-wallet transaction id\");\n-        const CWalletTx& wtx = mapWallet[hash];\n+        if (mapWallet.count(hash))\n+        {\n+            fTxFound = true;\n+            const CWalletTx& wtx = mapWallet[hash];\n \n-        int64 nCredit = wtx.GetCredit();\n-        int64 nDebit = wtx.GetDebit();\n-        int64 nNet = nCredit - nDebit;\n-        int64 nFee = (wtx.IsFromMe() ? wtx.GetValueOut() - nDebit : 0);\n+            int64 nCredit = wtx.GetCredit();\n+            int64 nDebit = wtx.GetDebit();\n+            int64 nNet = nCredit - nDebit;\n+            int64 nFee = (wtx.IsFromMe() ? wtx.GetValueOut() - nDebit : 0);\n \n-        entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n-        if (wtx.IsFromMe())\n-            entry.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n+            entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n+            if (wtx.IsFromMe())\n+                entry.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n \n-        WalletTxToJSON(mapWallet[hash], entry);\n+            WalletTxToJSON(mapWallet[hash], entry);\n \n-        Array details;\n-        ListTransactions(mapWallet[hash], \"*\", 0, false, details);\n-        entry.push_back(Pair(\"details\", details));\n+            Array details;\n+            ListTransactions(mapWallet[hash], \"*\", 0, false, details);\n+            entry.push_back(Pair(\"details\", details));\n+        }\n     }\n \n+    if (fTxFound)\n+        return entry;\n+\n+    CRITICAL_BLOCK(cs_mapTempTransactions)\n+    {\n+        if (mapTempTransactions.count(hash))\n+        {\n+            fTxFound = true;\n+            const CWalletTx& wtx = mapTempTransactions[hash];\n+\n+            int64 nCredit = wtx.GetCredit();\n+            int64 nDebit = wtx.GetDebit();\n+            int64 nNet = nCredit - nDebit;\n+            int64 nFee = (wtx.IsFromMe() ? wtx.GetValueOut() - nDebit : 0);\n+\n+            entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n+            if (wtx.IsFromMe())\n+                entry.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n+\n+            WalletTxToJSON(mapTempTransactions[hash], entry);\n+\n+            Array details;\n+            ListTransactions(mapTempTransactions[hash], \"*\", 0, false, details);\n+            entry.push_back(Pair(\"details\", details));\n+        }\n+    }\n+\n+    if (!fTxFound)\n+        throw JSONRPCError(-5, \"Invalid or non-wallet transaction id\");\n+\n     return entry;\n }\n \n@@ -1505,6 +1677,9 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"setbasetxfee\",          &setbasetxfee),\n     make_pair(\"setperkbtxfee\",         &setperkbtxfee),\n     make_pair(\"setoverridesanetxfee\",  &setoverridesanetxfee),\n+    make_pair(\"setautocommit\",         &setautocommit),\n+    make_pair(\"committransaction\",     &committransaction),\n+    make_pair(\"rejecttransaction\",     &rejecttransaction),\n };\n map<string, rpcfn_type> mapCallTable(pCallTable, pCallTable + sizeof(pCallTable)/sizeof(pCallTable[0]));\n \n@@ -2141,6 +2316,7 @@ int CommandLineRPC(int argc, char *argv[])\n         if (strMethod == \"setbasetxfee\"           && n > 0) ConvertTo<double>(params[0]);\n         if (strMethod == \"setperkbtxfee\"          && n > 0) ConvertTo<double>(params[0]);\n         if (strMethod == \"setoverridesanetxfee\"   && n > 0) ConvertTo<bool>(params[0]);\n+        if (strMethod == \"setautocommit\"          && n > 0) ConvertTo<bool>(params[0]);\n         if (strMethod == \"getamountreceived\"      && n > 1) ConvertTo<boost::int64_t>(params[1]); // deprecated\n         if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n         if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);"
      },
      {
        "sha": "a903505350308604ca45a025ddedb0ab5c6c2d49",
        "filename": "src/ui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350a907a57b88bd86827c1f3e41b571cf130401/src/ui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350a907a57b88bd86827c1f3e41b571cf130401/src/ui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.cpp?ref=5350a907a57b88bd86827c1f3e41b571cf130401",
        "patch": "@@ -1961,7 +1961,8 @@ void CSendDialog::OnButtonSend(wxCommandEvent& event)\n                 CScript scriptPubKey;\n                 scriptPubKey << OP_DUP << OP_HASH160 << hash160 << OP_EQUALVERIFY << OP_CHECKSIG;\n \n-                string strError = SendMoney(scriptPubKey, nValue, wtx, true);\n+                CReserveKey keyReserve;\n+                string strError = SendMoney(scriptPubKey, nValue, wtx, keyReserve, true);\n                 if (strError == \"\")\n                     wxMessageBox(_(\"Payment sent  \"), _(\"Sending...\"));\n                 else if (strError == \"ABORTED\")"
      }
    ]
  }
]