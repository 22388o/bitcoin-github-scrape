[
  {
    "sha": "d52fc07e6a055dbeed72f73bb2e26f4b0866fc95",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTJmYzA3ZTZhMDU1ZGJlZWQ3MmY3M2JiMmUyNmY0YjA4NjZmYzk1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2020-10-30T15:25:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2021-03-10T07:58:44Z"
      },
      "message": "MOVEONLY: move RPCParseCommandLine to nested.cpp/.h (won't compile)",
      "tree": {
        "sha": "5f432d7c6829f2c5cb96905f73897193ad2f62d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f432d7c6829f2c5cb96905f73897193ad2f62d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d52fc07e6a055dbeed72f73bb2e26f4b0866fc95",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52fc07e6a055dbeed72f73bb2e26f4b0866fc95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d52fc07e6a055dbeed72f73bb2e26f4b0866fc95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52fc07e6a055dbeed72f73bb2e26f4b0866fc95/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eea6196c3d8056e51e1780a44ac7f599331247e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eea6196c3d8056e51e1780a44ac7f599331247e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eea6196c3d8056e51e1780a44ac7f599331247e5"
      }
    ],
    "stats": {
      "total": 518,
      "additions": 259,
      "deletions": 259
    },
    "files": [
      {
        "sha": "11a78ce06c402d727da407ec78069b9cac9fcca4",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 259,
        "changes": 259,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52fc07e6a055dbeed72f73bb2e26f4b0866fc95/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52fc07e6a055dbeed72f73bb2e26f4b0866fc95/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=d52fc07e6a055dbeed72f73bb2e26f4b0866fc95",
        "patch": "@@ -130,265 +130,6 @@ class QtRPCTimerInterface: public RPCTimerInterface\n \n #include <qt/rpcconsole.moc>\n \n-/**\n- * Split shell command line into a list of arguments and optionally execute the command(s).\n- * Aims to emulate \\c bash and friends.\n- *\n- * - Command nesting is possible with parenthesis; for example: validateaddress(getnewaddress())\n- * - Arguments are delimited with whitespace or comma\n- * - Extra whitespace at the beginning and end and between arguments will be ignored\n- * - Text can be \"double\" or 'single' quoted\n- * - The backslash \\c \\ is used as escape character\n- *   - Outside quotes, any character can be escaped\n- *   - Within double quotes, only escape \\c \" and backslashes before a \\c \" or another backslash\n- *   - Within single quotes, no escaping is possible and no special interpretation takes place\n- *\n- * @param[in]    node    optional node to execute command on\n- * @param[out]   strResult   stringified result from the executed command(chain)\n- * @param[in]    strCommand  Command line to split\n- * @param[in]    fExecute    set true if you want the command to be executed\n- * @param[out]   pstrFilteredOut  Command line, filtered to remove any sensitive data\n- */\n-\n-bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strResult, const std::string &strCommand, const bool fExecute, std::string * const pstrFilteredOut, const WalletModel* wallet_model)\n-{\n-    std::vector< std::vector<std::string> > stack;\n-    stack.push_back(std::vector<std::string>());\n-\n-    enum CmdParseState\n-    {\n-        STATE_EATING_SPACES,\n-        STATE_EATING_SPACES_IN_ARG,\n-        STATE_EATING_SPACES_IN_BRACKETS,\n-        STATE_ARGUMENT,\n-        STATE_SINGLEQUOTED,\n-        STATE_DOUBLEQUOTED,\n-        STATE_ESCAPE_OUTER,\n-        STATE_ESCAPE_DOUBLEQUOTED,\n-        STATE_COMMAND_EXECUTED,\n-        STATE_COMMAND_EXECUTED_INNER\n-    } state = STATE_EATING_SPACES;\n-    std::string curarg;\n-    UniValue lastResult;\n-    unsigned nDepthInsideSensitive = 0;\n-    size_t filter_begin_pos = 0, chpos;\n-    std::vector<std::pair<size_t, size_t>> filter_ranges;\n-\n-    auto add_to_current_stack = [&](const std::string& strArg) {\n-        if (stack.back().empty() && (!nDepthInsideSensitive) && historyFilter.contains(QString::fromStdString(strArg), Qt::CaseInsensitive)) {\n-            nDepthInsideSensitive = 1;\n-            filter_begin_pos = chpos;\n-        }\n-        // Make sure stack is not empty before adding something\n-        if (stack.empty()) {\n-            stack.push_back(std::vector<std::string>());\n-        }\n-        stack.back().push_back(strArg);\n-    };\n-\n-    auto close_out_params = [&]() {\n-        if (nDepthInsideSensitive) {\n-            if (!--nDepthInsideSensitive) {\n-                assert(filter_begin_pos);\n-                filter_ranges.push_back(std::make_pair(filter_begin_pos, chpos));\n-                filter_begin_pos = 0;\n-            }\n-        }\n-        stack.pop_back();\n-    };\n-\n-    std::string strCommandTerminated = strCommand;\n-    if (strCommandTerminated.back() != '\\n')\n-        strCommandTerminated += \"\\n\";\n-    for (chpos = 0; chpos < strCommandTerminated.size(); ++chpos)\n-    {\n-        char ch = strCommandTerminated[chpos];\n-        switch(state)\n-        {\n-            case STATE_COMMAND_EXECUTED_INNER:\n-            case STATE_COMMAND_EXECUTED:\n-            {\n-                bool breakParsing = true;\n-                switch(ch)\n-                {\n-                    case '[': curarg.clear(); state = STATE_COMMAND_EXECUTED_INNER; break;\n-                    default:\n-                        if (state == STATE_COMMAND_EXECUTED_INNER)\n-                        {\n-                            if (ch != ']')\n-                            {\n-                                // append char to the current argument (which is also used for the query command)\n-                                curarg += ch;\n-                                break;\n-                            }\n-                            if (curarg.size() && fExecute)\n-                            {\n-                                // if we have a value query, query arrays with index and objects with a string key\n-                                UniValue subelement;\n-                                if (lastResult.isArray())\n-                                {\n-                                    for(char argch: curarg)\n-                                        if (!IsDigit(argch))\n-                                            throw std::runtime_error(\"Invalid result query\");\n-                                    subelement = lastResult[atoi(curarg.c_str())];\n-                                }\n-                                else if (lastResult.isObject())\n-                                    subelement = find_value(lastResult, curarg);\n-                                else\n-                                    throw std::runtime_error(\"Invalid result query\"); //no array or object: abort\n-                                lastResult = subelement;\n-                            }\n-\n-                            state = STATE_COMMAND_EXECUTED;\n-                            break;\n-                        }\n-                        // don't break parsing when the char is required for the next argument\n-                        breakParsing = false;\n-\n-                        // pop the stack and return the result to the current command arguments\n-                        close_out_params();\n-\n-                        // don't stringify the json in case of a string to avoid doublequotes\n-                        if (lastResult.isStr())\n-                            curarg = lastResult.get_str();\n-                        else\n-                            curarg = lastResult.write(2);\n-\n-                        // if we have a non empty result, use it as stack argument otherwise as general result\n-                        if (curarg.size())\n-                        {\n-                            if (stack.size())\n-                                add_to_current_stack(curarg);\n-                            else\n-                                strResult = curarg;\n-                        }\n-                        curarg.clear();\n-                        // assume eating space state\n-                        state = STATE_EATING_SPACES;\n-                }\n-                if (breakParsing)\n-                    break;\n-            }\n-            case STATE_ARGUMENT: // In or after argument\n-            case STATE_EATING_SPACES_IN_ARG:\n-            case STATE_EATING_SPACES_IN_BRACKETS:\n-            case STATE_EATING_SPACES: // Handle runs of whitespace\n-                switch(ch)\n-            {\n-                case '\"': state = STATE_DOUBLEQUOTED; break;\n-                case '\\'': state = STATE_SINGLEQUOTED; break;\n-                case '\\\\': state = STATE_ESCAPE_OUTER; break;\n-                case '(': case ')': case '\\n':\n-                    if (state == STATE_EATING_SPACES_IN_ARG)\n-                        throw std::runtime_error(\"Invalid Syntax\");\n-                    if (state == STATE_ARGUMENT)\n-                    {\n-                        if (ch == '(' && stack.size() && stack.back().size() > 0)\n-                        {\n-                            if (nDepthInsideSensitive) {\n-                                ++nDepthInsideSensitive;\n-                            }\n-                            stack.push_back(std::vector<std::string>());\n-                        }\n-\n-                        // don't allow commands after executed commands on baselevel\n-                        if (!stack.size())\n-                            throw std::runtime_error(\"Invalid Syntax\");\n-\n-                        add_to_current_stack(curarg);\n-                        curarg.clear();\n-                        state = STATE_EATING_SPACES_IN_BRACKETS;\n-                    }\n-                    if ((ch == ')' || ch == '\\n') && stack.size() > 0)\n-                    {\n-                        if (fExecute) {\n-                            // Convert argument list to JSON objects in method-dependent way,\n-                            // and pass it along with the method name to the dispatcher.\n-                            UniValue params = RPCConvertValues(stack.back()[0], std::vector<std::string>(stack.back().begin() + 1, stack.back().end()));\n-                            std::string method = stack.back()[0];\n-                            std::string uri;\n-#ifdef ENABLE_WALLET\n-                            if (wallet_model) {\n-                                QByteArray encodedName = QUrl::toPercentEncoding(wallet_model->getWalletName());\n-                                uri = \"/wallet/\"+std::string(encodedName.constData(), encodedName.length());\n-                            }\n-#endif\n-                            assert(node);\n-                            lastResult = node->executeRpc(method, params, uri);\n-                        }\n-\n-                        state = STATE_COMMAND_EXECUTED;\n-                        curarg.clear();\n-                    }\n-                    break;\n-                case ' ': case ',': case '\\t':\n-                    if(state == STATE_EATING_SPACES_IN_ARG && curarg.empty() && ch == ',')\n-                        throw std::runtime_error(\"Invalid Syntax\");\n-\n-                    else if(state == STATE_ARGUMENT) // Space ends argument\n-                    {\n-                        add_to_current_stack(curarg);\n-                        curarg.clear();\n-                    }\n-                    if ((state == STATE_EATING_SPACES_IN_BRACKETS || state == STATE_ARGUMENT) && ch == ',')\n-                    {\n-                        state = STATE_EATING_SPACES_IN_ARG;\n-                        break;\n-                    }\n-                    state = STATE_EATING_SPACES;\n-                    break;\n-                default: curarg += ch; state = STATE_ARGUMENT;\n-            }\n-                break;\n-            case STATE_SINGLEQUOTED: // Single-quoted string\n-                switch(ch)\n-            {\n-                case '\\'': state = STATE_ARGUMENT; break;\n-                default: curarg += ch;\n-            }\n-                break;\n-            case STATE_DOUBLEQUOTED: // Double-quoted string\n-                switch(ch)\n-            {\n-                case '\"': state = STATE_ARGUMENT; break;\n-                case '\\\\': state = STATE_ESCAPE_DOUBLEQUOTED; break;\n-                default: curarg += ch;\n-            }\n-                break;\n-            case STATE_ESCAPE_OUTER: // '\\' outside quotes\n-                curarg += ch; state = STATE_ARGUMENT;\n-                break;\n-            case STATE_ESCAPE_DOUBLEQUOTED: // '\\' in double-quoted text\n-                if(ch != '\"' && ch != '\\\\') curarg += '\\\\'; // keep '\\' for everything but the quote and '\\' itself\n-                curarg += ch; state = STATE_DOUBLEQUOTED;\n-                break;\n-        }\n-    }\n-    if (pstrFilteredOut) {\n-        if (STATE_COMMAND_EXECUTED == state) {\n-            assert(!stack.empty());\n-            close_out_params();\n-        }\n-        *pstrFilteredOut = strCommand;\n-        for (auto i = filter_ranges.rbegin(); i != filter_ranges.rend(); ++i) {\n-            pstrFilteredOut->replace(i->first, i->second - i->first, \"(\u2026)\");\n-        }\n-    }\n-    switch(state) // final state\n-    {\n-        case STATE_COMMAND_EXECUTED:\n-            if (lastResult.isStr())\n-                strResult = lastResult.get_str();\n-            else\n-                strResult = lastResult.write(2);\n-        case STATE_ARGUMENT:\n-        case STATE_EATING_SPACES:\n-            return true;\n-        default: // ERROR to end in one of the other states\n-            return false;\n-    }\n-}\n-\n void RPCExecutor::request(const QString &command, const WalletModel* wallet_model)\n {\n     try"
      },
      {
        "sha": "fc3eefca27ae5b8f80ad910d468854c5433f64f4",
        "filename": "src/rpc/nested.cpp",
        "status": "added",
        "additions": 258,
        "deletions": 0,
        "changes": 258,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52fc07e6a055dbeed72f73bb2e26f4b0866fc95/src/rpc/nested.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52fc07e6a055dbeed72f73bb2e26f4b0866fc95/src/rpc/nested.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/nested.cpp?ref=d52fc07e6a055dbeed72f73bb2e26f4b0866fc95",
        "patch": "@@ -0,0 +1,258 @@\n+/**\n+ * Split shell command line into a list of arguments and optionally execute the command(s).\n+ * Aims to emulate \\c bash and friends.\n+ *\n+ * - Command nesting is possible with parenthesis; for example: validateaddress(getnewaddress())\n+ * - Arguments are delimited with whitespace or comma\n+ * - Extra whitespace at the beginning and end and between arguments will be ignored\n+ * - Text can be \"double\" or 'single' quoted\n+ * - The backslash \\c \\ is used as escape character\n+ *   - Outside quotes, any character can be escaped\n+ *   - Within double quotes, only escape \\c \" and backslashes before a \\c \" or another backslash\n+ *   - Within single quotes, no escaping is possible and no special interpretation takes place\n+ *\n+ * @param[in]    node    optional node to execute command on\n+ * @param[out]   strResult   stringified result from the executed command(chain)\n+ * @param[in]    strCommand  Command line to split\n+ * @param[in]    fExecute    set true if you want the command to be executed\n+ * @param[out]   pstrFilteredOut  Command line, filtered to remove any sensitive data\n+ */\n+\n+bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strResult, const std::string &strCommand, const bool fExecute, std::string * const pstrFilteredOut, const WalletModel* wallet_model)\n+{\n+    std::vector< std::vector<std::string> > stack;\n+    stack.push_back(std::vector<std::string>());\n+\n+    enum CmdParseState\n+    {\n+        STATE_EATING_SPACES,\n+        STATE_EATING_SPACES_IN_ARG,\n+        STATE_EATING_SPACES_IN_BRACKETS,\n+        STATE_ARGUMENT,\n+        STATE_SINGLEQUOTED,\n+        STATE_DOUBLEQUOTED,\n+        STATE_ESCAPE_OUTER,\n+        STATE_ESCAPE_DOUBLEQUOTED,\n+        STATE_COMMAND_EXECUTED,\n+        STATE_COMMAND_EXECUTED_INNER\n+    } state = STATE_EATING_SPACES;\n+    std::string curarg;\n+    UniValue lastResult;\n+    unsigned nDepthInsideSensitive = 0;\n+    size_t filter_begin_pos = 0, chpos;\n+    std::vector<std::pair<size_t, size_t>> filter_ranges;\n+\n+    auto add_to_current_stack = [&](const std::string& strArg) {\n+        if (stack.back().empty() && (!nDepthInsideSensitive) && historyFilter.contains(QString::fromStdString(strArg), Qt::CaseInsensitive)) {\n+            nDepthInsideSensitive = 1;\n+            filter_begin_pos = chpos;\n+        }\n+        // Make sure stack is not empty before adding something\n+        if (stack.empty()) {\n+            stack.push_back(std::vector<std::string>());\n+        }\n+        stack.back().push_back(strArg);\n+    };\n+\n+    auto close_out_params = [&]() {\n+        if (nDepthInsideSensitive) {\n+            if (!--nDepthInsideSensitive) {\n+                assert(filter_begin_pos);\n+                filter_ranges.push_back(std::make_pair(filter_begin_pos, chpos));\n+                filter_begin_pos = 0;\n+            }\n+        }\n+        stack.pop_back();\n+    };\n+\n+    std::string strCommandTerminated = strCommand;\n+    if (strCommandTerminated.back() != '\\n')\n+        strCommandTerminated += \"\\n\";\n+    for (chpos = 0; chpos < strCommandTerminated.size(); ++chpos)\n+    {\n+        char ch = strCommandTerminated[chpos];\n+        switch(state)\n+        {\n+            case STATE_COMMAND_EXECUTED_INNER:\n+            case STATE_COMMAND_EXECUTED:\n+            {\n+                bool breakParsing = true;\n+                switch(ch)\n+                {\n+                    case '[': curarg.clear(); state = STATE_COMMAND_EXECUTED_INNER; break;\n+                    default:\n+                        if (state == STATE_COMMAND_EXECUTED_INNER)\n+                        {\n+                            if (ch != ']')\n+                            {\n+                                // append char to the current argument (which is also used for the query command)\n+                                curarg += ch;\n+                                break;\n+                            }\n+                            if (curarg.size() && fExecute)\n+                            {\n+                                // if we have a value query, query arrays with index and objects with a string key\n+                                UniValue subelement;\n+                                if (lastResult.isArray())\n+                                {\n+                                    for(char argch: curarg)\n+                                        if (!IsDigit(argch))\n+                                            throw std::runtime_error(\"Invalid result query\");\n+                                    subelement = lastResult[atoi(curarg.c_str())];\n+                                }\n+                                else if (lastResult.isObject())\n+                                    subelement = find_value(lastResult, curarg);\n+                                else\n+                                    throw std::runtime_error(\"Invalid result query\"); //no array or object: abort\n+                                lastResult = subelement;\n+                            }\n+\n+                            state = STATE_COMMAND_EXECUTED;\n+                            break;\n+                        }\n+                        // don't break parsing when the char is required for the next argument\n+                        breakParsing = false;\n+\n+                        // pop the stack and return the result to the current command arguments\n+                        close_out_params();\n+\n+                        // don't stringify the json in case of a string to avoid doublequotes\n+                        if (lastResult.isStr())\n+                            curarg = lastResult.get_str();\n+                        else\n+                            curarg = lastResult.write(2);\n+\n+                        // if we have a non empty result, use it as stack argument otherwise as general result\n+                        if (curarg.size())\n+                        {\n+                            if (stack.size())\n+                                add_to_current_stack(curarg);\n+                            else\n+                                strResult = curarg;\n+                        }\n+                        curarg.clear();\n+                        // assume eating space state\n+                        state = STATE_EATING_SPACES;\n+                }\n+                if (breakParsing)\n+                    break;\n+            }\n+            case STATE_ARGUMENT: // In or after argument\n+            case STATE_EATING_SPACES_IN_ARG:\n+            case STATE_EATING_SPACES_IN_BRACKETS:\n+            case STATE_EATING_SPACES: // Handle runs of whitespace\n+                switch(ch)\n+            {\n+                case '\"': state = STATE_DOUBLEQUOTED; break;\n+                case '\\'': state = STATE_SINGLEQUOTED; break;\n+                case '\\\\': state = STATE_ESCAPE_OUTER; break;\n+                case '(': case ')': case '\\n':\n+                    if (state == STATE_EATING_SPACES_IN_ARG)\n+                        throw std::runtime_error(\"Invalid Syntax\");\n+                    if (state == STATE_ARGUMENT)\n+                    {\n+                        if (ch == '(' && stack.size() && stack.back().size() > 0)\n+                        {\n+                            if (nDepthInsideSensitive) {\n+                                ++nDepthInsideSensitive;\n+                            }\n+                            stack.push_back(std::vector<std::string>());\n+                        }\n+\n+                        // don't allow commands after executed commands on baselevel\n+                        if (!stack.size())\n+                            throw std::runtime_error(\"Invalid Syntax\");\n+\n+                        add_to_current_stack(curarg);\n+                        curarg.clear();\n+                        state = STATE_EATING_SPACES_IN_BRACKETS;\n+                    }\n+                    if ((ch == ')' || ch == '\\n') && stack.size() > 0)\n+                    {\n+                        if (fExecute) {\n+                            // Convert argument list to JSON objects in method-dependent way,\n+                            // and pass it along with the method name to the dispatcher.\n+                            UniValue params = RPCConvertValues(stack.back()[0], std::vector<std::string>(stack.back().begin() + 1, stack.back().end()));\n+                            std::string method = stack.back()[0];\n+                            std::string uri;\n+#ifdef ENABLE_WALLET\n+                            if (wallet_model) {\n+                                QByteArray encodedName = QUrl::toPercentEncoding(wallet_model->getWalletName());\n+                                uri = \"/wallet/\"+std::string(encodedName.constData(), encodedName.length());\n+                            }\n+#endif\n+                            assert(node);\n+                            lastResult = node->executeRpc(method, params, uri);\n+                        }\n+\n+                        state = STATE_COMMAND_EXECUTED;\n+                        curarg.clear();\n+                    }\n+                    break;\n+                case ' ': case ',': case '\\t':\n+                    if(state == STATE_EATING_SPACES_IN_ARG && curarg.empty() && ch == ',')\n+                        throw std::runtime_error(\"Invalid Syntax\");\n+\n+                    else if(state == STATE_ARGUMENT) // Space ends argument\n+                    {\n+                        add_to_current_stack(curarg);\n+                        curarg.clear();\n+                    }\n+                    if ((state == STATE_EATING_SPACES_IN_BRACKETS || state == STATE_ARGUMENT) && ch == ',')\n+                    {\n+                        state = STATE_EATING_SPACES_IN_ARG;\n+                        break;\n+                    }\n+                    state = STATE_EATING_SPACES;\n+                    break;\n+                default: curarg += ch; state = STATE_ARGUMENT;\n+            }\n+                break;\n+            case STATE_SINGLEQUOTED: // Single-quoted string\n+                switch(ch)\n+            {\n+                case '\\'': state = STATE_ARGUMENT; break;\n+                default: curarg += ch;\n+            }\n+                break;\n+            case STATE_DOUBLEQUOTED: // Double-quoted string\n+                switch(ch)\n+            {\n+                case '\"': state = STATE_ARGUMENT; break;\n+                case '\\\\': state = STATE_ESCAPE_DOUBLEQUOTED; break;\n+                default: curarg += ch;\n+            }\n+                break;\n+            case STATE_ESCAPE_OUTER: // '\\' outside quotes\n+                curarg += ch; state = STATE_ARGUMENT;\n+                break;\n+            case STATE_ESCAPE_DOUBLEQUOTED: // '\\' in double-quoted text\n+                if(ch != '\"' && ch != '\\\\') curarg += '\\\\'; // keep '\\' for everything but the quote and '\\' itself\n+                curarg += ch; state = STATE_DOUBLEQUOTED;\n+                break;\n+        }\n+    }\n+    if (pstrFilteredOut) {\n+        if (STATE_COMMAND_EXECUTED == state) {\n+            assert(!stack.empty());\n+            close_out_params();\n+        }\n+        *pstrFilteredOut = strCommand;\n+        for (auto i = filter_ranges.rbegin(); i != filter_ranges.rend(); ++i) {\n+            pstrFilteredOut->replace(i->first, i->second - i->first, \"(\u2026)\");\n+        }\n+    }\n+    switch(state) // final state\n+    {\n+        case STATE_COMMAND_EXECUTED:\n+            if (lastResult.isStr())\n+                strResult = lastResult.get_str();\n+            else\n+                strResult = lastResult.write(2);\n+        case STATE_ARGUMENT:\n+        case STATE_EATING_SPACES:\n+            return true;\n+        default: // ERROR to end in one of the other states\n+            return false;\n+    }\n+}"
      },
      {
        "sha": "fb7a52f27b37c1c01986dec41e6d5fc483d3a789",
        "filename": "src/rpc/nested.h",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52fc07e6a055dbeed72f73bb2e26f4b0866fc95/src/rpc/nested.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52fc07e6a055dbeed72f73bb2e26f4b0866fc95/src/rpc/nested.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/nested.h?ref=d52fc07e6a055dbeed72f73bb2e26f4b0866fc95",
        "patch": "@@ -0,0 +1 @@\n+static bool RPCParseCommandLine(interfaces::Node* node, std::string &strResult, const std::string &strCommand, bool fExecute, std::string * const pstrFilteredOut = nullptr, const WalletModel* wallet_model = nullptr);"
      }
    ]
  },
  {
    "sha": "e147b44f3afc1fbd2055009d8048fea780d1cacb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTQ3YjQ0ZjNhZmMxZmJkMjA1NTAwOWQ4MDQ4ZmVhNzgwZDFjYWNi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2020-10-30T15:48:04Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2021-03-10T08:00:05Z"
      },
      "message": "Factor out RPC consoles ParseCommandLine. Add callbacks for flexibility",
      "tree": {
        "sha": "de5a4974c9f892d9bbbc621a55fd8403120922be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de5a4974c9f892d9bbbc621a55fd8403120922be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e147b44f3afc1fbd2055009d8048fea780d1cacb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e147b44f3afc1fbd2055009d8048fea780d1cacb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e147b44f3afc1fbd2055009d8048fea780d1cacb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e147b44f3afc1fbd2055009d8048fea780d1cacb/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d52fc07e6a055dbeed72f73bb2e26f4b0866fc95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52fc07e6a055dbeed72f73bb2e26f4b0866fc95",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d52fc07e6a055dbeed72f73bb2e26f4b0866fc95"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 67,
      "deletions": 17
    },
    "files": [
      {
        "sha": "97670082bacb0d6116dd75fbeaf74a86d9107a76",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e147b44f3afc1fbd2055009d8048fea780d1cacb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e147b44f3afc1fbd2055009d8048fea780d1cacb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e147b44f3afc1fbd2055009d8048fea780d1cacb",
        "patch": "@@ -198,6 +198,7 @@ BITCOIN_CORE_H = \\\n   rpc/blockchain.h \\\n   rpc/client.h \\\n   rpc/mining.h \\\n+  rpc/nested.h \\\n   rpc/protocol.h \\\n   rpc/rawtransaction_util.h \\\n   rpc/register.h \\\n@@ -602,6 +603,7 @@ libbitcoin_cli_a_SOURCES = \\\n   compat/stdin.h \\\n   compat/stdin.cpp \\\n   rpc/client.cpp \\\n+  rpc/nested.cpp \\\n   $(BITCOIN_CORE_H)\n \n nodist_libbitcoin_util_a_SOURCES = $(srcdir)/obj/build.h"
      },
      {
        "sha": "be131bd37b43a1cbf54fcfc1f2616b5a1983de15",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e147b44f3afc1fbd2055009d8048fea780d1cacb/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e147b44f3afc1fbd2055009d8048fea780d1cacb/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=e147b44f3afc1fbd2055009d8048fea780d1cacb",
        "patch": "@@ -17,6 +17,7 @@\n #include <interfaces/node.h>\n #include <netbase.h>\n #include <rpc/client.h>\n+#include <rpc/nested.h>\n #include <rpc/server.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n@@ -130,6 +131,25 @@ class QtRPCTimerInterface: public RPCTimerInterface\n \n #include <qt/rpcconsole.moc>\n \n+bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strResult, const std::string &strCommand, const bool fExecute, std::string * const pstrFilteredOut, const WalletModel* wallet_model)\n+{\n+    std::string uri{};\n+#ifdef ENABLE_WALLET\n+    if (wallet_model) {\n+        QByteArray encodedName = QUrl::toPercentEncoding(wallet_model->getWalletName());\n+        uri = \"/wallet/\"+std::string(encodedName.constData(), encodedName.length());\n+    }\n+#endif\n+    UniValue reply_object; // unused\n+    return RPCNested::ParseCommandLine([node](const std::string &method, const UniValue &params, const std::string &uri_inner, bool &stop_parse) {\n+        assert(node);\n+        return node->executeRpc(method, params, uri_inner);\n+    },\n+    [](const std::string &strArg) {\n+        return historyFilter.contains(QString::fromStdString(strArg), Qt::CaseInsensitive);\n+    }, strResult, reply_object, strCommand, fExecute, pstrFilteredOut, uri);\n+}\n+\n void RPCExecutor::request(const QString &command, const WalletModel* wallet_model)\n {\n     try"
      },
      {
        "sha": "368de5434eb0c28d6989722aa6b5a8fd281f1ec6",
        "filename": "src/rpc/nested.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 16,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e147b44f3afc1fbd2055009d8048fea780d1cacb/src/rpc/nested.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e147b44f3afc1fbd2055009d8048fea780d1cacb/src/rpc/nested.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/nested.cpp?ref=e147b44f3afc1fbd2055009d8048fea780d1cacb",
        "patch": "@@ -1,3 +1,12 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <rpc/nested.h>\n+\n+#include <rpc/client.h>\n+#include <util/strencodings.h>\n+\n /**\n  * Split shell command line into a list of arguments and optionally execute the command(s).\n  * Aims to emulate \\c bash and friends.\n@@ -11,14 +20,20 @@\n  *   - Within double quotes, only escape \\c \" and backslashes before a \\c \" or another backslash\n  *   - Within single quotes, no escaping is possible and no special interpretation takes place\n  *\n- * @param[in]    node    optional node to execute command on\n- * @param[out]   strResult   stringified result from the executed command(chain)\n- * @param[in]    strCommand  Command line to split\n- * @param[in]    fExecute    set true if you want the command to be executed\n- * @param[out]   pstrFilteredOut  Command line, filtered to remove any sensitive data\n+ * @param[in]    rpc_exec_func   callback function for handling the RPC call\n+ * @param[in]    filter_func     callback function for filtering the output string pstrFilteredOut\n+ * @param[out]   strResult       stringified result from the executed command(chain)\n+ * @param[out]   lastResult      UniValue object of the result from the executed command(chain)\n+ * @param[in]    strCommand      Command line to split\n+ * @param[in]    fExecute        set true if you want the command to be executed\n+ * @param[out]   pstrFilteredOut Command line, filtered to remove any sensitive data\n+ * @param[in]    uri             URI to call\n  */\n \n-bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strResult, const std::string &strCommand, const bool fExecute, std::string * const pstrFilteredOut, const WalletModel* wallet_model)\n+namespace RPCNested\n+{\n+\n+bool ParseCommandLine(std::function<UniValue(const std::string&, const UniValue&, const std::string&, bool &stop_parsing)> rpc_exec_func, std::function<bool(const std::string &)> filter_func, std::string &strResult, UniValue &lastResult, const std::string &strCommand, const bool fExecute, std::string * const pstrFilteredOut, const std::string &uri)\n {\n     std::vector< std::vector<std::string> > stack;\n     stack.push_back(std::vector<std::string>());\n@@ -37,13 +52,12 @@ bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strRes\n         STATE_COMMAND_EXECUTED_INNER\n     } state = STATE_EATING_SPACES;\n     std::string curarg;\n-    UniValue lastResult;\n     unsigned nDepthInsideSensitive = 0;\n     size_t filter_begin_pos = 0, chpos;\n     std::vector<std::pair<size_t, size_t>> filter_ranges;\n \n     auto add_to_current_stack = [&](const std::string& strArg) {\n-        if (stack.back().empty() && (!nDepthInsideSensitive) && historyFilter.contains(QString::fromStdString(strArg), Qt::CaseInsensitive)) {\n+        if (stack.back().empty() && (!nDepthInsideSensitive) && filter_func(strArg)) {\n             nDepthInsideSensitive = 1;\n             filter_begin_pos = chpos;\n         }\n@@ -174,15 +188,11 @@ bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strRes\n                             // and pass it along with the method name to the dispatcher.\n                             UniValue params = RPCConvertValues(stack.back()[0], std::vector<std::string>(stack.back().begin() + 1, stack.back().end()));\n                             std::string method = stack.back()[0];\n-                            std::string uri;\n-#ifdef ENABLE_WALLET\n-                            if (wallet_model) {\n-                                QByteArray encodedName = QUrl::toPercentEncoding(wallet_model->getWalletName());\n-                                uri = \"/wallet/\"+std::string(encodedName.constData(), encodedName.length());\n+                            bool stop_parse{false};\n+                            lastResult = rpc_exec_func(method, params, uri, stop_parse);\n+                            if (stop_parse) {\n+                                return false;\n                             }\n-#endif\n-                            assert(node);\n-                            lastResult = node->executeRpc(method, params, uri);\n                         }\n \n                         state = STATE_COMMAND_EXECUTED;\n@@ -256,3 +266,5 @@ bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strRes\n             return false;\n     }\n }\n+\n+} // namespace RPCNested"
      },
      {
        "sha": "a5533ac97cfe3c7c4ecbf4102cf71319ea07c283",
        "filename": "src/rpc/nested.h",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e147b44f3afc1fbd2055009d8048fea780d1cacb/src/rpc/nested.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e147b44f3afc1fbd2055009d8048fea780d1cacb/src/rpc/nested.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/nested.h?ref=e147b44f3afc1fbd2055009d8048fea780d1cacb",
        "patch": "@@ -1 +1,17 @@\n-static bool RPCParseCommandLine(interfaces::Node* node, std::string &strResult, const std::string &strCommand, bool fExecute, std::string * const pstrFilteredOut = nullptr, const WalletModel* wallet_model = nullptr);\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_NESTED_H\n+#define BITCOIN_RPC_NESTED_H\n+\n+#include <functional>\n+#include <string>\n+\n+#include <univalue.h>\n+\n+namespace RPCNested {\n+    bool ParseCommandLine(std::function<UniValue(const std::string&, const UniValue&, const std::string&, bool &stop_parsing)> rpc_exec_func, std::function<bool(const std::string &)> filter_func, std::string &strResult, UniValue &output, const std::string &strCommand, const bool fExecute, std::string * const pstrFilteredOut, const std::string &uri_prefix);\n+}\n+\n+#endif // BITCOIN_RPC_NESTED_H"
      }
    ]
  },
  {
    "sha": "951e1b3f42bacc4601a5f4eeaa7b25e22b34a0f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTFlMWIzZjQyYmFjYzQ2MDFhNWY0ZWVhYTdiMjVlMjJiMzRhMGY3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2020-10-30T15:58:16Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2021-03-10T08:30:31Z"
      },
      "message": "Add support for command nesting in bitcoin-cli",
      "tree": {
        "sha": "1085e48d3cac1173576fd085953c1c9cb6ab8bb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1085e48d3cac1173576fd085953c1c9cb6ab8bb6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/951e1b3f42bacc4601a5f4eeaa7b25e22b34a0f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/951e1b3f42bacc4601a5f4eeaa7b25e22b34a0f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/951e1b3f42bacc4601a5f4eeaa7b25e22b34a0f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/951e1b3f42bacc4601a5f4eeaa7b25e22b34a0f7/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e147b44f3afc1fbd2055009d8048fea780d1cacb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e147b44f3afc1fbd2055009d8048fea780d1cacb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e147b44f3afc1fbd2055009d8048fea780d1cacb"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 78,
      "deletions": 28
    },
    "files": [
      {
        "sha": "018bb18506ef3c13c56bf043401ba989be60ad31",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 28,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951e1b3f42bacc4601a5f4eeaa7b25e22b34a0f7/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951e1b3f42bacc4601a5f4eeaa7b25e22b34a0f7/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=951e1b3f42bacc4601a5f4eeaa7b25e22b34a0f7",
        "patch": "@@ -12,6 +12,7 @@\n #include <optional.h>\n #include <rpc/client.h>\n #include <rpc/mining.h>\n+#include <rpc/nested.h>\n #include <rpc/protocol.h>\n #include <rpc/request.h>\n #include <tinyformat.h>\n@@ -224,7 +225,7 @@ class BaseRequestHandler\n {\n public:\n     virtual ~BaseRequestHandler() {}\n-    virtual UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) = 0;\n+    virtual UniValue PrepareRequest(const std::string& method, const UniValue& args) = 0;\n     virtual UniValue ProcessReply(const UniValue &batch_in) = 0;\n };\n \n@@ -238,7 +239,7 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     const int ID_BALANCES = 3;\n \n     /** Create a simulated `getinfo` request. */\n-    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    UniValue PrepareRequest(const std::string& method, const UniValue& args) override\n     {\n         if (!args.empty()) {\n             throw std::runtime_error(\"-getinfo takes no arguments\");\n@@ -370,14 +371,14 @@ class NetinfoRequestHandler : public BaseRequestHandler\n     static constexpr int ID_PEERINFO = 0;\n     static constexpr int ID_NETWORKINFO = 1;\n \n-    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    UniValue PrepareRequest(const std::string& method, const UniValue& args) override\n     {\n-        if (!args.empty()) {\n+        if (args.isArray() && args.size() > 0 && args[0].isStr()) {\n             uint8_t n{0};\n-            if (ParseUInt8(args.at(0), &n)) {\n+            if (ParseUInt8(args[0].get_str(), &n)) {\n                 m_details_level = std::min(n, MAX_DETAIL_LEVEL);\n             } else {\n-                throw std::runtime_error(strprintf(\"invalid -netinfo argument: %s\\nFor more information, run: bitcoin-cli -netinfo help\", args.at(0)));\n+                throw std::runtime_error(strprintf(\"invalid -netinfo argument: %s\\nFor more information, run: bitcoin-cli -netinfo help\", args[0].get_str()));\n             }\n         }\n         UniValue result(UniValue::VARR);\n@@ -573,10 +574,9 @@ class NetinfoRequestHandler : public BaseRequestHandler\n class GenerateToAddressRequestHandler : public BaseRequestHandler\n {\n public:\n-    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    UniValue PrepareRequest(const std::string& method, const UniValue& params) override\n     {\n-        address_str = args.at(1);\n-        UniValue params{RPCConvertValues(\"generatetoaddress\", args)};\n+        address_str = params[1].get_str();\n         return JSONRPCRequestObj(\"generatetoaddress\", params, 1);\n     }\n \n@@ -594,15 +594,9 @@ class GenerateToAddressRequestHandler : public BaseRequestHandler\n /** Process default single requests */\n class DefaultRequestHandler: public BaseRequestHandler {\n public:\n-    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    UniValue PrepareRequest(const std::string& method, const UniValue& args) override\n     {\n-        UniValue params;\n-        if(gArgs.GetBoolArg(\"-named\", DEFAULT_NAMED)) {\n-            params = RPCConvertNamedValues(method, args);\n-        } else {\n-            params = RPCConvertValues(method, args);\n-        }\n-        return JSONRPCRequestObj(method, params, 1);\n+        return JSONRPCRequestObj(method, args, 1);\n     }\n \n     UniValue ProcessReply(const UniValue &reply) override\n@@ -611,7 +605,7 @@ class DefaultRequestHandler: public BaseRequestHandler {\n     }\n };\n \n-static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const Optional<std::string>& rpcwallet = {})\n+static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, const UniValue& args, const Optional<std::string>& rpcwallet = {})\n {\n     std::string host;\n     // In preference order, we choose the following for the port:\n@@ -733,7 +727,7 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\n  * @returns the RPC response as a UniValue object.\n  * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n  */\n-static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const Optional<std::string>& rpcwallet = {})\n+static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const UniValue& args, const Optional<std::string>& rpcwallet = {})\n {\n     UniValue response(UniValue::VOBJ);\n     // Execute and handle connection failures with -rpcwait.\n@@ -893,6 +887,7 @@ static int CommandLineRPC(int argc, char *argv[])\n                 fputc('\\n', stdout);\n             }\n         }\n+        bool use_nested{false};\n         std::unique_ptr<BaseRequestHandler> rh;\n         std::string method;\n         if (gArgs.IsArgSet(\"-getinfo\")) {\n@@ -912,30 +907,85 @@ static int CommandLineRPC(int argc, char *argv[])\n             } else {\n                 ParseError(error, strPrint, nRet);\n             }\n+            method = \"generatetoaddress\";\n         } else {\n             rh.reset(new DefaultRequestHandler());\n             if (args.size() < 1) {\n                 throw std::runtime_error(\"too few parameters (need at least command)\");\n             }\n             method = args[0];\n+\n+            // if the method contains a bracket, enable nested commands\n+            if (method.find('(') != std::string::npos && !gArgs.GetBoolArg(\"-named\", DEFAULT_NAMED)) {\n+                use_nested = true;\n+            }\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n         if (nRet == 0) {\n             // Perform RPC call\n             Optional<std::string> wallet_name{};\n             if (gArgs.IsArgSet(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\n-            const UniValue reply = ConnectAndCallRPC(rh.get(), method, args, wallet_name);\n+            if (use_nested) {\n+                UniValue reply;\n+                std::string result_str; /* unused */\n+                std::string uri;\n+\n+                // format the complete command string expected by RPCNested::ParseCommandLine\n+                for (const auto &piece : args) {\n+                    method += \" \"+ (piece.size() ? piece : \"''\");\n+                }\n \n-            // Parse reply\n-            UniValue result = find_value(reply, \"result\");\n-            const UniValue& error = find_value(reply, \"error\");\n-            if (error.isNull()) {\n-                if (gArgs.IsArgSet(\"-getinfo\") && !gArgs.IsArgSet(\"-rpcwallet\")) {\n-                    GetWalletBalances(result); // fetch multiwallet balances and append to result\n+                // set the wallet endpoint (if -rpcwallet is set)\n+                if (wallet_name) uri = wallet_name->data();\n+\n+                // process the command string\n+                RPCNested::ParseCommandLine([&rh, &wallet_name](const std::string &method, const UniValue &params, const std::string &uri_inner, bool &stop_parse) {\n+                    // RPC execution callback\n+                    // may be called multiple times due to possible command nesting\n+                    const UniValue reply_inner = ConnectAndCallRPC(rh.get(), method, params, wallet_name);\n+\n+                    // only pass on the JSON \"result\" sub-object\n+                    // required for nested commands with the direct access option\n+                    const UniValue result = find_value(reply_inner, \"result\");\n+                    const UniValue& error = find_value(reply_inner, \"error\");\n+                    if (!error.isNull()) {\n+                        // in case of an error, returen the complete JSON object (not only the result)\n+                        stop_parse = true;\n+                        return reply_inner;\n+                    }\n+                    return result;\n+                },\n+                [](const std::string &) {\n+                    // ignore command filtering (only used by the GUI)\n+                    return false;\n+                }, result_str, reply, method, true, nullptr, uri);\n+\n+                const UniValue& error = find_value(reply, \"error\");\n+                if (error.isNull()) {\n+                    ParseResult(reply, strPrint);\n+                } else {\n+                    ParseError(error, strPrint, nRet);\n                 }\n-                ParseResult(result, strPrint);\n             } else {\n-                ParseError(error, strPrint, nRet);\n+                // execution path for named arguments or special request handlers\n+                UniValue params;\n+                if(gArgs.GetBoolArg(\"-named\", DEFAULT_NAMED)) {\n+                    params = RPCConvertNamedValues(method, args);\n+                } else {\n+                    params = RPCConvertValues(method, args);\n+                }\n+                const UniValue reply = ConnectAndCallRPC(rh.get(), method, params, wallet_name);\n+                // Parse reply\n+                UniValue result = find_value(reply, \"result\");\n+                const UniValue& error = find_value(reply, \"error\");\n+                if (error.isNull()) {\n+                    if (gArgs.IsArgSet(\"-getinfo\") && !gArgs.IsArgSet(\"-rpcwallet\")) {\n+                        GetWalletBalances(result); // fetch multiwallet balances and append to result\n+                    }\n+                    ParseResult(result, strPrint);\n+                } else {\n+                    ParseError(error, strPrint, nRet);\n+                }\n             }\n         }\n     } catch (const std::exception& e) {"
      }
    ]
  },
  {
    "sha": "28f3a40d41e4eef0f5836030a93d4c7e28967809",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGYzYTQwZDQxZTRlZWYwZjU4MzYwMzBhOTNkNGM3ZTI4OTY3ODA5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2020-10-30T16:09:58Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2021-03-10T08:30:33Z"
      },
      "message": "avoid atoi in nested.cpp",
      "tree": {
        "sha": "9ef7ca9cac626d29c824efe130910dd35536628b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ef7ca9cac626d29c824efe130910dd35536628b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28f3a40d41e4eef0f5836030a93d4c7e28967809",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28f3a40d41e4eef0f5836030a93d4c7e28967809",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28f3a40d41e4eef0f5836030a93d4c7e28967809",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28f3a40d41e4eef0f5836030a93d4c7e28967809/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "951e1b3f42bacc4601a5f4eeaa7b25e22b34a0f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/951e1b3f42bacc4601a5f4eeaa7b25e22b34a0f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/951e1b3f42bacc4601a5f4eeaa7b25e22b34a0f7"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "191a4d602938756ad14631360a3ea13b33be3bd0",
        "filename": "src/rpc/nested.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28f3a40d41e4eef0f5836030a93d4c7e28967809/src/rpc/nested.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28f3a40d41e4eef0f5836030a93d4c7e28967809/src/rpc/nested.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/nested.cpp?ref=28f3a40d41e4eef0f5836030a93d4c7e28967809",
        "patch": "@@ -109,10 +109,11 @@ bool ParseCommandLine(std::function<UniValue(const std::string&, const UniValue&\n                                 UniValue subelement;\n                                 if (lastResult.isArray())\n                                 {\n-                                    for(char argch: curarg)\n-                                        if (!IsDigit(argch))\n-                                            throw std::runtime_error(\"Invalid result query\");\n-                                    subelement = lastResult[atoi(curarg.c_str())];\n+                                    int index;\n+                                    if (!ParseInt32(curarg, &index)) {\n+                                        throw std::runtime_error(\"Invalid result query\");\n+                                    }\n+                                    subelement = lastResult[index];\n                                 }\n                                 else if (lastResult.isObject())\n                                     subelement = find_value(lastResult, curarg);"
      }
    ]
  },
  {
    "sha": "65ef219e6b883b3167674991e3a221a02a74b548",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWVmMjE5ZTZiODgzYjMxNjc2NzQ5OTFlM2EyMjFhMDJhNzRiNTQ4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2020-10-30T16:10:25Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2021-03-10T08:30:33Z"
      },
      "message": "Use CHECK_NONFATAL() instead of assert() in nested.cpp",
      "tree": {
        "sha": "8dc30f68978900d3599e36eabe0085d705e4ec3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dc30f68978900d3599e36eabe0085d705e4ec3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65ef219e6b883b3167674991e3a221a02a74b548",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65ef219e6b883b3167674991e3a221a02a74b548",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65ef219e6b883b3167674991e3a221a02a74b548",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65ef219e6b883b3167674991e3a221a02a74b548/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28f3a40d41e4eef0f5836030a93d4c7e28967809",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28f3a40d41e4eef0f5836030a93d4c7e28967809",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28f3a40d41e4eef0f5836030a93d4c7e28967809"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c32054ed171cb3fb07dd2ade9d03e667593a2aa1",
        "filename": "src/rpc/nested.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65ef219e6b883b3167674991e3a221a02a74b548/src/rpc/nested.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65ef219e6b883b3167674991e3a221a02a74b548/src/rpc/nested.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/nested.cpp?ref=65ef219e6b883b3167674991e3a221a02a74b548",
        "patch": "@@ -5,6 +5,7 @@\n #include <rpc/nested.h>\n \n #include <rpc/client.h>\n+#include <util/check.h>\n #include <util/strencodings.h>\n \n /**\n@@ -71,7 +72,7 @@ bool ParseCommandLine(std::function<UniValue(const std::string&, const UniValue&\n     auto close_out_params = [&]() {\n         if (nDepthInsideSensitive) {\n             if (!--nDepthInsideSensitive) {\n-                assert(filter_begin_pos);\n+                CHECK_NONFATAL(filter_begin_pos);\n                 filter_ranges.push_back(std::make_pair(filter_begin_pos, chpos));\n                 filter_begin_pos = 0;\n             }\n@@ -245,7 +246,7 @@ bool ParseCommandLine(std::function<UniValue(const std::string&, const UniValue&\n     }\n     if (pstrFilteredOut) {\n         if (STATE_COMMAND_EXECUTED == state) {\n-            assert(!stack.empty());\n+            CHECK_NONFATAL(!stack.empty());\n             close_out_params();\n         }\n         *pstrFilteredOut = strCommand;"
      }
    ]
  },
  {
    "sha": "027ff5033146cb953cc1f6313083be3e66b69492",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjdmZjUwMzMxNDZjYjk1M2NjMWY2MzEzMDgzYmUzZTY2YjY5NDky",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2020-10-30T16:10:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2021-03-10T08:30:33Z"
      },
      "message": "Extend bitcoin-cli test to cover nested calls",
      "tree": {
        "sha": "92b1b7d9a6e45506529e13226f7cedd248fdb5fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92b1b7d9a6e45506529e13226f7cedd248fdb5fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/027ff5033146cb953cc1f6313083be3e66b69492",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/027ff5033146cb953cc1f6313083be3e66b69492",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/027ff5033146cb953cc1f6313083be3e66b69492",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/027ff5033146cb953cc1f6313083be3e66b69492/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65ef219e6b883b3167674991e3a221a02a74b548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65ef219e6b883b3167674991e3a221a02a74b548",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65ef219e6b883b3167674991e3a221a02a74b548"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "18b3de26e6c340eb71fe9e43dcf39c6fcb75b860",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/027ff5033146cb953cc1f6313083be3e66b69492/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/027ff5033146cb953cc1f6313083be3e66b69492/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=027ff5033146cb953cc1f6313083be3e66b69492",
        "patch": "@@ -24,6 +24,7 @@\n TOO_MANY_ARGS = 'error: too many arguments (maximum 2 for nblocks and maxtries)'\n WALLET_NOT_LOADED = 'Requested wallet does not exist or is not loaded'\n WALLET_NOT_SPECIFIED = 'Wallet file not specified'\n+METHOD_NOT_FOUND = 'Method not found'\n \n class TestBitcoinCli(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -234,6 +235,15 @@ def run_test(self):\n             self.log.info(\"*** Wallet not compiled; cli getwalletinfo and -getinfo wallet tests skipped\")\n             self.nodes[0].generate(25)  # maintain block parity with the wallet_compiled conditional branch\n \n+        self.log.info(\"Test nested command\")\n+        blocks = self.nodes[0].cli().send_cli('getblockchaininfo()[blocks]')\n+        height = self.nodes[0].cli().send_cli('getblock(getblock(getblockchaininfo()[bestblockhash])[previousblockhash])[height]')\n+        assert_equal(blocks-1, height)\n+        assert_raises_rpc_error(-32601, METHOD_NOT_FOUND, self.nodes[0].cli('getblock(unknownmethod())').echo)\n+        assert_equal(self.nodes[0].cli().send_cli('getblock(getbestblockhash())[hash]'), self.nodes[0].cli().send_cli('getbestblockhash'))\n+        assert_raises_rpc_error(-32601, METHOD_NOT_FOUND, self.nodes[0].cli('unknown').echo)\n+        assert_raises_rpc_error(-32601, METHOD_NOT_FOUND, self.nodes[0].cli('unknown()').echo)\n+\n         self.log.info(\"Test -version with node stopped\")\n         self.stop_node(0)\n         cli_response = self.nodes[0].cli('-version').send_cli()"
      }
    ]
  }
]