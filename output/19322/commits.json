[
  {
    "sha": "f52d403b81e758e9bc33847560b5740b22d95fff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTJkNDAzYjgxZTc1OGU5YmMzMzg0NzU2MGI1NzQwYjIyZDk1ZmZm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-18T19:19:12Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-18T19:45:48Z"
      },
      "message": "[net] split PushInventory()\n\nPushInventory() is currently called with a CInv object, which can be a\nMSG_TX or MSG_BLOCK. PushInventory() only uses the type to determine\nwhether to add the hash to setInventoryTxToSend or\nvInventoryBlockToSend.\n\nSince the caller always knows what type of inventory they're pushing,\nthe CInv is wastefully constructed and thrown away, and tx/block relay\nis being split out, we split the function into PushTxInventory() and\nPushBlockInventory().",
      "tree": {
        "sha": "3b66bcbf2f9739fe582a98e3c7498d1f2d55221f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b66bcbf2f9739fe582a98e3c7498d1f2d55221f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f52d403b81e758e9bc33847560b5740b22d95fff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f52d403b81e758e9bc33847560b5740b22d95fff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f52d403b81e758e9bc33847560b5740b22d95fff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f52d403b81e758e9bc33847560b5740b22d95fff/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2bcb99c1d113ac090914e87b6f5676b5b55f82e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2bcb99c1d113ac090914e87b6f5676b5b55f82e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2bcb99c1d113ac090914e87b6f5676b5b55f82e"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 16,
      "deletions": 15
    },
    "files": [
      {
        "sha": "9c3a95130cc7b94dc0335bf84351a40a0fed2596",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f52d403b81e758e9bc33847560b5740b22d95fff/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f52d403b81e758e9bc33847560b5740b22d95fff/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f52d403b81e758e9bc33847560b5740b22d95fff",
        "patch": "@@ -973,19 +973,21 @@ class CNode\n         }\n     }\n \n-    void PushInventory(const CInv& inv)\n+    void PushTxInventory(const uint256& hash)\n     {\n-        if (inv.type == MSG_TX && m_tx_relay != nullptr) {\n-            LOCK(m_tx_relay->cs_tx_inventory);\n-            if (!m_tx_relay->filterInventoryKnown.contains(inv.hash)) {\n-                m_tx_relay->setInventoryTxToSend.insert(inv.hash);\n-            }\n-        } else if (inv.type == MSG_BLOCK) {\n-            LOCK(cs_inventory);\n-            vInventoryBlockToSend.push_back(inv.hash);\n+        if (m_tx_relay == nullptr) return;\n+        LOCK(m_tx_relay->cs_tx_inventory);\n+        if (!m_tx_relay->filterInventoryKnown.contains(hash)) {\n+            m_tx_relay->setInventoryTxToSend.insert(hash);\n         }\n     }\n \n+    void PushBlockInventory(const uint256& hash)\n+    {\n+        LOCK(cs_inventory);\n+        vInventoryBlockToSend.push_back(hash);\n+    }\n+\n     void PushBlockHash(const uint256 &hash)\n     {\n         LOCK(cs_inventory);"
      },
      {
        "sha": "c1205a663a4093a9395c551bd2c6c880ba5fea3c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f52d403b81e758e9bc33847560b5740b22d95fff/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f52d403b81e758e9bc33847560b5740b22d95fff/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f52d403b81e758e9bc33847560b5740b22d95fff",
        "patch": "@@ -1419,10 +1419,9 @@ bool static AlreadyHave(const CInv& inv, const CTxMemPool& mempool) EXCLUSIVE_LO\n \n void RelayTransaction(const uint256& txid, const CConnman& connman)\n {\n-    CInv inv(MSG_TX, txid);\n-    connman.ForEachNode([&inv](CNode* pnode)\n+    connman.ForEachNode([&txid](CNode* pnode)\n     {\n-        pnode->PushInventory(inv);\n+        pnode->PushTxInventory(txid);\n     });\n }\n \n@@ -1608,7 +1607,7 @@ void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, c\n         // Trigger the peer node to send a getblocks request for the next batch of inventory\n         if (inv.hash == pfrom.hashContinue)\n         {\n-            // Bypass PushInventory, this must send even if redundant,\n+            // Bypass PushBlockInventory, this must send even if redundant,\n             // and we want it right after the last block so they don't\n             // wait for other stuff first.\n             std::vector<CInv> vInv;\n@@ -2657,7 +2656,7 @@ bool ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRec\n                 LogPrint(BCLog::NET, \" getblocks stopping, pruned or too old block at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n                 break;\n             }\n-            pfrom.PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n+            pfrom.PushBlockInventory(pindex->GetBlockHash());\n             if (--nLimit <= 0)\n             {\n                 // When this block is requested, we'll send an inv that'll\n@@ -4081,7 +4080,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n \n                     // If the peer's chain has this block, don't inv it back.\n                     if (!PeerHasHeader(&state, pindex)) {\n-                        pto->PushInventory(CInv(MSG_BLOCK, hashToAnnounce));\n+                        pto->PushBlockInventory(hashToAnnounce);\n                         LogPrint(BCLog::NET, \"%s: sending inv peer=%d hash=%s\\n\", __func__,\n                             pto->GetId(), hashToAnnounce.ToString());\n                     }"
      }
    ]
  }
]