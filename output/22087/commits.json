[
  {
    "sha": "62cdef22044708e3b3576421bbf2c6dc6c9e7615",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmNkZWYyMjA0NDcwOGUzYjM1NzY0MjFiYmYyYzZkYzZjOWU3NjE1",
    "commit": {
      "author": {
        "name": "amadeuszpawlik",
        "email": "apawlik@protonmail.com",
        "date": "2021-05-27T11:53:42Z"
      },
      "committer": {
        "name": "amadeuszpawlik",
        "email": "apawlik@protonmail.com",
        "date": "2021-08-27T13:50:25Z"
      },
      "message": "Add new `SplitHostPort` function where both out params are strings\n\nReturning portOut as uint16_t hides the validation of the port in\n`ParseUInt16(...)`. Split the current function into two steps:\n1) Split socket address into host:port strings\n2) Parse the port as uint16_t\nAdd suitable test for the new `SplitHostPort` function.\nAdd doxygen description to the `SplitHostPort` functions.",
      "tree": {
        "sha": "4d51c32bd63fb2577e358ff3adb96c9a54cb3e9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d51c32bd63fb2577e358ff3adb96c9a54cb3e9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62cdef22044708e3b3576421bbf2c6dc6c9e7615",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEvSKeW3MFn9tKpWqZ8ososzXVzWwFAmEo7awACgkQ8ososzXV\nzWz0AQwAsNsgE0eqH2ZjkrAhWN5mdTr7agJ6SUR6gtUno+YtJwxHRo7Aj1t6A8zX\nAjFuiYcBK79tQKRZMqbpYrv08zbWYmZKbgE64L85eaYzCGn6LjZk8ywt5nf0Z3HA\nGMhMKrIx9DT4fwDfd424TIWGnp3unAK8prsDVDzM1sJNNxHAJMX3zI0qlZ8fwj91\nAjFITlauphr5Ts9/qMsHx0PJOtHlZmZZJ+qBf4O0Puo8DyVqslbY0jc2BFZIvnwh\n1sjV87BVZjMKWfPamY4Vm1ST3F+NX9YKI56nF1r6mVdpd22mEQpOAOBBShmfgT/+\nE6wNjsOrky3vlMCwQb/NlfzwCOkad0Xi/3UeiiAcJmHhGtVHxg2gPOSuu5TThLHG\n7HYUl1TWq+pUlCaRtDdbjIjbtmiAmpGWVPWRzIyu3FMQOhUmTqRsZiV4CveOgNib\nNze+8GTfIAa6b1PhsXRscL5gaiZLpDX93YePE4I4nBLSx95O6tDO/Nsi1JDJjCE+\nB9TTcv17\n=yK7B\n-----END PGP SIGNATURE-----",
        "payload": "tree 4d51c32bd63fb2577e358ff3adb96c9a54cb3e9b\nparent 33707a2a8828c68e3c0586bdadea52c84873d386\nauthor amadeuszpawlik <apawlik@protonmail.com> 1622116422 +0200\ncommitter amadeuszpawlik <apawlik@protonmail.com> 1630072225 +0200\n\nAdd new `SplitHostPort` function where both out params are strings\n\nReturning portOut as uint16_t hides the validation of the port in\n`ParseUInt16(...)`. Split the current function into two steps:\n1) Split socket address into host:port strings\n2) Parse the port as uint16_t\nAdd suitable test for the new `SplitHostPort` function.\nAdd doxygen description to the `SplitHostPort` functions.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62cdef22044708e3b3576421bbf2c6dc6c9e7615",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62cdef22044708e3b3576421bbf2c6dc6c9e7615",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62cdef22044708e3b3576421bbf2c6dc6c9e7615/comments",
    "author": {
      "login": "amadeuszpawlik",
      "id": 35263201,
      "node_id": "MDQ6VXNlcjM1MjYzMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35263201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amadeuszpawlik",
      "html_url": "https://github.com/amadeuszpawlik",
      "followers_url": "https://api.github.com/users/amadeuszpawlik/followers",
      "following_url": "https://api.github.com/users/amadeuszpawlik/following{/other_user}",
      "gists_url": "https://api.github.com/users/amadeuszpawlik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amadeuszpawlik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amadeuszpawlik/subscriptions",
      "organizations_url": "https://api.github.com/users/amadeuszpawlik/orgs",
      "repos_url": "https://api.github.com/users/amadeuszpawlik/repos",
      "events_url": "https://api.github.com/users/amadeuszpawlik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amadeuszpawlik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amadeuszpawlik",
      "id": 35263201,
      "node_id": "MDQ6VXNlcjM1MjYzMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35263201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amadeuszpawlik",
      "html_url": "https://github.com/amadeuszpawlik",
      "followers_url": "https://api.github.com/users/amadeuszpawlik/followers",
      "following_url": "https://api.github.com/users/amadeuszpawlik/following{/other_user}",
      "gists_url": "https://api.github.com/users/amadeuszpawlik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amadeuszpawlik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amadeuszpawlik/subscriptions",
      "organizations_url": "https://api.github.com/users/amadeuszpawlik/orgs",
      "repos_url": "https://api.github.com/users/amadeuszpawlik/repos",
      "events_url": "https://api.github.com/users/amadeuszpawlik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amadeuszpawlik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33707a2a8828c68e3c0586bdadea52c84873d386",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33707a2a8828c68e3c0586bdadea52c84873d386",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33707a2a8828c68e3c0586bdadea52c84873d386"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 71,
      "deletions": 5
    },
    "files": [
      {
        "sha": "532163a3cff485e836a8610a26e43a1a596adc09",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 1,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62cdef22044708e3b3576421bbf2c6dc6c9e7615/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62cdef22044708e3b3576421bbf2c6dc6c9e7615/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=62cdef22044708e3b3576421bbf2c6dc6c9e7615",
        "patch": "@@ -91,7 +91,14 @@ bool static TestSplitHost(const std::string& test, const std::string& host, uint\n     return hostOut == host && port == portOut;\n }\n \n-BOOST_AUTO_TEST_CASE(netbase_splithost)\n+bool static TestSplitHost(const std::string& test, const std::string& host, const std::string& port)\n+{\n+    std::string hostOut, portOut;\n+    SplitHostPort(test, portOut, hostOut);\n+    return hostOut == host && port == portOut;\n+}\n+\n+BOOST_AUTO_TEST_CASE(netbase_splithost_uint16_t)\n {\n     BOOST_CHECK(TestSplitHost(\"www.bitcoincore.org\", \"www.bitcoincore.org\", 0));\n     BOOST_CHECK(TestSplitHost(\"[www.bitcoincore.org]\", \"www.bitcoincore.org\", 0));\n@@ -108,6 +115,39 @@ BOOST_AUTO_TEST_CASE(netbase_splithost)\n     BOOST_CHECK(TestSplitHost(\":8333\", \"\", 8333));\n     BOOST_CHECK(TestSplitHost(\"[]:8333\", \"\", 8333));\n     BOOST_CHECK(TestSplitHost(\"\", \"\", 0));\n+    BOOST_CHECK(TestSplitHost(\":65535\", \"\", 65535));\n+    BOOST_CHECK(TestSplitHost(\":65536\", \"\", 0));\n+    BOOST_CHECK(TestSplitHost(\":-1\", \"\", 0));\n+    BOOST_CHECK(TestSplitHost(\"[]:70001\", \"\", 0));\n+    BOOST_CHECK(TestSplitHost(\"[]:-1\", \"\", 0));\n+    BOOST_CHECK(TestSplitHost(\"127.0.0.1:65536\", \"127.0.0.1\", 0));\n+    BOOST_CHECK(TestSplitHost(\"www.bitcoincore.org:65536\", \"www.bitcoincore.org\", 0));\n+}\n+\n+BOOST_AUTO_TEST_CASE(netbase_splithost_string)\n+{\n+    BOOST_CHECK(TestSplitHost(\"www.bitcoincore.org\", \"www.bitcoincore.org\", \"\"));\n+    BOOST_CHECK(TestSplitHost(\"[www.bitcoincore.org]\", \"www.bitcoincore.org\", \"\"));\n+    BOOST_CHECK(TestSplitHost(\"www.bitcoincore.org:80\", \"www.bitcoincore.org\", \"80\"));\n+    BOOST_CHECK(TestSplitHost(\"[www.bitcoincore.org]:80\", \"www.bitcoincore.org\", \"80\"));\n+    BOOST_CHECK(TestSplitHost(\"127.0.0.1\", \"127.0.0.1\", \"\"));\n+    BOOST_CHECK(TestSplitHost(\"127.0.0.1:8333\", \"127.0.0.1\", \"8333\"));\n+    BOOST_CHECK(TestSplitHost(\"[127.0.0.1]\", \"127.0.0.1\", \"\"));\n+    BOOST_CHECK(TestSplitHost(\"[127.0.0.1]:8333\", \"127.0.0.1\", \"8333\"));\n+    BOOST_CHECK(TestSplitHost(\"::ffff:127.0.0.1\", \"::ffff:127.0.0.1\", \"\"));\n+    BOOST_CHECK(TestSplitHost(\"[::ffff:127.0.0.1]:8333\", \"::ffff:127.0.0.1\", \"8333\"));\n+    BOOST_CHECK(TestSplitHost(\"[::]:8333\", \"::\", \"8333\"));\n+    BOOST_CHECK(TestSplitHost(\"::8333\", \"::8333\", \"\"));\n+    BOOST_CHECK(TestSplitHost(\":8333\", \"\", \"8333\"));\n+    BOOST_CHECK(TestSplitHost(\"[]:8333\", \"\", \"8333\"));\n+    BOOST_CHECK(TestSplitHost(\"\", \"\", 0));\n+    BOOST_CHECK(TestSplitHost(\":65535\", \"\", \"65535\"));\n+    BOOST_CHECK(TestSplitHost(\":65536\", \"\", \"65536\"));\n+    BOOST_CHECK(TestSplitHost(\":-1\", \"\", \"-1\"));\n+    BOOST_CHECK(TestSplitHost(\"[]:70001\", \"\", \"70001\"));\n+    BOOST_CHECK(TestSplitHost(\"[]:-1\", \"\", \"-1\"));\n+    BOOST_CHECK(TestSplitHost(\"127.0.0.1:65536\", \"127.0.0.1\", \"65536\"));\n+    BOOST_CHECK(TestSplitHost(\"www.bitcoincore.org:65536\", \"www.bitcoincore.org\", \"65536\"));\n }\n \n bool static TestParse(std::string src, std::string canon)"
      },
      {
        "sha": "a2875c8fe168c109e444870b30a1a72c3a2580ea",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62cdef22044708e3b3576421bbf2c6dc6c9e7615/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62cdef22044708e3b3576421bbf2c6dc6c9e7615/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=62cdef22044708e3b3576421bbf2c6dc6c9e7615",
        "patch": "@@ -107,18 +107,17 @@ std::vector<unsigned char> ParseHex(const std::string& str)\n     return ParseHex(str.c_str());\n }\n \n-void SplitHostPort(std::string in, uint16_t& portOut, std::string& hostOut)\n+void SplitHostPort(std::string in, std::string& portOut, std::string& hostOut)\n {\n     size_t colon = in.find_last_of(':');\n     // if a : is found, and it either follows a [...], or no other : is in the string, treat it as port separator\n     bool fHaveColon = colon != in.npos;\n     bool fBracketed = fHaveColon && (in[0] == '[' && in[colon - 1] == ']'); // if there is a colon, and in[0]=='[', colon is not 0, so in[colon-1] is safe\n     bool fMultiColon = fHaveColon && (in.find_last_of(':', colon - 1) != in.npos);\n     if (fHaveColon && (colon == 0 || fBracketed || !fMultiColon)) {\n-        uint16_t n;\n-        if (ParseUInt16(in.substr(colon + 1), &n)) {\n+        if (!in.substr(colon + 1).empty()) {\n+            portOut = in.substr(colon+1);\n             in = in.substr(0, colon);\n-            portOut = n;\n         }\n     }\n     if (in.size() > 0 && in[0] == '[' && in[in.size() - 1] == ']') {\n@@ -128,6 +127,16 @@ void SplitHostPort(std::string in, uint16_t& portOut, std::string& hostOut)\n     }\n }\n \n+void SplitHostPort(std::string in, uint16_t& portOut, std::string& hostOut)\n+{\n+    std::string portStr;\n+    SplitHostPort(in, portStr, hostOut);\n+\n+    uint16_t n;\n+    if (!portStr.empty() && ParseUInt16(portStr, &n))\n+        portOut = n;\n+}\n+\n std::string EncodeBase64(Span<const unsigned char> input)\n {\n     static const char *pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";"
      },
      {
        "sha": "f9388a232c281adaf51200c6b585cab1bf819567",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62cdef22044708e3b3576421bbf2c6dc6c9e7615/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62cdef22044708e3b3576421bbf2c6dc6c9e7615/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=62cdef22044708e3b3576421bbf2c6dc6c9e7615",
        "patch": "@@ -65,6 +65,23 @@ std::string EncodeBase32(Span<const unsigned char> input, bool pad = true);\n  */\n std::string EncodeBase32(const std::string& str, bool pad = true);\n \n+\n+/**\n+ * Splits socket address string into host and port strings.\n+ *\n+ * @param[in] in        The socket address string to split.\n+ * @param[out] portOut  Port-portion of the input, if found.\n+ * @param[out] hostOut  Host-portion of the input, if found.\n+ */\n+void SplitHostPort(std::string in, std::string& portOut, std::string& hostOut);\n+/**\n+ * Splits socket address string into host string and port value.\n+ * Validates port value.\n+ *\n+ * @param[in] in        The socket address string to split.\n+ * @param[out] portOut  Port-portion of the input, if found and parsable.\n+ * @param[out] hostOut  Host-portion of the input, if found.\n+ */\n void SplitHostPort(std::string in, uint16_t& portOut, std::string& hostOut);\n int64_t atoi64(const std::string& str);\n int atoi(const std::string& str);"
      }
    ]
  },
  {
    "sha": "1a07be7e512ab540cdf0fa24fa60a753b12ec630",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTA3YmU3ZTUxMmFiNTQwY2RmMGZhMjRmYTYwYTc1M2IxMmVjNjMw",
    "commit": {
      "author": {
        "name": "amadeuszpawlik",
        "email": "apawlik@protonmail.com",
        "date": "2021-05-27T12:07:35Z"
      },
      "committer": {
        "name": "amadeuszpawlik",
        "email": "apawlik@protonmail.com",
        "date": "2021-08-27T13:50:46Z"
      },
      "message": "Validate `port` options at init\n\nCheck `port` options for invalid values (ports are parsed as uint16, so\nin practice values >65535 are invalid). This allows for an early\nrejection of faulty values and an informative message to the user.\n\nAdd helper function `HasInvalidPort` + appropriate test.\n_Invalid_ rather than _Valid_ because we are interested in a case when a\nport portion is _defined_ in the input string, and that port has an\n_invalid_ value.",
      "tree": {
        "sha": "7be197c4e2a0070b8817e97d1b58c4f0e9ed7da5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7be197c4e2a0070b8817e97d1b58c4f0e9ed7da5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a07be7e512ab540cdf0fa24fa60a753b12ec630",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEvSKeW3MFn9tKpWqZ8ososzXVzWwFAmEo7bYACgkQ8ososzXV\nzWxULwv/XhlfsX2Tp07S2O3hA1FkXLWwnggCQVZRM722Q2EUw/MJAuj3eewuq3sF\nVw17S2ZXRTeb6kNnwfIHNdxF0nj1UFKM8ET7DjBrnGqe2pcXyAcUMAyxADA5vSlv\nrxithk8oWid+eWGqfk88DnbyEh8SOMnH/Nlj2qiE3pArlw3sJRcgiBglIVqcsSOT\noAR8EiwGUmHusO+EVq6X4YuTJJQfyXSrLTZz77p/OUT9gFnD9Qe2LTP46/HcoC/l\nORTfxhMq+++YuEv4v7ws7lsy8VZZZH1biSgu/zJIv6WpyoOH5vscUIRXlahbodAd\nqrVkGUsUmhpMU+I8xcDDKOVs/VSrClhd6gsTQBS610d+vtAaZpw+pbw9lQOgRjfD\nTByD/GkO+jfhpz5G1Kwcj4IxFsVKRLhU2wJ9FuqeKyGz7DxMCPePJazobVFAD72A\nPXgQK8igQbG4y7hT9ZSxeEwRQoGiUWJcjHQS1nnHpRIzH58vxewWQa/GiXb+Z66X\nEBjUpE3O\n=o3gD\n-----END PGP SIGNATURE-----",
        "payload": "tree 7be197c4e2a0070b8817e97d1b58c4f0e9ed7da5\nparent 62cdef22044708e3b3576421bbf2c6dc6c9e7615\nauthor amadeuszpawlik <apawlik@protonmail.com> 1622117255 +0200\ncommitter amadeuszpawlik <apawlik@protonmail.com> 1630072246 +0200\n\nValidate `port` options at init\n\nCheck `port` options for invalid values (ports are parsed as uint16, so\nin practice values >65535 are invalid). This allows for an early\nrejection of faulty values and an informative message to the user.\n\nAdd helper function `HasInvalidPort` + appropriate test.\n_Invalid_ rather than _Valid_ because we are interested in a case when a\nport portion is _defined_ in the input string, and that port has an\n_invalid_ value.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a07be7e512ab540cdf0fa24fa60a753b12ec630",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a07be7e512ab540cdf0fa24fa60a753b12ec630",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a07be7e512ab540cdf0fa24fa60a753b12ec630/comments",
    "author": {
      "login": "amadeuszpawlik",
      "id": 35263201,
      "node_id": "MDQ6VXNlcjM1MjYzMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35263201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amadeuszpawlik",
      "html_url": "https://github.com/amadeuszpawlik",
      "followers_url": "https://api.github.com/users/amadeuszpawlik/followers",
      "following_url": "https://api.github.com/users/amadeuszpawlik/following{/other_user}",
      "gists_url": "https://api.github.com/users/amadeuszpawlik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amadeuszpawlik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amadeuszpawlik/subscriptions",
      "organizations_url": "https://api.github.com/users/amadeuszpawlik/orgs",
      "repos_url": "https://api.github.com/users/amadeuszpawlik/repos",
      "events_url": "https://api.github.com/users/amadeuszpawlik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amadeuszpawlik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amadeuszpawlik",
      "id": 35263201,
      "node_id": "MDQ6VXNlcjM1MjYzMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35263201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amadeuszpawlik",
      "html_url": "https://github.com/amadeuszpawlik",
      "followers_url": "https://api.github.com/users/amadeuszpawlik/followers",
      "following_url": "https://api.github.com/users/amadeuszpawlik/following{/other_user}",
      "gists_url": "https://api.github.com/users/amadeuszpawlik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amadeuszpawlik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amadeuszpawlik/subscriptions",
      "organizations_url": "https://api.github.com/users/amadeuszpawlik/orgs",
      "repos_url": "https://api.github.com/users/amadeuszpawlik/repos",
      "events_url": "https://api.github.com/users/amadeuszpawlik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amadeuszpawlik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62cdef22044708e3b3576421bbf2c6dc6c9e7615",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62cdef22044708e3b3576421bbf2c6dc6c9e7615",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62cdef22044708e3b3576421bbf2c6dc6c9e7615"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 106,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bf6160ac8ac23afe05ef123f5bcf2bf94a1a012d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a07be7e512ab540cdf0fa24fa60a753b12ec630/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a07be7e512ab540cdf0fa24fa60a753b12ec630/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1a07be7e512ab540cdf0fa24fa60a753b12ec630",
        "patch": "@@ -1211,6 +1211,64 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                      chainman, *node.mempool, ignores_incoming_txs);\n     RegisterValidationInterface(node.peerman.get());\n \n+    // Check port numbers\n+    if (args.IsArgSet(\"-port\")) {\n+        uint64_t portIn = args.GetArg(\"-port\", 0);\n+        if (portIn > std::numeric_limits<uint16_t>::max())\n+            return InitError(strprintf(_(\"Invalid port specified in -port: '%d'\"), portIn));\n+    }\n+    if (args.IsArgSet(\"-rpcport\")) {\n+        uint64_t portIn = args.GetArg(\"-rpcport\", 0);\n+        if (portIn > std::numeric_limits<uint16_t>::max())\n+            return InitError(strprintf(_(\"Invalid port specified in -rpcport: '%d'\"), portIn));\n+    }\n+    for (const std::string& socketAddr : args.GetArgs(\"-bind\")) {\n+        if (HasInvalidPort(socketAddr))\n+            return InitError(strprintf(_(\"Invalid port specified in -bind: '%s'\"), socketAddr));\n+    }\n+    for (const std::string& socketAddr : args.GetArgs(\"-i2psam\")) {\n+        if (HasInvalidPort(socketAddr))\n+            return InitError(strprintf(_(\"Invalid port specified in -i2psam: '%s'\"), socketAddr));\n+    }\n+    for (const std::string& socketAddr : args.GetArgs(\"-onion\")) {\n+        if (HasInvalidPort(socketAddr))\n+            return InitError(strprintf(_(\"Invalid port specified in -onion: '%s'\"), socketAddr));\n+    }\n+    for (const std::string& socketAddr : args.GetArgs(\"-proxy\")) {\n+        if (HasInvalidPort(socketAddr))\n+            return InitError(strprintf(_(\"Invalid port specified in -proxy: '%s'\"), socketAddr));\n+    }\n+    for (const std::string& socketAddr : args.GetArgs(\"-rpcbind\")) {\n+        if (HasInvalidPort(socketAddr))\n+            return InitError(strprintf(_(\"Invalid port specified in -rpcbind: '%s'\"), socketAddr));\n+    }\n+    for (const std::string& socketAddr : args.GetArgs(\"-torcontrol\")) {\n+        if (HasInvalidPort(socketAddr))\n+            return InitError(strprintf(_(\"Invalid port specified in -torcontrol: '%s'\"), socketAddr));\n+    }\n+    for (const std::string& socketAddr : args.GetArgs(\"-whitebind\")) {\n+        if (HasInvalidPort(socketAddr))\n+            return InitError(strprintf(_(\"Invalid port specified in -whitebind: '%s'\"), socketAddr));\n+    }\n+    for (const std::string& socketAddr : args.GetArgs(\"-zmqpubhashblock\")) {\n+        if (HasInvalidPort(socketAddr))\n+            return InitError(strprintf(_(\"Invalid port specified in -zmqpubhashblock: '%s'\"), socketAddr));\n+    }\n+    for (const std::string& socketAddr : args.GetArgs(\"-zmqpubhashtx\")) {\n+        if (HasInvalidPort(socketAddr))\n+            return InitError(strprintf(_(\"Invalid port specified in -zmqpubhashtx: '%s'\"), socketAddr));\n+    }\n+    for (const std::string& socketAddr : args.GetArgs(\"-zmqpubrawblock\")) {\n+        if (HasInvalidPort(socketAddr))\n+            return InitError(strprintf(_(\"Invalid port specified in -zmqpubrawblock: '%s'\"), socketAddr));\n+    }\n+#if ENABLE_ZMQ\n+    for (const std::string& socketAddr : args.GetArgs(\"-zmqpubsequence\")) {\n+        if (HasInvalidPort(socketAddr))\n+            return InitError(strprintf(_(\"Invalid port specified in -zmqpubsequence: '%s'\"), socketAddr));\n+    }\n+#endif\n+\n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n     for (const std::string& cmt : args.GetArgs(\"-uacomment\")) {"
      },
      {
        "sha": "9d973c4ddd88a13553bea4ce646bcec407b16eba",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a07be7e512ab540cdf0fa24fa60a753b12ec630/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a07be7e512ab540cdf0fa24fa60a753b12ec630/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=1a07be7e512ab540cdf0fa24fa60a753b12ec630",
        "patch": "@@ -150,6 +150,37 @@ BOOST_AUTO_TEST_CASE(netbase_splithost_string)\n     BOOST_CHECK(TestSplitHost(\"www.bitcoincore.org:65536\", \"www.bitcoincore.org\", \"65536\"));\n }\n \n+bool static TestHasInvalidPort(const std::string& test, bool invalid)\n+{\n+    return HasInvalidPort(test) == invalid;\n+}\n+\n+BOOST_AUTO_TEST_CASE(netbase_hasinvalidport)\n+{\n+    BOOST_CHECK(TestHasInvalidPort(\"www.bitcoincore.org\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\"[www.bitcoincore.org]\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\"www.bitcoincore.org:80\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\"[www.bitcoincore.org]:80\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\"127.0.0.1\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\"127.0.0.1:8333\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\"[127.0.0.1]\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\"[127.0.0.1]:8333\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\"::ffff:127.0.0.1\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\"[::ffff:127.0.0.1]:8333\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\"[::]:8333\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\"::8333\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\":8333\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\"[]:8333\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\"\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\":65535\", false));\n+    BOOST_CHECK(TestHasInvalidPort(\":65536\", true));\n+    BOOST_CHECK(TestHasInvalidPort(\":-1\", true));\n+    BOOST_CHECK(TestHasInvalidPort(\"[]:70001\", true));\n+    BOOST_CHECK(TestHasInvalidPort(\"[]:-1\", true));\n+    BOOST_CHECK(TestHasInvalidPort(\"127.0.0.1:65536\", true));\n+    BOOST_CHECK(TestHasInvalidPort(\"www.bitcoincore.org:65536\", true));\n+}\n+\n bool static TestParse(std::string src, std::string canon)\n {\n     CService addr(LookupNumeric(src, 65535));"
      },
      {
        "sha": "89037a628a8ace0db9247811464218e084d60dfc",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a07be7e512ab540cdf0fa24fa60a753b12ec630/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a07be7e512ab540cdf0fa24fa60a753b12ec630/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=1a07be7e512ab540cdf0fa24fa60a753b12ec630",
        "patch": "@@ -137,6 +137,15 @@ void SplitHostPort(std::string in, uint16_t& portOut, std::string& hostOut)\n         portOut = n;\n }\n \n+bool HasInvalidPort(std::string in)\n+{\n+    std::string host, port;\n+    SplitHostPort(in, port, host);\n+    if (!port.empty() && !ParseUInt16(port, 0))\n+        return true;\n+    return false;\n+}\n+\n std::string EncodeBase64(Span<const unsigned char> input)\n {\n     static const char *pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";"
      },
      {
        "sha": "93daabe0ec5979a757012a0fb2f0d7e547906788",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a07be7e512ab540cdf0fa24fa60a753b12ec630/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a07be7e512ab540cdf0fa24fa60a753b12ec630/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=1a07be7e512ab540cdf0fa24fa60a753b12ec630",
        "patch": "@@ -83,6 +83,14 @@ void SplitHostPort(std::string in, std::string& portOut, std::string& hostOut);\n  * @param[out] hostOut  Host-portion of the input, if found.\n  */\n void SplitHostPort(std::string in, uint16_t& portOut, std::string& hostOut);\n+/**\n+ * Checks whether socket address string has an invalid port portion.\n+ *\n+ * @param[in] in        Socket address to test.\n+ * @return              true if port portion is defined but outside its allowed range;\n+ *                      false otherwise;\n+ */\n+bool HasInvalidPort(std::string in);\n int64_t atoi64(const std::string& str);\n int atoi(const std::string& str);\n "
      }
    ]
  },
  {
    "sha": "3309b68553a4b5ac42688ae9b983034204f2c500",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzA5YjY4NTUzYTRiNWFjNDI2ODhhZTliOTgzMDM0MjA0ZjJjNTAw",
    "commit": {
      "author": {
        "name": "amadeuszpawlik",
        "email": "apawlik@protonmail.com",
        "date": "2021-06-03T16:01:26Z"
      },
      "committer": {
        "name": "amadeuszpawlik",
        "email": "apawlik@protonmail.com",
        "date": "2021-08-27T13:50:46Z"
      },
      "message": "Validate port in `addpeeraddress`\n\nCheck port input in `addpeeraddress` (valid if 0<= port <=65535). Reject faulty\nvalues and serve an informative message to the user.",
      "tree": {
        "sha": "20e7df941e753d54849ae5bacf8b8575fb9ce313",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20e7df941e753d54849ae5bacf8b8575fb9ce313"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3309b68553a4b5ac42688ae9b983034204f2c500",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEvSKeW3MFn9tKpWqZ8ososzXVzWwFAmEo7bYACgkQ8ososzXV\nzWwitQv/XF2HLuI0cc1E5H1l9b68Z8rr9SymNkp/l6nRlhzYworrqo01CSEPsXEA\n3anKI2wLqF7rXvFqeIUIATEcAW5EEhsDbvumAFSnqHs4bvMWTi6GAWQOprwkUUFD\nPRpQZrzfcNYKnv8ohAmmdCjV6DhyWvm25yUYtgLp+LZ6imNkf/2ADEgNNYGCcMHF\n0Q996ctBmqpv78/ufeyydnDZPW6DCt3/+8W8JRaHm2GovWf2x7TvFvZyXLC94Gpt\nYwuzjAYJjer0KvqMkcLV7l7Ofe4amLC5ghAUlQuIbaTX8AKcUC4ld+dpi2c2WhFg\n1FXEhfCw0TQfTYs7Vbm7Ths2nGWQ5Rr/ef2R1zGP2WebOPtBJ4X0IX0JJPEFULw0\nBkRsrnrQ4xoa1rb+RoBk5hXgU9qpLM2KzSBOZ4C4bc3k41L1yth7gF0Uk1fyoKPR\ntlhjS4bBicEWKHwM9JBKaeihmwATP8ljEPVGG/SCkxWq1hn1UC6tQUpemYIXrSW0\nPPWMSb2V\n=EVuP\n-----END PGP SIGNATURE-----",
        "payload": "tree 20e7df941e753d54849ae5bacf8b8575fb9ce313\nparent 1a07be7e512ab540cdf0fa24fa60a753b12ec630\nauthor amadeuszpawlik <apawlik@protonmail.com> 1622736086 +0200\ncommitter amadeuszpawlik <apawlik@protonmail.com> 1630072246 +0200\n\nValidate port in `addpeeraddress`\n\nCheck port input in `addpeeraddress` (valid if 0<= port <=65535). Reject faulty\nvalues and serve an informative message to the user.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3309b68553a4b5ac42688ae9b983034204f2c500",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3309b68553a4b5ac42688ae9b983034204f2c500",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3309b68553a4b5ac42688ae9b983034204f2c500/comments",
    "author": {
      "login": "amadeuszpawlik",
      "id": 35263201,
      "node_id": "MDQ6VXNlcjM1MjYzMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35263201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amadeuszpawlik",
      "html_url": "https://github.com/amadeuszpawlik",
      "followers_url": "https://api.github.com/users/amadeuszpawlik/followers",
      "following_url": "https://api.github.com/users/amadeuszpawlik/following{/other_user}",
      "gists_url": "https://api.github.com/users/amadeuszpawlik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amadeuszpawlik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amadeuszpawlik/subscriptions",
      "organizations_url": "https://api.github.com/users/amadeuszpawlik/orgs",
      "repos_url": "https://api.github.com/users/amadeuszpawlik/repos",
      "events_url": "https://api.github.com/users/amadeuszpawlik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amadeuszpawlik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amadeuszpawlik",
      "id": 35263201,
      "node_id": "MDQ6VXNlcjM1MjYzMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35263201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amadeuszpawlik",
      "html_url": "https://github.com/amadeuszpawlik",
      "followers_url": "https://api.github.com/users/amadeuszpawlik/followers",
      "following_url": "https://api.github.com/users/amadeuszpawlik/following{/other_user}",
      "gists_url": "https://api.github.com/users/amadeuszpawlik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amadeuszpawlik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amadeuszpawlik/subscriptions",
      "organizations_url": "https://api.github.com/users/amadeuszpawlik/orgs",
      "repos_url": "https://api.github.com/users/amadeuszpawlik/repos",
      "events_url": "https://api.github.com/users/amadeuszpawlik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amadeuszpawlik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a07be7e512ab540cdf0fa24fa60a753b12ec630",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a07be7e512ab540cdf0fa24fa60a753b12ec630",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a07be7e512ab540cdf0fa24fa60a753b12ec630"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "021e01e53233ff4b67eb6db15f31222f02a4e8fc",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3309b68553a4b5ac42688ae9b983034204f2c500/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3309b68553a4b5ac42688ae9b983034204f2c500/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=3309b68553a4b5ac42688ae9b983034204f2c500",
        "patch": "@@ -939,8 +939,15 @@ static RPCHelpMan addpeeraddress()\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n     }\n \n+    // check the port number\n+    int portIn = request.params[1].get_int();\n+    if (portIn > std::numeric_limits<uint16_t>::max()\n+            || portIn < std::numeric_limits<uint16_t>::min()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid port specified: %d\", portIn));\n+    }\n+\n     const std::string& addr_string{request.params[0].get_str()};\n-    const uint16_t port{static_cast<uint16_t>(request.params[1].get_int())};\n+    const uint16_t port{static_cast<uint16_t>(portIn)};\n \n     UniValue obj(UniValue::VOBJ);\n     CNetAddr net_addr;"
      }
    ]
  },
  {
    "sha": "95bc9bd8f3a718375e99e5b8133347dcd3bf7a3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWJjOWJkOGYzYTcxODM3NWU5OWU1YjgxMzMzNDdkY2QzYmY3YTNi",
    "commit": {
      "author": {
        "name": "amadeuszpawlik",
        "email": "apawlik@protonmail.com",
        "date": "2021-09-06T17:30:10Z"
      },
      "committer": {
        "name": "amadeuszpawlik",
        "email": "apawlik@protonmail.com",
        "date": "2021-09-06T17:30:10Z"
      },
      "message": "Sanitize socket address before validating `-bind` option\n\nSocket address in `-bind` can be postfixed with `=onion`.\nTruncate the socket address if necessary before trying to validate the port.",
      "tree": {
        "sha": "b3a6cca64150b26585d8fa16580e3948840d9b39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3a6cca64150b26585d8fa16580e3948840d9b39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95bc9bd8f3a718375e99e5b8133347dcd3bf7a3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95bc9bd8f3a718375e99e5b8133347dcd3bf7a3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95bc9bd8f3a718375e99e5b8133347dcd3bf7a3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95bc9bd8f3a718375e99e5b8133347dcd3bf7a3b/comments",
    "author": {
      "login": "amadeuszpawlik",
      "id": 35263201,
      "node_id": "MDQ6VXNlcjM1MjYzMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35263201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amadeuszpawlik",
      "html_url": "https://github.com/amadeuszpawlik",
      "followers_url": "https://api.github.com/users/amadeuszpawlik/followers",
      "following_url": "https://api.github.com/users/amadeuszpawlik/following{/other_user}",
      "gists_url": "https://api.github.com/users/amadeuszpawlik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amadeuszpawlik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amadeuszpawlik/subscriptions",
      "organizations_url": "https://api.github.com/users/amadeuszpawlik/orgs",
      "repos_url": "https://api.github.com/users/amadeuszpawlik/repos",
      "events_url": "https://api.github.com/users/amadeuszpawlik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amadeuszpawlik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amadeuszpawlik",
      "id": 35263201,
      "node_id": "MDQ6VXNlcjM1MjYzMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35263201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amadeuszpawlik",
      "html_url": "https://github.com/amadeuszpawlik",
      "followers_url": "https://api.github.com/users/amadeuszpawlik/followers",
      "following_url": "https://api.github.com/users/amadeuszpawlik/following{/other_user}",
      "gists_url": "https://api.github.com/users/amadeuszpawlik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amadeuszpawlik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amadeuszpawlik/subscriptions",
      "organizations_url": "https://api.github.com/users/amadeuszpawlik/orgs",
      "repos_url": "https://api.github.com/users/amadeuszpawlik/repos",
      "events_url": "https://api.github.com/users/amadeuszpawlik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amadeuszpawlik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3309b68553a4b5ac42688ae9b983034204f2c500",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3309b68553a4b5ac42688ae9b983034204f2c500",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3309b68553a4b5ac42688ae9b983034204f2c500"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9fe4591ca748490c3ff61ff5aad662a63d189739",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95bc9bd8f3a718375e99e5b8133347dcd3bf7a3b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95bc9bd8f3a718375e99e5b8133347dcd3bf7a3b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=95bc9bd8f3a718375e99e5b8133347dcd3bf7a3b",
        "patch": "@@ -1223,7 +1223,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n             return InitError(strprintf(_(\"Invalid port specified in -rpcport: '%d'\"), portIn));\n     }\n     for (const std::string& socketAddr : args.GetArgs(\"-bind\")) {\n-        if (HasInvalidPort(socketAddr))\n+        const std::string truncated_socketAddr = socketAddr.substr(0, socketAddr.rfind('='));\n+        if (HasInvalidPort(truncated_socketAddr))\n             return InitError(strprintf(_(\"Invalid port specified in -bind: '%s'\"), socketAddr));\n     }\n     for (const std::string& socketAddr : args.GetArgs(\"-i2psam\")) {"
      }
    ]
  }
]