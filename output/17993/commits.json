[
  {
    "sha": "2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjg2NzIwM2IwYzdhNDQzOGNlNDg0YmU0Y2ZhMmIyOWRiZjFhYmYw",
    "commit": {
      "author": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2020-01-23T22:31:16Z"
      },
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2020-05-23T23:02:04Z"
      },
      "message": "Added best block hash to the NotifyHeaderTip and NotifyBlockTip signals.\n\n[ClientModel] best header/block hash cached.",
      "tree": {
        "sha": "e8db2784b603a7c802625cef6db7d18b0a4236ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8db2784b603a7c802625cef6db7d18b0a4236ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAl7Jq2wACgkQXdI8zGhq\npiOSBw/+KO3/8fEGqZlty86zsfUImNx52gFlKmZyiWBRzL1Xp6CkceKL9OsxoytI\nYFq4+FShQi/OmZdqeMIepAghI7YZ/jNOjerJTuxa2TIl5eZLpHgxchy9GAV/wxEV\nI5GXx4/AluRpDQjUQj5+7ChNTLlPocvQt2wk1sChuFEzOOzMKjxxqMJQ4gg8DzGC\nXKOa+gH+PkfzSOJIKfol3y5P1Jh+nqAukksfDsgWvQpuxH2w1Mt15ZMe8NEdiNmV\nVMQYdTtaWKo+Kc+E+k2fPMao4QC0qYY0HahuhrC2foxruY4lp7Btv1YcHBXHe4L0\nSVW59cAbiMCQjOMpMYRqzTba+qRIhUEWZKL2ApHzsvvYi+gBKttghbicd7oZ+65L\nmY/Mq2wTL4ad9o+cP6pc8NGu0/eQHP5wAuicXVyy42k+y0RWaHW6LcSKq+z7Xs5l\n9SRmTYu1if/a1waEZGjyXY3oer9UNlBOTPaszf+iykW9pIgIr3R+nG8ZEUjIq/LX\nL0OHcB4IUSiCOPZu/k1rw8pASbts+xehTxYTqx/lqXrPIH3sb/Qf+PgfX/1/UpLh\nSnii3WTnMJv6BZwskCihVl/I6Oc1nFtHOVSE03pyo2oL/zN3QFuVMYetrfQt3VZX\nT1C98qB7iHfZXGRexhBPjBXM+Esk+35g1wE9pNIxQeSOJ9gctHc=\n=5MXV\n-----END PGP SIGNATURE-----",
        "payload": "tree e8db2784b603a7c802625cef6db7d18b0a4236ad\nparent cfe22a5f9e1d9e2d3dc8ce177e6c8eb04bc96615\nauthor furszy <matiasfurszyfer@protonmail.com> 1579818676 -0300\ncommitter furszy <matiasfurszyfer@protonmail.com> 1590274924 -0300\n\nAdded best block hash to the NotifyHeaderTip and NotifyBlockTip signals.\n\n[ClientModel] best header/block hash cached.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/comments",
    "author": {
      "login": "furszy",
      "id": 5377650,
      "node_id": "MDQ6VXNlcjUzNzc2NTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/furszy",
      "html_url": "https://github.com/furszy",
      "followers_url": "https://api.github.com/users/furszy/followers",
      "following_url": "https://api.github.com/users/furszy/following{/other_user}",
      "gists_url": "https://api.github.com/users/furszy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/furszy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
      "organizations_url": "https://api.github.com/users/furszy/orgs",
      "repos_url": "https://api.github.com/users/furszy/repos",
      "events_url": "https://api.github.com/users/furszy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/furszy/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "furszy",
      "id": 5377650,
      "node_id": "MDQ6VXNlcjUzNzc2NTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/furszy",
      "html_url": "https://github.com/furszy",
      "followers_url": "https://api.github.com/users/furszy/followers",
      "following_url": "https://api.github.com/users/furszy/following{/other_user}",
      "gists_url": "https://api.github.com/users/furszy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/furszy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
      "organizations_url": "https://api.github.com/users/furszy/orgs",
      "repos_url": "https://api.github.com/users/furszy/repos",
      "events_url": "https://api.github.com/users/furszy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/furszy/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfe22a5f9e1d9e2d3dc8ce177e6c8eb04bc96615",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfe22a5f9e1d9e2d3dc8ce177e6c8eb04bc96615",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfe22a5f9e1d9e2d3dc8ce177e6c8eb04bc96615"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 57,
      "deletions": 34
    },
    "files": [
      {
        "sha": "582bf68ff866ad5f861abc9567bc0e06787262ea",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
        "patch": "@@ -187,6 +187,11 @@ class NodeImpl : public Node\n         LOCK(::cs_main);\n         return ::ChainActive().Height();\n     }\n+    uint256 getBestBlockHash() override\n+    {\n+        const CBlockIndex* tip = WITH_LOCK(::cs_main, return ::ChainActive().Tip());\n+        return tip ? tip->GetBlockHash() : Params().GenesisBlock().GetHash();\n+    }\n     int64_t getLastBlockTime() override\n     {\n         LOCK(::cs_main);\n@@ -310,15 +315,15 @@ class NodeImpl : public Node\n     std::unique_ptr<Handler> handleNotifyBlockTip(NotifyBlockTipFn fn) override\n     {\n         return MakeHandler(::uiInterface.NotifyBlockTip_connect([fn](SynchronizationState sync_state, const CBlockIndex* block) {\n-            fn(sync_state, block->nHeight, block->GetBlockTime(),\n+            fn(sync_state, block->GetBlockHash(), block->nHeight, block->GetBlockTime(),\n                 GuessVerificationProgress(Params().TxData(), block));\n         }));\n     }\n     std::unique_ptr<Handler> handleNotifyHeaderTip(NotifyHeaderTipFn fn) override\n     {\n         return MakeHandler(\n             ::uiInterface.NotifyHeaderTip_connect([fn](SynchronizationState sync_state, const CBlockIndex* block) {\n-                fn(sync_state, block->nHeight, block->GetBlockTime(),\n+                fn(sync_state, block->GetBlockHash(), block->nHeight, block->GetBlockTime(),\n                     /* verification progress is unused when a header was received */ 0);\n             }));\n     }"
      },
      {
        "sha": "e4df9088474abf9cf73c9fa877de69ca9404248a",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
        "patch": "@@ -149,6 +149,9 @@ class Node\n     //! Get num blocks.\n     virtual int getNumBlocks() = 0;\n \n+    //! Get best block hash.\n+    virtual uint256 getBestBlockHash() = 0;\n+\n     //! Get last block time.\n     virtual int64_t getLastBlockTime() = 0;\n \n@@ -250,12 +253,12 @@ class Node\n \n     //! Register handler for block tip messages.\n     using NotifyBlockTipFn =\n-        std::function<void(SynchronizationState, int height, int64_t block_time, double verification_progress)>;\n+        std::function<void(SynchronizationState, const uint256& block_hash, int height, int64_t block_time, double verification_progress)>;\n     virtual std::unique_ptr<Handler> handleNotifyBlockTip(NotifyBlockTipFn fn) = 0;\n \n     //! Register handler for header tip messages.\n     using NotifyHeaderTipFn =\n-        std::function<void(SynchronizationState, int height, int64_t block_time, double verification_progress)>;\n+        std::function<void(SynchronizationState, const uint256& block_hash, int height, int64_t block_time, double verification_progress)>;\n     virtual std::unique_ptr<Handler> handleNotifyHeaderTip(NotifyHeaderTipFn fn) = 0;\n \n     //! Return pointer to internal chain interface, useful for testing."
      },
      {
        "sha": "cec75030add7e40301033cdc733ba54c6de07048",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
        "patch": "@@ -351,13 +351,13 @@ class WalletImpl : public Wallet\n         }\n         return result;\n     }\n-    bool tryGetBalances(WalletBalances& balances, int& num_blocks) override\n+    bool tryGetBalances(WalletBalances& balances, uint256& block_hash) override\n     {\n         TRY_LOCK(m_wallet->cs_wallet, locked_wallet);\n         if (!locked_wallet) {\n             return false;\n         }\n-        num_blocks = m_wallet->GetLastBlockHeight();\n+        block_hash = m_wallet->GetLastBlockHash();\n         balances = getBalances();\n         return true;\n     }"
      },
      {
        "sha": "67569a3e555a4dce4184d22a521d324bbb85db69",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
        "patch": "@@ -203,7 +203,7 @@ class Wallet\n     virtual WalletBalances getBalances() = 0;\n \n     //! Get balances if possible without blocking.\n-    virtual bool tryGetBalances(WalletBalances& balances, int& num_blocks) = 0;\n+    virtual bool tryGetBalances(WalletBalances& balances, uint256& block_hash) = 0;\n \n     //! Get balance.\n     virtual CAmount getBalance() = 0;"
      },
      {
        "sha": "3ef044d6f8efce5d0107af2de7f7e8c656f171b5",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
        "patch": "@@ -114,6 +114,15 @@ int ClientModel::getNumBlocks() const\n     return m_cached_num_blocks;\n }\n \n+uint256 ClientModel::getBestBlockHash()\n+{\n+    LOCK(m_cached_tip_mutex);\n+    if (m_cached_tip_blocks.IsNull()) {\n+        m_cached_tip_blocks = m_node.getBestBlockHash();\n+    }\n+    return m_cached_tip_blocks;\n+}\n+\n void ClientModel::updateNumConnections(int numConnections)\n {\n     Q_EMIT numConnectionsChanged(numConnections);\n@@ -235,14 +244,15 @@ static void BannedListChanged(ClientModel *clientmodel)\n     assert(invoked);\n }\n \n-static void BlockTipChanged(ClientModel* clientmodel, SynchronizationState sync_state, int height, int64_t blockTime, double verificationProgress, bool fHeader)\n+static void BlockTipChanged(ClientModel* clientmodel, SynchronizationState sync_state, const uint256 block_hash, int height, int64_t blockTime, double verificationProgress, bool fHeader)\n {\n     if (fHeader) {\n         // cache best headers time and height to reduce future cs_main locks\n         clientmodel->cachedBestHeaderHeight = height;\n         clientmodel->cachedBestHeaderTime = blockTime;\n     } else {\n         clientmodel->m_cached_num_blocks = height;\n+        WITH_LOCK(clientmodel->m_cached_tip_mutex, clientmodel->m_cached_tip_blocks = block_hash;);\n     }\n \n     // Throttle GUI notifications about (a) blocks during initial sync, and (b) both blocks and headers during reindex.\n@@ -271,8 +281,8 @@ void ClientModel::subscribeToCoreSignals()\n     m_handler_notify_network_active_changed = m_node.handleNotifyNetworkActiveChanged(std::bind(NotifyNetworkActiveChanged, this, std::placeholders::_1));\n     m_handler_notify_alert_changed = m_node.handleNotifyAlertChanged(std::bind(NotifyAlertChanged, this));\n     m_handler_banned_list_changed = m_node.handleBannedListChanged(std::bind(BannedListChanged, this));\n-    m_handler_notify_block_tip = m_node.handleNotifyBlockTip(std::bind(BlockTipChanged, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, false));\n-    m_handler_notify_header_tip = m_node.handleNotifyHeaderTip(std::bind(BlockTipChanged, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, true));\n+    m_handler_notify_block_tip = m_node.handleNotifyBlockTip(std::bind(BlockTipChanged, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, std::placeholders::_5, false));\n+    m_handler_notify_header_tip = m_node.handleNotifyHeaderTip(std::bind(BlockTipChanged, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, std::placeholders::_5, true));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()"
      },
      {
        "sha": "aa324bc9eaa7468d8d96094bb9850db0d6b91354",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
        "patch": "@@ -10,6 +10,8 @@\n \n #include <atomic>\n #include <memory>\n+#include <sync.h>\n+#include <uint256.h>\n \n class BanTableModel;\n class CBlockIndex;\n@@ -57,6 +59,7 @@ class ClientModel : public QObject\n     //! Return number of connections, default is in- and outbound (total)\n     int getNumConnections(unsigned int flags = CONNECTIONS_ALL) const;\n     int getNumBlocks() const;\n+    uint256 getBestBlockHash();\n     int getHeaderTipHeight() const;\n     int64_t getHeaderTipTime() const;\n \n@@ -79,6 +82,9 @@ class ClientModel : public QObject\n     mutable std::atomic<int64_t> cachedBestHeaderTime;\n     mutable std::atomic<int> m_cached_num_blocks{-1};\n \n+    Mutex m_cached_tip_mutex;\n+    uint256 m_cached_tip_blocks GUARDED_BY(m_cached_tip_mutex){};\n+\n private:\n     interfaces::Node& m_node;\n     std::unique_ptr<interfaces::Handler> m_handler_show_progress;"
      },
      {
        "sha": "01dff8069c0e0427ec519b37d1720754f150baf9",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
        "patch": "@@ -162,7 +162,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const interface\n     return parts;\n }\n \n-void TransactionRecord::updateStatus(const interfaces::WalletTxStatus& wtx, int numBlocks, int64_t block_time)\n+void TransactionRecord::updateStatus(const interfaces::WalletTxStatus& wtx, const uint256& block_hash, int numBlocks, int64_t block_time)\n {\n     // Determine transaction status\n \n@@ -174,7 +174,7 @@ void TransactionRecord::updateStatus(const interfaces::WalletTxStatus& wtx, int\n         idx);\n     status.countsForBalance = wtx.is_trusted && !(wtx.blocks_to_maturity > 0);\n     status.depth = wtx.depth_in_main_chain;\n-    status.cur_num_blocks = numBlocks;\n+    status.m_cur_block_hash = block_hash;\n \n     const bool up_to_date = ((int64_t)QDateTime::currentMSecsSinceEpoch() / 1000 - block_time < MAX_BLOCK_TIME_GAP);\n     if (up_to_date && !wtx.is_final) {\n@@ -233,9 +233,9 @@ void TransactionRecord::updateStatus(const interfaces::WalletTxStatus& wtx, int\n     status.needsUpdate = false;\n }\n \n-bool TransactionRecord::statusUpdateNeeded(int numBlocks) const\n+bool TransactionRecord::statusUpdateNeeded(const uint256& block_hash) const\n {\n-    return status.cur_num_blocks != numBlocks || status.needsUpdate;\n+    return status.m_cur_block_hash != block_hash || status.needsUpdate;\n }\n \n QString TransactionRecord::getTxHash() const"
      },
      {
        "sha": "c983c527c0f42bf9557014fe5521de871e07b890",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
        "patch": "@@ -23,9 +23,8 @@ struct WalletTxStatus;\n class TransactionStatus\n {\n public:\n-    TransactionStatus():\n-        countsForBalance(false), sortKey(\"\"),\n-        matures_in(0), status(Unconfirmed), depth(0), open_for(0), cur_num_blocks(-1)\n+    TransactionStatus() : countsForBalance(false), sortKey(\"\"),\n+                          matures_in(0), status(Unconfirmed), depth(0), open_for(0)\n     { }\n \n     enum Status {\n@@ -61,8 +60,8 @@ class TransactionStatus\n                       finalization */\n     /**@}*/\n \n-    /** Current number of blocks (to know whether cached status is still valid) */\n-    int cur_num_blocks;\n+    /** Current block hash (to know whether cached status is still valid) */\n+    uint256 m_cur_block_hash{};\n \n     bool needsUpdate;\n };\n@@ -138,11 +137,11 @@ class TransactionRecord\n \n     /** Update status from core wallet tx.\n      */\n-    void updateStatus(const interfaces::WalletTxStatus& wtx, int numBlocks, int64_t block_time);\n+    void updateStatus(const interfaces::WalletTxStatus& wtx, const uint256& block_hash, int numBlocks, int64_t block_time);\n \n     /** Return whether a status update is needed.\n      */\n-    bool statusUpdateNeeded(int numBlocks) const;\n+    bool statusUpdateNeeded(const uint256& block_hash) const;\n };\n \n #endif // BITCOIN_QT_TRANSACTIONRECORD_H"
      },
      {
        "sha": "0867ae8105e69271fc8fac91730855977dbdcf3b",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
        "patch": "@@ -176,7 +176,7 @@ class TransactionTablePriv\n         return cachedWallet.size();\n     }\n \n-    TransactionRecord *index(interfaces::Wallet& wallet, const int cur_num_blocks, const int idx)\n+    TransactionRecord* index(interfaces::Wallet& wallet, const uint256& cur_block_hash, const int idx)\n     {\n         if(idx >= 0 && idx < cachedWallet.size())\n         {\n@@ -192,8 +192,8 @@ class TransactionTablePriv\n             interfaces::WalletTxStatus wtx;\n             int numBlocks;\n             int64_t block_time;\n-            if (rec->statusUpdateNeeded(cur_num_blocks) && wallet.tryGetTxStatus(rec->hash, wtx, numBlocks, block_time)) {\n-                rec->updateStatus(wtx, numBlocks, block_time);\n+            if (rec->statusUpdateNeeded(cur_block_hash) && wallet.tryGetTxStatus(rec->hash, wtx, numBlocks, block_time)) {\n+                rec->updateStatus(wtx, cur_block_hash, numBlocks, block_time);\n             }\n             return rec;\n         }\n@@ -664,7 +664,7 @@ QVariant TransactionTableModel::headerData(int section, Qt::Orientation orientat\n QModelIndex TransactionTableModel::index(int row, int column, const QModelIndex &parent) const\n {\n     Q_UNUSED(parent);\n-    TransactionRecord *data = priv->index(walletModel->wallet(), walletModel->getNumBlocks(), row);\n+    TransactionRecord* data = priv->index(walletModel->wallet(), walletModel->clientModel().getBestBlockHash(), row);\n     if(data)\n     {\n         return createIndex(row, column, data);"
      },
      {
        "sha": "386002eaf28b7b449b4a88f0f19c05d0e6090a9c",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
        "patch": "@@ -46,7 +46,6 @@ WalletModel::WalletModel(std::unique_ptr<interfaces::Wallet> wallet, ClientModel\n     transactionTableModel(nullptr),\n     recentRequestsTableModel(nullptr),\n     cachedEncryptionStatus(Unencrypted),\n-    cachedNumBlocks(0),\n     timer(new QTimer(this))\n {\n     fHaveWatchOnly = m_wallet->haveWatchOnly();\n@@ -88,24 +87,23 @@ void WalletModel::pollBalanceChanged()\n {\n     // Avoid recomputing wallet balances unless a TransactionChanged or\n     // BlockTip notification was received.\n-    if (!fForceCheckBalanceChanged && cachedNumBlocks == m_client_model->getNumBlocks()) return;\n+    if (!fForceCheckBalanceChanged && m_cached_last_update_tip == m_client_model->getBestBlockHash()) return;\n \n     // Try to get balances and return early if locks can't be acquired. This\n     // avoids the GUI from getting stuck on periodical polls if the core is\n     // holding the locks for a longer time - for example, during a wallet\n     // rescan.\n     interfaces::WalletBalances new_balances;\n-    int numBlocks = -1;\n-    if (!m_wallet->tryGetBalances(new_balances, numBlocks)) {\n+    uint256 block_hash;\n+    if (!m_wallet->tryGetBalances(new_balances, block_hash)) {\n         return;\n     }\n \n-    if(fForceCheckBalanceChanged || numBlocks != cachedNumBlocks)\n-    {\n+    if (fForceCheckBalanceChanged || block_hash != m_cached_last_update_tip) {\n         fForceCheckBalanceChanged = false;\n \n         // Balance and number of transactions might have changed\n-        cachedNumBlocks = numBlocks;\n+        m_cached_last_update_tip = block_hash;\n \n         checkBalanceChanged(new_balances);\n         if(transactionTableModel)"
      },
      {
        "sha": "59470c002d51dfb73b73347eaf06535153a14b1e",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
        "patch": "@@ -144,8 +144,8 @@ class WalletModel : public QObject\n \n     interfaces::Node& node() const { return m_node; }\n     interfaces::Wallet& wallet() const { return *m_wallet; }\n+    ClientModel& clientModel() const { return *m_client_model; }\n     void setClientModel(ClientModel* client_model);\n-    int getNumBlocks() const { return cachedNumBlocks; }\n \n     QString getWalletName() const;\n     QString getDisplayName() const;\n@@ -179,9 +179,11 @@ class WalletModel : public QObject\n     // Cache some values to be able to detect changes\n     interfaces::WalletBalances m_cached_balances;\n     EncryptionStatus cachedEncryptionStatus;\n-    int cachedNumBlocks;\n     QTimer* timer;\n \n+    // Block hash denoting when the last balance update was done.\n+    uint256 m_cached_last_update_tip{};\n+\n     void subscribeToCoreSignals();\n     void unsubscribeFromCoreSignals();\n     void checkBalanceChanged(const interfaces::WalletBalances& new_balances);"
      }
    ]
  },
  {
    "sha": "a06e845e826acaeb0db7cf02b2519c177e94dee5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDZlODQ1ZTgyNmFjYWViMGRiN2NmMDJiMjUxOWMxNzdlOTRkZWU1",
    "commit": {
      "author": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2020-01-24T00:34:58Z"
      },
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2020-05-23T23:02:10Z"
      },
      "message": "BlockTip struct created and connected to notifyHeaderTip and notifyBlockTip signals.",
      "tree": {
        "sha": "6eeaf01a99b90382adb98d79500f1d8ea40285f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6eeaf01a99b90382adb98d79500f1d8ea40285f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a06e845e826acaeb0db7cf02b2519c177e94dee5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAl7Jq3IACgkQXdI8zGhq\npiNHsw/+OjixCiOQXVspKHTkLFBKal70ZCyIpetRGmlFHaLMBvpwdUU1EKSSRhhi\nCfLMg04guDuoCwhFQaB+AOLywMgG+Bq5VSGYKQsLltHh5wL0x7r/fmyBOd0Aw0N0\nwEzAL5U3eEotxM1iDJnCZ/jDiwHCzf7BsJ0lGbZ+kuB+scLf5Qu1gShh527ZmpiW\nZVppe2T+rrW+bdbTtATp4ASdqaV8QVppBRHb0RS5jZcrDDsmhHpbUSxjiTguDhMo\nIhQa/AAURdghYTsjC8UYEGiRzSQq4l4+oNaPVN2TdbH+IAGrtN7TKBa5kDrPp7ZI\nn7/lLAhG2SzvIgsB6ZkAqWWs8M+sPGT0D47krNtPdWWmQw8HBBVVBzYwBE1Gz6tE\n3WCWocdCiqD4uJnZylS5hh4pXc7NlfV6AwYcZpEPu6hvu+62G1v/IpWYVkFDUYT1\ndgeCirPDDg2HcT1Tzm9kjOvVjwukvLHZ0syNROlYV9ALUpFCJWcFhn5AJZylRvAq\nQCQ9RBy79Z00B6cwLeIpuuqJrbJr/w1W8N7hmxBpGgQZ729nZyiQdmCFzRwLZvE5\n4ejwOHO+NnW6FX9RBRqqZOLqquFItUsg4MZx1RZpJpxu95BuX0So/hoCWCcmehoh\n9rIkIMkxofZqYoGYv70xzi3koXryyWhbC0SqKAKnNFwH3xeLBNo=\n=OS2h\n-----END PGP SIGNATURE-----",
        "payload": "tree 6eeaf01a99b90382adb98d79500f1d8ea40285f0\nparent 2f867203b0c7a4438ce484be4cfa2b29dbf1abf0\nauthor furszy <matiasfurszyfer@protonmail.com> 1579826098 -0300\ncommitter furszy <matiasfurszyfer@protonmail.com> 1590274930 -0300\n\nBlockTip struct created and connected to notifyHeaderTip and notifyBlockTip signals.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a06e845e826acaeb0db7cf02b2519c177e94dee5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a06e845e826acaeb0db7cf02b2519c177e94dee5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a06e845e826acaeb0db7cf02b2519c177e94dee5/comments",
    "author": {
      "login": "furszy",
      "id": 5377650,
      "node_id": "MDQ6VXNlcjUzNzc2NTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/furszy",
      "html_url": "https://github.com/furszy",
      "followers_url": "https://api.github.com/users/furszy/followers",
      "following_url": "https://api.github.com/users/furszy/following{/other_user}",
      "gists_url": "https://api.github.com/users/furszy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/furszy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
      "organizations_url": "https://api.github.com/users/furszy/orgs",
      "repos_url": "https://api.github.com/users/furszy/repos",
      "events_url": "https://api.github.com/users/furszy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/furszy/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "furszy",
      "id": 5377650,
      "node_id": "MDQ6VXNlcjUzNzc2NTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/furszy",
      "html_url": "https://github.com/furszy",
      "followers_url": "https://api.github.com/users/furszy/followers",
      "following_url": "https://api.github.com/users/furszy/following{/other_user}",
      "gists_url": "https://api.github.com/users/furszy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/furszy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
      "organizations_url": "https://api.github.com/users/furszy/orgs",
      "repos_url": "https://api.github.com/users/furszy/repos",
      "events_url": "https://api.github.com/users/furszy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/furszy/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f867203b0c7a4438ce484be4cfa2b29dbf1abf0"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 22,
      "deletions": 14
    },
    "files": [
      {
        "sha": "ca1435fe60619088442be751dcfe29eac4bdfad1",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a06e845e826acaeb0db7cf02b2519c177e94dee5/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a06e845e826acaeb0db7cf02b2519c177e94dee5/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=a06e845e826acaeb0db7cf02b2519c177e94dee5",
        "patch": "@@ -315,15 +315,15 @@ class NodeImpl : public Node\n     std::unique_ptr<Handler> handleNotifyBlockTip(NotifyBlockTipFn fn) override\n     {\n         return MakeHandler(::uiInterface.NotifyBlockTip_connect([fn](SynchronizationState sync_state, const CBlockIndex* block) {\n-            fn(sync_state, block->GetBlockHash(), block->nHeight, block->GetBlockTime(),\n+            fn(sync_state, BlockTip{block->nHeight, block->GetBlockTime(), block->GetBlockHash()},\n                 GuessVerificationProgress(Params().TxData(), block));\n         }));\n     }\n     std::unique_ptr<Handler> handleNotifyHeaderTip(NotifyHeaderTipFn fn) override\n     {\n         return MakeHandler(\n             ::uiInterface.NotifyHeaderTip_connect([fn](SynchronizationState sync_state, const CBlockIndex* block) {\n-                fn(sync_state, block->GetBlockHash(), block->nHeight, block->GetBlockTime(),\n+                fn(sync_state, BlockTip{block->nHeight, block->GetBlockTime(), block->GetBlockHash()},\n                     /* verification progress is unused when a header was received */ 0);\n             }));\n     }"
      },
      {
        "sha": "0b7fb6736acf04a893028ef30cd3acbf98ce0e57",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a06e845e826acaeb0db7cf02b2519c177e94dee5/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a06e845e826acaeb0db7cf02b2519c177e94dee5/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=a06e845e826acaeb0db7cf02b2519c177e94dee5",
        "patch": "@@ -36,6 +36,7 @@ struct bilingual_str;\n namespace interfaces {\n class Handler;\n class Wallet;\n+struct BlockTip;\n \n //! Top-level interface for a bitcoin node (bitcoind process).\n class Node\n@@ -253,12 +254,12 @@ class Node\n \n     //! Register handler for block tip messages.\n     using NotifyBlockTipFn =\n-        std::function<void(SynchronizationState, const uint256& block_hash, int height, int64_t block_time, double verification_progress)>;\n+        std::function<void(SynchronizationState, interfaces::BlockTip tip, double verification_progress)>;\n     virtual std::unique_ptr<Handler> handleNotifyBlockTip(NotifyBlockTipFn fn) = 0;\n \n     //! Register handler for header tip messages.\n     using NotifyHeaderTipFn =\n-        std::function<void(SynchronizationState, const uint256& block_hash, int height, int64_t block_time, double verification_progress)>;\n+        std::function<void(SynchronizationState, interfaces::BlockTip tip, double verification_progress)>;\n     virtual std::unique_ptr<Handler> handleNotifyHeaderTip(NotifyHeaderTipFn fn) = 0;\n \n     //! Return pointer to internal chain interface, useful for testing.\n@@ -268,6 +269,13 @@ class Node\n //! Return implementation of Node interface.\n std::unique_ptr<Node> MakeNode();\n \n+//! Block tip (could be a header or not, depends on the subscribed signal).\n+struct BlockTip {\n+    int block_height;\n+    int64_t block_time;\n+    uint256 block_hash;\n+};\n+\n } // namespace interfaces\n \n #endif // BITCOIN_INTERFACES_NODE_H"
      },
      {
        "sha": "f15921c5bcb938ee955d9d68d4c6b1fb01545765",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a06e845e826acaeb0db7cf02b2519c177e94dee5/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a06e845e826acaeb0db7cf02b2519c177e94dee5/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=a06e845e826acaeb0db7cf02b2519c177e94dee5",
        "patch": "@@ -244,15 +244,15 @@ static void BannedListChanged(ClientModel *clientmodel)\n     assert(invoked);\n }\n \n-static void BlockTipChanged(ClientModel* clientmodel, SynchronizationState sync_state, const uint256 block_hash, int height, int64_t blockTime, double verificationProgress, bool fHeader)\n+static void BlockTipChanged(ClientModel* clientmodel, SynchronizationState sync_state, interfaces::BlockTip tip, double verificationProgress, bool fHeader)\n {\n     if (fHeader) {\n         // cache best headers time and height to reduce future cs_main locks\n-        clientmodel->cachedBestHeaderHeight = height;\n-        clientmodel->cachedBestHeaderTime = blockTime;\n+        clientmodel->cachedBestHeaderHeight = tip.block_height;\n+        clientmodel->cachedBestHeaderTime = tip.block_time;\n     } else {\n-        clientmodel->m_cached_num_blocks = height;\n-        WITH_LOCK(clientmodel->m_cached_tip_mutex, clientmodel->m_cached_tip_blocks = block_hash;);\n+        clientmodel->m_cached_num_blocks = tip.block_height;\n+        WITH_LOCK(clientmodel->m_cached_tip_mutex, clientmodel->m_cached_tip_blocks = tip.block_hash;);\n     }\n \n     // Throttle GUI notifications about (a) blocks during initial sync, and (b) both blocks and headers during reindex.\n@@ -264,8 +264,8 @@ static void BlockTipChanged(ClientModel* clientmodel, SynchronizationState sync_\n     }\n \n     bool invoked = QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n-        Q_ARG(int, height),\n-        Q_ARG(QDateTime, QDateTime::fromTime_t(blockTime)),\n+        Q_ARG(int, tip.block_height),\n+        Q_ARG(QDateTime, QDateTime::fromTime_t(tip.block_time)),\n         Q_ARG(double, verificationProgress),\n         Q_ARG(bool, fHeader),\n         Q_ARG(SynchronizationState, sync_state));\n@@ -281,8 +281,8 @@ void ClientModel::subscribeToCoreSignals()\n     m_handler_notify_network_active_changed = m_node.handleNotifyNetworkActiveChanged(std::bind(NotifyNetworkActiveChanged, this, std::placeholders::_1));\n     m_handler_notify_alert_changed = m_node.handleNotifyAlertChanged(std::bind(NotifyAlertChanged, this));\n     m_handler_banned_list_changed = m_node.handleBannedListChanged(std::bind(BannedListChanged, this));\n-    m_handler_notify_block_tip = m_node.handleNotifyBlockTip(std::bind(BlockTipChanged, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, std::placeholders::_5, false));\n-    m_handler_notify_header_tip = m_node.handleNotifyHeaderTip(std::bind(BlockTipChanged, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, std::placeholders::_5, true));\n+    m_handler_notify_block_tip = m_node.handleNotifyBlockTip(std::bind(BlockTipChanged, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, false));\n+    m_handler_notify_header_tip = m_node.handleNotifyHeaderTip(std::bind(BlockTipChanged, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, true));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()"
      },
      {
        "sha": "7f12cce1d91a6dffb6d1864aa356ac24f0904594",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a06e845e826acaeb0db7cf02b2519c177e94dee5/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a06e845e826acaeb0db7cf02b2519c177e94dee5/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=a06e845e826acaeb0db7cf02b2519c177e94dee5",
        "patch": "@@ -77,7 +77,7 @@ class ClientModel : public QObject\n \n     bool getProxyInfo(std::string& ip_port) const;\n \n-    // caches for the best header, number of blocks\n+    // caches for the best header: hash, number of blocks and block time\n     mutable std::atomic<int> cachedBestHeaderHeight;\n     mutable std::atomic<int64_t> cachedBestHeaderTime;\n     mutable std::atomic<int> m_cached_num_blocks{-1};"
      }
    ]
  }
]