DrahtBot,2020-12-22 20:43:43,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23334](https://github.com/bitcoin/bitcoin/pull/23334) (fuzz: Descriptor wallet by MarcoFalke)\n* [#22555](https://github",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-749766551,749766551,
kiminuo,2020-12-23 18:21:09,"@ryanofsky It is maybe worth reading ""Differences between filesystem implementations that affects Bitcoin code"" in https://github.com/bitcoin/bitcoin/pull/19245.",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-750418399,750418399,
ryanofsky,2020-12-23 18:59:13,"> @ryanofsky It is maybe worth reading ""Differences between filesystem implementations that affects Bitcoin code"" in #19245.\n\nThanks, I saw it but don't think it takes into account the ""appends path::preferred_separator"" behavior described https://en.cppreference.com/w/cpp/filesystem/path/append which can result in trailing slashes and is different from boost::absolute behavior https://www.boo",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-750430904,750430904,
practicalswift,2020-12-27 23:05:53,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-751526431,751526431,
DrahtBot,2021-01-13 11:46:18,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n🕵️ @laanwj @harding have been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-759396526,759396526,
kiminuo,2021-01-21 22:23:22,"I have attempted to do the rebase with the `fsbridge::AbsPathJoin` modifications: \n\n* https://github.com/kiminuo/bitcoin/tree/use_std_filesystem_tmp\n* https://github.com/bitcoin/bitcoin/compare/master...kiminuo:use_std_filesystem_tmp?expand=1 comparison with master\n* git range-diff:\n   ```bash\n   PREV=8d148b93bb50fe5bfdd6e488f60dced2ded06c88 N=5 && git range-diff `git merge-base --all ",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-764979884,764979884,
fanquake,2021-01-22 09:28:50,"Thanks @ryanofsky, @kiminuo & others who have commented. I've rebased to account for #20932 and made changes as suggested by Russ.",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-765267925,765267925,
kiminuo,2021-01-22 15:05:17,"I can see that `[depends, sanitizers: thread (TSan), no gui] [focal]` check (https://github.com/bitcoin/bitcoin/pull/20744/checks?check_run_id=1747977815) fails so I have run: `MAKEJOBS=""-j15"" FILE_ENV=""./ci/test/00_setup_env_native_tsan.sh"" ./ci/test_run_all.sh` to get:\n\n```\ntest  2021-01-22T13:56:39.722000Z TestFramework.node0 (DEBUG): Node stopped \n test  2021-01-22T13:56:39.723000Z Tes",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-765467226,765467226,
ryanofsky,2021-02-05 17:36:45,"Oh, it looks like kiminuo tracked down the wallet_hd backupwallet failure earlier (https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-765467226) to a problem with certain platforms throwing when calling fs::equivalent on non-existent paths. Simple fix might be to define a wrapper function for the affected platforms catching the specific exception or checking for existence before calling fs",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-774178742,774178742,
fanquake,2021-02-09 12:41:16,"@ryanofsky thanks for the comments. I've reordered and split the commits up more cleanly now. I've marked some comments as  resolved,  however some  are still outstanding, and I'm planning on addressing shortly. I'll also be going back over the discussion in #19245, as i think that contains answers to some queries.",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-775908484,775908484,
kiminuo,2021-03-30 14:01:06,"I attempted to debug the failing ARM test. My debugging efforts led me to this line: https://github.com/fanquake/bitcoin/blob/1bdd927b20fab4aeb5e7119cc298b2a09bf1bc52/src/test/util/setup_common.cpp#L124 which fails with `what():  filesystem error: cannot remove all: Value too large for defined data type [...]`\n\nInterestingly, the command `fs::remove_all` fails even if the folder is empty (I mo",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-810279549,810279549,
MarcoFalke,2021-03-30 17:49:13,Does it help if the folder name only contains 128 bit of randomness (as opposed to the 512 bits)?,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-810456056,810456056,
kiminuo,2021-03-30 19:48:44,"> Does it help if the folder name only contains 128 bit of randomness (as opposed to the 512 bits)?\n\nThe error is the same even for `/tmp/test_common_Bitcoin_Core/35c` where: \n* `test_common_Bitcoin Core` -> `test_common_Bitcoin_Core` and \n* `35c` is a very short folder name. \n* It does not matter whether I try to `remove_all` on `/tmp/test_common_Bitcoin_Core/35c` path or `/tmp/test_com",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-810532619,810532619,
ryanofsky,2021-03-31 17:03:48,"The ""cannot remove all: Value too large for defined data type"" bug mentioned\n\n* https://github.com/bitcoin/bitcoin/pull/20744#pullrequestreview-589081075\n* https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-810279549\n\nseems to be reported externally https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93201. Probably easiest workaround is just to avoid remove_all and write a simple recur",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-811255874,811255874,
kiminuo,2021-04-01 09:00:55,"@ryanofsky I have narrowed the failing ARM issue down to:\n\n```c++\nauto iterator = fs::directory_iterator(m_path_root); // where m_path_root = /tmp/test_common_Bitcoin Core/29248e247aad6a68595f5e097d311e923c00300291f160ee2254ed8b5b4668c4\n```\n\nwhich throws:\n\n```\n/tmp/test_common_Bitcoin Core/29248e247aad6a68595f5e097d311e923c00300291f160ee2254ed8b5b4668c4\nterminate called after t",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-811764577,811764577,
MarcoFalke,2021-04-01 09:43:23,"The gcc bug is fixed on all branches, but is seems that gcc for arm on debian buster didn't receive the patch? This should be a relative edge-case platform and I think we can just bump the ci config from buster to bullseye to fix the problem. (It does fix it for me locally).\n\n",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-811789974,811789974,
kiminuo,2021-04-01 10:50:56,"> The gcc bug is fixed on all branches, but is seems that gcc for arm on debian buster didn't receive the patch? \n\nMight be so.\n\n> This should be a relative edge-case platform and I think we can just bump the ci config from buster to bullseye to fix the problem. (It does fix it for me locally).\n\nBullseye is not [stable](https://www.debian.org/releases/bullseye/) yet. Maybe gcc-9 instea",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-811825468,811825468,
MarcoFalke,2021-04-01 11:05:51,"Assigned the 23.0 milestone, because rushing this into 0.22 might be too aggressive. See also https://github.com/bitcoin/bitcoin/issues/20460#issuecomment-789502720\n\nIn a year from now (when this is going to be releases), debian:buster may have bumped the gcc-8 to include the fix, or bullseye may have been released as stable. So I think re-implementing std::fs features in our code base is not ",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-811833067,811833067,
laanwj,2021-04-01 11:49:08,"> So I think re-implementing std::fs features in our code base is not needed.\n\nAgree on the general idea. It is slightly disappointing but there is no rush. If time will solve the issues automatically there is no need to spend work and reviewer time on doing some in-between thing.",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-811852977,811852977,
MarcoFalke,2021-04-01 11:55:49,"Branch-off is in only 3 months, so I think it is fine to drink some tea in the meantime and wait a bit",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-811856089,811856089,
kiminuo,2021-04-02 12:12:14,"This is probably useful for the Win64 test failure:\n\n```cpp\n// Run with: x86_64-w64-mingw32-g++ --std=c++17 --static paths.cpp17.cpp && wine ./a.exe\n// For comparison: g++ --std=c++17 --static paths.cpp17.cpp && ./a.out\n\n#include <string>\n#include <iostream>\n#include <filesystem>\nnamespace fs = std::filesystem;\n\nint main()\n{\n    // Basically copied from init_test_fixture.",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-812504155,812504155,
theStack,2021-04-18 15:13:00,"Concept ACK\nWill test on Linux and also OpenBSD soon (let's see if there are any issues on FFS2).",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-822007255,822007255,
promag,2021-05-15 09:54:17,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-841632369,841632369,
hebasto,2021-05-15 10:23:38,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-841635860,841635860,
kiminuo,2021-06-24 19:05:08,Would https://github.com/bitcoin/bitcoin/pull/22336/commits/17eff90922f005e88cba33fba1d14225e0474f93 from #22336 help?,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-867883071,867883071,
kiminuo,2021-06-24 19:18:55,"Regarding Android CI error: Currently, Android NDK 21 is used in the master branch, but Android NDK 22 is [necessary](https://github.com/android/ndk/wiki/Changelog-r22#changes) for std::filesystem support. \n\nQt [works with Android NDK 21](https://doc.qt.io/qt-5/android-getting-started.html#installing-the-prerequisites) but not with NDK 22 out of the box - it did not work for me and I'm not sur",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-867890847,867890847,
hebasto,2021-06-24 23:54:29,"> Qt [works with Android NDK 21](https://doc.qt.io/qt-5/android-getting-started.html#installing-the-prerequisites) but not with NDK 22 out of the box - it did not work for me and I'm not sure how to fix it, build gurus here will understand it much better.\n\nSee #22074.",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-868071331,868071331,
kiminuo,2021-06-25 09:34:26,"> > Qt [works with Android NDK 21](https://doc.qt.io/qt-5/android-getting-started.html#installing-the-prerequisites) but not with NDK 22 out of the box - it did not work for me and I'm not sure how to fix it, build gurus here will understand it much better.\n> \n> See #22074.\n\nThank you. That's the error I can see.",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-868370093,868370093,
fanquake,2021-07-21 07:50:03,"Now that we've branch of for 22.x, we can actually think about merging this. I've rebased on master (which should fix the Android build issues) and included some more changes from @kiminuo. That should mean that what's left to finish up here is the Windows changes, which I'd like to get to shortly.",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-883971188,883971188,
hebasto,2021-07-21 08:25:53,"> That should mean that what's left to finish up here is the Windows changes, which I'd like to get to shortly.\n\nAs this pr discussion is pretty long, here are Windows related comments in one place:\n- https://github.com/bitcoin/bitcoin/pull/20744#pullrequestreview-584505139\n- https://github.com/bitcoin/bitcoin/pull/20744#discussion_r571099540\n- https://github.com/bitcoin/bitcoin/pull/207",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-883994961,883994961,
hebasto,2021-07-21 08:49:42,"748a989fffa2f86876c366f6c3a58637e8588be8 ""build: set OSX_MIN_VERSION to 10.15""\n\n> This is required to use std::filesystem on macOS.\n\nDocumented in [Xcode 11 Release Notes](https://developer.apple.com/documentation/xcode-release-notes/xcode-11-release-notes).",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-884011546,884011546,
hebasto,2021-07-21 09:06:30,"748a989fffa2f86876c366f6c3a58637e8588be8 ""build: set OSX_MIN_VERSION to 10.15""\n\nHere're other places where the version 10.14 should be updated/dropped:\n```\n$ git grep -n -e '10\.14' -- ':(exclude)doc/release-notes/*'\ncontrib/devtools/test-symbol-check.py:139:        self.assertEqual(call_symbol_check(cc, source, executable, ['-Wl,-platform_version','-Wl,macos', '-Wl,10.14', '-Wl,11.4']),",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-884023306,884023306,
hebasto,2021-07-21 09:38:58,Approach ACK c5c3d5de39ee80aad8fa0c7700d42a872c11c225.,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-884046379,884046379,
DrahtBot,2021-07-24 11:17:42,<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds\n\n| File | commit 36aee0f3538ec3399a3838041ea5993aba5f518b<br>(master) | commit 4bd690d8c420268f4ed7fa3063822b0c9f4cc30c<br>(master and this pull) |\n|--|--|--|\n| SHA256SUMS.part | [`ee8f2fe0439aa065...`](https://drahtbot.space/guix/bitcoin/bitcoin/36aee0f3538ec3399a3838041ea5993aba5f518b/SHA256SUMS.part) | [`52af71c12089c1e0...`](https://,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-886038402,886038402,
MarcoFalke,2021-07-24 17:43:55,"```\n+ env CONFIG_SITE=/bitcoin/depends/x86_64-w64-mingw32/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking --enable-reduce-exports --disable-bench --disable-gui-tests --disable-fuzz-binary 'CFLAGS=-O2 -g -fno-ident' 'CXXFLAGS=-O2 -g -fno-ident' LDFLAGS=-Wl,--no-insert-timestamp\nconfigure: loading site script /bitcoin/depends/x86_",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-886086362,886086362,
MarcoFalke,2021-08-27 09:02:51,Can remove this: https://github.com/bitcoin/bitcoin/pull/20586/files#r656885645,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-907046926,907046926,
fanquake,2021-08-31 02:40:27,"Rebased.\n\n>  Here're other places where the version 10.14 should be updated/dropped:\n\nUpdated those that were relevant.\n\n> Can remove this: https://github.com/bitcoin/bitcoin/pull/20586/files#r656885645\n\nIncluded.\n\nNote that progress is still being made here. Someone else is currently looking at the Windows portion of the changes.\n",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-908850595,908850595,
dongcarl,2021-09-01 20:18:13,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-910700012,910700012,
hebasto,2021-09-08 18:21:35,"On native Win64 the only test fails: https://github.com/bitcoin/bitcoin/blob/5e3380b9f59481fc18e05b9d651c3c733abe4053/src/test/dbwrapper_tests.cpp#L401-L412\n\nCould be related to #17641, https://github.com/google/leveldb/issues/755, https://github.com/google/leveldb/pull/760\n\ncc @sipsorcery @laanwj ",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-915466961,915466961,
kiminuo,2021-09-09 08:04:26,"> \n> \n> On native Win64 the only test fails:\n> \n> https://github.com/bitcoin/bitcoin/blob/5e3380b9f59481fc18e05b9d651c3c733abe4053/src/test/dbwrapper_tests.cpp#L401-L412\n> \n> Could be related to #17641, [google/leveldb#755](https://github.com/google/leveldb/issues/755), [google/leveldb#760](https://github.com/google/leveldb/pull/760)\n\nSome observations, maybe it helps somebody to f",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-915858183,915858183,
hebasto,2021-09-09 09:04:07,My own research confirms @kiminuo's one.,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-915900831,915900831,
hebasto,2021-09-09 11:29:57,"> [Adding](https://github.com/bitcoin/bitcoin/pull/19245/files#diff-00b29588edfbcf3aeb68a4bcdc4278543f755fa428ae8194a280436386f8654fR439) `std::setlocale(LC_ALL, ""en_US.UTF-8"");` makes the test pass.\n\nFrom MS [docs](https://docs.microsoft.com/en-us/cpp/standard-library/filesystem?view=msvc-160):\n> Interconversions between these [pathname] representations are mediated, as needed, by the use o",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-916002925,916002925,
hebasto,2021-09-09 12:36:33,Recently [added](https://github.com/bitcoin/bitcoin/pull/22922) to Windows CI task functional tests are broken with  this branch.,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-916052349,916052349,
hebasto,2021-09-09 14:40:21,"Win64 CI task failed due to an unrelated issue:\n```\nhttps://github.com/PowerShell/PowerShell/releases/download/v7.1.0/PowerShell-7.1.0-win-x86.zip: WinHttpReceiveResponse() failed: 12030\n```\n\nso going to re-run it.",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-916163253,916163253,
ryanofsky,2021-09-09 21:04:12,"I didn't really get an chance to test and finish test this yet, but here is my attempt at improving the encoding situation on windows using the path(std::string) constructor override I mentioned earlier: 099e0207808687e3af2148e7c31353677b866d72 ([branch](https://github.com/ryanofsky/bitcoin/commits/review.20744.7-edit))\n\nReferences:\n\n- https://github.com/bitcoin/bitcoin/pull/20744#discussi",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-916435066,916435066,
fanquake,2021-09-10 03:23:06,"I'm seeing functional test failures on macOS again due to differences in paths `/var/` vs `/private/var`, where the former is a symlink to the later. I have a recollection of seeing this previously, and thought we'd fixed/worked around it.\n\n> I didn't really get an chance to test and finish test this yet, but here is my attempt at improving the encoding situation on windows using the path(std:",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-916600842,916600842,
ryanofsky,2021-09-10 04:45:23,"I had second thoughts about the path(std::string) constructor approach I was trying above. I think it adds to much magic. Better not to make a custom path class that differs subtly from the standard path class on windows, just to be able to do magic implicit conversions, when explicit conversions would be clearer anyway. So starting over.\n\n---\n\n### Windows encoding bugfix, attempt 2\n\n#",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-916627496,916627496,
kiminuo,2021-09-10 06:10:18,"@ryanofsky The `unicodepath` test passes for me on Windows 10 with your patch ([3e88c9f](https://github.com/bitcoin/bitcoin/commit/3e88c9f6b4e84ab5da78f4862266b5ff13bb8fc0) ([tag](https://github.com/ryanofsky/bitcoin/commits/review.20744.8-edit.1))). Nice work. \n\n",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-916656709,916656709,
ryanofsky,2021-09-13 19:43:45,"I posted a version of this PR rebased on top of #22937 here: e03ede894b86c793a33e84eade230c35d35457df,  ([tag](https://github.com/ryanofsky/bitcoin/commits/pr/stdfs.4))",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-918518674,918518674,
hebasto,2021-09-13 19:47:42,"> I posted a version of this PR rebased on top of #22937 here: [e03ede8](https://github.com/bitcoin/bitcoin/commit/e03ede894b86c793a33e84eade230c35d35457df), ([tag](https://github.com/ryanofsky/bitcoin/commits/pr/stdfs.4))\n\nTesting...",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-918521152,918521152,
hebasto,2021-09-15 00:49:44,"> I posted a version of this PR rebased on top of #22937 here: [e03ede8](https://github.com/bitcoin/bitcoin/commit/e03ede894b86c793a33e84eade230c35d35457df), ([tag](https://github.com/ryanofsky/bitcoin/commits/pr/stdfs.4))\n\nThe version with green CI for the Windows MSVC build is here:\n- [branch](https://github.com/hebasto/bitcoin/commits/pr22937-0914-COMBINED)\n- [CI tests](https://cirrus-c",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-919612293,919612293,
ryanofsky,2021-09-16 16:04:27,"#22937 was updated with fixes above. Rebased version of this PR after that one is: aeabf62ae14a0a281ffc865bfd4975ba65be9419 ([tag](https://github.com/ryanofsky/bitcoin/commits/pr/stdfs.5))\n\n---\n\nEDIT: Updated again to fix CI issue: 8f015cb0679217ec83db36954b3751223f3bbfb6 ([tag](https://github.com/ryanofsky/bitcoin/commits/pr/stdfs.6))\n",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-921033707,921033707,
fanquake,2021-09-21 23:54:51,Rebased this after #22994 & #22993. Going to split out a couple more of the commits here shortly.,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-924471070,924471070,
fanquake,2021-09-28 06:12:26,Rebased after the merge of #23060. All prerequisites that were part of this PR have now been merged. The next step to moving to `std::filesystem` should be #22937.,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-928886225,928886225,
fanquake,2021-09-29 02:39:48,"I've modified the `std::filesystem` macro to try using `-lc++fs` if `-lstdc++fs` doesn't work. Should fix the issues in the nowallet CI, which uses Clang 7 and libc++.\n\n> Removing of boost/filesystem/fstream.hpp should be done in the \n\nDone.",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-929776413,929776413,
hebasto,2021-09-29 22:25:26,"> That should mean that what's left to finish up here is the Windows changes, which I'd like to get to shortly.\n\nAny update about cross-compiling for Windows?",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-930590511,930590511,
dongcarl,2021-10-05 21:24:47,"> One other thing we'll likely need to do here is move Guix to using a newer version of mingw-w64. iirc we're currently using 7, but I'm pretty sure we'll required 8, which is available in Guix. cc @dongcarl.\n\nI'm not sure upgrading to mingw-w64 v8 will affect anything, could you link me to the specific failure that makes you think this is required?",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-934867077,934867077,
fanquake,2021-10-07 10:23:23,"> Any update about cross-compiling for Windows?\n\n> I'm not sure upgrading to mingw-w64 v8 will affect anything, could you link me to the specific failure that makes you think this is required?\n\nDiscussed with @dongcarl, and `lstdc++fs` is missing because we don't yet compile our Guix GCC with [`--enable-libstdcxx-filesystem-ts`](https://gcc.gnu.org/onlinedocs/gcc-11.2.0/libstdc++/manual/ma",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-937658733,937658733,
fanquake,2021-10-16 07:32:28,I've rebased to account for #22937 added a commit for Guix to pass `--enable-libstdcxx-filesystem-ts=yes` to our mingw GCC build. However libstdc++ is failing to build it's filesystem component. @dongcarl could you take a look? The full GCC build output is here: https://gist.github.com/fanquake/c040358952075b054cda7786e3e98563.,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-944873699,944873699,
hebasto,2021-10-18 18:27:35,"I was able to cross compile for Windows with the two following steps:\n\n1. static cast `fs::path` instances to `std::filesystem::path` for all of stream objects\n<details><summary>patch</summary>\n<p>\n\n```diff\ndiff --git a/src/init.cpp b/src/init.cpp\nindex 164b7bb55..2cbef67ea 100644\n--- a/src/init.cpp\n+++ b/src/init.cpp\n@@ -118,7 +118,7 @@ static fs::path GetPidFile(const ArgsM",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-946046666,946046666,
fanquake,2021-10-21 08:00:37,"> Forgot to push?\n\nWas working on the Guix changes. I've now cherry-picked patches from GCC 9, which should mirror what Debian did with it's mingw-w64 and GCC 8, such that the Guix Windows cross compile should work when using `std::filesystem`. Compiling GCC 8.4.0 (with `--enable-libstdcxx-filesystem-ts=yes`)  and mingw-w64 works, however I'm  running into issues when compiling Core, and will ",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-948358014,948358014,
hebasto,2021-10-21 09:26:58,"@MarcoFalke \n\nhttps://cirrus-ci.com/task/6003193059475456:\n```\nERROR: The syscall ""sendfile"" (syscall number 40) is not allowed by the syscall sandbox in thread ""httpworker.2"". Please report.\n```",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-948426216,948426216,
fanquake,2021-10-21 09:28:43,"> https://cirrus-ci.com/task/6003193059475456:\n\n```bash\n node1 2021-10-21T08:30:38.456944Z [httpworker.0] [wallet/wallet.h:792] [WalletLogPrintf] [default wallet] Rescan completed in               0ms \n node1 2021-10-21T08:30:38.458646Z [http] [httpserver.cpp:238] [http_request_cb] Received a POST request for / from 127.0.0.1:57124 \n node1 2021-10-21T08:30:38.458768Z [httpworker.2] [rpc/",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-948427495,948427495,
MarcoFalke,2021-10-21 10:30:41,Any idea why the windows unit test failed?,https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-948475504,948475504,
fanquake,2021-10-21 10:32:11,"> Any idea why the windows unit test failed?\n\n```bash\ntest/util_tests.cpp(50): Entering test case ""util_datadir""\n2021-10-21T09:51:37.572779Z [test/util/setup_common.cpp:65] [Seed] Seed: Setting random seed for current tests to RANDOM_CTX_SEED=72b0882141d4b40dac04b3bff3080a44a6998b9418d1227d677d5e2ab298171c\n2021-10-21T09:51:37.572779Z [init/common.cpp:165] [LogPackageVersion] Bitcoin Core",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-948476630,948476630,
hebasto,2021-10-21 10:35:00,"> Any idea why the windows unit test failed?\n\nTesting a fix -- https://github.com/hebasto/bitcoin/commit/b87da976f8b1faa502b26db9052b505e9ebcb955\n\nUPDATE: not working (",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-948478621,948478621,
hebasto,2021-10-21 10:39:37,"There is an inconsistency in the current state of this PR: `fsbridge::ifstream` is used along with `std::ifstream` (same for `ofstream`).\n\nShouldn't we stick to the only namespace -- `fsbridge` or `std`?",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-948482134,948482134,
hebasto,2021-10-21 11:13:40,"> Was working on the Guix changes. I've now cherry-picked patches from GCC 9\n\nDoes switching to GCC 9 in the Guix building system look more preferable?",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-948506720,948506720,
DrahtBot,2021-10-30 08:59:34,"<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-955176524,955176524,
fanquake,2021-11-10 07:43:32,"> Does switching to GCC 9 in the Guix building system look more preferable?\n\nI'd rather we switch to GCC 10. I'm currently upstreaming some changes, i.e https://lists.gnu.org/archive/html/guix-patches/2021-11/msg00346.html, to fixup the GCC 10 build in Guix, and will open a separate PR proposing that change. ",https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-964862205,964862205,
vasild,2020-12-22 14:47:16,nit: remove <> around std::filesystem - it is not a header.,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r547318286,547318286,configure.ac
vasild,2020-12-22 14:49:01,"nit: std::filesystem is part of C++17, maybe not worth mentioning explicitly.",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r547319297,547319297,doc/dependencies.md
MarcoFalke,2020-12-22 14:54:21,"Would be nice to not change this. clang-7 is also in bionic: \n\n* https://packages.ubuntu.com/bionic-updates/clang-7",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r547322178,547322178,ci/test/00_setup_env_native_nowallet.sh
MarcoFalke,2020-12-22 14:55:46,"the comment should stay to say that this is the version used in gitian as well. I presume this pull is blocked (waiting on) gitian getting bumped to focal? Thus the label ""waiting for other"".",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r547322946,547322946,ci/test/00_setup_env_win64.sh
MarcoFalke,2020-12-22 14:58:49,"Oh, and this has to be bumped in the cirrus yaml as well (Sorry, confusing, but I didn't find a way around this redundancy)",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r547324716,547324716,ci/test/00_setup_env_win64.sh
vasild,2020-12-22 14:59:15,"Shouldn't that be `+` instead of `/` before `"".incomplete""`?",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r547324938,547324938,src/rpc/blockchain.cpp
vasild,2020-12-22 15:01:35,"Why this change? Does it break with `+ ""/""`?",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r547326207,547326207,src/test/util_tests.cpp
fanquake,2020-12-22 15:07:09,"> Oh, and this has to be bumped in the cirrus yaml as well\n\nThanks. Did not realise that was required.",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r547329448,547329448,ci/test/00_setup_env_win64.sh
vasild,2020-12-22 15:13:46,Why not just `GetWalletDir() / name` even if `name` is empty?,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r547333061,547333061,src/wallet/wallettool.cpp
mjdietzx,2020-12-23 15:33:43,"same: ""Why not just GetWalletDir() / name even if name is empty?""",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r548015393,548015393,src/wallet/wallet.cpp
mjdietzx,2020-12-23 15:40:59,"similar to ""Why not just GetWalletDir() / name even if name is empty?"", is another `if` branch really needed here?",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r548018984,548018984,src/util/system.cpp
ryanofsky,2020-12-23 17:21:56,"I think this isn't equivalent if wallet_file is the empty string (this will add trailing slash now, wouldn't add trailing slash previously).",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r548065112,548065112,src/wallet/load.cpp
fanquake,2020-12-24 06:30:06,"Thanks, I've fixed this in the next push.",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r548412727,548412727,src/rpc/blockchain.cpp
kiminuo,2021-01-13 14:21:02,"Yes, this simple sample confirms it:\n\n```cpp\n// Run with: g++ --std=c++17 path.cpp && ./a.out\n\n#include <string>\n#include <iostream>\n#include <filesystem>\nnamespace fs = std::filesystem;\n\nint main()\n{\n    fs::path walletDir = ""/home/user"";\n    std::string wallet_file = """";\n    fs::path path = fs::absolute(walletDir / wallet_file);\n\n    std::cout << ""walletDir = "" <<",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r556553883,556553883,src/wallet/load.cpp
ryanofsky,2021-01-21 20:01:10,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (f449c26f30bb8e223d4d7833c579d555a0005daa)\n\nre: https://github.com/bitcoin/bitcoin/pull/20744#discussion_r556553883\n\n> Yes, this simple sample confirms it:\n\nIssue should be resolved when this is rebased after #20932.",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r562161120,562161120,src/wallet/load.cpp
ryanofsky,2021-01-21 20:03:21,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (f449c26f30bb8e223d4d7833c579d555a0005daa)\n\nre: https://github.com/bitcoin/bitcoin/pull/20744#discussion_r548015393\n\n> same: ""Why not just GetWalletDir() / name even if name is empty?""\n\nSee https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-750430904, this avoids adding an empty path component and trailing sla",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r562162282,562162282,src/wallet/wallet.cpp
ryanofsky,2021-01-21 20:05:16,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (f449c26f30bb8e223d4d7833c579d555a0005daa)\n\nre: https://github.com/bitcoin/bitcoin/pull/20744#discussion_r548018984\n\n> similar to ""Why not just GetWalletDir() / name even if name is empty?"", is another `if` branch really needed here?\n\nSee https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-750430904, this avoid",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r562163382,562163382,src/util/system.cpp
ryanofsky,2021-01-21 20:06:09,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (f449c26f30bb8e223d4d7833c579d555a0005daa)\n\nre: https://github.com/bitcoin/bitcoin/pull/20744#discussion_r547333061\n\n> Why not just `GetWalletDir() / name` even if `name` is empty?\n\nSee https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-750430904, this avoids adding an empty path component and trailing slash i",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r562163909,562163909,src/wallet/wallettool.cpp
kiminuo,2021-01-22 10:01:49,"@fanquake I believe this one should be:\n\n```c++\npath = fsbridge::AbsPathJoin(path, BaseParams().DataDir());\n```",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r562520187,562520187,src/util/system.cpp
ryanofsky,2021-02-05 16:33:06,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (7810d151f5219e634b431c5393771616c759aef7)\n\nWhy is this needed? Might be better to revert to keep going through fsbridge",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r571094294,571094294,src/test/script_tests.cpp
ryanofsky,2021-02-05 16:36:44,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (7810d151f5219e634b431c5393771616c759aef7)\n\nWould be more reassuring that behavior was not changing if tests could stay the same. Would be useful to know the reason for changes to this test if they are can't be reverted.",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r571096606,571096606,src/test/util_tests.cpp
ryanofsky,2021-02-05 16:40:42,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (7810d151f5219e634b431c5393771616c759aef7)\n\nThe change doesn't seem right and would be good to revert or explain. This is the non-windows section and HOME environment variable and pathRet should both be byte strings with no need to assume any character encoding",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r571099540,571099540,src/util/system.cpp
ryanofsky,2021-02-05 16:47:20,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (7810d151f5219e634b431c5393771616c759aef7)\n\nIf using fs::u8path for -datadir below, probably makes sense to add it here for -blocksdir to be consistent.\n\nThese one-off usages of fs::u8path seem dodgy in general though. Given that c++17 path class doesn't support an imbue method (https://stackoverflow.com/questions/4276516",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r571104004,571104004,src/util/system.cpp
ryanofsky,2021-02-05 17:02:42,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (7810d151f5219e634b431c5393771616c759aef7)\n\nMentioned in a previous comment but I think a better workaround for lack of `path::imbue` than current approach of calling `fs::u8path` manually would be to use namespace solution from https://stackoverflow.com/questions/42765168/change-narrow-string-encoding-or-missing-stdfilesyste",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r571114426,571114426,src/util/system.cpp
ryanofsky,2021-02-05 17:07:23,"In commit ""build: remove boost::filesystem"" (9f37a39b11b240f75b97fb565e6d8cf44972ec49)\n\nThis change seems like it belongs in previous commit ""refactor: replace boost::filesystem with std::filesystem"" (7810d151f5219e634b431c5393771616c759aef7) instead of this one.\n",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r571117364,571117364,doc/dependencies.md
ryanofsky,2021-02-05 17:07:32,"In commit ""build: remove boost::filesystem"" (9f37a39b11b240f75b97fb565e6d8cf44972ec49)\n\nThis change seems like it belongs in previous commit ""refactor: replace boost::filesystem with std::filesystem"" (7810d151f5219e634b431c5393771616c759aef7) instead of this one.\n",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r571117474,571117474,doc/dependencies.md
ryanofsky,2021-02-05 17:09:51,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (7810d151f5219e634b431c5393771616c759aef7)\n\nIt would be nice to split this commit up into two commits to separate the build system changes from the c++ code changes. The build system changes can be a first commit and the c++ code changes can be a second commit.",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r571119008,571119008,configure.ac
ryanofsky,2021-02-05 17:17:32,"In commit ""build: set OSX_MIN_VERSION to 10.15"" (db29710bc12f97d9de78fb177322a8ac41f7c87d)\n\nWould be good to consolidate all the config, makefile, and documentation changes adding build support for std::filesystem into a single atomic commit. Right now they are scattered across three commits and everything seems very mixed up:\n\n- [ ] 7810d151f5219e634b431c5393771616c759aef7 refactor: repla",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r571123955,571123955,depends/hosts/darwin.mk
fanquake,2021-02-09 12:30:32,Reverted to `fsbridge::ifstream`.,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r572845580,572845580,src/test/script_tests.cpp
fanquake,2021-02-09 12:33:46,Gitian has now been bumped.,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r572847435,572847435,ci/test/00_setup_env_win64.sh
MarcoFalke,2021-02-09 12:36:20,Still not addressed?,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r572848910,572848910,ci/test/00_setup_env_native_nowallet.sh
fanquake,2021-02-09 12:38:29,That's why it hasn't been marked as resolved.,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r572850246,572850246,ci/test/00_setup_env_native_nowallet.sh
fanquake,2021-02-09 12:44:01,"> Why this change? Does it break with + ""/""?\n\nYes, at ef8c98b1a54280f279f5319f386c44026893bf1f this currently fails with the trailing slash:\n```bash\nerror: in ""util_tests/util_datadir"": check dd_norm == GetDataDir() has failed [""/var/folders/z2/cn877pxd3czdfh47mfkmbwgm0000gn/T/test_common_Bitcoin Core/873b1e644e770a9d5cdfc8f89323a344256001e7cedc14e18f2ae7c4a8ea8f94"" != ""/var/folders/z2/cn8",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r572853758,572853758,src/test/util_tests.cpp
fanquake,2021-02-09 12:53:57,This has now been dropped.,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r572859957,572859957,ci/test/00_setup_env_native_nowallet.sh
fanquake,2021-02-10 01:17:18,"This has been rebased post #20932, so marking this as resolved.",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r573371977,573371977,src/wallet/load.cpp
ryanofsky,2021-02-11 23:41:24,"re: https://github.com/bitcoin/bitcoin/pull/20744#discussion_r547326207\n\n> Yes, at [ef8c98b](https://github.com/bitcoin/bitcoin/commit/ef8c98b1a54280f279f5319f386c44026893bf1f) this currently fails with the trailing slash:\n\nThanks, I think this can be marked resolved, but I it would be good to add a warning in the commit description to alert reviewers and people trying to track down regres",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r574903725,574903725,src/test/util_tests.cpp
fanquake,2021-02-17 01:49:48,"I've added to the commit message, so will mark this as resolved.",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r577268965,577268965,src/test/util_tests.cpp
MarcoFalke,2021-09-09 14:42:34,"might need\n\n```cpp\n#include <clocale>",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r705414381,705414381,src/test/dbwrapper_tests.cpp
hebasto,2021-09-09 14:44:08,"and\n\n```diff\n--- a/test/lint/lint-locale-dependence.sh\n+++ b/test/lint/lint-locale-dependence.sh\n@@ -44,6 +44,7 @@ KNOWN_VIOLATIONS=(\n     ""src/node/blockstorage.cpp:.*atoi""\n     ""src/qt/rpcconsole.cpp:.*atoi""\n     ""src/rest.cpp:.*strtol""\n+    ""src/test/dbwrapper_tests.cpp:.*setlocale""\n     ""src/test/dbwrapper_tests.cpp:.*snprintf""\n     ""src/test/fuzz/locale.cpp""\n     ""src/",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r705415765,705415765,src/test/dbwrapper_tests.cpp
fanquake,2021-09-10 03:20:09,added & added,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r705867186,705867186,src/test/dbwrapper_tests.cpp
MarcoFalke,2021-09-21 08:22:36,in the doc commit: Does #22339 also need to be updated?,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r712812447,712812447,doc/dependencies.md
fanquake,2021-09-21 08:23:56,Gunna split more of this out. Will address.,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r712813505,712813505,doc/dependencies.md
hebasto,2021-09-26 22:11:36,"1c655826850235fbf13dc90daf66e2b3facdc9ba\n\nMSVC implementation of `std::filesystem` has different error messages:\n\n```suggestion\n        assert_raises_rpc_error(err_code, ""filesystem error:"" if sys.platform != 'win32' else ""create_directories:"", self.nodes[0].createwallet, ""w8/bad"")\n```\n\n(and `import sys`, of course).",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r716269676,716269676,test/functional/wallet_multiwallet.py
MarcoFalke,2021-09-27 06:24:45,Wouldn't it make more sense to use EXEEXT to avoid issues when the tests are run in wine or so?,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r716390149,716390149,test/functional/wallet_multiwallet.py
hebasto,2021-09-28 12:41:45,"Removing of `boost/filesystem/fstream.hpp` should be done in the _""refactor: replace boost::filesystem with std::filesystem""_ commit (5fb92bab5f8c6c07bb668d7a7f2203f389a4956d) to let it pass `test/lint/lint-includes.sh`.",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r717534249,717534249,test/lint/lint-includes.sh
ryanofsky,2021-10-16 17:38:44,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (6316193878d66bb35dbf96f8ec2047591e3bdb46)\n\nI think it would be good to simplify \n\n> which worked well in the boost::filesystem implementation but have unsafe and unpredictable behavior on Windows in the std::filesystem implementation\n\nto just\n\n> which have unsafe and unpredictable behavior on Windows\n\nbecause",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r730291617,730291617,src/fs.h
hebasto,2021-10-18 15:17:42,"6316193878d66bb35dbf96f8ec2047591e3bdb46 _""refactor: replace boost::filesystem with std::filesystem""_\n\n[`boost::io::quoted`](https://www.boost.org/doc/libs/1_71_0/libs/io/doc/quoted_manip.html) and [`std::quoted`](https://en.cppreference.com/w/cpp/io/manip/quoted) differ in the parameter order, therefore,\n```suggestion\n    return std::quoted(s, '""', '&');\n```\n\n---\n\nAlso see https",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r731038023,731038023,src/fs.h
ryanofsky,2021-10-18 21:49:06,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (6316193878d66bb35dbf96f8ec2047591e3bdb46)\n\nThese changes are not going to have any useful effect on dbwrapper after #22937, so should be reverted now. leveldb is [expecting](https://github.com/bitcoin/bitcoin/blob/ff65b696f3c6f6e17a790c6646249163ddb39eda/src/leveldb/util/env_windows.cc#L390) a UTF8 string on windows, that's ",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r731340496,731340496,src/test/dbwrapper_tests.cpp
ryanofsky,2021-10-18 22:14:44,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (6316193878d66bb35dbf96f8ec2047591e3bdb46)\n\nThis suggestion is still relevant. It would be better to implement or update it than to drop it. It can be implemented with:\n\n```diff\n@@ -12,7 +12,6 @@\n \n std::vector<fs::path> ListDatabases(const fs::path& wallet_dir)\n {\n-    const size_t offset = wallet_dir.native().",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r731354095,731354095,src/wallet/db.cpp
ryanofsky,2021-10-18 22:17:42,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (6316193878d66bb35dbf96f8ec2047591e3bdb46)\n\nIt's fine to make a path from an ASCII string literal, so this could be left unchanged:\n\n```diff\ndiff --git a/src/wallet/test/init_test_fixture.cpp b/src/wallet/test/init_test_fixture.cpp\nindex 0755af42a10..f9fb17080b4 100644\n--- a/src/wallet/test/init_test_fixture.cpp\n+",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r731355378,731355378,src/wallet/test/init_test_fixture.cpp
ryanofsky,2021-10-18 22:42:02,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (6316193878d66bb35dbf96f8ec2047591e3bdb46)\n\nI think this line should just be deleted. It looks like this `StripRedundantLastElementsOfPath` call was added by mistake in #21244, and never did anything, because the last path element above is always ""blocks"". Keeping this just adds unnecessary complexity and creates a minor chan",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r731366070,731366070,src/util/system.cpp
MarcoFalke,2021-10-19 08:40:35,"This was added in https://github.com/bitcoin/bitcoin/pull/20080 , not 21244",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r731628877,731628877,src/util/system.cpp
hebasto,2021-10-19 10:02:11,"> it resolves symlinks now\n\nIsn't it a better user experience? At least for `-blocksdir`?",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r731700989,731700989,src/util/system.cpp
MarcoFalke,2021-10-19 10:05:35,new features should be added in non-refactoring commits,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r731703663,731703663,src/util/system.cpp
ryanofsky,2021-10-19 12:27:36,"re: https://github.com/bitcoin/bitcoin/pull/20744#discussion_r731700989\n\n> Isn't it a better user experience? At least for `-blocksdir`?\n\nThis is a minor point, but I don't think changing the path in general is a better experience, and I'm not sure in which cases it could be a better experience. If I specify `-blocksdir=/var/lib/bitcoin/blocks` I think like to see that same path when I'm g",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r731810802,731810802,src/util/system.cpp
ryanofsky,2021-10-19 12:59:39,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (6316193878d66bb35dbf96f8ec2047591e3bdb46)\n\nTo preserve behavior, I think it'd be best to keep this function instead of replacing it with a call to [`canonical`](https://en.cppreference.com/w/cpp/filesystem/canonical) which adds new transformations like normalizing path elements in the middle of the path and resolving symlink",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r731839209,731839209,src/util/system.cpp
ryanofsky,2021-10-19 13:01:33,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (6316193878d66bb35dbf96f8ec2047591e3bdb46)\n\nMentioned above, but I think it'd be best to keep this line unchanged to preserve behavior, keeping the call to `StripRedundantLastElementsOfPath` instead of switching to `canonical`",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r731840922,731840922,src/util/system.cpp
ryanofsky,2021-10-19 13:46:58,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (6316193878d66bb35dbf96f8ec2047591e3bdb46)\n\nNote just to explain this change:\n\n- In boost, `path(""wallets"") / path(""/"")` results in `path(""wallets/"")`, because the two paths are just literally concatenated with an extra separator if needed. https://www.boost.org/doc/libs/1_68_0/libs/filesystem/doc/reference.html#path-appe",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r731884984,731884984,src/wallet/test/init_test_fixture.cpp
hebasto,2021-10-19 15:04:04,"Agree with @ryanofsky in both:\n> dropping this line to preserve behavior makes sense for this commit\n\n> even in that PR it should not have any effect",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r731967135,731967135,src/util/system.cpp
fanquake,2021-10-21 04:12:57,Fixed in next push.,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r733305544,733305544,src/fs.h
fanquake,2021-10-21 04:13:15,Changed in next push.,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r733305629,733305629,src/fs.h
fanquake,2021-10-21 04:13:40,Taken.,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r733305760,733305760,src/wallet/db.cpp
fanquake,2021-10-21 04:14:08,I've dropped this line for now.,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r733305910,733305910,src/util/system.cpp
fanquake,2021-10-21 04:14:51,We're now preserving `StripRedundantLastElementsOfPath` and I've included this change.,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r733306072,733306072,src/util/system.cpp
fanquake,2021-10-21 04:15:10,Reverted the change here.,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r733306163,733306163,src/util/system.cpp
ryanofsky,2021-10-21 12:44:50,"In commit ""refactor: replace boost::filesystem with std::filesystem"" (b70c84348ac7a8e427a1183f894c73e52c734529)\n\nThese static_casts seem to be added because even though `GetPidFile` returns `fs::path` and `fs::path` inherits from `std::filesystem::path`, the `basic_ofstream` constructor has an `_If_fs_path` requirement that needs an exact `std::filesystem::path` match:\n\n```c++\n      temp",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r733637362,733637362,src/init.cpp
hebasto,2021-10-21 13:35:33,I'd prefer to use `path.c_str()` that will allow us to use just `std::ifstream` and `std::ofstream`.,https://github.com/bitcoin/bitcoin/pull/20744#discussion_r733684264,733684264,src/init.cpp
hebasto,2021-10-21 20:40:03,"Despite of removing `boost-filesystem` from the vcpkg manifest, the ""Win64 native"" CI task [does build it](https://api.cirrus-ci.com/v1/task/5721718082764800/logs/build.log):\n```\n...\n  The following packages will be built and installed:\n...\n      boost-filesystem[core]:x64-windows-static -> 1.75.0#1\n...\n```\n\nI assume it is caused by dependencies of the `boost-process` package.",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r734030062,734030062,build_msvc/vcpkg.json
ryanofsky,2021-11-01 16:49:09,"re: https://github.com/bitcoin/bitcoin/pull/20744#discussion_r733637362\n\nI was looking into this again, thinking passing `path.native()` might be a third alternative, but it doesn't work because there's no constructor https://en.cppreference.com/w/cpp/io/basic_ifstream/basic_ifstream accepting the `wstring` on windows like the one accepting the wide character pointer returned by `path.c_str()`",https://github.com/bitcoin/bitcoin/pull/20744#discussion_r740366627,740366627,src/init.cpp
