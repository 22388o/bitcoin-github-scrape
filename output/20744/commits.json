[
  {
    "sha": "9604eda1abe6ffc02c97e3434c3c2c4ce1250794",
    "node_id": "C_kwDOABII59oAKDk2MDRlZGExYWJlNmZmYzAyYzk3ZTM0MzRjM2MyYzRjZTEyNTA3OTQ",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-10-16T03:03:08Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-10-21T07:26:18Z"
      },
      "message": "guix: configure mingw cross GCC with --enable-libstdcxx-filesystem-ts\n\nWhile this is enabled by default for some targets, when using GCC 8 it\nis not enabledd by default for mingw. Prefer explicitly enabling this\noption for now. Required for std::filesystem usage.\n\nSee: https://gcc.gnu.org/onlinedocs/libstdc++/manual/configure.html",
      "tree": {
        "sha": "327bf13256e86fe2cad760a78bb5d87be4b29d52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/327bf13256e86fe2cad760a78bb5d87be4b29d52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9604eda1abe6ffc02c97e3434c3c2c4ce1250794",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmFxFhwACgkQLuufXMCV\nJsEnJw/9G16iZRdaDflqfKASmRqSjB6mCqKhWOtAIuhBunRqrGkk5W8qmmzHOjTr\njSPIFQiuirFzetyV2ZXW7TWlv4+pCrkwTyr2V3Vi8NtXM76WtM/mB4GFeoBpBAD9\nq+QUh9UTZA6E9bFID0aPkwsVqUntgySDa61QYcdHYIFI3R/tNRsulLvcO29h3AOv\noTHMxkwFjXb1MwVApO9HR2eTuTvwk4WTCXptgds7BffwvvID121Fd3/4d3j17Wvk\nipBtgw3D9LlbSHeXCotbI+529Bnw7qYOAAFQN0v4iNk8QjVS98YREQSBxke2HaOX\nteOSWmdaE6rujsP/JVxJyW532AlTP1Vf6b9FkmPoWRv3n/fh4ZsaB6ZAuPY7QqBd\nQGxLs7dqIHqhWwYR/skDHQ4Y5MCSym2YND82nLWLcew4CDwrpvAvToJkdb+GE0dJ\n3RIi/rrv3RZIqk9JL1Q27PVsQgAjwduTd/ExfnmLIKLvOw3Jhdwy4pUfDGN0vdzY\nRHWDxLKtWohK8RK1OikjmcT5qCB49+1QsKE8kG44jj7R/c/Y5yAXrixIZ8K9eV3x\ncO2Gu/XvIBvCHnPn1fqIHfaYqJQGQZgItaoyiSvxAqjt6c+J5v7TUTUShMxQGfTD\nVHKyP4mluYANG2BmoMtPxsC1ayCcTby7UJddclAThmThhJYHdHM=\n=o4LD\n-----END PGP SIGNATURE-----",
        "payload": "tree 327bf13256e86fe2cad760a78bb5d87be4b29d52\nparent c53e95f22cc2b15b4b7364186d9994237ee734e8\nauthor fanquake <fanquake@gmail.com> 1634353388 +0800\ncommitter fanquake <fanquake@gmail.com> 1634801178 +0800\n\nguix: configure mingw cross GCC with --enable-libstdcxx-filesystem-ts\n\nWhile this is enabled by default for some targets, when using GCC 8 it\nis not enabledd by default for mingw. Prefer explicitly enabling this\noption for now. Required for std::filesystem usage.\n\nSee: https://gcc.gnu.org/onlinedocs/libstdc++/manual/configure.html\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9604eda1abe6ffc02c97e3434c3c2c4ce1250794",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9604eda1abe6ffc02c97e3434c3c2c4ce1250794",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c53e95f22cc2b15b4b7364186d9994237ee734e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c53e95f22cc2b15b4b7364186d9994237ee734e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c53e95f22cc2b15b4b7364186d9994237ee734e8"
      }
    ],
    "stats": {
      "total": 5973,
      "additions": 5969,
      "deletions": 4
    },
    "files": [
      {
        "sha": "5315cea5ada04bcac22589a69d291c0a46c4d77f",
        "filename": "contrib/guix/manifest.scm",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/manifest.scm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/manifest.scm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/manifest.scm?ref=9604eda1abe6ffc02c97e3434c3c2c4ce1250794",
        "patch": "@@ -137,7 +137,14 @@ chain for \" target \" development.\"))\n \n (define base-gcc\n   (package-with-extra-patches gcc-8\n-    (search-our-patches \"gcc-8-sort-libtool-find-output.patch\")))\n+    (search-our-patches \"gcc-8-sort-libtool-find-output.patch\"\n+                        \"0001-Add-support-for-opening-file-streams-from-wide-chara.patch\"\n+                        \"0002-Refactor-path-construction-from-null-terminated-iter.patch\"\n+                        \"0003-PR-libstdc-78870-support-std-filesystem-on-Windows.patch\"\n+                        \"0004-LWG-2989-hide-path-iostream-operators-from-normal-lo.patch\"\n+                        \"0005-PR-libstdc-83306-make-filesystem_error-no-throw-copy.patch\"\n+                        \"0006-Overload-std-distance-and-std-advance-for-path-itera.patch\"\n+                        \"0007-PR-libstdc-67843-set-shared_ptr-lock-policy-at-build.patch\")))\n \n ;; Building glibc with stack smashing protector first landed in glibc 2.25, use\n ;; this function to disable for older glibcs\n@@ -167,14 +174,17 @@ desirable for building Bitcoin Core release binaries.\"\n                         base-libc\n                         base-gcc))\n \n-(define (make-gcc-with-pthreads gcc)\n-  (package-with-extra-configure-variable gcc \"--enable-threads\" \"posix\"))\n+(define (make-gcc-with-pthreads-and-filesystem gcc)\n+  (package-with-extra-configure-variable\n+   (package-with-extra-configure-variable\n+    gcc \"--enable-libstdcxx-filesystem-ts\" \"yes\")\n+    \"--enable-threads\" \"posix\"))\n \n (define (make-mingw-pthreads-cross-toolchain target)\n   \"Create a cross-compilation toolchain package for TARGET\"\n   (let* ((xbinutils (make-binutils-with-mingw-w64-disable-flags (cross-binutils target)))\n          (pthreads-xlibc mingw-w64-x86_64-winpthreads)\n-         (pthreads-xgcc (make-gcc-with-pthreads\n+         (pthreads-xgcc (make-gcc-with-pthreads-and-filesystem\n                          (cross-gcc target\n                                     #:xgcc (make-ssp-fixed-gcc base-gcc)\n                                     #:xbinutils xbinutils"
      },
      {
        "sha": "e75530549f9d47c3a571de7d0f7b47c6b4d44c2d",
        "filename": "contrib/guix/patches/0001-Add-support-for-opening-file-streams-from-wide-chara.patch",
        "status": "added",
        "additions": 903,
        "deletions": 0,
        "changes": 903,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/patches/0001-Add-support-for-opening-file-streams-from-wide-chara.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/patches/0001-Add-support-for-opening-file-streams-from-wide-chara.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/0001-Add-support-for-opening-file-streams-from-wide-chara.patch?ref=9604eda1abe6ffc02c97e3434c3c2c4ce1250794",
        "patch": "@@ -0,0 +1,903 @@\n+From a62ffc785174cc42923d5d358c590b5a6b1f9cf9 Mon Sep 17 00:00:00 2001\n+From: Jonathan Wakely <jwakely@redhat.com>\n+Date: Mon, 21 May 2018 18:18:35 +0100\n+Subject: [PATCH 1/6] Add support for opening file streams from wide character\n+ strings\n+\n+C++17 added new overloads to <fstream> class templates to support\n+opening files from wide character strings \"on systems where\n+filesystem::path::value_type is not char\". This patch adds those\n+overloads conditional on _wfopen being available, and enables them for\n+pre-C++17 modes as well.\n+\n+\tAdd support for opening file streams from wide character strings.\n+\t* config/io/basic_file_stdio.cc [_GLIBCXX_HAVE__WFOPEN]\n+\t(__basic_file<char>::open(const wchar_t*, ios_base::openmode)):\n+\tDefine new overload.\n+\t* config/io/basic_file_stdio.h [_GLIBCXX_HAVE__WFOPEN]\n+\t(__basic_file<char>::open(const wchar_t*, ios_base::openmode)):\n+\tDeclare new overload.\n+\t* configure.ac: Check for _wfopen.\n+\t* crossconfig.m4: Likewise.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* include/bits/fstream.tcc [_GLIBCXX_HAVE__WFOPEN]\n+\t(basic_filebuf<C,T>::open(const wchar_t*, ios_base::openmode)):\n+\tDefine new overload.\n+\t* include/std/fstream [_GLIBCXX_HAVE__WFOPEN]\n+\t(basic_filebuf<C,T>::open(const wchar_t*, ios_base::openmode)):\n+\tDeclare new overload.\n+\t[_GLIBCXX_HAVE__WFOPEN]\n+\t(basic_ifstream<C,T>::basic_ifstream(const wchar_t*, openmode))\n+\t(basic_ifstream<C,T>::basic_open(const wchar_t*, openmode))\n+\t(basic_ofstream<C,T>::basic_ifstream(const wchar_t*, openmode))\n+\t(basic_ofstream<C,T>::basic_open(const wchar_t*, openmode))\n+\t(basic_fstream<C,T>::basic_ifstream(const wchar_t*, openmode))\n+\t(basic_fstream<C,T>::basic_open(const wchar_t*, openmode)): Define\n+\tnew overloads.\n+\t* testsuite/27_io/basic_filebuf/open/wchar_t/1.cc: New.\n+\t* testsuite/27_io/basic_ifstream/cons/wchar_t/1.cc: New.\n+\t* testsuite/27_io/basic_ifstream/open/wchar_t/1.cc: New.\n+\t* testsuite/27_io/basic_ofstream/cons/wchar_t/1.cc: New.\n+\t* testsuite/27_io/basic_ofstream/open/wchar_t/1.cc: New.\n+\t* testsuite/27_io/basic_fstream/cons/wchar_t/1.cc: New.\n+\t* testsuite/27_io/basic_fstream/open/wchar_t/1.cc: New.\n+\n+From-SVN: r260479\n+---\n+ libstdc++-v3/config.h.in                      |   3 +\n+ libstdc++-v3/config/io/basic_file_stdio.cc    |  33 +++++\n+ libstdc++-v3/config/io/basic_file_stdio.h     |   5 +\n+ libstdc++-v3/configure                        |  22 ++++\n+ libstdc++-v3/configure.ac                     |   1 +\n+ libstdc++-v3/crossconfig.m4                   |   1 +\n+ libstdc++-v3/include/bits/fstream.tcc         |  36 ++++++\n+ libstdc++-v3/include/std/fstream              | 119 ++++++++++++++++++\n+ .../27_io/basic_filebuf/open/wchar_t/1.cc     |  72 +++++++++++\n+ .../27_io/basic_fstream/cons/wchar_t/1.cc     |  65 ++++++++++\n+ .../27_io/basic_fstream/open/wchar_t/1.cc     |  45 +++++++\n+ .../27_io/basic_ifstream/cons/wchar_t/1.cc    |  66 ++++++++++\n+ .../27_io/basic_ifstream/open/wchar_t/1.cc    |  58 +++++++++\n+ .../27_io/basic_ofstream/cons/wchar_t/1.cc    |  66 ++++++++++\n+ .../27_io/basic_ofstream/open/wchar_t/1.cc    |  58 +++++++++\n+ 15 files changed, 650 insertions(+)\n+ create mode 100644 libstdc++-v3/testsuite/27_io/basic_filebuf/open/wchar_t/1.cc\n+ create mode 100644 libstdc++-v3/testsuite/27_io/basic_fstream/cons/wchar_t/1.cc\n+ create mode 100644 libstdc++-v3/testsuite/27_io/basic_fstream/open/wchar_t/1.cc\n+ create mode 100644 libstdc++-v3/testsuite/27_io/basic_ifstream/cons/wchar_t/1.cc\n+ create mode 100644 libstdc++-v3/testsuite/27_io/basic_ifstream/open/wchar_t/1.cc\n+ create mode 100644 libstdc++-v3/testsuite/27_io/basic_ofstream/cons/wchar_t/1.cc\n+ create mode 100644 libstdc++-v3/testsuite/27_io/basic_ofstream/open/wchar_t/1.cc\n+\n+diff --git a/libstdc++-v3/config.h.in b/libstdc++-v3/config.h.in\n+index 19510e5cff8..c1b5215f723 100644\n+--- a/libstdc++-v3/config.h.in\n++++ b/libstdc++-v3/config.h.in\n+@@ -706,6 +706,9 @@\n+ /* Define to 1 if you have the `_tanl' function. */\n+ #undef HAVE__TANL\n+ \n++/* Define to 1 if you have the `_wfopen' function. */\n++#undef HAVE__WFOPEN\n++\n+ /* Define to 1 if you have the `__cxa_thread_atexit' function. */\n+ #undef HAVE___CXA_THREAD_ATEXIT\n+ \n+diff --git a/libstdc++-v3/config/io/basic_file_stdio.cc b/libstdc++-v3/config/io/basic_file_stdio.cc\n+index a46814802cd..09ccd6a4788 100644\n+--- a/libstdc++-v3/config/io/basic_file_stdio.cc\n++++ b/libstdc++-v3/config/io/basic_file_stdio.cc\n+@@ -249,6 +249,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+     return __ret;\n+   }\n+ \n++#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n++  __basic_file<char>*\n++  __basic_file<char>::open(const wchar_t* __name, ios_base::openmode __mode)\n++  {\n++    __basic_file* __ret = NULL;\n++    const char* __c_mode = fopen_mode(__mode);\n++    if (__c_mode && !this->is_open())\n++      {\n++\twchar_t __wc_mode[4] = { };\n++\tint __i = 0;\n++\tdo\n++\t  {\n++\t    switch(__c_mode[__i]) {\n++\t    case 'a': __wc_mode[__i] = L'a'; break;\n++\t    case 'b': __wc_mode[__i] = L'b'; break;\n++\t    case 'r': __wc_mode[__i] = L'r'; break;\n++\t    case 'w': __wc_mode[__i] = L'w'; break;\n++\t    case '+': __wc_mode[__i] = L'+'; break;\n++\t    default: return __ret;\n++\t    }\n++\t  }\n++\twhile (__c_mode[++__i]);\n++\n++\tif ((_M_cfile = _wfopen(__name, __wc_mode)))\n++\t  {\n++\t    _M_cfile_created = true;\n++\t    __ret = this;\n++\t  }\n++      }\n++    return __ret;\n++  }\n++#endif\n++\n+   bool\n+   __basic_file<char>::is_open() const throw ()\n+   { return _M_cfile != 0; }\n+diff --git a/libstdc++-v3/config/io/basic_file_stdio.h b/libstdc++-v3/config/io/basic_file_stdio.h\n+index 58f24f670f6..3c857272c57 100644\n+--- a/libstdc++-v3/config/io/basic_file_stdio.h\n++++ b/libstdc++-v3/config/io/basic_file_stdio.h\n+@@ -84,6 +84,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+       __basic_file*\n+       open(const char* __name, ios_base::openmode __mode, int __prot = 0664);\n+ \n++#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n++      __basic_file*\n++      open(const wchar_t* __name, ios_base::openmode __mode);\n++#endif\n++\n+       __basic_file*\n+       sys_open(__c_file* __file, ios_base::openmode);\n+ \n+diff --git a/libstdc++-v3/configure b/libstdc++-v3/configure\n+index 61457e940ec..2d3e0618f1d 100755\n+--- a/libstdc++-v3/configure\n++++ b/libstdc++-v3/configure\n+@@ -28366,6 +28366,17 @@ eval as_val=\\$$as_ac_var\n+ #define `$as_echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n+ _ACEOF\n+ \n++fi\n++done\n++\n++  for ac_func in _wfopen\n++do :\n++  ac_fn_c_check_func \"$LINENO\" \"_wfopen\" \"ac_cv_func__wfopen\"\n++if test \"x$ac_cv_func__wfopen\" = x\"\"yes; then :\n++  cat >>confdefs.h <<_ACEOF\n++#define HAVE__WFOPEN 1\n++_ACEOF\n++\n+ fi\n+ done\n+ \n+@@ -66361,6 +66372,17 @@ eval as_val=\\$$as_ac_var\n+ #define `$as_echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n+ _ACEOF\n+ \n++fi\n++done\n++\n++    for ac_func in _wfopen\n++do :\n++  ac_fn_c_check_func \"$LINENO\" \"_wfopen\" \"ac_cv_func__wfopen\"\n++if test \"x$ac_cv_func__wfopen\" = x\"\"yes; then :\n++  cat >>confdefs.h <<_ACEOF\n++#define HAVE__WFOPEN 1\n++_ACEOF\n++\n+ fi\n+ done\n+ \n+diff --git a/libstdc++-v3/configure.ac b/libstdc++-v3/configure.ac\n+index 5600cf38a31..3b034dfff6a 100644\n+--- a/libstdc++-v3/configure.ac\n++++ b/libstdc++-v3/configure.ac\n+@@ -265,6 +265,7 @@ if $GLIBCXX_IS_NATIVE; then\n+ \n+   AC_CHECK_FUNCS(__cxa_thread_atexit_impl __cxa_thread_atexit)\n+   AC_CHECK_FUNCS(aligned_alloc posix_memalign memalign _aligned_malloc)\n++  AC_CHECK_FUNCS(_wfopen)\n+ \n+   # For iconv support.\n+   AM_ICONV\n+diff --git a/libstdc++-v3/crossconfig.m4 b/libstdc++-v3/crossconfig.m4\n+index cb6e3afff3d..669d87f7602 100644\n+--- a/libstdc++-v3/crossconfig.m4\n++++ b/libstdc++-v3/crossconfig.m4\n+@@ -199,6 +199,7 @@ case \"${host}\" in\n+     GLIBCXX_CHECK_MATH_SUPPORT\n+     GLIBCXX_CHECK_STDLIB_SUPPORT\n+     AC_CHECK_FUNCS(aligned_alloc posix_memalign memalign _aligned_malloc)\n++    AC_CHECK_FUNCS(_wfopen)\n+     ;;\n+   *-netbsd*)\n+     SECTION_FLAGS='-ffunction-sections -fdata-sections'\n+diff --git a/libstdc++-v3/include/bits/fstream.tcc b/libstdc++-v3/include/bits/fstream.tcc\n+index f23ff7af4eb..d9eff00823a 100644\n+--- a/libstdc++-v3/include/bits/fstream.tcc\n++++ b/libstdc++-v3/include/bits/fstream.tcc\n+@@ -207,6 +207,42 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+       return __ret;\n+     }\n+ \n++#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n++  template<typename _CharT, typename _Traits>\n++    basic_filebuf<_CharT, _Traits>*\n++    basic_filebuf<_CharT, _Traits>::\n++    open(const wchar_t* __s, ios_base::openmode __mode)\n++    {\n++      __filebuf_type *__ret = 0;\n++      if (!this->is_open())\n++\t{\n++\t  _M_file.open(__s, __mode);\n++\t  if (this->is_open())\n++\t    {\n++\t      _M_allocate_internal_buffer();\n++\t      _M_mode = __mode;\n++\n++\t      // Setup initial buffer to 'uncommitted' mode.\n++\t      _M_reading = false;\n++\t      _M_writing = false;\n++\t      _M_set_buffer(-1);\n++\n++\t      // Reset to initial state.\n++\t      _M_state_last = _M_state_cur = _M_state_beg;\n++\n++\t      // 27.8.1.3,4\n++\t      if ((__mode & ios_base::ate)\n++\t\t  && this->seekoff(0, ios_base::end, __mode)\n++\t\t  == pos_type(off_type(-1)))\n++\t\tthis->close();\n++\t      else\n++\t\t__ret = this;\n++\t    }\n++\t}\n++      return __ret;\n++    }\n++#endif // HAVE__WFOPEN && USE_WCHAR_T\n++\n+   template<typename _CharT, typename _Traits>\n+     typename basic_filebuf<_CharT, _Traits>::__filebuf_type*\n+     basic_filebuf<_CharT, _Traits>::\n+diff --git a/libstdc++-v3/include/std/fstream b/libstdc++-v3/include/std/fstream\n+index 3a5895d68b0..740d12d3bb6 100644\n+--- a/libstdc++-v3/include/std/fstream\n++++ b/libstdc++-v3/include/std/fstream\n+@@ -304,6 +304,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+       __filebuf_type*\n+       open(const char* __s, ios_base::openmode __mode);\n+ \n++#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n++      /**\n++       *  @brief  Opens an external file.\n++       *  @param  __s  The name of the file, as a wide character string.\n++       *  @param  __mode  The open mode flags.\n++       *  @return  @c this on success, NULL on failure\n++       */\n++      __filebuf_type*\n++      open(const wchar_t* __s, ios_base::openmode __mode);\n++#endif\n++\n+ #if __cplusplus >= 201103L\n+       /**\n+        *  @brief  Opens an external file.\n+@@ -517,6 +528,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+ \tthis->open(__s, __mode);\n+       }\n+ \n++#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n++      /**\n++       *  @param  Create an input file stream.\n++       *  @param  __s  Wide string specifying the filename.\n++       *  @param  __mode  Open file in specified mode (see std::ios_base).\n++       *\n++       *  @c ios_base::in is automatically included in @a __mode.\n++       */\n++      basic_ifstream(const wchar_t* __s,\n++\t\t     ios_base::openmode __mode = ios_base::in)\n++      : __istream_type(), _M_filebuf()\n++      {\n++\tthis->init(&_M_filebuf);\n++\tthis->open(__s, __mode);\n++      }\n++#endif\n++\n+ #if __cplusplus >= 201103L\n+       /**\n+        *  @brief  Create an input file stream.\n+@@ -632,6 +660,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+ \t  this->clear();\n+       }\n+ \n++#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n++      /**\n++       *  @brief  Opens an external file.\n++       *  @param  __s  The name of the file, as a wide character string.\n++       *  @param  __mode  The open mode flags.\n++       *\n++       *  Calls @c std::basic_filebuf::open(__s,__mode|in).  If that function\n++       *  fails, @c failbit is set in the stream's error state.\n++       */\n++      void\n++      open(const wchar_t* __s, ios_base::openmode __mode = ios_base::in)\n++      {\n++\tif (!_M_filebuf.open(__s, __mode | ios_base::in))\n++\t  this->setstate(ios_base::failbit);\n++\telse\n++\t  this->clear();\n++      }\n++#endif\n++\n+ #if __cplusplus >= 201103L\n+       /**\n+        *  @brief  Opens an external file.\n+@@ -743,6 +790,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+ \tthis->open(__s, __mode);\n+       }\n+ \n++#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n++      /**\n++       *  @param  Create an output file stream.\n++       *  @param  __s  Wide string specifying the filename.\n++       *  @param  __mode  Open file in specified mode (see std::ios_base).\n++       *\n++       *  @c ios_base::out | @c ios_base::trunc is automatically included in\n++       *  @a __mode.\n++       */\n++      basic_ofstream(const wchar_t* __s,\n++\t\t     ios_base::openmode __mode = ios_base::out|ios_base::trunc)\n++      : __ostream_type(), _M_filebuf()\n++      {\n++\tthis->init(&_M_filebuf);\n++\tthis->open(__s, __mode);\n++      }\n++#endif\n++\n+ #if __cplusplus >= 201103L\n+       /**\n+        *  @brief  Create an output file stream.\n+@@ -858,6 +923,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+ \t  this->clear();\n+       }\n+ \n++#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n++      /**\n++       *  @brief  Opens an external file.\n++       *  @param  __s  The name of the file.\n++       *  @param  __mode  The open mode flags.\n++       *\n++       *  Calls @c std::basic_filebuf::open(__s,__mode|out).  If that\n++       *  function fails, @c failbit is set in the stream's error state.\n++       */\n++      void\n++      open(const wchar_t* __s, ios_base::openmode __mode = ios_base::out)\n++      {\n++\tif (!_M_filebuf.open(__s, __mode | ios_base::out))\n++\t  this->setstate(ios_base::failbit);\n++\telse\n++\t  this->clear();\n++      }\n++#endif\n++\n+ #if __cplusplus >= 201103L\n+       /**\n+        *  @brief  Opens an external file.\n+@@ -969,6 +1053,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+ \tthis->open(__s, __mode);\n+       }\n+ \n++#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n++      /**\n++       *  @param  Create an input/output file stream.\n++       *  @param  __s  Wide string specifying the filename.\n++       *  @param  __mode  Open file in specified mode (see std::ios_base).\n++       */\n++      basic_fstream(const wchar_t* __s,\n++\t\t    ios_base::openmode __mode = ios_base::in | ios_base::out)\n++      : __iostream_type(0), _M_filebuf()\n++      {\n++\tthis->init(&_M_filebuf);\n++\tthis->open(__s, __mode);\n++      }\n++#endif\n++\n+ #if __cplusplus >= 201103L\n+       /**\n+        *  @brief  Create an input/output file stream.\n+@@ -1081,6 +1180,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+ \t  this->clear();\n+       }\n+ \n++#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n++      /**\n++       *  @brief  Opens an external file.\n++       *  @param  __s  The name of the file.\n++       *  @param  __mode  The open mode flags.\n++       *\n++       *  Calls @c std::basic_filebuf::open(__s,__mode).  If that\n++       *  function fails, @c failbit is set in the stream's error state.\n++       */\n++      void\n++      open(const wchar_t* __s,\n++\t   ios_base::openmode __mode = ios_base::in | ios_base::out)\n++      {\n++\tif (!_M_filebuf.open(__s, __mode))\n++\t  this->setstate(ios_base::failbit);\n++\telse\n++\t  this->clear();\n++      }\n++#endif\n++\n+ #if __cplusplus >= 201103L\n+       /**\n+        *  @brief  Opens an external file.\n+diff --git a/libstdc++-v3/testsuite/27_io/basic_filebuf/open/wchar_t/1.cc b/libstdc++-v3/testsuite/27_io/basic_filebuf/open/wchar_t/1.cc\n+new file mode 100644\n+index 00000000000..a6f33548172\n+--- /dev/null\n++++ b/libstdc++-v3/testsuite/27_io/basic_filebuf/open/wchar_t/1.cc\n+@@ -0,0 +1,72 @@\n++// Copyright (C) 2018 Free Software Foundation, Inc.\n++//\n++// This file is part of the GNU ISO C++ Library.  This library is free\n++// software; you can redistribute it and/or modify it under the\n++// terms of the GNU General Public License as published by the\n++// Free Software Foundation; either version 3, or (at your option)\n++// any later version.\n++\n++// This library is distributed in the hope that it will be useful,\n++// but WITHOUT ANY WARRANTY; without even the implied warranty of\n++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n++// GNU General Public License for more details.\n++\n++// You should have received a copy of the GNU General Public License along\n++// with this library; see the file COPYING3.  If not see\n++// <http://www.gnu.org/licenses/>.\n++\n++// { dg-do run { target *-*-mingw* } }\n++// { dg-require-fileio \"\" }\n++\n++#include <fstream>\n++#include <testsuite_hooks.h>\n++\n++const wchar_t name_01[] = L\"filebuf_members-1.tst\";\n++const wchar_t name_02[] = L\"filebuf_members-1.txt\";\n++\n++// Test member functions.\n++void test01()\n++{\n++  const wchar_t* name_03 = L\"filebuf_members-w3\"; // empty file, need to create\n++\n++  std::filebuf fb_01; // in\n++  std::filebuf fb_02; // out\n++  std::filebuf fb_03; // in | out\n++\n++  // bool is_open()\n++  VERIFY( !fb_01.is_open() );\n++  VERIFY( !fb_02.is_open() );\n++  VERIFY( !fb_03.is_open() );\n++\n++  // filebuf_type* open(const wchar_t* __s, ios_base::openmode __mode)\n++  fb_01.open(name_01, std::ios_base::in | std::ios_base::ate);\n++  VERIFY( fb_01.is_open() );\n++\n++  // Try to open two different files without closing the first:\n++  // Should keep the old file attached, and disregard attempt to overthrow.\n++  std::filebuf* f = fb_02.open(name_02, std::ios_base::in | std::ios_base::out\n++\t\t\t       | std::ios_base::trunc);\n++  VERIFY( f );\n++  VERIFY( fb_02.is_open() );\n++\n++  f = fb_02.open(name_03, std::ios_base::in | std::ios_base::out);\n++  VERIFY( !f );\n++  VERIFY( fb_02.is_open() );\n++\n++  fb_03.open(name_03, std::ios_base::out | std::ios_base::trunc);\n++  VERIFY( fb_03.is_open() );\n++}\n++\n++void test02()\n++{\n++  std::wfilebuf fb;\n++  fb.open(name_01, std::wios::in);\n++  VERIFY( fb.is_open() );\n++}\n++\n++int\n++main()\n++{\n++  test01();\n++  test02();\n++}\n+diff --git a/libstdc++-v3/testsuite/27_io/basic_fstream/cons/wchar_t/1.cc b/libstdc++-v3/testsuite/27_io/basic_fstream/cons/wchar_t/1.cc\n+new file mode 100644\n+index 00000000000..0d14f825c63\n+--- /dev/null\n++++ b/libstdc++-v3/testsuite/27_io/basic_fstream/cons/wchar_t/1.cc\n+@@ -0,0 +1,65 @@\n++// Copyright (C) 2018 Free Software Foundation, Inc.\n++//\n++// This file is part of the GNU ISO C++ Library.  This library is free\n++// software; you can redistribute it and/or modify it under the\n++// terms of the GNU General Public License as published by the\n++// Free Software Foundation; either version 3, or (at your option)\n++// any later version.\n++\n++// This library is distributed in the hope that it will be useful,\n++// but WITHOUT ANY WARRANTY; without even the implied warranty of\n++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n++// GNU General Public License for more details.\n++\n++// You should have received a copy of the GNU General Public License along\n++// with this library; see the file COPYING3.  If not see\n++// <http://www.gnu.org/licenses/>.\n++\n++// { dg-do run { target *-*-mingw* } }\n++\n++#include <fstream>\n++#include <testsuite_hooks.h>\n++\n++void test01()\n++{\n++  const wchar_t* name = L\"fstream_name.txt\";\n++  std::fstream fs(name, std::wios::out);\n++  VERIFY( fs.is_open() );\n++}\n++\n++void test02()\n++{\n++  const wchar_t name[] = L\"fstream_name.txt\";\n++  std::wfstream wfs(name, std::wios::in|std::wios::out);\n++  VERIFY( wfs.is_open() );\n++}\n++\n++#if __cplusplus >= 201103L\n++using std::is_constructible;\n++using std::fstream;\n++using std::wfstream;\n++using std::ios;\n++static_assert(is_constructible<fstream, const wchar_t*>::value);\n++static_assert(is_constructible<fstream, wchar_t*>::value);\n++static_assert(is_constructible<fstream, const wchar_t(&)[1]>::value);\n++static_assert(is_constructible<fstream, wchar_t(&)[1]>::value);\n++static_assert(is_constructible<fstream, const wchar_t*, ios::openmode>::value);\n++static_assert(is_constructible<fstream, wchar_t*, ios::openmode>::value);\n++static_assert(is_constructible<fstream, const wchar_t(&)[1], ios::openmode>::value);\n++static_assert(is_constructible<fstream, wchar_t(&)[1], ios::openmode>::value);\n++static_assert(is_constructible<wfstream, const wchar_t*>::value);\n++static_assert(is_constructible<wfstream, wchar_t*>::value);\n++static_assert(is_constructible<wfstream, const wchar_t(&)[1]>::value);\n++static_assert(is_constructible<wfstream, wchar_t(&)[1]>::value);\n++static_assert(is_constructible<wfstream, const wchar_t*, ios::openmode>::value);\n++static_assert(is_constructible<wfstream, wchar_t*, ios::openmode>::value);\n++static_assert(is_constructible<wfstream, const wchar_t(&)[1], ios::openmode>::value);\n++static_assert(is_constructible<wfstream, wchar_t(&)[1], ios::openmode>::value);\n++#endif\n++\n++int\n++main()\n++{\n++  test01();\n++  test02();\n++}\n+diff --git a/libstdc++-v3/testsuite/27_io/basic_fstream/open/wchar_t/1.cc b/libstdc++-v3/testsuite/27_io/basic_fstream/open/wchar_t/1.cc\n+new file mode 100644\n+index 00000000000..cd47292d793\n+--- /dev/null\n++++ b/libstdc++-v3/testsuite/27_io/basic_fstream/open/wchar_t/1.cc\n+@@ -0,0 +1,45 @@\n++// Copyright (C) 2018 Free Software Foundation, Inc.\n++//\n++// This file is part of the GNU ISO C++ Library.  This library is free\n++// software; you can redistribute it and/or modify it under the\n++// terms of the GNU General Public License as published by the\n++// Free Software Foundation; either version 3, or (at your option)\n++// any later version.\n++\n++// This library is distributed in the hope that it will be useful,\n++// but WITHOUT ANY WARRANTY; without even the implied warranty of\n++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n++// GNU General Public License for more details.\n++\n++// You should have received a copy of the GNU General Public License along\n++// with this library; see the file COPYING3.  If not see\n++// <http://www.gnu.org/licenses/>.\n++\n++// { dg-do run { target *-*-mingw* } }\n++\n++#include <fstream>\n++#include <testsuite_hooks.h>\n++\n++void test01()\n++{\n++  std::fstream fs;\n++\n++  const wchar_t* name = L\"fstream_name.txt\";\n++  fs.open(name, std::wios::out);\n++  VERIFY( fs.is_open() );\n++}\n++\n++void test02()\n++{\n++  const wchar_t name[] = L\"fstream_name.txt\";\n++  std::wfstream wfs;\n++  wfs.open(name, std::wios::in|std::wios::out);\n++  VERIFY( wfs.is_open() );\n++}\n++\n++int\n++main()\n++{\n++  test01();\n++  test02();\n++}\n+diff --git a/libstdc++-v3/testsuite/27_io/basic_ifstream/cons/wchar_t/1.cc b/libstdc++-v3/testsuite/27_io/basic_ifstream/cons/wchar_t/1.cc\n+new file mode 100644\n+index 00000000000..7437cff60a5\n+--- /dev/null\n++++ b/libstdc++-v3/testsuite/27_io/basic_ifstream/cons/wchar_t/1.cc\n+@@ -0,0 +1,66 @@\n++// Copyright (C) 2018 Free Software Foundation, Inc.\n++//\n++// This file is part of the GNU ISO C++ Library.  This library is free\n++// software; you can redistribute it and/or modify it under the\n++// terms of the GNU General Public License as published by the\n++// Free Software Foundation; either version 3, or (at your option)\n++// any later version.\n++\n++// This library is distributed in the hope that it will be useful,\n++// but WITHOUT ANY WARRANTY; without even the implied warranty of\n++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n++// GNU General Public License for more details.\n++\n++// You should have received a copy of the GNU General Public License along\n++// with this library; see the file COPYING3.  If not see\n++// <http://www.gnu.org/licenses/>.\n++\n++// { dg-do run { target *-*-mingw* } }\n++\n++#include <fstream>\n++#include <testsuite_hooks.h>\n++\n++void test01()\n++{\n++  const wchar_t* name = L\"ifstream_members-1.txt\";\n++  std::ifstream ifs(name);\n++  VERIFY( ifs.is_open() );\n++}\n++\n++void test02()\n++{\n++  const wchar_t name[] = L\"ifstream_members-1.txt\";\n++  std::wifstream wifs(name, std::wios::in);\n++  VERIFY( wifs.is_open() );\n++}\n++\n++#if __cplusplus >= 201103L\n++using std::is_constructible;\n++using std::ifstream;\n++using std::wifstream;\n++using std::ios;\n++using std::wios;\n++static_assert(is_constructible<ifstream, const wchar_t*>::value);\n++static_assert(is_constructible<ifstream, wchar_t*>::value);\n++static_assert(is_constructible<ifstream, const wchar_t(&)[1]>::value);\n++static_assert(is_constructible<ifstream, wchar_t(&)[1]>::value);\n++static_assert(is_constructible<ifstream, const wchar_t*, ios::openmode>::value);\n++static_assert(is_constructible<ifstream, wchar_t*, ios::openmode>::value);\n++static_assert(is_constructible<ifstream, const wchar_t(&)[1], ios::openmode>::value);\n++static_assert(is_constructible<ifstream, wchar_t(&)[1], ios::openmode>::value);\n++static_assert(is_constructible<wifstream, const wchar_t*>::value);\n++static_assert(is_constructible<wifstream, wchar_t*>::value);\n++static_assert(is_constructible<wifstream, const wchar_t(&)[1]>::value);\n++static_assert(is_constructible<wifstream, wchar_t(&)[1]>::value);\n++static_assert(is_constructible<wifstream, const wchar_t*, wios::openmode>::value);\n++static_assert(is_constructible<wifstream, wchar_t*, wios::openmode>::value);\n++static_assert(is_constructible<wifstream, const wchar_t(&)[1], wios::openmode>::value);\n++static_assert(is_constructible<wifstream, wchar_t(&)[1], wios::openmode>::value);\n++#endif\n++\n++int\n++main()\n++{\n++  test01();\n++  test02();\n++}\n+diff --git a/libstdc++-v3/testsuite/27_io/basic_ifstream/open/wchar_t/1.cc b/libstdc++-v3/testsuite/27_io/basic_ifstream/open/wchar_t/1.cc\n+new file mode 100644\n+index 00000000000..e2366973924\n+--- /dev/null\n++++ b/libstdc++-v3/testsuite/27_io/basic_ifstream/open/wchar_t/1.cc\n+@@ -0,0 +1,58 @@\n++// Copyright (C) 2018 Free Software Foundation, Inc.\n++//\n++// This file is part of the GNU ISO C++ Library.  This library is free\n++// software; you can redistribute it and/or modify it under the\n++// terms of the GNU General Public License as published by the\n++// Free Software Foundation; either version 3, or (at your option)\n++// any later version.\n++\n++// This library is distributed in the hope that it will be useful,\n++// but WITHOUT ANY WARRANTY; without even the implied warranty of\n++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n++// GNU General Public License for more details.\n++\n++// You should have received a copy of the GNU General Public License along\n++// with this library; see the file COPYING3.  If not see\n++// <http://www.gnu.org/licenses/>.\n++\n++// 30.9.3.1 basic_ifstream constructors [ifstream.cons]\n++\n++// { dg-do run { target *-*-mingw* } }\n++\n++#include <fstream>\n++#include <testsuite_hooks.h>\n++\n++const wchar_t name_01[] = L\"ifstream_members-1.tst\";\n++\n++void test01()\n++{\n++  std::ifstream ifs1;\n++  ifs1.close();\n++\n++  VERIFY( !ifs1.is_open() );\n++  VERIFY( !(ifs1) );\n++\n++  ifs1.open(name_01);\n++  VERIFY( ifs1.is_open() );\n++\n++  VERIFY( (ifs1) );\n++  VERIFY( ifs1.rdstate() == std::ios_base::goodbit );\n++\n++  ifs1.close();\n++}\n++\n++void test02()\n++{\n++  std::wifstream wifs1;\n++  wifs1.open(name_01, std::wios::in);\n++  VERIFY( wifs1.is_open() );\n++\n++  VERIFY( (wifs1) );\n++  VERIFY( wifs1.rdstate() == std::ios_base::goodbit );\n++}\n++\n++int main()\n++{\n++  test01();\n++  test02();\n++}\n+diff --git a/libstdc++-v3/testsuite/27_io/basic_ofstream/cons/wchar_t/1.cc b/libstdc++-v3/testsuite/27_io/basic_ofstream/cons/wchar_t/1.cc\n+new file mode 100644\n+index 00000000000..ae9893e2413\n+--- /dev/null\n++++ b/libstdc++-v3/testsuite/27_io/basic_ofstream/cons/wchar_t/1.cc\n+@@ -0,0 +1,66 @@\n++// Copyright (C) 2018 Free Software Foundation, Inc.\n++//\n++// This file is part of the GNU ISO C++ Library.  This library is free\n++// software; you can redistribute it and/or modify it under the\n++// terms of the GNU General Public License as published by the\n++// Free Software Foundation; either version 3, or (at your option)\n++// any later version.\n++\n++// This library is distributed in the hope that it will be useful,\n++// but WITHOUT ANY WARRANTY; without even the implied warranty of\n++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n++// GNU General Public License for more details.\n++\n++// You should have received a copy of the GNU General Public License along\n++// with this library; see the file COPYING3.  If not see\n++// <http://www.gnu.org/licenses/>.\n++\n++// { dg-do run { target *-*-mingw* } }\n++\n++#include <fstream>\n++#include <testsuite_hooks.h>\n++\n++void test01()\n++{\n++  const wchar_t* name = L\"ofstream_name.txt\";\n++  std::ofstream ofs(name);\n++  VERIFY( ofs.is_open() );\n++}\n++\n++void test02()\n++{\n++  const wchar_t name[] = L\"ofstream_name.txt\";\n++  std::wofstream wofs(name, std::wios::out);\n++  VERIFY( wofs.is_open() );\n++}\n++\n++#if __cplusplus >= 201103L\n++using std::is_constructible;\n++using std::ofstream;\n++using std::wofstream;\n++using std::ios;\n++using std::wios;\n++static_assert(is_constructible<ofstream, const wchar_t*>::value);\n++static_assert(is_constructible<ofstream, wchar_t*>::value);\n++static_assert(is_constructible<ofstream, const wchar_t(&)[1]>::value);\n++static_assert(is_constructible<ofstream, wchar_t(&)[1]>::value);\n++static_assert(is_constructible<ofstream, const wchar_t*, ios::openmode>::value);\n++static_assert(is_constructible<ofstream, wchar_t*, ios::openmode>::value);\n++static_assert(is_constructible<ofstream, const wchar_t(&)[1], ios::openmode>::value);\n++static_assert(is_constructible<ofstream, wchar_t(&)[1], ios::openmode>::value);\n++static_assert(is_constructible<wofstream, const wchar_t*>::value);\n++static_assert(is_constructible<wofstream, wchar_t*>::value);\n++static_assert(is_constructible<wofstream, const wchar_t(&)[1]>::value);\n++static_assert(is_constructible<wofstream, wchar_t(&)[1]>::value);\n++static_assert(is_constructible<wofstream, const wchar_t*, wios::openmode>::value);\n++static_assert(is_constructible<wofstream, wchar_t*, wios::openmode>::value);\n++static_assert(is_constructible<wofstream, const wchar_t(&)[1], wios::openmode>::value);\n++static_assert(is_constructible<wofstream, wchar_t(&)[1], wios::openmode>::value);\n++#endif\n++\n++int\n++main()\n++{\n++  test01();\n++  test02();\n++}\n+diff --git a/libstdc++-v3/testsuite/27_io/basic_ofstream/open/wchar_t/1.cc b/libstdc++-v3/testsuite/27_io/basic_ofstream/open/wchar_t/1.cc\n+new file mode 100644\n+index 00000000000..e024a27b89c\n+--- /dev/null\n++++ b/libstdc++-v3/testsuite/27_io/basic_ofstream/open/wchar_t/1.cc\n+@@ -0,0 +1,58 @@\n++// Copyright (C) 2018 Free Software Foundation, Inc.\n++//\n++// This file is part of the GNU ISO C++ Library.  This library is free\n++// software; you can redistribute it and/or modify it under the\n++// terms of the GNU General Public License as published by the\n++// Free Software Foundation; either version 3, or (at your option)\n++// any later version.\n++\n++// This library is distributed in the hope that it will be useful,\n++// but WITHOUT ANY WARRANTY; without even the implied warranty of\n++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n++// GNU General Public License for more details.\n++\n++// You should have received a copy of the GNU General Public License along\n++// with this library; see the file COPYING3.  If not see\n++// <http://www.gnu.org/licenses/>.\n++\n++// 30.9.4.1 basic_ofstream constructors [ofstream.cons]\n++\n++// { dg-do run { target *-*-mingw* } }\n++\n++#include <fstream>\n++#include <testsuite_hooks.h>\n++\n++const wchar_t name_02[] = L\"ofstream_members-1.txt\";\n++\n++void test01()\n++{\n++  std::ofstream ofs1;\n++  ofs1.close();\n++\n++  VERIFY( !ofs1.is_open() );\n++  VERIFY( !(ofs1) );\n++\n++  ofs1.open(name_02);\n++  VERIFY( ofs1.is_open() );\n++\n++  VERIFY( (ofs1) );\n++  VERIFY( ofs1.rdstate() == std::ios_base::goodbit );\n++\n++  ofs1.close();\n++}\n++\n++void test02()\n++{\n++  std::wofstream wofs1;\n++  wofs1.open(name_02, std::wios::out);\n++  VERIFY( wofs1.is_open() );\n++\n++  VERIFY( (wofs1) );\n++  VERIFY( wofs1.rdstate() == std::ios_base::goodbit );\n++}\n++\n++int main()\n++{\n++  test01();\n++  test02();\n++}\n+-- \n+2.33.1\n+"
      },
      {
        "sha": "93071119c4799322f1fa8dd738841d377897f6e0",
        "filename": "contrib/guix/patches/0002-Refactor-path-construction-from-null-terminated-iter.patch",
        "status": "added",
        "additions": 721,
        "deletions": 0,
        "changes": 721,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/patches/0002-Refactor-path-construction-from-null-terminated-iter.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/patches/0002-Refactor-path-construction-from-null-terminated-iter.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/0002-Refactor-path-construction-from-null-terminated-iter.patch?ref=9604eda1abe6ffc02c97e3434c3c2c4ce1250794",
        "patch": "@@ -0,0 +1,721 @@\n+From 7aae56f56bab5542554da88d3efbd1a1096b67fa Mon Sep 17 00:00:00 2001\n+From: Jonathan Wakely <jwakely@redhat.com>\n+Date: Wed, 23 May 2018 23:48:51 +0100\n+Subject: [PATCH 2/6] Refactor path construction from null terminated iterator\n+ ranges\n+\n+Move duplicated code to new _S_string_from_iter function and fix\n+constraints to accept iterators with const value type.\n+\n+\t* include/bits/fs_path.h (path::__is_encoded_char): Change from class\n+\ttemplate to alias template.\n+\t(path::__value_type_is_char): Use remove_const_t.\n+\t(path:_S_string_from_iter): New helper function.\n+\t(path::_S_convert(InputIter, __null_terminated))\n+\t(path::_S_convert_loc(InputIter, __null_terminated, const locale&)):\n+\tUse _S_string_from_iter.\n+\t(path::string<_CharT, _Allocator>(const _Allocator&)): Allow sharing\n+\trep for COW strings.\n+\t* include/experimental/bits/fs_path.h (path::__is_encoded_char):\n+\tChange from class template to alias template.\n+\t(path::__value_type_is_char): Use remove_const.\n+\t(path:_S_string_from_iter): New helper function.\n+\t(path::_S_convert(InputIter, __null_terminated))\n+\t(path::_S_convert_loc(InputIter, __null_terminated, const locale&)):\n+\tUse _S_string_from_iter.\n+\t* testsuite/27_io/filesystem/path/append/source.cc: Test appending\n+\twide strings.\n+\t* testsuite/27_io/filesystem/path/concat/strings.cc: Check for exact\n+\tstring equality, not path equivalence.\n+\t* testsuite/27_io/filesystem/path/construct/format.cc: Check\n+\tconstruction from std::string and std::wstring and input iterators.\n+\t* testsuite/27_io/filesystem/path/construct/locale.cc: Check\n+\tconstruction from iterators.\n+\t* testsuite/experimental/filesystem/path/concat/strings.cc: Check for\n+\texact string equality, not path equivalence.\n+\t* testsuite/experimental/filesystem/path/construct/locale.cc: Check\n+\tconstruction from iterators.\n+\n+From-SVN: r260628\n+---\n+ libstdc++-v3/ChangeLog                        | 29 ++++++++\n+ libstdc++-v3/include/bits/fs_path.h           | 63 ++++++++--------\n+ .../include/experimental/bits/fs_path.h       | 58 +++++++--------\n+ .../27_io/filesystem/path/append/source.cc    | 24 +++++-\n+ .../27_io/filesystem/path/concat/strings.cc   | 26 ++++---\n+ .../27_io/filesystem/path/construct/format.cc | 74 ++++++++++++++++---\n+ .../27_io/filesystem/path/construct/locale.cc | 34 +++++++++\n+ .../filesystem/path/concat/strings.cc         | 26 ++++---\n+ .../filesystem/path/construct/locale.cc       | 34 +++++++++\n+ 9 files changed, 270 insertions(+), 98 deletions(-)\n+\n+diff --git a/libstdc++-v3/ChangeLog b/libstdc++-v3/ChangeLog\n+index 1d6f972584a..4a140f0f084 100644\n+--- a/libstdc++-v3/ChangeLog\n++++ b/libstdc++-v3/ChangeLog\n+@@ -917,6 +917,35 @@\n+ \tBackport from mainline\n+ \t2018-05-23  Jonathan Wakely  <jwakely@redhat.com>\n+ \n++\t* include/bits/fs_path.h (path::__is_encoded_char): Change from class\n++\ttemplate to alias template.\n++\t(path::__value_type_is_char): Use remove_const_t.\n++\t(path:_S_string_from_iter): New helper function.\n++\t(path::_S_convert(InputIter, __null_terminated))\n++\t(path::_S_convert_loc(InputIter, __null_terminated, const locale&)):\n++\tUse _S_string_from_iter.\n++\t(path::string<_CharT, _Allocator>(const _Allocator&)): Allow sharing\n++\trep for COW strings.\n++\t* include/experimental/bits/fs_path.h (path::__is_encoded_char):\n++\tChange from class template to alias template.\n++\t(path::__value_type_is_char): Use remove_const.\n++\t(path:_S_string_from_iter): New helper function.\n++\t(path::_S_convert(InputIter, __null_terminated))\n++\t(path::_S_convert_loc(InputIter, __null_terminated, const locale&)):\n++\tUse _S_string_from_iter.\n++\t* testsuite/27_io/filesystem/path/append/source.cc: Test appending\n++\twide strings.\n++\t* testsuite/27_io/filesystem/path/concat/strings.cc: Check for exact\n++\tstring equality, not path equivalence.\n++\t* testsuite/27_io/filesystem/path/construct/format.cc: Check\n++\tconstruction from std::string and std::wstring and input iterators.\n++\t* testsuite/27_io/filesystem/path/construct/locale.cc: Check\n++\tconstruction from iterators.\n++\t* testsuite/experimental/filesystem/path/concat/strings.cc: Check for\n++\texact string equality, not path equivalence.\n++\t* testsuite/experimental/filesystem/path/construct/locale.cc: Check\n++\tconstruction from iterators.\n++\n+ \t* include/bits/fs_path.h (path::_M_type): Change default member\n+ \tinitializer to _Filename.\n+ \t(path::begin): Create past-the-end iterator for empty path.\n+diff --git a/libstdc++-v3/include/bits/fs_path.h b/libstdc++-v3/include/bits/fs_path.h\n+index 7ae68f623d1..cd1b1427e79 100644\n+--- a/libstdc++-v3/include/bits/fs_path.h\n++++ b/libstdc++-v3/include/bits/fs_path.h\n+@@ -65,8 +65,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+   /// A filesystem path.\n+   class path\n+   {\n+-    template<typename _CharT>\n+-      struct __is_encoded_char : std::false_type { };\n++    template<typename _CharT, typename _Ch = remove_const_t<_CharT>>\n++      using __is_encoded_char\n++\t= __or_<is_same<_Ch, char>, is_same<_Ch, wchar_t>,\n++\t\tis_same<_Ch, char16_t>, is_same<_Ch, char32_t>>;\n+ \n+     template<typename _Iter,\n+ \t     typename _Iter_traits = std::iterator_traits<_Iter>>\n+@@ -145,7 +147,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+ \t     typename _Iter = decltype(_S_range_begin(std::declval<_Tp>())),\n+ \t     typename _Val = typename std::iterator_traits<_Iter>::value_type>\n+       using __value_type_is_char\n+-\t= typename std::enable_if<std::is_same<_Val, char>::value>::type;\n++\t= std::enable_if_t<std::is_same_v<std::remove_const_t<_Val>, char>>;\n+ \n+   public:\n+ #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+@@ -393,6 +395,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+     iterator begin() const;\n+     iterator end() const;\n+ \n++    // Create a basic_string by reading until a null character.\n++    template<typename _InputIterator,\n++\t     typename _Traits = std::iterator_traits<_InputIterator>,\n++\t     typename _CharT\n++\t       = typename std::remove_cv_t<typename _Traits::value_type>>\n++      static std::basic_string<_CharT>\n++      _S_string_from_iter(_InputIterator __source)\n++      {\n++\tstd::basic_string<_CharT> __str;\n++\tfor (_CharT __ch = *__source; __ch != _CharT(); __ch = *++__source)\n++\t  __str.push_back(__ch);\n++\treturn __str;\n++      }\n++\n+   private:\n+     enum class _Type : unsigned char {\n+ \t_Multi, _Root_name, _Root_dir, _Filename\n+@@ -445,11 +461,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+       static string_type\n+       _S_convert(_InputIterator __src, __null_terminated)\n+       {\n+-\tusing _Tp = typename std::iterator_traits<_InputIterator>::value_type;\n+-\tstd::basic_string<typename remove_cv<_Tp>::type> __tmp;\n+-\tfor (; *__src != _Tp{}; ++__src)\n+-\t  __tmp.push_back(*__src);\n+-\treturn _S_convert(__tmp.c_str(), __tmp.c_str() + __tmp.size());\n++\tauto __s = _S_string_from_iter(__src);\n++\treturn _S_convert(__s.c_str(), __s.c_str() + __s.size());\n+       }\n+ \n+     static string_type\n+@@ -469,10 +482,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+       _S_convert_loc(_InputIterator __src, __null_terminated,\n+ \t\t     const std::locale& __loc)\n+       {\n+-\tstd::string __tmp;\n+-\twhile (*__src != '\\0')\n+-\t  __tmp.push_back(*__src++);\n+-\treturn _S_convert_loc(__tmp.data(), __tmp.data()+__tmp.size(), __loc);\n++\tstd::string __s = _S_string_from_iter(__src);\n++\treturn _S_convert_loc(__s.data(), __s.data() + __s.size(), __loc);\n+       }\n+ \n+     template<typename _CharT, typename _Traits, typename _Allocator>\n+@@ -502,25 +513,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+     _Type _M_type = _Type::_Filename;\n+   };\n+ \n+-  template<>\n+-    struct path::__is_encoded_char<char> : std::true_type\n+-    { using value_type = char; };\n+-\n+-  template<>\n+-    struct path::__is_encoded_char<wchar_t> : std::true_type\n+-    { using value_type = wchar_t; };\n+-\n+-  template<>\n+-    struct path::__is_encoded_char<char16_t> : std::true_type\n+-    { using value_type = char16_t; };\n+-\n+-  template<>\n+-    struct path::__is_encoded_char<char32_t> : std::true_type\n+-    { using value_type = char32_t; };\n+-\n+-  template<typename _Tp>\n+-    struct path::__is_encoded_char<const _Tp> : __is_encoded_char<_Tp> { };\n+-\n+   inline void swap(path& __lhs, path& __rhs) noexcept { __lhs.swap(__rhs); }\n+ \n+   size_t hash_value(const path& __p) noexcept;\n+@@ -920,11 +912,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+     path::string(const _Allocator& __a) const\n+     {\n+       if constexpr (is_same_v<_CharT, value_type>)\n++\t{\n+ #if _GLIBCXX_USE_CXX11_ABI\n+-\treturn { _M_pathname, __a };\n++\t  return { _M_pathname, __a };\n+ #else\n+-\treturn { _M_pathname, string_type::size_type(0), __a };\n++\t  if constexpr (is_same_v<_Allocator, string_type::allocator_type>)\n++\t    return _M_pathname;\n++\t  else\n++\t    return { _M_pathname, string_type::size_type(0), __a };\n+ #endif\n++\t}\n+       else\n+ \treturn _S_str_convert<_CharT, _Traits>(_M_pathname, __a);\n+     }\n+diff --git a/libstdc++-v3/include/experimental/bits/fs_path.h b/libstdc++-v3/include/experimental/bits/fs_path.h\n+index 705f76331b5..03c9949ab69 100644\n+--- a/libstdc++-v3/include/experimental/bits/fs_path.h\n++++ b/libstdc++-v3/include/experimental/bits/fs_path.h\n+@@ -79,8 +79,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+   /// A filesystem path.\n+   class path\n+   {\n+-    template<typename _CharT>\n+-      struct __is_encoded_char : std::false_type { };\n++    template<typename _CharT,\n++\t     typename _Ch = typename remove_const<_CharT>::type>\n++      using __is_encoded_char\n++\t= __or_<is_same<_Ch, char>, is_same<_Ch, wchar_t>,\n++\t\tis_same<_Ch, char16_t>, is_same<_Ch, char32_t>>;\n+ \n+     template<typename _Iter,\n+ \t     typename _Iter_traits = std::iterator_traits<_Iter>>\n+@@ -164,8 +167,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+     template<typename _Tp,\n+ \t     typename _Iter = decltype(_S_range_begin(std::declval<_Tp>())),\n+ \t     typename _Val = typename std::iterator_traits<_Iter>::value_type>\n+-      using __value_type_is_char\n+-\t= typename std::enable_if<std::is_same<_Val, char>::value>::type;\n++      using __value_type_is_char = typename std::enable_if<\n++\tstd::is_same<typename std::remove_const<_Val>::type, char>::value\n++\t>::type;\n+ \n+   public:\n+ #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+@@ -382,6 +386,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+     iterator begin() const;\n+     iterator end() const;\n+ \n++    // Create a basic_string by reading until a null character.\n++    template<typename _InputIterator,\n++\t     typename _Traits = std::iterator_traits<_InputIterator>,\n++\t     typename _CharT\n++\t       = typename std::remove_cv<typename _Traits::value_type>::type>\n++      static std::basic_string<_CharT>\n++      _S_string_from_iter(_InputIterator __source)\n++      {\n++\tstd::basic_string<_CharT> __str;\n++\tfor (_CharT __ch = *__source; __ch != _CharT(); __ch = *++__source)\n++\t  __str.push_back(__ch);\n++\treturn __str;\n++      }\n++\n+   private:\n+     enum class _Type : unsigned char {\n+ \t_Multi, _Root_name, _Root_dir, _Filename\n+@@ -431,11 +449,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+       static string_type\n+       _S_convert(_InputIterator __src, __null_terminated)\n+       {\n+-\tusing _Tp = typename std::iterator_traits<_InputIterator>::value_type;\n+-\tstd::basic_string<typename remove_cv<_Tp>::type> __tmp;\n+-\tfor (; *__src != _Tp{}; ++__src)\n+-\t  __tmp.push_back(*__src);\n+-\treturn _S_convert(__tmp.c_str(), __tmp.c_str() + __tmp.size());\n++\tauto __s = _S_string_from_iter(__src);\n++\treturn _S_convert(__s.c_str(), __s.c_str() + __s.size());\n+       }\n+ \n+     static string_type\n+@@ -455,10 +470,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+       _S_convert_loc(_InputIterator __src, __null_terminated,\n+ \t\t     const std::locale& __loc)\n+       {\n+-\tstd::string __tmp;\n+-\twhile (*__src != '\\0')\n+-\t  __tmp.push_back(*__src++);\n+-\treturn _S_convert_loc(__tmp.data(), __tmp.data()+__tmp.size(), __loc);\n++\tstd::string __s = _S_string_from_iter(__src);\n++\treturn _S_convert_loc(__s.data(), __s.data() + __s.size(), __loc);\n+       }\n+ \n+     static bool _S_is_dir_sep(value_type __ch)\n+@@ -598,25 +611,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+     std::string _M_what = _M_gen_what();\n+   };\n+ \n+-  template<>\n+-    struct path::__is_encoded_char<char> : std::true_type\n+-    { using value_type = char; };\n+-\n+-  template<>\n+-    struct path::__is_encoded_char<wchar_t> : std::true_type\n+-    { using value_type = wchar_t; };\n+-\n+-  template<>\n+-    struct path::__is_encoded_char<char16_t> : std::true_type\n+-    { using value_type = char16_t; };\n+-\n+-  template<>\n+-    struct path::__is_encoded_char<char32_t> : std::true_type\n+-    { using value_type = char32_t; };\n+-\n+-  template<typename _Tp>\n+-    struct path::__is_encoded_char<const _Tp> : __is_encoded_char<_Tp> { };\n+-\n+   struct path::_Cmpt : path\n+   {\n+     _Cmpt(string_type __s, _Type __t, size_t __pos)\n+diff --git a/libstdc++-v3/testsuite/27_io/filesystem/path/append/source.cc b/libstdc++-v3/testsuite/27_io/filesystem/path/append/source.cc\n+index 316d6313b0a..df917c9c5e8 100644\n+--- a/libstdc++-v3/testsuite/27_io/filesystem/path/append/source.cc\n++++ b/libstdc++-v3/testsuite/27_io/filesystem/path/append/source.cc\n+@@ -36,7 +36,8 @@ using __gnu_test::compare_paths;\n+ // path::append(InputIterator first, InputIterator last)\n+ // Equivalent to: return operator/=(path(first, last));\n+ \n+-void test(const path& p, std::string_view s)\n++template<typename Char>\n++void test(const path& p, const Char* s)\n+ {\n+   path expected = p;\n+   expected /= path(s);\n+@@ -47,8 +48,8 @@ void test(const path& p, std::string_view s)\n+   path func = p;\n+   func.append(s);\n+ \n+-  __gnu_test::test_container<const char, __gnu_test::input_iterator_wrapper>\n+-    input_range(s.begin(), s.end());\n++  __gnu_test::test_container<const Char, __gnu_test::input_iterator_wrapper>\n++    input_range(s, s + std::char_traits<Char>::length(s));\n+   path range = p;\n+   range.append(input_range.begin(), input_range.end());\n+ \n+@@ -94,7 +95,21 @@ test03()\n+ {\n+   for (const path& p : __gnu_test::test_paths)\n+     for (const path& q : __gnu_test::test_paths)\n+-      test(p, q.native());\n++    {\n++      test(p, q.c_str());\n++      if constexpr (!std::is_same_v<path::value_type, char>)\n++\ttest(p, q.string().c_str());\n++    }\n++}\n++\n++void\n++test04()\n++{\n++#ifdef _GLIBCXX_USE_WCHAR_T\n++  test(  \"foo\", L\"/bar\" );\n++  test( L\"foo\",  \"/bar\" );\n++  test( L\"foo\", L\"/bar\" );\n++#endif\n+ }\n+ \n+ int\n+@@ -103,4 +118,5 @@ main()\n+   test01();\n+   test02();\n+   test03();\n++  test04();\n+ }\n+diff --git a/libstdc++-v3/testsuite/27_io/filesystem/path/concat/strings.cc b/libstdc++-v3/testsuite/27_io/filesystem/path/concat/strings.cc\n+index e8833ec1333..67637890c7f 100644\n+--- a/libstdc++-v3/testsuite/27_io/filesystem/path/concat/strings.cc\n++++ b/libstdc++-v3/testsuite/27_io/filesystem/path/concat/strings.cc\n+@@ -23,6 +23,7 @@\n+ \n+ #include <filesystem>\n+ #include <testsuite_hooks.h>\n++#include <testsuite_iterators.h>\n+ \n+ using std::filesystem::path;\n+ \n+@@ -30,23 +31,30 @@ void\n+ test01()\n+ {\n+   path p(\"/\");\n+-  p += path::string_type(\"foo\");\n+-  VERIFY( p.filename() == \"foo\" );\n++  p += \"foo\";\n++  VERIFY( p.filename().string() == \"foo\" );\n+   p += \"bar\";\n+-  VERIFY( p.filename() == \"foobar\" );\n++  VERIFY( p.filename().string() == \"foobar\" );\n+   p += '/';\n+-  VERIFY( p.parent_path() == \"/foobar\" && p.filename() == \"\" );\n++  VERIFY( p.parent_path().string() == \"/foobar\" );\n++  VERIFY( p.filename().string() == \"\" );\n+ #if _GLIBCXX_USE_WCHAR_T\n++  VERIFY( p.parent_path().wstring() == L\"/foobar\" );\n++  VERIFY( p.filename().wstring() == L\"\" );\n+   p += L\"baz.txt\";\n+ #else\n+   p += \"baz.txt\";\n+ #endif\n+-  VERIFY( p.filename() == \"baz.txt\" );\n++  VERIFY( p.filename().string() == \"baz.txt\" );\n+   p.concat(\"/dir/\");\n+-  VERIFY( p.parent_path() == \"/foobar/baz.txt/dir\" && p.filename() == \"\" );\n+-  std::string file = \"file\";\n+-  p.concat(file.begin(), file.end());\n+-  VERIFY( p.filename() == \"file\" );\n++  // N.B. on Windows p.parent_path() is \"/foobar\\\\baz.txt\\\\dir\"\n++  VERIFY( p.parent_path() == path(\"/foobar/baz.txt/dir\")  );\n++  VERIFY( p.filename().string() == \"\" );\n++  const char file[] = \"file\";\n++  __gnu_test::test_container<const char, __gnu_test::input_iterator_wrapper>\n++    input(file, file + 4);\n++  p.concat(input.begin(), input.end());\n++  VERIFY( p.filename().string() == file );\n+ }\n+ \n+ int\n+diff --git a/libstdc++-v3/testsuite/27_io/filesystem/path/construct/format.cc b/libstdc++-v3/testsuite/27_io/filesystem/path/construct/format.cc\n+index 0e245392f33..a793451aada 100644\n+--- a/libstdc++-v3/testsuite/27_io/filesystem/path/construct/format.cc\n++++ b/libstdc++-v3/testsuite/27_io/filesystem/path/construct/format.cc\n+@@ -20,13 +20,16 @@\n+ // { dg-require-filesystem-ts \"\" }\n+ \n+ #include <filesystem>\n++#include <string.h>\n+ #include <testsuite_hooks.h>\n++#include <testsuite_iterators.h>\n+ \n+ using std::filesystem::path;\n+ \n+ void\n+ test01()\n+ {\n++  // path(string_type&&, format)\n+   auto s = [&]() -> path::string_type { return \"foo/bar\"; };\n+   path p0(s());\n+   path p1(s(), path::auto_format);\n+@@ -40,6 +43,7 @@ test01()\n+ void\n+ test02()\n+ {\n++  // path(const Source&, format)\n+   path::string_type s = \"foo/bar\";\n+   path p0(s);\n+   path p1(s, path::auto_format);\n+@@ -53,7 +57,8 @@ test02()\n+ void\n+ test03()\n+ {\n+-  const char* s = \"foo/bar\";\n++  // path(const Source&, format)\n++  std::string s = \"foo/bar\";\n+   path p0(s);\n+   path p1(s, path::auto_format);\n+   VERIFY( p1 == p0 );\n+@@ -66,19 +71,57 @@ test03()\n+ void\n+ test04()\n+ {\n+-  const char s[] = \"foo/bar\";\n+-  path p0(std::begin(s), std::end(s));\n+-  path p1(std::begin(s), std::end(s), path::auto_format);\n++#ifdef _GLIBCXX_USE_WCHAR_T\n++  // path(const Source&, format)\n++  std::wstring s = L\"foo/bar\";\n++  path p0(s);\n++  path p1(s, path::auto_format);\n+   VERIFY( p1 == p0 );\n+-  path p2(std::begin(s), std::end(s), path::native_format);\n++  path p2(s, path::native_format);\n+   VERIFY( p2 == p0 );\n+-  path p3(std::begin(s), std::end(s), path::generic_format);\n++  path p3(s, path::generic_format);\n+   VERIFY( p3 == p0 );\n++#endif\n+ }\n+ \n+ void\n+ test05()\n+ {\n++  // path(const Source&, format)\n++  const char* s = \"foo/bar\";\n++  path p0(s);\n++  path p1(s, path::auto_format);\n++  VERIFY( p1 == p0 );\n++  path p2(s, path::native_format);\n++  VERIFY( p2 == p0 );\n++  path p3(s, path::generic_format);\n++  VERIFY( p3 == p0 );\n++}\n++\n++void\n++test06()\n++{\n++  // path(InputIterator, InputIterator, format)\n++  const char s[] = \"foo/bar\";\n++  using namespace __gnu_test;\n++  const test_container<const char, input_iterator_wrapper> c(s, s + strlen(s));\n++  auto c0 = c;\n++  path p0(std::begin(c0), std::end(c0));\n++  auto c1 = c;\n++  path p1(std::begin(c1), std::end(c1), path::auto_format);\n++  VERIFY( p1 == p0 );\n++  auto c2 = c;\n++  path p2(std::begin(c2), std::end(c2), path::native_format);\n++  VERIFY( p2 == p0 );\n++  auto c3 = c;\n++  path p3(std::begin(c3), std::end(c3), path::generic_format);\n++  VERIFY( p3 == p0 );\n++}\n++\n++void\n++test07()\n++{\n++  // path(const Source&, const locale&, format)\n+   const char* s = \"foo/bar\";\n+   std::locale loc;\n+   path p0(s, loc);\n+@@ -91,16 +134,23 @@ test05()\n+ }\n+ \n+ void\n+-test06()\n++test08()\n+ {\n++  // path(InputIterator, InputIterator, const locale&, format)\n+   const char s[] = \"foo/bar\";\n++  using namespace __gnu_test;\n++  const test_container<const char, input_iterator_wrapper> c(s, s + strlen(s));\n+   std::locale loc;\n+-  path p0(std::begin(s), std::end(s), loc);\n+-  path p1(std::begin(s), std::end(s), loc, path::auto_format);\n++  auto c0 = c;\n++  path p0(std::begin(c0), std::end(c0), loc);\n++  auto c1 = c;\n++  path p1(std::begin(c1), std::end(c1), loc, path::auto_format);\n+   VERIFY( p1 == p0 );\n+-  path p2(std::begin(s), std::end(s), loc, path::native_format);\n++  auto c2 = c;\n++  path p2(std::begin(c2), std::end(c2), loc, path::native_format);\n+   VERIFY( p2 == p0 );\n+-  path p3(std::begin(s), std::end(s), loc, path::generic_format);\n++  auto c3 = c;\n++  path p3(std::begin(c3), std::end(c3), loc, path::generic_format);\n+   VERIFY( p3 == p0 );\n+ }\n+ \n+@@ -113,4 +163,6 @@ main()\n+   test04();\n+   test05();\n+   test06();\n++  test07();\n++  test08();\n+ }\n+diff --git a/libstdc++-v3/testsuite/27_io/filesystem/path/construct/locale.cc b/libstdc++-v3/testsuite/27_io/filesystem/path/construct/locale.cc\n+index 498c1421fbf..c32c647e167 100644\n+--- a/libstdc++-v3/testsuite/27_io/filesystem/path/construct/locale.cc\n++++ b/libstdc++-v3/testsuite/27_io/filesystem/path/construct/locale.cc\n+@@ -23,6 +23,7 @@\n+ \n+ #include <filesystem>\n+ #include <testsuite_hooks.h>\n++#include <testsuite_iterators.h>\n+ \n+ using std::filesystem::path;\n+ \n+@@ -33,8 +34,41 @@ test01()\n+   VERIFY( p.native() == \"/foo/bar\" );\n+ }\n+ \n++void\n++test02()\n++{\n++  using __gnu_test::test_container;\n++  using __gnu_test::input_iterator_wrapper;\n++  // Test with input iterators and const value_types\n++\n++  const std::locale loc;\n++  const std::string s = \"foo/bar/\";\n++  const path p0(s);\n++\n++  test_container<char, input_iterator_wrapper>\n++      r1((char*)s.c_str(), (char*)s.c_str() + s.size());\n++  path p1(r1.begin(), r1.end(), loc);\n++  VERIFY( p1 == p0 );\n++\n++  test_container<char, input_iterator_wrapper>\n++    r2((char*)s.c_str(), (char*)s.c_str() + s.size() + 1); // includes null-terminator\n++  path p2(r2.begin(), loc);\n++  VERIFY( p2 == p0 );\n++\n++  test_container<const char, input_iterator_wrapper>\n++    r3(s.c_str(), s.c_str() + s.size());\n++  path p3(r3.begin(), r3.end(), loc);\n++  VERIFY( p3 == p0 );\n++\n++  test_container<const char, input_iterator_wrapper>\n++    r4(s.c_str(), s.c_str() + s.size() + 1); // includes null-terminator\n++  path p4(r4.begin(), loc);\n++  VERIFY( p4 == p0 );\n++}\n++\n+ int\n+ main()\n+ {\n+   test01();\n++  test02();\n+ }\n+diff --git a/libstdc++-v3/testsuite/experimental/filesystem/path/concat/strings.cc b/libstdc++-v3/testsuite/experimental/filesystem/path/concat/strings.cc\n+index 649ad0bb0c2..37ea0ebb798 100644\n+--- a/libstdc++-v3/testsuite/experimental/filesystem/path/concat/strings.cc\n++++ b/libstdc++-v3/testsuite/experimental/filesystem/path/concat/strings.cc\n+@@ -23,6 +23,7 @@\n+ \n+ #include <experimental/filesystem>\n+ #include <testsuite_hooks.h>\n++#include <testsuite_iterators.h>\n+ \n+ using std::experimental::filesystem::path;\n+ \n+@@ -30,23 +31,30 @@ void\n+ test01()\n+ {\n+   path p(\"/\");\n+-  p += path::string_type(\"foo\");\n+-  VERIFY( p.filename() == \"foo\" );\n++  p += std::string(\"foo\");\n++  VERIFY( p.filename().string() == \"foo\" );\n+   p += \"bar\";\n+-  VERIFY( p.filename() == \"foobar\" );\n++  VERIFY( p.filename().string() == \"foobar\" );\n+   p += '/';\n+-  VERIFY( p.parent_path() == \"/foobar\" && p.filename() == \".\" );\n++  VERIFY( p.parent_path().string() == \"/foobar\" );\n++  VERIFY( p.filename().string() == \".\" );\n+ #if _GLIBCXX_USE_WCHAR_T\n++  VERIFY( p.parent_path().wstring() == L\"/foobar\" );\n++  VERIFY( p.filename().wstring() == L\".\" );\n+   p += L\"baz.txt\";\n+ #else\n+   p += \"baz.txt\";\n+ #endif\n+-  VERIFY( p.filename() == \"baz.txt\" );\n++  VERIFY( p.filename().string() == \"baz.txt\" );\n+   p.concat(\"/dir/\");\n+-  VERIFY( p.parent_path() == \"/foobar/baz.txt/dir\" && p.filename() == \".\" );\n+-  std::string file = \"file\";\n+-  p.concat(file.begin(), file.end());\n+-  VERIFY( p.filename() == \"file\" );\n++  // N.B. on Windows p.parent_path() is \"/foobar\\\\baz.txt\\\\dir\"\n++  VERIFY( p.parent_path() == path(\"/foobar/baz.txt/dir\") );\n++  VERIFY( p.filename().string() == \".\" );\n++  const char file[] = \"file\";\n++  __gnu_test::test_container<const char, __gnu_test::input_iterator_wrapper>\n++    input(file, file + 4);\n++  p.concat(input.begin(), input.end());\n++  VERIFY( p.filename().string() == file );\n+ }\n+ \n+ int\n+diff --git a/libstdc++-v3/testsuite/experimental/filesystem/path/construct/locale.cc b/libstdc++-v3/testsuite/experimental/filesystem/path/construct/locale.cc\n+index 46e0758e294..3ca16edc2d7 100644\n+--- a/libstdc++-v3/testsuite/experimental/filesystem/path/construct/locale.cc\n++++ b/libstdc++-v3/testsuite/experimental/filesystem/path/construct/locale.cc\n+@@ -23,6 +23,7 @@\n+ \n+ #include <experimental/filesystem>\n+ #include <testsuite_hooks.h>\n++#include <testsuite_iterators.h>\n+ \n+ using std::experimental::filesystem::path;\n+ \n+@@ -33,8 +34,41 @@ test01()\n+   VERIFY( p.string() == \"/foo/bar\" );\n+ }\n+ \n++void\n++test02()\n++{\n++  using __gnu_test::test_container;\n++  using __gnu_test::input_iterator_wrapper;\n++  // Test with input iterators and const value_types\n++\n++  const std::locale loc;\n++  const std::string s = \"foo/bar/\";\n++  const path p0(s);\n++\n++  test_container<char, input_iterator_wrapper>\n++      r1((char*)s.c_str(), (char*)s.c_str() + s.size());\n++  path p1(r1.begin(), r1.end(), loc);\n++  VERIFY( p1 == p0 );\n++\n++  test_container<char, input_iterator_wrapper>\n++    r2((char*)s.c_str(), (char*)s.c_str() + s.size() + 1); // includes null-terminator\n++  path p2(r2.begin(), loc);\n++  VERIFY( p2 == p0 );\n++\n++  test_container<const char, input_iterator_wrapper>\n++    r3(s.c_str(), s.c_str() + s.size());\n++  path p3(r3.begin(), r3.end(), loc);\n++  VERIFY( p3 == p0 );\n++\n++  test_container<const char, input_iterator_wrapper>\n++    r4(s.c_str(), s.c_str() + s.size() + 1); // includes null-terminator\n++  path p4(r4.begin(), loc);\n++  VERIFY( p4 == p0 );\n++}\n++\n+ int\n+ main()\n+ {\n+   test01();\n++  test02();\n+ }\n+-- \n+2.33.1\n+"
      },
      {
        "sha": "30277d4a8cff958e379381e218d0ca86da22b47b",
        "filename": "contrib/guix/patches/0003-PR-libstdc-78870-support-std-filesystem-on-Windows.patch",
        "status": "added",
        "additions": 3132,
        "deletions": 0,
        "changes": 3132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/patches/0003-PR-libstdc-78870-support-std-filesystem-on-Windows.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/patches/0003-PR-libstdc-78870-support-std-filesystem-on-Windows.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/0003-PR-libstdc-78870-support-std-filesystem-on-Windows.patch?ref=9604eda1abe6ffc02c97e3434c3c2c4ce1250794"
      },
      {
        "sha": "f6078a9fe727a8266d29739c8f79befca1aa7913",
        "filename": "contrib/guix/patches/0004-LWG-2989-hide-path-iostream-operators-from-normal-lo.patch",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/patches/0004-LWG-2989-hide-path-iostream-operators-from-normal-lo.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/patches/0004-LWG-2989-hide-path-iostream-operators-from-normal-lo.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/0004-LWG-2989-hide-path-iostream-operators-from-normal-lo.patch?ref=9604eda1abe6ffc02c97e3434c3c2c4ce1250794",
        "patch": "@@ -0,0 +1,123 @@\n+From aaded477a87bc0b7087aeecea63723a80a71a50d Mon Sep 17 00:00:00 2001\n+From: Jonathan Wakely <jwakely@redhat.com>\n+Date: Mon, 18 Jun 2018 19:59:44 +0100\n+Subject: [PATCH 4/6] LWG 2989 hide path iostream operators from normal lookup\n+\n+By only defining these operators as friends (with no namespace-scope\n+declaration) they can only be found by ADL and do not participate in\n+overload resolution for arguments of types other than path.\n+\n+\tLWG 2989 hide path iostream operators from normal lookup\n+\t* include/bits/fs_path.h (operator<<, operator>>): Define inline as\n+\tfriends.\n+\t* testsuite/27_io/filesystem/path/io/dr2989.cc: New.\n+\n+From-SVN: r261711\n+---\n+ libstdc++-v3/include/bits/fs_path.h           | 40 +++++++++----------\n+ .../27_io/filesystem/path/io/dr2989.cc        | 35 ++++++++++++++++\n+ 2 files changed, 55 insertions(+), 20 deletions(-)\n+ create mode 100644 libstdc++-v3/testsuite/27_io/filesystem/path/io/dr2989.cc\n+\n+diff --git a/libstdc++-v3/include/bits/fs_path.h b/libstdc++-v3/include/bits/fs_path.h\n+index 612599920e3..79844013a44 100644\n+--- a/libstdc++-v3/include/bits/fs_path.h\n++++ b/libstdc++-v3/include/bits/fs_path.h\n+@@ -365,6 +365,26 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+     iterator begin() const;\n+     iterator end() const;\n+ \n++    /// Write a path to a stream\n++    template<typename _CharT, typename _Traits>\n++      friend std::basic_ostream<_CharT, _Traits>&\n++      operator<<(std::basic_ostream<_CharT, _Traits>& __os, const path& __p)\n++      {\n++\t__os << std::quoted(__p.string<_CharT, _Traits>());\n++\treturn __os;\n++      }\n++\n++    /// Read a path from a stream\n++    template<typename _CharT, typename _Traits>\n++      friend std::basic_istream<_CharT, _Traits>&\n++      operator>>(std::basic_istream<_CharT, _Traits>& __is, path& __p)\n++      {\n++\tstd::basic_string<_CharT, _Traits> __tmp;\n++\tif (__is >> std::quoted(__tmp))\n++\t  __p = std::move(__tmp);\n++\treturn __is;\n++      }\n++\n+     // Create a basic_string by reading until a null character.\n+     template<typename _InputIterator,\n+ \t     typename _Traits = std::iterator_traits<_InputIterator>,\n+@@ -507,26 +527,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+     return __result;\n+   }\n+ \n+-  /// Write a path to a stream\n+-  template<typename _CharT, typename _Traits>\n+-    basic_ostream<_CharT, _Traits>&\n+-    operator<<(basic_ostream<_CharT, _Traits>& __os, const path& __p)\n+-    {\n+-      __os << std::quoted(__p.string<_CharT, _Traits>());\n+-      return __os;\n+-    }\n+-\n+-  /// Read a path from a stream\n+-  template<typename _CharT, typename _Traits>\n+-    basic_istream<_CharT, _Traits>&\n+-    operator>>(basic_istream<_CharT, _Traits>& __is, path& __p)\n+-    {\n+-      basic_string<_CharT, _Traits> __tmp;\n+-      if (__is >> std::quoted(__tmp))\n+-\t__p = std::move(__tmp);\n+-      return __is;\n+-    }\n+-\n+   template<typename _InputIterator>\n+     inline auto\n+     u8path(_InputIterator __first, _InputIterator __last)\n+diff --git a/libstdc++-v3/testsuite/27_io/filesystem/path/io/dr2989.cc b/libstdc++-v3/testsuite/27_io/filesystem/path/io/dr2989.cc\n+new file mode 100644\n+index 00000000000..b9a1235e1fe\n+--- /dev/null\n++++ b/libstdc++-v3/testsuite/27_io/filesystem/path/io/dr2989.cc\n+@@ -0,0 +1,35 @@\n++// Copyright (C) 2018 Free Software Foundation, Inc.\n++//\n++// This file is part of the GNU ISO C++ Library.  This library is free\n++// software; you can redistribute it and/or modify it under the\n++// terms of the GNU General Public License as published by the\n++// Free Software Foundation; either version 3, or (at your option)\n++// any later version.\n++\n++// This library is distributed in the hope that it will be useful,\n++// but WITHOUT ANY WARRANTY; without even the implied warranty of\n++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n++// GNU General Public License for more details.\n++\n++// You should have received a copy of the GNU General Public License along\n++// with this library; see the file COPYING3.  If not see\n++// <http://www.gnu.org/licenses/>.\n++\n++// { dg-options \"-std=gnu++17\" }\n++// { dg-do compile { target c++17 } }\n++\n++#include <iostream>\n++#include <filesystem>\n++\n++using namespace std::filesystem;\n++\n++struct P {\n++  operator path&();\n++};\n++\n++void foo(std::iostream& s) {\n++  P p;\n++  s << p; // { dg-error \"no match\" }\n++  s >> p; // { dg-error \"no match\" }\n++}\n++// { dg-prune-output \"no type .* std::enable_if\" }\n+-- \n+2.33.1\n+"
      },
      {
        "sha": "74a77bc6c84e8cd4b850698687ff4aa7bd768979",
        "filename": "contrib/guix/patches/0005-PR-libstdc-83306-make-filesystem_error-no-throw-copy.patch",
        "status": "added",
        "additions": 450,
        "deletions": 0,
        "changes": 450,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/patches/0005-PR-libstdc-83306-make-filesystem_error-no-throw-copy.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/patches/0005-PR-libstdc-83306-make-filesystem_error-no-throw-copy.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/0005-PR-libstdc-83306-make-filesystem_error-no-throw-copy.patch?ref=9604eda1abe6ffc02c97e3434c3c2c4ce1250794",
        "patch": "@@ -0,0 +1,450 @@\n+From fd22761211b59a713639df61b20e73644256997e Mon Sep 17 00:00:00 2001\n+From: Jonathan Wakely <jwakely@redhat.com>\n+Date: Wed, 28 Nov 2018 15:27:11 +0000\n+Subject: [PATCH 5/6] PR libstdc++/83306 make filesystem_error no-throw\n+ copyable\n+\n+The class API provides no way to modify the members, so we can share\n+them between copies of the same object. Copying becomes a simple\n+reference count update, which doesn't throw.\n+\n+Also adjust the what() string to allow distinguishing between an empty\n+path passed to the constructor, and no path.\n+\n+\tPR libstdc++/83306\n+\t* include/bits/fs_path.h (filesystem_error): Move data members into\n+\tpimpl class owned by shared_ptr. Remove inline definitions of member\n+\tfunctions.\n+\t* src/filesystem/std-path.cc (filesystem_error::_Impl): Define.\n+\t(filesystem_error): Define member functions.\n+\t* testsuite/27_io/filesystem/filesystem_error/cons.cc: New test.\n+\t* testsuite/27_io/filesystem/filesystem_error/copy.cc: New test.\n+\n+From-SVN: r266565\n+---\n+ libstdc++-v3/include/bits/fs_path.h           |  33 +++---\n+ libstdc++-v3/src/filesystem/std-path.cc       | 108 +++++++++++------\n+ .../27_io/filesystem/filesystem_error/cons.cc |  93 +++++++++++++++\n+ .../27_io/filesystem/filesystem_error/copy.cc | 111 ++++++++++++++++++\n+ 4 files changed, 293 insertions(+), 52 deletions(-)\n+ create mode 100644 libstdc++-v3/testsuite/27_io/filesystem/filesystem_error/cons.cc\n+ create mode 100644 libstdc++-v3/testsuite/27_io/filesystem/filesystem_error/copy.cc\n+\n+diff --git a/libstdc++-v3/include/bits/fs_path.h b/libstdc++-v3/include/bits/fs_path.h\n+index 79844013a44..460aa3bd2d2 100644\n+--- a/libstdc++-v3/include/bits/fs_path.h\n++++ b/libstdc++-v3/include/bits/fs_path.h\n+@@ -43,6 +43,8 @@\n+ #include <system_error>\n+ #include <bits/stl_algobase.h>\n+ #include <bits/locale_conv.h>\n++#include <ext/concurrence.h>\n++#include <bits/shared_ptr.h>\n+ \n+ #if defined(_WIN32) && !defined(__CYGWIN__)\n+ # define _GLIBCXX_FILESYSTEM_IS_WINDOWS 1\n+@@ -577,30 +579,29 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+   class filesystem_error : public std::system_error\n+   {\n+   public:\n+-    filesystem_error(const string& __what_arg, error_code __ec)\n+-    : system_error(__ec, __what_arg) { }\n++    filesystem_error(const string& __what_arg, error_code __ec);\n+ \n+     filesystem_error(const string& __what_arg, const path& __p1,\n+-\t\t     error_code __ec)\n+-    : system_error(__ec, __what_arg), _M_path1(__p1) { }\n++\t\t     error_code __ec);\n+ \n+     filesystem_error(const string& __what_arg, const path& __p1,\n+-\t\t     const path& __p2, error_code __ec)\n+-    : system_error(__ec, __what_arg), _M_path1(__p1), _M_path2(__p2)\n+-    { }\n++\t\t     const path& __p2, error_code __ec);\n++\n++    filesystem_error(const filesystem_error&) = default;\n++    filesystem_error& operator=(const filesystem_error&) = default;\n++\n++    // No move constructor or assignment operator.\n++    // Copy rvalues instead, so that _M_impl is not left empty.\n+ \n+     ~filesystem_error();\n+ \n+-    const path& path1() const noexcept { return _M_path1; }\n+-    const path& path2() const noexcept { return _M_path2; }\n+-    const char* what() const noexcept { return _M_what.c_str(); }\n++    const path& path1() const noexcept;\n++    const path& path2() const noexcept;\n++    const char* what() const noexcept;\n+ \n+   private:\n+-    std::string _M_gen_what();\n+-\n+-    path _M_path1;\n+-    path _M_path2;\n+-    std::string _M_what = _M_gen_what();\n++    struct _Impl;\n++    std::__shared_ptr<const _Impl> _M_impl;\n+   };\n+ \n+   struct path::_Cmpt : path\n+@@ -1163,6 +1164,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+ _GLIBCXX_END_NAMESPACE_CXX11\n+ } // namespace filesystem\n+ \n++extern template class __shared_ptr<const filesystem::filesystem_error::_Impl>;\n++\n+ _GLIBCXX_END_NAMESPACE_VERSION\n+ } // namespace std\n+ \n+diff --git a/libstdc++-v3/src/filesystem/std-path.cc b/libstdc++-v3/src/filesystem/std-path.cc\n+index da30ba4bf2c..1cd6ffff44f 100644\n+--- a/libstdc++-v3/src/filesystem/std-path.cc\n++++ b/libstdc++-v3/src/filesystem/std-path.cc\n+@@ -34,8 +34,6 @@\n+ namespace fs = std::filesystem;\n+ using fs::path;\n+ \n+-fs::filesystem_error::~filesystem_error() = default;\n+-\n+ constexpr path::value_type path::preferred_separator;\n+ \n+ #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+@@ -791,47 +789,83 @@ fs::hash_value(const path& p) noexcept\n+   return seed;\n+ }\n+ \n+-namespace std\n+-{\n+-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+-namespace filesystem\n++struct fs::filesystem_error::_Impl\n+ {\n+-  string\n+-  fs_err_concat(const string& __what, const string& __path1,\n+-\t\t  const string& __path2)\n++  _Impl(const string& what_arg, const path& p1, const path& p2)\n++  : path1(p1), path2(p2), what(make_what(what_arg, &p1, &p2))\n++  { }\n++\n++  _Impl(const string& what_arg, const path& p1)\n++  : path1(p1), path2(), what(make_what(what_arg, &p1, nullptr))\n++  { }\n++\n++  _Impl(const string& what_arg)\n++  : what(make_what(what_arg, nullptr, nullptr))\n++  { }\n++\n++  static std::string\n++  make_what(const std::string& s, const path* p1, const path* p2)\n+   {\n+-    const size_t __len = 18 + __what.length()\n+-      + (__path1.length() ? __path1.length() + 3 : 0)\n+-      + (__path2.length() ? __path2.length() + 3 : 0);\n+-    string __ret;\n+-    __ret.reserve(__len);\n+-    __ret = \"filesystem error: \";\n+-    __ret += __what;\n+-    if (!__path1.empty())\n+-      {\n+-\t__ret += \" [\";\n+-\t__ret += __path1;\n+-\t__ret += ']';\n+-      }\n+-    if (!__path2.empty())\n++    const std::string pstr1 = p1 ? p1->u8string() : std::string{};\n++    const std::string pstr2 = p2 ? p2->u8string() : std::string{};\n++    const size_t len = 18 + s.length()\n++      + (pstr1.length() ? pstr1.length() + 3 : 0)\n++      + (pstr2.length() ? pstr2.length() + 3 : 0);\n++    std::string w;\n++    w.reserve(len);\n++    w = \"filesystem error: \";\n++    w += s;\n++    if (p1)\n+       {\n+-\t__ret += \" [\";\n+-\t__ret += __path2;\n+-\t__ret += ']';\n++\tw += \" [\";\n++\tw += pstr1;\n++\tw += ']';\n++\tif (p2)\n++\t  {\n++\t    w += \" [\";\n++\t    w += pstr2;\n++\t    w += ']';\n++\t  }\n+       }\n+-    return __ret;\n++    return w;\n+   }\n+ \n+-_GLIBCXX_BEGIN_NAMESPACE_CXX11\n++  path path1;\n++  path path2;\n++  std::string what;\n++};\n+ \n+-  std::string filesystem_error::_M_gen_what()\n+-  {\n+-    return fs_err_concat(system_error::what(), _M_path1.u8string(),\n+-\t\t\t _M_path2.u8string());\n+-  }\n++template class std::__shared_ptr<const fs::filesystem_error::_Impl>;\n++\n++fs::filesystem_error::\n++filesystem_error(const string& what_arg, error_code ec)\n++: system_error(ec, what_arg),\n++  _M_impl(std::__make_shared<_Impl>(what_arg))\n++{ }\n++\n++fs::filesystem_error::\n++filesystem_error(const string& what_arg, const path& p1, error_code ec)\n++: system_error(ec, what_arg),\n++  _M_impl(std::__make_shared<_Impl>(what_arg, p1))\n++{ }\n++\n++fs::filesystem_error::\n++filesystem_error(const string& what_arg, const path& p1, const path& p2,\n++\t\t error_code ec)\n++: system_error(ec, what_arg),\n++  _M_impl(std::__make_shared<_Impl>(what_arg, p1, p2))\n++{ }\n++\n++fs::filesystem_error::~filesystem_error() = default;\n++\n++const fs::path&\n++fs::filesystem_error::path1() const noexcept\n++{ return _M_impl->path1; }\n+ \n+-_GLIBCXX_END_NAMESPACE_CXX11\n++const fs::path&\n++fs::filesystem_error::path2() const noexcept\n++{ return _M_impl->path2; }\n+ \n+-} // filesystem\n+-_GLIBCXX_END_NAMESPACE_VERSION\n+-} // std\n++const char*\n++fs::filesystem_error::what() const noexcept\n++{ return _M_impl->what.c_str(); }\n+diff --git a/libstdc++-v3/testsuite/27_io/filesystem/filesystem_error/cons.cc b/libstdc++-v3/testsuite/27_io/filesystem/filesystem_error/cons.cc\n+new file mode 100644\n+index 00000000000..ddaaf44d1a5\n+--- /dev/null\n++++ b/libstdc++-v3/testsuite/27_io/filesystem/filesystem_error/cons.cc\n+@@ -0,0 +1,93 @@\n++// Copyright (C) 2018 Free Software Foundation, Inc.\n++//\n++// This file is part of the GNU ISO C++ Library.  This library is free\n++// software; you can redistribute it and/or modify it under the\n++// terms of the GNU General Public License as published by the\n++// Free Software Foundation; either version 3, or (at your option)\n++// any later version.\n++\n++// This library is distributed in the hope that it will be useful,\n++// but WITHOUT ANY WARRANTY; without even the implied warranty of\n++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n++// GNU General Public License for more details.\n++\n++// You should have received a copy of the GNU General Public License along\n++// with this library; see the file COPYING3.  If not see\n++// <http://www.gnu.org/licenses/>.\n++\n++// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n++// { dg-do run { target c++17 } }\n++// { dg-require-filesystem-ts \"\" }\n++\n++#include <filesystem>\n++#include <testsuite_hooks.h>\n++\n++using std::filesystem::filesystem_error;\n++\n++bool contains(std::string_view what_str, std::string_view expected)\n++{\n++  return what_str.find(expected) != std::string_view::npos;\n++}\n++\n++void\n++test01()\n++{\n++  const char* const str = \"error test\";\n++  const std::error_code ec = make_error_code(std::errc::is_a_directory);\n++  const std::filesystem::path p1 = \"test/path/one\";\n++  const std::filesystem::path p2 = \"/test/path/two\";\n++\n++  const filesystem_error e1(str, ec);\n++  VERIFY( contains(e1.what(), str) );\n++  VERIFY( !contains(e1.what(), \"[]\") ); // no \"empty path\" in the string\n++  VERIFY( e1.path1().empty() );\n++  VERIFY( e1.path2().empty() );\n++  VERIFY( e1.code() == ec );\n++\n++  const filesystem_error e2(str, p1, ec);\n++  VERIFY( e2.path1() == p1 );\n++  VERIFY( e2.path2().empty() );\n++  VERIFY( contains(e2.what(), str) );\n++  VERIFY( contains(e2.what(), p1.string()) );\n++  VERIFY( !contains(e2.what(), \"[]\") );\n++  VERIFY( e2.code() == ec );\n++\n++  const filesystem_error e3(str, std::filesystem::path{}, ec);\n++  VERIFY( e3.path1().empty() );\n++  VERIFY( e3.path2().empty() );\n++  VERIFY( contains(e3.what(), str) );\n++  VERIFY( contains(e3.what(), \"[]\") );\n++  VERIFY( !contains(e3.what(), \"[] []\") );\n++  VERIFY( e3.code() == ec );\n++\n++  const filesystem_error e4(str, p1, p2, ec);\n++  VERIFY( e4.path1() == p1 );\n++  VERIFY( e4.path2() == p2 );\n++  VERIFY( contains(e4.what(), str) );\n++  VERIFY( contains(e4.what(), p1.string()) );\n++  VERIFY( contains(e4.what(), p2.string()) );\n++  VERIFY( !contains(e4.what(), \"[]\") );\n++  VERIFY( e4.code() == ec );\n++\n++  const filesystem_error e5(str, p1, std::filesystem::path{}, ec);\n++  VERIFY( e5.path1() == p1 );\n++  VERIFY( e5.path2().empty() );\n++  VERIFY( contains(e5.what(), str) );\n++  VERIFY( contains(e5.what(), p1.string()) );\n++  VERIFY( contains(e5.what(), \"[]\") );\n++  VERIFY( e5.code() == ec );\n++\n++  const filesystem_error e6(str, std::filesystem::path{}, p2, ec);\n++  VERIFY( e6.path1().empty() );\n++  VERIFY( e6.path2() == p2 );\n++  VERIFY( contains(e6.what(), str) );\n++  VERIFY( contains(e6.what(), \"[]\") );\n++  VERIFY( contains(e6.what(), p2.string()) );\n++  VERIFY( e6.code() == ec );\n++}\n++\n++int\n++main()\n++{\n++  test01();\n++}\n+diff --git a/libstdc++-v3/testsuite/27_io/filesystem/filesystem_error/copy.cc b/libstdc++-v3/testsuite/27_io/filesystem/filesystem_error/copy.cc\n+new file mode 100644\n+index 00000000000..f085f9d6794\n+--- /dev/null\n++++ b/libstdc++-v3/testsuite/27_io/filesystem/filesystem_error/copy.cc\n+@@ -0,0 +1,111 @@\n++// Copyright (C) 2018 Free Software Foundation, Inc.\n++//\n++// This file is part of the GNU ISO C++ Library.  This library is free\n++// software; you can redistribute it and/or modify it under the\n++// terms of the GNU General Public License as published by the\n++// Free Software Foundation; either version 3, or (at your option)\n++// any later version.\n++\n++// This library is distributed in the hope that it will be useful,\n++// but WITHOUT ANY WARRANTY; without even the implied warranty of\n++// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n++// GNU General Public License for more details.\n++\n++// You should have received a copy of the GNU General Public License along\n++// with this library; see the file COPYING3.  If not see\n++// <http://www.gnu.org/licenses/>.\n++\n++// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n++// { dg-do run { target c++17 } }\n++// { dg-require-filesystem-ts \"\" }\n++\n++#include <filesystem>\n++#include <testsuite_hooks.h>\n++\n++using std::filesystem::filesystem_error;\n++\n++// PR libstdc++/83306\n++static_assert(std::is_nothrow_copy_constructible_v<filesystem_error>);\n++static_assert(std::is_nothrow_copy_assignable_v<filesystem_error>);\n++\n++void\n++test01()\n++{\n++  const char* const str = \"error test\";\n++  const std::error_code ec = make_error_code(std::errc::is_a_directory);\n++  const filesystem_error e1(str, ec);\n++  auto e2 = e1;\n++  VERIFY( e2.path1().empty() );\n++  VERIFY( e2.path2().empty() );\n++  VERIFY( std::string_view(e2.what()).find(str) != std::string_view::npos );\n++  VERIFY( e2.code() == ec );\n++\n++  const filesystem_error e3(str, \"test/path/one\", ec);\n++  auto e4 = e3;\n++  VERIFY( e4.path1() == \"test/path/one\" );\n++  VERIFY( e4.path2().empty() );\n++  VERIFY( std::string_view(e4.what()).find(str) != std::string_view::npos );\n++  VERIFY( e2.code() == ec );\n++\n++  const filesystem_error e5(str, \"test/path/one\", \"/test/path/two\", ec);\n++  auto e6 = e5;\n++  VERIFY( e6.path1() == \"test/path/one\" );\n++  VERIFY( e6.path2() == \"/test/path/two\" );\n++  VERIFY( std::string_view(e6.what()).find(str) != std::string_view::npos );\n++  VERIFY( e2.code() == ec );\n++}\n++\n++void\n++test02()\n++{\n++  const char* const str = \"error test\";\n++  const std::error_code ec = make_error_code(std::errc::is_a_directory);\n++  const filesystem_error e1(str, ec);\n++  filesystem_error e2(\"\", {});\n++  e2 = e1;\n++  VERIFY( e2.path1().empty() );\n++  VERIFY( e2.path2().empty() );\n++  VERIFY( std::string_view(e2.what()).find(str) != std::string_view::npos );\n++  VERIFY( e2.code() == ec );\n++\n++  const filesystem_error e3(str, \"test/path/one\", ec);\n++  filesystem_error e4(\"\", {});\n++  e4 = e3;\n++  VERIFY( e4.path1() == \"test/path/one\" );\n++  VERIFY( e4.path2().empty() );\n++  VERIFY( std::string_view(e4.what()).find(str) != std::string_view::npos );\n++  VERIFY( e2.code() == ec );\n++\n++  const filesystem_error e5(str, \"test/path/one\", \"/test/path/two\", ec);\n++  filesystem_error e6(\"\", {});\n++  e6 = e5;\n++  VERIFY( e6.path1() == \"test/path/one\" );\n++  VERIFY( e6.path2() == \"/test/path/two\" );\n++  VERIFY( std::string_view(e6.what()).find(str) != std::string_view::npos );\n++  VERIFY( e2.code() == ec );\n++}\n++\n++void\n++test03()\n++{\n++  filesystem_error e(\"test\", std::error_code());\n++  VERIFY( e.path1().empty() );\n++  VERIFY( e.path2().empty() );\n++  auto e2 = std::move(e);\n++  // Observers must still be usable on moved-from object:\n++  VERIFY( e.path1().empty() );\n++  VERIFY( e.path2().empty() );\n++  VERIFY( e.what() != nullptr );\n++  e2 = std::move(e);\n++  VERIFY( e.path1().empty() );\n++  VERIFY( e.path2().empty() );\n++  VERIFY( e.what() != nullptr );\n++}\n++\n++int\n++main()\n++{\n++  test01();\n++  test02();\n++  test03();\n++}\n+-- \n+2.33.1\n+"
      },
      {
        "sha": "100f7b782b8fb90f1e39740c78a184f318534e69",
        "filename": "contrib/guix/patches/0006-Overload-std-distance-and-std-advance-for-path-itera.patch",
        "status": "added",
        "additions": 120,
        "deletions": 0,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/patches/0006-Overload-std-distance-and-std-advance-for-path-itera.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/patches/0006-Overload-std-distance-and-std-advance-for-path-itera.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/0006-Overload-std-distance-and-std-advance-for-path-itera.patch?ref=9604eda1abe6ffc02c97e3434c3c2c4ce1250794",
        "patch": "@@ -0,0 +1,120 @@\n+From c08017125dc8903de29bfc1ad2cef1ec83feaff8 Mon Sep 17 00:00:00 2001\n+From: Jonathan Wakely <jwakely@redhat.com>\n+Date: Wed, 12 Dec 2018 16:13:49 +0000\n+Subject: [PATCH 6/6] Overload std::distance and std::advance for\n+ path::iterator\n+\n+Although filesystem::path::iterator is only a bidirectional iterator,\n+the underlying sequence has random access iterators (specifically, raw\n+pointers). This means std::distance and std::advance can be implemented\n+more efficiently than the generic versions which apply ++ and --\n+repeatedly.\n+\n+\tPR libstdc++/71044 (partial)\n+\t* include/bits/fs_path.h (__path_iter_distance, __path_iter_advance):\n+\tNew friend functions to implement std::distance and std::advance more\n+\tefficiently.\n+\t(distance, advance): Add overloads for path::iterator.\n+\t* testsuite/27_io/filesystem/path/itr/components.cc: Test new\n+\toverload.\n+\n+From-SVN: r267057\n+---\n+ libstdc++-v3/include/bits/fs_path.h           | 40 +++++++++++++++++++\n+ .../27_io/filesystem/path/itr/traversal.cc    | 18 +++++++++\n+ 2 files changed, 58 insertions(+)\n+\n+diff --git a/libstdc++-v3/include/bits/fs_path.h b/libstdc++-v3/include/bits/fs_path.h\n+index 460aa3bd2d2..3afe443e7b0 100644\n+--- a/libstdc++-v3/include/bits/fs_path.h\n++++ b/libstdc++-v3/include/bits/fs_path.h\n+@@ -734,6 +734,37 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+   private:\n+     friend class path;\n+ \n++    bool _M_is_multi() const { return _M_path->_M_type == _Type::_Multi; }\n++\n++    friend difference_type\n++    __path_iter_distance(const iterator& __first, const iterator& __last)\n++    {\n++      __glibcxx_assert(__first._M_path != nullptr);\n++      __glibcxx_assert(__first._M_path == __last._M_path);\n++      if (__first._M_is_multi())\n++\treturn std::distance(__first._M_cur, __last._M_cur);\n++      else if (__first._M_at_end == __last._M_at_end)\n++\treturn 0;\n++      else\n++\treturn __first._M_at_end ? -1 : 1;\n++    }\n++\n++    friend void\n++    __path_iter_advance(iterator& __i, difference_type __n)\n++    {\n++      if (__n == 1)\n++\t++__i;\n++      else if (__n == -1)\n++\t--__i;\n++      else if (__n != 0)\n++\t{\n++\t  __glibcxx_assert(__i._M_path != nullptr);\n++\t  __glibcxx_assert(__i._M_is_multi());\n++\t  // __glibcxx_assert(__i._M_path->_M_cmpts.end() - __i._M_cur >= __n);\n++\t  __i._M_cur += __n;\n++\t}\n++    }\n++\n+     iterator(const path* __path, path::_List::const_iterator __iter)\n+     : _M_path(__path), _M_cur(__iter), _M_at_end()\n+     { }\n+@@ -1164,6 +1195,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+ _GLIBCXX_END_NAMESPACE_CXX11\n+ } // namespace filesystem\n+ \n++inline ptrdiff_t\n++distance(filesystem::path::iterator __first, filesystem::path::iterator __last)\n++{ return __path_iter_distance(__first, __last); }\n++\n++template<typename _InputIterator, typename _Distance>\n++  void\n++  advance(filesystem::path::iterator& __i, _Distance __n)\n++  { __path_iter_advance(__i, static_cast<ptrdiff_t>(__n)); }\n++\n+ extern template class __shared_ptr<const filesystem::filesystem_error::_Impl>;\n+ \n+ _GLIBCXX_END_NAMESPACE_VERSION\n+diff --git a/libstdc++-v3/testsuite/27_io/filesystem/path/itr/traversal.cc b/libstdc++-v3/testsuite/27_io/filesystem/path/itr/traversal.cc\n+index 4852c03c78e..55760e82a9a 100644\n+--- a/libstdc++-v3/testsuite/27_io/filesystem/path/itr/traversal.cc\n++++ b/libstdc++-v3/testsuite/27_io/filesystem/path/itr/traversal.cc\n+@@ -136,10 +136,28 @@ test03()\n+     }\n+ }\n+ \n++void\n++test04()\n++{\n++  std::filesystem::path p = \"/a/b/c/d/e/f/g\";\n++  VERIFY( std::distance(p.begin(), p.end()) == 8);\n++  auto it = p.begin();\n++  std::advance(it, 1);\n++  VERIFY( std::distance(p.begin(), it) == 1 );\n++  VERIFY( it->native() == \"a\" );\n++  std::advance(it, 3);\n++  VERIFY( std::distance(p.begin(), it) == 4 );\n++  VERIFY( it->native() == \"d\" );\n++  std::advance(it, -2);\n++  VERIFY( std::distance(p.begin(), it) == 2 );\n++  VERIFY( it->native() == \"b\" );\n++}\n++\n+ int\n+ main()\n+ {\n+   test01();\n+   test02();\n+   test03();\n++  test04();\n+ }\n+-- \n+2.33.1\n+"
      },
      {
        "sha": "519c674286e8ef3041e293b2273716d4399f4318",
        "filename": "contrib/guix/patches/0007-PR-libstdc-67843-set-shared_ptr-lock-policy-at-build.patch",
        "status": "added",
        "additions": 506,
        "deletions": 0,
        "changes": 506,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/patches/0007-PR-libstdc-67843-set-shared_ptr-lock-policy-at-build.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9604eda1abe6ffc02c97e3434c3c2c4ce1250794/contrib/guix/patches/0007-PR-libstdc-67843-set-shared_ptr-lock-policy-at-build.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/0007-PR-libstdc-67843-set-shared_ptr-lock-policy-at-build.patch?ref=9604eda1abe6ffc02c97e3434c3c2c4ce1250794",
        "patch": "@@ -0,0 +1,506 @@\n+From c2ae25ce2b7e08768e2313c87ab7872a7da8cd6e Mon Sep 17 00:00:00 2001\n+From: Jonathan Wakely <jwakely@redhat.com>\n+Date: Tue, 27 Nov 2018 23:25:56 +0000\n+Subject: [PATCH] PR libstdc++/67843 set shared_ptr lock policy at build-time\n+\n+This resolves a longstanding issue where the lock policy for shared_ptr\n+reference counting depends on compilation options when the header is\n+included, so that different -march options can cause ABI changes. For\n+example, objects compiled with -march=armv7 will use atomics to\n+synchronize reference counts, and objects compiled with -march=armv5t\n+will use a mutex. That means the shared_ptr control block will have a\n+different layout in different objects, causing ODR violations and\n+undefined behaviour. This was the root cause of PR libstdc++/42734 as\n+well as PR libstdc++/67843.\n+\n+The solution is to decide on the lock policy at build time, when\n+libstdc++ is configured. The configure script checks for the\n+availability of the necessary atomic built-ins for the target and fixes\n+that choice permanently. Different -march flags used to compile user\n+code will not cause changes to the lock policy. This results in an ABI\n+change for certain compilations, but only where there was already an ABI\n+incompatibility between the libstdc++.so library and objects built with\n+an incompatible -march option. In general, this means a more stable ABI\n+that isn't silently altered when -march flags make addition atomic ops\n+available.\n+\n+To force a target to use \"atomic\" or \"mutex\" the new configure option\n+--with-libstdcxx-lock-policy can be used.\n+\n+In order to turn ODR violations into linker errors, the uses of\n+shared_ptr in filesystem directory iterators have been replaced\n+with __shared_ptr, and explicit instantiations are declared. This\n+ensures that object files using those types cannot link to libstdc++\n+libs unless they use the same lock policy.\n+\n+\tPR libstdc++/67843\n+\t* acinclude.m4 (GLIBCXX_ENABLE_LOCK_POLICY): Add new macro\n+\tthat defines _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Use GLIBCXX_ENABLE_LOCK_POLICY.\n+\t* doc/xml/manual/configure.xml: Document new configure option.\n+\t* include/bits/fs_dir.h (directory_iterator): Use __shared_ptr\n+\tinstead of shared_ptr.\n+\t(recursive_directory_iterator): Likewise.\n+\t(__shared_ptr<_Dir>): Add explicit instantiation declaration.\n+\t(__shared_ptr<recursive_directory_iterator::_Dir_stack>): Likewise.\n+\t* include/bits/shared_ptr_base.h (__allocate_shared, __make_shared):\n+\tAdd default template argument for _Lock_policy template parameter.\n+\t* include/ext/concurrence.h (__default_lock_policy): Check macro\n+\t_GLIBCXX_HAVE_ATOMIC_LOCK_POLICY instead of checking if the current\n+\ttarget supports the builtins for compare-and-swap.\n+\t* src/filesystem/std-dir.cc (__shared_ptr<_Dir>): Add explicit\n+\tinstantiation definition.\n+\t(__shared_ptr<recursive_directory_iterator::_Dir_stack>): Likewise.\n+\t(directory_iterator, recursive_directory_iterator): Use __make_shared\n+\tinstead of make_shared.\n+\n+From-SVN: r266533\n+---\n+ libstdc++-v3/acinclude.m4                   | 66 +++++++++++++++\n+ libstdc++-v3/config.h.in                    |  3 +\n+ libstdc++-v3/configure                      | 94 +++++++++++++++++++--\n+ libstdc++-v3/configure.ac                   |  1 +\n+ libstdc++-v3/doc/xml/manual/configure.xml   | 22 +++++\n+ libstdc++-v3/include/bits/fs_dir.h          | 12 ++-\n+ libstdc++-v3/include/bits/shared_ptr_base.h |  6 +-\n+ libstdc++-v3/include/ext/concurrence.h      |  9 +-\n+ libstdc++-v3/src/filesystem/std-dir.cc      |  7 +-\n+ 9 files changed, 199 insertions(+), 21 deletions(-)\n+\n+diff --git a/libstdc++-v3/acinclude.m4 b/libstdc++-v3/acinclude.m4\n+index b380a2628c1..51c9dd93a53 100644\n+--- a/libstdc++-v3/acinclude.m4\n++++ b/libstdc++-v3/acinclude.m4\n+@@ -3569,6 +3569,72 @@ EOF\n+ \n+ ])\n+ \n++dnl\n++dnl Set default lock policy for synchronizing shared_ptr reference counting.\n++dnl\n++dnl --with-libstdcxx-lock-policy=auto\n++dnl\tUse atomic operations for shared_ptr reference counting only if\n++dnl\tthe default target supports atomic compare-and-swap.\n++dnl --with-libstdcxx-lock-policy=atomic\n++dnl\tUse atomic operations for shared_ptr reference counting.\n++dnl --with-libstdcxx-lock-policy=mutex\n++dnl\tUse a mutex to synchronize shared_ptr reference counting.\n++dnl\n++dnl This controls the value of __gnu_cxx::__default_lock_policy, which\n++dnl determines how shared_ptr reference counts are synchronized.\n++dnl The option \"atomic\" means that atomic operations should be used,\n++dnl \"mutex\" means that a mutex will be used. The default option, \"auto\",\n++dnl will check if the target supports the compiler-generated builtins\n++dnl for atomic compare-and-swap operations for 2-byte and 4-byte integers,\n++dnl and will use \"atomic\" if supported, \"mutex\" otherwise.\n++dnl This option is ignored if the thread model used by GCC is \"single\",\n++dnl as no synchronization is used at all in that case.\n++dnl This option affects the library ABI (except in the \"single\" thread model).\n++dnl\n++dnl Defines _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY to 1 if atomics should be used.\n++dnl\n++AC_DEFUN([GLIBCXX_ENABLE_LOCK_POLICY], [\n++\n++  AC_ARG_WITH([libstdcxx-lock-policy],\n++    AC_HELP_STRING([--with-libstdcxx-lock-policy={atomic,mutex,auto}],\n++      [synchronization policy for shared_ptr reference counting [default=auto]]),\n++              [libstdcxx_atomic_lock_policy=$withval],\n++              [libstdcxx_atomic_lock_policy=auto])\n++\n++  case \"$libstdcxx_atomic_lock_policy\" in\n++    atomic|mutex|auto) ;;\n++    *) AC_MSG_ERROR([Invalid argument for --with-libstdcxx-lock-policy]) ;;\n++  esac\n++  AC_MSG_CHECKING([for lock policy for shared_ptr reference counts])\n++\n++  if test x\"$libstdcxx_atomic_lock_policy\" = x\"auto\"; then\n++    AC_LANG_SAVE\n++    AC_LANG_CPLUSPLUS\n++    ac_save_CXXFLAGS=\"$CXXFLAGS\"\n++\n++    dnl Why do we care about 2-byte CAS on targets with 4-byte _Atomic_word?!\n++    AC_TRY_COMPILE([\n++    #if ! defined __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2\n++    # error \"No 2-byte compare-and-swap\"\n++    #elif ! defined __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\n++    # error \"No 4-byte compare-and-swap\"\n++    #endif\n++    ],,\n++    [libstdcxx_atomic_lock_policy=atomic],\n++    [libstdcxx_atomic_lock_policy=mutex])\n++    AC_LANG_RESTORE\n++    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n++  fi\n++\n++  if test x\"$libstdcxx_atomic_lock_policy\" = x\"atomic\"; then\n++    AC_MSG_RESULT(atomic)\n++    AC_DEFINE(HAVE_ATOMIC_LOCK_POLICY,1,\n++      [Defined if shared_ptr reference counting should use atomic operations.])\n++  else\n++    AC_MSG_RESULT(mutex)\n++  fi\n++\n++])\n+ \n+ dnl\n+ dnl Allow visibility attributes to be used on namespaces, objects, etc.\n+diff --git a/libstdc++-v3/config.h.in b/libstdc++-v3/config.h.in\n+index 09760d37adc..6c4e4ddeb9f 100644\n+--- a/libstdc++-v3/config.h.in\n++++ b/libstdc++-v3/config.h.in\n+@@ -30,6 +30,9 @@\n+ /* Define to 1 if you have the `atanl' function. */\n+ #undef HAVE_ATANL\n+ \n++/* Defined if shared_ptr reference counting should use atomic operations. */\n++#undef HAVE_ATOMIC_LOCK_POLICY\n++\n+ /* Define to 1 if you have the `at_quick_exit' function. */\n+ #undef HAVE_AT_QUICK_EXIT\n+ \n+diff --git a/libstdc++-v3/configure b/libstdc++-v3/configure\n+index ad0d3fc78a4..9891c6bba06 100755\n+--- a/libstdc++-v3/configure\n++++ b/libstdc++-v3/configure\n+@@ -874,6 +874,7 @@ enable_libtool_lock\n+ enable_hosted_libstdcxx\n+ enable_libstdcxx_verbose\n+ enable_libstdcxx_pch\n++with_libstdcxx_lock_policy\n+ enable_cstdio\n+ enable_clocale\n+ enable_nls\n+@@ -1618,6 +1619,9 @@ Optional Packages:\n+   --with-pic              try to use only PIC/non-PIC objects [default=use\n+                           both]\n+   --with-gnu-ld           assume the C compiler uses GNU ld [default=no]\n++  --with-libstdcxx-lock-policy={atomic,mutex,auto}\n++                          synchronization policy for shared_ptr reference\n++                          counting [default=auto]\n+   --with-python-dir       the location to install Python modules. This path is\n+                           relative starting from the prefix.\n+   --with-gnu-ld           assume the C compiler uses GNU ld default=no\n+@@ -11810,7 +11814,7 @@ else\n+   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n+   lt_status=$lt_dlunknown\n+   cat > conftest.$ac_ext <<_LT_EOF\n+-#line 11813 \"configure\"\n++#line 11817 \"configure\"\n+ #include \"confdefs.h\"\n+ \n+ #if HAVE_DLFCN_H\n+@@ -11916,7 +11920,7 @@ else\n+   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n+   lt_status=$lt_dlunknown\n+   cat > conftest.$ac_ext <<_LT_EOF\n+-#line 11919 \"configure\"\n++#line 11923 \"configure\"\n+ #include \"confdefs.h\"\n+ \n+ #if HAVE_DLFCN_H\n+@@ -15602,7 +15606,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n+   # Fake what AC_TRY_COMPILE does.\n+ \n+     cat > conftest.$ac_ext << EOF\n+-#line 15605 \"configure\"\n++#line 15609 \"configure\"\n+ int main()\n+ {\n+   typedef bool atomic_type;\n+@@ -15637,7 +15641,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n+     rm -f conftest*\n+ \n+     cat > conftest.$ac_ext << EOF\n+-#line 15640 \"configure\"\n++#line 15644 \"configure\"\n+ int main()\n+ {\n+   typedef short atomic_type;\n+@@ -15672,7 +15676,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n+     rm -f conftest*\n+ \n+     cat > conftest.$ac_ext << EOF\n+-#line 15675 \"configure\"\n++#line 15679 \"configure\"\n+ int main()\n+ {\n+   // NB: _Atomic_word not necessarily int.\n+@@ -15708,7 +15712,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n+     rm -f conftest*\n+ \n+     cat > conftest.$ac_ext << EOF\n+-#line 15711 \"configure\"\n++#line 15715 \"configure\"\n+ int main()\n+ {\n+   typedef long long atomic_type;\n+@@ -15785,11 +15789,83 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n+ \n+ \n+ \n++\n++# Check whether --with-libstdcxx-lock-policy was given.\n++if test \"${with_libstdcxx_lock_policy+set}\" = set; then :\n++  withval=$with_libstdcxx_lock_policy; libstdcxx_atomic_lock_policy=$withval\n++else\n++  libstdcxx_atomic_lock_policy=auto\n++fi\n++\n++\n++  case \"$libstdcxx_atomic_lock_policy\" in\n++    atomic|mutex|auto) ;;\n++    *) as_fn_error $? \"Invalid argument for --with-libstdcxx-lock-policy\" \"$LINENO\" 5 ;;\n++  esac\n++  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for lock policy for shared_ptr reference counts\" >&5\n++$as_echo_n \"checking for lock policy for shared_ptr reference counts... \" >&6; }\n++\n++  if test x\"$libstdcxx_atomic_lock_policy\" = x\"auto\"; then\n++\n++    ac_ext=cpp\n++ac_cpp='$CXXCPP $CPPFLAGS'\n++ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n++ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n++ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n++\n++    ac_save_CXXFLAGS=\"$CXXFLAGS\"\n++\n++        cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n++/* end confdefs.h.  */\n++\n++    #if ! defined __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2\n++    # error \"No 2-byte compare-and-swap\"\n++    #elif ! defined __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\n++    # error \"No 4-byte compare-and-swap\"\n++    #endif\n++\n++int\n++main ()\n++{\n++\n++  ;\n++  return 0;\n++}\n++_ACEOF\n++if ac_fn_cxx_try_compile \"$LINENO\"; then :\n++  libstdcxx_atomic_lock_policy=atomic\n++else\n++  libstdcxx_atomic_lock_policy=mutex\n++fi\n++rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n++    ac_ext=c\n++ac_cpp='$CPP $CPPFLAGS'\n++ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n++ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n++ac_compiler_gnu=$ac_cv_c_compiler_gnu\n++\n++    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n++  fi\n++\n++  if test x\"$libstdcxx_atomic_lock_policy\" = x\"atomic\"; then\n++    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: atomic\" >&5\n++$as_echo \"atomic\" >&6; }\n++\n++$as_echo \"#define HAVE_ATOMIC_LOCK_POLICY 1\" >>confdefs.h\n++\n++  else\n++    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: mutex\" >&5\n++$as_echo \"mutex\" >&6; }\n++  fi\n++\n++\n++\n++\n+   # Fake what AC_TRY_COMPILE does, without linking as this is\n+   # unnecessary for this test.\n+ \n+     cat > conftest.$ac_ext << EOF\n+-#line 15792 \"configure\"\n++#line 15796 \"configure\"\n+ int main()\n+ {\n+   _Decimal32 d1;\n+@@ -15831,7 +15907,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+   # unnecessary for this test.\n+ \n+     cat > conftest.$ac_ext << EOF\n+-#line 15834 \"configure\"\n++#line 15838 \"configure\"\n+ template<typename T1, typename T2>\n+   struct same\n+   { typedef T2 type; };\n+@@ -15865,7 +15941,7 @@ $as_echo \"$enable_int128\" >&6; }\n+     rm -f conftest*\n+ \n+     cat > conftest.$ac_ext << EOF\n+-#line 15868 \"configure\"\n++#line 15872 \"configure\"\n+ template<typename T1, typename T2>\n+   struct same\n+   { typedef T2 type; };\n+diff --git a/libstdc++-v3/configure.ac b/libstdc++-v3/configure.ac\n+index 0603ae7b1b8..60114c512f2 100644\n+--- a/libstdc++-v3/configure.ac\n++++ b/libstdc++-v3/configure.ac\n+@@ -152,6 +152,7 @@ GLIBCXX_ENABLE_VERBOSE\n+ GLIBCXX_ENABLE_PCH($is_hosted)\n+ GLIBCXX_ENABLE_THREADS\n+ GLIBCXX_ENABLE_ATOMIC_BUILTINS\n++GLIBCXX_ENABLE_LOCK_POLICY\n+ GLIBCXX_ENABLE_DECIMAL_FLOAT\n+ GLIBCXX_ENABLE_INT128_FLOAT128\n+ if test \"$enable_float128\" = yes; then\n+diff --git a/libstdc++-v3/doc/xml/manual/configure.xml b/libstdc++-v3/doc/xml/manual/configure.xml\n+index ac383cf7fa7..d296c8d8a49 100644\n+--- a/libstdc++-v3/doc/xml/manual/configure.xml\n++++ b/libstdc++-v3/doc/xml/manual/configure.xml\n+@@ -399,6 +399,28 @@\n+    </para>\n+  </listitem></varlistentry>\n+ \n++ <varlistentry><term><code>--with-libstdcxx-lock-policy=OPTION</code></term>\n++ <listitem><para>Sets the lock policy that controls how\n++        <classname>shared_ptr</classname> reference counting is\n++        synchronized.\n++        The choice OPTION=atomic enables use of atomics for updates to\n++        <classname>shared_ptr</classname> reference counts.\n++        The choice OPTION=mutex enables use of a mutex to synchronize updates\n++        to <classname>shared_ptr</classname> reference counts.\n++        If the compiler's thread model is \"single\" then this option has no\n++        effect, as no synchronization is used for the reference counts.\n++\tThe default is OPTION=auto, which checks for the availability of\n++        compiler built-ins for 2-byte and 4-byte atomic compare-and-swap,\n++        and uses OPTION=atomic if they're available, OPTION=mutex otherwise.\n++        This option can change the library ABI.\n++        If the library is configured to use atomics and user programs are\n++        compiled using a target that doesn't natively support the atomic\n++        operations (e.g. the library is configured for armv7 and then code\n++        is compiled with <option>-march=armv5t</option>) then the program\n++        might rely on support in libgcc to provide the atomics.\n++    </para>\n++ </listitem></varlistentry>\n++\n+  <varlistentry><term><code>--enable-vtable-verify</code>[default]</term>\n+  <listitem>\n+     <para>Use <code>-fvtable-verify=std</code> to compile the C++\n+diff --git a/libstdc++-v3/include/bits/fs_dir.h b/libstdc++-v3/include/bits/fs_dir.h\n+index 9ee1cb66b61..2f81a1709e4 100644\n+--- a/libstdc++-v3/include/bits/fs_dir.h\n++++ b/libstdc++-v3/include/bits/fs_dir.h\n+@@ -403,7 +403,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+ \n+     friend class recursive_directory_iterator;\n+ \n+-    std::shared_ptr<_Dir> _M_dir;\n++    std::__shared_ptr<_Dir> _M_dir;\n+   };\n+ \n+   inline directory_iterator\n+@@ -494,7 +494,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+                const recursive_directory_iterator& __rhs);\n+ \n+     struct _Dir_stack;\n+-    std::shared_ptr<_Dir_stack> _M_dirs;\n++    std::__shared_ptr<_Dir_stack> _M_dirs;\n+     directory_options _M_options = {};\n+     bool _M_pending = false;\n+   };\n+@@ -525,6 +525,14 @@ _GLIBCXX_END_NAMESPACE_CXX11\n+   // @} group filesystem\n+ } // namespace filesystem\n+ \n++  // Use explicit instantiations of these types. Any inconsistency in the\n++  // value of __default_lock_policy between code including this header and\n++  // the library will cause a linker error.\n++  extern template class\n++    __shared_ptr<filesystem::_Dir>;\n++  extern template class\n++    __shared_ptr<filesystem::recursive_directory_iterator::_Dir_stack>;\n++\n+ _GLIBCXX_END_NAMESPACE_VERSION\n+ } // namespace std\n+ \n+diff --git a/libstdc++-v3/include/bits/shared_ptr_base.h b/libstdc++-v3/include/bits/shared_ptr_base.h\n+index 29fc45a2143..5f1388a9127 100644\n+--- a/libstdc++-v3/include/bits/shared_ptr_base.h\n++++ b/libstdc++-v3/include/bits/shared_ptr_base.h\n+@@ -1831,7 +1831,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+       mutable __weak_ptr<_Tp, _Lp>  _M_weak_this;\n+     };\n+ \n+-  template<typename _Tp, _Lock_policy _Lp, typename _Alloc, typename... _Args>\n++  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy,\n++\t   typename _Alloc, typename... _Args>\n+     inline __shared_ptr<_Tp, _Lp>\n+     __allocate_shared(const _Alloc& __a, _Args&&... __args)\n+     {\n+@@ -1839,7 +1840,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+ \t\t\t\t    std::forward<_Args>(__args)...);\n+     }\n+ \n+-  template<typename _Tp, _Lock_policy _Lp, typename... _Args>\n++  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy,\n++\t   typename... _Args>\n+     inline __shared_ptr<_Tp, _Lp>\n+     __make_shared(_Args&&... __args)\n+     {\n+diff --git a/libstdc++-v3/include/ext/concurrence.h b/libstdc++-v3/include/ext/concurrence.h\n+index 302cddfa473..33ad9e06c9f 100644\n+--- a/libstdc++-v3/include/ext/concurrence.h\n++++ b/libstdc++-v3/include/ext/concurrence.h\n+@@ -51,16 +51,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+   // Compile time constant that indicates prefered locking policy in\n+   // the current configuration.\n+   static const _Lock_policy __default_lock_policy = \n+-#ifdef __GTHREADS\n+-#if (defined(__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2) \\\n+-     && defined(__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4))\n++#ifndef __GTHREADS\n++  _S_single;\n++#elif defined _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY\n+   _S_atomic;\n+ #else\n+   _S_mutex;\n+ #endif\n+-#else\n+-  _S_single;\n+-#endif\n+ \n+   // NB: As this is used in libsupc++, need to only depend on\n+   // exception. No stdexception classes, no use of std::string.\n+diff --git a/libstdc++-v3/src/filesystem/std-dir.cc b/libstdc++-v3/src/filesystem/std-dir.cc\n+index 805dd2a5ef3..662000f1a39 100644\n+--- a/libstdc++-v3/src/filesystem/std-dir.cc\n++++ b/libstdc++-v3/src/filesystem/std-dir.cc\n+@@ -40,6 +40,9 @@\n+ namespace fs = std::filesystem;\n+ namespace posix = std::filesystem::__gnu_posix;\n+ \n++template class std::__shared_ptr<fs::_Dir>;\n++template class std::__shared_ptr<fs::recursive_directory_iterator::_Dir_stack>;\n++\n+ struct fs::_Dir : _Dir_base\n+ {\n+   _Dir(const fs::path& p, bool skip_permission_denied, error_code& ec)\n+@@ -132,7 +135,7 @@ directory_iterator(const path& p, directory_options options, error_code* ecptr)\n+ \n+   if (dir.dirp)\n+     {\n+-      auto sp = std::make_shared<fs::_Dir>(std::move(dir));\n++      auto sp = std::__make_shared<fs::_Dir>(std::move(dir));\n+       if (sp->advance(skip_permission_denied, ec))\n+ \t_M_dir.swap(sp);\n+     }\n+@@ -192,7 +195,7 @@ recursive_directory_iterator(const path& p, directory_options options,\n+     {\n+       if (ecptr)\n+ \tecptr->clear();\n+-      auto sp = std::make_shared<_Dir_stack>();\n++      auto sp = std::__make_shared<_Dir_stack>();\n+       sp->push(_Dir{ dirp, p });\n+       if (ecptr ? sp->top().advance(*ecptr) : sp->top().advance())\n+ \t_M_dirs.swap(sp);\n+-- \n+2.33.1\n+"
      }
    ]
  },
  {
    "sha": "4e4927509321644f2e16c6032ab06b8cbcd1239b",
    "node_id": "C_kwDOABII59oAKDRlNDkyNzUwOTMyMTY0NGYyZTE2YzYwMzJhYjA2YjhjYmNkMTIzOWI",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-28T08:00:06Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-10-21T07:26:24Z"
      },
      "message": "build: add support for std::filesystem\n\nAdd a macro to check if linking with -lstdc++fs or -lc++fs is required.",
      "tree": {
        "sha": "ca185955803fcc19646c5c18687c6e06c0b266e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca185955803fcc19646c5c18687c6e06c0b266e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e4927509321644f2e16c6032ab06b8cbcd1239b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmFxFiAACgkQLuufXMCV\nJsEV3g/+MQNgttkHm68DTdQPvmQjVOaJ0EcbgqS5Kzq8/mxhOdjsmUOlkmxFfEQZ\nCLWtBdl+XkA03OhdLdSJ0rpsKGeUQvdMPXagtuMu0o2k4V548SG5X5eb3p060/0n\nUHF1I4M6miDMq3t/xeqCrNkCrU8TFdP22dKgwJpmAkD3/J1UxOlleyyYBTtV3UDH\nnImHwt5xKiLbAzTRm25URlnLqQ2P+y2yMW7GfBUlAogU4UZdFvac7VU8XsBNCNbK\nD+pgPaxTblwtWOehK6AVKU4I4ilji2ZKl2Asrv3M4kzMOZggC5bUPjQadBs8PO6M\n8GnEfuXDyiTZ2SmWALw6KP3aBnUzabzWipiEuS0bYhOrgOd9408+wyyZKbSGsQjW\nqHYT2FELBdBTB20J4oWY7GPgLbjmnAzKzbwQpIe+sxzC3VbF919MxQPohTxHB9BQ\nCeQp/siYQfKHO5/2gq5tb3Ew9Paw1dNm8iuwv55PcE/366ikivh3zUfruU4YCWXN\nOmT6fZqhBbBVoCR7K24RhpdUUb4BglgBG9dg9HfoH51xSqovKfukPJGg8haV2/8Y\nAeXzqlfBurE8KSLZfKJnz8b+z0PC1xTo2vsUrO3xLBfq6Rz43DX5CWwatTY0r4WC\ntcb2ghxjmG7lHi0HzI1nVxX+Cw8aUnIgx0eaCtfQGKeMY79AFmw=\n=S4Af\n-----END PGP SIGNATURE-----",
        "payload": "tree ca185955803fcc19646c5c18687c6e06c0b266e4\nparent 9604eda1abe6ffc02c97e3434c3c2c4ce1250794\nauthor fanquake <fanquake@gmail.com> 1624867206 +0800\ncommitter fanquake <fanquake@gmail.com> 1634801184 +0800\n\nbuild: add support for std::filesystem\n\nAdd a macro to check if linking with -lstdc++fs or -lc++fs is required.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e4927509321644f2e16c6032ab06b8cbcd1239b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e4927509321644f2e16c6032ab06b8cbcd1239b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e4927509321644f2e16c6032ab06b8cbcd1239b/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9604eda1abe6ffc02c97e3434c3c2c4ce1250794",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9604eda1abe6ffc02c97e3434c3c2c4ce1250794",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9604eda1abe6ffc02c97e3434c3c2c4ce1250794"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1bbfa21f6a6948a594da2ec030fc1eeed722dce4",
        "filename": "build-aux/m4/l_filesystem.m4",
        "status": "added",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4927509321644f2e16c6032ab06b8cbcd1239b/build-aux/m4/l_filesystem.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4927509321644f2e16c6032ab06b8cbcd1239b/build-aux/m4/l_filesystem.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/l_filesystem.m4?ref=4e4927509321644f2e16c6032ab06b8cbcd1239b",
        "patch": "@@ -0,0 +1,40 @@\n+m4_define([_CHECK_FILESYSTEM_testbody], [[\n+  #include <filesystem>\n+\n+  namespace fs = std::filesystem;\n+\n+  int main() {\n+    (void)fs::current_path().root_name();\n+    return 0;\n+  }\n+]])\n+\n+AC_DEFUN([CHECK_FILESYSTEM], [\n+\n+  AC_LANG_PUSH(C++)\n+\n+  AC_MSG_CHECKING([whether std::filesystem can be used without link library])\n+\n+  AC_LINK_IFELSE([AC_LANG_SOURCE([_CHECK_FILESYSTEM_testbody])],[\n+      AC_MSG_RESULT([yes])\n+    ],[\n+      AC_MSG_RESULT([no])\n+      SAVED_LIBS=\"$LIBS\"\n+      LIBS=\"$SAVED_LIBS -lstdc++fs\"\n+      AC_MSG_CHECKING([whether std::filesystem needs -lstdc++fs])\n+      AC_LINK_IFELSE([AC_LANG_SOURCE([_CHECK_FILESYSTEM_testbody])],[\n+          AC_MSG_RESULT([yes])\n+        ],[\n+          AC_MSG_RESULT([no])\n+          AC_MSG_CHECKING([whether std::filesystem needs -lc++fs])\n+          LIBS=\"$SAVED_LIBS -lc++fs\"\n+          AC_LINK_IFELSE([AC_LANG_SOURCE([_CHECK_FILESYSTEM_testbody])],[\n+            AC_MSG_RESULT([yes])\n+        ],[\n+            AC_MSG_FAILURE([cannot figure out how to use std::filesystem])\n+          ])\n+        ])\n+    ])\n+\n+  AC_LANG_POP\n+])"
      },
      {
        "sha": "7b606e32de05dad4eb8771892fcf7d287f0e2f21",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4927509321644f2e16c6032ab06b8cbcd1239b/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4927509321644f2e16c6032ab06b8cbcd1239b/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=4e4927509321644f2e16c6032ab06b8cbcd1239b",
        "patch": "@@ -83,6 +83,9 @@ AX_CXX_COMPILE_STDCXX([17], [noext], [mandatory])\n dnl Check if -latomic is required for <std::atomic>\n CHECK_ATOMIC\n \n+dnl check if -lstdc++fs is required for std::filesystem\n+CHECK_FILESYSTEM\n+\n dnl Unless the user specified OBJCXX, force it to be the same as CXX. This ensures\n dnl that we get the same -std flags for both.\n m4_ifdef([AC_PROG_OBJCXX],["
      }
    ]
  },
  {
    "sha": "b70c84348ac7a8e427a1183f894c73e52c734529",
    "node_id": "C_kwDOABII59oAKGI3MGM4NDM0OGFjN2E4ZTQyN2ExMTgzZjg5NGM3M2U1MmM3MzQ1Mjk",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2020-06-11T06:58:46Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-10-21T07:26:25Z"
      },
      "message": "refactor: replace boost::filesystem with std::filesystem\n\nWarning: Replacing fs::system_complete calls with fs::absolute calls\nin this commit may cause minor changes in behaviour because fs::absolute\nno longer strips trailing slashes; however these changes are believed to\nbe safe.\n\nCo-authored-by: Russell Yanofsky <russ@yanofsky.org>\nCo-authored-by: Hennadii Stepanov <32963518+hebasto@users.noreply.github.com>",
      "tree": {
        "sha": "52826c930cf133bea4ac32c243c1c4d839442b3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52826c930cf133bea4ac32c243c1c4d839442b3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b70c84348ac7a8e427a1183f894c73e52c734529",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmFxFiEACgkQLuufXMCV\nJsEUOg//Zkkifk4w+rzel9TY7Lx9zrab950AChyvd/nXz7pZgU596lwDBI6PP1A7\n99187317AoUn8kH3JKqVxbVUC5ygiw4bncLP1aYrzeRICSspGo9s0CO1wnDquh3W\nIzfU3QXSceMtRSaFDpF2BkO7zsuf+mbIvUpOh4q0cNJmGKHy2LlExsgNdD1jm10q\nNZXA5QgAwO+Cd9zzSoZTecQOw4X1eLGDvfXhgMB0FJIwOkshxxJtGW14VynhxmjD\nqZSvlX/I3mj5cLyGiYc8HkUUvR4P5y9ejWuO2E2WDp6ux0tllYMBP6TyIiv+SjKT\njUEmaawM5JNRIeKjZI2G2tqgXaf2CA0L8vNa6d8sT2pHhGGQwWQuCZnm1UxItliz\nIlxM1te9yWJPAJh2KRsU86t6jGcItYpX1196JpCtDfNLQXaiozLBV7ZuntoIsLdY\n/luEdJ4xaO8RzTXw8t8Axhb82IhJaNah0ghV/KqJAV/K7pMFz1U1b4urjA42iXeI\nfL84QEFL66YbDEH3MOK/fgrQb+GPKk32CD8FFuukkw/GjuYVzHKXP2pko+0Gl967\nZllNXEQs3yHclLV4NqUqly3Zd31GnkTO+/eYGrh73z6EiKtX44LBtS1kXDObVVBT\nRW8ZT8OC7/cVPC0As4FehpKz3DsVvX2nhT/omNqir1lBUxoKE24=\n=/Mbg\n-----END PGP SIGNATURE-----",
        "payload": "tree 52826c930cf133bea4ac32c243c1c4d839442b3a\nparent 4e4927509321644f2e16c6032ab06b8cbcd1239b\nauthor Kiminuo <kiminuo@protonmail.com> 1591858726 +0200\ncommitter fanquake <fanquake@gmail.com> 1634801185 +0800\n\nrefactor: replace boost::filesystem with std::filesystem\n\nWarning: Replacing fs::system_complete calls with fs::absolute calls\nin this commit may cause minor changes in behaviour because fs::absolute\nno longer strips trailing slashes; however these changes are believed to\nbe safe.\n\nCo-authored-by: Russell Yanofsky <russ@yanofsky.org>\nCo-authored-by: Hennadii Stepanov <32963518+hebasto@users.noreply.github.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b70c84348ac7a8e427a1183f894c73e52c734529",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b70c84348ac7a8e427a1183f894c73e52c734529",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b70c84348ac7a8e427a1183f894c73e52c734529/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e4927509321644f2e16c6032ab06b8cbcd1239b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e4927509321644f2e16c6032ab06b8cbcd1239b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e4927509321644f2e16c6032ab06b8cbcd1239b"
      }
    ],
    "stats": {
      "total": 357,
      "additions": 88,
      "deletions": 269
    },
    "files": [
      {
        "sha": "79ce2d11c93a579eb8358effa4e0f84d3aaf679e",
        "filename": "src/fs.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 115,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -2,6 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <cassert>\n+\n #include <fs.h>\n \n #ifndef WIN32\n@@ -34,7 +36,7 @@ FILE *fopen(const fs::path& p, const char *mode)\n fs::path AbsPathJoin(const fs::path& base, const fs::path& path)\n {\n     assert(base.is_absolute());\n-    return fs::absolute(path, base);\n+    return path.empty() ? base : fs::path(base / path);\n }\n \n #ifndef WIN32\n@@ -150,118 +152,4 @@ std::string get_filesystem_error_message(const fs::filesystem_error& e)\n #endif\n }\n \n-#ifdef WIN32\n-#ifdef __GLIBCXX__\n-\n-// reference: https://github.com/gcc-mirror/gcc/blob/gcc-7_3_0-release/libstdc%2B%2B-v3/include/std/fstream#L270\n-#if defined(__GNUC__) && !defined(__clang__)\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wswitch\"\n-#endif\n-static std::string openmodeToStr(std::ios_base::openmode mode)\n-{\n-    switch (mode & ~std::ios_base::ate) {\n-    case std::ios_base::out:\n-    case std::ios_base::out | std::ios_base::trunc:\n-        return \"w\";\n-    case std::ios_base::out | std::ios_base::app:\n-    case std::ios_base::app:\n-        return \"a\";\n-    case std::ios_base::in:\n-        return \"r\";\n-    case std::ios_base::in | std::ios_base::out:\n-        return \"r+\";\n-    case std::ios_base::in | std::ios_base::out | std::ios_base::trunc:\n-        return \"w+\";\n-    case std::ios_base::in | std::ios_base::out | std::ios_base::app:\n-    case std::ios_base::in | std::ios_base::app:\n-        return \"a+\";\n-    case std::ios_base::out | std::ios_base::binary:\n-    case std::ios_base::out | std::ios_base::trunc | std::ios_base::binary:\n-        return \"wb\";\n-    case std::ios_base::out | std::ios_base::app | std::ios_base::binary:\n-    case std::ios_base::app | std::ios_base::binary:\n-        return \"ab\";\n-    case std::ios_base::in | std::ios_base::binary:\n-        return \"rb\";\n-    case std::ios_base::in | std::ios_base::out | std::ios_base::binary:\n-        return \"r+b\";\n-    case std::ios_base::in | std::ios_base::out | std::ios_base::trunc | std::ios_base::binary:\n-        return \"w+b\";\n-    case std::ios_base::in | std::ios_base::out | std::ios_base::app | std::ios_base::binary:\n-    case std::ios_base::in | std::ios_base::app | std::ios_base::binary:\n-        return \"a+b\";\n-    default:\n-        return std::string();\n-    }\n-}\n-#if defined(__GNUC__) && !defined(__clang__)\n-#pragma GCC diagnostic pop\n-#endif\n-\n-void ifstream::open(const fs::path& p, std::ios_base::openmode mode)\n-{\n-    close();\n-    mode |= std::ios_base::in;\n-    m_file = fsbridge::fopen(p, openmodeToStr(mode).c_str());\n-    if (m_file == nullptr) {\n-        return;\n-    }\n-    m_filebuf = __gnu_cxx::stdio_filebuf<char>(m_file, mode);\n-    rdbuf(&m_filebuf);\n-    if (mode & std::ios_base::ate) {\n-        seekg(0, std::ios_base::end);\n-    }\n-}\n-\n-void ifstream::close()\n-{\n-    if (m_file != nullptr) {\n-        m_filebuf.close();\n-        fclose(m_file);\n-    }\n-    m_file = nullptr;\n-}\n-\n-void ofstream::open(const fs::path& p, std::ios_base::openmode mode)\n-{\n-    close();\n-    mode |= std::ios_base::out;\n-    m_file = fsbridge::fopen(p, openmodeToStr(mode).c_str());\n-    if (m_file == nullptr) {\n-        return;\n-    }\n-    m_filebuf = __gnu_cxx::stdio_filebuf<char>(m_file, mode);\n-    rdbuf(&m_filebuf);\n-    if (mode & std::ios_base::ate) {\n-        seekp(0, std::ios_base::end);\n-    }\n-}\n-\n-void ofstream::close()\n-{\n-    if (m_file != nullptr) {\n-        m_filebuf.close();\n-        fclose(m_file);\n-    }\n-    m_file = nullptr;\n-}\n-#else // __GLIBCXX__\n-\n-#if BOOST_VERSION >= 107700\n-static_assert(sizeof(*BOOST_FILESYSTEM_C_STR(boost::filesystem::path())) == sizeof(wchar_t),\n-#else\n-static_assert(sizeof(*boost::filesystem::path().BOOST_FILESYSTEM_C_STR) == sizeof(wchar_t),\n-#endif // BOOST_VERSION >= 107700\n-    \"Warning: This build is using boost::filesystem ofstream and ifstream \"\n-    \"implementations which will fail to open paths containing multibyte \"\n-    \"characters. You should delete this static_assert to ignore this warning, \"\n-    \"or switch to a different C++ standard library like the Microsoft C++ \"\n-    \"Standard Library (where boost uses non-standard extensions to construct \"\n-    \"stream objects with wide filenames), or the GNU libstdc++ library (where \"\n-    \"a more complicated workaround has been implemented above).\");\n-\n-#endif // __GLIBCXX__\n-#endif // WIN32\n-\n } // fsbridge"
      },
      {
        "sha": "19490d7c00e57b44105762aaa99f39262a3e319f",
        "filename": "src/fs.h",
        "status": "modified",
        "additions": 31,
        "deletions": 90,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/fs.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/fs.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.h?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -5,46 +5,41 @@\n #ifndef BITCOIN_FS_H\n #define BITCOIN_FS_H\n \n-#include <stdio.h>\n-#include <string>\n-#if defined WIN32 && defined __GLIBCXX__\n-#include <ext/stdio_filebuf.h>\n-#endif\n-\n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n #include <tinyformat.h>\n \n+#include <cstdio>\n+#include <filesystem>\n+#include <fstream>\n+#include <iomanip>\n+#include <string>\n+#include <utility>\n+\n /** Filesystem operations and types */\n namespace fs {\n \n-using namespace boost::filesystem;\n+using namespace std::filesystem;\n \n /**\n- * Path class wrapper to prepare application code for transition from\n- * boost::filesystem library to std::filesystem implementation. The main\n- * purpose of the class is to define fs::path::u8string() and fs::u8path()\n- * functions not present in boost. It also blocks calls to the\n- * fs::path(std::string) implicit constructor and the fs::path::string()\n- * method, which worked well in the boost::filesystem implementation, but have\n- * unsafe and unpredictable behavior on Windows in the std::filesystem\n- * implementation (see implementation note in \\ref PathToString for details).\n+ * Path class wrapper to blocks calls to the fs::path(std::string) implicit\n+ * constructor and the fs::path::string() method, which have unsafe and\n+ * unpredictable behavior on Windows(see implementation note in\n+ * \\ref PathToString for details)\n  */\n-class path : public boost::filesystem::path\n+class path : public std::filesystem::path\n {\n public:\n-    using boost::filesystem::path::path;\n+    using std::filesystem::path::path;\n \n     // Allow path objects arguments for compatibility.\n-    path(boost::filesystem::path path) : boost::filesystem::path::path(std::move(path)) {}\n-    path& operator=(boost::filesystem::path path) { boost::filesystem::path::operator=(std::move(path)); return *this; }\n-    path& operator/=(boost::filesystem::path path) { boost::filesystem::path::operator/=(std::move(path)); return *this; }\n+    path(std::filesystem::path path) : std::filesystem::path::path(std::move(path)) {}\n+    path& operator=(std::filesystem::path path) { std::filesystem::path::operator=(std::move(path)); return *this; }\n+    path& operator/=(std::filesystem::path path) { std::filesystem::path::operator/=(std::move(path)); return *this; }\n \n     // Allow literal string arguments, which are safe as long as the literals are ASCII.\n-    path(const char* c) : boost::filesystem::path(c) {}\n-    path& operator=(const char* c) { boost::filesystem::path::operator=(c); return *this; }\n-    path& operator/=(const char* c) { boost::filesystem::path::operator/=(c); return *this; }\n-    path& append(const char* c) { boost::filesystem::path::append(c); return *this; }\n+    path(const char* c) : std::filesystem::path(c) {}\n+    path& operator=(const char* c) { std::filesystem::path::operator=(c); return *this; }\n+    path& operator/=(const char* c) { std::filesystem::path::operator/=(c); return *this; }\n+    path& append(const char* c) { std::filesystem::path::append(c); return *this; }\n \n     // Disallow std::string arguments to avoid locale-dependent decoding on windows.\n     path(std::string) = delete;\n@@ -54,35 +49,26 @@ class path : public boost::filesystem::path\n \n     // Disallow std::string conversion method to avoid locale-dependent encoding on windows.\n     std::string string() const = delete;\n-\n-    // Define UTF-8 string conversion method not present in boost::filesystem but present in std::filesystem.\n-    std::string u8string() const { return boost::filesystem::path::string(); }\n };\n \n-// Define UTF-8 string conversion function not present in boost::filesystem but present in std::filesystem.\n-static inline path u8path(const std::string& string)\n-{\n-    return boost::filesystem::path(string);\n-}\n-\n-// Disallow implicit std::string conversion for system_complete to avoid\n+// Disallow implicit std::string conversion for absolute to avoid\n // locale-dependent encoding on windows.\n-static inline path system_complete(const path& p)\n+static inline path absolute(const path& p)\n {\n-    return boost::filesystem::system_complete(p);\n+    return std::filesystem::absolute(p);\n }\n \n // Disallow implicit std::string conversion for exists to avoid\n // locale-dependent encoding on windows.\n static inline bool exists(const path& p)\n {\n-    return boost::filesystem::exists(p);\n+    return std::filesystem::exists(p);\n }\n \n // Allow explicit quoted stream I/O.\n static inline auto quoted(const std::string& s)\n {\n-    return boost::io::quoted(s, '&');\n+    return std::quoted(s, '\"', '&');\n }\n \n // Allow safe path append operations.\n@@ -123,7 +109,7 @@ static inline std::string PathToString(const path& path)\n     return path.u8string();\n #else\n     static_assert(std::is_same<path::string_type, std::string>::value, \"PathToString not implemented on this platform\");\n-    return path.boost::filesystem::path::string();\n+    return path.std::filesystem::path::string();\n #endif\n }\n \n@@ -135,7 +121,7 @@ static inline path PathFromString(const std::string& string)\n #ifdef WIN32\n     return u8path(string);\n #else\n-    return boost::filesystem::path(string);\n+    return std::filesystem::path(string);\n #endif\n }\n } // namespace fs\n@@ -177,59 +163,14 @@ namespace fsbridge {\n \n     std::string get_filesystem_error_message(const fs::filesystem_error& e);\n \n-    // GNU libstdc++ specific workaround for opening UTF-8 paths on Windows.\n-    //\n-    // On Windows, it is only possible to reliably access multibyte file paths through\n-    // `wchar_t` APIs, not `char` APIs. But because the C++ standard doesn't\n-    // require ifstream/ofstream `wchar_t` constructors, and the GNU library doesn't\n-    // provide them (in contrast to the Microsoft C++ library, see\n-    // https://stackoverflow.com/questions/821873/how-to-open-an-stdfstream-ofstream-or-ifstream-with-a-unicode-filename/822032#822032),\n-    // Boost is forced to fall back to `char` constructors which may not work properly.\n-    //\n-    // Work around this issue by creating stream objects with `_wfopen` in\n-    // combination with `__gnu_cxx::stdio_filebuf`. This workaround can be removed\n-    // with an upgrade to C++17, where streams can be constructed directly from\n-    // `std::filesystem::path` objects.\n-\n-#if defined WIN32 && defined __GLIBCXX__\n-    class ifstream : public std::istream\n-    {\n-    public:\n-        ifstream() = default;\n-        explicit ifstream(const fs::path& p, std::ios_base::openmode mode = std::ios_base::in) { open(p, mode); }\n-        ~ifstream() { close(); }\n-        void open(const fs::path& p, std::ios_base::openmode mode = std::ios_base::in);\n-        bool is_open() { return m_filebuf.is_open(); }\n-        void close();\n-\n-    private:\n-        __gnu_cxx::stdio_filebuf<char> m_filebuf;\n-        FILE* m_file = nullptr;\n-    };\n-    class ofstream : public std::ostream\n-    {\n-    public:\n-        ofstream() = default;\n-        explicit ofstream(const fs::path& p, std::ios_base::openmode mode = std::ios_base::out) { open(p, mode); }\n-        ~ofstream() { close(); }\n-        void open(const fs::path& p, std::ios_base::openmode mode = std::ios_base::out);\n-        bool is_open() { return m_filebuf.is_open(); }\n-        void close();\n-\n-    private:\n-        __gnu_cxx::stdio_filebuf<char> m_filebuf;\n-        FILE* m_file = nullptr;\n-    };\n-#else  // !(WIN32 && __GLIBCXX__)\n-    typedef fs::ifstream ifstream;\n-    typedef fs::ofstream ofstream;\n-#endif // WIN32 && __GLIBCXX__\n+    typedef std::ifstream ifstream;\n+    typedef std::ofstream ofstream;\n };\n \n // Disallow path operator<< formatting in tinyformat to avoid locale-dependent\n // encoding on windows.\n namespace tinyformat {\n-template<> inline void formatValue(std::ostream&, const char*, const char*, int, const boost::filesystem::path&) = delete;\n+template<> inline void formatValue(std::ostream&, const char*, const char*, int, const std::filesystem::path&) = delete;\n template<> inline void formatValue(std::ostream&, const char*, const char*, int, const fs::path&) = delete;\n } // namespace tinyformat\n "
      },
      {
        "sha": "2cbef67ea292d16644c59d1576cc08ad429cea6d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -118,7 +118,7 @@ static fs::path GetPidFile(const ArgsManager& args)\n \n [[nodiscard]] static bool CreatePidFile(const ArgsManager& args)\n {\n-    fsbridge::ofstream file{GetPidFile(args)};\n+    fsbridge::ofstream file{static_cast<std::filesystem::path>(GetPidFile(args))};\n     if (file) {\n #ifdef WIN32\n         tfm::format(file, \"%d\\n\", GetCurrentProcessId());"
      },
      {
        "sha": "35a43b5982f73ac5ab8f0b92a8f24c596d2c230b",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -13,6 +13,7 @@\n \n #include <atomic>\n #include <cstdint>\n+#include <functional>\n #include <list>\n #include <mutex>\n #include <string>"
      },
      {
        "sha": "edc38a00d656925f23cf670e7987f14152eb34fe",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -425,7 +425,7 @@ bool openBitcoinConf()\n     fs::path pathConfig = GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n \n     /* Create the file */\n-    fsbridge::ofstream configFile(pathConfig, std::ios_base::app);\n+    fsbridge::ofstream configFile(static_cast<std::filesystem::path>(pathConfig), std::ios_base::app);\n \n     if (!configFile.good())\n         return false;\n@@ -585,7 +585,7 @@ fs::path static GetAutostartFilePath()\n \n bool GetStartOnSystemStartup()\n {\n-    fsbridge::ifstream optionFile(GetAutostartFilePath());\n+    fsbridge::ifstream optionFile(static_cast<std::filesystem::path>(GetAutostartFilePath()));\n     if (!optionFile.good())\n         return false;\n     // Scan through file for \"Hidden=true\":"
      },
      {
        "sha": "426d10cb39c74ec175f67a2364399f4f6d4e1963",
        "filename": "src/rpc/request.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/rpc/request.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/rpc/request.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -85,7 +85,7 @@ bool GenerateAuthCookie(std::string *cookie_out)\n      */\n     fsbridge::ofstream file;\n     fs::path filepath_tmp = GetAuthCookieFile(true);\n-    file.open(filepath_tmp);\n+    file.open(static_cast<std::filesystem::path>(filepath_tmp));\n     if (!file.is_open()) {\n         LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", fs::PathToString(filepath_tmp));\n         return false;\n@@ -110,7 +110,7 @@ bool GetAuthCookie(std::string *cookie_out)\n     fsbridge::ifstream file;\n     std::string cookie;\n     fs::path filepath = GetAuthCookieFile();\n-    file.open(filepath);\n+    file.open(static_cast<std::filesystem::path>(filepath));\n     if (!file.is_open())\n         return false;\n     std::getline(file, cookie);"
      },
      {
        "sha": "6085df462032b3fc87ff91697ba7754c78f470f7",
        "filename": "src/test/fs_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/test/fs_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/test/fs_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fs_tests.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -45,37 +45,37 @@ BOOST_AUTO_TEST_CASE(fsbridge_fstream)\n     fs::path tmpfile1 = tmpfolder / \"fs_tests_\u20bf_\ud83c\udfc3\";\n     fs::path tmpfile2 = tmpfolder / \"fs_tests_\u20bf_\ud83c\udfc3\";\n     {\n-        fsbridge::ofstream file(tmpfile1);\n+        fsbridge::ofstream file{static_cast<std::filesystem::path>(tmpfile1)};\n         file << \"bitcoin\";\n     }\n     {\n-        fsbridge::ifstream file(tmpfile2);\n+        fsbridge::ifstream file{static_cast<std::filesystem::path>(tmpfile2)};\n         std::string input_buffer;\n         file >> input_buffer;\n         BOOST_CHECK_EQUAL(input_buffer, \"bitcoin\");\n     }\n     {\n-        fsbridge::ifstream file(tmpfile1, std::ios_base::in | std::ios_base::ate);\n+        fsbridge::ifstream file{static_cast<std::filesystem::path>(tmpfile1), std::ios_base::in | std::ios_base::ate};\n         std::string input_buffer;\n         file >> input_buffer;\n         BOOST_CHECK_EQUAL(input_buffer, \"\");\n     }\n     {\n-        fsbridge::ofstream file(tmpfile2, std::ios_base::out | std::ios_base::app);\n+        fsbridge::ofstream file{static_cast<std::filesystem::path>(tmpfile2), std::ios_base::out | std::ios_base::app};\n         file << \"tests\";\n     }\n     {\n-        fsbridge::ifstream file(tmpfile1);\n+        fsbridge::ifstream file{static_cast<std::filesystem::path>(tmpfile1)};\n         std::string input_buffer;\n         file >> input_buffer;\n         BOOST_CHECK_EQUAL(input_buffer, \"bitcointests\");\n     }\n     {\n-        fsbridge::ofstream file(tmpfile2, std::ios_base::out | std::ios_base::trunc);\n+        fsbridge::ofstream file{static_cast<std::filesystem::path>(tmpfile2), std::ios_base::out | std::ios_base::trunc};\n         file << \"bitcoin\";\n     }\n     {\n-        fsbridge::ifstream file(tmpfile1);\n+        fsbridge::ifstream file{static_cast<std::filesystem::path>(tmpfile1)};\n         std::string input_buffer;\n         file >> input_buffer;\n         BOOST_CHECK_EQUAL(input_buffer, \"bitcoin\");"
      },
      {
        "sha": "da8fed3a4bbde016599814248453137a559f3052",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -1726,7 +1726,7 @@ BOOST_AUTO_TEST_CASE(script_assets_test)\n     bool exists = fs::exists(path);\n     BOOST_WARN_MESSAGE(exists, \"File $DIR_UNIT_TEST_DATA/script_assets_test.json not found, skipping script_assets_test\");\n     if (!exists) return;\n-    fs::ifstream file(path);\n+    std::ifstream file(path);\n     BOOST_CHECK(file.is_open());\n     file.seekg(0, std::ios::end);\n     size_t length = file.tellg();"
      },
      {
        "sha": "b8f1b13899895ed802b7d86fbe70731d511d66d6",
        "filename": "src/test/settings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/test/settings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/test/settings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/settings_tests.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -37,7 +37,7 @@ inline std::ostream& operator<<(std::ostream& os, const std::pair<std::string, u\n inline void WriteText(const fs::path& path, const std::string& text)\n {\n     fsbridge::ofstream file;\n-    file.open(path);\n+    file.open(static_cast<std::filesystem::path>(path));\n     file << text;\n }\n "
      },
      {
        "sha": "3408bc8b55a0d932b8f9b624785945a6885cd909",
        "filename": "src/util/settings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/util/settings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/util/settings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -64,7 +64,7 @@ bool ReadSettings(const fs::path& path, std::map<std::string, SettingsValue>& va\n     if (!fs::exists(path)) return true;\n \n     fsbridge::ifstream file;\n-    file.open(path);\n+    file.open(static_cast<std::filesystem::path>(path));\n     if (!file.is_open()) {\n       errors.emplace_back(strprintf(\"%s. Please check permissions.\", fs::PathToString(path)));\n       return false;\n@@ -107,7 +107,7 @@ bool WriteSettings(const fs::path& path,\n         out.__pushKV(value.first, value.second);\n     }\n     fsbridge::ofstream file;\n-    file.open(path);\n+    file.open(static_cast<std::filesystem::path>(path));\n     if (file.fail()) {\n         errors.emplace_back(strprintf(\"Error: Unable to open settings file %s for writing\", fs::PathToString(path)));\n         return false;"
      },
      {
        "sha": "03af96dc3cf796b1fa5c06fc48f0f2e918f67c93",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 17,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -21,6 +21,7 @@\n #include <util/strencodings.h>\n #include <util/string.h>\n #include <util/translation.h>\n+#include <random.h>\n \n \n #if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n@@ -242,7 +243,7 @@ namespace {\n fs::path StripRedundantLastElementsOfPath(const fs::path& path)\n {\n     auto result = path;\n-    while (fs::PathToString(result.filename()) == \".\") {\n+    while (result.filename().empty() || fs::PathToString(result.filename()) == \".\") {\n         result = result.parent_path();\n     }\n \n@@ -402,7 +403,7 @@ const fs::path& ArgsManager::GetBlocksDirPath() const\n     if (!path.empty()) return path;\n \n     if (IsArgSet(\"-blocksdir\")) {\n-        path = fs::system_complete(fs::PathFromString(GetArg(\"-blocksdir\", \"\")));\n+        path = fs::absolute(fs::PathFromString(GetArg(\"-blocksdir\", \"\")));\n         if (!fs::is_directory(path)) {\n             path = \"\";\n             return path;\n@@ -414,7 +415,6 @@ const fs::path& ArgsManager::GetBlocksDirPath() const\n     path /= fs::PathFromString(BaseParams().DataDir());\n     path /= \"blocks\";\n     fs::create_directories(path);\n-    path = StripRedundantLastElementsOfPath(path);\n     return path;\n }\n \n@@ -429,7 +429,7 @@ const fs::path& ArgsManager::GetDataDir(bool net_specific) const\n \n     std::string datadir = GetArg(\"-datadir\", \"\");\n     if (!datadir.empty()) {\n-        path = fs::system_complete(fs::PathFromString(datadir));\n+        path = fs::absolute(fs::PathFromString(datadir));\n         if (!fs::is_directory(path)) {\n             path = \"\";\n             return path;\n@@ -809,7 +809,7 @@ fs::path GetDefaultDataDir()\n bool CheckDataDirOption()\n {\n     std::string datadir = gArgs.GetArg(\"-datadir\", \"\");\n-    return datadir.empty() || fs::is_directory(fs::system_complete(fs::PathFromString(datadir)));\n+    return datadir.empty() || fs::is_directory(fs::absolute(fs::PathFromString(datadir)));\n }\n \n fs::path GetConfigFile(const std::string& confPath)\n@@ -900,7 +900,7 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n     }\n \n     const std::string confPath = GetArg(\"-conf\", BITCOIN_CONF_FILENAME);\n-    fsbridge::ifstream stream(GetConfigFile(confPath));\n+    fsbridge::ifstream stream{static_cast<std::filesystem::path>(GetConfigFile(confPath))};\n \n     // not ok to have a config file specified that cannot be opened\n     if (IsArgSet(\"-conf\") && !stream.good()) {\n@@ -947,7 +947,7 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n             const size_t default_includes = add_includes({});\n \n             for (const std::string& conf_file_name : conf_file_names) {\n-                fsbridge::ifstream conf_file_stream(GetConfigFile(conf_file_name));\n+                fsbridge::ifstream conf_file_stream{static_cast<std::filesystem::path>(GetConfigFile(conf_file_name))};\n                 if (conf_file_stream.good()) {\n                     if (!ReadConfigStream(conf_file_stream, conf_file_name, error, ignore_invalid_keys)) {\n                         return false;\n@@ -1314,16 +1314,6 @@ void SetupEnvironment()\n     // Set the default input/output charset is utf-8\n     SetConsoleCP(CP_UTF8);\n     SetConsoleOutputCP(CP_UTF8);\n-#endif\n-    // The path locale is lazy initialized and to avoid deinitialization errors\n-    // in multithreading environments, it is set explicitly by the main thread.\n-    // A dummy locale is used to extract the internal default locale, used by\n-    // fs::path, which is then used to explicitly imbue the path.\n-    std::locale loc = fs::path::imbue(std::locale::classic());\n-#ifndef WIN32\n-    fs::path::imbue(loc);\n-#else\n-    fs::path::imbue(std::locale(loc, new std::codecvt_utf8_utf16<wchar_t>()));\n #endif\n }\n "
      },
      {
        "sha": "731da7e32849bcdf78e3d492720952f46f5ba18f",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -619,12 +619,12 @@ bool BerkeleyDatabase::Backup(const std::string& strDest) const\n                     pathDest /= fs::PathFromString(strFile);\n \n                 try {\n-                    if (fs::equivalent(pathSrc, pathDest)) {\n+                    if (fs::exists(pathDest) && fs::equivalent(pathSrc, pathDest)) {\n                         LogPrintf(\"cannot backup to wallet source file %s\\n\", fs::PathToString(pathDest));\n                         return false;\n                     }\n \n-                    fs::copy_file(pathSrc, pathDest, fs::copy_option::overwrite_if_exists);\n+                    fs::copy_file(pathSrc, pathDest, fs::copy_options::overwrite_existing);\n                     LogPrintf(\"copied %s to %s\\n\", strFile, fs::PathToString(pathDest));\n                     return true;\n                 } catch (const fs::filesystem_error& e) {"
      },
      {
        "sha": "b1d999b4cb1d16d4c45977d269cdef2a76c2b050",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -12,14 +12,13 @@\n \n std::vector<fs::path> ListDatabases(const fs::path& wallet_dir)\n {\n-    const size_t offset = wallet_dir.native().size() + (wallet_dir == wallet_dir.root_name() ? 0 : 1);\n     std::vector<fs::path> paths;\n-    boost::system::error_code ec;\n+    std::error_code ec;\n \n     for (auto it = fs::recursive_directory_iterator(wallet_dir, ec); it != fs::recursive_directory_iterator(); it.increment(ec)) {\n         if (ec) {\n             if (fs::is_directory(*it)) {\n-                it.no_push();\n+                it.disable_recursion_pending();\n                 LogPrintf(\"%s: %s %s -- skipping.\\n\", __func__, ec.message(), fs::PathToString(it->path()));\n             } else {\n                 LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), fs::PathToString(it->path()));\n@@ -29,15 +28,13 @@ std::vector<fs::path> ListDatabases(const fs::path& wallet_dir)\n \n         try {\n             // Get wallet path relative to walletdir by removing walletdir from the wallet path.\n-            // This can be replaced by boost::filesystem::lexically_relative once boost is bumped to 1.60.\n-            const auto path_str = it->path().native().substr(offset);\n-            const fs::path path{path_str.begin(), path_str.end()};\n+            const fs::path path = it->path().lexically_relative(wallet_dir);\n \n-            if (it->status().type() == fs::directory_file &&\n+            if (it->status().type() == fs::file_type::directory &&\n                 (IsBDBFile(BDBDataFile(it->path())) || IsSQLiteFile(SQLiteDataFile(it->path())))) {\n                 // Found a directory which contains wallet.dat btree file, add it as a wallet.\n                 paths.emplace_back(path);\n-            } else if (it.level() == 0 && it->symlink_status().type() == fs::regular_file && IsBDBFile(it->path())) {\n+            } else if (it.depth() == 0 && it->symlink_status().type() == fs::file_type::regular && IsBDBFile(it->path())) {\n                 if (it->path().filename() == \"wallet.dat\") {\n                     // Found top-level wallet.dat btree file, add top level directory \"\"\n                     // as a wallet.\n@@ -52,7 +49,7 @@ std::vector<fs::path> ListDatabases(const fs::path& wallet_dir)\n             }\n         } catch (const std::exception& e) {\n             LogPrintf(\"%s: Error scanning %s: %s\\n\", __func__, fs::PathToString(it->path()), e.what());\n-            it.no_push();\n+            it.disable_recursion_pending();\n         }\n     }\n \n@@ -84,12 +81,12 @@ bool IsBDBFile(const fs::path& path)\n \n     // A Berkeley DB Btree file has at least 4K.\n     // This check also prevents opening lock files.\n-    boost::system::error_code ec;\n+    std::error_code ec;\n     auto size = fs::file_size(path, ec);\n     if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), fs::PathToString(path));\n     if (size < 4096) return false;\n \n-    fsbridge::ifstream file(path, std::ios::binary);\n+    fsbridge::ifstream file(static_cast<std::filesystem::path>(path), std::ios::binary);\n     if (!file.is_open()) return false;\n \n     file.seekg(12, std::ios::beg); // Magic bytes start at offset 12\n@@ -108,12 +105,12 @@ bool IsSQLiteFile(const fs::path& path)\n     if (!fs::exists(path)) return false;\n \n     // A SQLite Database file is at least 512 bytes.\n-    boost::system::error_code ec;\n+    std::error_code ec;\n     auto size = fs::file_size(path, ec);\n     if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), fs::PathToString(path));\n     if (size < 512) return false;\n \n-    fsbridge::ifstream file(path, std::ios::binary);\n+    fsbridge::ifstream file(static_cast<std::filesystem::path>(path), std::ios::binary);\n     if (!file.is_open()) return false;\n \n     // Magic is at beginning and is 16 bytes long"
      },
      {
        "sha": "ae180876467f9eb7fcf2a6fee44b7d31337d5cab",
        "filename": "src/wallet/dump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/dump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/dump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/dump.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -26,7 +26,7 @@ bool DumpWallet(CWallet& wallet, bilingual_str& error)\n         return false;\n     }\n     fsbridge::ofstream dump_file;\n-    dump_file.open(path);\n+    dump_file.open(static_cast<std::filesystem::path>(path));\n     if (dump_file.fail()) {\n         error = strprintf(_(\"Unable to open %s for writing\"), fs::PathToString(path));\n         return false;\n@@ -120,7 +120,7 @@ bool CreateFromDump(const std::string& name, const fs::path& wallet_path, biling\n         error = strprintf(_(\"Dump file %s does not exist.\"), fs::PathToString(dump_path));\n         return false;\n     }\n-    fsbridge::ifstream dump_file(dump_path);\n+    fsbridge::ifstream dump_file{static_cast<std::filesystem::path>(dump_path)};\n \n     // Compute the checksum\n     CHashWriter hasher(0, 0);"
      },
      {
        "sha": "a92aad2aa401b6b6c9bd46c78d700c99000fa25b",
        "filename": "src/wallet/dump.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/dump.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/dump.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/dump.h?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_WALLET_DUMP_H\n #define BITCOIN_WALLET_DUMP_H\n \n+#include <vector>\n+\n #include <fs.h>\n \n class CWallet;"
      },
      {
        "sha": "ad52c7191a291469658655cc676c4a8b938675b5",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -26,7 +26,7 @@ bool VerifyWallets(WalletContext& context)\n \n     if (args.IsArgSet(\"-walletdir\")) {\n         fs::path wallet_dir = fs::PathFromString(args.GetArg(\"-walletdir\", \"\"));\n-        boost::system::error_code error;\n+        std::error_code error;\n         // The canonical path cleans the path, preventing >1 Berkeley environment instances for the same directory\n         fs::path canonical_wallet_dir = fs::canonical(wallet_dir, error);\n         if (error || !fs::exists(wallet_dir)) {"
      },
      {
        "sha": "c5ae321b75eb91ce86f1bd6184afe2bb077d2680",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -5,6 +5,7 @@\n #include <chain.h>\n #include <clientversion.h>\n #include <core_io.h>\n+#include <fs.h>\n #include <interfaces/chain.h>\n #include <key_io.h>\n #include <merkleblock.h>\n@@ -758,7 +759,7 @@ RPCHelpMan dumpwallet()\n     }\n \n     fsbridge::ofstream file;\n-    file.open(filepath);\n+    file.open(static_cast<std::filesystem::path>(filepath));\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n "
      },
      {
        "sha": "1589812f2cf02991ecd074eeb48698a9f62bb649",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -2903,7 +2903,7 @@ static RPCHelpMan restorewallet()\n \n     auto wallet_file = wallet_path / \"wallet.dat\";\n \n-    fs::copy_file(backup_file, wallet_file, fs::copy_option::fail_if_exists);\n+    fs::copy_file(backup_file, wallet_file);\n \n     auto [wallet, warnings] = LoadWalletHelper(context, request.params[2], wallet_name);\n "
      },
      {
        "sha": "c73340c537f927f37a9bdd515d5aa74f5a0e6c7c",
        "filename": "src/wallet/test/db_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/test/db_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/test/db_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/db_tests.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -25,7 +25,7 @@ BOOST_AUTO_TEST_CASE(getwalletenv_file)\n     std::string test_name = \"test_name.dat\";\n     const fs::path datadir = gArgs.GetDataDirNet();\n     fs::path file_path = datadir / test_name;\n-    fs::ofstream f(file_path);\n+    std::ofstream f(static_cast<std::filesystem::path>(file_path));\n     f.close();\n \n     std::string filename;"
      },
      {
        "sha": "209dea2eb777ebd2ea971a3e6f46a4f57951ae5d",
        "filename": "src/wallet/test/init_test_fixture.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/test/init_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/test/init_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -23,16 +23,16 @@ InitWalletDirTestingSetup::InitWalletDirTestingSetup(const std::string& chainNam\n     m_walletdir_path_cases[\"custom\"] = m_datadir / \"my_wallets\";\n     m_walletdir_path_cases[\"nonexistent\"] = m_datadir / \"path_does_not_exist\";\n     m_walletdir_path_cases[\"file\"] = m_datadir / \"not_a_directory.dat\";\n-    m_walletdir_path_cases[\"trailing\"] = m_datadir / \"wallets\" / sep;\n-    m_walletdir_path_cases[\"trailing2\"] = m_datadir / \"wallets\" / sep / sep;\n+    m_walletdir_path_cases[\"trailing\"] = m_datadir / (\"wallets\" + sep);\n+    m_walletdir_path_cases[\"trailing2\"] = m_datadir / (\"wallets\" + sep + sep);\n \n     fs::current_path(m_datadir);\n     m_walletdir_path_cases[\"relative\"] = \"wallets\";\n \n     fs::create_directories(m_walletdir_path_cases[\"default\"]);\n     fs::create_directories(m_walletdir_path_cases[\"custom\"]);\n     fs::create_directories(m_walletdir_path_cases[\"relative\"]);\n-    fs::ofstream f(m_walletdir_path_cases[\"file\"]);\n+    std::ofstream f(static_cast<std::filesystem::path>(m_walletdir_path_cases[\"file\"]));\n     f.close();\n }\n "
      },
      {
        "sha": "4c01b42654a1be61f6939255d65bc9cf23e8975e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -2517,9 +2517,9 @@ std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, cons\n     // 4. For backwards compatibility, the name of a data file in -walletdir.\n     const fs::path wallet_path = fsbridge::AbsPathJoin(GetWalletDir(), fs::PathFromString(name));\n     fs::file_type path_type = fs::symlink_status(wallet_path).type();\n-    if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n-          (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n-          (path_type == fs::regular_file && fs::PathFromString(name).filename() == fs::PathFromString(name)))) {\n+    if (!(path_type == fs::file_type::not_found || path_type == fs::file_type::directory ||\n+          (path_type == fs::file_type::symlink && fs::is_directory(wallet_path)) ||\n+          (path_type == fs::file_type::regular && fs::PathFromString(name).filename() == fs::PathFromString(name)))) {\n         error_string = Untranslated(strprintf(\n               \"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n               \"database/log.?????????? files can be stored, a location where such a directory could be created, \""
      },
      {
        "sha": "37522b7646a3c88e23a786097793da50d32a12b6",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -1104,7 +1104,7 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n {\n     bool exists;\n     try {\n-        exists = fs::symlink_status(path).type() != fs::file_not_found;\n+        exists = fs::symlink_status(path).type() != fs::file_type::not_found;\n     } catch (const fs::filesystem_error& e) {\n         error = Untranslated(strprintf(\"Failed to access database path '%s': %s\", fs::PathToString(path), fsbridge::get_filesystem_error_message(e)));\n         status = DatabaseStatus::FAILED_BAD_PATH;"
      },
      {
        "sha": "4b8a08de56aee48119df8d147cf19e9ce2ef508a",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -11,6 +11,7 @@\n import os\n import shutil\n import stat\n+import sys\n import time\n \n from test_framework.authproxy import JSONRPCException\n@@ -141,7 +142,7 @@ def wallet_file(name):\n \n         # should raise rpc error if wallet path can't be created\n         err_code = -4 if self.options.descriptors else -1\n-        assert_raises_rpc_error(err_code, \"boost::filesystem::create_directory:\", self.nodes[0].createwallet, \"w8/bad\")\n+        assert_raises_rpc_error(err_code, \"filesystem error:\" if sys.platform != 'win32' else \"create_directories:\", self.nodes[0].createwallet, \"w8/bad\")\n \n         # check that all requested wallets were created\n         self.stop_node(0)"
      },
      {
        "sha": "06025c6539639c9aed2d52a4ece6c70656f5d8ad",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -54,8 +54,6 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/algorithm/string/replace.hpp\n     boost/algorithm/string/split.hpp\n     boost/date_time/posix_time/posix_time.hpp\n-    boost/filesystem.hpp\n-    boost/filesystem/fstream.hpp\n     boost/multi_index/hashed_index.hpp\n     boost/multi_index/ordered_index.hpp\n     boost/multi_index/sequenced_index.hpp"
      }
    ]
  },
  {
    "sha": "d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
    "node_id": "C_kwDOABII59oAKGQ3ZGExN2JjOWQ5MDQ4Yjc3ZmVhMGNkYWYyNDk4MWZhOWQ3OTMwZTc",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2020-06-11T08:04:33Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-10-21T07:26:25Z"
      },
      "message": "build: remove boost::filesystem usage",
      "tree": {
        "sha": "9764d3e573d2beb81b4f9b76e2dd24a5c1ed8748",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9764d3e573d2beb81b4f9b76e2dd24a5c1ed8748"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmFxFiEACgkQLuufXMCV\nJsGVCxAAttMPkpeP82/L6aHbiAPpghtkaEAk17mgZLfsPk/JAO0iDV9I6Ctwmwgj\n6LwmvEfEe0fehR2yoN/PPQ5rG4u2wtaWXrb1Fz9uC6OlnSxVxAdPY5wFV2xbHXv4\nEUG8HV1mIcfSpv8aONLoMtJGFsgCgrWbUoJOfro6wDA++nhMnwIo21YnUbDFtl4S\n/oV1+q8kXAeMr6jFb2YhDhniyiTDdT/q9WZ7nEs57qrw387Oy/FhsTJPZDgjPhsu\ndBC+K+HHLj3a0ffN5NUOBlNqyclGIwRy6r4zPKQRsfZoFH2/8+IwGQCtR8jjcI2A\n5VkzCWTQAQDmnrny6OhGfiskcDlMikzOalSsNt/ooq2k6IjiuQ7WM7zNhRvlcvGZ\nnlGj0naMFtdqFOX0KnZq4kyawCZavweceqbPELMWnaLHTDLY3rF22bLy2RVUkOTa\nIcDt6/luGQUcIBj2E4sg9ngX7Kvl/WltxpueBbtGvCRqApOaQolktOkSGtjCK8rx\nub0bqbIyH13PZ9bQ+KPLFNt4uwgXjbT7WzCMcSvuGjQx+meHHhBV+xFt6Tng3kys\nCE54e+69AEN2C57J6w7pP8YDVwt6Cdn4HugTC0sRKMcSSn/YKXx6Cnp71YqcT9XU\nL3+JlD8bS7M2fBBWgO1kw7g/I59TZZzw5d7fRYtw0+sFJlOTHGE=\n=BbX8\n-----END PGP SIGNATURE-----",
        "payload": "tree 9764d3e573d2beb81b4f9b76e2dd24a5c1ed8748\nparent b70c84348ac7a8e427a1183f894c73e52c734529\nauthor Kiminuo <kiminuo@protonmail.com> 1591862673 +0200\ncommitter fanquake <fanquake@gmail.com> 1634801185 +0800\n\nbuild: remove boost::filesystem usage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b70c84348ac7a8e427a1183f894c73e52c734529",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b70c84348ac7a8e427a1183f894c73e52c734529",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b70c84348ac7a8e427a1183f894c73e52c734529"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 7,
      "deletions": 151
    },
    "files": [
      {
        "sha": "12f7bc5e2ebc18f70537f3d271802e107bfacdad",
        "filename": "build-aux/m4/ax_boost_filesystem.m4",
        "status": "removed",
        "additions": 0,
        "deletions": 118,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70c84348ac7a8e427a1183f894c73e52c734529/build-aux/m4/ax_boost_filesystem.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70c84348ac7a8e427a1183f894c73e52c734529/build-aux/m4/ax_boost_filesystem.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_filesystem.m4?ref=b70c84348ac7a8e427a1183f894c73e52c734529",
        "patch": "@@ -1,118 +0,0 @@\n-# ===========================================================================\n-#   https://www.gnu.org/software/autoconf-archive/ax_boost_filesystem.html\n-# ===========================================================================\n-#\n-# SYNOPSIS\n-#\n-#   AX_BOOST_FILESYSTEM\n-#\n-# DESCRIPTION\n-#\n-#   Test for Filesystem library from the Boost C++ libraries. The macro\n-#   requires a preceding call to AX_BOOST_BASE. Further documentation is\n-#   available at <http://randspringer.de/boost/index.html>.\n-#\n-#   This macro calls:\n-#\n-#     AC_SUBST(BOOST_FILESYSTEM_LIB)\n-#\n-#   And sets:\n-#\n-#     HAVE_BOOST_FILESYSTEM\n-#\n-# LICENSE\n-#\n-#   Copyright (c) 2009 Thomas Porschberg <thomas@randspringer.de>\n-#   Copyright (c) 2009 Michael Tindal\n-#   Copyright (c) 2009 Roman Rybalko <libtorrent@romanr.info>\n-#\n-#   Copying and distribution of this file, with or without modification, are\n-#   permitted in any medium without royalty provided the copyright notice\n-#   and this notice are preserved. This file is offered as-is, without any\n-#   warranty.\n-\n-#serial 28\n-\n-AC_DEFUN([AX_BOOST_FILESYSTEM],\n-[\n-\tAC_ARG_WITH([boost-filesystem],\n-\tAS_HELP_STRING([--with-boost-filesystem@<:@=special-lib@:>@],\n-                   [use the Filesystem library from boost - it is possible to specify a certain library for the linker\n-                        e.g. --with-boost-filesystem=boost_filesystem-gcc-mt ]),\n-        [\n-        if test \"$withval\" = \"no\"; then\n-\t\t\twant_boost=\"no\"\n-        elif test \"$withval\" = \"yes\"; then\n-            want_boost=\"yes\"\n-            ax_boost_user_filesystem_lib=\"\"\n-        else\n-\t\t    want_boost=\"yes\"\n-\t\tax_boost_user_filesystem_lib=\"$withval\"\n-\t\tfi\n-        ],\n-        [want_boost=\"yes\"]\n-\t)\n-\n-\tif test \"x$want_boost\" = \"xyes\"; then\n-        AC_REQUIRE([AC_PROG_CC])\n-\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n-\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-\t\texport CPPFLAGS\n-\n-\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n-\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n-\t\texport LDFLAGS\n-\n-\t\tLIBS_SAVED=$LIBS\n-\t\tLIBS=\"$LIBS $BOOST_SYSTEM_LIB\"\n-\t\texport LIBS\n-\n-        AC_CACHE_CHECK(whether the Boost::Filesystem library is available,\n-\t\t\t\t\t   ax_cv_boost_filesystem,\n-        [AC_LANG_PUSH([C++])\n-         AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/filesystem/path.hpp>]],\n-                                   [[using namespace boost::filesystem;\n-                                   path my_path( \"foo/bar/data.txt\" );\n-                                   return 0;]])],\n-\t\t\t\t\t       ax_cv_boost_filesystem=yes, ax_cv_boost_filesystem=no)\n-         AC_LANG_POP([C++])\n-\t\t])\n-\t\tif test \"x$ax_cv_boost_filesystem\" = \"xyes\"; then\n-\t\t\tAC_DEFINE(HAVE_BOOST_FILESYSTEM,,[define if the Boost::Filesystem library is available])\n-            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n-            if test \"x$ax_boost_user_filesystem_lib\" = \"x\"; then\n-                for libextension in `ls -r $BOOSTLIBDIR/libboost_filesystem* 2>/dev/null | sed 's,.*/lib,,' | sed 's,\\..*,,'` ; do\n-                     ax_lib=${libextension}\n-\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n-                                 [BOOST_FILESYSTEM_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_FILESYSTEM_LIB) link_filesystem=\"yes\"; break],\n-                                 [link_filesystem=\"no\"])\n-\t\t\t\tdone\n-                if test \"x$link_filesystem\" != \"xyes\"; then\n-                for libextension in `ls -r $BOOSTLIBDIR/boost_filesystem* 2>/dev/null | sed 's,.*/,,' | sed -e 's,\\..*,,'` ; do\n-                     ax_lib=${libextension}\n-\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n-                                 [BOOST_FILESYSTEM_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_FILESYSTEM_LIB) link_filesystem=\"yes\"; break],\n-                                 [link_filesystem=\"no\"])\n-\t\t\t\tdone\n-\t\t    fi\n-            else\n-               for ax_lib in $ax_boost_user_filesystem_lib boost_filesystem-$ax_boost_user_filesystem_lib; do\n-\t\t\t\t      AC_CHECK_LIB($ax_lib, exit,\n-                                   [BOOST_FILESYSTEM_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_FILESYSTEM_LIB) link_filesystem=\"yes\"; break],\n-                                   [link_filesystem=\"no\"])\n-                  done\n-\n-            fi\n-            if test \"x$ax_lib\" = \"x\"; then\n-                AC_MSG_ERROR(Could not find a version of the Boost::Filesystem library!)\n-            fi\n-\t\t\tif test \"x$link_filesystem\" != \"xyes\"; then\n-\t\t\t\tAC_MSG_ERROR(Could not link against $ax_lib !)\n-\t\t\tfi\n-\t\tfi\n-\n-\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n-\t\tLDFLAGS=\"$LDFLAGS_SAVED\"\n-\t\tLIBS=\"$LIBS_SAVED\"\n-\tfi\n-])"
      },
      {
        "sha": "e6195b5e20fb77612116c376f21e510caaa412b2",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
        "patch": "@@ -44,9 +44,6 @@\n /* define if the Boost library is available */\n #define HAVE_BOOST /**/\n \n-/* define if the Boost::Filesystem library is available */\n-#define HAVE_BOOST_FILESYSTEM /**/\n-\n /* define if external signer support is enabled (requires Boost::Process) */\n #define ENABLE_EXTERNAL_SIGNER /**/\n "
      },
      {
        "sha": "d8753ec21f4bfd95682e4f50be1c74e60b9456cf",
        "filename": "build_msvc/vcpkg.json",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/build_msvc/vcpkg.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/build_msvc/vcpkg.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/vcpkg.json?ref=d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
        "patch": "@@ -3,7 +3,6 @@\n   \"version-string\": \"1\",\n   \"dependencies\": [\n     \"berkeleydb\",\n-    \"boost-filesystem\",\n     \"boost-multi-index\",\n     \"boost-process\",\n     \"boost-signals2\","
      },
      {
        "sha": "fdef30d703287cfecdccfa4eaa57068890e3a70f",
        "filename": "ci/test/00_setup_env_native_asan.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/ci/test/00_setup_env_native_asan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/ci/test/00_setup_env_native_asan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_asan.sh?ref=d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
        "patch": "@@ -7,7 +7,7 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_asan\n-export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libqrencode-dev libsqlite3-dev\"\n+export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-test-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libqrencode-dev libsqlite3-dev\"\n export DOCKER_NAME_TAG=ubuntu:hirsute\n export NO_DEPENDS=1\n export GOAL=\"install\""
      },
      {
        "sha": "f14782f3ae4c9969c4c0a10cf4f193b8ff2d40b5",
        "filename": "ci/test/00_setup_env_native_fuzz.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/ci/test/00_setup_env_native_fuzz.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/ci/test/00_setup_env_native_fuzz.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz.sh?ref=d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
        "patch": "@@ -8,7 +8,7 @@ export LC_ALL=C.UTF-8\n \n export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n export CONTAINER_NAME=ci_native_fuzz\n-export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev\"\n+export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-test-dev\"\n export NO_DEPENDS=1\n export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false"
      },
      {
        "sha": "97cfcae1aa4283c96bc93ecabd2f3c152bc6ae0b",
        "filename": "ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz_with_valgrind.sh?ref=d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
        "patch": "@@ -8,7 +8,7 @@ export LC_ALL=C.UTF-8\n \n export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n export CONTAINER_NAME=ci_native_fuzz_valgrind\n-export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev valgrind\"\n+export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-test-dev valgrind\"\n export NO_DEPENDS=1\n export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false"
      },
      {
        "sha": "a030182eedfae1e53b1ddd50082720822719b013",
        "filename": "ci/test/00_setup_env_native_valgrind.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/ci/test/00_setup_env_native_valgrind.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/ci/test/00_setup_env_native_valgrind.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_valgrind.sh?ref=d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
        "patch": "@@ -8,7 +8,7 @@ export LC_ALL=C.UTF-8\n \n export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n export CONTAINER_NAME=ci_native_valgrind\n-export PACKAGES=\"valgrind clang llvm python3-zmq libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libsqlite3-dev\"\n+export PACKAGES=\"valgrind clang llvm python3-zmq libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-test-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libsqlite3-dev\"\n export USE_VALGRIND=1\n export NO_DEPENDS=1\n export TEST_RUNNER_EXTRA=\"--exclude rpc_bind,feature_bind_extra\"  # Excluded for now, see https://github.com/bitcoin/bitcoin/issues/17765#issuecomment-602068547"
      },
      {
        "sha": "3b1a9108d0bf4b6a40c2cefedc208a0a09913059",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
        "patch": "@@ -1389,13 +1389,12 @@ if test x$use_boost = xyes; then\n     AC_MSG_ERROR([[only libbitcoinconsensus can be built without boost]])\n   fi\n   AX_BOOST_SYSTEM\n-  AX_BOOST_FILESYSTEM\n \n   if test x$suppress_external_warnings != xno; then\n     BOOST_CPPFLAGS=SUPPRESS_WARNINGS($BOOST_CPPFLAGS)\n   fi\n \n-  BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB\"\n+  BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB\"\n fi\n \n if test \"x$use_external_signer\" != xno; then"
      },
      {
        "sha": "35f3d792ffd70bcdb6ba4b59be2e301aa8ee0a9d",
        "filename": "contrib/valgrind.supp",
        "status": "modified",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/contrib/valgrind.supp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/contrib/valgrind.supp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/valgrind.supp?ref=d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
        "patch": "@@ -118,12 +118,6 @@\n    fun:__wcsnlen_sse4_1\n    fun:wcsnrtombs\n }\n-{\n-   Suppress wcsnrtombs warning (remove after removing boost::fs)\n-   Memcheck:Cond\n-   ...\n-   fun:_ZN5boost10filesystem6detail11unique_pathERKNS0_4pathEPNS_6system10error_codeE\n-}\n {\n    Suppress boost warning\n    Memcheck:Leak\n@@ -134,21 +128,6 @@\n    fun:_ZN5boost9unit_test14unit_test_mainEPFbvEiPPc\n    fun:main\n }\n-{\n-   Suppress boost::filesystem warning (fixed in boost 1.70: https://github.com/boostorg/filesystem/commit/bbe9d1771e5d679b3f10c42a58fc81f7e8c024a9)\n-   Memcheck:Cond\n-   fun:_ZN5boost10filesystem6detail28directory_iterator_incrementERNS0_18directory_iteratorEPNS_6system10error_codeE\n-   ...\n-   obj:*/libboost_filesystem.so.*\n-}\n-{\n-   Suppress boost::filesystem warning (could be related: https://stackoverflow.com/questions/9830182/function-boostfilesystemcomplete-being-reported-as-possible-memory-leak-by-v)\n-   Memcheck:Leak\n-   match-leak-kinds: reachable\n-   fun:_Znwm\n-   ...\n-   fun:_ZN5boost10filesystem8absoluteERKNS0_4pathES3_\n-}\n {\n    Suppress boost still reachable memory warning\n    Memcheck:Leak"
      },
      {
        "sha": "40774855979c69816325e6d2426066dd0127c10f",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
        "patch": "@@ -22,7 +22,7 @@ $(package)_toolset_$(host_os)=clang\n else\n $(package)_toolset_$(host_os)=gcc\n endif\n-$(package)_config_libraries=filesystem,system,test\n+$(package)_config_libraries=system,test\n $(package)_cxxflags+=-std=c++17 -fvisibility=hidden\n $(package)_cxxflags_linux=-fPIC\n $(package)_cxxflags_android=-fPIC"
      },
      {
        "sha": "308e439a122ec3d2f58cf259bfd12e1dcd176e96",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
        "patch": "@@ -83,7 +83,7 @@ Build requirements:\n \n Now, you can either build from self-compiled [depends](/depends/README.md) or install the required dependencies:\n \n-    sudo apt-get install libevent-dev libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev\n+    sudo apt-get install libevent-dev libboost-dev libboost-system-dev libboost-test-dev\n \n Berkeley DB is required for the wallet.\n "
      }
    ]
  },
  {
    "sha": "f53be20eade794e55470473f03a8d05d57691c87",
    "node_id": "C_kwDOABII59oAKGY1M2JlMjBlYWRlNzk0ZTU1NDcwNDczZjAzYThkMDVkNTc2OTFjODc",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-12-22T03:55:04Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-10-21T07:26:25Z"
      },
      "message": "build: remove Boost::system usage",
      "tree": {
        "sha": "eade1d2fa06812e1b922b71dd9fc054714ac3297",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eade1d2fa06812e1b922b71dd9fc054714ac3297"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f53be20eade794e55470473f03a8d05d57691c87",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmFxFiEACgkQLuufXMCV\nJsE1Rg/+LookAI4v5rAimjpOK/Zvt4Bq97QmSiKufVsdJ1y3BbsX9hWr0JFv/6T/\ndlfz56ILpgVOSR1SaRFhqPajhOkKkcgMyFxGgKpo27AKXaqqcXmmgwEe1rbwtWIm\nq7o2vrYbAtl+H53NvMGfObtd4vaiZVpFI5Wz6L0wwWioYUAP4T5Qzep92Tggi7Xb\nu4xbqKrVkRY2MNwM43vRtalaFMvHORNNZtfHVPMr/YP5TS42zztyzg6q02jzqAat\nGDha/8OcZM8W90IjX4u0fKJoW0c6j3PyX68A64SdF2TdwjC3E//t4DmuILqD8e0q\neUTVlrFhWlNkL74AdOHAlinUg6h0zx2xW5nnhI5Ub5+4wjCO28qIT1sH2YChug+s\nh6whQ77HeGq9Z7VwAltLEdcXDgBW2+qQ3+S22qMA+ZHBMihWPO1PNLueIBXLwmk9\n7+I4jSJ1T+VtgDv+j0OAgau2xizjhzuyBWrc7sRodMPbfJ41psU2r+pD95lJeak/\nxN3RZA47u06ZiXZvp7veoLWDvy+Qwoaq4IYWL3r9ysh0i5xRVK2K4Yzg3KBqj/5Y\nqFSUeIfwXDaS2EgiWxg5mwD73dAy8NR/VwXvdpgNu3tpIGIS75gj7LT4Z3/+870A\nsaVfzbMQnK8x+CxFM+wfkFM/NDK0ELTFVXYLoMsENIdgdSzYYFE=\n=U8kN\n-----END PGP SIGNATURE-----",
        "payload": "tree eade1d2fa06812e1b922b71dd9fc054714ac3297\nparent d7da17bc9d9048b77fea0cdaf24981fa9d7930e7\nauthor fanquake <fanquake@gmail.com> 1608609304 +0800\ncommitter fanquake <fanquake@gmail.com> 1634801185 +0800\n\nbuild: remove Boost::system usage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f53be20eade794e55470473f03a8d05d57691c87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f53be20eade794e55470473f03a8d05d57691c87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f53be20eade794e55470473f03a8d05d57691c87/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 7,
      "deletions": 132
    },
    "files": [
      {
        "sha": "323e2a676a8e0428008dd4563416ce141e278f33",
        "filename": "build-aux/m4/ax_boost_system.m4",
        "status": "removed",
        "additions": 0,
        "deletions": 121,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/build-aux/m4/ax_boost_system.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7da17bc9d9048b77fea0cdaf24981fa9d7930e7/build-aux/m4/ax_boost_system.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_system.m4?ref=d7da17bc9d9048b77fea0cdaf24981fa9d7930e7",
        "patch": "@@ -1,121 +0,0 @@\n-# ===========================================================================\n-#     https://www.gnu.org/software/autoconf-archive/ax_boost_system.html\n-# ===========================================================================\n-#\n-# SYNOPSIS\n-#\n-#   AX_BOOST_SYSTEM\n-#\n-# DESCRIPTION\n-#\n-#   Test for System library from the Boost C++ libraries. The macro requires\n-#   a preceding call to AX_BOOST_BASE. Further documentation is available at\n-#   <http://randspringer.de/boost/index.html>.\n-#\n-#   This macro calls:\n-#\n-#     AC_SUBST(BOOST_SYSTEM_LIB)\n-#\n-#   And sets:\n-#\n-#     HAVE_BOOST_SYSTEM\n-#\n-# LICENSE\n-#\n-#   Copyright (c) 2008 Thomas Porschberg <thomas@randspringer.de>\n-#   Copyright (c) 2008 Michael Tindal\n-#   Copyright (c) 2008 Daniel Casimiro <dan.casimiro@gmail.com>\n-#\n-#   Copying and distribution of this file, with or without modification, are\n-#   permitted in any medium without royalty provided the copyright notice\n-#   and this notice are preserved. This file is offered as-is, without any\n-#   warranty.\n-\n-#serial 20\n-\n-AC_DEFUN([AX_BOOST_SYSTEM],\n-[\n-\tAC_ARG_WITH([boost-system],\n-\tAS_HELP_STRING([--with-boost-system@<:@=special-lib@:>@],\n-                   [use the System library from boost - it is possible to specify a certain library for the linker\n-                        e.g. --with-boost-system=boost_system-gcc-mt ]),\n-        [\n-        if test \"$withval\" = \"no\"; then\n-\t\t\twant_boost=\"no\"\n-        elif test \"$withval\" = \"yes\"; then\n-            want_boost=\"yes\"\n-            ax_boost_user_system_lib=\"\"\n-        else\n-\t\t    want_boost=\"yes\"\n-\t\tax_boost_user_system_lib=\"$withval\"\n-\t\tfi\n-        ],\n-        [want_boost=\"yes\"]\n-\t)\n-\n-\tif test \"x$want_boost\" = \"xyes\"; then\n-        AC_REQUIRE([AC_PROG_CC])\n-        AC_REQUIRE([AC_CANONICAL_BUILD])\n-\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n-\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-\t\texport CPPFLAGS\n-\n-\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n-\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n-\t\texport LDFLAGS\n-\n-        AC_CACHE_CHECK(whether the Boost::System library is available,\n-\t\t\t\t\t   ax_cv_boost_system,\n-        [AC_LANG_PUSH([C++])\n-\t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n-\t\t\t CXXFLAGS=\n-\n-\t\t\t AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/system/error_code.hpp>]],\n-\t\t\t\t    [[boost::system::error_category *a = 0;]])],\n-                   ax_cv_boost_system=yes, ax_cv_boost_system=no)\n-\t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n-             AC_LANG_POP([C++])\n-\t\t])\n-\t\tif test \"x$ax_cv_boost_system\" = \"xyes\"; then\n-\t\t\tAC_SUBST(BOOST_CPPFLAGS)\n-\n-\t\t\tAC_DEFINE(HAVE_BOOST_SYSTEM,,[define if the Boost::System library is available])\n-            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n-\n-\t\t\tLDFLAGS_SAVE=$LDFLAGS\n-            if test \"x$ax_boost_user_system_lib\" = \"x\"; then\n-                for libextension in `ls -r $BOOSTLIBDIR/libboost_system* 2>/dev/null | sed 's,.*/lib,,' | sed 's,\\..*,,'` ; do\n-                     ax_lib=${libextension}\n-\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n-                                 [BOOST_SYSTEM_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_SYSTEM_LIB) link_system=\"yes\"; break],\n-                                 [link_system=\"no\"])\n-\t\t\t\tdone\n-                if test \"x$link_system\" != \"xyes\"; then\n-                for libextension in `ls -r $BOOSTLIBDIR/boost_system* 2>/dev/null | sed 's,.*/,,' | sed -e 's,\\..*,,'` ; do\n-                     ax_lib=${libextension}\n-\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n-                                 [BOOST_SYSTEM_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_SYSTEM_LIB) link_system=\"yes\"; break],\n-                                 [link_system=\"no\"])\n-\t\t\t\tdone\n-                fi\n-\n-            else\n-               for ax_lib in $ax_boost_user_system_lib boost_system-$ax_boost_user_system_lib; do\n-\t\t\t\t      AC_CHECK_LIB($ax_lib, exit,\n-                                   [BOOST_SYSTEM_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_SYSTEM_LIB) link_system=\"yes\"; break],\n-                                   [link_system=\"no\"])\n-                  done\n-\n-            fi\n-            if test \"x$ax_lib\" = \"x\"; then\n-                AC_MSG_ERROR(Could not find a version of the Boost::System library!)\n-            fi\n-\t\t\tif test \"x$link_system\" = \"xno\"; then\n-\t\t\t\tAC_MSG_ERROR(Could not link against $ax_lib !)\n-\t\t\tfi\n-\t\tfi\n-\n-\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n-\tLDFLAGS=\"$LDFLAGS_SAVED\"\n-\tfi\n-])"
      },
      {
        "sha": "4b9b7a05d187bf54d6cb3c043fbb3c02fdf42886",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f53be20eade794e55470473f03a8d05d57691c87/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f53be20eade794e55470473f03a8d05d57691c87/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=f53be20eade794e55470473f03a8d05d57691c87",
        "patch": "@@ -47,9 +47,6 @@\n /* define if external signer support is enabled (requires Boost::Process) */\n #define ENABLE_EXTERNAL_SIGNER /**/\n \n-/* define if the Boost::System library is available */\n-#define HAVE_BOOST_SYSTEM /**/\n-\n /* define if the Boost::Unit_Test_Framework library is available */\n #define HAVE_BOOST_UNIT_TEST_FRAMEWORK /**/\n "
      },
      {
        "sha": "0a9355f2d66800ca180d63ed62882cf5cb8cf3f7",
        "filename": "ci/test/00_setup_env_native_asan.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f53be20eade794e55470473f03a8d05d57691c87/ci/test/00_setup_env_native_asan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f53be20eade794e55470473f03a8d05d57691c87/ci/test/00_setup_env_native_asan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_asan.sh?ref=f53be20eade794e55470473f03a8d05d57691c87",
        "patch": "@@ -7,7 +7,7 @@\n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_asan\n-export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-test-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libqrencode-dev libsqlite3-dev\"\n+export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-dev libboost-test-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libqrencode-dev libsqlite3-dev\"\n export DOCKER_NAME_TAG=ubuntu:hirsute\n export NO_DEPENDS=1\n export GOAL=\"install\""
      },
      {
        "sha": "7b73563c151736ab5549561f2bef9375fbcc8819",
        "filename": "ci/test/00_setup_env_native_fuzz.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f53be20eade794e55470473f03a8d05d57691c87/ci/test/00_setup_env_native_fuzz.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f53be20eade794e55470473f03a8d05d57691c87/ci/test/00_setup_env_native_fuzz.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz.sh?ref=f53be20eade794e55470473f03a8d05d57691c87",
        "patch": "@@ -8,7 +8,7 @@ export LC_ALL=C.UTF-8\n \n export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n export CONTAINER_NAME=ci_native_fuzz\n-export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-test-dev\"\n+export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-dev libboost-test-dev\"\n export NO_DEPENDS=1\n export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false"
      },
      {
        "sha": "df1147eeb73293d6d84a71aac663b3c6321573aa",
        "filename": "ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f53be20eade794e55470473f03a8d05d57691c87/ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f53be20eade794e55470473f03a8d05d57691c87/ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz_with_valgrind.sh?ref=f53be20eade794e55470473f03a8d05d57691c87",
        "patch": "@@ -8,7 +8,7 @@ export LC_ALL=C.UTF-8\n \n export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n export CONTAINER_NAME=ci_native_fuzz_valgrind\n-export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-test-dev valgrind\"\n+export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-dev libboost-test-dev valgrind\"\n export NO_DEPENDS=1\n export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false"
      },
      {
        "sha": "8bbd89973254eca65aeb9ebf8ef1f6703b5491c0",
        "filename": "ci/test/00_setup_env_native_valgrind.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f53be20eade794e55470473f03a8d05d57691c87/ci/test/00_setup_env_native_valgrind.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f53be20eade794e55470473f03a8d05d57691c87/ci/test/00_setup_env_native_valgrind.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_valgrind.sh?ref=f53be20eade794e55470473f03a8d05d57691c87",
        "patch": "@@ -8,7 +8,7 @@ export LC_ALL=C.UTF-8\n \n export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n export CONTAINER_NAME=ci_native_valgrind\n-export PACKAGES=\"valgrind clang llvm python3-zmq libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-test-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libsqlite3-dev\"\n+export PACKAGES=\"valgrind clang llvm python3-zmq libevent-dev bsdmainutils libboost-dev libboost-test-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libsqlite3-dev\"\n export USE_VALGRIND=1\n export NO_DEPENDS=1\n export TEST_RUNNER_EXTRA=\"--exclude rpc_bind,feature_bind_extra\"  # Excluded for now, see https://github.com/bitcoin/bitcoin/issues/17765#issuecomment-602068547"
      },
      {
        "sha": "a575d6a36aba45d7e1f80b8fc3908083f62a1684",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f53be20eade794e55470473f03a8d05d57691c87/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f53be20eade794e55470473f03a8d05d57691c87/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=f53be20eade794e55470473f03a8d05d57691c87",
        "patch": "@@ -1388,13 +1388,12 @@ if test x$use_boost = xyes; then\n   if test x$want_boost = xno; then\n     AC_MSG_ERROR([[only libbitcoinconsensus can be built without boost]])\n   fi\n-  AX_BOOST_SYSTEM\n \n   if test x$suppress_external_warnings != xno; then\n     BOOST_CPPFLAGS=SUPPRESS_WARNINGS($BOOST_CPPFLAGS)\n   fi\n \n-  BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB\"\n+  BOOST_LIBS=\"$BOOST_LDFLAGS\"\n fi\n \n if test \"x$use_external_signer\" != xno; then"
      },
      {
        "sha": "1db97a8a02bc04e0fa80ed933da4cc870fe1e7c3",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f53be20eade794e55470473f03a8d05d57691c87/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f53be20eade794e55470473f03a8d05d57691c87/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=f53be20eade794e55470473f03a8d05d57691c87",
        "patch": "@@ -22,7 +22,7 @@ $(package)_toolset_$(host_os)=clang\n else\n $(package)_toolset_$(host_os)=gcc\n endif\n-$(package)_config_libraries=system,test\n+$(package)_config_libraries=test\n $(package)_cxxflags+=-std=c++17 -fvisibility=hidden\n $(package)_cxxflags_linux=-fPIC\n $(package)_cxxflags_android=-fPIC"
      },
      {
        "sha": "6fb0216ab4e92d1652885a8da327fbb9299e5aeb",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f53be20eade794e55470473f03a8d05d57691c87/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f53be20eade794e55470473f03a8d05d57691c87/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=f53be20eade794e55470473f03a8d05d57691c87",
        "patch": "@@ -83,7 +83,7 @@ Build requirements:\n \n Now, you can either build from self-compiled [depends](/depends/README.md) or install the required dependencies:\n \n-    sudo apt-get install libevent-dev libboost-dev libboost-system-dev libboost-test-dev\n+    sudo apt-get install libevent-dev libboost-dev libboost-test-dev\n \n Berkeley DB is required for the wallet.\n "
      }
    ]
  }
]