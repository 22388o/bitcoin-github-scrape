[
  {
    "sha": "ec81881b86b9680fcdcc42fd3ba31f04b8d09714",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzgxODgxYjg2Yjk2ODBmY2RjYzQyZmQzYmEzMWYwNGI4ZDA5NzE0",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2016-09-07T22:24:40Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2016-09-08T00:10:50Z"
      },
      "message": "Performance Regression Fix: Pre-Allocate txChanged vector",
      "tree": {
        "sha": "ac2a8e9a6f65c74ba43fb7b6e4f26ef74d572c8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac2a8e9a6f65c74ba43fb7b6e4f26ef74d572c8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec81881b86b9680fcdcc42fd3ba31f04b8d09714",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec81881b86b9680fcdcc42fd3ba31f04b8d09714",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec81881b86b9680fcdcc42fd3ba31f04b8d09714",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec81881b86b9680fcdcc42fd3ba31f04b8d09714/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec139a5621a9c9f03e1988391a3c7c6c5d849776",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec139a5621a9c9f03e1988391a3c7c6c5d849776",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec139a5621a9c9f03e1988391a3c7c6c5d849776"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "932e0653bc51d8bc0c206055c1eb64615bce5839",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec81881b86b9680fcdcc42fd3ba31f04b8d09714/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec81881b86b9680fcdcc42fd3ba31f04b8d09714/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ec81881b86b9680fcdcc42fd3ba31f04b8d09714",
        "patch": "@@ -2793,7 +2793,7 @@ static int64_t nTimePostConnect = 0;\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  */\n-bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock, std::list<CTransaction> &txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int> > &txChanged)\n+bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock, std::list<CTransaction> &txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int>> &txChanged)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n@@ -2835,7 +2835,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     UpdateTip(pindexNew, chainparams);\n \n     for(unsigned int i=0; i < pblock->vtx.size(); i++)\n-        txChanged.push_back(std::make_tuple(pblock->vtx[i], pindexNew, i));\n+        txChanged.emplace_back(pblock->vtx[i], pindexNew, i);\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(\"bench\", \"  - Connect postprocess: %.2fms [%.2fs]\\n\", (nTime6 - nTime5) * 0.001, nTimePostConnect * 0.000001);\n@@ -2917,7 +2917,7 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock, bool& fInvalidFound, std::list<CTransaction>& txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int> >& txChanged)\n+static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock, bool& fInvalidFound, std::list<CTransaction>& txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int>>& txChanged)\n {\n     AssertLockHeld(cs_main);\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -3019,14 +3019,17 @@ static void NotifyHeaderTip() {\n bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, const CBlock *pblock) {\n     CBlockIndex *pindexMostWork = NULL;\n     CBlockIndex *pindexNewTip = NULL;\n+    std::vector<std::tuple<CTransaction,CBlockIndex*,int>> txChanged;\n+    if (pblock)\n+        txChanged.reserve(pblock->vtx.size());\n     do {\n+        txChanged.clear();\n         boost::this_thread::interruption_point();\n         if (ShutdownRequested())\n             break;\n \n         const CBlockIndex *pindexFork;\n         std::list<CTransaction> txConflicted;\n-        std::vector<std::tuple<CTransaction,CBlockIndex*,int> > txChanged;\n         bool fInitialDownload;\n         int nNewHeight;\n         {"
      }
    ]
  }
]