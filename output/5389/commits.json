[
  {
    "sha": "3b33f7e2740f6cac81e5af8739e07656ccf52147",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjMzZjdlMjc0MGY2Y2FjODFlNWFmODczOWUwNzY1NmNjZjUyMTQ3",
    "commit": {
      "author": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-11-22T19:48:30Z"
      },
      "committer": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-11-28T13:09:14Z"
      },
      "message": "[Wallet] Wallet-pruning",
      "tree": {
        "sha": "9dd79d5e54bfba0b16b1d368d2ad3c3162ebd5b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9dd79d5e54bfba0b16b1d368d2ad3c3162ebd5b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b33f7e2740f6cac81e5af8739e07656ccf52147",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b33f7e2740f6cac81e5af8739e07656ccf52147",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b33f7e2740f6cac81e5af8739e07656ccf52147",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b33f7e2740f6cac81e5af8739e07656ccf52147/comments",
    "author": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2adce1f71600881f69ba44a4d847ade5d7066f7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2adce1f71600881f69ba44a4d847ade5d7066f7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2adce1f71600881f69ba44a4d847ade5d7066f7e"
      }
    ],
    "stats": {
      "total": 278,
      "additions": 265,
      "deletions": 13
    },
    "files": [
      {
        "sha": "845b552256947742adb7614a32126f6d11cc4b51",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3b33f7e2740f6cac81e5af8739e07656ccf52147",
        "patch": "@@ -121,6 +121,7 @@ BITCOIN_CORE_H = \\\n   script/script_error.h \\\n   serialize.h \\\n   streams.h \\\n+  stxo.h \\\n   sync.h \\\n   threadsafety.h \\\n   timedata.h \\\n@@ -194,6 +195,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   crypter.cpp \\\n   rpcdump.cpp \\\n   rpcwallet.cpp \\\n+  stxo.cpp \\\n   wallet.cpp \\\n   wallet_ismine.cpp \\\n   walletdb.cpp \\"
      },
      {
        "sha": "36771697082c934a2a094db3cf76eed4f0538182",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=3b33f7e2740f6cac81e5af8739e07656ccf52147",
        "patch": "@@ -306,6 +306,11 @@ void CDB::Close()\n     }\n }\n \n+void CDB::Compact()\n+{\n+    pdb->compact(NULL, NULL, NULL, NULL, DB_FREE_SPACE, NULL);\n+}\n+\n void CDBEnv::CloseDb(const string& strFile)\n {\n     {"
      },
      {
        "sha": "ad71a9c862f9a2b921f936b0abfb12ec9238461f",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=3b33f7e2740f6cac81e5af8739e07656ccf52147",
        "patch": "@@ -106,6 +106,7 @@ class CDB\n public:\n     void Flush();\n     void Close();\n+    void Compact();\n \n private:\n     CDB(const CDB&);"
      },
      {
        "sha": "a1d01cf6fcb08be8ded72525cd6bee5b4ef50bd3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3b33f7e2740f6cac81e5af8739e07656ccf52147",
        "patch": "@@ -283,6 +283,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (GetBoolArg(\"-help-debug\", false))\n         strUsage += \"  -mintxfee=<amt>        \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\"), FormatMoney(CWallet::minTxFee.GetFeePerK())) + \"\\n\";\n     strUsage += \"  -paytxfee=<amt>        \" + strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())) + \"\\n\";\n+    strUsage += \"  -prunewallet=<n>       \" + _(\"Erase transactions older than <n> days and without unspent outputs on startup. Useful to shrink and speed up large wallets. 0 means do not prune. (default: 0)\") + \"\\n\";\n     strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\") + \"\\n\";\n     strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\") + \"\\n\";\n     strUsage += \"  -sendfreetransactions  \" + strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0) + \"\\n\";\n@@ -310,7 +311,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -debug=<category>      \" + strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \"\\n\";\n     strUsage += \"                         \" + _(\"If <category> is not supplied, output all debugging information.\") + \"\\n\";\n     strUsage += \"                         \" + _(\"<category> can be:\");\n-    strUsage +=                                 \" addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net\"; // Don't translate these and qt below\n+    strUsage +=                                 \" addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net, wallet\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         strUsage += \", qt\";\n     strUsage += \".\\n\";\n@@ -700,6 +701,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", 1);\n     bSpendZeroConfChange = GetArg(\"-spendzeroconfchange\", true);\n     fSendFreeTransactions = GetArg(\"-sendfreetransactions\", false);\n+    nPruneWallet = GetArg(\"-prunewallet\", 0);\n \n     std::string strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif // ENABLE_WALLET\n@@ -1136,6 +1138,12 @@ bool AppInit2(boost::thread_group& threadGroup)\n             pwalletMain->SetBestChain(chainActive.GetLocator());\n         }\n \n+        if (pwalletMain->PruneWallet(nPruneWallet) == -1)\n+        {\n+            nPruneWallet = 0;\n+            strErrors << _(\"Error: Sorry, but wallet pruning is not supported if you are using the account-feature.\") << \"\\n\";\n+        }\n+\n         LogPrintf(\"%s\", strErrors.str());\n         LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n "
      },
      {
        "sha": "ec4647ec73349f7a7a8603acee096bad7b6d2e63",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=3b33f7e2740f6cac81e5af8739e07656ccf52147",
        "patch": "@@ -54,6 +54,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listaccounts\", 0 },\n     { \"listaccounts\", 1 },\n     { \"walletpassphrase\", 1 },\n+    { \"prunewallet\", 0 },\n     { \"getblocktemplate\", 0 },\n     { \"listsinceblock\", 1 },\n     { \"listsinceblock\", 2 },"
      },
      {
        "sha": "809d51dbc1a428fa592660d62f018c233d60a997",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=3b33f7e2740f6cac81e5af8739e07656ccf52147",
        "patch": "@@ -332,6 +332,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"wallet\",             \"listunspent\",            &listunspent,            false,     false,      true },\n     { \"wallet\",             \"lockunspent\",            &lockunspent,            true,      false,      true },\n     { \"wallet\",             \"move\",                   &movecmd,                false,     false,      true },\n+    { \"wallet\",             \"prunewallet\",            &prunewallet,            false,     false,      true },\n     { \"wallet\",             \"sendfrom\",               &sendfrom,               false,     false,      true },\n     { \"wallet\",             \"sendmany\",               &sendmany,               false,     false,      true },\n     { \"wallet\",             \"sendtoaddress\",          &sendtoaddress,          false,     false,      true },"
      },
      {
        "sha": "76007ad76e6711bb526b2759af40af4593f83fe1",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=3b33f7e2740f6cac81e5af8739e07656ccf52147",
        "patch": "@@ -188,6 +188,7 @@ extern json_spirit::Value listaccounts(const json_spirit::Array& params, bool fH\n extern json_spirit::Value listsinceblock(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value gettransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value backupwallet(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value prunewallet(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value keypoolrefill(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value walletpassphrase(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value walletpassphrasechange(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "ca1e21888e44ae05b4cb68427d691c12f1346ab9",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=3b33f7e2740f6cac81e5af8739e07656ccf52147",
        "patch": "@@ -735,6 +735,8 @@ Value movecmd(const Array& params, bool fHelp)\n     if (!walletdb.TxnCommit())\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n \n+    pwalletMain->fUsingAccounts = true;\n+\n     return true;\n }\n \n@@ -796,6 +798,8 @@ Value sendfrom(const Array& params, bool fHelp)\n     if (strError != \"\")\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n \n+    pwalletMain->fUsingAccounts = true;\n+\n     return wtx.GetHash().GetHex();\n }\n \n@@ -1582,6 +1586,37 @@ Value backupwallet(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n+Value prunewallet(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"prunewallet ( n )\\n\"\n+            \"\\nErase transactions older than <n> days and without unspent outputs from the wallet. Useful to shrink and speed up large wallets.\\n\"\n+            \"Only transactions which are safe to prune are erased regarding the wallet balance and block reorganizations.\\n\"\n+            \"\\nNote: A rescan would add the pruned transactions again. To prevent this add prunewallet=<n> to your bitcoin.conf\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. n   (numeric, optional, default=1) Transactions older than this in days will be erased. So a value of 7 keeps all txs from last week.\\n\"\n+            \"\\nResult:\\n\"\n+            \"txspruned    (numeric) Number of pruned transactions.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"prunewallet\", \"1\")\n+            + HelpExampleRpc(\"prunewallet\", \"1\")\n+        );\n+\n+    int days = 1;\n+    if (params.size() > 0)\n+        days = params[0].get_int();\n+    if (days < 1)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Parameter n must be >= 1\");\n+\n+    int64_t nPruned = pwalletMain->PruneWallet(days);\n+\n+    if (nPruned == -1)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Sorry, but wallet pruning is not supported if you are using the account-feature.\");\n+\n+    return nPruned;\n+}\n+\n \n Value keypoolrefill(const Array& params, bool fHelp)\n {"
      },
      {
        "sha": "e4eec5b2fe505d0b85740ff763ec012e5a717da0",
        "filename": "src/stxo.cpp",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/stxo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/stxo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/stxo.cpp?ref=3b33f7e2740f6cac81e5af8739e07656ccf52147",
        "patch": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"stxo.h\"\n+#include \"main.h\"\n+\n+CSTXO::CSTXO(CBlockIndex* pIndexBest, unsigned int nNumberOfBlocks)\n+{\n+    unsigned int i = 0;\n+    CBlockIndex* pindex = pIndexBest;\n+    while (pindex && pindex->pprev)\n+    {\n+        CBlock block;\n+        ReadBlockFromDisk(block, pindex);\n+        BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        {\n+            if (!tx.IsCoinBase())\n+            {\n+                BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+                    setSpentCoins.insert(txin.prevout);\n+            }\n+        }\n+\n+        pindex = pindex->pprev;\n+        if (++i == nNumberOfBlocks)\n+            break;\n+    }\n+}"
      },
      {
        "sha": "53ba7d5cde73f255ab76fd8148034a8cabf0e188",
        "filename": "src/stxo.h",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/stxo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/stxo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/stxo.h?ref=3b33f7e2740f6cac81e5af8739e07656ccf52147",
        "patch": "@@ -0,0 +1,26 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_STXO_H\n+#define BITCOIN_STXO_H\n+\n+#include <set>\n+\n+class CBlockIndex;\n+class COutPoint;\n+\n+class CSTXO\n+{\n+private:\n+    std::set<COutPoint> setSpentCoins; // spent transaction outputs\n+public:\n+\n+    CSTXO(CBlockIndex* pIndexBest, unsigned int nNumberOfBlocks);\n+\n+    bool IsRecentlySpent(const COutPoint& outpoint) const {\n+        return (setSpentCoins.count(outpoint) == 1);\n+    }\n+};\n+\n+#endif // BITCOIN_STXO_H"
      },
      {
        "sha": "41c53bc1c2c320b666f06d4dc0927d612620c809",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 140,
        "deletions": 10,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=3b33f7e2740f6cac81e5af8739e07656ccf52147",
        "patch": "@@ -11,6 +11,7 @@\n #include \"net.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n+#include \"stxo.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n@@ -30,6 +31,7 @@ unsigned int nTxConfirmTarget = 1;\n bool bSpendZeroConfChange = true;\n bool fSendFreeTransactions = false;\n bool fPayAtLeastCustomFee = true;\n+int nPruneWallet = 0; // 0 = pruning disabled\n \n /** \n  * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) \n@@ -379,7 +381,7 @@ void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n  * Outpoint is spent if any non-conflicted transaction\n  * spends it:\n  */\n-bool CWallet::IsSpent(const uint256& hash, unsigned int n) const\n+bool CWallet::IsSpent(const uint256& hash, unsigned int n, int nMinConf) const\n {\n     const COutPoint outpoint(hash, n);\n     pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n@@ -389,7 +391,7 @@ bool CWallet::IsSpent(const uint256& hash, unsigned int n) const\n     {\n         const uint256& wtxid = it->second;\n         std::map<uint256, CWalletTx>::const_iterator mit = mapWallet.find(wtxid);\n-        if (mit != mapWallet.end() && mit->second.GetDepthInMainChain() >= 0)\n+        if (mit != mapWallet.end() && mit->second.GetDepthInMainChain() >= nMinConf)\n             return true; // Spent\n     }\n     return false;\n@@ -404,7 +406,6 @@ void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid)\n     SyncMetaData(range);\n }\n \n-\n void CWallet::AddToSpends(const uint256& wtxid)\n {\n     assert(mapWallet.count(wtxid));\n@@ -680,7 +681,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n  * pblock is optional, but should be provided if the transaction is known to be in a block.\n  * If fUpdate is true, existing transactions will be updated.\n  */\n-bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate, CSTXO* pstxo)\n {\n     {\n         AssertLockHeld(cs_wallet);\n@@ -692,6 +693,11 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n             // Get merkle branch if transaction was found in a block\n             if (pblock)\n                 wtx.SetMerkleBranch(*pblock);\n+            if (!fExisted && pstxo && wtx.IsPrunable(nPruneWallet, pstxo)) // called from rescan\n+            {\n+                LogPrint(\"wallet\", \"Skip prunable wtx %s\\n\", wtx.GetHash().ToString());\n+                return false;\n+            }\n             return AddToWallet(wtx);\n         }\n     }\n@@ -714,18 +720,136 @@ void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n     }\n }\n \n-void CWallet::EraseFromWallet(const uint256 &hash)\n+void CWallet::EraseFromWallet(std::map<uint256, CWalletTx>::iterator it, CWalletDB& walletdb)\n {\n-    if (!fFileBacked)\n+    AssertLockHeld(cs_wallet);\n+    if (it == mapWallet.end())\n         return;\n+    const CWalletTx& wtx = it->second;\n+    const uint256 hash = wtx.GetHash();\n+\n+    // Remove from mapTxSpends\n+    if (!wtx.IsCoinBase())\n     {\n-        LOCK(cs_wallet);\n-        if (mapWallet.erase(hash))\n-            CWalletDB(strWalletFile).EraseTx(hash);\n+        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+        {\n+            pair<TxSpends::iterator, TxSpends::iterator> range = mapTxSpends.equal_range(txin.prevout);\n+            for (TxSpends::iterator it2 = range.first; it2 != range.second; ++it2) {\n+                if (hash == it2->second) {\n+                    mapTxSpends.erase(it2);\n+                    break;\n+                }\n+            }\n+        }\n     }\n+\n+    mapWallet.erase(it);\n+\n+    if (fFileBacked)\n+        walletdb.EraseTx(hash);\n+\n+    NotifyTransactionChanged(this, hash, CT_DELETED);\n+    LogPrintf(\"EraseFromWallet %s\\n\", hash.ToString());\n+\n     return;\n }\n \n+void CWallet::EraseFromWallet(const uint256 &hash)\n+{\n+    LOCK(cs_wallet);\n+    CWalletDB walletdb(strWalletFile);\n+    EraseFromWallet(mapWallet.find(hash), walletdb);\n+}\n+\n+bool CWalletTx::IsPrunable(int nDays, CSTXO* pstxo, std::set<const CWalletTx*> *pIsPrunableCache) const\n+{\n+    const CBlockIndex* pindexRet;\n+\n+    if (pIsPrunableCache && pIsPrunableCache->count(this))\n+        return true;\n+\n+    // check if tx is old enough\n+    if (GetDepthInMainChain(pindexRet) < 100) // at least 100 confirmations\n+        return false;\n+    if (!pindexRet || GetTime() - (int64_t)pindexRet->nTime < (int64_t)nDays * (int64_t)86400)\n+        return false;\n+\n+    // check if our outputs are completely spent and also the spenders deep enough in the chain (>= 100 confirmations)\n+    for (unsigned int i = 0; i < vout.size(); i++)\n+    {\n+        if (pwallet->IsMine(vout[i]) != ISMINE_NO)\n+        {\n+            if (pstxo) // called from rescan\n+            {\n+                CCoins coins;\n+                if (pcoinsTip->GetCoins(GetHash(), coins))\n+                    if (i < coins.vout.size() && !coins.vout[i].IsNull())\n+                        return false; // we have an unspent output => do not prune\n+\n+                COutPoint outpoint(GetHash(), i);\n+                if (pstxo->IsRecentlySpent(outpoint))\n+                    return false; // spent, but not deep enough in the chain => do not prune\n+            }\n+            else // called from PruneWallet(..)\n+            {\n+                if (!pwallet->IsSpent(GetHash(), i, 100))\n+                    return false; // unspent or spender not deep enough => do not prune\n+            }\n+        }\n+    }\n+\n+    // check if the inputs we spent, are also pruned/prunable, so that they wouldnt require us as a spent-flag anymore anyway\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        std::map<uint256, CWalletTx>::const_iterator it = pwallet->mapWallet.find(txin.prevout.hash);\n+        if (it != pwallet->mapWallet.end() && !it->second.IsPrunable(nDays, pstxo, pIsPrunableCache))\n+            return false;\n+    }\n+\n+    if (pIsPrunableCache)\n+        pIsPrunableCache->insert(this);\n+\n+    return true;\n+}\n+\n+int64_t CWallet::PruneWallet(int nDays)\n+{\n+    if (nDays < 1)\n+        return 0;\n+\n+    if (fUsingAccounts) // wallet pruning is not supported if someone uses the account-feature as this would destroy account-balances\n+        return -1;\n+\n+    LOCK2(cs_main, cs_wallet);\n+\n+    ShowProgress(_(\"Pruning wallet...\"), 0);\n+    unsigned int i = 0;\n+    std::set<const CWalletTx*> *pIsPrunableCache = new std::set<const CWalletTx*>();\n+    vector<map<uint256, CWalletTx>::iterator> vDeletes;\n+    for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+    {\n+        if (i++ % 100 == 0)\n+            ShowProgress(_(\"Pruning wallet...\"), std::max(1, std::min(99, (int)((double)(i) / (double)(mapWallet.size()) * 20))));\n+\n+        if (it->second.IsPrunable(nDays, NULL, pIsPrunableCache))\n+            vDeletes.push_back(it);\n+    }\n+    delete pIsPrunableCache;\n+\n+    if (!vDeletes.empty())\n+    {\n+        CWalletDB walletdb(strWalletFile);\n+        for (unsigned int i = 0; i < vDeletes.size(); ++i)\n+        {\n+            ShowProgress(_(\"Pruning wallet...\"), std::max(1, std::min(99, (int)20 + (int)((double)(i) / (double)(vDeletes.size()) * 80))));\n+            EraseFromWallet(vDeletes[i], walletdb);\n+        }\n+        walletdb.Flush();\n+        walletdb.Compact();\n+    }\n+    ShowProgress(_(\"Pruning wallet...\"), 100);\n+    return vDeletes.size();\n+}\n \n isminetype CWallet::IsMine(const CTxIn &txin) const\n {\n@@ -940,6 +1064,10 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n         while (pindex && nTimeFirstKey && (pindex->GetBlockTime() < (nTimeFirstKey - 7200)))\n             pindex = chainActive.Next(pindex);\n \n+        CSTXO* pstxo = NULL;\n+        if (nPruneWallet > 0)\n+            pstxo = new CSTXO(chainActive.Tip(), 100);\n+\n         ShowProgress(_(\"Rescanning...\"), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n         double dProgressStart = Checkpoints::GuessVerificationProgress(pindex, false);\n         double dProgressTip = Checkpoints::GuessVerificationProgress(chainActive.Tip(), false);\n@@ -952,7 +1080,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n             ReadBlockFromDisk(block, pindex);\n             BOOST_FOREACH(CTransaction& tx, block.vtx)\n             {\n-                if (AddToWalletIfInvolvingMe(tx, &block, fUpdate))\n+                if (AddToWalletIfInvolvingMe(tx, &block, fUpdate, pstxo))\n                     ret++;\n             }\n             pindex = chainActive.Next(pindex);\n@@ -961,6 +1089,8 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n                 LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, Checkpoints::GuessVerificationProgress(pindex));\n             }\n         }\n+\n+        delete pstxo;\n         ShowProgress(_(\"Rescanning...\"), 100); // hide progress dialog in GUI\n     }\n     return ret;"
      },
      {
        "sha": "fe7011a7b4dd81aa41045e90419d577fb08fc2ea",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=3b33f7e2740f6cac81e5af8739e07656ccf52147",
        "patch": "@@ -34,6 +34,7 @@ extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n extern bool fSendFreeTransactions;\n extern bool fPayAtLeastCustomFee;\n+extern int nPruneWallet;\n \n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n@@ -47,6 +48,7 @@ class CCoinControl;\n class COutput;\n class CReserveKey;\n class CScript;\n+class CSTXO;\n class CWalletTx;\n \n /** (client) version numbers for particular wallet features */\n@@ -142,6 +144,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     bool fFileBacked;\n     std::string strWalletFile;\n+    bool fUsingAccounts;\n \n     std::set<int64_t> setKeyPool;\n     std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n@@ -180,6 +183,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         nNextResend = 0;\n         nLastResend = 0;\n         nTimeFirstKey = 0;\n+        fUsingAccounts = false;\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n@@ -203,7 +207,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n \n-    bool IsSpent(const uint256& hash, unsigned int n) const;\n+    bool IsSpent(const uint256& hash, unsigned int n, int nMinConf = 0) const;\n \n     bool IsLockedCoin(uint256 hash, unsigned int n) const;\n     void LockCoin(COutPoint& output);\n@@ -272,8 +276,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet=false);\n     void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n-    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n+    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate, CSTXO* pstxo = NULL);\n     void EraseFromWallet(const uint256 &hash);\n+    void EraseFromWallet(std::map<uint256, CWalletTx>::iterator it, CWalletDB& walletdb);\n+    int64_t PruneWallet(int nDays);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions();\n@@ -907,6 +913,8 @@ class CWalletTx : public CMerkleTx\n     void RelayWalletTransaction();\n \n     std::set<uint256> GetConflicts() const;\n+\n+    bool IsPrunable(int nDays, CSTXO* pstxo = NULL, std::set<const CWalletTx*> *pIsPrunableCache = NULL) const;\n };\n \n "
      },
      {
        "sha": "313bd9a8803ec841718d3b6d5de34a10d6db0bcf",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33f7e2740f6cac81e5af8739e07656ccf52147/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=3b33f7e2740f6cac81e5af8739e07656ccf52147",
        "patch": "@@ -397,6 +397,9 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 wss.fAnyUnordered = true;\n \n             pwallet->AddToWallet(wtx, true);\n+\n+            if (!wtx.strFromAccount.empty())\n+                pwallet->fUsingAccounts = true;\n         }\n         else if (strType == \"acentry\")\n         {\n@@ -414,6 +417,8 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 if (acentry.nOrderPos == -1)\n                     wss.fAnyUnordered = true;\n             }\n+\n+            pwallet->fUsingAccounts = true;\n         }\n         else if (strType == \"watchs\")\n         {"
      }
    ]
  }
]