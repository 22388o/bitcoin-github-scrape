[
  {
    "sha": "c6c89bb163023b68a17ddb8d742640b2d6adf2c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmM4OWJiMTYzMDIzYjY4YTE3ZGRiOGQ3NDI2NDBiMmQ2YWRmMmMy",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-06-30T17:24:57Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-11-16T13:26:29Z"
      },
      "message": "Add GetStartingPriority method to reliably get the original priority of a transaction in the mempool",
      "tree": {
        "sha": "c94409600be5249bc5f2cb1e1f34bf1dd2b1460c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c94409600be5249bc5f2cb1e1f34bf1dd2b1460c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6c89bb163023b68a17ddb8d742640b2d6adf2c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6c89bb163023b68a17ddb8d742640b2d6adf2c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c89bb163023b68a17ddb8d742640b2d6adf2c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6c89bb163023b68a17ddb8d742640b2d6adf2c2/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb2ed300a89ebf9f0654da869ced665ed8b2abe7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb2ed300a89ebf9f0654da869ced665ed8b2abe7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb2ed300a89ebf9f0654da869ced665ed8b2abe7"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "24dbef5d3fa55db966542f05323f5df096419a62",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c89bb163023b68a17ddb8d742640b2d6adf2c2/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c89bb163023b68a17ddb8d742640b2d6adf2c2/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c6c89bb163023b68a17ddb8d742640b2d6adf2c2",
        "patch": "@@ -358,7 +358,7 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n     info.push_back(Pair(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee())));\n     info.push_back(Pair(\"time\", e.GetTime()));\n     info.push_back(Pair(\"height\", (int)e.GetHeight()));\n-    info.push_back(Pair(\"startingpriority\", e.GetPriority(e.GetHeight())));\n+    info.push_back(Pair(\"startingpriority\", e.GetStartingPriority()));\n     info.push_back(Pair(\"currentpriority\", e.GetPriority(chainActive.Height())));\n     info.push_back(Pair(\"descendantcount\", e.GetCountWithDescendants()));\n     info.push_back(Pair(\"descendantsize\", e.GetSizeWithDescendants()));"
      },
      {
        "sha": "66e7f1c2fa8590af57d216c9064584735368609a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c89bb163023b68a17ddb8d742640b2d6adf2c2/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c89bb163023b68a17ddb8d742640b2d6adf2c2/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=c6c89bb163023b68a17ddb8d742640b2d6adf2c2",
        "patch": "@@ -119,6 +119,7 @@ class CTxMemPoolEntry\n \n     const CTransaction& GetTx() const { return *this->tx; }\n     std::shared_ptr<const CTransaction> GetSharedTx() const { return this->tx; }\n+    double GetStartingPriority() const {return entryPriority; }\n     /**\n      * Fast calculation of lower bound of current priority as update\n      * from entry priority. Only inputs that were originally in-chain will age."
      }
    ]
  },
  {
    "sha": "8aa1ae22422dd7a18570cac100ab2110253209ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWExYWUyMjQyMmRkN2ExODU3MGNhYzEwMGFiMjExMDI1MzIwOWFj",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-06-30T17:24:57Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-11-16T13:48:22Z"
      },
      "message": "Change GetPriority calculation to dynamically update\n\nTrack the value of inputs that get confirmed in the chain and keep a cached value of priority at a given height and return current priority by only assuming these in chain inputs are aging.",
      "tree": {
        "sha": "7b5075576a4fc4e62c9c906b591d47468b5ec3c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b5075576a4fc4e62c9c906b591d47468b5ec3c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8aa1ae22422dd7a18570cac100ab2110253209ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aa1ae22422dd7a18570cac100ab2110253209ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8aa1ae22422dd7a18570cac100ab2110253209ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aa1ae22422dd7a18570cac100ab2110253209ac/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6c89bb163023b68a17ddb8d742640b2d6adf2c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6c89bb163023b68a17ddb8d742640b2d6adf2c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c89bb163023b68a17ddb8d742640b2d6adf2c2"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 64,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b5cae7b61b9967fbc1e0130f52f18a8589b59a33",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aa1ae22422dd7a18570cac100ab2110253209ac/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aa1ae22422dd7a18570cac100ab2110253209ac/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8aa1ae22422dd7a18570cac100ab2110253209ac",
        "patch": "@@ -2808,6 +2808,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n         // Resurrect mempool transactions from the disconnected block.\n         std::vector<uint256> vHashUpdate;\n         BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+            mempool.UpdateDependentPriorities(tx, pindexDelete->nHeight, false);\n             // ignore validation errors in resurrected transactions\n             CValidationState stateDummy;\n             if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, true)) {"
      },
      {
        "sha": "757fb79a7aa3eae0c3c49dcf944a17e7364e9b54",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 3,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aa1ae22422dd7a18570cac100ab2110253209ac/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aa1ae22422dd7a18570cac100ab2110253209ac/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8aa1ae22422dd7a18570cac100ab2110253209ac",
        "patch": "@@ -40,6 +40,9 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n \n     feeDelta = 0;\n \n+    cachedHeight = entryHeight;\n+    cachedPriority = entryPriority;\n+\n     nCountWithAncestors = 1;\n     nSizeWithAncestors = GetTxSize();\n     nModFeesWithAncestors = nFee;\n@@ -54,9 +57,13 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n double\n CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n {\n-    double deltaPriority = ((double)(currentHeight-entryHeight)*inChainInputValue)/nModSize;\n-    double dResult = entryPriority + deltaPriority;\n-    if (dResult < 0) // This should only happen if it was called with a height below entry height\n+    // This will only return accurate results when currentHeight >= the heights\n+    // at which all the in-chain inputs of the tx were included in blocks.\n+    // Typical usage of GetPriority with chainActive.Height() will ensure this.\n+    int heightDiff = currentHeight - cachedHeight;\n+    double deltaPriority = ((double)heightDiff*inChainInputValue)/nModSize;\n+    double dResult = cachedPriority + deltaPriority;\n+    if (dResult < 0) // This should only happen if it was called with an invalid height\n         dResult = 0;\n     return dResult;\n }\n@@ -348,6 +355,16 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n     assert(int(nSigOpCostWithAncestors) >= 0);\n }\n \n+void CTxMemPoolEntry::UpdateCachedPriority(unsigned int currentHeight, CAmount valueInCurrentBlock)\n+{\n+    int heightDiff = currentHeight - cachedHeight;\n+    double deltaPriority = ((double)heightDiff*inChainInputValue)/nModSize;\n+    cachedPriority += deltaPriority;\n+    cachedHeight = currentHeight;\n+    inChainInputValue += valueInCurrentBlock;\n+    assert(MoneyRange(inChainInputValue));\n+}\n+\n CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :\n     nTransactionsUpdated(0)\n {\n@@ -593,6 +610,19 @@ void CTxMemPool::removeConflicts(const CTransaction &tx, std::vector<std::shared\n     }\n }\n \n+void CTxMemPool::UpdateDependentPriorities(const CTransaction &tx, unsigned int nBlockHeight, bool addToChain)\n+{\n+    LOCK(cs);\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        auto it = mapNextTx.find(COutPoint(tx.GetHash(), i));\n+        if (it == mapNextTx.end())\n+            continue;\n+        uint256 hash = it->second->GetHash();\n+        txiter iter = mapTx.find(hash);\n+        mapTx.modify(iter, update_priority(nBlockHeight, addToChain ? tx.vout[i].nValue : -tx.vout[i].nValue));\n+    }\n+}\n+\n /**\n  * Called when a block is connected. Removes from mempool and updates the miner fee estimator.\n  */\n@@ -611,6 +641,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i\n     }\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n     {\n+        UpdateDependentPriorities(tx, nBlockHeight, true);\n         txiter it = mapTx.find(tx.GetHash());\n         if (it != mapTx.end()) {\n             setEntries stage;"
      },
      {
        "sha": "df7f25ff2a601a7eb5ae2d68865ec412f5057a4a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 29,
        "deletions": 2,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aa1ae22422dd7a18570cac100ab2110253209ac/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aa1ae22422dd7a18570cac100ab2110253209ac/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=8aa1ae22422dd7a18570cac100ab2110253209ac",
        "patch": "@@ -88,6 +88,8 @@ class CTxMemPoolEntry\n     int64_t nTime;             //!< Local time when entering the mempool\n     double entryPriority;      //!< Priority when entering the mempool\n     unsigned int entryHeight;  //!< Chain height when entering the mempool\n+    double cachedPriority;     //!< Last calculated priority\n+    unsigned int cachedHeight; //!< Height at which priority was last calculated\n     bool hadNoDependencies;    //!< Not dependent on any other txs when it entered the mempool\n     CAmount inChainInputValue; //!< Sum of all txin values that are already in blockchain\n     bool spendsCoinbase;       //!< keep track of transactions that spend a coinbase\n@@ -121,10 +123,15 @@ class CTxMemPoolEntry\n     std::shared_ptr<const CTransaction> GetSharedTx() const { return this->tx; }\n     double GetStartingPriority() const {return entryPriority; }\n     /**\n-     * Fast calculation of lower bound of current priority as update\n-     * from entry priority. Only inputs that were originally in-chain will age.\n+     * Fast calculation of priority as update from cached value, but only valid if\n+     * currentHeight is greater than last height it was recalculated.\n      */\n     double GetPriority(unsigned int currentHeight) const;\n+    /**\n+     * Recalculate the cached priority as of currentHeight and adjust inChainInputValue by\n+     * valueInCurrentBlock which represents input that was just added to or removed from the blockchain.\n+     */\n+    void UpdateCachedPriority(unsigned int currentHeight, CAmount valueInCurrentBlock);\n     const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const;\n     size_t GetTxWeight() const { return nTxWeight; }\n@@ -202,6 +209,20 @@ struct update_fee_delta\n     int64_t feeDelta;\n };\n \n+struct update_priority\n+{\n+    update_priority(unsigned int _height, CAmount _value) :\n+        height(_height), value(_value)\n+    {}\n+\n+    void operator() (CTxMemPoolEntry &e)\n+    { e.UpdateCachedPriority(height, value); }\n+\n+    private:\n+        unsigned int height;\n+        CAmount value;\n+};\n+\n struct update_lock_points\n {\n     update_lock_points(const LockPoints& _lp) : lp(_lp) { }\n@@ -545,6 +566,12 @@ class CTxMemPool\n      * the tx is not dependent on other mempool transactions to be included in a block.\n      */\n     bool HasNoInputsOf(const CTransaction& tx) const;\n+    /**\n+     * Update all transactions in the mempool which depend on tx to recalculate their priority\n+     * and adjust the input value that will age to reflect that the inputs from this transaction have\n+     * either just been added to the chain or just been removed.\n+     */\n+    void UpdateDependentPriorities(const CTransaction &tx, unsigned int nBlockHeight, bool addToChain);\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n     void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta);"
      }
    ]
  },
  {
    "sha": "98ef48370cc5238d415aee5cbc1ba5d9693ad1d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OGVmNDgzNzBjYzUyMzhkNDE1YWVlNWNiYzFiYTVkOTY5M2FkMWQ1",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-07-10T14:36:29Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-11-16T14:08:03Z"
      },
      "message": "Add consistency check for on the fly priority calculations",
      "tree": {
        "sha": "42bfb0f7be18a55a104851719b64e1278ada04b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42bfb0f7be18a55a104851719b64e1278ada04b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98ef48370cc5238d415aee5cbc1ba5d9693ad1d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98ef48370cc5238d415aee5cbc1ba5d9693ad1d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98ef48370cc5238d415aee5cbc1ba5d9693ad1d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98ef48370cc5238d415aee5cbc1ba5d9693ad1d5/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8aa1ae22422dd7a18570cac100ab2110253209ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aa1ae22422dd7a18570cac100ab2110253209ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8aa1ae22422dd7a18570cac100ab2110253209ac"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 14,
      "deletions": 5
    },
    "files": [
      {
        "sha": "08e8a6502ffbc3045d33266a70afb571e017969e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98ef48370cc5238d415aee5cbc1ba5d9693ad1d5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98ef48370cc5238d415aee5cbc1ba5d9693ad1d5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=98ef48370cc5238d415aee5cbc1ba5d9693ad1d5",
        "patch": "@@ -3029,7 +3029,7 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n         mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n         LimitMempoolSize(mempool, GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n     }\n-    mempool.check(pcoinsTip);\n+    mempool.check(pcoinsTip, chainActive.Height());\n \n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)\n@@ -5604,7 +5604,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         mapAlreadyAskedFor.erase(inv.hash);\n \n         if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs)) {\n-            mempool.check(pcoinsTip);\n+            mempool.check(pcoinsTip, chainActive.Height());\n             RelayTransaction(tx, connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n                 vWorkQueue.emplace_back(inv.hash, i);\n@@ -5670,7 +5670,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                             recentRejects->insert(orphanHash);\n                         }\n                     }\n-                    mempool.check(pcoinsTip);\n+                    mempool.check(pcoinsTip, chainActive.Height());\n                 }\n             }\n "
      },
      {
        "sha": "982e4a298e5e1fa7da4adf6ddca93544123ef0f6",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98ef48370cc5238d415aee5cbc1ba5d9693ad1d5/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98ef48370cc5238d415aee5cbc1ba5d9693ad1d5/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=98ef48370cc5238d415aee5cbc1ba5d9693ad1d5",
        "patch": "@@ -676,7 +676,7 @@ void CTxMemPool::clear()\n     _clear();\n }\n \n-void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n+void CTxMemPool::check(const CCoinsViewCache *pcoins, unsigned int nBlockHeight) const\n {\n     if (nCheckFrequency == 0)\n         return;\n@@ -693,10 +693,19 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     const int64_t nSpendHeight = GetSpendHeight(mempoolDuplicate);\n \n     LOCK(cs);\n+    CCoinsViewMemPool viewMemPool(pcoinsTip, *this);\n+    CCoinsViewCache view(&viewMemPool);\n     list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         checkTotal += it->GetTxSize();\n+        CAmount dummyValue;\n+        double freshPriority = view.GetPriority(it->GetTx(), nBlockHeight, dummyValue);\n+        double cachePriority = it->GetPriority(nBlockHeight);\n+        double priDiff = cachePriority > freshPriority ? cachePriority - freshPriority : freshPriority - cachePriority;\n+        // Verify that the difference between the on the fly calculation and a fresh calculation\n+        // is small enough to be a result of double imprecision.\n+        assert(priDiff < .0001 * freshPriority + 1);\n         innerUsage += it->DynamicMemoryUsage();\n         const CTransaction& tx = it->GetTx();\n         txlinksMap::const_iterator linksiter = mapLinks.find(it);"
      },
      {
        "sha": "4ef5f624257ad9e6077de091d7f29831fccb1187",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98ef48370cc5238d415aee5cbc1ba5d9693ad1d5/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98ef48370cc5238d415aee5cbc1ba5d9693ad1d5/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=98ef48370cc5238d415aee5cbc1ba5d9693ad1d5",
        "patch": "@@ -539,7 +539,7 @@ class CTxMemPool\n      * all inputs are in the mapNextTx array). If sanity-checking is turned off,\n      * check does nothing.\n      */\n-    void check(const CCoinsViewCache *pcoins) const;\n+    void check(const CCoinsViewCache *pcoins, unsigned int nBlockHeight) const;\n     void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = dFrequency * 4294967295.0; }\n \n     // addUnchecked must updated state for all ancestors of a given transaction,"
      }
    ]
  },
  {
    "sha": "2d7288858f8bac6ef10882d450525fab4cd5ee6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDcyODg4NThmOGJhYzZlZjEwODgyZDQ1MDUyNWZhYjRjZDVlZTZm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-12T19:44:01Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-11-16T15:01:22Z"
      },
      "message": "QA: Add test for priority via getrawmempool",
      "tree": {
        "sha": "82ade212f77127b0ec22e6e4de8e76a3bb380480",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82ade212f77127b0ec22e6e4de8e76a3bb380480"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d7288858f8bac6ef10882d450525fab4cd5ee6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d7288858f8bac6ef10882d450525fab4cd5ee6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d7288858f8bac6ef10882d450525fab4cd5ee6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d7288858f8bac6ef10882d450525fab4cd5ee6f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98ef48370cc5238d415aee5cbc1ba5d9693ad1d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98ef48370cc5238d415aee5cbc1ba5d9693ad1d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98ef48370cc5238d415aee5cbc1ba5d9693ad1d5"
      }
    ],
    "stats": {
      "total": 151,
      "additions": 145,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d90a3bebc1c80f2c55d5037cea49f5b38941fe13",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d7288858f8bac6ef10882d450525fab4cd5ee6f/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d7288858f8bac6ef10882d450525fab4cd5ee6f/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=2d7288858f8bac6ef10882d450525fab4cd5ee6f",
        "patch": "@@ -114,6 +114,7 @@\n     'p2p-segwit.py',\n     'segwit.py',\n     'txn_clone.py',\n+    'txn_priority.py',\n     'getchaintips.py',\n     'rawtransactions.py',\n     'rest.py',"
      },
      {
        "sha": "a99353788af555041223bcedcd965b5effb31a2f",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 28,
        "deletions": 6,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d7288858f8bac6ef10882d450525fab4cd5ee6f/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d7288858f8bac6ef10882d450525fab4cd5ee6f/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=2d7288858f8bac6ef10882d450525fab4cd5ee6f",
        "patch": "@@ -4,20 +4,42 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from binascii import a2b_hex, b2a_hex\n+import io\n+import struct\n+\n from .mininode import *\n from .script import CScript, OP_TRUE, OP_CHECKSIG, OP_RETURN\n \n # Create a block (with regtest difficulty)\n-def create_block(hashprev, coinbase, nTime=None):\n+def create_block(hashprev=None, coinbase=None, nTime=None, tmpl=None, txlist=None):\n     block = CBlock()\n-    if nTime is None:\n+    if tmpl:\n+        block.nVersion = tmpl.get('version', block.nVersion)\n+    if not nTime is None:\n+        block.nTime = nTime\n+    elif tmpl and not tmpl.get('curtime') is None:\n+        block.nTime = tmpl['curtime']\n+    else:\n         import time\n         block.nTime = int(time.time()+600)\n+    if not hashprev is None:\n+        block.hashPrevBlock = hashprev\n     else:\n-        block.nTime = nTime\n-    block.hashPrevBlock = hashprev\n-    block.nBits = 0x207fffff # Will break after a difficulty adjustment...\n-    block.vtx.append(coinbase)\n+        block.hashPrevBlock = int(tmpl['previousblockhash'], 0x10)\n+    if tmpl and not tmpl.get('bits') is None:\n+        block.nBits = struct.unpack('>I', a2b_hex(tmpl['bits']))[0]\n+    else:\n+        block.nBits = 0x207fffff # Will break after a difficulty adjustment...\n+    if not coinbase is None:\n+        block.vtx.append(coinbase)\n+    if txlist:\n+        for tx in txlist:\n+            if not hasattr(tx, 'calc_sha256'):\n+                txo = CTransaction()\n+                txo.deserialize(io.BytesIO(tx))\n+                tx = txo\n+            block.vtx.append(tx)\n     block.hashMerkleRoot = block.calc_merkle_root()\n     block.calc_sha256()\n     return block"
      },
      {
        "sha": "4a5c86221cd473d86bdf0992b03bfdafe5a0543e",
        "filename": "qa/rpc-tests/txn_priority.py",
        "status": "added",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d7288858f8bac6ef10882d450525fab4cd5ee6f/qa/rpc-tests/txn_priority.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d7288858f8bac6ef10882d450525fab4cd5ee6f/qa/rpc-tests/txn_priority.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_priority.py?ref=2d7288858f8bac6ef10882d450525fab4cd5ee6f",
        "patch": "@@ -0,0 +1,116 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+from binascii import a2b_hex, b2a_hex\n+\n+def find_unspent(node, txid, amount):\n+    for utxo in node.listunspent(0):\n+        if utxo['txid'] != txid: continue\n+        if float(utxo['amount']) != amount: continue\n+        return {'txid': utxo['txid'], 'vout': utxo['vout']}\n+\n+def solve_template_hex(tmpl, txlist):\n+    block = create_block(tmpl=tmpl, txlist=txlist)\n+    block.solve()\n+    b = block.serialize()\n+    x = b2a_hex(b).decode('ascii')\n+    return x\n+\n+def get_modified_size(node, txdata):\n+    decoded = node.decoderawtransaction(txdata)\n+    size = len(txdata) // 2\n+    for inp in decoded['vin']:\n+        offset = 41 + min(len(inp['scriptSig']['hex']) // 2, 110)\n+        if offset <= size:\n+            size -= offset\n+    return size\n+\n+def assert_approximate(a, b):\n+    assert_equal(int(a), int(b))\n+\n+class PriorityTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+\n+    def setup_nodes(self):\n+        nodes = []\n+        nodes.append(start_node(0, self.options.tmpdir, ['-blockmaxsize=0']))\n+        nodes.append(start_node(1, self.options.tmpdir, ['-blockprioritysize=1000000', '-blockmaxsize=1000000']))\n+        return nodes\n+\n+    def setup_network(self, split=False):\n+        self.nodes = self.setup_nodes()\n+        connect_nodes_bi(self.nodes,0,1)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        miner = self.nodes[1]\n+        node.generate(50)\n+        miner.generate(101)\n+        self.sync_all()\n+\n+        fee = 0.01\n+        amt = 11\n+\n+        txid_a = node.sendtoaddress(node.getnewaddress(), amt)\n+        txdata_b = node.createrawtransaction([find_unspent(node, txid_a, amt)], {node.getnewaddress(): amt - fee})\n+        txdata_b = node.signrawtransaction(txdata_b)['hex']\n+        txmodsize_b = get_modified_size(node, txdata_b)\n+        txid_b = node.sendrawtransaction(txdata_b)\n+\n+        txid_b_mempoolentry = node.getrawmempool(True)[txid_b]\n+        assert_approximate(txid_b_mempoolentry['startingpriority'], txid_b_mempoolentry['currentpriority'])\n+        assert_approximate(txid_b_mempoolentry['currentpriority'], 0)\n+\n+        # Mine only the sendtoaddress transaction\n+        tmpl = node.getblocktemplate()\n+        rawblock = solve_template_hex(tmpl, [create_coinbase(tmpl['height']), a2b_hex(node.getrawtransaction(txid_a))])\n+        assert_equal(node.submitblock(rawblock), None)\n+\n+        txid_b_mempoolentry = node.getrawmempool(True)[txid_b]\n+        assert_approximate(txid_b_mempoolentry['startingpriority'], 0)\n+        assert_approximate(txid_b_mempoolentry['currentpriority'], amt * 1e8 / txmodsize_b)\n+\n+        node.generate(2)\n+\n+        txid_b_mempoolentry = node.getrawmempool(True)[txid_b]\n+        assert_approximate(txid_b_mempoolentry['startingpriority'], 0)\n+        assert_approximate(txid_b_mempoolentry['currentpriority'], amt * 1e8 * 3 / txmodsize_b)\n+\n+        self.sync_all()\n+        miner.generate(4)\n+        self.sync_all()\n+\n+        txdata_c = node.createrawtransaction([find_unspent(node, txid_b, amt - fee)], {node.getnewaddress(): amt - (fee * 2)})\n+        txdata_c = node.signrawtransaction(txdata_c)['hex']\n+        txmodsize_c = get_modified_size(node, txdata_c)\n+        txid_c = node.sendrawtransaction(txdata_c)\n+        txid_c_mempoolentry = node.getrawmempool(True)[txid_c]\n+        assert_approximate(txid_c_mempoolentry['startingpriority'], txid_c_mempoolentry['currentpriority'])\n+        assert_approximate(txid_c_mempoolentry['currentpriority'], (amt - fee) * 1e8 * 4 / txmodsize_c)\n+\n+        node.generate(1)\n+\n+        txid_c_mempoolentry = node.getrawmempool(True)[txid_c]\n+        assert_approximate(txid_c_mempoolentry['startingpriority'], (amt - fee) * 1e8 * 4 / txmodsize_c)\n+        assert_approximate(txid_c_mempoolentry['currentpriority'], (amt - fee) * 1e8 * 5 / txmodsize_c)\n+\n+        node.generate(2)\n+\n+        txid_c_mempoolentry = node.getrawmempool(True)[txid_c]\n+        assert_approximate(txid_c_mempoolentry['startingpriority'], (amt - fee) * 1e8 * 4 / txmodsize_c)\n+        assert_approximate(txid_c_mempoolentry['currentpriority'], (amt - fee) * 1e8 * 7 / txmodsize_c)\n+\n+if __name__ == '__main__':\n+    PriorityTest().main()"
      }
    ]
  },
  {
    "sha": "cc260ed8014428ff7376e2175fd25f3f840468b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzI2MGVkODAxNDQyOGZmNzM3NmUyMTc1ZmQyNWYzZjg0MDQ2OGIz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-12T20:22:56Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-11-16T15:01:22Z"
      },
      "message": "QA: Enable testing priority via getblocktemplate as well",
      "tree": {
        "sha": "2c014bfd27fb0d578c647c7abe97aa2415020708",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c014bfd27fb0d578c647c7abe97aa2415020708"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc260ed8014428ff7376e2175fd25f3f840468b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc260ed8014428ff7376e2175fd25f3f840468b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc260ed8014428ff7376e2175fd25f3f840468b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc260ed8014428ff7376e2175fd25f3f840468b3/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d7288858f8bac6ef10882d450525fab4cd5ee6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d7288858f8bac6ef10882d450525fab4cd5ee6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d7288858f8bac6ef10882d450525fab4cd5ee6f"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 51,
      "deletions": 20
    },
    "files": [
      {
        "sha": "860f3ad6348ad40afbfe43afd09037581f8d8edf",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc260ed8014428ff7376e2175fd25f3f840468b3/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc260ed8014428ff7376e2175fd25f3f840468b3/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=cc260ed8014428ff7376e2175fd25f3f840468b3",
        "patch": "@@ -115,6 +115,7 @@\n     'segwit.py',\n     'txn_clone.py',\n     'txn_priority.py',\n+    'txn_priority.py --gbt',\n     'getchaintips.py',\n     'rawtransactions.py',\n     'rest.py',"
      },
      {
        "sha": "55bade370379e740977c61631b68eed95b173289",
        "filename": "qa/rpc-tests/txn_priority.py",
        "status": "modified",
        "additions": 41,
        "deletions": 20,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc260ed8014428ff7376e2175fd25f3f840468b3/qa/rpc-tests/txn_priority.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc260ed8014428ff7376e2175fd25f3f840468b3/qa/rpc-tests/txn_priority.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_priority.py?ref=cc260ed8014428ff7376e2175fd25f3f840468b3",
        "patch": "@@ -41,10 +41,18 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 2\n \n+    def add_options(self, parser):\n+        parser.add_option(\"--gbt\", dest=\"test_gbt\", default=False, action=\"store_true\",\n+                          help=\"Test priorities used by GBT\")\n+\n     def setup_nodes(self):\n+        ppopt = []\n+        if self.options.test_gbt:\n+            ppopt.append('-printpriority')\n+\n         nodes = []\n         nodes.append(start_node(0, self.options.tmpdir, ['-blockmaxsize=0']))\n-        nodes.append(start_node(1, self.options.tmpdir, ['-blockprioritysize=1000000', '-blockmaxsize=1000000']))\n+        nodes.append(start_node(1, self.options.tmpdir, ['-blockprioritysize=1000000', '-blockmaxsize=1000000'] + ppopt))\n         return nodes\n \n     def setup_network(self, split=False):\n@@ -53,10 +61,28 @@ def setup_network(self, split=False):\n         self.is_network_split = False\n         self.sync_all()\n \n+    def assert_prio(self, txid, starting, current):\n+        node = self.nodes[1]\n+\n+        if self.options.test_gbt:\n+            tmpl = node.getblocktemplate({})\n+            tmplentry = None\n+            for tx in tmpl['transactions']:\n+                if tx['hash'] == txid:\n+                    tmplentry = tx\n+                    break\n+            # GBT does not expose starting priority, so we don't check that\n+            assert_approximate(tmplentry['priority'], current)\n+        else:\n+            mempoolentry = node.getrawmempool(True)[txid]\n+            assert_approximate(mempoolentry['startingpriority'], starting)\n+            assert_approximate(mempoolentry['currentpriority'], current)\n+\n     def run_test(self):\n         node = self.nodes[0]\n         miner = self.nodes[1]\n         node.generate(50)\n+        self.sync_all()\n         miner.generate(101)\n         self.sync_all()\n \n@@ -68,49 +94,44 @@ def run_test(self):\n         txdata_b = node.signrawtransaction(txdata_b)['hex']\n         txmodsize_b = get_modified_size(node, txdata_b)\n         txid_b = node.sendrawtransaction(txdata_b)\n+        self.sync_all()\n \n-        txid_b_mempoolentry = node.getrawmempool(True)[txid_b]\n-        assert_approximate(txid_b_mempoolentry['startingpriority'], txid_b_mempoolentry['currentpriority'])\n-        assert_approximate(txid_b_mempoolentry['currentpriority'], 0)\n+        self.assert_prio(txid_b, 0, 0)\n \n         # Mine only the sendtoaddress transaction\n         tmpl = node.getblocktemplate()\n         rawblock = solve_template_hex(tmpl, [create_coinbase(tmpl['height']), a2b_hex(node.getrawtransaction(txid_a))])\n         assert_equal(node.submitblock(rawblock), None)\n+        self.sync_all()\n \n-        txid_b_mempoolentry = node.getrawmempool(True)[txid_b]\n-        assert_approximate(txid_b_mempoolentry['startingpriority'], 0)\n-        assert_approximate(txid_b_mempoolentry['currentpriority'], amt * 1e8 / txmodsize_b)\n+        self.assert_prio(txid_b, 0, amt * 1e8 / txmodsize_b)\n \n         node.generate(2)\n+        self.sync_all()\n \n-        txid_b_mempoolentry = node.getrawmempool(True)[txid_b]\n-        assert_approximate(txid_b_mempoolentry['startingpriority'], 0)\n-        assert_approximate(txid_b_mempoolentry['currentpriority'], amt * 1e8 * 3 / txmodsize_b)\n+        self.assert_prio(txid_b, 0, amt * 1e8 * 3 / txmodsize_b)\n \n-        self.sync_all()\n         miner.generate(4)\n         self.sync_all()\n \n         txdata_c = node.createrawtransaction([find_unspent(node, txid_b, amt - fee)], {node.getnewaddress(): amt - (fee * 2)})\n         txdata_c = node.signrawtransaction(txdata_c)['hex']\n         txmodsize_c = get_modified_size(node, txdata_c)\n         txid_c = node.sendrawtransaction(txdata_c)\n-        txid_c_mempoolentry = node.getrawmempool(True)[txid_c]\n-        assert_approximate(txid_c_mempoolentry['startingpriority'], txid_c_mempoolentry['currentpriority'])\n-        assert_approximate(txid_c_mempoolentry['currentpriority'], (amt - fee) * 1e8 * 4 / txmodsize_c)\n+        self.sync_all()\n+\n+        txid_c_starting_prio = (amt - fee) * 1e8 * 4 / txmodsize_c\n+        self.assert_prio(txid_c, txid_c_starting_prio, txid_c_starting_prio)\n \n         node.generate(1)\n+        self.sync_all()\n \n-        txid_c_mempoolentry = node.getrawmempool(True)[txid_c]\n-        assert_approximate(txid_c_mempoolentry['startingpriority'], (amt - fee) * 1e8 * 4 / txmodsize_c)\n-        assert_approximate(txid_c_mempoolentry['currentpriority'], (amt - fee) * 1e8 * 5 / txmodsize_c)\n+        self.assert_prio(txid_c, txid_c_starting_prio, (amt - fee) * 1e8 * 5 / txmodsize_c)\n \n         node.generate(2)\n+        self.sync_all()\n \n-        txid_c_mempoolentry = node.getrawmempool(True)[txid_c]\n-        assert_approximate(txid_c_mempoolentry['startingpriority'], (amt - fee) * 1e8 * 4 / txmodsize_c)\n-        assert_approximate(txid_c_mempoolentry['currentpriority'], (amt - fee) * 1e8 * 7 / txmodsize_c)\n+        self.assert_prio(txid_c, txid_c_starting_prio, (amt - fee) * 1e8 * 7 / txmodsize_c)\n \n if __name__ == '__main__':\n     PriorityTest().main()"
      },
      {
        "sha": "685bf33ce2fcc7fb402eff49366cd7f2c852b436",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc260ed8014428ff7376e2175fd25f3f840468b3/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc260ed8014428ff7376e2175fd25f3f840468b3/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=cc260ed8014428ff7376e2175fd25f3f840468b3",
        "patch": "@@ -137,6 +137,10 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblock->vtx.push_back(CTransaction());\n     pblocktemplate->vTxFees.push_back(-1); // updated at end\n     pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n+    bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n+    if (fPrintPriority) {\n+        pblocktemplate->vTxPriorities.push_back(-1);  // n/a\n+    }\n \n     LOCK2(cs_main, mempool.cs);\n     CBlockIndex* pindexPrev = chainActive.Tip();\n@@ -331,6 +335,7 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n                   dPriority,\n                   CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n                   iter->GetTx().GetHash().ToString());\n+        pblocktemplate->vTxPriorities.push_back(dPriority);\n     }\n }\n "
      },
      {
        "sha": "5c8c1c00541ea331298f7f40de940f36c924b885",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc260ed8014428ff7376e2175fd25f3f840468b3/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc260ed8014428ff7376e2175fd25f3f840468b3/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=cc260ed8014428ff7376e2175fd25f3f840468b3",
        "patch": "@@ -29,6 +29,7 @@ struct CBlockTemplate\n     CBlock block;\n     std::vector<CAmount> vTxFees;\n     std::vector<int64_t> vTxSigOpsCost;\n+    std::vector<double> vTxPriorities;\n     std::vector<unsigned char> vchCoinbaseCommitment;\n };\n "
      },
      {
        "sha": "8c91ee64c5ab7b1365df50927168c9b7544e38e1",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc260ed8014428ff7376e2175fd25f3f840468b3/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc260ed8014428ff7376e2175fd25f3f840468b3/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=cc260ed8014428ff7376e2175fd25f3f840468b3",
        "patch": "@@ -588,6 +588,9 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         }\n         entry.push_back(Pair(\"sigops\", nTxSigOps));\n         entry.push_back(Pair(\"weight\", GetTransactionWeight(tx)));\n+        if (index_in_template && !pblocktemplate->vTxPriorities.empty()) {\n+            entry.push_back(Pair(\"priority\", pblocktemplate->vTxPriorities[index_in_template]));\n+        }\n \n         transactions.push_back(entry);\n     }"
      }
    ]
  },
  {
    "sha": "6704f5b434d5a090bc96a9ec2e4087a722b04607",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzA0ZjViNDM0ZDVhMDkwYmM5NmE5ZWMyZTQwODdhNzIyYjA0NjA3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-13T04:38:24Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-11-16T15:01:22Z"
      },
      "message": "QA: Extend txn_priority test to check across a reorganisation",
      "tree": {
        "sha": "ed849e52f9cd4ee125bca3274df9b76332fd2149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed849e52f9cd4ee125bca3274df9b76332fd2149"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6704f5b434d5a090bc96a9ec2e4087a722b04607",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6704f5b434d5a090bc96a9ec2e4087a722b04607",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6704f5b434d5a090bc96a9ec2e4087a722b04607",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6704f5b434d5a090bc96a9ec2e4087a722b04607/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc260ed8014428ff7376e2175fd25f3f840468b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc260ed8014428ff7376e2175fd25f3f840468b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc260ed8014428ff7376e2175fd25f3f840468b3"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 75,
      "deletions": 16
    },
    "files": [
      {
        "sha": "83d40e9d3b5e40d3ab24158047a17637a1511278",
        "filename": "qa/rpc-tests/txn_priority.py",
        "status": "modified",
        "additions": 75,
        "deletions": 16,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6704f5b434d5a090bc96a9ec2e4087a722b04607/qa/rpc-tests/txn_priority.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6704f5b434d5a090bc96a9ec2e4087a722b04607/qa/rpc-tests/txn_priority.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_priority.py?ref=6704f5b434d5a090bc96a9ec2e4087a722b04607",
        "patch": "@@ -9,11 +9,12 @@\n from test_framework.util import *\n \n from binascii import a2b_hex, b2a_hex\n+from decimal import Decimal\n \n def find_unspent(node, txid, amount):\n     for utxo in node.listunspent(0):\n         if utxo['txid'] != txid: continue\n-        if float(utxo['amount']) != amount: continue\n+        if utxo['amount'] != amount: continue\n         return {'txid': utxo['txid'], 'vout': utxo['vout']}\n \n def solve_template_hex(tmpl, txlist):\n@@ -35,11 +36,14 @@ def get_modified_size(node, txdata):\n def assert_approximate(a, b):\n     assert_equal(int(a), int(b))\n \n+BTC = Decimal('100000000')\n+\n class PriorityTest(BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n-        self.num_nodes = 2\n+        self.num_nodes = 4\n+        self.testmsg_num = 0\n \n     def add_options(self, parser):\n         parser.add_option(\"--gbt\", dest=\"test_gbt\", default=False, action=\"store_true\",\n@@ -53,14 +57,10 @@ def setup_nodes(self):\n         nodes = []\n         nodes.append(start_node(0, self.options.tmpdir, ['-blockmaxsize=0']))\n         nodes.append(start_node(1, self.options.tmpdir, ['-blockprioritysize=1000000', '-blockmaxsize=1000000'] + ppopt))\n+        nodes.append(start_node(2, self.options.tmpdir, ['-blockmaxsize=0']))\n+        nodes.append(start_node(3, self.options.tmpdir, ['-blockmaxsize=0']))\n         return nodes\n \n-    def setup_network(self, split=False):\n-        self.nodes = self.setup_nodes()\n-        connect_nodes_bi(self.nodes,0,1)\n-        self.is_network_split = False\n-        self.sync_all()\n-\n     def assert_prio(self, txid, starting, current):\n         node = self.nodes[1]\n \n@@ -78,16 +78,21 @@ def assert_prio(self, txid, starting, current):\n             assert_approximate(mempoolentry['startingpriority'], starting)\n             assert_approximate(mempoolentry['currentpriority'], current)\n \n+    def testmsg(self, msg):\n+        self.testmsg_num += 1\n+        print('Test %d: %s' % (self.testmsg_num, msg))\n+\n     def run_test(self):\n         node = self.nodes[0]\n         miner = self.nodes[1]\n+\n         node.generate(50)\n         self.sync_all()\n         miner.generate(101)\n         self.sync_all()\n \n-        fee = 0.01\n-        amt = 11\n+        fee = Decimal('0.01')\n+        amt = Decimal('11')\n \n         txid_a = node.sendtoaddress(node.getnewaddress(), amt)\n         txdata_b = node.createrawtransaction([find_unspent(node, txid_a, amt)], {node.getnewaddress(): amt - fee})\n@@ -96,42 +101,96 @@ def run_test(self):\n         txid_b = node.sendrawtransaction(txdata_b)\n         self.sync_all()\n \n+        self.testmsg('priority starts at 0 with all unconfirmed inputs')\n         self.assert_prio(txid_b, 0, 0)\n \n+        self.testmsg('priority increases correctly when that input is mined')\n+\n         # Mine only the sendtoaddress transaction\n         tmpl = node.getblocktemplate()\n         rawblock = solve_template_hex(tmpl, [create_coinbase(tmpl['height']), a2b_hex(node.getrawtransaction(txid_a))])\n         assert_equal(node.submitblock(rawblock), None)\n         self.sync_all()\n \n-        self.assert_prio(txid_b, 0, amt * 1e8 / txmodsize_b)\n+        self.assert_prio(txid_b, 0, amt * BTC / txmodsize_b)\n+\n+        self.testmsg('priority continues to increase the deeper the block confirming its inputs gets buried')\n \n         node.generate(2)\n         self.sync_all()\n \n-        self.assert_prio(txid_b, 0, amt * 1e8 * 3 / txmodsize_b)\n+        self.assert_prio(txid_b, 0, amt * BTC * 3 / txmodsize_b)\n+\n+        self.testmsg('with a confirmed input, the initial priority is calculated correctly')\n \n         miner.generate(4)\n         self.sync_all()\n \n-        txdata_c = node.createrawtransaction([find_unspent(node, txid_b, amt - fee)], {node.getnewaddress(): amt - (fee * 2)})\n+        amt_c = (amt - fee) / 2\n+        amt_c2 = amt_c - (fee * 2)  # could be just amt_c-fee, but then it'd be undiscernable later on\n+        txdata_c = node.createrawtransaction([find_unspent(node, txid_b, amt - fee)], {node.getnewaddress(): amt_c, node.getnewaddress(): amt_c2})\n         txdata_c = node.signrawtransaction(txdata_c)['hex']\n         txmodsize_c = get_modified_size(node, txdata_c)\n         txid_c = node.sendrawtransaction(txdata_c)\n         self.sync_all()\n \n-        txid_c_starting_prio = (amt - fee) * 1e8 * 4 / txmodsize_c\n+        txid_c_starting_prio = (amt - fee) * BTC * 4 / txmodsize_c\n         self.assert_prio(txid_c, txid_c_starting_prio, txid_c_starting_prio)\n \n+        self.testmsg('with an input confirmed prior to the transaction, the priority gets incremented correctly as it gets buried deeper')\n+\n         node.generate(1)\n         self.sync_all()\n \n-        self.assert_prio(txid_c, txid_c_starting_prio, (amt - fee) * 1e8 * 5 / txmodsize_c)\n+        self.assert_prio(txid_c, txid_c_starting_prio, (amt - fee) * BTC * 5 / txmodsize_c)\n+\n+        self.testmsg('with an input confirmed prior to the transaction, the priority gets incremented correctly as it gets buried deeper and deeper')\n \n         node.generate(2)\n         self.sync_all()\n \n-        self.assert_prio(txid_c, txid_c_starting_prio, (amt - fee) * 1e8 * 7 / txmodsize_c)\n+        self.assert_prio(txid_c, txid_c_starting_prio, (amt - fee) * BTC * 7 / txmodsize_c)\n+\n+        print('(preparing for reorg test)')\n+\n+        miner.generate(1)\n+        self.sync_all()\n+\n+        self.split_network()\n+        node = self.nodes[0]\n+        miner = self.nodes[1]\n+        competing_miner = self.nodes[2]\n+\n+        txdata_d = node.createrawtransaction([find_unspent(node, txid_c, amt_c)], {node.getnewaddress(): amt_c - fee})\n+        txdata_d = node.signrawtransaction(txdata_d)['hex']\n+        txmodsize_d = get_modified_size(node, txdata_d)\n+        txid_d = node.sendrawtransaction(txdata_d)\n+        self.sync_all()\n+\n+        miner.generate(1)\n+        self.sync_all()\n+\n+        txdata_e = node.createrawtransaction([find_unspent(node, txid_d, amt_c - fee), find_unspent(node, txid_c, amt_c2)], {node.getnewaddress(): (amt_c - fee) + amt_c2 - fee})\n+        txdata_e = node.signrawtransaction(txdata_e)['hex']\n+        txmodsize_e = get_modified_size(node, txdata_e)\n+        txid_e = node.sendrawtransaction(txdata_e)\n+        self.sync_all()\n+\n+        txid_e_starting_prio = (((amt_c - fee) * BTC) + (amt_c2 * BTC * 2)) / txmodsize_e\n+        self.assert_prio(txid_e, txid_e_starting_prio, txid_e_starting_prio)  # Sanity check 1\n+\n+        competing_miner.generate(5)\n+        self.sync_all()\n+\n+        self.assert_prio(txid_e, txid_e_starting_prio, txid_e_starting_prio)  # Sanity check 2\n+\n+        self.testmsg('priority is updated correctly when input-confirming block is reorganised out')\n+\n+        connect_nodes_bi(self.nodes, 1, 2)\n+        self.sync_all()\n+\n+        txid_e_reorg_prio = (amt_c2 * BTC * 6) / txmodsize_e\n+        self.assert_prio(txid_e, txid_e_starting_prio, txid_e_reorg_prio)\n \n if __name__ == '__main__':\n     PriorityTest().main()"
      }
    ]
  },
  {
    "sha": "92c18a4634ae488d4ee7ff33fe4e64c1809d0674",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmMxOGE0NjM0YWU0ODhkNGVlN2ZmMzNmZTRlNjRjMTgwOWQwNjc0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-13T20:29:32Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-11-16T15:01:22Z"
      },
      "message": "Bugfix: Correct off-by-one errors in getrawmempool startingpriority and currentpriority\n\n- Since the transaction arrives after block N, its starting priority is that for block N+1.\n- The current priority is likewise as considered for mining the next block.",
      "tree": {
        "sha": "a7698be9c366102b3868ab93ce63eca63f9dbd87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7698be9c366102b3868ab93ce63eca63f9dbd87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92c18a4634ae488d4ee7ff33fe4e64c1809d0674",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92c18a4634ae488d4ee7ff33fe4e64c1809d0674",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92c18a4634ae488d4ee7ff33fe4e64c1809d0674",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92c18a4634ae488d4ee7ff33fe4e64c1809d0674/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6704f5b434d5a090bc96a9ec2e4087a722b04607",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6704f5b434d5a090bc96a9ec2e4087a722b04607",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6704f5b434d5a090bc96a9ec2e4087a722b04607"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f2d1800600466c1cb985191260017342f73c47d3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c18a4634ae488d4ee7ff33fe4e64c1809d0674/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c18a4634ae488d4ee7ff33fe4e64c1809d0674/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=92c18a4634ae488d4ee7ff33fe4e64c1809d0674",
        "patch": "@@ -1334,7 +1334,8 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         pool.ApplyDeltas(hash, nPriorityDummy, nModifiedFees);\n \n         CAmount inChainInputValue;\n-        double dPriority = view.GetPriority(tx, chainActive.Height(), inChainInputValue);\n+        // Since entries arrive *after* the tip's height, their priority is for the height+1\n+        double dPriority = view.GetPriority(tx, chainActive.Height() + 1, inChainInputValue);\n \n         // Keep track of transactions that spend a coinbase, which we re-scan\n         // during reorgs to ensure COINBASE_MATURITY is still met."
      },
      {
        "sha": "8c42bbe73b1a7f7677f5ca4e91facdd67ac6f15b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c18a4634ae488d4ee7ff33fe4e64c1809d0674/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c18a4634ae488d4ee7ff33fe4e64c1809d0674/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=92c18a4634ae488d4ee7ff33fe4e64c1809d0674",
        "patch": "@@ -359,7 +359,7 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n     info.push_back(Pair(\"time\", e.GetTime()));\n     info.push_back(Pair(\"height\", (int)e.GetHeight()));\n     info.push_back(Pair(\"startingpriority\", e.GetStartingPriority()));\n-    info.push_back(Pair(\"currentpriority\", e.GetPriority(chainActive.Height())));\n+    info.push_back(Pair(\"currentpriority\", e.GetPriority(chainActive.Height() + 1)));\n     info.push_back(Pair(\"descendantcount\", e.GetCountWithDescendants()));\n     info.push_back(Pair(\"descendantsize\", e.GetSizeWithDescendants()));\n     info.push_back(Pair(\"descendantfees\", e.GetModFeesWithDescendants()));"
      },
      {
        "sha": "7017739ef9c2ef0e55e2c474e6f05c2aede537d2",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c18a4634ae488d4ee7ff33fe4e64c1809d0674/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c18a4634ae488d4ee7ff33fe4e64c1809d0674/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=92c18a4634ae488d4ee7ff33fe4e64c1809d0674",
        "patch": "@@ -40,7 +40,8 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n \n     feeDelta = 0;\n \n-    cachedHeight = entryHeight;\n+    // Since entries arrive *after* the tip's height, their entry priority is for the height+1\n+    cachedHeight = entryHeight + 1;\n     cachedPriority = entryPriority;\n \n     nCountWithAncestors = 1;"
      }
    ]
  },
  {
    "sha": "fab562bd269c19e70c9b28eb93c6564a63f08608",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI1NjJiZDI2OWMxOWU3MGM5YjI4ZWI5M2M2NTY0YTYzZjA4NjA4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-02-26T12:30:00Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-11-16T15:01:22Z"
      },
      "message": "Bugfix: rpc-tests/txn_priority: When connecting disconnected nodes, their mempools may not sync, so only sync blocks",
      "tree": {
        "sha": "89511c4c75fab48dd66e0e1673280f3c86ad3408",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89511c4c75fab48dd66e0e1673280f3c86ad3408"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab562bd269c19e70c9b28eb93c6564a63f08608",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab562bd269c19e70c9b28eb93c6564a63f08608",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab562bd269c19e70c9b28eb93c6564a63f08608",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab562bd269c19e70c9b28eb93c6564a63f08608/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92c18a4634ae488d4ee7ff33fe4e64c1809d0674",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92c18a4634ae488d4ee7ff33fe4e64c1809d0674",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92c18a4634ae488d4ee7ff33fe4e64c1809d0674"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "107226613a95c9b23ca85d0645945eb8976afdf5",
        "filename": "qa/rpc-tests/txn_priority.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab562bd269c19e70c9b28eb93c6564a63f08608/qa/rpc-tests/txn_priority.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab562bd269c19e70c9b28eb93c6564a63f08608/qa/rpc-tests/txn_priority.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_priority.py?ref=fab562bd269c19e70c9b28eb93c6564a63f08608",
        "patch": "@@ -186,8 +186,10 @@ def run_test(self):\n \n         self.testmsg('priority is updated correctly when input-confirming block is reorganised out')\n \n+        # NOTE: We cannot use join_network because it restarts the nodes (thus losing the mempool)\n         connect_nodes_bi(self.nodes, 1, 2)\n-        self.sync_all()\n+        self.is_network_split = False\n+        sync_blocks(self.nodes)\n \n         txid_e_reorg_prio = (amt_c2 * BTC * 6) / txmodsize_e\n         self.assert_prio(txid_e, txid_e_starting_prio, txid_e_reorg_prio)"
      }
    ]
  },
  {
    "sha": "ae93a9551038aac622116ef5e22a4abf6e543a38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTkzYTk1NTEwMzhhYWM2MjIxMTZlZjVlMjJhNGFiZjZlNTQzYTM4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-08-25T23:01:47Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-11-16T15:01:23Z"
      },
      "message": "CTxMemPool::check: Use height+1 for priority comparison, since height is not guaranteed to work",
      "tree": {
        "sha": "3b25365b122edc350fdbeda70e65691150f1911a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b25365b122edc350fdbeda70e65691150f1911a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae93a9551038aac622116ef5e22a4abf6e543a38",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae93a9551038aac622116ef5e22a4abf6e543a38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae93a9551038aac622116ef5e22a4abf6e543a38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae93a9551038aac622116ef5e22a4abf6e543a38/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab562bd269c19e70c9b28eb93c6564a63f08608",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab562bd269c19e70c9b28eb93c6564a63f08608",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab562bd269c19e70c9b28eb93c6564a63f08608"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d52f60c3ca07eb43342c9be53f98bf794d01eb34",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae93a9551038aac622116ef5e22a4abf6e543a38/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae93a9551038aac622116ef5e22a4abf6e543a38/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ae93a9551038aac622116ef5e22a4abf6e543a38",
        "patch": "@@ -701,8 +701,8 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins, unsigned int nBlockHeight)\n         unsigned int i = 0;\n         checkTotal += it->GetTxSize();\n         CAmount dummyValue;\n-        double freshPriority = view.GetPriority(it->GetTx(), nBlockHeight, dummyValue);\n-        double cachePriority = it->GetPriority(nBlockHeight);\n+        double freshPriority = view.GetPriority(it->GetTx(), nBlockHeight + 1, dummyValue);\n+        double cachePriority = it->GetPriority(nBlockHeight + 1);\n         double priDiff = cachePriority > freshPriority ? cachePriority - freshPriority : freshPriority - cachePriority;\n         // Verify that the difference between the on the fly calculation and a fresh calculation\n         // is small enough to be a result of double imprecision."
      }
    ]
  }
]