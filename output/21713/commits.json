[
  {
    "sha": "9a0653553a0ec403b4e7c6713466e0c7fa10ec94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTA2NTM1NTNhMGVjNDAzYjRlN2M2NzEzNDY2ZTBjN2ZhMTBlYzk0",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2021-04-16T23:43:37Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2021-04-17T08:55:19Z"
      },
      "message": "Refactor ProcessNewBlock to reduce code duplication",
      "tree": {
        "sha": "66259792c7f08688a29d7ee9227cf36815785eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66259792c7f08688a29d7ee9227cf36815785eb4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a0653553a0ec403b4e7c6713466e0c7fa10ec94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a0653553a0ec403b4e7c6713466e0c7fa10ec94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a0653553a0ec403b4e7c6713466e0c7fa10ec94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a0653553a0ec403b4e7c6713466e0c7fa10ec94/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e69370b150658beef95c25992fb329e5a4b8526",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e69370b150658beef95c25992fb329e5a4b8526",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e69370b150658beef95c25992fb329e5a4b8526"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 17,
      "deletions": 24
    },
    "files": [
      {
        "sha": "b3927b5ec5ba0db86956f6e5c6693b7ebf470ed9",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 24,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a0653553a0ec403b4e7c6713466e0c7fa10ec94/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a0653553a0ec403b4e7c6713466e0c7fa10ec94/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9a0653553a0ec403b4e7c6713466e0c7fa10ec94",
        "patch": "@@ -451,6 +451,8 @@ class PeerManagerImpl final : public PeerManager\n \n     void ProcessGetData(CNode& pfrom, Peer& peer, const std::atomic<bool>& interruptMsgProc) EXCLUSIVE_LOCKS_REQUIRED(peer.m_getdata_requests_mutex) LOCKS_EXCLUDED(::cs_main);\n \n+    void ProcessBlock(CNode& pfrom, const std::shared_ptr<const CBlock>& pblock, bool fForceProcessing);\n+\n     /** Relay map (txid or wtxid -> CTransactionRef) */\n     typedef std::map<uint256, CTransactionRef> MapRelay;\n     MapRelay mapRelay GUARDED_BY(cs_main);\n@@ -2309,6 +2311,18 @@ void PeerManagerImpl::ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv)\n     m_connman.PushMessage(&peer, std::move(msg));\n }\n \n+void PeerManagerImpl::ProcessBlock(CNode& pfrom, const std::shared_ptr<const CBlock>& pblock, bool fForceProcessing)\n+{\n+    bool fNewBlock = false;\n+    m_chainman.ProcessNewBlock(m_chainparams, pblock, fForceProcessing, &fNewBlock);\n+    if (fNewBlock) {\n+        pfrom.nLastBlockTime = GetTime();\n+    } else {\n+        LOCK(cs_main);\n+        mapBlockSource.erase(pblock->GetHash());\n+    }\n+}\n+\n void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n                                      const std::chrono::microseconds time_received,\n                                      const std::atomic<bool>& interruptMsgProc)\n@@ -3390,7 +3404,6 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 LOCK(cs_main);\n                 mapBlockSource.emplace(pblock->GetHash(), std::make_pair(pfrom.GetId(), false));\n             }\n-            bool fNewBlock = false;\n             // Setting fForceProcessing to true means that we bypass some of\n             // our anti-DoS protections in AcceptBlock, which filters\n             // unrequested blocks that might be trying to waste our resources\n@@ -3400,13 +3413,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            m_chainman.ProcessNewBlock(m_chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n-                pfrom.nLastBlockTime = GetTime();\n-            } else {\n-                LOCK(cs_main);\n-                mapBlockSource.erase(pblock->GetHash());\n-            }\n+            ProcessBlock(pfrom, pblock, /*fForceProcessing=*/true);\n             LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n             if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n                 // Clear download state for this block, which is in\n@@ -3483,20 +3490,13 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             }\n         } // Don't hold cs_main when we call into ProcessNewBlock\n         if (fBlockRead) {\n-            bool fNewBlock = false;\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n             // This bypasses some anti-DoS logic in AcceptBlock (eg to prevent\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            m_chainman.ProcessNewBlock(m_chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n-                pfrom.nLastBlockTime = GetTime();\n-            } else {\n-                LOCK(cs_main);\n-                mapBlockSource.erase(pblock->GetHash());\n-            }\n+            ProcessBlock(pfrom, pblock, /*fForceProcessing=*/true);\n         }\n         return;\n     }\n@@ -3551,14 +3551,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // cs_main in ProcessNewBlock is fine.\n             mapBlockSource.emplace(hash, std::make_pair(pfrom.GetId(), true));\n         }\n-        bool fNewBlock = false;\n-        m_chainman.ProcessNewBlock(m_chainparams, pblock, forceProcessing, &fNewBlock);\n-        if (fNewBlock) {\n-            pfrom.nLastBlockTime = GetTime();\n-        } else {\n-            LOCK(cs_main);\n-            mapBlockSource.erase(pblock->GetHash());\n-        }\n+        ProcessBlock(pfrom, pblock, forceProcessing);\n         return;\n     }\n "
      }
    ]
  }
]