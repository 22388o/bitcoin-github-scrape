DrahtBot,2021-06-28 09:55:37,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/22359#issuecomment-869546300,869546300,
MarcoFalke,2021-06-29 14:23:05,@promag I agree. This is also my preferred solution (see #18840). Happy to reopen that one.,https://github.com/bitcoin/bitcoin/pull/22359#issuecomment-870646789,870646789,
ryanofsky,2021-06-29 16:02:20,"I could be missing something but it seems to me neither solution is clearly correct in all cases. The advantages of this solution over [#18440](https://github.com/bitcoin/bitcoin/pull/18840) are that:\n\n- It's more obvious what this solution is trying to do. This solution is plainly updating mempool status to reflect what's in the mempool, where [#18440](https://github.com/bitcoin/bitcoin/pull/",https://github.com/bitcoin/bitcoin/pull/22359#issuecomment-870725266,870725266,
ryanofsky,2021-06-29 16:28:31,"> For example could add `std::condition_variable m_mempool_cv;` to `CWallet` and `m_mempool_cv.notify_all()` in `transactionRemovedFromMempool()` and `m_mempool_cv.wait(lock, []{return !replaced_tx.fInMempool})` in `bumpfee`\n\nThinking about this, in a really pathological case where a replaced transaction got added back to the mempool, this could hang. Dropping `CWalletTx::fInMempool` and givin",https://github.com/bitcoin/bitcoin/pull/22359#issuecomment-870744344,870744344,
luke-jr,2021-06-29 18:18:16,Should we do this in `transactionRemovedFromMempool` too perhaps?,https://github.com/bitcoin/bitcoin/pull/22359#issuecomment-870813656,870813656,
promag,2021-06-29 21:14:43,"Maybe it should avoid `fInMempool` in some cases, like in `CWallet::AbandonTransaction`:\n```diff\n@@ -1078,10 +1078,11 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n     std::set<uint256> done;\n\n     // Can't mark abandoned if confirmed or in mempool\n+    if (chain().isInMempool(hashTx)) return false;\n     auto it = mapWallet.find(hashTx);\n     assert(it != mapWallet.en",https://github.com/bitcoin/bitcoin/pull/22359#issuecomment-870923301,870923301,
MarcoFalke,2021-07-01 08:48:26,"> Should we do this in transactionRemovedFromMempool too perhaps?\n\nThx, done.",https://github.com/bitcoin/bitcoin/pull/22359#issuecomment-872054528,872054528,
MarcoFalke,2021-07-01 08:50:08,"> Maybe it should avoid fInMempool in some cases, like in CWallet::AbandonTransaction:\n\nMaybe the mempool status should be removed and simply be queried when needed? Otherwise it just seems like applying random patches that happen to improve the situation, but don't actually fix the underlying issue.",https://github.com/bitcoin/bitcoin/pull/22359#issuecomment-872055668,872055668,
ryanofsky,2021-07-01 09:35:39,"> Maybe the mempool status should be removed and simply be queried when needed? \n\nI think there are two drawbacks to querying the mempool when needed:\n\n- Conceptually it seems less appealing because it means coin selection, balance checking, etc code is combining mempool and chain state from two different points in time instead of one point. Instead of using chain and mempool state from th",https://github.com/bitcoin/bitcoin/pull/22359#issuecomment-872089855,872089855,
ryanofsky,2021-07-01 22:23:50,"> I think if we combine transaction states ([730df28](https://github.com/bitcoin/bitcoin/commit/730df28e00822f06c9fc11c86a74f764a2f5136c) from #21206) with the notify suggestion mentioned earlier (in [#22359 (comment)](https://github.com/bitcoin/bitcoin/pull/22359#issuecomment-870725266) and [#22359 (comment)](https://github.com/bitcoin/bitcoin/pull/22359#issuecomment-870744344)), that is a clean ",https://github.com/bitcoin/bitcoin/pull/22359#issuecomment-872586827,872586827,
