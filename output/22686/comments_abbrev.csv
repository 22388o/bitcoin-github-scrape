achow101,2021-08-12 02:16:48,For 22.0 backport (this bug may cause other issues that are not as immediately obvious).,https://github.com/bitcoin/bitcoin/pull/22686#issuecomment-897294749,897294749,
fanquake,2021-08-12 03:11:21,"Failure in the [previous releases CI](https://cirrus-ci.com/task/6498169006587904?logs=ci#L3632). Similar to #18737 / #18737:\n```bash\n test  2021-08-12T02:39:40.038000Z TestFramework (ERROR): Assertion failed \n                                   Traceback (most recent call last):\n                                     File ""/tmp/cirrus-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/f",https://github.com/bitcoin/bitcoin/pull/22686#issuecomment-897313647,897313647,
DrahtBot,2021-08-12 19:18:15,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22049](https://github.com/bitcoin/bitcoin/pull/22049) (rpc: allow specifying min chain depth for inputs in fund calls by",https://github.com/bitcoin/bitcoin/pull/22686#issuecomment-897903241,897903241,
fanquake,2021-08-13 00:30:55,cc @Xekyo ,https://github.com/bitcoin/bitcoin/pull/22686#issuecomment-898062892,898062892,
achow101,2021-08-13 04:35:16,"> To be clear, the bug is that it is using the output value, even if we're not subtracting fee from outputs. We use `GetSelectionAmount` to switch between effective and output value as our target based on subtracting fee from outputs or not.\n> \n> This explanation should go in the commit message, or at least the OP to get pulled in on merge.\n\nI've added a specific explanation in the first c",https://github.com/bitcoin/bitcoin/pull/22686#issuecomment-898185311,898185311,
instagibbs,2021-08-15 07:12:46,utACK https://github.com/bitcoin/bitcoin/pull/22686/commits/92885c4f69a5e6fc4989677d6e5be8a666fbff0d,https://github.com/bitcoin/bitcoin/pull/22686#issuecomment-899007444,899007444,
Xekyo,2021-08-18 19:18:53,Post-merge utACK 92885c4f69a5e6fc4989677d6e5be8a666fbff0d,https://github.com/bitcoin/bitcoin/pull/22686#issuecomment-901367159,901367159,
fanquake,2021-08-19 00:00:08,@Xekyo thanks for following up.,https://github.com/bitcoin/bitcoin/pull/22686#issuecomment-901506462,901506462,
hebasto,2021-08-19 07:51:47,Backported in #22629.,https://github.com/bitcoin/bitcoin/pull/22686#issuecomment-901691019,901691019,
instagibbs,2021-08-13 02:09:32,"can this be done programmatically? \n\nblocks of comments means the chances of the description and/or the test going stale quite high\n\nin other words, can we get size estimations, calculate the final total, round properly, using python rather than english? ",https://github.com/bitcoin/bitcoin/pull/22686#discussion_r688196526,688196526,test/functional/rpc_fundrawtransaction.py
instagibbs,2021-08-13 02:12:43,Maybe create `DEFAULT_MAX_RAW_TX_FEE_RATE` constant and use that so you can refer to it later as well?,https://github.com/bitcoin/bitcoin/pull/22686#discussion_r688197443,688197443,test/functional/rpc_fundrawtransaction.py
instagibbs,2021-08-13 02:21:07,"am I correct in noting that `change_and_fee - change_amount` may be non-zero in `coin_selection_params.m_subtract_fee_outputs` instance in the case where change is dropped to fee?\n\njust thinking if any tighter assertion can be placed.",https://github.com/bitcoin/bitcoin/pull/22686#discussion_r688199891,688199891,src/wallet/spend.cpp
achow101,2021-08-13 02:45:47,"Yes. If `m_subtract_fee_outputs`, `change_and_fee - change_amount` can be positive, negative, or 0. It's pretty much a useless value in that case.",https://github.com/bitcoin/bitcoin/pull/22686#discussion_r688206940,688206940,src/wallet/spend.cpp
achow101,2021-08-13 04:35:21,Done,https://github.com/bitcoin/bitcoin/pull/22686#discussion_r688236670,688236670,test/functional/rpc_fundrawtransaction.py
achow101,2021-08-13 04:35:31,Done.. ish,https://github.com/bitcoin/bitcoin/pull/22686#discussion_r688236735,688236735,test/functional/rpc_fundrawtransaction.py
S3RK,2021-08-19 08:14:06,Why do we divide by 2 here?,https://github.com/bitcoin/bitcoin/pull/22686#discussion_r691888435,691888435,test/functional/rpc_fundrawtransaction.py
S3RK,2021-08-19 08:14:33,The test also passes with much higher upper_bound.,https://github.com/bitcoin/bitcoin/pull/22686#discussion_r691888763,691888763,test/functional/rpc_fundrawtransaction.py
achow101,2021-08-19 16:02:57,To get the byte length of the hex string.,https://github.com/bitcoin/bitcoin/pull/22686#discussion_r692268515,692268515,test/functional/rpc_fundrawtransaction.py
achow101,2021-08-19 16:04:11,"The lower and upper bounds are the minimum and maximum values that cause this test to fail prior to this PR. So a higher upper bound should still pass after this PR, and all values in between should pass after this PR.",https://github.com/bitcoin/bitcoin/pull/22686#discussion_r692269478,692269478,test/functional/rpc_fundrawtransaction.py
