[
  {
    "sha": "01c8af13ae65d314bb8cbef7cd51132ad93da294",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWM4YWYxM2FlNjVkMzE0YmI4Y2JlZjdjZDUxMTMyYWQ5M2RhMjk0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-13T04:43:24Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-07-07T19:22:30Z"
      },
      "message": "getblocktemplate: longpolling support",
      "tree": {
        "sha": "9965a8db54a94c6191be1f74ddde301ea5df6d56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9965a8db54a94c6191be1f74ddde301ea5df6d56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01c8af13ae65d314bb8cbef7cd51132ad93da294",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01c8af13ae65d314bb8cbef7cd51132ad93da294",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01c8af13ae65d314bb8cbef7cd51132ad93da294",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01c8af13ae65d314bb8cbef7cd51132ad93da294/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f748ff730b4570a19610db67aa9ded28ba98a8c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f748ff730b4570a19610db67aa9ded28ba98a8c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f748ff730b4570a19610db67aa9ded28ba98a8c5"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 77,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2783520bfd6fc79d3a2d0e8d96b8e5485cd85232",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01c8af13ae65d314bb8cbef7cd51132ad93da294/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01c8af13ae65d314bb8cbef7cd51132ad93da294/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=01c8af13ae65d314bb8cbef7cd51132ad93da294",
        "patch": "@@ -24,6 +24,9 @@\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n+#include <boost/thread/condition_variable.hpp>\n+#include <boost/thread/locks.hpp>\n+#include <boost/thread/mutex.hpp>\n \n using namespace std;\n using namespace boost;\n@@ -41,6 +44,8 @@ CCriticalSection cs_main;\n map<uint256, CBlockIndex*> mapBlockIndex;\n CChain chainActive;\n int64_t nTimeBestReceived = 0;\n+boost::mutex csBestBlock;\n+boost::condition_variable cvBlockChange;\n int nScriptCheckThreads = 0;\n bool fImporting = false;\n bool fReindex = false;\n@@ -1944,11 +1949,14 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     // New best block\n     nTimeBestReceived = GetTime();\n     mempool.AddTransactionsUpdated(1);\n+\n     LogPrintf(\"UpdateTip: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f\\n\",\n       chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n       Checkpoints::GuessVerificationProgress(chainActive.Tip()));\n \n+    cvBlockChange.notify_all();\n+\n     // Check the version of the last 100 blocks to see if we need to upgrade:\n     if (!fIsInitialDownload)\n     {"
      },
      {
        "sha": "fd0768b3adf068e04cd183f368c26818ecceaedb",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01c8af13ae65d314bb8cbef7cd51132ad93da294/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01c8af13ae65d314bb8cbef7cd51132ad93da294/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=01c8af13ae65d314bb8cbef7cd51132ad93da294",
        "patch": "@@ -28,6 +28,9 @@\n #include <utility>\n #include <vector>\n \n+#include <boost/thread/condition_variable.hpp>\n+#include <boost/thread/mutex.hpp>\n+\n class CBlockIndex;\n class CBloomFilter;\n class CInv;\n@@ -87,6 +90,8 @@ extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockSize;\n extern const std::string strMessageMagic;\n extern int64_t nTimeBestReceived;\n+extern boost::mutex csBestBlock;\n+extern boost::condition_variable cvBlockChange;\n extern bool fImporting;\n extern bool fReindex;\n extern bool fBenchmark;"
      },
      {
        "sha": "6378f388342a5e77c0106c416115e4f9b52b393f",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 1,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01c8af13ae65d314bb8cbef7cd51132ad93da294/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01c8af13ae65d314bb8cbef7cd51132ad93da294/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=01c8af13ae65d314bb8cbef7cd51132ad93da294",
        "patch": "@@ -3,13 +3,18 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <boost/date_time/posix_time/posix_time.hpp>\n+#include <boost/thread/locks.hpp>\n+#include <boost/thread/thread_time.hpp>\n+\n #include \"rpcserver.h\"\n #include \"chainparams.h\"\n #include \"init.h\"\n #include \"net.h\"\n #include \"main.h\"\n #include \"miner.h\"\n #include \"pow.h\"\n+#include \"util.h\"\n #ifdef ENABLE_WALLET\n #include \"db.h\"\n #include \"wallet.h\"\n@@ -324,6 +329,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n          );\n \n     std::string strMode = \"template\";\n+    Value lpval = Value::null;\n     if (params.size() > 0)\n     {\n         const Object& oparam = params[0].get_obj();\n@@ -336,6 +342,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         }\n         else\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n+        lpval = find_value(oparam, \"longpollid\");\n     }\n \n     if (strMode != \"template\")\n@@ -347,8 +354,56 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     if (IsInitialBlockDownload())\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n \n-    // Update block\n     static unsigned int nTransactionsUpdatedLast;\n+\n+    if (lpval.type() != null_type)\n+    {\n+        // Wait to respond until either the best block changes, OR a minute has passed and there are more transactions\n+        uint256 hashWatchedChain;\n+        boost::system_time checktxtime;\n+        unsigned int nTransactionsUpdatedLastLP;\n+\n+        if (lpval.type() == str_type)\n+        {\n+            // Format: <hashBestChain><nTransactionsUpdatedLast>\n+            std::string lpstr = lpval.get_str();\n+\n+            hashWatchedChain.SetHex(lpstr.substr(0, 64));\n+            nTransactionsUpdatedLastLP = atoi64(lpstr.substr(64));\n+        }\n+        else\n+        {\n+            // NOTE: Spec does not specify behaviour for non-string longpollid, but this makes testing easier\n+            hashWatchedChain = chainActive.Tip()->GetBlockHash();\n+            nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n+        }\n+\n+        LEAVE_CRITICAL_SECTION(pwalletMain->cs_wallet);\n+        LEAVE_CRITICAL_SECTION(cs_main);\n+        {\n+            checktxtime = boost::get_system_time() + boost::posix_time::minutes(1);\n+\n+            boost::unique_lock<boost::mutex> lock(csBestBlock);\n+            while (chainActive.Tip()->GetBlockHash() == hashWatchedChain && fRPCRunning)\n+            {\n+                if (!cvBlockChange.timed_wait(lock, checktxtime))\n+                {\n+                    // Timeout: Check transactions for update\n+                    if (nTransactionsUpdatedLast != nTransactionsUpdatedLastLP)\n+                        break;\n+                    checktxtime += boost::posix_time::seconds(10);\n+                }\n+            }\n+        }\n+        ENTER_CRITICAL_SECTION(cs_main);\n+        ENTER_CRITICAL_SECTION(pwalletMain->cs_wallet);\n+\n+        if (!fRPCRunning)\n+            throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");\n+        // TODO: Maybe recheck connections/IBD and (if something wrong) send an expires-immediately template to stop miners?\n+    }\n+\n+    // Update block\n     static CBlockIndex* pindexPrev;\n     static int64_t nStart;\n     static CBlockTemplate* pblocktemplate;\n@@ -436,6 +491,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     result.push_back(Pair(\"transactions\", transactions));\n     result.push_back(Pair(\"coinbaseaux\", aux));\n     result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n+    result.push_back(Pair(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast)));\n     result.push_back(Pair(\"target\", hashTarget.GetHex()));\n     result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n     result.push_back(Pair(\"mutable\", aMutable));"
      },
      {
        "sha": "67fbe6a4e867367ce0bdc38e7f1c82d438fdac54",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01c8af13ae65d314bb8cbef7cd51132ad93da294/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01c8af13ae65d314bb8cbef7cd51132ad93da294/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=01c8af13ae65d314bb8cbef7cd51132ad93da294",
        "patch": "@@ -33,6 +33,7 @@ using namespace std;\n static std::string strRPCUserColonPass;\n \n // These are created by StartRPCThreads, destroyed in StopRPCThreads\n+bool fRPCRunning = false;\n static asio::io_service* rpc_io_service = NULL;\n static map<string, boost::shared_ptr<deadline_timer> > deadlineTimers;\n static ssl::context* rpc_ssl_context = NULL;\n@@ -656,6 +657,8 @@ void StartRPCThreads()\n         return;\n     }\n \n+    fRPCRunning = true;\n+\n     rpc_worker_group = new boost::thread_group();\n     for (int i = 0; i < GetArg(\"-rpcthreads\", 4); i++)\n         rpc_worker_group->create_thread(boost::bind(&asio::io_service::run, rpc_io_service));\n@@ -678,6 +681,7 @@ void StopRPCThreads()\n {\n     if (rpc_io_service == NULL) return;\n \n+    fRPCRunning = false;\n     // First, cancel all timers and acceptors\n     // This is not done automatically by ->stop(), and in some cases the destructor of\n     // asio::io_service can hang if this is skipped.\n@@ -698,6 +702,7 @@ void StopRPCThreads()\n     deadlineTimers.clear();\n \n     rpc_io_service->stop();\n+    cvBlockChange.notify_all();\n     if (rpc_worker_group != NULL)\n         rpc_worker_group->join_all();\n     delete rpc_dummy_work; rpc_dummy_work = NULL;"
      },
      {
        "sha": "0fb6cb05a96d0db0697b564bed018d38d5368602",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01c8af13ae65d314bb8cbef7cd51132ad93da294/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01c8af13ae65d314bb8cbef7cd51132ad93da294/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=01c8af13ae65d314bb8cbef7cd51132ad93da294",
        "patch": "@@ -21,6 +21,8 @@\n class CBlockIndex;\n class CNetAddr;\n \n+extern bool fRPCRunning;\n+\n class AcceptedConnection\n {\n public:"
      }
    ]
  }
]